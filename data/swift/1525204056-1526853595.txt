I've trying to create a reactive, Flutter-inspired GUI framework built on top of GTK+: https://github.com/kirbyfan64/Amai It's still very WIP, but you can already utilize buttons, labels, inputs, and grids (which are most likely the only layout container to stay in GTK+ 4). It should run on both Linux and macOS, though the latter will look like garbage without a Quartz-native build of GTK. Eventual plans include a tool for macOS that bundles an OSX-like theme. 
Fantastic! I'm excited to dive in to your readings. I'm still new to coding in general and started with Swift as my first language. Really took the leap of faith with ARKit was announced. 
at least Xcode blinks its pair when you step over one with the arrow keys
&gt; JSON is now a single line of code in Swift Only if you're using JSON in a way that happens to map exactly to the simplest Codable use case -- and are using no other serialization formats. I can think of lots of simple and common tasks which are not well supported by Codable.
Here's a simple way to do this: 1. Make your \`User\` class conform to \`Codable\`. You should use a struct instead of a class here, so create a struct named \`User\` which conforms to \`Codable\`: &amp;#8203; struct User : Codable { var userName: String? var userAge: Int? enum UserCodingKeys: String, CodingKey { case name = "userName" case age = "userAge" } func encode(to encoder: Encoder) throws { var container = encoder.container(keyedBy: UserCodingKeys.self) try container.encode(userName, forKey: .name) try container.encode(userAge, forKey: .age) } } 2. Now, you can store details for a single user or multiple users: var userDetails: [User] = [ User(userName: "John", userAge: 21), User(userName: "Mary", userAge: 27), User(userName: "Richard", userAge: 32) ] 3. In order to save this data to UserDefaults, do this: UserDefaults.standard.set(try? PropertyListEncoder().encode(userDetails), forKey: "userDetails") 4. In order to read this data back, do this: if let userDetailsData = UserDefaults.standard.value(forKey: "userDetails") as? Data { let userDetailsArray = try? PropertyListDecoder().decode(Array&lt;User&gt;.self, from: userDetailsData) } In order to persist this data in memory, you can wrap up the loading/saving code in a Singleton and allow the application to access the data through a shared instance, like: class UsersAPI { static let sharedInstance: UsersAPI = UsersAPI() private var userDetails: [User]? = [User]() private init() { loadDataFromUserDefaults() } private func loadDataFromUserDefaults() { if let userDetailsData = UserDefaults.standard.value(forKey: "userDetails") as? Data { userDetails = try? PropertyListDecoder().decode(Array&lt;User&gt;.self, from: userDetailsData) } } func getUser(byName userName: String) -&gt; User? { return userDetails?.filter { $0.userName == userName }.first } } Now, you can get an \`User\` by simply calling: UsersAPI.sharedInstance.getUser(byName: "John") It will be an optional, so make sure you perform nil check before getting its properties.
Thank you for the explanation. so much to learn! Thank you for making it possible for me to finish this project. Can't believe Apple has not fix this problem. It's been like, what 10 months? I guess this is a low priority for them. Thank you again for the help. 
I've searched and have some results, but in the past, searching for this topic didn't return useful results. This is why I asked for a link to what you know. Configurator wipes your device is you set it up to be managed or "supervised". : / https://support.jamfnow.com/hc/en-us/articles/207704656-Supervise-iOS-devices-with-Apple-Configurator-v2-5- &gt; Note: Any time you enable Supervision on an iOS device, the device will be erased. Relying on data stumbled across on the internet isn't the best. Actual useful docs from Apple are. That's why I asked. With regards to enterprise OTA distros, OP doesn't have enough money for a developer license, so I think enterprise distros are beyond him. 
Thank you
They start out with the same colors for specific types of characters. Only when you get more than a few of the same characters, you see the full rainbow. But that still goes in a specific order. You get used to it in a few minutes.
XCode is a lost cause 
Is CloudKit free to use? Sounds like that would be a great way to go 
i like the idea. tho some of the colors are really hard to see giving emphasis to some brackets more than others. might actually make me miss a bracket easier. 
That probably means your code needs refactoring.
Firebase is extremely generous with their free tier, and if you get to the point where you need to scale, you can opt for a $25/month plan or pay as you go. 
I really like this idea. I could see it being annoying as you’re scrolling around, though - maybe make it bold after stopping for a second. 
I'm working on my app [Nano for Reddit](https://itunes.apple.com/us/app/nano-for-reddit/id1344097185?mt=8&amp;ign-mpt=uo%3D4). I'm working on some bug fixes as well as some new features for the 1.1 update.
Have you looked at existing systems or considered building a web app instead of native? Your question isn’t dumb, but it is a basic question with an obvious answer—yes, you need a database outside of the app—given the fact that you have multiple clients. At the very least consider partnering with a more-experienced developer to get architecture design feedback. Inventory management is rarely as simple as it seems. 
left and right arrow keys. better?
And more code folding options as well. Or maybe I just havne't found out how to do it yet.I'm used to CLion automatically having the option for me to fold code in the gutter, so maybe i need to set it do allow code folding or something
This is a silly, nearly useless thing, but I like it! Color my shit up!
You can only access core data objects on the same thread they were fetched on. That’s why the fetch happens on the main thread. 
that really sucks. I use XCode a lot for C,C++, and Swift but i also use CLion &amp; AppCode for the same reasons. In a convoluted way it all works out though.
&gt; In my opinion Swift on the server is not really going to happen unless some major players get behind it and roll out a solid infrastructure in terms of frameworks and tools. Seriously, Vapor 3.0 is pretty freaking god damn good and now works seamlessly with the SPM, so much so that it actually makes you wish you could use the SPM for iOS apps. It feels like the real deal now, it's no longer edgy at all. 
Can you be more specific? Can you provide the Dropbox url or an example? What are “security keys”? Have you searched for an existing Dropbox Swift SDK?
abstraction over concretion ;)
### Multi-threaded Core Data vs. Asynchronous Fetching Setting up a separate context and thread for Core Data allows you to perform any necessary operations \(Fetching, Inserting, Deleting, Modifying\) on your managed objects on a background thread. This will free up your main thread for smooth user interaction. However, even on that background thread, each operation will block the context while it’s being performed. [https://www.bignerdranch.com/blog/new\-in\-core\-data\-and\-iOS\-8\-asynchronous\-fetching/](https://www.bignerdranch.com/blog/new-in-core-data-and-iOS-8-asynchronous-fetching/) I've never heard about not being able to access data object from a different thread. I don't see why you couldn't get to the data that was processed on a different thread. Kinda defeats the whole purpose of a multi\-threaded system. I don't have time to write a test to prove/disprove what others say, but BNR has been around iOS for a long time... I'd read their post about it. As far as speed goes, you really have to look at the machine, the data lines, what else is running, server response time, etc... Asking a generic question about data fetching speed isn't going to have much value, too many factors.
He didn't say all nested code is bad. He said it's a code smell. The more there are the worse it is. If it takes effort to figure out how nested you are at any point in time then your code is bad. I'm actually in fan of the opposite. Your brackets should be black and shouldn't blink. If you ever get confused due to it then you should reevaluate the code structure. 
You don't need to be on the main thread to use core data. You need to be on the main thread if you are going through the AppDelegate. Since iOS10, they added the NSPersistentContainer class. Which might be the answer to the OP's question. Xcode modifies the AppDelegate when you check the core data box which points people toward it. Older tutorials use this method. And using that keeps you on the main thread. Plus core data is fast enough that this doesn't become an issue when learning. Especially given that it tends to be used when the view appears or goes away. So there isn't much to force the switch. It's not until you get into slinging around large amounts of data where you start looking for a better way. 
It’s free provided you have a paid developer account
Don't do it on the main thread. That's for your UI to refresh on.
*TL;DR* Start as simple as possible. I've been using Core Data professionally for years, and my experience is there's no reason to worry about setting up your stack to avoid the UI thread before you need to. I've worked with some really smart people (way smarter than me) who spent months investigating &amp; implementing different context configurations to address their performance problems when the *actual* problems were far more mundane and fundamental. There are tons of configuration options: [SQL store] – [PSC] – [main context] The most basic, and where you should start. Anything else is premature optimization. You could easily end up getting *worse* performance if you pick a more unique option. [SQL store] – [PSC] – [main context] – [temporary main context] Great for when you have work that you might want to save or abandon. You make a new main queue context as a child of the *main* main queue context, make your changes in there and either save it or discard it without affecting anything else. It's a natural extension of the first option, and easy to add if needed. [SQL store] – [PSC] – [BG context] – [main context] This one can be nice because you don't have to block your main thread while your SQL changes get written to disk. Until you execute a new fetch request while the BG context is saving, and all of a sudden everything locks up for an unfortunate amount of time (I've seen UI lock up for 30+ seconds under this configuration). [SQL store] – [PSC] – [main context] \ – [background context] Great for doing batch work in the background without blocking your main context (mostly). Not so great if the user can be doing other things which can conflict with the background work. And there's more and more options, each with pros and cons. You can have multiple persistent stores, multiple persistent store coordinators, and so on. Related unsolicited advice: - **The best strategy for dealing with large datasets: don't.** Seriously. Don't try to load thousands of records from the internet and sync them into your database as the user is working in your app. Load things on-demand, or in batches. Paginate your remote data. Core Data uses "faults" as placeholders for data it hasn't fully delivered from the persistent store – you should treat your remote data the same way. - **Never (ever) use "parent" entities.** The Core Data editor lets you set one entity as a parent for another, and this is a *very* bad idea 99% of the time. Parent and child entities all get stored in the same SQLite table, meaning you end up with tons of columns and many null values, which is super bad for SQLite. I've seen this kill projects. - **If possible, use an in-memory store** Instead of SQLite, you can keep your whole object graph in memory. Only useful if you can throw out all your data when the app terminates, which is uncommon but not unheard of. But if you can do this, it will eclipse any other optimization you make. - **[Turn this on](https://oleb.net/blog/2014/06/core-data-concurrency-debugging/)**. Never, ever use Core Data without it. It blows up when you make a mistake in development, and will get you in the right habits. Soon enough you won't make any queue concurrency mistakes. 
There isn't necessarily one answer. Does it make sense for the user to go back? If it's a newspaper app, and you're showing a loading indicator while fetching an article the user selected, then yes they should be able to navigate backwards (effectively canceling the load). However if they've just left an "approve this payment" screen and the loading indicator means we're waiting for a transaction to be confirmed, it may not make sense to allow them to exit the current screen. It's all going to depend on the user experience for a particular application and flow.
Thanks for the clarification. That makes a lot of sense. 
These get posted here frequently, and I’ve yet to see a course at full price. Just be careful with what you get, as some of them are fairly low quality. The Angela Yu course does seem to get a lot of praise. 
No problem! Good luck with the app.
Ah, thanks. Then I don't have to rush it. I am just wary of it being a subscription. If it's 11 euros for the entire course, and you can go at your own pace, that seems pretty good.
No subscription and no hidden cost is a big plus. It's a little hard to tell though. 
Yeah. I actually got Nanodegree from Udacity. It is definitely worth the money and you get professional feedback and career advice
Huh, well that makes it tempting. Can you think of any reason NOT to pay for this course? 
I bought about 6\~8 of them last year. They were all on sale from $10\~$20. No scam, one time charge only. You get forever access. One of the only downsides is their mobile app sucks. It burned an image in my phone and I had to restart the app every time I took a break. Kinda funny they can't make a mobile app that works :D
You can still take free classes that are included in the Nanodegree. 
Thanks for that vote of support for them. Though I've off and on seen their stuff, I've never really known how legit they are. Seems it is worth the risk at least once. 
It’s a wrapper for an ordinary non-const c pointer. It’s used for interaction with c-based apis. Generally, it’s not used in pure Swift code as it’s not considered to be Swifty for most usage cases it can be used for.
Nice, thank you !
Xcode has 100 issues, but rainbows isn't one of them
&gt; stanford puts its latest iOS courses on youtube, if you want to save money, very good for the basics and you can follow along with the „homework“. &gt; It's definitely not a subscription. You pay once and can watch the course at your own pace for as long as you want... 
So essentially a rewrite of FBSnapshotTestCase in Swift?
I started developing SnapshotTest when FBSnapshotTestCase hadn't been updated in over a year and was showing warnings left and right. It wasn't being maintained and required a CLA for contributions that weren't looked at regardless. Since then Uber has taken over the project and it is maintained but the code base is still pretty shabby so I decided to keep developing SnapshotTest. To answer your question: yes, it essentially works the same way albeit way more accessible to the community.
Cool. Will snapshots created with FB* pass using your lib?
From the testing I've done the reference images will compare just the same. However, for several reasons SnapshotTest is not a drop-in replacement. For example: FB* has support for 32 and 64 bit applications and names their reference image directories suffixed with 32 or 64. We only support 64 bit and thus refrain from suffixing the directory name with anything. Another thing is that FB* has the option to enable device agnostic snapshot which makes reference image filenames contain device type and OS version. For SnapshotTest we decided to instead include an options parameter where you can pass only device type, OS version or both if those options matter to you. Because of this the naming of the reference image files is also slightly different. The roadmap for SnapshotTest includes adding more options such as tolerance, color tolerance or anything else anyone comes up with that they would like to use.
Use fewer libraries. Include source code directly in your project, and ensure the swift optimization setting is set to Optimize for Speed.
Ok, so fairly straightforward transition then. Re-recording snapshots is a pain.
I would say so, yes. I'm coming from FBSnapshotTestCase as well and I just changed the environmental variable key (basically removing `FB_`), add `import SnapshotTest`, find and replace all `FBSnapshotVerify` with `AssertSnapshot`, set `SnapshotTest.recordMode = true` (setting it on the class is our convenient global record mode) and delete the old reference image directory. Works great with my current client's project but if you decide to try it and find that anything doesn't work as expected please let me know by creating an issue or messaging me.
The Stanford courses are very good, free, and with tons of slides and materials to help you learn: [Developing iOS 11 Apps with Swift](https://itunes.apple.com/us/podcast/developing-ios-11-apps-with-swift/id1315130780)
Oh I feel silly for not thinking about fetch request. My b. 
Well the plugin is compatible with AppCode, so why not use that?
I ran into a fatal error using NSDefaults, it unexpectedly finds a nil value. However, all values are given a default value of “_”. I feel like it is the email value because the _owner is nil when I check the debut section.
I have bought like 15 courses in udemy. Most of the time they are on sale. When you are thinking to buy course for 3 or 4 days and you go back again again to look at the course. They will increase the price. Neat trick is to open link on private mode and the discount will be back again. 
To put it simply, there is no retain cycle, because there is no cyclic dependence, your animations and gcd blocks indeed capture strongly, but they will release what they capture in some definite time in future (main loop tick)
Thank you for your encouraging words! I appreciate that.
solution: write an xcode plugin
Suppose you write a server that reads out a sensor over a serial port. The sensor poops out a bitstream with 12-bit values, because that's the accuracy of the ADC. Perhaps these values need to be corrected because of a bug in the hardware, and then forwarded to another piece of software, or the network or something. Probably easiest to grab the data with UnsafeMutablePointer and work directly, instead of interpreting and copying around. 
Thank you! I’ll check it out 
Thanks for the advice. But this isn’t some important thing anybody needs right away. No body actual knows I’m making it. I’m just wanting a project to build as I learn swift that will actually be useful when I’m finished. 
GitHub has open source license templates for most common licenses, so you can just use those. You could also use [this website](https://choosealicense.com/) to get an idea of what you'll likely end up with. So in the simplest case you can just take your code, include a license file, and make it public. It gets more complicated if your project has dependencies. Because then you will have to look at the licenses of those dependencies and see if you're even allowed to use a different license and under what condition.
[removed]
The error is pretty clear - there’s no item called “UserItem” in UserDefaults and you’re trying to unwrap it as NSData.
Oh, I thought I encoded the defaults with key "UserItem" in my code. It's done in the "save()". Here's my code: https://docs.google.com/document/d/1E3V0BlFbSaA_x5YzfS2_S7GJd3pGnmbdOubJ_QDNkBY/edit?usp=sharing
Right now you can get a package deal in the Swift4 from RayW. He's got a good tutorial there. [https://www.udemy.com/ios\-and\-swift\-for\-beginners\-200\-hands\-on\-tutorials/](https://www.udemy.com/ios-and-swift-for-beginners-200-hands-on-tutorials/) If you don't want to do that, his site has a few tutorials on it, he also gives away some more stuff in the bonus part of the above tutorial.
You should call `UserDefaults.standard.data` instead of `UserDefaults.object`. So, `if let userDataEncoded: Data? = UserDefaults.standard.data(forKey: "UserItem") { // do something }` There’s no point of calling `synchronize`, it’s [unnecessary](https://developer.apple.com/documentation/foundation/userdefaults/1414005-synchronize).
First things first: Core Data is somewhat old, thus some of its design choices might appear strange. There is a high-level API, but you can also dive deep into the entire process and do your own thing with KVO and the like. A lot of the tutorials, and even official documentation, don’t really use the high-level API (i.e. a *Swifty* API) as much. With all that out of the way, I’d really recommend watching CS193P’s [lectures](https://youtu.be/ssIpdu73p7A) on Core Data. It should clear up a lot of confusion. 
Thank you for your responses. I’m not familiar with Codable as of now, but I will read up on it. For saving an object to defaults instead of the data within it, would I just encode ‘self’? I’m sorry for my misunderstanding; I’m trying my best to understand how Swift works.
You probably want to use this small library instead of rewriting basically the same stuff yourself: https://github.com/Nirma/Default
Also, what is the immediate problem of my code? I understand codable is more efficient but as of now I want to fix the immediate error because it should work.
Instead of "name" as the "name:" argument, try "NSStoryboard.Name("put name here")". That name argument is supposed to be of type NSStoryboard.Name, but "name" is just a string.
But isn't it still highly sought after even if it is pretty old? 
&gt;Also, what is the immediate problem of my code? I understand codable is more efficient but as of now I want to fix the immediate error because it should work. I am not completely sure, what does your User class look like? If you don't want to use `Codable` then make sure your User class looks like this: /* Add additional properties as needed ... */ class User: NSObject, NSCoding { let name: String let email: Int init(name: String, email: String) { self.name = name self.email = email } required init(coder decoder: NSCoder) { self.name = decoder.decodeObject(forKey: "name") as? String ?? "" self.email = decoder.decodeInteger(forKey: "email") as? String ?? "" } func encode(with coder: NSCoder) { coder.encode(name, forKey: "name") coder.encode(email, forKey: "email") } } Then, you can save the data like this: let user = User(name: "Mark", email: "mark@abc.com") var users = [User]() users.append(user) let encodedData = NSKeyedArchiver.archivedData(withRootObject: users) UserDefaults.standard.set(encodedData, forKey: "users") and load it back like this: if let data = UserDefaults.standard.data(forKey: "users"), let usersList = NSKeyedUnarchiver.unarchiveObject(with: data) as? [User] { // Do something with the list of users }
The open secret among iOS developers is that none of us are really that good at Core Data. Realm would be more useful for actual work. I've been making apps professionally for almost ten years and weak core data skills have only been a problem in interviews. 
Legacy apps that use it, or desktop apps maybe. But remember the typical iOS app is a thin client for a json api. 
&gt; thin client LOL
DO NOT INSTALL THE OLDER VERSION OF ITUNES. I just wasted an hour finding that it can't read the current music lib and it doesn't work. It doesn't even display two of my iOS devices that Xcode sees. Fucking useless.
I looked into Xcode Server's distribution process yesterday to re-familiarize myself with the process before they remove the IPA distribution functionality. If you have access to an internal server with HTTPS, you can make distribution IPAs using a manifest.plist and a developer provisioning profile. You use the same HTML code and link as you would for an Enterprise distribution. itms-services:// I haven't gotten my old 2012 distribution files working again, but I have done this in the past and Enterprise distro manifest.plists are now supported for development distribution. Documentation is scattered and sparse. Good luck.
Lots of times it drops into machine code when symbols are not included in the framework methods that call internal methods are called.
Objective-C is about 35 years old. Quite a lot of jobs in my area require it, and only see Swift as a bonus. Point is, depends on what you're looking for and where you're at.
`NSStoryboard` expects an `NSStoryboard.Name` as the first argument, so you need to do this: vc1 = NSStoryboard(name: NSStoryboard.Name(rawValue: "name"), bundle: nil).instantiateController(withIdentifier: "ViewController1") as! ViewController1 vc2 = NSStoryboard(name: NSStoryboard.Name(rawValue: "name"), bundle: nil).instantiateController(withIdentifier: "ViewController2") as! ViewController2 A cleaner way to do this would be to first create an extension: extension NSStoryboard.Name { static let storyboardName = NSStoryboard.Name(rawValue: "name") } and then simply do this: vc1 = NSStoryboard(name: .storyboardName, bundle: nil).instantiateController(withIdentifier: "ViewController1") as! ViewController1 vc2 = NSStoryboard(name: .storyboardName, bundle: nil).instantiateController(withIdentifier: "ViewController2") as! ViewController2
Can anybody guide me on solving [https://github.com/apple/swift/pull/16297](https://github.com/apple/swift/pull/16297). Have documented all of my steps taken so far on the PR link... 
wtf? 
There are a few differences, I will try this and get back to you. Thank you.
Oh cool, so I imagine you might encounter UnsafeMutablePointers also while working with bluetooth ?
Glad to share. Your current setup is what I'm using in my current projects. I call the BG context my "import context," do all the server import work there, then save it down the stack into the main context and beyond. However, I'm not using any FRCs because we have a different object (which is basically a custom FRC, now that I think about it...) which manages the pagination aspect. We need the ability to add/move/remove items between the "pages" of content we've fetched, so it makes sense to have an object owning the list's state, as well as managing barriers so we can't load page 2 while removing an item from page 1 (therefore changing the contents of both pages), for example. Do you know where your bottlenecks are? Are they in the writing to SQL part (in which case, it will be tough to optimize via a context config)? Is your main context getting blocked waiting for fetches after your import finishes?
Asserts won't crash your app in production either.
Models + API/Network stack in a separate xcodeproj added in as an embedded binary and VCs + ViewModel + associated views in a separate group, usually one group per VC. If you want my advice, don't try and make it too fancy. One group per VC with its associated view and relevant data makes it easy to keep track of whats related to what as far as the UI is concerned which is usually what you want to do with your project organization.
&gt; Oh, by the way, you have to pay the video maker $5 if you want to contact him. Wow. that's the way how he supports his channel. Some folks sell paid courses, books or charge for conferences\meetups.
I like to use a folder for every feature, like “login” and “config” so everything related to those are on the same folder. If it gets big enough i tend to create sub folders for the architecture, like “views”, “models”, “controllers” for MVC, for example. Extensions and Network stuff have its own folder. AppDelegate goes to “support files”.
Wrong. It's the GPL thats not valid for iOS apps.
Model folder can store Object / Struct class like Cars.swift, User.swift etc.. Views folder can store XIB, TableViewCell, CollectionViewCell, Custom View, Storyboards etc I put class function stuff into a folder named "Utilities" AppDelegate I left it at the project root.
Robert C Martin aka Uncle Bob is also recommending this. Its better to understand and easier to find the classes you are looking for in the daily programming tasks. 
You still want to keep the NSStoryboard initializer at the beginning. The NSStoryboard.Name("insert title here") should simply replace where you originally wrote the "name" argument.
I seem to get along well with it. I bought Ray’s book (pdf) on CoreData and also watched a few YouTube videos. 
Not it's legit. Udemy courses are almost always on sales though, which is weird. They, the teachers, seems to always overpriced their course then let them be on sale 300 days a year, if not the whole year.
This is gonna make my life much easier. Now I just need to convince my boss/our clients to allow time for writing tests and testable code. 
Yeah you are right. My bad. Thanks for noting this out :)
You have a lot of learning to do. Especially in the terminology area, You dont need a specific distro to develop in swift. If you are using a debian based OS like ubunty, you can get umake and install the swift development kit. sudo add-apt-repository ppa:lyzardking/ubuntu-make sudo apt-get update sudo apt-get install ubuntu-make
I do ahah thanks 
That will also allow you to install a plethora of other developer tools. umake is super powerful. If you want a distro that kind of sorta is geared towards development, try www.semicodeos.com.
I have done some development on Ubuntu 16.04 LTS in the past..
Hi nathantannar4! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/8gs1fr/just_launched_v50_if_you_use_parse_server_this_is/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Why models and api in a separate project and used as binary?
You can separate and make it testable while keeping in the same project
It's not a Swift-related project but somebody told me that my work could interest the Swift community, so why not : - http://lambdaway.free.fr/workshop/?view=NIL2 - http://lambdaway.free.fr/workshop/?view=factory - http://lambdaway.free.fr/ Please forgive me if I'm in the wrong place Alain Marty
This is a bit tricky since there's no way to make `Point` conform to `Codable` since it's a non-nominal type. My guess is that you could solve it by implementing Encodable and in the encoding step iterate over the Points in your array and encode them as either [Float].self or [Double].self
Put it in a struct or class and serialize that... struct Thing { var thing:String var points:[Point] } I did it from my phone, so it’s not all here
Thanks for your answer :) I'm trying to encode and not decode though. I understand why this decoding structure works, but im not sure how to make it encode properly
This should work: typealias Point = (TimeInterval, Float) struct YourObject : Encodable { let thing : String var points : [Point] enum CodingKeys: String, CodingKey { case thing = "thing" case points = "points" } func encode(to encoder: Encoder) throws { var container = encoder.container(keyedBy: CodingKeys.self) try container.encode(thing, forKey: .thing) try container.encode(points.map { [$0.0, Double($0.1)] }, forKey: .points) } } If you want to trim the values, you can create an extension for it.
I'm working on the development of backend components using Swift to support some futures that I will implement on my pet project called [EVO](https://github.com/Evolution-App/iOS), an app to follow proposals from Swift Evolution. I'm using: mongodb, zeromq, onesignal and Swift, maaany lines of Swift code. The components are have dependencies like: [vapor](https://github.com/vapor/vapor), [kitura](https://github.com/IBM-Swift/Kitura), [mongokitten](https://github.com/OpenKitten/MongoKitten), [meow](https://github.com/OpenKitten/Meow) and [zeromqswift](https://github.com/evolution-app/ZeroMQSwift). The new release will have support to iPhone X, iPad and finally Push Notifications, but I'm planning more features to be released after WWDC/AltConf.
 // Assume model is of type Model from above let data = try? JSONEncoder().encode(model)
Your only problem here is that Tuples are not `Codable`. Change your tuple to a struct, make the struct `Codable`, and you're done. You don't even have to mess with CodingKeys if you want your JSON to have the same property names as your struct.
No problem. The Swift language has been evolving really quickly, so sometimes the code mentioned in a tutorial or guide \(that hasn't been updated\) no longer work without some modifications.
I will try it. Can you please share a good tutorial on this?
https://medium.com/@derrickho_28266/the-lost-art-of-adding-3rd-party-frameworks-into-your-project-18fbb6204fd4 This one does this using a single xcodeproj, if you use a workspace, you can add the xcodeproj at the root of your workspace instead of inside your main xcode project.
I’m going through Apple’s iBook ‘App Development With Swift.’ It’s a good starting point. 
thanks! i’ll look into it
I have built two: https://www.hackingwithswift.com/sixty is a series of one-minute videos, and https://www.hackingwithswift.com/read is a much longer series of projects. 
Great. Their CI support has been severely lacking. And it's awesome that they're embracing the community for stuff like this, as Apple sometimes has a bizarre notion of how an open source project is supposed to operate.
While not a tutorial, [Objc.io's Core Data book](https://www.objc.io/books/core-data/) is a great walkthrough of the tech and how to use it in a Swifty manner.
great! thank you so much i’ll look at them 
The initial ports where to Ubuntu so you can start there. If you hate Ubuntu you can always look around for RPM's or whatever your distro uses. I'm actually getting ready to install Fedora but haven't actually spent the time to look for a swift installation for that distro. You might try searching for "Swift on Linux" via Google
If you have discord I can try to help you figure this out: Retzel#7634 I skimmed through the code but I don't know exactly where your issue is.
Gave it a quick skim Looks like your Weather object is being initialized, so it is empty. You are updating the weather in the init, but it is using a timer, so it is not available immediately. 
Honestly yes the free Apple book is incredible I have learned so much in a very short amount of time. Its called "Intro to app development with swift" I used to swear by the RayWenderlich tutorials they are good but you really should have a baseline knowledge of swift before you get into them. 
I know, I set this up as a way to test it. I will have it save when the application quits. I just made a new commit, but I am still getting the same error. :(
We have passed the era where real optimization is possible without a profiler or at least estimating loop costs. No one cares if many routines are written for developer and deployment convenience at the cost of performance. Performance happens only within a limited subset of routines and the cures for poor performance are usually algorithms intersecting with hardware. Avoiding moving a buffer in and out of a GPU, worrying about L2 or L3 cache, and choosing the correct data structures swamp chioices about calling your optimized physics library from JavaScript versus calling it from C. Currently, anything that can be parsed with LLVM will compile to JavaScript using Enscriptem. The usual trick is use asm.js or some other tool optimized for compiling correct native code in a single pass of the JIT. Load times take a small hit, and execution time register allocation may take a hit. Working on the specific GPU code swamps all these changes anyway. By the time you worry about the network overhead of the initial load, you are far out in the weeds. The downvotes are for anyone who dare not love Swift as a silver bullet. 
There's no real reason to use Swift if you're not doing work related to mac/i/watch/tv/OS. Yes, you can do server side Swift and run Swift on Windows and Android as well, but the barrier to entry is high and it does not offer enough incentive to use it over other languages.
Change your `downloadJson` function to this: /* Replace Base? with your JSON Decodable struct */ func downloadJson(min: Int, max: Int, completionHandler completion: @escaping (Base?, Error?) -&gt; Void) { var achievID : Int = min for _ in min...max { achievID += 1 let url = URL(string: "https://us.api.battle.net/wow/achievement/\(achievID)?locale=en_US&amp;apikey=wh7sqpen5a5gps5sp9mjvp7s9tnrtbsf") let urlRequest = URLRequest(url: url!) URLSession.shared.dataTask(with: urlRequest) { (data, response, error) in if error != nil { print("error") } else { guard let httpResponse = response as? HTTPURLResponse else { print("Error converting response as http url response or response is nil") return } if httpResponse.statusCode == 200 { guard let dataUnwrapped = data else { print("data is nil") return } do { let tempObject = try JSONDecoder().decode(Base.self, from: dataUnwrapped) completion(tempObject, nil) } catch { print("Error decoding json") } } } }.resume() } } Now, you can populate the array: var tempArr : [Base] = [Base]() downloadJson(min: 2140, max: 2145) { (object, error) in tempArr.append(object!) print(tempArr) }
Ohh yeah. You're gonna want to break up the parent-child entity situation – it can be a huge performance win. I was in that same situation a few years back, and our worst-case save went from taking 30 seconds to taking under 5. The trick is to separate 2 concepts that your app has tied together today: entity inheritance (the "parent entity" setting in the model editor) &amp; class inheritance. You can still keep your [NSManagedObject]–[AbstractModel]–[ModelSubclass] inheritance setup (which makes the transition a lot easier), but your entities in the model editor should be set to "No Parent Entity." 1. Start with 1 entity/class 1. Change the entity to have "No Parent Entity" 1. Copy all of the Attributes &amp; Relationships from the old parent to the entity you're changing (including any from further-up superclasses, if there was more than 1 level of parent). Also add new Inverse Relationships where needed. 1. Re-run mogenerator 1. Fix the generated class's superclass, because mogenerator will set it back to NSManagedObject (at least this happened with ObjC code when I did it – not sure how it treats Swift) 1. Build your code, fix any issues that pop up 1. Do a lot of testing, because it's easy to mis-copy an Attribute or Relationship That should put you in a state where `ModelSubclass` still inherits from `AbstractModel`, but because it has a parentless entity it will get its own table in SQLite. Where it gets messy is you end up with more inverse relationships. If, right now, you have a "Comment" entity that has a relationship to "MyBaseClass" (something like `Comment.source` &lt;–&gt; `AbstractModel.comments`), you'll need a new `Comment.subclassSource` &lt;–&gt; `ModelSubclass.comments` as well. Then it's a matter of making sure you use the right properties when working with the subclass. Does that make sense? I'd start small, just changing one entity (make it a simple one, hopefully easy to test). Then just pick the parts of your app where your Core Data code is slowest. In the project I did this, I never even finished all of our models – it was enough to fix the places that were slow.
Got it. If the user is just signing in, would it be possible to delay setting up the FRCs until the import work is complete? Depending on how much you're using storyboards it might be a little complex to tear them down and rebuild them. But if you could solve the problem of the UI attempting to reload while you're preloading data that might work.
There is the `unowned(unsafe)` modifier if you explicitly want that (corresponds to `__unsafe_unretained` in Objective-C).
Sorry for the late reply. I was on a major time crunch to finish a project and thankfully was able to figure it out before the deadline. I very much appreciate the help though! 
I am very new to Swift, how would you recommend I accomplish this?
Also Let’s Build That App on YouTube is pretty good.
Block and closure are synonyms, block is just the Objective-C/Smalltalk term.
I have seen performance hits of 40-50% for C compiled asm.js (they were not very thorough benchmarks, if you have better ones I like to see them) which is impressive in itself yet slower than Java. It's not too far apart from the situation with Objective-C where a easy to use but slower layer can dip easily into faster parts for heavy lifting, except that the faster parts in Objective-C are really really really fast. But I am worrying about performance constantly you can do a ton with simply programming smarter but not using Python could mean that I can do with a lot less servers that makes my life a lot simpler. If you write your servers in Elixir / Phoenix (Erlang) or Go you can have millions of websockets on one machine. Python doesn't do that. But I do use Python when it makes sense!
thank you everyone for the advice and for pointing me in the right direction.:)
I think these 2 are nice: \- HackingWithSwift \- \[Stanford University Developing iOS Apps\]\(https://www.youtube.com/user/MichelDeiman\)
inputAccessoryView not showing up. can you please guide me how to do it. Here is my code. CustomButton = DateButton @IBAction func actionWeight(_ sender: CustomButton) { let picker = UIPickerView() picker.backgroundColor = UIColor.black picker.showsSelectionIndicator = true sender.inputView = picker let toolBar = UIToolbar() toolBar.barStyle = .default toolBar.isTranslucent = true toolBar.tintColor = UIColor.AppDarkRed toolBar.sizeToFit() let doneButton = UIBarButtonItem(title: "Done", style: .plain, target: self, action:#selector(doneTapped)) let spaceButton = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil) let cancelButton = UIBarButtonItem(title: "Cancel", style: .plain, target: self, action: #selector(cancelTapped)) toolBar.setItems([cancelButton,spaceButton,doneButton], animated: false) toolBar.isUserInteractionEnabled = true sender.inputAccessoryView = toolBar } inputview works properly. but inputAccessoryView not. 
Im a newbie can anyone ELI5 what this is
Swift 4 works on x86 (basically computers), but what about smaller devices like raspberry pi (which are arm7) devices? It now works for hose devices.
Workbook? You mean playground? There's currently a bug that if you allow a playground to auto-run then as you type it becomes unresponsive. Hold down on the run button and choose manual, save and restart Xcode. Only run when you're done editing. That might help the problem. A 2011 MacBook Pro should be plenty to do Swift programming. Yeah, something newer with a better CPU, SSD, and more ram might run faster but for most smaller programs your computer is plenty.
You should stick with the Mac. Trying to get macOS running in a VM to a point where Xcode works properly would be a bigger headache. 
Yep, that all makes sense. Thank you for sharing your insights. It's nice to hear from someone who has been through this before. I'd like to completely ditch mogenerator but will be quite a bit more work as I'd have to write json import/export routines. But like you said, I can work through one entity at a time. When they are all independent I can turn my attention to JSON and removing mogenerator, again one entity at a time. Anyhow, you brought plenty of things to my attention and I do feel confident enough to get this done. Now to convince management! I appreciate it
I just started learning swift this month and I really appreciated these resources.
That's solution is not very feasible in our case. Management wants the user to see data populating immediately. The code structure doesn't' really lend itself to this idea either. There are so many viewControllers and childViewControllers (in some) that have FRCs. Most of these have their own FRC construction. I've been trying to refactor FRC creation to just a couple of factories but currently quite a few variants remain. I think that reducing BG saves to PSC is going to be the way to go. The code is set up such that if the app is killed during server sync that it will just run again next session. Fortunately this problem is experienced by a very small subset of our users. 
A 2011 MBP should be just fine, even the i5's. Seems like your machine is either constrained in RAM or doesn't have an SSD. Both user upgradable with a 2011.
Even then: I'm almost certain that it already worked but that no one had bothered to try.
Nope. https://github.com/apple/swift-nio/pull/383 They had to make a bunch of changes to support 32 bit systems
I have MBP 2011 Early 15inch (i7, 256GB SSD, 16GB RAM) and it's doing just fine. Maybe you should upgrade RAM and put in SSD? True, I am a beginner and I am doing some simple projects but I don't see this computer is slowing me down anyhow for now (besides fans spinning full speed which is annoying).
I think your basic data type should be an array of game results. You can compute all the other values from that. Something like: enum GameResult { case win, lose, draw } var gameResults: [GameResult] = [] extension Array where Element == GameResult { func counter(for gameResult: GameResult) -&gt; Int { return gameResults.filter{ $0 == gameResult }.count } } var winCount: Int { return gameResults.counter(for: .win) } var loseCount: Int { return gameResults.counter(for: .lose) } var winStreak: Int { // your algo for determing win streak } 
So would I use a closure for this?
You can’t, at least not without using private APIs. You can only dismiss your app’s notifications.
If you’re up for a little tinkering, head to tonymac and make your pc run macOS. It’s a pain in the ass at first but works stable once you’re done.
Yes, you are most likely looking at collection views if you want to create something like that. However, it depends on what you want it to look like. You can use tableview, collection views, or your own custom views. I would also recommend checking out FileManager to store the images, or core data if you wanted to. 
Awesome – I'm glad to hear it! If you hit problems, don't make the classic mistake of keeping them to yourself; I'm happy to answer questions either here or on Twitter @twostraws :)
It has always run on ARM?.... This is the arch in iPhones no?
Double check the outlet to your image view. They get broken easily and are the primary cause of these errors.
Two college courses. One for mobile app development and one for mobile games develop. Yay! I get to teach programming! In spite of programming being my primary skill, I don't get to teach it very often.
Are you sure Swift 4 was working on ARM? I’m almost certain that there were issues preventing Swift 4 from working, and that only Swift 3.x was working, though I did only check a few weeks ago and something could’ve changed. 
Nah I understand that, was just curious if Swift was working on ARM otherwise since I've been waiting for that for a while.
Very cool! Interesting to see how much this framework embraces different features of Swift (Codable, keypaths, protocols, etc)
Check out those benchmarks!
I spent some time developing a backend with this recently... and I’m convinced I’ll be using this very shortly for production applications. I work at a client services company, and using Swift on the backend has been on our radar for quite some time. We’ve tried Perfect, Kitura, and earlier versions of Vapor, and every time we’ve felt that they didn’t give us what we needed to feel confident developing a project with any of them. Vapor 3 has changed my mind on that, and I can’t wait to build and deploy a production app with it finally. Congrats to the Vapor team, and all the contributors 👌🏻
NIO is the headline of that article, but the key thing is that @chnmrc got 4.1 working on Raspi 32bit (and @futurejones on Raspi 64bit). 4.x is a precondition for NIO. For the longest time, Swift has been stuck on 3 for those devices NOT 4.1 understand?
Check this S/O answer: https://stackoverflow.com/a/36236716
Yeah. That way the caller can pass in code to run once the task is finished.
Does anyone still believe an x.0.0 "complete rewrite" is a positive attribute? Has any significant software project in history survived such a thing?
Vapor 3 is asynchronous, and brings a lot of type safety (route params, key paths) by default. Whether or not it’s smart from a business perspective to rewrite a framework is one question, but there is no question whatsoever that Vapor 3 is by far superior to Vapor 2 in performance. So is it a positive attribute to rewrite it and make it a lot better? Yes.
Vapor 3 is asynchronous, and brings a lot of type safety (route params, key paths) by default. Whether or not it’s smart from a business perspective to rewrite a framework is one question, but there is no question whatsoever that Vapor 3 is by far superior to Vapor 2 in performance. So is it a positive attribute to rewrite it and make it a lot better? Yes.
Laravel did a full rewrite around the same time. 
Sure. So let’s say you’ve created the Datebutton class above and associated with a UIButton in interface builder: Idenitity Inspector &gt; Custom Class and set your class to DateButon. Your IBAction could be like this for instance: @IBAction func customButton(_ sender: DateButton) { let picker = UIPickerView() picker.delegate = self let toolbar = UIToolbar() toolbar.sizeToFit() toolbar.barTintColor = UIColor.blue toolbar.tintColor = .white let doneButton = UIBarButtonItem(title: "Done", style: .plain, target: self, action: #selector(doneTapped)) toolbar.setItems([doneButton], animated: false) toolbar.isUserInteractionEnabled = true sender.inputAccessoryView = toolbar sender.inputView = picker } Your selector: @objc func doneTapped() { print("done tapped") } I’ve just tested this, so the only things I can think to check are make sure your class is set as mentioned above, make sure your selector functions are marked @objc. You'll probably also need to set a delegate for UIPickerViewDelegate which I guess you know but I don't see it in your code. Anyway, this should work. Hope that helps.
You don’t need a Mac or a Mac vm to develop. Use Linux or the Linux subsystem on windows.
What is exactly Vapor ? I just saw the project and can't really understand what is it for ? \(Just asking ?\)
Multiply by 255...
It’s a web framework to build backends. This release is the main component, but it also has a templating engine (Leaf), an ORM (Fluent - for talking to the database) and a bunch of other components. It’s awesome because it’s built in Swift, so you get the type safety and really good performance. They also integrated swift-nio, so now it’s non-blocking like node.
They don't really say that much. If you really need performance I think you'd choose a different framework. This lists shows that according to their tests there are a number of frameworks that have an order of magnitude greater performance than gin, which showed a similar performance to go: https://www.techempower.com/benchmarks/#section=data-r15&amp;hw=ph&amp;test=plaintext Most of the time you'd choose the framework based on other requirements, for example how productive you/your team is in the language. This is where Swift (and Vapor) should focus on.
I don't follow what you're saying. What framework would you use instead? Most of the stuff listed at techempower are really basic servers - where Vapor is a real web framework. And all the java stuff is going to have a lot higher memory usage. I think we agree about the niceness of Vapor. The level of abstraction is really nice considering the performance.
You're right this is what happens when I'm on here at 3am :p
Well when the (http request/response) performance is critical you might rather want to use fasthttp (go) or hyper/tokio (rust) and do other things like database abstrcaction with another library. As you say, Vapor aims to be a fully fletched web framework, which is why HTTP performance shouldn't be the measurement for performance. Quality of abstractions and ergonomics should be. However, those are more difficult to quanitfy.
"Im" I'm = I am Im = not a word in English Spell the words. You're not typing for your own convenience. You're typing for others to read.
&gt; That's not what the article is saying. Swift 4 was already working on Arm devices. That's *exactly* what it is saying.
that's*
NIO is the headline of that article, but the key thing is that @chnmrc got 4.1 working on Raspi 32bit (and @futurejones on Raspi 64bit). 4.x is a precondition for NIO. For the longest time, Swift has been stuck on 3 for those devices NOT 4.1 understand?
Those tests are running a very broken version of Vapor 2 so you shouldn't read too much into them. If you want to see how Vapor 3 does, you should follow the work being done to get Vapor 3 on TechEmpower at this PR https://github.com/TechEmpower/FrameworkBenchmarks/pull/3683 
Can you check if customer is nil then return 0 if it’s nil? With optional chaining: return customer?.count ?? 0
That was a broken version of Vapor 2, Vapor 3 is a complete rewrite and does not yet have results on tech empower. But yes, these benchmarks are not incredibly relevant. 
You should use the nil\-coalescing operator to return a default value. For example: `customers?.count ?? 0` would return the count if` customer`s isn't nil, otherwise it will return 0.
0-255 will limit the range of colors you can store. The APIs use floating point numbers because even more colors can be represented when dealing with wide-color displays.
Oh, I understand. One line in that article installs the @chnmrc Swift 4.1 files. &gt; sudo apt-get install swift4-chnmrc-dev The goal of the entire article is targeted on: &gt; Install, Build and Test Swift-Nio on an Armv7 SBC running Debian Stretch. So, the title is about SwiftNIO. The bulk of the article is about SwiftNIO. One step is to use the premade Swift 4.1 files. Yeah, it's not an article about Swift 4.1. You got the title wrong. Copy-pasting a response several times won't change your mistake.
Ok. Swift 4 isnt newly available for Arm devices. Its doesnt exist. Its all a lie. And the moon is made of cheese. For the rest of people who needed to know this however, i believe the information has already reached its intended audience. Therefore, I'm off to code. P.S. you remind me of those morons that bitched about the Rosetta scientist Dr Matt Taylor's shirt being sexist after he just landed a satellite on a moving friggin Asteroid thereby making History for Man kind 😂 Cheers m8 🍻
Is `customers` an implicitly unwrapped optional? Otherwise, it's not possible for a non\-optional to be *nil*. For example: var array: [String]! if array == nil { print("Array is nil") } will print *Array is nil.* var array: [String]? if array == nil { print("Array is nil") } will also print *Array is nil.* var array: [String] if array == nil { print("Array is nil") } will throw an error instead, because you're accessing `array` before its initialised. Try declaring the `customers` variable as an optional or an implicitly unwrapped optional.
Very cool article. Goes into a lot of details
We use OTA installation at work. Setup a simple web server with a html file that links to a plist which points to your ipa.
This is great! Thanks!
The more I read about Codable, the more limited it seems. It's great demoware, but it conflates the data model and serialization formats. Codable is designed to be general enough that it can support any serialization format, but the serialization format is defined as part of the data model, so if you wanted to support 2 or more formats for the same data, you can't do that. They brag in the docs that the data model can support both JSON and plists from the same model, and also that you can define custom keys for serialization, but the latter only works if the structure of every format is identical. One of the most common cases of needing to support multiple formats, of course, is versioning, so if your serialization format ever changes (which it almost certainly will), you're eventually going to need to drop down to writing your own `init(from:)` to sort it out. Out of all the formats in the world, the only formats which have built-in support are [JSON and plists](https://www.youtube.com/watch?v=cSZfUnCK5qk). You can't use Codable for, say, XML, without writing your own encoder/decoder classes. And you probably wouldn't want to do that, even if it took no time to write or maintain, because Codable doesn't seem to support any kind of streaming, or even lazy initialization. That's painful for all serialization formats, but XML documents tend to be big (both in size and complexity) so it's even worse here. Am I missing the other 90% of the documentation? It looks like Codable is a solution to make serializing a `struct { String, Int }` one line of code, but as soon as your program encounters the Real World, it's going to run into limitations that are no better than NSCoding.
Someone [asked for Codable support in Apple's protobuf implementation](https://github.com/apple/swift-protobuf/issues/657). It's interesting to watch how the responses change as they reason their way out of supporting Codable: - There's already a JSON interface to SwiftProtoBuf, and adding anything more "would be somewhat confusing". - Supporting Codable "would be somewhat complicated" because the protocol isn't powerful enough to express what protobufs require in terms of type mappings. - SwiftProtoBuf is designed for speed, while the Codable encoders are "constrained primarily by the performance overhead of the Codable protocol itself". - Codable simply "lacks a number of key concepts" needed for protobufs. - If you want to use protobufs because the Codable-based encoders are so slow, then don't ask us to redesign SwiftProtoBuf to support Codable, but instead go file bugs against those encoders. It doesn't look like I was missing anything. Codable is only for the simplest possible use cases. For speed, flexibility, non-JSON formats, streaming support, evolving schemas, or just about anything else, you'll eventually need a proper serialization system. 
Hey I just thought of another aspect (on the subject of removing parent entities). Development wise it will be easy to undo the parent entity one entity at a time. What about rolling this out to existing users? That's a serious difference in the backing SQL file and I'd be impressed if CoreData's migration tools can handle this. Do you have experience here? For the most part I've been able to get away with CoreData's auto migration. I've had to do a couple of custom migrations but am definitely a novice when it comes to this. 
Excited to play around with this. 
Congratulations on the release! A few questions for a newbie like me: 1. I'm currently learning swift, and the "Learning Server\-Side Swift with Vapor" from Lynda \([https://www.lynda.com/Swift\-tutorials/Learning\-Server\-Side\-Swift\-Vapor/560883\-2.html](https://www.lynda.com/Swift-tutorials/Learning-Server-Side-Swift-Vapor/560883-2.html)\). With this release, is the course still relevant, or should I look into other resources for learning Vapor? 2. Is there any good resources for learning Vapor 3.0? \(preferably cheap/free as I'm currently unemployed looking for dev jobs :D
You realize that all of the iDevices are running on ARM, right? It's getting it to run on a non-Apple OS on ARM (especially 32-bit) that's the issue. Also, how does correcting a factual mistake on Reddit in any way compare to ruining a man's career out of spite?
One of the big design decisions behind `Codable` was to help make serializing to and from ~80–90% of serialization formats out there significantly easier in the vast majority of cases. It's not possible to come up with an API that works with _all_ formats, since some formats out there make tradeoffs which are simply incompatible with one another; this means that indeed, there are formats for which `Codable` is not a good fit. Some questions for you: &gt; ... so if you wanted to support 2 or more formats for the same data, you can't do that. They brag in the docs that the data model can support both JSON and plists from the same model, and also that you can define custom keys for serialization, but the latter only works if the structure of every format is identical. Why is that? There is no limitation on the structure of your type. Code is code — you can write a completely different implementation of `init(from:)` for every different format you might want to handle. No limitations here; your implementation of `init(from:)` can work with a completely different serialized structure per format. &gt; ... so if your serialization format ever changes (which it almost certainly will), you're eventually going to need to drop down to writing your own init(from:) to sort it out. You can do that, or you can version your data types to handle decoding however you'd like. There are many different ways to treat this. But at that, why is dropping down to `init(from:)` a limitation? Custom cases may require custom logic — is that unreasonable? By design, nothing prevents `init(from:)` from handling arbitrarily complex data migrations. &gt; You can't use Codable for, say, XML, without writing your own encoder/decoder classes. Foundation indeed only offers JSON and plist at the moment (with more planned), but there are decoders out there for [other](https://github.com/ShawnMoore/XMLParsing) [formats](https://github.com/jpsim/Yams) should you need them. What makes this different from any other API in that adding new formats requires writing new code to support it? &gt; And you probably wouldn't want to do that, even if it took no time to write or maintain, because Codable doesn't seem to support any kind of streaming, or even lazy initialization. That's painful for all serialization formats, but XML documents tend to be big (both in size and complexity) so it's even worse here. True streaming is a complicated beast, requiring buy-in from both the serialization mechanism and from clients. It's true that supporting streaming with `Codable` can be more of a pain, but many of the design requirements for streaming make it difficult, if not impossible to generalize. There are tradeoffs that could make streaming work, but in practice, very few API clients need, or would really even benefit from the work put in. At that, this is the same reason that `Codable` integration with `SwiftProtobuf` likely wouldn't be worth the effort — Protobuf by design has made design decisions that don't lend it to be generalized among other mechanisms. The underlying models are almost always generated by a compiler in order to ensure congruity with the message format (as opposed to writing your own models and adopting additional conformances on them). Protobuf (and `SwiftProtobuf` more so) also takes great pains to ensure specific message sizes, ordering, and speed, at the cost of flexibility; the flexibility that `Codable` offers can come at too great an overhead for something like `Protobuf`. Is it possible to make the two meet? Yes, by design. Would it be worth the effort for the vast majority of clients of both? Likely not. --- With this, I'm curious — what use case are you working with that `Codable` couldn't handle?
Thanks! I'll try this out. I had no idea that there was a visual cue there of what was wrong.
yes, that course is outdated now. \&gt;Is there any good resources for learning Vapor 3.0? \(preferably cheap/free as I'm currently unemployed looking for dev jobs :D \(disclaimer: I own the site\) I have a website where I post vapor tutorials, and there will be many more to come soon, here: www.vaporforums.io
If you need the unwrapped variable further down, use a `guard `statement instead. It’s basically like an inverted `if`. ``` guard let content = try? file.readAsString() else { print("Error opening files") } ```
 var content: String do { content = try file.readAsString() } catch { print(error.localizedDescription) return } // More Code Since you are either assigning a value to 'content' or exiting in the try/catch 'content' will have a value later in your function 
I think I got it sorted. I couldn't make customers an optional of type Customers for some reason, but once I converted it to the Realm List type I could. Now everything is working like it is supposed to.
Third option would be to mark this whole function throws and define an Error enum with custom errors if some part of parsing fails. enum FileReadError: Error { case isEmpty case wrongEncoding //etc } func read(file: File) throws -&gt; String { let content = try file.readAsString() if content.length == 0 { throw FileReadError.isEmpty } // etc return content } This allows you to do a bunch of stuff in a function and then you can either `catch` or `try?` when you call this method. I often do JSON parsing like that. It’ll throw exactly the type of problem but often I just ignore it. 
You can use `let` as well as long as the variable is set before using it.
Yes, but it would look like this. The guard should always return, in this case either `nil` or a default value like `""` ``` func yankBlock(content: String) -&gt; String? { guard let range = content.range(of: "(?s)(?&lt;=---).*(?=---)", options: .regularExpression) else { print("Yanked yaml block reading error.") return nil } return String(content[range]) } ```
&gt;[this](https://www.welookups.com/) is web tutorial site
Why would I hire you over an experienced developer? The goal is realistic if you take a few years to dedicate to learning, and developing your portfolio. If your time horizon is less than a year, you’re underestimating, and setting yourself up for failure. 
My time horizon is probably 2-3 years 
The image should be 2x the size of the ImageView for many devices or 3x for the iPhone X and Plus. The first thing I would look at are the autolayout constraints on the ImageView. If you check the size at runtime in the debugger, is it exactly the right size? 
Thank you so much. Now I understood :)
You can do several unwraps in a guard statement by separating them with a comma guard let index = something(), let string = somethingElse(index) else { return // or throw }
[removed]
I have a MBP 2011. Upgrading to SSD made it like a new machine. I worked with Unity with Xcode with no issues. If you have updated the OS to the latest and are working in Playgrounds you might be experiencing this. [https://stackoverflow.com/questions/49591847/xcode\-9\-3\-playground\-diagnosticd](https://stackoverflow.com/questions/49591847/xcode-9-3-playground-diagnosticd) one print statement could make my Playgrounds run for 10 minutes with no results. Terminate the process listed the first time you run Playgrounds and you should be all set. Until this is fixed you will have to do this every time you start Playgrounds.
How does one make the 2x and 3x resolution pngs or svgs?
I think it's important to reiterate, it's 2-3 years of *full-time* effort before you'd enjoy the job. If you just play around with it, even for a year or two, it's going to be a nightmare to manage a client project. Search /r/freelance and you'll find constant stories of people doing 2-3 month contracts for barely minimum wage then having clients refuse to pay them because the quality was so poor. That doesn't sound very fun to me. As someone who has freelanced for a large part of my career, I think the smartest path is to get a full-time job. Work at least one year and then if you want to freelance, go for it. You'll have some skill, some confidence, and most importantly, a small network in the industry. If you can't get a job in the industry you can't be self-employed in the industry. It really is that simple. So work hard, study, build a portfolio of projects, and in 6 months you can probably get a job. Work that for a year, learn as much as you can, meet as many people as possible, and then freelance if that's still what you want to do.
Here's a sneak peek of /r/freelance using the [top posts](https://np.reddit.com/r/freelance/top/?sort=top&amp;t=year) of the year! \#1: [Small truths about freelancing that I've learned over the years.](https://np.reddit.com/r/freelance/comments/8ghen9/small_truths_about_freelancing_that_ive_learned/) \#2: [Have you ever been to a restaurant and asked the chef to cook you the finest steak three different ways, tell him you’ll only pay for one of them but you want to eat all three? And then try to negotiate the price of the meal? No? So why do people think it’s ok to treat designers that way?](https://np.reddit.com/r/freelance/comments/7yrtpc/have_you_ever_been_to_a_restaurant_and_asked_the/) \#3: [Oh upwork! Never change (actually please do)](http://i.imgur.com/jseCimV.png) | [51 comments](https://np.reddit.com/r/freelance/comments/6fswld/oh_upwork_never_change_actually_please_do/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
iOS doesn't support SVGs directly. You'll want to export the SVG as multiple PNG images or possibly a PDF. For PNGs, you have a few choices: 1. Put 3 nearly identically named images in your app - MyImage.png, MyImage@2x.png, MyImage@3x.png. If MyImage.png is 100x100, then the other ones should be 200x200 and 300x300 respectively. (I think the 1x sized images are only needed for older devices and system versions) 2. Create an image asset in Xcode and drop all three images (1x, 2x, and 3x) on it. Instructions [here](https://help.apple.com/xcode/mac/current/#/dev10510b1f7). 3. Put only a single 2x or 3x sized image into the app and let the system scale it for you. This is the quick/dirty solution, but the images won't look quite as nice as with #1 and #2. It'll still look much better than a low-res 1x image, though. If you go with a PDF, Xcode can automatically create the sizes you need. See instructions [here](https://icons8.com/articles/how-to-use-vectors-in-xcode-7/). 
The issue is how do you get the years of experience to get a development job. Companies want experienced seasoned people they don’t grow on trees magically some ones company has to take them in or you have to lie / fake it till you make it which is sub optimal for everyone. I would prefer a realistic I am here I am fired up about it and want to go there approach with some proven skills that are green vs the guy who is clearly faking it to get hired. Technology in general forgets this. Also the need to have a cs degree I also find lacking for many things. I want a raw passionate person who will put in the time and build up but that’s my take from a non developer I am a network engineer and can say no amount of schooling or projects compare to the live fire exercise of putting in the time and doing the job and breaking crap along the way and sometime being be hero. I can teach technology I can’t teach you to think critically and look at all the angles. 
Here's my library that could solve your problem: https://github.com/igormatyushkin014/Direct Let me know if you have any questions.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/tha_pit] [Support your fellow Swift devs. This will soon affect every iOS developer...](https://www.reddit.com/r/tha_pit/comments/8hhau6/support_your_fellow_swift_devs_this_will_soon/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Strange. I have been submitting applications using templates for months now and sure Apple asks a lot of stuff nowadays but nothing about that. But I'm writing free business apps that are aimed at the companies that need them, not for attracting as much users as possible.
Yes, this sucks. A few companies had way too many near-identical apps in the store, but the solution is worse than the disease. 
Your example is terrible—those really _should_ be one app, with options to select different rule sets. The basic mechanics of 8-Ball, 9-Ball, and Snooker are otherwise nigh-identical. Suppose someone is a fan of all three games—why should they have to buy three different apps?
I agree those should be one app under the new guidelines. But the issue is with extorting changes using these new guidelines for existing apps. The golden rule here should be "do no harm". Do no harm to the developer. Do no harm to the previous consumer. 
I would be ready for a courtesy phone call. Are your current apps paid? Have in\-app purchases?
You can use `if let` or `guard let` to safely unwrap optionals.
&gt; But right now Apple is strong-arming good developers to make sweeping changes Can you give an example of this happening? Because this rule seems targeted specifically at the publishers who spam many copies of the same app over and over and I don't recall hearing of a case that wasn't like this. You haven't given any non-hypothetical examples. &gt; But the main issue here, is that deletion of your purchased apps on a wide-scale is Consumer Fraud. When Apple remove something from the App Store, they don't remotely delete it. They just stop publishing it. &gt; Apple is closing the doors to innovation, competition and I believe, the freedom to be a developer. This is, frankly, ridiculous hand wringing. Apple isn't taking your freedom to be a developer away. Also, claims like "Apple is committing fraud" and "Apple is committing extortion" seem libellous to me. You're telling people they are in the process of committing criminal acts. 
So if I downloaded a png off of google images(hypothetically) and put them in assets with @2x and @3x, Xcode will automatically scale the pngs and there will be no blurryness or jaggy lines on higher pixel densities? I imagined all personal IPs come from Sketch or Adobe illustrator, hence you will always have the svgs?
Just my guess, In your image XCAssets, did you put a 2x and 3x image for it?
Most of our images come from Photoshop. We have the graphic artist create them in a larger scale and export 1x, 2x, and 3x PNG images for us. Sometimes they use Illustrator and give us a PDF file which we import into a graphic asset. We almost never use SVGs because none of Apple's tools support them well. If you download a PNG from the web, you can just use it as is with aspect fit set for your image view. It should look good if the PNG is at least twice the size of the ImageView. However, that may cause the image view to resize if you're not careful with your constraints, so creating 3 images (1x, 2x, 3x) is sometimes better. 
No, this isn't the right approach. You're already calling `Yaml.load()` once, then you're ignoring the result in successful cases then calling it again. Do `let value = try Yaml.load(text)` in your `do` block. When an error isn't thrown, `value` will hold a non-optional value. This pattern is shown in the YamlSwift library's documentation: &gt; If the input document is invalid or contains more than one YAML document, an error is thrown. &gt; &gt; do { &gt; let value = try Yaml.load("a\nb: 2") &gt; } &gt; catch { &gt; print(error) // expected end, near "b: 2" &gt; } 
I was going to write-up something very similar to what you're saying here. Thanks for saving me the time, I totally agree with what you're saying. This is not fraud, this is not extortion. This is simply good business and I expect it will be very welcome by most developers. Of course the publishers spamming the App Store in order to flood out other publishers won't be happy. How about you put out one good app that has a lot of functionality rather than a ton of small ones that do one thing?
**Example of strong\-arm.** They have said to me I can not update or add existing apps until I consolidate. Not just the apps they want consolidated. If you search the developer forums, for "4.3 guideline", you find MANY cases of this. And plenty of actual examples. **They are telling developers to remove apps.** So no, Apple is not removing the apps, they are making developers do it. **In my opinion Apple is making developers commit consumer fraud.** If I sold you an app today under the assumption which every buyer has, that the app will be available to load onto other devices, or redownload again from the store in a catastrophe, then tomorrow I just removed the app AND took the exact same content to another app, would you feel defrauded? I think every end\-user would say "yes, the developer has scammed me". Many years ago bad developers did things like that which is why we all have to include a Restore Purchases button in our apps. 
How can you tell if the png is twice the size of the ImageView? If the png is 100x100px how can you tell what the size the ImageView is if Xcode sizes things by points? Thanks for your time. 
Thank you for this. It's much clearer. 
My big problem is how Apple is implementing this guideline. Their review guidelines are a “living document”. I get that. Things change. Bad actors make things change. So going forward we will have to accept change. But this tactic of saying we can’t go forward until we remove Apps that were previously fine is overly hostile. The majority of mine are sticker packs published in the last two years. Uniquely animated by myself covering a variety of unique themes. Also if Apple wants this massive consolidation done, they need to give us the tools to make it happen right. For example.... Product A’s in-app purchase of ID123 is now going to unlock the in-app purchase in Product B (the new consolidated app). That is an actual solution that at least ensures the consumer can recover what they have purchased. 
It can be used further down in the script – just not outside the `do` block, because the `value` variable only exists within the scope of the `do` block. There are several ways of dealing with this, such as: - Put the rest of your logic within the `do` block. - Declare `value` outside of the `do` block as an optional, use `guard` or `if let` after the `do` block. - Place the rest of your logic in another function and call it from within the `do` block. - Place everything into a function that's declared as `throws` and catch the error wherever you call that. What the best approach is really depends on the overall structure of your code, but if you're trying to parse a file, a decent approach is to put the parsing code into a function that throws, let the calling code deal with any errors that get thrown, and focus on returning the parsed values.
&gt; Also if Apple wants this massive consolidation done, they need to give us the tools to make it happen right. Well, there you go. That's a much more positive take on the situation. Make a suggestion to Apple on how they can improve this system so that it works best for both the customers and the developers.
How we should / will do things going forward is a different issue. This issue is really about addressing what’s already been approved with a solid customer base. I have about 100 apps, close to 3 million downloads and 83,000 in-app purchases. So how do I protect those 83,000 buyers? Let’s say I have to merge down to 10 sticker packs with in-app purchases for the same content. 70,000 or so users are just gonna be out of luck when the app is removed. By the way, for sticker packs this consolidation idea is absurd. No one wants to dig deep into a parent container app to find a sticker. When iMessage launched you had to go 3 taps in just to find your packs and it was just enough work that no one did it. If every sticker author has to make a search engine style container to dig through a 1000 stickers, users are just going to use emojis.
Thank you so much, this makes so much sense!
If the ImageView is 100x100 points, you’ll want images of 100x100, 200x200, and 300x300 pixels. 
I think that only works within the same app. What Apple wants is like 10 different apps merged into one. So it would be a case of validating all the in app purchases from those 10 in a completely different app. If the code exists to validate IAP from a different app, can someone share a link?
And yeah, I called “App Cops”. They got guys working in shifts to deal with this... dude, I’m raising awareness about the issue in one of the few places I can. I’m also on my phone, I’m not going to paste in snippet after snippet from the dev forums. I’m asking other devs to go read what’s happening. I know most of you are thinking , “hey I’m not a spammer, this won’t affect me” and I’m telling you those are the exact people you can go read about. White-label programmers getting their notices. 
In a script: wrap **everything** in a do-catch. Then throw errors like they’re on sale.
I needed a good laugh, thanks for this post.
I would say it is a personal preference. I use stickers like gifs so I look for one that portrays a particular emotion in my style and applicable to the conversation so with my friends that like zombies I use zombie gifs to say I am happy and to my friends that think Star Trek is cool I use different ones for them. So having all of those in one app (like having all my gifs searchable in one app) works well for me. Maybe I am a minority and other people only use one set of stickers and never want to deviate from their unicorns or whatever, but for me having one app where I can have all my favourites works well. Let’s say someone wants unicorns but they want all types of unicorns goth ones, rocker ones, fancy ones, etc. Why are you forcing them to download a different app instead of being able to find other styles in the one app? You said lots of your apps have in app purchases already so maybe you do this already, isn’t adding other kinds of stickers the same as this? My guess is that most customers that download your apps don’t just like one thing only, shouldn’t you give them the choice to pay you for your work again instead of them going to the App Store and potentially seeing your competitors apps and choosing them instead?
&gt; And yeah, I called “App Cops”. Look man, you're literally accusing Apple of a felony. If that were true, talk to real cops instead of starting a petition. &gt; I’m asking other devs to go read what’s happening. Your petition is addressing end-users, not developers. How many end-users do you think are going to trawl through the Apple developer forums? I'm not asking you to "paste snippet after snippet". Just name some apps. You're the one making the claim, it's up to you to back it up. 
Get a job. Or if you have a job, save the money. I mean, you found the money for your €1000 gaming laptop. Additionally, Swift and iOS are not the same thing. You can develop for Swift on Linux (which you can run through virtualisation on Windows), but you need a Mac to develop iOS apps.
You can start learning Swift in the browser at https://iswift.org/playground or https://developer.ibm.com/swift/ both can get you started to see if it is something you are interested in before buying a Mac. 
Height for row delegate method? Maybe you should add how to have the table view cells self size their own height. 
I believe it’s problematic to hackintosh laptops but try to see if it’s viable. 
Swift will also allow you to declare a variable without assigning a value immediately: ```swift let text = yankBlock(content: content) let value: Yaml do { value = try Yaml.load(text) } catch { print(error) // expected end, near "b: 2" exit(1) } // use value normally ```
Install a virtual machine (VMware was easier I found), install Mac OS on it(use YouTube) ;)
I am speaking of the hardware. Laptops cannot use Nvidia Web Drivers for instance since they use that Optimus thing, that I don’t even know or care what it really is, but if you are a laptop user you must know. And I won’t recommend the beast tools to anyone though, the applications are made with the goal of being generic, and as expected the only way is to install what you might need instead of what you need, not to mention that the bundled kexts are extremely outdated. And this now is my opinion only but still, the tool makes it too easy, does everything by itself, that seems nice at first but you end up not knowing how things are done, and what each kext does, or even where they are and how to download them manually, or solve problems that may occur. The vanilla install is the optimal approach,
IIRC, someone wrote an app to size the icons automatically. I've never used one, but you might want to look into it.
What are you trying to do, and what are you expecting, exactly? It looks like you're running this in "xcrun swift" from a command line, but that doesn't use reflection to print results.
Looks like you're missing some newlines around your triple backticks... 
Check out "Action Sports" iOS app. I think they do a great job of visualizing data in as simple way as possible. 
Good option but you need a very good pc to run a heavy vm to run xcode 😅
Thanks for the suggestion will take look. 
I thought for a moment this might be something genuinely interesting \- like actually implementing UITableView like control in Swift. Not just parroting silly tutorial that the net is full of already.
If you really know Java, Swift should not be a problem at all. Sounds like it's more of an Xcode / Storyboard issue, which can indeed be a bit of a hassle. The good thing is you can completely skip everything regarding Storyboard and create it all with code. [Letsbuildthatapp](https://www.youtube.com/channel/UCuP2vJ6kRutQBfRmdcI92mA) has some nice [tutorials](https://www.youtube.com/watch?v=70OhFMzRBZM) on this (do note that they might be out of date regarding Swift version). Furthermore, if you're doing generic programming assignments that doesn't have to be an app: try out playgrounds! They can be pretty cool. : )
I liked the Ray W tutorial on Udemy. I'd focus on just the basics of the language and avoid the advanced stuff. Swift has changed a lot from it's start only a few years ago. Get the 4.X version setup and make sure the tutorials are all 4.X Then ignore anything advanced, only focus on the basics... classes, functions, looping, etc... Use the playgrounds to understand concepts. You say you need to use Swift for college, but you didn't say for what, so I'll assume it's for iOS dev. You have the language and then you have the APIs, the frameworks that Apple and others give you do make apps with. On top of that, you have the IDE, Xcode and whatever else you care to learn, version control, data base design, MVC, etc... Stick with the basics of Swift until you are comfortable with it, then you can jump into things like protocols, generics, etc... Too much at the same time tends to clog things up. If you give us some more insight into the goals... mobile apps, games, AR, AI, etc... we might be able to help some more.
Edited to include IOS, you are 100% correct in your ability to assume i did it for IOS.. as for more insight into the assignments and applications. "using mutating functions in protocol" I wish i could send the PDF, My assignment 2, i had to build a simple calculator easier enough. but i needed to implement OOP, and only have 4 IBactions. (which i thought was easy as well). Struggled with this concept. I don't understand what is going on so i made the app in android, and tried to compare parts, and that didn't work. I actually don't understand why I am struggling with such basic situations and tasks. I feel like Swift/Xcode has created a maze for myself, and i just get crowded with information, and forget everything..
What does this have to do with swift?
I would recommend researching Devslopes. I noticed a significant change in my swift coding. They teach by example and have tons of ppl and mods to answer questions. It just takes a bit of time and patience. Remember everyone starts from here, just don’t lose patience. If you feel frustrated with a problem I would say get up take a break and come back to it. I always think of solutions in my off time.
reading this it really sounds like you don't have the basics of compsci and have jumped/were forced into directly "building stuff". for now maybe just get by glueing together code you find online and then try and take more "fundamentals" courses like data structure and compiler design so you understand the basics of languages as for why you're struggling - it's a whole new platform with it's own idiosyncracies and issues. i remember feeling drowned when i jumped from pure java applets to android and that was just a paradigm shift not a complete platform shift. i understand you only have a limited amount of time and feel the time pressure on top of everything else but the only real solution is to just keep learning and building your knowledge base. you won't be able to just jump in without feeling some level of confusion
It's quite good.
Wait, you find it easier to make stuff for Android than iOS? I find iOS waaay easier with the storyboard editor, you can get lots of the basic layout down without writing a line of code. Maybe you should focus on getting the most out of the storyboard editor first, check out some tutorials on using it, connecting things up, etc. Because some of it is not intuitive.
Hmm, not sure if that's intentional or not. Traditionally in Markdown, though, you have to surround triple fenced blocks opening and closing with newlines. 
But imagine if, instead, you wrote this: ```Swift if /^[a-zA-Z\-' \.]{1,32}$/.matches(firstNameField) { //do this } ```
Remember to indent the code by four additional spaces on Reddit to make it not look like this. 
 I definitely think apple needs to dogfood more viz their development tools 
If you want to improve these things, get involved in the community at forums.swift.org. Apple doesn't seem to be driving much in the way of cross platform support so it's up to the community to propose changes and get the work done.
Thank you! Extremely helpful stuff!
The complete and utter silence of the iOS developer community regarding Swift's abominable tooling is a joke. I'm kind of surprised that you haven't been down voted into oblivion. http://mouthybroadcast.com/wp-content/uploads/2017/11/this-is-fine.jpg Already half the comments in here are blaming Xcode, but you know what? If you use Xcode for Objective-C development it works well. It's the Swift portion that's broken. (Which is still largely Apple's responsibility, but more on the Swift team.) Apple built an empire on Objective-C. They can't even build a debugger for Swift.
The thing that I don't understand is that the language itself is actually fine. Why would Apple invest so much effort into creating a new, usable, modern language but ignore the tooling?
So my constraints keep the distance from the left and right the same along with keeping the aspect ratio 1:1. I took your recommendation and dragged in a 260 X 260 image, because the image view was 130 X 130. The problem is, the image view is in a custom table view cell, and using any image larger than 130 X 130 fills up more than just the image view, sometimes even covering the entire custom cell. 
Paging /u/lyinsteve, our resident Udemy spam filter.
Thank you sir! 👮‍♂️
CartScreen: https://docs.google.com/document/d/1J8m8vL5SzmDSnc27R1LBMdMbhreT_hD8DYgjn6lWJmY/edit?usp=sharing CartCell: https://docs.google.com/document/d/1hjpgW5aV5TDOhCUL0CaUhPw6kxBSA4nWnf_3LZ6a9iY/edit?usp=sharing Browse (Add to cart button): https://docs.google.com/document/d/1tFQCr2XC9NOWkcAAYoLVRrxmPmmlsxrvFiWSBrhvVtY/edit 
I would have to agree. I hate to cast stones because I'm certainly no compiler developer and I know there are a lot of challenges involved in getting things right, especially when type inference is involved. But I think a feature-freeze on the language itself might be worthwhile so the tooling has time to catch up. Compare to C#, which took a slow, methodical approach to adding language features over its first few years, but always kept a very solid development environment. My biggest pet peeve with the compiler is the confusing and often incorrect error messages any time a closure is involved. If I have an error inside a closure, the first thing I do these days is separate it out into a separate function to see what the *real* error is, and not the spurious one the compiler reports. And of course, it's no fun when the compiler crashes either.
One of the easiest ways to cut down on issues with closures is to completely specify the closure type rather than rely on having it infer type from the context. Unfortunately, there are quite a few issues which involve type inference. Many times there are just too many ways for the compiler to resolve the type and it doesn't have enough information to pick the right one. Basically, the same as turning the closure into a function but in an anonymous way.
Wow that’s pretty progressive of your company using swift for backend development!
That’s the thing that stood out to me!
Hi lymburn! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/8hr6ha/alarm_clock_app/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
[removed]
Your last link is broken, and that’s the important part.
If the Browse screen is a tableViewController and you’re calling self.tableView.reloadData() there then it won’t do anything to CartScreen, it’s a different tableView. In CartScreen try calling reloadData() in viewWillAppear:
You're 100% right, and I don't have much advice for you unfortunately. That said, the more radars that are filed, the more likely bugs are likely to be fixed. Even if you can't reproduce, submit a radar and attach your logs.
Oops, fixed the link. 
Well thank you, just hearing that I'm not the only one facing issues is somewhat comforting. At least it's not me doing something wrong. I wonder if the Swift Tensorflow thing is gonna change anything.
Tim Cook is still too busy preaching the virtues of programming to the children in Africa to deal with this yet. 
&gt; I would stay away from swift backend dev with a 10 foot pole. Check out Vapor 3, it's literally more pleasant to deal with it than dealing with swift on iOS now since it uses the SPM properly. The SPM works fine, it's just that Apple is too fucking retarded to integrate it with iOS.
Yes, that's a problem. Even though you swap tabs, the other view controller will be loaded so viewDidLoad won't be called again.
Ruby is 23 years old. Swift is 3 years old. Of course Ruby's tools are going to be about 700% more polished. Even the very idea of "known for quite a while" is radically different between these projects. Ruby has about almost 1000 known compiler bugs older than that Swift one you ran into. As you say, Swift was created primarily for writing end-user applications on Apple's platforms. Server-side Linux support is not really its wheelhouse. Are you also frustrated that Ruby is lousy at making native Mac applications? (They've even got a 20 year head start.) Every language has platforms where it's strong, and platforms where it's not. As Larry Wall once said: &gt; Q. Why is this so clumsy? &gt; A. The trick is to use Perl's strengths rather than its weaknesses. Swift's main use case is replacing Objective-C, which has no repl, no package manager, no first-class Linux support, no inner classes, etc., so almost all of your problems are with features that Swift has acquired in its first 3 years, which its predecessor never did in 30. It's a shame that these features suck today, but then again, they're entirely new here. Even Python is almost 30 years old, and I'm *still* reading about [what dang new package manager](https://xkcd.com/1987/) they've switched to this year, so it's not like it's all peaches and cream elsewhere. All software trains you to avoid its bugs. Your other favorite languages are full of bugs, too. Check their bug databases. It's just that people who have been using them for a while know what the weaknesses are (like "writing iOS apps", for Ruby), and know to avoid them. Swift is a big language, and I'd say it takes at least 6-12 months to really learn what areas to avoid. Personally, I'd include "Linux support" in that. When you're using a brand new language, on its third-best-supported platform, you're not going to have the most pleasant development experience. Like any language, Swift is great at some things and terrible at other things. Pointing out an individual compiler bug isn't really a good indicator of anything because I can do that for literally any language. 
&gt; Compare to C#, which took a slow, methodical approach to adding language features over its first few years, but always kept a very solid development environment. I used early C# for several years, and I'm not sure I would agree with that assessment.
Why can't Apple introduce updated Macs? Apple reminds me of a ship out to sea without a captain. It just seems to be following ill defined currents that are hard to understand from the outside world. Now that being said people do need to realize just how young Swift is and they need to understand that there is no firm ABI yet. Age here is a thing. because people look at Swift and say it is 5 years old (or whatever) but the reality is that the language and platform, has changed significantly since Apple first debuted it. It might be better to think of Swift as a 2 year old baby that has much maturing to do. 
LOL! One thing about Apple that really bothers me is their everybody can program mantra. It would be one thing if they identified people with potential, but we have students that can't even manage trig. Sadly this is a very liberal attitude to fight because some just can't grasp how stupid many people are and how fruitless it would be to try to educate them.
I would seem to me that a Swift developer should understand this. Beyond that Swift 5 really should be called something like Swift 2. The changes we have seen in the language makes it look like Swift 5 should be the first major revision that is stable, thus step 2.
I honestly believe your expectations are way way too high. If you think that Swift is in bad shape right now you haven't experienced the birth of C++. Further you haven't experienced compiler technologies from the early days of the PC industry. I'm actually very impressed with what has been achieved with Swift so far. Are the bugs a "good" feature - certainly not, but overall they are rather few compared to what has been seen in other new compiler debuts. Like others have said file bug reports and if possible propose a few fixes.
&gt; As you say, Swift was created primarily for writing end-user applications on Apple's platforms. Server-side Linux support is not really its wheelhouse. This is a bit misleading considering my understanding of Apples goals here. Swift was most certainly developed to replace Objective C and for good reason. That however does not imply that it is unsuitable for use outside Apples platforms. In many ways it is the compiled language many have been looking for. That is the near writeability of Python with a compiled language performance. That makes it very interesting in the server space. While it may be a bit early to be doing server work in Swift, a stable ABI would be nice, it is foolish to dismiss it as a tool that could have a long future on servers. Frankly it could also have a long future in app development on Linux if the developers there could bear to let go of their Not Invented Here attitude. This especially considering how crappy some of the C based solutions are in the Linux app development world. In a nut shell I see Swift having huge possibilities in the Linux world.
https://stackoverflow.com/a/35003095/2066810
I wouldn't say that's bike shedding at all. You're in the extreme minority here and working through some unchartered territory. I'm very surprised to hear your company is using it for actual projects. Swift for Linux "works", but is far from being a good developer experience. Heck, it's still pretty rough in some areas for iOS dev, though it has gotten a lot better. SPM was released only last year and doesn't have many users, most of us are still using Carthage/CocoaPods. My guess is that they are investing everything into ABI stability (hopefully Swift 5) before fixing all of these "low-hanging" issues, since so many parts of the language are still changing it doesn't make sense to fix them yet.
Third party tooling? What in were you writing? If this was any time after 2006 when most people picked up C# because of .NET 2.0, C# was pretty modern and got LINQ not much later. The .NET framework had some issues, but that wasn’t on account of C# or the IDE. Visual Studio and VSCode make XCode feel like crappy freeware (which... I guess it is). Building interfaces for Android is also night vs. day in terms of how much better thought out it is. Not that I hate creating a UI in XCode, but it’s frustrating to know that it could be much better for devs.
Thank you. This solved my problem!
You'll need a MacOS VM to run Xcode. 😊 
i’ve got it to run on my laptop but it really can’t handle a virtual machine well it would constant crash :(
I always give them the benefit of the doubt and assume that they mean “anyone can code” in the Ratatouille sense of the phrase.
What's the specs of your computer? You'll need at least 16GB ram and a powerful CPU to run a VM smoothly. 😊 😊 
i do have 16gb and a i7 maybe i set it up wrong idk i’ll look into it again
Trig and coding and distinct skill sets. 
I wasn't around for the C++ days, but I find the two situations hard to compare. When C++ was introduced, (afaik) dynamic languages weren't a big thing, outside of Smalltalk. Good REPLs, decent package managers, awesome test frameworks etc. probably weren't ubiquitous. C++ had to compete with languages that didn't necessarily have high standards there either, and for good reason: developing in the 80s must have been completely different than it is today in almost every conceivable way. The languages Swift competes with, at least outside of the iOS environment, nowadays have all of these things. Just compare Swift with e.g. Elixir which isn't that much older but has had a proper REPL and package manager / build system for years.
You do have a point, if Swift is really focusing most of its attention on iOS development, it would be somewhat unreasonable to use it for other things. I didn't pick the technology and probably wouldn't have, but here we are. Maybe some of the marketing ("Swift runs on Linux too", "Vapor/Kitura is great") could be considered a bit... overenthusiastic. However, not all of the pain points are related to doing server side stuff. Good test reporting should be useful for app development too, for example (e.g. on a CI server). And XCode currently doesn't even seem to be able to display a README.
* **No tests!** You should always write some unit tests. * `Contants.swift` is unnecessary. You shouldn't put API keys in a Swift file. Put them in a *.plist* file and put the *.plist* in your *.gitignore* &amp; in your `AppDelegate.swift`, add a check to ensure the API keys are set up and throw a `fatalError()` if not. Alternatively, if you don't want to keep your keys in a *.plist*, you can also do something like this: &amp;#8203; struct Configuration { var apiKey: String { #error("Please enter your API key below &amp; delete this line.") return "Enter your key here" } } This will throw a compile time error if the API key is not set, thus notifying the user that they need to add their API key into the field. Right now, anyone can compile your app and run it without a proper API key specified and it will crash the app. However, it has the same problem with your initial approach, although it is simpler to implement. * You should use `JSONDecoder` \(new in Swift 4\) instead of `JSONSerialization`. * Use DI instead of singletons \(for this you can use a library or factories\), makes it easy to test. Alternatively, there's a smarter way to use singletons: [https://www.hackingwithswift.com/articles/88/how\-to\-implement\-singletons\-in\-swift\-the\-smart\-way](https://www.hackingwithswift.com/articles/88/how-to-implement-singletons-in-swift-the-smart-way) Apart from this, u/jasamer has some fantastic suggestions which you should follow.
Try vmware. I have learned iOS dev with a i5 along with 8gb ram. It runs ok-ish(storyboard loding and simulator launching is painful). https://techsviewer.com/install-macos-high-sierra-vmware-windows/
For a practical approach you can start at raywenderlich.com. They have great tutorials esp. for beginners. E.g. https://www.raywenderlich.com/143771/swift-tutorial-part-1-expressions-variables-constants
True. C++ took *forever* to stabilize. Bjarne began work on it in the 1970's, named it "C++" in 1983, and even in the late-1990's I had very little success in compiling a C++ program with a compiler which it was not originally built for. Different compilers, even from the same year and running on the same platform, supported wildly different syntax for the same features. People are getting upset that Swift hasn't stabilized after only 3 years, but I can count on the fingers of one hand the number of languages which have stabilized that quickly.
I think trying to use async tasks will actually make your timing worse. I'd attempt to queue up everything I needed to play/show ahead of time, and then flip the switch to show/play both immediately one after the other. You will probably have to experiment to see how accurate your timing is overall without any other considerations... the system may not allow microsecond-accurate scheduling to display/audio etc.
You can use DispatchGroup for this, check this article out http://jordansmith.io/dispatch-groups-in-swift-3/
My outsider impression is that the Swift team wrote itself into a corner by attempting to integrate many ambitious features. Marvel said that Infinity Wars was the most ambitious crossover in history, but seriously: * Modules * Generics * Compiled ahead-of-time * Library-defined operators (not just operator overloading) * Complex type inference * Resilience to non-subtractive changes (like how you can add fields to a struct in your library without having to rebuild programs that link against it) * Extensions and conditional conformance Some of these features are extremely unusual to find together. I think that the Swift team took a larger bite than they could easily swallow, and everything is taking a hit as a result. I also think that it's a temporary state, as eventually the backlog of major problems will reduce.
Couldn’t agree more. SPM is really frustrating for me. Compare SPM’s feature-set to that of NPM or Cargo: - no test/dev-only dependencies - no custom test frameworks / runners - no extensibility - no way to resolve dependencies that results in a reliable, repeatable pattern for the file system, which hampers community involvement - clumsy / unreadable test reporting output (XCTest in general isn’t very good) - no easy upgrade path outside the language release process itself - because it uses solely git and git tags, “umbrella” projects are difficult to manage The devs are... nice? But I haven’t really been encouraged by the direction they’re taking with the project and it feels like it’s a poorly-managed project. I’ve tried to get into the code to add some features, it’s kinda hard to follow with oddly named things and a major overuse of extensions. They should nuke it and start over, simplify the package spec, and make it specify sources only — then provide a build tool API to let projects decide how to build themselves instead of every dependency trying to define/configure their own builds across many platforms. I even hacked a prototype out using NPM as the code-sharing mechanism. This is what I mean when I say SwiftPM does too much (or tries to), and therefore, it doesn’t do enough. I bet SPM feels great if you’ve just been messing with Xcode build targets but it sucks when given an apples-to-apples comparison to popular web languages and even other system languages.
Heya I just give a quick look, in the cartTapped button function, you didnt update the cartItems array that the tableview used as data, I suggest you add it like this and see how it goes: @IBAction func cartTapped(_ sender: UIButton) { let classicTeeToAdd = ClassicTee(borw: true, inputtedSize: "Medium") self.currentUser.getUser().modCart(inputtedProduct: classicTeeToAdd) var newUser = AppUser() newUser = self.currentUser.getUser() let newAPI = UserAPI(inputtedUser: newUser) newAPI.saveUser() // cartItems = currentUser.getUser().getCart() } 
&gt; It might be better to think of Swift as a 2 year old baby that has much maturing to do. Then maybe we should stop being downvoted to hell when we say that we like to stick to Objective-C because of Swift's immaturity? Or even when pointing out obvious flaws and pain points? Nah, we like to circlejerk about server side swift and how it's totally a thing. Thing is, you don't get to say that when Apple pushed Swift 1 as much as they did. Hell, I've even been shamed in interviews by candidates for being an Obj-C dinosaur.
With mostly C# and no iOS development experience, it took me 9-12 work days as an intern to *get* Swift. I am still learning a lot about xcode, 3 months in. My supervisor had a great understanding in both Swift and xcode, so he knew what to teach me and when.
If you really want to learn that stuff I suggest you check out Paul Hegarty’s Standford course (193p) on iTunes U. It assumes you have object oriented knowledge but he has a very nice way of teaching, right balance between examples coding and explaining
Stop using playground, just use a macos console application
&gt; Frankly it could also have a long future in app development on Linux if the developers there could bear to let go of their Not Invented Here attitude. This especially considering how crappy some of the C based solutions are in the Linux app development world. Have you heard about Rust and Golang? Swift is ridiculously old fashioned regarding multithreaded work (yeah, I know dispatch, I like it, but give goroutines a shot)
Vapor is a small part of the equation. It's great if you're only doing some webpage serving, but any other library (like a kafka client for example) is terribly untested and outdated. Perfect is a joke too, and littering the ecosystem
As you have experiences with other languages you shouldn't find Swift too hard to pick up – it really depends on what the other languages were! Try whizzing through the videos in my free [Swift in Sixty Seconds course](https://www.hackingwithswift.com/sixty) – each one lasts a minute, so you can get through the whole thing in about 1.5 hours. Some tips to get you started: - Optionals are an important language, feature, but always prefer a non-optional type if possible. - Throwing functions are better than optional returns. If someone wants an optional return they can convert the throwing function using `try?`. - Swift developers rely very heavily on value types rather than reference types. In fact, most of our types have value semantics: integers, strings, doubles, bools, arrays, sets, dictionaries, tuples, enums, etc. If you're making custom types that aren't just UIKit subclasses, prefer structs over classes. - Although I'm not saying you should go full FRP, learning the [elements of functional programming](https://www.youtube.com/watch?v=OgU8d_E1K14) will help you write better, safer, simpler code. - Swift is changing very quickly, with important new features being added regularly. I made a whole site to help you keep up to date: [What's new in Swift](https://www.whatsnewinswift.com). - It's easy to get overwhelmed by the size of major APIs like UIKit, but the truth is that you'll only use a quarter of it – master *that* and you'll be in a great position. - [The books I write](https://www.hackingwithswift.com/store) are pretty good :) (Start with the original Hacking with Swift book, which is [free to read online](https://www.hackingwithswift.com/read).
[Repl.it](https://repl.it) is a website that allows you to write and compile swift code over the web
This looks actually to good to be free? Am I overlooking something? Otherwise thanks. ;)
If you want to learn swift the language (as opposed to iOS specific development) you don't need a Mac; it runs fine in Linux.
• Good use for extensions, it's something I learned too to have an ordered code; • Start use "// MARK: -". It's good for big .swift file. • I suggest you to not call your vars in ViewController or somewhere else with "self.". It's right, it compiles, but it's unnecessary. I personally use it only when required. Less confusion in your code. • I suggest also to put protocols at top file. In this way you'll easily find delegate methods. • Don't use Singleton pattern when not needed. • When returning a Bool, don't "return false .... return true". A "var: Bool = false" .... var = true/var = false ..... return var", is more correct and readable. By the way, good code. 
Check that the aif file is being copied in the bundle resources. More info https://developer.apple.com/library/content/qa/qa1649/_index.html
Nope, it’s completely free
Are you saying the whole app refreshes or everything else is the same except the photos
Sorry I am fairly new to swift. Can you give an example?
everything is the same except the photos
You could create your own little cache. var imageCache = \[String : UIImageView\]\(\) The String would be the image name. So check the cache before reloading anything from the server. Then you could probably save that the user defaults. 
you could make a new class like CustomImageView that inherits from UIImageview. In the constructor of that class you can then set the desired props. class CustomImageView : UIImageView { public CustomImageView() { this.kf.activityIndicator = .activity } } Something like that. Take it with a grain of salt its just a scribble
ok! ill defiantly look into seeing if my hardware is compatible for a hackintosh
Apple often does some innovative and not always easy things \(ex: Swift's enumerations\), but some days I question whether they are capable of implementing a good, robust general API \(ex: Swift's Mirror\). I don't write that as a dig against Apple, but a general thought that often explains inconsistencies such as the ones you wrote about.
I got turned down for a job recently because (I'm guessing), when asked what my preferred app development setup was I replied Objective-C and CoreData. Never mind that I had tons of professional Swift and reactive programming experience. I could see it in the interviewer's body language. Liking Objective-C was just too much.
Ow, I'm sorry that happened to you
Thanks. It wasn't a big deal. I have work (Objective-C work, no less) so it's not a the end of the world. I just thought it was a poor decision on their part. Maybe it was something else. I also talked about pain points in my previous job, which is always risky. ¯\\\_(ツ)\_/¯ 
&gt; Apple built an empire on Objective-C. They can't even build a debugger for Swift. This is harsh but pretty true in my experience. The debugger is pretty useless a lot of the time. I regularly run into issues where: - I can't print variables - I can't step through code 
Why are throwing functions better than optional returns? 
audioPlayer = try AVAudioPlayer(contentsOf: URL(fileURLwithPath: aSound)) Try modifying your code like this. Sorry I’m new here and I don’t know how to format reply as code. 🙏🏻 Pardon.
Add to that the constant SourceKit crashes that keep syntax highlighting and code completion from working or the "This expression is too complex to solve in a reasonable time" message and you wonder if anyone on the tools team ever uses this stuff.
They really are not: [Optionals vs Throwing functions](https://stackoverflow.com/a/31080618/887210) It's an older post but what it has to say is still valid. While creating an throwing function and one that returns an `Optional` can work out to be the same, there's a cost involved in throwing and it can be substantial. Not only that - The standard library tends to use `Optional` over `throw` - There are better tools to handle `Optional` values - nil-coalescing operator - `if let` and `guard let` patterns - `Optional` values have better [locality of reference](https://en.wikipedia.org/wiki/Locality_of_reference) - `Optional` values tend to semantically match returned values - Exceptions tend to semantically match exceptional circumstances rather than expected return values
I always refer to this article before interviewing and make sure I haven't missed anything. [http://martiancraft.com/blog/2016/10/interview\-tips/](http://martiancraft.com/blog/2016/10/interview-tips/)
Looks interesting. I've been working on something similar. Should be ready to open source it within a couple weeks. Maybe we can join forces or compare/contrast.
definitely, I would like to read what you have
I haven’t even got around to touching ML yet. But I can see why you are wanting dispatch queue now.
Your tutorials are very well-written! It’s nice being able to look at the organization &amp; be able to see concise examples of how everything fits together.
I had an interview a little while ago. A couple of questions I remember: What are some ways to track and prevent memory leaks? How can you reduce battery usage while maintaining accurate location tracking?
By programs do you mean iOS apps? Or are you wanting to use swift for other types of applications? Personally, I think the best thing I did when I was learning was finding a small/medium sized project I felt passionate about and working on that. 
https://stackoverflow.com/questions/31422014/play-background-music-in-app Version 2.1
I use this in my app. Basically I say “whenever X happens, request a review”. X is something that probably happens to every user on every session. However, it is iOS who decides whether something happens a or not. You also get no errors or return codes, so it isn’t possible (unless you come up with some clever hacks) to know if the review was requested or not. For this reason, you should never call it from a button named “leave review”, because most of the time, nothing will happen. In my experience, the first time it’s called on each device, it works. So for that reason I tend to “throttle” the call. That means I say something like “if the app was installed less than 3 days ago, don’t request the review”. This gives users some time to use the app before I ask for a review. Asking them for a review the first time they open the app is a sure way to have them dismiss the dialog. 
User privacy, user interface, memory storage and leaks, know obj-c and up to date swift, I like to see what they've built (doesn't have to be massive, just build some little things, I want to see your code and your design), and I like them to code for me (I don't breathe down their neck, I leave them to it but can see everything they're doing from another room). Build out some things, have good, clean code. 
It sounds like you’re trying to persist the images across sessions. You’ll need to save them to disk and have a clever way to retrieve them in the order you want them. Look into `FileManager` to see how you can save the images. There’s also an init for UIimage that takes in a url, you can use that when re-loading the images. 
&gt; Cocoapods are bad for long term apps can you elaborate why you think this is? I've found it to be really well-maintained and simple to use, even when making my own pods.
&gt; All software trains you to avoid its bugs. I think this line bears repeating, because it's true. One of the harder things to learn about picking up a new language (or compiler) is unfixing those points of pain from your head so you can really learn the new thing.
Funny name &amp; icon too 😂
As I said in my post, you can convert throwing functions into optional returns if that's what you want, but you can't do the reverse – at least not out of the box. When you work in an environment where almost everything throws (Vapor is a good example), throwing becomes almost invisible. However, you can still at any point choose to handle errors locally using `do/catch`, or switch to optionals as needed using `try?` – it's just the most flexible solution in many places. Note: I didn't say "only use throwing functions", just that I think they are better than optional return values.
Thank you!
Cocoapods: Pros: - Fast to add, update dependencies - Easy of use Cons: - Higher compilation times (of the project) - Higher upload time to the Appstore Carthage: Pros: - Lower compilation time(of the project) - Lower upload time to the Appstore Cons: - Harder to add, update dependencies - harder to use (harder in comparison to pods) Having some pros and cons about both, I tell you why is the compilation and upload times lower with Carthage, and its because with pod it compiles almost every time you change the target of you app between simulators and/or device and debug/release it need to compile again the whole project including the dependencies, while with Carthage you have already compiled your dependencies, also read somewhere (I didn’t notice or experience this) is that the launch time of the app is slight faster with Carthage if you use (iirc, someone correct me if I’m wrong) static libraries instead of dynamic and also reduces the binary size (again, may you need to dig a bit more on those topics and do your own research/test).
:D
Ah, so that's why i run into some "problems" and certain things didn't work as in only literature. 
Call it when you want a prompt for review to be presented, such as after the user has performed a certain action, or has had the application for a while. For example, in my score keeping app I record the time the app was first opened, and only after at least 10 minutes have passed, I call the prompt method when the user clears their score (meaning they are done with a game). I also only show the prompt if the score is lower because the user is more likely to be happier. I also record whether I shown the prompt for the current app version; and reset this when a new version is downloaded. You should not call it immediately when your app opens. The prompt will appear immediately and users will be annoyed. The API doesn’t queue it up for a later time. The 3 time restriction is meant to prevent users from being bombarded with these prompts. There is no way to know whether the prompt succeeded for was even shown, since the OS will only show it a maximum 3 times within a year long period. (There is actually is also a setting where users can disable this prompt from showing in all apps.) This is also why you shouldn’t trigger the prompt as the result of the press of a “Rate the app” button. Hope that helps.
I wasn't even able to answer a single question 
I am sorry that this blog title disappoints you. what do you mean “implementing UITableView like control in Swift”? Thanks
This is for fixed rows with two lines so that they can be centred to the profile images and it’s not intended for more than two lines. But I like your idea and adding that section when I get a chance. Thank your for the feedback! 
Welp, better to know what you need to learn now instead of after the interview! 
Swift will be dead when Apple throws em for some other language and it will not be anytime soon, don’t know who told you that swift id dead or dying :/
You will have to integrate with HealthKit look into HKHealthStore ( I believe this is the name). 
Working on Socket Cluster client framework \&gt;\_\&lt;
You can also use the AppCode IDE on Windows to learn the fundamentals of the language. 
To an extent. What I'm getting at is that far too many people simply don't have the intelligence to program. No matter how you go about it, you can't improve upon a persons basic capabilities.
Cool. I'll send you a message when it's ready for prime time.
Well that may be their intentions but the reality is far different. By the way I'm not against Apple getting involved in education, in fact I believe they do far too little in that regard. What I have a problem with is how and where they allocate their resources. One thing that would go a very long ways is to invest in colleges instead of Kindergarten. That means supporting the colleges directly with materials, grants, building or whatever. It also means supporting students through grants, scholarships and other ways. Below college the best thing they can do is make high school students aware of the various career paths available to computer science students.
&gt; Elixir Never heard of Elixir up and to this point. I would imagine if they had as many users as Swift they would suffer their share of negative commenting. In any event I see much happening in the Swift world some off which has set the language back a year or two. However it really makes sense in the long term to attack these issues early in Sifts lifetime rather than to try to bludgeon through changes 10 years down the road. Some of these changes are internal to Apple, others external; which also indicates that Apple really is working with the community. In any event I'm really hoping that Apple and the community gets to the point where Swift is standardized as a language. That is likely a year or two down the road but I do believe that it would do much for Swifts future.
Frankly if people aren't looking at Swift they are really out of touch as to the languages good points. No language is perfect but Sift is the first of a new generation of languages to get significant take up. Is it perfect - nope - nothing is but it has the potential to be more perfect (better suited for average development needs) than anything else I've see lately.
Shouldn't it be called IP Man? The IP in TCP/IP stands for Internet Protocol. Ip doesn't mean that. Since it's getting your Mac's IP address, it should be IP, not Ip. Also, what if you have an Ethernet IP address and an 802.11 IP address? Which does it copy?
There was a post just about a week ago saying that Swift would die because of Flutter. I was just pointing how how you can get two extreme views of the same thing. One saying Swift is dead and the other saying it's red hot...
Long story short: Don't bother to read or watch anything by "bloggers", it's often a lot of tripe designed to draw eyeballs. Posting anything that's on YouTube or Medium is a sure way to get me to ignore the link.
I honestly don't give a crap that other people had it worse. Given Apple's resources, there's no reason whatsoever they shouldn't have top notch tools. None.
Useful! Thanks :D
Not OP, but I believe the name is a reference to (this man)[https://en.wikipedia.org/wiki/Ip_Man]
**Ip Man** Ip Man, also known as Yip Man, (Chinese: 葉問; 1 October 1893 – 2 December 1972), was a Chinese martial artist, and a master teacher of Wing Chun. He had several students who later became martial arts masters in their own right. His most famous student was Bruce Lee. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/swift/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
One of the things that I've learned over the years is that every language \(and platform\) has a "number of years" problem... If someone starts now doing iOS dev, they'd be about 9 years behind those that started at the the start. The industry is looking for people with about 5 years exp. I saw a java front end job asking for 15 years exp and a degree... that's a 20 year investment. What's missing in the video is what it takes to get a job. Swift is easier that most to get a job if you're starting out because if you have 2 years Swift, you have a shot at a real job. If you have 2 years Java, you'd be at the back of the line. It's dangerous to suggest to younger people to jump into this or that without looking at the real world and what qualifications it takes to get one of these jobs. How many posts have there been about people wanted to know what it takes to get an iOS job or why they can't get a call back when they know Swift?
don't explicitly unwrap optionals. Use 'if-let' instead. 
Swift’s non-Darwin momentum is dead. Swift has completely taken over Darwin. End of discussion. 
True, the very fact that you can find 180 degree difference on the exact same subject, just goes to show that it's just opinions and don't have much real world value.
It's not the library set, it's the actual language itself. Such as the bad compile times that start around 100k lines of code, not the mention knock on effects such as xcode indexing times and beachballing when you start scaling up the codebase. Objective-C iOS dev is just fine, and they almost all use the same libraries.
There are differences in opinion and that's fine. However, most times there isn't a true, detailed analysis of the situation. Instead it's a couple of people giving opinions, knee-jerk reactions, and pushing agendas. The more controversial they are the more views they get from both sides. Plus, there's very few consequences to writing controversial things. They are mostly self-published and have no one to report to. At least if they were part of a reputable publication they would have *some* incentive to present both sides of the situation and provide a balanced analysis.
Could we not post ads? It really increases the noise in this sub and takes away from people who could use advice and assistance.
All these problems you've mentioned are very true and have also improved significantly since halfway throughout Swift 3's lifetime. SourceKit does indeed seem to be the biggest problem with the language. Compile time is not that bad at all, of course it sucks that you have to do that in the first place, but you might want to try and find out what the bottlenecks are in your project. If you have a 100k line projects, it would be very much worth the time to do so. Apple is fucking slow though that for sure, but personally I feel like things are good enough FOR ANYONE to make the switch now since Swift 4.0 iOS dev wise. I did 3 years of Objective-C notably working on one of the biggest app in the appstore, now after almost 2 years doing 95% Swift, I would never go back. 
I don’t understand why you’re posting this here. I don’t want to see a world where people are promoting their apps on /r/swift. Is the source available somewhere and I missed it?
I had a really unorthodox interview process for my current position as an iOS Software Engineer. One 2 questions pertained to my skill set with Swift. All the other questions were related to relational databases and my knowledge of SQL and Xamarin(neither of which I knew anything about) Still surprised I got the job, but I’m super grateful for it lol 
I’m looking into building an interval training app so I’m interested in this specifically. Basically you do need to start with HealthKit as well as the Watch communication api. There are a couple of presentations from WWDC 2016 to help with this. I’ll post more info as I get farther along. RemindMe! 1 month “to update on heart rate api”
https://developer.apple.com/documentation/foundation/thread/1413673-sleep You almost certainly don’t want to do this though. What are you trying to do?
DispatchQueue.main.asyncAfter(deadline: .now() + 2) { // your code here } 
Hey /u/marie_dm_ is this an open source swift app?
&gt; Top 7 Programming Languages of 2018 That Make the Most Money What a strange thing to look at. What if we applied this metric to other areas of our lives? - Top occupations that make the most money - Top musical instruments that make the most money - Top novella genres that make the most money - Top hair colors that make the most money Don't people do anything these days because they *want* to?
Cocoapods are fine, the main issue for long term apps are 3rd party dependancies in general. Especially the lesser popular ones, the maintainer can stop supporting them. Heck, even popular libraries from big name companies may be sunset requiring you to make unplanned changes in order for the app to continue functioning.
The system that we've created, judges people mainly on their economic value. Look at California, praised for leading the world, we have the highest level of poverty and homeless. I've been in programming long enough to see my skill rendered worthless. It's painful to see that what you've spend your entire adult life learning, won't get you a job. It's a non\-stop battle to keep your skills up to date. Following the market is key.
Is there a windows port of Swift?
Can you send me the link? didn’t saw that post, but flutter is from google and google is not known as a company that do thinks right and the support of their products mostly are ok and in other cases are the worst, just check android, one of their star projects and how many time is taking to put in a good spot (developer tools, better backward compatibility tools, update to all the android devices).
I know this is just in jest, but there are some (very rare) circumstances where thread.sleep is necessary - mostly when talking to hardware that has limited access bandwidth. It can also be very useful when designing test cases for asynchronous UI handlers. But yes, it should never be used in the examples you provide.
This is helpful, thanks. I’ll definitely take care to relegate it to appropriate time and place in the app.
Structs are (mostly) meant to be simple and transparent in their implementation, so it makes sense to have a memberwise constructor and init all fields manually (unless there’s a custom init). Classes on the other hand often hide their details and might initialize many members with a short(-er) init. Don‘t forget possible inheritance as well. Imho classes should still auto-generate a memberwise init if there‘s none declared but hey, that‘s how it is.
You could voice that on the swift mailing list.
sell the laptop and hit up ebay for a late 2012 mac mini with 16gb ram and ssd upgrade. that's what i use as my daily driver and it handles everything i throw it. i'll have xcode open with 3 different simulators, photoshop open with a few big files, web browser with multiple tabs, amazon music app, slack, etc etc etc. it rarely gives me any problems.
Good post. &gt; Imho classes should still auto-generate a memberwise constructor if there‘s none declared but hey, that‘s how it is. I can see this being implemented at some point down the line.
Just because you are big doesn't mean you have unlimited resources. Just finding people to write compiler tools is a challenge in and of itself.
It's been a known issue since the very early days of the swift-evolution mailing list. [Proposal #18](https://github.com/apple/swift-evolution/blob/master/proposals/0018-flexible-memberwise-initialization.md) quotes Chris Lattner saying that one of the memberwise initialization weaknesses is that it doesn't work with classes: &gt; The default memberwise initializer behavior of Swift has at least these deficiencies (IMO): &gt; 1. Defining a custom init in a struct disables the memberwise initializer, and there is no easy way to get it back. &gt; 1. Access control + the memberwise init often requires you to implement it yourself. &gt; 1. We don’t get memberwise inits for classes. &gt; 1. var properties with default initializers should have their parameter to the synthesized initializer defaulted. &gt; 1. lazy properties with memberwise initializers have problems (the memberwise init eagerly touches it). Discussion was [deferred](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160111/006469.html) and hasn't made a comeback yet. I believe that it is out of scope for Swift 5 discussions, as the Swift developers crunch on ABI stability.
[https://www.reddit.com/r/swift/comments/8ep7ln/a\_new\_prediction\_that\_swift\_will\_die/](https://www.reddit.com/r/swift/comments/8ep7ln/a_new_prediction_that_swift_will_die/)
The only alternative for Xcode are the jetbrains IDE, but don’t know how well they work, I use for Java and Android and for those platforms are good.
Double has lots more precision than Decimal. Also all of the math functions will require Double types. So if you’re using Decimal then you’ll have to cast them to Double.
Thanks, that's exactly what I was hoping to hear. My only concern is when doing basic math, it looks like double has issues with predictability. I'm referring to the classic playground example in Apple's documentation where it shows two doubles being added and the result being off (0.1 + 0.1 = 0.19998). My application has to do with aircraft performance and I want to make sure I won't get erroneous results.
Thanks, that's exactly what I was hoping to hear. My only concern is when doing basic math, it looks like double has issues with predictability. I'm referring to the classic playground example in Apple's documentation where it shows two doubles being added and the result being off (0.1 + 0.1 = 0.19998). My application has to do with aircraft performance and I want to make sure I won't get erroneous results.
My full time job today is an up to date swift codebase. When I did swift scaling tests with generated code, the 'bad times' curve started at around 70k lines. Our code base is way past that at about 1 million lines in tests and code. We had an objective-c codebase at about the same size before that, and it did a clean build in 5 minutes, xcode indexing worked and beachballs and stutters did not happen. Backend code bases usually scale to far larger sizes than mobile client apps, so I really do not advise people to use swift for their backend because they will start hitting those limits as their codebases scale beyond 100k and beyond. For 50k line swift code bases with one or two devs it's usually ok.
Have a look at the keychain access framework https://github.com/kishikawakatsumi/KeychainAccess It has some good examples on how to work with the keychain.(touch and Face ID) The basic idea could be whenever the customer opens the app you require the reauthentication with touch/Face ID to load the tokens from the keychain into the memory. If it fails multiple times you remove the keychain entry and log him out. (Hint writing and removing an entry doesn’t require authentication while updating does. So update with a remove and new write works without seeing a promt) About the oauth request stuff I’d recommend to have a look at Alamofire examples for example this one https://github.com/p2/OAuth2/wiki/Alamofire-4
[This is all you'll ever need!](https://www.hackingwithswift.com/) I started off just like you \- I picked up /u/twostraws website from somewhere and never looked back! I now have a full time job developing iOS apps! Best of luck to you!
You’re a saint, much appreciated!
Go through everything he has available for free \- then definitely support him and pay for some of the stuff \(if you can\). It is all worth way more than the price tag, anyways. When learning \- don't copy and paste \- write everything out yourself. Over and over and over again. Go through all of his lessons multiple times and start to build off of his examples in your own personal projects. It isn't very hard to pick up all of this stuff. Shoot me a PM sometime if you ever need some advice or assistance \- if I can help I surely will.
&gt; Our code base is way past that at about 1 million lines in tests and code. 1 Million lines in how many frameworks? One single framework for the app itself (not including the tests)? What you guys can do to help would be to break down your code into separate frameworks if possible, that way you can just link against a prebuilt dylib/binary of that framework without having to have all your xcodeproj themselves imported in one workspace/project. I.e something similar to how Carthage recommend you import in frameworks. It will also help in avoiding to needlessly rebuild unchanged portions of your app making build time faster and, of course, not having to have all these xcodproj open will help XCode a shit-ton. 
Check out Udemy, specifically Angela Yu’s iOS 11 and swift 4 course. They run specials and you can nab the course for 10-11$ (USD), worth we’ll more than that. Then dive deep into documentation from Apple and hit up YouTube for tutorials on using documentation and debugging. Good luck!
As if it wasn’t proof enough, literally a half a scroll down this medium article popped up: https://reddit.com/r/Xcode/comments/8i5l5c/learn_ios_11_app_development_from_scratch_using/
We have about 200 frameworks. Still horrible. If you want to approximate our experience, codegen about 1million lines of code with about 100 line classes separated into 10k files and you'll see how xcode will choke on it. The classes can be identical code with random names for variables, functions and classes.
This course is amazing, can't recommend it enough
would this included adding a podfile
Are you asking if a pod would be able to cache something? Probably but you can do it natively without pods. 
I just posted my first iOS game written natively in Swift using SpriteKit! https://itunes.apple.com/us/app/spacemunch-arcade-space-game/id1381410251?mt=8 I hope I can carry the concepts I learned and build a masterpiece some day. Ran into some really frustrating issues along the way but it feels amazing to overcome them. 
Honestly, my Mac's menu bar is pretty full already. Is there a better way to do this?
Interesting article, thanks for the help
No problem! Looking forward to the new content!
IBDesignables are a bucket of pain. You'll probably save a lot of time and frustration if you just avoid them entirely.
&gt; Classes however often are more complex and hide their implementation How is this different from structs? Can't structs hide their implementation just the same in Swift?
I can’t recommend Hacking With Swift enough. It’s a wonderful series u/twostraws is a wonderful corner stone of this community. Currently listen to the SwiftCraft podcast now with him and learning even more. Get the basics down then find something you’re passionate about and try to build it. Don’t think you have to remember everything, Google is your best friend. 
See that far too often - people trying to memorize everything. There are things you should memorize, sure, but don’t try to remember it all! And if you do use google/stackoverflow - do not ever just copy and paste! Learn why a solution works - right it out yourself - and understand why you’re using that method!
Seems like many do the code challenge, so I started brushing up on these only to find out that Swift isn't used by all. You should know a language like Python, Java, C\+\+... well enough to do some of those algorithm tests. One other thing, you should be prepared to actually explain WHY something works instead of just memorizing the code. This is also somewhat common with whatever project you come with. So if you list some project as your 'showcase' project, they'll probably try to find out if you just did a tutorial or if you truly understand the project.
The Angela Yu course is great (esp for $12!); I’ve also heard very positive things about The Big Nerd Ranch IOS and Swift books. Fireside Swift has also been a helpful podcast for me to re-enforce the concepts while not in front of my computer. I’ve learned that for me to make progress, I have to immerse myself in Swift every free moment I get. Keep trying new resources and don’t give up; learning is a great thing!
My big thing is I will copy from stack overflow or google and if it works I delete it and rewrite it. If it doesn’t work I try to understand why. But I agree with you 100%
You’re the best in Swift Teaching !
Objective-C with ARC cannot catch Objective-C exceptions either, so this limitation is not unique to Swift.
I think decimal is suited for base 10, e.g., currency, while double is more suited for arbitrary floating point math/arithmetic
You should look at `Foundation.Timer`. You can have it invoke a closure every time a certain interval passes: self.timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { _ in // update clock UI }
Yep I have the issue too. Great first impression of iOS development.
You *can* catch Objective-C exceptions in Objective-C+ARC, but Clang won't generate code to clean up retains/releases during stack unwinding by default. It's no different from people not writing exception-safe code in MRR mode. If you compile your code with `-fobjc-arc-exceptions` it will, but you can only rely on for code you write, nothing involving frameworks. And your code size will... increase 🙃
Another note (beyond what's already been said): automatic memberwise initializers are internal, so if you want to expose them beyond your current module you need to write them longhand.
This is the result of this CocoaPods issue: https://github.com/CocoaPods/CocoaPods/issues/7606 There's an easy workaround, just this to your Podfile: ``` # Workaround for Cocoapods issue #7606 post_install do |installer| installer.pods_project.build_configurations.each do |config| config.build_settings.delete('CODE_SIGNING_ALLOWED') config.build_settings.delete('CODE_SIGNING_REQUIRED') end end ```
I’d recommend any of the Big Nerd Ranch books on IOS. They teach you everything about IOS development from the ground up and include exercises and challenges at the end of every chapter. I built my first app with the knowledge I learned from their books.
Check this out https://developers.google.com/maps/documentation/elevation/intro
Seems like people are enjoying it, any feedback/thoughts?
there must be a better option that selling a higher performance gaming laptop for an old mac, im losing money and perfomance in this operation 😶
Thank you for your kind words – I'm really glad to help contribute to this awesome community!
I just recently shared useful resources for interview preparation. Hope, it will be useful for you: **Getting Started** * [How to get iOS interviews](https://youtu.be/suZWwFjBRKk/) by Sean Allen Check this video-guide where Sean documented his job interview process with Coinbase, Apple, Google, and Facebook. It will help you begin a job search and recognise what companies to look for. * [iOS developer resume examples](https://www.raywenderlich.com/54029/ios-developer-resume-examples/?flawlessappnewsletter) by Ray Wenderlich team Useful tips on how to structure resume and what information should be added there. You will see great examples for iOS CVs &amp; cover letters. In another article within these series, the editing team shared Dos and Don'ts in preparing resumes (use it for your own docs). [Interviewing, applying &amp; getting the first job](http://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/?flawlessappnewsletter) by Orta Therox I love this comprehensive guide from Orta. It’s an answer on how to start the professional career when you are junior, where to look for a job, what to consider in every interview step. And even how to email the hiring team. Just read it! [How to get a job as an iOS developer](https://www.hackingwithswift.com/articles/10/how-to-get-a-job-as-an-ios-developer/?flawlessappnewsletter) by Paul Hudson Paul explains how to define what job will suit best depending on your level. Together with tips and techniques on applying for entry-level, mid-level or senior roles. My favourite tip for juniors was “Always be coding something”, would love to see this more! 
I’m a few months in to learning Swift and I recommend all of the above. There is also a lot of great stuff to learn on the Ray Wenderlich site. I especially recommend their videos on auto layout. Those were the only videos that finally helped me wrap my brain around it. The Angela Yu course on Udemy is the best on the site and I’ve bought most of them. I learned enough from this one to start writing my own apps. Mostly I recommend not going all in on one course. Everyone has their own way of explaining things. If something isn’t making sense, let someone else explain it to you. It’s worked for me so far. 
Really cool. Rather than explicitly injecting your own custom service, do you know how other applications can "advertise" their service to other apps (like the AirMail Composer option in your example, how did they do that?).
Not possible. Sorry.
Thanks everyone! I really appreciate all the feedback and will definitely use them. Once I get the basics, it will be great to have all these resources to reinforce what the others are teaching and give a different approach to understanding the code as well
Have you tried adding Coding Keys enums? They are supposed to be optional, but given that error message, it might be something worth trying?
His keys match the JSON (assuming the JSON in the OP matches what’s being called). What would you suggest he provide as values for any coding keys? 
Maybe the book has no volumeInfo, check in debug output on what title it happens 
1. I just added Swift challenges yesterday so the resources / comments will be lacking \(for now\). 2. There is no native mobile app at the moment but it's in the works. 3. Enjoy!
Yeah i was just guessing which is not a recommended way to solve problems. Coding keys do not have to have values. enum CodingKeys: String, CodingKey { case kind case volumeInfo }
I usually use [Valet](https://github.com/square/Valet) for my keychain access.
Very solid advice.
ahh thanks!
Can't find app, just your website
App as in web app. Single page application. I'm working on a React Native mobile implementation right now though.
Ah ok. Was anticipating full app
I don’t think the view model should have any reference to the view controller. I think the view model should be an intermediary object between whatever is instantiating the controller that uses the view model, and that controller itself. Coordinator &lt;~&gt; VCA-VM &lt;~&gt; VCA
Looks very cool. Thanks for making &amp; sharing!
Just tried the google books API you mentioned, the actual JSON response is like this : { "kind": "books#volumes", "totalItems": 1, "items": [ { "kind": "books#volume", "id": "cWlO-Va-nf8C", "etag": "bf/FE3eDR4k", "selfLink": "https://www.googleapis.com/books/v1/volumes/cWlO-Va-nf8C", "volumeInfo": { "title": "UNDERWATER WELDER, THE", "authors": [ "Jeff Lemire" ], .... You need to wrap the Book array inside the key "items", like this : struct BookAPIResponse: Decodable{ let items : [Book] } struct Book: Decodable { let kind: String let volumeInfo: Info } struct Info: Decodable { let title: String let authors: [String] } func getBookInfo() { let jsonUrlString = "https://www.googleapis.com/books/v1/volumes?q=isbn:1603091467&amp;key=AIzaSyByVxRsAT9AbhRm9cfJ7NRW9d9HI7Af_ec" guard let url = URL(string: jsonUrlString) else { print("invalid url string lel") return } print("starting urlsession") URLSession.shared.dataTask(with: url) { (data, response, error) in guard let data = data else { return } do { let decoder = JSONDecoder() let bookAPIResponse = try decoder.decode(BookAPIResponse.self, from: data) for book in bookAPIResponse.items { print("book Data is \(book)") } } catch let error { print("Failed to decode JSON:", error) } }.resume() } getBookInfo() 
&gt; I don’t think the view model should have any reference to the view controller. I think the view model should be an intermediary object between whatever is instantiating the controller that uses the view model, and that controller itself. &gt; &gt; Coordinator &lt;~&gt; VCA-VM &lt;~&gt; VCA Well, my view model (or, what I'm calling "view model", anyway) is basically the brain of this screen. I have very little code in my ViewControllers because testing them is a pain in the butt, so I don't (besides UI tests). The only thing that my ViewControllers do is pass touches into method calls on the view model, and display errors reported by the view model. So the view model does all of the heavy-lifting and sometimes needs to display something on the screen (usually only if an error occurred). I'm not sure if my architecture is "good", but it works well, is easy to test, and is mostly clean, except for this cyclic reference issue (which happens in a lot of places with the delegate pattern). &gt; &gt; as for your data source question, think of weak references as a pointer to something else that’s holding the reference. It will be deallocated if it’s the only thing holding the reference. So in the above example, if Coordinator or VCA are retaining the data source, then it can be weak in the view model, otherwise, you need a strong reference. It really depends on how you’re retaining the datasource. I understand the concept of weak, strong, unowned. You'll see in my example that the datasource is a custom TableView, which is a weak reference on the owning ViewController. So, the datasource's lifetime is not tied to the ViewController, so you think that maybe it should be a strong reference. But, on the other hand, if the ViewController is gone, I really don't have much use for the datasource anyway, so maybe it should stay weak. 
&gt; I would have a weak reference to the controller in the view model so that the controller can be released from memory if it is no longer needed. So, like I have it now? &gt;Also why does your view model have a reference to table view? Use reactive paradigm or such to bind your controller to your view model Why not? My view model fetches stuff from the internetz and puts it in the table, and then it also uses what's in the table (that the user can modify) and posts it to the internetz. The custom table class implements a protocol for adding elements and getting all the elements, so my view model doesn't take a literal TableView type, but rather an object that implements this container-style protocol.
honestly tho, do you have aspergers?
https://www.bignerdranch.com/books/
To find out who called a function, you can put a breakpoint in the function's body. Then when the breakpoint gets reached, you can see the call stack. Search online about Xcode breakpoints. 
Thanks Matthias.
I would avoid having a reference to the view controller in the view model and use a delegate instead to let the view controller know the model has updated. As you said, the view model makes it easier to test, so the view controller shouldn't be a dependency at all. That's why some people use RxSwift and similar libraries to separate the dependency and get the callbacks. The view controller would setup those bindings, which you can replicate in the tests you write.
I mean this question is kind of vague and confusing honestly. Where is the database? Are we talking a persistence database stored locally in a file or a data source stored remotely on a server? Why is the version stored in the database? One option would be to hardcode it into the build settings or read it out of user defaults. It seems like you have no way of detecting the update and updating the local databases. I'm guessing that when you delete and reinstall the local data stored in the database is recreated from scratch. Consider adding a runtime check to validate your version changed and then update the local database. 
I'm sorry, i worded that really poorly. The variable is just sent from the client to the database when the user submits it ( a score in this case ). Somehow that code that declares my variable is not updated automatically in my new version, so it keeps the value that i was declaring in the code of my previous version instead. And somehow, uninstalling and reinstalling the app fixes it, but that's not a great solution.
As long as you know basic syntax, yes.
You create your WeatherManager inside of ViewController. In init of WeatherManager you call updateVC method which creates another instance of ViewController, which initializes WeatherManager and so on and on. If you want to update your UI, WeatherManager should have a delegate (ViewController would be it) which it should call
Where is the database? Locally on device, or remote? Keep in mind that when you uninstall an app, all of the app’s data (anything bound to the app locally) is deleted. When you update an app this does not happen. 
I'm having issues with the implementation of Strings. For example, in the **shuffle the name** challenge, I'm getting errors on indexing strings: func nameShuffle(_ str: String) -&gt; String { let firstSpace = str.index(of: " ") ?? str.endIndex let afterFirstSpace = str.index(after: firstSpace) let firstName = str[str.startIndex ..&lt; firstSpace] let lastName = str[afterFirstSpace ..&lt; str.endIndex] return String(lastName) + " " + String(firstName) } This may not be the very best way to do this, but it works in a playground. It won't compile in the challenge. Calling this in playgrounds: let string2 = "Sterling Archer" nameShuffle(string2) returns `"Archer Sterling"`. It errors in the challenge.
Yeah it's remote. Here is the code in question that updates the database: https://gyazo.com/8b2ca997203fa46417cdf6412f454713 Here score was set to 10 instead of String(score) by accident in the previous version. But it kept submitting score as 10 even though it was updated to the new version, as in the picture. 
Probably a difference between Swift 3 and 4. I'm in the process of updating the backend to support 4.1 (and updating various other languages as well. 
Code is run on a separate server inside a docker container. Built with: 1. Meteor 2. React 3. Semantic UI
I've discussed this a lot elsewhere. For example, here's my ["what is protocol-oriented programming?" article](https://www.hackingwithswift.com/example-code/language/what-is-protocol-oriented-programming): &gt; One powerful feature of Swift is its ability to extend protocols – to be able to add new functionality not only to one type, but to a whole collection of types that all conform to the same protocol. &gt; Protocol-oriented programming takes that feature and encourages you to craft your app’s architecture around it so that the first thing you do is sketch out one or more protocols rather than get straight into concrete types. &gt; If you’re coming from a more traditional object-oriented system where inheritance is more common, try to think as your first protocol as being a base class. You can then create new protocols by inheriting from that initial protocol, and write extensions so they have default implementations. &gt; By writing lots of small protocols with extensions, you’re getting a similar approach to multiple inheritance. However, because protocol extensions can’t include state you don’t get any of the cruft, and Swift’s constraint-based conflict resolution is easy enough for everyone to understand. If you haven't used protocol extensions before, I have [an article on that too](https://www.hackingwithswift.com/example-code/language/what-are-protocol-extensions). For specific examples of POP in action, I made a video called [Natural Swift](https://gumroad.com/l/natural-swift). It's free to download, and teaches POP as part of three technologies – the other two are value types and functional programming.
You should definitely not use double if numerical precision is of any importance! Precision is precisely what the decimal type is for.
If you're new to programming, diving straight in with a game might be tricky. You might want to learn Swift in isolation first – I have a [whole series of free videos](https://www.hackingwithswift.com/sixty) to help with that. I also have a longer [tutorial series](https://www.hackingwithswift.com/read) teaching Swift from scratch, where every third project is a game. If you don't mind paying for stuff, I have a book dedicated to making games called [Dive Into SpriteKit](https://www.hackingwithswift.com/store/dive-into-spritekit). It doesn't teach Swift, though, so you should at least complete the video course linked above fisrt.
Thank man, I’ll check it out
wow great explanation thank you!
I would still consider a separate protocol rather than linking directly to the view controller and then have the view controller implement that. You can then have a separate method on the protocol for errors. The delegate can decide what to do when the error method is called. If the view model is mutable and there are possibilities of errors then that's when binding comes into play. People like to start using RxSwift in that case or something similar, but a delegate protocol works too.
Nothing conceptually different; protocol is just objc’s term for what java calls interfaces. They are somewhat beefed up in terms of capabilities though: you can add methods to all types conforming to a protocol (protocol extensions), conform only when conditions are met (conditional conformance), and attach related types to be filled in later (associated types, so that things like Collection can specify what’s in the collection). One thing that’s a bit unusual about Swift is that most other languages support *either* RTTI/reflection or complex non-type-erased generics, since supporting both is ridiculously tricky to implement (“can this Any be dynamically cast to this concrete type” can change after compilation because another module can add a conditional conformance in an extension later, so the entire generics model has to be queryable at runtime).
Thanks! Rather than making a new Shared Service, you make a shared extension, which you can read about more here https://developer.apple.com/library/content/documentation/General/Conceptual/ExtensibilityPG/Share.html 
For some reason, some people have the default outlet set to weak when it should be strong (it's also Apple's recommendation). You will have a strong reference most of the times to the tableView anyways because it's a subview of self.view but if for some reason you have to remove the tableView for a time and then add it back later, you want to have it as a strong outlet.
Breakpoint inside the function. Once the compiler stops there insert `bt` to backtrace the stack call. 
Thanks! How could I access the ViewController's functions without running it's init()? could i just do ViewController.updateUI() instead of ViewController().updateUI() ?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [Same question, but on here. (Swift Language)](https://www.reddit.com/r/programming/comments/8ijz2p/same_question_but_on_here_swift_language/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Ive tested the process, it works
What do you mean, “tested”? Have you run the IPA on an Apple device successfully?
Huh, TIL. Guess I stand corrected.
This app would be for Mac only, and would allow beginner developers to easily convert the projects into IPA. And Cydia Impactor just allows you to send apps to your iDevice without the App Store. All you would have to do is add the Profile through Settings (Really easy) and the app would open. It doesn’t *have* to be jailbroken.
If you really want a popover on iPhone, you can conform to `UIPopoverPresentationControllerDelegate` and return `.none` from `adaptivePresentationStyle(for:)`. The default behavior, however, is exactly what you're seeing – that in compact widths a popover will present as a modal. You're effectively opting-out of adaptive presentation.
My phone is not Jailbroken, [this video explains the converting process](https://youtu.be/5gRp5Z0tpXM), [this video explains the Cydia impactor process](https://youtu.be/n5EtDpqumws), and [this video explains why you don’t need a jailbreak](https://youtu.be/Hr8vX4xRZr8).
I had understood return UIModalPresentationStyle.none to be enough for forcing it to show up as a popover in mobile as well. Is that outdated?
Really trying to knuckle down and keep studying after a holiday, had one month off and I’m already rusty. Really want to make a demo app to take into future job applications and possibly go to some local meet ups just to get a feel for the community and to learn!
&gt; adaptivePresentationStyle(for:) I updated to that and the popover still presents as modal on iphone. Updated code in post too.
Thanks for pointing out how to improve the set the buttonitem. Nope, does not get hit after I add a breakpoint. So I must have something going on in the segue setup. I replaced my function and rewrote it using your example and now a red popover is showing up!! Thank you very much! I thought I'd never get over this hump. Alright, so I have a tableview in storyboard set up to be my popover. Can I add it in like: let storyboard = UIStoryboard(name: "Popover", bundle: nil) Or is a better way?
The fact that you’re already unable to use Xcode 9 and iOS 11 is, in my mind, a really big problem. Sooner or later you’ll be forced to do the upgrade, and when that time comes, the upgrade will be much worse than if you had done it incrementally. Also, going from 2.3 to 3 is a pain in the ass. But after that, they’re all pretty smooth. Think about it this way too: every line of code you write between now and then, you’ll possibly have to upgrade. So you’re making the problem worse each day. By upgrading now, all your new code is up to date. Good luck to you!
This is a swift forum, but I’d recommend checking out Unity.
No problem! Conceptually a Storyboard has multiple "scenes," and "segues" let you transition between scenes. In the example I sent, I wasn't using a segue, I was just presenting a view controller directly. It works just fine, but if you're using Storyboards it might be better to stick with the segue approach. [Here's a sample app](https://nofile.io/f/Sor8fTOvbAS/Test.zip) which demonstrates the 2 options. There are 2 tabs which do the same thing – the 1st uses segues and the 2nd presents the same table view controller popover, but uses an IBAction instead. The segue one overrides the `prepare(for:sender:)` method to configure the destination view controller before the segue occurs. The IBAction one makes a new view controller from the main Storyboard using the "Storyboard ID" string (which is set in the storyboard scene itself).
What the other guy described is not POP, it's basically multiple inheritance with protocol extensions since swift only allows you to inherit from 1 class. POP is when you have a task that can be done multiple ways and you make an interface over all the implementations and use it the same way, no matter which implementation you are using. Example: you want to send notification to the user. For system notifications, you have to ask for permission first. So your NotificationManager protocol will have both "askPermission" and "send" functions no matter if one of it's implementation has an empty askPermission function because it only pops up some alerts as a way of notifying the user and you don't need any extra permission for that. Now when you want to change your class to also send system notifications, all you have to do is to modify the dependency injection for that class since it's already trying to ask for permission.
Gonna check that out, much appreciated!
The Ray W Udemy Swift4 course has a whole section on networking. Note that networking changed not long ago, so using things like Alamofire have been made less needed. This means that buying a book might not be a good idea because it could be outdated.
You should watch this talk from the WWDC 2015: https://developer.apple.com/videos/play/wwdc2015/408/
CLion has Swift support (https://www.jetbrains.com/help/clion/swift.html) and runs on mac, linux and windows, didn't try it so don't know how good it is. Also the AppCode is better than Xcode in some cases.
This site from /u/twostraws should sum it up pretty well: [https://www.whatsnewinswift.com](https://www.whatsnewinswift.com)
Should it be alphabet only? What should ‘z’ return?
['æ' obviously](https://www.youtube.com/watch?v=f488uJAQgmw) :) I guess they would loop back around to 'a'
&gt;Is an app made with swift 2.3 on xCode 8 "Super retina compliant" No. &gt;or is the migration to swift 4 mandatory for that new requirement? Also no, migration to Swift 3 is sufficient. Regardless, you will have to move to using Xcode 9 and therefor at least Swift 3, and the step from 3 to 4 is small and painless, so I'd recommend to move to 4 while you're at it. &gt;Is there an actual way to test on a physical iPhone X since their minimum OS is 10, with an app in Swift 2.3? No. Basically, your issue boils down to the fact that if you don't migrate to Xcode 9 and Swift 3 or 4 soon, you'll be unable to publish updates to your app. Since the migration from 2 to 3 can really be a PITA and will entail loads of testing even after you have everything compiling, I'd strongly recommend moving rather sooner than later.
Hey, SpaceHonk, just a quick heads-up: **therefor** is actually spelled **therefore**. You can remember it by **ends with -fore**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
The site looks very comprehensive. Where would you recommend someone with a little experience start off from? I have started learning the swift basics from the Apple Swift document and CS193p. I would love to be able to accelerate my learning. Background: - My last iOS app was 6 years ago. I wrote and got 3 apps on the store (they sold a grand total of about 100 bucks but still were my babies) - I have 20yrs of programming experience (niche application) 
I think you‘re missing the code in the AppDelegate to handle the URL callback. Or you at least haven‘t shown us the code for it.
delete
Check out this StackOverflow on ASCII in Swift. https://stackoverflow.com/questions/29835242/whats-the-simplest-way-to-convert-from-a-single-character-string-to-an-ascii-va/29835324 You could take the character, convert it to ASCII (int), shift it, then convert it back to a character.
 word?.characters.map { char in return str.indexOf(char)! + 1 }.map { index in return str[index + % str.length] } Something like that, don't have access to a Swift env so can't test it.
Okay, I’m gonna start making the app today. But the main reason I’m making this app, is so beginner developers who just want to make apps for fun, don’t have to spend $100 a year. It would be a free, alternative from the enrollment. But if it were to make anyone feel better, I could restrict it to 5-7 conversions a week?
The code i have in AppDelegate is as follows: import UIKit @UIApplicationMain class AppDelegate: UIResponder, UIApplicationDelegate { var window: UIWindow? func application(_ app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey: Any] = [:]) -&gt; Bool { if url.scheme == "KTracker2" { let service = OutlookService.shared() service.handleOAuthCallback(url: url) return true } else { return false } }
&gt;I would still consider a separate protocol rather than linking directly to the view controller and then have the view controller implement that. You can then have a separate method on the protocol for errors. The delegate can decide what to do when the error method is called. Right, yeah. That's what I'm doing. The ViewController just implements the "ErrorHandler" protocol, which is what the ViewModel actually wants. &gt;If the view model is mutable and there are possibilities of errors then that's when binding comes into play. People like to start using RxSwift in that case or something similar, but a delegate protocol works too. I've heard a lot of praise for RxSwift. But this is my first iOS app experience, and it's a fairly simple app, so I thought I'd take it from the basics first.
Don't forget to wraparound on Z!
Start with my free video course, [Swift in Sixty Seconds](https://www.hackingwithswift.com/sixty). Each video is one minute or less, but you're welcome to skip any that are below your level. From there, try [Hacking with Swift](https://www.hackingwithswift.com/read) (also free to read online), which takes you through building 39 complete iOS projects while learning Swift, UIKit, SpriteKit, and more. I also [sell a range of books](https://www.hackingwithswift.com/store), but you should probably start with the free content first to see how you like it.
If the only problem you have right now is redirecting the back to your application, you don't even need to include your OAuth code. To debug you should just open up `KTracker2://some/url/` in Safari and see if it opens your app. If it doesn't work, you may not have registered the URL properly for your app. If it does work, the issue lies elsewhere.
Apple’s Find My Friends app does this. Unfortunately it may not be easy keeping your app active in the background - normally it’ll go to sleep after 10 minutes. There are some ways around it, like playing silent audio, sending notifications to the app, and registering as a voip or gps app, but they hurt battery life and may get you rejected from the App Store. There’s also a power efficient “major location change” api, but it’s only helpful over long distances. 
Thank you
The best reason is there. Xcode 9 also contains new battery tools. Also, starting un july, you need to support iPhone X screen. Only Xcode 9 contains iPhone X simulator. I also really like the decodable protocol introduced in swift 4.0.
Why? Duolingo can be useful because not everybody has a person who speaks another language to practice with, but if you have a computer, you can just practice writing programs on that computer. Computers speak computer already.
&gt; Although the journey from version 2 to version 3 (or in this case 4) is quite extensive and painful, the code is a lot easier in terms of readability and interpretation. This will help in the long run as your coders will become a little more efficient and be able to cover more ground in the same time once they learn the syntax changes. I'm skeptical that the minor syntax changes from version to version are anything but negligible, compared to interpersonal differences.
No, you don't need to get your own domain for the redirect. Did you try doing what I mentioned above? If the URL does not open in your app by just typing it into your phone/simulator Safari, it means you didn't register the URL properly. Have you gone through [https://developer.apple.com/documentation/uikit/core\_app/communicating\_with\_other\_apps\_using\_custom\_urls](https://developer.apple.com/documentation/uikit/core_app/communicating_with_other_apps_using_custom_urls) ?
Beginners do not need a paid developer program account. As others have stated the paid developer program account allows you to distribute on the App Store. If you just want to “convert a project to an IPA” and deploy to a device you do not need a paid developer account. https://developer.apple.com/support/compare-memberships/ 
Only, strings can’t be accessed by integer indexes. 
i registered the url scheme on the application as "KTracker2" i just tried doing what you mentioned and i get "safari cant open specified address 
Not too sure why it doesn't work if you follow the instructions above as mentioned, it shouldn't be complicated for this alone. You can try cleaning and rebuilding, restarting your simulator \(if you're using it\). Do you have restrictions on in \`Settings \&gt; General \&gt; Restrictions\`?
The 100 bucks is for releasing an app on the app store. Enrolling is free. 
[You do need an enrollment, the “export” button is greyed out](https://imgur.com/gallery/PggqHyr) 
You've got the goal of MVVM right but some of the implementation details are a bit muddled. You should generally be able to put your VM in its own file and NOT import UIKit. The VM doesn't know about UIViews/UIViewControllers or have any references to them. You should be able to swap out your view layer from UIViews to scene kit, to openGL, to no view layer at all and the VM doesn't know or care. The VM exposes a public interface of properties and methods. It is owned by the view and the view observes its properties(via KVO, RxSwift, whatever) and calls it methods. VM properties are bound to view properties as trivially as possible `{ vm in submitButton.isEnabled = vm.submitButtonEnabled }` and the method calls are trivial `vm.onSumitButtonTaped()` sort of things, so the view layer is as dumb and thin as possible. So in your example the VM would expose an array of cellVMs, and the View/VC would be the table view's delegate/datasource. Some delegate method calls might result in calls to the VM if they're business logic related(ex: scrollViewDidScroll might cause the VC to call vm.loadMore() which triggers an API call) and others that only matter to the view (ex: heightForRowAtIndexPath) would terminate in the VC.
Computers are also dumb. If you're new to coding, you need challenges given to you, before you start working on your own projects.
I started this course a few days ago and I really enjoy it. OP mentioned that they have no programming knowledge and I think this course is good for that. I have a Python background so I've been able to skip several sections just because I already know the basics (data types, conditionals, etc.), but those sections are helpful if you have no programming background.
Putting myself through Swift playgrounds! Just a baby programmer here, know a lil HTML and some easy java, but mobile dev is where it’s at, and I’m looking to get into it! 
Not to bombard you, but I’m hoping your course will be a good supplement when I need it, and possibly help me when I finish and move forward from what I’m doing meow. Nice! I’m currently working my way through swift Playgrounds learning, and I’m a bit stuck on the “Arrays” section. Would that be covered in your Introduction to Swift course or elsewhere? 
Arrays are covered in the Hacking with Swift introduction, in the very first Hacking with Swift project, and in Swift in Sixty Seconds.
Wonderful, I’ll go get it! Thanks, Swift Playgrpunds has done a great job up until this, but i think their “interactive game” format is just starting to be a bit lean on explanation and promotion of understanding of what the heck I’m doing
Also real quick, you’re gonna last th at me, is there a way to get a physical copy of Hacking With Swift? I hate ebooks. I’ll deal with one if I have to but I’d love a physical one
That is a good point. Figured it was a stretch but I had to ask.
I never said they were negligible, they are still something of concern but since there are so much less changes going on now it is a lot easier to correct those changes and migration assistant also covers much much more ground. 
I'm on board. My ViewModel actually takes a protocol object, not the ViewController. It just so happens that my ViewController is the one who implements the protocol. So that can still lead to a reference cycle. From looking at other examples, it seems like standard practice for classes to hold weak references to delegates, which is basically what my ViewModel is doing here.
I am in the same place, have a bunch of C and python in my background. I went through everything as I found that Angela will give nuggets of valuable information in every lecture. Totally worth the time (I increased the speed to 2x for some).
I think you mean “roast my code”?
This may be overkill, but since the built-in reordering features of collection views won't give you the behavior you're looking for, one solution is to use the [drag and drop APIs](https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/supporting_drag_and_drop_in_collection_views). Apple's documentation for this is pretty good, but you can find tutorials online for more generalized behavior (such as dragging in content from another view or app) and then tailor it to fit your needs.
Hey So it looks like you are trying to use oath2 to login via twitter. You can google for diagrams but basically you create an oauth app on twitter and that gives you an id, secret and redirecting url. You then add these to your app. When a user tries to authenticate they are redirected (async) to twitter with your credentials and asked to sign in. If they do they are sent back with a code. You then go to twitter with that code and they give you a user profile which you store in a session. This profile marks the user as authenticated. My guess would be you need to set up the app and add your credentials. Hope that helps and sorry for the block of text. 
I've just been using iOS Charts. It's simple to use, documentation is in Java but it's easy enough to interpret. You aren't restricted to Xcode 9.3. btw, you can look on github and target whatever version you want using cocoapods/ carthage etc. Just check the releases section of the repo for versions. 👍
I think the best way to do this is to combine a silent notification handler with a major location change handler. If you send a silent notification to a device with the content-available flag and the user hasn’t killed your app from the task switcher, it won’t show the user a notification but it will let you trigger a background task that fetches the user’s current location and uploads it to your server. Augmented with the major location change api, you can track users accurately when needed without using too much battery. You cannot make iOS post location updates on any schedule because background apps cannot fire timer blocks indefinitely. 
What do you want to use it for? You can't trust the data in it.
I’ll be around :)
If imageItems.count &gt; 0 then you just return from the function without executing the string part.
I have noticed an issue with that. Since it is being dispatched asynchronously both functions may colide in the calls (race condition). I’ll give it some different tries, maybe I’ll create a separate function which takes the **session** as parameter and there I parse them individually.
I just started learning about CloudKit so I don’t have code examples but there are 3 types of databases. Private, only the user has access to. Shared, only the user and other selected users have access to. Public, everyone has access to. You should just need to define which CKDatabase you want to use at the time... https://developer.apple.com/documentation/cloudkit/ckcontainer/1640408-sharedclouddatabase
That's not quite true... The time limit for an app to continue executing in the background as soon as the user has put it to the background is usually 3 minutes (though subject to change based on what the OS dictates). Until this time limit is reached, you can track rapidly but at the expense of the user's battery so the less frequent, the better. After the app has been in the background for 3 minutes, setting significant location changes allows you to be reinvoked after a user moves 500m or every 5 minutes. Whichever is greater of the two. Meaning if I travel 2km in 2 minutes, the app won't be able to get location again until 5 minutes have passed. Or if you are staying one place for an hour, the app still will not be able to send location data. Which is good because there's no need in this circumstance.
The last time I actually tested the significant location change API, I had to drive nearly 10 miles for it to trigger. This makes it ok for city-level location, but worthless if you want to know which bar your friends are at, which friend’s house your child is at, or whether there is lightning nearby (what we wanted). Maybe it works differently now? This was iOS 8, I think. For background processing, you should get up to 10 minutes if you call UIApplication.beginBackgroundTask, but I haven’t actually timed it recently. We used it for uploading photos in the background. 
10.0 miles = 16.1 kilometres. _____ ^(I'm a bot. Downvote to 0 to delete this comment.) ^[Info](https://www.reddit.com/user/bot_metric)
 session.loadObjects is to load objects, not to check whether they are images. Try session.hasItemsConformingTo before loading.
Great article! I’ve been implementing this myself in almost the same way but I think you’ve got some better techniques. One suggestion, I think it’d read easier to chain flatMap and map calls instead of nesting them. return query().flatMap { ... return user.save().flatMap { ... return foo.bar.flatMap { ... } } } Is a lot harder to read than return query().flatMap { ... return user.save() }.flatMap { ... return Foo.bar }.flatMap { ... }
thanks, hadn't thought of it! I agree, that does look easier to read, and probably less intimidating as well lol. I'll try to incorporate that into a future tutorial.
Great! Please keep making good content! I look forward to your future work.
did it....did it die yet? I've been told that Swift will be used for the web one day..
There's tutorial on youtube which explain exacly that and easy to follow!
Thanks i will search for it
I believe it has changed then. I've tested this a lot within the last 6 months as I built this feature for a monetized SDK where this information is crucial for our product. My application tested this using push notifications. You're right about significant location updates not being very accurate though! When an app comes back to the foreground, the developer is able to switch from significant location updates to something more accurate (something that takes more time and more battery). Fine-tuning for your specific use-case is encouraged.
When I see that now in Vapor 3 models are tightly coupled to the database that backs them I even more hope that soon they will change Fluent into a data-mapper pattern instead of an active-record pattern.
Its on you. Many ad companies allow developers to run ads in their apps. Apple is not in ad business so they have nothing to do with your app other than checking it for security concerns. Biggest name in Ads business are google and facebook. I don't know about how facebook ads work. Associating your apps with google ads have become way simpler. You first normally create your apps(ad-less), then use google's ad framework called Firebase to target ads on various section of your app like bottom of screen, or overlays etc. Google can now display ads on those section and pay you 60% of click economy generated through your app, if users click on them. Once thats done, you simply make an ad sense account to link to your app and upload app on app store. Apple will now check for security vulnerabilities, if there are any like unreleased/unofficial apis etc. If everything is good, your app is available to download on App Store.
I tried to make it clear that I didn't make the prediction, I just posted what was there. I posted another saying that Swift \(and ObjC\) were red hot. Some seem to think that I share the opinion, but I posted both sides.
I read this article from a guy who got a job with Facebook as an iOS engineer in 2017: https://medium.freecodecamp.org/software-engineering-interviews-744380f4f2af &amp;nbsp; From his article, it seems that data structures are important. But maybe it is only for larger companies and less for smaller ones.
They’re important but Facebook is the all star team. They legit have a group of extreme talent that could change the world dedicated to their scroll bar. Our friend here just wants to get rockin. Knowing how to remove a node from a binary search tree and how to resort that tree is def cool but very advanced 
Every iCloud user technically has a shared database, but the process of sharing items between users is cumbersome and woefully undocumented. Ultimately you want to store a record in the Private database, and create a CKShare with participants. It's actually a process I've considered open sourcing my library for, since... I see very few people using it due to lack of understanding.
I recently made a tiny app to calculate the order of cars through an intersection based on their current and desired position, road signs, rules, and intersection layout. If you haven’t had a lot of exposure to data structures, you probably would’ve been stumped on how to model that data. My solution was a weighted digraph, which made the entire thing trivial (about 500 LoC). My point is: learn your data structures and find concrete examples that make them useful. They aren’t that hard to learn, compared to some other concepts in CS/CE. Take your time. Oh and get a book. 
Sounds like you need to read up on database migration
Don't forget that Swift isn't used for testing at one of the biggest companies. The testing system used don't include Swift as an option. They did use C\+\+, Java, Python and some others, but no Swift or ObjC.
I’m a little late to the party, but I was wondering if anyone has learned swift through the official book in the iBooks store 
They're important for the technical interview at big corporations, but they hardly come up in common practice when building everyday apps. Especially implementing algorithms from scratch; being able to reason about which algorithm to use is a bit more common.
I’ve found the same thing. When I built my first CloudKit app using shared databases there was extremely little documentation. 
Yeah, what I’ve thought about open sourcing is the wrapper I built to handle private zones, shared databases, subscriptions and so on... along with a better way to do the sharing that’s not forcing people to pass around archaic urls that feel really out of place.
are you for real? :D format that thing, or link in from github/pastebin
You are using too many arrays. Don‘t worry you will learn better data structures over time. Tell me what you are trying to achieve with your arrays and buttons and I will help you. &gt; by removing the „“ That will definitely not work. 
So I couldn't map my array and change it's type? I have a lot of arrays in the app it's part of it so I'm hoping to find something that fits well, I'm away from the computer but its consuming me so I had to post something, when I'm back I'll message you with a more detailed look if you wouldn't mind taking a look? 
There is no way around it. Getting from Swift 2 to Swift 3 tends to be tricky, but that’s what you’re paid for.
That’s definitelly not for a junior or intern. Junior or an intern should know basic tableviews, collectionviews, make a simple network request and some autolayout. 
Extreme talent? Very advanced? Binary search trees are a topic covered in high school computer science courses.
So what? OP specifically asked about algorithms and data structures, i.e., topics which aren't generally language-specific. Even if they're looking to interview at a company which uses a C++/Java/Python-only testing system (which I've never seen), there's no reason to kick Swift to the curb. Nobody is writing iOS apps in Python.
That's also fine, as long as viewmodel talks to an interface. But I would prefer using a controller to bridge that gap since it holds both the table view and the viewmodel 
Use sets
How should I do?
If you’re just starting, I’d say do it with nested loops. It’s a good exercise. Just loop through one array and in that loop go through the other array to check if that element matches any of the elements of the other array.
Isn't it a pretty slow ?
Yes but our computers are *really* fast so unless the arrays are incredibly big, you should be fine.
Ok. I’ll have a look when I’m home. 
I’m assuming that it’s not that they want the client to have access to the database portal, they want clients connected with the app to be able to see the same data. A social network would be a good example of use, the client can share their data with a restricted group of other clients or make it public for everyone to see.
Why does order preservation matter and how would that make it trickier?
I've done that and still have no luck. :(
Not sure if this is what you’re looking for, but it’s definitely much simpler and uses less memory than the struct solution: https://stackoverflow.com/questions/25921204/convert-swift-string-to-array TL;DR: Just cast the string to an “Array”.
i am sorry, isn;t it readable ? I thought its formatted correctly and it appears like that 
Have you heard of Amazon? They sell books and stuff on the Internet. Have you actually checked? I have. So your "I've never seen" doesn't hold water. The "So what?" part is that OP won't be able to take the test. There's no reason to get upset, pointing out that Swift isn't used by Amazon in their testing isn't the same as me "kicking Swift to the curb". I don't understand why people have to be so childish about these things. What I said was true, OP won't be able to get a job with companies that test this way and that seems to be the point. Algorithms are about problem solving, I've been a professional programmer for decades and have never, ever written a sort or tree in real life, only in college. How many iOS devs actually write trees or sorts that have shipped in a product? Fact is they are built into the system. What does writing iOS apps have to do with this? This is about job interview prep and Swift is not offered by Amazon?
I deleted my previous comment (couldn't get it to run, google services info.plist file was missing). I found a couple of issues in your code: LoginVC: Is it possible that your crashes happen here: https://imgur.com/a/WUvkGGB ? Knowing Xcode, having two different func names might be enough to trip it up. Also, your second segue ("toMessages") doesn't seem to exist yet, it may lead to another crash if you try to use it. SignUpVC: You instantiate an Storyboard Imagepicker, and another one programatically. Why? Saving an image should probably go into the Model layer, since it has something to do with persistence. Don't let your VCs become too massive. General: Why do you force unwrap all optionals? It's mostly unnecessary, and only leads to more crashes. If you need to access an optional, use "if let" or "guard" to make sure they have a value, but you really can leave them alone otherwise. Especially if you're segueing, not all variables may be set up before the view is loaded, which is why unwrapped optionals are safer in this case. 
If possible can you create a pull request, I’m having trouble understanding the first part about LoginVC
Kurt Cobain coding. Always threatening to kill itself and ons day it will, for reasons no sane person understands.
Check Array's* Contents arrays = more than one array Possessive nouns. How do they work? http://www.2ndgradeworksheets.net/possessivenouns.htm
Oh yeah no problem if you don't want to send it, that just means that I can't build or run the code. 
I’ll send it now, I can generate a new one anyways haha
If he wanted to accomplish what the link wanted which was a string with letters removed. If he just wants the intersection that's a different story. 
Check to see if you haven't hooked up the button to more than one outlet or action. Look at the stack trace and look at the reason for the SIGABRT.
I'd love something in the style of Ecto in Vapor, I found it a very nice experience when working with Phoenix apps 
You can't trust client-side code to be non-malicious. Nothing is preventing a client from writing arbitrary data to the database.
I’ve seen tutorials that show this and tutorials that don’t ever show this. It’s very useful though. Honestly once you’ve messed around with optionals and stuff, that line looks really confusing with two ?’s but it’s actually really easy once you understand. I usually just forget the proper syntax to do it.
This has actually been around since Swift 2.2. Have you read Apple’s official Swift book? It’s available for free and contains lots of small but useful information like this. Even if you know a lot of the basics, I highly recommended taking a day or two to read the entire thing (don’t skip anything even if you think you know something). You might not retain everything, but you will definitely learn about other new things or best practices. The Swift Programming Language | https://itunes.apple.com/us/book/the-swift-programming-language-swift-4-1/id881256329?mt=11 
I'll take a go at that now, thanks mate.
I'm not familiar with either of them, nor the language they're written in. Can you tell me what you like about Ecto?
No but I will now. I used a few tutorials and online resources but I believe you are exactly right. I think I have written some cool things but then I still have "doh" moments over things that make it obvious I've skipped useful stuff. 
How can you know that the client-side code is actually what's running on the client? It can be manipulated by a third-party (in most cases a user). Easiest example is a webpage. Everyone can just execute arbitrary JavaScript there, as you're probably aware. Now, there's no technical reason why this isn't true for your mobile app as well. Just because the ecosystem is locked down doesn't mean nobody is gonna be able to either jailbreak his phone, or reverse-engineer your database access API.
&gt; change it's type its* type it's = it is its = the next word or phrase belongs to it : /
I highly, *highly* recommend reading [The Swift Programming language](https://itunes.apple.com/us/book/the-swift-programming-language-swift-4-1/id881256329?mt=11). Front to back. You don't have to understand everything (you won't), but you will learn a lot in the process. 
source for this? 
The code base needs to be gigantic if this is an issue for you. Or you are doing something else wrong
Yes, it's good if that's the case. However, I feel like OP is asking to share a database between different clients, otherwise I don't know why he'd need a special "shared" DB, instead of just adjusting his server-side logic.
I’ve recently interviewed with Facebook, Google, and Pinterest. My recommendation is that you learn your way around Trees, Graphs, Queues, and Stacks, plus some of the more prevalent algorithms, including Quick Sort, Merge Sort, Knapsack, and how to use Dictionaries/Hash Maps to do Memoization. If you know your Swift, plus Foundation and Xcode, and the concepts above, you will do fairly well at a tech interview. I haven’t found a job yet, but I can assure you that the suggestions I’ve made are based on the whiteboard questions I was asked in interviews. Most of all have fun and good luck!!
There’s a variant on this using `map`, very nice if you want to process the unwrapped value. For example if you want to figure out if your current jump is a new record compared to the previous record - when a previous record exists: let improvedRecord = previousRecord.map { newHeight &gt; 0 } ?? true
I use `nil coalescing` everyday 
https://medium.com/@RobertGummesson/regarding-swift-build-time-optimizations-fc92cdd91e31
I'm not the op, but I remember reading it in a few swift build guides like this one \(although this is old, I don't know if it is still the case\): [https://medium.com/@RobertGummesson/regarding\-swift\-build\-time\-optimizations\-fc92cdd91e31](https://medium.com/@RobertGummesson/regarding-swift-build-time-optimizations-fc92cdd91e31) You can also test it manually by compiling with "\-Xfrontend \-warn\-long\-function\-bodies=100". I also remember looking into this a lot earlier this year. Our project took \~7 minutes to build \(clean/new branch\), and occasionally \~3\-4 minutes even with intermediate build products. But it is a lot better ever since Xcode 9.3, with its new parallel build system \(cut build time in half for me\). So while I think the subtleties of the compiler are nice to know, they are all subject to change, and it is probably better to just focus on writing clean code. Swift isn't as fun if you can't take advantage of its elegance. :\( 
Get used to feeling stupid. This operator was added in 2015. It appears to be on the level of a 'move over law' or 'seatbelt non-usage is now a primary offense' grassroots effort. It appeared in Swift, C#, and Perl in 2015.
Really? This is all you have to say about that sentence. Is this r/EnglishLearning or r/Swift? Of course its possible to change it‘s type, but I am not sure if its the right thing to do here. We need more details!
Here's a sneak peek of /r/EnglishLearning using the [top posts](https://np.reddit.com/r/EnglishLearning/top/?sort=top&amp;t=year) of the year! \#1: [128 Words to Use Instead of "VERY"](https://np.reddit.com/r/EnglishLearning/comments/8bv9gx/128_words_to_use_instead_of_very/) \#2: [So proud!](https://np.reddit.com/r/EnglishLearning/comments/8fafu1/so_proud/) \#3: [A simple guide to English tenses](https://np.reddit.com/r/EnglishLearning/comments/6t5f72/a_simple_guide_to_english_tenses/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
But it’s fun to learn something new 
Do we have access to change server side logic in CloudKit? Don’t we only have enough control to create Zones / Record Types and maybe a few other similar things?
I can confirm from experience using the warning system for long compile times. If you have a small project it won’t matter (the compiled code will run at the same speed, it’s just compiling that takes a bit longer
I can’t look at the code right now but off topic: use camelcase to name your variables. It’s a swift convention 
Check if your IBOutlets are correctly assigned in Interface Builder. 
Do you mean all your outlets are assigned to a single button/label, or they are assigned to the respective buttons/labels?
I debated on a git for this. I guess i will just have to do so. [https://github.com/Wdrussell1/Life\-Counter](https://github.com/Wdrussell1/Life-Counter)
1. They’re a useful tool. Avoiding them dogmatically is counterproductive 3. That simply isn’t the case. Map on optionals is well defined. If it weren’t meant to be used that way, it *wouldn’t be a function on Optional* Please avoid stating your personal style/opinion as if it is irrefutable fact
They are all assigned to their respective labels. Such as the life to life and \+ and \- to their respective buttons. None of them are crossed. 
I took a quick look at it. You connected your "-" UIButtons for all your buttons to multiple IBActions. Go to your Storyboard and click any one of your "-" UIButtons then on the right hand navigator click the last tab which is the connections inspector. There you can see all the things the UIButton you selected is connected. In your case you have connected your "-" UIButtons to multiple IBActions. You can disconnect them in the connections inspector. Do this with all your "-" UIButtons so that they are only connected to 1 IBAction each.
&gt; If it weren’t meant to be used that way, it wouldn’t be a function on Optional Just because you *can*, doesn't mean you *should*. You *can* force unwrap all optionals you encounter, but *should* you? You *can* write all of your view code without autolayout, but *should* you? You *can* write your entire app in a single file, but *should* you? From wikipedia, "map is the name of a higher-order function that applies a given function to **each element of a list**, returning a list of results in the same order." This is what map does in *every* programming language that has a map function. It's not a simple opinion. 
Thats exactly what i did. I noticed that some of my spelling mistakes were still in there where i was trying to fix them they stayed even though i deleted and re\-created the buttons. Fixed that and all the buttons work perfectly. Thanks a ton for helping. Feel kinda dumb it was that simple. But its a learning process for a reason.
Upon further inspection i see what you were talking about and thats exactly the issue i had. Buttons had functions that didnt exist. 
Thanks again, I think my biggest problem is exactly what you are saying. Its just about working the whole xcode application rather than the code. While i am not exactly great at the code and mostly borrow beg and steal where i can to figure things out....i am in a editor that is just so crazy and out of my element. Not to mention i have to do all this on my macbook instead of on my lovely multi-screen windows desktop. I would love to be able to work in Atom or NP++ instead. 
yea xcode is definitely confusing for new comers to iOS. I suggest using an external monitor connected to your mac if you have one
Sadly i dont. I would love to have one however with my current setup i dont have the space to have dual monitors on both my windows desktop and mac. I am suffering however its working well enough so far. Right now its more of a tinker. When i get further into what i really want to make i will be taking it a step further with a monitor and actually getting my developer account. 
Great. If you’re ever modifying the names of the variables, especially `IBOutlet`s, you should use the refactor feature in Xcode.
Hey, please change the sound effects on the game. Especially when losing a star 😂 that sound makes me aggressive. Other wise pretty cool! Can the black hole actually grow if you ‘munch’ enough planets? Would be a great feature. x Tibor
OK, it was a loose example typed from a phone. There could be better use-cases for sure. The keyword `map` might be confusing to people but who knows somebody will rename it to `unwrap` in a future release just as `flatMap` changed to `compactMap` for some cases. Using `map` in this way sits perfectly between nil-coalescing or a ternary and 6 lines of let-if-else.
The database includes record types with fields that can only include specific data types \(text, numbers, etc\). Nothing that is saved is executable code. You decide who can create / read / write records but these records are restricted to the predefined record types. A user can only access / modify records they have created or have had shared with them \(modification of shared records must be turned on through the cloud kit dev portal\). Authentication and server security is handled by Apple.
&gt; Have you heard of Amazon? They sell books and stuff on the Internet. Have you actually checked? I have. So your "I've never seen" doesn't hold water. I haven't checked them in particular, recently, but that's just one company. (They're also quite famous for the independence of their teams, so I'm not convinced that their interview process for one team is the same as for another. I've been offered jobs there which didn't go through the standard hiring process.) For the vast majority of programmers who aren't working at Amazon, this is irrelevant. &gt; I don't understand why people have to be so childish about these things. I've re-read my answer several times, and I really don't see anything "childish" about it. Can you point out exactly what you're seeing? I would speak exactly this way to a company CEO. &gt; What I said was true, OP won't be able to get a job with companies that test this way and that seems to be the point. You haven't actually responded to anything I said. In your mind, how does learning algorithms in Swift make a person unable to write those algorithms in other languages? If a person read TAOCP and learned algorithms and data structures in MMIX (or worse, MIX!), do you think that makes them unable to apply this knowledge in C++/Java/Python? &gt; Algorithms are about problem solving, I've been a professional programmer for decades and have never, ever written a sort or tree in real life, only in college. I've been a professional programmer for decades, as well (who's being childish now?). You're really stuck on these two. Sorting is just one algorithm. Trees are just one data structure. I've got hundreds (thousands?) of pages of algorithm and data structure books on my shelf, and most of them are not about trees, or sorting. You're taking one company, one data structure, one algorithm, and one programming language, extrapolating to an entire industry. That argument suffers terribly from sampling bias. *Most* programmers don't work at Amazon, *most* algorithms are not sorts, *most* data structures are not trees, and *most* people learn algorithms and data structures in a different language than they eventually implement them in.
i've been thinking about this and my biggest complain isn't the fact that you're using map on an optional, it's just how you're using map. in the case of an optional, map is traditionally used to transform the value (ex $0 * $0, $0 + 4, !$0). your example is specifically performing business logic inside the map, which just feels dirty. also, they will never rename `map` to `unwrap` because it isn't designed to unwrap things. that's what `?` and '!' are for. 
&gt; I come from a strictly linux environment so lowercase is something i try to stick to. I haven't heard a non sequitur like that since "[You'll have to speak up, I'm wearing a towel](https://www.youtube.com/watch?v=jk8SToEQPGw)".
Did you profile it?
i recently [commented above](https://www.reddit.com/r/swift/comments/8j5pln/swift_still_making_me_feel_stupid_alternate_title/dyxwj29/), i thought about it and don't specifically mind map being used on an optional, moreso what's happening inside the map. map traditionally modifies collections, so something like $0 * $0 on an optional (like the apple doc example) is fine, but this thread's example performs business logic inside, which i can't agree with. 
Glad you found a solution! Off topic, you can kill about 20 lines or so of code if you used tags to declare your buttons. Then just check which button tag is the sender and perform action. Maybe even just a simple case function? Just a thought! Awesome job!
I haven’t looked over all the code in your gist but there seems to be a lot of unnecessary calling for segues. Like in the SignupVC you are dismissing the controller, then going to your new controller. If your method on the main screen checks for if there is a valid user you won’t need to perform that segue and can just do it in your SignIn view controller file. I’ll actually look at the problem tomorrow!
I assume this is an xcode item that i am unaware of how to do just yet. Its a solid option as i am hoping to make this a pretty solid application. Its a learning experience that i hope to maybe turn into something useful. 
You should also keep in mind [the ternary operator](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/BasicOperators.html#//apple_ref/doc/uid/TP40014097-CH6-ID71). Even if the nil-coalescing operator didn't exist the ternary operator would still be shorter than your if statement, and would let you use a `let` rather than a `var`.
Yes in fact this is for MTG. I am getting kinda tired of seeing tons of apps for it that suck. So many want to give you only part of what you want and then lock the rest behind money walls. Or have constant ads running. I want to make a solid, low battery solution to the problem that locks nothing behind a paywall. No ads at all, only a donate button. I hope to do more with it later on but for now thats the goal. I am a total newb to doing xcode, however i have done some minor things for doing automation of app installing and profile deployment. I am TECHNICALLY the Mac admin at my job. Though its really a glorified way of saying i am the only one brave enough to tinker with them on a deeper level. 
Ok. That sounds much more reasonable. :)
glad we could come to an agreement 😃️
So civil; You really are Canadian, aren’t you? :)
i sure am! i also noticed we happen to work at the same company 😅️
I was told by Amazon that all programmers go thru this test and it has maybe 5~6 languages... No Swift, no ObjC. The OP is job hunting and has been asking these related questions for a while. Jumping in and saying "So what?", "there's no reason to kick Swift to the curb", and "nobody is writing iOS apps in Python" doesn't add anything to the topic. This is about testing for jobs, not what people use Python for and at what point was I "kicking Swift to the curb". That's the childish part of this. This has nothing to do with making iOS apps and what tools are used or the status of Swift, it's that Swift isn't used. These tests aren't about iOS dev, they're about getting in the door and past the 1st stages towards a job. They used an automated system where you have a box with choices. You pick a language and it runs your code. Swift and ObjC are NOT on the list. Nobody was kicking Swift to the curb, nobody was suggesting that Python was being used for iOS dev. You added nothing to the thread. What happens when/if the OP gets a call to take a test, finds out Swift isn't being used for testing? The whole point of me saying I've never written a sort or tree is that these are testing things, these are what people do in college, but don't really apply well to day to day work in iOS. That's why the whole "nobody's making iOS apps in Python" is just silly. What does that have to do with the point? I don't understand why you'd come in and defend Swift (when it's not under attack) and try to discredit a post designed to help the OP. &gt;do you think that makes them unable to apply this knowledge in C++/Java/Python? This is exactly my point, OP should be doing this and not waiting to the very end. This is about test prep. Preparing for a code challenge. You haven't added anything to this, nobody's bashing Swift, nobody's suggesting that Python is used for iOS dev or that doing a challenge in one language can't translate to another. You've jumped into a post, started kicking dirt around for nothing. That's the childish part of this. Nothing has been gained. 
I think you're missing the next part from wikipedia: "The concept of a map is not limited to lists: it works for sequential containers, tree-like containers, or even abstract containers such as futures and promises." Another way of thinking about optionals is that they are either a Singleton List, or Empty, which is actually hinted at in the implementation ``` enum Optional&lt;A&gt; { case some(A) case none } ``` You claim that this is what `map` does in every programming language that has a map function, however the same logic can be used to claim that "every language that has Optional also has a map on Optional". I personally use Optional.map pretty frequently and I think suggesting that someone shouldn't use Optional.map is unhealthy to the wider discussion about why we have these tools at our disposal, and where they have come from. https://en.wikipedia.org/wiki/Map_(higher-order_function)
Hi, you could either save them as a json file. That's the easiest way to do it and it's best for small apps. The next option is either Realm or Core Data. Realm is easier to use than Core Data but adds about 5mb to your app size. Core Data requires a bit more ceremony but it's inbuilt. If I were you, I'd go with JSON. The new Codable protocol in Swift 4 makes them a breeze to marshall and unmarshall. 
I didn’t check all the code because im not on a computer but a way that you could achieve something similar is using enums with values like i.e.: enum FormValue { case integer(valure: Int) case string(value: String) case double(value: Double) } I may have syntax errors, this may be a pseudo code but I hope I wrote it right.
I forgot about that. Going to give it a shot, thanks.
That’s pretty cool! I hope that you can make that a reality. If you want any help down the road I’ll gladly add some to the project if need be! There is potential to make it look really polished with some killer UI/UX work!
It’s pretty obvious what’s wrong if you just read the error messages...
I appreciate it. I feel like a total newbie trying to do something over my head but i think this is the best way for me to learn. It might help if I knew ANY language. But from what i see Swift is so different that it might be easier to learn it due to how integrated the language is with Mac/iOS.
I get it, it does say its missing a file. But if you see the problem why not help the guy out? Geez, i just started playing with swift in the past two days and glad you didnt comment on my post asking for help. 
`z:\Swift\usr\lib\swift\CoreFoundation/CoreFoundation.h:25:10: error: 'assert.h' file not found #include &lt;assert.h&gt;` In this line you will see it says assert.h file is missing. Sadly the other commenter decided to not be helpful. 
This is false though. I cant test the app on my own device without the developer program. I can create the app and use it on the virtual phone but i cannot do so on my personal device. Not without the $99 fee.
So i am thinking of this in a different way. Instead of trying to use any kind of swift or something to make this work. Why not make a linux binary. Essentially just have a copy command and copy the contents of a xcodproj into a zip file and then compress it properly. This would achieve the same results. I guess theoretically too you could link an app with a github URL and do the same thing. This would make it possible to offload the process to a server with user logins. 
I actually use it most for String-formatting. If somebody's username is set I create a greeting, otherwise I hail the user differently: let greeting = user?.name.map { "Hello \($0)" } ?? "Please register" This would be cumbersome or impossible to do with other methods like ternaries or traditional if-then. And please don't attack the use case I have again, this is _example code_, not the real problems I'm tackling day by day. It's not all over my codebase. But it definitely has it's place from time to time.
like i mentioned, it would be cumbersome to do that with other methods fit in a single line. that line has a lot of logic and I personally think it should be split up into &gt;=2 lines. If you're providing example code, it should be a good example, otherwise what's the point of the example?
Is this C compiler output? That's a standard header file. I can't tell exactly what you're running but you seem to be trying to compile with a broken C compiler. Does a trivial C program compile correctly on your system? If not, this isn't a Swift problem.
It is not my application so i am unsure what he is doing. The thing i do see is a file is missing. the OP is the one with the issue.
1. I disagree. There is a difference between whether you haven't jumped yet at all, or you did jump but had a terrible jump with a height of 0. Doesn't make a difference in this specific case, but you sometimes have values that are "uninitialised"... having nil for those instead of a default value can make code clearer. 2. Yeah... 3. This wholes statement is simply false. Mapping collections is one use case of map, but it's not the only one. (And obviously, if you disagree, you also disagree with the authors of Swift's standard library, because they didn't just put something in there that's "not intended to be used"). /u/lucasvandongen tried to show that `map` exists on optionals, so while your code is also valid, it doesn't really help with regards to that.
I can see that, yes, but assert.h is there, in z:\swift\mingw64\x86_84-w64-mingw32\include and so my problem and question remains.
The C compiler is mingw and the Swift for Windows download comes with its own copy of it.
This hasnt been updated in many places then. 
The issue you need to solve at that point is why the application cannot see the assert.h file. I am not 100&amp;#37; of what you are working with. However it seems as though the application isnt looking into the folder where thats located or the file maybe named wrong. You might check and see that the file extension is actually what you want\(.h\). You should enable windows file extensions and verify this. 
I don't want to be rude but I don't think you can help me.
An image post? Sorry, you really should post text instead. That way people can copy-paste the code and work on it. I don’t even bother looking at code if it’s an image. 
lazy var location = CLLocationCoordinate2D\(latitude: currentLocation.coordinate.latitude, longitude: currentLocation.coordinate.longitude\) // Incorporate the Data var sunInfo = EDSunriseSet.sunriseset\(with: Date\(\), timezone: TimeZone\(abbreviation: "EST"\), latitude: location.latitude, longitude: location.longitude\)
[https://github.com/Kediel/Chicken\-Coop\-Attendant](https://github.com/Kediel/Chicken-Coop-Attendant)
I have a feeling we need even more context than this. Hopefully you can get that GitHub link working. 
Sorry about that, the repo was initially private so I just made it public. Try again!
Well he told you the solution, you don't have to accept it...
The problem is that no one here likely could help you with the details you provided. The only thing we can tell you is that the file is not being found. For all we know you have two folders one on the desktop and one in the downloads and one has the file while the other doesnt. But with the details provided we only know it cant find the file. 
I'll infer from that fact that there is a lazy var there that these properties are being declared as ivars of the class they're contained in... Thus, you are trying to use location to instantiate sunInfo, where you don't have access to self yet. This can be very easily fixed by making sunInfo a lazy var as well.
This code is inside your `SolarTableViewController` class? You have a ton of code in that view controller, it probably should all be extracted out into a model class instead. The problem is you’re trying to use one property to initialize the other but because the first property is not available yet it’s going to give you an error. Do the initialiazation of the second property in an `init` method or later, by then the first one will be properly available. 
Your `var sunInfo = ...` requires access to the `location`, but seeing as let/var values are initialized before `self` is available, this isn't possible. The reason it mentions that `self` isn't available is because it's implied when you use `location`. Two solutions include making `sunInfo` lazy, or making it a computed property.
I strongly disagree with this point: &gt;No networking in unit tests. If a unit test performs a networking event, it’s not a unit test! If you're not unit testing your networking code, or how the rest of your code performs under adverse network conditions, you're just messing around and not really testing the app. 
He didn't tell me the solution.
Check why the compiler is not finding it under that path. Or just put the files where the compiler expects them...
You should be testing what your application does when it gets the response it expects as well as a response that it doesn't. If you're actually performing the network call, you're considerably slowing down the speed of your unit test suite. Don't let slow tests destroy your test suite. There is a place to test whether or not you're sending the right data to your client -- the backend. Doing that type of testing on the client is a lot of downsides with not much upside. Assuming you're in control of your API, you can achieve this through a versioned API, graphQL and a number of other ways. If you're not in control of your API, then your vendor likely has a stable API with long-term deprecation notices. 
I don't agree at all. You need to test against bad data, latency, proxy servers, invalid SSL certificates, expired authorization tokens, out-of-order responses, etc, etc. I am amazed at how many apps fail under adverse network conditions - try setting DNS to 127.0.0.2 and watch them lock-up, crash, or leave a half-drawn user interface on the screen. Or bring the network up-and-down a few times and watch them throw multiple stacked error messages on top of each other and not automatically remove them when the network comes back online. Most importantly, apps often talk to buggy third party servers and testing the 3rd party API should be part of any good test suite. Now I'm not saying you have to run the networking tests on every single internal build, but they should be part of your suite and tested regularly. 
&gt; There are three kinds of lies: lies, damned lies, and statistics. For this benchmark we implemented Treap in a few classic (C++, Java, C#, Python) and hyped (JavaScript, Kotlin, Swift, Rust, Go, D, Nim, Haskell) programming languages and tested their performance on Linux, Mac OS, and Windows (all of them running on different hardware, so the results should not be compared between platforms).
Nope. That’s not possible on iOS. 
It looks like https://github.com/raywenderlich/swift-algorithm-club/blob/master/Treap/ has a value type implementation. I'm curious how its performance would compare.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [raywenderlich/swift-algorithm-club/.../**** (master → 898db6f)](https://github.com/raywenderlich/swift-algorithm-club/blob/898db6fd3f266812be8387a2b2478d5f072cf872/Treap/) ---- 
Isn't one enough? How many jobs do you need at a time?
put it in a lazy var constructor.
Sorry I wasn't clear. I have a job in an unrelated field right now. So I'm considering either getting into Web or Mobile. 
Looks like Swift didn't compare well. I wonder how Swift would compare on a mobile platform. This really isn't a compare of languages, it's more about compilers. Swift was mainly setup for iOS, IDK if how much work was done on Swift for MacOS vs iOS in terms of getting the fastest code. Also, maybe some of these others are memory hogs, Swift for iOS can't be much of a memory hog vs the desktop version. Meanwhile, Java and others \(even on mobile\) could hog up more memory to gain speed.
It sounds like you're saying you want it to "work out of the box", and also don't want to change anything to fix it. You said before it might be a path or environment issue, but you haven't showed us what those are on your system. I asked if the C compiler works on a trivial program, and you didn't respond to that. You don't say where this Windows package and its GUI came from, but I don't see it on the downloads page, or in the documentation, or in the repo. The documentation lists four supported ways to build Swift for Windows, and a GUI is not mentioned. Did you try a standard way to see if that works? I'm not sure what possible answer could satisfy you here. It sounds more like a rant than a request for help. I'm perfectly fine with that, BTW, as long as we all agree that's what it is.
So your whole argument shriveled down to my lack of new lines and you didn’t like the kind of problem solved in my first example. But hey at least you’ve convinced some n00bs that `map` on optionals is evil with your pedantic drivel.
This doesn't seem to match other benchmarks that I have seen so far where Swift usually fares better. I'm not sure if there is something special about Treap that makes them perform badly on Swift or if that person Swift's implementation of Treaps could be optimized. 
I can only speak for the job market here in Australia so take what I say with a grain of salt. There is a pretty big shortage of iOS developers here and there is an abundance of “web developers”. If you’re interested in an international perspective, the stack overflow developer survey for 2017 showed swift growing and doing pretty well among the giants like JavaScript. You can find that by searching it on google pretty easily. 
If you make your var `lazy` it will be initialized the first time it’s accessed after your object has been constructed. 
Mobile is a great field to get into and I can easily see it growing with web development without any slowing down. Having said that, I agree with what you're saying and at this point people need to take into consideration what is meant when they say "mobile development." A few years ago it just meant iOS + Android. Now, if you're a mobile developer you have to get ready to support iOS + watchOS + tvOS + w/e else is coming out and that's just for the Apple side of thing. I think the hardest thing about web dev will be adjusting to new technologies + changing frameworks. Mobile will probably have to deal with maintaining *any* app that doesn't run strictly on a PC. For example, this guy I know said they were contracted out to make an app for a refrigerator or something.
When you set default values for instance variables, those are getting set before the object is initialized. When you make a reference to location.latitude (which is syntactic sugar for self.location.latitude) you are referencing the self object before it is created. You can set the suninfo variable in an initializer (you may have to call super.init()first), and as long as it gets set in all available initializers it doesn’t have to be an optional.
Thanks for your perspective! This gives me some more confidence in continuing my path in Swift. I reside in Toronto which is considered a booming tech city so I'd imagine the demand is still there, but maybe just not as much as before. One of the main reasons I want to continue developing in Swift is because I really enjoy it! Wholeheartedly agree on expanding your toolkit to avoid being a one trick pony. 
Thanks for putting this together!
Let me give you my two cents as well. I'm not in the US either, I live in Portugal which means the market is completely different, but: every job oppening for mobile \- specially iOS \- takes a long time to close. Regardless of how many \(job openings\) there are, some take weeks or months to close. I didn't go to College in this area, I learned it all by my lonesome self, and regardless of the job offerings asking for at least a BA in Computer Science \(or similar\), I got a job as a Junior just a month ago, with nothing but a year of self training and an app on the App Store. I guess what I'm getting at is that even if the market is shrinking \- and I don't really think it is \- the demand is still greater than the offering. Good luck dude!
You're welcome
Well written article with lots of good points. There is one thing I disagree with though and that is the use of Quick and Nimble. Not saying that those frameworks are not awesome (they are). But the fact that they don't allow you to run a single test from within XCode and that XCodes test navigator doesn't accurately list all the tests is a complete deal breaker for me. 
I discussed this problem at WWDC 16 with two Apple engineers working on Xcode. They said they are all for opening up the test API in Xcode to allow this if requested. I have since moved back to XCTest as spec style test suites take way too long to compile since the compiler has a really hard time inferring the nestled closures. While on the subject of testing I'd like to shamelessly plug [SnapshotTest](https://github.com/parski/SnapshotTest) as a Swift alternative to `ios-snapshot-test-case`.
The original library works in Swift...
Thank you for grouping up this! Looking for part-time remote jobs :)
1. SwitchStatus is an enum, which means an object that can be one of a set of predefined values. Right now you have one predefined value it can be, called status, but that’s not quite right - what values can a light switch be? How about on/off? Remove the status case and add cases for those values. 2. Sounds like they want you to make a protocol called Toggleable. This protocol defines a contract for any object that can be toggled. Right now, you have it as a struct. Change to protocol (you can read about swift protocols online) and that’s should get you started.
It comes from https://swiftforwindows.github.io/. I thought there would be someone connected from that release hanging around here maybe and they might say “oh yeah that’s broken we’ll have a fixed one out next week” or something. I think characterising my post as a rant is unfair.
 enum SwitchStatus { case on, off } protocol Toggleable { func toggle() } class VC: Toggleable { var status: SwitchStatus = .off func toggle() { switch status { case .on: status = .off case .off: status = .on } Not sure if I understood that right but that‘d be my take on 7-10.
I just answered it on stack overflow
Yeah i just finished my enum's properly, Was just working out the whole default in switchstatus. Thank you though, it works perfectly
There's demand for mobile in Toronto but you might find it skewed towards mid\-senior experience levels. Junior mobile roles seem to be getting harder to find so I'd go to meetups and watch job boards to get a feel for what roles are available that have some mobile component, then work on the skills that those jobs require.
TDD, Inversion of Control, Dependency Injection, etc etc etc. No thanks.
I am in the middle TN area. Personally i see a fairly good demand for mobile development. \(not just iOS\) I think its still worth going after Swift, though i would very much say that adding in some support for Android apps would be a very good move. An understanding of databases also is solid. You made me go looking for specific jobs in the field and now make me want one of these...dont do this to me lol i am way to new at this gig to think about trying. 
Its to bad for those in the market to be a JR developer for iOS....we just dont have enough positions in the tech field that are more entry level. 
Indeed i try to find entry level positions but it's getting more and more difficult to spot them 
I just dont think they exist any more in reality. I have taken two "entry" level positions in tech and both times it was more or less. "We want a person who could do this job KINDA but what we really need is a monkey with which we can make do everything else but the one job we hired them for" Companies want all this experience these days but are not willing to let people get any experience. 
&gt; its easier HAHA, it's* easier it's = it is ---- To mutate or to perform the toggle, just set the setting of the current boolean that represents the state to not or ! the current setting.
&gt; my enum's properly, Enum's what? Why are you putting an apostrophe on a plural noun? English doesn't work that way. Don't do that. : /
Gonna need a lot more details than that. Could you upload your entire project to Github?
How should we help you like that? Post the code.
The Swift implementation isn't particularly idiomatic, and there's definitely some issues with it. I'll see if I can come up with something a bit better for you. Also, I find it baffling that `hasValue` mutates the Treap. Is that common to all of the benchmarks?
Looks nice! Can’t wait to try it out!
You can register a notification handler for NSNotification.Name.UIApplicationDidBecomeActive in your class
&gt; Also, I find it baffling that hasValue mutates the Treap. Is that common to all of the benchmarks? Yes, it is common for all the implementations in the benchmark. While it feels like an overkill for `hasValue` implementation, it is common to implement it that way since other types of operations on a Treap data structure (e.g. operations with ranges) implement using the same approach.
&gt; Im trying I'm* trying. Spell the word. You're not typing for your own convenience, you're typing for others to read. --- Use the application delegate method. That's why it's there. ----
If it's done for the view, make sure it's removed at the appropriate time.
Don’t be an ass. You’re making a fool of yourself for being such a pedant. 
Object oriented rookie/novice: work through Apple's App Development with Swift iBook. Intermediate/Experienced: Stanford CS193p course. If you just want Swift without iOS/UIKit focus, Apple's Swift Language iBook is focused solely on the language. Work though examples either with command line or playgrounds.
But a standard binary tree search works just fine with Treaps; that's one of the reasons to use Treaps.
You are completely right, but this is how we we went with it for this benchmark.
I havent read it just yet but from my understanding [https://www.hackingwithswift.com/](https://www.hackingwithswift.com/) is the place to go to learn swift. I hope to get to work on this pretty soon but it has over 1k pages so yea... The creator is actually a frequent poster here.
not gonna lie....my mind tells me this is not something needed.....but the nostalgia is saying do it anyways. 
&gt; This method is not working 100% of the time He mentioned the application delegate method how it was not working for him.
I use the [Ray Wenderlich site](https://www.raywenderlich.com/category/swift). I used the free tutorials for a long time, bought a bunch of the tutorial books and just started the monthly subscription. Big fan of their standard tutorial methodology. Their conference is a huge hands-on coding fest as well.
Very worth it! I would suggest this to anyone I could!
Angela Yu’s class on udemy.com. Totally affordable when they run specials. It usually goes for anywhere from 10.99 to 19.99 for lifetime access to the class. Worth every penny.
 It’s true, I do come here quite often :)
Thank you!
The Stanford 193p is a great one.
This ^ 
One thing to keep in mind is that different teams across different companies will have varying definitions of best practices. There is usually large overlap so any reputable tutorial will help you but do not be surprised if there are inconsistencies. I recommend checking out https://github.com/realm/SwiftLint 
Thank you very much for helping me out! So I tried to define which UITextView in ViewController I want to change font size for in PopoverSettingsViewController like so but am still getting an error. Could you help me understand it? I updated the code in my original post. Here's what I did. To define which TextView I want fontsize changed for, I added that to the segue like: popoverViewController.textView = textView in DetailViewController and then I added that as a variable to PopoverSettingsViewController and updated UITextView.increaseFontSize() to textView.increaseFontSize(). Is this a good way to do this? I'm still getting this error: Cannot convert value of type '()' to expected argument type 'UIFont' So I'm guessing I still haven't done enough defining to use UIFont but I'm not sure how to fix this. And this conditional error: Constant 'font' inferred to have type '()', which may be unexpected Also, adding mutating to mutating func increaseFontSize () { self.font = UIFont(name: (self.font?.fontName)!, size: (self.font?.pointSize)!+2)! } gives me yet another error: "'mutating' isn't valid on methods in classes or class-bound protocols"
Upload your project to github and I can take a look. There's a couple of ways you can approach this. In my opinion the best way is to make all the adjustments in the smallerFontSize and the biggerFontSize. You just need the popoverviewcontroller to send the action of whichever one they put.
https://github.com/sheishistoric/reddithelp
HAHAHA...Embarrassing. Sorry I was also writing (draft) Research proposal paper's so my mind was going insane. But thank you I changed it. 
Thank you for the insight. I have solved the problem. Still confused on the whole *.on* or *.off* character system, but I have completed my task, and will read into it all when I get some spare time.
Just wanted to thank you for these books. Bought the first book bundle a few months ago and went from knowing nothing about programming in general to publishing a few small apps. Highly recommend the free Hacking with Swift, and all his other books after that.
When this first appeared in my Twitter feed [I had a hunch](https://twitter.com/CodaFi_/status/996094119935176704) that ARC was the cause of the performance drop, and that even if you tried to make this more idiomatic [you would still suffer performance losses](https://twitter.com/CodaFi_/status/996103028716564480). I finally got around to testing that and both my hypotheses were correct. The “naive” benchmark code is spending more than half its runtime on bookkeeping. The Swift Algorithms Club implementation with a recursive enum performs similarly. The code here lays out frames that allocate twice along their entry points and deallocate along the exits. So the benchmark is functionally a test of malloc under stochastic loads - and it behaves as such (poorly). I suspect the dynlangs are performant because they are using allocator pools and deoptimize the loop pretty quickly. Rust and C++ (at least, the not refcount ones) is probably performing better because they try to TCO calls like this (IIRC) and it must be working.
Thanks! It will help)
The problem here is that these rules won't catch 90% of of the bugs I come across daily. Rule #2 from the article states: "No Networking" With most modern applications, connecting to a network / cloud API is paramount. Networking also introduces difficult issues like concurrency, asynchronous I/O, etc...Which is frankly, where most of modern day bugs originate... If TDD can't test these things, then TDD is worthless to my workflow. Here is a concrete example that I recently encountered (please feel free to enlighten me how TDD could have helped me in this situation).... API definition stated that there was a parameter in the API (json) response of an API call - lets call this property "year". The API defined this as: { "year": "2018" } My json processing (using the awesome Swift 4 Codable JSONDecoder) was working fine until a server upgrade and all of a sudden the year was being returned as an Int - and the entire decoding step failed - and the result was a broken app experience. The upgraded server was returning: "year": 2018 You would never be able to catch this kind of error if you obey rule #2. Some other examples of recent issues I have encounter: DispatchGroup not ever completing because of network timeout issues Imbalance of DispatchGroup.enter() &amp; DispatchGroup.leave() calls due to bug in handling of parsing network results. The point is... Ignoring the networking component of your app is ignoring 90% (totally made up number) of most modern iOS/tvOS/macOS applications. Maybe I am misunderstanding the purpose of TDD - maybe I am suppose to create stub for every API call permutation (not gonna waste my time). But I seriously am not sure how to integrate TDD into a modern, and complex network based application. 
I’m glad to hear they were so useful! I look forward to starting the update process once WWDC hits :)
Neat article! You shouldn’t use GET requests in this context though since they are supposed to be idempotent. That’s why Twilio defaults to POST requests
I was expecting code that would work on inside Xcode playground, this seems to have something loaded that's not linked to in the video. Example: [https://www.youtube.com/watch?v=GwGx34IrbKQ](https://www.youtube.com/watch?v=GwGx34IrbKQ) Where's the turnRight and moveForward?
I just released the 1.0 version of my new book, [Unit Testing in Swift](https://roadfiresoftware.com/unit-testing-in-swift/), after it was in beta for a few weeks. Now I'm consulting on a new project for a big company. It's a big change from writing a book alone, but it's good -- I'm enjoying it.
There’s a bunch of approaches you can use here, but off the top of my head I would probably go with something like this: data.withUnsafeMutableBytes { (bytePtr:UnsafeMutablePointer&lt;Int32&gt;) in bytePtr.pointee = 35 } and so on. You could also pretty easily wrap that up like this (untested) extension Data { subscript(index:Int)-&gt;T { set { withUnsafeMutableBytes { (bytePtr:UnsafeMutablePointer&lt;T&gt;) in (bytePtr + index).pointee = newValue } } get { return withUnsafeBytes { (bytePtr:UnsafePointer&lt;T&gt;) in return (bytePtr + index).pointee } } } } then you can do let someNumber:Int32 = data[5] to get the 5th Int32, and so on. It’s not totally clear to me whether you’d actually want “the 5th Int32” or “the Int32 at byte offset 5” though. I guess you could use subscript label arguments and have both: data[byte: 5] = Int32(10) data[elementOffset: 5] = Int32(10) 
Awesome thanks!
Thanks!
I spent just a bit of time on this and even switching to a simple binary search nearly halved the time spent on the algorithm. I'd say the implementation is pretty bad at producing any kind of meaningful language comparison. It most likely just hits the sweet spots in some languages and snags bad cases in others.
 @IBAction func smallerAText(_ sender: UIButton) { delegate?.smallerFontSize() } @IBAction func biggerAText(_ sender: UIButton) { delegate?.biggerFontSize() } extension UITextView { func increaseFontSize() { self.font = UIFont(name: (self.font?.fontName)!, size: (self.font?.pointSize)! + 2) } func decreaseFontSize() { func increaseFontSize() { self.font = UIFont(name: (self.font?.fontName)!, size: (self.font?.pointSize)! + 2) } } } func smallerFontSize(font: UIFont) { textView.decreaseFontSize() } func biggerFontSize(font: UIFont) { textView.decreaseFontSize() } Let me know if this works 
Segue-ing before you have set the userName could definitely be the problem. Set breakpoints on the `dashboardControllerVC.userNameLabel?.text = userName` line and the `self.userName = login.UserName` line and see which one hits first. 
It breaks on the segue first. How do I make sure the submitget method goes first before the segue if I’m using the same button to trigger both?
Would you be willing to send that feedback to the author of the videos? His name is Bill Chapman. You can email him here: [bill.chapman.illinois@gmail.com](mailto:bill.chapman.illinois@gmail.com) He'd love to have the feedback I'm sure, as he's trying to make these videos as helpful as possible.
Don't use a trigger. Just grab and save an instance of the UIStoryboardSegue and call self.prepare(for: segueInstance, sender: nil) right after you set the self.userName
Instead of the override function you mean? (I’m new to swift) 
In your storyboard you can assign an identifier to your segue. This will allow you to trigger the segue programmatically after submitGet is done. So lets assume you have 'toDashboard' as your identifier. Inside of your try, once you have the data set up, you can call self.performSegueWithIdentifier("toDashboard", sender: self) This way you are at least sure that your setup is done before executing the segue.
So, this is what I've got. It doesn't error out but it doesn't segue at all. do { let login = try JSONDecoder().decode(Login.self, from: data) print(login) self.userName = login.UserName self.photo = login.PhotoUrl let dbvc = DashboardViewController() let dbvcS = UIStoryboardSegue(identifier: "DashboardViewController", source: dbvc, destination: dbvc) self.prepare(for: dbvcS, sender: nil) }
Yes, I did that but I'm still getting a sgabrt error. hmm
&gt; I know its not secure it's not secure it's = it is &gt; its segueing it's* segueing it's = it is --- For one are you sure your URL is complete? It looks like you are missing the root of the URL. Add code to output the value of `email` after you get it from the text. Also, all of the variables in your struct start with capital letters. Are you doing this intentionally?
Someone's pedantic. Also, I truncated the url when I copied to code to post here. The url is correct and I am getting the json data back correctly. They start with capitals because then they match the objects that are being sent from the API.
This certainly give me an red exclamation marks! I guess I was trying to over define font. But it give me a build error: -[PopoverSettingsViewController smallerFontSize:]: unrecognized selector sent to instance 0x7f8a03c28bb0. So I guess I need to define a selector for smallerFontSize Another question. It seems like it doesn't matter which of the 2 viewcontrollers the extension goes. The delegate defined in the originating view controller is only calling the func in the receiving viewcontroller and then the func in the viewcontroller calls the extension on its own? I had assumed I had to send the extension methods via the delegate. 
I think this is because you defined your class as a @objcmember. remove this, and add @objc in front of your func that your LongPressUi gesture is firing. Extensions can be called anywhere on that type. So anywhere that there is a UITextView it can be called. The delegate and protocol is just responding to the button pressed. It’s not sending any information other than which function to call. 
I really appreciate this. But am I the only one who thinks Playgrounds on iPad if worse than on Mac? *I really like this channels content. I understand that for people who only have an iPad this is great. However, because I own a Mac, I prefer it and I wonder about what others do.*
Error still persists after I get rid of all of the @objcmember and add @objc instead Thanks for explaining that. It certainly helps me understand why extensions are used.
This submission has been randomly featured in /r/serendipity, a bot-driven subreddit discovery engine. More here: /r/Serendipity/comments/8jy0en/why_am_i_getting_nil_here_xpost_from_rswift/
Yes, it’s the Swift Playgrounds app on iPad. It comes with a bunch of methods built in, its main purpose is teaching kids programming concepts. 
That's exactly what it was. Remade buttons and error has gone away. But tapping the buttons still doesn't make font bigger or smaller. I'm also not getting any kind of error or message in the console. Sometimes I notice that a slider wont work on simulator but will if I plug in my iphone and run the app there, but it doesn't seem to work on either simulator or phone. Any idea what could be causing this?
Sounds like a great app.
Are you dismissing the popover view controller when one of the buttons is pressed?
No, the popover view controller isn't dismissed upon the smallerA or biggerA being pressed, but you can tap on the barbutton that opens the popover view controller to close it again. I want the user to be able to see the font increase/decrease satisfactorily before they exit the popover.
No Reddit doesn’t give refresh tokens to iOS apps. I have to request a new access token every hour
I'm not sure, it should work. I created a test project with 1 main VC and 1 second VC the main vc had a label and a delegate method was called on that in the second VC and it worked fine. class ViewController: UIViewController, TextSizeDelegate { func largerTextSize() { firstLAbel.largerSize() } @IBOutlet weak var firstLAbel: UILabel! override func viewDidLoad() { super.viewDidLoad() } @IBAction func SecondButton(_ sender: UIButton) { performSegue(withIdentifier: "toSecond", sender: self) } override func prepare(for segue: UIStoryboardSegue, sender: Any?) { if segue.identifier == "toSecond" { let vc = segue.destination as! SecondViewController vc.delegate = self } } } class SecondViewController: UIViewController { var delegate : TextSizeDelegate? var num = 0 override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view. } @IBAction func back(_ sender: UIButton) { if num &lt; 10 { delegate?.largerTextSize() num += 1 } else { self.dismiss(animated: true, completion: nil) } } } extension UILabel { func largerSize(){ self.font = UIFont(name: (self.font?.fontName)!, size: (self.font?.pointSize)! + 10) } }
Are you using the `authorization_code` grant type? The response should include a refresh token.
&gt; They start with capitals because then they match the objects that are being sent from the API. You can and should use enumeration when the returned JSON keys are snake or capital case. struct MyStruct: Decodable { let firstProperty: String let secondProperty: String enum CodingKeys: String, CodingKey { case firstProperty = "FirstProperty" case secondProperty = "second_property" } }
You shoud use lower case and match the names with an enum CodingKeys
Yeah I changed my method. I was using the App Only OAuth method which wasn’t working, now I am able to send requests no problem.
Thanks for posting this question and I got something new to learn.
The Reddit API doc is a bit choppy, took me A LOT of google searches. Had to adapt it all to Swift which the Reddit api docs lack.
It’s a JSON API. Any language that can make HTTP requests can access the API. The docs are meant to be generic. SDKs are meant to provide language-specific interfaces. 
This usually happens because you are doing too many map or flatMap, try to break these down
I was concatenation a string, it was only about 6 variables long. It’s just mildly annoying that this happens frequently in Swift but not other languages.
1. Post your code, not a picture of your code. 2. It means that the Swifter class or struct is expecting a type of ACAccount. The object that you are passing into the initialization is the wrong type. Never used that framework, but you have to create an object that is of type ACAccount, or adheres to that protocol.
Ohh okay, i will look into it then, thanks:)
UserDefaults is not a great choice for large amounts of data (really, anything more than a megabyte or so you should be considering something else). It also only stores property list types, so cannot directly store a UIImage. You could save the images out as regular files and store paths to them instead, perhaps.
Don't. There are better places to save them. Like as files in the app's documents folder.
 And still the company secret is there for anyone to grab.... At least remove the picture and renew those secrets.
It's usually dealing with the compiler trying to figure out dynamic types. You can shortcut it by explicitly providing a type or two.
String concatenation has always been horrendous in Swift. They “fixed” it around Swift 2.x or 3, but use enough variables and the compiler still shits the bed. 
I am working on an iOS app integrating Reddit’s API. I want users to be able to manage their subreddits and allow them to save posts to a “read later” list.
SFAuthenticationSession is the way to go. It’s very easy to implement. By using SFA you’ll be removing the need for a dependency such OAuthSwift which is always a good thing. 
Of course there is now. I'm excited to see other uses for Swift I guess. 
This is something I learned fairly recently. Situation: you have an optional value. You want to initialize another value that depends on the first one. let foo: Int? = 8 // used this before let bar: Double? if let foo = foo { bar = Double(foo) } else { bar = nil } // much easier let bar = foo.flatMap(Double.init) Not even that amazing, it’s just a neat syntax shortcut for dealing with optionals. 
In case anyone else runs into this I was able to solve my own problem by not using the FileManager. Instead, calling my renameToZIP() gave me the expected result and did not corrupt the file. private func renameToZIP() { shell("mv", mmpkDestination, zipDestination) } @discardableResult private func shell(_ args: String...) -&gt; Int32 { let task = Process() task.launchPath = "/usr/bin/env" task.arguments = args task.launch() task.waitUntilExit() return task.terminationStatus }
if they are snake case (like a lot of API elements will be), you can use a decoding strategy to do this automatically (no need for custom coding keys) let json = """ { "camel_case": "test" } """.data(using: .utf8)! struct Model: Codable { let camelCase: String } let decoder = JSONDecoder() decoder.keyDecodingStrategy = .convertFromSnakeCase do { let value = try decoder.decode(Model.self, from: json) value.camelCase //test } catch { print(error) } 
That’s a complex error
No existing solution. It might be possible if somebody writes like a remote desktop solution around the simulator but yeah. Sorry to disappoint.
I have no knowledge that you can, they’re 2 different pieces of hardware and software.
Thank you for the reply, looks like I might have to swap my s8
Check out [CloudKit](https://developer.apple.com/documentation/cloudkit) . I’ve used it in projects and works very well. I wouldn’t rely on it as a primary backend but as a means to transport data to the user. It’s kind of like Firebase, and the more data you use, it can be expensive.
No. You have to use the simulator.
First came across this here. I have to start using it more. Thanks for sharing. https://developer.apple.com/documentation/swift/optional/1540500-flatmap
Cheers mate! I'll take a look 😊
As other people have said, you shouldn’t store your photos in user defaults, this is because they are loaded in the beginning of your apps lifecycle ( your program will take ages to load in ). It might be useful to store your position in the collection/array and load everything in around it using user defaults, or store the pathing to each photo you want to load in.
Oh, this is satisfying
I'd think it'd be even simpler to say: let targetIndex = (lastIndex ?? -1) + 1 
I'm doing a lot of maintenance for my two apps, I think some people had problems with the user experience. Let me know what you think... https://itunes.apple.com/us/app/nfc-reader-for-iphone/id1249686798?mt=8 https://itunes.apple.com/us/app/spicker-2/id1333567829?mt=8
Yep I saw this with a huge array of tuples. Switched to struct and it worked :/
We’ve got a similar problem with WebShell. Please take a look at https://github.com/djyde/WebShell There’s a bunch of web view hacks inside to let things work as expected. For example LocalStorage doesn’t work in a webview, and many more things.
Simpler but possibly less readable. The previous suggestion is immediately clear what it’s doing, either do something if it exists (add one), else default to zero. While shorter using `?? -1` removes this clarity, “hiding” the actual behaviour and making you think, “what will this do if this is None” making the code harder to read at a glance. Just my two cents.
Tuples are definitely a big culprit. They're great if you need a quick couple of values together but anything big and you probably would be better off with a `struct` or similar.
This also works without the optional - Definite Initialization doesn’t care about individual bindings, just that a value has an initialization on all paths. Excellent for breaking up crazy ternary assignments.
Just a heads up so you don’t waste your time, Twitter has said they’re going to ban all 3rd party applications because they want to control the only ways to use Twitter. It’s supposedly being done sometime this year. 
Check out prepo on the Mac App Store. It will create the 2x and 3x images groups for ya. I believe it’s free.
&gt; let targetIndex = lastIndex.flatMap { $0 + 1 } ?? 0 Meh. Conciseness at the cost of clarity. 
The flatMap is unnecessary: `Double.init(Int)` can't fail so you can just use `foo.map(Double.init)`.
Completely right. My bad
We do this at work with candidates. You will be probably expected tp drive and TDD. Dont a Stay in your head and vetbalize yoir thought process at all times.
You mean standard TDD - writing test functions than function itself and modifying code to pass all tests? The only reason for pair programming is that the second person can see the thought process and so on?
My go to is make a REST call and load some data into a table view. I have also gotten this in interviews I have had to give as well. 
Yeah, just write test case, implement minimum required for it to work, think of more cases that could make it fail, fix implementation... Blah blah. Different companies, different standards. They might want to generate pact tests if they interface with an api, they might write ui tests before unit tests, blablablah
to build upon what /u/donnaclus said. You can buy an iphone that doesnt have to be on a data plan. As long as you can get to the apps you can use it as a development platform. 
Well it is not written in Swift but Swift related, I started writing a Swift llvm\-frontend in F# :D 
The second person will also help when you get stuck, etc.
I tried to mimic the behaviour of the F# piping operator \(|\&gt;\) in Swift, I got this far: `infix operator |&gt;: AdditionPrercedence` `func |&gt; &lt;T, U, V&gt;(lhs: T, rhs: @escaping (U, T)-&gt;V) -&gt; (U)-&gt;V {` `return { (b: U) in` `return rhs(b, lhs)` `}` `}` `func sub(a: Int, b: Int) -&gt; Int { return a - b }` `print((3 |&gt; sub)(4))` which prints \-1
I didn’t say I like or agree with what they’re doing, just stated that they are not banning any apps. 
I thought user-based storage uses the users’ contingent. How would that cost anything? Or is there sth else?
That is not only clearer but also safer.
Sorry I mixed my words up. CloudKit uses a container to either store public or private records for users. It basically works through iCloud. For smaller based apps CloudKit is fine, but if you up the scale of your app you will most likely reach your transfer data limit fast and have to pay for more usage.
I suppose I can see your perspective, but I disagree. I think `?? -1` is simpler and easier to read because: - it puts the base case first (like `guard`) - it doesn't use a method call (and one which happens to be the least common of the standard methods named `flatMap` -- which actually has nothing to do with flattening!) - it doesn't use trailing closure syntax (which, after 3 years writing Swift, I still don't fully understand when I can use it without extra parens or not -- apparently it's more subtle and complex than simply "is it obviously unambiguous") With the `flatMap` way, there's actually 4 levels of nesting in that expression. 3 of them are invisible, because Swift let you omit the characters for them, but I still have to process them when reading it. With the `?? -1` way, there's only 2 levels of nesting, and they're clearly visible. There's a lot less to mentally unpack. I'm not sure what you mean by "hides the actual behavior". Yes, it does "make you think" to figure out -1 + 1 = 0, but that's less work for my brain than tracing the paths of optionals through trailing closures without visible grouping.
In my mind map() is for operating on collections. This use wouldn’t have occurred to me. My instinct is that there should be a way to use the nil coalescing operator ?? to accomplish this but I can’t find a way.
Also, I love using shorthand argument names *most of the time*, but I've seen `0 + 1` many more times in my life than I've seen `$0` so my mind latches onto that first, making me do a double-take on the whole expression. Aside: why the heck didn't Swift add `incr`/`decr` when they removed `++`/`--`? That's what we really want here. Then we could just say: let targetIndex = lastIndex?.incr ?? 0 In optional-land, we shouldn't have to resort to wrapping every operation in closures to achieve something so basic. Swift already has a great way to say "chill out with nils on this expression", so we should be able to use it with "increment" as easily as other methods. I know, I know, write my own extension. But the numeric tower situation is ugly, and every time I look it's still changing. Is there yet a way to define, in one place, "var incr" for all real numbers in Swift? I don't see one.
&gt; optional chaining (if-let, guard let, etc) You know that those are different from optional chaining, right?
all of them: illustrator, photoshop, after effects, premiere, texture packer, pngCrush, sips, gnuplot, magick, automator, my own Bash scripts and automation ... for audio: audition, cubase LE, audacity, quicktime 7, quicktime X... I think that is it. 
 &gt; it puts the base case first (like `guard`) Not sure I understand the relevance to guard here... &gt; it doesn't use a method call (and one which happens to be the least common of the standard methods named `flatMap` -- which actually has nothing to do with flattening!) Using flatMap for such an operation is actually pretty standard and widely adopted by teams with more senior engineers. I linked to the docs above so you can read more about flatMap and understand why it is valuable in this case. &gt; it doesn't use trailing closure syntax (which, after 3 years writing Swift, I still don't fully understand when I can use it without extra parens or not -- apparently it's more subtle and complex than simply "is it obviously unambiguous") I recommend spending time and getting comfortable with trailing closure syntax because that is a big part of the language. I would also not make pattern decisions based on not wanting to adopt a fundamental language pattern. Just Google “how to use trailing closure in swift.” There is no reason you have to go 3 years without a simple search...
4 spaces in front of any code. You should check out point free btw. They do this sort of thing then take it to extreme lengths. 
Assuming, of course, those two variables are of a type that conforms to the `BinaryInteger` protocol.
There is an unfold function in Swift, that can be used to generate a sequence. It's the opposite of the `reduce` function of `Sequence`. An example: ``` let input = sequence(state: (), next: {_ in readLine()}) ``` To retrieve the first 10 lines of input, you can just use for line in input.prefix(10) { ... } You can also define the Fibonacci Sequence using this function: let fibonacci = sequence(state: (0, 1)) { state -&gt; Int in let result = state.0 (state.0, state.1) = (state.1, state.0 + state.1) return result } To retrieve the 20th fibonacci number, just use `fibonacci.dropFirst(19).first(where: {_ in true})` (For some reason `Sequence` does not have the `first` property) The sequence function is also very useful for sequences of infinite length.
I mean, I've had to interview tons of candidates for junior dev positions...... you'd be surprised, regardless of what people are putting on their resume
I would consider Swift a pretty easy language to get started with. Apple released a really good (free) textbook on Swift Programming. I think it's literally called "The Swift Programming Language". On mobile so I can't really look into it. Also I think teaching Swift in a classroom would be a great idea. It would be a good introduction to programming, there are a ton of resources on it online, and it's palpable in that it allows students to show off their apps
Check out the Swift Playgrounds iPad app. It has a bunch of lessons where you move a guy around a graphical 3D world and as you progress you are learning Swift. Beyond that there are a bunch of other lessons and you can even make and share your own. (For sure on MAC, I haven’t tried on iPad.) If Apple hardware is an issue, you can still run Swift on Linux, but I don’t think you could take advantage of the playgrounds stuff.
I would argue that Python is an easier and more useful language to learn for school. Swift is more or less isolated to iOS development, while Python is a ubiquitous scripting language. * If you become an analysis, you can use python combine the data of your queries. * If you become a programmer, you can use python to automate parts of job. * If you become a web developer, you can use python to scrape websites. * If you become a mobile developer, you can use python to validate and deploy your code * If you become a backend developer, you can use python anywhere you don't want to use BASH. I think, long-term, Python will be more useful for your career.
Thanks a lot, I will certainly check it out.
Swift is very complex tbh, there are so many different small thingamajigs in there. 
This is an interesting question. While I personally enjoy working in Swift, I would not recommend Swift for a beginner programming course, and here's my reasoning: **Tooling** You're pretty much limited to XCode, which is one of the worst IDEs out there. Autocomplete often stops working, it frequently crashes, and it doesn't have a great user interface. Furthermore, it only runs on Mac. The compiler is also new and bug prone. It can crash without telling you why. Also, it often spits out error messages that are hard to understand and sometimes flat-out wrong. It can be very off-putting for a student to have to wrestle with the tools rather than the actual concepts he or she is suppose to be learning. **Complexity** Swift is a very complex language, with type inference, product-types, pattern matching, closures, generics, and operator overloading. Yes, you can mitigate that somewhat by teaching just the essentials, but it makes the documentation that much harder to get through. ARC could be a topic for a whole course itself. Explaining the need for weak reference types to beginner students could be quite a challenge. **Cocoa and Cocoa Touch** The Apple APIs you need to use for iOS programming are not the cleanest. While they've come a long way, there are still some strange interactions with the old Objective C way of doing things. 
It clear that you are a drag and drop programmer.
Nothing relating to programming is easy to use, despite the efford from many language spinoffs, versions and other fancy stuff. What does really matter is the way you learn it, and so, if you can keep up enought motivation to dig a bit more. With this on your mind, try to choose something that will attack handicaps without blink: - Something that will not be a pain in the ass to setup or mantain in any system/OS, and you can run it everywhere while you reach the core basics of the programming world. - Realistic and scalable goals: does fit with your taste build a simple text game for a computer or a exams agenda? ask yourself what type of content will lead you to keep on the wave while learning. I have been programming with C/C++/Obj-C and Swift professionaly for 10yr, just do not let the hype catch you because whatever. 
sorry but fuck this bot. so annoying.
Thanks! I didn’t realize you could make new characters/ art in photoshop but I got a login from a friend and have been working with it ever since :)
Yea, the way it’s said is just logical to put them together. 
Programming Languages By Knowledge If you and your friends are total noobs with no programming experience whatsoever \(sorry you will be starting from scratch here\): 1. Some Scripting Language: AppleScript, JavaScript, VBScript, Lua, Shell Script 2. Some form of BASIC \(Visual Basic, Chipmunk Basic, GAMBAS\) If you have already mastered some form of programming and want to move to something more advanced \(you can make games, apps or anything else you want after learning these\): 1. Objective\-C or Swift using Xcode 2. Java using IntelliJ Idea \(which includes Android Studio\) or NetBeans 3. C# using Xamarin, Mono \(or ugh! Visual Studio\) Side Note: some people just want to specialize on certain stuff like Games, WebApps, embedded devices or micro controllers. After learning the basics you can move to one of these: 1. Unity 3D or Blender for Games and some graphics apps \(Uses C# or JavaScript\) 2. PHP, Python or Ruby for web apps 3. Java or C# for web apps \(if you really want to\) 4. Arduino \(uses C\) or Python for Raspberry Pi If you and your guys have built apps already and you know your crap and can toss it around like a code monkey. \(You want some next\-level waste matter\): 1. C or C\+\+ using QtCreator or Xcode or Netbeans or \(ugh! again Visual Studio\) 2. Assembly Language \(this is the holy grail of programming!!!\) Everything else is just a programming language that has gone retarded: SQL Above all else: 1. Do not limit yourself to one language or one platform: 1. Specialists die easy these days 2. Although they can get jobs easier they are stuck on that type of job forever 2. Do not learn something if you are doing it just for work or to make a career out of it 1. If you want to last long in programming you must be able to enjoy it 2. You should also develop your skills in building what you want and how you want 3. Do not adopt a programming language solely based on other peoples opinions 1. Have a spine and think for yourself 2. People who succumb to peer pressure or majority rule are COWARDS!!!
Was Swift updated, or was Xcode updated?
Do you have any plans on making the course accessible to people outside your school to go through? My first programming language was Python and I learned it through 'Program Arcade Games with Python' which is an actual course for Simpson College. However, the professor made a website for it and uploaded videos to youtube as well. It was an amazing introduction to the language and I'd love to see more courses like this out there for other to use.
You have to prepend either `let` or `var` to assignment operators. So it's either: let it's = it is or var it's = it is
Hey there, me again. Quick question, we can pm about it if need be, but I accidentally downloaded the $40 HWS book without logging into my gumroad account, it won’t let me download it meow, are you able to do refunds so I can put it in the right place?
Trade it for a iPhone 6.
As much as I like Swift and dislike Python, this is the truth. Python is a much better language to learn on, and it’s more flexible. You aren’t constrained to mobile development (which requires you to learn a new platform), and you don’t need a Mac to get started (I know it technically runs on Linux, but you can’t do iOS development on Linux). 
Does your WebShell work with Swift 3? Because, AFAIK there are lots of changes from Swift 2 to 3. I'll take a look into it. Thank you.
Swift can be easy to get started by it can get pretty deep. I'm not sure it's the best for a 1st language, it might be the best for a 1st mobile language. You say "my school" but we don't know if this is a college, HS, or JHS. I'm guessing it's a HS and there's no way to know what background people have or what other classes that are offered. If you already have a class that does "intro to programming" then having an "intro to iOS programming using Swift or intro to Swift" would be great. Most advanced languages can be both easy and hard. IMO, basic stuff in Swift is easy enough for a 1st language. Give us some more detail, JHS, HS, only class offered, 1st language, etc...
Ya if they’re a junior candidate. Sure. 
Thanks for the followup! I've still got a question and I would be delighted if you could clarify. Does syncing between a users' private database and the app cost sth? If so I don't understand how else I'm supposed to sync files, since Cloudkit is supposed to sync user data between iCloud and loca devices no? 
I haven’t used it in awhile, I used knowledge I learned 2 years ago using it. [Here’s an overview and you can see a breakdown on Apple’s official site](https://developer.apple.com/icloud/cloudkit/) 
I got mine to work perfectly without third party libraries, I just use Alamofire for URL requests. Basically I set a notification up on a log in view controller, say a log in button opens up a SFSafariViewController, you authenticate the user, then when the callback URL is fired, that’s when the SFSafariViewController is dismissed and you can instantiate any other view controller and while that happens I parse the callback URL and grab the OAuth access token and save it in Keychain. I can send you code if you want to take a crack at it.
You are clearly unemployed.
I'd expect and prepare for debugging someone else's code and doing something from scratch. Doing something from scratch with a good IDE is more about remembering the calls. Debugging someone else's code proves that you know what you're doing more than pulling up memorized template code. If they're good, they'll be looking for personality as well. Maybe creating a conflict where they do something wrong just to see if you pick it up and then how you explain it. Example: someone might write a bunch of unchecked / forced unwraps and then they keep going to see if you're going to suggest some wrapper check \(if let, guard\). This would not only check if you know about forced unwraps, but how you interact with someone else. A Jr Dev job would be more about how you deal with what you do and don't know. You're more likely to know something that's wrong or not best practice, so do you defend what you know or are you open to different ways of doing things... Their concern would probably be finding someone that can fit in and be productive vs a lead or senior that would be more about defining the direction of the project.
I think it was just Xcode that got updated. The storyboard for the iPhone X is the only thing that I have found to be broken. Everything else works fine.
So is the necessity of importing documents to learn from. And its optional when archiving websites anyway, depending on the requested level of integration. Can't annotate shit when sources change under you, anyway ...
Although I agree Python is a better starting choice than Swift, I kind of dislike how you made it out to be a kiddie language. If you’re a data analyst, you can use Python to do your processing, analysis, plotting, rendering, etc. As a backend developer, you can use Python to build any backend — not just as a replacement for Bash. And as a programmer, you can use Python for literally anything, not just “automating parts of your job”. It’s not like Python is a crippled semi-language, nor is it really a scripting language (like Bash). It’s a fully Turing-complete programming language that can be used for anything any other language can be used for (although there are certainly times when other languages may be better suited to the task at hand).
I fully agree with you about the unstable compiler + immature tooling, but can you please elaborate on this? &gt; and it doesn't have a great user interface Having used Eclipse, JetBrains, Visual Studio and some others I forget, I’ve found the Xcode UI to be by far the best. It displays everything essential that you use daily, and in a super logical arrangement.
Fernando Castor wrote a few remarks on teaching Swift as a first programming language [here](http://fernandocastor.github.io/academia/2017/11/02/swift_first_language.html). Worth reading IMO.
Thank you to everyone who commented so far. I think I'm gonna go through with this but I have a few questions. Can you make an app or game inside Swift Playgrounds using the blank page thing? 
Hi, thanks for the response. It is a high school. This would be my first time programming and furthermore nothing at my school is being offered hence they want new ideas and we can pitch them things to become a class. 
I'm assuming this is a high school, in which case I think either swift or python would be good choices. Swift is better for learning if you want to go in a computer science direction. Python is better for learning if you want to take things in a more Math / Data Science direction.
This is exactly what one of my points was. Once you spark curiosity it really gets going in some people more than others. Whats to stop one of these HS students from learning Swift, and pretty much every other language just because they find it fun and then go on to develop the next big app that makes billions? Sure you could say the same thing about so many others (your example of JS/HTML/CSS fits this perfectly honestly) but i feel like swift just has so much more feedback that is VERY satisfying when it works. 
&gt; You're pretty much limited to XCode, which is one of the worst IDEs out there. Why do I hear this so often when it’s most certainly not true?
Hey! I’ve actually released my own Reddit client, so pm me if you have any questions :)
I love that there’s these super verbose responses arguing Python vs. the tooling of the iOS ecosystem vs. Java/C#/JavaScript and OP is just like... “Cool, so can I make a game in a Playground or what?”
Swift could do the job, but IMO it's pretty specialized in that it's main use has been iOS dev. In addition, Apple has been pretty strict about their system, in that you have to develop on a Mac and pay to be on your own device for more than a few days at a time. Compare that to Python. Python can do TONS of stuff with stats, big data, back end, etc and it will do it right out of the box on any machine. The job market for Swift is much different than for Python and Python is so easy to get started with. Intro to programming is about conditionals, branching, data types, logic, etc...
Wait, so you can't build things in Swift Playgrounds with say a blank playground? That's kinda annoying. 
In the same situation, would also like to know. 
You should write up a report on this, because I have never seen any course, using any language, with any teaching style, have a 100% success rate. 
You need to identify which object is responsible for keeping the data (download list) and which object is responsible for keeping the interface (the popover). If the download list is limited to the main window (which is probably the case since you mention a toolbar), then the main window controller is a good candidate for that. If the download list is not limited to the main window and should be available anywhere in your application, then the application delegate is a good choice. Note that, once you identify which object should be owning the download list or the popover, you only need to declare regular properties for them instead of using singletons. If your window controller declares the download list and the popover as properties, you’ll have a single instance of the list/popover so long as the main window controller lives.
I wouldn't recommend Swift for a first language, especially at the high school level. - It's basically still Apple-only. Its primary use is Mac and iOS apps, which is going to disinterest a lot of people (half the class won't be able to play with it at home). It's possible to run it on Linux but every week there's people coming in here asking why something doesn't work right and why it's so hard to set up. For learning programming, you don't want to go platform-specific. - It's very complex. Its syntax is about as complex as C++, except it also has type inference. It can look visually simple, if you know what you're doing, but just because there's not many characters on screen doesn't mean it's actually simple to understand. - It's still very young. It's only a couple years old, and it's just starting to stabilize. You don't want to have to worry about the version of some sample code you find online, or which package manager is popular this month. Or worse, the intersection of these: finding a library which works with your version of Swift *and* the package manager you're using. I've tried teaching and learning in each of these scenarios before. All of them at the same time? That definitely adds up to "not a great first programming experience". Some people here have mentioned Python. That's a good first programming language. It's cross-platform, has much simpler syntax, and is old enough that it's fairly stable. Pick a recent version, like Python 3.5. There were some major changes at 3.0, and in the early 3.x's, but by 3.5 it settled down nicely. If Python isn't your thing, there are lots of other languages which can make good first languages: - Ruby (not entirely unlike Python) - Java (a bit verbose but not too bad) - C# (good cross-platform support these days) - C++ (if you have a teacher who can pick a reasonable subset) - Matlab/Octave (often used by engineers who aren't otherwise programmers -- maybe you could pair it with a science course) - Haskell, Scheme, Lua, Tcl, Forth (less conventional but they have the advantage of actually being as simple as they look) - plenty of other languages I don't know or remember right now... The most important thing is to find a good teacher. Any language with a good teacher who understands the language can work just fine (even assembly language!). Any language with a teacher who doesn't know programming, or doesn't know the language, will be a disaster. 
Oh my god it was so simple... I have drop down lists in the toolbar that the main window watches and then uses a protocol to pass the master view controller the updated data; but I don't know why I didn't consider using it as an object store. Thank you so much!
One more question: In the popover tableview, are the binding keys (objectValue.property / arrangedObjects) the same even though the values aren't from Core Data?
Wow that sounds pretty cool and that would be awesome if you could send me that code. 
One more question: In the popover tableview, are the binding keys (objectValue.property / arrangedObjects) the same even though the values aren't from Core Data?
It’s a 200 hour course, over a period of 5 months. We dedicate roughly 20% to swift and oop fundamentals, and afterwards iOS from intro to advanced. Luckily we’ve had some good experiences. 
Apple provides a free lesson plan for educators teaching Swift in a classroom setting. Should make it easier to adapt to whatever requirements you have.
Not really
Sorry, yes you can. I'm not trying to do a bash of Swift, I actually like Swift and have been using it for quite a while. Here's part of my concern. I've been programming for decades, I come from the DotCom era when the web was new. One of the things they don't tell young people that I wish they told me is about the shelf life of knowledge. Programming knowledge and level of knowledge has a limited shelf life in the job market. You have to keep going and going and going, and it has to be in the right direction, but you don't really know what direction is right. Swift is pretty narrow as it's main thing is iOS. iOS jobs are mainly in tech hot spots like Silicon Valley and the number of jobs for entry level aren't even close to those for mid/advanced jobs. Look at the real numbers when they post those "most popular language" and you'll see Swift in the top 10 or 20 along with ObjC and others... now look at the actual numbers of people using it or the actual number of jobs... What you see is that there's some TEN TIMES as much demand for Python as for Swift and ObjC combined. If I were you and considering programming, I would NOT have a single language. I'd actually start with a simple language like Python because it's much easier to master. Most get very stuck on Swift with extensions, optional, optional chaining, and some of the other more advanced concepts. Jobs will look at that vs Python where you can just add in a few simple things and do a lot of advanced things... Spend a bit of time with these, notice how short things are after you have it setup and the power that you have. Understand, I'm not anti\-iOS, I've been doing mobile enterprise for years now. I'm all in for iOS, I just don't know that it's the best starter setup. [https://www.youtube.com/watch?v=T5pRlIbr6gg&amp;list=PL2\-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU](https://www.youtube.com/watch?v=T5pRlIbr6gg&amp;list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU)
You can, don't worry. The only thing you can't do without a apple dev License is publishing to the app store. You're not missing much. Also, Swift is opensource and it works fine on linux too. (Except ofc iOS/macOS related libraries and objc interop) 
It’s a constant they define. Just a magic number that gives top spacing for your code to use. Instead of putting 0.6 everywhere they make this constant so you can modify it easily and the code reads better. ‘let kTopMarginSpan: CGFloat = 0.6’
I don't think there's really a best practice on this, just be consistent. Remember that you already get module-level namespacing for free. If your module is named "FooLibrary" and some other module is named "BarLibrary" and you both have an `Error` type you can do this to access each uniquely: let myError = FooLibrary.Error() let theirError = BarLibrary.Error() And within each module it defaults to its own namespacing, so inside `FooLibrary` if you do the following you get the type that's defined in that library: let myError = Error() // actually FooLibrary.Error() At this point all you are looking for is an easy way to get a clear, concise type that can be glanced at and informs you as to what's going on. Is it easier to read `Class.Error.SpecificError` vs `Error.Class.SpecificError`? I think the latter is better at a glance, it groups all the errors visually since that's the first part of the namespace. Then you can get specific as to what type of error it is, what class, what the error means. Here's an example of how you can easily group and add new errors: // Library-level errors // Use protocols to group types protocol GeneralError {} // enum are convenient for namespacing, // by default you can't construct the type enum Error {} // extend the error type to add new errors extension Error { struct Foo: GeneralError {} } // Class-level errors protocol BarError {} extension Error { enum Bar {} } extension Error.Bar { struct Baz: GeneralError, BarError {} } let libraryFoo = Error.Foo() let classFoo = Error.Bar.Baz() let generalErrors: [GeneralError] = [Error.Foo(), Error.Bar.Baz()] let barErrors: [BarError] = [Error.Bar.Baz()] 
Amazing! So kind. Thank you!
Why is that surprising? Beginners usually don't realize there's a difference between learning to program, learning a programming language, learning an operating system, and learning to make a game.
&gt; I would consider Swift a pretty easy language to get started with. What are you comparing it to?
Yeah, mowing the grass maybe...
Maybe... Mr. Drag n drop 😂
I’d say for example compared to C, C++ or Objective-C. Also the Cocoa frameworks available for iOS and macOS has a lot of high level stuff like SpriteKit etc. that allows you to male pretty exciting stuff with relatively little and not too complex code.
I added an eyedropper tool to my color palette app, [Pocket Palette](https://itunes.apple.com/us/app/pocket-palette/id1342063329). I ran into a few issues handling the dimensions of UIImages, but eventually got it working sufficiently.
I've always been a fan of Mint's UI! Great Resource!
https://stackoverflow.com/questions/43815549/ios-how-to-pass-a-model-from-view-model-to-view-model-using-mvvm/43820233#43820233
Thanks, I didn't find this before. So I guess i was on the good track 👍 
Agreed to a certain extent for smaller apps. However, if your app is complex with dynamic content and have reusable ui elements which can be reused across the app, it makes sense to go with MVVM pattern and reactive. As an example with mint, building credit score views \(L1, L2, L3\) in cardparts took us just like 2\-3 days and it is very scalable. We could never have achieved this productivity and scalability had we used MVC. I do agree that if the app is very simple, this would be an overkill for sure.
Because people learning to code need something that has the batteries included. Getting them to set up a dev environment isn't going to be fun nor efficient in time if you have people with hardly any computer knowledge...
Yes, specially with Swift Playgrounds.
i've been doing swift for the past 2 months and i found it very easy to pick up. and it is not just ios, mac os is also a platform and so is tvos. the only reason i wouldn't recommend it as a first language would be Optionals. This was a concept i never encounter in other languages and it took me a long time to wrap my head around it and it is used a lot. i've only used python for scripting in maya and i don't like it. i've been using it since maya came out for mac and i've done a lot with it, but within the context of maya, i simply don't like it. but i have no experience with it otherwise.
Whenever the route starts, you could set a boil value of true indicating when the user is driving.
[UIMenuController](https://developer.apple.com/documentation/uikit/uimenucontroller)
‘Refactoring’ is relatively a new word in iOS ecosystem. Its abs overkill to start with MVVM or VIPER etc I’d love to see something that starts with MVC and grows into something scaleable and manageable without starting from scratch. Recently i had to bug fix an app where over time animations were becoming slow. It took me 3/4 days to understand that app was archiving objects on main thread. It was built using ReactiveCocoa. Even if you use fancy frameworks still you can manage to shoot yourself. KISS FTW!
Im actually embarrassed
Sent you a email. 
You should be able to get "responseData" instead. Or there is a codable-alamofire pod out there also. https://stackoverflow.com/questions/41546438/the-difference-between-responsejson-and-responsedata-of-alamofire https://github.com/Otbivnoe/CodableAlamofire
Swift is pleasant to work with if you have experience with other languages. But if it's your first language, there might be a bit too many concepts to grasp (nullables, if let, guard let, generics, protocols, etc). For a first language, C or Pascal are more suitable IMO as they are simpler in that there are fewer concepts to cover, so the course can focus on the core of programming rather than all the features of the language.
It's totally relevant because the first language will have a long lasting impact. Kids who learn python and think it's the best language will miss out on a lot of stuff and may never realize it. Also, see my other comment in this thread. I don't recommend Swift as a first language either.
Please do something about your indentation
Based on your indentation and brackets, it looks like you might have a method inside of another method because you missed a closing bracket somewhere else in your code. We need more context in order to figure this one out for you.
Ok thanks i will Look if there is a missing bracket in my code :)
Honestly, though, unless they start improving tooling outside of XCode, Kotlin is going to annihilate Swift and turn it into a dead language. I REALLY want to use Swift for a lot of projects that aren’t on iOS/MacOS but I avoid it because their language is geared toward those Os’s and nothing else. It’s pretty sad when an obscure and hard to learn language like Haskell has better tooling. I think Apple should put more resources toward getting it to work EVERYWHERE.
Sure – just turn off `isUserInteractionEnabled`. That being said, it might confuse users. Would a regular label work instead?
Thanks. Wanting to use a textfield for visual consistency with other aspects of the interface. I think in context it will make sense that it would only be incremented slightly by the user and that pulling up a number pad would actually be more cumbersome. 
You could also use a custom view as the keyboard — in this case a UIPickerView might serve the purpose. Take a look at [UITextField.inputView](https://developer.apple.com/documentation/uikit/uitextfield/1619620-inputview)
Nothing hard or obscure about Haskell. I have delivered paid projects in F# and Elixir before and you just need to start coding instead of screaming like a pussy because the syntax doesn’t look like C or Java. It’s actually easier to write good code in functional languages because you won’t sprinkle state everywhere around your application. Kotlin is very nice if you are forced to use the JVM. Outside of it it’s not usable. Same goes a bit for Swift. Xcode isn’t as bad as you think, most problems arise when you are doing things related to iOS or macOS, like storyboards provisioning etcera. It’s actually pretty damn good for writing C or C++.
I have no problem with XCode. I DO have a problem with not being able to develop on Linux and use Swift natively for everything and being required to use archaic tooling if I don’t want to use XCode. Ps. Haskell IS much more difficult than you seem to want to admit. You’re clearly smarter than me. Feel better? Not impossible but certainly not in many O.O. software devs wheelhouse.
&gt; start coding instead of screaming like a pussy Why the name calling? &gt; Kotlin is very nice if you are forced to use the JVM. Outside of it it’s not usable. Same goes a bit for Swift. Incorrect. Swift does not use the JVM. It runs natively. &gt; Xcode isn’t as bad as you think, most problems arise when you are doing things related to iOS or macOS, like storyboards provisioning etcera. It’s actually pretty damn good for writing C or C++. You are absolutely correct! Not many people realize how brilliant Xcode is for C/C++ development with its clutter free UI and great debugging workflow. 
Maybe that’s because you cannot run Xcode on Linux.
* No screen splitting, except for the "assistant editor" which is finicky and doesn't work well with the debugger. * Autocomplete often doesn't work or presents the wrong things first. * Syntax highlighting often stops working and just reverts to plain text. * The debugger often doesn't give you access to all local variables (even with optimizations turned off), and doesn't get along with Core Data. * Nonstandard and strange keyboard shortcuts. * No support for plugins. * Crashes frequently. * Annoying user interface with inconvenient layout and gratuitous animations that just slow down the workflow. * Only works on MacOS. * No refactoring support in Swift. 
Haskell did have about a 20 year head start in the arbitrary competiton tho. I really don’t think it’s a fair comparison. 
No doy. 
These are the classic complaints about Python as a language, yes, but do you have any evidence that any of these has any impact on *one's ability to learn programming*? - Three of your complaints are about performance, yet everyone who has been programming for 10 years now started on a system which was far slower than Python on a modern PC. - One is about a perceived issue when working with "large programs", which is not what a learner needs to care about. - One is name-calling ("crazy"?) an issue with the common techniques used by libraries, which, again, is not relevant to people just learning to program. The standard library uses little if any metaprogramming. - The remaining two complaints are that it's too flexible, and also not flexible enough, so I don't know what you think Python is supposed to do here. It's flexible in the ways that programmers want -- what's wrong with that? You seem to think that programmers must learn using the same languages that you did. But by your own criteria, why not assembly language? It's even better than C or Pascal. It supports structs (with any decent assembler), it's faster to build (no compiler), faster to run (duh!), makes it easy to learn memory and pointers (not just the weird semi-sanitized model that C/Pascal present), and can run code on all CPUs at once. The only way it's slightly worse is "type checking" but as you say that's only an issue for "large programs".
&gt; Honestly, though, unless they start improving tooling outside of XCode, Kotlin is going to annihilate Swift and turn it into a dead language. Objective-C is also still a top-10 language on this list. When a language is the primary way to target a major platform, it's not going to die. TypeScript (or any other JavaScript-targeting language) hasn't killed JavaScript yet, either. Maybe Kotlin will be the Next Big Thing, but after 22 years, Java itself is still the most popular JVM language, by a huge margin. The only other JVM language on this list is Scala (#14), and I remember people saying that was going to take over the world, too. It's doing OK. &gt; It’s pretty sad when an obscure and hard to learn language like Haskell has better tooling. It's sad that people still consider Haskell to be "obscure and hard to learn" when in fact it's a powerful and simple language, with great tooling.
Eh. The virtual machine? That isn’t sustainable. Given they do have tech previews for a native Kotlin without a virtual machine. But with it? What a joke. No idea why they are holding onto it so much. 
I believe strings are structs (on-copy) so you are modifying copy of the string, not the actual data in array Good way to handle this situation is through Delegates, you can learn it pretty quick. Make first controller conform to a certain protocol that can handle data passed back. Notifications seems like an overkill. After that just set your model to reload table view after any changes (getters/setters).
&gt; Why the name calling? Because people that reject anything immediately that falls out of their comfort zone are scared of “new” things. I could have sugarcoated my words but it does boil down to that.
Didn‘t they Show that they implemented refactoring on the last WWDC?
&gt; Honestly, though, unless they start improving tooling outside of XCode, Kotlin is going to annihilate Swift and turn it into a dead language What the fuck are you talking about? They are both domain specific languages that don't compete. You can't do Android apps with Swift and you can't do iOS apps with Kotlin. UIKit is a platform that is built on the Objective-C runtime. Swift is the heir to that situation. Android app development is a platform built on Java and Kotlin holds a similar situation to Java that Swift does to Objc. 
&gt; Ps. Haskell IS much more difficult than you seem to want to admit. Based on what? That somebody probably already knows C-style programming languages? Or do you really think that more complete beginners would fail a beginners course in programming if it would be in Haskell?
Don’t get me wrong. I absolutely adore Haskell. I’m just saying that coming from Swift/Python, I was in for a bit of a surprise. I actually prefer Haskell now but it takes like triple the time for me to do something because I had to learn about currying and purity. I’m actually learning Haskell with the intent of being ready for languages like Plutus for the blockchain. It’s just that some of the syntactical sugar in Swift really makes Haskell feel strange. Getting rid of certain currying behaviors in Swift has also got me defaulting to Haskell now. Again, I love it. I’m just under no illusion that it is easy. Say what you will but category theory is not simple and it is HIGHLY useful to be at least adept at Haskell. 
I’m not even going to **fucking** dignify your snotty comment with anything other than this blurb. You seem like a trollish neckbeard douche. Maybe try phrasing your question without a sweat in the first sentence, asshole.
Heard of the K Framework? A semantic definition there would (at least) bring it to thousands of virtual machines, though that wasn’t was I was proposing. All I’m wishing for at the moment is playground on Linux or even an Apple supported 1:1 port of playgrounds to Jupyter.
Kotlin is an amazing language, and jetbrains makes amazing tools. Xcode is great for iOS development but it’s latest release has been horribly buggy and slow. I’ve been learning swift recently, and while it’s also a great language, the tooling just doesn’t compare. IntelliJ eats Xcode for lunch in every way except for the UI designer. 
Since iOS has a general purpose CPU and a GPU it is technically possible to train a neural network on a iOS device. However, it is not advisable to do the training on the device. Training is very CPU and GPU intensive. Usually requiring thousands of iterations through the training data to find an optimal solution for the neural network. This type of training will deplete the battery on the device and will take up large amounts of memory. 
Thankyou. That was well explained. I was going through a post on BNNS and MPSCNN and found out that training the data on the cell phone can set your phone on fire since it require a massive amount of computing power. Though Inference(making prediction) is quite possible on a cell phone.
I’m not trying to “fan flames”. I’m trying to hopefully voice my opinion that Swift would be amazing if Apple could branch out...especially considering the fact that their tech is starting to falter and Swift is directly tied to the success of their commercial products. Obviously some people will disagree but I’m noticing that Apple has allowed Swift libraries to get really buggy and outdated (Core Data, anyone?!??) and I think Apple could benefit from starting to work on their cross platform tooling to get the community excited again. 