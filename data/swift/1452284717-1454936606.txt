Is it good for people learning swift as their first language too? I do have some java experience and have done up to project 5 on hackingwithswift.
The list contains iOS resources as well. I'm searching for more strictly Swift beginner resources currently.
You can add us to the list : http://helpmecodeswift.com/
Will do! 
I'm porting an older app ([Codepoints](https://infincia.com/apps/codepoints)) to Swift at the moment, the older code used NSPredicates to search multiple properties on an object against multiple terms. The early port of the Swift version looks like this: https://gist.github.com/steveatinfincia/432205828cb9aa8c994d `self.unicodeArray` is a [Codepoint] array, the Codepoint objects have `type`, `code`, and `character` properties. Each term can match any of them on a single object ("OR" logic), and a final NSCompoundPredicate with "AND" logic is used so that multiple search terms end up narrowing down the search. Note that piling on NSPredicates like this does get slow, I may get rid of them soon but if you decide to go this route hopefully that helps :) 
Really neat article! Wish it explained how some stuff worked a little more, rather than just describing the structure.
Hacking with Swift is an amazing resource for learning! You should still start with the Swift book, but then immediately go to hackingwithswift.com 
Thank you! I'm glad to hear it :)
What are the changes between 2.1 and 2.2? Where can I read about the changes?
Have a look at Camtasia. I use it for a project recently and liked it.
https://xkcd.com/292/
I read a really interesting article a long time ago about lookup times for Apple's NSArray Objective-C class. You can deduce from the data they gathered that the underlying data structure changes depending on the number of elements you initialize the array with (this is not a mutable array we're talking about). I had always assumed Swift was a sort of wrapper on the same objective c code, kind of like how Apple's objective C classes are just wrappers around their CoreFoundation C language APIs. This article about Swift's array make me thing maybe that's not the case?
The Package Manager is the only thing I am actually looking forward to.
http://i.imgur.com/k0jPoN6.gif
Nice post! Definitely gives a good intro. I was actually more surprised at the first part (making a reference nil doesn't deallocate it) than the second part - for some reason I assumed that the whole reference-count-keep-alive only applied to non-optional values.
I haven't gone through the Treehouse course, but when I started out I felt the same as you. The "Why"s were very elusive for me in a the beginning. It was frustrating. However, after following some app tutorials and trying to write some basic ones of my own, it started to make sense. Stick with it and it'll start to make more sense. If not, try another learning resource. Udemy has a sale going on right now. Mark Price's course is very good. Hang in there!
I would seriously consider whether Udemy is a good platform. It has really become saturated (often with bad content) the past year+, and the fact that Udemy puts everyones' classes on sale for a 75%+ discount every other week certainly doesn't help your income. If you have any way to do this without udemy support I would highly recommend doing that instead.
I have tried a number of resources in my Swift learning adventures and Team Treehouse was one of them. I can totally relate to what you said and truthfully I don't think I really learned a lot from it. I worked through all the courses they had at the time (about a year ago) and it never seemed to come together for me. Maybe it suits some peoples learning style but if it isn't clicking for you right now that's not likely to change so I probably wouldn't invest much more time in it. Glowcap gave a great suggestion and with Udemy having a sale grabbing 2 or 3 courses right now would be a good idea for you. Personally for understanding the "why" I found the Stanford course to be the best so far. Plymouth University also has an iOS/Swift course on iTunes that I do like a lot too. The biggest downside to that one is they are still in the process of updating all the material to Swift 2.0 so it can be a bit disjointed as you work through he lectures (hopefully the update gets completed soon though because I think this could be a great resource too).
I read the book, did a few okay courses, did the Stanford course and have gone back to the book again since then. The two are perfect compliments and I know that once I have largely understood and mastered both resources I will be in great shape to move on to the next level of Swift and iOS development. 
That's neat, I didn't know that. Also, Swift's array interpolate with objective-c foundation classes freely but it doesn't use them. The reason they do it this way is because they want Swift to be completely separate from the Objective-C runtime (hence why they're reimplementing Foundation in Swift).
It's a change in Swift. Apple got rid of the println function and now the print function by default will print with a newline. If you want to print without the new line, use print("Hello, World", separator: "", terminator: "")
I'll assume you're using a Playground: there is a section on the bottom of the window that will display any output the Swift code has, and it will show "Hello, World" with a newline (which you can't see, obviously). If you want to see values in the right sidebar without the "\n", just type the variable name without `print`.
Hey, thanks very much!! I started the CS50 years ago and never finished... need to get back on that horse.... Thanks for listening...
Thanks very much! I have tried other courses at Udemy, (not Swift), and ended up spending so much time trying to figure out dead links that it became frustrating!! I will head over and see what they've got!! Thanks for the heads up!! 
Thanks for the support, I haven't taken the O-c coarse do you think it might fill in some blanks?? As for veggies, just wait till your 50's... Prunes become your best friend... ?:^P
Thanks for responding, I will stick with it... I was just hoping that there is a OHHHHH moment on the horizon.... I have bought a number of courses from Udemy, and my biggest frustration is dead links... I spend hours trying to may THEIR course work... Ill check out Marks... Thanks
Thanks but apparently all those are for objective C
First, format your code correctly. It's pretty unreadable. Click "formatting help".
Learn by doing is good. I kind of got thrown in for work. I think todo lists are popular, but honestly if you have something that may help you in your every day life id go for it. I'd start in IB, much easier to visualize constraints. 
So?
Here you go: https://github.com/FredLoh/BLE-Swift-Base Let me know if you need any help.
Lots of good questions, but yeah, swift standard library is good to use on Linux, swift core is not ready yet, and the foundation frameworks are only for OS X and iOS
Thank jasamer, you are right. For using try, i need to add do/catch. After i add try! instead of try. It works. Thank you. 
CoreFoundation is already open source and cross platform. Foundation is not. The Swift Foundation project is an open source, cross platform reimplementation of Foundation, in the Swift language. Today, your code that uses Foundation can only be using on OS X and iOS. When the Swift Foundation project is complete, that same code will run on all platforms that support Swift.
Thank kalvin126, you are right. The crash is in PostService. But I already tried to change all the NSDictionary to NSArray in the PostService file, then it caused another error in the masterviewcontroller file :self.loadPosts(response["posts"] as! NSArray) --- in this sentence, it Cannot convert value of type 'String' to expected argument type 'Int'. so now I don't how to change it.
Thank you I did not know Int type had methods of that kind. Looks like I have some interesting reading to do
I remember you collaborated to the project frequently as well. My perspective is definitely skewed having written apps from start to finish in these frameworks.
Thanks will definitely check it out!
It doesn't "throw" since Swift doesn't have exceptions. It terminates the program, though. There is no way to catch that.
That won't work... the + operator is not a "throws" operator. When "+" overflows, it raises an assertion failure (aborts the program). You need to use `addWithOverflow` to handle overflows.
Here is my example for [OpenGL+swift](https://github.com/sakrist/Swift_OpenGL_Example), maybe you will find it helpful 
The second one is much clearer. Also, if the method is being called on a value type (struct/enum), the first version won't work, as the mutation will be performed on the copy.
These are neat but I don't think any of them are particularly impressive or show off some of Swift's cooler features (optional chaining, for example).
Unfortunately, this is not officially supported. If the class is a subclass of nsobject, though, you can create a computed property that call getValueForKey and setValueForKey in your getter and setter, respectively.
No, but if your protocol has an initializer, you can call it on any conforming to it. If you're doing protocol oriented programming with associated types, you actually can use the initializer as long as it is an associated type.
Looks like someone just discovered functional programming for the first time and thinks it could only be done in Swift.
thanks!
Hi I need your help. I am using iModel but I am not able to parse my enum values which is a part of my model. Please help me.
Wasn't this already posted?
Yep, i've posted it a few days ago https://www.reddit.com/r/swift/comments/3zrlub/10_swift_one_liners_to_impress_your_friends/
I have also used Treehouse for learning, I agree with SwiftTutorialHQ. The other thing that makes learning easier is a great community to ask quick on the spot questions to. There is a great Slack group of new and expert iOS devs here: https://ios-developers.io/ They also have a treehouse channel to ask questions. If you're ever stuck start there. However BigNerdRanch just came out with some great iOS Swift books, they are top notch and explain everything in great detail. Hope that helps! 
How come the URL detection didn't work? Are they not the same source? 
Hey dear OP. It's been almost a month now, I am curious whether you went with ReactiveKit or RxSwift? I am on the same cross road as you were a month ago, trying to decide between RxSwift or ReactiveKit
Not sure how the URL detection works exactly, but your url doesn't contain a slash at the end.
Actually, I though of another way to use enums, this one is IMO the best: public enum MyEnum: Int { case pretty = 0 case ugly = 1 } public class EnumModel: JsonModel { private dynamic var enumRawValue: Int = 0 public var enumField: MyEnum { get { return MyEnum(rawValue: self.enumRawValue)! } set { self.enumRawValue = newValue.rawValue } } override public class func jsonPropertyNames() -&gt; [String: String] { return ["enumField": "enumRawValue"] } //... } We've defined a simple enum and a simple model that uses it. Let's assume that we want to parse a following json file: { "enumField": 1, } Overriding jsonPropertyNames tells the parser that we want to keep "enumField" value in "enumRawValue" property. We've also defined a computed property, enumField, that uses this raw value to construct an enum. This way you will be able to use enums with iModel in a quite simple way. 
[removed]
Should go to /r/SwiftJobs
The [Stanford course](https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099) is great (and free). I'm going through it now.
I'm learning swift (coming from Fortran/Python/R) and starting to get the hang of it, so some of these were neat to try out as examples. It has however highlighted what I don't like about swift (or perhaps just non-scientific/mathematical languages or perhaps OOP in general); How is `(1...10).reduce(0, combine:+)` not already implemented as `sum(1...10)` or I guess in OOP parlance, `(1...10).sum()` ?
In addition to hacking with Swift, I also visit: * [Apple's official Siwft book](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309) * [We ❤ Swift](https://www.weheartswift.com) * [Swift Blog from Apple](https://developer.apple.com/swift/blog/) * [NSHipster](http://nshipster.com) But these resources are only for learning the language, not for learning iOS/OS X app dev. Oh, and also, the Stanford course CS193p is based on iOS 8 and probably Swift 1.x, I do strongly recommend coding in Swift 2.1. Because its a lot better.
I was taking a look at this for the first time just earlier on today, it seems really awesome! Thank you very much for the reply, by the way, I appreciate it!
The big nerd ranch guide to ios programming 
That's not a problem with swift, it's a problem with the standard library. The standard library is pretty sparse. But, the toolset is fanastic, which is why it's not a big deal that sum() doesn't exist, because the tools are available for the user to quickly, easily, and expressively implement sum. 
Umm, I don't think so. According to [Stanford's course catalogue](https://explorecourses.stanford.edu/search?view=catalog&amp;filter-coursestatus-Active=on&amp;page=0&amp;catalog=&amp;academicYear=&amp;q=cs193p&amp;collapse=), 2015 autumn's CS153p has already finished on 12/11/15. I remember 2014 autumn's video was published at the end of Jan or early Feb. So it should be up soon.
Thanks. This is a interesting way to do what I need. But for my purposes I will probably stick to inheritance
You can simplify that to print("Hello, World", terminator: "")
www.raywenderlich.com
Caution: This link redirects to **SPAM**. [**vjyokxvey.com**](https://www.reddit.com/domain/vjyokxvey.com) is a known spam website. --- [**^^Basic ^^Automod ^^Instructions ^^to ^^fight ^^spam**](https://www.reddit.com/r/FightSpam/wiki/basicautomodsetup) 
&gt; [...].sort().first No!
Thanks for reply. Yes, Actually I did the same to resolve it temporarily but now I am facing another issue. While I made an property of another model in my model like this: class model1: JsonModel { dynamic var model2 : Model2? dynamic var obj1: String? dynamic var obj2: String? override class func jsonPropertyParsingMethods() -&gt; [String: (AnyObject) throws -&gt; AnyObject] { // we have a nested JsonModel, lets parse it return ["model2": Model2.fromJsonDictionary] } } In this case i found issue: Unable to find class property for provided key: "obj1". Unable to find class property for provided key: "obj2". When I checked it internally, your method: internal static var classProperties: [String] { get { if self.classChildren != nil { return Array(self.classChildren!.keys) } else { return [] } } } self.classChildren!.keys returning keys of model2 in this case while it is parsing properties of model1. Once self reference changes from model1 to model2, it doesn't return to model1 again to parse its data. I think I found the issue, would you please help me in resolving it. Problem is in classChildren which is an static property and its value sets in init of model which returns internal models property while it parsed the internal model and comes back to outer model. I know I am not able to explain it clearly but if you diagnose, you will find it.
http://youtu.be/GOEPVM5OzJk 2015 Stanford swift course.
Currently we have exactly this in the sidebar, although since we're not using either of our two sticky slots it might make sense to highlight them there as well. I would also personally like to see a higher frequency of more advanced subjects. That being said, I believe that a big reason people create the "Resources for a newcomer?" threads is not because they're having trouble finding resources, but because they're excited about the new endeavor and want to talk with people first-hand about it. Assuming this is the case, there would be no easy "fix" for it (nor would I want there to be!). In any case, I'll make sure the other mods see this so we can discuss it.
Once you're comfortable with Swift, you can basically use any OS X resource because the API interacts with Swift in pretty much the same way as it interacts with Objective-C.
Yup looks good
Thanks that helps a lot!! Its great to have a community of helpful people...
Gotcha that makes sense. Thanks so much for the explanation! I've updated the gist.
Something like this works: protocol MultipliableBy10 : IntegerLiteralConvertible { func *(x:Self, y:Self) -&gt; Self } extension MultipliableBy10 { var multipliedBy10:Self { return self * 10 } } extension Int : MultipliableBy10 {} extension Double : MultipliableBy10 {} // etc. One needs conformance to IntegerLiteralConvertible in order to be allowed to multiply by an integer constant (10).
Also, just one small thing. In that guard statement, when you print the error, you should force unwrap it. If you're in the guard's else statement, you know the error is not nil, so you can safely unwrap it. The reason I say you should do this, is purely cosmetic. It just looks weird when printing an optional. Here's an example var err = Optional(NSError(domain: "", code: 0, userInfo: nil)) print(err) print(err!) The two prints are like this Optional(Error Domain= Code=0 "(null)") Error Domain= Code=0 "(null)" Any optional is going to have Optional() surrounding it in the print statement unless you force unwrap it, and since you know it's not nil in this case, you can do so safely.
Oh, and another edit. Replace if placeholderImageFileName != nil with if let placeholderImageFileName = placeholderImageFileName And then you don't have to force unwrap placeholderImageFileName
Why reinvent the wheel when you can just use CoreLocation's **distanceFromLocation:**? You can create two CLLocation objects with a coordinate like: *let location = CLLocation(latitude: 38.898556, longitude: -77.037852)*. Of course attempting to optimize formulas to learn from is not such a bad thing. 
While I don't know of any examples in the standard library where this would be a problem, conformance to `IntegerLiteralConvertible` does not provide an implementation of `*` (that one comes from `IntegerArithmeticType`). Take the following: struct NoMultiply: IntegerLiteralConvertible { init(integerLiteral value: Int) {} } let foo: NoMultiply = 2, bar: NoMultiply = 3 foo * bar // error: binary operator '*' cannot be applied to two 'NoMultiply' operands 
Big Nerd Ranch is one of the better and more thorough books that I've seen. That being said, I have heard of the changing for Swift 3. You will always have changes year after year, but I don't think that should stop you. From what I've seen, the changes aren't things that are used commonly. I think you still have enough time time that when 3 becomes official, you can adapt to the changes. 
Having had to update my own online book twice now (once for 1.2 and again for 2.0), yes you will hit problems following the Big Nerd Ranch book – or indeed any Swift book. How quickly you get over those problems will come down to the size of the changes (currently not massive, but there's still a while yet!), how experienced you are with Swift, and how quickly questions and answers get posted both here and on Stack Overflow. If you bought a digital copy of a book, it's possible you may qualify for free updates, which would really help.
It shouldn't cause any major issues, and I believe they put up errata on Github to cover changes as they happen. A few of the bigger changes currently slated for 3.0: - Removal of currying syntax - Removal of var from function parameters and pattern-matching - Removal of `++` and `--` operators - Removal of old-fashioned C-style `for` loops (`for in` loops will still exist, of course) Honestly, given how Swift is used in practice, most of these are edge cases. I think the only one that I used somewhat often were the `++`-style incrementors, and even then, it's super easy to just use `x += 1` instead. So yeah, I think the BNR books are and will remain an excellent resource.
You misunderstood what I wrote. You should try to compile the code.
Keep in mind that "constantly" in this context means a few times a year, but yes it is changing. Just dive in and start somewhere and BNR books are a good way to do that.
https://github.com/hsavit1/Awesome-Swift-Education excellent repo of everything swift
It's too bad that's not an Error throwing function. Returning a tuple like that makes you wonder what the result is if overflow = True. And the docs don't clarify. 
http://www.jessesquires.com/ While you're learning Swift, keeping up with what's new might be interesting. Jesse's blog is great for that. Recently, he's been doing a weekly digest of the Swift open source activity. Definitely worth checking out.
There are changes. But Xcode will suggest the fixed for the most part. And Google will answer the rest. The should still be relevant if one does not stop simply because an error occurred. 
Don't worry about future changes. The sooner you buy a book and start learning, the easier you will find it to adjust to a few small syntax changes later down the line.
What about the Wiki? https://www.reddit.com/r/swift/wiki/index http://www.reddit.com/r/swift/wiki/faqs
kk, ill try that
Cool. You still think the information in the iOS 8 copy is still useful and everything?
I think not, 2.2 will release around March if I'm not mistaken and I guess (hope) 3.0 will release on wwdc. If there's a 2.3, the update wouldn't be so significant due to the available time. I'm pretty certain about 2.2, not so much about 3.0. EDIT: I just found following quote on the swift-evolution github page "Expected release date: Late 2016", WWDC is probably a tad to early to be called late 2016 ;)
&gt; Foundation is originally a library/framework written in Objective-C. By import'ing Foundation, one can use NSString methods on a Swift String. When do you need to explicitly import Swift?
[Perfect](http://perfect.org) and [Zewo](https://github.com/Zewo) are both a lot better than Taylor. Zewo has some stuff (Mustache) for HTML rendering. I've been meaning to find a project to embark on with Zewo. It's too freakin cool. EDIT: It seems the Zewo guys have an affinity for Docker. That's a good option for deployment, since you asked.
Applicative/Monadic Parsing (the strategy of using Applicative or Monadic data types to do parsing) is one of the few things I can think of where this would be useful. You don't want to use mutable data because that makes it hard to rollback from parse failures and attempt another parsing rule, but you need "mutable" data in that you're trying to mutate something as you go along. Fundamentally, it comes down to when your data needs to branch. Basically, you hold on to the old value because it's immutable and you can't change it. Then if the new value can't be computed, or it's not good enough, or the end result is meant to be a composition of old and new, or anything like that, you still have the old value hanging around because you used immutability and lenses. But the biggest reason is that it makes existing immutable types into mutable types. In Haskell, every data type is immutable. Lenses are used to give the guise of mutability.
I recently picked up the book and my thinking was that I should probably work through it sooner rather than later. Learn 2.0 as best I can and then hopefully the transition to 2.2 and 3.0 won't be too big.
Man...these suckers are popping up like crazy and I'm loving it! My plan for the day was to add basic http authentication and start working on OAuth2 for Zewo, but now I have yet another swift http server to play with...yay! 
Ok, that makes sense. Now I remember the talk mentioning something about JSON parsers. I guess that's where this technique shines. Thanks!
Thanks for your answer! I didn't realise it was such a good idea to read the docs! ;)
Thanks for the link, I appreciate it! Sounds like an interesting blog.
Yeah, the docs are great! And if you have a very specific question, don't forget to look on StackOverflow. :)
There is no plan for a Swift 2.3 release.
it didnt work the text still switches side when a message is received
What is your data source for the feed view? You can reload the data source in the completion handler of the button and then load the viewcontroller of the feed view from there.
&gt; Please, check the [FAQs](http://www.reddit.com/r/swift/wiki/faqs) before submitting.
This may be 5 months late, but thank you for writing this post. This is EXACTLY what I needed to hear. I was in a similar position as OP.
I do, it has different examples for different features. Each book basically shows how to use the new features of that iOS release. But again, you will come across syntax differences trying to use the iOS8 book. To my recollection though the author has a Git repository for each book with updated code.
You see all those exclamation points `!`? That's the problem. You're force-unwrapping `nil` because there's nothing in the empty textfields and it's causing your app to crash. It looks like your calculation requires valid inputs in every field, so you'll have to do some validation. The most obvious option is to write some code that disables the submit button until all fields contain valid inputs. If the inputs need to be numeric, make sure the numeric keyboard pops up for the user. Another option would be to include default values for the fields, so even if the user just opens the screen and taps the button without entering anything, it will always at least produce a valid result.
I almost understand what you are saying but I am a n00b and would appreciate if you set set it up in context for me PLEASE :-) This is what I tried, // Disable button when there is no value in all fields func textFieldShouldReturn(textField: UITextField) -&gt; Bool { if ((panelWidthTextField?.text?.isEmpty) != nil) { panelsWideTextField?.text?.isEmpty panelHightTextField?.text?.isEmpty panelsWideTextField?.text?.isEmpty panelPitchTextField?.text?.isEmpty RETURN; self.calculateButton?.enabled = true else RETURN; self.calculateButton?.enabled = false } } 
Apple has a framework similar to numpy called Accelerate, but it's api isn't very clean. Luckily Mattt wrapped it in Swift and released it under the name [Surge](https://github.com/mattt/Surge). Check it out. Edit: If you're interested in machine learning, there's a fantastic library made by Collin Hundley (I believe he's a redditor, on occasion) called [Swift-AI](https://github.com/collinhundley/Swift-AI). It has a top-notch codebase and is performance-oriented.
 There's not much yet. Now that Swift is open source and cross-platform we should expect more. Here is one stats package. Don't know how good it is though: https://github.com/evgenyneu/SigmaSwiftStatistics 
Something like this is not possible
I would simply start building what you want and Google your way to a solution. There are plenty of MapKit tutorials. Here are a few to get you started: http://www.raywenderlich.com/90971/introduction-mapkit-swift-tutorial http://www.raywenderlich.com/87008/overlay-views-mapkit-swift-tutorial http://www.ioscreator.com/tutorials/mapkit-tutorial-swift-ios8 http://youtu.be/EH05-nuBGpg 
Okay, I didn't notice everything was happening inside `textFieldShouldReturn`. I think the best place to mess with the `enabled` property of your UIButton would be `textField(_:shouldChangeCharactersInRange:replacementString:)`. It gets called whenever a change is proposed to the text in a textfield, so you can figure out if/when the replacement String is going to be of length 0 (or not). `textFieldShouldReturn` is for deciding whether you want the return button on the keyboard to be enabled or not.
This is really cool, thanks!
I like to read both, and I'll let the mods of each decide what's appropriate where. But it sure would be nice to have a link to /r/iOSProgramming in the Related Subreddits section of the sidebar here in /r/swift. I PM'd /u/Swiftapple about it months ago and got no response. I'm confused how /r/Healthkit, /r/ComputerScience, and /r/ReactNative are more directly relevant to Swift than /r/iOSProgramming which features **tons** of swift content.
The best way to learn development and programming all together is trial and error. Google is your friend, make small goals for yourself and research them one by one. Once you finish one goal, move on to your next one and so on. That is what worked best for me. I set a goal and only concentrated on that until it was done. Sort of like a puzzle. I found myself trying to do too many things at once in development and became overwhelmed and unorganized. If you run into specific issues you can make forum posts here and on S.O. Little by little things come together, but my ultimate point being to fight through everything yourself, dont have someone else lay an application out for you and then fill in the blanks. Barely any information will be retained that way. Development is all about problem solving and thats how you will learn best. Thats what worked for me at least. Dont rush anything and take it all in steps. Then before you know it you'll have a finished product and have retained everything you applied. Just my two cents. Good luck. 
I was actually thinking on making a similar suggestion. With Swift becoming open source, I think the sub should focus more on the language itself. Toolchains, compiling, etc. this also included new projects for Swift, like servers, ports, wrappers for some technologies, etc. This sub shouldn't be about the iOS or OS X SDKs. These questions are much better suited for their respective subs. Similarly it shouldn't be for Swift wrappers or libraries that rely on those SDKs. In the end the mods will do what they seem fit but... Just my 2 cents. I also hope the distinctions I'm trying to make are clear enough.
I support this notion wholeheartedly.
I was not aware of this until now, actually. Thank you very much! 
Playing with lenses was a fun mental exercise for me. When it comes to practicality, they work for both structs and classes, even those that come not from my code, but from some library for example, and have `let` properties.
UIScrollView has built-in keyboard dismiss functionality that you may want to use instead which will probably solve your issue. Set the table views keyboardDismissMode to .OnDrag
Thanks. For guard and all other relatively new things for Objective C programmers, I am planning to write a new tutorial. Should be ready in 2-3 weeks. I was torn whether I should include extensions in this one, but since this was already too big, decided to keep it for the next part. 
Good point about the optional Bool, thank you. I missed that. 
https://medium.com/@ynzc/part-2-brains-before-beauty-410fb41f6ae3#.bwd8gbhdy &gt;13. At this point, you should have 4 passing tests, which is awesome! However, there are 3 stages in the TDD cycle: RED — Write a test, and watch it fail. GREEN — Write just enough code to make your test fail. REFACTOR — Clean up existing code. Repeat the cycle until you have an app! is it meant to be "Write just enough code to make your test **pass**". ? Or am I just completely misunderstanding whats going on
Using a database such as MySQL, you would essentially create a REST API with a service side language and interact with the database there. Your app would communicate with the API via JSON or XML. If your new to APIs, I would look into either Node.js or PHP. 
Interesting. I've never used this before. Could you give me an example of how this works?
I have seen this with people who are mainly artists or game design focus. And from that standpoint I agree, if you are someone who is mainly into game development for the fun / interest / pay of designing games or doing art for games than you just want the code to be the easiest solution for the widest audience. The solution to that is clearly a cross platform Unity type tool. If you are mainly into game development for the coding and the unique challenges game development provides to programmers than use a native language. When you do you learn more widely applicable things and you're game will be better for that platform for the reasons you have named. TLDR: if you are an artist , game / level design person use Unity, if you are a developer use native languages ( swift / objective-c )
I personally think the "Everything has to be native" mindset is also limiting. Unless you're doing something that requires specific, niche platform features or brand new hardware you can usually do what you need to do in Unity, and quite frankly, the tools are going to be better for gaming. iOS is likely never going to have the same quality tools or community built around game building that Unity has already. I've been in this boat myself, as both an app developer and game developer. I prefer Unity if I'm going to do game development and will stick to native for most other things. On the app side, I don't really like the options for cross-platform, but for games, Unity is damn nice.
One of the neat side effects of Swifts arrival is that people are taking advantage of the fresh start to concentrate more on TDD. This is good for all of us. Tests in general have been sorely lacking in Cocoa dev for a while. 
It won't be that long before the Stanford course for 2016 will start though, probably. They do one every year - have done for a while.
Looks like she forgot to write a test for her blog implementation! ...I'll see myself out. E: Corrected gender
You shouldn't do this, but technically you can use a database driver directly from your app. For example, here's a wrapper in Swift that I made for [MongoDB]( https://github.com/Danappelxx/SwiftMongoDB).
Games are the one exception to cross-platform apps generally being awful, because most games invent their UI from the ground up instead of using standard system components. As such, cross-platform frameworks like Unity are very popular, in part because they greatly simplify deploying to multiple platforms. For any kind of app that uses a standard UI, though, trying to write cross-platform code will just result in a mediocre user experience. Now, if you already know native development and not Unity, then it's easier to write a game natively than to have to learn Unity, so there's tradeoffs.
Thanks! I may actually try out Swift if I can get some time and can think of something useful to do with it (I mean, a project that's useful). This kind of write up is great in that it's not aimed towards complete newbies, and the effort is appreciated. 
Not sure why you say this shouldn't be done? Seems perfectly valid to me; as long as you follow good practice by separating the driver wrapping into its own layer or, preferably, another module as you have done.
I'm a C++\C# programmer that's brand new to Swift. I have a couple of performance questions. If assigning a mutable dictionary to an immutable variable, does that require a deep copy? If it was a reference of the immutable copy it could reference a mutable dictionary that might change. If I assign a mutable dictionary to a var does that just keep a reference, or does that make a copy? If I assign an immutable dictionary to a var does that make a mutable copy? EDIT: Just did some research and Dictionaries in Swift are value types so the dictionaries never affect one another after being copied, but they can contain reference types and those things could change.
Come on really? If there's a will there's a way. 
Security-wise, you're storing keys to directly access your database in your app. Unless you're very careful, that's very dangerous. Also, it can take up a lot of memory if you're not careful. It's better to use it on the server and make an api (with something like Zewo) connecting with it.
What you're describing is spoofing and pretty sure that is against spotify's developer agreement and could land you in some legal trouble. 
&gt; If assigning a mutable dictionary to an immutable variable, does that require a deep copy? If it was a reference of the immutable copy it could reference a mutable dictionary that might change. In Swift, the only reference types are classes and functions/closures. Dictionaries, Arrays, Sets, Strings, and all the other expected primitive types are value types. If you assign a mutable (`var`) dictionary to a constant (`let`), you'll be able to mutate the contents of the first dictionary, but the second one will remain static. Of course, if the dictionary contains reference (i.e. class) types, the objects pointed to by the references will be mutable in either dictionary. You will, however, only be able to add, remove, or alter the references in the first dictionary. As far as whether a deep copy is made in this situation, if we're talking about a dictionary of reference types, the answer is no. It's not going to deeply copy the contents so you're pointing at all new objects in one vs the other. If it's a dictionary of value types, my understanding is that the determination of whether it makes a deep copy or not is the prerogative of the compiler. It may make a deep copy, or it may not, but either way, the second dictionary will fundamentally act as a copy of the first. Which is to say that if you change a value in the first one, it will not be reflected in the second one. &gt; If I assign a mutable dictionary to a var does that just keep a reference, or does that make a copy? You'll have a copy of the first dictionary. The difference between this and the previous example is that you will be able to mutate the contents of the second dictionary as well as the first, because you're assigning it to a `var` instead of `let`. &gt; If I assign an immutable dictionary to a var does that make a mutable copy? Yes. There really are very few surprises with Swift. If it's instantiated from a class or it's a function/closure, it's a reference type. If it's anything else (struct, enum, String, Int, Double, Bool, etc), it's a value type.
As the declaration says, it's an [option set](http://www.swift-studies.com/blog/2015/6/17/exploring-swift-20-optionsettypes). 
That most definitely was a typo - thanks for pointing out. Have corrected now!
Sub views on a cell should always be added to the cell's contentView property as stated in the docs. As an aside, you should really consider not force unwrapping your optionals. Cheers
Straight into a cease and desist. 
Because my current project is quite big (about 30 different view controllers) and many of custom components I made for it I plan to use in another projects. When I have everything made programatically it will be very easy to reuse it in another projects and I have better control on everything. But on the other hand for the first time it's more time consuming approach and it's harder to solve similar issues. But from my experience is better approach if you plan to reuse your code in another projects.
Aah, ok.
I know about that. This class was my older code where I don't use optionals in right way.
I started learning computer programming with Swift 1.0. Yes, the changing syntax can cause some frustrations and will slow you down at times. But, dealing with changing syntax was also a learning exercise in itself. Every time there was an update it meant really going through and understanding what those changes did. So you actually gain some good knowledge and skills by learning how to work in a fast changing language like Swift. Swift is going to keep changing for a while so don't wait. Just jump in and start now.
I just took a look at Design+Code and at first impression this looks like it could be a missing piece in my learning puzzle! I've read through the Human Interface Guidelines several times and have some graphic design background so I am not going into UI design blind. But for someone like myself who wants to do it all this certainly looks promising. Anyone have other suggestions for iOS UI design specific resources?
I use Snapkit all the time. It's awesome. Is there anything specific you want to ask? Shoot me a Private or edit your post I will try to help you.
This is great, I'm finding it very rewarding passing all the tests. Thanks. I think you could improve the wording of Part 2, CHALLENGE 13, which currently states "Extend the check method, so that it returns the number in a string for 1." So I extended check like this: if number == 1 { return "1" } Which of course works, but is not what is required. I think you just need to make it clear that here we are testing for anything else apart from 3,5 and 15. I really am enjoying this, thank you. 
&gt; Which of course works, but is not what is required. I think you just need to make it clear that here we are testing for anything else apart from 3,5 and 15. &gt; Really good point! Your way is actually a more TDD way of doing things, and if you do it you will need to write another test to make it return a non-hardcoded value. I've added a note to the answer gist (And a thank you) https://gist.github.com/yvettecook/e70543418583dd03c6cc
Can someone please explain to me if my way of doing something is good or bad (I'm guessing bad, but it passed the test!) In part 3 section 3 (https://medium.com/@ynzc/part-3-the-game-is-on-a613522d15b#.uxf9msnav) It details how to make an initialiser method using the code : class Game: NSObject { var score: Int override init() { score = 0 super.init() } } However when I was guessing how to do it I just wrote: class Game: NSObject { var score = 0 } Which also worked.
Afraid I can't spot it - Medium does occasionally mangle the assets? 
I noticed that it had changed, I assumed you'd fixed it. Must be a Medium issue as you said. 
Great read. Thanks!
[PureLayout](https://github.com/PureLayout/PureLayout) is also worth taking a look at. I only started using it recently, but it works quite well.
I've having a tough time figuring it out, especially creating public/private keys. The README guide causes errors in Xcode. How did you accomplish it?
Hey @mattbarker016! You can generate RSA private/public keys by running `$ ssh-keygen -t rsa`. As for the Xcode errors, I'd suggest to ask a new question on StackOverflow by including your code, since it'll be easier for me to see what's wrong and reply with some code. Let me know the URL of the question. Thanks!
Could you give a more detailed explanation of your usage? What are you going to be doing with the items? I'm a big fan of enums for this kind of stuff, unless you're going to have dozens of items with lengthy, specific functions for each one. Otherwise I would go with protocol-oriented structs.
I'm a game programmer and a lot of games are written in C++, Java and Obj-C/Swift are used only as the wrapper to the OS.
See the extended use site of the wiki: https://github.com/bahlo/SwiftGif/wiki/
Cool! You should probably use an enum ``` enum Weapon { case Sword case Crossbow var damage: Int { switch self { case .Sword: return 10 case .Crossbow: return 7 } } let node = SKSpriteNode() var projectile: Projectile = { switch self { case .Sword: return .None case .Crossbow: return .Arrow } } } ``` ...and so on.
Looks like there's just one dude on there.
Yes for now only one but everybody can join.
One method is to have a static Launch screen but have a root nav controller that has the same image as the launch screen (with the navbar hidden). This root controller would have logic to choose the next viewcontroller to move to with no animation effects (or even nicer, a little alpha fade effect). The trick is to use an imageview for both the launch image and the root viewcontroller with autolayout pinned to the edges and the image set to aspect fit. That way they all should resize to the same size and the transition would appear seamless. 
I think the BNR books are on Safari Books. I've not had a membership for a while though. They let you download as PDF with certain packages.
How is that better than using this subreddit?
informit.com
To break the trend here - I suck at tutorials as I get bored way too fast. Find something simple you want to make (weight conversion calculator was mine) and make an iOS app. Refine it down and StackOverflow the hell out of your problems.
What were the ugly hacks that you had? Technically you can create an xcode template which would make life for a _lot_ of people easier.
You can add the .build/debug directory to the import path, but that doesn't link the library. So I added the .a files of each dependency to the things being compiled manually. Really awful. Couldn't even do it right since `swift build` names the library `Name.a` instead of `libName.a`, meaning that if you add .build/debug to library search path, the linker still won't find the libraries when given `-lName`.
You're just delegating to `NSTimeZone()` and doing nothing else. If you try replacing instances of calling your constructor with `NSTimeZone()`, you'll find you get the exact same results. This isn't a bug. `NSTimeZone` is meant to be initialized with data using constructors other than `init()`. That constructor just makes a useless, but real, `NSTimeZone` value that `description` displays as `&lt;uninitialized&gt;`
This is actually the reason why String doesn't directly expose integer indices. It's an "expensive operations should look like they're doing something" idiom. That said, *if* the string in question is ASCII-only, this should be able to be faster and is likely worth filing a bug about. String uses a more compact backing store for ASCII strings, and ASCII characters are have a fixed size, so it should be able to make indexing into them O(1) rather than O(n). If you have a testcase I could run, I'd be happy to profile and poke at it a bit.
It is save like Golang or Erlang? And framework that I mentioned above, it is concurrent for every request or not?
(Not my choice). I was surprised at the lack of reflective functionality available in swift. But overall from my tinkering I do prefer it.
Can anyone explain why Apple kept selectors around anyways, and not just started using blocks/closures everywhere?
Baseline is a typography term referring to the line on which most letters sit. e.g. in the word "why" it would be a horizontal line at the bottom of w and h, but not y The alternative is bottom, which includes any extra padding applied in the view to account for the fonts decender value
If you already know how to render the pdf inside a view then all you need to know is how to work with collection views. Ray Wenderlich has a pretty good tutorial that should cover anything your missing. It fills the cells from the flickr api, but you can just replace that with your own code grabbing local PDFs. http://www.raywenderlich.com/78550/beginning-ios-collection-views-swift-part-1 As far as displaying it full screen, you should just pass values from the first view controller to the second VC in prepareForSegue so the second VC knows what to show. The second VC just receives the value from the first one and displays whatever that value points to. (Disclaimer: There probably is a better way, but that's how I'd do it.)
Tip: I noticed your comment about the performAction method being internal instead of private. You should be able to make it private if you explicitly tag it with the @objc attribute—this lets it still get exported for the ObjC runtime without leaking it out to the rest of your pure Swift code.
it is not based on VS.NET. Joking aside. I use Eclipse every day. It is pretty good and i have used worse. (i.e. VB 3 , etc,). And yes, i do think VS.NET is worse and i use that pretty much every day.
&gt; That said, if the string in question is ASCII-only, this should be able to be faster and is likely worth filing a bug about. I don't think String.CharacterView has any optimizations for ASCII-only strings. In fact, I think the only string view with a fast path for ASCII-only strings is String.UnicodeScalarView.
I think this is pretty bad advice, actually. Learning goes way faster when you invest time at the beginning to understand what the basic building blocks are, and how they work together. Most people who start projects from scratch, and StackOverflow lots of their code snippets, end up being the types who post inane questions on the internet, because they aren't really learning how anything works.
I am surprised by how much people screw this kind of stuff up and don't really ever take the time to understand why an API is the way it is. You see people add integer based indices to strings for convenience built on advancedBy(). What amazes me is why people never take the step back and ask themselves "if integer based index access on strings is so easy to implement for me, why didn't Apple already do it?". They didn't because they want to communicate clearly the performance implications of accessing characters in a string. So when using Swift strings get used to storing real string indices and not integer indices. If your code is using a lot of integers when dealing with strings you are doing it wrong. You got to think about Swift strings as a linked list. You deal with it in much the same way as you deal with linked lists. That means you try to avoid iterating through it lots of times unnecessarily.
The have started using blocks/closures in newer APIs (eg. in UIAlertViewController and stuff), but the old selector-based APIs are still around. They really could introduce a new non-selector based alternative for the important classes, though.
sorry my English. I can't understand well. Can you explain more ? 
I just wanted to add that there are third party concurrency libraries, too (not just wrappers). For example, [Venice](https://github.com/Zewo/Venice) is a Swift library which provides CSP-style concurrency (very similar to go).
&gt;There are lots of libs and sdks and sometimes it's hard to pick the right and reliable lib. ...which is kinda why I don't think newbies should reach for libraries first when building app. It kills me to see a new coder install a 3rd-party library to parse JSON...because someone here told them to. As though they couldn't do it otherwise.
Note: A proposal to improve ObjC selector usage in Swift: https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md 
Apart from the slightly angry tone this was actually really helpful. I have been doing lots of the /r/dailyprogrammer stuff and they use lots of strings and characters. Thinking of the them as a linked list is great advice. Thanks!
when I setup views in code I use cartography but snapkit is good as well (I don't know pure layout but I'm sure it's fine)
thank you . one more question . this is last I promise :) . for example I create one Imageview on interface builder and add some constraints . after I access from swift file to Imageview and I added layout with cartography. I will have warning or which layout will work ? :) cartography or interface builder's constraints ? 
thank you :) I wonder too much things :) but enought :) a lot thanks . really help me your helping 
no just keep an eye on the console, you can also set a breakpoint to let you know immediately when these happen (sometimes they are not visible in the UI): http://staxmanade.com/2015/06/debugging-ios-autolayout-issues/
thank you :) nice too meet you .
Thanks for the tip, I'll try that out.
Let's cross our fingers!
The angry tone is unnecessary, but you are totally right. I admit that I do this all the time and also see coworkers do the same. I'll take an api for face value and not think of why and just do. This is really good advice that I should definitely put into practice more often.
If I'm understanding your comment correctly, you are suggesting I should be using other init methods that requires data, and what you said sounds about right... Thanks for the comment. I have encountered another problem when I was trying to write convenience init for `NSTimeZone(abbreviation: "EST")` by doing: convenience init?(text: String) { self.init(abbreviation: text) } With `NSTimeZone(text: "EST")`, I'm getting nil pointer returned even when the text is a valid abbreviation. Any idea why this convenience init is returning a nil pointer?...
That's really interesting. Also /u/tonygoold brings up String.UnicodeScalarView makes me wonder if using unicode scalar view when you know the string is ascii only would be more performant than just using the character view and Index properly. Here's a link to a [pastebin](http://pastebin.com/W82RNwfm) of some test cases if you would still like to poke it with a stick. The actual string I was parsing was the text from a wikipedia page.
Isn't foundation being ported to Linux? Why does it matter if it depends on foundation?
Unfortunately that isn't possible. You need a concrete return type, so one way is like this: private func cellDataForIndexPath&lt;A: IAlert&gt;(indexPath: NSIndexPath) -&gt; AlertCellData&lt;A&gt; Or alternatively you can make the class that has that method generic like class CellDataProvider&lt;A: IAlert&gt; and then do private func cellDataForIndexPath(indexPath: NSIndexPath) -&gt; AlertCellData&lt;A&gt;
I have a few Video tutorials for building some simple apps. They also cover basic concepts like AutoLayout, TableViews, and PageView controllers, and more. https://www.youtube.com/user/webdevilsvideos/playlists
Very nice (: Thank you for letting me know. I am subscribed to the mailing list but I rarely read anything. 
[Watermarked PDF @ InformIT.com](http://www.informit.com/store/swift-programming-the-big-nerd-ranch-guide-9780134398013) - $25.59 Enjoy!
What about a nested for loop? If running time is not that much of a concern to you, or if the array isn't too large I don't see it being too much of an issue. Within the nested for loop just compare the strings within both index values of the for loops. If there is a match then you know you have found a duplicate. 
Could either use a set instead of an array, or .filter .count
The first thing a programmer should do, before starting any tutorials, is simply learn how to use the language that they're going to be writing programs in. This is best done in a textbook-like manner. Tutorials are best when you already know the language, and you need to learn how to put a framework (for example iOS) into practical use. I honestly cannot suggest that anybody immediately start building apps without first understanding Swift (or Objective-C), because they're just guaranteeing that they'll spend most of their time being utterly confused, and therefore not be using their time effectively or efficiently. I mean, half of programming is knowing what question you even need to ask in the first place. How do you expect somebody to search SO for a proper answer if they don't even know the jargon, or have the slightest idea what they're looking for? I guess the reason why I'm being so negative right now is because I constantly see programmers give "advice" like this. Oh, just pick a project and start making it! That's the answer to somebody who is coming in, with apparently zero experience at all. Sorry, but I don't think that kind of advice helps anybody.
name is maybe too straightforward.
Finally a swift lib that doesn't try to be "Swifty" or somehow morph its name with "Sw" ir "ift" \o/
Oh my bad - I forgot enums can only have computed properties, so you should change node to var node: SKSpriteNode { SKSpriteNode() }
Hey! Well... in a Swift world it is a framework but sure, in other languages it could definitely be a library. As @ElvishJerricco said, Foundation on Linux is coming... 
Introducing. Swip. 
&gt; I do not want there to be any related strings "related"? You mean identical?
I ran some [test cases](http://pastebin.com/2vcvgdQ3) on some UTF8 encoded text (43,000 characters) and the String.UnicodeScalarView's generator is indeed faster than using index-successor. If what you're looking to do is just iterate over the characters, using `for char in str.unicodeScalars` is the most performant (avg 0.0004). But, if you want to have manual control on the index you are on, using NSString's characterAtIndex is the best choice with times about as fast as UnicodeScalarView's generator (avg 0.001). E: I didn't test on an ascii only string, but the generator was still super fast.
TIL my job actually isn't so bad
Dude seriously rename this for easier lookups on search engines, SwiftyZip or something like that
What's wrong with swifty? actually that would very useful when you're looking it up on google without knowing that the lib exists 
[removed]
Yeah, I meant if this will work in other systems in the future then it does not need to follow Apple conventions of calling libraries "frameworks". 
How about: Top Apps that where version 1.0 has been released within the past 6 months and supports iOS 8 or higher.
The article is insightful, but it offers very little into the thought on why Apple is not using Swift in excess. The article offers the reader the thought that it may be too unstable or not mature enough for Apple to adopt. Likely, the case is that it is not worth it for Apple to rewrite their software in Swift. Why backtrack?
I've only been writing Swift for approx 6 weeks full time. There are some shortcomings/awkward spots in the type system, especially funny issues around protocols and lack of variance annotations. These have little obvious effect in client/calling code, but can make some normally straight forward stuff really awkward when creating library code. If I could control the entire Swift process (I was apple), I'd fix the gaps before heavily investing and wait for 3.0. 
What are variance annotations? I've never heard that phrase before. Also, would you mind providing specific examples of protocols and variance annotations that are wonky or however you described them?
For reference, it would be prudent to review the swift-evolution Github repo: * [Swift 3.0 goals](https://github.com/apple/swift-evolution#development-major-version--swift-30) -- 3.0 is scheduled for late 2016 and it will bring a wealth of ABI and language stability improvements, and significant documentation improvements * [Commonly rejected changes](https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md) -- significant whitespace, literal "and" vs `&amp;&amp;`, closure literals, and semicolon removal are not on the table and that doesn't seem to be changing anytime soon Swift is great and all but it will probably *not* reach critical mass until 2018.
Swift's lack of true existential types and higher kinded types has been a continuous source of pain for me. I just want to write the `Free` Monad! public enum Free&lt;GenericType: * -&gt; *, ReturnType&gt; { // higher kinded case Pure(ReturnType) // Existential type: InputType case Impure&lt;InputType&gt;(GenericType&lt;InputType&gt;, (InputType -&gt; Free&lt;GenericType, ReturnType&gt;)) }
This would be my crude way too. Cycle through contents of first array and compare it to content of second array. 
Needlessly re-writing software is one of the hallmarks of amateur software engineering.
 I've never thought about it but this could make a cool shirt 
yes you can
How does the addition of try/catch impact error handling?
ARC is very different from GC. ARC keeps a reference count for your objects and deallocate a it automatically when the count hits 0. There's more to it and I can link an article if you're not familiar. So, you probably have a memory leak somewhere. Could you post your code in a gist?
On the same topic, when should Stanford's iOS 9 course should come out?
In general, reference counting *should* be more memory efficient than GC (since it frees memory ASAP rather than waiting for the collector to do its thing). You either have a retain cycle somewhere (unlikely I think), an out of control/infinite loop (have you checked?) or something about your algorithm requires many more allocations in Swift than in Java (for example, arrays are structs and are passed by value in Swift). My guess would be your problem is the lat last one. Swift's Array struct tries to be efficient by using references behind the scenes and only making copies when you actually mutate the array. Look at your algorithm with this in mind and maybe the reason for your memory bloat will be obvious; avoid mutating arrays whenever possible and use [array slicing](http://natecook.com/blog/2014/09/slicing-for-speed/) to cheaply get smaller pieces of the original array. (Try google for more slicing info - there's not a lot out there right now unfortunately. I'm no expert on how it all works myself).
As /u/Nordeste mentioned, the only difference you should find are the changes from Swift 1.x to 2.x. The try/catch statements help clean up a lot of code that was boilerplate (while introducing some new boilerplate on its own). Two of the most common calls that use the do/try/catch statements are both regarding JSON: `NSJSONSerialization.JSONObjectWithData(options:)` and `NSJSONSerialization.dataWithJSONObject( options:)` You'll also find that most of the handling that took an `NSError**` as parameter now either `throw` or have changed their signatures to take blocks that have `NSError`s as parameters. Mostly all of the content you learn along the course is still valid, as iOS 9 has not introduced a lot of breaking changes to the mix. So yeah, go for it, just keep in mind that some things may require understanding there were changes.
Are you asking us to guess the reason without seeing any code? That's a bit hard. I have a similar method. Do we look anything alike? // https://github.com/melling/SwiftResources/blob/master/bin/gen_go_var.swift func readLines(filePath: String) -&gt; [String] { // var stream:NSStream = NSStream var allLines:[String] = [] if let fileManager = NSFileManager.defaultManager() as NSFileManager! { let fileExists = fileManager.fileExistsAtPath(filePath) if fileExists { let data:NSData? = fileManager.contentsAtPath(filePath) let aString = NSString(data: data!, encoding: NSUTF8StringEncoding) let str1:String = aString as! String allLines = str1.componentsSeparatedByString("\n") } else { print("file not found: \(filePath)") } } return allLines } 
Are these buttons defined in a nib (xib, storyboard, whatever)? If so, take a good hard look at the connections on your misbehaving button in the inspector, and I reckon you'll find it is either connected to the wrong action, or connected to multiple actions. I have had something similar more than once, by doing this: 1. make a button, connect it to action A 2. copy that button connect it to action B then whenever I press button2, it does BOTH actions A and B. Bloody annoying!
Same here, I've been learning for about 6 weeks (part time) but as I learn more about the WHY of Swift, I gain a better appreciation and understanding of what's going on. For example, I was getting a bit frustrated that there wasn't an easily accessible string.count function available in Swift...until I read the thread yesterday about how Swift tries to make computationally expensive functions less easy to call. Apparently the count function for strings in objective-C is relatively taxing, so Swift tries to make the user aware that hey you're about to do something that's gonna hurt my brain...
Without code we can only give broad advice. To add to what /u/also_HIM said, you can pass a struct instance by reference by marking the parameter as inout: func nameSwap(inout lines: Array[String]) { // lines.append(line) } // Call it like: // nameSwap(&amp;lines)
As an iOS dev, yes it is very helpful if not almost identical. There are only slight API changes between iOS versions, Apple mostly introduces new stuff each time (think Auto-Layout a few years back, storyboard references last year, and now UIStackView). Things introduced in iOS 9 will obviously not be shown in an iOS 8 tutorial, but it will explain the basics, which don't change. If you want to get updates, check out articles that tell you what's new in iOS 9. These explain the new stuff one can use.
GCD is a great API. You should maybe just read about it.
I'm not an active member of the "Swift" community, but I do like checking in once in a while and I absolutely love seeing some of the development efforts made using Swift. What are your thoughts on this library? Direct link to GitHub: https://github.com/collinhundley/Swift-AI
They started to in El Capitan. See : http://daringfireball.net/thetalkshow/139/federighi-gruber-transcript From the Link : "FEDERIGHI: We have all types here within Apple. They start out with the “I love Objective-C. I don’t want to change” to “OK, maybe there’s something to this Swift thing” to “Let me give it a try” to “I love it.” We’ve gone through all the phases internally. You know, we’ve had some really great adoption by teams like … the team that does the Dock and the window management on OS X, implemented all their new features for El Capitan in Swift and started mass-converting all of their code, and say that they couldn’t imagine going back and that they’re more productive with it. Part of what our internal teams need to deal with, though, is that they’re working on, let’s say, the current version of Swift 2.0 while it’s not done yet. I mean, while it’s not even WWDC-level done yet, right? And they’re working on the interfaces in terms of our internal frameworks that haven’t been modernized for Swift. And so, they’ve got it rough. They’ve got to really love it to make that leap because they’re working on a very, very bleeding-edge environment when we use it internally. Thankfully, with Swift 2.0 now well out the door, that’s stabilized things a good bit and they’re really open to it. But there’s been just lot of feedback. And a lot of it has helped with the impedance, making sure the impedance between Objective-C and Swift is absolutely minimized because of course we have and will continue to have and continue to write more Objective-C code, and so the ability of Swift and Objective-C code to work together completely naturally is a huge focus. A bunch of things like generic collection, support for lightweight generics in Objective-C, were big pain points internally and something we fixed in the language, and is now great for all of our app developers externally. So, it’s been a not dissimilar road for us internally to what you see outside. But in terms of Swift and writing big apps, it’s certainly the case that when Swift 1.0 came out — heck, we didn’t support incremental compilation in the very first update. And so that was going to be a limiting factor for productivity for people who had big apps. A lot of that stuff has changed. And then in 2.0 having a good error-handling model, having the availability check so you could span API versions — these sorts of things. I think it really addressed the vast majority of pain points that we were experiencing, that I think the community was experiencing about writing larger apps. And so much about Swift is actually inherently better for building big apps because it handles modules and namespaces in a way more naturally than in Objective-C. It makes the API contracts a little more clear, the code more obtainable. So, we’re very comfortable."
Can you please expand on the *what* instead of the *where*? Is ALL you say "Thanks to &lt;creator&gt; for &lt;library&gt;", or do you include anything about the license?
So Cocoapods sticks some metadata in my project? Does that mean I don't need to display anything to the user?
You need to let the reference count system do its job. func readLines(filePath: String) -&gt; [String] { autoreleasepool { . . . } return allLines } That way, all the transient crap that got built up from reading the file will be discarded, and you'll just have your array of strings. Judicious use of **autoreleasepool {** elsewhere in your code will also help.
Except for …obj-c and works fine, statement i have to agree with you. Swift will get integrated when it makes sense. Most likely when major app overhuals happen. As for Objective C working fine, the whole point of Swift is to address the problem areas with Objective-C's usage. Considering some of the bugs that show up in Apples software, I'm pretty sure that they will move many apps to Swift as soon as it is ready. Im just shocked to see (supposedly) professional programmers not grasp the issues for Apple. 
No one's going to mention the elephant(s) in the room for large-scale Swift deployment? **No resilience model. No stable ABI. No static libraries.** Without these things, deploying a large-scale app is unreasonably difficult to manage through a build process and leads to bloat in package sizes. Apple's only Swift apps are small and self-contained (calculators, the Dock) and they all need to bundle their own copies of the Swift standard library. These are all features for Swift 3: https://github.com/apple/swift-evolution and until that happens, Apple won't deploy anything more than small components in Swift.
Try a string like "GMT-04:00" or "America/New_York".
You often include the whole license itself. But let Cocoapods generate it for you and put it on Settings. It will grab all the pods and their licenses and put them there. https://github.com/CocoaPods/CocoaPods/wiki/Acknowledgements You can also search for Apple's attribution page in Settings to see how they do it. More often than not (always?), it's just the copyright and the license. EDIT: This is what Cocoapods generates: http://i.imgur.com/MNL2bkX.png Clicking on Acknowledgements takes you here: http://i.imgur.com/ad5SbOG.png
Good to know. :)
Since Swift 1.2 (I think, or was it earlier already?) you can use `case` for pattern matching in other control constructs than `switch` (e.g. in `if` or in loops). In essence, this construct makes sure the `AnalyticsCard` initialiser is only called for elements in `savedCards` which are actually `NSDictionary` (and first makes sure that `savedCards` is actually an `NSArray`. Since ObjC does not have generics / generic collections, you can never be sure whats inside of your ObjC collections so its better to check. (Now ObjC has lightweight collections). The outer `if case` is just the same as `if let savedCardsArray = savedCards as? NSArray`, I guess its a matter of taste if you prefer this over using `case` here. The case in the loop skips all elements in the Array that are not `NSDictionary` so you can be sure that `AnalyticsCard.from(savedCard)` is only executed for elements of `savedCards` that are actually an `NSDictionary`
thank you for effort and helping :) 
Well why don't you get Jason to help you? ;)... it's JSON, btw.
Thank You :)İ think İ have basic teoric information about autolayout . Next level, what İ have to do for success on it ? Really i want to be successful on it :(
Are you talking about autolayout constraints?
There's actually a pod, that creates a nice viewcontroller with all the acknowledgements... in that case you don't have to have it in the settings, but just in an about section of your app. [VTAcknowledgementsViewController pod](https://cocoapods.org/pods/VTAcknowledgementsViewController)
They want apps to perform well for users, so I'd say that's absolutely *not* asinine.
They are not supported in Swift and are perhaps not likely to be, judging from the reactions on the swift-evolution mailing list. Variance can only in a few situations be done type-safely, and mutable collections are not among them, so they will require a runtime check instead, which is not something they would like to add. Alternatively they can, as in C#, be restricted to the safe cases, which aren't that many (although it does include C#'s IEnumerable&lt;T&gt; and could include the similar Swift SequenceType).
Well, string.count is not a method that you should commonly need to call, because, for unicode strings as in Swift, it's not necessarilly well-defined what "count" is. That's why Swift strings have several different views on them, which you can query for count.
Correct me if I'm crazy. Swift struct based data structures (Array, Set, Dictionary) are all immutable with copy on write when used as a variable, at least until LLVM takes care of them with an optimization pass. This immutable copy-on-write default seems pretty friendly to well ... immutability and variance. I'd never ask for them in a form that required run time checks, nobody wants the "java array" situation. But the traditional methods of mutation are far from first nature in swift code, I find it's more about structs (and therefore copy-on-write) and functions than mutating classes. I run in to plenty of situations where variance annotations would reduce boiler plate + copying. I hope you're wrong that they won't be implemented for custom types, going down the path of "one rule for the stdlib, another for client code" is a weak proposition. Then again, if/switch still aren't expressions (and are on the rejected list), so stranger things are possible.
So the inner "for case let" is iterating over the array, but only for elements that are the right type. It's roughly equivalent to filtering the array and then iterating over the results.
Could you link me to an article on this? And just added to a link to the gist in the post.
Thanks for the tips! Also, would you mind checking out my code? Just added to a link to a gist in the post.
Is there a reason why you've made the methods instance methods instead of class or static methods? let unzipDirectory = try Zip.quickUnzipFile(filePath) looks a lot better than let unzipDirectory = try Zip().quickUnzipFile(filePath) in my opinion, especially when there's no configuration of the Zip instance, so there's no reason for them to be instance methods.
Why is the if statement not just if let savedCardsArray = savedCards as? NSArray
any specific channels?
Well I guess it depends there's a lot of tutorials of full life cycles for making certain apps. Like you can prolly type in "how to make a chat app" but otherwise Jared Davidson is pretty good. 
/u/Shaken_Earth, after looking at your gist I think David is correct here. You have loops within loops, and the default autorelease pool only gets released when you're done and let the runloop run again. ARC/the compiler do their best to optimize away use of autorelease pools wherever possible so it didn't even cross my mind, but given the memory bloat and the tight loops it's probably the culprit. Drop an autorelease pool around the inside contents of each loop and you'll probably see a big improvement. On an unrelated note, `advanceBy()` is expensive, and you're unnecessarily doing it over and over again each time through the loop to get the character from the string. Just use a for-in loop on your string.characters. You should also use a for-in loop on the outer loop to get each line from the array. Not only is the old c-style array ugly and unnecessary, Swift 3 will remove them entirely so you might as well get used to the 'new' way. 
Can you elaborate on this? Edit: Found [this](http://stackoverflow.com/questions/27002721/is-there-a-way-to-fetch-all-license-header-from-cocoapods) Basically, cocoapods generates a file called "Pods-acknowledgements.plist" that you can add to your Settings bundle like [so](http://i.imgur.com/DuYffx8.png): I quickly added this to my current project: [iOS Settings](http://i.imgur.com/5wBV0kO.png) [Disclosed](http://i.imgur.com/cwBTFbF.png) [Scrolled down](http://i.imgur.com/LXXgDty.png)
Yup! That's exactly what I was talking about.
You're right @waterskier2007. That's way nicer. Will change it.
Was thinking about just doing this since it seems like the easiest option even though I'm not too familiar with how to implement it. Thanks a bunch for the advice though!
I used bitfountain's course. I got it for $100 through one of those TNW "sales." They are constantly updating the material, and the instructors respond to every comment on the videos. I even was able to troubleshoot my own code (based on one of the example projects) with an instructor via Twitter private message. 
This is a terrific help for the cocoapods. AFAIK you still have to manually create attribution for manually included objects (like Icon8's set). 
The Plymouth University iOS course on iTunesU is a really solid choice (and its free). They are currently updating everything for Swift 2.0 so it can feel a little disjointed at times but that doesn't detract too much from it. After that course I would recommend the Stanford University iOS development course. It assumes prior object-oriented programming knowledge, which is why I would watch the other one first. And it does teach at a high level. But this is the kind of skill you want to be aiming for. There are links to both courses here https://developer.apple.com/news/?id=01272015a If you are looking for tutorials that go through various apps then check out Udemy, and in particular courses by Rob Percival, like this one https://www.udemy.com/the-complete-ios-9-developer-course/ The courses aren't really cheap, that one is $199, but they do have sales from time to time so if you keep an eye out you will probably be able to get it at a considerable discount if your willing to wait.
You could even use `NSCountedSet` if you cared how many times an element has been added to the set.
I agree with all of your comments. And to me square brackets are actually a very nice way to remind myself that I'm *sending a message*. I'm avoiding operator overloading in a big way in Swift. If I see a pod that implements operator overloading I simply don't use that pod. It could be that I just don't know enough to get over my mistrust of it, but I've not reached the point where I consider operator overloading a feature rather than cognitive noise. As to the examples in 4) Dynamic and unsafe type system, what professional developer casts objects of type `id`?
The advantage that the Stanford course has is that it also teaches somewhat more abstract programming principles in addition to everything else. If you watch the current Stanford course now you will be able to learn a lot and then by the time the updated course for iOS 9 is released you can go back, review, refresh your skills with the most recent Swift syntax and really be able to get a rock solid foundation of Swift and iOS knowledge to build off of.
A pattern like this may solve your problem: import Foundation import Cocoa protocol ViewControllerGenerator { func viewController() -&gt; NSViewController } class MyViewController : NSViewController { } struct MyViewControllerGenerator : ViewControllerGenerator { func viewController() -&gt; NSViewController { return MyViewController() } } class MyOtherViewController : NSViewController { } struct MyOtherViewControllerGenerator : ViewControllerGenerator { func viewController() -&gt; NSViewController { return MyOtherViewController() } } func test() { // Setup your modules var modules = [String: ViewControllerGenerator]() modules["One"] = MyViewControllerGenerator() modules["Two"] = MyOtherViewControllerGenerator() // Load view controller by module key guard let viewController = modules["One"]?.viewController() else { fatalError("Failed to create view controller") } // If you need to do specific things for a specific type you can cast if let myViewController = viewController as? MyViewController { // Do things with myViewController } else if let myOtherViewController = viewController as? MyOtherViewController { // Do things with myOtherViewController } }
I'm sorry, I'm just not able to get this right. Can you please tell me how you add the generated acknowledgments to your Settings bundle? Here's what I've done: the first time I ran cocoa install, I didn't have a Settings bundle in my app. Would cocoapods have automatically added the acknowledgments for me if I did? I have since added a Settings bundle, and I tried just Adding File to the Settings bundle, and it shows up in Xcode, but the acknowledgments aren't there when I install my app. I can't even get it done "the manual way" much less an automatic way :'(
Edit: all fixed, I changed the OP to provide a guide through the whole process. I hope it can help other beginners! Thank you.
&gt;I have no programming experience. What are the best resources for learning to program Swift and make iPhone Apps? This is like saying, **"I have no athletic experience. What are the best resources for learning basketball and playing on a high school team."** * If you don't know how to program in *any* language, you have to do that first. Learn to think like a computer. (data types, arrays, functions, conditional statements, databases, etc...) * Then learn to do all of the above with Swift...from a book (I suggest the Apple book). * Then learn about how to apply swift in the iOS world (frameworks) to make your idea come to life. What you are asking to do *is* possible. But, you have to compartmentalize your activities and take them one at a time. Because if you download XCode now and say, "OK...how do I start this thing?..." you are in for a world of hurt. Finding a mentor will help *a lot*.
&gt; youtube. it's honestly really easy. swift is super user friendly. The problem with youtube (and the web in general) is finding the *right* channel that covers the topics you need, at the pace you need, at the skill level you need.
Have you considered mailchimp?
You can do it! I'll try to provide some practical advice. The good news is Swift is quite easy as far as languages go, and Xcode (the integrated development environment ["IDE"]--AKA "the program you use to do your programming") does a lot of work for you. App development is unique in that a large amount of the process is the design; the iOS platform provides a lot of great building blocks for the developer, so your chief focus is figuring out the right way to put these together. Everyone else is saying "learn to program first" but like, that's a total catch-22. No reason you can't do that with Swift while making an app. That Stanford course referenced in other posts is excellent, but definitely NOT a starting point for new programmers. [This one](https://www.udemy.com/ios9-swift/learn/#/) is one that I bought to learn a few iOS concepts. This course has classes that introduce you to basic programming concepts en route to producing apps! Plus it's apparently down to $15 right now. Lastly, [this link](https://github.com/riosprogramming/FAQ) is a huge list of questions and some resources. It might not make sense to you until you get your feet wet, but some of this should come in handy later.
\#5 is no longer true in the two years since this was written. You can now use the following: NSArray&lt;A*&gt;* array = [foo array]; A* item = [array objectAtIndex:0];
I found [iOS 9 SDK Development](https://pragprog.com/book/adios3/ios-9-sdk-development) to be a good start for me.
Thanks! I plan on it. I feel like doing this would not only help others, but also help refine my own process and code. 
you can set up the chat aspect relatively [easily with firebase](https://www.firebase.com/blog/2014-12-17-building-moment-with-firebase.html). building a custom chat UI is the difficult part.
Try the tutorial of Codewithchris on youtube it's really helpful!!
Oh, so like notepad? 
uTrippin' 
Don't. The easiest way to do it is to use Apple's Message UI Framework, https://developer.apple.com/library/ios/documentation/MessageUI/Reference/MessageUI_Framework_Reference/index.html Basically, you create a view controller and you send it the data for the individual fields. Once activated, it brings up a sheet with all the details and the user just has to click send. There's two different view controllers, one for SMS and the other for e-mail. The advantage of using the e-mail view controller over other options for sending e-mail is that it knows about the user's e-mail accounts. You can find tutorials that cover all the details. They're easy enough to search for once you know what you're looking for.
Take a look at this tutorial: http://useyourloaf.com/blog/adding-3d-touch-quick-actions.html If you need to use the result of the touch action elsewhere simply extract the enum value into a singleton and call the action to render your scene if the singleton matches a particular enum value you're looking for. Let me know if you need a little more explanation!
Thanks! I'll take a look at it. I see...well..I guess I'll have to work really hard on it then.
Triply birds
Damn autocorrect - trippy birds.
I've recently implemented a chat system. It's relatively tricky but only took me a week or two for the client (minus group chat and attachments). I used [XMPPFramework](https://github.com/robbiehanson/XMPPFramework) and [JSQMessageViewController](https://github.com/jessesquires/JSQMessagesViewController) running against an ejabberd server. JSQ gives you the chat bubbles and has some really nice customisation. XMPPFramework is very terse and takes a bit to wrap your head around. The hard part for me was the design and structure. Took quiet a few iterations until I was happy with how all the parts worked together. &gt; like whatsapp or viber. Now thats a whole other kettle of fish. If you are looking at that kind of scale you will need a backend that can be clustered. eJabberd supports sharding in a fashion but the dev ops is real tricky stuff. 
Thanks! I'll look into it. I definitely don't want to re-do what's already there. I'm just trying to build something simple and smooth. 
As cryo said, count is hidden not because its slow, but because count can mean any number of things based on what you consider a string to be.
I just saw the XMPP framework; I see that's written in Obj-C. I was looking for something in Swift.
Start practicing in Xcode interface builder ;).
Group Pitch
Frip.
Is your xcode version maybe a beta?
I would guess just because of personal preference of the author of that code... I personally would also prefer the (imo simpler) `if let savedCardsArray = savedCards as? NSArray`
Tripster
That depends on how good you are at Swift. The Swift book focuses solely on the Swift language, while the iOS programming book will teach you about working with the iOS SDK (which is definitely the hardest part of iOS programming).
 I got the same problem. Had El Capitan beta last year. Updated to normal version. Got back into beta sometime in December - don;t remember doing it :| 10x Apple 
Hey There, Thanks for detailed explanation. But we are not able to achieve this. Here is the chunk of code. Can you please help us out with this example that how we can achieve this. class BaseUserModel: JsonModel { dynamic var Categories:[CategoryModel]? dynamic var User:UserModel? } class CategoryModel: JsonModel { dynamic var categoryName: String? dynamic var subcategories:[SubCategory]? } class SubCategory: JsonModel { dynamic var documentInfo:[DocumentModel]? } Here is the scenario. Where model have an array of other model and that model also contains array of other model. This is the chain. Will really appreciate your response. Thanks 
That's cool. When I think whatsapp as being smooth I think handling the volume gracefully.
What's your level ? Are you comfortable with Interface Builder, segues, table views and data persistence ? If not, Apple made a tutorial : https://developer.apple.com/library/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/
I would get both.
Apple's own "Getting started" tutorial. https://developer.apple.com/library/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/
The problem I'm having with that is that it is using the selectTabBarItemForIdentifier when I'm not using a tab bar to control my scenes. Any time I try and use it to open a specific scene in my view controller its crashing and telling me that I can't cast a UIView to an SKView. 
Have exactly the same issue. I've never been using OS X / iOS / XCode betas.
Ah, thanks. I thought they wouldn't be compatible and would cause problems.
Keep in mind that it is not the only Swift web framework out there. Alternatives are: * [Tailor](https://tailorframe.work/) * [Taylor](https://github.com/izqui/Taylor) * [Swifter](https://github.com/glock45/swifter) * [Swift-Server](https://github.com/cezarywojcik/Swift-Server) * [Epoch + Router + Middleware](https://github.com/Zewo/Epoch) * [SwiftHTTPServer](https://github.com/paulofaria/SwiftHTTPServer) * [Kunugi](https://github.com/novi/Kunugi) * [Trevi](https://github.com/Yoseob/Trevi)
JetBrains has recently announced [Swift plugin for CLion](http://blog.jetbrains.com/clion/2015/12/swift-plugin-for-clion/).
TripTrack - The Best Group Trip Expense Tracker
I think [Tailor](http://tailorframe.work) or [Zewo](https://github.com/Zewo) are more promising.
parse is no realtime, and could be quite expensive (check their pricing and limits). firebase seems to be better suited to your needs (i have no any experience with firebase, but it has realtime at least).
Yes, of course. You can even watch the whole [Stanford Course on YouTube](https://www.youtube.com/playlist?list=PLxwBNxx9j4PW4sY-wwBwQos3G6Kn3x6xP), no need for iTunes U.
Yeah, I do think that Swift is pretty easy, but my opinion on 'how easy Swift is' doesn't hold much weight because I know assembly and C already. What I mean is that if he wants to learn Swift using Apple's book on it, he would aid in knowing a pretty simple, well-documented and classic language before hand.
I got a second monitor and a HDMI -&gt; VGA adaptor and it's definitely helpful when looking at multiple views or when referencing another project or a google search/tutorial. I'm thinking about getting another so I can have 3 screens but I'm worried about performance
I bought both. Because one book will teach you this: func sayHello(personName: String) -&gt; String { let greeting = "Hello, " + personName + "!" return greeting } And the other this: override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { let cellIdentifier = "Cell" let cell = tableView.dequeueReusableCellWithIdentifier(cellIdentifier, forIndexPath: indexPath) as! myCustomTableViewCell return cell } 
I don't know why I laughed out loud at this, but I did. 
Have the same issue, here's a forum topic about it: https://forums.developer.apple.com/thread/31066
I should've asked wether you had a rMBP, I just assumed.. sorry :s
I use my 27" iMac (sadly not a 5K one) and a smaller 1920x1080 display on my rMBP (1st gen) and it runs smoothly. I don't think It can run anything more though. I really hope Apple will present us some new rMBPs in March. :)
http://www.ebay.com/sch/i.html?_from=R40&amp;_trksid=p2050601.m570.l1313.TR12.TRC2.A0.H0.Xcrossover+monitor.TRS0&amp;_nkw=crossover+monitor&amp;_sacat=0 http://www.amazon.com/Apple-MB571Z-DisplayPort-Dual-Link-Adapter/dp/B001IF252C $400 thunderbolt display (Crossovers and Shimians are rebranded Thunderbolt panels) You lose a few things, like a lightning port on the monitor, and the adapter means you lose a USB slot on the laptop, but it costs 1/3 the price of a Thunderbolt display after you factor in tax. I own a Crossover, a Shimian, and whatever Microcenter's rebrand is called. There's matte and glossy, I prefer glossy.
Sick burn, bro. 
I've been considering getting one of those LG ultra wide displays just to have more visible in Xcode. 
I know enough swift to write normal programs. The hard part for me is storyboard and whatnot
You're coding on a notebook computer with a GUI. This is a luxury. Back in the day, they programmed on monstrous computers with a punch card.
Unfortunately you're hosed. The best you can do is disable all of the extraneous panels that aren't required for your current context. I'd also recommend learning keyboard shortcuts (my most used shortcut being CMD + SHIFT + O to quickly switch to a file) Xcode is a TERRIBLE IDE. It's certainly come a LONG way, but it's still bad. The root cause of the issue, IMO, is how it uses tabs. Each tab is in effect it's own editor. Each has it's own settings. This is counter to every other IDE out there and causes too much context switching for my liking.... I may actually write a longer post about this haha Long story short: you gotta learn to live with it
probably the best answer
Just joking around :( . 
Ah I see, thank you for clarifying.
huh?
It's still not solved yet.
Every single software that i use does not have beta software
Good job! I think for a lot of people just starting out doing programming and development understanding why people do it in the first place and what their thought process is before they even open Xcode is pretty valuable. And you are right that by being forced to talk about your own work it is a huge help to really understanding and refining it.
&gt; Swift plugin for CLion Oh, snap! That's almost exactly what I had in mind, except there is no community version of CLion.
resolutiontab is your friend. Very easily modify your screen resolution on your laptop display to non-listed choices. https://itunes.apple.com/us/app/resolutiontab/id540141595?mt=12
This is what's called a "variadic parameter." It means that the function can take more than one value of that type. The function's block will have access to an array-like structure (I can't remember if it's an actual array or not), which can be iterated on and used to perform some work on all of the members in it. So in the example you posted, that function can take a variable number of Ints, passed into the `numbers` parameter. Inside the function, we iterate through `numbers` and add them all up, and then return the result. EDIT: It turns out that the parameter *is* actually an array of the type declared in the parameter list. Also, worth noting is that you can only have one variadic parameter per function, and it has to be the last parameter in the list.
The dots mean that there could be more than just one. So multiple. :) Instead of writing func n(i: Int, i2: Int) that only take two. And then have to create a new function to maybe handle 4 or 100. 
Thank you I think I got it now! :)
Your explanation was short but did the job. Thanks man. Helps alot.
Thank you I think I got it now! :)
Hi, I'm a new-ish iOS developer. Your learning process is basically twofold: * Learn to read and write Swift code ([Apple made a nice book for this](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/)) * Learn the structure and conventions of Apple's frameworks (UIKit and others) The latter was the most difficult part for me. And for both of these, you need to be strong at object-oriented programming. To use the iOS frameworks effectively, you need to understand polymorphism and some design patterns such as [delegation](https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html). If you're already doing proper OOP in PHP, for instance with Symfony or Laravel, you are going the right way. :) Other than that, start out with making small apps, each with a single focus. And ask away if you have more questions.
1) This is totally natural. It takes a bit of time to get used to the workflow of making iOS apps, because it's a process that's unique to Apple's tools, how they set up their frameworks, etc. 2) The delegation pattern is huge in the iOS frameworks. It can be kind of weird trying to get the hang of it at first, but once you do, you'll be a good part of the way to being able to proactively teach yourself things via the documentation, etc. 3) You'll begin to grasp this naturally over time, but try to contextualize an app in terms of how it "flows" from beginning to end. Your AppDelegate is at the very top. It's how the app "gets into" the initial view controller (the screen pointed to by the starting arrow in the storyboard). Once you begin to understand an app as a sort of hierarchy of screens, I think things really start to congeal and become clearer. 4) I think the best way to get over the feeling of not knowing where to start is to start with UI. Go into your storyboard and set up the app the way you want it. You don't have to make a flashy design yet. But just set up your buttons, add any new screens you'll need, and think of how you'll be connecting them. Once you've got your UI, you basically know what you want your app to be, and it acts as a sort of scaffolding to indicate what you've already done, and what still needs to be implemented. Oh, I need to hook this button up. I need to make this tableview load some data into its rows. That kind of thing.
Did you try the hands-on or theoretical approach?
Well first write down what you want your app to do. Then branch it out like [this](http://www.gigaflop.co.uk/comp/fig3_2_3-1.gif) and break it down to how you would implement that first statement. Keep going until you get to the simplest tasks. Those bottom ones will be the ones you target first. If you need more specific advice, feel free to ask! 
It doesn't matter! You can move stuff around after; and then you can move it again later! And you can move other stuff around after that. Start in the middle! If you can't make progress on what you _think_ you should be doing, and you have honestly put good effort into it, then move onto something else and come back to this other thing later. What comes last is easy: that's the part where the happy customer pays you for your fabulous app and you go buy yourself something nice and put the rest of the enormous cheque in a retirement fund. I know it sounds like I'm being flip and (trying to be) funny, but I'm completely serious. When running the app or looking at the code for the app, no one can tell which lines or functions or classes you wrote first. Poets don't write poems from first line right through to last. Comedians _frequently_ think of the punch line first and then back fill to set up situation where that punch line has the greatest effect. But the one thing I would suggest you absolutely always do is THINK first, code later.
Start with Playground, constants in structs, and then... method swizzling. Well, that escalated quickly
&gt;and it has to be the last parameter in the list. Not anymore (see `print`). 
I think [dar512](https://www.reddit.com/user/dar512) means an external monitor.
I'd just recommend reading the Apple book. It's free, full of information and examples/practice ideas, and just plain amazing.
Do it, will not regret. I use my Mac to study at university remotely, so my entire degree is through my laptop essentially. I just bought the lg 34uc97 ultrawide. Cannot be happier with it. I can have so many windows open at once, my productivity has gone up tenfold. Using Xcode and having safari open is so comfortable now, no cramping at all.
Yeah...then iOS work will be simple in comparison. 
Well, first just sit down and think of what kind of app you want to make. Think of what you want it to do. Then sketch out an interface for it (you can use regular old paper for this). What's going to be on your starting screen? What controls and other views will you need (buttons, sliders, labels, text fields, etc)? Do you want there to be more than one screen? How will you get to the other screen (is it in a UINavigation stack? will you just use a regular button to segue over?)? Then go into Interface Builder and recreate your drawing. Once your interface is set up, it confirms that you know what you want your app to do, and becomes an excellent way to generate a list of tasks that you must complete in order to make the app work. Honestly, I think it helps to find a good set of tutorials to show you how this is done. To that end, I would highly recommend the "iOS Apprentice" books from RayWenderlich.com. You get 4 long-form tutorials, each of which takes you through the creation of a legit app (i.e. not just ones where you press a button and it tells you your dog's birthday, or whatever). I'd recommend the PDF version, because they will keep updating them as new versions of Xcode are released. The best thing about the RayWenderlich stuff is that they make a point of taking you through a more-or-less "natural" development cycle. They don't just say, "Here, type in our perfect code, and there's your app!" From chapter to chapter, they're taking you through a process of incrementally improving the code so you can get a sense of how real software development works.
Thank you very much! I'll be checking that out!
Learn all the shortcuts to toggle stuff on/off. In display settings choose a higher simulated resolution for more screen real estate. 
Yes, check UITextView delegate protocol
Thanks for the feedback, we'll add an explanation about the dangers of swizzling!
I can't honestly remember if you can split the editors to separate windows but you could have 3 spaces eg one code editor one xib/ storyboard etc
May I ask why? I can see a bright future for Swift as it is gaining more and more popularity. 
Just an FYI, you have a typo in your screenshot. "Eanble Range" should be "Enable Range". Other than that, the component looks good.
I don't think having `None` as a case in your JSON enum is a good idea. It seems like you're generally using that to represent some kind of failure - either a parsing error, or an inability to convert to a specific type. An `Optional` wrapped *around* your enum would probably be a better fit there. The `Generator` code you have is interesting - I like the way you get access to looping over any `JSON` enum, without having to do cumbersome conversion, etc. However, the way it's implemented is ugly. (and a little inefficient) I'd probably just leave the `array` and `object` optional properties, and let users loop through JSON like this: guard let jsonArray = someJSON.array else { ... } for item in jsonArray { ... Alternatively, you could add a method like `asArray()` which throws, which might give you better-looking looping: for item in try someJSON.asArray() { ... } catch { ... Finally, in terms of efficiency, you'll want to avoid `advance`ing on `String` indices. Code like this: if string[cursor] == "n" &amp;&amp; string[cursor.advancedBy(1)] == "u" &amp;&amp; string[cursor.advancedBy(2)] == "l" &amp;&amp; string[cursor.advancedBy(3)] == "l" { return (nil, cursor.advancedBy(4)) } Is going to perform the same `advance` operation several times, unnecessarily. Generally, you should try and stick to `successor()`. You could, for instance, do this: var i = cursor guard string[i] == "n" else { handle error } i = i.successor() guard string[i] == "u" else { handle error } i = i.successor() guard string[i] == "l" else { handle error } i = i.successor() guard string[i] == "l" else { handle error } return (nil, i.successor()) Which, granted, is a little ugly. This way might be nicer: var g = (cursor..&lt;string.endIndex).generate() guard g.next().map({string[$0]}) == "n" else { handle error } guard g.next().map({string[$0]}) == "u" else { handle error } guard g.next().map({string[$0]}) == "l" else { handle error } guard g.next().map({string[$0]}) == "l" else { handle error } guard let i = g.next() else { handle error } return (nil, i) The crucial point, however, is just to avoid `advancedBy()`.
If you have an iPad, there is a app called Duet, which makes you iPad to a second screen. You can use the cover the iPad to make it stand vertically. I usually open Safari on the iPad then, or another project if I need to copy code or look something up. It's a cheap version for a second screen and works really well 
[removed]
 NSJSONSerialization doesn't work on Linux, its part of Foundation. The Open Swift protect is rewriting a pure Swift Foundation, but its not due to Swift 3.0.
Ah! You should mention that. I was thinking that this is just another JSON parsing shortcut.
First of all if you want to check your flow add some print statements...add something like print("Else kicked in !") If you want to track whats going on...pretty basic. Second - you are doing 'if collisionDetection() , but your collisionDetection() is statically ALWAYS returning true... you need to be returning a BOOL variable not TRUE or FALSE if you want your function to actually have different results.
Umm I really don't understand how method swizzling could make you a better Swift developer, it's so out-of-place!
very cool! nice clear explanation, cheers!
I agree with this. While I was learning Swift and iOS development I forced myself to not watch videos for the sake of not letting myself copy and paste. The Apple book was very thorough and amazing.
Thank you for taking the time to read it.
Do you know if it will be a part of the language? I read somewhere that they're redoing all of Foundation in pure Swift eventually.
What do you mean exactly when you say "I added the necessary push certification"?
Did you ever get this solved? Ive been facing a very similar problem for past couple of days.
Exactly what I was looking for! Thanks, I'm going to start on that book this weekend.
I tried to experiment it but hit a roadblock couple of times. First of all it is not so easy to use C libraries. If library has Union swift doesn't support it. Most server side code will use NSUrlSession which is also no supported yet. Therefore you should use curl or something similar. Also because GCD is not open sourced yet, you have to use other libraries such as libuv. For IDE fortunately we have a CLion by Jetbrains. After couple of tweaks it worked for me. I guess we won't get solid Linux support till Swift 3. 
[Isn't GCD open source?](https://github.com/apple/swift-corelibs-libdispatch). I'm not sure if it works on Linux yet though. Also, NSUrlSession is **not** how you build a server. That's how you make a request to a server. Same with curl.
[Perfect](http://perfect.org) and [Zewo](https://github.com/Zewo) are both worth looking at. No experience with them so far, as I'm waiting for GCD to be officially functional on Linux. But it looks like it's shaping up quite nicely.
Hey everyone - I just finished the book last night and I'd love to hear what you think or any questions you have!
Oh, yeah, this is a great idea to get you started :D
It always sounds nice to make magical glue that connects everything, but when the shit hits the fan and you've got to debug this code, it's gonna suck. Not to mention how abstraction like this makes it less obvious to the next developer how the code works unless you add a link to this article :) A very simple change that helps the code to explain itself more would be to declare the Article struct without using any protocols, then in an extension to Article, make it conform to SpotlightIndexable (making for a clear demonstration). Simple to make, simple to explain (or self-explanatory rather). Here's an example: https://gist.github.com/scottdelly/534a6ecb31acec6c7715
You can use `NSAttributedString` with URLs and image attachment for the button or just custom styling to highlight, put it in a UITextView and implement the `shouldInteractWithURL:` delegate method.
You can add a UITapGestureRecognizer to the specific part of the string. 1. let tap = UITapGestureRecognizer(target: self, action: "methodName") 2. self.label.addGestureRecognizer(tap)
I looked at the link that you provided and it unfortunately doesn't meet the requirements of a reusable protocol. Should I wish to have some other struct/enum/class become SpotlightIndexable, I'd have to have an extension on that object and re-write the whole code for SpotlightIndexable. One part of the idea behind protocol oriented programming is protocol composition which is explained here: https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html By separating requirements into separate protocols, you could construct conditionals that require a type to conform to a single or multiple protocols. For instance, I could have a function that expects *some* object that conforms to two protocols: func downloadTitledImage(item: protocol&lt;WithTitle, WithUrl&gt;) -&gt; Bool{ print(item.url) print(item.title) } Without declaring Article as conforming to those protocols, it cannot be passed to a function like this. To take advantage of protocol oriented programming, you have to think about protocol composition and without conforming Article to separate protocols like I've done, you won't be able to do that.
No man you are missing the point by writing that extension's code specifically for the Article struct. The original blog said that the whole point was to reuse this Spotlight protocol 
Int and Bool are completely unrelated types. One of the fundamental ideas of Swift is that the language doesn't make exceptions in type system (with some _very_ rare cases such as optionals). This is the same thing as allowing casts from Float to Double. If you want to achieve this sort of behavior, you can use NSNumber which encapsulates booleans, integers, floats, etc. I would also note that force casting is actually just a downcast (Any as! Int). While normal casting is actually just an upcast (Int as Any).
I miss ruby's [pathname](http://ruby-doc.org/stdlib-2.1.0/libdoc/pathname/rdoc/Pathname.html) class for swift. 
I was sitting and looking for projects using Swift for other than iOS (e.g. Android and Windows) and I stumbled upon the article linked, just had to share (for giggles)
 @objc public protocol AnyObject { } AnyObject by default excludes structs, enums unless the type is @objc. I don't personally like that because I try to avoid Objc types and classes as much as possible and stick to immutable structs. But if the solution works for you, then great.
A year and a half later and it looks like Gabe is definitely wrong. The thing I found weird is that its his only huffpost blog post. I wanted to see more from this author to see his track record and got nothing.
&gt; The best hope for cross-platform mobile development continues to rest with HTML5, CSS and JavaScript. These technologies are widely used, widely understood, widely supported and (perhaps most importantly) their fate is not controlled by a single company. The only problem is that most users don't want web apps, they want a native app made for their phone
Thanks for the tutorial thus far, but i'm up to part and getting the error "cannot invoke "XCTAssertEqual" with an argument list of type '(Move,Move)" . Have I done something wrong?
Awesome Swift Education https://github.com/hsavit1/Awesome-Swift-Education
@jtbrown do you talk about applicatives and monoids by any chance in this book? 
Not at all. It's designed for people who are relatively new to Swift or at least new to parsing JSON in Swift, so there aren't any advanced concepts like those.
I have no imperative need to do web development, and I find GCD to be a very pleasant API. I don't mind waiting for the API of my choice.
I've been through the same issue but with a different solution where you don't need to use an intermediate type as "WeakClosure". The only downside of my solution is that the receiver closure signature needs to have a return type set to Void, or to an Optional. You can find the whole code + sample code on this gist : https://gist.github.com/JegnuX/ee45eee0237733eb83b0
that adds it to the entire label? i want to add it to a specific string i the label 
according to the tag line the author is a marketer for Telerik (a cross platform dev solution) which explains both the lack of other articles and his conclusions 
Looks good. But I would personally ditch the black theme for something lighter. 
Weren't you the author of the AEditor for Ruby?
Open terminal. CD to your directory where the app was. `git stash pop` Edit: actually you can probably just change back to master via the drop down in the GitHub desktop app and your files will be there.
FriendzPay, TripBuddy or (BuddyPay) **KeepTrip** TripEase SettleUpEasy TripOn (Keep the Trip on) :) ShareTrip ShareEx WalletPool **PayTrip**
Thank you for mentioning Hacking with Swift! I'm working on project 38 right now, but it's covering a tricky topic so I'm trying to refactor the code a few times to make it as simple as possible to follow. What I like about your list is that it is actually editorialised: you've explained *why* a resource is interesting, rather than just dozens of bullet points. Good job!
git reflog shows all the nodes you've been in. If you committed those files somewhere, you can git checkout &lt;sha&gt; to get back to that point. 
Unfortunately, it looks like Venice's "coroutines" don't play well with threads (and therefore GCD) due to libmill's (what Venice is built around) black magic with the call stack. There's _probably_ a way to make it work but we haven't dived into it. Also, I'm not really qualified to answer this question and what I told you is basically what /u/paulofaria told me :) Edit: We tested it some more and it turns out that Venice _does_ work on iOS (yay!), though with the limitation that all your stuff should be on the same queue for safety. This means that your code will probably look like this: veniceQueue { let channel = Channel&lt;Int&gt;() co { // things channel.send(1) } let value = channel.receive()! mainQueue { // do something with value } } or, with more abstractions (for specific use cases) venice { done in // venice-stuff here done(res) { res in // on main queue // stuff } } So it's probably too clumsy to use inline for basic operations, but you can easily use it as an entry point into a lot of Venice-only code where you can take full advantage of CSP!
The problem is that those files weren't committed because they disappeared before I could
Consider the source: &gt;Gabe Sumner is a Product Marketing Manager at Telerik. In this role, he helps developers successfully deliver mobile apps using the Telerik Platform, a universal mobile application development platform. http://www.huffingtonpost.com/gabe-sumner/ **He's shilling for his company. Nothing more.** This is like Comcast writing an article titled, "Why Most TV Viewers Should Avoid Netflix". EDIT: grammar
There must be something you've missed. Git doesn't do that on its own.
Internet is full of sources about practicing Swift, you just need to google it. The best way to learn a new programming language is practicing, so even if you don't find a good source on the internet you can make by yourself some exercises. Make a quiz with if statement or make a clock with for statement and so on. Practice makes perfect
Very true! And you should use playgrounds. Very very good for practicing.
Yes, a really long time ago :-)
Checkout www.exercism.io 
an enumeration is essentially a data type which has a limited set of possible values. this is different to something like an Int or String which can have a large number of possible values as an example say your app allows users to draw shapes, and you only handle squares, circles and triangles. you could define a class for each, or map an int or string value to each (but you'd have to remember and make sure it was consistent). With an enum you could have something like enum Shape { case Square case Triangle case Circle } this gives you a lot of benefits like type checking (assigning .Hexagon by mistake will be a compiler error), improved readability (e.g. .Circle instead of "circle_type") Swift enums are particularly useful. See http://appventure.me/2015/10/17/advanced-practical-enum-examples/ for a _lot_ of possible uses 
An enum is a type. With this example: enum Direction { case Up case Down case Left case Right } you can then create a variable of type Direction: let currentDirection: Direction = Direction.Up (the two 'Direction' there are redundant, you only need one, but I wrote it for clarity) You probably already knew that stuff. What you're probably confused about is what they're used for. Switch statements are where enums become very useful. switch currentDirection { case .Up: moveUp() case .Down: moveDown() case .Left: moveLeft() case .Right: moveRight() } This is basically saying, "depending on which 'Direction' this variable is, do something unique." Could you do the same thing if currentDirection was a String and compare it to "Up" "Down" "Left" or "Right" every time? Yes, but it's messy and allows for a lot of human error to cause bugs or crashes. Note that with Swift, enums are a LOT more flexible and can do all sorts of crazy things, this is just the basics. 
Thanks. I understand what you're saying but it's kind of hard to create a quiz for yourself if you're having a hard time wrapping your head around the condition. 
Sorry bud. Two things I might suggest is commit as you go always. I usually try to commit as soon as some new thing works. You can always rebase later so you have a clean history on master. Also, I would say learn the command line first so you know what the GUI is doing under the covers. This helped me a lot: http://pcottle.github.io/learnGitBranching/ 
Thanks I'll look into it time to redo a bunch of stuff heh
This is one of my first open source projects using the swift programming language. Feel free to make contributions. I plan on polishing this build a lot. The project is currently at it's early stages. 
Awesome, thanks. I bookmarked it! 
Luckily the Udemy one was on sale so I don't feel too terrible. I also bought it because it has a lot of examples of building app examples. I went in with the intention of knowing that most things probably wont be explained. 
Which Stanford course? The one I currently have is CS193P Developing iOS 8 Apps with Swift. If that's the case it was recommended to me by a friend who really liked it. However he has a CS background and I felt like it was too advanced for me. I could follow along but again I would like to know what half the things I'm doing are and why. 
The standard library has a [Range](https://developer.apple.com/library/ios//documentation/Swift/Reference/Swift_Range_Structure/index.html) datatype. func takesRange(x: Range&lt;Int&gt;) { // do stuff } takesRange(20...30)
The answer is no, it's not supported (in the sense that the vendor, Apple, doesn't release binaries for it or provide instructions on how to make it run). Here are some third party resources on trying to install it: * http://www.swiftprogrammer.info/swift_centos_1.html#summary * https://github.com/thawkins/fedora-swift * https://stackoverflow.com/questions/34073701/install-swift-language-on-centos-red-hat I would Swift on RedHat/Fedora/CentOS as having a "tinkerer" level of functionality right now. Painful to set up, many parts not working.
My bad. https://www.bitfountain.io https://www.hackingwithswift.com . I am almost all the way through the treehouse swift course and them am going to hammer the bit fountain one. Then the hacking swift. I am pretty sure after those three I will be in a good enough place to start pushing out my own first apps. Sick dude lets stay in touch. Im @andrewgierke on twitter. 
I posted the question on StackOverflow, but if anyone here could check it out I'd appreciate it. :]
No #RGBA and #RRGGBBAA support?
I think "a string" is pretty clear, isn't it? Given a string, compute all possible permutations of its characters.
Is toRadians an extension on Double or is it a protocol method that can be applied to more than one type? From what I've heard, type inference can have a significant impact on compile time.
toRadians is an extension on Double. Will that impact performance? I noticed that if I explicitly specify a type on all the variables, I reduce the compile time by about 400 ms. Still nothing too significant.
It seems appropriate to have this as a static method. I doubt that is the issue. There is an alternative way to call the method by passing in two CLLocation objects. This in turn calls the method that takes 4 doubles. I doubt that is the issue, though. In the compiler output, it indicates that the method has a signature of (Double, Double, Double, Double) -&gt; Double. 
If you're just trying to make an app, it'll be a lot easier if you don't try to teach yourself server side coding at the same. I'd recommend using a backend-as-a-service like [Parse](http://parse.com/) or [Firebase](https://www.firebase.com/) until you are comfortable with swift and app development. Unfortunately I am not a PHP dev, so I can't really give you any recommendations if you are dead set on doing the whole thing yourself. I'd suggest looking up your issue on stackoverflow. Don't expect to find a guide on how to do the whole thing at once. Break your problem down. You're really trying to solve 3 things here: 1. Save user data in a secure manner 2. Expose a public API from your server that allows users to register/login 3. Connect a swift app to a public API (the one you're making) It'll be a lot easier if you get these things working independently then tie them together.
I feel like extending String is a bit broad, I personally overload UIColor to take a value like 0x333333 directly (not a string)
I think it depends, mostly on where that extension is declared. If it's declared alongside your model object, then yeah, I think it breaks MVC. If it's declared alongside your table view's data source as it is in your example, then it probably doesn't. I personally don't like that architecture, partially because of the same reason you're asking this question to start with - it makes the divisions between your layers a bit less clear. OTOH, I've always had trouble with the fact that something called a "data source" is responsible for configuring views, and this pattern does nicely avoid that. 
It seems unfortunate that they spent so much effort allowing for a wide variety of strings and formats. It seems like this would be a confusing implementation and hard to document. Furthermore it would be annoying having to deal with an optional every time you set a color, or if you had a few global colors you wouldn't need this level of convenience. 
There is a lot to unpack here. One thing that I have grown fond of are completion handlers. For instance: func asyncCall(param:Type, completionHandler:(success:Bool, returnValue:Type?) -&gt; void) { ... } Inside of the function when the API call completes if it is successful you call the completionHandler and pass a true for success and a valid returnValue. Otherwise you can pass the opposite. Now I am not 100% following your business logic, but then you could easily have both of the completion handlers update the array, and you could even utilize a didSet on the array to refresh the tableview. Hopefully this helps, I know it isn't a full solution. 
I wanted to avoid the big chain if statements inside the cellForRowAtIndexPath of tableview data source. I also didn't like the fact that I had to 'configure' views inside view controller, but in the ended up configuring views inside view controller file... MyModel class really does not have `func tableView(tableView: UITableView, cellRepresentationAtIndexPath indexPath: NSIndexPath)` except inside MyViewController.swift file because the extension is private. I will be breaking MVC if the extension was public for sure, but since it is private, I wasn't so sure if it is still considered breaking MVC since the function is within the view controller file... I'm wondering whether the private extension should be considered as a Model or a Controller.
I suggest you don't go that route :) Keep your models as models and bite the bullet of having to write slightly more boilerplate code in your viewcontrollers. In the end you will be glad you did.
I have an app that does this sort of thing a lot - pulling disparate sources into one - and I use an NSOperationQueue with all the data loads as operations and a single capstone 'completion operation' at the end which depends on all previous operations and kicks off the view update.
The tableview data source is an adaptor to adapt your data, often an array of model objects, into it's data, which is exactly a collection of views. The real confusion is that people often combine these, and actually have their datasource fetching routines within the tableview data source, where they clearly do not belong. 
In my opinion, yeah it does. The poster claims it does not break MVC, claiming it is a Decorator. But it is not a Decorator. Then it goes on to show how iOS does similar things with categories, but iOS is not necessarily well designed in this case, and categories in this fashion are mostly just conveniences that make syntax easier. If you look at that link, I actually think the second approach given by another answer is better. What exactly is the benefit to having this information in the Model? Yes, it is not technically "in" the Model source files, since it is an extension, but conceptually, it is in the name space. Why would this stuff conceptually be in the Model? This is just sticking some code into the Model. What do you gain here? It doesn't need any information from the model. The author claims the advantage is that now anyone who needs a cell for a phone number can ask the Model for it, but what if it wants a different kind of cell for a phone number? Why not simply move it into another class and ask that class? What you really want here is a Factory. Anytime you have a code smell where you think code "doesn't belong" in a class, you can ALWAYS simply move it into a new class. There it can sit isolated until you figure out where it REALLY should go. And generally you'll find that it belongs right where you put it, in a new class. Forget about "breaking MVC". I find people run into problems because they've been taught MVC, but not properly motivated for why to use it. Your motivation might be to have code that is hits one or all of these: well designed, reusable, maintainable, modular, testable. MVC is just a common pattern that people have stumbled upon that helps hit those goals. When I have some code and I'm not sure where it belongs, I find it often useful to ask "what if someone else wants to use this code?" Or more specifically, "what if I had a completely different tableview that might want to create these cells" If you ask that question, you'll see that your code, since it lives in your view controller, is not usable by this other theoretical tableview. However, it is not always necessary to break code out for "theoretical" things. If you're going to have this code in the same file, I really don't understand why it isn't just in another function into which you pass "myObject". I'm not sure what the benefit of it being an extension?
Dispatch groups can help out here as well. Otherwise if you go with the NSOperation option, you can set dependencies between the operations to help out with the async nature of the problem. 
Aha ok my bad, I didn't know the extension was private. In that case I'm now wondering about the answer myself :) For the future: I've made a few projects with MVVM instead of MVC and I highly recommend it. There are a few interesting articles about MVVM in iOS. 
Thanks, sounds like a simple way around it. This is the route I'll probably take
Could you instead use a date field, and store the current time at activation of the feature. When you want to check whether it's enabled, simply check if the activation time is within an hour of now? If local time is too unreliable, you could grab the Parse server time at time of activation, as well as checking time if it's not too prohibitive towards your Parse quota.
Awesome. Thanks for detailed info. Really amazed that it was useful.
This is pretty cool. I will give this a go in my next project.
I agree, static strings in code are not only a bad idea from a mistake standpoint, but also with localization and security. I guess the one place I have never considered moving away from static strings is the storyboard and cell identifiers. Interesting concept, it just seems like a lot of extra effort, but may be worth it. 
Well don't leave us hanging. What's your solution? What if your method _isn't_ the fastest? We could help :)
You're probably adding it to the wrong view. But don't even add one manually; use the one that comes with your navigation controller: http://stackoverflow.com/questions/7711999/how-to-add-a-uitoolbar-programmatically-to-an-ios-app/12313602#12313602
Have you tried using `contains(:_)`?
Something seems off with the status bar: the navigation bar blurs the content behind it, but the status bar seems completely translucent.
Quite awesome codes.
Thanks!
Thanks!
Sure, check out textViewDidChange(_:) in https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextViewDelegate_Protocol/index.html
You, as a developer, most probably run the so called "happy-path" scenario, while QA and managers will be tapping away everywhere and most probably crashing an app during runtime and testing. It's also worth mentioning that it's way quicker (and cheaper) to prevent bug when writing the code rather than when QA guy reports it and it goes back to you again.
Everything looks fine to me. Color of parenthesis is fine. I see you put breakpoint on line 7. Is that on purpose?
Just a guess but does casting sliderValue to a String help? label.text = String(sliderValue) To print an int you don't have to cast it to String, but since label.text is a String, maybe you have to cast? I just tried this in a playground let i: Int = 4 var s: String? s = i // get error s = String(i) // works 
Sorry, it's kinda long. My first article writing on Cocoa with Love in over 4 and a half years and I accidentally wrote a 5000 word epic. Turns out I didn't forget how to write. May have forgotten how to stop.
CwL is an old favorite of mine, happy to see you're back writing!
http://www.meetup.com/The-Brooklyn-iPhone-and-iPad-Developer-Meetup/ This is one of the meetup groups I (infrequently lately) attend. 
How?
Wie?
No, that was put there when the app crashed. EDIT: When I remove it, the app still crashes.
Hey there, Matt Fecher here, team member of AudioKit. For chiptunes, you'll want to use Triangles, Squares and Pulse waves with no attack and no release. That will give you a vintage 8-bit sound. If you really want to go hardcore, you can run it through an 8-bit sample rate convertor. You can do all those things with our new AudioKit 3 library ([audiokit.io](http://audiokit.io)). You can even run all those 8-bit oscillators through a midi file and distortion if you really want to get fun with it. Documentation and playgrounds are included on the AudioKit site to get you started!
What's the error message?
Much appreciated 
Here's a [video](https://dl.dropboxusercontent.com/u/26075187/XCode%20Error.mov). Here's the [log](https://www.dropbox.com/s/yevv7pr6wfheky7/log.txt?dl=0).
Think I found a way. I was messing around with playground and did this to find a certain number in a 2d array. Is this what you were looking for? var TwodArray = [[Int]]() TwodArray.insert([0,1,2,3,4,5] , atIndex: 0) TwodArray.insert([6,7,8,9,10,11] , atIndex: 1) print(TwodArray.flatten().filter({$0 == 5}).first!) or print(TwodArray.flatten().contains(7)) 
That was a great topic, but excessively wordy. I think a lot about data structures in Swift and how I can use them to make my code cleaner. I was totally unaware of the specific domain terminology (e.g. partial functions), but I have used a struct that encapsulates data validations so that the data is checked at creation and upstream functions don't have to revalidate their input. It was informative to see a rigorous discussion of this topic.
You're welcome! Swift and iOS can be a bit tough to start with, I hope you're not discouraged.
I have background in C++ and Javascript, so it's not too overwhelming. My goal with this is to learn the actual app development portion rather than just the scripting. 
Good to have you back!
Really? I could have sworn that has a setting for text encoding but that might be some plugin. 
Atom works, thanks!
I only took a very quick look at the code but from my first glance your view controllers are _massive_. Also, by convention there are no class prefixes in Swift.
You can do this on OS X, but on iOS there's pretty severe limitations on what can run in the background.
You're bound for find engineers at any of the NY Tech Meetups. I go to the big one every month at the NYU Skirball Center and there are always people presenting their mobile products and engineers to network with. I recently assisted a presenter at the NY Video Meetup at HBO's offices as well, which showcased some pretty cool mobile apps.
&gt; Typesafe *Uses AnyObject* -_- Looks nice, except that I really wish there had been a cleaner, more well designed return type for those closures. Maybe a protocol type like `ResponseConvertible` so that you can make custom returnable types. Then you just need tom implement that protocol on the relevant types. EDIT: Also, writing your own HTTP parser is gonna end up with you shooting yourself in the foot. Better to just use an established one.
Been meaning to make a music app. This is awesome. Thanks for the hard work!
Are there established HTTP parsers in Swift 2.2 on Linux?
You can make a module map for [http-parser](https://github.com/nodejs/http-parser). Or [Zewo has a Swift wrapper](https://github.com/Zewo/HTTPParser).
Right the point is that you're allowing the closure to return anything, when you should only allow useful results. Just because it's not crashing for cast errors doesn't mean it's well-typed. Type signatures should convey capability. AnyObject doesn't convey anything. If you want to support returning String or [String: String], you have a couple of more sane options. * Overload `Route.get` for closures that return different types. * Have the closure return a type conforming to a protocol, and write extensions to conform String and Json data types (btw, you should really use a fully features Json data type, not [String: String]). This is [protocol oriented programming](http://www.raywenderlich.com/109156/introducing-protocol-oriented-programming-in-swift-2). I'm personally a fan of the latter. It's the design direction Swift seems to encourage.
Extensions are a great idea. I implemented it &lt;https://github.com/tannernelson/vapor/commit/a31e9ed83f6d5844e55953ba4419bab2fe0df386&gt;
There's a lot about IOS development I don't understand so can someone explain what this actually does?
 post(clientURLRequest("auth/local", params: loginObject)) { success, object in dispatch_async(dispatch_get_main_queue()) { if success { completion(success: true, message: nil) } else { var message = "there was an error" if let object = object, let passedMessage = object["message"] as? String { message = passedMessage } completion(success: true, message: message) } } }
This isn't so much about swift, as it is about Cocoa's NSURLSession object and how to use it to talk to web server API endpoints.
I'm not saying the article is wrong, on the contrary it's rather pretty and informative. I'm simply cautioning against using this approach. See my reply above ^^ https://www.reddit.com/r/swift/comments/420560/protocol_extension_and_protocol_oriented/czc8t5x
Hey everyone, had a couple of people email me about an "audiokit not found" error. If you download the code from github, you'll need to compile the framework first. (Instructions will be posted on audiokit.io). HOWEVER, if you are just looking for instant gratification you can download the code from this page: [http://audiokit.io/downloads/](http://audiokit.io/downloads/) and it should work out-of-the-box. Look for the "AudioKit-iOS-3.0.zip" file to download. 
I don't think that works. Scheduling a notification just shows a message to the user, but doesn't give your app any execution time. Apple's docs say: "Upon receiving a user notification [i.e. either a remote or local notification], the user can tap it to launch the associated app and see the details. They can also choose to ignore the notification, in which case the app is not activated." As for Mail: Apple frequently breaks their own rules. Other mail clients use (AFAIK) push notifications to get notified about new mail by some web backend, and then load the data once launched. Also, there's background app refresh for loading new content in the background, but many people dislike it due to the battery drain, and the OS decides when to do the refresh, and the whole thing doesn't really apply to this app idea anyway. I think that this app probably won't be possible - you'd need some API that wakes your app when the battery runs low, but I don't think such an API exists.
I think the drag would have to be on the CV not the cell, then on shouldRecognise you would return true if it starts in a cell, then detect if it leaves the cells rect, thus leaving your result.
Thanks for the post! Question: how does this differ from using Alomafire and it's methods? 
If you want speed and correctness use a C-based parser. Node.js' http-parser is based on the Nginx parser, and those are two battle-tested products. If you are looking for a pure swift library, there are many, but none established.
Out of curiosity, why don't you use a `UIPanGestureRecognizer` for a drag motion?
thanks !
What? It makes no sense to do that, but I guess that's what you want. You can set up a timer and if the user hasn't touched the app in that time, you can stop the app (not allowed by apple guidelines, you will get rejected if they find this). Set up a class variable `userTouchedApp = false` and in the tapGesture/ touchesBegan whatever you want to do, set that to `true`. Then you can check at certain times and make that `false`. Edit: Okay.. from u/mistermagicman 's comment below, what you can do is, start anything you need to in `touchesBegan` and then call the stop function in `touchesEnded`
I think perhaps he means "stop the app" as in pause a game or something, which is a task that makes perfect sense. 
Wouldn't the pan gesture conflict with the scrolling of the collection view? I haven't tried but that's what I figured. The way I'm getting around it is by depending on the long hold gesture to identify if the user had a slight hold, and then listening for the drag.
This is an excellent article. I came here to post it, but you already had!
I think you meant `guard !firstIndexInArray.isEmpty` rather than `guard firstIndexInArray.isEmpty` :) Otherwise, great article!
How would I detect if it goes out of the cell ?
This sounds like something you could get done in r/jailbreak, there are plenty of battery related tweaks
Is there an overall reason you are doing this or are you just asking for help with homework / problems?
Bummer! Thanks
That link takes me to a sign-in page.
Thank you for trying it out! :) What type of iPhone do you have? I had some trouble testing it on 6plus. 
This is probably the easiest way to do it: func partitions&lt;H: Hashable&gt;(var s: Set&lt;H&gt;) -&gt; [Set&lt;H&gt;] { guard let x = s.popFirst() else { return [[]] } let rest = partitions(s) return rest + rest.map { s in s.union([x]) } } It should be pretty easy to understand: it removes one element from the set, or returns an array of an empty set. Then, it returns the partitions of the rest both with and without the element removed. However, it copies the set every time, and it's very eager. To have a lazy version, you can use a generator: public struct PartGen&lt;H: Hashable&gt;: GeneratorType, SequenceType { private var (set,els): (Set&lt;H&gt;, [H]) mutating public func next() -&gt; Set&lt;H&gt;? { for el in els { if case nil = set.remove(el) { set.insert(el) return set } } return nil } } extension SequenceType where Generator.Element: Hashable { func partitions() -&gt; PartGen&lt;Generator.Element&gt; { return PartGen(set: [], els: Array(self)) } } Which only copies the set when it's called. (However the logic is a little different) On the other hand, if you're in the mood for some code golf, here's a random-access, lazy collection type: struct Partitions&lt;T&gt;: CollectionType { private let els: [T] var startIndex: Int { return 0 } var endIndex: Int { return 1 &lt;&lt; els.count } subscript(i: Int) -&gt; [T] { return els.indices.flatMap { j in 0 &lt; i &amp; 1 &lt;&lt; j ? els[j] : nil } } } But it'll only work for fewer than 64 elements.
Yea. I'll play around with it.
If you want to cover all touches in your app, you can use your own UIApplication subclass to override the sendEvent method. Look through event.allTouches and see whether one has touch.phase equal to .Began. If so, the user touched the screen. And don't forget to forward the event to super.
The link in the post has been fixed
Swift on Linux! http://www.raywenderlich.com/122189/introduction-to-open-source-swift-on-linux
Now I see why IBM was hiring iOS engineers recently.. Thanks! 
Maybe listen to next weeks episode of ATP. Marco Arment was asking for help with battery life measurement issues and he is sure to get good feedback. If the app is just for you Im sure you could get it running just fine with a nasty hack or two. The dirty dirty Facebook "play silent audio" trick comes to mind for backgrounding. There are others too.
The source code of .swift files should be UTF-8 format. If you're seeing `0005 1607 0002 0000 4d61 6320 4f53 2058`, most likely your editor doesn't see .swift files as text files and is just displaying the hexadecimal values.
How can I implement a swipe to refresh functionality? For example... I have a page that shows a "Reason I love you" in a text field. When she swipes up, it would refresh the page and show a different reason. I'm thinking I'm going to store these reasons inside of an array. BONUS: Would there be any easy way to have these reference a list of reasons hosted online in a text document that I could update and add to myself? That is WAY beyond anything I'd know how to do, but if it's something easy to implement, it would be awesome!
Is there a way that I could have an "Messages" tab that would display a random text message from inside of our iMessage conversation?
So Two ways to refresh if it is inside a UIViewController then you have to make the method. However if it is inside a tableview, then tableview has its refresh in the attributes inspector. As for using something that you can update online. You can use parse to do that very easy to do. 
No, I'm afraid that you can't give the app access to her text messages - the next best thing would be to save some of the messages you want to display as a string, and then display those.
Mostly people use https://github.com/SwiftyJSON/SwiftyJSON to make their lives easier when handling api data. 
[**@dgregor79**](https://twitter.com/dgregor79/) &gt; [2015-09-22 03:40 UTC](https://twitter.com/dgregor79/status/646167048645554176) &gt; @rob\_rix the restriction is due to the way we model type parameters in the AST; it's considered a bug rather than a design decision ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
You mean pull to refresh, like the Mail app has, right? It's pretty easy to implement with a `UIRefreshControl`, see [here](http://stackoverflow.com/a/24476087/1223781). However, this control seems mostly used for table views. If you don't want a table view, it might be a better idea to use a swipe gesture than a pull to refresh.
It only works for Classes and Protocols. So the only way I know to do this is to use an intermediate protocol "StringProtocol". protocol StringProtocol { var asString: String { get } } extension StringProtocol { var asString: String { return self as! String } } extension String: StringProtocol { } extension Optional where Wrapped : StringProtocol { var safeValue: String { if case let .Some(value) = self { return value.asString } return "(null)" } } let test: String? = "hello" let test2: String? = nil let test3: Int? = nil test.safeValue // "hello" test2.safeValue // "(null)" test3.safeValue // Compiler error : Type 'Int' does not conform to protocol 'StringProtocol'
Thanks for the answer! Really appreciate it :)
Yeah, the situation where it would be wanted isn't a table view. It's just a screen with a text field on it. How would I implement the Swipe gesture to pull to refresh?
Well. Well. Well. Look who it is ;) 
You have to create a UIGestureRecognizer and then a method that refreshes your textField. Something like that. var gestureRecognizer = UISwipeGestureRecognizer(target: self, action: "refreshTextField") gestureRecognizer.direction = .Up self.view.addGestureRecognizer(gestureRecognizer) and somewhere else in your code you add your refresh method. func refreshTextField() { // Refresh your text field here. } Edit: I'm currently on mobile so I cannot verify that all the code is 100% correct. 
Swift on Ubuntu: http://peterwitham.com/swift/how-to-install-swift-on-ubuntu-linux-15-10/ On Raspberry Pi: http://blog.andrewmadsen.com/post/136137396480/swift-on-raspberry-pi http://morimori.tokyo/2016/01/05/how-to-prep-a-raspberry-pi-2-for-compiling-swift 
As far as I know, there are no real IDEs that can compete with Xcode in iOS development (which seems to be what you're looking for). I don't have a lot of experience with using Xcode on older machines, but it's not really supposed to crash all the time. Maybe a reinstall of OS X on your MBP would improve the stability of Xcode.
If you're simply talking about the UI, it consists of the following elements (from the top down): - UINavigationBar (may not be needed if the 'Now Playing'-view isn't presenting on top of another view) - UIImageView (for the album image) - UIProgressView + UILabels (progressView for displaying how much of the song has played and labels on both sides to show the length of the song and how much of it has already been played) - UILabels (for artist, album and song names) - UIButtons (for rewind/previous, play/pause, fast-forward/next) - UISlider (for volume control) - Optionally more buttons for repeat/shuffle etc. Laying out the objects would probably be easiest with AutoLayout, but of course you could do everything programmatically.
What version of Xcode are you using? What error message do you get?
Why are they getting rid of ++ --? To be less Clike?
In addition to what has been mentioned already, I recently wrote a post on their removal, plus the removal of C-style for loops, and how you can accomplish the same type of looping behavior with more Swift-like syntax. http://bjmiller.me/post/137624096422/on-c-style-for-loops-removed-from-swift-3
Have you got a portfolio of apps you've built?
Indeed. PMing you now :) 
FWIW if you still have access to a .edu email address, AppCode is free for students.
I totally support keeping the protocol there. It serves as a type-checked API reference in lieu of documentation comments, and as an enforced contract that can help guide future refactoring of a complex implementation class. From a design perspective, it forces you to consider the protocol behaviors independent of the implementation and will provide the basis for migrating clients to use the interface type rather than this implementation if you end up creating different Leaf implementations. It's not hurting anything now, and can only help as you maintain the app going forward. It is also good to keep it the same file as your only implementation, because that will make it easier to refactor both at the same time since IDE support for full Swift refactorings is so limited at the moment.
I would consider fixing your Xcode/OSX install since that's not at all how it behaves for people normally, nor is a 2011 machine limiting. You have some issues that I don't think are the fault of Xcode.
I'm not really getting errors, it's just really sluggish and then goes into "Not Responding".. I have the latest version, I updated everything before trying some stuff
only xcode will be up to date for swift development, and swift, cocoa, objc all rely heavily on the autocomplete features of xcode. you should check your xcode install, it crashes sometimes with bleeding edge features but usually it does not.
You should be able to add a UIRefreshControl to any UIScrollView. UITableView and UICollectionView are subclasses of UIScrollView. As is UITextView, which you should be using, not UITextField.
Take a look at my https://github.com/DavidPhillipOster/podbiceps - it's the complete source for an MP3 player. (For managing podcasts in my case, but that's just a filter on the system music library.)
It might not be the best resource at the very beginning of your learning. But, of the Udemy iOS courses his are probably the best and once you have a bit of knowledge then watching some of the app examples can be helpful. I would say pick it up right now while it is cheap so that you have it for future reference.
Thanks, I guess I'll follow that then.
Your game is really good. Its a very good idea
You can read about it [here](https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md)
Well, I like keeping a low profile. But if you really wanna know it isn't too hard to find me. 
Thank you! And thank everyone who has taken the time to reply. I'm at work for most of today but will be back working on this later tonight :)
AssetsLibrary is deprecated - I'd suggest the Photos framework
Yes, you can use a single view in the scrollview. But that single view (The scrollview content view) can contain many views.
+1 for some insight on these. I know from my own experience the other monthly subscription sites I tried, Lynda and Treehouse, were rather underwhelming and not worth the cost. (The ones on Lynda done by Simon Allardice were really good but way too short, which was unfortunate).
AppCode is the only viable alternative. I used it through multiple trial periods and while it is a very solid IDE (JetBrains make good IDES), it is not entirely free of its own bugs/idiosyncrasies when it comes to Swift. At the end of the day, my $.02 is to just learn to love Xcode (part of being an Apple dev is Stockholm Syndrome). It's painful and I curse it on a daily basis, but there isn't really a greener pasture. 
For better or worse, Xcode is *THE* IDE to develop for iOS. I have MBP 2011 too and it's pretty capable. There's no reason it would run Xcode worse than modern machines.
[removed]
The PartGen solution is plain crazy, thank you for that!
Very close, just on the target:action: it should be: ...action:Selector("refreshTextField")
Right, which is why as soon as I read the single view deal, I had a eureka moment. Two days off of work and most of that time spent frustrated as to where my other views were disappearing to. Thanks for the reply.
I don't have a very precise kind of company/job I'm looking for. I'm most likely to go towards a general IT Services company, which implies multiple projects of very different kinds. This is why I'm trying to touch on pretty much everything, even if it's not in real depth. 
Hi! What you do there is set the pos.text once, which is at the point of when the view is being loaded. The view life cycle looks something like this: * `init()` When it's being constructed, usually we don't override this or do anything here. * `viewDidLoad()` Gets called when the system has set up our view and connected our outlets, that is the UI, in your case the `bar: UIImageView`, `scroll: UIScrollView` and `pos: UILabel` * `viewWillAppear()` Right before the ViewController is about to be shown on screen. Here you can update the UI if you can expect the same ViewController to be shown multiple times. * `viewDidAppear()` Right after it has completed appearing on screen. Can be used to trigger animations or something else. * `viewWillDisappear()` Can be used to save data if we have any changes we have made. * `viewDidDisappear()` When it has finally gone of screen. Maybe stop some animations like spinners or the like to not draw CPU cycles when not shown on screen. * `deinit` Is called right before the object is destroyed and removed from memory. Very unusual to implement now that we have ARC, unless you have something specific that needs cleaning up. Anyway, to your problem. What you can do is to implement `UIScrollViewDelegate` and handle it there. This is how it could be done: extension YourViewController: UIScrollViewDelegate { func scrollViewDidScroll(scrollView: UIScrollView) { pos.text = "\(scrollView.contentOffset.y)" } } as well as in your `viewDidLoad()` add this line: `scroll.delegate = self` What this will do is to make the scrollView call this method every time the user did scroll. There are a couple of other delegate-methods as well in `UIScrollViewDelegate`, you can read more about all of them in the documentation. 
I know about the Standford course but it's only for iOS 8 isn't it?
You can, but setting the right Auto Layout constraints is complicated and frustrating to debug. When you set constraints between the edges of a scroll view and the edges of one of its subviews, those constraints are used to determine the scroll view's contentSize. By putting a single subview (I'll call it a "content view" for simplicity) inside the scroll view and pinning its four edges to the scroll view, the scroll view's contentSize will be exactly the size of the content view, so you can always scroll to anything inside it. One caveat to doing it this way is that the content view also needs to define its width and height; the edge constraints between the content view and the scroll view determine the contentSize, they can't be used to determine the content view's size. There's nothing to stop you from doing the same thing with multiple subviews, but you'd need to ask yourself if you gain anything over just adding multiple subviews to the content view I described above.
Swift syntax has changed a little in the past year, but not much. The class is still highly relevant. :)
No it's not a predefined global function like `print()`. Some objects or classes support having a delegate. This delegate can exist for the object to be able to notify it of something, like in this case. Or to ask it for some information. The connection is made when we set the scroll views delegate like so: `scroll.delegate = self`. `self` doesn't have to be the delegate, any object can be the delegate as long as it conforms to the `UIScrollViewDelegate` protocol. But it is common that when working with parts of the view hierarchy that the ViewController is the delegate. 
Here is an article from Apples own docs explaining briefly what delegation is: https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html Here is another one, although with Obj-C examples. Hopefully it is helpful anyway: https://www.natashatherobot.com/explaining-ios-delegates-a-story-about-your-morning-coffee/
I (think I) understand why you and Natasha are doing this. It's a personal challenge and a coding exercise. But, understand that if this becomes a "thing", then clients will think that all apps "*should* cost around $300 to make." These are the same folks that think a website should cost $200 "because my nephew made one in middle school, so how hard can it be? lol." Maybe insert some disclaimer about it being a programming exercise not unlike a weekly collegiate class assignment to sort of level expectations. Otherwise, this kinda undercuts us all who do this for a living...or at the very least, makes it that much harder to explain why we quote what we quote. Edit: typo
I just have a fun story I would like to share via a "choose your own adventure" sort of way using simple cartoon animations. I am just trying to figure out what platform i should learn to make it happen. I know I can do it in flash, I wasn't certain if I could do it as an ios app. I just wanted to know if something was doable before i spent money on acquiring the knowledge of how to do it. I do understand your point though.
thank you :) off to spend some money on courses. I appreciate the honest answers!
Man, I've read all of your posts. You gotta slow down and learn the basics. You don't need our help. You gotta sit down and read. Period. 
You could use a UISwipeGestureRecognizer, but it tends to do nothing until it recognizes the swipe gesture, that is, when the gesture is done. Better to use a UIPanGestureRecognizer, so that it can animate with a slow swipe. A nice way to do what you want is with a UICollectionView with your custom UICollectionViewLayout subclass that implements a pile of cards. As the user swipes off the top card, you create new cards deeper in the stack. See http://www.code4app.net/ios/An-iOS-class-to-create-a-stack-of-photos,-inspired-by-the-ebay-App/507fd5eb6803fab854000000 for an example.
Honestly, I love Xcode for iOS OS X development, (been using it as my main IDE for 2+ years (relatively new to Obj-C / Swift)) but the other alternative that I do enjoy playing with (for learning Python mainly) is Atom. It's pretty, and gets the job done. 
If you want to learn programming and build awesome apps get Mark's course. If you want to just build apps then take rob's course. I have both courses and Mark's course is better in terms of teaching you programming fundamentals.
Mr. geniusmastercoderbillionaireappmaker, Because in a world where people take so many photos and hardly delete anything then your app doesn't take much storage on the app if you plan on keeping photos and shit a year with of a text data. But also just using parse is so much easier to store that data. *object.saveinbackground* *query.getinbackground* done. But of course all your apps are hits so you know everything about everything. "Oh this guy is learning how to create apps" "It's dumb for him to learn about backend API's n stuff." "I would know I'm a genius"
U could once you detect the gesture on a cell keep a pointer to it but u think you should use a pan gesture on the view in the cell. Then on should detect check that it is only vertical translation sons rolling still works and then if it is vertical translate the view. I can try knocking it up will take like 5 mins when I get to work, is it a horizontal scrolling 1 row CV yeah ?
You didn't annoy me (that other guy did). If you keep your idea simple and build on it, you'll learn that way. If you start off trying to make a fully featured app, you are simply gonna bite off more than you can chew. Before you build your first house: - Build a bird house - then a dog house - then a porch - then a garage - then a addition to your current house... See what I'm getting at? You kinda don't know what you don't know. Start small like: - I'd like to present a table where each cell lists something I like about my lady. - I'd like for her to click a button and a popup says something that I like about her. The problem you have is that you are a sophisticated mobile device user and you know what you want out of an app and you've seen these things done over and over in other apps. The problem comes when you find out that that seemingly simple thing takes a lot of not-simple steps to make happen. That's the stuff that you don't know you need to know. Also, I bet her birthday is coming up soon. That's a lot of pressure to put on yourself if it is. This stuff is not easy for newbies to pick up. It's not crazy hard....it's just different. Maybe make her an [Invision "app"](http://www.invisionapp.com/). It's basically a clickable prototype web app that simulates a mobile experience. You'll need photoshop UI mockups to make it happen. It seems like you already have those. A lot of pro app dev shops use this to create "clickable prototypes" to test ideas, proof of concepts, or to get approval from clients before spending hundreds of hours building. You can download the apps to the user's phone (it's basically a web bookmark saved to the home screen). But you can update the content remotely and whenever she clicks, she'll see the updates. What you are asking is the equivalent of, "I want to learn to play guitar so I can write and perform a song for my girlfriend in a week." It's not impossible. But, it's also not likely. There will be lots of frustration, and you probably won't end up with what you wanted. I ***know*** I sound like Captain Buzz Killington here. But, I just don't think you know what you are getting into...plus you are getting advice from The Internet, which will *always* give you mixed signals and very little actual daily guidance. edit: typo and added info edit 2: more typos
In swift it's just a var I come from obj-c what is the layout of your collectionview ? Is it 1 row of horizontal scrolling cells or a like grid ? Please post a screenshot 
Definitely it worth to buy it!
Alright, I think I found the problem: current will be nil at some point and comparing it to nil returns false. Comparing it to Element(bitPattern: 0) seems to work, though. Weird. 
And I just noticed that an optional UnsafeMutablePointer doesn't even make much sense in that context. 
Since *AnyGenerator&lt;Element&gt;* is both a *GeneratorType* **and** *SequenceType*, you don't even have to adopt the *SequenceType* protocol in your own struct, e.g.: func generatorFactoryFunction(head : UnsafeMutablePointer&lt;MyStruct&gt;) -&gt; AnyGenerator&lt;UnsafeMutablePointer&lt;MyStruct&gt;&gt; { var currentItem = head return anyGenerator({ if currentItem == nil { return nil } let item = currentItem currentItem = currentItem.memory.next return item }) } for child in generatorFactoryFunction(head: children) { foo(child) }
No there isn't. You can create one though and conform Int, Double, CGFloat, etc to it.
A few math protocols would be a good addition to the Swift language. I'm surprised they don't already exist in the standard library.
Most definitions of "set"s don't include duplicates - but if you need to maintain duplicates, the best solution isn't too difficult: struct Partitions&lt;G: GeneratorType&gt;: GeneratorType, LazySequenceType { private var els: [(elm: G.Element, inc: Bool)] private var gen: G typealias Filtered = LazyMapCollection&lt;LazyFilterCollection&lt;[(elm: G.Element, inc: Bool)]&gt;, G.Element&gt; private var filtered: Filtered { return els.lazy.filter { (_,i) in i }.map { (e,_) in e } } mutating func next() -&gt; Filtered? { for i in els.indices { guard els[i].inc else { els[i].inc = true return filtered } els[i].inc = false } guard let e = gen.next() else { return nil } els.append((e, true)) return filtered } } extension SequenceType { func partitions() -&gt; Partitions&lt;Generator&gt; { return Partitions(els: [], gen: self.generate()) } } This version is also *very* lazy: it doesn't evaluate anything in the sequence it's being called on unless it needs to. For instance, you can call it on an infinite sequence, and it will work just fine: var i = 0 anyGenerator { _ in ++i } // 1, 2, 3, 4, 5, 6... .partitions() .prefix(5) .map(Array.init) // [1], [2], [1, 2], [3], [1, 3]...
That's probably best. I still support older iOS, though. But for a new app, yes, Photos is the way to go.
That's ugly, though. I don't want to expose my temporary `child`variable to my function's scope.
Sorry for acting hostile at all! WE"RE ALL SWIFTY HERE! NO WORRIES! Despite how clueless I might have appeared in my questions, the app is nearly finished... partly in thanks to a few people here. I know how to do all of the basic stuff that I could "settle" for in terms of design, but my main reasoning for posting here was my curiosity relating to some more advanced functionality.
I'm glad. And, yes, you did seem to be newbish and helpless. So, the million dollar question is: Did you need Parse?
The tricky thing about this (and the reason there's only IntegerArithmeticType rather than ArithmeticType) is that generic algorithms using + are often subtly incorrect with floats. For example summing an array of floats using + loses precision vs a more accurate approach like Kahan summation: https://en.wikipedia.org/wiki/Kahan_summation_algorithm
You *did* do it he proper way. You understood your problem and you only implemented the bare minimum needed to solve it. That's good coding. Good software development is as much choosing what *not* to do as it is choosing what to do. Every time you add a framework to your app, you add hundreds, thousands, tens of thousands of lines of code. You gotta ask yourself, "Do I need this to make my idea work?" *Need* is the operative word there. Parse is not the answer to all apps. I have 6 apps in the store...not one uses Parse.
I think they changed it when xcode 7 was released. You can run it on your phone without paying. But you can't release on app store. 
Thanks! I'll have a look. I agree that I wish Apple made a better version. I have a lot to learn in this area.
We use bitrise.io at Mixpanel and you would have to pry it from my cold dead hands. Jenkins is a tremendous pain, Travis is only marginally less painful. Bitrise workflows make me smile, and the founder has personally taken a few hours out of his day to fix my foolishness when our builds started failing. Their free tier is more than enough to use in production (but you'll want to give them money, trust me!)
Depending on how often you push you can use my OS X server (I don't use it during work hours (gmt))
Left out forEach
Not really needed, and usually confusing to people. When doing C++ professionally I remember most people being rather clueless about the difference between ++i, and i++. Since you seldom do C style loops in Swift, I can hardly remember a time I needed to write ++i e.g. I don't think programming languages should support custom syntax for things which is rarely used and where that special syntax offer very minor convenience.
I made previous commits but the third commit that destroyed everything replaced the files I had there
There's a little-known feature of OS X that may help here: even if you aren't backing up to time machine, the OS keeps a "local" time machine backup that's updated hourly. You may be able to restore the directory you deleted to the most recent snapshot.
I can't tell you how many times having a backup has saved my ass. Please, please get an external drive to do a Time Machine backup to at the very least.
That's fine. As long as you made previous commits! If you revert, reset or checkout to the previous commit then you will get your files back. This will revert your most recent commit and make a new commit with the reversed changeset. $ git revert `git rev-parse HEAD` This will move your git history back 1 commit. Only do this if you are sure you don't want ANYTHING in the commit you just made as it erases history. $ git reset --hard HEAD~1 Will move you back 1 commit 
Yeah, I was really confused. Like, that's the entire point of git haha
You can just create your own binary operations 
Jenkins
TravisCI
As someone that spent about 6 weeks building an app on Parse in my spare time and then deciding to move on from it, I'm not surprised in the least.
I just started building a social app that was going to use Parse and FB integration. Any good alternatives to this that make it as simple as Parse? 
Make a copy of your project directory before trying new git stuff. 
There are a lot of options for where to start, it just depends on how you learn best. There are two courses on iTunesU, one is an iOS development course by Plymouth University https://itunes.apple.com/ca/course/ios-development-in-swift/id950659946 and the other is the Stanford iOS development course https://itunes.apple.com/ca/course/developing-ios-8-apps-swift/id961180099 Being completely new to programming start with the Plymouth course first, then give the Stanford course a try once you feel more comfortable (and the Stanford course is really what you should be aiming for if you want to develop a good knowledge base to start from). I've also got a list of tutorial resources on my ManitobaNinja site that you can take a look at for other options as well https://manitobaninja.wordpress.com/2016/01/22/a-collection-of-swift-tutorials/ If books are a better option then Swift Programming: The Big Nerd Ranch Guide seems to be the most popular book recommendation for beginners. http://www.amazon.com/Swift-Programming-Ranch-Guide-Guides/dp/0134398017 There should be enough among those options that you can find something that works best for you
I've heard the same scepticism expressed on Twitter about Firebase as well. I know Erica Sadun was trying to compile a list of alternatives so her site might be one to watch for some decent recommendations.
https://twitter.com/ericasadun/status/692833782760476672 For anyone interested in Erica's conversation.
Thanks, I'll check it out. This looks really handy! If I have any questions, can I reach out to you?
This is unexpected. I thought that Parse was owned by Facebook and this guarantees stability. Guess I was wrong which is unfortunate since I have two apps working with Parse :/ Now I will have a lot of unplanned work to migrate them. The apps are small and easy but I fill bad for people using Parse for big apps in production.
Shameless self promotion but I work on the Fabric platform at Twitter and we're 100% behind it. It's a fantastic alternative to parse, particularly our integration with Amazon Cognito for identity/backend management: https://docs.aws.amazon.com/cognito/devguide/identity/external-providers/twitter/
If you don't need Push delivery, you might be interested by [Strapi](http://strapi.io)
My opinion is that even though your first example will likely never crash, was the second example really that much more work to type? 
Whenever I see a '!' I smell crash and laziness. Optionals were made to make sure it will be safe and by chaining you have to pretty much write same amount of code - in most cases. We even change IBOutlets which are implicit unwrapped optionals to normal optionals in our projects to follow one standard where '!' is considered bad practice.
Potentially not what you want, but tweetbot has an automatic night mode based on display brightness. As the display (at least for most people) uses the light sensor to adjust the brightness, the app turns on dark mode when it gets darker. Maybe that is an option for you too?
I figure that IBOutlets are one place that implictly unwrapped optionals are ok. That and `let image = UIImage(named: "my_asset")!` My rationale is that it only breaks when project level changes occur like renaming assets or xib outlets. I'd rather it crash if I forgot to finish refactoring than fail silently or revert to some default state which wasn't planned. I can't help but think that optional IBOutlets will bite you. I mean what would a nil view mean to the layout engine or constraints? Anyway I agree with you about everything else. `"!"` should be avoided and is nearly always a sign of laziness or lack of understanding about swift optionals. I'd like to here any counterarguments to what I think about using them for IBOutlets and named UIImages. 
It looks really promising! I'll go try it out. Thanks!
That's not really the issue in my opinion. In the second one, the method is returning without doing any work at all when nil is encountered. If the method is contracted to do something, and it simply skips that something in the event of an unexpected nil, that sounds like a fatal error to me. Crashing is the only responsible thing to do, since breaking the contract silently is disingenuous. The real solution is to find a way to ensure that you receive an unwrapped value if your code expects it to be unwrapped 100% of the time. Optionals in that case are the wrong approach. Of course in OP's case, there's no way to control this. But generally, I think it's better to find an alternate solution.
You cannot create default type parameters. You can, however, do this. typealias DefaultDog = Dog&lt;ChildClass&gt; As for the first question, I would guess the issue lies with `Dog: Animal&lt;Dog&gt;`. This might be creating some kind of infinite recursion in the runtime type system. Swift generics pass type information at runtime I believe. So when you have a generic function, I believe there are hidden objects passed to the function that represent the concrete runtime types of the generic type parameters. To construct the runtime type of `Dog`, it has to construct `Animal&lt;Dog&gt;`, which needs to construct `Dog`, which has to construct `Animal&lt;Dog&gt;`, and so on and so on. I'm not totally sure on this, and have no sources whatsoever. But that's my best guess.
Why don't you just use this library? It's sure possible to do this in Swift without the library. Draw a semi-transparent layer and cut out the holes with buttons' coordinates using OddEven fill mode.
I almost never explicitly unwrap them. That's the whole point.
This
PERFECT! Thank you.
The non-obvious issues around static vs dynamic dispatch with protocol extensions is especially troubling to me.
Sorry for this inconvenience. We're migrate our static website on AWS. You check out our [GitHub](http://github.com/wistityhq/strapi). 
Would you say that UITableView is just as capable as AsyncDisplayKit?
I'll be honest, I'm not convinced that a no ! rule is a good pattern. It exists because there are a number of unavoidable cases where it is necessary. Rectifying the lack of explicitness in the interface builder and assets folder are the two that jump straight to mind. With optional IBOutlets, every time you do the equivalent of this this: if let myTextField = myTextField { myTextField.text = "Hi" } you are introducing another layer of state-fullness into the great big bag of state which is UI. Granted you won't get run-time errors but in it's place you get unexpected consequences and all you are safe-guarding is easily fixed programmer mistakes like forgetting to remove a reference outlet or mis-spelling an image asset. Ideally a nil outlet or asset would be a syntax error but that's not possible with XCode toolset so I'd prefer to fail early with a run-time over the user experiencing something that wasn't expected. &gt; Your example with UIImage is fine for debug mode but why would I crash my app for user if no image was loaded - i'd rather have him use app without one image. As a case example consider a users avatar. They might have set one which is accessed from or a network call or perhaps they can't be bother so it reverts to a default. It's a perfect use-case for exploiting the power of Swift optionals. if let avatar = someDownloadedAvatar { avatarImageView.image = avatar } else { avatarImageView.image = UIImage(named: "default_profile")! } By your rationale the else clause needs another `if let`, `guard` or `assert` but I would argue that this adds another possibility; another dev comes along and decides that 'default_profile' should be 'default_avatar'. The program compiles, doesn't crash but now instead of a easily fixed run-time our users have nothing where they expected an avatar. It can't be logged and takes a few extra steps to reproduce whereas the `!` approach is a quick run-time and face-palm for an easy mistake. I guess what I am saying is that number of crashes isn't a good metric for program correctness. Swift gives us a lot in the way of writing safer code but exploiting this to prevent crashes doesn't mean we have safer products. 
I never used Objective-C before and kinda confused when I had to use bridging header and translate the function to Swift. Well, I already solved it by doing it as exactly as you say. I'm still confused on how masking works earlier but now I think I can handle it
I agree and disagree. I love the language and its growth but it's very disruptive to have major (app breaking) changes in every new iteration. I don't understand why backwards comparability isn't even considered an option.
Could someone elaborate or provide an example of what he means by "Cocoa renamification"?
Outlets are a pain. The best approach I've found is to use implicitly unwrapped optionals, but have a linter rule to ensure that they are all asserted in a dedicated method called from `viewDidLoad()`. That way you can never forget to hook up an outlet, you can be sure that there is always a value (after the view has loaded, of course), and you don't have to unwrap everywhere.
Your concern is addressed near the end: "While our community has generally been very kind and understanding about Swift evolving under their feet, we cannot keep doing this for long. While I don’t think we’ll want to guarantee 100% source compatibility from Swift 3 to Swift 4, I’m hopefully that it will be much simpler than the upgrade to Swift 2 was or Swift 3 will be." I've been using quite some programming languages and warts because of backwards compatibility are a pain in the lower back. Sometimes it's better to break things, especially this early in a programming language.
Backwards compatibility adds cruft. The whole point of these growing pains is that yes its disruptive but the end result will be worth it to have a clean, efficient, modern language. If the changes are a big deal to someone then you can just wait until its more stable, but if you want to learn Swift sooner rather then later then thats a cost you pay. Its just a matter of which is most important to you.
I'm super flattered, and you will probably hear from me once I get to the bundling stage. I'm still rewriting my app in swift so I have a lot of stuff I am working through at the moment. This is super awesome, colored me really impressed!
I found [this github link that discusses in detail](https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md) the kind of changes they are proposing. OLD COCOA STYLE let content = listItemView.text.stringByTrimmingCharactersInSet(.whitespaceAndNewlineCharacterSet()) NEW SWIFT STYLE let content = listItemView.text.trimming(.whitespaceAndNewlines) the new style is definitely an improvement!
Its not just backwards compatibility. Its that the compiler is just deprecated. It gives me the same feeling about iOS apps, how if an app is not actively maintained it will most likely break after the next major update.
Thanks for some interesting links! However, this is not quite what I'm looking for. I simply want the user to be able to select two separate keyboard languages, that will apply to two different "parts" of the user interface. I have realized this probably isn't possible, that's why I added the comment that I was hoping this would be a possibility now after they had added the possibility for custom keyboards. I'm new to iOS dev. so I was simply hoping there would be some connection between these two, quite separate, issues.
they are introducing support for different swift versions though so that will change 
If you're concerned about a product and don't want to, or can't, budget for migration, then I see your point. But if you're thinking way down the line about the quality of the language you may be using 10 years from now (as well as the quality of code you'll be writing with it), it's probably unwise to critique the current priorities of Swift development. It's a very good thing for them to be willing to break stuff right now, as the language is in the congealing stage. The result is that we'll hopefully be left with fewer odd-duck things down the line, where people are like "Why is this here?" and the answer is "Well, it's because the people making the language didn't want to break anyone's code, so we're stuck with this now." Example: tons of stuff in Javascript, which diehards pretend to be okay with, but deep down they know it's only there because if it were changed, the internet would come to a halt. If I were pressed to do a table napkin calculation, I'd argue that migration costs in the early days of Swift will be well worth it many years down the line when you're able to write better code because of the moves the language designers are making right now. You have to think with a long view. If, on the other hand, you imagine that your business won't be around, and your products won't be in the marketplace like 2 years from now, I can see how that would be frustrating. Maybe switch to Objective-C in that case. Developers in the Apple ecosystem are at least lucky to have that type of choice.
&gt; Example: tons of stuff in Javascript, which diehards pretend to be okay with, but deep down they know it's only there because if it were changed, the internet would come to a halt. My brother from another mother!
Swift 2 to Swift 3 is going to be like Python 2 to Python 3?
You can also use a tool such as xcres to increase the help the compiler can give you for things like assets and strings 
Which is actually Lattners Point in the message: &gt; As such, we should try to get the “rearrange all the deckchairs” changes into Swift 3 if possible, to make Swift 3 to 4 as smooth as possible. While our community has generally been very kind and understanding about Swift evolving under their feet, we cannot keep doing this for long. While I don’t think we’ll want to guarantee 100% source compatibility from Swift 3 to Swift 4, I’m hopefully that it will be much simpler than the upgrade to Swift 2 was or Swift 3 will be.
Sadly, it looks like Apple will be a pain about this. Search the release notes for "Alternative Toolchain Support": &gt; Only apps built with the default toolchain may be submitted to the App Store. 
Not a chance, the Apple developer community doesn't have that many stupid and self entitled people. 
composition &gt; inheritance
The advantage that Swift has that Python did not is that Apple can just flip a switch at some point and say, "No more Swift 2 apps on the App Store," and that will be the end of it, pretty much. With Python, they didn't have that luxury, and they made the further mistake of continuing to release Python 2 updates for far too long. If you really want people to upgrade, stop updating the old version with anything other than maintenance/security patches.
Thank you so much for this response. Very helpful and informative.
Swift *is* ready for primetime use. It has been since its first release. This should not, however, imply a development process where absolutely nothing breaks from release to release. Yes, you will have to maintain your code. I know, I know.
I don't remember a link, but this is in active development. I don't think it's ready for prime time though.
I'm OK with it. This is what I get paid to do.
The timeframe where you regularly break things is called alpha. The timeframe where you stop breaking things and support what's out there for more than one toolchain release at a a time is called stable. Chris has been clear, especially since the opening of the code, how things would be. Apple has not.
What other languages would you consider ready for real commercial development that introduce breaking changes on a 6 month basis? What libraries would you consider ready for real use that break their APIs every 6 months? Which kernels that break all of userland twice a year? I'm perfectly fine with Swift introducing breaking changes at this point. It's better to get things right than pay for misfeatures for 20 years. But let's not pretend that the public beta ended in September 2014. (Not to mention the state of the tool chain for the first year: "Oh, I need to infer the type of an expression more complex than a single function call, better crash!")
Could you please provide the quote from any of my previous posts where I recommended using a 3rd party solution? Let me save you some time, I never did. I was sincerely asking for your opinion on whether or not you were familiar with the AsyncDisplayKit that souhoh had recommended to the OP and that if you were familiar with it whether the functionality that it provides can already be achieved using UITableView - again of which it seems you are pretty familiar with. So without reading any ill will into my question - let's try this again. Are you familiar with the AsyncDisplayKit that was recommended to the OP? If yes, do you think that the majority of functionality found in it can already be accomplished using UITableView? If so I was wondering what advantages (if any) does AsyncDisplayKit provide over UITableView?
This seems like something that would be "easy" to write a migrator for (like ARC) and/or to provide a compatibility adaptor for. 
And you should really have a remote master you push to if you don't have one. If you do have one, I don't see any problem. 
&gt; Yes, you will have to maintain your code. I know, I know. Would be great if it would only be this. But every WWDC you have to decide if you want to convert your app to the latest Swift syntax to be able to test new OS features, or if you want to stay with the old syntax so you are able to release to the App Store before the preview OS gets released. 
Because I want to be able to switch between major Xcode betas and the stable version of Xcode. So I can test with iOS 10 and release to the App Store from the same (sans iOS 10 API obviously) code. 
In the numberOfItemsInSection method, you do different things depending on which collectionView it is. In the cellForItemAtIndexPath, you do the same thing for either: you allocate _two_ cells for each collection view, and one of those cells isn't defined for each collection view. You could fix this by having a test at the top of cellForItemAtIndexPath to differentiate between the two collection views and dequeue the appropriate cell depending on which collection view it is. However, this is all very confusing: it is confusing to me to look at it, and it is obviously confusing to you as evidenced by the existence of the query. So here's what I'd do: I'd create two new objects - one of which will be the datasource/delegate of spectatorCollectionView and one of which will be the datasource/delegate of userCollectionView. Then you can instantiate one of each in the nib/storyboard and hook them up and make outlets from your view controller to each. And then each will be free of all kinds of conditional logic, and will nicely encapsulate the handling for the particular collection view it is tied to. Of course, you will need to have some kind of communication from each of these and the view controller to, for example, pass around data and possibly events (such as selecting a cell). I know it seems like 'more work' to create objects than simply to sprinkle a little conditional logic around, and it is true there is slightly more setup, but after that the reward will be a really clean setup which is easy to understand and easy to extend in future. Editing to add: google around a bit because there have been articles on moving table view or collection view datasource/delegates into separate objects for the purpose of slimming down one's view controller (which is also an admirable reason to do this even when having only 1 table/collection view). There may be nothing on handling two table/collection views, but just seeing an example of doing it for 1 takes you (IMHO) more than 50% to handling two. 
Let's put the circlejerk elsewhere, huh?
There's no requirement that you use Swift. Indeed, the sensible choice for both new and established projects is still to stick with Objective-C. If you're using Swift now you're doing so entirely by choice, as an early adopter, and the growing pains should be an expected part of that choice. 
They don't.
Your description is brief and rather ambiguous. I am going to interpret it to mean that you want the app to wait a limited period of time, and if the user fails to touch the screen, the app will do something. In this case, detecting touches won't work (which is what touchesBegan, touchesEnded and gestures are all about) because they detect the _presence_ of a touch, but you want to detect the _absence_ of a touch. So, you really need two things: 1. you want to know if the user _does_ touch, and you already know how to do that: touches began or a gesture recognizer 2. you want to _wait_ a certain period of time and if #1 never happens, then the app does something else Anytime you want the app to do something based on a period of time, you should think of a timer. The best way to get a timer is using NSTimer, but there are also timing capabilities in GCD. I suggest you use NSTimer. Suppose you want the user to touch the screen then touch the screen again before 20seconds are up. If the user touches before 20 seconds are up, you play a clip of The Beatles or Al Bowlly or whoever is popular with young people at present; if the user fails to touch in 20 seconds, you play a rude noise (rude noises are the same now as they were in Shakespeare's time). So, on the first touch, you start an NSTimer which will expire in 20 seconds. One of two things can happen: 1. the user _DOES_ touch before the timer is up. On the user touching, you invalidate the timer, because you don't want it to fire, and play the pop song clip 2. the user _DOES NOT_ touch before the timer is up: in the method executed by the timer, you play the rude noise. 
If so, I will be sad to see it go. I realize that it's silly, but I've always liked the leftover connections from NextStep and their work on Objective-C.
No I'd say it's fine to let the optional be your error
Thank you so much. I had the user collection view work on its own. However, it was when I added spectators collection view the errors started to present itself. I sort of understand now, its like creating a specific class for the collection view and then referring that within my view controller. Again, thanks
&gt; What other languages would you consider ready for real commercial development that introduce breaking changes on a 6 month basis? What libraries would you consider ready for real use that break their APIs every 6 months? Which kernels that break all of userland twice a year? I think the only benchmark of a language being ready for commercial development is that you're able to develop something in it that you can sell commercially. In terms of functionally being able to make apps and sell them on the App Store, you've been able to do that since Swift 1. The question I'd ask is: why do you think that your own personal measure of "readiness" (based on whatever metrics you're using internally) should be *the* measure across the board? &gt; I'm perfectly fine with Swift introducing breaking changes at this point. It's better to get things right than pay for misfeatures for 20 years. But let's not pretend that the public beta ended in September 2014. So a language can't officially be "out of beta" until it's no longer producing code-breaking changes? That is asinine. You're trying to measure a programming language by the standard applied to a video game. These things are not synonymous.
&gt; But every WWDC you have to decide if you want to convert your app to the latest Swift syntax to be able to test new OS features, or if you want to stay with the old syntax so you are able to release to the App Store before the preview OS gets released. If this is such a dilemma, why not just use Objective-C? And I'm not saying that to be flippant. Objective-C is a perfectly fine option for people who are averse to the current code-breaking development regime of Swift. This is an option that other mobile developers don't have, but we do. So what's the big deal?
Have you checked to see if there is anything at your own college already? If you are looking for something specific to Swift it might be tough to find exactly what you are looking for. You could always check with your school and see how easy it would be to set up a Swift club, or maybe start chatting with some of the people here and getting a group of people together that way.
The entitlements are in the provisioning profile, which is public information anyway. If someone uses tour source code, they won't be able to use that provisioning profile unless they also have your signing identity. You definitely should not open source your signing identity. People using the open source code will have to get their own provisioning profile and signing identity with iCloud permissions.
I think we've known they'd be breaking stuff for a while now. If it was really going to be a bother to anyone, they'd have known after the first Swift update. So yeah, this is old news by now. Not sure what "messaging" they really need to clear up at this point.
I'm not taking a stance from a developer standpoint in this case, merely responding to the stance of people being OK with the future breaking the past and not really having much handwringing over it. 
They explicitly said early on even in the original public announcement of Swift that backwards compatibility of the language was not going to be a priority for now even though they'd try to keep binary compatibility. This isn't new information. 
Thank you! I got to the point where I was able to drop annotations using longtouchgesture but when I tried to customize the annotations I started getting a Thread 1 STBRT something error and was unable to figure it out. I'm going to start over on Monday and try to use that site to help me
So to make sure I don't do that, do I have to change anything in Xcode to prevent that from happening?
I think we've already agreed on the end point, but where we might feel the line of "absolutely have to" is probably a bit different. 32 bit was modern at the time, now its pretty old. Should 32 bit support be maintained or not? I'm sure supporting it has a cost. (Obviously I'm not referring to iOS, since they dropped 32 bit awhile back and simply prohibited submissions that weren't 64 bit) If you are a business with millions of lines of code, some of which may have all kinds of arcane optimizations written by people long ago moved on but you are still selling and supporting that product, your opinion of where that line should be is probably quite different than a new dev that gets to press "File | New Project" in Xcode. It's worth noting that Microsoft Office 2016 (The brand new one) is 32 bit. By the same measure, as the person who paid $4,000 for Maya, you likely aren't keen to pay another 4k for a 64 bit version. Mostly just a discussion because I like to talk about it =)
I'm excited for this. I think I'm most excited by the idea that Apple is coming to the community for feedback with something like this. So far I've been really happy with how open source Swift is working out. Hoping for more big changes in the future. 
Reading the above comments, the concept of backwards compatibility is being applied more generally beyond just Swift, which is what I responding to. &gt; I've been using quite some programming languages and warts because of backwards compatibility are a pain in the lower back Developers don't like dealing with pains, but customers also don't like it. One of those is more equipped than the other to understand the why and hows of whats going on.
&gt;the messaging could have been clearer about what was meant to happen They were explicit about the lack of ABI and source compatibility for the following year or two from the very first day it was announced at WWDC 2014. It was also [the subject of their very first blog post](https://developer.apple.com/swift/blog/?id=2) a week later. The fact that the language would be rapidly evolving was no secret. Anyone who hopped on the this train "to build major, long-lived codebases" without proper preparation or understanding of what would be involved should be fired for not doing their homework.
Yea Apple's use of the word "framework" is a bit of a misnomer by most other standards. "Framework" usually implies that it's doing a lot of the work and your code is more of a plugin to the framework. Libraries are kinda the opposite, where you're plugging the library in instead of the other way around.
Super cool, I was looking at perhaps trying out Elm on my next project before the swift *nix announcement. I'm still debating bringing Elm into my current project just for fun! 
http://www.amazon.com/Developers-Cookbook-Content-Program-Library/dp/0134395263 Ive been reading this one for the last 2 weeks and quite impressed so far , it hasn't even mentioned IOS yet :) 
But deadlocks don't cause crashes. They just pause everything
There's also [Cocoa Programming for OS X](http://www.amazon.com/Cocoa-Programming-OS-Ranch-Guides/dp/0134076958/ref=sr_1_4?ie=UTF8&amp;qid=1454246017&amp;sr=8-4&amp;keywords=The+Big+Nerd+Ranch+Guide), which is very good. P.S. Also, check out their related Swift book.
I actually have that installed, but I installed it a long time ago. Bet they updated it or something. Thanks you 
Second this. Would recommend their Swift language book too. It's stellar and ends with a Mac OS app example and an iOS app example. 
That I couldn't tell you off the top of my head. I might get a chance to take a look later tonight (I haven't used annotations in my own projects yet so I'd have to do a few quick tests to see how to do what your looking for).
Autolayout. Read through the Apple help site for it [here](https://developer.apple.com/library/ios/recipes/xcode_help-IB_auto_layout/chapters/UnderstandingAutolayout.html). It might feel a bit frustrating in the start but it's really the best way to work *visually* with layout. Another option is looking into programmatically drawing and laying out elements.
Lots of things, yes, lots of things, and some stuff. There are dozens of details required to answer your questions. Lucky for all of us, many people have have already laid them all out in tutorials and blog posts. Might I suggest typing *Swift 2 changes* into Google?
I'll just second that BNR's Swift book is great. I've also got their recent Swift refresh of the old Cocoa classic, and it's fine. There isn't an absolute ton that needs reworking in it, and for any issues a reader might have, they've got errata up on Github: [Errata for Cocoa Programming for OS X, 5th Edition](https://github.com/bignerdranch/cocoa-programming-for-osx-5e/blob/master/Errata.md)
This is great, idk if you're the author but thank you for posting this.
Pretty awesome stuff. I'm always hesitant to use Google looking stuff in my apps because of the Human Interface Guidelines set forth by apple.
Google has a really long, detailed justification of why Material looks the way that it does. It's not just to "look google-y" it's a pleasant interface framework that is built around enhancing the Users experience on mobile
So this is where I'm at right now. https://github.com/DclearEE/AreaMeasurement For some reason I cannot get viewForAnnotation to work and cannot drag or customize the annotations I'm creating.
Dang, I thought this was going to be using Swift on Android. I am afraid this isn't going to be very popular with people that like their apps to look native. Either the users or the developers. I'm sure there's some product or management guy who would be happy with this though, much to the chagrin of the enthusiasts. 
but still...
but still what....?
So Swift 3 is actually finally 1.0?
Yep agreed why do want an Android UI on an iOS device?
Thank you, looks awesome - will try to use it...
This all looks really great and well developed, but Swift is currently for iOS products, not Android. Unless you are Google, you should be developing with Apple's style guidelines, not Google's.
I also like the buttons with the flash originating from where you tapped
Online petitions are always effective
Yeah, I'm studying Sprite Kit =)
you may be also interested in: https://www.hackingwithswift.com/#home - those are really well written tutorials (and things you ask, are covered within first 2 projects, afair)
This was excellent. I'd love if you made more. 
Well, it sounds like you've got the idea. I made a music app recently, and this is how I went about doing it. 
Apple's Swift blog explains a lot. Refer to WWDC 2015 also. There is a whole lot to re-learn per-se. Xcode's migration will help convert pre Swift 2.0 stuff. https://developer.apple.com/swift/blog/?id=29
Super interested. 
Do you have a preference for communication medium? Google hangouts? Doesn't require a download. Skype works too. We can create a group and add people as they come. Thoughts?
Skype would be great honestly. I'll PM you my Skype ID and you can add me. 
I was using UrbanAirship. They used to be free for up to 1,000,000 pushes / month, but then they decided that they had to do more than push notifications. They ended up charging an INSANE amount of money for what we needed (I think they should have kept their original offering and added to it instead of removing something that just worked). As such I'm now using AWS's SNS service (https://aws.amazon.com/sns/). It's been pretty fantastic so far. Quick to integrate, and best of all adds no dependencies to the apps themselves! They're also 1,000,000 free pushes / month, then $0.50 for each mill thereafter.
What does services like Parse/UrbanAirship do? I've never really got them... I've implemented APNS in my apps and just rolled my own VPS with Linode, wrote a simple PHP based API and pushed JSON formatted notifications directly to Apple's APNS service. Where does services like Urban come into it?
I'm _very_ happily using [OneSignal](https://onesignal.com). Their pricing model is completely free (unlimited users, unlimited push notifications) and they support almost every platform you can think of. Their iOS SDK is objective-c but its still very easy to use. let client = OneSignal(launchOptions: launchOptions, appId: "YOUR-API-KEY-HERE") { message, data, isActive in print("message: \(message)") print("additional data: \(data)") print("isActive: \(isActive)") } client.enableInAppAlertNotification(true) They have a nice dashboard and support targeting specific groups of people, give stats on specific users that opened the notifications, and have SDK's for every language. We also used their REST api because we ran a custom dashboard, and it was nothing special but worked fine. I know this sounds like marketing-talk because this is all way too good to be true, but I'm being 100% serious when I say this is by far the best push notification platform I have used. Silicon valley at its finest.
Hi, my name is Daniel, and I made the Material framework. I appreciate your statements, and we had already anticipated positive and negative feedback. With some clarity as to the direction Material is going, I feel that everyone will be happy using it. Material is a graphics and animation framework. We made it look like Material Design quite easily. The framework is not meant only for MD, it is possible to make it look like anything, and we plan on showing people how to use the components for both iOS native look and feel, and MD look and feel. The main benefit, aside from the look one chooses to use, is the ease of making components. Beginners have a lower barrier to entry, and experts no longer need to write common code over and over again. So hopefully everyone will be happy with what we do, as we are thinking of MD fans, and native iOS fans. All the best and I appreciate the feedback. Thank you! :)
bug report here: https://bugs.swift.org/browse/SR-654
I have a much different background then yours but everything else about what the direction I want to head is basically the exact same as yourself. From what I have seen there are not a ton of pure Swift jobs out there. But, it is increasing and I suspect that over the course of the next year the postings are grow quite a bit. Without a CS background I think the competition will be tough so having some stellar iOS development skill (be it UI or whatever) beyond knowing Swift is going to be important. The best site for Swift job postings is https://www.natashatherobot.com/swift-jobs/ So definitely keep your eye open here and start to get a sense of what kind of candidates they are looking for so you can keep heading in the right direction.
Hey thanks for the question! The reason for all of the features overall is to speed up development time. The amount of time it takes to setup a base application structure, add needed pods, etc is time that could be used building useful features. In languages like Ruby there are tools that take the pain out of this already, but not in the world of Swift (though there are some tools that do assist in certain aspects).
I've been trying to figure out what all OneSignal offers. Is it similar to Parse? Meaning does it double as a database? Or will I have to create a database and connect it to OneSignal somehow?
Timely posting for my purposes, thanks. I was just working with JSON on a custom app this weekend. Rather than use any of the current JSON frameworks/wrappers I found it easier to just the current language implementation. Not "easier" as in "it's easy to use", but "easier" as in "screw it why bother learning some other framework that might not be maintained and break with the next language release." I really like Freddy though: I (more or less) feel like I understand it already just from reading the introduction, and coming from Big Nerd Ranch I think I can trust that it has a decent shot of keeping up with the language changes.
This looks really nice! I love that it doesn't force optionals in model classes where they don't belong and doesn't silently swallow errors like some other JSON frameworks do. Also, none of this strange operator overloading that I've seen... I've used an approach for parsing JSON into a model that was quite similar in another project before - I also made a `JSONDeserializable` protocol that requires a throwing constructor, and used a `try` in each line that assigns a field. I'm also passing the field's name to a convenience method to allow it to generate nice errors. I used SwiftyJSON to get the json into a convenient intermediate format, which isn't too different from Freddy's JSON type. One minor thing I did differently, though, is making all the primitive types (eg. String, Int, etc.) also conform to `JSONDeserializable`, so to initialise some integer you can do `someInt = try Int(json: someJson)`. Because my approach is so similar to Freddy I can say from experience: this works great. For multiple reasons I can't really reuse my own solution though and I prefer an open source solution anyway if available, so Freddy is definitely gonna be a great contender as JSON framework of choice for me. One important aspect is missing, though: writing JSON. In my project mentioned before, I just created a separate protocol, `JSONSerializable`, that requires a `toJSON() -&gt; JSON` method. It's quite simple to implement, but unfortunately I didn't find a way around having to write the field names twice (once for serialising, once for parsing). ObjectMapper is the only Swift framework I know that gets around that, but it requires optionals everywhere in the model unfortunately and has almost non-existent error handling. Would be very interesting if you (Freddy's author?) have some idea about that.
Really cool!
OneSignal _only_ offers push notifications, which means that yes, you will have to create a backend which uses the OneSignal SDK or REST api if you want to send push notifications. But trust me, its very quick and easy.
It's probably worth noting (at least) for people that aren't familiar with Laravel, that Laravel ships with an ActiveRecord style ORM named Eloquent. Apart from that, looks really nice. I'll definitely have a play with this later.
I like using it. The framework makes it easy to create components. The examples are easy to apply to your own projects. Fyi, Google is using their material design for iOS apps right now (Gmail for one).
Swift by default does "shallow copy" which means that container references point to the same objects in memory when you copy. That means the referenced objects are still "tied at the hip" because there are literally the same objects and you can't update the original without changing the copy as well. Sometimes that's what you want but sometimes not. The "not" is called a "deep copy" - Swift doesn't have that built in so you MUST explicitly implement all code to do it which generally means traversing all containers recursively to depth and copying everything explicitly. That's entirely a programmer obligation partly because what must be copied depends on the specific data structure and application requirements.
I see. Thank you so much for the response. I'm going to search around for some resources on this.
I go to http://www.raywenderlich.com/. When i tweak them, I usually go to stackoverflow for some tips and proper use of codes. 
This is nice if you're learning from ground up: https://www.hackingwithswift.com/ 
Here is a list of various sites offering tutorials that I have put together over at my site https://manitobaninja.wordpress.com/2016/01/22/a-collection-of-swift-tutorials/ A few have already been mentioned but there should be something within that list that is just right for you.
Thanks =D
how about this? https://gist.github.com/sooop/d5a2ce9541a7f706274c
freddy vs json. I get it. 
That helps a lot, thanks!
As is it right now, you are calling returnMyString on the class. You need to call returnMyString on an instance of Class1.: let class1Instance = Class1() let newString = class1Instance.returnMyString("returned String") If you want to call returnMyString like: Class1.returnMyString you need to make the function static: Class1 { static func returnMyString(string: String) -&gt; String .... }
I would recommend against this. I just watched a part of his video and his coding style is awful. There are so many better resources out there.
Ok thanks. Apple's video doesn't stop for a text while mine does, is the only reason for this because they are Apple and have access to this stuff or is there a workaround? Snapchat for example can take continuous video through incoming texts.
You might want to rewatch the two autolayout videos from WWDC 2015: - https://developer.apple.com/videos/play/wwdc2015-218/ - https://developer.apple.com/videos/play/wwdc2015-219/ Tons of good info packed into those. Both discuss content hugging and the first talks about compression resistance. The transcripts are also there, on the Transcript tab, if you are more of a reader than a watcher. Also if you download the videos, from the Resources tab, and watch them with VLC you can speed up playback which I find useful for lowering the time commitment.
I think that this version: guard let foo = bar, let bar = qux, else { return nil } Is the nicest-looking, but since Xcode will automatically change it to: guard let foo = bar, let bar = qux, else { return nil } whenever it gets the chance (i.e., if you copy and paste, or default-indent a region), it's probably not worth the hassle. This version: guard let foo = bar, let bar = qux, else { return nil } Is what I do in my own code.
There's nothing inherently wrong with force unwrapping an optional. It just means that when the optional value is nil, you'll get a runtime exception (meaning the app crashes). If the app *should* crash when that value isn't present, then go with this pattern. If you want to handle things more gracefully, you should add code to do so in the form of if let and guard statements. EDIT: thanks /u/foBrowsing for correcting terminology between implicit vs force unwrap.
Alternatively, if a variable cannot possibly be nil, then it shouldn't really be an optional in the first place, and the code structure probably isn't optimal.
Well now that parse is pretty much out of the option, you'll probably want to roll your own infrastructure. And like Catfish_Man said, you're better off setting up an xmpp server.
You are right, I meant forced unwrapping. I don't have a problem with implicitly unwrapped optional variables at all.
Fair enough. What I dislike is that all the marshalling code you write is basically redundant - the data types are already defined and named, often identically to the JSON. Really, the code you write for stuff like this just adds ways you can screw up. On Android I've tended to start using JSONSchema2Pojo to make my GSON models. Then just write the schema, check that in and share it between projects.
Assuming the input file you're testing with uses canonical input (i.e. reads are processed when the return key is hit), `str` includes the newline character. You can account for this in a number of ways, of course; Using `while char != "y\n"` would require an exact match, whereas `while char.characters.first != "y"` would only match the first character, and etcetera.
Exactly right. Thank you.
Also Parse is shutting down so I would look at other options. 
I'm not sure that I agree with you about IUOs - do you have any examples of where they're useful outside of cocoa frameworks?
In your code, you register with the OneSignal API. Then, from the OneSignal dashboard, you can: - send push notifications to specific groups of users - send push notifications to nearly every platform out there - schedule push notifications to be sent at a later time - realtime analytics - localization - A/B testing Some of those you can do with _your own backend_ ^_tm_ but OneSignal does it all for you and for free.
do you not still have to maintain a custom DB schema for you app? does it offer any kind of web service (for example logic run on server side to generate push notifications on some event)? 
I did [this course](https://www.makeschool.com/online-academy) and it was amazing and I learned a lot. 
Usually methods that begin with `init` in Objective-C are constructors.
Sure. Because of the way initialization works in Swift, all of your non-optional instance members must be set before you call your superclass initializer. But what if you have an instance member that, for whatever reason (maybe it depends on a superclass member), can't be initialized until after the call to the superclass initializer? An implicitly-unwrapped optional is perfect here. The member has to have an optional type to make the compiler happy, but since you're giving it a value in the initializer, there will never be a time when the value is `nil`. If the instance exists, the member exists. So in all the rest of your instance functions, you can just treat the value as if it weren't optional in the first place.
It's also worth noting that content hugging and compression resistance don't mean anything unless the view/control has an inherent size. A view that doesn't have any particular size (a solid colored background, a tiled or filled background image, etc.) doesn't have anything to hug or anything to compress.
Same here. It also uses incredible amounts of CPU
100% in agreement. Slack's OS X app is like this. Just the Slack web app in a WebView. It's (as of a year ago when I gave up on it) fucking terrible; it's actually even less useful than just using it in the web browser because by default WebView is missing basic things like *a context menu item that lets you download an image*. Make a real app. If you just want people to use your web app, encourage them to do it in the environment for which it was actually designed: the web browser. 
We've created a video to show the progress and features of the CLI tools https://vimeo.com/153994218
You'll probably have to interface with ObjC frameworks and work it form the ObjC side and documentation. There is an Apple doc about [working with ObjC code/frameworks in Swift](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html) 
I see you miss Usenet too.
Writing the code is not the problem, taking care of a server is. You have to keep it up to date, install updates, get a downtime notifier, then investigate if anything goes wrong. If your app grows you have to scale it. Dealing with all this crap is a DevOps job, and since I can't afford a DevOps guy, easier to pay 3rd party service to take care of it.
I was looking for something like this! Email lists sucks for large volumes and the interface swift.org provides makes me sick. If it works (some people are saying it doesn't), I'll use it It would also be nice for this to be open source so that this project doesn't die from lack of activity.
The most efficient would be to implement the "func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath)" delegate method. In this method you get the indexPath of the taped cell, use this information to get the Json back from your datasource array. An other approach, would be to subclass the cell and add a property like additionalInfo, which can handle any object. Remember, you have to set this for every cell, in the "func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell", or to nil if you don't have an other object. Otherwise you could get strange results when reusing a cell.
Works fine here, however it is still in beta. Some people seem to experience a bug when they subscribe to all lists. I'm investigating that. 
Hey, could you start 'http://console.app ', type 'Hirundo' in the top right search field. Does it write something? (If yes, what does it write)? Also, could you try removing the lists and only adding one (swift-dev)?
It is a beta. There're bound to be bugs. 
Not sure, I was bothered because I really wanted it myself. Let's see how this plays out. It was fun building it, though.
How do you pass the label? The most common way to do this is in the `prepareForSegue` function. From there, you can figure out which row has been selected by calling `indexPathForSelectedRow` on your table view. Then, you can access the view controller of the new view by calling `destinationViewController` on the segue.
The problem with your first approach is that you don't have a reference to the new view controller in the `didSelectRowAtIndexPath` function, so you do have the values, but you can't pass them.
This works for me: @interface MyApplication : UIApplication @property NSDate* lastEventDate; @end @implementation MyApplication - (void)sendEvent:(UIEvent *)event { [super sendEvent:event]; NSSet *allTouches = [event allTouches]; if ([allTouches count] &gt; 0) { // To reduce number of resets only on a Began or Ended touch. UITouchPhase phase = ((UITouch *)[allTouches anyObject]).phase; if (phase == UITouchPhaseBegan || phase == UITouchPhaseEnded) { self.lastEventDate = [NSDate date]; } } } - (BOOL)hasBeenIdleForTimeInterval:(NSTimeInterval)timeInterval{ NSDate* lastEventDate = self.lastEventDate; BOOL wasIdle = YES; if (lastEventDate != nil){ wasIdle = (-1 * [lastEventDate timeIntervalSinceNow] &gt; timeInterval); } return wasIdle; } - (void) performIfIdle:(NSTimeInterval)idleTime block:(void (^)()) block{ if ([self hasBeenIdleForTimeInterval:idleTime]) { block(); } else{ dispatch_after(idleTime/2, dispatch_get_main_queue(), ^{ [self performIfIdle:idleTime block:block]; }); } } @end 
Have you looked at something like Electron?
Crashing apps are really a bad way to handle exceptional states. Why don't you just log the failed unwrapping and return early? An app that doesn't do x when button y is pressed is so less painful than an app that crashes when button y is pressed.
Would love to have the occasional google hangout every now and again! :) Video chat :) I will PM my skype name though if thats alright
For me forced unwrapping is a code smell and I tend to remove occurrences or simply not ever write this kind of code. I always use at least guard to make sure everything is set up properly and I simply stop executing the code and log the error at the point the requirements aren't met. Crashing looks really bad on your app and customers are less disturbed by a "button not working" than an app crashing. People tend to go with the pattern Apple uses for outlets. I don't trust outlets to exist, ever, since UI elements can be removed without generating a compile error.
Ah, ok. That makes sense. I'm not very familiar with initialisation in Swift.
Create a model for your JSON data: final class YourData { var bandID: Int var bandName: String init { // Initialize variables with your serialized JSON } } In your UITableViewController, create an object to store your data: var bands: [YourData] = [] Under the bands array, create a variable to temporarily store the selected bandID: var selectedBandID: Int = 0 In cellForRowAtIndexPath, create an object to get the data from (index == indexPath.row) of your data object: let band = bands[indexPath.row] This way it's easy to display the data for each row: cell.textLabel.text = band.bandName Under didSelectRow: let band = bands[indexPath.row] selectedBandID = band.bandID In prepareForSegue (or other method to display your destination): // You obviously need to create a method in your destinationVC to receive the bandID destinationVC.selectedBandID = selectedBandID
Drag a container view to your view controller. And then drag a tableviewcontroller and connect the container view to the tableviewcontroller by right clicking and dragging. You should get a drop down menu, then click embed. 
What you need is a custom cell. Follow this: https://www.weheartswift.com/swifting-around/
Thanks. That actually makes more sense!
This is pretty unnecessary. You can put a UITableView instance in any view controller, not just a UITableViewController. You can set anything as that table view's data source and delegate. It's better to just add the UITableView directly to the View Controller's view and go from there
Ask them how they plan to distribute the app. App Store requires apps be compatible with the latest OS release no matter what.
Wow, I didn't know this. Do you know where I could find some information on this so I can link it to them? 
Related: [What's the difference between using CGSizeMake and CGSize? Is one better than the other?](http://stackoverflow.com/q/34981995/2415822)
Awesome project. Can Blackfish be embedded within an iOS/OSX app?
I don't see why it shouldn't, but it's untested. I currently use it in an OS X project and it works fine. I will start to add tested support for iOS and OS X in the future, and am always happy to accept pull requests from others before hand. 
https://developer.apple.com/support/app-store/ That page quotes iOS 9 adoption at 76%, with only 7% of users using anything below iOS 8. See below for a rather complete list of what iDevices are capable of what OS version. Very few will not run iOS 9. It's rather shortsighted for a new app to target such a limited subset, given that very soon, iOS 9/X will be the last version of iOS a device will be updated with. http://www.everyi.com/by-capability/maximum-supported-ios-version-for-ipod-iphone-ipad.html
haha lowercase letters? I use capital letters and somebody answered my question with exactly what I did NOT want... ;)
There's also the mixpanel iOS 9 adoption that you could use to show. It currently states around 85% iOS 9 and 11% iOS 8, leaving only 4% of users on iOS 7 and below https://mixpanel.com/trends/#report/ios_9 
I actually showed them this in our initial project presentation. For some reason, they imagine most of their clientele as the types of people who have the first generation iPad/iPhone or something and refuse to even upgrade their software. I'm trying to gently suggest to them to bump it back up but am unsure of how to approach it politely after they already told me no.
General practice for iOS apps is to support the current major release, and one release back; so 8 and 9 now, 9 and 10 come September. To support farther back than that is generally not worth it from a development cost and feature support perspective. You'll notice, the current version of Xcode no longer supports the 7 simulators, that's Apple's way of pushing developers along....
What is the relationship between Blackfish and Vapor? Did you use Vapor just as a "base" and are heading in a different direction, or are they going to remain similar?
Very useful, thanks for this.
I would disagree, I think without any substantial data or analytics, there is a lot of effort being wasted supporting something that may not actually give any valuable return. There is far more evidence to suggest that the users will have updated their iOS devices to either the current or previous iteration of iOS, and little to none evidence from the client. This is something that any good "client" would need to provide as a business model, let alone pass it down towards their contractors. Speculation is not a viable business model. Whilst the client may be able to dictate what they want, they won't be able to have it if it's unfeasible. I've often refused to work for clients that want something that is unfeasible or improbable. It's sometimes wise to be firm in this situation and provide counter evidence for them as to why their assumptions are incorrect.
I agree with what you are saying. When you are an actual contractor discussing a project with a client, if they don't have hard data supporting their desire to be iOS7 compatible but still force that requirement then they are probably going to be a nightmare to work with and not worth taking on the contract. However, this is a school project and the "clients" are specifying that they want iOS7 compatibility. I'm assuming this requirement is because the mythical client they are representing has the hard data stating that a significant portion of their target market is still using iOS7 and don't want to alienate these users. I believe that OP has done his due diligence of trying to educate the "client" but they are sticking to the iOS7 requirement. In the real world OP would be able to refuse to take on this contract (as a contractor, not as an employee), but as this is a class he's stuck having to work within these constraints.
I did that and it worked, But since Classes are... Reference Types (totally didn't pause there to look it up) and Structs are.... Value Types. If I create a new instance of Town... mySeattle = Town() Since classes are reference, if I change the population of Chicago, I also change the population of Seattle. Fred is the Wonder Zombie but he can't terrorize two places at once. So would the solution be EACH town be given it's own class? i.e. not struct Town() { ... } myChicago = Town() mySeattle = Town() But instead... class myChicago() { ... } class mySeattle() { ... } So each town will be it's own class with its own population? Seems wordy, but then again Swift (as I'm understanding) is still developing and everything I'm learning could be detonated into a brazillion brilliant pieces come WWDC.
The cell positions in the tableView are divided into sections and rows, and you could look at the indexPath as "coordinates" of the cell. The indexPath gives you the section and row of the cell in the tableView. Return e.g. 15 rows in the numberOfRowsInSection (default number of sections is 1), and do the following after dequeuing the cell: cell.textLabel?.text = "\(indexPath.section, indexPath.row)" And you'll see that the label shows the section and row number of each of the 15 cells. The dequeueReusableCellWithIdentifier method returns a reusable cell, which means that it doesn't create a separate cell for every row, but simply reuses the view from memory. This method is better for memory management than creating a new and separate view for every row. And "BasicCell" is the identifier of the cell, which should set in the interface builder if you created your ViewController there, or programmatically if you're building everything in code. Was this what you were looking for?
Hold up. This doesn't matter. I think you're confused about what "developing for iOS 7" means. That means developing an app that is compatible with iOS 7 and up. So unless OP creates an app that he or she doesn't make sure works on iOS 9 as well, Apple is not going to have any problem with "developing for iOS 7"
Being compatible with the latest iOS version doesn't mean you're not allowed to target older versions. You can still submit apps that target iOS 7 to the app store.
I think it's a reasonable request. 93% of users use iOS 8 and 9. Most of the remaining 7% use iOS 7. If the company wants to make their app accessible to 99% of users, then they will ask for iOS 7. However, supporting iOS 7 requires more development time (and hence more money), so they should know that as well.
This is particularly ridiculous because the only device that runs iOS 7 and nothing after that is the original iPhone 4. Everything else that supports iOS 7 also supports iOS 8 and 9. http://iossupportmatrix.com. Users on iOS 7 are there due to stubbornness, not due to being unable to afford newer devices, and people that refuse to update their software are not exactly a good market to try to sell software to. iOS 8 was also a big advancement over iOS 7 in terms of APIs and features that make developers' lives much easier. Supporting iOS 7 is a substantial increase in required work. I personally work at $MajorCompany, and we're dropping iOS 7 support left and right in our apps to let us clean up and simplify our code.
Yeah I understood the first part with how many rows in a cell, but i don't understand the second part func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell So dequeueReusableCellWithIdentifier method basically copy's the previous cell and creates a new cell for each row rather than manually created several different cells the same? Sorry if what I was asking for wasn't too clear. Only been coding around 2 weeks so my coding language is minimal
Yes it is worth it. I have been working with it since the first release and the differences between 1 and 2 were not that big. Odds are they aren't going to change it that much when they go to 3 either. 
&gt; who have the first generation iPad/iPhone or something Then it looks like you're going to have to target iOS 3.1.2 ;) (if I'm not misremembering)
What license? Couldn't see anything in the readme or repo.
All I/O operations are handed concurrently, or asynchronously, include request parsing. Then the request handling is processed on the main queue. Whilst this could easily be done differently as it's not dictated like the v8 architecture, it's been designed to be implemented the same by using gcd and the main thread. 
Hahahaha
Do you have the Ninja build tool installed?
I think you're missing the point. 7% is a small number to some, but its tens of thousands in revenue to others. Also I don't know what you mean by "they do”. They very much don't have a force upgrade mechanism for new OS versions.
I've gone for the Apache License and added it in to the repo now.
Following the instructions in the Swift README I cloned ninja-build alongside swift from git. Do I need to install it separately before attempting to build Swift?
You can't do this. Swift simply doesn't support it. This is on the list of things that the Swift team has said will be in Swift 3.
&gt; I think you're missing the point. 7% is a small number to some, but its tens of thousands in revenue to others. If 7% is $10,000, then 93% is $132,857. While, I'd love to make sure I get that $10K, I'm not gonna break my back for it when it's easier to focus on the devices that bring in $132K 😂 The cost/benefit analysis will probably show that it's probably not worth it to give up iOS 8/9 features to focus on building for iPhone 3's and 4's. You will *never* be able to practically develop for 100% of devices. There will always be some stuck outside...like I.E. 6 users 😆
EDIT: Some of those tutorials are right: Core Data is not a database. It's a powerful piece of technology that maintains a graph of objects for you. It just so happens that one of the persistence formats that Core Data uses is SQLite (this is where many people confuse Core Data to be a database). There are pros and cons for choosing a particular persistence format, but SQLite will serve your purpose well. In fact, you can even design your own persistent format and have it be anything, including a cloud service. What Core Data does: - Core Data helps you separate your model and controller (in an MVC paradigm), so that persistence becomes an implementation detail (more on this later). Your controllers are responsible for fetching/inserting data, and the model is the Core Data graph (known as NSManagedObjects, that live in a scratchpad known as the NSManagedObjectContext). - You can store a very large (or small) amount of data, and Core Data will fetch it for you efficiently (in terms of memory pressure) with a component known as the NSFetchRequest. You can also perform queries on this data using NSPredicate: It works much like SQL queries, but you cannot use actual SQL). Remember how I said the persistence layer is an implementation detail? Unless you're rolling your own persistence format, the SQLite file that it generates is off-limits to you. While there are certainly tools to help you grok the information stored in the SQLite file, you should not modify it in anyway. The schema generated by Core Data is also an implementation detail and is subject to change at anytime. You should only use the Core Data modeler in Xcode to define your schema. The confusing part is, all of this sounds like something a database does (fetching, predicates, and persistence), but remember Core Data isn't just about persistence. It manages the lifecycle of your application's model objects and allows you to perform operations on those objects. Some people also confuse Core Data to be an ORM, but it isn't. In fact, you're better off asking this clarifying question early on, because when developers treat Core Data as a database, they run into serious architectural and stability issues. Let me know if you have any questions or if you need to me to clarify something. EDIT: Some of those tutorials are right: Core Data is not a database. Any site or person that tells you otherwise is 100% wrong. Like I mentioned above, those that treat Core Data as a database probably have serious issues in their applications. (original before edit: The tutorials are right: Core Data is not a database)
So I had a very similar class when I was in college, this is actually going to be a pretty good experience. They are your clients, and part of having clients is being able to manage them and persuade them to do things that are in their own best interest. Developing a new app for iOS 7 is not worth it, other people have posted the numbers for you, that's pretty obvious. I would also follow the rule of developing for iOS 8 and 9 (always support one back). You need to go to them and explain that the very large majority of users are not on iOS 7. The people that are on iOS 7 are likely not very actively using and downloading new apps. By the time you finish this project you'll be a few months away from the next version of iOS coming out...in which iOS 7 use will drop to relatively meaningless levels. You have to explain that you can be more productive (you can bring up that the latest Xcode doesn't even support iOS 7 simulators...and developers keep up to date with Xcode) and take use of features that require iOS 8, and convince them that every line of code you write specifically to support iOS 7 is increasing future technical debt. 
That color scheme makes me suicidal. :(
Without knowing more about what you're doing, I doubt people will be able to help very much. For example, my initial impression was "why is a server involved at all? Just save the user profile picture locally and reap huge reliability, performance, and cost benefits".
Little update: Spoke with clients today and brought up a lot of these points in the thread. No idea why he's holding so firmly on to this, but he didn't seem happy that I was bringing it up again. Guess I'm gonna roll with it and use it as a learning experience!
For the record, MongoDB is not a backend, just a document based database.
You have to tell them what they are giving up by not allowing frameworks/features for iOS 8+. Until then, they will want 100%. Just say, "See these cool things? You can't do this on iOS 7 devices." They will want the cool things.
Thanks.
Place [this](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISearchBar_Class/) at the top, and have the viewcontroller become a UISearchBarDelegate for a callback for text edited. Then each letter you refresh the tableview and filter based on whatever content you're searching by.
Essentially the app is like meet up app, and in the app everyone creates a user name and submits a profile picture. Within the app theres a view that shows all the profile photos in a collection view. I was previously using parse, but since its going to shut down i've been looking for a new server. Either on a cloud or a computer that can hold this kind of information with a relatively easy implementation with an IOS app. I'm a total beginner to development and I just wanted to use something that was easy and simple like parse.
Well you could've at least select a better color scheme. Do you know[Charmeleon](https://github.com/ViccAlexander/Chameleon) , this can easy integrate into Xcode and IB and you can make a lot of difference by using correct color patter. Good luck with you first app 
Sounds like your problem is more with your clients and target audience than it is with Apple. Seriously. Apple has chosen to "move quickly and keep moving quickly". They always have. You can keep up (you *are* in /r/swift right now), but it seems that many of your customers cannot. Who's problem that is is the big question here. You seem to say that it's Apple's problem. Maybe it's your client's problem...or your user's problem.
Again, we don't have a client, our customers are our clients. It's down to opinion whether you think users are the problem or not, but denying that this this problem has been created by Apple is naive. Regardless, in our organisation labelling users as the problem is considered poor form and bad for business - largely because we have evidence that it is. I'd put this in the same category as the "it works on my machine" mentality.
I only have optionals when I deal with external systems like databases, API's, user input, outlets and so on. The core of my program does not use optionals unless it really has a meaning (but that's very rare). So in the buffer layer like my ORM mapper there are optionals but I don't send optionals to my UI or to store them back into the database. If the field UserId is nil then the program cannot continue, but I should be prepared for this as crossing a boundary in software to an external system (even if it's just the UI of your app!) should never be trusted. Same goes for API access, user input (or the lack of) and so on. The "don't know what to do, perhaps crashing is better" exceptional states should happen in your core software that should already work with the cleanest possible data to begin with. So yes, unwrapping should never crash your program. Ever.
It is very similar node.js [TRevi!](https://github.com/Yoseob/Trevi) Trevi Support View Engine, Router and a lot of Middleware that you made
 &gt;You will *never* be able to practically develop for 100% of devices. There will always be some stuck outside...like I.E. 6 users 😆 Exactly! You have almost zero potential to cover all devices and frankly you shouldn't try too. Supporting old hardware and software just Boggs down your whole app, leads to excessive numbers of bugs and extended development times. 
Companies do such things all the time. The harder the economic conditions the more likely old stuff gets dropped. I see this all the time in the automation industry, whole product lines get dropped overnight and the customer ends up scrambling to adopt. Often the strain or burden of supporting old system is so overwhelming that the support has to be cut. In this case though we are taking about a new app where building in legacy support for a population that might not be able to use the app for other reasons makes no sense at all. I really see your position as a bit of fantasy. It is the sort of thinking that screws up a lot of software projects with unjustified features. 
Hey I'm in! I'm in love with Swift and am starting my first Dev job in March. I've been looking for a meetup group. I'll message you. 🤓 P.S. This is my Swift blog: http://swiftwithjustin.co
Excellent! That is a start. If you also want to send out the word too then we can see what other interest there is out there.
I just finished writing a tutorial about Core Data, and it took me quite a few tries to write some parts because I wanted to make sure I was being as clear as possible. (Note: the tutorial is not online for free just yet, but [when it is this is the link](https://www.hackingwithswift.com/read/38/overview).) Based on what you've said, Core Data is absolutely the right choice. In your case, it will back onto SQLite for saving things to disk (persistence), and you won't need to manage that database directly. Core Data is an object graph framework that also handles persistence. That means it manages objects (a truck), groups of objects (a fleet of trucks), related objects (a shipment that contains a fleet of trucks) and more. You can query these objects: "find all trucks that have been over 10,000 miles" or "find all items that took more than a day to be delivered". Core Data can do all that in memory, but more frequently it converts your query into SQL that is executed on an SQLite data store. It then fetches the results and gives them back to you. There are good reasons to use and to avoid Core Data. For example, Core Data follows Apple's "lazy loading" principle, so if you made a query that returned 100,000 objects Core Data will return you (for example) only 20 at a time, but as you use more it will load more automatically. It also means you don't need to write any sort of database management code: you just tell Core Data what you want to store, and it figures out how to do that. This is particularly important when your data model changes over time, which is something that Core Data handles very well indeed. (Note: Core Data does have its own boilerplate code as well as unique terminology.) Among the reasons not to use Core Data, the first and most important is if you're aiming for a cross-platform app. If you intend to target multiple platforms, you will probably find that using SQLite directly is a better idea because your structures and queries can be shared. FWIW, in my own apps I have used SQLite directly and Core Data, depending on which was right for the situation – it's not black and white.
I believe so. There's also a way to build it without Ninja, the help option will tell you how.
That's fine if you don't have an actual Table View Controller. You can just just make the segue from the View Controller that contains your Table View. The important bit is that the segue should be between whatever View Controller is your UITableViewDelegate and the Detail View Controller. 
I'm also interested in this. Here's a repo someone set up listing alternatives: https://github.com/relatedcode/ParseAlternatives
You can use let weakStorage = NSHashTable.weakObjectsHashTable() weakStorage.addObject(myWeakObject) Edit: [Apple's Documentation](https://developer.apple.com/library/prerelease/mac/documentation/Cocoa/Reference/NSHashTable_class/index.html#//apple_ref/occ/instm/NSHashTable)
Fighting the good fight is a good way of putting it - it's sad that we do so because we have to though. And you're right that Apple don't care because they don't have to care. Ultimately this model works for their customers, even though it doesn't work for ours.
&gt; Again, we don't have a client, our customers are our clients. When you talked about it being down to "the client", this wasn't the type of client you were referring to and you know it. &gt; This really has nothing to do with the users Users choose to stay on old OS versions. I have no idea what you're getting at here, of course it's about users. &gt; Again this has nothing to do with users, it is simply bad decision making on the part of the organization. I can only hope you're not a business owner because dropping perfectly good profit sources is a worse business decision than living with difficult technical decisions ... &gt; Remember we aren't talking about legacy apps here but rather the development of a new app for the clients. That's what we were talking about orignally. The conversation has now moved onto talking about legacy support for old OS versions at large. You are free to not contribute to this fork of the discussion.
Hey, I'm currently going through a very similar case to yours, let us stay in touch to see what we can find to support our apps, I'm a new developer too. 
this HN thread is old but it has me thinking twice about Fabric. [link](https://news.ycombinator.com/item?id=8493797)
Finally! The perfect complement to my weird inability to offer advice unless I'm elaborating on someone else's! I see a lot of potential in this dynamic if expanded. Surely you can also sleepily flirt with prospective sexual partners at a bar, and then I can swoop in and... teach them Swift?
Parse.......jk. Damn you facebook!
That is old, they've basically started from scratch on it. http://www.ibtimes.com/how-twitter-inc-twtr-convinced-250000-mobile-app-developers-fabrics-worth-2151216
thanks so much.
This is what I have found so far: let mediaPicker = MPMediaPickerController(mediaTypes: .music) mediaPicker.delegate = self mediaPicker.prompt = "Select song (Icloud songs must be downloaded to use)" mediaPicker.allowsPickingMultipleItems = false mediaPicker.showsCloudItems = false presentViewController(mediaPicker, animated: true, completion: {}) But this only creates the picker. I'm not sure how to use it to store the chosen song on a button. What would I add to this could to make this possible? Do I use the MPMediaItemPropertyAssetUrl? What would that look like in swift code? Any coding examples would be helpful?
You're right. I missed the small print. +1 for the code review :D
Swift is production ready in that it will be stable at runtime. But the language is evolving, and the annual major release bump isn't out of the range of breaking changes. So while your code won't need changing as long as you're on Swift 2, upgrading to Swift 3 will likely break your code unless you try to write code that's compatible with both versions (which might be tough). Xcode is also definitely lacking, but that's a minor concern. Also, it absolutely is not production ready for Linux yet.
That's perfectly fine. By the time you'll use the variable, the view will have loaded, so the variable will be set in `viewDidLoad`. There should never be an instance where the variable is not set before use (unless it's unset at some point).
Standard-ish yeah. The "right" solution to that is something like Rust's old "type state" feature that lets you specify that your object has transitioned from a "new" state to a "fully initialized" state… but that feature had enough problems that Rust ended up removing it from the language. So in the meantime, implicitly unwrapped optionals will work fine for that sort of thing.
I completely agree. As I said, I don't expect much from releasing this app as is now. But I will definitely update the UI. I'm going to start getting myself familiar with Sketch (already have a book or two on it from design+code). My thought process is to first add an Apple Watch extension (Apple Watch design is very minimal and there are only 2 screen sizes so this should be easy), then I will go back and focus on the UI. Thanks for the links, they will definitely come in handy. 
AWS Mobile Hub
Actually, never mind. Extending to an array will be simple.
I showed this at the bottom of that code example. You can keep an array of WeakBoxes, and whenever the WeakBox inside the array becomes the last reference to an object, the WeakBox inside the array will have a value of nil.
Y duh thanks.
You create entities and relationships between entities. Then you have contexts, fetch requests and objects instead of connections, SQL queries and dictionaries. In other words, Core Data manages an resizable object graph in memory for you under its own faulting &amp; concurrency model, and SQLite is just one kind of incremental stores it can use. People claim Core Data is not a database since it lacked several critical batched operations. But since iOS 8/9 there are also batch delete and batch update available, though with some caveats.
While I can definitely appreciate the learning experience of having shitty clients, they have the rest of their careers to deal with that. My opinion is that a big senior project should be something the student is excited for. 
It's a student project, though. Doesn't sound like they can use the, "you can have it, but it will cost more money" approach here.
It is production ready. Yes Xcode doesn't support everything with Swift yet, has a lot of growing. But in general they're not big issues in my opinion. (they're only big if they never get to them) Swift 3 is going to break a lot of code, so if you can afford in 6 months to spend a few days - a week or so fixing code, then it's not a problem. You have to weight the costs vs benefits...I wouldn't say every company/person should do it, but I definitely wouldn't say no one should.
Thx for the suggestion. Audio kit looks very useful and I look forward to trying it out, but after installing the framework I'm getting the error Use of unresolved identifier 'AKManager' though it recognizes AKOscillator
So should I continue learning swift 2? When is the release date for swift 3?
[AWS Mobile Hub](https://fabric.io/kits/ios/amazon)
What if I want to store photos?
You should do it in awakeFromNib instead
A question mark is for when you don't know if there is a value or not. The exclamation mark is for when a value is promised to you, whether there is a value right now or not. It's a promise basically.
The cases of an enum list the possible values of that enum type; the cases aren't types themselves, so you can't use them as a type (i.e. you can't say that a variable has type `Leaf` or `[Leaf]`). If you want to do that, you have to make `Leaf` a type, which is what I recommend you do - e.g., define a `struct` for the different cases you have. Then I'd define a protocol `Tree`, which requires a function that returns children (and whatever other stuff you need) that all the structs conform to. You can implement the `flatten` function as an extension of that protocol. The different structs can then have "special" features, e.g. `GroupOfLeavesOnly` contains `[Leaf]` as it's children.
It's time that Apple opens the cloud system to other devices too! They already open sourced Swift. Having iCloud open to all developers is actually more $$ for them as it will increase the traffic. Am I right?
I don't see how anyone could not understand that the two parameters for Point are x and y?
You're running into issues related to when things happen in the storyboard vs. in code. All it really is is a timing issue, which is why you're getting a crash saying that the label is not initialized. You specifically need to call something that allows for the interface builder to do all of its jobs beforehand. That's where awakeFromNib comes in. From documentation (https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/NSObject_UIKitAdditions/#//apple_ref/occ/instm/NSObject/awakeFromNib): awakeFromNib "Prepares the receiver for service after it has been loaded from an Interface Builder archive, or nib file." Note the timing there. By the time this is called, your view "is guaranteed to have all its outlet and action connections already established."
Please, let me know when refactoring will work for Objective-C. Or maybe I'm just too spoiled by JetBrains products that do not crash my IDE during refactoring and have way more features? Software written in Swift is stable, there are very little bugs left in the compilation toolchain (and I don't expect Objective-C is 100% bug free either in weird corner cases) and there is a lot of software out in the wild that uses it partly or is written completely in it (I heard a percentage of 11% in the top 200 apps the other day). Swift 3 will not be a big change from Swift 2 like other changes we've seen, there will not be super fundamental changes to the language anymore like in the Swift 1 trajectory or when going from 1 to 2. The big change will be the renamification of Cocoa, which is a very good thing to me. Don't know how well the migration tools will work, but since the calls to Cocoa will still be fundamentally the same I think you can get a lot of mileage from them going from 2 to 3.
[awesome guide for migration to heroku with parse server](https://learnappmaking.com/how-to-migrate-parse-app-parse-server-heroku-mongolab/?utm_source=SocialWarfare&amp;utm_medium=twitter&amp;utm_campaign=SocialWarfare) it is better then other baas because 1) you do not have to rewrite frontend (several lines in App Delegate only) 2) it's cheaper to scale 3) you have control over database (no background updates when you dont want them like in FireBase) 4) you spend probably less time to migrate to heroku then to rewrite frontend, but by learning how to set up Parse server you can easier deploy it to your own server when you decide you want to have one
Just a bit of an update I have also set up a Slack channel, which I am working on getting an invite page all set up for, so in the meantime you can DM your email to my Twitter (@manitobaninja or @third_beach) if you want an invite.
Like others have said look into amazon web services.
Apple hasn't come out and said "using this on android is okay" It isn't safe to assume it will work out fine until they do
Fabric is twitter's collection of tools, I would not be suprised if it is EOLed soon due to staff cuts I'd suggest firebase as a safe bet, or writing some code on top of Amazon Lambda
Guess what... :) I've gotten C++ interoperation working through the C bridge. Check out the SO answer that I've posted. Works great. I'm in the middle of creating the Swift class encapsulation to make it cleaner right now. :) http://stackoverflow.com/questions/35229149/interacting-with-c-classes-from-swift/35230973#35230973
If I'm understanding your needs correctly, there's no reason to add another backend-as-a-service just to store images. Why not continue to use Firebase for key/value storage and use AWS S3 to store your binary data (e.g., the profile images)? When a user sets their profile image, you upload the image directly from the user's device to an S3 bucket and store the URL for the uploaded image in Firebase.
If you achieve that, it's the best way to get your app denied by the AppStore review leprechauns. 
Looks like this is possible with `@asmname`. See the answer by Sam R.
Thanks for posting this. I always used Parse because it was so simple, and the official guide that they released a week ago was so incredibly complex I decided that I would wait in hope that someone would make a simpler to understand guide such as this one. Thankfully, that was the case.
I'd suggest looking into swifts version of lambda. 
Such a simple solution. Don't know why I didn't think of that. Thanks!
You could use a range literal and the fact that anything divisible by both 3 and 5 is also divisible by 15 to simplify the control flow a bit. for i in 1...100 { if i % 15 == 0 { print("FizzBuzz") } else if i % 3 == 0 { print("Fizz") } else if i % 5 == 0 { print("Buzz") } else { print(i) } }
A `switch` statement is maybe nicer still: for i in 1...100 { switch (i%3, i%5) { case (0,0): print("FizzBuzz") case (_,0): print("Buzz") case (0,_): print("Fizz") default: print(i) } }
There's an argument to be made that this makes the intent of the code less clear but I find this so pretty. :)
Beautiful. 
Another option (If you're on OS X) is to wrap the C++ class in an Objective-C class. You can mix Objective-C and C++ code in `.mm` files, and have C++ class as an instance variable in the `.mm` file. You would need to make sure the header doesn't include any C++ code/imports. An example of me doing this is in [my fork](https://github.com/MaddTheSane/UniversalDetector) of the UniversalDetector framework.
The underscore is basically a wildcard for pattern matching, if that makes sense. It tells Swift that you don't care what the value is, while any other value in there (in this example, 0) tells Swift that for the pattern to match, it has to be 0. More information on the subject can be found in [this fabulous blog post](http://appventure.me/2015/08/20/swift-pattern-matching-in-detail/).
for i in 1...100 { var stringToReturn = (i%3==0) ? "Fizz" : "" stringToReturn = (i%5==0) ? "Buzz" : "" print(\(stringToReturn.isEmpty ? stringToReturn : i)) }
thank you, definitely bookmarked for future reference. Damn you facebook.
Indent each line with 4 spaces to get proper code formatting =)
You are overestimating how much of the language changes between versions.
Here's an enterprisey version, just for fun: typealias Printer = (value: Int) -&gt; String infix operator ∘ { associativity left } func ∘ (left: Printer, right: Printer) -&gt; Printer { return { return left(value: $0) + right(value: $0) } } let printerFactory = { divider, value in return { return ($0 % divider == 0 ? value : "") } } let fizz = printerFactory(3, "Fizz") let buzz = printerFactory(5, "Buzz") let printAndFormat = { (printer: Printer) -&gt; ((Int)-&gt;()) in return { switch(printer(value: $0)) { case let printerOutput where !printerOutput.isEmpty: print(printerOutput) default: print($0) } } } (1...100).forEach(printAndFormat(fizz ∘ buzz))
Hum last I used socket.io was a year ago and it was only client/server with the server hosted somewhere. Is that still not true? I'll read up on them. 
&gt;if i were to post some code, would someone help me out? Only one way to find out...
 let videoURL: NSURL = NSBundle.mainBundle().URLForResource(instrumentaimp4[skaicius], withExtension: "mp4")! let sakeleURL: NSURL = NSBundle.mainBundle().URLForResource("sakele_blikas", withExtension: "mp4")! player = AVPlayer(URL: videoURL) player?.actionAtItemEnd = .None player?.muted = true player2 = AVPlayer(URL: sakeleURL) player2?.actionAtItemEnd = .None player2?.muted = true let playerLayer = AVPlayerLayer(player: player) playerLayer.videoGravity = AVLayerVideoGravityResizeAspectFill playerLayer.zPosition = -1 let playerLayer2 = AVPlayerLayer(player: player2) playerLayer2.videoGravity = AVLayerVideoGravityResizeAspectFill playerLayer2.zPosition = -1 playerLayer.frame = CGRect(x: 50.0, y: 100.0, width: 240.0, height: 433.0) playerLayer2.frame = CGRect(x:647.0, y: 90.0, width: 115.0, height: 44.0) view.layer.addSublayer(playerLayer) view.layer.addSublayer(playerLayer2) player?.play() player2?.play() //loop video NSNotificationCenter.defaultCenter().addObserver(self, selector: "loopVideo", name: AVPlayerItemDidPlayToEndTimeNotification, object:nil) } func loopVideo(notification: NSNotification) { if let finishedPlayer = notification.object as! AVPlayer! { if finishedPlayer == self.player2 { self.player2?.seekToTime(kCMTimeZero) self.player2?.play() } else { self.player?.seekToTime(kCMTimeZero) self.player?.play() } } }
That's really clever. But I always thought FizzBuzz is more about printing out both Fizz and Buzz, instead of putting both of them at once. The best I could get wasn't as nice :( for i in 1...100 { switch (i%3, i%5) { case (let a, let b) where a != 0 &amp;&amp; b != 0: print (i) case (_,0): print("Buzz");fallthrough case (0,_): print("Fizz") default: break } } 
Just out of curiosity, what makes your GCD implementation *optimized*. Just seems like a standard recursive implementation to me.
I was very excited until I realized that this depends on foundation and is cocoapods only. Any plans for SPM compatibility and maybe loosening up on foundation?
It's kinda hard to tell without seeing the destination VC, but maybe define the destination VC constants as variables instead. When I pass data from one VC to another, I use variables on the latter.
swiftc may reliably produce binaries that doesn't crash, but a language's degree of 'production readiness' really is about more than that. I'm porting a large ObjC project to Swift at the moment, and I certainly don't feel that Swift is 'production ready' in our case. [Compiler crashes](https://github.com/practicalswift/swift-compiler-crashes) are still fairly common despite recent improvements. Compilation error messages are frequently very [misleading](https://bugs.swift.org/browse/SR-325) or plain wrong. The current need to bundle the Swift runtime &amp; libraries along with every App adds &gt;20MB to its size which can be unacceptable to clients when it comes to release. In our case, we produce an SDK which cannot be released until the ABI is stable. That combined with the immaturity of tooling means that Swift is far less ready to be worked with in a production environment than other, mature languages. Please don't be so quick to accuse people of trolling, this is a valid question.
Although that code follows the directions more "directly", I think we can all agree its harder to read.
Why the default? This works just as well and flows a little better imo for i in 1...100 { switch (i%3, i%5) { case (0,0): print("FizzBuzz") case (_,0): print("Buzz") case (0,_): print("Fizz") case (_,_): print(i) } }
Yeah, I tried to keep the code to a minimum. Also altered the names a little bit to make it easier to read. But everything that's supposed to change in the destination VC is set to be variables.
prepareForSeque is a common method that everyone uses, so if it were buggy, then LOTS of people would be griping about it. That's a nice way of saying, that it's your fault somewhere, and if you aren't gonna share the code, then you have to find it yourself :D
Here are a couple checks for ways I can think of this happening. Ensure there are not two instances of the SceneOneViewController. To do this, set a break in the code you showed and set a break in the view did load of SceneOneViewController. On the first break, p sceneOne and note the object's address. On the second break, p self and ensure the address matches the previous address. Ensure that, after setting the properties in the code above, that SceneOneViewController isn't changing them. Probably easiest to set a break on one or more properties (such as 'item') and ensure it only gets set where you expect it to. Finally, there's something very odd when you say, "It has worked well for some time now, but all of a sudden it doesn't pass the data..." Normally this is one of three things * something has changed (!!! duh). If you are using source code control and 'commit early, commit often' you could check out successively older versions until it works and figure out what changed. If no older versions available, try to remember what you did. * something weird with the project, try Product-&gt;Clean (with alt held down to really scrub those hard-to-reach areas). It should ask if you really want to delete the build folder. Then build and run to see if undesired behaviour still present. * (this is the tough one). Whenever I am in a situation like this, I sometimes find my mind wandering into a fantasy world where it is the computer's fault, or Xcode's fault or the language's fault or my cat's fault or... In other words, anyone else's fault but mine. Then I am abruptly awakened from that dream when I find the solution only to discover that it was...all together now...MY FAULT ALL ALONG. But, unfortunately, I wasted time by not being assiduous in tracking every possible reason because I was (unconsciously) certain it just couldn't be me.
&gt;The version control. - Work on 1 task/feature at a time. - Unit-test it. - When you say, "OK. Done. What's next?...", it's time to commit. If your commits cover too much stuff, then rollbacks will undo waaaaay more than you want to.
&gt; But on the other hand it can't be good to commit changes I'm not sure are working as they're supposed to either? This is the challenge: source code control should be useful in two situations * whilst developing: do a bit, check it in, do a bit more, check it in, do a bit more, uh oh, now figure out what went wrong..jackpot! you've got all your previous versions nicely available! * when looking back after a certain amount of time has elapsed, you maybe don't want to see millions of checkins containing tiny differences and with many of them having errors or stuff which immediately changed in the following commit or so Fortunately, git (and I assume other of the modern source control tools) have solutions: branches and branches of branches, etc and then when finally a task comes together, fixing up the commits to get rid of the stupid mistakes. As you can see, I'm a follower of the, "yes you should 'change history' under certain circs school", whereas other people are followers of the "once something is committed it can never ever ever be changed...ever" school. My rule is that when I'm in the developing stage and committing little changes on sub-sub-sub-branches, I am allowed to fix that up however I want before finally putting it into the "share with others" branches. Whereas, once I have done that manicuring and committing, I then never change _that_ history; if something needs changing at that point, it has to be done 'forward only' ie by reversing changes or whatever. An analogy would be: when I dress in the morning, if I put my shoes on and then discover that I forgot to put my socks on, I will take my shoes off, put my socks on and then put my shoes back on. And no one outside of my bedroom will know (and no one will care) about the little aberration. It makes absolutely no difference in the rest of my day and certainly not in the rest of my life, to me or to anyone else, that I cocked up the shoe/sock thing that morning. Whereas I get the feeling the 'never touch history' group would wander around with their socks over their shoes for the rest of the day. ok, I'm exaggerating, but I hope I make it clear how I feel and why I feel that way; you should do some research and experimenting to figure out which way you feel most comfortable with. So, as long as you are learning Swift, you might as well Google around and see what commands and tools are available for source code control and play around with that at the same time. Then, when you are ready to do the serious work with Swift, you'll also have formed some good opinions and habits wrt source code control.
Yeah, this seems like very good advice! Thanks alot. I guess I'm a little bit intimidated by all the commands I have to remember in git. At least when having to push to an online repository as well. Yesterday I made a little cheat-sheet on my desktop, but getting all this branching to work properly kind of scares me a little :P I'm afraid I'll write wrong commands and suddenly wipe fully functional code (yeah, I'm not used to using the terminal) or something.
Depending on your needs, you could use the [Multipeer Connectivity framework](http://nshipster.com/multipeer-connectivity/). It supports streams as well as messages and resources. It should interop with OS X nowadays, but may not suit you if you want to multipeer with other platforms as well.
While delegation is a useful and practical pattern in many cases, the way it is used by UITableView is horrid. It fails to separate concerns and encourages you to combine view code with control code by forcing you to setup your cells, header titles etc. alongside providing list metadata (number of sections, number of rows, etc.) Yes you can abstract away from this but it's still frustrating. The custom data source sample linked to in this post does nothing to resolve the lack of separating concerns. &gt; Learn only as much as you need to ship it. If you're taking this approach to learning programming, I urge you to stop. The only way you can possibly know what is appropriate for a given technical problem is to have a good knowledge of the different tools available to you - delegation, encapsulation, inheritance, composition, facades, factories, and so on. These are all worth knowing and you will dig less architectural holes by learning them. To paraphrase an old saying: if all you have is delegation, then everything will look like a UITableView.
Can you provide an example of this? Lambdas are useful but I don't see how they would reduce LoC here.
haha thats ridiculously hard to follow.
Thanks for the thoughts. I can definitely understand where you are coming from. The posts I'm currently writing are more to expose patterns that are already inside iOS - not so much to debate if they are the "correct" ones to use. They are the ones we'll see everyday if we develop iOS apps, though. For more context about the quote you included, that's really relevant to me right now. Maybe it's fair to say that because now that I am experienced, I find myself needing to give myself a "cutoff" point. For instance, I'm digging around in Unity right now - and my first intuition is to learn everyyyyyythiiiiiing. But, there's a fine line there, because if I take that approach it's paralysis by analysis - I'll never release anything. Hope that gives more context!
Yeah I think multipeer is only for lan or local wifi no?
I'm not seeing your declaration of `mediaItem` (and neither is Xcode). Have you set up an `MPMediaPickerControllerDelegate` that creates it during a call to `mediaPicker(:didPickMediaItems:)`, or no?
yes, I set it up like this: class ViewController: UIViewController, MPMediaPickerControllerDelegate { Then I have code like this to play the item: func mediaPicker(mediaPicker: MPMediaPickerController, didPickMediaItems mediaItemCollection: MPMediaItemCollection) { let player = MPMusicPlayerController.applicationMusicPlayer() player.setQueueWithItemCollection(mediaItemCollection) player.play() self.dismissViewControllerAnimated(true, completion: nil)
Thank you :)
Thanks! 
This is a great answer. Now you just need to wait for a call from Google!
What value should I declare it as? I thought that the media item picker controller returned a media item. That is what I thought I was using. Im just trying to return the Persistent ID so I can store it. Am I going about this all wrong?
Honestly, could you provide the full scope that contains: `var songID = mediaItem.valueForProperty(MPMediaEntityPropertyPersistentID) as Int`? It would make it much easier to reason about than random fragments.
The reason you're getting the "unresolved Identifier 'mediaItem'" error is because 'mediaItem` doesn't have any meaning unless you set it to something. The result of the picker is provided to you in the `mediaPicker(:didPickMediaItems:)` call: func mediaPicker(mediaPicker: MPMediaPickerController, didPickMediaItems mediaItemCollection: MPMediaItemCollection) { guard let mediaItem = mediaItemCollection.items.first else { NSLog("No item selected.") return } var songID = mediaItem.valueForProperty(MPMediaEntityPropertyPersistentID) as! Int /* … */ } 
StackOverflow is your friend: http://stackoverflow.com/a/18910891/1223781
I'd tell you to use Parse but it just shut down. So yes, Firebase is a good option. Either that, or use Parse Server (check their GitHub)
Have a look at fabric.io I am no expert but i asked the same question and was pointed to this.
Google.
Wow man. You don't sound like you came into learning the language biased AT ALL! 
Why on Earth would *anyone* help you when you come at us like some irate customer?
1) We'd really appreciate keeping /r/swift a positive environment. 2) Depending on your environment you can import the appropriate module for your C standard library. Just as you need to `#include &lt;stdlib.h&gt;` in C, you need to either `import Darwin` or `import Glibc` depending if you're on OS X or Linux.
He clearly doesn't deserve help, ever. So what reasons are there?
Well, what's the error?
Okay.
 for i in 1...100 { var word = "" if i % 3 == 0 { word += "Fizz" } if i % 5 == 0 { word += "Buzz" } if word != "" { print(word) } else { print(i) } }
Introducing /r/swift4rednecks
Suggest take a look at https://github.com/priore/SOAPEngine - supports Objective-C and Swift. Basic example (from the site) of consuming a SOAP service in Swift; var soap = SOAPEngine() soap.userAgent = "SOAPEngine" soap.actionNamespaceSlash = true soap.version = VERSION_1_1 soap.responseHeader = true // use only for non standard MS-SOAP service soap.setValue("param-value", forKey: "param-name") soap.requestURL("http://www.my-web.com/my-service.asmx", soapAction: "http://www.my-web.com/My-Method-name", completeWithDictionary: { (statusCode : Int, dict : [NSObject : AnyObject]!) -&gt; Void in var result:Dictionary = dict as Dictionary NSLog("%@", result) }) { (error : NSError!) -&gt; Void in NSLog("%@", error) } Good luck!
&gt; That worked! Great. &gt; Is there a way to mark this post as answered? Nope, although in general it is helpful to future readers if you update the original post with the solution.
Why would anyone want to help "HOW THE FUCK DO I.....???" I've never met the bloke but it feels like i've already been shouted at.