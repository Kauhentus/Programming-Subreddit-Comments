Want to see your app failing? Go to Settings/General/Language &amp; Region, and switch Region to Germany (don't worry, your language will stay english). Then type a bill value (e.g. 12.34) and calculate the tip. 
Could anyone help please. I am really stuck at this problem :/
I hadn't thought about doing that, but that's a terrific idea!
Ugh. Dang. I'm just about to finish a crazy huge project, and I was looking forward to trying something new
Or maybe he could store all of the quality/tip percent pairs in a dictionary. Like so: let tipValue = ["Poor": 0.08, "Okay": 0.10, "Good": 0.15, "Great", 0.18] And then replace a lot of calculate tip with tip = tipValue[subtotal.text!] 
Thank you for posting this
I was thinking of paying for a Team Treehouse subscription for Swift. Should I hold off until I've done this?
That's a great idea thanks!
I am (trying) to learn Swift and XCode, my issue is that if anything unexpected happens I have no one that I can ask the most rudimentary questions to. Some one else just starting off may be in seeing the same issues and having the same types of issues. So the short answer is yes! 
I think the way to go in Swift is clearly to use an enum of Float in this case.
That's an interesting perspective. I've always found their documentation superb. I wonder where we don't see eye to eye. Is it the style they produce their content in? Lack of examples? 
I cannot speak for Team Treehouse, but I am going through the Stanford *Developing iOS 8 Apps with Swift* course on Itunes U and it is pretty top notch. You do need to have a good development background, especially in object oriented programming.
When you enter text, it will be a string. How are you converting that string to a number? Are you using `Double`, `Float`, or something like `NSDecimalNumber`? (I recommend a [decimal data type](https://en.wikipedia.org/wiki/Decimal_data_type) such as `NSDecimalNumber` for currency) Let's say you're using `Double`. `Double` has a failable initializer that takes a `String`. You're code might look something like this: let costString = "56.99" if let costDouble = Double(costString) { // do stuff } else { // show error }
They're like "plain tuples" with structure at both the term and type level. At the term level you know the types of elements at each position, at the type level you statically know all the operations the list is capable of supporting and its exact "shape" `(a, (b, (c, (d, ...))))` versus `(a, b, c, d, ...)`.
That's nice! - in Borat's accent.
These sort of absolute rules that you can't have globals is a curse for the industry. The important thing isn't to follow the rule slavishly but to understand why it is recommended, because that will allow you to use globals in wise way where you need them. Globals are usually not recommended because if you test say function f, g and h and they all rely on some global G, then these functions won't have predictable behavior. You might have to reset G each time and mess like that. So if you do have globals the way to minimize the damage is try to make sure globals are only used directly in the most high level code like your controllers. If you controllers call any functions or use other classes, you SHOULD pass your globals as an argument. That way you can test these classes and functions more easily. So my recommendation is in short: (1) Use the globals, but (2) try passing them as arguments where possible/convenient to minimize exposure of your code to globals. So keep in mind the absolutely WORST place to access a global is in some low level code function used by almost all the rest of your code, because now suddenly all your code becomes dependent on the state of some global. That will get awful to test. So only access global from high level code.
Indeed. And I think Cocoa Touch API is very nice. 
Would a VM more suit your needs?
Find a quad core Mini. You have to go used but the more cores the better f you have big builds in your future. If not almost any Mac will do of recent vintage. XCode does needs lots of RAM so make sure you get 8GB of RAM or 4 if you are less demanding. By the way up until about a half a year ago I ran XCode on a 2008 MBP with 2GB of RAM. I DO NOT RECOMMEND THIS AT ALL. The lack of RAM is a serious problem, interestingly the CPUs on that old machine didn't do to bad if I took aggressive measures to free up as much RAM as possible. The lack of cores and performance did raise its head from time to time, but generally it wasn't too bad. My point is that relatively new hardware, probably from 2012 on will run XCode if the RAM is there. 
I do not think so. Don't know how well Apple handles stuff like that.
I was looking online at prices, and they all seem high (little to high for me) is a Mac Pro not gonna get the job done?
A Mac Pro is an expensive machine that you really don't need for most development work. Many developers go the Mini route or at least they did before Apple deleted the quad cores. 
Mac SSDs..Same SSDs as PC or different?
Okay. So a Mini with a quad core for around $400? Am I thinking right price range?
To me it sounds like you're trying to build the wrong tool. A mobile web app can live on the server itself and run whatever is needed locally. You could throw together a RoR app with Pubnub for streaming the data and Capistrano for deployment without much understanding of the language and platform. You should usually try to avoid building server logic on a client side app.
WWDC was NOT last week! (It wasn't even last month.)
I don't recommend Treehouse for Swift unless you have a decent background in programming. It moves too fast, doesn't explain enough, and by the end of each module you feel like you have no idea what you just did. If you're brand new to programming and/or Swift, I highly recommend CodeWithChris's free course on Udemy as a starting point: https://www.udemy.com/how-to-make-an-app/learn/#/
Are you wondering about the PDF part or the signature capture part? For PDFs, there are a few avenues you can take. I'll start with a more simple option, since you're new to iOS development. You could use a `UIWebView` and a tool it uses for printing, called `UIPrintFormatter`. Apple actually used this method when implementing [printing in its open-source ResearchKit](https://github.com/ResearchKit/ResearchKit/blob/master/ResearchKit/Common/ORKHTMLPDFWriter.m). A much more advanced option would be to use the Core Graphics APIs. These are C APIs (that you would call from Swift) to read/manipulate/write PDF data. All of the types and functions start with `CGPDF` if you are interested in learning more about them. Since you say you're pretty new to iOS development, I would recommend starting with the `UIWebView` implementation. If you are confused about where to start with signature capture, I'd recommend taking a look at `UIBezierPath`. You can make a really simple subclass of UIView and keep track of the user's finger using `touchesMoved:withEvent:`, etc.
I guess you need to reload the tableView after der unwind tableView.reloadData()
 var test: String = "testing" Should be as simple as that unless you are working with optionals. 
The "handler" object you're taking about is a delegate pattern and would be a good design to use.
Check out [Coveralls](https://coveralls.io/), their home page has a bunch of links to projects that use their service at the bottom.
Artsy have open sourced all of their apps, its not all swift but they have some very smart people working there so worth a look: https://github.com/artsy
Think about what the `!` means... It forcefully unwraps some value. That means whatever the value is, it can't be `nil`. When you're calculating `tip = Double(subtotal.text!)! * 0.08` you're saying that the evaluation of `Double(subtotal.text!)` is *definitely* going to give you a value other than `nil`. However, when you try to convert `..` to a `Double` value, the function gives you back `nil`, because of course... `..` cannot be converted to a double value. Here's how you should do it instead... if subtotal.text != "" { if let subtotalValue = Double(subtotal.text!) { if quality == "Poor" { tip = subtotalValue * 0.08 } else if quality == "Okay" { tip = subtotalValue * 0.10 } // and so on } else { resultLabel.text = "Please enter a valid number" } } else { resultLabel.text = "Please enter a number" } If you haven't come across the `if let` yet, i suggest you look into it. The whole idea behind `if let` binding is that "hey, if this function/variable can be unwrapped into something that is not nil, assign `subtotalValue` to that value and then execute the following code. If you can't unwrap it (aka the value returned is nil), do the else part." Any time you're dealing with something that revolves around optionals, you should use `if let` way of doing things. It's also a good idea to `cmd+click` on functions to see if they return an explicit type or an optional. Let me know if you need any other insight on the matter.
protocols or blocks/closures.
Lack of didactics, Lack of examples. Vague explanations, missing information, wrong information and so one. Lack of passion to write. How many good teachers you had on your academic life? You can count on one hand, right? You have to have passion for writing and Apple documentation is bureaucratic and dry. 
Ahh - it's the last bit I don't get: the closest I get to "making a cell" is returning a dataObject to this function: func tableView(tableView: NSTableView, objectValueForTableColumn tableColumn: NSTableColumn?, row: Int) -&gt; AnyObject? { return arrayOfDataObjects[row] ?? nil } ... so I never get to see the cell itself, only pass data back into the darkness and let the table draw itself. So how do I get hold of a cell so I can do your cell.delegate = self ?
When you are translating the view on the pan gesture only translate if the result would be inside your 'cage' i.e. get the views current pos, simulate a translate and if its a valid translation, allow movement ? EDIT: MORE when i say simulate i mean something like var translation = translation() (CGPoint)? if isOK(translation, viewsPoint: recogniser.view.frame.origin) { translateView(translation) } func isOK(translationPoint : CGPoint,viewsPoint, CGPoint) -&gt; Bool { var checkX = translationPoint.x + viewsPoint.x var checkY = translationPoint.y + viewsPoint.y return (checkX &gt; 0 &amp;&amp; &lt; screenWidth) &amp;&amp; (checkY &gt; 0 &amp;&amp; &lt; screenHeight) } isOK function would check the values are within a cage of some sort
does this help at all ?
yes the currentValue is the views.frame() func isOK(translationPoint : CGPoint,viewsPoint, CGPoint) -&gt; Bool { var checkX = translationPoint.x + viewsPoint.x var checkY = translationPoint.y + viewsPoint.y return (checkX &gt; 0 &amp;&amp; &lt; screenWidth) &amp;&amp; (checkY &gt; 0 &amp;&amp; &lt; screenHeight) }
This really just sounds like a singleton in disguise. You're storing it inside a singleton (the AppDelegate) – how is that any different? Also note that /u/slartibartfist wants to create an OS X application. I think that the equivalent there is `NSApplication` and `NSApplicationDelegate`. If you want to prevent the controller data from being set arbitrarily, you'd make the variables be `private` or `private(set)`. You can then make methods that well modify the variables only in specific ways.
Reddit tip: To get your code to display correctly, either surround it with two \` (backquote) 's like `this` or put your code on its own lines with four spaces at the beginning of each line like this: func thisIsATest() { print("hi") }
Thanks m8.. Edit: I'll need some practice it looks like.
Oh, good catch on the OSX app - I missed that somehow! The main difference is you're not creating more singletons to accomplish the task - you're using the one that is already there appropriately. I've very frequently found that eventually something changes down the line and invalidates my original assumptions that there will always only ever be a single instance of a particular item needed. In these cases ( including testing, automated playback scenarios, etc ), it's far easier to retrofit them in if the class in question isn't forced to be a singleton. I guess the bottom line for me comes from an architectural perspective: Needing only a single copy to manage shared access through an application is not exactly the same thing as forcing only a single instantiation of it in the lifecycle. It's a subtle difference to many for sure, but I feel it's a pretty important distinction that can have fewer penalties down the line. And again, a lot of this is *always* personal perspective / preference. I've had way too many times over the years where I've found the singleton approach to end up creating more work for me down the line. Because of that, I now assess more harshly when I find myself wanting to turn to one as a solution. What's simplest now may well create many more headaches for me in the maintenance and enhancement life-cycles. =)
I use this, and rent a cloud based MAC http://www.macincloud.com/ Prices ares decent enough and works well so far, a nice alternative.
i was having goofy rotation problems myself that came from angles not computing the way i expected. if you use the atan function anywhere to find an angle, use atan2 instead. good luck! 
The amount of time in which the app shows the launch screen is directly connected to how fast the app loads. You cannot set a specific time span. 
Ok that makes a lot of sense. Thanks for the info, I really appreciate your help.
Now that everyone has chimed in on why this is A Bad Idea, if you really wanted to do this, it's quite simple. Just present your launch screen, or something that looks very close to it, as your initial UI. And then when you're satisfied that you have met the goals for this step, you can transition to your actual UI. I've seen a few apps (pre-iOS 8) whose initial screen was their launch screen plus a spinner. It was shown until they got the data they needed to load over the web. As a user, I wouldn't like being kept from using your app just to stare at your logo.
Is this on an actual device or in the simulator? iirc iAd does not work in the simulator – I think most things that require entitlements need an actual device to work.
To add on to this, breakpoints are *extraordinarily* useful. They allow you to pause the code at a certain point and examine variables and the state of objects – figure out what's exactly happening if code isn't doing what you expect it to do.
TDD - test driven development ( for those that don't know the acronym ) There are a few books out there specifically on test driven development for iOS, but I think they're all old enough that they are still in obj-c. I'd recommend reading a generic book, and applying that knowledge using the XCTest framework. Here's a good starting guide: http://nshipster.com/xctestcase/ p.s. Your title says TTD
Ah crap. thanks!
I have a text file of all the cities and their time zones. Is there a way to do it other than inputing them one by one?
What format is it in? You'd have to create some parsing code, but it shouldn't be *too* difficult. If it's a plist it's particularly easy.
Format it in JSON style and not only will be it easy for your app to parse, but if you ever need to use the that same data somewhere else or using a different language you have it in the most widely accepted universal format.
You need to rotate in the direction that has less angle, taking into account the gap between negative and positive.
Same as PC SSDs
Damn, did not realize that. 
It looks very clean, but the text in the title bar doesn't stand out very much. Out of curiosity, will you share how many people have downloaded your app? Have you made any sales in the first couple days?
Yes. You have correctly realised that whenever there's a 'variable number' of something, you need an entity. If I may, I'd like to offer a couple stylistic tips: * name an entity with a singular noun (Team) rather than plural (Teams) * use camel case (teamName) rather than snake case (team_name) * unless you need the ids for some external reason (like you are interfacing with a server and it will use the id to identify a record), you don't need to clutter up your model or your code with them * use relationships in the model rather than fetching by matching ids to form toOne and toMany relationships. So, I think you should have a toMany called 'players' in Team and a toOne in Player called 'team' and those relationships are the inverse of each other 
1) You can pause SKScene 2) You can set self.physicsWorld.speed = 0.0
Thanks for the discussion on this - very enlightening. As a noob to all this it's good to see that there's subtlety and nuance to these issues. I do get the dangers of globals, now, at least. Whether I use globals or not, the key thing seems to be to protect the data - a global object (with functions that can be called from anywhere) is one thing, but the thing I really don't want is for any old object to be able to access its *data*. Too many cooks, no way to tell who put the tabasco in.
What was the nice-ish solution? Are you referring to having the loading screen look like an initiated variant of your first ViewController?
Thanks :)
Thank you :)
Yup, I think you are getting the basic idea! And no sweat, I love talking about code lol. Final food for thought: When thinking more functionally - as Swift advocates - you start to eliminate things that are openly mutable, opting for more functions that have everything passed in they need and then return something. This makes things smaller, more testable, more accountable, and reduces hidden side-effects that tend to cause bugs. It is common in the Swift libraries to have a new copy of an object returned instead of modifying the underlying object as was common in Obj-C: let unfilteredArray = [ 0, 1, 2, 3, 4 ] let filteredArray = unfilteredArray.filter{ $0 &gt; 2 } That doesn't modify unfilteredArray, but rather returns a new copy. This allows you to more tightly control your objects and data so things are much more predictable, even as your application grows in complexity. =) 
[I'd follow the way that Apple does it.](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Reference/Swift_SequenceType_Protocol/index.html#//apple_ref/swift/intfm/SequenceType/s:FeRq_Ss12SequenceType_SsS_5splituRq_S__Fq_FTSi16allowEmptySlicesSb11isSeparatorFqqq_S_9GeneratorSs13GeneratorType7ElementSb_GSaGVSs11AnySequenceqqq_S_9GeneratorS0_7Element__)
I see... My comp sci undergrad was nearly 10 years ago in C with a command line compiler. was not prepared for such a fancy development environment. so many wonderful features i don't understand!
Anyone upgraded to full version ? 
I started out with 32 languages, but there will be more in the future. Out of curiosity, what is your native language?
Yeah I kind of approve, I like seeing good questions here, StackOverflow is flooded with trivial questions on Swift. I even thought about starting a blog where I post the most stupid StackOverflow Swift questions, definitely wouldn't lack content.
Well this might not be the best option, but I usually lock in the screen size so it's the same for all devices. In Viewcontroller: screen.size = cgsizemake(1024, 768) or whatever the size of the iPhone 6 is 
How does it look on the iPhone 4S and 5?
This is not a good solution. Try making all node positions relative to screen size. See my other comment for an example using screen percentages. 
Other subs address this problem by designating a day or a single thread for free-for-all of questions. Maybe that would work? Either way, I agree: those type of posts decrease the overall quality of r/swift.
Make it random between 0 and 50% of the screens height (for example) NEVER hard code sprites into a game based on pixels 
I guarantee Xcode will give you a better overall experience.
Do you mean prototyping an app? Then python probably isn't that great lol. I would suggest using Cordova/phonegap for quick prototyping. It actually works really well. Swift works great for actually writing the app tho lol If you mean like throwing up a web server or writing a console script then no swift in most cases will definitely not be as quick as Python. You can't beat pythons simplicity, awesome standard library, or huge community.
If you're used to JetBrains products, you'll enjoy using AppCode. It has all the great features you're used to. But compared to Xcode it's rougher around the edges when it comes to Swift support. And I'm pretty sure you'll need to run the EAP to get 1.2 support. I'd say you should download the free trial or EAP and see if it works for you. I run Xcode and AppCode concurrently, so that's always an option.
I prefer katy perry, I know they're different genres all together, but well. /s Swift and Python have very different purposes, swift is much faster to prototype than Obj-C I think, but when you embark on doing an ios app everything is going to take a lot of time. If you want to have a functional prototype is better to use something like: http://www.smashingmagazine.com/2015/01/prototyping-ios-android-apps-sketch-freebie/
I'm curious to know how you can do TDD in a language that won't compile if the objects your test references do not yet exist.
I didn't say it was a good solution. I said it was easy and didn't require resized art
You can learn a lot about TDD from [Quality Coding](http://qualitycoding.org). We write tests for all the [Artsy iOS apps](http://artsy.github.io/open-source/) and very few of use actually test-first, but I tend to do it a lot when working [with snapshots](http://www.objc.io/issue-15/snapshot-testing.html). Set up your different view states tests before, then build and just check the tests.
Congrats! You should consider open sourcing your app.
This is great you should continue to write! Two pointers: * NSRULSession is a typo * Would be nice for your GitHub README to feature a GIF/snapshots showing what the app looks/feels like. Mine tend to look [like this](https://github.com/artsy/energy).
If google maps doesn't, try bing predictive traffic 
Thank you!
You may want to take a look at [CLVisit](https://developer.apple.com/library/prerelease/ios/documentation/CoreLocation/Reference/CLVisit_class/index.html#//apple_ref/doc/uid/TP40014366). You could easily calculate an average travel time from what it returns.
And now I have to start a blog, thanks for the inspiration! As an unrelated side-note, I would recommend fixing the navigation of the site for better UX. If you click on "Home", there's no [clear] way to go back to the blog, I'm sure you're working on the design still, I'd just make sure to make it more "welcoming" if it's going to host your blog and other projects you have. Good stuff nevertheless!
Thoroughly enjoyed this. I just started learning networking and APIs so it's very conventient. Thanks! Can you elaborate on why you used dispatch_async? I'm not familiar with it.
Is there anything similar to the information that appears on the notification page? Anyway I can tap into that data?
In Swift, unless you're using Protocol Extensions, an interface and empty declared methods are essentially the same thing. That aside, you can declare an empty method, arguments, return types and even return a piece of dummy data, but that's a limited window into TDD. What if your method returns an optional? What if it throws? It's just not truly TDD as you could do an interpreted language.
Lmao who thinks that's ok!? 
Can you reproduce the memory warning? If you can, then, yes, you need to be concerned about it. If you cannot reproduce it by doing whatever you did (or by doing anything for that matter), then it will be pretty impossible to track down. The only thing you can do in that case is mentally to trace all the execution paths of your app and consider if, under extreme circumstances, there could be memory problems. By extreme circs I mean, for example, if you are downloading an image and you don't usually get errors, but what if the server sent you an huge image at some point. Or similarly if you are generating a bunch of data based on user input which again doesn't usually cause a problem, but if the user inputs just the right combination of data, the generated data explodes.
OK, so this class conforms to the AVCaptureVideoDataOutputSampleBufferDelegate by implementing the methods. But do you ever create an instance of this class and set it as the object's delegate? Does your init method run? (you can set a breakpoint on the first line to see if it ever reaches it).
Not the language itself being the problem in this case, but the APIs. A lot of the current Swift APIs aren't that suitable for rapid prototyping. E.g. Cocoa APIs typically requiring a bunch of machinery to get going: delegates etc.
I tried moving this code to my viewcontroller where I was displaying the previewLayer, and it worked! captureOutput is now being called. Not sure why there it was not working before as I was definitely creating an instance of this call.
Depends on what you're looking for. Apple obviously has some marketing-y numbers up that say it's far faster than both Objective-C and Swift 1. I haven't seen any independent company do a benchmark yet, though. At any rate, it would be kind of misleading: unless you're talking about orders of magnitude, differences in speed between different languages vary task to task (Or computer to computer, which is especially relevant when you're talking about a language that runs primarily on low-power low-memory devices). What I'd recommend is to do some benchmarking yourself. It's reasonably easy, [this](https://developer.apple.com/videos/wwdc/2015/?id=412) video from WWDC goes through it.
There's a lot of simplification in your code style that can be improved. Notably, if the last parameter is a closure in a call, you can omit the parentheses and can write ``` thing.do(12) { a, b in a + b } ``` instead of ``` thing.do(12, completion: { (a, b) -&gt; Void in return a + b }) ```. I would also recommend you to use implicit `self` where possible. Xcode gives you good enough coloring and it keep the code clean. Here's a good style guide that a lot of people, including myself, use: https://github.com/raywenderlich/swift-style-guide .
I'm on mobile, I'll give you a proper answer when I get to my keyboard. ;)
Thanks for the feedback. Yes it seems there is a glitch in settings window. I will fix it in next version. You may test the app by using some example tracking numbers FedEx: 642048786745 UPS: 1Z0019854290155662 I checked your app and it is functional app. However I think you should make it little bit beautiful by using some extra graphics fonts or other UI elements. I think we as developers most of the time focus on code and forget about UX design. My brother helped me to beautify the UX. He said my first UI was so simple and he needed some colors
Check this out here: [Getting the duration of the visit](https://developer.apple.com/library/prerelease/ios/documentation/CoreLocation/Reference/CLVisit_class/index.html#//apple_ref/occ/instp/CLVisit/arrivalDate)
That logo is fantastic! The only suggestion I would have, is on your "My Parcels" page, you make the parcel's status the larger text and show the actual tracking number smaller. People probably want to quickly see the status instead of quickly see the number. Also, will you let us know how many downloads you have gotten so far? It's really motivating for us that are struggling to finish something.
how can you use the app to make the app when it hasn't been made?
Thanks for the feedback. I will try to incorporate your ideas. For the number of downloads it is very small less than 10 :) (Edit: Crashlytics reports that I have 90 users. I guess iTunes connect doesn't show live numbers) I am not discouraged by the numbers though. I coded this app to learn Swift. Since I believe that only way to learn a language is to experiment with it. Whether it is Todo app or simple game you must code something and struggle with real world problems. Otherwise using simulator or using single device can really hinder what you may learn in the long run. My app supports iOS 7 and therefore dealing with API etc was also overwhelming. However I am glad I support iOS 7 because I learned lifetime lessons such as test your code with a supported iOS simulator. I also learned how to use unit testing. In the beginning I was testing couriers one by one. Now I added test code and I just click test and see what is going on. To sum up, I think you should write something and learn the basics then you may start think about numbers. I will be happy if it just makes coffee money or pay my developer account :) 
Is [this](http://www.raywenderlich.com/85900/arduino-tutorial-integrating-bluetooth-le-ios-swift) or [this](http://www.raywenderlich.com/98795/arduino-tutorial-networked-temperature-sensor-swift) helping?
Checked on the example numbers. Works great. The UI is beautiful, your brother made a very good job :) Also thank you for the suggestion regarding my app. I would use a help of a person such as your brother. Unfortunately I did everything by myself including the logo, movie promo and UI and I am not a UX designer ;) 
Almost like bootstrapping ;)
https://xkcd.com/353/
[Image](http://imgs.xkcd.com/comics/python.png) **Title:** Python **Title-text:** I wrote 20 short programs in Python yesterday. It was wonderful. Perl, I'm leaving you. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/353#Explanation) **Stats:** This comic has been referenced 162 times, representing 0.2121% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cu41sy3)
The UI feels great. The only suggestion I have is that the icons in the bottom seem a tad too big -- they're pushing the limits on the top and bottom instead of having a nice "white space" around them. Care to disclose how many downloads you've had so far, as motivation for some of us to finish a project?
I am not sure of anything anymore o.O
Got three messages from 3 different people asking the same thing. 
The way I understand CGContext is pretty abstract in my head—but let me try explain it. Basically it's a class that represents a *context* with which you can interact with Core Graphics and draw stuff. [Apple says](https://developer.apple.com/library/mac/documentation/GraphicsImaging/Reference/CGContext/) its an '*opaque type that represents a Quartz 2D drawing destination*'. This *drawing destination* could be a window in an application, a bitmap image, a PDF document, or a printer. So the way I see it—the CGContext is essentially a connection we're making with whatever it is we're drawing on, which is then in turn used when making the calls to CG. Read [this tutorial](https://www.bignerdranch.com/blog/core-graphics-part-2-contextually-speaking/) (and its primer) to read more about contexts. I've always been a big fan of the [raywenderlich tutorials](http://www.raywenderlich.com/90690/modern-core-graphics-with-swift-part-1), if only just for their rage comics. Good luck!
Edited, I am not a native english speaker.
No worries! Just wanted to let you know since your screenshot says that :-)
First, congratulations for launching your first app. I want to tell you something: I've been searching for an app like yours for almost 2 years. It's not only about setting goals, **it's about setting goals and creating plans to achieve them**. I'll be using your app and I'll send feedback to you if I see something that should be improved. **One last thing:** I am also about to publish my first productivity app, [here you can sign up for the launch](http://CompassApp.net). Any feedback is welcome!
There is nothing wrong with Core Data, in fact it is very powerful...but it can be a real pain in the ass (to put it bluntly). This article by Matt Thompson sums it up best: [NSCoding/NSKeyedArchiver](http://nshipster.com/nscoding/). I would consider taking a look at realm.io if you want a powerful database that is relatively easy to work with.
Great to hear. I will be a happy man if D&amp;C will help you reach some of your goals. Your app looks very useful, from a first look at the screenshots I gathered that its an app that helps you set the desired time you would like to spend on an activity. This would be great for things like exercise or study or programming :) Let us know about the launch.
Ah, I see. We're talking about **clustering** here, an area I've washed my hands of years ago—albeit a *fascinatingly* interesting one. I used [Superpin](http://getsuperpin.com) back when I had an app on the store—although I would not recommend them as they were a fairly overpriced proprietary solution with very unreliable support. There seem to be other open source alternatives if you just google something like ['*iOS map clustering*'](https://www.google.com.au/search?rls=en&amp;q=ios+map+clustering)—such as [this](https://github.com/choefele/CCHMapClusterController) or [this more recent one](https://github.com/itsbonczek/kingpin). You could also find a wealth of articles talking about the theory behind all this like [this](https://robots.thoughtbot.com/how-to-handle-large-amounts-of-data-on-maps) and [this](https://infinum.co/the-capsized-eight/articles/a-blazingly-fast-open-source-algorithm-for-poi-clustering-on-ios). Like I said, it's a fascinating subject. Happy clustering!
Oh for the love of god, just because we have operator overloading, dont just use it everywhere. There are very few legitimate uses for it and what ever yours is, it is probably a bad idea.
&gt;How would I go about this communication? Bluetooth.
Should test be a 'var' instead of a constant?
Carthago delenda est.
Haha, but why? 🐸
So why use it? I've avoided this and Pods for years. I've never had trouble including 3rd party libraries and never really understood the need for either tool.
You're right. I should've made the distinction. Thanks!
This is all *really great* advice. Thank you so much, this will make my future projects a lot more readable. Seriously, this is very helpful.
Thanks, I hope you will find it useful!
Hello. I'm glad you're interested in this project. It sounds fun. I've done a few projects with iOS and Arduino. I personally like to use a [bluetooth shield](http://redbearlab.com/bleshield/) for the communication between the two. d I have a sample project that you can take a look at. It's in Obj-C but should give you a good example anyhow. You'll want to write a command set (API) between iOS and the Arduino. For my app, the Arduino is the server and the iOS app is the client. That is, the iOS app makes requests to the Arduino over Bluetooth. All of these commands are closed loop. That is, iOS makes a request to the Arduino. The Arduino then executes that request and tell iOS that it has done so complete. Because of this, all of the APIs have a completion block (aka closures in Swift). I built a candy sorter which would sort a bucket of candy by color and place them into bins using servo motors. The color is determined with the iOS camera. The Arduino simply controls all the motors. Here is the [source code](https://github.com/zakkhoyt/CandySorter). The Arduino code is located [here](https://github.com/zakkhoyt/CandySorter/blob/master/CandySorter_sketch/CandySorter_sketch.ino) and the iOS class which issues these commands is [here](https://github.com/zakkhoyt/CandySorter/blob/master/CandySorter/Controllers/NonGUI/VWWBLEController.h) and [here](https://github.com/zakkhoyt/CandySorter/blob/master/CandySorter/Controllers/NonGUI/VWWBLEController.m). If I remember right I wrote some good comments about the communication between the two. I read in another comment that you'd like to use ethernet shield. There is no way to do this with iOS. You could use a wifi shield but you'll have to install a minimal web server on your Arduino which is another complicated step, at least in my experience. Good luck. I'll try to answer any questions.
Please title your questions as an actual question :).
Do you have any links to a tutorial for establishing a server on the Arduino with a wi-fi shield, or for creating an API in swift (not something I've ever had to really do)?
FIrst off Facebook is using Async display kit so they are rendering things off the main thread, which is not something your probably going to be doing unless you are looking to use that framework. Generally your question goes to callbacks, and tracking what kind of tasks have been complete. I recommend you look up ray Wanderlich's tutotiral on using NSOperationQueues for tracking tasks. 
Have you read the official Arduino [tutorial/example](https://www.arduino.cc/en/Tutorial/WiFiWebServer)? This may vary depending on which wifi shield you have. For your project you'll need to send your data/commands from iOS to the ardiuno using the HTTP protocol. With in HTTP, you'll want to send GET requests. This is the simplest way to pass data. You could send a POST request using JSON or XML but then you'll need to parse that XML or JSON on the arduino. Not ideal for something so simple. I'd suggest passing them directly in URL using a GET request. So if your arduino's IP is setup as 10.0.0.1, your command will look something like this http://10.0.0.1?food=on&amp;water=off&amp;light=on The NSURLRequest class will make this easy for you. You can easily find examples on stackoverflow. On the Arduino side you'll need to do some string parsing. The [strtok](http://stackoverflow.com/questions/21946585/arduino-string-separated-by-comma-to-array) function will be your friend here. Take all text to the right of '?', then split this string into an array of string by using the '&amp;' character. You'll now have an array like ["food=on","water=off", "light=on"] and continue parsing using the '=' token. This would be a good place to practice making your own data structure to store these commands and parameters. You can use an array of arrays, but that's no fun, right? There may be some useful libraries to help you parse (besides string.h) Hope this helps. Let me know if you have more questions. 
I see your point. I've only ever used CocoaPods in the past for more of a 'separation of concerns' and almost never really used it to stay up-to-date with libraries (which one would argue it's primarily for). Carthage, though, allows me to separate my own repository of code into abstract and separate frameworks that I can drop in as needed. I aim to never repeat code again, even across client work. More importantly, if you've ever tried building Swift frameworks (and have to use the 30 or so lines of code to build a universal binary), you'll appreciate the amount of time a tool like Carthage will be saving you—even if we're talking about maintaining a single reusable framework.
I've been working my way through it. It's pretty good!
You can easily use closures instead of blocks in swift, just add a completion handler closure argument to your methods, then run the closure as a function later in that method when it's completed its work.
That is the way to go
I'm struggling a little with the syntax of this. I understand this: func registerUser( username: String, password: String, completion: (user: User) -&gt; Void { // success completion(user) } registerUser(username: "lowey2002", password: "password") { (user: User) in println(user) } But what about multiple closures. func registerUser( username: String, password: String, completion: (user: User) -&gt; Void, failure: (error: NSError) -&gt; Void { // success completion(user) // failure completion(error) } registerUser(username: "lowey2002", password: "password") { // &lt;-- here? } 
Without a trailing closure (depending on your use, you may want to look into reference cycles and using weak self): registerUser(username: "lowey2002", password: "password", completion: { [weak self] (user) in //… }, failure: { [weak self] (error) in //… }) If you want trailing closure (not a good idea with two closures, though): registerUser(username: "lowey2002", password: "password", completion: { [weak self] (user) in //… }) { [weak self] (error) in //… }
I guess I've never run into those problems. Granted I usually stick to a handful of libraries vs. a bakers dozen.
Ah, I didn't realize Carthage had those capabilities. Awesome!
When storing an object of type protocol, you're actually only storing a protocol instance, not the actual object. The objects themselves remain reference types of value types as appropriate. This is what leads to seemingly strange behavior like not being able to cast directly to an array of protocol instances. I think that they talk a little bit about this in the "Protocol-Oriented Programming in Swift" talk. Look for the part about Heterogeneous vs Homogeneous containers.
Sexy! Our backend is written in Akka/Scala and uses Promises heavily. BrightFutures looks to have the better documentation. Which would you recommend?
Protocols are types. So you can declare an array of protocols (as in your example), and anything that can be added to that array conforms to that protocol. This means you can have both class objects (reference types), and struct/enum instances (value types) in the array at the same time. If you append a class instance to the array and then modify its properties, then you are modifying that instance's memory in the heap, and so the change will be reflected everywhere. But appending a struct instance means a copy of the struct is added to the array (value semantics), and so the original variable is not modified if you change the copy. ex) Suppose we have a class "Rect" and a struct "ValueTypeRect," which both conform to the protocol "Foo" var square = Rect(height: 10.0, width: 10.0) var sq = ValueTypeRect(height: 10.0, width: 10.0) var arr = [Foo]() arr.append(square) arr.append(sq) arr[0].height = 5.0 arr[1].height = 5.0 println(square.height) //will print 5.0, instead of 10.0 println(sq.height) //will print 10.0 still Another important point is that arrays themselves are structs. So if you pass "arr" to a function and modify the contents, you will be modifying a copy of arr. But if you modify "square" via the array, as we did above, then that change will still be reflected globally, because modifying a copy of a reference still means you are actually modifying the instance memory on the heap. Everything is explained in the Swift documentation in various sections. Search for the "Language Guide" if you haven't seen it. 
why don't you figure this out, write an informative blog about it, and post that to /r/swift instead of this garbage post. 
The best way to handle this is how Apple does in their own code, with one closure for both the success and failure state: func registerUser(username: String, password: String, completionHandler: (User?, NSError?) -&gt; Void) { //success completionHandler(user, nil) //failure completionHandler(nil, error) } 
Aren't you 'wasting storage' by replying to something that has now been answered?
Oi m8 are you avin a bubble? On a serious note surely the point of the Internet is to share data, including knowledge to aid others? I don't think the unjustifiable patronisation of fellow users is beneficial in any way towards someone who clearly needs personalised help in a field. He may have already tried your suggestion with no luck and has turned to this network to find that help, of which the previous answer has done. Since you do not know the circumstances I do not think you have the right to classify this question as "inane". I also don't think that it is wasting storage space either due to the fact that a) it contains no media files and b) I do not believe there is a reddit thread on exactly the same topic. Having a suitable answer to this will help others. Good day sir.
Good one
Why Apple's own documentation doesn't use weak self in closures?
IMO, this is the cleanest possible way to do this in Swift. Combined with trailing closure syntax and type inference, you get some really nice, clean code. API.loadUser { user, error in if let error = error { println(error) } else if let user = user { // you're good! } }
In programming, a context is usually something abstract that is used to transport state (in this case: size, fill color, blend mode, line width and many more. And of course, things that are already drawn into the image/pdf/screen) between different functions. If you stumble upon a variable named `context` you can be pretty sure that you are working with a C-API like Core Graphics. Encryption APIs are also famous for using contexts. Basically everything complex that isn't written in a object-oriented language has some sort of context. Sometimes it's a user readable and writable struct, often it's an opaque object that does not allow any interaction. In the latter case your only job is it to keep it around and pass it from function to function. If CoreGraphics would be implemented in Objective-C or Swift, you wouldn't need a context variable. The state would be stored in the class in a variety of instance variables. ---- If I would swift-ify CGContext it would probably look something like this: struct CGContext { var fillColor: CGColor? var strokeColor: CGColor? var blendMode: CGBlendMode? var lineWidth: CGFloat? /* many many more */ } ---- If you would swift-ify Core Graphics you would have something like that class UIContext { var fillColor: UIColor? /* many many more */ func fillRect(rect: CGRect) { } /* many many more */ } class UIImageContext: UIContext { init(size: CGSize) { } } class UIPDFContext: UIContext { init(data: NSData, bounds: CGSize, documentInfo: [String : AnyObject]) { } } and you would use it like this let imageContext = UIImageContext(size: CGSize(width: 100, height: 100)) imageContext.fillColor = UIColor.redColor() imageContext.fillRect(CGRect(x: 10, y: 10, width: 80, height: 80)) But we don't have that, so we have to move state between all these C-functions with a variable named context.
Asking for help should at a minimum include a github gist, or repo, and/or blog with an overview of their attempts and progress. These lazy bums are posting garbage like "hey I want to build facebook, how do I do that? kthx".
BTW, did you use Swift or Objective-C? What is the plan for next releases?
I'd support anything that cuts out the "help me with my noob code" posts.
I added an all exception breakpoint and then tried to run the app again. Now it sent me a 1.1 breakpoint. there is nothing in the issue navigator either. 
In picture b, do all the outlets and actions exist?
Yes, however "searchdisplayController" has no outlet connection, "view" seems to have a low opacity signifying that something is wrong: [Outlets](http://imgur.com/LJcvpJq) 
remove 'View' and test it.
Swift of course. The short term plan is to get as much feedback as possible and make fixes and small adjustments based on that. Then I would like to work on the app visibility in the App Store. For the next major release I would like to add new feature like notifications, and syncing to the cloud. Since I don't know the frameworks to do it yet those goals are more long term. I actually have a lot of enhancement ideas all stored in D&amp;C but because of time constraints I need to prioritize only few for every release.
The new Swift 2 error handling model seems more declarative.
What exactly is the goal of removing the view outlet from a ViewController? It won't help. 
The view outlet is always a bit more opaque, because it will be connected automatically. There will be no way to remove it. You should check that you set the class correctly and remove every referencing outlet. If you still get the error, you know at least it doesn't come from the outlets.
Thanks, I've submitted this under ‘Developer Tools’, since there doesn't seem to be a section for Swift yet… On the other hand, it seems to be the compiler with the issue, rather than the language. Checking for AnyObject seems obvious in retrospect. Since that doesn't seem to fix this, adding a class requirement in the protocol definition seems to be the closest thing to a workaround for now, if constants are needed.
I always get this error when the outlet that I am connecting is broken. That's why I suggested it
Do it with an enum instead of nil: enum Result { case Success(User) case Failure(String) } func registerUser(username: String, password: String, completion: Result -&gt; ()) { // if success completion(Result.Success(user) // if failure completion(Result.Failure(errorMessage)) } Then you handle the Result with a switch: registerUser("Gagege", "!zaq@WSX#edc", { userResult in switch userResult { case .Success(let user): // do a thing with user case .Failure(let errorMessage): // log and show error message } })
 enum Result&lt;T&gt; { case Result(T) case Error(ErrorType) } Reusable.
One way is to put in services in front of the data and call the service...
A crash like the one you see is the least helpful type: one occurring outside of your code, so Xcode can't show you the specific line with the error. If the app crashes before anything is displayed onscreen, it is likely (but not certainly) to do with your storyboard. Check for warning signs (a ! in a triangle) next to any of your outlets or actions. Otherwise, it's being triggered by your code. I recommend adding breakpoints to see how far the program gets before crashing. You can add a breakpoint for a specific line by clicking in the margin to the left of your code. This will pause execution at that line, and allow you step through each line one at a time. The controls are located in the panel below the code, next to the blue breakpoint toggle. Good places to try adding breakpoints are: * AppDelegate's applicationDidFinishLaunching function. * ViewController's viewDidLoad function. * Any of your own functions called later. Find the last function to be executed *before* the crash, then check this function for anything which may be the trigger. Comment out sections if it helps, using /* block comments */.
Thanks for the help everyone. I added view to the IBOutlet and then deleted it. For whatever reason it works now 
Your problem has been solved, but for future reference, I recommend checking the [documentation](https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UILabel_Class/). Each function and property is listed and grouped, and further explanations are provided for each, so it should help you find your way around the various classes.
If this is the case it's super concerning - as part of the entire reason this is an effective programming is the ability to do this kind of thing, it makes Swift be able to have functionality similar to type classes in Haskell.
agreed
Not to be condescending, but [you're holding it wrong](http://www.urbandictionary.com/define.php?term=You're+Holding+It+Wrong). Swift's implementation is much more in line with C++ than ObjC. When you view it from that lens, *it works exactly as expected.* Here's the deal: I think you are expecting ObjC-style dynamic dispatch. That is, at runtime, there's some mechanism such that the object that conforms to `TestProtocol` performs a lookup to determine which `name` to call. This doesn't happen in Swift normally (`@objc` types and extensions get ObjC lookup, so there's an exception for the sake of interoperability). Instead, Swift determines *at compile time* which implementation to use. At compile time, all the compiler knows is that the object is a `TestProtocol`, so it creates the function call to TestProtocol's implementation of `name`. If you're applying ObjC expectations to Swift, you'll be disappointed. Swift is much, much more like C++ with an ObjC interop layer built in. If you're familiar with C++, you may think of how similar idioms are implemented there and be able to reason how Swift gets some of its behavior. I don't have a good solution right now (and I haven't checked to see if this works), but you might apply the `override` keyword to derived method. If I get an opportunity, I may mess around with this and respond again.
Looks really nice. If you don't mind my asking, how long did it take for approval on the AppStore? I'm just starting with Swift myself. 
I actually got rejected at first since the IAP wasn't working correctly (IAP are really a pain to debug since you have to make a sandbox account). I believe it took 7 days for me to get the rejection email, and then another 7 days to be accepted once I re-uploaded. 
check out this UITextView method: func scrollRangeToVisible(_ range: NSRange) And, in general, when you have a problem with UITextView, you should look in the documentation for UITextView and read the descriptions of all the methods to figure out if they will solve your problem. If not, look at what UITextView inherits from (which is UIScrollView) and see if any of those methods fit the bill. And keep looking at super classes until there are no more. And if none of them solve the problem, well either you missed one or what you want to do is impossible!
Try: textView.scrollRangeToVisible(NSMakeRange(0, 1))
I would suggest implementing that yourself instead of trying to find a pod. Here are the core pieces needed: 1. Use an enum that keeps track of whether the section is `Open` or `Closed`. 2. The `tableView:numberOfRowsInSection:` function should make a check to see if enum above is `Open`/`Closed`. If it's `Closed`, return `1`. If it's `Open`, return the number of all options. 3. The `tableView:cellForRowAtIndexPath:` should also check the enum. If it's `Closed`, configure your cell with your currently selected option. If it's `Open`, configure the cell with the option at the given `indexPath.row`. You'll also have to check if the `indexPath.row` is your currently selected option and configure the cell differently. 4. The `tableView:didSelectRowAtIndexPath:` will update your currently selected option, change the enum from `Open`/`Close` to `Close`/`Open`, and the `tableView` should just call `reloadSections` for the selected `indexPath.section`. &amp;amp;nbsp; To make your controller code cleaner and solve other problems like having multiple expandable sections, you can create an object that will hold the above information for you. Ex: class ExpandDataObject : NSObject { enum ExpandState { case Open, Closed } var dataArray : [AnyObject] var expandState : ExpandState var currentlySelectedIndex : Int }
The average is below a week at the moment: http://appreviewtimes.com/
Okay, that's kind of what I was also thinking. I'll give that a shot and let you know how that goes!
Which Udemy course did you take? I am currently doing the same. Was his course the only one you used to learn Swift, or did you have other resources? 
Have a PHP script (or anything else that runs on a server and can connect to a database) and simply return the data (preferably in json) You don't want to access the external database directly from the app as it would make your database very vulnerable. 
Yes, you can. Same way as with ObjectiveC. The best way'd probably be to check if runfile is there or if the process shows up in the running processes' list.
Instead of trying to change what has evolved in this reddit, how about creating a new reddit for what people want, something like AvancedSwift?
I really think this is the best option. Regardless of whatever the name of the subreddit is, there's going to be a variety of posts, some of which some people are not going to want to see. Whether it's beginner questions, content that the poster made, or even iOS dev vs. "Swift as a language", someone's always going to get annoyed. If you had a tagging system like on /r/Music, everyone's happy. People can ignore things they don't want to see, and people won't get nasty comments like "take your crap post off the subreddit". I really don't see the downside.
I do believe it's by design, though. It's not dynamically dispatched; it works with generics and similar, where the type is constrained to a protocol, but still known at the call site compile time. It doesn't work in a dynamic situation with a protocol typed variable. That would require a quite different implementation.
I agree, although conceivably it could be made to work for the dynamic dispatch situation (e.g. through a protocol typed variable) later on (while still working optimized for the direct case). I don't think it's a bug as much as a limitation, at least currently.
Sounds like a good idea. This reddit has been completely ruined by idiot questions. It is not that the questions are stupid independently. But when every week there is somebody asking how it is best to start learning Swift or whether he/she should begin with Objective-C or Swift, well then those people can't possible have done the absolute minimum of googling. The question has been answered like a million times (Not literally). I am also interested in Julia and Golang and I got to say they have far more interesting reddits. I'd like to see more stuff like: interesting software written in swift, interview with some swift developers or company using swift, functional programming in Swift, Swift under the hood, Design patterns in Swift, best practices. I think if you want to read anything interesting about Swift you are better of looking at objc.io and Mike Ash.
This pod is close to what OP wants but there are some differences when compared to the gif posted above. These differences make it so that it’s easier to just implement it yourself rather than modifying the pod.
swift if totally fine as a first language. There is no "best" starting language. If you are serious about starting a company and developing an app, then yes getting an experienced dev is recommended. If you are just trying to learn and maybe take a shot building something then it is something you can play around with and attempt.
The Swift language is one thing. Using it to make apps is another. It's kind of like "Learning to play guitar." vs "Learning to play guitar in order to make, record, and produce songs in order to sell them." I'm not trying to discourage you. Just hoping to help you understand the difference. One is obviously more involved than the other. Both are possible. 
TLDR: If you want to make an Apple App. Swift is an excellent place to start. If you are not completely invested in iOS or Mac app development I would not recommend Swift as a first language. For the sole reason that the code you write can't be deployed anywhere else (easily). That's not to say that you can't translate the skills to other languages. If you are set on wanting your first apps to be on iOS/Mac then I think it's safe to say Swift is the better place to start. Swift is more modern and more user friendly (more forgiving) to a beginning programmer. It's still growing and you will find a lot more resources for Obj-C but Apple is fully committed to Swift. So it probably will help you future proof your skills. I would also recommend this app for Mac. https://coderunnerapp.com/ It's a no bs way to play around with a lot of different coding languages. Implement simple command line programs without having to worry about installing anything. Try swift and obj-c or even java (better yet all of them) and write simple programs. Like a calculator or task manager. See what language you feel comfortable in. Honestly the "best" programming language and environment is the one that you feel the least amount of friction in. Friction is anything that comes between your idea and the finished product. Some people find the least friction with vim and C++. Others find the least with javascript and http://codepen.io/pen/ or sublime text. Pursue what's interesting to you and find the path with the least friction. Good Luck! P.s. /r/learnprogramming
Yeah I just took his "The Complete iOS8 and Swift Course" on Udemy. That with this sub, youtube and Stackoverflow were my only resources. Of course I also had some programing background before. 
Udemy has an iOS 9 / Swift 2 course that is getting updated as new versions of the Xcode beta come out. [https://www.udemy.com/the-complete-ios-9-developer-course/](https://www.udemy.com/the-complete-ios-9-developer-course/)
When you read this post's title you probably thought "not *another* Flappy Bird tutorial!", but I hope my motivation is clear once you've read the tutorial: you get to try new iOS 9 things like GameplayKit and SKAudioNode, plus it uses things like `guard` from Swift 2 so you're getting the latest, greatest language along the way. Enjoy!
Swift 2 is close enough to the previous versions that the training videos are still valid, and I would still recommend starting there if you are interested in learning swift. When swift 2 is officially released, it mostly includes improvements that build upon the language so you can expand your knowledge from there with the new features
I'm just going to leave this here: https://www.livecoding.tv/video/hacking-with-swift-3/
Rather than making the two images subviews of the label, do this. Make a UIView which is big enough to accommodate all the label and the two images. Add all 3 as subviews of the UIView, putting the label above the two images. Position and size all the views appropriately, presumably using layout constraints.
The runfile is there, what did you mean ? My final objective is to display the status of apache server in a Ui.
Pick one: view.bringSubviewToFront(label) view.sendSubviewToBack(imageView) Or do it directly when adding the imageViews: view.insertSubview(imageView, belowSubview: label)
How about writing a function which would take a closure and execute it on the main queue. So something like (syntax not checked, probably not exactly right): func onMainQueue(x: () -&gt; Void) { // then do the dispatch_async etc and execute x() } Then in your main code you could do: onMainQueue(connectToInternet() ? { // block 1 } : { // block 2 }) In this exact case, where the two alternatives are functions, you could also consider using dispatch_async_f. But the onMainQueue idea is more general and usable outside of this use case. EDIT: actually, I'm not so wild about the way I wrote that last line. It works correctly and everything, but at first glance, it appears as though connectToInternet() is taking place on the main queue. So a plainer rendition, slightly less DRY would be: if connectToInternet() { onMainQueue { // block 1 } } else { onMainQueue { // block 2 } } 
For wrappers like this that wrap a single object, structs are ideal; it will be basically zero overhead, since the same amount of data is copied around as when using the wrapped object directly.
/* hopeful helpful note */ While implementing custom segues + custom unwinds, the one gotcha for me was figuring where to place the "segueForUnwindingToViewController" override given varied scenarios. For example if you simply have two view controllers on your storyboard, the override goes in the first UIViewController class (unwind destination). However if your UIViewControllers are within the context of a UINavigationController, then the override goes in the UINavigationController class.
This is a very elegant solution. I'm using this for my entire API - it's easy to read and refactor.
You posted this on August 11th and deleted it so you can repost? Quit spamming.
I had quite the problems with the old GitHub repo, so I deleted the repo and started fresh. The link in my deleted post didn't work anymore :/. Sorry, I should've left a note in the comments ;)
There are some static class extensions, which are not available in Swift 1.2 (there are of course other ways, but they're less nice imho). It is very possible to write a Swift 1.2 version though!
Oh, you can still use Swift 2 with iOS 8 and 7! Swift 2 just ships with the iOS 9 SDK -- I'm pretty sure everything you wrote is compatible with 8.
Every Swift app contains Swift runtime - it's very young language and there are lot of changes even between minor releases. In the future, when Swift will be more mature, Apple will (at least I hope they do) ship Swift runtime with iOS. Now Swift apps are kinda bloated and bigger in size than Obj-C apps.
TIL!
&gt; only enough Objective C to get the job done Is it still valid for a person who wants to become full-time iOS dev? I'm sure Swift will gain more and more market share throughout the years, but there still will be millions lines of ObjC code to maintain and many companies may not want to transit to Swift when there is no need for that actually.
Learn what you need to accomplish your goal. If you don't need obj-c to write your app, then don't bother with it. 
If you are a professional dev you learn what you need to learn. Picking up another language is not difficult (although becoming an expert in best practices and gotchas takes time). More important than the language you are using is the skills and experience needed to properly and efficiently use the iOS Apis. I spend way more time on stack overflow trying to figure out how to use a new feature API than I do puzzling out language features. 
It looks like one of your nodes is nil. 
Short answer, no. Are you asking about animations between screens?
Yes.
Looks great There is also husl https://github.com/husl-colors/husl-swift
Thank you very much :)
I've found popViewController to be the easiest. From my only-mildly-versed understanding, it pretty much does that same thing although it isn't an "unwind." I could be wrong though.
browse the subreddit, literally 12 hours ago you lazy fuck.
There was a [recent post](https://www.reddit.com/r/swift/comments/3hc7kl/protocol_extensions_default_implementation_cannot/) that showed confusion about default implementation of methods in protocol extensions and when they are called versus the overridden version. I had read more about it [here](https://medium.com/ios-os-x-development/swift-protocol-extension-method-dispatch-6a6bf270ba94) where there is a handy flow chart. The latter post linked to the one I have posted here which is the best write up on the subject I have found so far.
Do you mean inline (in the message shape) or after you tap on it? The former is probably a custom UITableViewCell or UICollectionViewCell, just as all the messages are, with some extra stuff for the image. The latter is simply a view controller that gets pushed with a custom animated transition. It's some sort of scroll view, so you can zoom and pan the image. If you didn't mean either of those, let me know and I'll try to help :)
All top level code is executed in order within the main playground file. That's your entry point. There isn't a "main" file or function other than that. Edit: If you give us some more info, we may be able to point you in the right direction. 
Sorry, I'm a newbie at Swift. What I'm trying to do is to get test() to run: import UIKit //I cannot call otherFunc() nor test() from here, so that won't work. class testClass { func otherFunc(){ test() // I can call test() from within this method, but since it isn't the main entry point, it won't run. } func test(){ print("Testing!") } } EDIT: I tried it without the class, and it's giving me an error on the first line: otherFunc() //Use of unresolved identifier "otherFunc" func otherFunc(){ test() } func test(){ print("Testing!") } The really strange thing is, the line of code that throws the error *actually works* and will print "Testing!' to the counsel. I just get that error alongside it.
i search nil in Xcode but only result on my NSTimer userinfo: nil
Import the QuickLook framework then use `QLPreviewController` – I think you'll be impressed!
I keep going back and forth about this. Doing it that way, let b: Formattable = Day(content: "Monday") means that the *compiler* gets to decide the target of dynamic dispatch at compile time, rather than runtime. In my opinion, that's *more* predictable.
The update method is a lifecycle method. Meaning it is part of the chain of automatically called methods as part of a SpriteKit game. You can use it for anything you need to "update" during a frame render. This happens 60 times a second (unless your game has too many calculations to keep the framerate up). I'd suggest reading the SpriteKit programming guide.
I would agree except that when you extend a class there is no difference between methods that were part of the original definition, and methods added via extension. They behave exactly the same. This behavior is surprising because methods declared in the original protocol declaration are handled differently than those added via extension. Sure once you read about it you can come to understand why, and even accept it. Most swift programmers will not just intuit this behavior, though.
Thank you very much! It works.
Can you commit the project file, so I can check and help you out. 
nice work!
https://github.com/Rombond/Bug-Xcode 
Thanks for these suggestions! I totally forgot about guard case let, that's indeed very useful. I'll update the post accordingly and also integrate the other two things you mentioned.
thank you. I can't believe I missed it. 
you can download the Zip file of my project here http://www.mediafire.com/download/gbbs2xii3iveh66/Galaga.zip
 015-08-21 01:08:56.539 Test[2465:538738] SKTexture: Error loading image resource: "player.png" 2015-08-21 01:08:56.765 Test[2465:538738] SKTexture: Error loading image resource: "shootD.png" 2015-08-21 01:08:56.771 Test[2465:538738] SKTexture: Error loading image resource: "shootG.png" 2015-08-21 01:08:57.119 Test[2465:538738] SKTexture: Error loading image resource: "ennemies.png" fatal error: unexpectedly found nil while unwrapping an Optional value You don't have these files. Check the console output (at the bottom of the editor)
You need to accomplish two things * get rid of the SelectView (which you presented) * switch tabs from the VenueView to the FeedView This is possible, and I'll give a couple things to try in a sec, but I want to point out that I don't think this is a very good UX design. Think about the user's journey: they are on the VenueView and they hit a button which slides up the SelectView, then when they are done with the SelectView and it slides down, they suddenly find themselves on the FeedView. This is like entering a building in London and exiting the building to find yourself in Chicago. It is disconcerting and unexpected. If at all possible, see if there isn't a better way to design the user journey. Anyway, let's assume you've just *gotta* do this, and bear in mind the two things to be done from the list, above. Getting rid of something you presented by using presentViewController can be done with dismissViewController. Switching tabs can be done by setting the selectedIndex of the UITabBarController. You want to do both of these things when the user hits the button to leave the SelectView. You will have to experiment a bit to discover the right order to do these actions. Also, sometimes after dismiss, you can't diddle with other view controllers until the dismiss has completed (so use a completion block). An alternative would be to try using unwind segues. This requires more setup than I can describe here, so I'd recommend finding a tutorial on unwind segues.
i have this bug only when 2 bullets touch at the same time but if the blue bullet touch a ennemy no crash same for the green bullet
NSUserDefaults is designed for settings and preferences, but there's no real reason why you can't store (small, limited) arbitrary data in it. The biggest limitation is that 'A default object must be a property list, that is, an instance of (or for collections a combination of instances of): NSData, NSString, NSNumber, NSDate, NSArray, or NSDictionary [or their Swift equivalents]. If you want to store any other type of object, you should typically archive it to create an instance of NSData.' . So, it should work, and if you're having trouble with it, maybe show your code?
Why i need a code to remove bullets ? and thank you for help me :)
Okay, I think I understoord your problem. When bullet 1 touches enemy, they are both remover from the parent, making both of the nodes nil. Then bullet 2 touches enemy, which becomes a problem because enemy's node is nil. So, just add a condition like `if let enemy node = firstBody.node`
I am confused what kind of "things" should be done only in update method. Adding new nodes? Applying physics impulses, etc?
Following up, do you happen to have any tutorials that go over using QLPreviewController? Greatly appreciate your work!
The `touchesBegan` method only gets called on objects that inherit UIResponder. Are you sure the object that implements this methods is a subclass of UIResponder?
There are 3 options if you want to save data: 1. **NSUserDefaults**: you use this to store small pieces of data, like user settings (eg. sound on or of). 2. **Core Data**: this is just overkill for what you want to achieve, I would go along with step 3. 3. **NSKeyedArchiver**: let your model class implement the NSCoding protocol and then save this data to disk. For example lets say you have a user class class Person { var weight:UInt var grades:[UInt] init( weight:UInt, grades:[UInt] ){ self.weight = weight self.grades = grades } } If you want to save this model data to disk, you have to implement the `NSCoding` protocol on this class. This is very easy to do, you just have to implement to methods `init(coder:)` and `encodeWithCoder(aCoder)`. In this case it would look like this. class Person:NSObject, NSCoding { var weight:Int var grades:[Int] init( weight:Int, grades:[Int] ){ self.weight = weight self.grades = grades } required init(coder aDecoder: NSCoder) { self.weight = aDecoder.decodeIntegerForKey( "weight" ) self.grades = aDecoder.decodeObjectForKey( "grades" ) as! [Int] } func encodeWithCoder(aCoder: NSCoder) { aCoder.encodeInteger( weight, forKey: "weight") aCoder.encodeObject( grades, forKey: "grades" ) } } The `encodeWithCoder` method gets called when you want to save the model, and the `init(coder:)` method gets called when you will load the model back from disk. Now to actually save the data, you need the `NSKeyedArchiver` class. In your own class when you want to save the data you call `NSKeyedArchiver.archiveRootObject()` This function needs 2 things: 1. The object to encode (your Person instance) 2. The path to a location on the device to save the file The file path can be something you make up in the Documents directory of your app. func filePath() -&gt; String { let documentsPath = NSSearchPathForDirectoriesInDomains(.DocumentDirectory,.UserDomainMask,true)[0] as! String return documentsPath.stringByAppendingPathComponent("users.tn") } This will create a file named `users.tn` (the extension is something you can pick) in the Documents directory of your app. Now you can call the encode method like so. let user = Person(weight: 12, grades: [1,2,3,4,5]) if (NSKeyedArchiver.archiveRootObject(user, toFile: filePath()) ){ println("Save successful") } If you want to load the object back from disk, you need to use the `NSKeyedUnarchiver` object and just pass it the path to the file you want to load (in our case the `user.tn` file). if let personFromDisk = NSKeyedUnarchiver.unarchiveObjectWithFile(filePath()) as? Person { println("Loaded Person data: \(personFromDisk)") println("Weight = \(personFromDisk.weight)") println("Grades = \(personFromDisk.grades)") }else{ println("Could not find file") } And that's it :) I made a little demo project for you, that you can download to look at the code. You can download it here http://cl.ly/0K2Q1m0g0s0E/NSKeyedArchiverDemo.zip Hope this helps you! 
Did you try to set a breakpoint at the first line of touchesBegan? It also works to write "println("hey this works")", in other words: are you certain the code isn't touched?
You missed option 4, which is Realm. It's way easier than NSKeyedArchiver.
I just incorporated your changes. Thanks again!
I suggest you use Realm. It's a replacement for Core Data, and way easier to use. Here's the documentation: https://realm.io/docs/swift/latest/ Example code from that page: // Define your models like regular Swift classes class Dog: Object { dynamic var name = "" dynamic var age = 0 } class Person: Object { dynamic var name = "" dynamic var picture = NSData() let dogs = List&lt;Dog&gt;() } // Use them like regular Swift objects let mydog = Dog() mydog.name = "Rex" println("name of dog: \(mydog.name)") // Persist your data easily let realm = Realm() realm.write { realm.add(mydog) } // Query it from any thread dispatch_async(dispatch_queue_create("background", 0)) { realm.objects(Dog).filter("age &gt; 8") // =&gt; Results&lt;Dog&gt; } 
Yeah realm is also an option, but i showed the native options. realm adds a dependency and as i read his post i assumed he is just starting with swift :)
No, I'm afraid not. However, it's not hard to use: call `canPreviewItem` on the class first (passing in an `NSURL` with the file path for your file), and if that returns `true` then create the thing, set yourself as its data source and delegate, and add it to your view hierarchy. You will need to respond to `numberOfPreviewItemsInPreviewController` with a number, plus `previewItemAtIndex`, which should return an `NSURL` file path to the object you want to preview.
Awesome! Realm is getting more popular and I found it incredibly easy to pick it up, so that's why I added it. It's best added via CocoaPods, which is indeed another thing you need to learn then.
It inherits from CALayer which is an NSObject. Understanding this now, is there a way to deal with a tap if the video layer takes up the entire view?
I will try Realm if I end up having trouble with NSKeyedArchiver. If my properties are arrays I guess I will have to use List&lt;Object&gt; ?
Excellent post! Thanks for writing this up. A couple of questions: 1) You mention a couple of times that the expression pattern doesn't like protocols. (e.g., "Also, ~= does not understand protocols it seems. Having a Entity protocol and doing struct Soldier: Entity and then matching against Entity instead of Soldier won't work either."). But the following seems to work OK in Swift 2: protocol Entity { var value: Int {get} } struct Soldier: Entity { var value: Int init(_ value: Int) { self.value = value } } struct Peasant: Entity { var value: Int init(_ value: Int) { self.value = value } } func ~=(pattern: Entity, x: Entity) -&gt; Bool { return pattern.value == x.value } switch Soldier(42) { case Peasant(42): print("Matched") // Does match default: () } What is the scenario that doesn't work correctly? 2) Is there really a difference between the "identifier" pattern (constant value) and the "expression" (~= matching) pattern? The compiler might optimize them differently, but I have the impression that (at least from a logical perspective) all comparisons with extrinsic values are interpreted as "expr ~= switch-value". As evidence of this, consider that all the Swift native types seem to understand ~= as a synonym for ==. So, for example, (5 ~= 5) == true. Also, contrary to the Swift doc's statement that "Although any pattern can occur in the case labels of a switch statement, in the other contexts, only wildcard patterns, identifier patterns, and patterns containing those two patterns can occur," expression matches seem to work fine as well. So, given the definitions above, this construction seems to work fine: for case Soldier(42) in [Peasant(42)] { print("Matches") // Does match } 
Also, instead of saving it to a file, is it possible to save it using NSUserDefaults after its been encoded?
Look up the docs on relationships between objects. If both the list and the objects in the list are stored in a realm database, you need to make a connection (like with Person and Dog).
I realize you're looking for third party libraries, but Apple's built in libraries in Cocoa Touch are pretty great. NSJSONSerialization is pretty good for JSON parsing in Swift. NSURLSession is pretty good for networking. When you use Cocoa Touch, you're pretty much guaranteed support from Apple, and you occasionally get things for free. Watch their [Cocoa Touch Best Practices](https://developer.apple.com/videos/wwdc/2015/?id=231) WWDC talk (or read the [notes](http://roadfiresoftware.com/2015/07/notes-from-wwdc-2015-cocoa-touch-best-practices/)) for more. And [be careful](http://roadfiresoftware.com/2015/08/save-your-future-self-from-broken-apps/) about adding third party libraries. 
Nice tutorial
If you're familiar with swift, then you're probably ok with Cocoa. So you're probably more interested in Objective C from a programming language point of view. I'd recommend the Big Nerd Ranch Objective C book to begin with. It's really nicely laid out and explains the C inheritance quite well.
Hey, thanks for your comment! Back when I wrote the expression pattern part of the post I tested all my writings and examples in a Playground. I tried a similar example as the one you provided, and it didn't work. However, before that, I had tried to implement tuple matching in various ways, so maybe that confused the playground. I changed the post accordingly, and made a mental note to restart Xcode the next time I come up something which ought to work and but somehow doesn't ;) I listed the identifier pattern because it is also listed under pattern management in the Swift docs. I think you're right that (in case statements) the expression pattern is the one that is being used for constants. The docs also hint at that, as they say that the expression pattern by default compares via '=='. The identifier pattern, if I understand it correctly, applies more to the actual binding of values via let or var in the rest of your code. However, since I wasn't really sure about that I went with the default as it's being described in the docs. Regarding the for case, you're right too. It seems the docs are outdated. Another case where I should have tested this in a playground. I've updated the post accordingly. Thanks!
Swift defaults to `~=`, I think. func ~= (lhs: Int, rhs: Int) -&gt; Bool { return false } switch 2 { case 2 : print("hey") default: print("ohh") } // prints "ohh" But I think /u/terhechte got it right - it would be dangerous to think that `~=` and `==` are synonymous. Sure, for equatable types, `~=` is implemented as just `==`, but that's just the default, and any overloading will change it. Especially if you wanted to do something with literals. For instance, say you had a regex: struct Regex : StringLiteralConvertible { init() {} init(stringLiteral value: StringLiteralType){ self.init() } init(extendedGraphemeClusterLiteral value: StringLiteralType){ self.init() } init(unicodeScalarLiteral value: StringLiteralType){ self.init() } } func ~= (lhs: Regex, rhs: String) -&gt; Bool { return true } switch "hello" { case "": print("reg") default: print("not") } The type inferred will be regex for the literal, and the overloaded `~=` will override `==` - even though `==` exists for strings. Or is you wanted to do some haskelly pattern matching: extension EmptyCollection : ArrayLiteralConvertible { public init(arrayLiteral: Element...) { precondition(arrayLiteral.isEmpty) } } func ~= &lt;C : CollectionType&gt;(lhs: EmptyCollection&lt;C.Generator.Element&gt;, rhs: C) -&gt; Bool { return rhs.isEmpty } switch [1, 2, 3, 4] { case []: print("Empty") default: print("NotEmpty") } let empty: [Int] = [] switch empty { case []: print("Empty") default: print("NotEmpty") }
Thanks you. Great website.
Thanks for the feedback! It received 50 downloads on the first day.
Thanks! 
I've been running into this as well, mine only seems to occur after I enter a search query in the MPMediaPicker. And only restarting the device appears to remove the lag once it starts. Really lost haha 
It is not possible to create an alarm clock like you are describing. The best you could do would be scheduling a local notification. But that's not going to be like an alarm going off that needs to be dismissed.
How do the other apps on the app store solve this problem? Do they use a local notification which awakens the app? or just hope the user doesn't close the app?
I think they just hope you don't close the app
I took a class in Comp Sci last year, so I learned some key programming concepts there. I also watched some of the Stanford iTunes U course for app development, and googled questions when they came along.
I just wanted to say thank you for making these tutorials. These are great!
Follow up: Your article helped me refactor some lengthier code into something much more concise, and quite elegant.
Yes local notifications are your best bet. It has to do with the structure of iOS. Sad to see posts like this getting down voted. IMO it's a legit noob question. Shows the circle jerk state of this sub...
I only run Yosemite.
Thank you! Sure I will use MVC architecture. Mentioned AIR app has MVC architecture too and same architecture I want apply for swift version of this app. But I was confused if use storyboards for app design or everything have hard coded. But it's clear now.
If your button is in your UI in Interface Builder, you want to create a IBAction function and connect the button to it by dragging from the button to the source editor while holding the 'alt' key pressed: http://i.stack.imgur.com/uhNrj.png In the editor, then, a popover will appear that lets you create a new Action with a name. If you enter a name (say notificationAction) the following should appear: @IBAction func notificationAction:(sender: AnyObject?) { } 
Thanks for sharing your experience. It helps me a lot. 
Thanks for your response. I don't like unnecessary dependencies on UI editors, it's always problem when you decide to make bigger changes in UI. Also in flash I used to write all UI components through code. It's more work on beginning but it's saves a lot of time in future updates of app.
To tell the truth - I also don't see any problems with a single .xib for each screen approach. With multiple storyboards you can use segues for transitions inside single storyboard, if you want to switch to VC from another storyboard - then yes, you need to do that in code.
It still doesn't seem to be working. I'm not even hitting a breakpoint inside of the userNotificationCenter. Here is the full class (along with the rest of the code). https://github.com/chris-paterson/WalkReminder/blob/snooze/Walkr/ReminderNotification.swift It's being called [here](https://github.com/chris-paterson/WalkReminder/blob/snooze/Walkr/CountdownViewController.swift#L47) if it helps at all. Some more info: I'm using Swift 2 on El Capitan PB5.
Yes, you need to set the delegate : // Set the delegate for the notification center NSUserNotificationCenter.defaultUserNotificationCenter().delegate = ... In your code : [Pastebin](http://pastebin.com/a2p1gJx6)
It worked! Thanks a lot man. I'm going to go off and learn about delegates. 
100% code here. Multiple UIViewControllers, of course. So much more flexibility and control than using storyboards and xibs, in my experience. I come from a flash background too, fwiw. 
You could do it in storyboard by having them all under the main button and then in code when you tap the main button have it animate the hidden buttons. 
It's A LOT faster and better overall. It still could use some work though. 
Is there a reason why I'm not getting code completion for the Twitter Framework? Is it due to being coded in Objective-C rather than Swift?
Oh sorry I didn't exactly read passed the title. Umm sounds like you're missing some headers? How did you install the framework?
Well, how specifically did you install and configure the frameworks? If you used CocoaPods then it should be done for you. I assume the Twitter Framework is installed like Crashlytics, where it guides you to drag things around? It sounds like Xcode just isn't seeing the framework headers as you're coding.
Also, why printing a tweet e.g. print("tweet") The logs spits out "Optional(@jack: dewey's status? "jack smells")" Why does it include "Optional" before the string. Can I have it just print the string?
I used the Fabric Mac Application where I drag and drop things...
You should read on up Swift's Optional type, https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID330 Basically, the reference to `tweet` is optional, meaning it could be `nil`. You need to unwrap it before safely using it. ``` if let tweet = tweet { print(tweet) } ```
This blog post was already submitted [here](https://www.reddit.com/r/swift/comments/3gs675/apple_swift_developer_blog_swifter_sdk/?ref=search_posts) 11 days ago...
google
Rather than using NSUserDefaults for this (it's really for saving small amounts of data, like configuration), I would highly recommend looking at http://realm.io It's a very easy to use object persistence system with built in facilities for querying and pretty much every thing else you might need. 
Yeah, I feel like there's a joke I'm missing here..
Did you commit your changes and then `git push`?
There are so many answers and none of them are good. He's a moron. Let's just leave it there.
Hmmm interesting use of camel casing...
Got it, I'll check realm out and hopefully theres not much I need to change with what I already have. 
[Release notes here.](https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7_beta_6/Xcode_7_beta_6_Release_Notes.pdf) Surely GM is next?
Fast spot! ...and don't call me Shirley.
Finally.
The subtext for XCode releases should always be "Because it can't get any worse. We hope." Seriously, the number of internal errors I get with XCode every day is insane. Then when the editor stops crashing, the compiler segfaults! Can't win.
YES!
I wrote a short blog post that explains the upsides and downsides of this in more detail: http://appventure.me/2015/08/25/optional-throw-swift/
It can't be much worst than Eclipse. 
Awesome :). Swift's error handling is pretty nice now, with a choice of how much you want to handle: Nothing (`try!` ...it better work), error-or-not (`try?`) or explicit (`try`).
Ok, so how would I replace all my `.map` which I used to replace `for` loops? In beta 6 I have bunch of warnings, since `map` should return something now. Before beta 6, `.map` was a great trick for enumerating optional collections: chats?.map { ... Now it is not.
Map should always return something. Use `.forEach`, but I'd really rather use a `for` for those cases. I dislike "functional for" myself.
thanks for `.forEach`
Looks amazing! Congratulations! 
This is true, eclipse is surely the worst
If you *do* want to check out Bluetooth in swift, check out my nRF8001 framework: http://michaelteeuw.nl/post/94237188772/swifty-bluetooth-using-nrf8001-swift
If you need some inspiration, check out my take on this: http://michaelteeuw.nl/post/105898250562/parallax-table-view
https://www.reddit.com/r/swift/comments/3idn8v/unwinding_with_a_custom_segue_is_super_easy_in/
Awesome stuff Wayne! How did you make use of Wenderlich's site? I'm learning mostly from Bitfountain right now.
The extension file worked but when I insert: myUIImageView.image = userPhoto.circle under ViewDidLoad it responds "Use of unresolved identifier 'userPhoto'. Am I doing something wrong?
I wish they'd make custom `UIStoryboarSegue` subclasses work with `@IBInspectable`, I wanted to add an animation duration property the other day, thought it would be nice for the property to be configurable in the storyboard. 
Make sure you present "over full screen" or the view behind the modal view will disappear after the animation completes. 
Thanks for the tip! That seems to be a recurring one on some SO answers I found earlier as well.
Thank you lord.
This video right here should explain it: https://vimeo.com/106757336
Anyone get free provisioning working yet? (the ability to test apps on iPhone for free) 
As somebody who is interested in ios/osx development, but has no idea what that is, what is a segue? Thanks!
It's basically a transition between two views. In the screenshot, I have a class called LeftToRightSegue that creates an animation given two view controllers. I'll post the code later today when I get home.
The only tricky part there is the lines and circles, and even those aren't too bad. You can draw the rectangle/lines with UIViews or UIBezier paths. I'd use the path method, and assign each path to a CAShapeLayer. Then you can animate the path property of the shape layer. The rest of the animations are simple position/scale/opacity/rotation.
This part of the scene/view manager? Storyboard? Sorry if that's not it, the name escapes me.
The video is so fucking annoying, cuts to his slides to watch the stupid vacuous gifs and then his face whilst displaying pertinent things like tool usage and example code. 
Apple does not allow you to upload apps with beta versions of APIs/Xcode. But don't worry, they usually send an email to all developers saying, for example: "please submit your iOS 9 apps now" some weeks before the new version is released. I got an Apple Watch app out on release day. Don't worry, as long as you make sure you have everything working as quick as possible, there is enough time.
If Apple follows suit, iOS 9 should be released September 18th, so that's when you should be able to get the app published. And in that case, the app should be accepted to review around the 14th or so, possibly even the week before.
The 18th is what I was thinking too, along with the iPhone 6s. I was really aiming for that date too because it's special to me and just happens to be the day that aligns with the expected release. 
That's a bit rude. You are not forced to watch the video. There is a text article right under it, which is quiet nice and gets straight to the point. I am impressed by the C function patching. I was not aware that it is possible to do it from Swift.
Are you sure that it is? When I ran your code and added the following `deinit` method to `MyClass`: deinit { print("deinit \(name)") } I see the following output: deinit Three Program ended with exit code: 0 
I'd definitely appreciate that. The content of the talk was spot on, but when showing code, it would be good to get a glimpse of it, if only for a second. I can pause a video so that as someone who cannot see the slides, I can determine whether or not it is helpful to me, with the assumption being that every slide has meaningful content justifying its existence. I was initially angry because I felt like I was watching something that had lots of potential to peel the mask of mystery away from a lot of things but it was playing keep away from me.
What about `method`? That's not weak.
Can you give the full code? Have you tried declaring every param as a separate "let", explicitly stating its type? As the last resort you can just call this function from ObjC
I'd also like to know when I will HAVE to submit app updates compiled for iOS 9? I'm working on an update to an app right now that only supports iOS 7 and 8. I'd like to publish the update in the last week of September. Will Apple enforce all new apps and app updates to be compiled against iOS 9 the moment iOS 9 is released? Is there any chance I could push an update in late September that was compiled with for iOS 8 using XCode 6.4? I know this is a terrible idea for several reasons, I just want to confirm what actual restrictions Apple applies and when they take affect.
It's just a strong reference to the class though, shouldn't retain the instance.
I tried extending to multiple run loops, and it did release eventually, but not until after all the calls to `emit`, so maybe it's the `NSMapTable` holding onto references.
Is it you going around downvoting people? What a sad life you lead.
Yeah that seems to be it. This works as expected: https://gist.github.com/blixt/08434b74f0c043f83fcb
are you planning on making this Linux only in the future or Mac/Linux compatible? 
I'm nowhere near a good enough programmer in Swift or any language yet, nor do I understand exactly how GitHub works with various people editing files etc. (hopefully once I finish Comp. Science I will be!) but in your RegEx.swift file you have what looks like definitions of the standard alpha, printable etc. Your description switch statement seems wrong though, even when compared to the comments you have above it. You have written: var description : switch self { case Alpha : return "[a-zA-Z0-9]" case AlphaNum : return "[a-zA-Z]" case Digits : return "[0-9]" case Printable : return "[^\\p{Z}\\p{C}]" } Should the returns for Alpha and Alphanum be swapped? Maybe not though, and that'd be the reason I don't get involved with editing projects!
Very nice! I'll post a few minor suggestions here: In your `HTTPRequest` you could maybe do this to have a multiline description: return [ "This is a test", "with multiple lines" ].joinWithSeparator("\n") instead of appending 6 times. Here and there I saw some forced unwrapping, I'd advise against it, because it can lead to a crash in some situations (even if these don't occur very often). For example this line: guard statusTokens.last!.uppercaseString == "HTTP/1.1" else { return nil } would crash if the array is empty, but if you just change it to guard let last = statusTokens.last where last.uppercaseString == "HTTP/1.1" else { return nil } it won't. Your `removeFirst` extension on String crashes if you try to remove more characters than there are. You can do this instead: extension String { func removeFirst(n: Int = 1) -&gt; String { return String(characters.dropFirst(n)) } } Your `splitOnce` extension on `String` is inefficient in that it splits everything and then puzzles it back together (also without reinserting the split character), also `reduce` isn't as fast as it looks. This method should work better: func splitOnce(c: Character) -&gt; (String, String)? { guard let index = characters.indexOf(c) else { return nil } return ( String(characters.prefixUpTo(index)), String(characters.suffixFrom(index.successor())) ) } You don't need to manually handle UTF8: internal static func fromUTF8Bytes(bytes: [UInt8]) -&gt; String? { return String(bytes: bytes, encoding: NSUTF8StringEncoding) } EDIT: You said you didn't want to use Foundation, so this doesn't work. (I don't really know why you don't want to use Foundation, it has lots of commonly used stuff in there, stuff that you'd have to reimplement and potentially make errors) also internal mutating func newByReplacingPlusesBySpaces() -&gt; String { return split("+").joinWithSeparator(" ") } Sorry for proposing so much, but I really like the conciseness of Swift, I can't help it xD I've got some other small proposals, let me know if you want to hear ;)
Check out these resources: https://www.hackingwithswift.com https://www.bitfountain.io https://www.udemy.com/the-complete-ios-9-developer-course/ I have been using these resources and they are really helpful. All of them teach you to program with Swift while making basic apps and then you can apply the knowledge to your own projects. For the udemy course, sign up for an account but wait for udemy to email you with coupon codes so you can get the course for $10-$15 instead of $199.
On a phone now, so sorry if there's bugs, but the most efficient + replacement would be: func replacePlus(str: String) -&gt; String { return String(str.characters.lazy.map { c in c == "+" ? " " : c } ) }
He cites 2 prerequisite courses, a CompSci 106 and another intro to object oriented programming, I found those on youtube as well but you think its worth just blowing ahead and following along, my programming dictionary is alright but I'm sure I lack a lot of basic understanding. 
I have indeed used this function and know how to make it work. I won't tell you though because: - You obviously don't care about anyone helping you - You can search for a solution yourself, it can't be that hard With questions like this you're not going to find anyone wanting to help you, learn to respect others and they'll respect you. (Also don't be a dick) EDIT: Sorry
This is another good one - http://www.appcoda.com/ios-charts-api-tutorial/
You need a solid understanding of object oriented programming to do this course. If you search comments about it here on Reddit, you'll see the general consensus is it really ramps in lecture three. I'm not knocking the course. It's very well done and I really like the professor. I'm also using a Big Nerd Ranch book as well as http://HackingWithSwift.com. I feel between the three I'm beginning to get a pretty good grasps on the basics. Edit: typos made it sound like I was drunk when I posted. 
I don't think there's any harm to trying it out. Like Blimey85 said the professor does assume that you know how to write functions and what object-oriented programming is, so you will need to either know or learn some of the prerequisite material. His warnings are a bit dire-sounding for the sake of the students actually taking the class who might figure out three weeks into the term that they're not ready, by which time dropping the course for another one becomes more difficult. Since you're self-paced, you don't need to worry about that. The calculator is probably a good litmus test. If you can follow along reasonably well as he builds out the calculator app (he does everything, laying out the UI and writing the code, on video), you should be fine. If you find yourself lost, you might want to put the course aside and try something simpler first. I will say, though, that the calculator app is probably one of the simplest "real" apps you can build for iOS, so if you can't do it, you should probably work on fundamentals first.
Very nice project ! I will have a closer look at your repo and try to contribute. 
Have you read all the background execution info to see if anything suits your needs other than just background fetch? At the end of the day there's not a lot you can do to guarantee that your app will stay alive or be launched in the background. The system reserves that right. You can hand over background fetching to the system using NSURLSession though, so that downloads are not dependent on your app's state. Or start background tasks that are at least told when they expire https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/BackgroundExecution/BackgroundExecution.html
Why dont you work on lowering energy usage and data useage rather than trying to deceive the user ?
``private var invokers&lt;Invoker, EventData&gt;`` This is now your dictionary, check out the Swift ref's on how to allocate a dictionary. You could also make it optional as well so ``Invokers&lt;invoker,EventData?&gt;`` Or ``private var invoker : [Invoker: EventData]?``. If you use [weak self] or [unowned self] within a closure and you have the dictionary as a property of it, you can safely use the dictionary if you are referencing the weak self. 
i know i personally do it, but i would also leave an app open if i wanted it to background fetch and stuff, I personally don't care if my FB feed is 100% up to date before i open the app lol. I guess it depends on this guys app, as I imagine if it was say an enterprise based app for a specific need they would be told to leave it open, so on that basis its probably not.
I don't think the app can run in the background unless it is playing audio etc. 
Erm, failed to provide completion here: var x: UITableViewCellAccessoryType = .
No, it's physically impossible.
Ohh, on the `removePercentEncoding()` method, do you see the `where n.isASCII()`? Just remove this for it to work with any numbers. It doesn't work because any number starting with "8" or more is not ASCII and you only provided those. From [Wikipedia](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters): &gt; Percent-encoding a reserved character involves converting the character to its corresponding byte value in ASCII - oisdk (here [foBrowsing](https://www.reddit.com/user/foBrowsing)) is actually a very very good Swift coder, probably the Swift-est I know. He also has [a blog](https://bigonotetaking.wordpress.com) if you want to see some beautiful Swift action. Really cool guy, he also wrote the awesome [SwiftSequence library](https://github.com/oisdk/SwiftSequence) - I would think twice about using `try?` because as with `try!` it gets rid of the error. `try?` converts an error to nil and you generally want to keep the error. - Ahh I see, yeah that's cool As you can see I like making code more beautiful xD. You can ask me anytime if you want someone to look at your code ;). I'm not really the library-writing/porting guy and I also don't have a lot of time, so I can't help you all that much. Anyways, have nice day!
- Still doesn't work with Unicode strings and some buffer overflow with weirdly formatted ones :( Don't worry about it though, I'll try to fix the details by myself :P - Oh right! I read that blog! - Thanks :) I'm going to work on URLRouter soon and that's going to be hellish, I'll need all the help I can get. Have a nice day too! 
If you're primarily writing JavaScript to get better at using the Cloud Code portion of Parse, that definitely narrows it down a little bit. JavaScript is a single language, but usually has two purposes: browser DOM manipulation (front-end) and now server-side (through Node.js). Cloud Code is very similar to Node.js, so you should be looking for some tutorials that have something to do with that. Though any tutorials that have something to do with JavaScript (the language) would be fine too - just don't get sucked into the front-end DOM manipulation stuff as that won't help you as much with Cloud Code (though it doesn't hurt to learn this stuff, either). I can't directly answer your question as to where to find tutorials for it (except Googling), but hopefully this helps you look for the right search terms.
Why is this in /r/swift?
 &gt;I hope this question doesn't get asked too often here but Ill give you the run down. It does get asked a lot but you need to understand the Swift community is under a lot of flux. Things are changing rapidly. &gt;I have been messing about with xamarin &amp; Xcode. I was using the storyboard to create visual representations of what an app I wanted to build would look like to developers. Either way that is good engineering, very few people can blindly start coding and end up with a usable interface. &gt;Then said screw it, why pay them, let me try to learn on my own. But I dont want to keep "learning" and not actually building or doing like what happened when I tried with other languages. This is where I really think you are totally messed up, you will be far better off learning the basics before venturing into a large project. Some of the worst code you will ever see comes from people that take on more than their experience makes them ready for. You don't want to gain your experience on an important piece of code that may take years to unravel to support good practices. If you don't want to take the time to learn the basics, or don't have the time, then you really should farm the project out. The fact is if you try to learn as you go you could easily double or triple the time to completion. Even then you will likely have a half assed solution. I'm not trying to say don't bother to learn to program, I think it is a good idea really, what I'm saying is don't try to learn programming on an app that is important to your business. Also don't bother if you aren't willing to learn the basics and good practice. &gt;Can someone just give me a tiny project to do? I I'd start with a course that teaches programming from the ground up, intro to computer science and the normal follow on courses. Thankfully these days you can find suitable courses on line. Make use of a course that isn't built around Swift. While taking the course start a separate small Swift project as a place to learn. Calculators seem to be popular but apps to process text, edit images, play sound or whatever will do, the idea is to do an app that is easily manageable. Now you may ask why choose an educational program built around a language other than Swift? Because the goal is to learn the science. If you learn Swift you goal becomes learning Swift which doesn't help you in the long run. Beyond that being exposed to different techniques can often lead to a revelation about how something works. Probably a third reality is that one dimensional programmers aren't very flexible. Maybe a fourth reality is that Swift isn't all there yet, you will need to understand other languages and approaches to development, to build apps for Apples Systems. 
Just so I understand the context better: are you watching the video full screen and unable to see the slides? Right now we’ve optimized the viewing experience for desktop, laptop &amp; tablets, where the slides will automatically advance as the video progresses, but the video really isn’t meant to be watched on its own. We’re trying to tinker with the recipe as this is problematic on phones or for anyone that tries to watch the video full-screen.
Sorry let me clarify some things : &gt;This is where I really think you are totally messed up, you will be far better off learning the basics before venturing into a large project. Fair enough, the advice I have seen over &amp; over online and in books though has been to learn by doing. They always say have a project in mind. Now mind you I agree with you that you need some theory understanding of definitions and the science as you said. Also, I went from this project being launched in 3-6 months to understanding that I will just be working and focusing on developing my language skills. Theres a good chance I may hire a developer in the future for my projects but at least then, I will know enough to understand what the limitations &amp; expectations should be.
Thanks for the advice!
its very likely apple will allow you to continue using swift 1.2 as they do not make developers use swift over objective C
The dict I speak of would be a property on the (long-lived) `Event` class (not a variable in the method), so that I can look up and remove a previously added `Invoker` instance (which represents a listening object) without iterating a list. The only way to find the correct `Invoker` instance would be through the reference of the `listener` object (which is `AnyObject`) that is passed to the `removeListener` method. It has to be a weak reference or it will never get released unless I explicitly remove it. That's why I think a Swift dict would never work. The current implementation is AFAIK O(n) to delete a single listener, and to delete a list of listeners it would be O(n*m) where m &gt;= n.
There's an option in XCode: Edit -&gt; Convert -&gt; To Latest Swift Syntax... that should help with the conversion process. (Edit: Looks like you may have already tried this.) Even if Apple allowed you to keep the old syntax I wouldn't bank on leaving it in that state in the event that you need to update the code later. In the past, previous syntax upgrades have taken me less than an hour to update and contained important type-safety improvements (such as changing "as" to "as!").
I would definitely download and test the app you have in the App Store now on a device running iOS 9. My app ran great on iOS 8 but crashed on launch in iOS 9. When I loaded it into Xcode 7 to test it, I had a couple of forced unwrapped optionals that were nil that I never noticed in Xcode 6 because I wasn't running into any crashes or issues. I was able to fix the issues with Xcode 6 and release a version that didn't crash in iOS 9 that can live on the App Store until I release an Xcode 7 built version. Besides that, you should **need** to build a new version with Xcode 7 and Swift 2 if your current version works fine with iOS 9. The converter built in to Xcode 7 makes switching to Swift 2 rather painless, though.
For some reason adding self.scene?.size = CGSize(width: 640, height:1136) to GameScene.swift solved my issue. 
Currently, Xcode 7 doesn't support 1.2. It may after its release, but I wouldn't plan a business around it. Swift 1.2 will probably last as long as iOS 8, if that's a long enough time frame for you. 
I had never seen Swift until 2 months ago, and before then I'd only ever fiddled with BASIC or C#, never seriously getting into programming. Now I can create my own interfaces and write the accompanying code. You'll do fine if you're engaged with it and serious about it. I found www.weheartswift.com helped a lot, it's a program that runs challenges in Xcode and is a lot more useful than just watching a video.
you can try a couple of things. 1. you can simply change the type of HighScore to NSInteger so that when you assign it from NSUserDefaults, the types match (var HighScore : NSInteger) 2. keep HighScore as Int and change the type cast on your HighScore assignment to Int (HighScore = HighScoreDefault.setValue("HighScore") as! Int) 3. use the Int() initializer and supply it your NSInteger assignment, although this is rather verbose (HighScore = Int(HighScoreDefault.setValue("HighScore") as NSInteger))
This worked fine for me: var oneInt : Int! = 1 var oneNSInteger : NSInteger = 1 let HighScoreNSInteger: NSInteger = oneInt! as NSInteger let HighScoreInt: Int! = oneNSInteger as Int print(HighScoreInt) print(HighScoreNSInteger) Using the Xcode Version 7 Beta 6 What version are you using?
Ya. It confused me too. Luckily, running in the Xcode 7 simulator was enough to trigger the crash so I could see something was nil that I didn't expect. The crashes were pretty much all in viewDidLoad so I can only assume some changes were made in the order that things happen and some assumptions you could make in iOS 8, can't still be made in iOS 9.
Logically, comparing to sqrt(numberToTest) or (numberToTest / primeNumber) is actually checking the same thing even though it's not immediately obvious. primeNumber &gt; (numberToTest / primeNumber) Multiply both sides by primeNumber primeNumber * primeNumber &gt; (numberToTest / primeNumber) * primeNumber Simplify primeNumber^2 &gt; numberToTest Take the sqrt or both sides sqrt(primeNumber^2) &gt; sqrt(numberToTest) Gives us the other version primeNumber &gt; sqrt(numberToTest)
Man Swift 1.2 is unbearable. I've used Swift every day full time since Xcode 6 Beta 1 and the _moment_ Xcode 7 GM comes out I'm going to migrate my client's app and then go out celebrating.
There is a shortcut / Menu option to auto fix all suggested errors in 1 file. I believe its Editor -&gt; Fix all in scope, I work on a commercial app that we started writing swift files into gradually and had to convert near 200 files, most of which where either unused vars in lets being changed to "_" and using vars without mutating.
6.4 
I'm pretty positive you will only be able to compile with the ios 9 sdk in swift 2.0 or obj C
 &gt;I was thinking that, I will have to do it sooner or later. I don't think I have hidden problems right now (At least not in ios7 and 8) Only you know your code well. However I would not discount the idea that compiler is finding problems in your codesss &gt; but there are too many changes with swift 2.0 that the tool doesn't change automatically and gives compilations error instead that is overwhelming. 
Yup
Thank you ! The app actually works with a website / web app and it's important that the changes made in the website are mirrored on the app. It works fine with background fetch but if the user kills the app there will be a little delay in displaying the latest information the next time the user opens it. That's what I was trying to get rid of. You're making a good point saying thay you wouldnt want an app to open itself up on your phone after you killed it. I might just try to optimize the amount of data that gets downloaded for the server and reduce the delay. I also like the idea of not loading everything at once but downloading chuncks of information. I guess I could have the app download the most important/relevant to the user first. You gave me a lot to think about. Thank you
Maybe helpful: http://making.duolingo.com/real-world-swift
Thanks! That definitely with a look.
iOS would just plain out wouldn't allow this it just wouldn't allow you to draw to the screen when not it the app or in other apps. An alternative fix would be to jailbreak your iPad and install a tweak such as "show my touch"
Over the past 2 months I learned swift as my first programming language. I primarily used the book along with using team tree houses 14 day trial to learn the basics. How ever I still am not even close to being good at it. Good Luck
I'm probably misunderstanding your goal in doing this, but thought I'd mention: I believe it is meant to be possible to start the Swift REPL from inside LLDB; and I know for sure you can use LLDB on an app running on the simulator. So that maybe something to look into, if it would suit your purpose.
I just finished delivering a large Swift app to a client and I absolutely do not recommend it yet. I hated every minute of development as the compiler began to crash more and more and the debugger simply doesn't work at all. Maybe use Swift 2 if that's an option. It is a lot better but the debugger still crashes constantly. 
I have been learning Programming Methodology from the Stanford courses and so far, this has been the best. It's basically an intro CS course that actually defined methods, loops, for/while, conditions, if statements and I am able to progress. Now I just wish I had a real life tutor I could work with to do some assignments with or ask when I get really stuck. Never the less, it does make me consider going back to University or taking some formal education just to benefit from the structured approach. 
If you aren't worrying about white space in all languages you are a shitty programmer.
An NSTimer will only run whilst your app is running, so no good for an alarm app. You'll need to schedule a local notification. I'm about to go to bed but I made a simple multi-timer app using notifications I can share tomorrow if you're still stuck. 
Why are you using swizzling?
Thanks for the reply! I'll put an update once I register in the course. 
Yep what this guy said. :) look up local notifications. 
Change your shebang line to be `#!/usr/bin/env xcrun swift -F /Library/Frameworks` to enable your script to search the Frameworks directory for any module-enabled, third-party frameworks you have stored there.
Thanks all Major issues I see is the tool stability for swift. Also we were not interested in mixing objc and swift but rather go full swift, but now it seems risky. 
That's nasty
Mostly in UIView animations, scrolling and in Networking as we need to modify over and above the drm lib(3rd party-proprietary) network connections. Might be other things I am not aware of.
Have you tried just doing YahooSearchKitSomethingObject whateverObject = [[YahooSearchKitSomethingObject alloc] init]; whateverObject.developerMode = NO; DISCLAIMER: I'm not familiar with Yahoo Search SDK, so please note that the name of the class I'm using is a placeholder.
Every professional developer I know spends a great deal of time looking things up, particularly on StackOverflow. :) I've read papers with hard numbers that I can look up again if you're interested, but IIRC the average amount of time programmers spend looking stuff up online is something like 20%.
Yes! I don't know where I'd be without it! 
Oh I do. I take out books from the library as well. But while I'm working on a program I will search for ways to solve a problem. Most recently it was for NSUserdefaults and NSData. I found code samples, tutorials and documentation, and it took me about six or seven hours of trial and error and searching to figure out how to take all of those pieces to fit them into my puzzle. It was frustrating but quite rewarding in the end.
Yes. Absolutely. And we also make contributions by helping others when we can.
I feel like StackOverflow is the modern, quick to iterate journal of programming. You can publish for an entire community to see, there's quick peer review, and everyone is consciously or unconsciously helping everyone else get better with their successes or failures.
(developer for 25 years), Of course - APIs are way too big to keep in your brain. If you have to multitask between different languages and toolkits, it's even worse. I never take anything on SO or blogs verbatim without understanding what's going on. Search results are mainly a nudge in the right direction, and then I can go to the official docs, or trusted books / websites for more detail.
I've been developing iOS apps professionally for 5 years now, and I still look stuff up every day. Most of the time, its things that I know how to do and forgot, or something that I know should be possible, but just don't know the exact syntax. Also, there's always going to be some framework or library that you've never worked with before, and a good tutorial showing a practical implementation is sometimes much easier than trying to figure it out with the API reference. 
I haven't had a chance to look at the code but I might suggest a better project name. Maybe something joke JSON2CoreData. I just don't like project names that don't at least in some manner suggest what the project is. 
Lots of companies care about their employees being independent and often time knowing how to use stack overflow is a good mark in their books :)
Pretty good overview, thank you! 
As painful as it is, its worse in obj c. The only downer is that stackOverflow has way more help for obj C than swift.
I like the service rating! Well done!
The author forgot guard instead of if let
StackOverflow just celebrated 10.000.000 questions asked ;).
The formatting on this site is atrocious. The width is fixed so I have to scroll horizontally in little text boxes to see the code even though I have a huge monitor. Please stop designing websites for mobile first and ignoring desktops. EDIT: Adding that the scrolling text boxes are just a symptom, not the real problem. Forcing me to view your site at fixed width, even if the code fits, is still bad. Let me control my reading experience. Don't assume that your design is one-size-fits-all. I have a widescreen monitor for a reason. EDIT2: Also, I'm not targeting you specifically, Matthew. The article isn't bad. I'm just fed up with all of this mobile web design crap. And I'm trying to stop drinking caffeine. So I'm cranky.
when I have to use socjet connection I've used [CocoaAsyncSocket](https://github.com/robbiehanson/CocoaAsyncSocket) but yours lib looks much simpler. In case bluetooth vs sockets. From my experiance sockets are more reliable solution but it depends what you actualy will do. It's hard to say without further information. 
25% tips? 'Murica you insane!
Well, only if the service was great :D
Thank you:) As a poor High School student, I can't afford a developer account/iPhone, so no download link._.
Put it on GitHub, maybe you can get some people contributing or advising.
Well that's a neat idea, but I don't think that people are interested in a simple tip calculator :D
Since you are a high school student, I would recommend you put it on your github account anyway. Projects = experience = better chance of getting hired when you start looking.
Yes you should do both things in parallel like udemy and dive into it. learning + practice. so you will learn fast. . . and i am doing swift from last 4 months it is very very easy and interesting language. . it syntax seems like javascript so it will be easy for you to adopt as you are web developer
On `UINavigationItem` you can set a `titleView` which can be anything you want. In this case it would just be a view that contains two labels.
Looks awesome. I created one as a first project as well and we kind of had similar ideas. Heres a [link](https://projectinnovator.wordpress.com/2015/08/11/i-built-a-tip-calculator-app/) to a write-up I did about it.
The process is essentially the same for Obj-C and Swift projects: - Drop the header files and dylib file into your project, preferably in their own group. - Ensure the dylib file has target membership for your app. - In "Build Phases", add a Copy Files phase, destination "Frameworks", and add the dylib file to this phase. - For Swift, add the API headers to the Swift bridging header. You may need to add &lt;Foundation/Foundation.h&gt; as well, since it looks like TETGazeAPI.h does not. Your project should compile and run. I didn't need to tweak any other compiler or linker settings.
Well, you're the reason why I didn't gave up on swift, thanks! :D Some days ago, I remembered your project I saw here and thought about doing one by myself.
Wow, thats awesome. Im glad I was able to keep you going. Nice job on the app, the UI is very nice. Keep up the good work!
Awesome. Can I download it?
I am sure you want to protect your IP, but can you say why he would assume you had a "secrete algorithm"? In broad terms why would that be necessary ? I hate to say it but it sounds like a learning experience for you (and an expensive one at that) you did sign off on both of the 1st two mile stones. It sounds like the specs of the app and the expectations maybe were not clearly defined... 
In a nutshell, the app was supposed to find an optimal solution (a sports lineup) based on projected points and salary threshold. It would work similarly to how Solver would work in Excel.
I am launching my website AppSwiftProgramming.com with new Swift tutorials for beginners. For a limited time, for Reddit users, I am providing a coupon code "reddit1" that you can use when you signup to get access to my videos and complete source code examples at a steep discount. These teach you how to to create user interfaces through code, unlike other tutorials that use the Story Board drag and drop tools. IMHO, by creating interfaces programmatically through code, you learn better as to how things actually work, vs the drag and drop tools, one is left wondering how things are working under the hood. The website is in a book format. It begins with programming basics as applied in the Swift language. This is intended for people new to programming. Later it progresses to creating user interface elements like buttons, text boxes, pictures, views, etc. as you make apps. There are detailed step by step instructions, code examples, and videos to help you learn. The book is incomplete, I am still adding chapters. Once it is complete, I will remove this coupon code. If you have any ideas or suggestions, about format, content, price, anything, please let me know here. Thanks!
And it'll help with the ladies
There's a student discount too. If anyone's interested, let me know :)
Yeah an algorithm for a sports team selection isn't necessarily a programming task it is just maths. OP must have the logic in his head for how it actually picks players/teams and what weights given to the stats. Sounds like the sort of thing somebody could tinker with for months to get it just right.
I wholeheartedly agree with you. See, in my situation -- I clearly stated this feature would be the primary function of the app.
Disagree - it has worked wonders for our projects.
If you're using a notification, it's fine, but there needs to be a very good reason why your whole app needs to know. If only some of your app needs to know, then maybe have a common data controller. 
Today I learned a lot about AutoLayout and Size Classes, which is why I did a whole new interface and cleaned up the code to be better understood. Screenshots: http://imgur.com/a/UgbTY GitHub: https://github.com/richardxyx/Tippr
You email us and we resend the receipt. :) 
1.) Learn some responsive design -- the mobile layout is atrocious 2.) There are MySQL error traces all over your main page. Might want to get that fixed.
That is really interesting. I don't use NSUserDefaults in all of my projects, but I'm looking forward to the next time I do:)
So I am a software engineer and I tried to build this exact app a year ago as a personal project. All of it is easy except for the part that actually selects the optimal lineup. I spent probably 40 hours on that part of it and was nowhere near an efficient solution. It is definitely something that I would expect you to have figured out ahead of time if you hired me to write the app. I feel like the developers should have communicated this to you ahead of time, and it sucks that they didn't. You have to know though that if this algorithm is central to your app, you should take care to make sure you know how it works (or that the person you are hiring knows how to solve it) before laying out thousands of dollars. In the future you need to talk out your specifications for functionality AT LEAST as much as the specifications for look and feel, and make sure the person has a real solution before you pay them to implement it. If not, you are essentially paying for R&amp;D that may or may not pan out. 
I'm sorry you had this experience. It seems like what has happened is that you hired a programmer, and not a software developer. There is a serious difference. A good developer will look at the big picture for the product and help you realize if it's viable. In this case, a software developer would have known to make a Proof Of Concept. That is, a smoke check against "Can we actually do this". A typical software developer is going to cost you, on contract, $100-150 / hr. A simple programmer, on the other hand, is likely to just do tasks as you assign them and not think about the big picture, or even be all that great about the design of the software. It's ok to use people like that, but you are going to have to be the one to drive feasibility study and do all the project management, limit change, and manage risk. There is a reason that 9/10 businesses fail, and I would hazard that 95/100 software products die during development. So the real problem is, what do you do now? It seems like you have the start to a UI, but not much else. At least your approach to software is in the right place. You are starting with a solution to a problem, and 'just' need to work 'backward' to get the technologies you need to solve the problem for your product. This is how Apple works. If you are still emotionally invested in this solution, you could try to learn `numerical optimization` and come up with the algorithm yourself, or you can try and find a grad student that knows this field and work with them on the problem. They may even work for less than your typical programmer. But it could take a while. They may even be able to program a proof of concept in python/haskell or whatever's in vogue these days in the math departments. Once you have something that 'works', you can take that to a hired programmer, and see if they understand it enough to port it to swift, and how long it would take them to hook this up to a UI that people can use. if all of this sounds like it will take a long time and a lot of effort, that's because it will. Software is hard. As long as I am at it, here's some more advice: You can't just put an app up at the app store and expect it to make any money. You are going to have to advertise it some how. The store is incredibly competitive and if you get even a modicum of success, expect 100 copy apps unless the maths behind the premise of the app are incredibly complex. tl;dr: You were not scammed, just inexperienced in software development and made the same mistakes thousands of projects have before you. 
It's a hard lesson learned. I appreciate your input.
I appreciate the input. I think I will roll up my sleeves and give it a shot. One of the things the developer mentioned towards the end of the project was that there is a "linear programming" library that should do what I need. Anyone here familiar with that?
Yeah, it's a lesson learned for sure. Thanks, I appreciate the reply.
Thanks!
You can use Swift 2 for Mac OS X 10.9 or newer and iOS 7 or newer. With Xcode 7 you must link against the 10.11 SDK (at the moment, it will probably add 10.10 for non-beta) but you can set the minimum target to 10.9 or newer with any Swift app. Using Xcode 7 and Swift 2 if you set the deployment target to 10.8 it reports: &gt; Swift is unavailable on OS X earlier than 10.9; please set MACOSX_DEPLOYMENT_TARGET to 10.9 or later (currently it is '10.8'). Set the deployment target to 10.9 or higher and you'll get no complaints.
What do you mean with *inefficient* ?
Thank you! I'm glad my tutorials are useful :)
like, I will have like over 10 view controllers and I think it will get messy? Correct me if I'm wrong but I'm not sure about the professional way of creating a multi-page app.
It depends... If you can reuse a viewController you obviously want to have only one viewController per data type. 
10 ViewControllers is not a big deal. For the app to be professional it doesn't mean every line of GUI (flow) code should be written by a coder :). And as *fluchtpunkt* noted, it depends what you are doing.
[Image](http://imgs.xkcd.com/comics/tasks.png) **Title:** Tasks **Title-text:** In the 60s, Marvin Minsky assigned a couple of undergrads to spend the summer programming a computer to use a camera to identify objects in a scene. He figured they'd have the problem solved by the end of the summer. Half a century later, we're still working on it. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/1425#Explanation) **Stats:** This comic has been referenced 487 times, representing 0.6195% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cumybq9)
My 2 cents, as always: 1) You can (and should) use multiple storyboards if you have a lot of controllers/screens 2) Nobody forces you to use segues - you always can use instantiateViewControllerWithIdentifier method of appropriate storyboard (but using segues is encouraged for view controllers inside a single storyboard) 3) You also can use .xib files instead of storyboard(s) - .xibs are opening faster and you get less problems with merge conflicts (if 2 or more developers are working on the same project)
Thanks chia_pet -- you haven't scared me. It's been beneficial to say the least, reading all these comments and realizing I was in over my head.
Oh he still paid us. We usually charge $115/hr and we dropped it to $100 and got 15% equity. He just didn't want to pay anymore for revisions to the beta version we developed. And I'm sorry to hear about the lesson you learned. In this business, there are certainly a ton of things that can go south in a hurry. The important thing is to analyze what went wrong each time, and insulate yourself from the same mistakes in future dealings.
Sounds like `accountStatusWithCompletionHandler` in `CKContainer` will return what you want.
Oh yeah. #!/usr/bin/swift has many possibilities. I've done some image processing tasks trivially in Swift scripts that were just outside of sips' capabilities. I've been thinking about whipping up a script that would apply a visual effects view blur over the bottom quarter of an app icon and put the version/build number on it for debug builds. I've been writing shell scripts for many years, but bringing to bear the variety of cocoa frameworks in a script with a language as beautiful as Swift... so good.
RTFM
This would be a bit heavier than a single semaphore, no? Also, wouldn't this just enqueue the requests and execute them one at a time when the current one finishes? In case of a resource fetch for example, this would be unneeded.
I'm not quite sure what you're trying to do – isn't this exactly the kind of thing that `dispatch_once()` was made for?
That's going to be quite a bit slower, since it'll have to instantiate 4 NSStrings for each call. The extension approach seems fine, but using stringWithFormat to append strings isn't ideal.
No. Dispatch_once is called once and only once. Never again. I am looking for something, that could potentially be called multiple times from multiple places, but once it's executing, no other executions can take place until it's finished.
In case of a resource fetch you should be caching and using that to know whether or not to run As to heavy weight, software is read more than it is written, and typically performance doesn't matter except for the inner loop. The less esoteric is easier than the others
What if key1 = "a", key2 = "aa", key3 = "a" for value1 and key1 = "aa", key2 = "a", key3 = "a" for value2? Both keys end up as "aaaa", even though you had different subkeys.
I'd create a struct that represents one of your keys. That struct would have three fields, one for each "subkey". Make that struct implement hashable (implementing Equality should be easy; for the hashvalue, you could just xor the hash values of the subkeys). You can then use that struct directly as a key for your dictionary. Edit: It really sucks that Swift doesn't implement Equatable/Hashable by default for structs, I don't see any reason why it doesn't (at least when all fields are equatable, too). Does anyone know a good reason why it doesn't do that? Especially since they say themselves that all value types should be equatable... why didn't they just make it the case?
I meant that the Swift project shouldn't require any special linker settings. All you need to add to your Swift project is the pre-built .dylib and the api headers, and your project should compile. To run your app, you need to ensure that the .dylib is included in the app bundle, which is accomplished by adding a "Copy Files" build phase. Target Membership is displayed in the File Inspector utility (Command+Option+1). It's also displayed when you add a file to your project. The headers are not included in the target (your app), but the .dylib is. 
Indeed, but lots of other things should be considered (how often will keys be generated, etc.) first before talking about performance.
I think /r/SwiftJobs is the appropriate place to post a job listing.
You could try /r/codereview but you need to link to specific things that you would like looked at. Just a general GitHub account would take far more time than a random stranger is going to spend. If you have some pieces of code that you're unsure of or would like to improve, then hit up that sub and you'll likely find someone willing to offer tips. 
Sorry for the downvote. I switched it. I posted a comment with a suggestion. I agree with you that it's unlikely someone would look at an entire repo. A few bits of code sure, but not just here's my repo, what can I improve. 
I still don't fully get it. Am I correct when saying that for closures you must only used [unowned self] in the capture list when you are actually storing the closure as an instance property of a class? 
To get a valid URL from strings with spaces and other non alphanumeric characters use: stringByAddingPercentEscapesUsingEncoding (NSUTF8StringEncoding) Which you would go about by something like: let path = Router.baseURLString + path let escapedPath = s.stringByAddingPercentEscapesUsingEncoding(NSUTF8StringEncoding) let URL = NSURL(string: escapedPath) NSURL (string: S) can return nil, and unless you know the URL is going to be valid it is not a good idea to force unwrap it.
you are trying to teach programming like this. to speak you need words: - helicopter - cat ... - peanut Now you know words. Have fun making sentences... give people something to do.. 
&gt; Im trying to do what the other fitness apps have for there UI where you could go look at previous days and see the saved data. You'd probably want to use an `NSTableView` for the UI. If you're just storing an array in user defaults, you could hook the whole thing up in Interface Builder... Bind an Array Controller's content to the `values.MyArray` keypath of Shared User Defaults Controller, then bind the Table View's content to the Array Controller's `arrangedObjects`. [Here's a good tutorial on just that.](http://daemonconstruction.blogspot.com/2011/11/simple-nstableview-application-with.html)
Sorry bud, not particularly Swift related. If you'd like to show off your source code that'd be perfectly appropriate, but we're not a place to just advertise your App Store listing.
+username+ Is the second + really necessary?
[Swift JSON Parsing Library comparisons](https://ww.np.reddit.com/r/iosdev/comments/3j7s0z/swift_json_parsing_swiftyjson_vs_objectmapper_vs/)
Rotten Tomatoes API is old as balls. I wouldn't recommend it at all. Also, if you're trying to get movie times, you won't be able to from RT. I'm not familiar with IMDB. Edit: Downvotes for answering the question? 
Not true, watch the WWDC talk on NSOperation. You can setup multiple operations and have them kick off when they're ready, which could be multiple operations at a time. 
try? disregards error. If your in debug mode get the error, but in a production build its not a bad idea to have a try? since it will throw the error away and you can't do anything with it in production anyway. 
Very good point. I'll try to implement that in a future version! Maybe you'd want to create a PR?
I'm not familiar with Carthage — why not make a CocoaPod of this? Or would that be overkill?
Show us sample code. Why are you using to retrieve JSON, SwiftyJSON?
You're right about it. For backend tasks, my tests are exhaustive since there is no visual testing involved. For iOS, it was different since I could test every possible scenario on the simulator. But that is not an excuse to not write tests and that is on my next TODO.
 let url2 = NSURL(string:"http://api.wunderground.com/api/1cba82fcf290a611/forecast/geolookup/conditions/q/37211.json")! //self.humidLabel.text = "update" let task2 = NSURLSession.sharedSession().dataTaskWithURL(url2) { (data2, respnonse2, error2) -&gt; Void in if let urlContent = data2 { do{ let output = try NSJSONSerialization.JSONObjectWithData(urlContent, options: NSJSONReadingOptions.MutableContainers) as! NSDictionary var weatherInfo = output["current_observation"] as? Dictionary&lt;String,String&gt; if let temp = weatherInfo["temp_f"]? { print(temp ) } print(weatherInfo) // let currentTemp = weatherInfo["temp_f"] as! NSString // print(currentTemp) // if let cityJson = output["location"]!{print(cityJson)} // print(output ) }catch{print("There was an error with the weather")} } } 
Please Excuse the mess. I have been fighting with this issue for a few days. 
Big pieces of https://adium.im A little bit of https://www.webkit.org Various things for past employers, dunno if any of them still exist.
It's a little tough to read your code on here. Can you throw it up on a Gist or something a bit easier to look at? Also, consider using [String: String] instead of Dictionary&lt;String,String&gt; There's no functional difference, but the first is more concise and is the preferred Swift idiom.
You should use [ModelRocket](https://github.com/ovenbits/ModelRocket) for parsing the json and creating a model.
Yea, I've got it imported. My app set up is similar to Apples Demo "Hello world" spinning spaceship scene the is preloaded in to a spriteKit scene upon creation. Using the information [given in the tutorial](https://www.youtube.com/watch?v=nba7lzCL5uI) is it possible to do or do I need additional resources? I appreciate your help. In the video he places all the information in the View controller, which in my case is GameViewController. Do i need to place code in GameScene.swift? 
And what happens when you compile and run this? Does it compile? Does it run? Does it produce any output? Does it raise an exception? It looks like you have the basic idea right (ie parse the json, then access objects in the resulting dictionaries). If it compiles and runs but doesn't produce the right output, it could just be that you haven't got the right keys at the right level. To test that, I would set a breakpoint at the line that starts "if let temp = weatherInfo" and I would take a look at the content of weatherInfo (the debugger command would be po weatherInfo). Check that it prints what you expect. If not, take a look at output (po output) and see if it contains anything/what you expect. If it has something, seeif you can find the key 'current_observation'. Check that 'current_observation' is at the top level, that it is spelt the same as you have spelt it (ie capitalisation matches exactly, the underscore is present, etc....It must match EXACTLY and I mean computer 'exactly', not human being 'exactly' which is more like, yea, like totally close enough, you know ;-)). And looking at the output, check that all your other keys (such as temp_f) are where you expect them to be. If you get blank output, then something is wrong with the parsing. Maybe data2 is empty, which would usually mean the URL is incorrect, so you'd need to look if any errors were found by the data task. It seems like a lot, but the good news is, once you learn how to download and parse this JSON, the same techniques will work for downloading and parsing ANY JSON.
You can use Banner View Controller that's been in WWDC 2014 "Optimize Your Earning Power With iAd". It wraps around your main View Controller and does everything for you. I actually tried to write if myself using Swift. I use it in my app, but I'm afraid this implementation won't suit everyone. I'm not a very confident programmer. :) https://github.com/ysoftware/Banner-View-Controller
Looks like you have a namespace conflict with fruits. You have a `var fruits` as a class property and than `let fruits` as a method variable.
What's the issue, exactly? Eg, `for word in listOfWords { doSomethingWithWord() }` seems pretty reasonable to me. It's quite close to "for each word in this listOfWords, doSomething". Or do you mean the "other" for-loop with indices and everything? That's the syntax that has been used in a lot of other languages before, that's probably why they used it. Yeah, that one's not very close to english. I recommend just not using it, it's very rare that you actually need it. For example, you can write `for index in 0..&lt;10 { }` instead of `for var index = 0; index &lt; 10; index++ {}`. Or, instead of `for var index=0; index&lt;someArray.count; index++ { let element = array[index]; doSomethingWithElementAndIndex }`, you can do `for (index, element) in enumerate(someArray) { doSomethingWithElementAndIndex() }`, which is much better imho. I have a really hard time of thinking of an example where the "old" syntax is actually better.
I would change the name in generateFruit() .
OP, I'm a little confused. You actually like Android's XML-based layout system? That's probably the biggest thing keeping me from taking Android development seriously. I can barely make a layout that works, let alone looks passable. I mean, Auto Layout has its own issues, like complaining about problems that have no bearing on the appearance of my app, cluttering up debug output (please, for the love of God, someone tell me how to turn that off). But I still can't get past the fact that on iOS, I can create a login dialog with a couple of lines of code, whereas on Android I have to create an entire fragment XML. I neither need nor want that much control over what should be as simple as a prompt with a couple of text fields. Less of a concern, but another reason I just really prefer Swift over Java. In light of Swift, it's easy to see Java for what it is: A product of the early 90's. It just feels too outdated to be the primary means of developing for a modern OS. This is the answer for those confused as to why so many developers go iOS only or iOS first, even though Android has several times more market share. The developer experience is simply better.
The use of "for" in programming languages comes from its use in mathematics, in the way that ranges are typically described in calculus. 
I will definitely need a helping had. I have never imported outside SDK into Xcode. Direct me towards the youtube / tutorial and i will give it a solid go. I have an app that i use parse for but i use a pre-ready empty project to get started. I have to say even getting that to play nice with swift 2 was all sorts of fun. I know learning a language that is not solid yet was not the best call :). I have to say swift was easier for me to pick up than obj-c. I started my programing life in cobol, I almost think that for a long time ruined me. That was such a straight top down one way type language it setup all my habits in the wrong way. I again want to thank you for your help already in advance. I have wrestled with JSON's since i got the first one to work and went WOW this is amazing it was like a light went off bing this is how you make cool stuff from the web. I hope to get this in and displayed then as a bonus add it to CoreData so i can have it at the ready on app restore while a fresh load happens. But that is getting ahead of my self 
You can use a dependency manager like CocoaPods, I'll find a tutorial for you to follow, just give me a minute. :] Edit: This RayWenderlich tutorial seems good, it's a bit involved though. Nonetheless using CocoaPods is a skill you should learn. :] http://www.raywenderlich.com/64546/introduction-to-cocoapods-2
You're totally wrong about Storyboard/XIB files, btw - they are actually all XML files. Right click on one and select "Open as source code" to see it. NIBs, on the other hand, are native objects that are generated from XIBs that get deployed to the device. That said, if you're using Storyboards you won't ever encounter them - it's generally considered bad practice to be shipping them. I would also point out that using Interface Builder makes it much easier to visually design your interface, as opposed to describing it by writing it out in XML. I get that you prefer to do it that way, but if you're doing anything but the most trivial UI it is a lot faster to use the layout tools they provide.
Think of it as "For each X in [Collection of Xs], do the following:" 
I've always looked at it like Fragments being closest to UIViews, and Activities being closest to UIViewControllers (all UIViewControllers have their own view). iOS also has UIWindows, which are somewhere in between, but are a lot closer to UIViews than UIViewControllers. I still think Objective C is the best path for production quality iOS development, but that's only because Swift is still just starting out. Swift is two years old, where as Objective C is older than iOS, and there is much more out there discussing Objective C to learn from. In my opinion, to really become proficient at iOS you need to focus on learning the libraries and the platform, the language you use to do that is actually secondary, so I'd have suggested you start with Objective C and learn Swift once you've become more acquainted with what you have access to, best practices for doing things.
What does your "restart" code look like? 
I'm an iOS developer who's learning Android on the side. When I develop iOS, I'm constantly bitching about it. From auto layout to provisioning profiles etc. But whenever I open up Android Studio to do Android dev, I can't help but praise Xcode. Sure, Android Studio is a hundred times better than Eclipse but still it feels so clunky. Build times still take a long time, if you test using the emulator then you're pretty much fucked (thank god for Genymotion). A few weeks ago I developed a simple login screen. Took me almost two days to finish the damn UI! iOS has it's fair share of UI issues, but for simple user interfaces, I'd gladly take the IB over XML files. From iOS 9, there is a feature called storyboard references which can be used to modularize storyboard. This will help tackle the 'multiple developers editing the same storyboard' issue. Either way, for complicated UIs, iOS devs build the UI in code as well. Java is a cumbersome, ugly language compared to Swift. It's all frustrating because I *want* to like Android developing. But everything about it is making it hard to do so.
Some languages say "foreach". That might help you think about how it is used. 
I learned about Realm from Mitchell Hudson's YouTube tutorial for a to do app. https://www.youtube.com/watch?v=su3d2Q68mh4
I appreciate the style of just making some observations, couching them in the fact they tend to be mere preferences, and overall avoiding a bunch of dramatic and sweeping conclusions.
Swift isn't even 1 year old... It's about to celebrate its first birthday!
What do you think about Instruments? Is there something comparable on android?
Fixed link: http://i.imgur.com/BHddSEn.png Even better would be if you linked to that Wolfram Alpha page so we could play with the equation without signing up for Investopedia!
Oh wow, you're right, feels like longer because of the Beta, but yeah :)
I assume that the 'original' one will be gone just as Swift 2 becomes officially released (which will happen soon). It's still available in iBooks because still Swift 1.2 is officially the newest stable version of the language. But as u/twostraws wrote - learn Swift 2.
So I strongly disagree. I find Android layout system to be much better. I think the issue you might be running into is that at first Android's layout system is harder to grasp than iOSs. I think the reason people go iOS first, is 1. iOS users are wealthier on average 2. There is very little variation among devices in iOS
Yes, more or less the same. But the Android team has been improving it recently to make it more understandable for less experienced people. Something I think the iOS team should be doing as well.
[removed]
I believe your issue is that the original scene is no longer accessible, but you are still calling *addChild* in your generator. You need to stop your generator from doing any more actions immediately at the top of your restart() method before you try and create a new scene, and swap the view with the new scene. Something like this, please fill in with your own valid code: func restart() { cloudGenerator.stopClouds() fruitGen.stopGenerating() // This right here! This needs to happen. let newScene = GameScene(size: view!.bounds.size) newScene.scaleMode = .AspectFill view!.presentScene(newScene) }
There is Android DDMS. Some features are now integrated right into IDE. But they're, probably, not so advanced. 
I know other devs who have done this. I'm tempted. There are a lot of great things you can do in IB with Storyboards or XIBs, so I'm reluctant to go 100% code. May try it out on my next project to see what I think.
Thanks for the answers everyone. I guess part of the reason I asked was that I know some languages like Python are split between different releases (2.7 and 3.x). Since Swift is barely a year old, I imagine this won't be the case.
That too. This is Apple we're talking about here.
iOS 9?
If you were using auto layout. You could set the image itself to pin aspect ratio (let's say it's a square, it'll be 1:1), then pin the image to the view using aspect ratio (image to view, 1:10 for example), and assuming you want to center it, pin center x and y of the view. I've only just begun to feel like auto layout isn't the bane of my existence, so forgive me if my suggestion doesn't work. Now that I kind of get it, however, I'm glad that it exists. I had to spend a day or two revisiting the layouts so that everything looks good on every screen size.
Can you post all of the code you're using from retrieving the data to trying to parse it?
Also keep in mind guard is only in Swift 2+, so unless you're on the beta you won't have it. 
You can use AutoLayout in code, but it's not very nice in my opinion. PureLayout is my favorite way to use AutoLayout in code - you can install it with cocoapods. 
You 'set this up' in the same way you would set up a button or text field or any other subclass of UIView inside of the cell: just bung it in there! If you are creating the cell in a nib, drag a table view from the palette into the cell; if in code, instantiate a tableview and add it to the cell's view hierarchy. Your final question is confusing because I don't know what a cell's delegate and datasource are. If you mean the *tableview's* delegate and datasource, well, I'd be inclined to make the cell the tableview's delegate and datasource. The other alternative is to create another class (which is not a UIView) which acts as the tableview's delegate and data source. The cell would need to have a pointer to this object. I would try to get it working first with the cell as datasource/delegate and then experiment with different ways of doing it to find the arrangement with the best feeling (from the code point of view, not the user's point of view). 
We wrote a [book](https://www.weheartswift.com/swift-programming-scratch-100-exercises/) exactly for this purpose. It teaches you the basics of computer programming with the help of small 5-15 minute exercises.
I used the Hacking With Swift tutorial. https://www.hackingwithswift.com/read/18/2/iad-in-10-minutes The programmatic autolayout constraints keep the banner across the bottom of whatever screen you present your view to. I've used this in two different swift Spritekit games so far. 
In your (game) ViewController you can do this easily: let BannerHeight:CGFloat = Helper.isIPad() ? 66.0 : 50.0 let yoursADBV = ADBannerView(frame: CGRectMake(0.0, 0.0, self.view.frame.width, BannerHeight)) yoursADBV.hidden = true yoursADBV.delegate = self self.view.addSubview(yoursADBV)
Ask Admob
You would connect a tableview in a tableview cell, that's how.
Read the swift docs.
very simple article written in Klingon.
damn, friendly crowd here. Is trying to learn/use new frameworks frowned upon? Should I not post Swift questions in the Swift subreddit?
Your protocol's single function doesn't have a parameter name. Methods are declared like: methodName(parameterName: ParameterType) [-&gt; ReturnType]
Sorry, that was a typo on my end while transcribing the example. My declaration of the protocol function does have a parameter name. I'll edit the OP to correct it.
&gt;Should I not post Swift questions in the Swift subreddit? You didn't post "Swift questions in the Swift subreddit". You posted a link to your question over at StackOverflow. More importantly, you are installing and attempting to use some 3rd party frameworks when the Apple frameworks will work just fine. In my humble opinion, your question is a very basic one that can be solved by yourself with a little research.
&gt;Alamofire &gt;SwiftyJSON You don't need either one of those to make this work.
Thanks, I tried writing out the methods again using autocomplete but it didn't change anything. I also added *weak* at the start of my delegate declaration, but it gives me the error &gt;weak cannot be applied to non-class type CustomCellDelegate Maybe this has something to do with the overall problem? **Edit:** declaring the delegate as weak does work, if I declare the protocol as Objective-C conformant, such as /u/fubarx recommended below. Unfortunately, I still have the 2 original errors.
Am I right that Bitcode also gets used to perform optimizations from the future: When some super new and fast optimization comes out, Apple just recompiles your App for it to have all those benefits, without you having to do it. ...?
&gt;what's your point? My point is that you were looking for an easy way out by installing and using these "labor-saving" frameworks and they actually made more work for you than actually doing it "by the book" and writing literally *five* lines of Apple Supported code to get the results you want. (four, if you don't care to handle potential errors). This is what happens when new programmers google for answers instead of reading the docs in front of them. Your answer is very simple.
I know how to do it the Apple way. Lol. I was interested in seeing what Alamofire and SwiftyJSON were like. Sorry if this offends you.
Eh. What offends me more is the fact that you really didn't ask over here. You wanted this community to go over to StackOverflow and answer over there. That's like walking into a neighborhood bar and asking everyone to come have a drink with you at another bar. If you want this community to grow, then grow it.
That's fair. 
&gt; Should I be saving the "note" in CD ? If so what type should the attribute be? That's what Apple does with their Notes app. In fact, they convert attributed strings to HTML and store that as a simple "string" attribute.
Bad is bad.
With out seeing there rest of your code and how your app works its tough to tell what your problem is. But looking at the code you provided it seems like it should at least give a new empty scene to your screen, is this the case?
Yes, and I called this in my touchesBegan fun
So if you do get a empty scene that means you have to re set up everything(Things like your cloudgenerator and fruit generator).
Im still getting my original scene, its just that things won't start moving.
If it's really a *lot* of text, it may be best to store the file name, and store a plain text file outside the database. Might not be worth the complexity for real-world amounts of data though.
Do you get new scene or original scene ? I am confused what exactly do you mean. 
I've a tableview with a search bar on it. I can search and it displays the correct results. When, I click on cancel, my tableview got all the data on it which is good. What I'm trying to achieve is, while searching, if I hit the return button on the keyboard, and when my search bar is empty, I'd like to have my initial data displayed. Here's my code for searching. Basically it's our the contacts address book works on iPhone. Any help will be welcomed. func setupSearchBar() { searchController = self.addSearchBar() searchController.searchResultsUpdater = self searchController.delegate = self searchController.searchBar.delegate = self } func updateSearchResultsForSearchController(searchController: UISearchController) { if count(searchController.searchBar.text) &gt; 0 { tableData = MyCoreData().search(searchController.searchBar.text) self.tableView.reloadData() } } func searchBarCancelButton(searchBar: UISearchBar) { searchBar.text = "" self.resignFirstResponder() self.view.endEditing(true) searchBar.resignFirstResponder() reloadTableDataFromDB() } func searchBarTextDidEndEditing(searchBar: UISearchBar) { }
Does your game scene's init automatically generate clouds and etc?
Found your thread on Google. Have you solved this problem?
Yes, but does my game scene need an init method? I have everything called in didMoveToView
I don't know why you're being down voted. That's the first thing you have to do. Or at least search on stackoverflow.
Have a look at UIViewAnimationOptionBeginFromCurrentState.
Of course. Congrats, by the way!
I vaguely remember hearing that QuizUp was opening up an API. See if you can find anything on that
Hey I have an app on the App Store that has this functionality you are looking for called Tavern Trouble. Check it out on GitHub! * https://github.com/stepheaw/Tavern-Trouble 
Eh... turns out I actually *did* have the animations connected. In each transitionWithView I had the parameter (self.view...) instead of (self.buttonA...). I spent the majority of the day trying to fix this problem and just noticed it after being away from the computer for a few hours.
I'm in the same boat.
Mac Pro for $500? Are you talking about a used Mac Pro? A new one starts at $3k. You can get a refurb Mac Mini for below $500 from the Apple web store. If you're looking to save I'd recommend a refurb as it'll either save you some money or allow you to get more for less and Apple refurbs have historically been as good as new.
Mac Pro is for processor-intensive tools like for movie, CGI, or music rendering. A Mac Mini is all you need. I have a Mac Mini as my main setup. If you have the option and the extra cash, get an SSD. It's worth it. Use the SSD in the Mac Mini and external storage for...well external storage. 256GB SSD is all you need in the machine. But, note, this is a luxury on the Mini. A standard HD is *just fine* for iOS/Cocoa dev work! EDIT: Maybe your next purchase can be a large monitor. It doesn't have to be a Thunderbolt display. But, something that size and reasonably priced will be useful. XCode takes up a lot of real estate, especially if you are using Storyboards a lot.
Okay, I have an old SSD I can though in. Already a 24 main monitor and 21 vertical monitor and a cheap 19 in to go ahead of all those.
Sounds like you are ready. Good luck!
Thank you sir!
Nice charts, not the usual stuff you see in other apps. I just opened /r/TryMyiOSApp if you want to share it somewhere else too!
Not in the app itself AFAIK, but : You can connect the FB in the app, send the details to your API, have that connect the FB server side. Then do an API call to post on their FB through the server instead of the app.
I found trying to develop in Swift 2.0 with Xcode 7 was nigh on impossible - too many critical bugs that crashed the app. Apple will have them sorted in the next few months but until then I'm sticking with Xcode 6.4 and Swift 1.2 which is much more stable. 
Great post! Definitely made me interested in trying it out! Making a sample project now.
[removed]
I know of at least one third-party framework that does this: https://www.reddit.com/r/osx/comments/36j2al/mlogger_a_simple_log_server_for_development/
i just got the 7.1 beta
My guess is there is little difference apart from the tvOS SDK. Unfortunately, the download page only includes a link to [7.1's release notes](http://adcdownload.apple.com/Developer_Tools/Xcode_7.1_beta/Xcode_7.1_beta_Release_Notes.pdf), not the 7 GM's. Anyone find those?
Yeah that's what I thought 
I'm looking for primarily the way to redirect the output (or use a method that performs the same function) of a tail -f command to a text box.
Yep, this did the trick.
The Known Bugs sections of the Beta release notes are incredibly short. Only one or two bugs listed per topic. But this can't be; a large app like Xcode must have a bug list a mile long ... (?)
Apple release notes are never remotely close to complete.
I don't know. I've got a Swift 2.0, iOS 9 specific app ready to go. I've had very few problems.
Looks excellent. Please consider adding commenting — just a simple drop-in Disqus would be nice. For example, when I saw [how to make a string lowercase](https://www.hackingwithswift.com/example-code/strings/how-to-convert-a-string-to-lowercase-letters), I was surprised that the name is so long, and wanted to leave a comment / start a discussion: str.lowercaseString Ugh, so enterprisey. I much prefer Ruby's `.downcase` and Python's `.lower()`. The designers of Swift should let go of the overly verbose naming conventions of ObjectiveC/Cocoa.
Today was a consumer product announcement. It wouldn't really fit in for something like this. 
There was a whole slide up on the many and various developer frameworks supported by Apple TV, and developers in general seemed to get quite a few mentions throughout – certainly more than I've seen in previous hardware announcements.
Ouch! Join is such a common construct, it's understood what it does. And why not make withSeparator: an optional parameter of join ... That'd be a short yet self documenting app.
And I realized I they went the opposite direction with println, collapsing it into print, and providing a parameter.
The day the phones come out, the 16th
I watched the Apple event waiting for an announcement on Swift 2.0's official release and I didn't get it. Glad to get it here! I really, really need that defer keyword already.
I assume that when Swift 2.0 is completely finalized, they'll release the code. Or something like that. Who knows.
Hey guys, my clients app is going to break with iOS 9. We desperate want the update live before or in parallel with iOS 9's launch. I have built the app with Xcode 7 GM, however itunes connect is rejecting the app. Do you guys know when we will be able to upload iOS 9 app? Thanks
All I had to do was "create" a swift file and the app crashed. I had to create one in Xcode 6.4 and drag it into Xcode 7 beta 6 - I then thought to myself this is fucking ridiculous I'm gonna wait a few months till its more stable. Earlier versions of El Capitan couldn't unzip a file either. 
Can you work a project written in Swift 1.2 in Xcode 7 without converting it to Swift 2?
No. 
Nice!
They usually send an email about when you can submit your apps to be ready. Just out of curiosity, what broke in your app with iOS 9? One of my apps was crashing in iOS 9 and I was able to find the problem when building and running with Xcode 7. A couple of variables were being force-unwrapped when they shouldn't have been. Wasn't causing any issues in iOS 8. When I fixed the issues in Xcode 7, I was able to take those few changes and implement them in Xcode 6 and that let me build and release a version that was built against the iOS 8 SDK but without all the pesky crashing when run in iOS 9.
I guess I could have added most of the fixes and built it against the ios 8 sdk. But I already have xcode 7 and, I kid you not, they recommend if you need xcode 6 to makoe a second partition and install another copy of Mac lol. My issues weren't very serious, first the change in launch images, second the apps back end is still on http so I had to white list it, and I had to white list some app domains for fb and Google plus login. However the last two are breaking changes, so I guess I'll need to go and reinstall xcode 6 .... Are you saying they won't give devs any head easy to get our iOS 9 apps onto the store before launch iOS 9??!?
apple has a history of promising open-source and not delivering (see facetime)
No Problem :) 
Nice seeing you here on /r/swift, Chris. Thank you for Swift, LLVM and clang.
Is there a repo already?
This is actually a great question because the terms don't seem to be defined anywhere on apple.com. IIRC, GM = Gold Master, which is a holdover from the days that a company would press this _master_ CD-ROM and send it off to a factory to be duplicated a million times.
Wait wait! The _phones_ will be out on the 16th too? I heard they'll be another couple of months. EDIT: Ah hah, from apple.com: &gt; Pre-order 9.12, Available 9.25
They do allow submissions from GM Seed versions of Xcode. They'll probably send out emails in the next couple of days telling everyone to submit your apps to be ready for iOS 9. Usually we have a little more notice, but they always allow us to submit with the GM Seed (eventually) before the official release.
This sounds really fun. I'm game.
Oops, that was forked by Reddit at https://github.com/reddit/reddit.tv
GM Seeds can be used to submit apps unlike other beta versions
Greetings, I've used these two for SpriteKit stuff in the past. * raywenderlich.com/category/sprite-kit * hackingwithswift.com (not games specifically, but he does have game tutorials mixed in) Good luck! 
Thank you! 
Xcode 7 beta versions are probably called Xcode-beta on your hard drive so you can have the current beta and the current release version installed at the same time. If you haven't installed Xcode from the app store, then the app store won't even know to check its version when the full version is released.
UIViewController also has property canDisplayBannerAds, which should do all the work for you but I haven't played with it and have no idea how it works. 
You can create the Tweet or Facebook post automatically using the native frameworks. But the user will still have to click the final "Post" button
Fork-join looks a lot like MapReduce that runs on only one machine.
I have finally gotten cocoaPods working. Next to try to use this code you dropped me. Lesson never try to learn a language before it is finalized and has wide support. swift 2.0 definitely breaks regular framework adds. Thats ok it is all part of the learning process. 
As funny as that is, Apple would never approve that app :-/
still sounds like grand central dispatch is the best thing for swift it should even do fork join and such things you want
One correction: capture lists and parameter lists in closures are different things. The capture list is in square brackets (most of the time, just `[weak self]`), parameter lists are in round parameters.
Thanks mike
I don't fully agree with all of this posts points. I think flat design makes sense if done right. But I don't agree with you that iOS has the best designed apps anymore. I'm running lollipop with its full material design update. It's very simple, straightforward, much cleaner than iOS, the layouts have much clearer intent( lol the clock app is a good example of this). I think part of the problem with iOS is that it was so clearly the king for so long that they have turned their blinders on to other platforms and ideas. 
I think this is a good long-term goal. I would first recommend researching a couple topics: 1) rewriting an entire app. This is a widely written about topic with at least one very famous essay by Joel Spolsky about everything which can be lost, and everything which can be gained, by throwing everything out and starting over 2) moving an app from ObjC to Swift. I'm pretty sure advice for moving from ObjC to Swift is covered in at least 1 video from WWDC 2015 or 2014. I believe the general consensus from learning about those two topics will be that, unless you have plenty of time and your WHOLE goal is simply to rewrite the app and you have no other pressures such as: need to make money, need to have a real life outside programming, need to remain sane, need to deliver this app in short timescales, need to continue to support customers using current app, then by all means start afresh. But, if you do not belong to that lucky minority who can start fresh, then the best thing to do is to start by either writing new stuff in Swift or, if there is no new stuff, then choose a small-ish class or logical section of the app and rewrite it in Swift, whilst retaining the other parts of the app in ObjC. Yes, ObjC &amp; Swift can co-exist quite happily together: the proof is in the fact that we are all quite happily using UIKit and Foundation (and other frameworks) classes and methods, and they are all written in ObjC (or C or C++ or ObjC++, etc). i think you are on the right track and have the right goal, and you just have to decide the most organised, practical way to achieve it. This might also be a good time to consider adding a few unit tests (if some are needed) so that you can ensure your current code works and, after rewriting that particular section in Swift, that the new code works exactly the same.
If I'm not mistaken, scheduling a local notification *will* fire when the app is in the background or terminated.
The [iOS Development with Swift Specialisation](https://www.coursera.org/specializations/app-development) on Coursera starts Tuesday 15th September. I’ve no idea how good it is, but I’m considering doing it myself. As far as I know you get a certificate upon completion but it isn’t an accredited course as such. Might be worth looking at? 
&gt; Can you give an example of how it can infer the wrong type? User error. The best thing about Xcode's type-checking is that it protects developers from themselves 😄
Good points. I also like the "readability" of setting my type next to the variables/constants when I set them.
I world suggest r/swift
Haha, alright I just look and every question seems to be about such advance things when I'm having problems with basic data types. :P I should rename this post: "Help just for Spectra". First question - How come this works: var numbers = [5, 10, 15] count(numbers) But this doesn't: for x in count(numbers){ } The error I get is **expected an argument list of type '(T)'**
The *for* loop expects something it can iterate through, like your array *numbers*. The result of *count* is the number of items in an array, which is an Int. You can't iterate through an Int. So your code is equivalent to for x in 3 { } If you do this for example: for x in numbers { print(x) } it prints all your numbers
Thanks so much for your response! I completely understand now that my count() is just returning a single result which is why it won't trawl through it. You're a legend. ... So I can post stupid questions on /r/Swift and people won't get annoyed? And also, do you think it gets easier to understand the more you do it or do you think you have to have a certain frame of mind? I'm not stupid but I find there's so many things I'm not taking into account when I try and write that I'm getting errors every-other line.
Thank you! This helps tremendously! A few questions though: Is there a summary of the changes between Swift 1.2 and Swift 2? I just thought there was 1 Swift so I'm a bit worried now! What does GM Seed mean? Why don't they just call it Xcode 7? In the Swift Apple guide it has the following example: func sumOf(numbers: Int...) -&gt; Int { etc I am aware the input parameter for the function will be labelled "numbers" and be an integer but what does the "...: mean in this context? Thanks for all your help! :) 
Shouldn't it be together with public release of iOS9, on September 16?
Thanks. Great answer! I think I will start port it over class by class (after searching for that WWDC-Video)!
403_sd_improving_your_existing_apps_with_swift (sorry, forgot to look it up until you responded!)
...this technically shouldn't work. If it does work, it does so only by inlining what it sees as a static string. `@convention(c)` functions and function pointers cannot capture external state, as they are not closures.
There are lots of free tutorials out there. Here's one that I wrote: [Hacking with Swift](https://www.hackingwithswift.com). I come by here regularly, so you're welcome to ask questions and I'll do my best to answer. 
google
read the docs
See [UIView.transform](http://www.informit.com/articles/article.aspx?p=1951182) and CGAffineTransformRotate.
http://www.raywenderlich.com/category/swift Ray Wenderlich's website is phenomenal. Lots of tutorials for swift, along with great explanation per step. You can comment on individual blog posts with your questions, but, honestly, the tutorial, wonderful explanation , and starter projects available per post should be more than enough
https://www.andrewcbancroft.com/2014/10/15/rotate-animation-in-swift/ This is a great little tutorial to help you create a UIView extension that'll allow you to rotate any button on your app. It's a pretty simple CAAnimation, but packaged in a neat, easy-to-reuse way.
Ah, I see. I actually have a very similar project created that should help you out a lot in the card department. I think it could be very helpful to you in terms of figuring out how cards should act. I'm a bit confused on the part about selected version, but the cards in the project below are independant of the other cards but are also part of the same object array https://github.com/saul51292/ProductSwipe
Not being rude, but why would you suggest a plist to store imageViews?
I'm currently learning Swift with the help of your tutorials, and they are great. Thanks man, I can wholeheartedly recommend your site.
I've searched, and yet the search continues
I second that! I left StackOverFlow forever! (well, I google some stuff and find answer there) If you want to ask beginners' question without worrying to have your head chop off by some ***hole, well, here is as must! People are so friendly and helpful! 
Try https://www.bitfountain.io/
The method that's calling this is set to run on the background queue. I'll update my question with more context.
I've been using this tutorial but the issue I'm having is that the rotation doesn't stay fixed. The button *will* rotate by the desired degree value (which is a great start!) but it then resets to its original orientation. Any advice? Thank you so much.
If anyone is looking at this post the solution I found was using cocoa pods :D The one I used is called [TOCropViewController](https://www.cocoacontrols.com/controls/tocropviewcontroller)
What version of Xcode are you using? This works fine for me in Xcode 6.4, until the line if(puntaje! &gt;= exigencia3) { Which is attempting to unwrap the optional puntaje, which is a compile-time error because puntaje is not an optional. Also, it's conventional for all variable names to begin with a lowercase letter (e.g., "total", not "Total")
My first big advice would be to keep the data (questions and answers in your case) completely separate from the buttons or textfields. Another way to say that is to separate the model from the view. You may want to read up on the MVC (model view controller) paradigm. It is very important because it means you can delay answering questions like, 'but what if I decide to display some data in a button instead of a text field?' Or indeed to change the answer without huge amounts of rewriting later. Second thing I'd say is, don't immediately think something has to be stored in Core Data. Loads of beginner's apps (and I reckon many a professional one!) use text files or plists or archived objects to store data; if you don't know what text files, plists or archived objects are, then I've just given you a great deal of googling to do! Finally, have a look for some tutorials. Ray Wenderlich's website has oodles and there are tons of others. wrt your specific questions, nothing there sounds impossible to me. Aesthetically speaking, I wouldn't think of a button first when working out how to display a hunk of text such as a question or answer, but, hey, give it a go in interface builder (just hard code the question to start) and see what it looks like. If you were talking about multiple choice questions, then, sure, buttons displaying 'A', 'B' or 'C' might make sense. But a button displaying 'To be or not to be, that is the question. Whether 'tis nobler in the mind to suffer the slings and arrows of outrageous fortune or to take arms against a sea of troubles, and by opposing, end them' as a possible answer to the question 'How does Hamlet's soliloquy begin?' seems a bit much. (yes, mostly I put that to show off that I know the start of that speech; if it wasn't that, it would have been a quote from Die Hard part 4).
I suggest getting a second hard drive and installing OSX on it if you have the right components. (Most importantly you need an Intel CPU). You can find more info [here](https://www.reddit.com/r/hackintosh) and by googling around. Best of luck! Hackintoshes work great if you have the right hardware, I used one for almost 2 years while I was a student.
*Hackintosh
Thank you CQH! Tuples make sense. So at a view where there were two text fields for the user to input the question and answer i could just append to stateQuestions?
You're probably a good fit for the class then. A lot of time is spent discussing how to use Xcode. The first few lectures have him building a simple calculator app on video; if you can follow along you'll do just fine.
Tuples are fine for a one time / quick use situation (like when you need multiple return values for a function), but for anything more complex than that (passed around to multiple functions, stored in your model, etc) you may as well create a struct to make the type clearer: struct QAPair { let question: String let answer: String }
Yes, I agree that Structs are more powerful as they are very similar to Classes.
I think the problem with the new iOS apps is that they are taking form over function. The new music apps looks pretty nice but it's a nightmare to use. 
Right now I have a `Window: NSWindow`class with keyboard events (`keyUp` and `keyDown`) on it, that calls the corresponding methods on my `Joypad`. How would make it so that these events can get through? I thought I needed to take the emulator off the main thread or something like that. How can I use what you proposed? I am sorry if this is basic. I tried looking it up, but the things I found didn't translate very well.
Programming doesn't work this way. You write code as concisely as possible in order to make it more readable. You don't sacrifice readability to gain concision. The reason Swift is typically shorter is because it has many idiomatic features that allow the programmer to define "less" because it's of a "higher" abstraction. Strong type inference means the types rarely have to be declared leading to less code, Swift has plenty of syntactic sugar to also reduce code size. **You shouldn't be aiming to make code "compact" you should aim to make it "readable".**
There have been sooo many comments in /r/swift like this: &gt; But I need to warn you, that if you ever want to become an employed iOS or Mac developer, you will have to learn objective-c. &gt; &gt; If it is a hobby, swift is fine. (this is quoted from another thread here in /r/swift just 2 months ago.) lol I'm pretty sure that working on Lyft as an engineer is a pretty serious gig. Nearly 10K ratings and holding a 4.5 star average. Not bad 😆
theres actually no way to not mix them unless you never use apple's frameworks as most are still objc or carbon.
I love this dude. His training videos are the best. 
Part of the lines automatically disappear by not having to maintain header files and includes. All the little things add up
Here we go again 😂
as much as it is a joke it does expose the weak literature of some of the reference materials. not just in computer science but the natural science as well. English should be mandatory at the university level for technical degrees. although mostly readable I feel like I'm doing a mental work out when reading reference materials. 
Do you think that he's wrong? Maybe we could get an actual Lyft developer to weigh in.
Being a good iOS developer is a lot more about knowing the Cocoa API's than the language. If you're a "pure" Swift developer than you can't have more than about 14 months experience in iOS and it's likely most of that experience isn't writing production code. I want more experience than that on a team with high engineering standards. Furthermore, the vast majority of our collective knowledge and code as iOS developers, **including all of Cocoa** is written in Objective-C. You're going to be a lot more productive as a developer if you can understand that, interact with it and write it. Do you need to know Objective-C to be a Swift developer? No. But it's almost laughable to pretend that knowing it won't make you a better Swift developer. I think Lyft can afford to hire the best. Edit: Downvotes are fun
I think trying to read a code example out loud would make a stronger case - I could *almost* understand everything he was explaining just by thinking about it in context. Also, the fact that programming is such a literate &amp; visual task is an accessibility issue. I'm certain there are visually impaired and blind people trying to learn to program who would appreciate it if their needs were factored in to the design of programming languages and reference material. It's also a sign of how young a profession this is - when a larger number of programmers begin to lose their eyesight, this could be seen as more of a problem and less of a joke.
Knowing *how to program* is a bigger skill than being proficient in a particular language.
&gt;Swift was so new that Lyft's engineers were essentially debugging the language itself as well as their app. "Because we were one of the biggest projects using only Swift, we had all the biggest challenges, I was with you until here. Get over yourselves, you aren't that high profile. 
&gt; but otherwise you can be gainfully employed with just writing Swift. Proof: I exist. Same here. I've been coding Swift exclusively since last winter with 2 clients, 4 apps in the store, a 5th pending Apple review, and 2 in private beta. I literally haven't written 1 line of Objective-C since November 2014. But, hey...we must be pioneers :D
Apple has a good write up [here](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html) that addresses most of the common questions in your scenario. Most of the [limitations](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_87) come from using Obj-C code to call Swift code.
also, I would add: why programming manuals are not written as they were books by professionals in the field? Not the shitty reference guides like the ones Apple do. I hate all them with passion, no exceptions. Apple is a almost a trillion dollar company and can afford to hire professionals to write their manuals. Hire guys like Jeff Lamarche and others. 
&gt; it does expose the weak literature of some of the reference materials some? I would say they are all shitty as hell.
&gt; Being a good iOS developer is a lot more about knowing the Cocoa API's than the language. If you're a "pure" Swift developer than you can't have more than about 14 months experience in iOS and it's likely most of that experience isn't writing production code. I want more experience than that on a team with high engineering standards. This is absolutely fine, but it doesn't support this statement at all: &gt; But I need to warn you, that if you ever want to become an employed iOS or Mac developer, you will have to learn objective-c. If somebody is just learning iOS development, learning Objective-C will not give them those extra years of development time. They will be just as inexperienced in either language. 
the only exception I can think of is the Swift guide the remaining you can easily classify as junk.
He did. It's all in the name - constants are for things that don't change and variables are for things that do. Xcode 7 will now give you warnings when you create a variable that you never change and suggest you make it a constant. Using constants wherever possible allows for better memory management.
Ah ok I see! Thank you very much! Have an upvote!
Ah okay thanks for the tip. Lapter just cleared it up for me. Doesn't Xcode 7 come out on Wednesday?
What everyone else is saying is true, until you get to classes. It is your choice whether you want to learn that complexity now :-) "let" won't let you assign a different value to a variable. For "value types", this means that the variable is effectively frozen. For class instances ("reference types"), this means that you can't change the variable to reference another instance of a class - but the class itself may still change. import Foundation // var allows you assign new values to a variable var helloVar:String = "Hello" helloVar = "Hello, World!" // let will not allow you assign a new value let helloConst:String = "Hello" // helloConst = "Hello, World" // commented out, generates error // for class types, let will not let you assign a new reference. // The object itself is allowed to have internal changes let hello = NSMutableString(string:"Hello") hello.appendString(", World!") // works 
This is a very good point. Most of the "heavy lifting" of modern connected apps should happen server-side anyway. This is why good APIs are important. By definition, most apps don't fall into the edge case category. I can think of a handful of popular mainstream apps that can wouldn't even come close to pushing the edge of what can be done. For the vast majority of us, I'd guess that the Pareto principle holds true: 80% of us will use, at most, 20% of what the language/frameworks are capable of doing. As you mention, most of us are simply making API calls and formatting the responses for display. Sure, there may be the clever transition or UI element...but that's all it is...clever. 99% of those don't really solve a problem that hasn't already been solved.
Hmmm risky choice. When I was evaluating swift for an SDK a couple weeks ago, I realized you couldn't compile swift into static libraries. I also found a big list of things that may or may not change in Swift. that alone was enough to persuade me to stick with Objective-C. https://github.com/ksm/SwiftInFlux
also_HIM , Thanks for the reply. I did plan on creating a struct for the model on this project, but i thought a class might be better since it is reference instead of value and i thought that might be better being the data stored in the model would be edited by user input a lot. Does this make sense? Or i can still get away with using a struct.
I would reword that statement this way: If you plan to get hired into an existing shop with existing apps, you absolutely have to be able to read and write Objective-C code. If you plan to write entirely new applications and have 100% authority over all app design and technology decisions, you *can* use Swift without ever touching a line of Objective-C.
In an ideal world I'd go with a struct; while your *model* is mutable, the individual QA pairs aren't supposed to be (I'm assuming). On the other hand, if you plan to use the NSCoding protocol to store your data in plists, or use Core Data, neither of those things work with struct a and you'll have to make them classes instead. [Here](https://www.mikeash.com/pyblog/friday-qa-2015-07-17-when-to-use-swift-structs-and-classes.html) is a little more discussion on structs vs classes. 
Exactly what i needed to know. Thank you. What i plan with the individual QA pairs is they are entered and kept for as long as the user wants them, but more than likely will be edited or deleted by the user. I hope i am explaining correctly lol
I've only had a very quick look but a very common trap: UIImageView has user interaction disabled by default
True but not really relevant to this conversation. We're discussing Swift in the Apple ecosystem specifically. 
People do both. Some changes can only be done on the code (like changing, say, the colour of the background bar in a slider control) while some changes are easiest to do by creating an image in some other package (like creating a new "thumb" for the slider). Before starting to make it look good, make sure you're happy the layout works well: is it logically laid out? Can a user see at a glance how to use your UI? Are the controls grouped sensibly? Is there a logic to the way they're laid out? Bear in mind that most of the Apple UIs you use, whether on Mac or OS X, use the built-in controls with a minimum of customisation, so even before you start creating your own graphics you should be able to get things looking pretty decent. Often it's just about arranging your controls well, using boxes to group stuff etc...
In an objc project if you write a single line of swift code the project gets 7 - 8 mb larger. If you are writing a swift project you'll eventually add obcj libraries.
I doubt static libraries were a concern on an internal code base. But yes, that's a show stopper if you need to vend binaries of static libraries.
So far only positive experiences mixing the two languages. Main part of a new app I'm working on is written in Swift, with several Objective-C parts. For example I have several Obj-C classes that wrap a C library. I find it easier to work with plain C in Objective-C.
&gt; has user interaction disabled by default This. Remember this :).
Yeah, ok! Sorry Man. That was rude of me. I'll have a look and go form there! Thanks for all your time making these tutorials, especially for free. It's incredibly generous of you!
So after some fussing, it looks like this must be done programmatically, and not with IB, correct?
 http://stackoverflow.com/a/26252402
Hi, thanks for the reply I have tried this but I think it is a bit out of date. The link below is similar but it does not allow every external URL to open in Safari View Controller or Safari http://stackoverflow.com/questions/27464407/limit-uiwebview-to-specific-url-swift
Good job! I downloaded it, and it's… quirky :) Suggestion: you used a default Xcode template, which means it targets iOS 8.4 or later, which is the latest version available until 9.0 ships tomorrow. I would consider reducing that to 8.0, which will likely widen your use base a great deal. Anyway, the main thing is that you shipped something – well done!
Good for you. There are still millions of legacy apps out there that need maintaining that aren't going to be moving to swift anytime soon, and lots of new apps where the company doesn't want to do swift yet. 
its likely just you
How much do you know about OOP? You mean you have some things that are *Rateable*, that let you know their *value*, and, further down the line, you can say that they could also let you know their *weight*. Just a nudge!
Force unwrap optionals when you want the application to crash on a nil. For example: I have a view controller that has a UIView property. If it's nil, likely it was my mistake and I should know immediately to address it. Anywhere else the optional should be handled.
a constant is where you have a number that won't be changed, only read. A variable is a number that you need to read and write. number = string, integer, double, etc
I was really hoping this solved it, went into the identity inspector, and found that user interaction was already enabled. :( Then went into the attributes inspector and, oh look at that, *another* user interaction checkbox that *wasn't* enabled. This fixed it! Thank you!
Not really sure what you're asking for. But, I came from a web dev background as well. The best advice I can give you is to just forget about 95% of the web stuff you know, when you're working on apps. The web stuff you know just isn't going to carry over to iOS if you're building native apps. The time I spent working with Javascript on the web did help me grasp some things about Swift and OOP in general, but that's about it. Also, in my opinion, as a web developer, iOS is much harder to come to terms with than anything that I worked with on the web. When I say "hard" I don't really mean that it's so hard you can't do it, but that it's much more complex. I'm not trying to scare you off though, as once you get some momentum working with Swift and iOS it's great! Very complex, but also very powerful. My advice would be to pickup a book or start an online course and just think of it as something totally different. If you try to connect the dots between web and native iOS then you aren't going to get very far at all. 
Exactly. The ONLY time you should force unwrap is if a nil value is a developer error. If your app connects to any services, or accepts any user input, force unwrapping as a rule will bite you eventually.
In the ideal world, optionals should only be used in cases where nil is actually possible and useful value that needs to be handled. If you have a function that returns an optional, but it makes never sense to get nil from that function, it just shouldn't return an optional. If some error can occur while executing a function that is not fatal, it should throw. If some error can occur that should cause a crash, you should crash, but not by force-unwrapping anything, but by aborting where the error occurs. This makes it way easier to debug errors later on. In general, I try to eliminate all forced unwraps in my code. The primary reason is that if I see no forced unwraps, I immediately know that this type of crash cannot occur in my code. For every forced unwrap, when reading/changing code, I need to reconsider why I made that choice and why it's actually ok to do so, otherwise I run into the risk of the unwrap crashing my app. And sometimes I'd just make errors and incorrectly assume that the forced unwrap is ok. Just having no forced unwraps completely eliminates this source of crashes.
From the official Swift reference: &gt; Always make sure that an optional contains a non-nil value before using ! to force-unwrap its value. I don't agree that it improves readability, because if I come into someone else's code (or my own from a long time ago) and see force unwrapped optionals, I don't necessarily know why the original developer thought that it can't be nil. Sure, it shortens your code, but at the cost of your app potentially crashing. In many cases, you can just use ? instead of !, for example when you need to access the navigationController property of a viewcontroller. You know that you pushed that viewcontroller, so it must have a navigationController, but the difference is one results in a crash while the other results in nothing happening, in the infinitely small chance that it doesn't exist. 
In my opinion with Swift 2 and throwing errors, you should never force unwrap. One of the problems I find with the swift runtime is that sometimes crashes are not easy to understand, when you ship production code, errors should be verbose and easily traceable. A UIViewController's view is nil, well what happened before that? Knowing where in the code this happened makes it easy to trace which in turn might make it slightly easier to replicate and fix. Force unwrapping optionals to me feels like sloppy code, you allow for code smells to lurk because you are not handling the potential reason for it happening.
Ok thank you!
good job. I'll try it out later. 
Optionals are here to tell you that "something can go wrong" It is your responsibility to acknowledge that, at some point, something can go wrong and you need to take action upon that. If you think nothing will ever go wrong, then fine, unwrap it. But it is your responsibility. Ultimately, the compiler is here to help you and prevent you form making mistakes (like unwrapping a nil value). If you choose to ignore it, you're taking a dangerous path. If you think nothing will ever go wrong, don't even use optionals. If you're using a library and they use optionnals. read the documentation and handle the nil case accordingly. There are many constructs that make handling the nil case very hassle free and readable (and idiomatic) optional ?? defaultvalue if let value = optional { } else { } optional.map { closure } optional &gt;&gt;- { closure } (with swiftz) optional?.method()?.value = assignement My take is that if you want to crash at runtime because of a programming error, you should crash with an assertion and not because of nil. Opt-in for crash, and do not opt-out of safety
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/trymyiosapp] [Fisher of Men - The Struggle \[x-post /r/swift\]](https://np.reddit.com/r/TryMyiOSApp/comments/3l6cwe/fisher_of_men_the_struggle_xpost_rswift/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/trymyiosapp] [Graviato Audio Recorder \[x-post /r/swift\]](https://np.reddit.com/r/TryMyiOSApp/comments/3l6hkm/graviato_audio_recorder_xpost_rswift/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/trymyiosapp] [\[Game\] DigiDrag \[x-post /r/swift\]](https://np.reddit.com/r/TryMyiOSApp/comments/3l6hzt/game_digidrag_xpost_rswift/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Animate the constraints. You can make iboutlets to the constraints themselves and modify their parameters, or you can add and remove constraints directly. The former method is easier. And you can do it inside an animation block if you want them to move smoothly. 
Although you can achieve the same effect with flatMap applying an identity function, it's really not the same as what he's trying to do. flatMap is declared over any SequenceType, regardless of it's element type, and he's trying to apply a function to only sequence types that have an optional type element. And besides, `flatMap` has a higher complexity than the `unwrapAll` function. Anyway, I don't think there's a better solution than what he has done, the only thing I would do differently is declare a more full featured `OptionalType` with all desirable operations of an optional, instead of an `Unwrapable` type. The added benefit would be being able to declare methods to optionals of specific types. For instance, a string optional might declare a method `orEmpty` which returns itself or a empty string.
by "clojure's variables" you mean the values it has captured ? if so, then no, there's no way
&gt; I'm saying you should always force unwrap them, he's saying avoid them and always handle the nil case. He's right. Force unwrapping is basically you saying *"I'm certain this is never going to be nil, and the application should crash if my assumption is wrong"*. Normally, with decent APIs, that's a very bad wager to make – if the variable being nil is so unlikely, then it wouldn't be an optional in the first place. The fact that it *is* an optional is a huge hint that you really should handle the nil case. &gt; Properties like `collectionView` and `collectionViewLayout` in a `UICollectionViewController` are optionals, but in what scenario are they ever nil? Very often. They will be nil between the time the view controller is instantiated and when `loadView()` is executed. Views on view controllers are about the only special case with respect to handling optionals unsafely, and normally they aren't dealt with by using optionals and force-unwrapping, they are usually implicitly unwrapped properties. It would be a great addition to the language if we had a `guard` equivalent that could act across scopes, so that view properties could be declared as optional and then `loadView()` could ensure that they had values so that all code executing after `loadView()` would see them as non-optional. However that would be a very tricky thing for Apple to implement. &gt; In all other cases, forced unwrapping optionals will shorten the code length and improve readability. Yes, it may well shorten the code length – cutting corners by omitting error handling often does shorten the length of the code. That doesn't make it a good idea. Forced unwrapping is a disaster for readability. If you don't use an optional, or if you use an optional and check it, then I know the code is correct at a glance. If you force unwrap, then I can see that you've bet the house on the fact that it will never be nil, but it's usually not obvious why you've done so – I have to read a lot more code to establish that this code is safe. Furthermore, it makes future mistakes far more likely. When you force unwrap, that is no longer safe code. You may consider it safe, but it's only safe if certain assumptions hold true. Refactor your code, and that code that used to be correct may now only be correct some of the time. Change something elsewhere in your application, and that code that used to be correct might crash your application some of the time. The type system is there to help you detect these problems and it will do so immediately, but you are disabling the help it provides. Force-unwrapping is extremely brittle code and shouldn't be used by anybody wanting to build a reliable application. The whole point of optionals is that they *can* be nil, and you're gambling a hard crash on the fact that they won't be. If you regularly run into situations like that in your code, then you should reexamine why you are using optionals in the first place – if you're so sure they can never be nil, then they shouldn't be optionals. If they *are* optionals, then act like it. 
Based on what you've said, you only need UIKit – that means the "Single View Application" template is just what you need. [Here's a tutorial I wrote that will really help you get started](https://www.hackingwithswift.com/read/15/overview).
Thats a huge project you've got. Can i find a chapter or something in that book that would help me? Thanks 
Are these books written for Swift 1.2 or Swift 2?
Hi! I'm one of the authors of "Learning Swift" (http://shop.oreilly.com/product/0636920045946.do?code=WKIOS9), one of the books that just went into early release. It's being written for Swift 2. I believe the first five books on the page are. Let me know if you have any questions about our book!
There is a difference between interacting with Cocoa APIs which hasn't been updated to use optionals correctly and your own code. In your own code you should not use an optional if you know something can never be nil. Use optionals to signal that something can go wrong. I don't disagree with your rule of thumb. E.g. if you search for an index in a string you might not find what you search for and so you return an optional. In the nil case you might want to do something different, not just crash. I also see people force unwrapping the same variable over and over again. That is bad IMHO. You should unwrap as few places as possible and instead use the variable in a known state in the rest of the code. This is about being able to reason about your code. If there is some forced unwrap on almost any line, then you can crash almost anywhere and it is hard to have control over where things can go wrong and not. My philosophy is to validate things early and unwrap early. Then the rest of the code can handle variables which are not optionals. That makes the rest of the code cleaner and we catch errors/problems as early as possible. 
Ever get to the bottom of this? Really bugging me as well
I haven't worked on this project in a few months but I think I remember how I did it. I loaded up the view programmatically[0] then passed it the variable I wanted. The annoying part is making sure you can properly load up the view through the navigation controller. If there is a way to do it through storyboard I never found it. Hope that helps. [0] http://stackoverflow.com/questions/16134361/how-to-call-a-view-controller-programmatically
The easiest way would probably be to get the height the player is above the screen, and negate this value from the original y coordinate of the platform (make sure to keep the value for each tick, so that when the player falls down, the platform rises again). You can also test for if the y coordinate is below 0 (offscreen), and then delete the instance of the platform and add a point. I would recommend having a parent node for the platforms and moving that rather than each platform though. Probably not the best suggestion, but it should provide a starting point.
I knew about flatMap, but it didn't occur to me that using it with the identity function effectively does the same. But you're right, flatMap doesn't really answer my question, which is whether I can implement my unwrapAll function in some easier way. Thanks for the response!
On iOS - no, not at all. Explicitly forbidden by Apple's policies. On desktop - why don't you load your plugin as library?
You could try adding a button that, when pressed, or a check box, when checked, on the next camera button press turns the screen white as it takes the picture (assuming it's a selfie)
I'm sorry, by complexity I mean the algorithm complexity. The flatMap has O(n + m) (with n as the sequence size and m as the resulting sequence size) complexity and the unwrap method should have O(n) complexity. I personally don't like this flatMap implementation, the "flatten" part of the function gets somewhat lost since you're not mapping to a collection of collections. You can think about an optional as a collection of a single element, but I think it might confuse people. Even more so considering optionals are automatically transformed from normal values, so you can effectively use flatmap instead of map in most cases and not even notice any difference. Yes, the string example was not the best, we have already a more idiomatic way to accomplish it. Regardless of it, I think being able to declare methods on specific types of optional is a powerful and useful tool to have.
I eventually plan to follow this one. http://www.raywenderlich.com/114886/beginning-tvos-development-with-tvml-tutorial
[This article] (http://lowendmac.com/2014/modernizing-the-mac-pro-11-and-21/) looks promising, if you can borrow a newer Mac to do the upgrade with.
Chris Lattner replied to almost the same question a few weeks back in this post: https://www.reddit.com/r/swift/comments/3kbjjn/so_swift_isnt_open_source_yet_then/ "We are still on track to open source Swift (including Linux support) "by the end of 2015" as promised, more details will come out when they can. -Chris"
I highly doubt this will happen. The change is purely for developers and is a great one in fact. In the age where apps are easily accessible/updateable through the app store, I don't think anyone will bother distributing apps through source code.
Let me know what you think!
This is a bit strange, if you are comparing a key and returning that key, why not just check if it is contained in the array, and return the key if true?
Sure: extension CollectionType { func first(@noescape isElement: Generator.Element throws -&gt; Bool) rethrows -&gt; Generator.Element? { for el in self where try isElement(el) { return el } return nil } } extension CollectionType where Generator.Element : Equatable { func first(el: Generator.Element) -&gt; Generator.Element? { return first { o in o == el } } } But, like the other comment said, it's a weird thing to do. Like, if you're looking for the first occurrence of a key, wouldn't that just be the key itself? [1, 2, 3, 4, 5].first(2) // 2 If you're looking to see whether or not the array *contains* that key, then the `contains` function does exactly that: [1, 2, 3, 4, 5].contains(2) // true If you're looking to *remove* the first occurrence of the key from the array, well then you'll want `indexOf`: var ar = [1, 2, 3, 4, 5] if let i = ar.indexOf(2) { ar.removeAtIndex(i) } If you're looking to return the first thing that satisfies a predicate, though, the `first` method above should do the job: [1, 2, 3, 4, 5].first { n in n &gt; 3 } // 4
The unwrap method *also* has O(n + m) complexity. Look at the minimum steps: * Iterate through source array, performing the transformation as you go. * N elements in source array. * N steps, then * Those elements which are not nil, append them to the result array * You only append M elements, where M is the length of the resulting array * And each append operation is amortized O(1). So the total complexity is O(M + N). The complexity is a little misleading, though. O(M + N) is actually *less* complex than O(N), when M is smaller than N. Work out the complexity for `map`, say: * Iterate through source array, performing the transformation as you go. * N elements in source array. * N steps, then * Append them to the result array * Each append operation is amortized O(1). So the complexity for `map` is O(N + N), or O(N). But for the `flatMap` that works over optionals, you *know* that M is going to be less than N. So it's actually less complex. However, for the `flatMap` that concatenates sequences, you *don't* know that the resulting array will be smaller than the source. So in that case, O(M + N) is probably *more* complex than O(N). There are a couple other things to bear in mind. First off, the standard library functions are very very well written. They usually have all kinds of clever optimisations and whatnots. If you look at OP's method: extension SequenceType where Generator.Element: Unwrapable { func unwrap() -&gt; Array&lt;Generator.Element.Unwrapped&gt; { return self.map { $0.unwrap() }.filter({ $0 != nil }).map({ $0! }) } } While the algorithmic complexity might be fine (O(M + N)), it's actually got a few inefficiencies. First off, it's got three strict sequence methods chained together: that means each one will allocate and fill an array. You should only need to allocate and fill the array once: extension SequenceType where Generator.Element: Unwrapable { func unwrap() -&gt; Array&lt;Generator.Element.Unwrapped&gt; { var result: [Generator.Element.Unwrapped] = [] for el in self { if let uw = el.unwrap() { result.append(uw) } } return result } } But, since you know that the resulting array can be no larger than the source, you can further optimise by allocating the size of the source from the get-go: extension SequenceType where Generator.Element: Unwrapable { func unwrap() -&gt; Array&lt;Generator.Element.Unwrapped&gt; { var result: [Generator.Element.Unwrapped] = [] result.reserveCapacity(count) for el in self { if let uw = el.unwrap() { result.append(uw) } } return result } } And those are just the optimisations *I* could think of for `flatMap`. No doubt the Swift team has several more. The take away is that the standard library `flatMap` is probably very efficient.
Core image filters would probably be what you're looking for? CIExposure would be the filter for boosting the "gain" on the image, at the expense of quality of course. 
Seems like I can just download some software and sell it on Craiglist for more than I bought it for. Not worth my trouble especially when I can put another $100 in for a refurbished Mac Mini.
I didn't see a question there – was there something specific you wanted answering? You need to be careful with the way you type: "\" and "/" mean different things, for example, and you probably want the latter. You also need to be careful of what's known as the order of precedence, which is where a divide operation (/) is calculated before an addition (+). So, a + b + c / 3 is actually a + b + (c / 3) when really you wanted (a + b + c) / 3. I hope this makes sense. If you'd like more help, you might consider adding actual questions, stupid or otherwise, in your post :)
Went through this one last night, as with all their tutorials, it was very straightforward. It didn't cover a lot of the new templates, and some of the native javascript commands that will supposedly work. But it gets an app up and running in the sim using TVML.
I believe their actual words where _late_ this year. Could misremember. But yepp! Have an upvote.
Thanks very much for your help, can I assume that playgrounds don't really play any functional role, and s its name sake just a place to mess about with code ? Great link ;-) 
Linked to the stack overflow question in order to share the wealth with others. I've dabbled with swift, but I can't seem to figure out a way to do this without recreating several classes of a framework.
This is possible assuming you're talking about a executing your .swift script in OS X. As long as you have the latest version of Xcode and the command line tools installed you could make your either have a bash executable that opens your app and then runs your .swift script (assuming it's executable) or (haven't tried this) call the app from the .swift script. The former might look something like... #!/bin/bash open /Applications/Safari.app sleep 3 /path/to/your/script.swift 
Hmm.. When i push the button, it shows another picture in the left corner
Stack overflow jobs - try there
Contact companies you like using recruiting links on their websites. Attend your local Cocoaheads group (http://cocoaheads.org) and let people know you're looking for a job.
I highly doubt that will happen, the process is too convoluted for the casual user/dev. It's a nice move imho, a lot of people were complaining about the need for a dev account and many opted to try android programming instead, ignoring ios, because of this. 
/r/SwiftJobs/ ? http://iosdevjob.com/ ?
You should consider learning other languages alongside Swift. It's not yet clear whether Swift is another flavor of the week and you shouldn't try and build a career on a single programming language. Take it from someone who used to write webOS apps exclusively ...
Here you go: https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextViewDelegate_Protocol/index.html#//apple_ref/occ/intfm/UITextViewDelegate/textViewDidBeginEditing:
I took the iOS8 course. It's good but IMO a better resource is the [Stanford iOS8 Swift course](https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099). Its free and the instructor is great. If you are going to buy the Udemy course search for discount codes on the web. Normally the course costs ~200$ but you can get it for as low as 20$.
With regards to the complexity, I agree with you - `unwrapAll` is effectively O(n). But *so is flatMap*. `flatMap` is also O(n + m), where m is the length of the resulting array, but for optionals, m is always less than or equal to n, so it's effectively O(2n), or O(n). So `flatMap` and `unwrapAll` have exactly the same complexity. /u/gulpy said: &gt; And besides, flatMap has a higher complexity than the unwrapAll function. The performance optimisations weren't really important - I was just trying to illustrate the benefit of sticking to std lib functions as much as possible. Manual loops aren't necessarily faster: in theory, a sufficiently optimised `flatMap` should be equally fast. Unfortunately, though, it's impossible to optimise your code so that one allocation instead of three if performed. `map` cannot have any knowledge of what comes after it: for that reason, the closures cannot be treated as pipes. Each array *has* to be created, because of the semantics of `map`. You can use the lazy versions of those methods, though, which changes the semantics, and would treat the closures as pipes: extension SequenceType where Generator.Element: Unwrapable { func unwrap() -&gt; Array&lt;Generator.Element.Unwrapped&gt; { return Array(self.lazy.map { $0.unwrap() }.filter({ $0 != nil }).map({ $0! })) } } Running some quick tests there, anyway, it looks like `array.flatMap {$0}` is taking about 0.163 seconds for 10000000 elements, whereas the unwrap is taking 0.495. You can see the tests I ran [here](https://github.com/oisdk/unwrap-tests/blob/master/Unwrap/UnwrapTests/UnwrapTests.swift). 
Thanks. Hmm. I thought I had already tried this, and it wasn't hitting for some reason. I'll try again. 
 &gt;I'm very much a beginner, to any type of coding- but I need to learn swift from the ground up for a passion project. So please excuse any foolish questions. I would say you need to learn computer science from the ground up. You should seriously consider an on line computer science program. &gt;- I find out about swift 2 and the Xcode 7 upgrade, If you want to use Swift you need to keep yourself in the loop! Swift has rapidly developed but so has the techniques to put it to use. If you don't engage the Swift community and all the developments with in your chances of putting Swift to good use is minimal. &gt;After levelling up the Xcode playground does not load my code requests at all- it did once and then since then they grey area is just blank or remains grey. XCode isn't a game! &gt;Anyone else find this? help would be valuable- &gt;Also I'm concerned that the language I don't yet understand has changed- there are a lot of articles talking about changes from 1 to 2 but not having a grasp on what these mean I have no context. Are there any swift 2 beginner resources that people know of? Languages change, C++ for example has changed significantly over the years. You need to evolve with the languages. In a few years there will be a Swift 3 and after that a Swift 4, languages are not static. As far as beginner Swift resources there are some out there that are good. Things change rapidly in the Swift world so you need to apply a little effort in search. I still come back to the idea that you don't need a Swift or language Xx course but rather a computer science program that dives deeply into the science. Basically at least the first two years of a computer science four year degree program. Don't let the "two years" scare you as this can be compressed significantly. The idea is to learn things the right way and avoid bad programming habits through formal training. That being said Apple has iTunes and in there you can find entire Swift Programming courses of various levels. I like the iTunes approach and many courses you can "audit" cost free. There are more formal online educational opportunities you could look into. &gt;Pending I can get playground working of course Try downloading a prebuilt playground for Swift 2.0 and see if XCode works that way. Your hand crafted Playground may have issues. &gt;Thanks to all in advance No problem. The impression you leave me is that you are going blindly into this not really knowing the requirements ahead of time. There is actually nothing wrong with that - exploration can bring new interests to light. The problem here is that you seem to have a specific goal in mind with respect to this app. Building an app that works well requires a bit more skill and a hacked together app likely won't work well. This is where learning the basics can help a great deal. 
[**@cdntr**](https://twitter.com/cdntr/) &gt; [2015-09-11 22:15 UTC](https://twitter.com/cdntr/status/642461593209597954) &gt; Fluent in Swift? Interested in an iOS dev job @duolingo? &gt; &gt; Hit me up (me, personally). &gt; &gt; More info: https://jobs.lever.co/duolingo/6e58fe72-0669-476d-bbe2-11f2264c8f92 ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
I'll let you know in 23 hours when my download finishes - Apple servers are SLOW. My connection is 72mb/s! Good luck!
Yup. They don't exist. http://www.reddit.com/r/swift/comments/3lbkhi/where_are_all_of_the_swift_developer_jobs/cv50vyf You wouldn't be trying to keep people from learning Swift so you can have s head start on them, would you?
https://forums.developer.apple.com/thread/18370 Hopefully this won't be me too! 
To be honest, iOS developers are a dime a dozen, and if you're new to the game it's a pretty competitive space. I have written a book on Swift, was writing one on Objective-C internals, have developed on OS X for 10 years, have contributed to or written various open source projects, and have written iOS software, and I was still turned down for several jobs without even being given an interview.
Don't spend any money on learning iOS development. There is a free iTunes U course available that is taught by Paul Hegarty. Professor Hegarty did work at NeXT, which is where Objective C was developed at, so he actually knows its inner working. The iTunes U course covers everything a UDemy course would cover. 
You can have an integer that you load(from NSUserDefaults) when app starts, and every time the user presses the button you increase it and save it to NSUserDefaults.
I see this as huge. &gt;I was just curious to see what the general opinion is. Why huge? It gives developers flexibility in how they can deliver apps. This is great for many projects that may never see the world outside the business they are developed for. It is a way to distribute apps that would never make it onto the App Store. &gt;Does that mean that some people will start distributing / selling their souce code and let users complile and install the app thus bypassing the appstore ? Selling and distributing source code is a bad idea in my mind, especially to the user community. At least with businesses you can have strong contracts in place. Beyond that if you want to make money off your app the App Store is still the best place to go, it is actually a god send for the small time developer. The App Store is such a huge enabler that it is well worth abiding by their regulations if making money is the goal. In a nutshell bypassing the App Store is silly if you intend to make money off a project Open source is a different thing all together. I can actually see many open source projects cropping up and becoming very popular due to Apples change of direction here. Imagine a Homebrew for iOS. Given the time installation of open source should be as easy as it is on the Mac now. Imagine "brewios install vim" or whatever you choose. The potential is huge. I still see custom applications as being the most likely place where this feature will be adopted. These would be apps that companies, organizations, or individuals need that are in constant flux and where bothering with the App Store is more of a problem than it is is worth. The funny thing here is that the public will seldom hear about such apps. They will simply be custom tools that an organization can leverage in a way that was difficult to do before. 
Also found this https://forums.developer.apple.com/thread/18445 - documentation repeatedly downloads for this guy. I've also found several programming/simulation issues by googling the build number. Sounds like fun.
ok I would use indexOf and fetch the object that way 
 &gt;I highly doubt that will happen, the process is too convoluted for the casual user/dev. Huh? Casual user maybe, a developer I would hope not. Given time I would expect to see a HomeBrew like depository with an installation process almost as simple as the old "brew install" command. I can see a strong open source community happening here. On the other hand I don't see a chance in hell of paying for source code working. &gt;It's a nice move imho, a lot of people were complaining about the need for a dev account and many opted to try android programming instead, ignoring ios, because of this. I really don't see it as a problem. In the overall scheme of things the developer account cost is trivial, people spend more on magazines each year than the cost of a developers account. The reality is the cost of the developer program is just a public excuse I would imagine there are deeper issues at play. Nobody in their right mind goes Android only to make money. There may be real arguments from people writing open software. The problem with the open software people objecting to the developer program costs is that these same people usually have multiple subscriptions to the various Linux and open source magazines out there. The developer program simply isn't any different in my mind to a magazine subscription, Apples developer program though does have better content at times. 
You could try polling, storing these events in a variable that you access in your game loop. You can find more information there: http://www.codeslinger.co.uk/pages/projects/gameboy/joypad.html I found this website quite informative for a good overview of a game boy emulator.
I'm about halfway through the iOS 9 course on udemy and I am enjoying it. I come from an objective C background but picked up swift pretty easily from this class. The instructor is pretty good... He teaches you how to make clones of some popular apps which is fun. 
Buying it from Apples website?
We're [hiring a Swift developer](http://www.steamclock.com/about/swift-developer-job.html) at Steamclock in Vancouver. We do mobile development for various companies in Canada and around the world, primarily in Swift. Technically we're hiring an iOS developer, but we write almost all our code in Swift, so if somebody is already comfortable with Swift that's a big bonus. If you're in Vancouver and have shipped an app in Swift, let's talk!
I just got done coverting 7k+ lines.... it was a real bitch. So basically there is the auto-conversion stuff that changes something like find() -&gt; .indexOf(), and will also auto-implement do-try-catch in place of older NSError? code. That stuff works fine, and predictably. Then there are new warnings (which it doesn't auto-convert), for example, using a var when you could have used a let, etc. Those will constitute potentially hundreds of warnings. Finally there are changes that swift could not auto-convert. These are constituted mostly of changes where the underlying APIs themselves have changed, and the types and signatures that are passed in/returned may have changed. If you have a textfield heavy app, for example, now all textfields.text attributes are nullable, so they are String? instead of String. You simply have to slog through all of it to get it converted/changed over. I've noticed the API changes are for the better, however, and now things make more sense, but in my case, my 7k lines program had nearly 500 changes I had to get through. As far as linker errors, it may be due to using a binary API that does not contain bitcode. You can turn off the bitcode requirement in the project settings, which is on by default when it converts your project. I know this doesn't help much, but I feel your pain! Just keep fixing -&gt; build -&gt; repeat until it builds cleanly. You'll get there.
Right click on the textfield and make sure the didbeginediting is wired to the right IBAction... 
Thanks for the reply. It is good to know that perhaps I am going about doing things the correct way. Seeing hundreds of errors in an application that previously worked great had me very concerned that I am doing something the wrong way. I am going to spend some time today slogging through it and see if it gets any better.
Nope. Tried doing that and did not work out to well for me!
Exactly. Think about it. What would be "the right way" to transition from "Language A" to "Language B"? If they just said, &gt;"Starting with XCode __ in 201x we will no longer support Language A! Period." People would shit bricks. Mass Hysteria. Or would it be smoother (and go over better) to say, &gt;"Look at this new Language B we made just for you. Soon it will do everything that Language A does using a modern syntax and be easier to learn and safer with improved X, Y, and Z.... Use it in parallel with Language A for a while and see how it goes and help us debug Language B. Once Langauge B is mature enough, we will switch off support for Language A because, frankly, it's a lot of work maintaining support for both for whatever reasons." Apple is doing the latter. They will drop Objective-C like they did the 30-pin connector. Even after investing so much time and energy into it. People will bitch and moan...and they will get over it. If they don't, Apple don't care. Apple will continue to move forward.
I really think that most of the naysayers are simply good at what they do, it took them a long time to attain that level of proficiency, and are reluctant to put that work in with a new langauge. That *exact* thing happened when Digital photography took over Film. The forums were filled with people declaring that "it" would never happen. Pfft. It happened faster than anyone would ever imagine. And that was world wide, millions of professionals and consumers, with thousands of shops and distributors. Apple moving to Swift (for the greater good) is nothing compared to that.
any idea if they'll release a fall 2015 class, or are they waiting to Jan. to teach iOS 9
About complexity: no, flat map is O(n+m), that can't be simplified any further, because you can't assume that m&lt;=n. I therefore still think /u/gulypy is right: the computational complexity of unwarpAll is lower than the one of flatMap (in the general case). About optimisation: I know that map cannot have that knowledge - the compiler sees the whole code, though, and can - in theory - do the code optimisation necessary to avoid the separate allocations, because it "sees" that my code has no side effects that would prevent it from doing that optimisation. About your performance tests: it's pretty funny, 'cause I ran some too, with the same number of elements actually :-D (10^7 elements, randomly (50%) nil or non-nil). Your code of unwrapAll (without reserve capacity) took about 0.176 seconds, while my version took about 0.7 seconds. The flatMap version took ~0.148 seconds, so either your test array is a bit different and/or my computer is a tad faster.
They're better than some at supporting old technology (iOS versions support older devices than most Android devices, even the Google ones). Probably the most relevant example is the developer support for old API's. Carbon was supported for 12 years, *after* Apple themselves had transitioned to Cocoa. I'm not really sure how Apple themselves can stop using Objective-C in 5 years. Would it start with the highest level, and then going all the way down to CF? Personally, I think it'd be a waste of their resources to rewrite all their apps across their entire ecosystem.
Well I'm not in Vancouver, but I do have two apps shipped in Swift, and I'm up for relocating! Does that count?
Apple is almost always hiring.
what can you do besides Swift? What type of degree do you have?
It's early days, but the shift has begun. A year from now familiarity with both languages will be standard requirement. Three years, most jobs will be swift with a little objc. Apple will have begin introducing new apis exclusively in swift and replacing some old objc ones. Five years, all apis will be available in swift. Objc will be deprecated. Seven years, Objc will no longer be supported.
Five years is a long time. 
Your analogy is bad and you should feel bad. 
Yup after downloading Xcode 7, I'm plagued with these errors. 
Still not working for me... So weird. Thanks for the help thus far!
Oh, you're not indexing correctly. Take off the + UInt32(1) edit to clarify: arc4random_uniform will generate a number from 0 -&gt; n-1. So if you add 1 to that you will get a random number from 1 -&gt; n. Every once in a while that random number ends up being 51 + 1 = 52 (and you try to get the 52nd index which does not exist)
This just happened to me. And here's where it gets weirder. I threw out XCode 6.4 in hopes that would help, then ran the update again. It choked at the same spot (about 80-90%) and then I rebooted. When I tried to run XCode, it actually showed up and let me do the install of it. I have no idea what's going on now…
PM me and send me a GitHub link or other examples of your work.
Plenty of Swift jobs on upwork. Most new apps are in Swift. Awful lot of request for apps for $1000 though. 
It depends on how much processing of text you do. Are you just improving the readability like Instapaper or Pocket do? Also are you providing the RSS feeds or does the user subscribe? 
Xcode 7 came out along with iOS 9.
There's far too much involved in rewriting all the Foundation and Core frameworks in Swift, they've been years in the making. Yes Apple are transitioning to Swift fast but Objective C isn't just going to be replaced entirely. There's no such thing as Swift jobs currently, just iOS and OS X jobs. With it going open source, other people can write core frameworks and maybe it'll be adopted elsewhere but I can't see the happening for a while. Your analogy doesn't really apply.
What's with the analogies in this thread? It's nothing like the transition to the 30 pin connector. Most of the iOS SDK is written in Objective-C, they're not going to rewrite it - too much risk involved. It still uses the objective-c runtime. It will transition over time but it's incredibly unlikely you'll ever be forced to use Swift in Xcode. You just will lose out on all the modern APIs eventually.
Finally someone talking sense. It's a deep rabbit hole indeed. Most of this sub seems to be full of people without a big grasp of iOS development who jumped on bandwagon as Swift was announced.
yea, im taking them at the moment ... overall im learning quite a bit .. rob percivals is slightly better
I'm learning swift too from scratch. I can recommend using an udemy course, it will save you time. I am already able to make a universal app using swift (2) in about two weeks. It does help if you know a language, because you can skip the basic things like loops etc. 
Mine successfully installed xcode 7, i didn't have any programs running and didn't use the mac at all while it was working - maybe something in that?
I agree. I was given a Mac at work and was asked if I could develop a simple app. We a C# team, so my manager bought Xamarin... After a month, I thought, "we have Apple developer accounts - why can't we just use Swift?" Two months, some pluralsight courses and Safari books later, I am still learning, but already created one simple app and am working on a Sprite Kit app. So the two months-one year estimate seems spot-on. The Stanford CS193P course was a great first resource, as were the videos from WWDC '14/15. EDIT: grammar
I wrote a free tutorial series that teaches Swift across 30 projects. 10 of those are real apps, and 10 are real games – the other 10 teach techniques such as custom drawing and debugging. Each project takes about two hours to complete, although some will take under an hour simply because they are shorter. If you were to start at the beginning and go all the way through to the end of the final project, with two hours of work per day, you would learn Swift in a month. If you have only an hour a day, then two months. Regardless, at the end of your time you would have a whole library of code you can draw on, and 20 apps and games you can customise and ship as your own if you want to. As always, the main problem isn't learning the language, but learning the frameworks. Apple has a *boatload* of frameworks that do huge amounts of work for you, and if you want to make great apps you need to become familiar with them. As you already have experience in C++, I would expect you to fly through the tutorials and be productively making your own apps very quickly. If you'd like to try the course yourself – again, it's completely free – you can find it here: [Hacking with Swift](https://www.hackingwithswift.com). I come by /r/swift several times a day, so you're welcome to ask questions here or on [Twitter](https://twitter.com/twostraws) and I'll do my best to answer.
slowpoke
I'm guessing you got auto updated from the AppStore. It was updated on the 16th on the AppStore and if you have auto updates on it probably updated yesterday or something
I liked how the "Ultimate Swift Programming" video course was broken up so I'm looking forward to watching iOS 9 and Swift 2 courses, where will they be listed? The link is just the ebook.
Awesome. Thanks for updating it! As soon as it works with swift 2 Ill go through the whole thing.
If you have experience in oop which you do if you know c++ and you have a good tutorial, then 2 days you can make a simple single screen app.
Wow thank you so much for the help! I'll definitely take a look at it. Seems like a great way for me to dive right it. 
Messaging you on [**2015-09-25 19:36:25 UTC**](http://www.wolframalpha.com/input/?i=2015-09-25 19:36:25 UTC To Local Time) to remind you of [**this.**](https://www.reddit.com/r/swift/comments/3le9mc/how_long_do_you_think_it_will_take_to_pick_up/cv67b33) [**CLICK THIS LINK**](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/swift/comments/3le9mc/how_long_do_you_think_it_will_take_to_pick_up/cv67b33]%0A%0ARemindMe! 1 week ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! cv67c04) _____ |[^([FAQs])](http://www.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^([Custom])](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^([Your Reminders])](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^([Feedback])](http://www.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^([Code])](https://github.com/SIlver--/remindmebot-reddit) |-|-|-|-|-|
I didn't know you were the guy who runs this website. This site is awesome, and it's been very helpful. Thanks.
1 week? Have some faith! I just made some coffee and am going for one last big push now… ;)
You're absolutely right -- my bad! And I appreciate the feedback. What things stand out to you when the field is so saturated?
Learning Swift, the book, is from the same folks and broken up the same way so that may be useful. We don't have a video for iOS 9 and Swift 2 ... yet :-)
I'm not sure about that. If you user versioning system such as git or sublime you can compare your different versions to see what changed and fix it that way.
I doubt Apple is going to make big breaking changes to Swift again though. They know that as people are increasingly using it and Swift code bases are growing there will be limits to how big breaking changes they can make. Anyway I think most people would agree that with Swift 2.0 I think 99% of the issues developers have had with swift are gone. If we get some slick concurrency stuff added I think Apple will have everything covered. I think there might be a couple of more minor updates, but from then on I suspect Swift will move along in similar fashion to Java and C#. Still I got to say, I am glad Apple was willing to make breaking changes at this point. Swift 2.0 is a significantly better language than Swift 1.0 IMHO.
&gt; Selling and distributing source code is a bad idea in my mind You've not heard of Free or Open Source Software? The Internet, and not to mention OS X and the Apple compilers, are built on FOSS. 
Yikes. I'm relaying this information back to the editor. Thanks for reporting it.
Maybe you mis read what I said but selling opens source software isn't exactly a good business strategy. Even Redhat gets around that by selling services. For Joe blow programmer trying to sell source code it is a far tougher thing to do. 
I downloaded the update from the App Store.
One of the things I noticed was that you can no longer pin UI elements with the Editor-&gt;Pin menu (It's gone). You have to click and drag and set margins. As far as IB, I have no clue why I can't create actions.
Shouldn't it work if you remove the first line? sprite.physicsBody!.velocity = CGVectorMake(0, 0)
Wow. Totally missed that. Thanks
Nope, a lot of old gen device owners (iPad mini's, iPhone 4S/5) feel that their device might get slower on the iOS 9 update, just as it did from iOS 7 to iOS 8. That's the biggest reason for why people won't update. I'm not (on certain devices).
I have been programming in Objective-C since 1992. I enjoy it a lot, but I am looking forward to a time when I will not be coding in Objective-C and will have switched to Swift completely. I have already done that in my personal projects, and, like many posters in this thread, am eager for companies to make the jump, so my work coding can be done in Swift. I wish to gently disagree with something you said: 'most of the naysayers are simply good at what they do, it took them a long time to attain that level of proficiency'. I believe these 'naysayers', by 'taking a long time to attain that level of proficiency' are actually _bad_ at what they do, and are the kind of heel-dragging Luddites who pop up to moan whenever any technological advance presents itself. People who are really good at Objective-C (or any language) will have picked up and understood Swift in just a few days. And many, many of them will, like me, appreciate that whilst Objective-C has served us well, it is time to put it away and move onto something much better. I am reminded of some Emerson (probably mis-quoting), 'When half-gods go, the gods arrive.'
You need to use the debugger to figure out which of the variables is nil. Just looking at the code I can see two good candidates: path and audioPlayer. Things can fail; that's why some AP's return nil, to indicate failure. You cannot predict when they will fail and when they will succeed, so you can't just unwrap the optional by putting a '!' after it. It is up to you to test the variable and ensure it is non-nil. And if it is nil, it is up to you to find out why and fail in a reasonable way; crashing is not reasonable. Using 'if let...' or 'guard let...' is usually better than automatically unwrapping an optional. That way you can assure yourself it is not nil and carry on, or, if it is nil, perform some alternate course of action.
I think it's safe to assume. My 4S was slower on iOS8 but doesn't have as much lag switching apps. Apple has a really good high adoption rate with regards to os updates 
TL;DR: use guard
If you're not going to be using any features or APIs from iOS 9, there's no real reason to change the deployment target. I'd argue that's it best to target the lowest common denominator.
Since you did *ask for input*, I'd recommend a struct for your purpose. class UserData { struct QuestionAndAnswer { let question: String let answer: String } var userPair: [QuestionAndAnswer]? } That aside, there's *nothing* wrong with code you posted (formatting aside). class UserData { var userPair:[(question:String, answer:String)] = [] } var x = UserData() x.userPair.append(("What is your name", "Puddintain!")) x.userPair 
Cheers, I know it's still in 'beta' but the first example? ;)
When you apply a impulse to an object you change its velocity (depending on its mass, basic physics). The line you just deleted just set the velocity to 0 everytime you applied the impulse.
I would count a year's worth of experience as "very little", so perhaps that's part of the issue. I've seen people with solid programming experience get hired with very little iOS specific experience but not anyone who's trying to get an iOS dev position as their first job, for example. I think your best shot is to get some apps up on the store to demonstrate that you actually can do the work *and* ship through Apple's process. That might not help you in the face-to-face interviews but it will help you get more of them.
Like DressTheMonkey said, in the debugger if you step through it should let you know which variable in getting unwrapped into an optional. The code looks good besides accounting for the nil values so also make sure that the file you are trying to play is actually in the xcode project directory (the strings should should match exactly, including random spaces that may exist etc.).
I have very limited Swift knowledge but shouldn't it be protocol Animal and each implementing that? In pure OOP principles a Cat would be an instance class. But again, im a noob in swift. Hopefully one of the more experienced devs can clarify. 
Thanks for the help, it apparently didn't like that I was using an m4a, I changed to mp3 and it started working.
Guard statement and multiple assignments in a single "if let" statement are your best options.
Thanks! I think I'll look into this. guards look cool too
[Here you go](http://mpd.im/wrox-swift)
Thanks for the reply, I don't pay enough attention to terminology so I realize I meant dictionary. At the risk of sounding dumb, can you explain what you mean by quote the keys? Is it just putting userAccount and userAge in quotes? If so, do I do this in the dictionary, when I'm referring to it, or both?
I'm dealing with the same problem at the moment. I set up a text view, assign constraints and the text seems to start Bout 4 lines lower than I expect it to. As for a solution, I read somewhere about a way to dynamically size the text view based on the content. I'm still looking for details on how to do it. If I find it before a solution pops up here, I'll share it with you. 
 userAccount and userAge weren't defined. You can't use them before you have defined them. You're probably better off using them as strings var user11111 = ["userAccount": 1, "userAge": 23] var user22222 = ["userAccount": 2, "userAge": 28] var userList = [user11111, user22222] cell.textLabel?.text = userList[indexPath.row]["userAge"]! 
I would add that it’s probably not best practice to expose implementation details like this. I’d say a method for adding a set of user information would be more in line with whats generally considered beast practice. So instead of `x.userPair.append(...)` you’d have your public interface expose a method like `x.insertUserDataSet(...)`.
Not necessary; if something evaluates to a Bool, you can use it directly in a conditional.
Then how would I rewrite the line of code in the question so it doesn't error?
Awesome, that did the trick, thank you!
Without having your code to poke at myself I can't be 100% certain, but the problem is probably that you have a Bool? rather than a Bool, i.e. you could have nil instead of true or false. You could do something like this (note second exclamation point): else if myChild != nil &amp;&amp; myChild!.needsToResetHeadForCheck or else if let check = myChild?.needsToResetHeadForCheck &amp;&amp; check
http://www.swifttoolbox.io/
Interesting question. I'm tempted to say create a new array. The best option probably requires more information than you are giving though. 
Your best bet is to use either NSOperationQueue or GCD. Personally I'm more familiar with GCD. It's easy and robust, and fully supported by the Apple ecosystem. I find there's really just not much reason to use anything else.
you can always inline it like thisString = myChild.needsToResetHeadForCheck ? "true" : "false"
You need to call stop on AVAudioPlay object you created so you'll need to keep a reference to it. // At the top of the class that plays the audio file var songAudioPlayer: AVAudioPlayer! // Your code to play a song songAudioPlayer = try! AVAudioPlayer(url: songURL) songAudioPlayer.play() // Some time later.. songAudioPlayer.stop()
All the casts in your second example really make the code ugly and hard to read, IMO. You should break everything down so you're only doing a one or two strightforward steps per line. As people have said, guard is your friend. Also in this case /u/klngarthur is right about using a good JSON library. But here's my opinion in pure Swift... func apiRegistrationHandler() { let helper = AuthAPIHelper() helper.registerNewUser(user) { (results, error) -&gt; Void in guard error == nil, let results = results as? NSDictionary else { print("Something went horribly wrong! Error: \(error)") return } guard let statusString = results["status"] as? String where statusString == "successful", let userArray = results["user"] as? NSArray, let userInfo = userArray.firstObject as? NSDictionary, let userId = userInfo["userid"] as? Int, let sessionToken = userInfo["authentication_token"] as? String else { // Can't use dicts directly in string interpolation because of quote marks let possibleError = results["message"] let possibleStatus = results["status"] print("Something went mildly wrong! Status: \(possibleStatus), error: \(possibleError)") return } self.user.userId = userId self.user.sessionToken = sessionToken self.user.save() } } 
It's best not to speculate on what your users *might* do and follow instead what you can find out about what users *are* doing, as in the stats Mixpanel released on [iOS 9 adoption](https://mixpanel.com/trends/#report/ios_9/from_date:-3,report_unit:hour,to_date:0). My personal strategy is to start all new projects on the absolute latest version of iOS available so that I don't start off with any cruft from old, shorter-lifetime versions. For any already existing projects, I update to the most recent of the last version (8.4 in this case). That seems to maintain the best balance between feature availability versus losing the users who stop seeing app updates because they won't follow OS versions.
matrices?
Check Github awesome swift
This is the line that calculates how far it will be rotating, it uses multiples of 180 just to fix it to 180. &gt;*self.imageView.transform = CGAffineTransformMakeRotation((180.0 * CGFloat(M_PI)) / 180.0)* And here is how you would generate a random number &gt;*var randomNum= Double(arc4random_uniform(100)) //generates random number 0-99* Together you can put these to make it spin more times &gt;*self.imageView.transform = CGAffineTransformMakeRotation((180.0 * CGFloat(M_PI)) / 180.0 * randomNum)* Since you are calling this spin function with a button press, I recommend you possibly declare the random number to 0 at beginning of button function and then set it equal to the random number a step later but above the animation to ensure a newly random generated number every time. Haven't actually tested the provided solution but it should work and if not, probably requires a little amount of tweaking.
Sadly not so much on my iPad mini 2 and my iPhone 4S. But the thing is that my main phone is (currently) the iPhone 6 Plus. But joy everyone upgrades like me or you...
The compiler launched last year. You can download it as part of Xcode on the App Store. The late 2015 date was for open-sourcing, not for the compiler launch. 
Is it possible to use swift to write a terminal application. So it looks something like: Input: "User inputs something" "Output based on input"
Simple: - Create a new Command Line Project - Replace the code in `main.swift` with this template: print("&gt;&gt;&gt; ", terminator:"") while let line = readLine() where line != "quit" { print("You entered:", line) print("&gt;&gt;&gt; ", terminator:"") } - Run The program just gives back what you entered, type "quit" to quit
Oh! I see. Yes, but it's not as straightforward as in many other languages, it seems. http://stackoverflow.com/questions/24112718/how-do-i-get-user-input-in-apples-swift-language-in-a-command-line-tool Are you just trying to set up something simple to mess around with swift, or do you specifically want a CLI? It might be a little less cumbersome just to make a GUI app. :1
Okay, thanks!
Wow. This is amazing... I can't believe you got it so much cleaner. Thanks, I'll be avidly using guard from now on. 
IBActions are actions that you set up via ctrl+drag from Interface Builder to your code, you don't actually use addTarget like you're doing. Check this tutorial: https://youtu.be/J2Z3-DLJRaE?t=1m23s EDIT: video link
I removed @IBAction and have func reveal(sender: UIButton) { self.flip() } still not working
 // code removed
Ok. This is the reason why it didn't work: I had an UIVIewController that called a custom controller for a view that used a UIView. The reveal function was in the last UIView, but needed to be in the UIViewController. func showButtonPressed(sender: AnyObject) { theController.theView.flip() } also I had to change self with nil showButton.addTarget(nil, action: "showButtonPressed:", forControlEvents: UIControlEvents.TouchUpInside) Thanks everyone!
Thanks for the great explanation. So would something like myChild?.needsToResetHeadForCheck == true be considered good or at least idiomatic style for Swift? 
[As promised](https://www.reddit.com/r/iOSProgramming/comments/3lqmbz/hacking_with_swift_all_36_projects_now_fully/) – have fun! :)
[Boom!](https://www.reddit.com/r/iOSProgramming/comments/3lqmbz/hacking_with_swift_all_36_projects_now_fully/) – one week would have been too easy ;)
I don't have an answer but I saw a post made about the same time as yours saying amazons web servers were down but are now back up. Any luck since then?
What happened when you tried it?
There are so many things that could possibly be wrong, my suggestion would be to share your project (or a copy with irrelevant/sensitive stuff removed) so that we can check both the storyboard and the delegate code to see if things are hooked up and implemented correctly.
override func tableView(tableView: UITableView?, cellForRowAtIndexPath indexPath: NSIndexPath?) -&gt; UITableViewCell? { let cell = tableView.dequeueReusableCellWithIdentifier("reuseIdentifier", forIndexPath: indexPath) as! resultsTable //then here you can just use the lables you created in the resultsTable cell class as: cell.labelName = "whatever" //and so on return cell } But you need to put this in a view controller that inherits from UITableViewDataSource and UITableViewDelegate which should be the view controller handling the table. 
I'd consider it acceptable. It does what it needs to do, efficiently and without ambiguity. If we're being picky though, I'd attack my own example. If you need to use a "where" clause, I think it's clearer to perform the unwrap at an actual optional, rather than chaining past the optional (using the ? operator) and therefore needing to unwrap at a name which is not usually optional. What I mean is that I think the following would be better: else if let mc = myChild where mc.needsToResetHeadForCheck Since "myChild" is the optional, perform the unwrap there. Then "mc.needsToResetHeadForCheck" is also more clearly a check of a boolean on the child (rather than the ugly bare "unwrappedBool" in my previous example).
Exactly. I have no idea why I can't get the libraries to compile. I don't even have a plan B for media storage, I'm hoping to find a solution to this soon.
Great advice, in this case it would probably be something like: class UserData { private var userPair: [(question:String, answer:String)] = [] public func addSecurityQuestion(question: String, answer: String) { let tuple = (question, answer) userPair.append(tuple) } } Really we are guessing at what you are really driving at though.
Messaging you on [**2015-09-22 06:14:08 UTC**](http://www.wolframalpha.com/input/?i=2015-09-22 06:14:08 UTC To Local Time) to remind you of [**this.**](https://www.reddit.com/r/swift/comments/3lqlv6/paging_and_preloading_swift/cv8s1xx) [**CLICK THIS LINK**](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/swift/comments/3lqlv6/paging_and_preloading_swift/cv8s1xx]%0A%0ARemindMe! 1 day) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! cv8s23q) _____ |[^([FAQs])](http://www.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^([Custom])](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^([Your Reminders])](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^([Feedback])](http://www.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^([Code])](https://github.com/SIlver--/remindmebot-reddit) |-|-|-|-|-|
try casting randomNum as a CGFloat &gt;var randomNum: CGFloat = CGFloat(arc4random_uniform(100))
Do you have the use frameworks flag in your podfile?
Running rm directly will not do shell expansion (i.e. will not turn "~/.Trash/*" into a list of full paths). You'll need to either run a shell and have it run rm, or do the expansion yourself.
thanks figured it out!
Thanks for doing this!
So I recently finished my CompSci degree, and my final year dissertation was written on a bioinformatics project that I decided to write in Swift. Even though I didn't know yet that the language was going to be open-sourced, I was dreaming that it would be, and that I will have written the first bioinformatics library for it. Whether or not that's actually the case, I really enjoyed the project, and I hope you find it useful. Any and all comments/questions/recommendations on the code/repo are welcome, I feel that it needs a bit more polish, and will gladly amend any shortcomings.
Thanks for update and info.
&gt; http://osxhackers.tk/Downloads/macpostfactor.html What is this going to allow me to do?
Yes, I would absolutely say that. However, I would suggest you make your progress public – as you complete the tutorials, put them on your own GitHub repository so you can point employers there and say, "I made this." Getting a foot in the door as an intern (hopefully paid?) isn't easy, but if you can point to projects you've produced – preferably live on the App Store, but code on GitHub is good too – then it helps you stand out from the pack a little more.
Awesome! I stopped part way into lesson 11 the other day, watched 2.5 Stanford lectures, and yesterday I updated to Xcode beta and started building my own first game on my own. I really owe it all to your tutorials for giving me the confidence I needed to just start hacking around on my own. In the past, following Big Nerd Ranch, I would just get confused and discouraged and give up. I'm sure part of this is because Swift is easier to understand, but I think a big part was your tutorials. As soon as I have some money to throw your way, I will! Meta: I'm an autodidact (high school/college drop out) PHP/SQL programmer, and tackling Swift/iOS is my first time doing "real programming".
Good question... That's a very good question. I'm gonna be an idiot if that's the problem...
The big question is, how can i stop the picture when its for examle 90 degrees from original? The image will only stop after 180 degrees
No, there's no nudging in the download – it's 100% DRM- and ad-free, and even includes the books as regular HTML + images so you can view them however you want. If you'd like a nudge, or if you want to contribute at least a little ad revenue while you read, why not try reading online? You can download the books whenever you want to.
You're welcome! Now: go and make something :D
Oh cool, I'll give that a blast. If its good I'll pay for the books.
I think I can stretch to that!
Thanks for doing this! Was following along with the Stanford course while waiting for your Swift 2 version and now that it's here, I'll jump back to where I left off with HWS. Will also be purchasing book today - thanks! (I made an account to let you know you have another happy fan!!) If you are ever in New Zealand, I owe you a couple of beers!
 var testString1 : String! = "" var testString2 : String! = "" is saying that the two test strings are "empty strings"... they are not "nil" Please don't be confused by what nil means. When something can be optional in Swift, that means it can point to "nothing". This is a safeguard because Swift handles nils differently than Objective-C. When both your labels are empty, that means the UILabels have the text property set to "" and not nil. They are just empty, but they point to something (an empty string). A better way to check would be to make sure that they aren't empty. Unless you're writing your UILabels in code (aka have them in nibs and storyboard with proper outlets), the text property will never be nil, it will usually be an empty string. Take a look at this - https://www.reddit.com/r/swift/comments/3goz6y/i_finished_my_first_app/cu0ds0x Let me know if you need any further help! 
We just need to be signed up for the newsletter to be eligible for the drawing? I just started with Swift about a month ago but this looks like a book I'll need to buy once I'm a bit more familiar with Swift. I really like that the source code is Swift 2.0.
Thank you! I think I got that. I used optional bindings to safely unwrap all the values: func calculateTip() { if let mealCost = labelMealCost.text, tipPercentage = labelTipPercentage.text, fMealCost = Float(mealCost), fTipPercentage = Float(tipPercentage) { totalTip = fMealCost * (fTipPercentage / 100) totalMealCost = fMealCost + totalTip } } I think that checking the .text properties in this case was just a precaution, but still.
Thanks!
Selector("increaseTimer:")
Wait what? Can you explain? Sorry I'm still new to coding. I don't understand. Edit : tried that as well didn't change anything
Make a GraphicContext, render the tableView into it, and print the resulting image. Better still - render the data in a PDF context, so it will print at the full resolution of the font
Point taken, can you give me an example of good documentation, I'll try to match it.
I spent eight years working as a full-time IT journalist, writing for a dozen different magazines and even editing one. My books include PHP in a Nutshell by O'Reilly and Ubuntu Unleashed by Pearson. The software I've written is used by banks, supermarkets, cinemas, universities and more, and has won awards more times than I can remember – heck, it's even been featured in Apple's own training courses. But because I teach people for free, that somehow makes my work less valuable? Not only is that nonsense, but I also think you're insulting the intelligence of /u/staires a little by effectively telling him he's being naive about the discussion.
Every project – *every single project* – starts by telling people they can download the complete Hacking with Swift series to read offline for free, without ads and without DRM. If you would not consider that free, I'd suggest you have an extremely warped definition.
Oh wow, I never thought about being able to make a pdf with the table data =). So much to learn still xD. Thank you
Some people use the various services that give you a mac in the cloud. You could VM an OS X install but it's probably going to give you a headache to develop on. If you're serious about it you'll eventually need an actual Mac. The bodge solutions will probably work fine while you try it out.
I use this site a lot, and love it, but it's better for practicing Swift than developing it.
Actually learning is my objective!
Initially iOS, but maybe OSX in the futures.
I'm surprised nobody mentioned it yet: [Swift will become open-source this year](https://developer.apple.com/swift/blog/?id=29)! Apple will be releasing it for Linux as well, it's just a matter of time until somebody makes it available on Windows :D Of course you can't develop any OS X/iOS apps with this, it's just the language (and it's standard library) that goes open-source, all the frameworks are still private.
Apple has promised to release iOS, OS X, and Linux versions of the Swift compiler as open source. It remains to be seen when they will do it (expected to be this year, according to their announcement at WWDC in June), and exactly what the license will be. But it appears that Linux could be an option for you in the future. You will probably still need a Mac (or access to one) to publish apps for iOS, watchOS, tvOS, and OS X through the App Store, though. If the cost of a Mac is a problem, consider buying through the refurbished section of the Apple store (usually saves about 15% and comes with the 12-mo warranty), or finding a decent one on Craigslist.
I like this one much more: https://github.com/MaxChen/awesome-swift-and-tutorial-resources Also check out the Awesome Swift section, where there are more lists like this
Time!
So it's quite possible it's a list of the worst books
Yup, for sure, just search the web and you'll find more info. Actually it's just [in Apple's Swift blog](https://developer.apple.com/swift/blog/?id=29)
When you know for sure you want to develop iOS or Mac apps, a Mac mini will be your cheapest point of entry ($500? $300 used?). Mac mini was my first Mac ever back in 2010, and I bought it just for Xcode.. but I liked using it so much I ended up completely switching from PC to Mac after about a year.
Thanks! Excuse my laziness, hadn't spotted this until now.
Just keep in mind that it will be much harder to learn without auto-completion.
It's really the language that matter imo! SInce the release of Swift last year I fell in love with the language, it's very nice! Also it can be used for server backends, general purpose, scripting (!), libraries can be ported to (or written in) Swift -&gt; all the Swiftness + compatibility!
I actually just published a video showing how to do exactly that. You can just write the test code, let it fail to compile, and then create the class / method you need to make it compile. Once it compiles, run the test expecting a failure, then go implement the method to make it pass. Here's the link to the video in case you're interested in watching the approach outlined above: http://roadfiresoftware.com/2015/09/how-to-refactor-your-swift-code-using-tdd/ Essentially, I consider "failure to compile" to be the same as a failed test. Update: I've also written a full article on my blog that explains the steps in further detail, with examples and working code. https://roadfiresoftware.com/2015/09/how-you-can-do-tdd-with-swift/
Someone asked how you can do TDD with a compiled language in another thread, so I thought I'd explain here, too. In short, my approach is this: 1. Write a failing test for the class that I want to exist (fails to compile) 2. Write the class that I want to exist (fixes the compiler error) 3. Write a failing test for the method that I want to exist (fails to compile) 4. Write the method that I want to exist, with an empty body or returning `nil`, `""`, `0`, `false`, etc. (fixes the compiler error) 5. Run the test expecting it to fail. Observe failure 6. Implement the method to make the test pass. Update: I've published an article on my blog explaining the steps above in much more detail, with examples. https://roadfiresoftware.com/2015/09/how-you-can-do-tdd-with-swift/
Ok cool thanks. I'm getting weird errors with it but I can only work on it a few minutes at a time while remoting into my macbook while at work so I'll update later with ultimate success or failure
You had it right, that's the return statement.
Segues, by definition, are transitions within a Storyboard. So, you are tied to a storyboard if you are going to use a segue. However, you can create a custom transition using a view controller transitioning delegate (UIViewControllerTransitioningDelegate) using push/pop/present/dismiss animations. Just create your own animating transition (UIViewControllerAnimatedTransitioning). Here is a very simple example: http://zappdesigntemplates.com/custom-uiviewcontroller-transition-ios-swift/ I recommend the WWDC videos as guidance as well when it comes to custom UIViewController animations.
Cant I just use image.xcassets like I did with the app icons?
It returns a String. For example: func returnName(name: String) -&gt; String { return name } This function with return any string you put in as a parameter. Try it in playground. 
Here's an example of when you could pass nil as a parameter (as in, whenever the parameter is an optional?) func saySomething(phrase: String, repetitions: Int?) { if let reps = repetitions { for i in 0..&lt; reps { print(phrase) } else { print(phrase) } } saySomething("Hello, World", repetitions: nil) ... on console: "Hello, World" saySomething("Hello, World", repetitions: 3) ... on console: "Hello, World" "Hello World" "Hello World"
Hacking With Swift dot com Also look for the Stanford iOS series on iTunes U. The Stanford lectures might be more what you're asking for.
Just wait for Swift on Linux. 
Alright, thank you. I guess one of the weaknesses of being new to it, is not really knowing the limitations.
Simon Allardice on Lynda if you have the cash. 
You'll *need* a Mac then, no doubt about it. When Swift does go open source, you'll be able to use it for scripting and console programs, but definitely not iOS or OS X development without a Mac. You need access to the SDKs to build for those platforms, which are only available on OS X, and are very unlikely to ever be released for anything else. I'd like to be surprised and Apple release the iOS SDK for Linux or something, but it seems like it's not gonna happen.
Check here: http://www.lynda.com/Swift-tutorials/iOS-App-Development-Swift-Essential-Training/185036-2.html Or Udemy Course
Found a solution and updated the post, just wanted to say thanks for sending me in the right direction.
Update: So I think a coin fell down now. I create a PHLocationService instance in my VC and call the method from that (of course really). This works. Sry I should have included that. I basically do: @IBAction func getLocation(sender: AnyObject) { PHLocationService().getCurrentLocation() } I want to separate code as much as possible by putting it into specific services. My next step is to send a completion block with the location call so I can retrieve the current address to my viewcontroller. I don't understand. Am I not setting a class level variable in my example? I am defining a locationManager in my class structure. Isn't that how you do it in Swift? Yeah I saw that SO thread also and while I understand now why it disappears, I don't know how to stop it from doing that. I tried a version of your example in my PHLocationService class but didn't alter the outcome.
Thank you for the reply! I figured out that adding the background image in the storyboard actually works okay, first time I tried it at different simulator sizes it bugged out, but after a restart of xcode it worked. So it was quite simple, but of course it's not super dynamic and there probably is a more advanced and better way to do it.
It's not hard to find someone with a mac and download the image...
Awesome thanks for the info!
You could try checking out /r/teamitup 
OK, but the very title of this post is "Swift Without a Mac" And it might be easy to obtain OS X, breaking the EULA in the process - that goes one step further than ripping it from your own Mac, stepping into copyright infringement territory.
Yes. To both questions. Also if you end up with a lot of keys you get what we call stringly typed code. It is error prone and you should consider building a model class. 
FYI you can call velocityInView: on a pan gesture recongnizer to make it feel more realistic
PM me please! I work at Mixpanel, let's chat. 
Thanks! I was actually looking for iOS/OS X jobs a couple years ago, and ended up making my way to an unrelated job that I'm pretty happy with.
Mine has examples and information for OS X. (I'm actually more of an OS X developer than an iOS developer, but the publisher understandably wanted at least *some* iOS examples.)