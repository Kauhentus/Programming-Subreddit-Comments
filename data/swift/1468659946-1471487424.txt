Just saw this in the Swift 3.0 info: An out-of-scope section details what Swift 3.0 won't be doing in the future; in particular, it won't be expanding out to C++ Interoperability, so C++ programmers won't be able to integrate their code in the same way as Objective-C designers. According to the document: "APIs. Interoperability with C++ libraries would enhance Swift's ability to work with existing libraries and APIs. However, C++ itself is a very complex language, and providing good interoperability with C++ is a significant undertaking that is out of scope for Swift 3.0." Looks like we're all still waiting and having to shoehorn things.
Okay, good to hear! I am hoping all is set before iOS 10's release. Normally I would contribute as well and aide in the update, but I am way too busy this time of year this release
Just because monads are a difficult concept that I can't explain in three sentences doesn't mean they're not a design pattern. Yes they're hard. But that doesn't mean they're not worthwhile. Monads really can't be explained in one go. Everyone comes to understand them differently, but it's always after spending quite a while reading. Just keep reading. I think they're a super valuable concept. And feel free to shoot me messages with any questions you have!
Thank you! Appreciate the help.
Lemme try anyway. I'm going to pretend Swift has higher kinded types, because the `Monad` protocol is impossible without them. protocol Monad&lt;T&gt; { static func pure&lt;T&gt;(a: T) -&gt; Self&lt;T&gt; func flatMap&lt;U&gt;(f: T -&gt; Self&lt;U&gt;) -&gt; Self&lt;U&gt; } -- In Haskell class Monad m where pure :: a -&gt; m a -- commonly named "return" flatMap :: m a -&gt; (a -&gt; m b) -&gt; m b -- commonly named &gt;&gt;= or "bind" This is all a Monad is. Clearly, this is useless, right? This alone doesn't explain much. What can I do with this monad thing? Let's look at a quick example of a function which uses monads in general. func sequence&lt;T, M: Monad&gt;(ms: [M&lt;T&gt;]) -&gt; M&lt;[T]&gt; { var ret = M.pure([]) for m in ms { ret = ret.flatMap { ts in m.flatMap { t in ts + [t] } } } return ret } -- In Haskell sequence :: Monad m =&gt; [m a] -&gt; m [a] sequence [] = pure [] sequence (m:ms) = do a &lt;- m as &lt;- sequence ms pure (a:as) This function is cool. It takes a list of any monad, and converts it into that monad over a list. Let's see what this does with a couple of different monads. The `Optional` monad in swift, for example, would be converted from a list of optional values, to an optional list. So if any of the values in the list of optionals is `nil`, the end result will be nil. Otherwise, you just get `Some([...])`, which having that list aggregated like that is pretty useful. And you got this functionality for free because `Optional` is a monad. Something else which forms a monad is state transformers. A common practice in functional programming is to write a function that takes an input state and produces both an output state along with a return value. func stateTransformer(state: State) -&gt; (ReturnType, State) { ... } With this model, you can treat `State` values as immutable, and thread it through your program as if it were a changing value. But it gets cumbersome to write the code to shuffle this state around, so using it as a monad helps a ton. struct State&lt;S, T&gt;: Monad&lt;T&gt; { let runState: S -&gt; (T, S) static func pure&lt;S, T&gt;(t: T) -&gt; State&lt;S, T&gt; { return State&lt;S, T&gt; { s in (t, s) } } func flatMap&lt;U&gt;(f: T -&gt; State&lt;S, U&gt;) -&gt; State&lt;S, U&gt; { return State&lt;S, U&gt; { s in let (t, newS) = self.runState(s) return f(t).runState(newS) } } } func get&lt;S, T&gt;() -&gt; State&lt;S, T&gt; { return State&lt;S, T&gt; { s in (s, s) } } func put&lt;S&gt;(s: S) -&gt; State&lt;S, ()) { return State&lt;S, ()&gt; { _ in ((), s) } } -- In Haskell data State s a = State { runState :: s -&gt; (a, s) } instance Monad (State s) where pure a = State (\s -&gt; (a, s)) flatMap self f = State (\s -&gt; let (a, newS) = runState self s in runState (f a) newS) get :: State s s get = State (\s -&gt; (s, s)) put :: s -&gt; State s () put s = State (\_ -&gt; ((), s)) Now `sequence` on State will take a list of stateful functions, and create one stateful function; calling each in the original list one after the other to thread state through them all, in order to create a list of their results. Plus, now we get to write stateful functions like this: stateful :: State String Int stateful = do str &lt;- get let len = length str put "" pure len A rather imperative style with state mutation, but in a pure and immutable fashion. Very cool! And only possible because stateful functions form a monad. Now, what I want to get at here is that the same stuff works for optionals and stateful functions, as well as any number of other monads. Monads aren't a solution to a particular problem. It's a design pattern for solving many problems. Abstractly, it's just a way of moving data through some kind of pipe line. What that pipeline does with the data is up to the concrete implementation. But if you ever have any kind of data pipeline, you can probably turn it into a monad. Java 8 `Stream`s are an example of this. Monads do a lot. They come in a lot of forms, and I suggest you research 
That `[0]` is almost just as bad as any `!`. Especially when we can just replace it with `.first`.
Unrelated: you can "hide" an app instead of minimizing all its windows one by one 
I'd recommend sticking with online tutorials, courses, examples, etc., until you know enough about how to get the information that you need that you don't need to ask this question. And stay curious. This is the most important part of being an excellent developer in my opinion. You should never be satisfied with just making something work. Getting it working is just scratching the surface. Now you have to ask questions like why does it work? Is this the best way to get it to work? Is this how a professional would do it? Is this code clean? Will this code make sense to other iOS developers (including myself in 6 months from now)?
I can't agree with this. If it's the case that this works, then why do we even have the array in the first place?
I'd be careful with the wording. I don't think anyone should necessarily go out of their way to avoid anything, including singletons. It's more like... you should be careful to use the right tool for the job. Many developers lazily jump straight toward a singleton as their first choice tool for a lot of problems that really don't require a singleton at all. Inexperienced devs frequently end up using a singleton over the right tool in numerous occasions.
Another useful feature (and the way I always seem to do what you're doing) is that above the code there's a detailed breakdown of what project, file and then method you're looking at curently. These are also drop down menus when clicked so I often click the part that says my currently open file and then scroll to an interface builder file. Also useful for quickly moving between certain methods/variables whatever.
The case might be that OP isn't very good at programming and doesn't know that every view has an array of subviews? I can't see any other logical reason for keeping an array of image views.
There are plenty of reasons, starting with you might have two sets of image views on your parent view, some of which you want to remove and others of which you do not wish to remove.
Where are you getting any of these numbers from exactly?
You have many options depending on your needs. For a truly dynamic background that takes into account many variables (time, sunset, precipitation type, temperature, etc), you'll want to use Obj-C or Swift. CoreAnimation might work but I would try SpriteKit instead - raindrops or snowflakes could be little gravity driven sprites. For less customized backgrounds, you could use GIFs as someone mentioned or even MP4 video where you can jump to the right part and loop continuously. If you think of the background like a video game, and don't mind spending time writing it, it could be pretty cool. 
Why do **all** of your class need the user's **ID**? EDIT: To be clear, presumably, you get something back on authentication that is going to need to send with all future requests, right? But aside from perhaps something like *username*, most of this stuff really can be contained to the networking layer, right? You only actually need it when you're going off to make a future network request and need to pass information in to the API again.
Most of the time, developers actually want single instances rather than singletons, in my opinion. Whether that single instance is a proper singleton pattern or not is a secondary, esoteric concern that most *application* developers should not be thinking about. One should almost always start with the concept of a class and determine whether it should be a singleton later on. On top of that advice, generally, yes I'll double-down: singletons are a bad pattern because it reduces the ability of dependency injection. For example, an API that *takes* an instance of NSFileManager rather than *goes out and gets* the singleton is a much more powerful API which allows me to safely be the delegate (and/or set up parameters local to my task) or subclass the requested class. It also causes a hard dependency with the class type. Even if your codebase were to access a single instance via another singleton and *not* inject (for example: AppDelegate.myManagerObject), this is still better than MyManagerClass.myManagerObject because you can change out myManagerObject's type without effectively impacting all of the code that uses it. If you only expose myManagerObject as a protocol/interface, it even reduces compilation dependency. However, I am interested in hearing opposing points and examples.
That's exactly why `IBOutletCollection` doesn't exist, right? Moreover, you're talking about adding a lot of complexity to that `for` loop, where a simple named array can easily identify what this association of image views represents better than anything else. And perhaps importantly, why should I iterate over ALL my parent view's subviews? Seems like a waste of time when I could just have an array to keep reference to the views I need. (Note that a `where` clause is not functionally different from putting the whole loop body in an `if`--it's nice syntactic sugar, but performance-wise, it's the same--we have to iterate over every subview.)
Store it in another type of class called a model. Follow the Singleton pattern. Then have your View Controllers get the data from there when they need it.
It's NSOutlineView, and it's pretty complicated to use.
It's not that complicated at all; it's simply an NSTableView with a few extra capabilities. [Here's a tutorial](https://www.raywenderlich.com/123463/nsoutlineview-os-x-tutorial) for the OP.
You have to supply a tree of objects. If you have a tree of non-similar things (like headers and content), it can get quite complicated to handle for newbies.
ty for your time! 1. the problem is that the i'm trying to present authenticationViewController on viewController whose is not in the window hierarchy. 2. i did it with the same result. 3. that code is not mine, it's a patern that i'm trying to implement but i suppose it's trying to authenticate the player in an asynchronous way, so your code still is still executing in the background. i think that's not important in this case, so i can remove it, but the problem is still there.
Use a delegate for data and a class for every view where u need that data
Thank you. I'm going to follow the tutorial (linked above) and see where I can get.
To be fair, Swift enums should greatly simplify the data structures needed (one case for branch nodes and one for leaf nodes). So far I've ever only used them in Objective C.
great framework .
Your best option in my opinion is [Firebase](https://firebase.google.com). It is incredibly easy to use, is pretty customizable, and (I believe) just recently got support for photo storage, and notifications. There may be other options, but this is what I use and I love it.
Why will not teach you swift if it's a swift playground?
it* (on the client that doesn't have edit)
Use parse open source with Heruko. It's free and you get all benefits of parse SDK in iOS. Plus the setup is just pressing a button. You can even setup parse dashboard and have a fancy GUI for it. 
I'd parse that data into predefined objects and make the class a singleton so then I'll be sure my data is the same across app life cycle and also it's accessible to all classes 
One of the differences I have is I have the it switched so that the isOnGem is in the else if.
You can look into Cocoapods or Carthage. I'd imagine that the package manger would be available with Swift 3, but that's a guess. IBM actually has a decent Swift Library site here: https://developer.ibm.com/swift/the-ibm-swift-package-catalog/
There is no problem that monads solve that doesn't already have an answer. Monads are just a way of organizing existing solutions such that they're more useful and easier to work with. It's really more a thing of "oh this solution forms a monad! That makes it better!" All I can tell you is to keep reading at it. There is no "ah ha" moment or specific example that will do it. The saying goes "Once you understand monads, you simultaneously lose the ability to explain them."
thank you! 
My coworker talked to the Apple engineers at wwdc asking the same question. It will probably take a while, not ready at release of swift3. But it's just guesstimations...
Will playgrounds be available for iPhones?
I would guess at Swift 3.0, and Xcode integration at 8.1 
Is it possible that your detail viewcontroller still has its own navigationcontroller (like it did with the splitviewcontroller). Each navigation hierarchy in your app only has one navigation conteoller. Instead the segue from the master viewcontroller has to go dieectly to your detail viewcontroller
Ok. I can try that but it should not make a difference, should it ?
The switched don't do anything. But to beat a level, you have to turn them all on. What I'm trying to do : move to a tile, if there is a gem, collect it. If there's a closed switch, toggle it. Then, move on. I can understand what's wrong in my code. :-(
Xcode might do all right, but Playgrounds will probably be very, very sluggish. Interface build may also be issues for you. And your compile times might be longer than what I am used to, but it's probably do-able.
Have you tried compiling your Swift project and see what the final size of your project is?
I can't guarantee there will be any difference at all. I've never used Houndify. But I have worked with static libraries which are extraordinarily large, but the parts that *actually* get linked into the final app are quite small.
Sure. You'd probably want to start with design patterns in general. This particular pattern is just a way of storing and retrieving data. It's not related to networking. https://www.raywenderlich.com/86477/introducing-ios-design-patterns-in-swift-part-1 https://sourcemaking.com/design_patterns/singleton To create a class following this design pattern is pretty simple. Make a new swift file called something like UserModel.swift. Then add the following code: class UserModel { static let instance = UserModel() var userId: String? } After you do that, you're set. Now to use it in any of your view controllers, call: UserModel.instance.userId = "foo" //stores data print(UserModel.instance.userId!) //prints data
Thanks! I think I finally get what to do now.
Did you write this? If so, I suggest maintaining your example throughout and focusing less on terminology and more on just creating an RxSwift example. I got bored reading through the first 10 definitions and by the time I got to the final implementation I didn't retain enough information to know what I was reading. 
This is a great post, and really opened my eyes to the power of enums in Swift. I've been planning to use them to represent my API endpoints, so this was a great intro and overview of everything they can do.
I don't see why people here are complaining about this not being exactly like Swift or too slow for you. The app target audience is for kids. 
This is obviously fixable and unintended behavior. Your rant against the Swift team is entirely unfounded.
Afaik the swift system does a lot more than for example Haskell so that's part of the problem. 
Hi Jozemite_Apps! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/4tbzds/preparing_an_update_to_my_game_whats_a_good/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Thats really important too, it's in the article I linked to if any of you are curious!
I used duckduckgo to search for 'swift xcode unit test', the first result was this: https://www.natashatherobot.com/swift-2-xcode-7-unit-testing-access/ I hope that is helpful. I have found many of the articles on that site to be concise and informative. Two other sites which may be helpful (not just about unit testing, but about Swift and iOS programming): http://ericasadun.com https://www.raywenderlich.com 
Yes I addressed that. Sub typing is literally the only thing Swift's type system can do that Haskell's can't. And as I said, a lot of people think this is a good thing (of course this is a matter of opinion.) Aside from that, Haskell's type system is very far ahead of Swift's. The type inference is better. The polymorphism is better. The virtual methods are better. There's a lot.
I am trying to take a screenshot of my own app!
This picture that appears on narwhal preview is just so beautiful! Such a great intro for enum type of Swift!
Does it support cocoapods?
Use the app "Swifty"
[r/swiftjobs](http://www.reddit.com/r/swiftjobs), not that it gets many posts.
Does the switch have to be toggled first? By using an if-else if you guarantee you can never do both actions; if you succeed on the gem you'll then drop right past the switch toggle.
Luckily this project is a re-write of an existing application to bring it up to modern standards (and a much better UI since the UI "designer" is no longer here and I have free reign) so it isn't mission critical since the old one still works. I'm able to take more time with it so I figured this will be the one I use to start writing pure Swift. 
Commenting to come back to this
On a tile, there is either nothing, or a switch, or a gem. Never both a gem and a switch. 
I apologize for the bad formatting, not sure how to get the obj-c code in a block. :(
Swift strings are not random access. This means that you can't just look at letter number six. That's the point of the ridiculously cumbersome API. It's supposed to scream "if you are doing any repetitive work, you need to rely on an alternative approach." In order to do string[string.startIndex.advancedBy(6)] It first starts at the start index and then increments it six times and then returns. So this call is actually equivalent to seven lines of code. Doing this for both strings and doing it string.chars.length times makes this function order n^(2). This, in my opinion, is a HUGE problem with Swift. It's API leads you to making stupid decisions on how to work with Strings unless you already know better. The Swift team is prioritizing theoretical purity over usability in this case. The fix would be to do something like let letters = Array(string) Which will put your word into an array which allows random access. 
Ironically using the while loop dropped performance to 14 seconds??! while ( i &lt; len/2 ) { if ( testString?[testString!.startIndex.advancedBy(i)] != testString?[testString!.endIndex.advancedBy(-i-1)] ) { return false } i = i + 1; }
Is it in the app store?
Any chance you could post a self-contained file with the benchmark?
I don't have an active account :/ got some costs coming my way so I can't upload it until October
Does this work for you ? : https://bitbucket.org/Rhapsodus/palindromeswifttest
It's philosophical I guess, but &gt;appropriate amount of time surely isn't accessing the nth character in a string in order n time. I don't know of a single other language that has this feature. Countless developers make mistakes such as OPs. However, they usually won't measure the time taken and thus won't notice the problem. Swift's implementation only proves useful when you are doing something like trying to take &gt;café and change it to &gt;cafeó by inserting an &gt;o at index 4. It certainly is correct when the accent over the 'e' was added as another character. But it's not practical to program with. Purity over practicality. 
Well I am still learning, but in other languages, passing strings by value is a significant slam due to the reconstruction of copying the parameter into a new string on the stack. The details of knowing what swift does are somewhat guess work, so I was trying to pass the string by reference just like in c, c++, c#, java, obj-c, to prevent this superfulous allocation. From what I read, swift implemented a string as a value type so I am trying to save the extra work of that step
Looking good! I've forked it and I should have a PR
Pulled the code from the repository you posted (where you switched to using an array). **Run with original code:** *5.46231496334076 seconds* **Run w/ removing inout and changing palindrome to a let:** *4.66971898078918 seconds* **Run w/ changing testString parameter to type [Character] and instantiating it only once and then calling isPalandrome() with it:** *0.720930993556976 seconds* It looks like creating the array 1 million times is where most of the cost was. You should try using a Unit Test with [measureBlock](https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/04-writing_tests.html#//apple_ref/doc/uid/TP40014132-CH4-SW8) instead of having to load the simulator to test. Also, in the "What's New in Swift" for WWDC 2016 I think they mentioned huge performance improvements for Strings, but you'd need to run the code with Xcode 8 beta/Swift 3 to find out. 
I didn't have an iOS device handy, so I copy-pasted it into a Mac project. Takes about 3s to run using Swift 3; not sure how much of that is faster CPU or Swift 3 improvements. Does seem like there's room for improvement here in the language though.
How much does an account cost these days?
$99
/r/iosprogramming
Basically playback streaming of files in services like Dropbox is what I'm striving for. Also I really liked SoundCloud's player in iOS and wanted to make something similar 😁
Gonna try this out as soon as I can. I've also been looking for an audiobook player that can import files easily. I use BTSync for audiobooks and all of the apps I've found in the app store only will import one mp3 at time and not an entire directory. Is there an easy way to add this functionality? I'm new to swift, but I'll give it a shot if I get pointed in the right direction.
Right now you can only upload files to your device via iTunes. I'm working on expanding this to include services like Dropbox. About BTSync, I've looked into its API [FAQ](https://www.getsync.com/api/FAQ/#g2) about the supported platforms, but it doesn't look like they support Android or iOS yet. I could be looking in the wrong place though. Let me know what you think (y)
The app I was using (Book Mower?) used to let me import files, but it looks like they changed the way it works. Now, I can use BTSync similarly to how Dropbox is used. I can go into BTSync, select a file and Share it with the Book Mower app. It looks like Book Mower supports zip files, so this is easier than folders with multiple files, but I'd love it if I can use your app since Book Mower is pretty much shit. ;)
Smart speed is something I definitely want to look into! (Creating a github issue as we speak). As to uploading audiobooks we might not need to host anything if we can do dropbox/box/etc integrations right. Thanks for the input 😁
If you can handle zip/compressed files, that would be fine, too!
Sounds good as an alternative in case the other route is blocked by the OS 👍 (issue on github updated)
You'll need both a isAGem and isOnClosedSwitch. And also isBlocked so that you turn when you can't go forward. 
No, that's backwards. The whole point of Swift's string implementation is that "string index 4" isn't meaningful. Index of *what*? Bytes (like C)? Codepoints (like Python)? UTF-16 code units (like Java)? Graphemes (like ICU's `\X`)? Also, even if you assume it's codepoints (or if it's UTF-16 code units and that you're on the BMP, or ...), whether inserting "o" at "index 4" changes "café" to "cafeó" or "caféo" depends entirely on what codepoints were used to represent the original string. Users don't know what codepoints are used to make up the graphemes on their screen, any more than they know what bytes are. I have no idea what my web browser is using for "é", for example: it could be U+00E9, or U+0065 U+0301, or maybe something else I haven't thought of. That's why Swift strings don't expose their contents as a (single) array, but rather various possible "views" into it. You'd only get the mistake of "café" -&gt; "cafeó" if you specifically asked for a codepoint view, and the assumption is that if you're asking for something so specific as a codepoint view, you know what you're doing. NSString, along with most other string implementations, do exhibit the problem you mention, by providing array access primarily by either UTF-16 code units, or Unicode codepoints. A user can't even know if "é" is one codepoint or not, so inserting an "o" at an an index is not well-defined. That's a problem. You just don't happen to notice it most of the time, probably because you assume that your text is all on the BMP. If so, then one day that will come back to bite you, just like the assumption that "Unicode characters are always 16 bits" has been biting people who started designing Unicode systems prior to 20 years ago when Unicode 2.0 was published.
It's pretty clearly described in the "[Strings and Characters](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html)" chapter of "The Swift Programming Language". &gt; As mentioned above, different characters can require different amounts of memory to store, so in order to determine which Character is at a particular position, you must iterate over each Unicode scalar from the start or end of that String. For this reason, Swift strings cannot be indexed by integer values. 
I'm aware of the argument and think it's all logically sound. My point is that it's HIGHLY unintuitive behavior. I did an iOS bootcamp with Swift and I had to explain it to the instructors as well as all my other classmates. (Granted, they were poor instructors, but it just goes to show that an individual can go as far as becoming an instructor and still not understand this concept.) I'm guessing that there are probably more instances of individuals producing code where they unknowingly iterate via O(n) index access repetitively than there are instances where an individual intentionally wants to deal with the differences between between U+00E9 and U+0065 U+0301. 
The dropbox would be awesome! I'm going to download this and check it out soon! Thank you for putting this source out there!
&gt; **Forced unwrapping**: *“This Optional type may not begin with a value, but by the time I use it here, I expect it to have a value, and beyond that, it absolutely needs to have a value in order for the core functionality of my program to be intact. I would expect my program to crash if there is no value, because there is no way to handle this situation gracefully.”* I don't think this justifies forced unwrapping. I think this justifies structuring your code such that you don't work with an optional. If you truly expect an error in the event that you can't procure a value, then I think it makes more sense to error with a custom call to `fatalError` or with `throws`. This makes the failure more explicit, serves a more useful error message, and explains the reason for failure to someone reading the code. Plus, if you use `throws`, then somewhere way up the stack can catch your error and recover with some sort of reset (this is more relevant in something like a web server, where one failed HTTP request shouldn't take the whole server down)
There seems to be some sort of trend in the Swift community to use a shitload of emojis in tutorials, blogposts etc., this really annoys me
Not really, it's just as he explains stuff he reference to objective-c and some object oriented design patterns and things like this. I would give it a try and just follow his instructions/Google stuff.
I'd like to hear Lattner chime in about forced unwrap because just looking at how short the syntax is it seems he expects it to be used often while the Swift community seems to think it should never ever ever be used. 
The problem with force unwrapping isn't necessarily the code that you've written today that includes a force unwrap. The problem with force unwrapping (and other unsafe practices) is the code as it is maintained a week, a month, a year from now. Take this over-simplified example. var something: Int? if something == nil { something = 0 } // line A someFunctionTakingNonOptional(something!) // line B As we've written these lines, we will never make it through `line A` with `something` having a `nil` value, and with `line B` immediately being the next line, we've guaranteed that `line B` is not `nil` so it's safe to force unwrap, right? Well, today it is. How about tomorrow when we find a bug or new to add a new feature and we modify the code to the following: var something: Int? if something == nil { something = 0 } // line A something = someFuncReturningOptional() // line C someFunctionTakingNonOptional(something!) // line B The biggest problem here is that as `something` is an optional, we're allow to assign to it things that could be `nil` without any sort of compiler warning or error, and now a clumsy maintainer has just introduced a bug whereby this code crashes in some condition. And it may not be easy to catch, because the conditions by which `someFuncReturningOptional()` returns `nil` may be exceptionally rare. And remember, the compiler will give us nothing to distinguish between assigning to `something` an optional versus a non-optional. No clue that we may potentially be assigning `nil` into it. And yes, maybe it would be easy to just bump `line A` down between `line C` and `line B`, but remember several things... * The maintainer isn't as good as you * The compiler doesn't give us a warning (it could though, if we weren't using optionals we're going to force unwrap) * This example is extremely simplified, and a real scenario might not be so simply from A, to C, to B. Let's consider the alternative where we are not okay with force-unwrapping, shall we? var aThing = something ?? 0 // line A someFunctionTakingNonOptional(aThing) // line B We've done more than just eliminate the force unwrap. We've built in a protection against `line C` that we looked at above. If some future maintainer comes along and tries inserting `line C` from above, they will be met with a compiler error. They will have to choose how to deal with the possibility of `someFuncReturningOptional()` actually returning `nil`. 
We welcome pull requests, and I'd be willing to discuss any &amp; all aspects of the guide here.
I never argued that forced unwrapping should be a common occurrence, or that it should excuse poor design, but merely that it should not be written off as a valid part of the Swift lexicon. One example I can think of where forced unwrapping is particularly well justified is when you're injecting a model object into a view controller on segue. The property holding the model is an optional, but you know that by the time it gets used (after the segue completes), it will always have a value. It doesn't make any sense, in terms of the code's implicit meaning, to use optional chaining for example, unless you literally mean "It doesn't matter whether this executes or not." I think that, in this case, you should definitely use forced unwrapping.
In a case like this, you might argue that the instance variable that must be initialized before the view controller is presented should actually be an implicitly unwrapped optional rather than a full optional. But even still, here, the solution is to have that variable be non-optional and set up an initializer for it (which means not using storyboards).
Sometimes there is no graceful way to handle an error. If your app is no longer carrying out its primary functionality, you may well expect it to have crashed. I know, I know, everybody wants to believe that crashing is the worst thing that can ever happen. But if you can't recover gracefully from it, and the user can't be meaningfully directed to do anything to fix it, then you should crash (and ideally not submit apps that crash for this reason in the first place).
 guard let unwrapped = optional else { fatalError("some self-documentation about this particular crash") } We can still crash. We can make our code a lot more self-documenting. We can make our crash reports and console logs a lot more obviously point to exactly where &amp; why we're getting this crash. And if you're like me, you implement `guard let` statements like this as early as possible (whereas force unwrapping is generally done at the last possible moment, when the value is actually needed). Or even better yet, if you're like me, you've written a custom `fatalError` function which also dumps the message into your log tool, so when you get logs from an app in the field, you can see everything leading up to the crash including the crash itself in your logs.
Because it doesn't have a value to begin with. One pattern I use all the time is injecting a model object from the current VC into a destination VC upon segue. In that case, the destination VC has an optional property to hold the model object. The VC doesn't initialize with a value in there, but I nevertheless intend--because I know that the only entry here is my segue, and that I'm passing in the model every time--for there to always be a value there by the time the model gets used. If there, for some reason, weren't a model, I'd want it to crash immediately, not propagate through a bunch of optional chains and if-let statements, directing me further away from the point where things went wrong.
&gt; surely isn't accessing the nth character in a string in order n time This is correct though. You can't access the nth character any faster because you don't know how many bytes are used by each preceding character. The "efficient" APIs give you code points or bytes; it's obviously trivial to access those quickly. But it also ignores what a "character" is from a user's perspective.
You can't *know* that you're passing the model every time though. I mean, you can do some self-analysis of your code today and know that every entry point to that code today is passing the model. But that doesn't protect you against tomorrow, next week, next month, or next year. Honestly, all the time I've spent thinking about this exact scenario all leads me to using xibs over storyboards where we can actually enforce the injections that we need. I've written on this topic in the past. https://metova.com/blog/dev/problem-implicitly-unwrapped-optionals/
Here's my version: func isPalindrome(string: String) -&gt; Bool { let characters = Array(string.characters) return characters == characters.reverse() } The test takes ~2.5 seconds in a release build on my machine. Not quite the performance of the obj-C version, but it's correct because it compares characeters instead of UTF16 codepoints. If you actually want to compare codepoints, use `let characters = Array(string.utf16)`; then it just takes ~0.5 seconds. Edit: just notices that performance optimisation with comparing only half of the characters... You could do it with let length = characters.count / 2 return characters[0..&lt;length] == characters.lazy.reverse()[0..&lt;length] But the performance improvement (of this specific implementation) is small and I wouldn't compromise readability for that.
Have you set *delegate* of `NSTokenField` to the Controller where you are accessing the value from.
And you'd initialize that model property from where? Hopefully you're not suggesting a smelly reference back to the AppDelegate.
I'm talking about a dependency injection scenario, where you're passing a reference to the model down the hierarchy as it's needed. In that case, you wouldn't have a ready reference to initialize from unless you were putting it in a single place (say, the AppDelegate) and jumping the hierarchy to grab a reference any old time you need it.
You're right. It wouldn't make sense to rewrite the whole thing. I've written on this specific subject in the past. https://metova.com/blog/dev/problem-implicitly-unwrapped-optionals/ But whether or not you should rewrite something to follow best practice is a 100% different conversation from what is best practice. Using implicitly unwrapped optionals is rarely (if ever) best practice (except IBOutlets in *some* cases, because Apple hasn't given us a better option that makes very much sense). It's simply a stop-gap band-aid that we need to cover a code base that hasn't been following best-practice that we don't have time or resources or value or interest in rewriting. Using force unwrapping falls in the same boat, although I'll make the case that it's **never** best practice. You *might* find yourself in some situations where it's the best you can do for now given this current code base, but even then I question its necessity (when you could, for example, be using `guard let` statements with far more helpful &amp; expressive `fatalError` messages).
A concrete example, please.
I saw quite recently a post here criticizing the use of a forced unwrap in one of Apple's own 2016 WWDC presentations. So this is clearly an allergy from which Apple doesn't suffer.
&gt; which means not using storyboards This. I get the impression that implicitly unwrapped optionals are basically just there to make storyboards not a colossal PITA to use from swift. Anecdotally, in a team of 6 writing mixed swift/obj-c for about half a year, every trailing '!' I've seen in our codebase is has been the lazy version, not the unrecoverable error version. They have also completely disappeared after the first few months with the language. With a little practice we've found ourselves actually using surprisingly few optionals, generally only when the nil state has semantic meaning, and off the top of my head I can't think of any place in the app where a nil optional would result in anything worse than an error alert or a "Sorry something went wrong" background in a table view...nothing that couldn't be handle by a pull-to-refresh. Of course if we were using storyboards I imagine it would be a different story.
I don't understand what you think you're "protecting" against in this scenario. The case in which you won't actually need any of that model code to execute in a heavily model-dependent VC?
I'm working on a team with 10 devs. We are using SwiftLint to completely disallow force-unwrapping. No one has an issue with it whatsoever. The level of Swift experience varies from "Been using it since day 1" to "Never used it before this project, which I've been on for 2 months now."
If nothing else, this *comment* isn't just a comment. As I explained previously, it shows up in the console. And as I also previously mentioned, in my code bases, we don't use `fatalError` directly, but instead a function I wrote which first logs that message and then calls fatal error with that message. The important part here is that it goes into our logger, which gets saved to a file, so when we're dealing with crashes that happen in the field while we're not hooked up to Xcode, we have a lot more information. These are cases that *should* never happen, and that generally means that if it **does** somehow happen, you're likely going to be completely baffled, so you need to maximize the information you can get out of that rare scenario if it ever does happen.
Well, that's kind of true. It's just an option I'm looking into. SQLite will actually best suit my use case.
I presented a dependency injection case, where the entry point to the destination VC is tightly delineated, and we know that by the time we use the injected model object, it will exist. You claimed that this situation is not adequately future-proofed. What works today may not work tomorrow. What I suggested, in response, is that it's probably absurd to try and future-proof something that is entirely unlikely to require it. In what situation will this destination VC, which is currently heavily dependent on model access, somehow suddenly no longer need the model? If that ever happened, it's far more likely that we'd be scrapping this VC altogether and replacing it with a different one. Like, I get the argument that you're making, and certainly there are plenty of cases where your argument wins the day, but I don't think it covers all cases. I've acknowledged that forced and implicit unwrapping are not one-size-fits-all solutions.
Well, you're right people who use storyboards exist, and will probably continue to exist. I'd recommend that you give xibs a shot in your next project. Give them one legitimate try, especially if you intend to be someone who comments on what is and isn't best practice. Outside of storyboards, I think force-unwrapping can pretty easily be avoided and the other options used instead (re: our discussion regarding `guard let`, and documenting intent). Within storyboards, we're really only talking about how to deal with using segues to set up your view controller. I've already linked an article with my feelings on the topic, and that article itself links to a Natasha the Robot article with a creative solution to this problem.
[This is what you want.](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSEvent_Class/index.html#//apple_ref/occ/clm/NSEvent/addGlobalMonitorForEventsMatchingMask:handler:)
Oh, for sure. I'm not trying to dismiss people who use xibs (or who set everything up in code, for that matter ... though I probably won't be following those people down their particular rabbit hole). Really, all I'm arguing is that there's valid meaning to the forced unwrap, and that the community should be more willing to interrogate their reasons before developing a taboo against it. Clearly you have a strong position here, and I would never try to take that away from you.
I absolutely agree that, if your situation calls for a strong logging system, it's probably best to cover all pertinent cases with it. You've got a good point there.
If you inherited storyboards I feel bad for you son. ;P Seriously, yea that's the one good reason I'm aware of to force unwrap/implicitly unwrap with abandon.
I will grant you that we shouldn't be developing a taboo against it. No one should be saying "Don't use force-unwrapping because nhgrif said so on reddit/SO/where ever". I've been writing Swift from day one. Optionals are probably my favorite language feature. It's something I've given *a lot* of thought since day one, and proper usage of optionals is very important to me.
I want to note that I think it's 100% legitimate for a development team to lay down strict policies like this in order to avoid any confusion about what something means in a code base. In this situation, one of your priorities has to be limiting the amount of rope people have to hang themselves, because their screw-ups will obviously not be limited in effect, but create problems for the whole project. So I guess you could say that I'm arguing more in abstract, academic terms here. I'm not trying to say what should or should not fly on a large team project.
I think my biggest problem with code like this is that the crash doesn't happen where the bug is. The crash happens at some later point in time. In this case, you've instantiated &amp; presented your `FirstViewController` from the app delegate, and then in `viewDidLoad` you are force-unwrapping. If the `model` property were `nil`, we'd crash in `viewDidLoad` and it'd be hard or potentially impossible, to trace down where the problem actually occurred. Anyone who has a reference to this `FirstViewController` can set it to `nil` (or it could have simply never been set at all in the first place). But this is a problem that only really happens when using storyboards, and I'll present to you some alternatives that I consider better than your example (that still allow for storyboards, but let's let it be known that my primary suggestion is still to opt for xibs rather than storyboards). First off, if the value never should be `nil`, and literally every time you use it, you're going to force-unwrap, then using an implicitly unwrapped optional is absolutely the correct approach. It removes clutter throughout your code base (all that force-unwrapping), and it's more self-documenting (anyone interacting with it should know that it's not supposed to be nil which works as a hint both for setting &amp; getting). But... one simple way this could be improved is with a `willSet` or `didSet`. Since the property is never supposed to be `nil`, we should use `willSet` or `didSet` to check whether or not it is being set to a `nil` value, and if it is, crash. The important part about doing this is that if the value is ever set to `nil` by anything anywhere for any reason, you're going to crash anyway (your force-unwrapping), so why not crash as early as possible, and crash in such a way that the *actual* offender is still in your stack trace? If you wait until you need to use the value, the offender that set the value to `nil` is long gone from your stack trace, and that potentially makes debugging very difficult. var model: Model! { didSet { if newValue == nil { fatalError("\(self.dynamicType).model is not allowed to hold nil!") } } } We could go a step further though. Our optional (or implicitly unwrapped optional) variable could be marked as `private`. We then build a computed property over top of it. The difference is, the computed property is not optional. So, something like this: private var _model: Model! var model: Model { get { return _model } set { _model = newValue } } Now, no one outside of *this* file can set the variable to `nil`. The only way it could be `nil` is if it weren't properly "initialized". And the protection against that can come in `viewDidLoad`. Something like this: private func verifyProperInitialization() { if _model == nil { let presenter = // some logic to determine how this was presented fatalError("\(self.dynamicType) presented by \(presenter) but not properly initialized.") } }
OK, so, Braintree is not part of the Swift programming language. So, right away, your question may not get good answers here in the Swift subreddit ;-). Now, I've never heard of braintree sdk so at this point I would use Google to search for Braintree SDK. And, I just did that and there looks to be some interesting links there. I'd probably add some more terms like Swift or ios or iphone or macos or iwatch or whatever (you didn't specify the platform, etc, so I'm just WAGging at this point). And I'd follow some links etc, and almost inevitably if these Braintree people really really want you to use their SDK, they will provide some docs and, even better, some sample code. Inevitably, when I have had to use a wacky SDK from some company (ie not something I happened upon on Github), there will be an example, and I can use that example to figure out what I want to do. Furthermore, there is usually some help forum or stuff like that where I can ask questions (if Braintree is something you have to pay for, you should really expect them to help you). So, Braintree would be my first port of call for help in using the Braintree SDK. 
OK, good. If you know how to proceed with that knowledge and get to the next step, then everything sounds good. OTOH, if you try some stuff and can't get past a particular blockage, do feel free to boil your difficulty down to the smallest code sample which will illustrate the problem (sometimes using a playground can help with this), and then post a question on it (either here or in /r/iOSProgramming or maybe StackOverflow or a similar site). There are plenty of helpful people in all those places who love to solve problems and help people get unstuck.
Thanks--I didn't realize there was an attribute (@noescape) that eliminates the need to use "self." in closures.
Yes, and that is more or less what I would consider the correct reading of a `?` to be. Of course, as I noted in my article, there are other ways to deal with optionals, and they all imply fundamentally different meanings. A `??` represents the notion that the nil-ness of this property doesn't matter, but that it's still important for the expression to resolve to a value no matter what. A `!` encompasses the meaning we've been discussing this entire time. The presence of an optional type, in and of itself, does not indicate some universal laissez-faire attitude toward whether this particular property has a value at a given time or not. What we're saying about a specific optional depends upon how we deal with it in any particular moment.
I appreciate the other examples, but I just want to highlight that my point in all of this has *never* been to say "Okay, this is a best practice" or "There is no other way to do X, Y, and Z." My point is only about reconsidering the value of the forced unwrap.
Regarding classes vs structs, there's a point that could be corrected: Swift structs implement copy-on-write, so you don't actually copy any memory until the new copy gets *mutated*. So if you're just passing them around (especially if they are constants) there will be no performance hit. In addition, structs don't have to worry about a number of other performance issues that classes have (like dynamic dispatch), so they will almost always be faster.
&gt; I don't think an optional must represent a value that is "okay" to be nil *at any old time*. This view is wrong. You are exposing instance variables as optional, but if another class sets them `nil`, code in your class is going to crash. But the person who set it as `nil` hasn't really done anything wrong. The fact that it was allowed to be set `nil` is the problem. Look, this isn't even a discussion about optionals, really. This is a question about proper encapsulation of data and using proper types. Consider the following: class Person { // the persons age, in years, should always be an integer var age: String // the rest of the Person class implementation } And then we've got some code that makes assumptions about that `age` string being a valid integer, so we do something like this... let difference = Int(person1.age)! - Int(person2.age)! I mean, that'll work in best case scenario, right? Assuming we're following the guide line set forth by the comment. But it's extraordinarily fragile, right? And why is it extraordinarily fragile? Because we're using the wrong data type. We're using a `String` when we should clearly be using an `Int`. Something somewhere made using the `String` more convenient, so we picked that and hoped for the best. But in doing so, we've added an unknown hidden amount of future overhead. Any time a developer sits and wonders why this is a `String` instead of an `Int`, that's time that you killed by using the wrong type in the first place. Any time someone assigns invalid strings into (empty strings, strings with decimal parts, potentially negative numbers, strings in hex or binary, strings with outright invalid data, and then have to spend time debugging the crash, that's time you killed by using the wrong type in the first place. Using an optional when you don't mean to accept `nil` values assigned into it is equivalently wrong, and if an outside user can assign values in to your instance that you know ahead of time are invalid, then you have not properly incapsulated your data. And waiting until you use the bad data to throw up a flag (which is what you're doing by relying so heavily on force-unwrapping) is the worst solution to dealing with the bad data, as it makes it difficult if not impossible to trace where the bad data came from in the first place. And the difference between `Int` and `Int?` shouldn't be thought of as somehow different than the difference between `Int` and `String`. They're completely different types. Remember, `Int?` is just syntactic sugar for `Optional&lt;Int&gt;`. It's a generic struct. `Int` is no more the same-ish as `Int?` than it is the same-ish as `[Int]` (which is just `Array&lt;Int&gt;`). We would not create an `[Int]` property and say it is never allowed to have anything other than exactly one element. Why would we create an `Int?` property and say it is not allowed to hold `nil`?
If you want to make a pull request enhancing the explanation, we'll gladly review and consider accepting it in.
As I've noted several times, it was never my intention to establish a set of best practices. I'm not sure why you still insist on acting as though that was my goal.
100% agree. Typealias grew from languages that didn't have the ability to clearly name the arguments the way Swift does. Typeliases makes code much harder to read when you have to search through the code to find what the hell this argument type is. 
Are you suggesting that in all of your other storyboard code, you don't directly expose optional properties which should never be set to nil and that you are force unwrapping, yet anything with a reference to that instance could just set it `nil`?
The typealias should be sufficiently named such that you don't have to go searching through the code to find out what it is. The only time you would need to do that is if it's extraordinarily important to you whether it's an `Int` or `Double`, for example. But even then, you should only ever need to look once, you're a command+click away from that information, and it's much, much better than having to dive into documentation for multiple methods to determine the unit of measure or other things about the argument that the type it self can and should convey. Yes, named arguments can help immensely, but argument names should convey the purpose of the argument, not what it is.
Well, I'm seriously not trying to be funny or smart-arse here, but that *LITERALLY* means that the UICollectionView must be initialised with a non-nil layout parameter. Are you creating the collection view in a xib/storyboard or code? If xib/storyboard, inspect the collection view, find where the layout is and choose Flow. If you are doing it in code, then after you create the collection view, set the collectionViewLayout property to an instance of UICollectionViewFlowLayout. I suggest you either find some sample code which has a collection view, or follow a collection view tutorial, because setting the layout is just the first hurdle you are going to need to jump in getting the collection view going.
&gt; yet anything with a reference to that instance could just set it nil? Because this would just happen at random? I don't get what you're trying to argue here. Either way, none of this has anything to do with my point, which is that forced unwrapping has a valid and useful meaning, has been unduly categorized as taboo by much of the community, and that our aversion to it often causes us to suggest legitimately bad practices (such as using optional chaining when non-execution isn't intended to be a valid outcome). I respect the fact that you employ alternatives to forced unwrapping, and I acknowledge the value of these alternatives, but that's sort of beside the point.
I do think we should think about forced-unwrapping sensibly. I don't agree that you've yet to come up with a sufficient example for its good use over any &amp; all of the alternatives. And it seems like you might not understand encapsulation (based on your question about it happening at random... you seem to not be understanding the point).
Glad you asked! In PlayerViewController there's no navigation bar present, so basically it's there to denote that there's something there on that side for user interaction. I got that idea from the SoundCloud app in iOS which has something similar but horizontal not vertical EDIT I'm no designer so I had to take inspiration on things I've used that I like. That being said, all feedback and suggestions are welcomed 👍
You're trying to make the point that we should be okay using forced-unwrapping sometimes, right? Where I'm lost is when you think those times are okay. We talk about scenarios where you might use it, I give you a handful of examples that all serve as better options than your example, and your counterpoint is always that you're not trying to make an argument for best practice. Then what are you trying to do? I guess I just don't get it. Like, we could also always use `Double` instead of ever using `Int`, and just cast to `Int` when we need to use a function that requires `Int`. I'm not saying it's best practice, but it's a thing we can do.
Ah got it. It's not readily apparent though, but a good idea nonetheless. Great job with the app. 
Well, my decision maker would be to point to GCD since they just redesigned it. dispatch_time_t, a typealias, was refactored to be an enum DispatchTimeInterval with cases of .seconds, .milliseconds, etc with associated values converting to the necessary int. I think it's safe to assume that future usage of such values would be in structs or enums and not typealias given that their most recent release used enums.
&gt; Perhaps the single most defining feature of Swift is its overall focus on safety. I'm not sure I agree with this premise. There are much safer languages. There are languages where it's essentially impossible to crash the runtime, for example. I certainly find myself having to be rather cautious in Swift (and optional unwrapping is a big part of that, but not the only part). I would say the defining feature of Swift is how it tries to strike a balance between null/type-safety, performance, usability, and compatibility. The extent to which each of these attributes is valuable to programmers, and the extent to which they've succeeded at maintaining this balance, remains a matter of opinion, of course.
The core point of this part of the guide remains though, because the main point is... don't use an unhelpful undescriptive type. Don't use `Double` when you're dealing with a unit of measure. Using a typealias with a documented unit of measure is better than using a primitive type. Using an `enum` or a `struct` would be better than using the typealias (but also requires a little bit more overhead).
&gt; This style guide is written primarily with the development of iOS and OS X applications **using the Xcode IDE** in mind. As such, many of the guidelines found within are based around consistency with Apple's frameworks &amp; **Xcode's default preferences**. You have to go out of your way to insert tab characters. The value of tabs over spaces is that you tap just once and it indents it an appropriate space, right? With Xcode and its defaults, hitting the tab key inserts four space characters. So... whether you prefer hitting the space bar or hitting the tab key, Xcode will insert the spaces for you (unless you go out of your way to disable this).
Ah, okay. Didn't realise this was the case. Makes sense.
I get what you're saying, I just don't agree. func travel(miles: Double) { //do stuff } is more clear than typealias Miles = Double func travel(distance: Miles) { //do stuff } in my eyes. You shouldn't run into problems where you don't know the units as the variable you use as the argument should be properly labelled as well. IE `let milesToHome = 300` and `travel(miles: milesToHome)`. A situation that gets muddier due to multiple types of different measurements deserves to be a struct or enum implementation and not multiple typealiases. I don't see a single example of Apple using typealiases in this manner in new code. CoreLocation would very likely be rewritten without typeliases if it's ever swiftified.
What is "it"? What's only true if you implement manually?
I agree with this article. A force-unwrap, and the respective crash upon nil, is a perfectly valid and self-documenting way to express an expectation about state. Consider values expressed in a JSON string for which there are say, five or so valid values. String enumerations are perfect for this, but the initializer for that enumeration is failable. Should we receive a new, unexpected rawValue, then the data is invalid, and the program may be in an unrecoverable or inconsistent state. A crash would be a perfectly reasonable way to express that.
Yes, PDF is way better. As new devices with higher resolution screens come out, you won't have to update your assets. They are vector, so you can make them as big as you want without losing quality. At compile time, PNGs are generated from the PDFs and the base size (1x) is determined by your smallest intrinsic size for that asset in your storyboard. 
Note that vector images can't be too complex, or they'll take too long to render and be even bigger than PNGs.
Soooo...why would you write an article recommending something that isn't the best practice? To be honest, I'm 100% on the same side as nhgrif on this topic (and I'm currently working on a project where I'm the sole developer--not a team of 10 and I don't think team size/experience matters). Even though I completely disagree with you on your stance on implicitly unwrapped optionals, I do think you present an EXTREMELY important point in an edit on your article: &gt; Another point I’m trying to make is that we sometimes suggest bad practices (for example, that people use optional chaining even if they don’t intend for non-execution to be a valid outcome) merely because they won’t directly cause a crash, and that this is a deeper ramification of putting the meaning of our code on the back burner, in favor of a safety-first mentality. This is huge. This is one of the reasons why Swift is such a great language--it makes us pay attention to this. Your point here reminds me of one of my biggest pet peeves which is when someone recommends to "always use a weak reference to 'self' (usually a view controller) inside of closures in order to avoid retain cycles (just to be super, super safe)". Of course, this mindset of "just to be safe" can lead to the same types of problems you point out in your quote above. So, you've basically supported one of the things I hate and helped me argue against one of the things I hate at the same time. However, I would argue that a developer who avoids the use of forced unwrapping and implicitly unwrapped optionals will be presented with the question of "what should happen if this is nil" more often than a developer who force unwraps or uses implicitly unwrapped optionals. A "!" has no "else" clause to contemplate.
I was thinkin of something like UnsafePointer&lt;Int&gt; Maybe UnsafeUnwrapped&lt;Type&gt; ?
You can also add that a PDF which contains a bitmap image is in no way better than a PNG. 
I use them for icons, it's super nice feature, and the PDFs load fast, scale nicely. for other things bigger than a button I have to use PNGs
Woah woah woah!!!! How do I get Xcode to accept PDF icons? How does this all work?
in XCAssets, and set the type to vector based.
K. I'll try in a few hours. Thanks 
I absolutely agree that we should always prefer non-optional types. I'm not trying to argue that everything should be a force/implicitly unwrapped optional. That would be absurd.
My article doesn't "recommend" the usage of forced unwrapping within some framework of "best practices." It merely points out the pitfalls of treating forced unwrapping as a taboo within the community. I personally think that forced unwrapping should be fairly rare. The larger point, however, is that we should say, in our code, what we really mean, and not twist/contort our meaning just to sidestep a language feature that's deemed "forbidden."
Have you seen BitBar?
Recompiling is a lot more convenient than having to load up your original files and create a new one for the new size though. 
ok thx
You should have REST API in your RoR app, which then can be used by iOS app.
ok cool thanks!!
Well, the Xcode comment parser breaks if you breathe on it too hard. I've got half a dozen radars open for "fix the comment parser for case ___". I'd never put tab characters in a source file, but I also wouldn't say that something should be avoided entirely just because Xcode's parser barfs on it. 
Swift is not ready yet. Go ruby (do not know it myself. But it is very common these days)
It depends what you're trying to do. If it's front-end rendering stuff, try React – it's a pretty remarkable way to build software, and could teach UIKit a thing or two. [Here's a link to my free book teaching React](http://www.hackingwithreact.com).
Thanks for that insightful reply! So without knowing Objective-C, do you imagine running into any walls making typical CRUD-type apps, data/charting apps, or simple games? 
You'll be fine without Obj-C.
October or later as your release date: Swift 3.
You are fundamentally correct. I'm going to check out reflex to see what's up but my haskell is not great. That being said, I think that at the end of the day you cannot get rid of events on the OS/HW level (or how does reflex do that)? How would you work with a mouse click (like the electrical signal generated by the mouse that generates the OS interrupt) in reflex? 
Again, you kind of have to go out of your way to insert tab characters if you are using Xcode (and this guide states at the top it's written for people who are using Xcode). Hitting the tab key in Xcode inserts space characters.
Yea pretty much.
This is pretty far down in the Turing tar-pit. When I see somebody use scare-quotes around "real world" programming, usually I just turn tail and run. You could also base all programming on "Subtract and Branch if Not equal to Zero", or NOR gates, or a million other concepts, but that doesn't mean these are a useful way to think about writing software. There's "minimum number of symbols needed to represent computation", and there's "something useful that lets me build software and doesn't make me want to poke my eyes out". For those of us not named Chuck Moore, those tend to be pretty far apart.
SpriteKit/SceneKit will most likely be Apple-only frameworks.
Are you aware of any team/person working to make this? I'd love to help with an open source project.
After i finished the "Introduction to Swift" chapter and 2 projects from Hacking with Swift , i felt also lost i will be honest the "Introduction to Swift" was really helpful and make me understanded the basic very well but the first two projects was not =( and now i finished first chapter from "iOS Apprentice" book it's really great book and make everything easy to understand and easy to follow with a lot of pictures that was really helpful ! and the approach the author use is "divided and conquered approach" make the big problem smaller and then joined them is the best approach to make the readers understand things . so i decided to finish the "iOS Apprentice" then return back to "Hacking with Swift" in that way will make "Hacking with Swift" helpful for me , because more practice will make me understand iOS and swift very well
The only cheat sheet I regurarly need is http://fuckingswiftblocksyntax.com
I needed the Objective-C equivalent of that (and still do on occasion), but I've never found myself needing help with Swift's closure syntax. It's much more clear &amp; straight-foward I find.
You are talking about classes though, the original point was about structs?
Did you try googling for "swift bigint"? There's more than a couple options.
Swift uses the ObjC runtime, so in many ways they're very similar. Even a Swift app will use at least one ObjC library, so you'll need to know how to read ObjC even if you're not writing it. Swift should be able to call any ObjC API, but the converse is not true. Swift has new features that can't be exported to ObjC. You can always mix the two languages in one program, though, so it shouldn't be a deal-breaker either way. For the moment, you can get away with picking your favorite. But Steve Jobs' favorite quote seems to have been "skate where the puck is going", and Apple has a way of strongly nudging developers in the direction they want to go. I think it's likely we'll see Swift-only APIs in the near future. I don't think anyone realized how fast Carbon would be killed, either. (Or PowerPC.) As Paul Graham said, "At any given time, you're probably happiest on the main branches of an evolutionary tree. Even when there were still plenty of Neanderthals, it must have sucked to be one." Apple is making it clear they're setting up Swift to be the language for all development on all Apple systems. You don't want to be ramping up on (only) ObjC when the music stops. 
Thanks! Would you recommend doing the online tutorials or getting the book? Which would teach more skills that I'd use in the real world?
Structs can't be made copy-on-write because they are always copy. What you usually do is make a class and copy it when it is mutated, hence copy on write.
Hey, it's the author here :) I've mainly written this tutorial to learn and to explain to myself RxSwift in every little detail. The second point is that this tutorial is for total dummies, that's why I try to explain everything thoroughly and sometimes even repeat stuff. There's a lot of examples on the internet, but not a lot of tutorials from the ground up. Thanks for the criticism! I rearranged it a little and added a complete snippet to keep the basic example a little bit more concrete.
I'd recommend buying the book. In fact, you should buy all the books. Note: I'm the author; I'm a bit biased :)
What does RFC 7159 have to do with anything? I think both of these wrappers use `NSJSONSerialization` under the hood...
`"Hello World"` is not valid JSON. If you check the content type header before parsing a response, it will tell you if it is JSON or just plain text. And if the content type is incorrect, it shouldn't be your problem 😜 Edit: standalone JSON values are now valid JSON responses 🙃
Yes but i think youre wrong. http://stackoverflow.com/a/25415850 As long as the content type is set to json, returning a single value should be considered valid JSON. 
How would you handle running a python script with external dependencies? to expand: I've got a similar problem as OP, but I'd like to run my python script in ios. 
First, you'll need to compile and embed a python interpreter in your iOS binary. I don't believe this is trivial. You will then probably want to use the C API to initialise and call your Python interpreter. Rewriting your Python code for iOS, or running it on a server, is probably going to be a better idea.
check this out: https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html Naturally the whole thing is interesting, but your particular question is answered if you scroll down a bit to the section titled *Initialization Parameters*.
"Othewise"
I did read something about the methods related to the cell appearing, disappearing... but had no idea that they could be of any help. Will search more on this, thank you!
I will just tell you what worked for me. Tried learning from books but didn't get much out of that. ( recommend apples swift book though) . The best source for me was Rob Percival 's courses on Udemy . I took his iOS 8 and now I'm taking his iOS 9 curses. Really easy to follow and there is a great community around them to help you with any questions . 
Definitely also link to part 1 at the start of the article. Now, I don't know where to find it.
The closure being passed to `-[NSURLSession dataTaskWithRequest: completionHandler:]` (the one where you enable the record button) isn't necessarily run on the main thread. This is a problem because &gt; For the most part, use UIKit classes only from your app’s main thread. This is particularly true for classes derived from UIResponder or that involve manipulating your app’s user interface in any way. — [UIKit Reference](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKit_Framework/) You can use [`dispatch_async()`](https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/#//apple_ref/c/func/dispatch_async) to run a closure on the main queue. It takes two arguments: - a reference to the main queue. Pass in a call to `dispatch_get_main_queue()` for this argument - a closure containing the code you want to run. Enable the record button inside this closure.
Ahh. Thanks. I'll give this a go tomorrow. 
I have been using Treehouse to learn iOS for the past 6 months. I did their iOS Development in Swift 2 track first and I found it very helpful, I really enjoy their teaching style and the pace. I found it very helpful to always read the official Apple Documentation that they link to with every course. I also found their Coding Challenges and Quiz to be very useful also. I recently started their iOS Development TechDegree last month and I am really enjoying the projects. They are very challenging but also very fun to complete and nice to build up a GitHub portfolio full of swift code and apps you have built. I would suggest signing up for the $199/month program which gets you access to their official Slack channel and also reviews of your projects which are a great resource to talk with the other students and the instructors. I have completed the first 3 projects so far and I hope to be finished by the end of this year. I also use other resources like RayWenderlich.com tutorials and Udemy courses in learning Swift and iOS development. Udacity is also another place to look that is similar to Treehouse, I ended up liking the instructors on Treehouse more and the content they provide, lots of other useful courses too on Git, Web Development and Python also. 
Yes of course! (Assuming I understood what 'constructor method' was) Try something like this: // Your class class Person{ // Your class attributes/properties/variables var name: String! var age: Int! // Custom constructor method init(name: String, age: Int){ self.name = name self.age = age } } // How to call it: let me = Person(name: "OP", age: 19) print(me.name) // Prints 'OP' // You can go on to change the variables in the object later me.age = 20
Oh thank you so much!
If you don't mind how slow the speaker talks, it's not bad. It can be really slow though so I would say they're good if you are able to retain information that has taken a long time to get delivered. For me, I unfortunately suffer from ADHD so the slow pace of the videos actually made it very difficult for me to retain the information. (Usually 5~10 minutes after the video ended, I forgot everything they said) However, what I like about TreeHouse is that you track your results and I believe that makes it a lot easier to learn because you have goals to complete. 
It's execllent. 
Why is the only way to dismiss the keyboard through touchesBegan? Why not upon the button press or a gesture recognizer? Also, try to keep these general iOS questions in r/iosprogramming :)
Thank you for the advice. I will look into using a gesture recognizer. Sorry about using the wrong subreddit. I was unaware of the existance of /r/iOSProgramming 
Thanks, It really motivates me to continue learning 
the last option in the drop down should do it. does it not work for you?
+1 for Treehouse Techdegree and Ray Wenderlich books! Both are amazingly helpful.
I had a very similar issue with libswiftCore tonight, but instead of the error happening while I was archiving my project, it happened when I was trying to build to debug on a physical iOS device. The solution to it was to go into the Build Settings, and then change the flag EMBEDDED_CONTENT_CONTAINS_SWIFT from NO to YES. Not sure why that flag is disabled by default for Swift apps or exactly what it does, but it solved my issue for me. After changing the flag, try cleaning the project too just in case. You can look at [this StackOverflow page](http://stackoverflow.com/questions/26024100/dyld-library-not-loaded-rpath-libswiftcore-dylib) for more info on how I solved my issue. Hope that helps you! :)
What do you think you need an iPad for? Playgrounds won't display an app or anything. They're just for messing around with syntax, functions, algorithms, etc. You simply get to see the values you're checking for.
That Worked! Thank you so much I was really struggling with this!
Yea, I thought it would be cool to do in IOS too, but at that point, I think it would be easier in the long run to rewrite the code into Swift.
I thought it would be good to actually see it in its native habitat as well as coding it, like I said I don't know a whole lot about it but really want to learn it. I know HTML, CSS, PHP, &amp; Javascript...and it seems like this is something I should really learn if I'm going to stay up to snuff with coding.
&gt; How to increment a counter, in one line? Sure, I can do that: &gt; counter += 1 Not the same. You are not executing that in response to user input. &gt; All systems have an event loop, but systems programming is not inherently about event loops, HW communicates with the OS using an "event loop". Async file system APIs work with event loops even more directly. &gt; Your memory manager? Well, the whole quote is that systems is all about event loops or caching so a MM is fundamentally caching. But a memory manager does deal with interrupts, which means it deals with event loops. &gt; So this paradigm "solves" the part of systems programming that we can already do just fine, We actually don't do it just fine. Do you know how fundamentally say FB processes requests? (hint, there's a lot of event loops and caching). &gt; doesn't help at all with the part that we're having actual problems with. Idk who we is but the fact that you might not perceive it as a problem doesn't really mean that "we" don't perceive it as a problem. &gt; INC EAX will never crash You will never write only that single line of code. At least, you will write it in the context of an assembly program and boy do those crash. &gt; Your 30 lines of code can. Yes, things can crash. Assembly can too. &gt; You're trading something for something else, which is what engineering always does, but AFAICT you're making it worse on the axis I care most about. Just about anyone who embraced reactive isn't going back. 
While I will add to those that think Hudson has some great resources it really does depend on your own learning style. I started learning Swift just under 2 years ago and really it took a number of different resources to really bring it all together for me, along with building a lot of apps (good or not) along the way. If you are looking for a good list of resources available then check out http://manitoba.ninja/introduction-and-picking-your-resources/ along with the subsections in the Resource Guide category. This is a list I have put together of what are the best resources I have used and from other peoples strong recommendations. I am sure there will be some combination of choices here that will work out right for you!
Why not use this? https://github.com/Flipboard/FLAnimatedImage
Darn. I've searched for a python lib that plays m4a"s or cafs but haven't found anything yet 
Image = UIImage(named: "FileName.png") Think that's what you would need 
I’d say so. I personally started learning ObjC last year with the now 3 year old Stanford course on developing apps for iOS 7 by Paul Hegarty, found [here](https://itun.es/us/gCOUR) (it was brilliantly informative compared to other video courses I tried). I’ve since segued into learning Swift for iOS 9 / 10 and everything in that ObjC course has remained relevant and helpful. Best of luck!
On mobile now, but I think you're looking for: UIImage(contentsOfFile:"/folderName/fileName.png")
 protocol SomeProtocol {} struct X: SomeProtocol {} struct Y: SomeProtocol {} var foo: SomeProtocol = X() foo = y() Works just fine for me. You may be running into issues with associated types or `Self` methods? When a protocol has an associated type, then two different implementations of that protocol are going to have incompatible types. Take this for example: protocol Container { typealias ContainerElement func getAllElements() -&gt; [ContainerElement] } extension Array: Container { typealias ContainerElement = Element func getAllElements() -&gt; [Element] { return self } } extension Optional: Container { typealias ContainerElement = Wrapped func getAllElements() -&gt; Wrapped { if let x = self then { return [x] } else { return [] } } } Here we represent optionals and arrays under a common protocol for containers. They each have an associated type for the values they contain. var foo: [Container] = [Optional.Some(4), ["a", "b"]] This declaration does not compile, because Swift can't make much sense of it. The element types differ, but the `[Container]` type alone doesn't reflect that. So when you use elements from this array, Swift can't have any idea what the `ContainerElement` type is supposed to be for that particular element. 
Noted, thanks!
I could see something like this being used in a visualization of some kind. Say you have a chart of historical data, and you want to scrub through the points. Being able to zoom in on a particularly interesting section and sweeping through it sounds like a good practical application of this control. But if it's just to get at a range of numbers, I agree that typing is probably a better solution
There's a great [video talk](https://www.youtube.com/watch?v=XWoNjiSPqI8) that explains how "Protocols with Associated Types" ("Protocols with Associated Pain") are basically completely different from "protocols" (in Objective-C, or ordinary Swift protocols without associated types), and if you assume they work like protocols, then much of the documentation is a complete lie.
Is there any more context? What kind of object is `drop`? Are you using some sort of library... and does that library have some sort of documentation?
fair enough, just thought it would look really sexy with that granulation popping in ;-)
Yes indeed. The [kronik/ScalePicker](https://github.com/kronik/ScalePicker) has nice looking ticks. Something like this would be nice ;-)
Great suggestion. Thank you
Right click on the class name for the vc and select refactor. 
Thank you! I knew there was an easy way and I couldn't find it on Google for the life of me. That being said sadly it looks like it only works for Objective-C and C code according to the error I just got :/ Maybe in the beta of Xcode 8 it'll work. 
or, slight variation of that to make it similar to map: zoom in 10x on double-tap, out 10x on double-2finger-tap
The double-2finger-tap is very useful.
While this is probably not optimal for it, I've had to make creative ways to input for educational software before. (Kids are bad at typing, especially if you're on an iPad where there's no completely numeric keyboard)
I'm wondering how it would work if one combined this with how timeline scrubbing works for the media player. Basically, moving your finger outside the slider while dragging increases the precision.
I haven't been following closely, but my impression was that "something like this" is pretty much agreed on, but there are various details to work out.
What app is this? Do you know of other apps that has this? Inside the Photos app for iPhone. I just tried opening a video, the timeline slider is unaffected by vertical panning.
Aha, the Videos app has it. Interesting to play with. Thank you very much Perkelton.
&gt;`PrecisionSliderFormItem().title("Saturation").decimalPlaces(3).minimumValue(0).maximumValue(1000).value(500)` Why don't you just give `PrecisionSliderFormItem` an initialiser that takes these values? This seems like a very unSwifty way of doing things.
I feel like in most cases the user wouldn't be aware of how it works.
I built a barbell calculator that uses swiping - I find it's much faster, and works well for the use case. Relatively small range of values, constrained to multiples of the lightest barbell plate you have, and works great for tired, unsteady hands.
I may have tried Ableton many many years ago, but I can't remember. Is it for iPhone or iPad or Mac? Do you have a screenshot showing the timeline view?
Interesting UI screenshots appear when searching for "barbell calculator". http://barcalc.com/images/barcalc-round-barbell-load-iphone-ipod.jpg http://a3.mzstatic.com/us/r30/Purple/v4/70/10/3f/70103f07-c44b-6d23-d4cb-b5e7872d3f7d/screen1136x1136.jpeg Great inspiration. Thanks
Have you considered simply sliding down to get more precise, similar to the YouTube scrubber? This would allow for one-handed use. 
its 25 dollars a month 
[removed]
Yeah, could be solved with zoom-with-double-tap, like maps.
Maybe FileManager.DirectoryEnumerator will do what you want?
Adding an attribute makes sense. Maybe I could give each object in my Core Data an ID, and then keep those ID's in an array in the correct order that I could also save in Core Data, or another format of saving data that might be better for that array. Do you think that would work, or would it be difficult/impractical?
yes, problably some visual hints must be added as a tutorial the first time that a user uses one of this on an app
&gt; Do you think that would work, or would it be difficult/impractical? IMHO, it is best for you to figure out what is best for you (and your team, if pertinent) and your project, maybe by doing some prototyping or other kind of experimenting. You should also not just throw out the built-in ordered relationships because someone on the internet (me, in this case) made some negative remarks ;) !!! Every person is different, every use case is different; that's why we get paid the big bucks. One thing which is almost certainly true is that whatever time you spend trying different stuff will not be wasted _in the long run_. Because you will have to do ordered relationships a lot and whatever you learn here, will be applicable in the future. You may discover a case where the design you choose here will be perfect and you can re-use it, or you may discover a case where this design is not applicable, but one of the rejected designs works perfectly. In either case: profit!
If you need a tutorial for using a UI element, you're doing something wrong.
The constructor should take exactly those values that are needed for the object to be usable.
&gt;I prefer constructors with few arguments. I'd really urge you to rethink this. An initialiser allows you to require certain values from the user of the class/struct. If you require a number of decimal places, then with you're approach the compiler won't be able to check this. Or when I do something like PrecisionSliderFormItem().decimalPlaces(3).decimalPlaces(5) then this is most likely a mistake, but again, the compiler won't notice. What is it that you dislike about initialisers?
Thanks
I took a much more minimalist approach: https://appsto.re/us/cihd4.i
Thank you redditors for valuable feedback. * vertical panning to adjust zoom * double-tap for x10 zoom-in * double-2finger-tap for x10 zoom-out * pop in additional line markers as you zoom in Much appreciated. 
Ah that might be it. I'll attempt to verify this in the morning. Regarding the reduced update frequency, how would this work for apps like strava? I assume strava would need the most accurate data possible. Thanks!
Not necessarily related to the conversation but I also built a barbell calculator (that doesn't use swiping) [here](https://itunes.apple.com/us/app/qwickweights/id1111916085?mt=8)
Thanks for you help! I think the method you described above seems to me as a method that should be reliable enough to work and not too hard to implement. I'll try to mess around with it and see if it works well enough for my project.
Is that Stanford course up on iTunes U?
Also, do keep in mind that constructors can have default values as well, so you can still have your empty constructor call.
It is, I found it better to use the website for it though. https://see.stanford.edu/Course/CS106A/ CS106b and CS107 are also available if you want to continue on.
This is not a dumb question, it is a damn fine question! And if you were to ask it in /r/iOSProgramming, it might get the attention and careful response which it deserves. /r/Swift should be used for questions on the Swift language itself.
This is the /r/Swift subreddit, which has to do with the Swift language itself. Now, whist it is true you are writing your code in Swift, nevertheless, the question has to do with iOS API, therefore the better place to ask the question is /r/iOSProgramming.
Have you tried "sound" and dropped the extension?
The main question is what order? Alphabetical? Created Time? Something else? The basic solution is to have an order field on your object, and sort by that field in your fetch. So if your current records don't hold the value you want to sort by, you'll need to add and maintain that value. If you want the user to have the ability to set the order, then you'll have to add all of the code logic to set and change that value once the re-ordering is finished.
After some fierce googling, I appear to have solved it. http://pinkstone.co.uk/how-to-kill-your-app-when-it-enters-background-mode/ As well as having the "Required background modes" set with "App registers for location updates" in the Info.plist I added: "Application does not run in background" to "YES". I do not understand why I would be setting this to YES? Maybe i'm interpreting this wrong.
I'm looking for the same but since Swift 3 is right around the corner, I guess the books will have to wait. Kinda sucks reading Swift posts that always seem to focus on iOS, but what can you do.
Yes, I have, and that appears to work, in that: • The sound is located in ~/Library/Sounds • But, if I reference it without the extension, and it isn't in the above folder, but is part of the bundle, then it won't play (I get either silence, or the tri-tone). What I'd like to do, is have it play a sound file that's in the bundle. If that sound is in a folder (say "audio"), what's the correct syntax for referring to the sound? notification.soundName= "ProjectName/audio/soundFile" or notification.soundName = "audio/soundFile" Thanks for your help so far, it's really appreciated :)
Ideally, the sound would play if you use it as `notification.soundName = "sound"`. If that doesn't work, an alternative is to catch the `didDeliver` notification and play it locally, using `NSSound` as bad as it sounds (hah).
Thanks, I'm not sure how this answers my main issue of why I can't get sounds in the app bundle to play, but if they're in ~/Library/Sounds/, they will. Is a didDeliver notification generated automatically each time the notification is sent?
Kind of a dumb question, but it's the first time seen this: is it also standard in swift to indent arguments by the colon?
No idea how to use them, but from their description, it might be of use. Have a look at nested view controllers.
&gt; could save a lot of space by combining all the return "" cases Those were things I was just too lazy to fill in. I translated this from Objective-C for a friend to use, and he's going to fill them in. He's probably done it by now so I'll update it shortly &gt; JSON is text, but XML isn't? Good eye, thanks! ;) &gt; don't need to say () -&gt; Void in Autocomplete. Closure syntax still confuses me, I never know when I need what and where to put it. It bothers me that the parameters and return type go *inside* the braces, for example. &gt; several other little things that are longer than they need to be If you don't mind, could you point them all out? Really trying to improve my clearly lacking Swift game, haha
Fixed everything except &gt; and a couple of x = (...) assignments because Xcode told me to do that to silence a warning (using Swift 2.2) Thanks!
All good design choices, I'll continue to update my code accordingly! Thanks again
And by lambda functions you mean closures, I assume? You should stick to the naming provided by the language.
Take a look at this tutorial here https://www.forestgiant.com/articles/ios-core-motion/ The process for initiating core motion functionality is very similar to core location, if that is something you are familiar with. And it is the attitude, pitch, roll and yaw that are the values you are going to be concerned with. If that tutorial isn't sufficient then doing a google search with the 'pitch' 'yaw' and 'roll' keywords as part of your search string should help you find some good resources. 
So are you talking about simply twisting the device in your hand or actually moving the whole phone closer or further to your body, or moving it up or down in the air?
Actually moving the whole phone closer or further to your body and moving it up or down in the air.
So, are you printing the response or data from your callback? One contains the header info the other contains json as nsdata
Yeah try writing the coords to some kind of local storage / cache I guess. Any luck? That's a good point about fitness apps - they must have near realtime updates so that's encouraging! Must be possible.
I'm storing them in CoreData, as well as printing them to the console. After I managed to keep the app running whilst locked, it did continue printing coordinates as expected. There didnt appear to be any delays in the update frequencies. However I only observed the console for a short period of time. When I did do a field test, it seemed to record coordinates fairly consistently. 
You could subclass the cocoa pods view controller and provide the functionality you desire. In this case you would prevent the view controller from hiding the tab bar on display
Oh, you're right! I kinda like how aligning colons looks, though.
- Stop using `!` so much. - Same goes for `;`. - All variables and functions should start with a lowercase letter. - Use `Array` instead of `NSMutableArray`. - Be more consistent in empty line placement. - Instead of `NSString(format:)`, use string interpolation. Also, if you're going to ask a question, only post the relevant code. I'm not going to bother to try to find the error if you post all your code.
Hmm interesting, I tried to iterate with compressed images with fixed rate, but this one suggests I should iterate with compression rate with original image. Makes sense. Edit: It worked perfectly thanks!
Thats exactly what I needed thanks!
Do the lags happen on your physical device or the simulator?
Physical device since the device must be moved.
This code was tested on iPhone 6S on iOS 9.3.3
I understand what kind of motion you are looking to capture now... I know I haven't seen any tutorials that explain how to capture that kind of motion but I will keep your problem in the back of my head while I am coding today (I am actually doing a lot of core motion work today so maybe working with those APIs again will trigger an answer).
r/iOSProgramming, maybe? That's not really about Swift.
I'll check out the videos for sure. Thanks
The plural of Pokemon is Pokemon.
First of all, this is more of an /r/iOSProgramming question rather than a /r/Swift question. Future such questions would benefit from being asked over there. It seems like your question is, 'Is this a bad idea?'. My answer would be, does it work? does it meet the spec? does it look ok? do the users understand what is happening? If the answers are yes, then it is a good idea. And, later, if new conditions come to light, or new knowledge is gained on your part, and it turns out there is something undesirable about this idea, you can change it. Or don't change it, but chalk it up to experience. The best solution is the one which works given the current constraints (time, money, knowledge) and, if constraints change, can be adjusted later. In other words, it is not so rigid as to be inflexible, and it is independent of all, or at least most. other code.
1. I would use Sprite Kit. 2. Try resetting the x velocity to zero on contact.
Thanks for the reply. But I started my app as a Single View application and am working with UIKit. So, if there is a way to do this with UIKit, that would be great! Secondly, is it possible for me now to use Spritekit?
 Be sure you have remote notifications enabled on the Capabilities tab. Last but not least, make sure to test on the device as the Sim doesn't do push notifications. That's off the top of my head. I use CloudKit pushes quite a bit. 
I submitted this before, but the junk filter removed it (probably because of the title "Ever wanted to have a type with a certain size? Me neither! But now you can!"). I messaged the mods about this 2 days ago, but no response, so I'm just gonna resubmit with a different title. **EDIT**: Still being filtered -.- I started this library just for fun, because it's possible. I only later discovered that it has actually some use case. It let's you create types of arbitrary size: typealias MyType = D.n3.n2.n9.n0 Now `MyType` is a type (a struct) which has a size of `3290` bytes: sizeof(MyType) // 3290 There's also some more stuff, including addition of such types and binary encoding. I was able to use this for my [MetalMemory](https://github.com/Infinisil/MetalMemory) (WIP) framework, which handles allocation and deallocation. I need to make sure this framework works with any types, including big ones and about page-sized ones.
You're right. I'll submit it there and delete this post shortly. Thank you.
Seeing as Chris Lattner is a reviewer and this has been allowed as a proposal I must be missing something. But what does this achieve that `public final` doesn't? This seems like a big incompatible change, just for another keyword that already has its functionality met. But like I said, I must be missing something!
that's what the save button is for
I can't speak for the community, but this is how I rationalize it to myself: Philosophically speaking, `public final` is a negative statement where `open` is a positive one. The language is switching philosophies on exports. Before we assumed that if you could *see* a class from another framework that meant that you could *subclass* it. But that seems wrong. There are plenty of classes across Apple's frameworks - especially class clusters - where the prevailing wisdom is to never subclass because you'll usually get it wrong. It seems more beneficial to make framework authors consider whether existing APIs can be safely subclassed across framework boundaries than API consumers. They're certainly more aware of their own API constraints than anybody else. So don't think of this keyword as supplemental to final, think of it as dual to final. In a sense, the language now tacitly prefers final where it used to prefer open.
Swift already encourages the use of value types like structs and enums more than classes, and those can't be subclassed either. So the argument that someone MUST be able to subclass something doesn't really hold up in Swift; it's not that strong a limitation. The ability to reason about the full possible set of subtypes and for class authors to know that their methods' post-conditions won't be invalidated is a far better benefit than the ability to be able to monkey patch code (which again, would only be available to reference types, and is misuse of inheritance in the first place).
Actually all Apple SDK types will be `open`, if you look at the `Other Considerations` section it mentions &gt; Objective-C classes and methods are always imported as `open`.
Use UITableView methods `reloadData` or `reloadSections(_:withRowAnimation:)` in the completion closure of your asynchronous function.
For people wondering why being subclassable is considered tricky to design for, consider something like this (pardon any mistakes; typed directly into reddit): public class FooFormatter { public var options : FooFormatterOptions public var locale: Locale public func stringFromFoo(foo:Foo) { return &lt; calculation using foo and options and locale &gt; } } You ship it, and everything's fine, but then you get a request to make it thread-safe. Ok… public class FooFormatter { private var _options : FooFormatterOptions public var options : FooFormatterOptions { set { lock.lock(); _options = newValue; lock.unlock() } get { lock.lock(); let result = _options; lock.unlock(); return result; } } private var _locale : Locale public var locale: Locale { set { lock.lock(); _locale = newValue; lock.unlock() } get { lock.lock(); let result = _locale; lock.unlock(); return result; } } let lock: NSLock = NSLock() public func stringFromFoo(foo:Foo) { let result = &lt; calculation using foo and options and locale &gt; } } Great, all your state accesses are protected by locks, and you're good to -- wait, someone subclassed it like this: class DebugFooFormatter : FooFormatter { override var locale : Locale { set { super.locale = newValue; print("with this locale, formats look like \(self.stringFromFoo(someFoo))") } } } So now that deadlocks as the getter for locale tries to take the lock while the setter holds it. Ok, fine. Hold our nose and use a recursive lock. Whoops, in the meantime, the DebugFooFormatter app has added a debug console, so now they're sending things to the main thread to update their UI: class UIDebugFooFormatter : FooFormatter { override var locale : Locale { set { super.locale = newValue; dispatch_sync(dispatch_get_main_queue()) { console.append("with this locale, formats look like \(self.stringFromFoo(someFoo))") } } } } So we still deadlock as soon as any call from a non-main thread is made. Once you've made a mistake like this, I'm not aware of a general solution to it. You have to choose which apps using your library you're willing to break, or abandon your planned improvements. The only actual solution is to, when you initially design the class, consider all the places that could be overridden carefully, and defend against incorrect use ahead of time (e.g. in this case you might say "ok we're not doing thread-safety this release but we will detect and abort on reentrancy so that we can do it later", or perhaps you make sure that none of your methods internally call into other public API on your class). Now you might say "well, those apps are just out of luck". And if you're making the call, that's fine (ish, your project will develop a reputation as a library that can't be relied on across updates). But suppose this isn't a personal project: is your boss ok with telling their top customer that they built their project wrong and now they're broken? Or will they just say "you can't break apps using our library and you also have to get this done, figure it out"? TLDR: Any callouts from your library to code in apps using the library should assume that they're doing weird things and be very careful. Subclassing means that nearly everything is potentially a callout to app code.
Gonna reply as a reminder for myself (on mobile right now).. But right now I'll give the 'off the top of my head' answer. I'm pretty sure you need to initialise the UITextView in code, and set a container on it. As far as I recall you set the NSTextStorage inside the container, though I can't remember the steps right now. I think there's a manager object to be set in there too. /googles Here's an okay article on it: http://sketchytech.blogspot.ie/2013/11/making-most-of-uitextview-in-ios-7.html?m=1
I don't think there's a simple way. If we're talking about text, then you could use self sizing cells to allow the text to become its natural size, but they're not a simple as they should be. If not, I wonder if you could use a stack view to organise the cell, then use the stack views content size in the UIcollectionviewflowlayout sizeforitematindexpath delegate. I've never tried that mind so I don't even know if it's possible to get the content size.
If you want to refer to instance properties of a class in lazy intialization, you must use `self`. So use `self.view` and it should work.
But my point is, isn't `public final`, currently, identically to the `public` they are proposing right now? And `public` right now will just become `open`? I just don't see the benefit other than brevity.
I'll definitely work on that. Thanks for the input :)
You have to print it in the closure. If you are using table view to display the chapters, you should call `tableView.reloadData()` after populating your array.
Any reason you don't use AutoLayout?
I could do it in a day or two. You don't know how to code. So you could do it in a day or two + a few years to learn how to code.
Hi, thanks for the input. I'll make sure to improve upon all of the points you mentioned as soon as I can (one of the reasons for putting my framework here was to get criticism) As for the usefulness, you're right about it not being useful in your particular case. It's not meant to replace that kind of code and if the app you're building requires that kind of code you shouldn't include this framework. The main cases this framework covers are: * Syntactic sugar over the events system in CocoaTouch * Adding multiple events that trigger each other on or off * Adding async events I had a situation where I was designing a music player for my app and had loads of buttons that needed to perform actions asynchronously and trigger each other on or off. I developed this framework to help me with that. Also I'm working on another framework that exposes views in the ViewController via identifiers instead of outlets, so they're always available. My general opinion is that `@IBAction` and `@IBOutlet` are suboptimal ways of writing code since it requires dragging from the Storyboard which I really dislike. This is mostly a personal preference, but I've found that other developers I've talked with also dislike this approach (I like the way Android handles this, personally). The entire syntax is taken from C# . Since I've been a C# developer for quite some time, I've grown used to this approach and I consider it superior to the CocoaTouch way of doing things. The best example of the usage of this event is if you have multiple functions you'd like to perform asynchronously. Or trigger some functions on/off using the -= operator. Also, I will disable the LDAEvent(shouldAsync: true) { } since this code should never be called by the developer. It should only be called by the framework when passing the events on `UIControl` EDIT: The framework also reduces code clutter when creating the UI in code instead of using storyboards which is something I often do
https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/BetaTestingTheApp.html#//apple_ref/doc/uid/TP40011225-CH35
Define "emoji app".
Oh I know there's a lot of breaking changes but some of them seem rather unnecessary (this one especially, it doesn't add anything, if anything it makes things more confusing)
Yeah, nice, I was there
The post you're replying to actually explained it, but here it is again: You can't subclass a `final` class at all, anywhere. `public final` would prevent even the module author from being able to make subclasses. `open` / `public` only control subclassability *outside* the module. `public` means others can't subclass it, but the module author still can. 
Ugh, not more. Apple, please, just stop. This is the sort of thing you put in the docstring. Like, "If you subclass this, you can override Foo, but not Bar". Problem solved! Sure, a sufficiently careless programmer can violate this with a subclass, but they can violate the Liskov Substitution Principle, too. There's always going to be things that subclassers can do that you can't type-check. This isn't even a very interesting or useful one. The Swift language seems to be run by people who won't be happy until every possible situation is checkable by the type checker, even if that means the language becomes too complex for anybody to use, or implement. Remember when we used to make fun of C++ for being so complex? It had like twice as many reserved words as Obj-C. Now Swift has around 100 keywords -- way more than even C++. I don't know why Apple is selling it as a good language for beginners, because it's one of the most complex languages I've ever used, and I've been programming for decades, in dozens of languages. Can you name another language with 100 reserved words? The syntax is getting insane. But it's not just a problem for dumb people like me. It's apparently even too complex for the people who are implementing it. I can't go 2 days without running into something that segfaults the Swift type checker. (Sometimes I spend a couple hours looking at swiftc stack traces before I finally unearth the root cause.) I never had any problems in Objective-C that would be found or fixed by Swift's type system, but there's no way to just opt out of it. If you want the shorter method names and no-header-files of Swift, you need to jump through all the hoops to convince the compiler that your code is Swift-type-safe. There's [a Github project with nothing but thousands of Swift compiler crashers](https://github.com/practicalswift/swift-compiler-crashes). (My favorite is this one they found just this week: [two characters](https://twitter.com/practicalswift/status/758029968517529600)!) How about they try some [industry best practices](http://www.joelonsoftware.com/articles/fog0000000043.html), like [fixing bugs first](http://c2.com/cgi/wiki?FixBugsFirst)? Because SE-0117 sure isn't going to fix any bugs in any program I've ever seen. OK, rant over.
Got it! Thanks, this makes sense now.
https://youtu.be/6tydk4Fc-tg
If you mean stickers, it's literally drag and drop. You can if you want add code to make it look better but you dont have to
Where are the unit tests?
The emoji app at the top of the free section is what I'm referring to.
The stickers apps are going to be an extension for iMessage, and don't require any coding on your part. The development of the product would simply be creating your graphic elements, and copying the files into a template in XCode. That feature isn't going to be available until iOS 10 is officially launched, so you wouldn't be able to sell it until then. When you are allowed to distribute those apps, you will be able to charge for them. The emoji app you're referencing is a custom keyboard for iOS. Because of the security restrictions on keyboards, they aren't allowed to directly paste graphic data into places that text go. That's why you have to go through the extra steps of copy/paste. The stickers are an answer to that, but only in the context of pre-made graphics in one app in a known way, to reduce the possibility of a security issue. If you want some information directly from Apple on the subject, watch this. https://developer.apple.com/videos/play/wwdc2016/204/ Unless you haven't watched Stranger Things, in which case, watch that instead.
Haven't written any. Will make sure to have some decent code coverage as soon as possible.
I haven't used any of the apps of this type, but I've seen them on other people's phones, and I get the impression that they're all custom keyboards. It's not the most daunting project to code, but I wouldn't suggest it as a first project. Extensions (custom keyboards, widgets, ad blockers, etc.) are a somewhat more complicated programming issue than just making an app to me, but that may say more about my programming background than anything else. There is no official release date for iOS 10, but September or so is usually a safe bet for any iOS version. As for the financial risks and rewards, and competition in that space, I have no earthly idea. The extent of my expertise is in knowing that the new OS has a feature designed to accommodate what you're looking to do. 
The keyboard thing always seemed odd to me that only the Unicode emojis could be used from it, I'm really excited to see the stickers on iMessage though I'll need to get a newer iphone as I'm on the 4 and can't get a lot of the most recent apps.
Create a method that adds a CGPoint dict[I] = (dict[I] ?? MyStruct()).addCGPoint(newPoint) That or define the addition operator func +(lhs: MyStruct, rhs: MyStruct) -&gt; MyStruct { //do what you want done }
What you would want to do is create a variable for each color you are using, then set that variable as the UIColor property. Then, you can change the value at run time, reinitialize the view, and the view will use the new value for whatever color property value you assigned.
Probably more than 2 weeks, maybe less. 
Nice to see them finally start talking about stabilizing the API. Also they finally are going to add multi-line strings! yay!
Multi-line strings is just one of the bullet points under stage 2 without commitment. Somebody has to push it hard in 2017 if they wanna see it make in Swift 4.
&gt; Reflection: The core team is committed to adding powerful dynamic features to Swift. For example, Swift 3 already added nearly all the infrastructure for data reflection (which is already used by the Xcode memory debugger). We should use this infrastructure to build out a powerful user-facing API. Similarly, we would like to design and build out the implementation for dynamic method reflection runtime + API support. Dynamic features are pretty much the only remaining thing that Obj C does better than Swift. Very excited to hear this. 
I think serious, non-trivial server code written in Swift won't happen until at least Swift 4. There are quite a lot of server frameworks in development right now, but at this stage there's no way any of them are mature enough compared to frameowkrs on other platforms. After Swift 4 there will be plenty of companies looking into the viability of using Swift for server, but I suppose real adoption won't happen until language level support for concurrency is implemented. And this won't happen until at least half year to one year after Swift 4 is released. So, non-trivial server written in Swift possibly won't happen until at least 2 years away from now, maybe?
Things like NSInvocation, performSelector, key/value coding/observation, dynamic core data properties, method swizzling, object mocking, method stubbing, etc are dynamic features in Obj-C that have no native equivalent in swift. Right now, Swift is, for the most part, a static language. If i'm reading this paragraph correctly, the dev team is interested in making the language into a hybrid language that would support these features while simultaneously maintaining the rigorous static guarantees the language currently provides for non-dynamic code.
Here's what I do: class AppNameAppearance { static let lightBlue: UIColor = UIColor(colorWith...) static let gray: UIColor = UIColor(colorWith...) } Then, you can just grab the color like so: ``` backgroundColor = AppNameAppearance.lightBlue ``` 
well I guess if they finally solidify the API, that'll be good
I think it's incredibly hard to put satisfactory concurrency into a language with Swift's background. It's designed to be a very C-like language in terms of execution model. It's compiled to LLVM that looks a lot like C with ARC and a better type system thrown in. Adding satisfactory green threads and/or coroutines would drastically differ from the current execution model. I'm anxious to see what their solutions are, but I'm afraid it's going to end up being another one of those things that has some weird `@` keywords or obscure ways of handling the underlying execution model.
&gt; Do you guys know where I could go? You could go to the search bar, for one.
Coroutines are… tricky... for a lot of reasons on Apple platforms. Dealing with things like vouchers, importance donation, priority decay, per-thread CWD, etc... makes it really hard to avoid syscalls in the coroutine switch path. Not that it couldn't happen, just that there's a ton of subtle issues to consider. I suspect a lot of server-y and compute-y programs "get away with" not worrying about this stuff because they just don't do anything that runs into it.
[Apple's own tutorial for beginners](https://developer.apple.com/library/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/)
Thanks from me, too!
It's because levelsData is of type [Int: Any]. The value you get back from it for levelInfo is Any, not your level 1 or 2 dictionary. Typecast the levelInfo to: let levelInfo = levelsData[level] as? [String: Any] Honestly though, I'd ditch the dictionaries for a struct since your data is structured with set keys that are the same for both dicts. It's a bit cleaner and safer since you don't run the risk of a typo in the key when your set or get the value and Xcode can help you with stuff like autocomplete.
Great, thanks for the info.. I'm going to look at struct now..thanks for the advice
If you are looking for a collection of the different resources out there take a look at the section on my site http://manitoba.ninja/introduction-and-picking-your-resources/ which covers the best resources out there for someone who is teaching themself to program. Most of the best resources are going to have some sort of cost to them so trying to learn completely for free could be tough. Apples own resources, the HackingWithSwift.com tutorials and the iTunes U courses (the Plymouth Univeristy and Stanford University course) are your best bets for free resources. But as donniefitz2 said, you are going to have to spend money at some point if you really want to become a strong programmer and have a real understanding of iOS development and object oriented programming.
What program can be written in swift that can't be written in objective c?
Of course it adds something. 
- "open" is contextual, so not a keyword.
Thanks for advice! I will be sure to use the links you provided. Thanks again. 👍👍
Sounds good. I'll be definitely checking out the books they have!
wow))) great!!
Frankly, I love this comment. Reminds me of all my recent potential consulting clients.
What program can be written in Objective C that can't be written in Brainfuck?
Could you at least fix the formatting so we can read that?
Generally the advantages would be one or more (hopefully all) of: • Safety, by letting the compiler detect invalid concurrent operations (example: Rust's borrow checker prevents many race conditions) • Performance, by letting the optimizer delete concurrency-related constructs when they're not needed (example: Java can automatically delete locking operations when it can prove a variable is thread-local) • Convenience: there may be useful idioms that are awkward to express purely in libraries (example: thread-safe zeroing weak references in Objective-C are possible to use without compiler support, but require constantly calling objc_storeWeak and objc_loadWeak, which is incredibly annoying and easy to get wrong) 
In what way is it "essential"? It's exactly identical to just putting `\n"+"` between lines of a string literal today. It adds no power to the language. At best, it's a minor convenience. On the other hand, how much would you be willing to bet that they can implement it perfectly? Every new feature is a potential source of bugs, and they've got plenty already. I'd rather they spent the effort on fixing some of the compiler crashers that I run into on a regular basis.
I guess I'm just not sure how exactly the execution model would have to change to support satisfactory concurrency. Something like Go isn't tied as strongly to the traditional C-like concurrency model, and can nicely implement green threads and such. But I guess I don't know enough about how Swift works in this way. What kind of concurrency are we wanting to add to Swift, and how would it be implemented? I think green threads are pretty important in this area, but I feel like green threads would require a lot of changes to common blocking functions, and wouldn't work well with standard C APIs.
The existence of persistent data structures tends to drastically change how you structure your program. GCD is very neat (I don't know anything about RxSwift), but all it really offers is a way to run C-style functions concurrently. It's still up to the programmer to maintain their classic data structures so they work properly in a multithreaded environment. For example, let's say you wanted to sort a bunch of things, and [default single-threaded sorting was too slow](http://stackoverflow.com/questions/35749324/swift-multithreaded-array-sorting), but you notice that your shiny new Mac has 23 virtual cores sitting idle. Can you write a simple mergesort that uses all your cores, efficiently, and won't break if somebody uses it "wrong" (e.g., on a shared instance) next week? Swift arrays are COW, so I think that might be fairly easy to implement with GCD, but perhaps not efficiently. For an additional challenge, suppose it's a *reference* type that you need to traverse, like a B-tree that your coworker implemented as a Swift class.
It's not essentially identical at all. Try copying and pasting a large document into a string. With Swift and XCode is nigh impossible. Why would they implement it perfectly? They will probably implement them more or less exactly like most other languages. Sorta like how much of the language is...
I read nothing but the title. The answer is yes. It's too big. It's doing too much.
Well, yes, 2000 LoC in your view controller is too much, but that's at least easy to fix - start breaking sections out into functions you can call. There's more to it, but that's a start.
&gt; there is a wide range of different languages that compile using LLVM, including Go and Rust. Rust absolutely uses LLVM, but I thought `cgo` was `gcc` based, not LLVM based. I could very much be wrong; I did some poking around to try to figure it out, but gave up after a few minutes.
Are you following the MVC design philosophy?
I would release for iOS 10 most likely.
Are you at liberty to post the source or maybe method names for review? Whats goes on with onboarding? Does refreshing feeds include network calls or parsing data returned? 
&gt; Try copying and pasting a large document into a string. A string literal isn't the right solution in that case, anyway -- use a resource. I still don't see the incentive for them to spend engineering effort on this. &gt; With Swift and XCode is nigh impossible. Xcode is not a great text editor. But every Mac ships with Emacs, and it takes 10 seconds to fire up Emacs, paste your string, and run a macro to format it correctly. There's always going to be things that Xcode isn't great at, but I don't see that as always necessitating syntax changes. &gt; Why would they implement it perfectly? They will probably implement them more or less exactly like most other languages. Sorta like how much of the language is... Exactly. So far the "add features as quickly as possible" approach given us [tens of thousands of ways to crash the compiler](https://github.com/practicalswift/swift-compiler-crashes). Do you think that's acceptable? I don't. I waste time every day working around Swift compiler crashes. I waste no time on trying to paste giant strings into Xcode, because (a) it's the wrong way to put large bodies of text into a program, and (b) with a good text editor it's trivial to do, anyway.
I was referring to llgo, which is part of the LLVM project: http://llvm.org/svn/llvm-project/llgo/trunk/README.TXT
+1
Deleted my reply as it was useless. At the time I wrote it, I failed to take into account the fact that you were porting from Objective-C as opposed to writing new Swift code from scratch. Sorry for the waste of time.
I'm glad this was asked. I just reached 1.2k lines in one of mine and it's bugging me so bad! It's a fairly complex VC: ScrollView, WebView, CollectionView, and a TableView all in one VC. This is my first year using swift and not sure how to break all these out. I spent last week debugging several bugs throughout the file and it was a nightmare working through that many lines in a single view.
What are you trying to achieve? Generally the user will scroll to a desired option. If the user just flicks, the UIPickerView's internals handle the speed and stopping at the next valid choice. You can't manually change that speed.
Spin as "momentum" from the user action? I do not think the pre built spinner offers that much of fine tuned customization. I do not think the Picker view exposes "current value" while the spinner is moving due to residual momentum. The value changed is only reported once the value is known. 
Flat number of lines of code is a poor measure of anything. The questions you should be asking are: Is the code well organized? Is the code easy to maintain? Are functions discrete and testable? If someone unfamiliar with the code needed to debug it, is it clear enough to that they could? Is the code flexible so adding new features without introducing bugs to existing features easy? These types of questions will help guide you to better overall code regardless of the number of lines in any one class. 
https://developer.apple.com/reference/accelerate It is very low level, though, so it might take a lot of work. 
But his point is the right one. If you ask for rules of thumb like LOC you're not understanding the reasons well enough to know HOW to break apart the code and make decisions in the future. Answering these questions will drive to the correct answer and will serve again in the future. It's similar to how everyone just spouts MVC at beginners. MVC isn't the critical piece, the important thing is to understand the motivations behind makING something modular, testable, modifiable, reusable, maintainable. Then this can lead you to MVC. 
The common best practice is to never let a single file grow beyond 1000 LOC.
I think we are talking about a couple of different things there. You are right, that just pointing to the problem solves nothing. My point, however is that LoC can, and absolutely are the indicator of the problem in the code. You may not know how to solve it, but you know for sure it is there. Just like you may not know how to cure the disease that causes high fever, but having high fever is a sure sign that something is wrong.
pokemens
I agree. This isn't an argument about exactly how many lines the maximum a view controller (or any class) should have. And in fact, I find myself in disagreement with an earlier comment stating that breaking the class up into multiple files via extensions isn't any better. It is better if it's no more organized, each of those extensions has a clear, focused goal for the view controller. It may not be ideal, but it's probably better than all of everything in the single file. If you have 2000 lines of code in your view controller, your view controller is doing too much. And that's the problem--the view controller is doing too much. The problem isn't the lines of code. The lines of code is simply an indicator of this very problem.
If the stuff you put in extensions is hidden from other devs, that's a symptom that your project is not well organized. With appropriate file naming and folder structure, this code should make itself pretty evident. I can agree that extensions are only a stop-gap, but if you can start thinking about how you'd appropriately group this class's methods into organized extensions that make sense, then you're on your way toward being able to break it out into other classes.
Based on the experience that a file gets unwieldy to handle after that.
That's not that much, at my last job there was a view controller with 10,000 lines and 4 methods.
I did a lot of real-world apps, and I am more and more inclined to strive to have VCs with ~100LoC's I'd recommend to watch these videos: https://www.youtube.com/watch?v=npOGOmkxuio https://www.youtube.com/watch?v=8bZh5LMaSmE Those are in Ruby, but it does not really matter. Also, I'd suggest to see all the talks by Sandi you can find. More iOS related, see this: https://vimeo.com/140037432 for starters.
You did not address the concerns with the potential crash in the `Event` class. ----- vc.testButton.events.touchUpInside += { _ in XCTAssertTrue(true) expectation.fulfill() } So, this test could be slightly better. We don't need the assertion you're making. What we do need is to verify that *when* this callback is called, it is sending the correct argument. vc.testButton.events.touchUpInside += { sender in XCTAssertTrue(vc.testButton === sender) expectation.fulfill() } (This same pattern needs to be applied to all of the tests, by the way.) ----- In the `test_RemoveSyncEvent()` test, we don't need an expectation for an event that shouldn't happen, nor do we need this weird dispatch after 1 second fulfill this thing that shouldn't happen. Instead, we just need this: let identifier = vc.testButton.events.touchUpInside += { _ in //Make sure first event doesn't trigger XCTFail("Failed to remove event.") } ----- In `test_AsyncEventsExecution()`, we have mysteriously moved away from correctly using the expectation pattern into this weird pattern with counters and sleeps. Drop that and just give every closure its own expectation. Your test could pass if one of those closures were called twice and the other were never called. You may think that would never happen, but your test currently allows for it. The whole point of tests is to prevent regressions, and a test that technically allows for a regression (no matter how impossible you believe that regression to be) is an inadequate test. ----- What is `test_removeFromEmpty()` testing? Looks like nothing. (Hint: This is a rhetorical question. Code shouldn't need to be explained. If I'm asking a question like this, it means the code is unclear and needs to be fixed. Ideally, fix it with code and not a comment.)
By the way, now that you have unit tests (thumbs up for that), the next step is to get an automated build &amp; testing system set up so that on every push to your repo, the build is run and all the tests are run, and then we can see a report of the code coverage of your project (which lines are tested, which lines aren't), and any time pushes are made, we can get an automated report of whether or not the build is broken, whether or not all the tests are passing, and how code coverage changed. For an example of what I'm talking about, check out some of the Metova libraries: - https://github.com/metova/DataManager - https://github.com/metova/MetovaTestKit - https://github.com/metova/ThunderCats - https://github.com/metova/MetovaBase 
You said "common best practice". Been coding for 3 decades, never seen that so again, I'm asking for facts, not a random number. 
Right now, there's not a solution for avoiding crashes on Swift `fatalError` (although that is an open issue and something we eventually definitely want to do), but now you should no longer crash on Objective-C exceptions. Also, be sure to check out the functional approach to testing view controllers. As well, there's a newly added assertion that will fail if there are any broken constraints.
IBM Watson Developer Cloud's visual recognition API might help. They have a Swift SDK here: https://github.com/watson-developer-cloud/ios-sdk 
What about retain cycles from referencing self in the closure, not in the docs 
I'm a big fan of the Big Nerd Ranch books. It's what I always suggest to anybody who asks.
it's not perfect but boy does it help when you are starting to port something.
I think MKAnnotation and all of its subclasses can get some attentions and is left a bit unnoticed specially advance topics where you need custom annotations and difficulties that arise with dequeuing etc. 
I totally agree with that. It was on my list but I will be sure to make notes about covering custom annotations, dequeuing issues and other aspects of MKAnnotation in good detail.
Well, I'm all for automating away the annoying mechanical busy-work, even if it's imperfect.
You'll never go broke betting on people having unreasonable expectations.
I can't imagine seeing a need for this, especially right now while Swift is in flux until &gt;= 4.0. - If you're making a new project, go Swift. - If you have a pre-existing ObjC project, just make the new additions in Swift. ESPECIALLY if you already have more than 5,000 LOC, I wouldn't trust any sort of auto-converter to not introduce something hidden and wonky.
Updating from one Swift version to another doesn't involve a lot of pain (i.e. repetitive, boring work) thanks to the code migration feature that Xcode brings. The thing described by OP is (basically) a Obj-C to Swift code migrator - it does all the boring, mechanical changes for you but (obviously) can't use the fancy new language features. Obviously, Swift introduced a lot of fundamentally different new features, so the Obj-C to Swift tool has to do a task that's a lot harder than to upgrade from one Swift version to another, but it still sounds like a useful idea to me.
I wouldn't say "all" lol. It does like 60% on a good day?
Trial by fire. Pick something you want to do. Make it small. Make the criteria clear. Write the code in a Swift playground. Get it working. Then, for feedback on improvements, get it reviewed. Post it here, or somewhere like http://codereview.stackexchange.com/tour and get feedback on what you've written.
My question really was what can the return be used for
I think he means common best practice for iOS devices. App development practices like MVC, MVVM, etc.
Which is the same as OP's function. They're the same thing. func thisFunction(completion: String -&gt; ())
Your first function accepts a closure, so it will be like this when called. thisFunction({ variableName in //do something with variable }) or using a trailing closure with the same function. thisFunction() { variableName in //do something with variable } The first function does not return anything, but your second function returns a string. The first function is saying that it accepts a closure as a parameter that returns nothing and the function itself returns nothing, while the second function is saying it accepts no parameters but the function returns a string.
The return is used so that a variable can be assigned the value the function returns after doing some calculation. My example is simple but there are more complicated ones that can return different things, etc. func calculateAgeStartingAt(y1: Int, andCurrentYear y2: Int) -&gt; Int { return y2 - y1 } Now we can assign values to variables. var myAge = calculateAgeStartingAt(1992, andCurrentYear: 2016) The variable myAge will contain the number that was returned by the function, so it would be 24.
That's a good idea. I wonder how long the script would be if, instead of spawning a subproc and using PListBuddy, one were to read and write the plist using PropertyListSerialization from Foundation? 
The equivalent bash script for incrementing your project's build number is like 4 lines of code. As cool as command line scripting in Swift is, let's please make sure we're using the right tool for the right job. Not everything is a nail meant to be hammered in by Swift. Also, I recommend using Unix time stamp for build number rather than an auto-incrementing by 1 build number. #Set the build number buildNumber=$(date +"%s") /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $buildNumber" "$INFOPLIST_FILE" 
Use GitHub.
You need an API. The user checks the API for new annotation data.
That's pointless since I wouldn't be updating it at all since it requires the entire Xcode project to even work.
You said you wanted criticisms. Pastebin is full of clutter. Things on github don't have to be things you intend to update.
So I only upload a single text file and thats it? I guess but that's just harder to [read](https://github.com/jozemite/Quiz-Game-Mode/blob/master/README.md)
You uploaded it as `README.md`, so it applied markdown formatting to it since you told it that it's a MARKDOWN file. You *should* call it what you call it in Xcode. Probably `GMQuiz.swift`.
Can you point me to some kind of source explaining this "best practice"? I'm tired to see made up numbers everywhere.
Yes you're right, I forgot the part where I asked for criticism on the websites I use to host stuff.
Honestly all I did was change a "Hello World" repository I had on there and pasted the code in it's read me.
None of this means you still shouldn't properly organize your codes into models and such.
Im more than likely wrong. But what tableView functions are you using? In numberOfRowsInSection, If you're using an array to create cells from, can you do something along the lines of : if myArray.count == 0 { "message here" }
I know, but based on tutorial books that I've used, that's how games are made. Some people are actually confused how they can apply the [MVC approach with SpriteKit](http://gamedev.stackexchange.com/questions/96662/does-spritekit-follow-the-mvc-pattern). In fact, googling how to apply the MVC approach to a SpriteKit game will yield very few results. You'd have to work with SpriteKit to understand us. That doesn't mean my code is okay, but I think part of your view is based off of what you know what a class should be, but not what an SKScene class is. I still appreciate your feedback and I'll try to see how to fix it, especially your enum suggestions. Thank you again.
True. Many of these numbers are based off what people heard or discussed, but no hard number to prove. I've even hard some people say to keep it less than a few hundreds lines for any app for a ViewController. It's basically a principle of separation of concerns where one object is not suppose to know or care what the other object does. The point is, do not have so many lines in a view controller. The best example is what I found last week. [ToDo-List](https://www.smashingmagazine.com/2016/05/better-architecture-for-ios-apps-model-view-controller-pattern/)
Are you just trying to be condescending, or can you really not figure out how to factor your code so that a class has 200 lines?
Yeah I thought about that too. Will try it when I get some time. 
Where did you look? 15 seconds of googling led me to [this result](http://catb.org/esr/writings/taoup/html/ch04s01.html): &gt; In nonmathematical terms, Hatton's empirical results imply a sweet spot between 200 and 400 logical lines of code that minimizes probable defect density, all other factors (such as programmer skill) being equal. This size is independent of the language being used — an observation which strongly reinforces the advice given elsewhere in this book to program with the most powerful languages and tools you can. Beware of taking these numbers too literally however. Methods for counting lines of code vary considerably according to what the analyst considers a logical line, and other biases (such as whether comments are stripped). Hatton himself suggests as a rule of thumb a 2x conversion between logical and physical lines, suggesting an optimal range of 400–800 physical lines. Is that factual enough for you?
you guys should check out /r/rxswift. you already are using the language of the future, why not use the paradigm of the future as well?
I like using it. It makes things more consistent. With a pure increment, a commit might increase the build number by 1 or by 50. Just depends how many times I built the project since my last commit. And the biggest problem here is when you have a project with multiple devs. origin/develop is on build number 50. My branch incremented the build number by 10, and yours incremented it by 15... what build are we on... 60 or 65? If you're going to use a number that is basically arbitrary anyway, why not just use a timestamp. And the best part is... it's much easier to then tie this build number back to a specific release or commit than it is an incremented build number.
FixFontPathsForSimulator? I'm guessing this has to do with the simulator. Try testing it on an actual device.
Dude said 1k LOC. I don't see 1k anywhere in your reference. Under 1k and 400-800 is not the same. Again, I'm pointing out people asserting absolute truths and made up numbers as facts.
I use https://imageoptim.com/mac, it's great
This really isn't enough to go on. Can you post your code?
If you're using the Github web interface, "Create new file" lets you pick any filename, and "Upload files" uses the filename it already has. You must have chosen to call it "README.md" for some reason. If you're using the command line, it's exactly like any other Git repo. If you don't know how to use Git, that's the number one "suggestions/critique in terms of how [you] did" that we can offer. "To prepare migration for Swift 3", you're going to want to become skilled with a DVCS.
Oh my god why does it matter so much to use Github over PasteBin. You people are bitching about something completely stupid. It's like someone coming into this sub and we refuse to help them because they don't name variables using camel case. Why does it matter how I uploaded it? If you don't want to help, then move on. I really don't see why you people are bitching about how I uploaded it. 
Great point about multiple devs. I am the solo iOS guy at my company and have been for the past 3 jobs. Also great point about tying the build number to the build/commit date. If you need to go back to grab some old code to revert it, it would be easy to find without relying on tags or notes. I think you sold me to changing over. 
I can, I just haven't seen projects with only so small files in practice.
I'm finishing off an app that I started a month ago. It's 95% finished functionality-wise but next week I'll have to fix a bunch of small stuff and get it ready for release. If you want a scale, it'll be ~7.5k lines of swift by the time it's finished, I suspect. 
I saw how many errors were in my Metal engine when I switched to Swift 3 and couldn't deal. I'll go back to it sometime, but for now I decided to embrace the new things from WWDC and am making a Factorio clone with the new SKTileMap. GKNoise has also been really fun to play with. 
https://objectivec2swift.com/
Dealing with Apple's rejections.
look at the logs, this might be due to the constraint not being fullfilled. Posting an logs you have would be useful!
I'm trying to find a way to get started developing in swift. I'm not sure where to start. Seems like Swift 3 is the future but mostly all good tutorials I can find are written for Swift 2.
My assumption would be that swift programming would be more relevant to start up culture, people excited to be on the bleeding edge. If you're joining an established company who has apps in production already, they're probably not in any rush to switch to swift, and if they are in the process of switching to swift they probably have someone on hand already who knows the existing codebase who is going to handle it at first... a bunch of assumptions, but I'd try to find a smaller company or something in the nascent stages...?
Ask yourself this question: would you want to work at a company where they haven't taken the time to modernize their interview proccess to allow interviewees to solve problems in Swift instead of Obj-C?
I feel ya, but I think it has always been the consensus that if you want to be employed in the iOS world, you should be doing objc. That being said, there are swift jobs out there. Just harder to find.
here's what my opinion is: 1) legacy code is written in obj-c. 2) swift isn't on solid enough yet when it's getting updated dramatically. why build your app in swift when the code fixer from translating your swift 1 code to swift 2 is 100% perfect. 3) some people refuse to move forward. which really sucks.
I don't see it as an either-or kind of thing. I see it as a both-and. You see a lot of conferences and forum talk about Swift because it's new, and exciting. After all, if you want to know about ObjC, there were already WWDC session recordings, and existing books and the like. Companies that have existing code quite possibly will leave it in ObjC and write new code in Swift. Time is money, and for as many people who want to rewrite all the code, there are those (myself included) that wonder about the costs of doing that. I wouldn't look at it as betting and winning horses. I'd look at it as you will benefit from having some diversity in the languages you know. I see the community often treating ObjC as if it should go away immediately, preferably yesterday. In reality, the transition will be slower than that. People say ObjC is *horrible*, but in fact, it's a pretty useful language, especially with blocks and with a good static analyzer backing it up. People say ObjC is dead, but due to Swift compatibility, it has gained some useful new concepts such as nullability and lightweight generics. So yeah, it's a transition. A slope, not a step. And different places will be at different points on that slope.
I use Kitura heavily, and I like it a lot. The framework, along with the language itself, is not 100% stable yet so there's quite a bit of tinkering involved, but things should be a lot better in a month or two. My server has been running smoothly with Kitura for several weeks now.
If you're moving at a constant speed the accelerometer will report zero. Look into the CoreLocation framework. There's a good WWDC session called CoreLocation: Best Practices from this year that you should really look into. There's a specific value you set to give you the best reporting for navigation. 
I started implementing a mac app that helps me budgeting. It's my first OSX app and I'm also having a look at different backend rest API's. Currently checking out LoopBack, which looks nice
I suspect that companies with existent apps are looking for developers to build and update those apps - which were probably written in ObjC. As another comment said - swift isn't stable enough yet (with all the changes that happen between version, just maintaining that would be a pain). As far as the interview goes - I've done some interviews with candidates and challenges submitted in swift were fine. But since the whole app is built in objc, and that's what the entire team of 10+ developers is working in to update and improve it - we're also looking candidate that's also proficient in objc.
There's a really good talk from this years WWDC where Kitura is demoed. I think it's called Server side Swift.
At the moment, just creating an app you can log in, create account and change your password using Firebase. Just to know how to do it.
*sigh* Added 'Audio, AirPlay and Picture in Picture' background mode capability so that users can watch educational video streams in PiP. Got rejected on the basis of the app not being a music player app. Good times.
I've got one app to finish and submit. Another app to do some work on for the 1.2 release and then starting on adding Apple Watch support for its 1.3 release. Plus I hope to sneak in some reading on protocol oriented programming and start really getting head around that.
The accelerometer reports acceleration, not speed.
Dont be pedantic to save face. Frankly I was okay with your asking for a source, bit obnoxious, but w/e, but this just makes you look petty. 
Do you have previous programming experience or is Swift your first programming language?
 &gt;Until then, McDonald's, right? :D Uh no! You search for a job that best matches your talents. 
 &gt;People say ObjC is *horrible*, but in fact, it's a pretty useful language, especially with blocks and with a good static analyzer backing it up. It is in fact pretty horrible. I never found it to be a readable language. 
I work for a consulting company and no new lines of iOS code are written in Objective-C. And our clients that have existing Objective-C code are paying for us to re-write it because of the performance improvements. I am evaluating some frameworks right now that are written in Objective-C and have very poor Swift support so we won't be using them unless they make changes. When I was at WWDC this year, I didn't see a single line of Objective-C the entire time. It would be a huge red flag for me if a company was only hiring Objective-C developers and not Swift because that tells me the company doesn't want to adopt new technology. 
Depends on the company, if you go after something that pukes new products constantly, you'll do fine, but if you go to a bank or something, I don't think they will give up on their existing OBJ-C code... The company I work for has apps done with obj-c, but everything new is done with Swift.
This isn't the right place to ask about this. Swift implements OOP in a similar way to the most commonly-used OOP languages like Java or C#. You can learn about OOP with examples in any common language and apply it to Swift easily. A quick Google returned this: https://www.raywenderlich.com/81952/intro-object-oriented-design-swift-part-1 Pay particular attention to the benefits of separating code by *responsibilities*.
Your question is vague and if you don't know much about swift or programming in general this wouldn't be the place to start Nonetheless Ray wenderlich has some great tutorials on this, [here's one by Ray Wenderlich](https://www.raywenderlich.com/122148/firebase-tutorial-real-time-chat) using Firebase as an example but he also has a socket based one for uploading to your own personal server if that's what you wanted 
One of the first exercises in Stanford's itunes u course (I used the 2015 version, I expect the 2016 version to have the same core elements) is making a calculator. The instructor builds and explains a basic calculator and the students have to extend it with more features. It is in no way a course on OOP, but seeing how a calculator is made step by step might give you some ideas for your tax calculator
I would expect a beta language to have no version or below 1.0. If you throw at me a Swift 2.x I'm going to expect something better than a beta.
You may be experiencing a bit of a "Why pay seniors for their old knowledge when less experienced folks do fine in a 2 year old language" phenomenon. Or, the "senior" listings you're looking at are too title bound, and you need to be looking at some more "engineer" ones that don't have the senior modifier, then work on salary negotiation. Only API/library publishers seem super keen on staying away from Swift on the business side.
I'm not sure that's that the best approach, because that could get out of hand quickly due to the memory concerns, probably use a ui collection view with paging enabled instead. Have each cell have a text view with the text of the page inside. How do you plan on separating each page if it's one big text file? I've done something similar but it's not a great solution, it's like count how many characters you want on each page and look for something to have a page break.
But if I really want that page flip animation, is there any way to achieve that with the collection view paging function? 
I don't really care, but you asked for assistance and have bitched and whined at anything asked of you to make life easier for the people you want to assist you. Then the person who invests a good amount of time in providing you feedback gets a reply where *the very first line of your response* asks them if they really know what they're talking about. Basically it's not about pastebin/github/whatever, it's about the fact that you seem so unpleasantly entitled in every single way. So you don't have to *see why you people are bitching* but if you're asking folks for free help maybe you might consider (1) being less jerky when they do and (b) making some vague effort in caring about what makes it easier for people to do something for you.
This definitely coincides with the companies I talked to. They are large, 10-20 years old and api oriented. "Engineer" bound jobs, is a solid advice. Thanks
&gt; Swift is a beta language Ugh I know I am swimming against the current but I hate hate hate that *beta* seems to have no meaning anymore. Swift isn't a beta language unless you're talking about v3. Swift is a *young* language and there's some important features still coming down the pipe. But is it not a *beta* in any reasonable sense.
I have the opposite end of the spectrum - small iOS development company and all new code is in Swift. I am actively rewriting all apps from Objective-C into Swift as time permits &amp; updates permit. So it is both huge and tiny companies going Swift.
By this metric ObjC did not became stable ever: they still introduce new things to it. Swift is production ready. We've been shipping production code in it for a year or so, all new code is in Swift. Yes, we will have to migrate to Swift 3 and yes, ABI stability is not there yet, but the former won't be painfull at all (already tested), and the latter does not matter in our case. 
Here's the thing. You said a "it's not about pastebin/github." Is it in the same family? Yes. No one's arguing that. . As someone who is a scientist who studies pastebin/github, I am telling you, specifically, in science, no one calls Pastebin and Github pastebin/github. If you want to be "specific" like you said, then you shouldn't either. They're not the same thing. If you're saying "pastebin/github" you're referring to the taxonomic grouping of uploading sites, which includes things from Pastebin to Github to Megaupload. So your reasoning for calling Pastebin and Github a pastebin/github is because random people "call them whatever?" Let's get Facebook and Google+in there, then, too. Also, calling someone a bitch or a jerk? It's not one or the other, that's not how taxonomy works. They're both. A bitch is a bitch and a member of the Entitled family. But that's not what you said. You said a pastebin/github is a whatever, which is not true unless you're okay with calling all members of the bitch family bitches, which means you'd call Facebook, Google+, and other websites whatever, too. Which you said you don't. It's okay to just admit you're wrong, you know?
Even the legacy argument is not that strong, you can easily use Swift with your ObjC apps, every new class I add to existing ObjC apps is written in swift, the only time I use ObjC now is making fixes/changes to existing classes
It isn't *called* beta, but it sure behaves like beta. The language is constantly changing and the compiler is pretty buggy. That's very "beta" to me.
Look at MVVM &amp; VIPER. Look at what aspects of your VC can be refactored to: * Model &amp; cross model behavior logic * View presentation adaptors (view models) * Component views * Workflow management A neat pattern to help with workflow management is encoding the workflow as an explicit state machine. Briefly described in this WWDC video: https://developer.apple.com/videos/play/wwdc2016/419/
Wow.
&gt; it won't accept NSDate for getevents Are you passing it the two NSDates it requires, not just one? &gt; public static func getEvents(startDate: NSDate, endDate: NSDate) -&gt; [EKEvent]! { 
You want container views. You can drag them into normal views just like buttons or labels, and it'll automatically create a new view controller (scene) with a segue attached. That said, also use MVC as it's common and useful. 
`updateBuildNumber`
OOP finally clicked for me when I implemented a `RationalNumber` class. Implementing a `ComplexNumber` class also works in much the same way. The best part about implementing one of these classes is that it's pretty easy to wrap your head around what these things are, outside of programming, much like you can wrap your head around what an integer or a string is... and eventually it just clicks.
Some places to start. http://khanlou.com/2014/09/8-patterns-to-help-you-destroy-massive-view-controller/ https://github.com/andymatuschak/refactor-the-mega-controller https://www.youtube.com/watch?v=8bZh5LMaSmE (Ruby language, but you should watch it anyway). 
Trial by fire. Pick something you want to do. Make it small. Make the criteria clear. Write the code in a Swift playground. Get it working. Then, for feedback on improvements, get it reviewed. Post it here, or somewhere like http://codereview.stackexchange.com/tour and get feedback on what you've written.
How come I can only upvote your reply once?
1&gt; Swift is in some ways post OOP. 2&gt; OOP is a lot heavier sounding than it really is. 3&gt; The OOP that Swift has is in some ways, less capable than the OOP that Objective-C had 4&gt; Protocol Oriented Programming is far easier to maintain than object hierarchies in your own code. You will see tutorials talking about stuff like "mammal inherits from animal, cow inherits from mammal". While you certainly can subclass a UIKit class to implement something...don't make your own object hierarchies. 5&gt; Learn to make operations...it will be easier than sifting through 99% of the dross that is OO thinking from the last 20 years, and will be easier for your procedural mindset to get.
I get that same error. A couple of posts on StackOverflow pointed to missing synthesiser files yet the synthesis always works for me. It appears to be negligible.
I started working on a publishable version of a framework for working with arbitrary physical units. You can have a look at it [here](https://github.com/Infinisil/SwiftUnits), but it's not done just yet.
I'd be interested in hearing more about your third point. &gt; The OOP that Swift has is in some ways, less capable than the OOP that Objective-C had
That's a lot of lines of code in a very short time span. For comparison sake, since January, I have been leading a project that has had between 7 and 10 developers at all times. Counting *all* lines, it is just over 32,000 lines of code, mostly Swift. Counting just the relevant lines of code (ignoring white space &amp; such), it's just under 22,000 lines of code. These numbers do not account for any of the 1st or 3rd party libraries we are pulling into the project.
Thanks for your comment! I agree, there is no point of trying to apply a paradigm just for the sake of itself. The reason I switched to the functional style was to push the modularity a bit further. For example if you want to test a function by itself, using a mock repository, it’s easier to do that if the function isn’t dependent on an instance variable of a class. Is it worth it to code this way in general? It depends on the project, and also if Swift evolves in a direction that would make it less tedious. 
Does this mean that swift apps can run on windows? might be a stupid question 
Go find an old copy of the Tao of Objects. I recall it being a good philosophical overview of objects.
Did you install it or was it pre-installed? If you installed, did you just follow the instruction on Swift.org?
Because it's just one word. If I'd barfed up six paragraphs of word salad you'd have gotten a second vote.
About the function that takes a closure parameter (without a "@noescape" attribute), from the caller's point of view, it doesn't know if `completion` is called before `thisFunction` returns of sometime later, for example after a network request, or after a long calculation in a background thread. A functions that simply returns a result can't do that (except when they can :^) look into Promises aka Futures). Also though, the function that returns a result does that exactly once (assuming the function doesn't crash, or exit the calling thread or the program as a whole), whereas the closure parameter can be called many times, or no times.
True. But how do I fix the delay?
[removed]
Technically. Still needs some improvement.
doh. 
OO as was designed back in the olden days was about message passing, encapsulation, and, to some degree, simulation. C++ was decried by many of the OO people who came from Simula, Smalltalk and others. It had this non-message based ontology approach that tried to define things as one thing and one thing only (well truly, they tried multiple inheritance first, but that was a giant clusterfuck). Swift uses this non-message based ontology approach of classes and subclasses like C++. It also has a lot of protocol based stuff...but that's not precisely "OO-Certified" either as lots of it really breaks some of the encapsulation of state stuff that people were going coo coo for cocoa puffs for back in the day. The message passing style of OO has the advantage of soft compliance, and dynamic understanding of messages. I am not desiring for us to go *back* to Objective-C by any means, I'm just saying Swift intentionally goes lower power and de-emphasizes object oriented programming, instead going for immutable value types, protocol based programming, functional programming and things of that nature. Swift aint C++, but it aint Smalltalk anymore either.
How? I just installed the update and came to /r/swift wondering exactly this.
Run swiftc like so: `xcrun swiftc`. Swift tends to not work if it can't find the Swift libraries, and your best bet to have it find its own libraries is to use `xcrun swiftc`.
I have a tabbed application with different data sources. I don't have multiple table views in one controller. So I have a couple of table views all over the storyboard and there will be more. I just thought it might be why I can't access it via &gt;tableView.
"Use of unresolved identifier 'tableView" means you haven't connected the tableview you want to your View Controller, or you've connected it but have named it something different, without seeing any code I'm just guessing
Okay, how do I connect it? And where do I find its name if I did so? I wasn't really sure what I was doing but it works good so far.
The skill here is understanding frameworks and reading documentation. If you've only been doing that for 6 months, don't worry! It takes a long time (a few years of **full-time** work, maybe), and you will probably read documentation for many languages and frameworks before you get the knack of it. Once you do, you'll find it is very powerful to be able to understand the source documentation and find things yourself. You'll also find that no documentation is perfect or complete, and you'll still need to search blogs and tutorials to find random things that don't make sense :)
Don't let yourself. Figure it out. If it takes you four hours to do something that would take 20 minutes if you looked it up, do it anyways. Figuring things out isn't all about intelligence, it's also a developed skill. Not to mention that the confidence in yourself to solve these types of problems is also something that needs to be developed. Think of it this way, let's pretend your brain is like a computer. How intelligent you are will be how fast your computer is. Your problem solving skill is how good your algorithm is. You can give a super computer an order 2^n problem and it will never make progress. You can give a TI84 an order n problem and finish it instantly. Don't look things up, you currently have a 2^n algorithm. Train it. 
build build build. only by doing real projects will you get the hang of it, build for fun, build out of boredom, build professionally. and always look up online, for finding the best-practice and latest development.
Thank you, I have resolved the problem. I tried to reference tableview outside of its class, I thought I should write the code in View Controller's prepareforsegue method.
Interesting. Maybe because I'm on my own I don't have to spend much time collaborating with other devs. The design time wasn't included since I did that beforehand. I also didn't have to spend time writing web APIs because I recycled most of them from a previous app (adding a few changes)
How long is the delay for you? For me it's a second at most.
Don't forget the definition of Cocoa sometimes includes Foundation as well, and most of Foundation is present in swift 3...
You're right. I gave it a better look and i think it's a Xamarin monster.
ok, I am going to give this a shot. There are two parts to Object Oriented Programming that I think are most important to understand. The first, and what I would argue is more important to understand, is that OOP is a method for organizing code. If you want to read more on this I would suggest picking up ["Clean Code")[https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882] but essentially is much easier to read other people's code (or your own after you have written it) when we all try and follow the same set of rules for organizing our code. So, for a tax calculator, you might have something like: class Accountant { //Here is where I can abstract all of my special tax functions func calculateTaxImplications(income: Double) -&gt; Double { //do some calculations } } By doing this you are signaling to everyone reading your code that there is one good place to see all of the math being performed. So if for some reason the result is wrong, you can more easily find it. While you can achieve something similar by just breaking your code into different files, the class system and the dot syntax is a great way add context to what you are doing. var accountant = Accountant() var myTaxBurden = accountant.calculateTaxImplications(myIncome) Simply by trying to implement this method for code organizing, you will start to understand the benefits of why it is a good idea. The first time I really started to understand OOP in this way was re-writing an application to try and apply more OOP concepts, I was able to debug this code in about 1/2 the time I was experiencing with just writing procedurally simply because it was more organized. The second piece of OOP is reference semantics, two big words that get thrown around a lot lately. Essentially, every time you define a variable, you block off a section of memory. Back in the day, when you only had 4k memory to work with, this was a rare commodity. If I had a value that I needed to refer to a bunch of times, I could just look at the correct section of memory and get that value, even modify it with some new information but it would still be contained in the same block of memory. That last sentence is what all classes have in common, they are essentially a much easier to understand pointer to an address on your ram stick. class TenFourty { var grossIncome: Double? var fedTaxesWitheld: Double? } class ViewController { var tenFourty: TenFourty() func userDidEnter(income: Double) { TenFourty.grossIncome = income } func userDidEnter(fedWitholding: Double) { TenFourty.fedTaxesWitheld = fedWitholding } } While the above is an incomplete example, I think it illustrates how this might be valuable. The benefit here is that my TenFourty object can be changed from any lower scope, and shouldn't impact my memory usage. That last piece might be confusing, feel free to ask any questions about it but really it is much less important to understand than the first piece. 
The 6 months I referenced doesn't include design time, nor are any of those developers writing API. This is 7-10 iOS developers who have been writing code since January. It has fluctuated between 7 and 10, but if we assume the minimum of seven at all times, we're talking an average contribution of 3,142 lines of relevant code per dev in that time span... of 8 months, so 393 lines of code per dev per month, maximum. Now, what this number does not include is any tests that are written around the code we write. But it's also important to note that there is plenty of time spent reviewing and reducing code. Plenty of my own commits actually reduce the number of lines of code. I'd guess with some review, we could probably cut down the number of lines in your app too. ;)
Adding some sample code of what I'd expect to see out of a rational number class (it could very well be a struct in Swift too, but I think you'd learn the same lessons either way). let oneHalf = RationalNumber(numerator: 1, denominator: 2) let fiveEighths = RationalNumber(numerator: 5, denominator: 8) let nineEighths = oneHalf + fiveEights let oneThird = RationalNumber(numerator: 1, denominator: 3) let threeEighths = oneThird * nineEights let eightThirds = threeEights.reciprocal let eight = eightThirds.numerator let three = eightThirds.denominator print(\"(eightThirds)") // prints the string: "8/3" 
At 7500 lines, your project is not too simple for tests.
These have to all be scrolled together though. No matter what, your suggestion is a completely different UI.
When you get around to 'em, check out [Metova Test Kit](https://github.com/metova/MetovaTestKit).
Thanks, that actually looks really useful - especially the constraints test as I animate those around a fair bit. 
Many report the same experience with Visual Studio and Intellisense. There's a similar level of IDE support here, but these frameworks are huge. As long as you know how to reference information and recognize bad code when you see it, you're on a good path. 
This is relevant to what I've been doing over the summer
Please explain. 
Yep, this is EXACTLY me at the moment, just been doing tutorial after tutorial. I go to write even the most basic of functions and can't remember them fully. Although I find the more you fight through and do your own code, the better you get. Good luck!
&gt; this André is kind of controversial on the topic, but fixed this later on his amazing intro. &gt;UPDATE: there's been a lot of confusion around the terms Functional Reactive Programming and Reactive Programming Sorry, my bad. I guess this sort of confusion happens easily with new paradigms in computing. Replace all the occurrences of "FRP" with "RP" in the tutorial. Functional Reactive Programming is a variant of Reactive Programming that follows Functional Programming principles such as referential transparency, and seeks to be purely functional. Other people are better at explaining this than I am. Anyway, to be succinct: Rx is not FRP in the original concept. This issue also hits RAC and there's a [discussion about it on Github](https://github.com/ReactiveCocoa/ReactiveCocoa/issues/1342).
Thanks!
So basically it needs either a huge community behind it or someone else like Microsoft or google to pick it up
So basically it needs either a huge community behind it or someone else like Microsoft or google to pick it up
Yeah no it's just the Windows Subsystem for Linux running the Swift for Ubuntu binary... no native Swift for Windows yet
Thank you so much for your response. Kindly let me know the correct way. So, how do I make sure that the first controller has no reference to it and gets deallocated? Thank you again for your response.
You have strongly captured self in your block right there ? This will keep a retain on self, add "[weak self] in" after the first curly brace and a "?" On the self inside the closure.
I have removed that block and now my code has just this line: self.performSegueWithIdentifier("TestSegue", sender: nil) 
Can you show some examples of previous work?
trying to submit my app
I don't have anything myself as I kinda just picked it up but a quick google shows this which I skimmed and seems good and swift specific as it's a little different in obj-C http://krakendev.io/blog/weak-and-unowned-references-in-swift
I believe the problem may be the x ++ The ++ operator has been dropped from Swift. Please try: x += 1 Also, a suggestion for future posts: give the exact error message and show the line reporting that error message when asking for help. That way someone who is willing to help can find the error more quickly.
Can you explain?
Keep practicing &amp; don't give up. Hard work is more important than any perceived natural ability.
The developer doesn't make every decision. Your points all come purely from the perspective on working on small, short-term projects where the devs are making 100% of the product decision. It doesn't make sense to rewrite a 50,000 line app in Swift when it works perfectly fine in Objective-C. Whether or not it makes sense to start writing new Swift code in that project depends a tons of factors, but to outright say you should always write new code in Swift in every scenario isn't going to be the right approach. It's just not. And yeah, supporting old iOS platforms sucks, but and it certainly doesn't make sense to launch a new project supporting iOS 6 or iOS 7. And the overall iOS user may be only 3% on iOS 7, but individual apps see difference usage percentages. Regardless of anything, the fact of the matter is, a product team can put a tangible dollar amount on the income they make from users on any particular version of the OS or device type, so if you want to make an argument to them for dropping support for that particular thing, you need to make it from the perspective of how much it costs in terms of development time. Yes, it costs extra engineering effort to support, but does it cost more than what you're giving up in supporting it? (This isn't a question for you to reply with an answer to. It's a question that product &amp; engineering teams work together to find the answer to when they're deciding what versions to support, whether to make a universal app [iPhone + iPad], whether to also support Android, etc., etc., etc.)
I will give you a link to a repository once I get started with my idea?
Alright, I'm interested, I'm not sure how much different your approach could be
Yeah sure is a fire base project that you can upload images and and rate others while others rate you something simple to start dev
Let me add some info: it's our first project which simply let's users add images so other people can vote on it. People logged in will get a set of images where they can like or dislike the image (Like Tinder). Also has a little profile page where it will show a little fire, poop, or neutral icon based on the score for that image.
Awesome! I (the author of Hacking with Swift) have just started working on converting the whole series to Swift 3. It will take some time, so I do suggest you carry on with the Swift 2.2 version for now. Let me know if you hit any problems!
There's two fundamental operations here : 1. GET 2. SET I think you'll be find with just one class. It also depends on how you're saving the data.
i'm saving the data to local/caches
Given that the Rey Wenderlich guide is primarily written with the target audience of people posting code to blogs and website, I recommend checking out [Metova's Swift Style Guide](https://github.com/metova/swift-style-guide) as an alternative option.
You should have a networking layer that does networking operations. You should have a persistent layer that does persistent operations. If you want a sync layer, the aforementioned layers probably live underneath the sync layer.
That's a rather vague question... Do you know programming? Have you made any mobile apps before (iOS or Android)? Are you familiar with MVC? Do you know ObjectiveC or swift? If yes then just apply on job offerings on local startups, as that's usually the best way to start out. If not then go on Lynda.com They have great courses for pretty much everything.
constructive criticism of the code
Thank you!
Get a mac. The only way you'll be able to get your apps to run on a device is to compile and build it through a mac.
When I started, I got a mac mini. They're shit, but get the job done, and they're the cheapest option you have, around $500.
Try being even more lazy and it will come eventually.
Super vague question gets a super vague answer: get a job as an iOS developer The definition of "professional" is "get paid for it", so find somebody to pay you to do it.
I'm doing that already 
Attempting to update existing photos project to Swift 3 - then trying to submit to the App Store for the first time. Any tips / best practices are welcome! please PM me with any advice! 
What is iOS?
Make it a hackintosh. It'll cost you $30 max
[removed]
thanks!
You could even do something like bagArray = [Bag](count:numberOfBags, repeatedValue: Bag()) as a one-liner if you're just putting in new bag objects.
why would you need two separate sessions of AVCapture?
I would expect a class called `Player` to most likely be a model class. You should probably call it `PlayerNode` instead.
Attempting to keep a swift library for CouchDB up to date with swift developer previews.
/r/iosprogramming
You hit upon an important difference between learning a particular programming language and learning to program *in* a particular programming language. If today you were to become a grand master of the entire contents of the Swift book, and a power user of Xcode you would at most have done the former. To become "full stack" (as you say - frontend, backend, databases, etc) you need more than familiarity with tools, you need to become familiar with the platform. That means learning various Apple and 3rd party-provided frameworks and adapting their ideologies to fit a product you want to produce. tl;dr it depends on what "learning" means here.
Here is a full example, which I used. https://gist.github.com/mchirico/50cdb07d20b1b0f73d7c
aha. Never knew that CGAffineTransform does that. Thank you.
Looks like [you need to implement NSDiscardableContent](http://stackoverflow.com/questions/33811996/nscache-emptied-when-app-enters-background). (Did you try googling? That page was the very first hit for "NSCache background".)
I mean what would be the point of learning how to use something that will be gone in 6 months? There's more options than just Firebase but that's a great place to start...depends on what kind of project you are tackling. 
Well I signed up for the best rated course of about 22hours of video from udemy and he teaches using Parse. Although, he is coming out with announcements saying there are many ways to transfer the come - along with parse releasing opensource. So im guessing its still worth it to start the course because learning parse or other systems are similar.
I've never used Parse, but I agree it doesn't seem like a good use of time to start using a service that's shutting down in less than 6 months. My concern with Firebase would be that they seem to be another proprietary service. Google has shown they're perfectly willing to shut down services, with no replacement or migration path (as is certainly their right). So the question is: what kind of thing are you building, and what are your priorities? If you're building something that you plan to scale up, and run for a while, I'd look at generic Postgres or MySQL or \(pick your favorite database) services, and build against that. Or possibly build against a service like Firebase today but be sure to keep a solid abstraction layer so you can get off of it later without too much trouble, when you outgrow it, or when they shut down. I've worked at companies that went the "save time by just using all these cloud API services!" route, and on a timescale of 6-18 months, it seems that around 50% of the services either shut down, or pivoted. Looking back, there don't even seem to be any good indicators of which would stick around. Size, funding, popularity, whatever -- even the ones that seemed like good bets (like Parse) shut down as often as the little guys.
It took a bit of effort to parse this article (code not properly formatted, non-native English), but I think the TL;DR of what they're trying to say is: You can use the same `@IBAction` in multiple places, with a different `tag`, and then switch on `sender.tag` in the controller.
that's true , but i want to be like those developers in github they have wonderful big complicated repositories I just wanna know how they get into this level of profession . that's all 
Having a big complicated repo on GitHub has nothing to do with being a successful professional developer.
This really has nothing to do with either Swift or notifications; you are having trouble with calendar/date manipulation, which is all part of Foundation. Questions regarding that are best asked in /r/iOSProgramming. A small suggestion: boil your problem down to the essence, excluding extraneous stuff, then take that essence (in this case the calendar/date stuff) over to a brand new playground. And do some experimenting there until you understand what is going on, and can get the answer you want. Then copy the essentials back to the app and fire it up.
Self host? I know it's not in the set of answers.. but honestly, a year down the line, you'll have gained a much deeper knowledge of what you're really doing.
great explanation, thank you
but I think it's a sign that i have pretty good knowledge and experience 
Learning the framework is different than just learning the language. You can know English, but simultaneously not know how to describe the building of a house in English. You need to learn the framework; how to manipulate views, get data from users, communicate with APIs, save data long term. Learning Swift will show you how to do some of these things by example, but you will stumble a lot building your first apps until you get really familiar with the framework (ios, cocoa touch, etc...).
Try adding the year? yyyy might have something to do with it.
Indeed very mobile unfriendly
Where are the tests?
I've never had a one work as good as a Mac running OSX, I usually prefer Linux if I don't have a Mac. Glad to see you found a setup that works.
I've never tried Linux because I've heard you HAVE to get a driver for EVERYTHING
I'm probably not the target market for an iOS book. MapKit is one of the next things I'm going to look at, but I'm a Mac developer, not an iOS/tvOS/watchOS/toothpickOS/whatever developer. Better to do a good job on an iOS book, than spread yourself too thin trying to please everyone.
Now that I'd like to see sometime. 
All of the content was re-written from scratch with the help of our 600+ contributors in Slack. The response has been very positive so far. :) The last post we made here was two months ago and this one has already gotten more likes than anything you've posted in /r/swift. I think we know what is worth a Reddit post and what is not, but thank you for the unsolicited policing. And yes, the docs don't have a mobile front end yet. We're working on that this weekend actually.
https://media.giphy.com/media/pQmWjYrz39YAg/giphy.gif
Where to you set the cornerRadius (I expect viewDidLoad)? If you are using AutoLayout the width will be 0 in viewDidLoad. You can Subclass UIView and override layoutSubviews() with func layoutSubviews() { super.layoutSubviews() layer.cornerRadius = bounds.size.width/2 }
I think the best solution would be to either 1) use a stackview which contains all the views, and then dynamically show/hide the views. Stackviews can even animate this change. StackViews were introduced in iOS 9, but there is an open source project called TZStackView which backports this to iOS 7+. You could also not use a stack view and just put the constrains in manually, in which cause I'd add all the subviews, and their constrains, and then dynamically change the height constraint of the views you want to hide. After you change constraints and want to force the new changes, call setNeedsLayout() followed by layoutIfNeeded() In general though, I think the problem stems from trying to add the views as and constrains dynamically - personally I think it's much easier to add all the views up front, and then dynamically show/hide instead of dynamically add/remove
EDIT: WOW! Your suggestion worked! I haven't seen anything online for a suggestion to override layoutSubViews() but it worked perfectly. Thank you so much.
You have to override layoutSubviews() and call your custom init.
&gt; The last post we made here was two months ago and this one has already gotten more likes than anything you've posted in /r/swift Wow. Someone needs both a lesson in logic and some thicker skin. If you can't handle honest, helpful commentary (and you've demonstrated that you cannot) — and your submission is nothing more than an ad — buy an ad so that you can turn off comments.
This is great! I love small but useful projects like this!
These are durations, current? NSTimeInterval? In which case you should store them as Double in Core Data. NSTimeInterval is just an alias of Double anyway. To sort them, simply sort them as you would sort any array of Doubles. 
Hrm, I'm still a little confused. This is my updateLapTime function: func updateLapTime() { let currentTime = NSDate.timeIntervalSinceReferenceDate(); var elapsedTime: NSTimeInterval = currentTime - startLapTime; let minutes = UInt8(elapsedTime / 60.0); elapsedTime -= (NSTimeInterval(minutes) * 60); let seconds = UInt8(elapsedTime); elapsedTime -= NSTimeInterval(seconds); let fraction = UInt8(elapsedTime * 100); //milliseconds let strMinutes = String(format: "%02d", minutes); let strSeconds = String(format: "%02d", seconds); let strFraction = String(format: "%02d", fraction); displayLapTimeLabel.text = "\(strMinutes):\(strSeconds):\(strFraction)"; } Which value should I take and store in Core Data? Ideally one where I didn't have to make any additional calculations to when bringing it back out, other than formatting. EDIT: I am thinking use the initial elapsedTime variable from: var elapsedTime: NSTimeInterval = currentTime - startLapTime; However, I feel like I'm still doing it wrong?
So you want to store the number of seconds (and milliseconds) for each lap, yeah? In which case you don't need an NSDate, you only need an NSTimeInterval. Which is what you're getting in that function. You want to take that `elapsedTime` value and store that in Core Data as a Double (because NSTimeInterval is just an alias for Double). You're also doing a fair bit of unnecessary work in that function, which built in APIs can do for you. First up, you don't need to bother with the reference date to calculate the elapsed time since startLapTime. Just do this: ``` let elapsedTime = -startLapTime.timeIntervalSinceNow ``` Next up, you don't need to break the seconds apart to get a string representation. You can just use NSDateIntervalFormatter. And to diverge from giving simple code corrections, I would also recommend that instead of calculating and storing lap durations, you would be better to store lap start and end dates. So for example you might have a `Lap` Core Data class, with NSDate properties of startDate and endDate. Then on that class you would have a method which returns the lap duration, thus: var duration: NSTimeInterval { return endDate.timeIntervalSince(startDate) } That way, for every lap that you store in the database, you have a record of the lap's start date and end date, and the duration can be calculated from those whenever it's needed. 
ahh, ok. Thanks. I'll attempt to implement this now. Also I'm uploading the times to a central server. Presently I'm sending them to the server in a timestamp like: "00:02:53". Should I be sending them to the server in this format? Or should I be using something more granular such as the value of "duration" (from your sample code)? The server will be doing some calculations on the value. 
I'm getting there, I think lol. So from the lack of documentation I can find on NSDateIntervalFormatter it looks like I cannot set a custom format, like I would with NSDateFormatter.dateStyle. The "timeStyle" property of NSDateIntervalFormatter only provides these options: http://nshipster.com/nsformatter/ https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSDateIntervalFormatterStyle/
Ah, I've now switched to NSDateFormatter. My code presently looks like this: let elapsedTime = -lapStartDate.timeIntervalSinceNow let formatter = NSDateFormatter() formatter.dateFormat = "H:m:ss.SSS" let f = formatter.stringFromDate(&lt;#T##date: NSDate##NSDate#&gt;) print(f) My problem is with this: formatter.stringFromDate. stringFromDate expects a NSDate value, but elapsedTime is NSInterval. I want to convert this value to NSDate, but is that doing it incorrectly? 
Like so: let elapsedTime = -lapStartDate.timeIntervalSinceNow let formatter = NSDateFormatter() formatter.dateFormat = "H:m:ss.SSS" let f = formatter.stringFromDate(NSDate(timeIntervalSinceReferenceDate: elapsedTime)) print(f)
Yep. Unfortunately NSDateFormatter doesn't have a method for taking an NSTimeInterval, so you have to wrap it in an NSDate. Uhm... But just glancing at my own code for doing something similar, I've got this String extension that I use, which actually uses NSDateCompotentsFormatter: extension String { init(duration: NSTimeInterval, style: NSDateComponentsFormatterUnitsStyle = .Full, maximumUnits: Int = 2) { let formatter = NSDateComponentsFormatter() formatter.maximumUnitCount = maximumUnits formatter.unitsStyle = style if duration &lt; 60 { formatter.allowedUnits = [.Second, .Minute, .Hour, .Day, .Month] } else { formatter.allowedUnits = [.Minute, .Hour, .Day, .Month] } self.init(format: formatter.stringFromTimeInterval(duration)!) } } I use that to produce human readable strings for NSTimeIntervals. You can get different display styles based on the NSDateComponentsFormatterUnitsStyle value you pass. For the style you were wanting above you'd want to pass use `Positional`. The wild and crazy world of NSFormatters :) 
What does that mean? To reverse something it has to have a start and an end. "Real-time" implies ongoing. 
edit: nevermind, checked the github :p
There are plenty of options out there. I've worked with [Fabric's Mopub](https://fabric.io/kits/ios/mopub) and it's really simple to set up. I'm also currently working on an app with [Google's AdMob through Firebase](https://firebase.google.com/docs/admob/) and I found it even easier
But still not as easy as the iAD. Its really bothering me
I've used Google's AdMob for my first app and the set up has been easy. What's the difference between Fabric and Google's options?
Does this go in the class where I have the problem and do I need to put anything in the (...)?
Honestly just trying to be helpful. &gt;_&lt; I definitely don't want to spam Reddit but it looks like this post got a decent amount of up votes. If it just got down voted, I would know not to post something like it again. That's all I'm saying.
This is not a great solution because it returns a new GameAPI each time. Either do lazy var or make it a explicitly unwrapped optional, var gameAPI: GameAPI! And initialize it in init
?
Lazy load the variable and add the it will work. 
so just: var gameAPI = GameAPI(noOfBags: 10, noOfTokens: 3) I just find it odd and I was going to do something with user input also so I just find it quite odd that this is not working
My banner ad through Google/Firebase requires exactly 5 lines of code: 1. import GoogleMobileAds 2. @IBOutlet var bannerView: GADBannerView! 3-4-5. bannerView.adUnitID = "my-personal-adUnitID" bannerView.rootViewController = self bannerView.loadRequest(GADRequest()) Not sure how easy you wanted it to be
The initial property values are a part of initialization phase. During that phase you cannot access properties, only set them. gameAPI tries to access noOfBags property during initialization phase.
You can set let properties in init.
You can't just import GoogleMobileAds. I have to install something first. But thats probably the easiest way now.
Disclaimer: x-post from iOSProgramming but thought that might be interesting here as well
http://mikebuss.com/2014/06/22/lazy-initialization-swift/ Read up on lazy variables 
The best part about iAd was how it was integrated with the rest of iTunes Connect. To use AdMob, you still have to register for AdMob, register the specific app, install the SDK (admittedly easy using CocoaPods), add an ad banner to your interface, then input those 5 lines of code. Compare that to the iAd process of simply putting an ad banner view in your interface and being done.
Small thing, but it would be nice if you make the email address box an input[type=email] so that we get the nice email address keyboard on mobile. 
I'm pretty sure your post there got deleted or something (it's not showing on the frontpage). But here's my comment I made on that original post &gt; First library in the list: CloudRail "List" comes from......cloudrail.com :/
Just deployed the mobile front end! Let me know what you think. http://docs.vapor.codes The "menu nub" is a bit non-standard, but it provides quick access to the other sections even if you've scrolled far down a page. 
Research into implementing Instagram like filters, animations and face detection for a client app.
/r/iOSprogramming
i'm not OP. Why would you recommend CSV vs say using Core Data (new to iOS dev)
Core Data can be used, but initially, you would have to port it into Core Data somehow. Not sure about the experience level of OP, but there are several ways going about this. Since it's a quiz app and not creating user generated data, Core Data _could_ be overkill. If OP intends to download data in the future from the network, they could use CD.
Here's something -- https://www.appcoda.com/core-data-preload-sqlite-database/
What are you looking to do with Swift? App development or just fooling around? If app development, Mac VM. Otherwise, Ubuntu.
Most people are looking to make apps but some people just wanna play around. By the sound of it, you'd probably have a better time with the Mac VM.
I'd get a second HD and dual boot into [OSX86](http://tonymacx86.com/) That's what I do and I can even publish on the app store, and do.
/r/hackintosh would disagree with you strongly, as would the hack i've been making apps on without issue for longer than swift has been around. With the right hardware it's barely anymore complicated than setting up windows or ubuntu.
Hackintosh is what I linked in my post correct? Is that the correct version?
I honestly don't know why the post doesn't appear there anymore. We (as CloudRail) put in a lot of work to research and write this article and more than 80% of the users liked it. So I don't see any reason why to delete it. And come on if we invest a lot of time to write a huge list of good libraries, of course we'll put our own in there as well. Which is complete free for developers by the way. 
One advice about "not copying": when you're following a videos/lectures, don't just copy it. Make own things – like changing variables names, changing some examples parts or behaviour, etc. Hard to explain, the main thing is not to blindly enter the same code as in lectures, but to understand what each line exaclty do, and what will happens if you change any argument/option/etc. E.g., making a calculator app? Ok, but make own UI with different elements locations, add few more buttons for advanced calculator methods, and so on. Or even try to make different app – not just a calculator, but, say, loan calculator with appropriate options.
So can I assume that **totalTime = time * occurrences** ?
Definitely this. I'm just getting started with programming and EdX has free courses from MIT and Harvard on Intro to Comp Sci. It's a great place to start as they provide the full lectures and coursework for their actual classes. 
Continue ask questions. It's a good start. I haven't seen the Stanford lectures so I can't help you there.
I know what you mean, a few months ago I had the same thing. I now think that the Stanford lessons are a bit more advanced for beginners at least than one might think. So I started watching tutorials and read more about Swift and about specific language features. I started building a few really basic apps and improved myself 'in practice'. Later on I went back to the Stanford videos and noticed I could follow the code with ease and actually understand what the teacher is doing. My advice; take a step back and start with more basic material. 
You got it, man. Thank you for your feedback.
You have a "strong OOP" experience? Because that's repeated a couple of times in the intro course.
This. One of the things I've discovered about learning that I wish I knew years ago was that to truly learn means to play with ideas--much like how a child might learn to throw a ball but then innovates with different ways to throw the ball; bounce throw, curved ball, etc. But keep in mind these processed are self-discovered. edit: In short. To learn a concept. You can't simply "learn" them and move on. Figure out different ways to do the task. Etc.
You want [`distanceFilter`](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/#//apple_ref/occ/instp/CLLocationManager/distanceFilter) at [`kCLDistanceFilterNone`](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CoreLocationConstantsRef/index.html#//apple_ref/c/data/kCLDistanceFilterNone), and [`desiredAccuracy`](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/#//apple_ref/occ/instp/CLLocationManager/desiredAccuracy) set to [`kCLLocationAccuracyBest`](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CoreLocationConstantsRef/index.html#//apple_ref/c/data/kCLLocationAccuracyBest) or [`kCLLocationAccuracyBestForNavigation`](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CoreLocationConstantsRef/index.html#//apple_ref/c/data/kCLLocationAccuracyBestForNavigation). Or just look at the docs behind those links and decide what you actually need. But note, cranking these values up like this will drastically kill your battery life. I recommend by starting with deciding *exactly* what you need first, and then try to figure out the minimum amount of GPS accuracy that will get you there (in order to maximize battery life).
It's not impossible. You need to make sure you're not `import`-ing frameworks that will only run on OS X. And ultimately, you're going to need to test it on Linux.
nah, I was serious but yes you are right. I read it again and the time is already cumulative on the left side. I am asking because I have some trouble with my project. It takes like 10 minutes to build. Thanks.
Yeah, it seems like the only bottle neck thats present is the HDD. Adding a SSD should speed up your Mac Mini by a lot, especially while compiling in XCode.
I'm sure it's possible to do with Xcode but if your really just looking for a complete IDE experience while developing Swift for Linux, consider JetBrains CLion with the Swift plugin. It's relatively mature thanks to benefiting from all the work that goes into their AppCode product.
Is there a difference between running a VM or having a separate hard drive? Can I do the VM route?
On a side note. Do any of you have any complaints about the developer program or anything you wish you knew before you started it?
Shit eh so maybe i should sell it for a bit more since ive upgraded the ram and then try buying a newer model. i might just stay though and deal with it for a couple years.
I am not a designer, but to kind of help you along, do you have any more details? 1. What kind of app is this? 2. What design elements are you looking for? 3. What are some app designs that you like / inspire your vision of the design?
i sent a PM 
Just the same difference between having any other OS in a VM vs bootable: less performance and some hardware features may not work. You should be able to do app development from a VM just fine.
I have a 2008 with an SSD and it runs like a champ. SSD made it go from "OMG why do i have this to" a usable machine that runs great.
cool, so where do i grab an ssd to put in it? Do i replace it with the 500gb hdd it currently has? are there any ssd that are external (plug ins)? and how do i know what type of ssd to buy for my mac mini?
It's all about the ssd
You could maybe save new pictures to a location in the server that only you can access. You can then browse through them and approve them, which sends them to whatever part of the server they're going to now. Or you can upload them with an "Approved" value of false and you can change them to true. If you want to avoid having to approve every one, add a reporting feature that can kick them into an approval status
I'm trying to learn a little while playing around with a simple project that uses CloudKit to sync data with that magical cloud thing.
I'm working on a really basic sleep logging app to get a feel for HealthKit and learn more about dates in swift.
Of course it is. They don't have to be build on the same machine at all. Take Alamofire's tags with attached binaries for exmaple https://github.com/Alamofire/Alamofire/releases
I am still very slowing working on my Castlevania: SOTN bestiary. I've never published an app before and this is as basic as I think an app can be. 
The obvious question, to me, is: is this a necessary consequence of the language, or simply an artifact of the current implementation? Is it possible that a future version of the Swift compiler will eliminate the need for tricks like this? There's no obvious reason that I see that properties should be type-checked multiple times, while functions need only be checked once. I'm not the smartest cookie in the drawer, though.
I am working on a solitaire deck building game in Swift. It's currently in beta, and so far, the response has been really positive, with comments like, "This is the game I didn't know I was waiting for." I started the game in a game jam last year, and I have been developing it since then into a full-fledged iPhone app. I am using SpriteKit as the rendering solution, and I am finding it to be really easy to use. I had the base functionality of the cards working quickly. It took me a while to get around to using .sks files to lay out the game screens, but as soon as I did that, things got much cleaner on the code side. I extended SKScene with some special functions for laying out the screens dynamically based on the screen dimensions of the device, and now just about everything is able to be laid out in Xcode's sks editor. I'm finding Swift to be really expressive and fun to program in. Makes iterating on my game's design really efficient and enjoyable.
In addition to what others have noted: - It looks like that CPU has an integrated graphics chip that steals part of the 4GB as video memory, so you're *really* hurting on RAM pressure. - You only have 2 cores. Watching YouTube while compiling sure isn't going to help. I have 4 cores (8 threads), and I can see them all light up when I do a build (and the build log jumps by 8 source files at a time, usually). - Swift uses type inference, and the compiler is still young, so some expressions can take orders-of-magnitude longer than other seemingly identical expressions. Check your build logs to see if you're doing something that happens to be slow. It's entirely possible that your code would be slow even on the newest Mac Pro. In the end, though, you're using the cheapest Mac that money could buy &gt;5 years ago.
Not exactly relevant to your question, but I've never heard anyone say they thought advertisements "looked great" before. Especially iAd.
Starting to learn with a Udemy course, currently doing a super simple timer app
 _ = newTree.map {print($0)} That's not what `map` is for. Use `forEach` instead (or better yet, a regular `for` loop). You force unwrap a lot, such as here: if currentNode.leftNode != nil { currentNode.leftNode = insert(element, currentNode: currentNode.leftNode!) } This one is easy to fix using `if let`. In other instances `while let` can prevent a force unwrap, such as here: while _current != nil { // stuff with `_current!` } As a rule of thumb, if you're comparing something to `nil` using `== nil` or `!= nil`, you're probably doing it wrong. Finally, the `BinarySearchTree` class contains a whopping 32 instances of `Node&lt;Element&gt;`. You can create a typealias with typealias Node = ProjectName.Node&lt;Element&gt; after which you can simply use `Node` instead of `Node&lt;Element&gt;`.
For readability's sake– let tokenCount: Int let bagCount: Int //gives access to game AP! var gameAPI = GameAPI(bags: bagCount, tokens: tokenCount) // here is the issue init(bags: Int, tokens : Int){ self.bagCount = bags for _ in 0..&lt;self.bagCount { self.bags.append(Bag(counter: tokens)) } } Are the tokenCount and bagCount in the GameAPI class or in a class that creates the API?
 I didn't know about .ForEach, thanks for letting me know. I kinda used .map instead of a for-in loop to highlight the fact that the data structure is getting .map for free because it's conforming to SequenceType. Thank you so much for taking the time and highlighting these. I'm fairly new to Swift and these are very helpful. 
Man. That's what we thought but Swift isn't converting it at all. Thanks for letting us know we're on the right track. Edit: Any leads on how to deal with it in a JSON dump?
No... you should be overriding the view's drawRect method. The use of "layoutSubviews" is just used for just that... laying out of subviews during a bounds change, device orientation change, etc. override func drawRect(rect: CGRect) { self.layer.cornerRadius = self.bounds.size.width/2 }
Re-writing one of our apps from Objective-C to Swift. I have the CoreData working + iCloud sync via CloudKit. Just need to finish each part of the UI and then make it look pretty!
An AVL tree is self balancing by definition, nothing special about that Nice work though :D
/u/jrapp told you everything you need to know: it is encoded using Base64. So, time to hit your Google. &gt; '...Swift isn't converting it at all.' Swift is a programming language, not a superhero. Swift will not undertake tasks on your behalf in the belief that it will 'save the day'. Swift is just a language in which _you_ express the instructions the computer should execute on _your_ behalf. If you followed a recipe in English to bake a cake, and the cake looked bad and tasted awful, would you say, 'English ruined my cake'? I don't think so. Either the recipe was faulty or you failed to follow it correctly. 
Well, how do you wanna earn money on your app then?
Yes I did select Generic IOS device and the build failed. The program did not explain why the build failed, I am assuming it was because I do not have a proper device set up but I'm not 100% sure.
An app that lets you keep track of time on projects. Apologies if that's vague, don't want to give too many details.
All fixed! Thank you! 
Fun fact (because I had the same problem when I started and had no idea what was going on): dragging the breakpoint off of the vertical bar like you would an app in the OSX dock makes it 'poof' away. Easiest way to delete them.
If you're new to programming check out http://stackoverflow.com. That is the widely accepted site to post questions and receive answers regarding programming. Many folks on Reddit can help but SO is more setup for Q/A and Reddit is better at general discussion. Hope that helps!
BothamUI is a Swift library.
Oh, I thought the issue was going to be [updating the UI](https://thatthinginswift.com/background-threads/) without dispatching to the main thread. Maybe viewdidload runs on the main thread already, though.
You are welcome. I've actually thought about this before, only now did I make a post asking the admins if this shouldn't be an official rule: https://www.reddit.com/r/swift/comments/4ww3h7/admins_can_we_make_a_rule_that_ios_programming/ Judging by a downvote within the first minute, it seems like it is not a popular opinion. Edit: Do you know if the mods are active on this subreddit? 
I agree they aren't necessarily appropriate here but its not like were getting many swift specific posts. This sub needs to be "anything swift" or it will be a ghost town.
self.score += points
Totally agree that r/Swift should move towards having a more platform agnostic outlook. This has been a worry for some time, because cross-platform Swift needs a space to grow on Reddit: The Swift.org team, while being Apple, have done a great job of making their own presentation platform agnostic. This is consistent with their objective to mature Swift into a cross-platform ecosystem. It would be *almost disrespectful* of their effort for the Swift subreddit not to set the same tone. There's no harm in code fragments that accompany questions having Apple specific code in them but please let the *crux of the questions* be Swift language related and not Apple Framework related. **Edit for clarity**, I don't mean a question should not make reference to Apple frameworks, just that it shouldn't be directly about them. I get that we don't want to become an unfriendly sub by coldly turning away well intentioned posts; but couldn't the mods agree on a friendly enough strategy to 'clean house': educating on language vs. framework while deflecting Apple specific posts in a helpful direction? Sticky post?
Completely agree
Good advice in general, but I can imagine this same question wouldn't go over well in SO. I am happy that this forum is more friendly to noob mistakes. We were all new once. 
Depreciated in Swift 3. Who knows why tho
That's not deprecated. ++ is deprecated.
[Nope!](http://i.imgur.com/1P2oqy0.png) The reason ++ was deprecated was in large part because it's functionality is duplicated by +=, which can do more, and because ++ is mostly used in c-style for loops, which the Swift Evolution community decided are more complicated to understand than the swift for in loop. I happen to agree, but that is beside the point. 
This sub would be dead without iOS related talk.
Whilst I definitely agree that there are posts here which belong in /r/iOSProgramming, I think it is important to realise that in some (I hope most) cases, the poster is such a novice or so confused that he or she just isn't sure where the questions belongs. I think William of Occam would be sad if we posited the existence of large numbers of evildoers who post non-Swift questions to /r/Swift as a stepping stone on their paths to total global annihilation. I also agree with others expressing the sentiment that, as Swift is used more on other OSes, the percentage of non-Swift questions should go down. Meanwhile I hope such non-Swift questions as show up here can be dealt with by an enlightening word or two and a pointer to a more appropriate sub. After all, even if the question is inappropriate, we have the chance to help a fellow Swift-er at what is very likely an early stage of her or his Swift career. 
Learning; auth, web services, Rx, and of course the UI builder thingy. I mostly use Java and Python, so this is a bit different, building something for work. There seems to be a lot of 'stuff' in the way, probably a better way to put it, but I feel like I keep getting caught in swift specific issues, which is getting in the way of me progressing. ReactiveKit is good though, seems to make UI observing easy. I still can't get 3rd party libraries to work in Playgrounds. I'm probably stupid though.
Yeah, Swift is used for iOS/Mac OS. Outside of development, you don't really have much to talk about in terms of Swift.
It would go a long way if there was a message in the post writing screen saying that non-Swift specific questions are a better fit in /r/iOSProgramming.
(you probably removed what you originally said when editing :P)
Yup that's why I said nevermind... I was actually telling you about the NSMeasurement but then I saw that you were using them already so I deleted what I wrote :)
Decreasing number of posts in a sub as small as this could have a snowball effect.
Huh? I don't think I'm using NSMeasurement? 
Oh I'm sorry, I probably got it wrong ( don't mind me I'm not that experienced I recently started learning ) , but I thought you were using the Unit class and the NSMeasurement class ( which was added recently I think ). Should have checked the source code more before commenting :p
You can't. What you can do is convert a `UIImage` to `NSData` using a few different functions and save that data to disk using any file name you want.
I base it on the fact that there's a much more vibrant iOS app market than OS X, and Linux development with it is virtually non existent at the moment.
You don't know. If OP is using Swift, it belongs here. See the [thread](https://redd.it/4ww3h7) about this, I think it became pretty clear everyone thinks theses posts **do** belong here.
Yeah, this looks like the better solution. drawRect() is called after layoutSubviews() iirc and is only called once (layoutSubviews can be called multiple times) so it should be more performant.
&gt; Totally agree it should be a pure Swift sub. and this has been a worry for some time, because cross-platform Swift needs a space to grow on Reddit: Well, perhaps there should be a /r/xplatformswift or something, then. If you want to limit topics, start a new subreddit. Don't demand that the "superset" subreddit start limiting its discussion to your particular interests. (And really, are we at the point yet where the traffic to /r/swift is so onerous for people who aren't interested in iOS topics? It's not like it's a firehose of submissions around these parts yet.) The reality is that a *lot* of people are using Swift in the context of iOS. Especially beginners with the language. It's where we're going to draw much of /r/swift's community. That's going to be the context of a lot of discussion, a lot of questions, and a lot of theory. I don't think artificially limiting the discussion of swift-related topics to the rail-thin topic of "only stuff that applies to all swift everywhere and not anything that is platform specific" is going to do anyone any favors. Mainly because that basically limits your discussion to theoretical, rather than practical, advice, but also because it ignores the reality of the language. Where and how a language is used is just as important as the language's structure. For instance, "How do I write a protocol for SKScenes that does (xyz)?" is a perfectly valid, Swift-related question. Yes, it touches on iOS programming, but it's a question about the Swift implementation of an iOS framework, which, to my mind, is 100% completely valid and appropriate for a subreddit about swift. Even people who aren't using Swift to drive SpriteKit sprites around would benefit from the discussion that emerges because it will naturally also touch on concepts like protocol-oriented programming, or may have parallels to the particular problems they're encountering on other platforms. And even people who aren't using iOS frameworks can help such a person with advice on how to structure their code. There are benefits to not pigeonholing these topics. You'd come to /r/swift looking for *swift experts and their advice*. It's a totally appropriate place to ask for help when you're struggling with expressing yourself with Swift. &gt; It would be almost disrespectful of their effort for the Swift subreddit not to set the same tone. No, it would be disrespectful of their effort to impose a litmus test on what swift topics are worthy or unworthy of discussion. There's no reason to turn people away just because they are using swift in a particular context. If someone comes here asking for help with implementing an iOS framework problem in swift, we should help them, not tell them to take a hike. We want a big tent, not a small tent. 
I agree! I was just making sure they knew about it, not for this problem in particular but just in general that SO is a resource they can look forward to using.
Refactoring an enterprise Swift App that gets used daily by a large company to run their physical delivery network. 
There's loads to talk about in terms of Swift without mentioning a platform whatsoever. A lot of Swift books/tutorials don't involve iOS at all. Edit: Could some downvoters perhaps explain what's wrong with my reasoning here? There's a _lot_ you can do with Swift without touching iOS.
 var score: Int = 0 { didSet { label.text = "Score: \(score)" } } score += 10 I know this isn't the question, but one tip with your code is to use didSet like above. Of course this means that anytime you modify score that the code in didSet would be executed.
First, that's completely orthogonal. My favorite sandwich shop has a credit card reader, and it's their primary means of collecting money from people, but nobody would call it attractive. I'm not saying that's good or bad, but you'd never confuse one attribute for the other. Second, can you truly not think of *any* other way? I find it hard to believe that someone smart and dedicated and creative enough to write and ship an app (that's not easy!) can't also apply some of that to the business side of things. I once knew someone once who got free gas money by having advertisements plastered all over their car. It looked terrible, but at least they never asked us "How else do you wanna make gas money?"
yes because its more complicated but it should also be mentioned that the complication actually comes from the difference between: ++x and x++ and the scenarios with which you use them
Don't think that is necessary
I agree with what you're saying. I'm fine with iOS-related questions, _as long as they are also related to Swift_. Not all posts on here are like that, though. There are lots of questions about Xcode, app store submissions, whatever. Those are completely irrelevant to the Swift language, but quite relevant to iOS programmers. Wouldn't you say those are out of place here?
&gt; Wouldn't you say those are out of place here? Sure, but that's not what OP is proposing, though: &gt; I think we should restrict topics to not include iOS programming. If all we mean is that questions like "How do I get provisioning profiles to work?" should be referred to /r/iOSProgramming, then sure. If it has absolutely no Swift in the question (or answer), then, yes, it doesn't belong here. But it sounded to me like you and OP were advocating something different: &gt; Totally agree it should be a pure Swift sub. and this has been a worry for some time, because cross-platform Swift needs a space to grow on Reddit This *sounds* like you don't want Apple-only Swift talk, and would prefer that all Swift discussion to apply to "cross-platform Swift", not that you just don't want non-Swift talk. Perhaps that's not what you intended by that, and if so, then I apologize, but if that's the case, we need to make clear to the moderators who are monitoring this discussion what we intend, because I think it's still a little fuzzy what's being proposed here, exactly. 
Seeing as you've quoted a bit of my post, I'll respond by saying I have no problem with Swift language questions in the context of an Apple project, but something like 'how do I use NSCalendar' or 'should I use X or Y graphical widget to implement this screen' is squarely SDK related and should be where the mods draw the line and redirect them to the iOS sub.
Working on some RxSwift for our network calls. I'd really like to bind the network call to a tableView showing the loading indicator and empty state when appropriate. 
https://developer.ibm.com/swift/ IBM has tools do develop on macOS and deploy to Linux. See the Going Server-side with Swift Open Source from #WWDC 2016 https://developer.apple.com/wwdc16/415 EDIT: removed redundancy 
I've been working on my own version of Carthage Cache as well :) and it's called RomeBuild - https://github.com/146BC/RomeBuild It doesn't require users to use S3 (although you can as well) instead you spin a Rome Server https://github.com/146BC/Rome (which you can host locally) and romebuild will place your binaries there, no need to create additional files, it just uses your Cartfile.resolved edit: http://i.imgur.com/KW84n79.gif
Working on a rewrite of our of our apps from Objective-C to Swift 3. Getting ready for a september launch. Just finishing off some keyframe animations now and then it's feature complete so the rest of the time will be bug testing. 
Why are you posting this? Promotion?
I see that Rome is the obvious name for something like this ;) Nice, does it handle also custom framework names mapping? Why not just use s3 and build a server? Some internal requirements maybe?
I think you've hit upon a decent benchmark... If the question can be rephrased in Objective-C with no change in meaning, it's probably not a question for this sub.
Hehehe of course! :D Now yes, there's a fix which was merged to develop (I still need to create a release and update the brew repo though) Rome itself is an asset server, you can put whatever you want, in fact i'm also using it to store and version other assets and with [RomeKit](https://github.com/146BC/RomeKit) I can easily query content inside the server from other apps. The best setup for this is to have a CI job listening to repo changes and have RomeBuild upload binaries, this way every developer gets a cached copy when needed.. believe me.. in our case it reduced the carthage build time from 30 min to around a minute. I also released a custom version of Carthage with Rome support! `brew install --HEAD 146BC/repo/romulus`
I am working with Xcode on a VM right now. Why do I need a Mac to publish?
I find it curious that you know about only updating the UI on the main queue yet didn't know that viewDidLoad runs on the main queue. That's like knowing how integrate x^2 and get 1/3x^3 but not knowing what the little 3 above the x meant.
Last post in those is 29 days for /r/SwiftOnLinux and 2 months for /r/iOSSwift, so both are pretty much dead. 
Yep, I'm exactly like that. I learn by doing via trial and error, since learning from first principles isn't compatible with my attention span. There will always be opportunities to get iteratively better at things along the way. Like right now... thank you kind stranger!
A simpler idea would be to just use a *for in* loop. You can handle all the functions you need to satisfy this problem inside the body of the loop. Try something like this: for number in 1...50 { print(number) } Edit: Here's a good resource [https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html)
It depends. Is this a personal project? If so, sure. Is this a project for a company? If so, what are the companies standards? Is this a project involving 2 or more devs? If so, what are the other devs feelings on maintaining this code. And finally, what in particular do you find difficult about doing constraints via interface builder?
Most large companies would have you do the views in code as well. I'd recommend dumping the storyboards and doing it all in code. 
You can try these two: http://stackoverflow.com/questions/27920948/java-code-to-swift-converter https://github.com/patniemeyer/j2swift ... but I would suggest a rewrite as a mechanism to learn Swift.
I do a lot of mine programmatically any more, especially when I have a complicated interaction between views. It is more expressive and powerful to do it in code anyway.
Learn swift well and it'll be easy to convert
Awesome thanks!
I don't think *anyone* is suggesting you shouldn't be able to mention iOS, only that posts should be focused on the language. i.e. if the question can be rephrased in Objective-C with no change in meaning, it's probably not a question for r/Swift.
You gave the man a fish. Let's teach him how to fish 😄 I'm gonna comment your code since OP is new: for number in 1...50 { //"number" is the variable and it is assigned 1 then runs what is inside the loop...then it's assigned 2, then 3, ... up to 50 if number % 4 == 0 { //% is the Modulo operation. It finds out if there is a remainder or not. So, for example if "number" = 9, 9/4 is 2 with a remainder of 1, so Modulo would be 1. If "number" = 12, 12/4 is 3 with a remainder of 0. This is what you want. So, if it's 0 then proceed. print("word") } else { //else just print the number print(number) } }
If you are after an easy low tech answer I achieved a similar result by animating an image over the label that has a gradient from background -&gt; alpha. 
You're trying to store UITextField objects directly into NSUserDefaults, and you can't do that, you'd probably want to store their `text` property instead: NSUserDefaults.standardUserDefaults().setObject(userEmail.text, forKey: "userEmail") NSUserDefaults.standardUserDefaults().setObject(userPassword.text, forKey: "userPassword") // &lt;- Also corrected repeated 'userEmail' to 'userPasssword', guess it was a mistake! This should work.
Because it's a computed property, every time you access the MOC that line of code will be executed meaning it's (marginally) inefficient. Using a lazy var or assigning the MOC after you instantiate the class would be (marginally) better.
&gt; personal experience and talking with developers at other companies. I can second this. Specifically where "large companies" means on the top 100 charts; the kind of companies that have several devs working on the same app over several years.
here is a playground that will run in xcode import UIKit import XCPlayground var str = "Hello, playground" let containerView = UIView(frame: CGRect(x: 0.0, y: 0.0, width: 375.0, height: 667.0)) XCPShowView("Container View", view: containerView) let rectangle = UIView(frame: CGRect(x: 0.0, y: 0.0, width: 50.0, height: 50.0)) rectangle.center = containerView.center rectangle.layer.cornerRadius = 5.0 let tf:UITextField = UITextField(frame: containerView.bounds) tf.textColor = UIColor.whiteColor(); tf.text = "this is text" tf.textAlignment = NSTextAlignment.Center; let gradientMaskLayer:CAGradientLayer = CAGradientLayer() gradientMaskLayer.frame = containerView.bounds gradientMaskLayer.colors = [UIColor.clearColor().CGColor, UIColor.redColor().CGColor, UIColor.redColor().CGColor, UIColor.clearColor().CGColor ] gradientMaskLayer.startPoint = CGPoint(x: 0.1, y: 0.0) gradientMaskLayer.endPoint = CGPoint(x: 0.55, y: 0.0) containerView.addSubview(tf) tf.layer.mask = gradientMaskLayer; //containerView.layer.insertSublayer(gradientMaskLayer, atIndex: 0); to see the gradient being used to mask the text just swap the comment on the last two lines //tf.layer.mask = gradientMaskLayer; containerView.layer.insertSublayer(gradientMaskLayer, atIndex: 0); 
Adding Apple Watch support to one app and doing a UI rethink on another app. I want to release decent updates on both of them in the next few weeks and these were the key things that I was missing or needed to refine. That will probably be it for any other major updates for a while as I will wait for iOS10 and especially watchOS 3 to officially be released. 
Nice tutorial. Thanks! It would be cool to see the other parts, playlist generation and the like, as a beginner.
It all has todo with one of the main building blocks of both macOS and iOS, namely NeXTSTEP. Apple has been trying to ditch Objective-C for about a decade now, Java, Python and Ruby were all tried and rejected, in the end Apple had to develop its own language , Swift. Swift has to be compatible with Objective-C to replace it and many of the design decision made early on, in its development, have this limit in mind. The ghost of NeXTSTEP is alive and well in all of Apples OS's, macOS, iOS, watchOS and tvOS.
Functional answer just because. ``` Array(1...50).map { $0 % 4 == 0 ? "Fizz" : "\($0)" }.forEach { print($0) } ```
I love initializing subviews with closures! Unfortunately, any approach that tries to rely on $0/type inference pretty much disables code completion. Is the public Init function mentioned in this article no different?
Great article! Just a bit of feedback. You might want to change `let helloWorldLbl:UILabel = {` to `lazy var helloWorldLbl:UILabel = {` That way instead of the label initializing on your View Controller's init, it gets initialized when first referenced in loadView. This is a good pattern for at least a couple reasons. One is that you can use `self`, and another is performance gains. In case you have a tab controller for example and you want a fast app launch time, by using this pattern you don't immediately set up all the views that aren't in the presented view controller. Instead views in the hidden tabs get set up right before being shown, when they're referenced in `loadView()` This is down to personal preference obviously, but when including Swift code in your articles you might benefit from following Swift's [API Design Guidelines](https://swift.org/documentation/api-design-guidelines/) and a commonly used [Swift Style Guide](https://github.com/raywenderlich/swift-style-guide). So for this article that would mean forgoing abbreviations like in `let lbl = UILabel()` and removing the redundant uses of `self` in `self.view.addSubview(self.helloWorldLbl)` Really like the NSCute section btw, I'm definitely going to use that pattern starting today. 
I haven't used Udacity, so I'm not familiar with their verification tools. But based on the fact that the message mentions a breakpoint, I'd recommend to check if there are breakpoints configured on XCode left panel. Additionally, maybe ItemsFromPlanet() function returns an optional, but that would be reported before running. 
That has not been my experience. Xcode's completion is pretty good even with inferred types in closures ... right up until you get to the point where it crashes the parser and your code turns black and it shows that "oh no we crashed again" bar across the top of the editor that seems to appear 10 times a day and is impossible to get rid of. But up until that point, it's really good!
Sweet, exactly the kind of feedback I was looking for. I'll make sure I get that written soon :)
But would this work with buttons? The way that I would think it would need to work is to make an array out of my content view and fill that array with the buttons I made. Would that work?
Ohhhh ok cool! Thank you so much!
I actually would need to define != because OneOrMore doesn't conform to Equatable since conditional conformances aren't a thing in Swift, unfortunately. The purpose isn't to just be an undo manager, but rather a safe guarantee that an item exists within the structure. A more space efficient example would be implementing a diff using this instead of just each entire state.
Well, iOS and macOS apps are generally built using the MVC pattern, so I'll say the fundamental components are models, views, and controllers.
Because Range&lt;T&gt; does not have a map method
Nice! This would be great for A/B testing, maybe that's the point. Meta : I think I saw people asking this subreddit to be for swift language rather than things written in swift. Worth posting on r/iosprogramming.
AppDelegate?
Ditch storyboards, you'll gain a more intimate knowledge of the framework and how you code functions if you write everything programmatically. I definitely recommend taking advantage of iOS 9 constraints, makes developing for multiple devices and screen sizes, amazingly simple. It's incredibly easy to write modular code as well. The benefits far outweigh the the negatives. 
The App Delegate is a delegate for methods called by and on UIApplication which is where the app starts up (technically in a main, before that, but don't screw around there). This app delegate initializes a view controller, and sets this to the root view controller field of the window of the app. The app then makes this window the "key window", and this results in the view associated with the view controller being drawn on the screen, and the controls on that view working. Events such as touching buttons travel up the responder chain to a ViewController that handles them, typically changing the views or models or both in response. Model objects are plain old objects, nothing special about them at all. There is an over complicated persistence engine for objects called core data, but that's by no means mandatory anymore. It's still filled with corner cases and sharp edges, and is only really super stellar in a couple cases (datasets larger than memory, and really performant scrolling on the same) That's the typical core of an app.
This is the best answer so far!
Right-click, Edit Breakpoint.
hey there. Is this 2 years old book still relevant? I'm thinking of buying it.
Wow, Cadmium looks pretty nice. I don't do a lot of core data work but it's always a major PITA. Will have to keep it in mind. I'm the guy who sent you the PS for iOS 7 support in Mortar. I was about to use SwiftAutoLayout(basically a port of AutoLayoutShorthand ... y=mx+b style) when I saw your reddit post about Mortar. The array and tuple operations in Mortar really DRY up the autolayout code. I've got a utility method for doing linear layouts(pinning edges together w/ padding), and between that, Mortar, and the occasional OAStackView, my autolayout code has become extremely concise, readable, and flexible. When I have to go back and work on old obj-c code that's all VFL and Apple's methods, I just want to cry tears of blood.
While your matrices *are* type-safe, it's not a very nice solution to have to define every single number you're gonna use beforehand. I suggest you to have dependently typed numbers: protocol Number { static var value : UInt { get } } struct Zero : Number { static let value = 0 } protocol PositiveNumber : Number { associatedtype Prev : Number } struct Succ&lt;N: Number&gt; : Number { typealias Prev = N static var value : UInt { return N.value + 1 } } (I didn't compile this just now, but it should work like this) Then you can define numbers up to a certain point: typealias One = Succ&lt;Zero&gt; typealias Two = Succ&lt;One&gt; [...]
The MVC pattern: models, views, controllers. The view is the canvas that you can directly drop and edit objects on it. The controller is the file that contains the view's code. The model is a separate file that manages specific/algorithm type code that allows the view to update, but the view should never have access to the model. The use of communication is through delegation/protocols. The model should never have any view related code.
What are you trying to achieve with your custom classes? There's no one true pattern that's applicable to every problem, design patterns exist because they're convenient, sensible solutions to certain specific problems. The delegate pattern is a good solution when you are making a class for others to use, and you want them to be able to customize its behaviour without having to subclass it.
Sorry perhaps i was unclear. I'm really just talking at a theoretical level. I come from web development, which i have never really seen that pattern used (at least not by that name). I understand when i am supposed to use it for certain things, i.e: i know i have to use a delegate when using a tableview because that's just how you do it. I guess my question is why do you do it. I'm just trying to understand at a conceptual level, and was hoping there was some nice reading material on the subject that would be easy to digest. Maybe i have my terms incorrect, again i'm coming from a web development background. But looking at the following code: class ViewController: UIViewController, UITextFieldDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate Isnt my view controller a subclass of the UITextFieldDelegate? I guess I don't understand the difference which is why im interesting in learning more. 
I just told you why you do it - you do it when you are making a class for others to use, and you want the users to be able to customize its behaviour without subclassing. You don't need to know anything about how an NSTableView works to write a class that implements NSTableViewDelegate - which is the point, you don't want to *care* how NSTableView works, you just want to tell it what to do.
Whilst that is true, it isn't important. What /u//W1TCH_ says is both true and important; you should ask ios programming questions in /r/iOSProgramming. If you were following a bread recipe in English, and you didn't know how to 'knead the dough', would you ask an English expert for help? or would you ask a baker for help? I think you would get the best help from the baker; the English expert may not even know how to make bread. The crucial aspect of your question is that you are using UIKit, and /r/iOSProgramming is a subreddit which exists just for that.
If you have a label, you can access the `.text` property to get a string. Then you can attempt to create an integer from that string, increment it, and set the text again. Here's an example: var label: UILabel func increaseTapped() { // the string might not be a number, so we'll use zero if it's not able to become an int let labelCount = Int(label.text) ?? 0 label.text = "\(labelCount + 1)" } 
First of all, you want r/iOSProgramming, not r/Swift, because Swift is not fundamental to iOS. More importantly, I'm not sure what use this information would be. Do you just want the names of things? Simply hearing four names of Android "fundamental components" isn't useful to me. I've gained no usable knowledge at all. I'd still have to read a bunch of Android documentation just to understand what they even mean. For anything anybody says here that fits in a reasonable-sized comment, you're still going to have to read the iOS documentation to understand it. Apple's documentation is pretty good. The introduction to their iOS programming guide will be far better than anything any of us can whip up in a comment here.
I think it's kind of funny that Apple is pushing type safety so hard as the big selling point of Swift, and then we've got people out in the real world building things like this -- load a JSON blob from a file, and (optionally chained!) apply it. With Objective-C, we had a medium amount of type safety. With Swift we have a lot of it -- so much it's often smothering. This isn't the first Swift library I've seen where somebody basically says "screw this, I'm out", and builds a system even less type-safe than we had with Objective-C. What if the real benefit of Swift isn't its type system, but simply its brevity, and the type system is actually a hinderance? I'm willing to pay that price for the shorter names, but if I could have the shorter API names in Objective-C, then Swift would not be a clear win to me.
This is fine, but you shouldn't be using viewDidLayoutSubviews for this, and you shouldn't be calling super.viewDidLoad inside it :) I would change viewDidLayoutSubviews to viewDidLoad, and this would be good to go.
Oh yeah sorry. I started it in viewdidload but changed the function (forgot to change the super), and I put it in viewDidLayoutSubviews because sometimes my autolayout gets fucky when using Xcode beta. You're absolutely correct :)
I know use cases for it: the `first` and `last` properties, as well as the `max()` and `min()` functions can return non-optionals.
&gt; and really performant scrolling on the same Did you forget a word?
Added `max()` and `min()` ([commit](https://github.com/nvzqz/OneOrMore/commit/72a711f85574bad94df7e1f3e7152829021960d8)), thanks for pointing that out
Ok thanks! Is there a lot different 2.2 n 3? If I learn from first page, will there be any different?
Swift 3 is drastic changes from 2.2
Means don't learn from 2.2 or not a bad choice? Sorry for any misunderstanding 
what /u/LilyIsHotterThnRobin says is true in spite of the unfortunately derogatory language used to express it. There is an abundance of material in addition to the links they have provided for getting started; you should do the required searching and necessary reading to cover the groundwork. There is no substitute for fundamentals and skipping them will condemn you to newb-hood forever. No amount of quick tips or 'learn Swift in 24 hours' can make up for the concentrated studying and extensive practise you must do to learn iOS Programming (or any other worthwhile topic, for that matter). to /u/LilyIsHotterThnRobin: I hope you can spend a few moments considering the necessity of mixing useful information with insults. If OP's questions make him or her 'sound like a moron,' what does the tone of your response make you sound like? Of course, I don't know your answer to that question, but from my point of view, you are not someone I would hope to associate with in the Swift community.
Thanks! It's now available on the App Store. https://itunes.apple.com/us/app/leave-the-light-on/id1138617362?ls=1&amp;mt=8
If I were you I'd focus on learning the basics, once you do that you can start looking at things like multiplayer, servers, and user accounts / file saving
Yes u sounded like a dick on his period, but i truly appreciate for taking your precious time to respond and give me useful links. I checked them out and they seem like very good and useful books, and i actually found pdf version of the first one for free. I'll start reading now. Thanks bro
General question: is it possible to offer the game for trail maybe like 10 levels and then offer for purchase for the entire game? Reason I ask is because I know some people like some puzzle games and others don't depending on the game. Also I'm no reviewer or anything but I was looking at the page on App Store and the description was very very brief. It could be cool if you could sort of explain what you have to do with the circles and what kind of puzzles they are (another thing that the free trail might help). In no means am I trying to be negative I'm just trying to give some comments that hopefully will help. Cool looking gaming tho. Good luck!
Works fine in Swift 3.0.
You're going to be a failure at life. I make $300k a year. I don't care how I sound. Good luck continuing to try and take the easy path and asking people on the internet how to do your job for you. You're a loser. :)
even on multiple runs? It works sometimes for me. But frequently does not.
I'd down vote you but the developers of this app [put the scroll to bottom button over the down vote button when scrolled all the way to the down](http://imgur.com/uAktd9F). Maybe you should develop the Reddit app. 
Your comment let me down vote 😂 thanks
References are strong by default.
You need to declare it weak to make it weak: weak var delegate: SomeProtocol?
Note that in order for this to work, `SomeProtocol` should be declared either with @objc protocol SomeProtocol or with protocol SomeProtocol: class
So should this be the case whenever I am making the viewController the delegate for whatever class? i.e. if I instantiate a view programmatically, like a pop up in viewDidAppear, that requires a delegate, and I did not declare the view as weak. Then I set the ViewController as the delegate, which is also not declared weak in the UIView subclass.. have I then created a strong reference cycle?
Add a () at the end of your closure.
I have absolutely no idea what you're trying to do in your code, but let's step through it slowly anyhow. This bit: var test: [AnyObject] { // Compiles if [String] let test = "test" return ["\(test)"] } will return an array containing a single `NSString` object, holding the value `"test"`. Why you're assigning it to a variable, and then using string interpolation to return a string I have no idea. Only you can answer that. But anyhow, that's what it's doing. If you don't have `Foundation` imported (either directly, or through UIKit or something similar), that code above won't compile, btw, because the `NSString` type is included in Foundation. Next up: func filterOutUnsupported() { [NSSharingServiceNameComposeEmail].flatMap { return NSSharingService(named: $0) } } This function does absolutely nothing. It doesn't return a value (as the function signature doesn't contain a return type), and it doesn't have any side effects. The specific compile error you mention seems to be arriving from your (mis)use of `flatMap`. That method is overloaded to do two things in Swift. One is to take an `Array` of `Array`s of some type `T` and then (i) flatten that down to just one `Array` of `T`, and (ii) to use some function `(T) -&gt; U` to map the whole thing to an `Array` of `U`. The other takes an `Array` of `T?` (i.e., `Optional&lt;T&gt;`) and then (i) remove all the `nil` values, and (ii) use some function `(T) -&gt; U` to map that to an `Array` of `U`. So let's see which `flatMap` you're using. You have an `Array` of `String`, so instantly it can't be the second one, as we're not dealing with `Optional`s, but also it's not an `Array` of `Array`s, so it can't be the first overload either. So the compiler hasn't got a clue what you want it to do. And sure, it's messaging about that isn't great, but that's your problem. Presumably what you really want to do is simply `NSSharingService(named: NSSharingServiceComposedEmail)`. I'm not sure why you're using that `flatMap` - are you sure you understand what you're trying to do? Can you explain what you really wanted to do here?
&gt; How do i make my game multiplayer? This is *really* not a Swift question.
It's a computed property.
You should hide your dynamo db access behind a rest interface.
What the code does is not the point. I took the actual code and stripped it down to bare minimum for brevity. The point is that if the third line is `var test: [AnyObject] {` there's an error. But if the third line is `var test: [String] {` then it compiles and behaves as expected. It also compiles if string interpolation is not used (e.g. `return [test]`) If you can reproduce both cases, then there's a bug, since the code being changed is completely unrelated to the error. Also I don't think you're correct about the second overload for `flatMap` that you mention. It's about *transformation result* been optional, not the the collection elements. It's right there in the docs: &gt; Use this method to receive an array of nonoptional values when your transformation produces an optional value. I have an array of service names (unlike the sample code, more than one) and I use flatMap because NSSharingService(named:) is an optional initializer.
Yeah, I was wrong about that overload, you're right. So your usage is legit (though the stripped down code is super confusing). Anyhow, I was able to make your computed var compile with either `AnyObject`, `String`, or `NSString`. But, like I said above, it wouldn't have compiled if `Foundation` wasn't imported, because that contains the necessary information to convert `String` into a class type (i.e., something that adopts `AnyObject` rather than just `Any`).
Emmmm maybe you just need to change de zPosition of the nodes? 
The zPosition is which node is on top and if you don't select one it will be different everytime you run your app, maybe that's why you can sometimes see your nodes. Maybe the background is on top of everything. You need to call this method on your nose like yourNode.zPostion = some int
Thank you. Your suggestion solved my problem. Can't express how much of a headache this was giving me. 
How does it compare with this one? https://github.com/scottrhoyt/SwiftyTextTable
From what I can tell: * The biggest difference is how you define the table. SwiftyTextTable has you conform your type to `TextTableObject`. My lib has you create an instance of the generic type `TextTable&lt;T&gt;`. I think this approach is cleaner (less verbose, clearer) for configuring the table, especially when needing to configure individual columns. * You can customize each column individually. Alignment (left, center, right), width (automatically calculated but you can specify a static width) and even set an NSFormatter per column. * Supports many different table styles out of the box. Not just changing which characters are used for fences, but things like outputting HTML and Latex tables. This is something that the python tabular lib does that I wanted in Swift. Check out the list of examples. * Designed with extensibility in mind. It's relatively easy to define new table styles.
It looks like there's a bug in the "SDK overlay" (the series of conversions used to "Swiftify" the AppKit API). Specifically, the `NSSharingService` constructor `init?(named:String)` doesn't appear to be working correctly. I don't know exactly what's going wrong but the code will work if you replace that line with an explicit call to the init method: return NSSharingService.init(named: $0) Yes, you should submit a bug on this.
Thank you. This is my problem. I see that you can create and API from the API Gateway which will connect to a Lamda Function and verify the username and password However, these are still Get or POST requests. What would be the secure way of doing this?
I'll try it out tonight. Thank you sir.
Because `String` is a `struct`, and therefore doesn't satisfy the `AnyObject` constraint, so the compiler needs to convert it to `NSString` (which is reference counted, and therefore does satisfy the `AnyObject` constraint).
Good point. I tend to forget about this detail. [Any] does not trigger the bug.
Thank you. I've included your case about explicit `init` in the bug report.
Oops, that was just from trying to eliminate possibilities. You're right, it's not needed.
+1, just add the closing quote on "123"
Just a small detail, you don't need to add "self." to reference label, textfeild1 and textfeild2 inside of the button method! Much simpler :)
Since the question was answered, just wanted to give a piece of encouragement. Every programmer has mistakenly typed = instead of ==, it's probably the or one of the most popular bugs/errors. Don't let it discourage you.
I would put them in `UIStackView` with `axis` set to `.Horizontal` and center this stackView horizontally by setting its X center constraint equal to VC's view X center constraint. AFAIK there is no way to do that without container view of some type and since iOS9, `UIStackView` is the way to go, because you don't need to set up additional constraints after putting views inside of it.
He's probably building a hat based application.
If it has particle effects i'd buy it.
I am almost certain that this is not possible without a container view.
Yes, it's aligned correctly on device. [http://imgur.com/a/vwtCD](http://imgur.com/a/vwtCD). Are you sure you set centering constraint between VC's view and stackView and not VC's view and one of labels? PS. IMO you can use one label to display currency symbol and value. There is even special class in Foundation called `NSNumberFormatter` which allows to format numbers into strings and has option to format as currency representation - you can set which currency to use and it automatically produces string with properly formatted currency value also taking into account the locale of user (so it uses proper decimal separators and other rules of number formatting applicable to user's locale)
That's very strange, I would really appreciate if you could you help me solve this. I'm sure I put the constraint between stackView and VC's view. Check this: http://imgur.com/a/NQlkl But this is what I get when running: http://imgur.com/a/fOsYo 
I deleted the stack view + the labels and did it over, now it works. Must have been something I've done previously. Thanks for the help so much
Don't you have any left over constrains on those labels from your previous attempts? In the screenshots you shared everything looks fine for me. 
A common mistake, just stay away from programming robots for now :p https://i.redd.it/nf19afmd7kex.jpg
In case you're thinking of implementing your own hash and salt function, don't. Check out bcrypt or pbkdf2. Either are good. I personally prefer bcrypt as the salt and cost are stored together along with he hash.
As long as those are happening over HTTPS, which API gateway enables, you're probably fine. What you probably don't want to do is embed any of your AWS creds in your app.
[removed]
On top of what the other comments have stated (Apple docs &amp; Google tutorials) IBM host an online Sandbox that you can practice in: https://swiftlang.ng.bluemix.net/#/repl
What is your impression of ionic/cordova? My company is trying to decide between that and swift for a new project that I'll be lead on. Would be interested to know what someone who has experience (even limited experience) with both thinks, as all I've done is swift/obj-c.
Just ran into this article, which details a different approach: http://www.benrady.com/2016/08/the-real-revolution-of-serverless-is-auth-not-microservices.html
I think this question would be better suited for /r/iOSProgramming as this doesn't really pertain to Swift. [You'll find your answer there](https://www.reddit.com/r/iOSProgramming/search?q=ad&amp;restrict_sr=on&amp;sort=relevance&amp;t=all)
Try adding annotations in `viewWillAppear` instead and check for a race condition between the mapView loading.
Oh no I'm glad to get as much feedback as possible. I have tried that model where you provide a finite amount of levels for free and then ask for a payment for the rest. This is what I call the xbox arcade model since it has worked so well on that platform. However my experience on the App Store has been the opposite. Unfortunately people who download a game for free tend to become overly offended when you ask for money later on to continue to play. This model usually leads to tons of 1 star reviews calling the game a scam and a money grabbing scheme, which is completely unfair. The other option I toyed with early on which is the standard approach these days, is to provide the game completely free and flood it with ads. I hate this since I personally hate ads in games. But I may end up doing it in a few months. As far as the description goes, you're not the first person who has commented on it. I will be probably try to be more descriptive about the gameplay and the overall structure of the game in the next update. I just don't want it to turn into a gameplay guide. I tried hard to make the game as intuitive as possible so you don't have to read a manual just to play. Thanks for the feedback, I appreciate it. 
I will in the next update. Thank you for the feedback :)
Yours is working. I have no idea what I am doing differently but at least I have a template to test against. Thank you so much for the help. 
This has quite a few short-comings, and the worst part is, when it fails to translate into JavaScript, it claims your Swift code is invalid, when it is in fact perfectly valid Swift code.
Imagine this: func delete&amp;lt;T&amp;gt;( object : T, from array : [T]) { //detects if object is equal to an item of the array. If so find the integer value for where the object is in the array, so that you can remove it from the array using the array.remove(at: ) function. To remove it from the array } Does that make any sense?
Could you explain the filter function? Because I know how to easily find if an item is in an array. I'm just having trouble removing it from the array. 
The filter function takes in a "test" function as an argument. This test function is something you define; it must take a single argument of the array's `Element` type, and return a `Bool`. `filter` then calls this test function once for each element in the array, and returns to you the array of elements for which your test function returned `true`. Example: let original = [1, 2, 3, 4, 5, 6] let filtered = original.filter({ elem in if (elem == 4) { return false } else { return true } }) Now, the array `filtered` is `[1, 2, 3, 5, 6]`
Since *Array&lt;T&gt;* is a value type (unlike NSArray, which is a reference type), you cannot remove an item from an array passed into a function. You can however use the **inout** keyword in order to copy a value back out of a function, replacing the value passed in. func delete&lt;T: Equatable&gt;(value: T, from array: inout [T]) { array = array.filter { $0 != value } } var arr = [1,2,3,4,5] delete(value: 2, from: &amp;arr) // result is [1,3,4,5] Edit: typo
My concern is that adding a new button requires two code updates: * Adding the new button variable and assigning it a value * Adding the new variable to the array It's pretty much guaranteed that adding the new button to the anonymous array will be forgotten the first time the code is compiled and tested. Instead, I'd suggest declaring an array at the beginning and adding each value returned by JKButtonNode() to it, then iterate over the array when you're done. This would allow adding new buttons with a single line, as well as eliminating the chance of any bugs being introduced by forgetting to add the new button to the array. In this case the bugs probably aren't that crazy if you miss adding a button, but good habits should be used everywhere.
thats cool, i never thought of that either. It might be more flexible and less error prone just to declare an array however. 
we can just specify that T conforms to equatable. 
I know that OP specifically was talking about a function, but a protocol extension is the more Swifty way to do this.
I wouldn't do it for a large collection but this is only for 3 variables that are initialized right above the for-in loop.
We could assume that, or we could get clarification. Maybe he actually wants identical references. Learning to be clear &amp; precise in our inquiries is certainly the most important thing we must learn as developers.
true, but its making the assumption the collection wont grow and that no one else will be working with the code. that may be true as well, but it just means its not a scalable solution. For solo projects we could just make every variable global but its just good practice not to. Its just room for error with no real advantage
I see... but I'm still keeping it since it's an iOS game and I'm the only person in control of it. Well, it may be a solo project but declaring all variables global is useless since only a single class would need them.
Thanks for the info! would you mind elaborating on the edge cases?
haha I actually just edited that code today and didn't even notice! Thank you; that would've fucked up things since the user wouldn't be able to upgrade the game!
I'm new to coding and VERY hesitant on the new Xcode, would I be wrong sitting 8 out or is it inevitable?
Another succinct way of doing the same way would be by using `flatMap` : _ = [button1, button2, button3].flatMap() { $0.setTitle("Hello", forState: .Normal) }
Xcode 8 will be released when iOS 10 or OS X 10.12 is released, whichever comes first.
Functional programming in Swift can have its benefits. :D
It's part of a tutorial series on SpriteKit. I thought someone might be interested. I have 11 videos so far I post one every day. I plan to cover SKSpriteNode, Using Initializers with SpriteKit. Subclassing SKSpriteNode and other SpriteKit classes, Physics bodies, and physics contacts and collisions. There are no ads on my videos. 
If you are just starting out! XCode 8 is the place to be! This especially if you are starting out with Swift 3. 
Never thought Swift would have more visibility modifiers than Java.
You are right. This looks even better : [button1, button2, button3].forEach { $0.setTitle("Hello", forState: .Normal) }
sorry if really long
Or more simply: let filtered = original.filter { $0 != 4 } 
No, the worst part is it translates your code to JS, the best part is when it fails and you're left with valid Swift code. JS, bane of my life. 
You can spot users of the Copy-Paste Method by the [Last Line Effect](http://www.viva64.com/en/b/0260/)!
Why are you so hesitant?
Then how will you know whether or not the tool you're looking for actually converted it correctly?
This isn't completely true. Classes can be compared using `===` and `!==` without complying to `Equatable`. Hence my post requiring more information on what is actually desired.
All we have to do is get clarification from the OP on what he wants. No one else has seemed bothered enough to actually do this. I mean, sure, most of the other posts have worked on the assumption that we're talking about objects that conform to `Equatable`, but... they're only working under that assumption because it's the easiest assumption for which we can make the OP's request work. We haven't really figured out what the OP actually needs/wants.
The apps will need different bundle ids. 
Why does it not make sense? And where should I put this code? In the Swift file of "GameViewController"? 
Ah I understand. I removed the code with all the string replacements etc. But would the energyBarProgress be set to 0? self.energyBar.progress is set to 1 in the viewDidLoad as if you would play the game for the first time. See the code here: http://pastebin.com/WnEV7P2Y How do I make it work with the subtract etc? Thanks in advanced
It's just it's initialization value. You could also use 1... but I noticed a mistake.. it shouldn't be an integer but a double. sorry for that.. edited my main response.
All over mine too! fortunately I named most of them delegate so a project wide search found the 20 or so that would cause a cycle. Thanks for the info.
Found it.. changed self.energyBarProgress -= from 1 to 0.1
Right... Hence my parenthetical about the reference. You are checking if the memory address it points to is the same. Nothing else about the object. So you're essentially comparing of this reference has the same memory address as something else. 
ARC happens at compile-time, not run-time, so the performance differences would be limited to just when and where the `retain` and `release` calls are made. There may be very specific situations when you would want to have exact control over this, but the *vast* majority of the time it will not matter. You also have `@autoreleasepool` to work with, which gives you some extra control over memory management even with ARC.
Sorry I'm probably just being a dick there, but I think that the term functional programming gets thrown around alot by people who dont really do it. 
What theme and editor are you using?
I am a big fan of this. Keeps code much more organized!!
A custom theme I created on Xcode. Font is Monaco
No, but I have always loved a dark background with purple/pink colors.
oh I see what you are saying. Sorry its a little confusing for me as I am still just starting to fully understand Protocols, Generics, and more complex (for beginners) swift topics like those. I for the purpose of what I need, Equatable would be all I need. Thanks for trying to get clarification and helping out :) **EDIT:** Deleted a lot, fixed grammer.
Equatable is a protocol that something conforms to in order to use operators such as == and !=. A similar protocol is Comparable which allows you to the operators such as &lt;= or &gt;. By conforming to either protocol you are allowed access to additional functions such as sort() for Comparable. Equatable is necessary for your objects used in your desired function otherwise there would be no way to know if the array contained the element you are looking for. Mutating function means that the function will "mutate", or change one of its parameters. In this case, it is referring to the array that you are trying to edit. Parameters are constants by default. I already explained what $0 is an earlier comment but it's basically shorthand to refer to the element in the array. If I had an array of numbers, I could loop through it like this: for num in numbers { // Do something to each num } Or I could do it like this numbers.forEach { // Do something to each $0 } They are identical. If you want to learn more, look up "higher-order functions" and "functional programming".
Sure thing. **Equatable** is a protocol which enforces that a conforming type define a function: func ==(lhs: Self, rhs: Self) -&gt; Bool This makes it possible to use the == operator on two values of that type. You can see in my extension definition that I'm using a *where* clause to enforce that Element conforms to Equatable. Element refers to the generic type in *Array*. This is a really powerful feature of Swift which enforces that only Arrays with an Element that conforms to Equatable have access to the *delete* function. Try it for yourself by creating an Array with values that don't conform to Equatable, then attempting to call the delete function. The code will not compile. Considering *Array* is a value type and not a reference type, you cannot mutate a specific instance of it, as you can with *NSMutableArray*. Any mutations result in the creation of a new instance of Array. The **mutating** keyword here indicates that the function might create a new array which will replace the original variable. This can be demonstrated like this: var arr = [1,2,3,4,5] var arr2 = arr arr.delete(value: 2) print(arr2) Here, arr2 is assigned the *value* of arr, then by calling *delete* on arr, a new *value* is assigned to arr. arr2 still contains the original value of arr. Finally, probably the most confusing bit of code here for new Swift developers is `$0 != value`. Swift automatically provides shorthand argument names to closures in this form. `$0` simply refers to the first argument to a closure. In our case, it is the value currently being evaluated by the *filter* function. Swift also provides implicit returns from closures that contain a single expression, such as this one. Think of it like this: { return $0 != value } The *return* keyword is unnecessary as this closure contains a single expression. Edit: formatting
The goto fail bug wouldn't have happened if the inline if statement was written... inline. Writing the predicate on one line and the statement on the next is the worst possible choice which brings the worst of both worlds: none of the brevity of skipping the braces, and none of the safety of keeping them.
The problem is there's no overload of `+` which knows how to add a `Double` and any arbitrary `T`. Your `Operatable` protocol ensures that you can add two instances of `T` together and get another instance of `T`, but says nothing for `Double` and `T`. It's exactly the same issue as you'd see when trying to add an `Int` and a `Float` - there simply isn't an overload for `+` which makes sense here. Now, I don't necessarily think this is the best way to solve this problem - I would probably just implement a `random` function in an extension on any type that needed it - but let's see what it would look like anyhow. To make this compile you need the following things: (i) Some way to get `1` as the correct type - that way you can compile `(max - min) + 1.0` (ii) Some way to convert `T` into `UInt32` - that way we can put it into `arc4random_uniform(...)` (iii) Some way to convert from `UInt32`, the return type of `arc4random_uniform` back to `T` - this means we can return the correct thing. protocol ArithmeticProtocol { func +(lhs: Self, rhs: Self) -&gt; Self func -(lhs: Self, rhs: Self) -&gt; Self } protocol RandomlyGeneratable: ArithmeticProtocol, Comparable { static var unit: Self { get } // this returns 1 cast to the correct type, fulfilling (i) var unsignedInt32Value: UInt32 { get } // fulfils (ii) init(_: UInt32) } And then an example of implementing this would be: extension Double: RandomlyGeneratable { static var unit: Double { return 1 } var unsignedInt32Value: UInt32 { return UInt32(self) } } func random&lt;T: RandomlyGeneratable&gt;(min: T, _ max: T) -&gt; T { guard max &gt; min else { return min } let seed = ((max - min) + T.unit).unsignedInt32Value let randomVal = arc4random_uniform(seed) return T(randomVal) } Now we can do something like let x: Double = random(0.1, 99.5) Which worked for me in an Xcode 7.3.1 playground. *edit*: Just noticed you're using Swift 3, so there'll probably be one or two syntax differences. Nevertheless the general gist should work.
Why use `forEach` instead of a simple `for` loop?
The words that you don't have to write with `forEach` are the ones that make it more readable, if you ask me :)
To each his own, I guess. :)
not a fan of using `map` or `flatMap` for injecting side effects. Having to ignore the result indicates, for me at least, that there's a better way (which I think is `forEach` as was mentioned already)
I have always been frustrated with the amount of code it takes to add simple validation to an iOS project. While there are several libraries out there that attempt to address this problem, they mostly require subclassing UITextField or writing a lot of code. With SuperValidate can simply set the validation type in IB and call txtField.validate() before you submit your form. Please have a look and if you have any suggestions (or want to tell me why this is a bad idea) then please let me know.
&gt; Don't get me wrong, designing with scalability in mind is really important for minimizing cost down the line, I get that. It's just that when it comes to trivial things like this, which are 2 second fixes, people gamble their immediate code quality hoping it pays off in the future in the (unlikely) event what if their "what ifs" becomes true. See i dont view that as gambling code quality. Isnt that directly increasing it? Brevity != quality. Why would you code knowing youll have to fix something if you make what could otherwise be a trivial change? It defeats the whole advantage you are arguing for. 
I'm not sure about your protocol issues, but something smells fishy with your strategy here. You're trying to define a func that operates on any numeric type `&lt;T&gt;`, but when you take two Int64's and subtract them, you could well overflow Int64 -- not to mention the UInt32 you're then trying to squeeze it into. Numerics are hard, and Swift doesn't really do much (yet) to make them easier. The lack of a numeric tower suggests to me that The Swift Way is to use concrete fixnums for everything. (It's been brought up on the mailing lists before, so Lattner knows about it, but he seems to think that null-safety is so crucial you have to design the entire language around it, while overflow-safety is so inconsequential that you can just ignore it for several years. I disagree, but it's not my language.) Anyway, there's surely a way to do what you're trying to do, but as Larry Wall would say, the trick is to use the language's strengths rather than its weaknesses. 
Not exactly sure what you are asking, but it sounds like you have button A which shows a TVC with array of objectAs and button B which shows a TVC with array of objectBs. If so, you just create two different segues with different segue identifiers. In the prepare for segue you check which segue it is and set the array depending on the identifier. 
Floating point values are [NOT precise](http://floating-point-gui.de/). There is no guarantee you will hit precisely zero through your multiple subtractions. You may be seeing an incredibly small positive or negative decimal value, though it's hard to be sure with a description as precise as "like bla bla". 
Before anyone gets too excited, this isn't really a compiler. It supports some Swift syntax, but basically none of the semantics. If you have Swift code you want to run in a web browser, I think you'd be much better off working on getting Emscripten to compile it. That particular path doesn't work yet, but there's people working on it, and when it's done you'll get actual semantic parity (both now and in the future).
This could be a good start. There's a bit of unnecessarily verbose and non-Swifty code in there (I don't understand all of what it's doing), but it's not a big deal if it's not exposed, and it'll get fixed eventually. Comments: - I don't use iOS, but it looks like this barely uses UIKit, so it should be easy to `#if` this to support AppKit, too. - "Negatie" - It's very American-centric. There's universal types like "URL" and "Text" mixed in with American-only types like "SSN" and "States". It'd be nice for either the locale-specific ones to be scoped somehow, or for them to be generic and work appropriately everywhere (probably harder). - On a related note, the checks all seem to be ASCII-only, and contain lots of repetition. NSRegularExpression already has concise ways to say things like "any digit" or "any letter", in ways which work even for non-ASCII digits. An added benefit is that you can't, for example, mis-type the set of UpperCaseLetters (and then copy-paste it 3 more times). :-) 
...why?
There's two ways of looking at it, my mindset is always why-not i've found snapchat to be a great learning platform and from the engagement i've seen so far people seem to agree. Having said that it might not be for everyone :)
*Some feedback...* ----- It's not a pod. :( ----- There are no tests. :( ----- There's quite a lot of force-unwrapping. ----- if hints != nil &amp;&amp; hints?.count &gt; 0{ for index in 0...self.hints!.count - 1 { let result = self.hints![index].validate(self.transformedString) if result.isValid == false { return result } } } This whole block is WAY cleaner if rewritten as: hints?.forEach { hint in let result = hint.validate(transformedString) if !result.isValid { return result } } ----- self.validationType = ValidationType(rawValue: index)! if self.validationType == .Email{ self.allowedCharacters = Email } else if self.validationType == .Phone{ self.allowedCharacters = Phone } else if .... This whole block of code should be replaced by a `switch` statement. ----- Good code can make comments unnecessary. self.validationType = ValidationType(rawValue: -1)! //.None That should just be: validationType = .None ----- This is always a code smell. We don't need an `if`-`else` branch to just return boolean literals. We can just return the result of the expression (or the inverse of the result of the expression). if someCondition { return false } else { return true } 
For clarification... &gt; I wrote a little more about it here You didn't write more about it there. The entirety of the content behind that link was: &gt; **Swift development tips on Snapchat — Weekly** &gt; &gt; For anyone looking to learn Swift I’m starting a weekly snapchat story with tips on Xcode and Swift development. &gt; &gt; If you are learning and have any topics you would like to be cover let me know on Snapchat or Twitter. You could have just posted that there. I expected the link to actually have an example of exactly what you're doing, because I don't get it.
The problem is that being anonymous doesn't give you the data to make money with. they need to find ways to make money and that means being able to target their users somehow. 
This is interesting. I don't remember these from the Swift book. I'll have to read up. I like the idea of not allocating things until they are necessary though. 
Thank you! I've only read the Swift 1 book and then looked at the major differences between releases. 
And I'm just sitting here using reddit and shreddit to remove old post history, to be... anonymous. I just don't get these new fangled "apps".
Nice. Thank you.
Wow, great read! So mind blowing that one of apps is something as simple as a water consumption tracker. 
This is very well curated. Good to see Meng To's app in the list.
And... what is the name of that alien Xcode theme? Where can I get it? I must have it.
Custom one that I made; here's the [theme](http://www.filedropper.com/toccataandfugue) :)
My book...bleh
Good catch.
The problem is.... `Arbys` and `BurgerKing` shouldn't even be different types. All the properties are the same... you're just loading different data, and that's not a good reason to have different types. What you should have is a `MenuItem`, and then probably have some assets in maybe JSON format you can populate the menus with at run time.
How exactly do I set the proper decimal form? http://pastebin.com/Aka0TksV This is my code at the moment, but the energyBar.progress never changes from 10 to 9,8,7 etc. It goes straight to 0 when it's supposed to go from 0.1 to 0.0... Please help? 
Got it! Things are looking brighter already :)
I agree on the unnecessary var. I'll address that. However, I'm not sold on having an empty array for the hints object and getting rid of the optional. I originally had it as a non-optional array. However, when a user is trying to create their own ValidationExpression, I think it might be more natural to simply initialize it will nils for the values you don't need and not have one be an empty array. Also, the user shouldn't have to deal with the added complexity of the optional because that is hidden away from them. So long as I handle it correctly, it shouldn't be much of an issue. Correct?
Working on a new placement algorithm for an app I made in 2015 https://itunes.apple.com/nl/app/photofollow/id1015080216?mt=8
I have. However, that adds the complexity of handling optional values back on the end user. That's the ONLY reason why I didn't. Do you see a good use case for making it optional?
A curated list of open source iOS apps on Github. [here](https://github.com/dkhamsing/open-source-ios-apps)
I built a simple compiler in Swift, which I'll be talking about at 360iDev next week. I'm also hoping the language it implements will be useful to others wanting to learn! https://github.com/apbendi/bitsy-swift https://github.com/apbendi/bitsyspec Wrote about the idea here: http://www.scopelift.co/blog/introducing-bitsy-the-first-language-youll-implement-yourself
I'll be speaking about this at 360iDev next week and I really hope it will encourage more people to learn about language design! I was interested but intimidated by the topic for a long time, but its fun once you get into it. Can read more about the project here: https://github.com/apbendi/bitsyspec http://www.scopelift.co/blog/introducing-bitsy-the-first-language-youll-implement-yourself
There's some pretty significant changes here for a "beta 6". They're changing `.dynamicType` to `type(of:_)`, by analogy with operator `sizeof`, which probably makes sense. But they're not changing to `typeof()` because C++/C# uses that syntax for something slightly different and "this may introduce confusion" -- as if harmony with C++/C# is more important than internal consistency. "The core team recognizes that this means that we should probably resyntax the existing sizeof/strideof functions, but that should be a follow-on discussion." Ugh, this drives me crazy. I can never guess what the Swift team is thinking. They talk about "the feel and direction of Swift" but some days it really just seems like "whatever we feel like".
Yep, I think with Swift 3 the GCD extensions will be less useful. But the main goal of the library was to get the operator-based concurrency manipulation working cleanly, and that should still be useful in Swift 3.
Progress bars want the decimal form of a percentage - that is, a value between 0 and 1 - for example, 50% is 0.5. `energyBarProgress` contains values from 0 to 100, such that 50% is 50. You don't get to the decimal form by multiplying by 10 (giving you 500), you get it by dividing by 100. It's also worth noting you have to convert `energyBarProgress` to a Float *before* you divide, because dividing two integers will not give you a fractional result even if you convert it to Float afterward. Float(energyBarProgress) / 100.0 
I understand the core concept of an ordered set, but that doesn't make it any less painful to use in Swift. NSOrderedSet doesn't conform to any of the Swift collection protocols. It has ObjC-style NSOrderedSet/NSMutableOrderedSet, rather than Swift-style mutation support.
type(of:) better fits the new naming guidelines. There was a separate discussion afterward of renaming sizeOf() and a number of other preexisting fooOf() free functions; why would they jump the gun to insert an alteration of preexisting API in an unrelated proposal? Every alteration should get it's own discussion and proposal, even the 'obvious' ones. As it happened, sizeOf() and the other fooOf() functions were not simply renamed, they ended up getting removed altogether in favor of the unified MemoryLayout struct (SE-0101). That might not have happened without stopping to discuss. 
It's worth noting that you can't submit a GPL encumbered app to the App Store, the GPL is incompatible. Before you jump up and down, I said encumbered. If I write and release an app myself, and I license it under the GPL, since I wrote the app, I'm free to "license" it under whatever license I want to go on the App Store. Same goes if I work on an app that's generally GPL'd but has an additional App Store compatible license - eg all the contributors agree to release under both the GPL and a compatible modified license. Where it becomes a problem is if not all the contributors who wrote the code agree to relicense or additionally license. I believe VLC is in this boat. It's also worth noting this isn't the GPLs fault. Apples own App Store license is incompatible, if Apple made a change, it would simplify things. ref. http://apple.stackexchange.com/questions/6109/is-it-possible-to-have-gpl-software-in-the-mac-app-store
[Here's](https://github.com/Weebly/OrderedSet/blob/master/Sources/OrderedSet.swift) something from the folks at Weebly.
The changes make sense, but it worries me since we should be nearly done with breaking changes.
Thanks for sharing, I'm humbled to have created two apps on that list. Thanks for including me!
Not hesitant, I just want to get acquainted with 7 before I move on to 8 and have to figure out the minute differences of versions.. 
They are super similar, and Xcode 8 is better in many regards. I'd just move to 8 as soon as you can, if I were you.
I'm not really enjoying adding `@escaping` to delegate methods that use closures :/
Unfortunately, No. 4, designer news gave 404 errors for every article.
Yes, there actually is a great way of reducing tons of nested `if let` conditionals in your code! While this isn't actually going to reduce the amount of unwrapping you're doing, it's much cleaner and subjectively more concise. It's called the `guard` statement. guard let foo = getOptionalFoo() else { // We go here if the unwrapping failed! This block has to return or exit // this control flow (i.e. return, break, etc. see Apple documentation) return } // The foo variable was unwrapped in the outer scope! We can use it here freely. foo.doSomething() You can also do multiple statements. guard let foo1 = getOptionalFoo(), let foo2 = getOptionalFoo() else { // Either one or both of these didn't unwrap! return } // Both of them were not nil and unwrapped successfully foo1.doSomething() foo2.doSomethingElse() So you could easily condense all of that into one statement, which really cleans it up: guard let numSentencesAsString = /* your code */, let numSentences = Int(numSentencesAsString), let filename = /* your code */, let fileContents = /* your code */ else { // Something went wrong! return } print(fileContents) Other notes: * `guard` can also be used for normal boolean statements like `if`. [This is a quick read showing where/why it's good for that.](http://ericcerney.com/swift-guard-statement/) * [Apple's official documentation on `guard`] (https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html#//apple_ref/doc/uid/TP40014097-CH9-ID120) (near the bottom.) EDIT: As others are saying though, you could definitely look at refactoring this code.
Not much, but it should have more features to get more activity
`guard` is one way of doing this; but if you want stay closer your original code, you can also unwrap multiple things in one `if`: if let numSentencesAsString = con.getArg(Markov.Arguments.SentenceNumber.rawValue), let numSentences = Int(numSentencesAsString), let filename = con.getArg(Markov.Arguments.FileName.rawValue), let fileContents = try? String(contentsOfFile: filename, encoding: NSUTF8StringEncoding) { // Do your stuff } If you want to go on a functional-programming trip, I'd rewrite it as something like this: extenison /*Whatever type your "con" is*/ { // If you can get an argument by passing an enum directly you can write the other code more compactly. // Note: Markov.Arguments should not be plural func getArgument(type: Markov.Argument) -&gt; String? { return self.getArg(type.rawValue) } } if let numberOfSentences = con.getArgument(.SentenceNumber).flatMap { Int($0) }, let fileContents = con.getArgument(.FileName).flatMap { try? String(contentsOfFile: $0, encoding: NSUTF8StringEncoding) { // Do your thing } `map` and `flatMap` take a little bit to get used to, but I like it. 
I'm not OP, but I just wanted to say that functional programming always amazes me with its simple and concise beauty! I think that answer is the best solution for this problem.
A small compiler in Swift! (I posted this straight to /r/swift earlier, but I'll also mention it here because I really hope it will be useful for others!) The compiler is for a language called Bitsy, which is designed to be a great first language to implement, and has a series of tests in a repo called BitsySpec which let you know if your implementation is correct, or where its falling short: https://github.com/apbendi/bitsy-swift https://github.com/apbendi/bitsyspec Edited: typos
I generally feel they're making the right changes for the long run, but it's still a bit painful trying to keep up with the discussion while it's all in flux. Most of these discussions are on the mailing list though, if you want to see what's going on before they happen. It's a lot to keep up with.
FWIW, it feels like this function is trying to do too much. Consider how it might be refactored. E.g., `numSentences` might be a property on a missing protocol. Your code is trying to tell you that it's not happy about something.
Sorry if my original reply came across as angry - not intended I'm genuinely curious as to you choice of flat map etc etc. Does the 'functional' part of swift mean using extensions like you did to provide a more suited function call for my uses? Is this sort of like an adapter? Thanks for taking the time to explain. 
You do know you can put all of these on the same line, right?
That looks like a very nice library, but it's not integrated with NSOrderedSet/NSMutableOrderedSet, is it? Can it be used with CoreData? I'm not using CoreData myself, and I'll probably use this library in the near future for my project. Thanks for the tip.
Usually if you are asking that question, you've got too many.
There's so many different kinds of "multiplayer internet based games" that any answers would probably be too vague to be useful. Can you be more specific about what you're trying to accomplish? Offhand, I can't think of much that would be Swift-specific. Just build the architecture you'd build for any other multiplayer game, but use Swift. The iD folks have written extensively about the Quake network model. If you're writing a FPS, that might be useful to you.
High school locations are banned in Yik yak. But I can see that occuring in a campus setting. Fortunately for me I go to a commuter college and so do most of the yakkers in my feed because it's a manhattan based herd. So people barely know their classmates enought to want to bully them on social media. That is pretty nonexistant in the innercity.
If there aren't a lot of entries (or products) that would be in your database, you might just consider an array of dictionaries (i.e. [[String:String]] or similar) hard coded into the app or stored in a file. Core Data is a data store framework but it's quite cumbersome a lot of times for beginners (though maybe it's better in Swift 3). 
If this doesn't fit swift criteria then just ignore it I guess...
Just stick a plist in the app. http://stackoverflow.com/questions/24045570/swift-read-plist