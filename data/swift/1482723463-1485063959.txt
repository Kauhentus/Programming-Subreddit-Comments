Do you mean the useful libraries like Foundation, UIKit and cocoa? I think it may get some of foundation but you're not going to be able to easily port and iOS app to linux and windows any time soon.
There's RemObjects Silver: http://elementscompiler.com/elements/silver/ It compiles to MacOS and iOS, plus .Net, JVM, Android, native Windows (Win32) and Linux (Glibc). The problem is that it just provides the language, not the Foundation libraries. They provide their own cross-platform / cross-language open-source library, but it's written in Object Pascal. https://github.com/remobjects/sugar (Their compiler supports Object Pascal, C#, Swift, and soon Java.)
You probably mean UIKit, the useful GUI library that is still only going to be iOS.
Some people just don't want to admit that Apple is even involved in open source. Nor do they want to admit that Apples support of LLVM has been wonderful for the open source world. Just imagine where GCC would be today without the pressure from LLVM &amp; company. As for cross platform i have to wonder where this guy has been. It isn't like Swift is a state secret, the state of Swift on other platforms has been openly discussed for ages now. Now all of that being said Swift isn't perfect yet, on any platform, as it is still under very heavy development. 
You do realize that Apple isn't going to implement the Android specific needs for Swift on Android, right? That isn't Apples responsibility, rather it falls to Google, another corporation or the community. The fact that the compiler already runs on Android answers your question about being cross platform. 
That's not necessary at all. Google is going to move away from Java at some point anyway. 
&gt; Some people just don't want to admit that Apple is even involved in open source Where the fuck did i say that? However it's not its only charity when Apple supports open source. Chances are they benefit the most by it. Instead of: &gt; Just imagine where GCC would be today without the pressure from LLVM &amp; company. Imagine where LLVM would be without the support of the community... &gt; As for cross platform i have to wonder where this guy has been I'm right here. And if you would have read my comment earlyer you would see that I just state the obvious. Apple has a different focus than making Swift 100% cross platform. Which is fine. It's just as much of Microsoft/Google's etc. responsablility as it is Apples. &gt; Swift isn't perfect yet, on any platform, as it is still under very heavy development. Exactly as I said. Read my comment idiot.
Interoperability with JVM does not mean the language has to be JVM targeting... JVM has a thing called JNI.
Wonder if you meant to say CF isn't open source. If that's the case, it is not true.
Android doesn't use the JVM. Android uses a custom VM called Dalvik which is very different from the Sun JVM in many important ways. 
&gt; I think its a bit generous to assume that Apple planned 5 years in advance to build a new language... Really? The situation was so dire in 2005 that [Siracusa wrote a 3-part series](http://arstechnica.com/staff/2005/09/1372/) about the hole Apple was in, and what they needed to do: &gt; It's way too soon to even think about another move, right? Sure, if you're a developer. But if you're Apple, you'd damn-well better be thinking about it—not only thinking about it, but beginning work. &gt; &gt; Oh yeah, that's right, there's some other transition going on right now, isn't there? [ed: the Intel transition had just been announced.] Well, fine, delay the whole memory-managed language/API thing a year or two if necessary. But someone, somewhere at Apple had better be thinking long and hard about this issue. If Apple does get itself into another Copland-style jam around 2010, I'm not sure there'll be any pre-fab "modern operating systems" hanging around for them to purchase and refurbish this time. If Apple *wasn't* thinking about a new language in 2005, that would be rather shocking because the entire rest of the Mac world was already begging for it. &gt; So? So what they did is *strictly better* than if they had built the compiler in a way which required porting in the first place. In essence, they've been releasing the Swift compiler in bits and pieces for the past 10+ years, as open-source projects, starting with the codegen module. (Have you ever found a bug in Swift codegen? Me, neither.) In contrast, it took over 5 years for Go to get ported to ARM, because Google hired old Unix people who did it the traditional way. Now that it's done, that's it. You can't use Go's ARM support for anything except compiling Go on ARM. Apple hasn't ported Swift to anything. They've been operating for the past 10 years in a way that abstracts this away so it's not even a compiler issue.
I would recommend to update to Swift 3 right now. You will have to at some point, so the sooner, the better!
You should prob practice more
No maintained app will be in Swift 1 anymore since Xcode doesn't support it. The app I'm working at work is still Swift 2 at this second. I'm actually starting the Swift 3 migration today for it. We hadn't switched yet mainly due to our release schedule. The company's CEO didn't want to spend time (money to him) on it and wanted to focus on our release and shipping the app. We finally got him to agree on it for this week's project since most of the company is shut down for the holidays and Xcode 8.2 is the last that will support swift 2. Because of Xcode dropping support you should migrate now. It'll make you're life easier in the long run since you'll have less code to migrate. It'll also make it easier on you if you start using 3rd party libraries through cocoa pods or Carthage.
I do why?
There's nothing specific to Swift 3 – the steps are the same regardless of what language/version you're using. You need to set it up in the Apple Developer Center for your app. IIRC you need to generate a certificate and upload it. Then you call [`registerForRemoteNotifications`](https://developer.apple.com/reference/uikit/uiapplication/1623078-registerforremotenotifications) and away you go. More info here: https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1
Swift 3 and never look back.
Fired up XCode and started playing with everything I saw. What's this window for? Drop controls on it, oops not allowed, what's this view for? Drop controls here, aha! Compile and run, sweet. Click on window's red button, doesn't close, wtf? Google was next to me all the time. When in doubt, Ray Wenderlich's tutorials helped me a lot. Four apps and two months later I consider myself proficient enough in mobile, desktop and server Swift. That's the story of my life. Just go for it.
Haha just a fun thing to mess around with!
The current implementation doesn't have GC, but that would open up interesting possibilities, also welcome any PR's on the repo--there are still many things lacking.
Here is the log: : : remote: Compile Swift Module 'Vapor' (86 sources) remote: Compile Swift Module 'VaporPostgreSQL' (1 sources) remote: Compile Swift Module 'App' (31 sources) remote: Linking ./.build/release/App remote: /usr/bin/ld.gold: error: /tmp/build_f8e0b675be87581d62331d2ee0e6f8f5/.build/release/Fluent.build/SQL/GeneralSQLSerializer.swift.o: multiple definition of '_TMRbBp' remote: /usr/bin/ld.gold: /tmp/build_f8e0b675be87581d62331d2ee0e6f8f5/.build/release/App.build/main.swift.o: previous definition here remote: clang-3.7: error: linker command failed with exit code 1 (use -v to see invocation) remote: &lt;unknown&gt;:0: error: link command failed with exit code 1 (use -v to see invocation) remote: &lt;unknown&gt;:0: error: build had 1 command failures remote: swift-build: error: exit(1): /app/.swiftenv/versions/3.0.1/usr/bin/swift-build-tool -f /tmp/build_f8e0b675be87581d62331d2ee0e6f8f5/.build/release.yaml remote: Fetching Dependencies [Done] remote: Building Project... remote: Error: execute(1) remote: ! Push rejected, failed to compile Swift app. remote: remote: ! Push failed remote: Verifying deploy... remote: remote: ! Push rejected to swiftforums. remote: To https://git.heroku.com/swiftforums.git ! [remote rejected] master -&gt; master (pre-receive hook declined) error: failed to push some refs to 'https://git.heroku.com/swiftforums.git'
Oh because that helps with constraints. No other reason 
I second the Mark Price courses - he takes you through a lot that isn't directly swift/iOS, that you don't learn in other courses. Github for example. And he shows you the process of programming, errors and all - at first I was seeing him debug the code but as time went on, I was able to see the errors he made before he even tried to run it. He has a laid back style that is an acquired taste for some, but I've learned so much more from him than the other courses I did. Only drawback is the price. 200 euro if it's not on sale. So get it when it's on sale which it often is.
Migrating was annoying but worth it. The biggest pain in the ass was that every single CGPath method did not update. So I had like 500 LOC I had to go through one by one and update. For instance CGPathMoveToPoint did not automatically turn into path.move(to: point).
So when I first took on the task of learning Swift I started by throwing myself straight into documentation and the Swift Programming Language Guide. The thing I struggled with the most was GCD. 
YouTube is a good resource. 
Here is the latest from my ordeal. Started with a plain "Hello world", compiled, deployed. Tried four different approaches to the same routing: drop.get(){ "Hello World!" } // OK drop.get(handler: IndexHandler().index) // NO let indexHandler = IndexHandler() drop.get(handler: indexHandler.index) // NO drop.get(){ IndexHandler().index($0) } // OK So definitely there is something wrong with drop handlers which I am using a lot since I hate "drop bloat". I remember using the implicit { handler($0) } everywhere but then I decided to use the more conventional ( handler: method ) and apparently that's the culprit. I am not 100% sure since I'm very tired after trying so many things to see what worked and what not. Tomorrow I'll give it a second pass.
Apple's official swift guide is another great resource https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ 
https://blog.quandl.com/api-for-stock-data
Please keep paywall or "free" trial content off of this sub. 
What you want is one Xcode project with different targets.
Link to book?
i like to add swift 3 to the title hoping someone who read a recent tutorial might link it. 
I'm guessing he's talking about the eBook from Apple: https://itunes.apple.com/us/book/swift-programming-language/id881256329 Also available via HTML here: https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html I've been going through the HTML version myself and it's been really helpful. FWIW, I don't have any other programming experience that's really relevant. Personally, when I get stuck I go over the material over and over and ask questions online until I understand every bit on that chapter. EDIT: Also check out the wiki: https://www.reddit.com/r/swift/wiki/index
The error you're seeing is from a bug in the Swift compiler that has already been fixed. Just ask Heroku to upgrade to the latest released version of the compiler.
I've found Swift to be very hard to learn. I have a background in C, C++, C#, Objective-C, x86 Assembler, and a few web languages. All were pretty straight forward to learn...and then there's Swift. I had a hell of a time learning Swift (and still run into issues). Part of the big problem is all the "syntactic sugar". It's really hard to tell what some things are doing because it can be written 50 different ways. That's sloppy in my opinion. Give someone one option, if it becomes whats popular, make it part of the language. For resources I'll list the best and worst (in my opinion): Best: Hacking With Swift, Ray Wenderlich's Swift Apprentice, and Apples official book (after the "Swift Tour" part which is nice, but can be confusing). Worst: Big Nerd Ranch Swift book, aka nothing more than a rehashing of Apple's Swift Tour. This was the first BNR book I was ever disappointed in. It's obvious Hillegass didn't write it. 
What aspect of it do you find difficult compared to other languages?
No idea why everyone doesn't use SnapKit (or something similary), not a point in battling Apple's difficult syntax when the issue's already been solved. 
I'll have to check out Wenderlich, many here have recommended it. I'm personally finding the number of ways of doing the same thing to be somewhat overwhelming as well. For example, there are a handful of ways to write a closure.
I've heard from some that optionals are one of Swift's better features, so I'm paying closer attention to them now. I guess you have to get your hands dirty to learn that. When I get to protocols I'll be sure to check that blog post out and I'll definitely look into the delegate pattern once I start learning iOS specifics (rather than just Swift).
Sorry, thought some might be interested. I do provide a lot of premium content for free btw.
Wow, that's proficient. Did you know any other languages before?
Twenty more but that's irrelevant, all languages are the same with different syntactic sugar.
I sat down on a flight with a Swift playground and the Apple Swift ebook, and just went through it, reading about each language feature and then writing out a trivial example of it to get it to stick in my memory. Then, I converted to Swift two existing toy applications I'd written (one iOS, one macOS) of a few hundred lines of Objective-C each. I then wrote a Magic: the Gathering life-tracker app from scratch, did all the Swift katas at Codewars, and I'm now I'm working on a server-side Kitura-based project.
This isn't really a Swift or SpriteKit issue - if you are using UIGestureRecognizers, then it's a UIKit question in disguise. That said, yes, you can mix and match anything but it does get complicated with gestures conflicting sometimes. One of the easiest ways to deal with gesture conflicts is to determine if the gesture really needs to be recognized starting from everywhere on screen or not. For example, if you want to have a swipe gesture from a specific area on screen, then implement the delegate methods that let you choose to ignore touches for that gesture when they don't even begin in the area you want. Stuff like that. 
Forward the port on your router and sign up for a dynamic dns service. You'll be open on the wild Internet and you'll have to be careful about securing everything. Might be easier to just pay for a hosted service somewhere. If you are set on doing it locally, look into network segmentation so if there is a breach it's hopefully just to the database and not to the rest of your network. Anyway I'm not an expert but have done all these things in the past, $0.02. Best of luck.
Yes, it is possible, with programming!
You are making yourself look foolish. Try looking up Swift on Windows
Use vagrant to setup a Linux virtual machine and install whatever flavour of MySQL you want to run on your computer and then setup your router to forward port 3306 to the IP of your Linux VM. It will isolate you from them and you can get rid of it as easily as typing vagrant destroy. 
&gt;Write web services that talk to the database, have the devices talk to that This is an advice I suggest taking. A web service allows a device to retrieve and manipulate data over a network. With Swift, there are many ways to write a web service: * [Kitura](http://www.kitura.io) * [Vapor](https://vapor.codes) * [Perfect](http://perfect.org) Personally, I think Vapor is the most beginner friendly but Kitura has more flexibility and power. 
There are at least twenty languages which are essentially the same with different syntactic sugar, but not all. I wouldn't say Erlang, Forth, APL, Web, and Prolog are the same apart from syntax. There are some major fundamental differences.
I would recommend keeping it as is and not refactoring it further. From some past experience, JSON structures can often change while your database schema stays roughly the same. By keeping your Resource and Entity implementations not tightly coupled together, you can keep any data transformation logic inside your Resource while your Entity implementation can stay the same. Adding too many layers of abstraction or coupling between classes can potentially be a bad thing (see any Enterprise™ quality Java code). Even if there's some code duplication for now, there may not be in the future, so I'd keep it as is.
Sounds like you need a `BaseResource` class ;) Being serious, there is nothing wrong about using a base class in Swift. Just try your best to not add any functionality to it other than those methods that are exactly the same for all resources. Keep it a simple, dumb, base class and you should be ok. As your resources evolve, you will reach a point where most of them are different and your base class is no longer necessary. 
Let's see, do they all have input/output and assign, condition, repetition and functions? Then they're all the same, every single one of them. You could build the simplest language of all with just five instructions: = assign ? condition @ repetition # function $ print And it would work just like all of them. = a 1 --assign ? a&gt;10 $ a --condition @ 10 $ a --repetition # sum(a,b): a+b --function = c sum(1,2) --assign $ c --print And it all comes from registers and jumps from machine code. That's programming in a nutshell, just add syntactic sugar.
I use webscraper.io to scrape website data. Easy to use. 
Thank you! That fixed my issue.
I think this should work in your definition of Resource. I just tried something similar in a playground and it worked. protocol Resource { associatedtype DataAccessObjectType: DataAccessObject var entityDAO: DataAccessObjectType { get } 
If it did, open up the breakpoint navigator (one of the tabs on the left hand panel) and try to find the breakpoint that leads to your app hanging and get rid of that, instead of disabling breakpoints alltogether, as they are a valuable if not essential debugging tool.
Use the built-in [libcompression](https://developer.apple.com/reference/compression/1665429-data_compression) library and ZLIB decompression.
[iOS 10 Programming Fundamentals with Swift](https://www.amazon.com/iOS-10-Programming-Fundamentals-Swift/dp/1491970073/ref=zg_bs_11006483011_3?_encoding=UTF8&amp;psc=1&amp;refRID=3SZD5G5H2PM69WATSWB2) It complements apple's offical swift documentation well. If you're looking for something at a similar technical level as the apple documentation but explained somewhat differently that's a good book. Assuming you already know a few languages, the one thing that I think deserves the most attention are optionals since they're a relatively new feature in programming languages. Most of the other stuff is nothing new. Also, structs and the fact that the most basic data types are implemented as structs.
Thank you for your response. I am unable to understand how to implement it? Is there any library available for it?
Did you look at the [sample project](https://github.com/ZipArchive/ZipArchive/tree/master/SwiftExample)? Looks fairly unambiguous to me.
You can run Swift code on linux. Get VirtualBox, download something like Lubuntu or Peppermint which is super light on resources (Even Raspbian Pixel which has a x86 version now), then get Ubuntu Make, and then install Swift, then you can just schedule your program, currently about to leave the office, so I'm sorry I can't be more thorough. Edit; https://www.youtube.com/watch?v=uOepDYkDON0 
I did. But in the example, first they zip and then unzip so the path is clear. What will happen if we start with a zip and then unzip it. Basically, I am confused about the zipPath and destinationPath. How to set them? 
Is OpenShift Swift friendly? Any links on how to setup a simple swift app on OpenShift? Looks like an interesting option for hosting.
UrlSession (fetch) and NSRegularExpression (parse) are your friends.
Not entirely sure what you are asking (hosting or scheduling or both), but at least for the scheduling side of things, have you looked into NSTimer? (now Timer in Swift 3)
There are a lot of free server host sites.
Heroku will work just fine
Check out vapor.codes or some if these other server side web app frameworks. Not sure if you need a HTTP client as well? 
Here's the rationale from Apple: https://developer.apple.com/swift/blog/?id=11 Kinda old, but...
Having APIs that you can only override via a subclass is poor API design. If you want to enforce a class implements something, a protocol might be a better route. Swift seems to prefer Protocol-Oriented Programming and value reference types over OOP whenever possible. So you shouldn't have a massive object hierarchy structure in Swift-based projects anyway, which is probably why they didn't include a protected access control level.
MacOS has cronjobs. 
From the requirements that OP gave, this is the solution. He needs to explain how the web service relates to running something periodically.
Cron. 
Who's talking about overriding? I only mean accessing, as in executing a method or reading a variable. And I'm also not *just* talking about subclassing, I also want this to be available in extensions. So I don't really see how your objections apply here?
Ah shit
True, but cron on Mac has been [deprecated](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/ScheduledJobs.html#//apple_ref/doc/uid/10000172i-CH1-SW8) for several years. Unless you specifically need SysV compatibility, I'd avoid it. You never know when Apple is going to yank the rug on deprecated compatibility features. Even most Linux distributions have moved off cron.
Ok fine, I didn't know it was deprecated on MacOS... However, my point is still using the existing tools, and in OP's case, he can either use his Mac or use a server. Most Linux servers I know of still use cronjobs, so this is a non-issue.
Hello! Everyone is different, and so everyone learns differently, but I can provide some broad brush stroke guidance. * **Advance warning #1:** this is such a long post that I had to split it over two messages. Sorry – I wanted to cover all bases! * **Advance warning #2:** It's past midnight here, and I typed all this off the top of my head. I reserve the right to make massive edits in the morning :) * **Advance warning #3:** Obviously this is all my own opinion, and you'll hear a variety of other opinions from other people. Wouldn't it be boring if we all thought the same thing? * **Advance warning #4:** If all this is too much, the TL;DR is: my book [Swift Coding Challenges](https://www.hackingwithswift.com/store/swift-coding-challenges) is almost certainly going to be useful to you. It's available by itself, or as part of the [Swift Power Pack](https://www.hackingwithswift.com/store/swift-power-pack). First: I'm glad to hear you're following my Hacking with Swift book. It was written to provide broad instruction in a wide variety of iOS development techniques, so you'll meet UIKit, SpriteKit, GameplayKit, Core Graphics, Core Image, Core Data, iBeacons, and more. This varied approach doesn't work for everyone, but ultimately Hacking with Swift is only ever going to give you foundations for future learning – if you want to really become a Core Data expert, for example, you'll need to follow other tutorials later on. Second, you said "I'm currently doing 3 chapters from the HackingWithSwift book a day." This gives me some cause for concern, because I usually find that people who aggressively rush through often fail to internalize what they are learning and so struggle to get much from the course. There are challenges at the end of every project, but even they weren't enough to get some people to slow down so I wrote the Hacking with Swift guidebook that includes revision notes and even bigger challenges in a bid to get people to take their time. I realize you're keen (and that's awesome!) but what I don't want is you to just fly through the chapters by typing what I say, without thinking about what you're doing. I'm not saying that's what's happening here, but I do want to sound a note of caution: I would generally recommend one project a day. Whenever someone has said to me "I didn't like Hacking with Swift," I frequently learn shortly afterwards that they rushed through :) &gt; I can't imagine it being even close to 10,000 On the contrary: if you follow the complete Hacking with Swift book – from introduction to project 39 – you will have written almost precisely 10,000 lines of Swift code. &gt; I'm not sure if I'll be comfortable applying to non entry-level (associate) positions. You're welcome to apply for whatever level you think suits you best, but realistically a truly entry-level position would be a waste of your skills. Being a good developer isn't just about writing good Swift code: you need to plan, test, debug, document, communicate, and more, and also have a structured, sensible work ethic. (Side note: I'm a chartered engineer, which is a UK accreditation for senior developers. Not a single part of the application route focuses on how much code you write.) You already have some commercial experience, so I'd like to think you have at least the foundations of many of those things. You're probably also familiar with things like Git and Jira, which are more things that need to be taught in entry-level positions. If your knowledge of Swift *were* just the most important thing, then Hacking with Swift would take you a long way. But I group my books into "Beginner", "Intermediate" and "Advanced" to help provide guidance to people consider which one to buy, rather than saying "if you finish this book, you can now apply for an intermediate role." Instead, in any sensible company at least, ultimately the only thing that matters is experience: do you have some proof that you can write iOS/macOS/whatever apps at a certain level? Do you have a portfolio you can demonstrate, and discuss in technical detail? Can you walk an interviewer through what problems you faced and how they were solved? Following Hacking with Swift teaches you a lot of things – and certainly gives you a pretty massive library of code to fall back on when you inevitably forget stuff – but nothing beats you starting a new project in Xcode and hammering out something yourself. That's why the challenges in the Hacking with Swift guidebook tell you to make a new app from scratch; they kick the crutches away, at least temporarily. &gt; it's a little daunting that most of these positions require 1-2 years of mobile experience while I'll only have two months - albeit it'll be two busy months. Thinking purely in terms of Swift, no one has much experience. A lot of people - myself included - started learning Swift the very day it was announced, but even we can't lay claim to having more than three and a bit years of experience. Mobile is of course different, because iOS has been around much longer than Swift. But you have to ask yourself: if you can demonstrate you're capable of independently making great apps, if you are indeed strong at solving general computing problems, and you have a genuine drive to succeed, would you really want to work for a company that says, "sure, you have all those things, but we need someone with more years on their resumé"? Also consider the possibility that joining at an entry-level post might be exactly what you need: you'd be given tasks you can fly through and excel at, and hopefully earn promotion through good old-fashioned hard work. Trust me: the stress of senior positions can be every bit as unpleasant as you imagine. &gt; A side note is that I've only been coding iOS for two weeks, but following the book, I'm already making apps that somewhat resemble well known ones in the app store (minus the UI, UX, and art, and scalability of course...), which does give me some confidence, but also gets me thinking aside from familiarity with packages and efficiency, what separates a novice iOS developer to an intermediate? and to an expert? I'm going to tackle this in two parts – I'll come back to the "what separates" part later. First, yes: the book does guide you through making apps similar to ones you find on the App Store. That's intentional: even the cleverest apps are just different combinations of the same basic building blocks, and the goal of the book is to introduce you to as many of those building blocks as possible so you can really get a feel for what iOS can do. However, you hit the nail on the head when you mentioned UX and scalability: these are two things Hacking with Swift doesn't cover. My brain is packed with UX things I've learned over the years, and when I teach people in person they sort of just leak out spontaneously, but I haven't yet found a sensible way I could sit down and write a book about them. Years of using Apple's apps, reading and re-reading Apple's human interface guidelines, and just playing around with hundreds (thousands?) of apps over the years means I've just learned stuff by osmosis. Any experienced iOS developer can look at a non-native app running on iOS – even a cleverly disguised one – and realize it's not native, for a hundred tiny, tiny reasons. Scalability is also difficult to learn, because I don't think it's really possible to learn by reading books. Sure, you can learn the *theory*, but I just don't think it sinks in meaningfully. This is something you learn by working alongside other developers: doing code reviews, asking questions, and (sorry) making mistakes.
One nit: &gt; How do you think iOS 7 impacted developers? Was this a watershed release for iOS? I've been writing code for OS X since 10.0 and I'm sure I can't tell you what was special about any particular version. I know there was a release where NSTableView cells gained the option to be view-backed, and I know there was a release where NSViewController got about 90% of its current functionality added, for example, and those were both great for developers, but for the life of me I couldn't tell you which versions they were.
&gt; Was this a watershed release for iOS? Yes; probably the most divisive release of iOS so far, not least because it was the first release to ditch skeuomorphism. All previous releases encouraged replication of physical designs – wood, leather, etc – whereas iOS 7 and later became super-flat. It also introduced the (even today still problematic) recommendation to place content behind navigation bars and toolbars. I'm not looking for people to argue for or against skeuomorphism, or for or against content going behind nav bars, but I would at least expect them to have an opinion worth discussing. [It doesn't need to be vehement](https://twitter.com/stroughtonsmith/status/799358385070149637), but certainly an answer of "what's so interesting about iOS 7?" would diminish my confidence in a senior developer somewhat :)
[removed]
Did you find a decent Twitter library in Swift, or did you write your own? I'm currently working on something that would benefit from a pre-existing Twitter library…
If you have a CS degree then HWS should be too easy for you. I'd watch the Stanford lectures and do EVERY SINGLE ASSIGNMENT. After 20 videos you should be close to employable. 
Hey man I've been interested in developing games but don't have any previous coding experience. Did you like udemy? How would you compare that to just learning swift from a book and applying that?
[removed]
&gt; [Properties](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html) &gt; Properties associate values with a particular class, structure, or enumeration. Stored properties store constant and variable values as part of an instance, whereas computed properties calculate (rather than store) a value. Computed properties are provided by classes, structures, and enumerations. Stored properties are provided only by classes and structures. They're almost the same, but properties are associated with a class, structure, or enum. A local variable inside a method is not a property. A static global variable is not a property. In other words, all properties are variables or constants, but not all variables are properties. 
Variables are a generic term for values that have a label. Properties are variables that are members of a class/structure/enum. Sometimes known as 'fields' in other languages. IIRC, there's a section on computed properties before those quotes. So the quotes are just saying that what was explained in that section also applies to global and local variables in general.
&gt; it was the first release to ditch skeuomorphism. From a developer's perspective this doesn't seem particularly interesting. While I remember trying to recreate the frosted translucent overlays Apple had in their own API's and dealing with spacing issues for table views under translucent nav bars, I don't think iOS7 was necessarily a huge release for developers (designers and consumers are another story). iOS6's Auto Layout, for instance, had a much larger impact than anything in iOS7.
I got my first programming job, objective-c for iPad apps, after making a flappy bird clone. No degree, no experience in the industry. There's aren't enough programmers around, especially for iOS, it's an employee's market. I think OP is pretty much ready now
[deleted] ^^^^^^^^^^^^^^^^0.8103 &gt; [What is this?](https://pastebin.com/64GuVi2F/64085)
I think you have proved the value of the question perfectly: you answered in an interested, engaged way, and provided reasoning for your position. You even provided some avenues for further discussion – the impact of Auto Layout – so I'd be happy with your answer. That's not to say I *agree*, and indeed one of the many things I like about developers in the Apple ecosystem is that they show an active engagement with design rather than shrugging and saying that's for designers to worry about. However, interviews aren't about finding people who agree with everything you think.
I couldn't disagree with you more. Computer science degrees vary across the world in terms of their approach and content, but even then I'd be willing to bet that none take you even close to the level of iOS development of Hacking with Swift.
NSRegularExpression is what you need.
 let dog = Dog() dog.name = "Tinkerbell" // is a property, belongs to an object let name = "Taylor Swift" // is a variable, belongs to nobody
If this doesn't have to be inside of an iOS environment, just use Python. So many libraries designed specifically for this reason and super quick to implement.
Raspberry Pi projects 
This is entirely up to you. My favorite is Mapper (and I think it does alright in benchmarks, though is wasn't the fastest). I've also enjoyed using Gloss because it can decode and encode. Edit: this repo has a great overview of several that you mentioned, including examples and benchmarks: https://github.com/bwhiteley/JSONShootout/blob/master/README.md
Use NSURLSession.dataTask to request the URL you need, and then in the completion handler initialize a String from the returned Data. This string will be the HTML of the page. If you actually need to *parse* the HTML (find a specific div, etc) then you can use something like [this](https://github.com/collinhundley/HTMLParser).
Yes, I know the link. I created this post after reading this. First of all I realize that ObjectMapper was so slow in my dev experience and learning form the link. I used Gloss quite a little bit but I learned that that is no traversing the JSON support like "data.items.0"
I finished a 12-week immersive iOS Development course in mid-Dec. We spent the last 4 weeks in the course developing our capstone project. You can check it out at https://www.docitapp.com/ Some of the technologies we used: Firebase (Auth, Database, Storage) and branch.io (for deep linking) Dependencies: IQKeyboardManager and Fusuma camera Let me know what you think! I'm currently working on a few side projects to prepare for the job hunt. Lately, I've been really interested in Vapor/server-side swift. I built a really simple web app to serve up some json which I'll be using in an upcoming iOS project. Thanks was a lot of fun to build! Really cool seeing what everyone else is working on and I can't wait for what the new year has in store for all of us!
My Favorite is SwiftyJSON: https://github.com/SwiftyJSON/SwiftyJSON I really like how it maps the objects and gives you a ton of flexibility for different types of object forms. Since it treats each items as a full class I can embed methods in my object conversion and just pass around JSON objects as first class citizens with their own logic etc. Transforming back to a dictionary is also super flexible. Dalton (The author) is crazy responsive also so the community is good.
SwiftyJSON is not JSON mapper. It's a library that plays easily with JSON.
I ended up on Decodable due to this blog post: http://alejandromp.com/blog/2015/10/28/swift-json-mapping-libraries/ I didn't like the properties needing to be optionals with ObjectMapper when I first looked into it either.
Argo is pretty neat and elegant, but it's not as good in performance (which doesn't matter most of the times). 
Here is some code of mine i used to do some scraping. html will be all your html.. I parsed through it with a loop.. github for more info: https://github.com/wasupwithuman/ScrapeME/blob/master/ScrapeMESwiftly/domain.swift func connectToDomain(page: String?) -&gt; String { var site: NSURL! var status = "Running...." if let page = page { if page.containsString("http") { site = NSURL(string:page) } else if !page.containsString("http") &amp;&amp; page.containsString("/") { site = NSURL(string:self.domain+page) } else { site = NSURL(string:self.domain+"/"+page) } } else { site = NSURL(string:self.domain) } status = "Querying: \(site)" if site != nil { do { html = try String(contentsOfURL: site, encoding: NSUTF8StringEncoding) } catch _{ status = "Could not query \(site) have you tried https?" } } else { status = "Invalid Website" } return status } 
You got lucky. It was significantly worse for me with a masters and multiple apps in the App Store more complicated that Flappy Bird.
Everyone knows it's a terrible idea to try to parse HTML with regular expressions: http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454
hey I used this https://github.com/mattdonnelly/Swifter it lets me post a tweet with only about 9 lines of code
Good point. worth a look though but apologies. 
I miss something like [jackson](https://github.com/FasterXML/jackson). This is a java framework and uses custom annotations. Similar for swift, one can use the `Mirror` class for serializing objects to json. https://github.com/peheje/JsonSerializerSwift I wonder if swift will get custom annotations?
You should have been able to delete the enum it was complaining about, type a "." and bring up auto completion to show you all the possibilities. Also Option-double click on the function to open its documentation, where you would have found the type for that argument, drilling down to find the possible values.
I don't have anything like NaturalNode yet, but plan to tackle something similar soon. The idea's to make it part of [Swift AI](https://github.com/collinhundley/Swift-AI). Personally, I think Swift has huge potential in ML.
Awesome thanks! I followed along with the iTunes U modules as well. Helpful but a bit childish, I'm from from beyond that but I think I can move a bit faster. 
1. import CoreBlurtooth 2. instantiate a CBCentralManager 3. wait for callback with state changed to PoweredOn 4. start scanning for peripherals. you need the advertised service UUID 5. store the scanned CBPeripheral in a property that survives while you are connected 6. set the delegate of the peripheral 7. discover services. you need the service UUID 8. when services are discovered, discover characteristics. you need the characteristic UUID 9. when characteristics are discovered, perform read / write 10. when you are done disconnect using the CBCentralManager
I've successfully used the 'Allocations' instrument to help me find retain cycles, don't really know what the 'Leaks' instrument is for.
Here's a walkthrough that might help: https://www.cocoaphile.com/posts/read-from-a-bluetooth-le-device-with-corebluetooth
Interesting! A post exploring best practices to do the same thing would be interesting. 
Swift has been the bane of my existence. When swift came out we were all excited for this new language and we were eager to try it out. Then swift 1.1 happened. Eh minor changes. No biggie. 1.2, starting to hope these code breaking changes don't become a thing. Jump forward to swift 3, I have just completed that update and moving from 2.3 to 3 was unbelievably painful. It added so much crap. Data objects were being wrapped in nsdata and then cast back to data. Eg NSData(data: dataObject) as Data as Data as Data as Data as Data as Data I regret using swift.
Try /r/iosprogramming. You're likely to get an answer there. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/iosprogramming] [It will be thoughtful if someone help](https://np.reddit.com/r/iOSProgramming/comments/5l3vsg/it_will_be_thoughtful_if_someone_help/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
I try to do that "unselected" user info remove from dictionary, when i erase checkmark the cell.
Ahh wish it was based on vapor. I've seen all of the benchmarks but kitura just feels so thrown together. I'm sure there are differing opinions but I just love how vapor is structured.
Start with your own projects as soon as you can! That helped me so much more than any tutorials I've followed.
So what exactly do you want to happen to the input? Do you want all the words before a specific word?
`myString.components(separatedBy: " ")` returns an array of words, which you can loop through. That might be what you're looking for.
I'd guess a UITableView. The theming is probably standard iOS UIAppearance proxies. Not hard to do in your own code if you like it.
nope same error :/ 
Yeey!! :)) Thank you, it's solved !! 
You should use protocol.
What would be the point? Just to save a little typing? You can't change the type, or the subclass would no longer have the same interface as the superclass. B would no longer be-an A. You can change the initial value, but you can do that from an initializer anyway. I'm not sure exactly what's going on with that StackOverflow question, but his "you can do it" example fails for me (Swift 3.0.1): error: cannot override immutable 'let' property 'lightSaberColor' with the getter of a 'var' so I assume that's a bug that was fixed at some point. I suspect what's going on is related to dispatch as discussed [in this article](https://www.raizlabs.com/dev/2016/12/swift-method-dispatch/). That is, in Swift (like Java but unlike C++), methods are virtual by default. You have to opt-*out* if you don't want subclasses to be able to change that part of the interface. Likewise, it seems logical that `let` is displaying intent that the base class wants that to be part of the interface for all classes (i.e., final), while a computed `var` displays intent that the base class wants it to be overridable. A value `var` is kind of in between, but since it doesn't really serve a purpose (see above), I can see why they just forbade it. Still, interesting question. You could always file a bug and see what they say.
I tried - I could not extent the AnyObject protocol.
You need to create new protocol with render function. You custom objects (charts..) should implement that protocol. In Page class replace AnyObject in array with name of the protocol.
No new projects in it until it gets a decent meta system. Also....people wanting to upgrade from 2.3 to 3 pay 50% more per hour. Its a stupidity tax.
Caveat: I'm not an expert With that said, there are tons of great free resources to get started with. Do the Stanford course on iTunes U, go through Hacking With Swift, and use Ray W.'s website for help on projects as you go. 
I don't have the prerequisite knowledge for Stanford :(
In my **short** programming career, there has been a few instances where I wish I could override stored variable's type. class Parent { } class Child: Parent { } class A { var test: Parent } class B: A { override var test: Child } In this example, `B` could do additional thing to the `test` property using methods of `Child`. I don't know what would be required to make this possible, but I do think it will be great if we can override property's type
Yup! That was it. Works great. Thanks.
Good points. While the conclusions are fairly straightforward with respect to which techniques are faster or slower, I was still surprised at the degree to which they differed. Most folks probably don't realize just how much alloc/dealloc is happening under the hood when they're shuffling Characters. Your observation is correct that the analogy to Python default parameters and mutability would only apply for class types—in your example, if `C` is a value type, the compiler knows with 100% certainty that it won't be mutated inside the function because it's not passed as `inout`, and you can't specify a default value for an `inout` parameter. The same would be true for any expression or pattern containing a literal (or even a non-literal construction of a value type), so it should be possible to optimize those to only be constructed on first run. I'd also be curious if there are other Character-specific optimizations that could be made. For example, `UnicodeScalar` conforms to `ExpressibleByUnicodeScalarLiteral` and `_ExpressibleByBuiltinUnicodeScalarLiteral `, which lets the compiler generate the fast SIL that just loads the numeric value directly. `Character` conforms to `ExpressibleByExtendedGraphemeClusterLiteral` and the corresponding builtin protocol, which causes the slower SIL to be generated that allocates a string object. What's interesting is that `ExpressibleByExtendedGraphemeClusterLiteral ` extends `ExpressibleByUnicodeScalarLiteral` (and the same relationship holds for the corresponding builtin protocols). But when does `init(_builtinUnicodeScalarLiteral:)` get used for `Character`? It's implemented, but I'm not sure when it gets generated, since even a simple one-ASCII-character string literal causes the `init(_builtinExtendedGraphemeClusterLiteral...)` one to be used. Could the compiler generate faster SIL for initializing characters from string literals that are a single scalar vs. ones that are multiple scalars? It seems like it should be able to. Even if it doesn't generate different SIL, a fast-path in the appropriate `Character` initializer that checks the code unit count and does a simple conversion without string buffer allocation for the one-scalar case could improve things a great deal. Likewise, I wonder if there are ways to optimize away some of the string allocation that occurs when you subscript a `Character` out of a `String` (or get it using the `CharacterView`'s iterator). The risk there is if you tried sharing the same buffer instead of copying the slice out, you could end up keeping the whole buffer in memory even if the string was released but you still had a reference to a character inside it. Shades of Java's old substring problem. Maybe it's possible to add an internal initializer to `Character` that can take a slice directly and use a fast-path if the character would fit in the small representation, which would avoid an allocation at all. I'm hoping to tinker with the compiler/runtime a bit to see whether any of these optimizations are possible without breaking other invariants.
&gt; But it would definitely be interesting to see articles about properly accessing the System Configuration Framework from Swift. I realize that different info requires different techniques, in some cases you likely don't even need to go with calls to system utilities. However, when needed, knowing the proper way to access the System Configuration Framework form Swift would be nice. 
In general, changing the type means B isn't a proper subclass of A. It no longer meets the Liskov Substitution Principle. In this particular case you've written, it does, but only because the property type is a subtype of the base class property type. I'm not sure what Parent/Child/A/B are, but my guess is that in Swift you could use protocols and associated types to describe this.
Yeah I have linked this post to iOS programming, let's see what we get
Thanks, I asked him.. let's see..
Well, sort of. Python's native list is mutable. Swift's native list is a struct, so it's essentially copy-on-write. If my example had been this: func f(c: [Int] = []) { ... } and Swift only called the literal's initializer once, you still wouldn't get Python's wart. It's only reference types that would even be susceptible to this.
I think maybe each comment is a section and the sub comments are rows..whereas each comment is a constant offset to its parent comment..
Can you link me to a blog or implemented example?
You can try my free tutorial series, [Hacking with Swift](https://www.hackingwithswift.com/read) – the very first project is similar to what you want in your second example. As for code snippets, try my [Swift Knowledge Base](https://www.hackingwithswift.com/example-code/) – it contains lots of example code across a variety of topics. Both are fully updated for iOS 10 and Swift 3. I do have a macOS book – [Hacking with macOS](https://www.hackingwithswift.com/store/hacking-with-macos) – however I'm afraid it isn't free.
I've just examined it wth FLEX. It's a single section collection view. 
Awesome! Let me know if you have questions; I come by here regularly.
I am more interested in the color scheme of terminal. What is it.
It doesn't work for mutable properties, because people holding a B instance but only knowing it as type A, could assign a DifferentChild instance to test.
up!
The issue I have with that is that there could be several starts and stops in a string. How would I cope with that? 
It's painful, very painful. There is no recourse than to google a couple of words of what you want and iterate over the first ten results, then you get a Swift keyword like "FileManager" (which does all the things you need) and things get better since now the searches are more specific. Prepend all your searches with "Swift" for more accuracy and try to filter results for last year only (google, tools, anytime, past year) or you may get swift 2,1 or even objective c. "Swift file copy" "Swift FileManager directory exists" "Swift FileManager rename" "Swift NSRegularExpression tutorial" ...and so on. You have to master Google first in order to master Swift or you will be lost. Other search venues are Github and StackOverflow. Good luck.
Thanks for letting me know about your experience! That's very cool, and I'm jealous. It's more competitive where I am (San Francisco), though, and I'm also looking for a relatively high salary (or at least matching my previous job), which approaches 6 figures. 
Hey - I'm responding to your post last because there's a lot to get through, and even though I don't have anything to add or followup questions, I don't want to just leave your response untouched. Thank you for the very extensive information! It's extremely helpful, especially the Swift coding challenges part. I'd like to mention that I am not always just copying the code from the book to xCode without thinking about it, but there are times where I do that - especially for the chapter about Javascript injection as there's a lot of library memorizations involved in that one. (Ok I also did it in core graphics, as I'm not that interested in that topic (yet!)) You're definitely correct that I probably don't get as much as someone doing one chapter a day, but I have a feeling that once I start coding my own projects I won't come back to the book, so I'm trying to at least cover the book in full first! I'll definitely purchase your swift coding challenges sometime in the near future (Early February, I'd say), to ensure that my coding skills are sharpened prior to applying for jobs! I've done most questions in Cracking the coding interview and some from careercup, but I bet iOS interviews are a lot different (and seems like they'er a lot more fun!). I'm interested in going to business school or holding a PM position prior to starting a startup, which is my ultimate goal, hence my interest in getting more exposure to management opportunities, and starting from at least a non associate position. Thanks for your detailed response, it was so helpful! Hacking with Swift is a great introduction (I do think it would be way too difficult for someone with no coding experience to go through though). 
If you want to just practice swift code, you can use IBM's online compiler here https://swiftlang.ng.bluemix.net/
You don't need Xcode to learn and practice Swift, you do however need Xcode if you want to use Swift for app development. Another program is [Appcode](https://www.jetbrains.com/objc/) but I don't know about hardware requirements and it's not free completely. You can use an online compiler to learn Swift ([like this one](https://swiftlang.ng.bluemix.net/#/repl)) and after you learn Swift, you can then decide if you want to invest in a new computer. Use Apple's free Swift [book](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/) to learn Swift for free.
Awesome, thanks
What about the server-side stuff (e.g. Vapor)? Is there an IDE for Ubuntu that can be used to remove OSX from the mix entirely? I'm not a Mac hater or anything (I use one at home), just curious.
swift-lang.slack.com
Is the autocomplete slow for you?
... I should probably have said, there is no auto-complete. At least, I haven't installed one. Just syntax highlighting.
I do, I'll check that out. thanks! 
if you'd be okay with developing in C# instead of swift you can try using xamarin https://www.xamarin.com/ I haven't built an app with this myself but many others have. The codehub app on the appstore is made with this in C# and is open source. I'm not sure if it depends on xcode to work like appcode but it is definitely more independent of xcode than appcode is. Also seems better than xcode from a usability standpoint. 
UIImageView's isUserInteractionEnabled is false by default. Controls that have that disabled by default are in the minority. UIView, UITextView, and most others are true by default. override func viewDidLoad() { super.viewDidLoad() self.photoImageView.isUserInteractionEnabled = true let tapGesture = UITapGestureRecognizer(target: self, action: #selector(tap)) self.photoImageView.addGestureRecognizer(tapGesture) } @objc private func tap(sender: UITapGestureRecognizer) { print("photoImageView tapped") } 
I'm glad it was useful for you. I might create another video which focuses solely on weak and unowned.
You can deploy any swift project on heroku (kitura as well). [example](https://github.com/byt3smith/kitura-on-heroku). I believe the only thing making Vapor special is the handy 1-step-deploy via cli.
Looks cool! I think it would be better if the comments were in a tree, though.
Oh beautiful. See? Let the world know, let everybody try, make it easy to find, to learn, to play and above all, make it easy to deploy. Remember that there are a lot of enthusiasts who would like to give it a try but feel intimidated by the lack of information. Right now I am reading /u/twostraws "Server Side Swift" and he explains topics I didn't know about Dockers and stuff for easy deployment but that shouldn't be in a book only, that should be on the front page of Kitura's docs, just like saying hey wanna test drive? here are the keys, go for a ride. Thanks for the link, will play with it asap.
RemindMe! 3 weeks "Is it live?"
https://github.com/PerfectExamples Perfect is available as well with lot of ready to run examples so you could save lot of time trying to get demo running. I tried Postgres with Turnstile demo, it works like a treat! While I read the code, it looks like almost readable compare to Kitura and Vapor but that is still better than PHP and Ruby on Rail.
This was very helpful. In the next video, I would suggest giving an example when it's better to use unowned instead of weak. I usually only use weak in my code, but I'm sure there are times when unowned is proper.
Working on a couple of iOS and tvOS app for two customers, and in the meanwhile updating Awesome Swift repository ( https://github.com/matteocrippa/awesome-swift ) with some of the links I spotted in this discussion. If you have any other link to share feel free to make a PR!
Alternatively, if you're adding a tap gesture recognizer to a UIImageView, have you considered using a UIButton instead? I've run into cases like this and discovered that it's easier to do it that way sometimes. 
Great list and good idea on the ranking methodology. I think this perfectly captures the same few dozen books that I've heard seemingly every veteran developer recommend.
Concatenate the strings, print the result
[removed]
 func rep(s: String, n: Int) -&gt; String { return (0..&lt;n).map({_ in s}).reduce("", +) } or, if you want to make use of the standard library: func rep(s: String, n: Int) -&gt; String { return Array(repeating: s, count: n).joined(separator: "") } 
`print` takes optional `separator:` and `terminator:` keyword parameters. The separator is what is inserted inbetween the printed items (a space by default), and terminator is what is inserted after all items have been printed. for _ in 0..&lt;n { print(s, terminator: " ") } will print s `n` times, with a space after each `s`. Beware, you'll have to add the terminal newline yourself. Alternatively, create a new (empty) string, accumulate your instances in that (with whatever separator you want) and print it at once.
Yes, functional programming is not the most efficient way to do things, but it's very clean code.
Depends, you could have a `Repeat&lt;T&gt;` struct implementing `IteratorProtocol` (for the general case, not our purposes) and `TextOutputStreamable`[0] (or maybe it'd have a `TextOutputStreamable` view to implement a separator if we're going for full architectural astronautics). `Repeat&lt;T&gt;` would be sizeof(T) + sizeof(Int), and the calling code would be perfectly functional. You could even implement `Repeat.write(to:)` by folding the repeated T into the target. [0] `print` will use that protocol if it's available, before falling back on `CustomStringConvertible`, `CustomDebugStringConvertible` and ultimately an ad-hoc internal printing function
I'm not sure what "clean" means here. It's hard to read, it has poor performance, and it's no more functional than the version that uses the stdlib. Functional programming can be very efficient. If you had written it this way, then the range/map/reduce way doesn't even have the benefit of being shorter: repeatElement(s, count: n).joined() 
I used to think it was quadratic as well, but recent benchmarks actually showed to this not being quadratic for strings anymore (but still being quadratic for arrays). Have you done any benchmarks recently?
`print` will also use `TextOutputStreamable`, if implemented.
I've seen this where you are assigning the result to a type besides Int. For instance: func foo() -&gt; Double { return bar / car }
I'm not sure I understand. (I'm pretty much a beginner in this stuff)
The thing I'm doing works better as an UIImageView because of the context that it is in however I can see where it are coming from.
What are you trying to save the result as? Imagine 5 / 3... That doesn't produce an Int. One solution: you could cast the index counts as Double.
I just looked through my code. I'm using `reduce([], +)` quite a few times for flattening arrays. I've also used it for calculating the minimum and maximum of an array, although once again, there are specific implementations of that in the standard library. In another case, a function is applied to the values before they're summed up, this could be done by map+sum as well. So in general, the reduce function can often be replaced by implementations specific to the current needs, but it shines by being so flexible that it can be used in its original form for quite a lot of things.
I would be avoid using the adjective "optional" here, because it could get easily confused with the noun "Optional". I'd call these "defaulted arguments"
There's a patch tool that let you run Sierra on older Macs. I use Xcode on my 2008 MacBook on the daily.
They aren't connected. I was going to call it JTCalendar, but the name was already taken, so I had to go with JTAppleCalendar.
Because of its continued market penetration, Android is also a well-regarded platform. 16% of its app developers earn over $5,000 per month in revenue. However, it is worth noting that Android is much more 'top heavy' in terms of earnings with much of its total revenue being earned by its top developers. http://mobisoftinfotech.com/services/android-application-development-company
Learn the fundamentals of programming first. This means basic syntax, how to solve problems with code, and then gradually how to solve algorithms and implement data structures in your language of choice. Keep going and learn how MVC is structured and dive into design patterns and best practices. Pick up a framework for your language. Figure out how your language speaks to third party resources. Build something neat with it. Then keep iterating. By the time you really learn this using your first language, you'll be ready to jump into another using the skills you've learned along the way. No matter what, always be learning.
As the author of the pack, obviously I think it's worth it! You save $55 on the price of the books, which themselves are priced pretty aggressively given how much material you get. Plus you get six words to unlock [Frequent Flyer club](https://www.hackingwithswift.com/frequent-flyer) bonus content, so all in all you get a pretty massive amount of content! I guess the real question is: do you have time to devote to it? Just buying the Power Pack doesn't magically turn you into a great Swift developer – you need set aside an hour a day to read and watch videos, otherwise it's just sitting there taking up space on your computer. Let me know if you have any questions and I'll do my best to help! I come by here several times a day, [I'm on Twitter](https://twitter.com/twostraws), and of course you can email paul@hackingwithswift.com.
That's what my footnote says, and the reason why you'd implement it on a hypothetical Repeat struct (or view thereof), it provides cheap and efficient printing even via `print` as it can delegate writing to the text output stream to the value.
The final ipa file used for distribution of iOS apps are zip files. So you will do double zip which often results in larger files: https://en.m.wikipedia.org/wiki/.ipa_(file_extension)
Thank you for your response! So I shouldn't zip my 30MB db. Right?
Thansk for the information :) but I was more curious as someone or a team of people building an app for a company.
Don't give up hope! Use this tool to install Sierra onto your mac: http://dosdude1.com/sierrapatch.html
Hi! Yeah I think I'm going to go ahead and buy it some time from now and part of it is because I appreciate you making that other guide for free. And yeah that's what I'm planning to do - spend 2-3 hours a day or so on it. I have a goal of making 50-100 apps (give or take) in 365 days in 2017 because I just want to get used to the point that I'm very comfortable and versatile.
The web is easier, but it is already overcrowded. If you want easiness go with php first, if you hate it then go with python or ruby. Easier impossible but you will be competing with people that charge ten bucks for a small site or a blog template. Now, if you want freelancing money, mobile is where it is and iOS where high rollers go. It is getting overcrowded but not as much as the web arena. I you feel the love for programming, then go with Swift, a beautiful language that can be used everywhere from desktop to mobile, watch, tv, server, linux, embedded, etc. One language to rule them all.
Thank you thats kinda what I was hoping to hear as I'm inclined to lean towards swift. I just got thrown off my guard a little when someone offered an opinion on web.
I think so. 
Oh ok, thanks for the response! :)
If you've already bought one of your books that is in the Power Pack, is it possible to get a discount due to this?
Correct, don't zip it.
Yes! Email me from the account you used for your Gumroad account and I'll set you up – I can discount whatever you've paid for any of the Power Pack books.
Awesome, I'll be in touch!
I think he's trying to say that it mathematically doesn't result in an integer. By the way, you don't need semicolons in Swift, and their use is usually discouraged. :)
&gt; I think he's trying to say that it mathematically doesn't result in an integer. That seems overly benevolent, neither "Int" nor "Double" are mathematical concepts, and a cast doesn't make sense either in a mathematical context. &gt; By the way, you don't need semicolons in Swift, and their use is usually discouraged. :) Yeah, switching between Rust and Swift means I don't always remember which is which (and the Rust compiler reminds me to add them while the Swift compiler doesn't care if I have extras so I usually end up with extras in my Swift stuff).
An integer is absolutely a mathematical concept, though. I'm guessing he's not a native speaker. :)
These books are the main reason I consider myself a Swift programmer now. There's so much content that even if you just read and did all of the exercises and typed what Paul typed... it will sink in. And, if you go the extra mile and really dive deep, I've found it to be a great experience. Note, it's not like you're going to finish this stuff in a few weeks... it's months if not more than a year worth of solid content. Do it, you won't regret it. 
Why is Objective-C a 'way worse' starter language? Why would you not start with a C-based language? They are very strong and sweeping statements that you haven't backed up.
Thanks, appreciated! :)
Beautiful piece of code. Gonna try that to calculate all possible moves in a dominoes game based on an initial draw of any seven tiles out of 28.
What I was previously doing is starting a tutorial and then going off side to make the app I want too early. This time around I'm going to stick with them and learn the better conventions through mimicking first
NSLayoutConstraint. Read the [autolayout guide](https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/index.html).
 let gameArea: CGRect override init(size: CGSize){ let maxAspectRatio: CGFloat = 16.0/9.0 let playableWidth = size.height / maxAspectRatio let margin = (size.width - playableWidth) / 2 gameArea = CGRect(x: margin, y: 0, width: playableWidth, height: size.height) super.init(size: size) } I used this code from Matt heaney's solo mission tutorial on youtube and it seems to scale all my objects perfectly!
Just a suggestion. Check out AWS, which has a service for games that work with iOS and Android if I am not mistaken. EDIT: https://aws.amazon.com/gaming/mobile/
Learn the language that solves the problem you are trying to solve. There are plenty of jobs in iOS and macOS development, so if this is a field that interests you and you want a career in this area, learn it. In future, Swift may become more prevalent on other platforms and in server-side technologies, for now it isn't. By choosing a career as a software engineer you need to realise that part of that career will be changing and moving with the times and learning new skills as the field is always on the move. Becoming a good engineer involves far more than just the language you *currently* use.
Swift is turning into a server language, but right now is only commercially used in writing Mac and iOS apps. Jobs knowing swift pay well...but you also have to know Mac/iOS programming on top of Swift!
This is a great answer. Look, programming is hard to do. Its not impossible. And its certainly not as hard as most people think it is. But its still pretty hard. And because its hard, a lot of people start trying to learn it, and then give up half way through because its too hard. The only way you are going to actually keep at it is if you are enjoying it and you are working towards a personal goal. Figure out if you want to make a cool website! And then pick the language for that. Or do you want to make an iPhone app? Then you know what to pick! Or maybe you don't personally use iPhones and you have an Android phone. Dont learn iOS development because you think there are more jobs for it if you are not excited about iOS development. Go grab a Java book and make an android app if thats what you want! Picking a programming language based on market value and not personal interest is like trying to learn Spanish even if you think it sounds awful and you really love how French sounds. Pick the language that suits you best. Otherwise, I hate to say it, but you will give up before you've learned anything. 
&gt; I want to learn Swift but my friends tell me that it's too "proprietary" in that it's only useful for the Apple ecosystem. They are bad friends who are either ignorant or actively lying to you. Scrape'em off. &gt; I've been told I should learn something versatile like Java/C/C++ (the mainstream languages) so I am more marketable and can get a job more easily. I need a job so I want to learn a language that can eventually get me hired. Learn every language you can. If you're interested in the Apple ecosystem (which is plenty healthy), you need Swift and Objective-C. If you want to do Android, you need Java. If you want to do Windows (which sucks, but if it pays the bills…) you need C# or whatever it is they write in now. Swift is young, it's still maturing, and the library support on non-Apple platforms is minimal at the moment, but it's only going to get better and more popular from here. 
Podcasting App using the audiosear.ch api
Digging into how Swift talks to C when there's no Objective-C bridge available. Messing with UnsafeMutablePointer&lt;T&gt; and friends may give the type-safety cargo cult conniption fits, but it does come with perks.
For Android there is Kotlin. Which is similar to Swift. Even more reason why learning Swift is very beneficial. 
Swift is a very modern language. Most companies in my area that I know of start new iOS apps in Swift. It's very much about productivity / speed of development / clean code nowadays, where languages like Swift excel in. Learning Swift is a great way to get into programming either way. After you learned it, other languages will be easy to pick up (but many 'old' ones will frustrate you after you learned to love Swift). Good luck!
You'll probably want to use WebSockets. Check out: https://vapor.github.io/documentation/websockets/droplet.html
In recent months I've released [Hacking with macOS](https://www.hackingwithswift.com/store/hacking-with-macos) and [Server-Side Swift](https://www.hackingwithswift.com/store/server-side-swift), so in December I decided to take a break from new books and release the [Swift Frequent Flyer Club](https://www.hackingwithswift.com/frequent-flyer) instead – lots of bonus content for people who bought my books. Now it's January, I'm busy drawing up plans for new books I want to write. I have (what I think is!) a killer idea for a SpriteKit book, but there are other topics I'd like to cover too. If you have suggestions for books you'd like to see, I'd love to hear! To pass the time while I'm mulling over my next books, I'm working on a short video course for Swift. My plan is to release it early in February, but it's also going to be free so I won't announce any pre-orders – it should just be nice a surprise when it lands :)
Finally bothering to learn Swift now that I've found a great Mac OS X instead of iOS resource: _Hacking with macOS_. Still new, but my first impression is that the code is _ugly_ when using Cocoa. `- (NSView *)tableView:(NSTableView *)tableView viewForTableColumn:(NSTableColumn *)tableColumn row:(NSInteger)row` …has a beautiful signature. When done in Swift, I end up with this: `func tableView(_ tableView: NSTableView, viewFor tableColumn: NSTableColumn?, row: Int) -&gt; NSView?` In Swift the function looks like `tableView` is the function with a bunch of named arguments. What the hell does a `tableView` function do? It's not until you get into the method signature that you realize that the method isn't just some random `tableView` but everything, including the arguments. There's just something so beautiful about `tableView:viewForTableColumn:row: ` that isn't evident in Swift. But like I said, I'm a newbie, and like I didn't say, a curmudgeon, so I'll see if it becomes second nature. Compared to pure C, Objective-C had a slight learning curve, too! 
As I understand it, which is oh so limited, it's an optional if it could fail so you need to check that it exists and unwrap it. Maybe an if let image or use a guard statement. Then you may need it to typecast it dependant on how you are retrieving the photo. 
Working on my super forum for Swift enthusiasts: https://swiftforums.herokuapp.com Finished a Markdown library in Swift for use in the forums but still buggy: https://github.com/kuyawa/markdown If you're a regex guru I'd appreciate a helping hand.
You da man! I'm enjoying Server Side Swift and learning about dockers right now. They're definitely cool and needed for SSS. Thanks for your awesome work!
Kind of hard to say without seeing any code. Putting networking calls in a for loop is generally a bad practice though. 
Cool project! Make sure you place the iPad so only an adult can reach it, otherwise it will not last long.
Based on this i would say that your last 9 calls aren't coming back before you create your display array. The first returned image just gets reused. Consider setting up a closure to catch the responses and then append them to your display array. 
Oh I did not think about that I thought it was just reusing the same url How should I approach setting up this closure to catch the responses?
No, do not make an app you want while going through learning material, you will regret it and waste a bunch of time. I did this when I was halfway through with a SpriteKit book and started making my own game. I had a lot of problems and eventually did finish it but it was such a huge pain. Finish going through the book first.
Yeah, I learned the hard way - like you, it was pretty much finished but I did soo many inefficient things that I didn't want to even touch it anymore. 
whats the problem?
Apologies for the delayed response, busy as all get out with the holidays. Unfortunately, I have tried everything you mentioned. Just blowing out the old items and replacing with the new was the first and most obvious way to accomplish the task, but when that didn't work I turned to the collectionView's functions. I started using delete and received errors, Googled around and found you have to clear the data source first. So I did that (the for loops) and it didn't work either. Then I attempted one item at a time and no luck there as even thought the items were deleted from the datasource, and the deleteItemAtIndexPath function produced no error, the UI still did not display these changes. As stated in the post, I have gone through many, probably dozens of Google pages to find the solution to this but alas I cannot find anything, else I wouldn't be posting for help. Thanks for taking your time to respond though! I'll keep looking around to see if I can find a hidden gem. 
Guys, I am not considering myself expert here. These are some tips (it may be of beginner level) but that is what suggested by swift experts all around the globe. btw thanks for comments and taking your time to read my blog.
not sure what you're asking here. perhaps your player variables should be wrapped in a struct or class and passed? why are they all in separate arrays? be specific with your question and post your actual code using reddit's code formatting 
You need to perform your segue in the closure for the firebase login. What you have it doing now is checking if username/password are nil and if not making the login call and then preforming the segue. The segue will happen every time as long as something was entered into both fields. 
Would be good if the article linked to the licence file.. anyone know how much this'll cost to use on your apps? Looks sick though
[It's MIT](https://github.com/lkzhao/Hero/blob/master/LICENSE)
Yes, I've done this and Xcode gave me another errors it couldn't fix. http://imgur.com/a/tO7sB
Looks real good. As with most things animation a little goes a long way.
Thank you so much! Do you think you can help me with this, too, please? https://redd.it/5ls5nd
Well, clearly this is not a trivial problem, given the amount of effort you have put into solving it. As such, the only thing I can think to suggest is that if you can give me access to the whole thing in some way, I'd be happy to see if I can find what you are doing wrong.
 func performGetRequest(targetURL: URL!, completion: @escaping (_ data: Data?, _ HTTPStatusCode: Int, _ error: NSError?) -&gt; Void) { var request = URLRequest(url: targetURL) request.httpMethod = "GET" let sessionConfiguration = URLSessionConfiguration.default let session = URLSession(configuration: sessionConfiguration) let task = session.dataTaskWithRequest(request, completionHandler: { (_ data: Data!, _ response: URLResponse!, _ error: NSError!) -&gt; Void in dispatch_async(dispatch_get_main_queue(), { () -&gt; Void in completion(data, (response as! HTTPURLResponse).statusCode, error) }) }) task.resume() }
Still working on my first iOS app (that I started the last week of 2015). It's pretty crazy how much it has grown in capability from what I first planned - since at the time I knew nothing of iOS development. For future apps though I'm definitely going to make sure that I have a clear plan of what I want the app to do and to release a working product much sooner. 
JSONSerialization "throws" so you need to wrap a try/catch block around the the method. That should clear up the subsequent errors since the compiler doesn't know that it is a dictionary since that line has an error. do { let jsonDic = try JSONSerialzation.... } catch let error as NSError { } Also, no need to declare type then force cast a type. Why are you using NSObject for a Key? Just use [String : Any] That should get you started.
For the first error you need to put either `try!` in front of the statement or wrap it in a `try-catch` statement and handle any possible errors. For the other errors, I think you might have to cast your subscripts to `NSString` since the dictionary keys are of type `NSObject`. Also, you can define your dictionary types using the shorthand `[NSObject: AnyObject]` for cleaner code. 
This is what I am getting now: http://imgur.com/a/o2wMU . I'm a beginner at Swift, I'm just following a tutorial which was written for Swift 2.
try! solved the first error. How do I cast to NSString?
Apologies in advance if I either explain too much or too little, but you haven't given any indication of how much you understand about the problem, and exactly what point you'd like help from; so, I'll probably start explaining by explaining stuff you already know. So, you've obviously written and compiled some code which has to do with making a network request, fetching some data in JSON format, and then, when that request completes successfully, you want to JSONSerialization to take the data and turn it into the corresponding objects (arrays, dictionaries, strings, numbers etc). And compiling this code throws up 4 errors. So, the first step in solving compilation errors is to solve the first one first. The reason for that is that often succeeding errors are a result of the first one, and so working on them doesn't make any progress, whereas clearing the first one frequently solves one or more succeeding errors. The first step to solving an error is to read and thoroughly understand everything the message is conveying. In this case, I gather that the important words of the first error message are, "throw", "try", "error", "handled". Do you know what each of those concepts mean? And, do you know in general, about the overall topic of error handling in Swift? If not, Apple 'has your back' as I believe people in a tight spot might say. You'll want to read the chapter on Error Handling in the book Apple produce (available from an iTunes store near you!) called, "The Swift Programming Language (Swift 3.0.1)". My suggestion would be to read through that and then figure out how to fix that first error so it compiles, then don't even bother trying to fix the others, just see if it compiles. If not, then do the same process with the next error: figure out the salient points of the error message and look up the necessary information in the Swift book to learn how to fix it. I have also heard that it is possible to use a so-called 'search engine' to try to locate samples of other people's code where they have successfully used the functions or classes which I myself am trying to use, and then learn from those other's examples.
Yes, I know what those words mean. I used try! to solve the first error, but the following ones are still present. I have searched on Google the errors but none of the answers worked for me.
You need your subsequent code also in the do block. The dictionary was declared within the the scope of "do" so to access it, you need your parsing code in the same block. If you don't want to do that, declare an empty dictionary outside of the do block.
Can you please stop spamming this forum with all your problems...
I haven't finished Clean Code yet, but so far it has been enlightening. Bringing together that many experts must have been hard.
I got tired of checking Google Maps to see how traffic was to see how early I would need to leave work to get home at a reasonable time so I wrote an app to ping the Google Maps API with some addresses, consume the JSON that comes back, extract out the data I'm interested in, and display it. I'm also trying to use as much of UIKit and Foundation as possible so no AlamoFire, or third-party JSON processing. So far, it's coming along great and I'm almost at the point where I'm going to have friends and family try it out. I'm hoping to release it into the app store in the next month or two as well as putting up the code on GitHub as part of my coding portfolio. 
Thank god for fuzzy autocomplete! Finding the right `UITableViewDelegate` method was pretty tough without it.
HTML/CSS are for a web page, Node is a javascript VM for building a server. Doesn't have to be node, could be any method of building a back end. I think most apps will need some sort of server to interact with, and it's a great idea to know how to make one. Node is a pretty easy way to build a really small server that can handle things like logins, photo storage, or whatever, with a pretty robust amount of tutorials and support that make it easy to learn. Swift runs on linux, so you could make a server in Swift if you want, but there will probably be fewer resources for you to learn from.
Yes, sort of, but there are a few things need clarifying. PHP and Javascript are languages, MYSQL is a database, and Node is a runtime environment. The difference between PHP and Javascript is that Javascript runs in a web browser, and PHP is usually used on a server. Javascript is the only language that runs in a browser (you can use others for developing a web page, but it all gets transpiled to javascript eventually). Up until Node there were all these front end devs that knew javascript, but couldn't build a backend service, because it required knowing Java or PHP or something else that could run on a server. So Node creates an environment that allows javascript to run independently from web browsers, most commonly on a server. This means that if you learn javascript, you can build a cool website and make a snazzy server without having to learn two languages. You can use a Node service to interface with a SQL database if you like, or you can use PHP, or java, or whatever. I haven't heard a lot of good things about PHP, but I've never used it so. Using javascript and node can be nice because it has a huge amount of easily installed packages (using NPM, which is integrated in to Node), and javascript is really good at dealing with JSON, which is often the format you will use to pass data around. My god, this has turned into a wall of text. Hopefully my ramblings aren't super confusing?
no thanks, the wall of text really help clarify things. I hear people talking all the time about javascript being a key web language but I've always wondered why. Do you think HTML/CSS/Javascript is all you need today to make killer sites. or all this other stuff PHP/Python/C#/Ruby do you think they have use.
You absolutely only need to know HTML/CSS/Javascript. The real issue comes down to what framework you will be using. There are about 150 gajillion different javascript frameworks for building a site, and it can get super confusing. The two most popular by far are React and Angular (although there is Angular 1 and a recently released Angular 2, and it isn't clear yet whether Angular 2 is going to take off). I would encourage you to check out some React tutorials and see if you dig it. Keep in mind, you don't have to ONLY do websites or ONLY do iOS apps. If you are stoked on both, don't be afraid to learn about both. I feel like the skills can absolutely be viewed as complimentary. If nothing else, it's good for variety and if you get sick of one spend some time with the other. Either way, learning how to make a back end (doesn't need to be anything fancy at all) will help you out a bunch in the long run.
I would also echo the top comment on the thread - whether you go for swift or javascript, learn the basic mechanics of the language first. There are lots of online tutorials to follow.
Thanks for your comment. I just wish there were more hours in the day haha
You can add `try` for a function that throws an error. Please read up on [Error Handling](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html). You can do this: let resultsDict = try! JSONSerialization... Or if you want to be safe, do: if let resultsDict = try? JSONSerialization... { //rest of code that uses resultsDict goes here } It doesn't make sense to say `let items: AnyObject!` because you're initializing it in the same line. Just put `let items = ...`. Also, I'm going to guess items is an array, so you have to do `let items = resultsDict["items"] as? [Any]`. Also, you're dealing with JSON and dictionaries, it's safer to use `if let` when checking values within a dictionary and nest them. if let resultsDict = try? JSONSerialization.jsonObject(with: data!, options: []) as? [String: Any] { if let items = resultsDict["items"] as? [Any] { let firstItemDict = items[0] if let snippetDict = firstItemDict["snippet"] as? [String: Any] { var desiredValues = [String: Any]() //other code if let desiredValuesDict = desiredValuesDict["playlistID"] as? [String: Any] { //other code } } } } I'm at work so I don't know if I wrote it right but your code has a lot of unnecessary things in it.
Obviously I'm going to recommend [one of my books](https://www.hackingwithswift.com/), but rather than just point and hope I'll send you a private message.
Thats what I've been doing, but wouldn't be able to without google/stackoverflow, I also feel like I've been just copying code without really understanding it properly, thats why im looking for a book that fills this gap. 
Thanks, will check it out. 
Like others said here, the migration from Swift 2 to Swift 3 is troublesome. However, I don't regret it a single bit. It took me days to convert a somewhat big SpriteKit game to Swift 3, but Swift 3 is so much more enjoyable and more intuitive than Swift 2. And with Apple dropping Swift 2 entirely in the very near future, you're probably better off migrating sooner than later, before your projects grow even larger.
I don't think this works anymore with Xcode 8, which doesn't support any of the old plugins.
Xcode is a raging dumpster fire. If completion doesn't work, type slower, seriously. If you pause for 20 seconds or so after typing a symbol it might catch up. AppCode is messy. 
From everything I've read, Xcode uses SourceKit for its content intelligence. It used to use Clang prior to Xcode 6, which is why we all noticed a change in highlighting and autocompletion around that time. Since then it's all SourceKit.
thanks - we just switched for our app (Rocketmiles). 
I could do that, I'll post a link here once I get it uploaded. 
Oh beautiful. This is exactly what I was looking for. More please!
You can use plugins with Xcode 8, you just have to unsign it.
[Have fun](https://github.com/apple/swift/blob/2fe4254cb712fa101a220f95b6ade8f99f43dc74/tools/SourceKit/lib/SwiftLang/CodeCompletion.h) Code Completion also uses [NameLookup](https://github.com/apple/swift/blob/d88c188d4707407261e1526e953c786460becd98/lib/AST/NameLookup.cpp) to resolve symbols. From the looks of your buffer I'm guessing the litany of errors you have in it have caused SourceKit to crash which leaves you with a stale or non-existent index which can't be searched. Or it has failed to parse your bad buffer in a creative enough way that it thinks you're trying to complete an enum member reference. Either way, any help would be appreciated, especially if you have a test case that reproduces this consistently. But I'll bet once you tidy things up you'll have a better experience.
We came up with the same idea with my colleagues.
It's... Interesting... Good software but I guess I need to warm up to it more
Web is far easier but as others stated, very overcrowded and very outsource-able and its generally lower paying. As someone who went from traditional programming and is now stuck in a web development house, it amazes me the basics of programming my always web-developer coworkers don't know. You'd of swore I was a witch the day I made a gradient in CSS without using an image (I'm used to making graphics in code in other languages, and CSS has a gradient function to let you do the same). They were baffled that you could use numbers to create gradients... They also are having an incredibly hard time grasping MVC (since we are now using ASP.Net MVC). They're not used to having to think about architecture the way a regular software developer would. I personally absolutely hate web development so I may be a bit biased. I like to do cool things with code, not make boring web forms. 
I would recommend you look into Swift (as this subreddit implies) as TVML is Javascript(-ish) Had tried to do an TVML app, but it's very limited compared to swift. I know it's not much help, but don't waste time on TVML.
Thanks a lot. I converted the epub to pdf and it works as expected :D 
Well, Xcode needs some attention and honestly, since we are all developers here; it would be more useful to give Apple feedback than rant about it here (which I have done). If all dev's here report the issue to Apple, they will fix it or at least start concentrating more on Xcode.
You'll probably get more response in /r/iOSProgramming. This isn't really a Swift thing.
 DispatchQueue.main.async { completion(data, (response as! HTTPURLResponse).statusCode, error) } This is the correct way of writing a dispatch_async in Swift 3. Here is an article on Medium about GCD in Swift 3 for those who are interested and I highly recommend /u/ALittleStar to read this. https://medium.com/swift-and-ios-writing/a-quick-look-at-gcd-and-swift-3-732bef6e1838#.lgnvmctnx
I would put `else { return }` in one line since I hate having a new space for 1 line. 
`guard` is often useful to reduce nesting (and so preventing the so-called pyramid of doom).
It allows you to stay at your current indentation so you don't have a ton of nested if let statements. guard let example = self.example, let property = example.property else { return } print(property) vs if let example = self.example { if let property = example.property { print(example) } } I also try to use it in any case where you need the result of the conditional or for the conditional to be true to continue in that function. With if let you can still have code after that can be executed guard let example = self.example else return } print(example) print("hello world" vs if let example = self.example { print(example) } print("hello world") In those examples I would use the latter because I want to print hello world regardless of whether the conditional is true or not.
But it hasn't been updated to swift 3. If you are good in swift then can you please update it for swift community ?
[removed]
I think your referring to the horizontal scrolling here, which i've already achieved. It's the vertical scrolling that's the issue. The vertical scrolling tableview and vertical scrolling collection view need to scroll in sync with each other. Only the tableview or collectionview will be able to scroll at one time. I guess it's just extremely difficult to explain
A gentle introduction to using unsafe constructs in Swift. This tutorial has three playgrounds. One that shows the basics of unsafe pointers, one that wraps the streaming compression C library. And one that makes a type safe random number generator using /dev/urandom This was a lot of fun to put together. Hope you enjoy it!
There are no actual errors. Those errors are from tableView not existing while I was changing it to be grouped instead of plain. 
Are you saying that you want to make a network call to a url requesting an image and then use that image somewhere?
Yes, here is a example, but for UIImageView, not for UIImage. let imageCache = NSCache&lt;AnyObject, AnyObject&gt;() extension UIImageView { func loadImagesUsingCacheWithUrlString(urlString: String) { self.image = nil if let cachedImage = imageCache.object(forKey: urlString as AnyObject) as? UIImage { self.image = cachedImage return } let url = URL(string: urlString) URLSession.shared.dataTask(with: url!, completionHandler: { (data, response, error) in if error != nil { print(error!) return } DispatchQueue.main.async { if let downloadedImage = UIImage(data: data!) { imageCache.setObject(downloadedImage, forKey: urlString as AnyObject) self.image = downloadedImage self.contentMode = .scaleAspectFill self.translatesAutoresizingMaskIntoConstraints = false } } }).resume() } }
thank you! i will have a look now 
 let imageUrlString = "http://cdn.playbuzz.com/cdn/38402fff-32a3-4e78-a532-41f3a54d04b9/cc513a85-8765-48a5-8481-98740cc6ccdc.jpg" let imageUrl = URL(string: imageUrlString)! let imageData = try! Data(contentsOf: imageUrl) let image = UIImage(data: imageData) Could also do: extension UIImage { convenience init?(withContentsOfUrl url: URL) throws { let imageData = try Data(contentsOf: url) self.init(data: imageData) } } let imageUrlString = "http://cdn.playbuzz.com/cdn/38402fff-32a3-4e78-a532-41f3a54d04b9/cc513a85-8765-48a5-8481-98740cc6ccdc.jpg" let imageUrl = URL(string: imageUrlString)! let image = try? UIImage(withContentsOfUrl: imageUrl)
&gt; obj-c ~~and Xcode probably works better with it, but~~ fuck that. All I heard was that!
They know. It's not a surprise to them that Xcode is buggy and that refactoring STILL doesn't exist where as AppCode has had it for years. They just are choosing not to do anything about it. 
What sort of chart? I couple of weeks ago I wrote a small [tutorial](https://medium.com/@tstenerson/lets-make-a-line-chart-in-swift-3-5e819e6c1a00) on how to draw a simple line chart. It might be what you're looking for with some small changes to the x labels. If you give some specifics I can tell you how I would change that code to suit your needs. However, iOS charts can make some really nice graphs, I just couldn't fit it to suit my needs when I needed some, so I drew my own.
Basically my app is a mental health information / mood diary app. I have one page where i choose a date and a number from 1-5 which determines very sad - very happy. I want to be able to display these values for a week long period in a chart. whether that be a line chart or bar chart. 
Nice work, will definitely mess around with the playgrounds. 
I have to delete Xcode and download the newest version every time but that's because I only have 6GB available and for Xcode to install I believe you need over 10GB. 
Yeah you'd just have to change the x axis label drawing code, like two lines or so. If you can't figure out iOS charts, I can maybe help.
The GCD chapter might help you, but it's not really ideal. Have you tried using the completion closure for the `animate()` method? That is, "animate thing A, on completion animate thing B, on completion animate thing C…" and so on.
Make sure you clean out the Xcode stuff in the Library folder, not just the application bundle. 
`update()`? As in SpriteKit's method? If so, you could queue your animations in a sequence, or even create a sequence out of custom closures.
In project 15 of HackingWithSwift (Animations), we hide the button while the animation is occurring. The issue I'm having is analogous to a scenario where the "animate" button is being pressed in quick succession, and there's no way to hide the button. I'd like the animations to wait for the previous animation's completion, rather than overlap. I apologize for not explaining my problem concisely. 
Tabs vs. spaces 
can't you just suck in the headers, spit out the keywords and dump that into a file that something like bbedit can understang? i've already created colors in bbedit for swift.
I've had the App Store download of Xcode not install properly before, ended up downloading the DMG from the developer website instead.
Nike probably has a page on their brand guidelines on how you can use their logo. Usually you can use logos of the big companies "freely", to an extent. But to be sure, I'd check out their website for more info.
I suggest just creating an extension. So extension UIViewControler { func getAllNames() { //do your function here } } This allows you to call the function from any subclass of UIViewController
Alright, now that we are almost certain that there is an issue with the code. In most cases it is related to Storyboard/UI issues. Not having a identifier, missing outlets, not setting the initial screen are some common pitfalls. Do check each element in Storyboard and if the project is a hobby of yours, please upload it to dropbox or similar and PM me the link. 
try using a search engine, such as google or duckduckgo. For example, https://duckduckgo.com/?q=ios+autocompleting+text+field&amp;t=osx&amp;ia=software brings up many good looking possibilities. Edit: spelling
I think you need to step back a bit and do some re-designing. The way I understand it is you are calling `updateCards()` and then waiting for its completion before calling `updateCards()` again. But the problem is that `updateCards()` does a bunch of things ("executes so quickly that it seems like there are 4 cards added synchronously"). You need to break up updateCards() so that you can animate and wait for smaller amounts, like animate adding 1 card, then await its completion, then animate the second card and await its completion, etc. I believe /u/twostraws suggestion of using the completion closure is the right first track to follow, but you can't reject it (or any other suggestion) _simply_ because it doesn't fit in with your current factorisation; you probably have the existing factorisation because it works with your current design, but now you want to change the design so you must be willing to refactor.
Being directed to AppDelegate.swift every time is typical and a total canard. This indicates _only_ that it is some kind of problem which was discovered in (but not usually caused by) the bowels of UIKit, and some function inside AppDelegate.swift is the closest (but is not really very close!) piece of _your_ code which it can point to. Have you tried setting an exception breakpoint? That will cause the debugger to stop exactly when the exception happens - so you'll probably find yourself looking at a stack trace of UIKit methods. Again, that doesn't mean UIKit is broken - it usually means, as /u/viv_social comments, that there's something wrong with a call you've made or the data you've supplied in a storyboard or xib. Just a piece of general advice, this will probably turn out, again as /u/viv_social says, to be a storyboard/xib problem. And it will probably be like a mis-connected outlet or action or something. Because this kind of thing is _so_ difficult to debug, it is usually best to kind of compartmentalise your work wrt connections between your code and your storyboard or xib. In other words, first make sure everything works. Then make a few connections, then test those. If everything is ok, then go on with your other work. If you do a ton of stuff interspersed with a connection here and a connection there, it is very tough to remember what you have recently connected/modified, and you have to try to trace backwards to find it. Whereas, if you only do a few things and it falls over, you can kind of work forwards and just re-check those few connections.
That looks amazing. Thank you ! 
Thank you so much for the reply, I will try it when I get home. 
is there is way to compare CGpoints, and depending on where on the screen is touched the player will move there. For example, if I touch the left side of the screen, the character will move left and then same for the right? Thanks in advance
Yes! In SpriteKit, lower X values are more to the left, and higher ones are more to the right. You could check if the touch is to the left of the player if the position of the touch's X value is less than the player's position's X value (if the variable position is a CGPoint, than you can get the X value from position.x, and the y value from position.y). This is also important in moving your player left and right, applying a force with a positive X value will move the object to the right, and a negative X value will move it to the left. For example, in touchesBegan: override func touchesBegan(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) { guard let touchPoint = touches.first?.location(in: self) else{ return } if touchPoint.x &gt; player.position.x { // Touched to the right of the player player.physicsBody?.applyImpulse(CGVector(dx: 10, dy: 0)) } else { // Touched to the left of the player (or exactly on it, which is unlikely) player.physicsBody?.applyImpulse(CGVector(dx: -10, dy: 0)) // Note the -10 } } All this code is off the top of my head so sorry if there's spelling mistakes or anything :) Edit: formatting
You're the best, Thank you so much. 
Try using Carthage. I found it the simplest of all the import options personally. Or just draw it yourself! Do you want a bar or line chart?
Ah I don't know any C++, is there anything that can be done with Swift?
You already have your answer but next time please ask the question in the title instead of "help with SpriteKit." Instead, use a better title like, "How can I make my character move left or right based on the user's touch?"
I came across this when upgrading to Swift 3. It is a warning, not an error. Make sure you are on the latest CocoaPods (1.1.1). Go to build settings for release and find `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES`. The row's text is probably bolded. Highlight it and press delete key to make it go to regular font weight. Now quit Xcode completely. Delete the derived data folder (`rm -rf ~/Library/Developer/Xcode/DerivedData`). Run pod install again and hopefully the warning is gone.
Sure! We have stdlib API/ABI FIXMEs to plug, documentation to write and improve, Foundation APIs to implement. There's a lot to do, every bit helps.
I used to get the same error in all my projects but [this](http://imgur.com/a/jo7K6) fixed it - couldn't tell you why, but it worked for me.
From your edit, I'm guessing it may have worked? 
if you want the location to be based on the side of the screen instead of the player you can modify the code to look like this: override func touchesBegan(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) { guard let touchPoint = touches.first?.location(in: self) else{ return } if touchPoint.x &gt; self.frame.midX { // Touched to the right of the screen player.physicsBody?.applyImpulse(CGVector(dx: 10, dy: 0)) } else { // Touched to the left of the screen (or exactly on it, which is unlikely) player.physicsBody?.applyImpulse(CGVector(dx: -10, dy: 0)) // Note the -10 } }
Your stringToDate is probably unable to convert a string to a date. You have a "!" (force unwrapped optional) in its return value, you should test for a nil value first before returning it. 
This isn't enough information to create a quality, normalized database. Do you want your users to be able to play from multiple devices? How often will you update the questions? Do you want them to cache questions locally? Are you going to load subsets of questions at a time, or just request one at a time? ... It took me a long time to learn the value of creating a perfect database structure for a project.
that still doesn't solve the issue that I am getting a nil in the first place. I checked the contents of the 2d array. There are no nil/empty values. All values are strings that are valid for the date format.
If the if/let solves the problem, then you can work backwards from there to see if one of the values didn't match the date format the formatter was expecting. If the if/let doesn't solve your problem then you're no worse off than you are now, in fact you know what the problem ISN'T. 
I have been struggling with the unreliability of Apple's XCUI test framework for months now. Save yourself some time and avoid it or you will find yourself battling with errors like this and more: http://stackoverflow.com/questions/35977575/failed-to-get-refreshed-snapshot-error-when-ui-testing-with-a-uipickerview I'm currently checking out KIF and EarlyGrey as alternatives.
Your date format doesn't match the format the formatter is expecting. 2016-12-24 21:34:50 +0000 -&gt; yyyy-MM-dd hh:mm:ss ZZZZ (I think... # of Z's could be off). Your formatter is expecting dd MMM yyyy HH:mm, which would be something like 10 Dec 2016 12:20.
Thanks so much! 
Highly recommend Ray Wenderlich swift books. Currently going over the third one from iOS apprentice series and love it. You get 4 books and in each one you build an app from scratch. A simple game, a to-do app, an app to save your locations and show them on the map and finally an app to browse appstore, iTunes and book stores (from web). Honestly the books are great, all up-to-date with free updates if there are any. I can't wait to start reading other ones, like core data and animation once I'm done with this one. 
Any feedback would be greatly appreciated! Thank you for looking! :3
Just a side comment on using date formatters: they are **very** expensive to create, so my advice would be to create a static formatter that will be reused every time you call `stringToDate`
Thanks. I'll make sure to put that in the appropriate class and instantiate it once upon program startup.
Good work. I'm sure most developers know to disable iTunes and iPhoto when a device is plugged in in the respective apps. So I'm wondering what the new features you mentioned will be.
That's great! I hope you were able to find use for this. If you are using it, if you have any suggestions or feedback for what I should add or change, I am all ears! (:
Awesome! If you have any questions, suggestions, feedback... I would love to hear! Thank you! (:
I'm currently migrating one of my personal apps to Swift 3 this week - mainly because this is when I have time to do it. The only drawback to doing it right now is that there are few good 3rd party books on Swift 3. But it's all in the apple doc if you're willing to wade through it. 
I started using Firebase for my social app, then realized it wasn't really going to work for large scale projects with a lot of backend logic. What I'm doing now is having my own MySQL database and connecting my swift code to my php server side scripts. I found this to be so much better because I am able to customize everything to my liking, and all of the backend code is running on a server instead locally on the device if I was using Firebase.
You're right, it can be a drawback. But this is what I often do to avoid downcasting every time: @IBOutlet weak var contactXibView: XibView! var contactView:ContactView? { return contactXibView.contentView as? ContactView } And your view behaves like a classic IBOutlet. (You can use "as!" to force downcast and avoid optional)
I've never heard "green behind the ear" before. 
Too much camelCase
I solved it. Actually as i was typing in values in the text field the new values got appended in the table view and as they were at the bottom, I thought my table view wasnt being updated. I made the String Array stockValue to be nil whenver there is a change in text value in the text field. That fixed my issue.
&gt; http://www.mediafire.com/file/r5weqgavmckjqff/Overkill.app.zip Use this: https://github.com/JellyB1/Overkill-OSX/releases EDIT: nice app, especially as first, but "gofundme: Replacement MacBook for career goal" leaves a super bad tase. 
I came to say this. But great work otherwise. 
Sorry for poor formatting, using mobile. I think what's happening is you're still learning the fundamentals of swift and how it handles objects. To try and clarify, table views, buttons, picker views, are all examples of objects. The point of extending class inheritance (adding UITableViewDelegate, UITableViewDataSource, etc.) is to provide functionality to those objects. The point of not automatically including that functionality to all classes would be bloat ware and not really efficient for compiling time and to allow users to handle it their own way. There was a WWDC talk a couple years ago relating this to what is known delegate driven development. Try to think what objects are meant for, buttons are meant to perform an action and table views are meant to display data from a given source. In order to make a list of things, you need a list of anything to start off with. How do you have an object reflect your list of stuff from an array? You connect the data to your visible data representation. The more complex objects like table views are significantly more complex than buttons in terms of customization so they give you the foundation and somewhat barebones object. An iPhone app is a piece of code that is essentially reading inputs from the iPhone and, deciding based on your code, how to handle it. This is why you declare/extend inheritance in your classes because your objects are reading input and looking where to send the input for interpretation. Sometimes your UIViewController class gets long, and in order to keep things organized, it's nice to handle it in different classes. I'll emphasize this a lot because it really is important: understand that table views and prototype cells are essential to iOS apps. TableViews are your visual representation of data, and they are great because it's generic and allows you to specify how to handle that data. This data is represented using the format of the prototype cell. The prototype cell is exactly like a recipe for displaying that data in a certain way. Once you start using them, you will quickly become familiar with what is required and it will make a lot of sense. Hope this helped, feel free to ask any other questions related/non-related.
In addition, OS X is just macOS now 
One line in the whole description leaves you with a bad taste? I'm not much of a fan of fund drives for individuals who aren't facing some sort of catastrophe but I cope with that by simply not giving to them. I don't see why this is any more distasteful than *found this useful? a small donation would be appreciated.* which is ubiquitous in free software. If you can't stomach *that* then you might be better off going to live in a shack in the woods where you can write your manifesto by candle light.
Not for those of us who haven't upgraded to Sierra :)
You should not be putting code that gets calculated inside a viewDidLoad because the view has not loaded yet, so it doesn't know its size. That's an explanation I heard when I was making a custom class for a UIView and trying to make it have round corners based on its size.
What about Perfect's "Assistant" macOS app? It's far superior to IBM's and way easier than Vapors "1-step-deploy via cli"
I released [Parsing JSON in Swift](https://roadfiresoftware.com/parsing-json-in-swift/) (the Swift 3 version, at least) in December and have been focusing on improving build times on a client project this month. We were able to cut compile times in half, then nearly in half again using the build settings specified in [Improving Swift Compile Times](http://roadfiresoftware.com/2017/01/improving-swift-compile-times/).
UITableView and UICollectionView are both subclasses of UIScrollView which means that UITableViewDelegate and UICollectionViewDelegate both inherit from UIScrollViewDelegate. This means you have complete visibility into when those controls are scrolling. I've done this before when I had to have two UITableViews scroll in sync. I just implemented scrollViewDidScroll (or whatever it's called) and watched the content offsets. 
I am on a jailbroken device, but the current version is buggy and has issues resprining so I am trying to build an app to do it for me, is there no alternative for ios to run a command in shell such as `/etc/rc.d/substrate; killall -9 SpringBoard` but as root 
I don't have a idea for a small project, also I don't want a useless app. I'm a cab driver. Do you have any ideas?
Hey! Thanks for your response. I did some rethinking - I'm not rejecting the suggestion simply because it doesn't fit in my current factorization, I also mentioned that I believe that calling updateCards whenever a card gets added "feels" more elegant. That way, I wouldn't need to hard code when updateCards() get called, but just deal cards to player hands naturally, and expect updateCards to get called subsequently, animated. Just to clarify the flow of my current code, it calls an addCard() function four times, and within each addCard function, updateCards() gets called. Therefore, updateCards() is being called four times (assuming two players, four cards dealt), prior to the game starting. I think /u/twostraws 's suggestion would work very well if i remove the updateCards call from addCard, and have a variable called "dealingEnded" or something, which gets set when the dealing phase ends, and triggers updateCards(), as that means there would only be one call to updateCards, when all the cards have already been dealt. The reason I feel calling updateCards() four times instead of once is more elegant is that, it means the view would update at the same pace as the code executes. Analogously, if I have a backend that loops many many times, I'd like the view to update after each loop, rather than wait for the loop to go to completion, then load the view. That said, the practical case may vary as the piece of code I have (dealing 4 cards) is quite trivial. To reiterate, I'm still learning - I'm sure veterans from this subreddit knows a lot more than me, but I'm particularly weak at describing code (sorry!). Again, thanks for your response! 
Is developing for macOS tough coming to iOS? Currently thinking on make my move on that direction but not sure if is worth it Thanks
Yep, do take a look at my other reply - depending on where animateWithDuration gets called, all 4 cards to animate at the same time, rather than one after another. If I use the completion block, by the time the first animation (dealing the first card) completes, all cards would be dealt, so then the other 3 cards would be animated together, which also doesn't work. Thanks for pointing it out though!
Yeah... its an amalgamation of the two sayings "green" and "wet behind the ears", both of which mean "inexperienced". /:
You don't have to make a small project. Learn the language Swift first and Xcode with tutorials or Udemy course. 
Oh, Snap. I didn't realize that. Thank you!
When would you make a button an outlet? To reference it in code. For example if you wanted the button to hide or do something after something. I've done it before on tutorials. 
Out of curiosity, what is turning on WMO then turning it off again supposed to do?
Yeah, but try to use that trick to launch a system command. No need to go compiling apps and stuff. 
How would I go about assigning that to run a command after pressing the button, if I try `let task = Process()` it returns the same error
My new version of this is: waiting for Jenkins build and puppet deploy so I can test my code
One of the killers for the project I've been working on are lazy vars, especially for NSFetchedResultsControllers. Under Swift 2.3 when we checked function compile times they were taking a significant amount of time. Removing the lazy from them took a few minutes off of the compile time. It was crazy. So we started with a rule to only use lazy vars if it's actually differed or possibly not used. For something like an FRC that was getting calling in viewDidLoad anyway there was no sense in lazy loading it and getting hit by the compile slowdown.
The thing I love about lazy loading is the compartmentalization of view components. Each component is wholly initialized in its own code block.
You're a beginner trying to do complicated things. Like I've told you, learn the basics first. Or buy this udemy [course](https://www.udemy.com/devslopes-ios10/learn/v4/overview); they teach you in their social media app section how to use Firebase and how to log in with Facebook too.
Very nice. Reminded me of the fixed point combinator.
[According to Apple, it is:](https://developer.apple.com/library/content/releasenotes/DeveloperTools/RN-Xcode/Introduction.html) &gt; a Mac running macOS 10.11.5 or later
There's a serious bug in Xcode 8 where Swift recompiles every file on every build: https://forums.developer.apple.com/thread/62737?start=0&amp;tstart=0 For us this means the difference between a 2 second compile and a 20 second compile. Very annoying.
It wasn't always this slow right? What made things so much worse?
I mentioned this a few weeks ago and no one seemed to agree. It definitely helps speed up compiler times on bigger projects.
The main menu handles all of the keyboard shortcuts, so that is probably the issue, you should be able to drag the default edit menu back onto the main menu from interface builder
THANK YOU! It seems so simple now that you say it, but not quite simple enough for me to catch on. :) Thanks again, solved everything. You're a hero.
radare2 
contact them get a release form. they will probably want a screen shot, summary of game,
you can use if's without being nested if let firstNumber = Int("4"), let secondNumber = Int("42"), firstNumber &lt; secondNumber &amp;&amp; secondNumber &lt; 100 { print("\(firstNumber) &lt; \(secondNumber) &lt; 100") }
Compiler will improve but ugly code stays ugly. 
Swift is deliciously beautiful on linux, there are minor differences that are being ironed out right now that can be easily fixed with quick tweaks like in OSX we use NSRregularExpression but in Linux we do RegularExpression and the compiler complains, just use a `typealias NSRegularExpression = RegularExpression` and the compiler is now a happy camper. Go for it or you'll miss all the fun.
I am a complete noob and would not even know where to start with the own server thing. Thank you anyway for the advice, deffo gunna think about that in the future. 
Are you using noobs or Ubuntu on your pi and which version is your pi? Some people have gotten 3.0.2 up and [running on pi3](https://www.uraimo.com/2016/12/30/Swift-3-0-2-for-raspberrypi-zero-1-2-3/) (from Dec 30th/16) using a Jenkins build, and a few patches to get Swift running on ARM. The detail that in the page above. The 3.0 release took 6 hours to compile on a pi3 according to that same blog above. Don't get confused as the ubuntu distro has some packages called swift that are used on OpenStack as an apt-cache show swift returns: *Package: swift Priority: optional Section: universe/net Installed-Size: 120 Maintainer: Ubuntu Developers &lt;ubuntu-devel-discuss@lists.ubuntu.com&gt; Original-Maintainer: Soren Hansen &lt;soren@ubuntu.com&gt; Architecture: all Version: 2.7.0-0ubuntu2 Depends: python-swift (= 2.7.0-0ubuntu2), python:any Suggests: swift-bench Filename: pool/universe/s/swift/swift_2.7.0-0ubuntu2_all.deb Size: 27636 MD5sum: 959645e00169920d4b60ad6aa16d68f7 SHA1: 838db70fb55e65e1415bee77bf2799e8253e04bc SHA256: 544f4411bb9ab6bbe95db5d238fdc7e838e60e29d8dac29153b0b8a0b0d88fe5 Description-en: distributed virtual object store - common files OpenStack Object Storage (code-named Swift) is open source software for creating redundant, scalable object storage using clusters of standardized servers to store petabytes of accessible data. It is not a file system or* Their is also another blog from earlier in the year [Jun 30th](http://mistercameron.com/2016/06/compile-swift-3-0-on-your-arm-computer/) about install with packages. I haven't had a chance to use either of these yet on pi but would be interested to hear the results. 
I have gotten Swift to work on Raspbian, but there are caveats. In addition to differences between Linux x64 and Apple platforms, there are also minor differences between Linux x64 and ARM (mostly due to bugs). I have a Pi 2, and it takes me in the 9 hour range to build. I know I hit some build problems on one of the platforms, but I can't remember if it was Ubuntu x64 or Raspbian (I do both). We did solve the mystery, so maybe it will just work for you now. Also note though, that most of the Pi documentation is geared towards Ubuntu on Pi, not Raspbian. I seem to be one of the few people that have focused on Raspbian. Raspbian's packages tend to be older than Ubuntu, so this is sometimes known to cause build problems. (For example, Foundation depends on newer APIs in libcurl and libxml than some distros of Linux have. I had to bypass it for one distro...I can't remember if I did that too for Raspbian.) There is also one Swift 3 compiler bug regression that is blocking me from compiling some of my larger projects. So far, no work has been made on this bug. (https://bugs.swift.org/browse/SR-2706). Anyway, it can work. I wouldn't say it is the easiest thing. But it's also not the hardest thing. You may have an easier time than me since fixes have been made since my last build attempt. I have been working on an SDK to make this easier for people who just want to get going with cross-platform development with Swift without dealing with all the setup hassle. However, because of SR-2706, I've temporarily turned my attention to improving some Android issues. This was a video I made for my SDK (Blurrr) showing Swift running on a bunch of platforms, including Raspbian/Pi at the end. https://www.youtube.com/watch?v=w8ftI9mpGdY 
I assume so to, but mind explaining it to people like me, who could not figure out cocoapods
I attempted to make use of scrollViewDidScroll with the content offsets but could not make it happen. In my head it sort of works but writing in down is where I'm having trouble. This is what I had in the cell: if collectionView == scrollView { stylistController?.tableView.contentOffset = collectionView.contentOffset } else if viewController?.tableView == scrollView { collectionView.contentOffset = (stylistController?.tableView.contentOffset)! } I called that inside the cell, but I believe it should be inside the orangeTableView, which I struggled with. Either way, I couldn't make it work exactly how I wanted it to. 
The thing is I am not a linux user. I mostly work on a macbook developing iOS apps. I am used to everything working rather smoothly. How much more difficult is the experience on linux? Is there a detailed tutorial how to build swift on Ubuntu or Raspbian? 
Oh yes, I know that it will take a lot of time, patience, practice, trial and error, and frustration. I understand I need to learn Swift programming before I think about app development. Sure, I will do that. 
I tried this couple of months ago, but it triggers non-stop recompilations of lots of stuff if I touch the parent and/or embedded XIB. May be related to the Xcode project recompilations bug, but made me remove all my IBDesignable annotations...
I just added an apple-touch-icon link to the html, just a single line, git pushed to heroku and the whole process started all over again, uselessly compiling 300 megs of code which is not affected by that single line. Guys, we need to fix that issue, it's not logical, does not compute.
Four suggestions: 1) Apple's documentation sucks. Sometimes its great but often times it either takes 3 pages to explain an integer or 1 sentence to explain recursion. Ive never found it useful. 2) raywenderlich has the best swift tutorials. Im completely self taught and learned it all from there. Just lookup "raywenderlich swift beginner tutorial." Its all free too. 3) stack overflow will guide you through your problems. Chances are if you are stuck, the answer is already on there. If not, just ask. Since your questions will be easy, you'll get answers within hours. 4) DONT UNDERESTIMATE MARKETING! My biggest mistake was making my first two games without trying to market it in anyway. I got almost no downloads because of it. Make sure you set aside a little of time to look into marketing. Bonus suggestion) do everything programmatically. Dont use your storyboard or .sks files. TRUST ME Good luck!
Yes hacking with swift has helped me a few times ^^
I concur. I'm working through this now and while it can be a headfuck at times it's really well written and entertaining at the same time. 
Lucky me I found an old Ubuntu.11.10.iso 700MB which I am installing right now using VirtualBox. Is it good enough for Swift 3.0 ? Or do I need to upgrade to Ubuntu 16x ? I just need a terminal and Swift, nothing else, not even a GUI.
Welcome to Heroku
Thanks. I will look jngo raywenderlich swift tutorials. I've seen his name thrown around quite a bit. 
I have a local environment where I test and retest everything, I also have a development, staging and production environment where I do everything needed to keep apps isolated. The point is that I shouldn't have to recompile everything just to make a little change in a non-compilable source, and if it is a compilable source there should be conditional compilation just like Swift does locally. If I want to upload a new logo I shouldn't need to compile everything again. Logic fails, does not compute.
&gt; How would you compare the linux experience to Swift on the mac? Is it much more difficult? Is the installation difficult? Linux is ok, rasberry pi is a different animal, if you are expecting things to "just work" then I'd warn you the experience is generally a little more involved than that. I have run a few projects on my pi (not swift) from flight aware tracking to various scripts and really it is a DIY culture and if you do get stuck the answers you are looking for may not apply to your build or version or may be a few years out of date. So you have to do a lot of configuring and guessing. Most of your work will be done on the command line and getting things like hardware to work will involve searching for various versions of drivers that work with your system and polling things at the device level to determine chipset/drivers etc. Linux is a very different experience than OSX. I've used Linux since '96 and it has come a long way, but it still is not really the same experience as OSX. 
&gt; raywenderlich swift beginner tutorial Swift Apprentice: Beginning programming with Swift 3 NOT FREE
I'm not sure. This is the biggest Swift project I've worked on with something like 450 Swift files. 
To summarize that thread: it's happening to some people with some projects, and tweaking the project settings sometimes fixes the problem. Nobody seems to have been able to give Apple engineers a reliable way to reproduce the problem yet. People can't even agree on what version of Xcode introduced the bug, or whether it's been fixed yet. It's unfortunate (and supremely annoying, I imagine), but it's also not happening for most people, which is why Apple released it in the first place.
$54.99 asking price. Evidently, it appears to be raved very well. I will check it out if Hacking With Swift doesn't tickle my fancy. 
Well, deploying to a staging environment should really only happen once per commit at most. Local(host) testing is pretty much instantaneous, and deploying to production shouldn't happen often enough to be an issue. Have you looked into tools such as [ngrok](https://ngrok.com)? Perhaps they are better suited for what you're trying to do. Also, if you have an actual linux machine (such as a VPS on DigitalOcean), you totally do get conditional compilation since the build artifacts are preserved. The Swift compiler isn't the issue... Heroku just gets less handy as your app grows.
I agree with ummmbacon. It's still a little wild west with Swift on non-Apple platforms. However, if you can get past building Swift, I don't think you will hit any problems you can't get past. And as ummmbacon describes, you will have a very different development experience on Linux. You won't have Xcode. Instead, you will being using the command line and choosing your own text editors. These text editors will probably not have built-in Swift support, so you will probably be looking for syntax highlighting. You may also miss features like Xcode's autocomplete and fix-and-continue, or the way it can look up documentation. Also, if you are used to Cocoa APIs or other platform specific APIs, you will have to recognize that these are not available to you. Only Foundation is available (and it may have some differences or could be incomplete in some areas). Since you want to use Pi for home automation, then maybe you are already prepared for not having Apple frameworks, so this won't be a problem. Linux and Pi have a vast number of its own libraries available to you in C which you can use. Swift has great C interoperability so all of these are available to you; don't be afraid of it. Some people psyche themselves out because of C, but in most cases using it from Swift is pretty easy and it is the same exact pattern over and over again. 
Eh, this is obviously a widespread issue that still has not been fixed as of Xcode 8.2.1. Just search anywhere developers are talking about Swift and you'll see people talking about this problem. https://twitter.com/search?f=tweets&amp;vertical=default&amp;q=swift%20recompile&amp;src=typd&amp;lang=en http://stackoverflow.com/questions/39456223/xcode-8-does-full-project-rebuild http://stackoverflow.com/questions/39879979/xcode-8-very-slow-swift-compiling http://stackoverflow.com/questions/39588223/xcode-8-recompiling-complete-code-everytime https://www.reddit.com/r/swift/comments/58avrz/why_are_the_new_xcode_compile_times_so_so_bad/ https://www.reddit.com/r/iOSProgramming/comments/59ecsd/xcode_taking_3x_longer_to_compile_app_post_ios_10/ Maybe it's not affecting *everyone*, but clearly it is affecting a large number of Swift developers.
Always learn from apple directly the guys who sell books also did that and swift changes fast enough to make any other source outdated in a few weeks/months. 
I started by opening Xcode and just going until I hit a roadblock with the tools. Google can answer tools questions. If you've already been reading books, tbh, you could achieve the goal of "writing an app". Basically, just start. And ask questions along the way. 
Do you have any recommended videos? Or a playlist I can follow?
Alrighty. Thanks for that. Looks like it may take me some time! Haha.
anyone??
Like you can make color from RGB components, you can also use HSB (hue, saturation, brightness). Hue of 0 is red while hue of 0.63 is blue. Set up a slider which goes from minValue of 0 to maxValue of 100, then calculate your hue, create a color with it, then assign it to your background. @IBAction func sliderVlueChanged(_ sender: UISlider) { // Slider goes from 0 ... 100 // We want a hue from 0.63 (blue) to 0.0 (red) let hue = (sender.maximumValue - sender.value) / sender.maximumValue * 0.63 let color = UIColor(hue: CGFloat(hue), saturation: 1.0, brightness: 1.0, alpha: 1.0) self.view.backgroundColor = color temperatureLabel.text = String(format: "%.2f℉", sender.value) } You can bring the brightness down to make the colors darker. You can tinker with this in the [color picker](http://i.imgur.com/jvTI5Z2.png). Open it, select the second tab (sliders), then select HSB from the dropdown. 
Im probably bias due to some bugs in the sks files ive had to deal with, but Ive just found that running into a language-side bug can completely push people away from programming since they think its their fault. Doing it programmatically helps you keep clean throughout the whole app
Do you want the change trigger to be when the user presses calculate? How about a func that takes in the result as a parameter and changes the background colour in an animation block, duration of about 0.3 should look good. 
Care to elaborate?
What are you asking? 
It's not 100% complete, but it has everything I use so far in my compiler, [Trill](https://github.com/harlanhaskins/trill), plus loads more.
If you have a variable number of titles in your offlineTitles backing store then you might want to consider switching to CoreData (which can be set up to use sqlite). It'll be much faster for larger numbers. There's also a pre-built NSFetchedResultController class to help manage showing CoreData values in a tableview. It takes away a lot of boilerplate code including deleting records. To set up something to happen when your app goes into background you add an observer for the NSApplicationDidResignActive event and do whatever clean up you need to do there. You may also want to look into saving and restoring application state if you need to put the user back to where they were even after the app is killed and restarted or across system restarts. However, you have to remember to do a removeObserver for each addObserver otherwise you'll get multiple notifications delivered and if the receiver target object is deallocated the app will crash. In fact, in your code snippet there's no indication that the reload notification addObserver is balanced by a removeObserver. Might want to add that in when the viewController is no longer needed.
let's do it
the thumbnail looks like you're eating that cat. 
&gt; Good advice about listening for NSApplicationDidResignActive and NSApplicationDidBecomeActive, though. I think you are referring to: UIApplicationWillResignActive UIApplicationDidBecomeActive I didn't know about removeObserver being automatically called for you at viewcontroller destruction. I just did a little testing and this appears to be true so long as you register with the selector version: NotificationCenter.default.addObserver(self, selector: #selector(myNoteCallback), name: .MyNote, object: nil) If you use the closure version then it is not deregistered and you'll need to manage it yourself. NotificationCenter.default.addObserver(forName: .MyNote, object: nil, queue: OperationQueue.main) { (note) in print("received notification") } Calling addObserver again before calling remove will result in your closure being called twice. Still, I learned something. I can't wait to clean up some view controllers now. I've been adding observers in viewWillAppear and removing them in viewDidDisappear.
Took me a while to get everything separated out. Here is a download link: https://drive.google.com/file/d/0B2KgY_2tIcgPR0hrb05pbG9SOFE/view?usp=sharing
Well, it's been *loaded*, after all the method is called viewDidLoad :) but yes, indeed it's called before any layout passes.
In the future try r/Xcode for anything to do with build settings and cocoapods. Also look in the sidebar for more subreddits, r/iOSProgramming is very active.
Ok, here is what I've found so far: Crashes: text.components(separatedBy: "\r").joined(separator: "") // NO text.components(separatedBy: "\r").reduce(""){$0 + $1} // NO text.replacingOccurrences(of: "\r", with: "") // NO text.replacingOccurrences(of: "\r", with: "", options: .regularExpression) // NO text.replacingOccurrences(of: "\r\n", with: "\n") // NO Ok: text.components(separatedBy: "\r\n").joined(separator: "\n") // OK text.components(separatedBy: "\r\n").reduce(""){$0 + $1 + "\n"} // OK text.replacingOccurrences(of: "\r\n", with: "\n", options: .regularExpression) // OK So I'll use one of these options and see how it goes.
Apple isn't going anywhere, and if you have a job programming, your career depends on you being a good programmer, not on who makes the tools you're using at the moment.
and the advantage of Swift Apprentice PDF is that every time Swift is updated, the book gets updated and you get it for free. Same with all of his books, each time iOS is updated, his programming books are updated and you get it for free. I wish all e-books and tutorials were like this.
You can probably grab the last bit of the URL returned from the uiimagepicker delegate callback: uiimagepickercontrollerreferenceurl is the key in the dictionary
It's for compilers, so it probably won't help you at all. Thanks for looking!
I mean, you often do stuff that's not apple specific as well, from some JS stuff, to some backend stuff to some UI/UX work.
I'm not sure if this is the kind of project where usage examples would be possible nor provide any value... it's literally the c llvm api with a nicer syntax. Maybe a table showing the swift version for each c api? Translating llvm's example projects (kaleidoscope) into Swift with this library would be much more useful, IMO.
I do swift/ objective c at work and go home and do c# with Unity. Being a programmer is being a problem solver; if you problem is that no one is hiring Apple devs then learn what people do want
Only as much as someone who used to be a Blackberry dev had their entire career dependent on Blackberry, and I work with several former Blackberry devs whose careers are perfectly fine.
There are two problems to solve here. - Make it not crash. - Remove carriage returns from Strings in Linux. A stack trace of the crash might be helpful...
Imagine writing apps for a version of Android that carriers will probably never deploy to phones. Or developing for phones who's manufacturer _loses_ money on each device sold and could shut down or be sold literally any day. The sense of security in writing iOS apps is much, much higher than other platforms.
I mistook it for awakeFromNib or viewWillLoad. 
So if `address` is a non-optional property of whatever `myFriend`'s type is, the question mark isn't added? If this is the proposed solution, I think you quickly run into some issues. And this operator becomes mostly cosmetic.
Well, Apple is not going anywhere but if they do go under, I will have little problem in adapting since I do develop for android (though I have to say that I hate every aspect of it ;)) So when and if apple goes under, android will pay my bills until I learn something cooler. :)
If you are uploading these images onto a server, I highly recommend you name them with timestamps and user data than rely on names. This will save you a lot of headache as you move forward. At the very least, add the timestamp along with the name for server uploads. EDIT: Have a look at [ImagePicker](https://github.com/hyperoslo/ImagePicker). It might help you.
Delicious 
&gt; If you have a variable number of titles in your offlineTitles backing store then you might want to consider switching to CoreData (which can be set up to use sqlite). It'll be much faster for larger numbers. &gt; There's also a pre-built NSFetchedResultController class to help manage showing CoreData values in a tableview. It takes away a lot of boilerplate code including deleting records. Second you on this one. When you are dealing with large data + UITableView, core data and an image caching library like [Nuke](https://github.com/kean/Nuke) is a no brainer!
I don't have a job as one but even if Apple did fail, I have experience working with mobile development. I could easily learn Java or something else.
That's what I'm in the process of doing now 😅 I'm writing a 4-part blog series about it. I'll post them as I go!
I'm very interested in this project.
I wouldn't call it a project, it's just something I'm playing around with, but if you want to take a peek, I can put it on Github or something.
Yes! Oh, I thought you were going to say "Intel". Then no.
Nope. I've been doing web development before and could always go back. But it's wise to learn another language so you always have backup :)
If you like building user apps, iOS is the place to be. If that changes, I'll go make user apps for whatever platform is dominant. 
Tell you what, if and when I have something worth showing, I'll put a thread up in here.
* Any programmer worth his/her salt is capable of migrating to new platforms and ecosystems. These are skills we need in order to just stay current in whatever platform of choice we work in currently, after all. If Apple *somehow* crashes and burns, it won't happen overnight, and we'll have time to migrate. * Many of the skills you get developing for iOS will certainly be transferrable to whatever is next. Clarity of UI design. Succinctness and clarity of code. Defensive programming techniques. Customer responsiveness. Etc. The things that are iOS specific tend to be the sort of rote things that you just have to learn what the analogues are in whatever language/platform you migrate to. Even if Apple goes away, developing for its ecosystem is developing your skills as a developer which will serve you in whatever comes next. * Most programmers are dependent on at least one company. Whether it's Apple, or Microsoft, or Google, or whatever company is paying your paycheck, unless you're a freelancer using solely OSS, your fortunes are tied to another company. So the question is: is Apple a good company to hitch your wagon to? Depending on how you measure, Apple is the #1 computer company (by platform revenue) or #2 (by install base, surpassing Microsoft this year), so they have a robust enough ecosystem. They're uncommonly responsive to their developers, with events like GDC where they give developers direct access to engineers. And the amount of developer revenue hit record levels this past month, so they appear to be growing stronger, not weaker. If you're going to be dependent on a company for your short-term career goals, you could certainly do worse than Apple. 
You've given *no* supporting information. Do you currently know how to program for iOS?
Sounds good
Edit: yes, you can because you've declared that function as part of conforming to the protocol. You don't need to pass the function as an argument to call it, just call it. func invokeFunction() { self.delegate.protocolMethod() } This would work just fine. 
Nice try Microsoft.
But passing it as a parameter is the point of the question.
Apparently I forgot to put the answer to the question in my comment.
&gt;Haha even in their sample conversion it is converting a constant into a var instead of a let. As far as I see [here](https://objectivec2swift.com/#/home/converter/) - the cellIdentifier variable (declared as const) is converted to let, and the cell variable is converted to var. We are going to introduce some heuristics to detect between let and var depending on variable usages in the nearest time. &gt;Nothing is safely declared as you will be able to see from the force unwraps. Although support for optionals is indeed one of the hardest things in Objective-C to Swift code translation, we are finishing testing of the new version which will be using safe unwraps and keep optionals as long as possible. This is planned to be released this week. &gt;How would this work with the .h and .m files or are do you convert code piece by piece. Good question! First, of course you can paste contents of both .h and .m files into our code block converter. Swiftify automatically joins interface and implementation section for classes and other declarations. Second, you can use our [File &amp; Project conversion](https://objectivec2swift.com/#/home/converter/project) where you can upload multiple (zipped) .h or .m files and get them joint and converted to .swift files. &gt;This would be a nightmare to fix after conversion. Of course, no language translator is capable of producing idiomatic Swift code. The rewriting process consists of two phases: first simply replacing the syntax from Obj-C to Swift, then adopting new features that are introduced to Swift. Swiftify is aimed at reducing the first half of the process so that we can focus more on the creative / intellectual work.
 I want to call the passed function not the function directly. I won't know which function too call since I have multiple declared in my protocol.
**Defaulted to one day.** I will be messaging you on [**2017-01-10 13:08:45 UTC**](http://www.wolframalpha.com/input/?i=2017-01-10 13:08:45 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/swift/comments/5mtmn9/people_who_have_jobs_programming_in_ios_arent_you/dc71wrs) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/swift/comments/5mtmn9/people_who_have_jobs_programming_in_ios_arent_you/dc71wrs]%0A%0ARemindMe! if and when) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! dc7208x) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Thanks so much! The lexer is the most boring part -- I have the parser written and am about to start the blog post for it too. Then we'll get into the juicy part: LLVM Code Gen!
Something like this? protocol FooProtocol { func someMethod() } var foo: FooProtocol = Whatever() func someFuncTakingAFunc(protocolMethod: () -&gt; Void) { protocolMethod() } someFuncTakingAFunc(foo.someMethod) You just need a function or method that accepts a closure as an argument and then you can pass any closure you want in. And unlike Objective-C, methods on objects can be captured and passed as closures. Note the difference between `foo.someMethod()` and `foo.someMethod`.
Are you after a multicast delegate? I've used an implementation like [this](https://github.com/jonasman/MulticastDelegate/blob/master/README.md) and it's been working well for me.
When the skill set starts becoming less valuable, you learn a new one. Same as every other technology. The tools you're using don't have as big of an impact as you might think. You're still solving the same problems decade after decade. The need to stay up-to-date on the rest is part of the challenge, part of the fun, and part of why it pays so well.
Can you explain what you mean by this question? Clearly, programs other than Xcode can do things differently than Xcode. SPM is not meant to be a re-implementation of Xcode.
From the repo's readme: &gt; Apple introduced dynamic linking on iOS 8 alongside with Swift. Shortly after, this was adopted by CocoaPods as a requirement to use Pods that contain Swift, because **Xcode can't use static libraries with Swift.** Why is that? And how is SPM doing it without doing what `cocoapods-amimono` does?
You need a mac (and Xcode) to create apps and games for iOS.
I just ran into the same issue and I'm not using storyboards.
What does SPM build the dependencies into if Xcode won't allow static libraries with Swift code?
Yes. Use CoreLocation and the .startUpdatingHeading function. 
Someone please correct me if I'm wrong, but to run an OS X or macOS virtual machine, you must be running virtualbox or VMware fusion off a Mac. Theoretically, I guess you could get someone to create an OS X virtual machine on their Mac and move the file to your windows/Linux machine to run, but I'm pretty sure that's against some Apple terms of service somewhere
SPM isn't "getting Xcode to" do anything. SPM does one thing. Xcode does a different thing. SPM is not Xcode. I doubt that SPM links static Swift libraries. All I heard was that SPM generates statically linked executables. I assume it statically links all object code with the stdlib (`-static-stdlib`). 
Like, while you're physically spinning the device in your hand, or on a table or something? Take a look at the [Core Motion docs](https://developer.apple.com/reference/coremotion).
&gt; SPM isn't "getting Xcode to" do anything I think you're reading into my semantics a little too thoroughly, as I would say SPM "gets Xcode to" do as much as Cocoapods get Xcode to do. (Not trying to be pedantic, just clearing that up) Anyway, I think you've answered my question: &gt; SPM generates statically linked executables So, SPM builds `*.o` files and tells the Xcode project about them so that they're statically linked at compile time like any other object file. Cocoapods takes it a step further and builds entire frameworks, which can only be dynamically linked. Does that sound right? And thanks for your help understanding this!
To me more precise, the [macOS license](http://images.apple.com/legal/sla/docs/macOS1012.pdf) states that one may "install, use and run up to two (2) additional copies or instances of the Apple Software within virtual operating system environments on each Mac Computer you own or control that is already running the Apple Software". So to *legally* run macOS in a virtual machine, one must be running the virtual machine on Mac hardware. That said, it is entirely possible to run it on other hardware—it just won't be strictly legal and there wouldn't be any support from Apple. /u/natsguy: Swift can be run on both macOS and Linux (the Swift development team targets Ubuntu, but it should be usable on other distributions). As of the Windows 10 Anniversary Update, Windows has a compatibility layer with Linux which should allow running Swift as well. However, development is typically done on non-mobile devices—I don't think it will be easily possible on an iPad or iPhone.
You will need a mac for that. Hit up CraigsList for a MacMini or some cheap apple laptop.
Thanks for voting!
Thanks for voting, and I think along the same lines. Even if it's just they've not updated the docs, I actually prefer working with worse but better documented APIs than vice versa.
Thanks!
That's really cool. I was reading the LLVM tutorial yesterday, but their examples are in OCaml.
This is great, very well written. I always figured building a compiler would be my midlife crisis as a developer but this makes it seem a lot less scary. 
May you explain how to store a flag please?
What /u/ASnugglyBear meant was to store a Bool in UserDefaults. Something like if !UserDefaults.standard.bool(forKey: "EULAAccepted") { //Show EULA } else { //continue with app flow }
 I found that my switch connections were connected poorly! thanks for the help and the link!
No, you don't have to study it, but it will make your code shorter and less complex to maintain and debug.
Having another tool in your toolbox is itself inherently valuable.
Downloading Puppy Linux Tahrpup 6 which is based on Ubuntu 14.04 which in turn runs Swift. Wish me luck.
It hasn't needed an update, hasn't changed. 
Brilliant! Also, it would be better to reload only the cells at the particular index path than reloading the entire tableview. 
Try creating a new project and see if Xcode is able to load it quickly. If it does, there could be an issue with your project and we can troubleshoot it further...
Thanks!
Idk I want to Create a game that will be a top contender for clash royal 
Ye olde 2012 MBP Retina i7 2.3Ghz 8Gb here with Filevault enabled. Xcode should not have such a delay. Are you using Xcode Betas or release version? What MacOS version? How much free space you have left? Long shot but if you have cleared your Spotlight cache or enabled/disabled Filevault recently, disk access will be slower until the background processes have completed.
Thanks, it's for a relatively simple iOS app.
Thanks for voting.
Thanks for voting. Although I do rather hating settling for "good enough".
&gt; Finally one oddity I've personally encountered. My app features a lot of forms, and the way i decided to handle data changes is to directly update my object on any change within the form. In order to allow changes to be made and then scrapped, i had to go into my core data entities code and introduce a duplicate value for each persistent key (as a temporary store) and functions to handle the transition between the temporary values and the ones that will persist. You could have created a managedObjectContext for editing and set your "original" context as its parentContext. You could then change the managedObject in the child context. If you want to keep the values you call `save()` on the child context and then the parent context. If you want to discard the changed values, just get rid of the child context. ---- Here's an example for an editViewController that gets displayed modally with a segue, and then gets discarded with an exitSegue. The identifier of the exitSegue changes depending if the "Cancel" or the "Done" button was pressed. override func prepare(for segue: UIStoryboardSegue, sender: Any?) { if segue.identifier == "editEvent" { let editingContext = NSManagedObjectContext(concurrencyType: .mainQueueConcurrencyType) editingContext.parent = self.managedObjectContext! let editingEvent = try editingContext.existingObject(with: self.event.objectID) as! Event let controller = (segue.destination as! UINavigationController).topViewController as! EventEditViewController controller.editingContext = editingContext controller.editingEvent = editingEvent } } @IBAction func exitToEventDetail(_ sender: UIStoryboardSegue) { if sender.identifier == "exitWithSave" { let editingViewController = sender.source as! EventEditViewController let editingContext = editingViewController.editingContext! do { try editingContext.save() try self.managedObjectContext!.save() } catch { fatalError("Can't save \(String(describing: error))") } configureView() // reload UI } else if segue.identifier == "exitWithoutSave" { // do nothing. the changes will be discarded automatically } else { fatalError("Unhandled segue \(sender)") } } 
Nope, it's not about the project, it still runs slow.
This looks pretty awesome. Cloning now... 
Works as advertised. Very nice work. All it needs now is support for `brew install cask fluor`. 
I have both Xcode and MacOS updated to the fullest. Have never used Filevault and Spotlight cache.
Dont know if you would need books, but some basic functional programming can help you alot. Best example I can give is when you use alamofire you can use the completion block of a request to execute a function in your viewcontroller. So lets says the request finished fetching data you execute a function you passed in the viewcontroller to the networkingclass. At the moment I dont have time to give an example. 
What about using Perfect Assistant to deploy to Google App Engine or AWS? Dunno about Vapor, but I find that with Perfect, static files are not compiled so if you make a change to a static file like JS, HTML, CSS, etc, then you can just SFTP up the changed file... no need to recompile.
Did not work for me when using Remote Desktop.
Explore managedObjectContext more in depth, I think the documentation even describes it as a 'scratch pad' and could work better for your use case. 
What's `drawImages()`? Where is `needsDisplay` set? There's not enough here to go on.
I've been away and just got it tonight. I'll have a look at it tomorrow morning.
drawImages is in the NSImageView class, it's the first bit of code in my post. Where/when should I be calling setNeedsDisplay() ?
Detractors will try to make a tempest in a teapot but Swift is stronger than ever and backed by the biggest corporation in the whole world that is the basis of their entire app ecosystem. Thanks to Chris for such a beautiful language.
Swift is open source anyways so if they attack Swift because of it, they just dont understand open source. Source: I work on Drupal and work for Acquia.
Did you read the email? &gt; Note that this isn’t a change to the structure - just to who sits in which role - so we don’t expect it to impact day-to-day operations in the Swift Core Team in any significant way. Ted and I wanted to let you know what is happening as a part of our commitment to keeping the structure of Swift.org transparent to our community.
Chris has been at Apple for a decade and has only been in a management role for the last few years. I think he's leaving at a perfect time, and probably excited for something totally different. Pretty sure Apple would have paid any salary he asked for, or made any kind of concession he would have wanted, so this is just a dude in need of something else, nothing else to see here. Besides, the project is open source, so he's probably going to get to do a lot more coding on it instead of day to day Apple management duties.
I am surprised he left since it was his project from the start and he seemed very enthusiastic about it. I hope he will be still contributing via open source. Good luck to Chris on his future path, may he bring us more great tech along the way :) 
He isn't leaving the language. He's leaving Apple, and stepping down as project lead, but staying on as part of the core team.
I disagree, because if you're going to use a protocol (by your definition), then the Liskov Substitution Principle suggests you shouldn't care as much about the implementation for that protocol, just that it conforms to it. If it's internal or private then it should be assumed that the protocol isn't to be trusted as much for outside use. Also, if you're really trying to limit which specific implementations you want to access, I think you can solve this by creating your own protocol and using protocol extensions on existing classes.
I have no doubt that Swift will continue to be on steady footing, but this news is worrying for those who use Mac as their development platform. It's coming off of earlier reports of the Mac Automation Product Manager position, responsible for UNIX CLI (shell, python, ruby, perl) and AppleScript among other things, [being eliminated](http://www.macrumors.com/2016/11/16/mac-automation-sal-soghoian-position-eliminated/) and the consolidation of the Mac and iOS software group into a [single group](https://www.bloomberg.com/news/articles/2016-12-20/how-apple-alienated-mac-loyalists) that focuses mainly on iOS. Not to mention the lengthening product cycle for Mac hardware. The last thing I want is for Apple to fail, but the recent news coming out of Apple does not bode well for developers. It sounds like the company culture is turning from a developer-driven one to a profit-driven one. I'm really hoping that's not the case and that I'll be proven wrong.
No. There is such shortage of iOS developers that we have a really good job situation now and should times change it isn't that hard to change track. Many iOS developers have some Android experience and many of the concepts of mobile app development is shared across platforms. There are also many shared properties between platforms of various types. E.g. I was a C++ desktop app developer before I moved onto iOS. That was far easier to do than switch to Java, since native code development shares many traits. Objective-C used many of the same tools as I was used to from C++. Desktop development is also more similar to mobile app development compared to Java server side development. I love Swift and fortunately, Swift really follows many general trends on programming, so e.g. I find many of the same features sets and syntax in Kotlin on the Java platform. So Kotlin + Android would have some similarity with iOS.
The Mac makes $X. iOS makes $Y, where Y is vastly greater than X. You can't abandon the Mac, because it's the only development platform for iOS (yeah, Xcode *could* be ported to Windows, but it would suck beyond all measure), and because the only notebook computer worth owning is one with a glowing apple on the back. AppleScript is effectively dead (I'm a fan of AppleScript, by the way, it's neat as hell), and the UNIX CLI is fully mature. As for the lengthening product cycle on Mac hardware, yeah, I see some valid criticism there, but my bet is that they're pushing to get A-series chips up to snuff for an eventual ARM-based Mac.
Ah yes, the Tall Poppy Syndrome.
I dunno, less than 1000 vs a range between 400-800 seems significant to me. 
Maybe he's going to Google.
I didn't though about this I'll take a look ASAP.
I don't have any Windows box to test while connected but Fluor works when Microsoft Remote Desktop is the active application. Did you try to use the *Running Applications* panel and figure out if there's any new application launched after the remote connection actually happened ? 
Good, maybe he can convince them to use Swift instead of Java.
&gt; Finally one oddity I've personally encountered. My app features a lot of forms, and the way i decided to handle data changes is to directly update my object on any change within the form. In order to allow changes to be made and then scrapped, i had to go into my core data entities code and introduce a duplicate value for each persistent key (as a temporary store) and functions to handle the transition between the temporary values and the ones that will persist. Parent-child contexts are designed specifically for this purpose. 
I posted parts 1 and 2 on my blog. - [Part 1: Introduction and the Lexer](https://harlanhaskins.com/2017/01/08/building-a-compiler-with-swift-in-llvm-part-1-introduction-and-the-lexer.html) - [Part 2: AST and the Parser](https://harlanhaskins.com/2017/01/09/building-a-compiler-with-swift-in-llvm-part-2-ast-and-the-parser.html)
Using the debugger, I can see that the drawImages function is receiving the new image url from the IBAction, however it doesn't seem to update the ImageView. 
There's an interesting thought. With both major mobile platforms pushing Swift, even with different APIs, that would make Swift the single most important language in consumer-facing computing. I'd bet on a bit of domino effect if that happened.
Entirely off-topic, but I can't decide if your statement regarding the glowing logo is a dig at the 2016 MacBook Pros. Well done.
I don't think Swift will be affected much, if at all. It's already open source, with a solid decision making and development process. And Mr.Lattner has already stated that he'll remain a member of the Swift core team. Assuming something more sinister at hand – and I am not claiming there is a good reason to do so – I'd be more worried about the developer tools and all the related paraphernalia, especially considering some of the things /u/MoarBananas mentioned in [their comment](https://www.reddit.com/r/swift/comments/5n6by9/chris_lattner_leaves_apple/dc968cs/). I am not suggesting that would be the case; just that I would assign development tool degradation (_insert snarky comment_) a higher probability than the one to Swift going down in flames.
i simply never thought about it.
that format makes no sense at all, it's all questions, where are the answers? There are replies inside of question topics, and then there are topic replies to question topics? /. is a mess.
The project is developed out in the open. So if the community felt Swift should go in a different direction, Apple would follow along. I don't see that happening because the entire team that leads the project all work for Apple, so they prioritize features based on Apple's own internal schedule.
It's open source but people at Apple have to accept incoming commits from the community. Apple just won't accept any commits that they don't like, including changing its direction. Most of the commits are bug fixers and implementations of missing features, not grabbing it by the balls and leading it down a dark alley way.
This is the best tl;dr I could make, [original](https://www.tesla.com/blog/welcome-chris-lattner) reduced by 58%. (I'm a bot) ***** &gt; We would like to welcome Chris Lattner, who will join Tesla as our Vice President of Autopilot Software. &gt; As Chris joins Tesla, we would like to give a special thanks to Jinnah Hosein, SpaceX&amp;#039;s Vice President of Software, who has been serving a dual role as the interim Vice President of Tesla Autopilot Software and will now be heading back to SpaceX full-time. &gt; We are very excited that Chris is joining Tesla to lead our Autopilot engineering team and accelerate the future of autonomous driving. ***** [**Extended Summary**](http://np.reddit.com/r/autotldr/comments/5n8eaj/welcome_chris_lattner/) | [FAQ](http://np.reddit.com/r/autotldr/comments/31b9fm/faq_autotldr_bot/ "Version 1.65, ~46115 tl;drs so far.") | [Theory](http://np.reddit.com/r/autotldr/comments/31bfht/theory_autotldr_concept/) | [Feedback](http://np.reddit.com/message/compose?to=%23autotldr "PM's and comments are monitored, constructive feedback is welcome.") | *Top* *keywords*: **Chris**^#1 **Autopilot**^#2 **Tesla**^#3 **President**^#4 **Vice**^#5
How do you figure? Python's pretty much always been open source, but I don't think it's controversial to say that Python would have had a drastically different history had Guido stepped down in 1994. Or Matz from Ruby. Or Larry from Perl, decades ago (its version 3.0 was released back in the 1980's!). I don't see how open source is a relevant factor. Today, that's just table stakes. (Back when there were major non-open-source languages, several of them were among the most popular, as well. Even Swift shot up the charts even before it was open-source.) There are still plenty of open-source languages which nobody uses, so it may be necessary, today, but it's certainly not sufficient. We've had examples of software projects losing their leaders before. Mozilla went open-source, but when they sold it to AOL they lost most of their original technical leadership, and the product was driven into the ground. ReiserFS is open-source and you can still run it, but nobody does, because it's not really being maintained. You can't count on some ephemeral open-source contributors running a project. Project management is a real skill -- that's why Apple paid Lattner in the first place! Committees have repeatedly demonstrated that they're bad at it, especially in the area of programming language design. People are always more important than systems. ("Good governance never depends upon laws, but upon the personal qualities of those who govern.") It remains to be seen what Kremenek can do. Maybe he'll be great, and maybe he'll be lousy. We don't know yet, and it's a risky transition. If Swift manages to change technical leaders while it's still being born, though, and remain both good and popular, that will be far more impressive to me than any technical feature of the language. I don't think it's ever been done before. Had you asked me last week what the biggest threat to Swift is, I would have said "Losing Lattner". Did nobody study history? Caesar has left with work incomplete, and that leads directly to the end of the Republic.
The main dev branch is swift "master" on github. All releases (including those that get used by Xcode) are branched from that on github – and are similarly "out-in-the-open". The only time code is private is before it is merged into "master" by whoever is working on it.
Sorry you're getting downvoted. I think your comment is valid. FYI, he's getting paid by Tesla: https://www.tesla.com/blog/welcome-chris-lattner
And is drawImages something you have access to, or is it in some library/framework/whatever for which you only have the binary? If the former, then set a breakpoint in there and dive in with the debugger and figure out why _it_ isn't working; if the latter, create a support request or bug report or what have you with whoever you got drawImages from.
It's a common phrase in Australia where it's sadly very common. For some reason culturally we like to strip down successful people and try to attack them
[Citation Needed]
you can use [UIAlertController](http://nshipster.com/uialertcontroller/) to present information in the form of the screenshot you provided
Even as a big fan of Swift, I hope not! Swift is simply not bug-free enough to be used in such a safety-critical system. For control applications which put lives directly at risk, languages which had [formal verification](https://en.wikipedia.org/wiki/Formal_verification) as part of their design process such as [OCaml](https://en.wikipedia.org/wiki/OCaml) and [Lustre](http://www-verimag.imag.fr/Lustre-V6.html) are often used.
@danielpunkass: I bet Apple regrets neglecting to annotate @clattner_llvm noescape.
Will they fix Xcode now?
Daniel Gross of Apple leaves to become Y Combinator’s newest partner
Probably a good time to get out too: after sucking up a million man-hours on retooling Apple's *entire platform* to please Swift language instead of paying customers, Apple's board and stockholders must *really( be starting to wonder when they'll begin to see a meaningful return on all that investment. [Oh wait.](http://money.cnn.com/2016/10/25/technology/apple-earnings-decline/) Jobs's Apple burned its old Mac platform to bootstrap its new iPhone mega-empire. Now Lattner burns Cook's Apple to fund his own personal ascent to Stroustruphood. "Think Different!" indeed!
Fanboys can't see that money trumps anything, even loyalty to Apple. 
a. The screenshot you have provided is android's way of handling alerts. I strongly suggest you customise a view controller to show your EULA. b. It is as easy as plonking a UITextView into a VC, add the agree button, hook up the UI elements + logic and you are done!
If you use Core Data, take a look at the book by the guys behind objc.io: https://www.objc.io/books/core-data/ Really an excellent book that isn't an introduction to Core Data but how to properly leverage it in Swift.
He has been in management for the last few years. According to him the only time he gets around to actually writing code is in his spare time. I doubt Teale hired him for his coding abilities or for Swift.
His role will likely have to do with performance optimization. Seems to be the biggest overlap of their needs and his skills.
Oh please, Swift the language is C++ with rubberized corners. As a programming language, it's straight out of '68: the Emperor's Old Clothes, now with added spandex. Swift the NPD tool is also an enormous ball-and-chain for Apple the business, sucking down huge amounts of resources that should've been invested in keeping iOS competitive with Android, not on mangling their entire 20-years'-worth Cocoa platform simply to please one single programming language instead of a billion paying customers. Apple can't even ditch it now and do it over again right, because that would create a massive loss of face both internally (where ambitious young execs climb up ladders built of the bones of their predecessors), and in full public view (where their press, markets, and competitors will have an absolute field day dining on the splayed self-disemboweled corpse of their previous credibility). ... Protip: * Building programming languages is hella cheap. * Building entire platforms and markets is obscenely expensive. * Losing those markets again cos you squandered all your time on diddling with your own private language internals instead of shipping new product, a.k.a. what your customers actually want and will pay for? Priceless. WWSJHD? Told young Master Lattner to piss off and go build a language that serves *Apple's* interest and not his own, just as soon as he realized where Swift was going, I would sincerely hope (and expect). What *Apple needed* was the smallest delta between Objective-C 2.0 that would 1. eliminate C's unforgivable unsafeness, and 2. modernize ObjC's syntax and usability. A graft of Cyclone would've addressed the first (with an `unsafe` trapdoor direct to ObjC-2 for use when necessary); a Swift-like syntax and type inferencer the second. (Ironic that even a barely functional moron like me can devise a small simple answer like that. Alas, the Lattners of this world are the opposite of morons, which means they've this terrible tendency to expand and encrust whatever existing problem and potential solution they're initially tasked with until of sufficiently vast impressive scale and complexity to keep their own Big Branes sufficiently entertained. Maybe if all language designers were restricted to doing their V1s on PDP11s instead?) Not only would a piece-wise minimum-disruption approach to achieving a fully modernized application programming language have vastly reduced the scale and frequency of change to both Apple's own Cocoa ecosystem and third-partly developers' established codebases in order to ensure true seamless interaction (and not just grotty bridging, which is what Swift gives us), it would also have established a standard, widespread, and highly automatable pathway for existing [Obj-]C code to be migrated to a new 'Safe-C' format. Whereas if you want to migrate C/Obj-C code to Swift's 'Safe-C++' format, you've got to recreate, rewrite, and retest everything entirely from scratch. (e.g. I recall Joel of Joel on Software making some incisive observations on the Netscape-&gt;Firefox rewrite; alas, most programmers aren't compentent business[wo]men, as they know the value of everything and the cost of nothing, and are damned if they're going to let such a bunch of know-nothing Lusers they're doing it wrong, even as the company sinks to its ears. But hey, it's their job to write code, not add value to the business, right?) Oh, and this "Objective#C 3.0" would've been fit for real-world use long before now, instead of still riddled with bugs because they were too busy redesigning and rewriting everything from scratch all at once and quickly as possible, instead of going the long leisurely incremental iterative route that'd have allowed the overall problem to be chipped away at one chunk at a time, getting each bit right before screwing up the next. But then, who ever got famous by proposing the simplest, quietest, least dramatic solution that Just Works? Oh well. ... Luckily, I wasn't planning to buy a self-driving car any time soon, so perhaps by the time I do get one Mr Lattner will be far older and wiser, or living on Mars where he won't be a bother to anyone else. Meantime, the rest of you might do with buying a copy of Fred Brooks' Mythical Man Month, especially for reading the chapters on Second-System Effect and Write One to Throw Away, which are particularly pertinent here. And then when you're done, you can send them all to Chris so that he can read and learn from them too/lash them into rudimentary shelters against dust storms.
It used to be the only geek forum site out there. I'm half surprised its still alive. I feel old :(
They take the top-rated questions and send them to the interviewee, so they're not flooded with 3000 questions, and so we don't get catastrophes like 90% of Reddit AMAs, where celebrities just ignore top-rated questions they don't feel like answering. But please, let's not get off topic. I want to focus on Rampart. (Have you seriously never visited Slashdot before? They've been running interviews this way for close to 20 years.)
[removed]
... but does money trump Trump?
Like this? &gt; http://imgur.com/a/yatox
Funny - I said this same thing in the ios forum and got downvoted into the cellar. I'm hopeful with him gone Apple will give up on that dog - or at least stop fucking up Objective C headers files with bullshit like nullable and faux generics annotations. They're not part of Objective C - they're not even concepts that make sense in Objective C. They're cruft. Also - he was in charge of xcode I guess? Good riddance.
You seem to know what you are talking about. May I ask you what your favorite programming language is? What language is out there that you think will set the trend for the next wave of programming languages?
[removed]
They get in the way. As in...turning whole pages of code yellow with warnings about missing nullability specifiers. Basically, they're fucking up Objective C for Swift. Objective C is based on Smalltalk. I don't even think he's read a book on Smalltalk. Swift looks to be based on ML. Its a totally different paradigm and mostly its type system gets in my way. Also - optionals are incredibly annoying and distract from the problem domain, dragging your attention into the implementation domain. As a successor to Objective C, I'd rather we get something closer to a real Smalltalk. Cocoa and Swift do not play well together and its a bad force fit.
&gt; Actually I hate all OSes, and most applications and programmers too. They all suck: they promise power and control, and stiff you on the deal. ^Psst. ^You ^know ^you ^can… ^write ^your ^own ^tools ^right? &gt; 20 years on, and now I develop industry-disrupting automation software that's going to make me a multi-millionaire in five years' time… I’m… not gonna touch this. &gt; Did Chris Lattner deliberately set out to create a second-rate Cocoa-Applications-programming language for all future [i/mac/tv/watch/etc]OS development to take place on? Of course not! But he went and bloody did it anyway, by designing and building the language that he wanted, instead of the language his employer actually required. See also. (Ignoring your design opinions) You claim to have a lot of knowledge of internal processes. I’m not sure why you’re under the impression that you can read the minds of not just Apple’s board, but Chris Latter and, seemingly, DVT itself. Please stick to your domain of expertise. &gt; As a result, instead of busily advancing the capability of their Cocoa Applications platform year on year, Apple are busily advancing Chris's Swift language year on year while the Cocoa platform stagnates cos everyone's time is being spent on reworking to please Swift. Stagnation looks like a platform with no active maintenance whose APIs are falling behind actual industry standards. Granted, AppKit was old enough to drink a while ago and iOS is getting on in years, but to say that Cocoa is *stagnating* is a blatant falsehood. There are multiple teams at Apple dedicated to the health, maintenance, and fruitfulness of Cocoa. Swift did shit-all to change that. &gt; And Swift isn't even a first-class Cocoa client; it's a language that's basically a C* language in every significant way except for the fact it can't talk natively to Obj-C APIs. So the two will never integrate seamlessly, no matter how much Cocoa bends over to please it. &gt;&gt; it can't talk natively to Obj-C APIs I get the distinct impression you haven’t actually *used* this language. 
Have you had a look at this? http://stackoverflow.com/questions/26578023/animate-drawing-of-a-circle
Just developing my iOS platformer game. Just added a winter chapter a couple of days ago. If you want, you can check it out: https://itunes.apple.com/us/app/you-have-10-seconds/id1148861461?ls=1&amp;mt=8. p.s. I'm 16, I bet you didn't expect that ;)
Of course swift has bugs. That doesn't mean that it wont mature into something suitable. As for safety critical most of that sort of work is done in Ada or C++ these days. The C++ system being limited and custom configured for such use. 
Apple has deprioritized OSX/Mac as a key tool in the professionals/creatives environment for many years now. It feels like they just didn't know what to do with it once iOS became their focus and their consumer base became mainstream. But with the recent news/events, especially when considering the upcoming apfs release, I'm thinking there are some major restructuring coming both to apple and to the mac os. 
Yeah, that looks fine. As for your UserDefaults error in the picture, I believe it is UserDefaults.standard.set(value, forKey:_) for setting the value. 
I actually really like the idea of loading the articles with .json files and loading challenges as needed. I hadn't thought about that! Each challenge isn't going to be more than a few paragraphs in length so this is definitely something I'll consider. Preloading the data and using existing SQLite Database is also definitely something I'll have to look into as well! Thank you for the feedback and articles, I really appreciate it! One more quick question if you don't mind! My client also liked the idea of adding in-app purchases to unlock more challenges/marriage advice pieces at a later date. Do you think would it be easier to update the json file(s) or easier to update the data loaded into the SQLite database?
You can just have it all in the JSON and just load things as IAP unlocks challenges / other features.
I wonder if that's better or worse than the US where we fetishize anybody who has money.
It doesnt look like your setting `self.polylines` to anything, so it's just passing an empty array to `removeOverlays` (or not calling it). I suggest adding some break points to your code when your calling MKMapView methods and check that you are passing the values you expect.
Instead of JSON you could also store plists to make them (slightly) easier to edit and load.
He's an academic who was put into a management position. I could easily imagine him being burnt out sitting at meetings and having to decide on department maintenance instead of intellectual endeavors. The guy is clearly an absolutely brilliant man who can contribute much to the intellectual world (he already changed the world of compilers with LLVM). He's better off somewhere where 100% of his effort can be focused on research. That's probably what Tesla offered him.
Then don't use swift and don't use nullability headers? This was, as you said, not supposed to improve ObjC. This was to help transition from it to Swift. You don't have to write your objc code like that if you don't want, unless you're writing a library, but then only the API header would need it. 
Clearly you have a distaste for Swift, but your assertions are nonsense. Swift is not a scripting language ( you know it's not ) and you can ABSOLUTELY use Core Data with Swift. There was a time... 3 years ago when it was not feasible but much has changed since then.
Not sure about DevMountain but Mark Price has excellent courses on Udemy 
great library! you have really a lot of stars there ^_^ On Friday I will share link to JTAppleCalendar in my startup Twitter page. It's not so big, like 600 followers, but that might help to spread the word! 
should it be MVP? Why does it take so long to release? 
lol, I'm 25 and just started learning Swift :| I always feel, that younger people are smarter than me 
I see. We took to much time to develop our tool as well. But the reason was that we tried to polish everything and then pivoted functionality.
Simply add a check for the text and set the color appropriately. There are many ways to do this, but this is a simple one that you can place in your viewWillAppear method of your viewController (that is if the labelText is already known at this time, and if it never changes while the view is visible). switch labelText { case "Strange": label.textColor = UIColor.orange case "Unusual": label.textColor = UIColor.purple default: label.textColor = UIColor.black }
There is more than one author. The Swift from Scratch exercises are different.
Thanks so much :) I appreciate it. And a lot of stars would be somewhere in the range of 7,000 :) . If it makes that much then I will think the project was very useful to many people.
And not just some old Mac by the way. My 2010 Mac still works though for the latest Xcode and MacOS.
thanks a lot for your response and for your time.
I posted this response on your question in /r/iOSProgramming, but in case anyone else passes this question: I'm a grad from DevMountain and a current mentor and I couldn't recommend it enough. I actually found a good internship a couple weeks after I graduated and just came back to mentor a few weeks ago. It's an exceptional program and highly regarded for giving students a high-quality education and the skills needed to get a foot in the door in the industry. Plus Utah is one of the best states in the country for developers, and right now is a great time to move here. Just in case you were thinking about doing that/already live here.
CodaFi, I'm familiar enough with your work to know you're a very intelligent person, too intelligent to feed the trolls ;-)
&gt; Learn Functional, Logic, Dataflow, Concatenative, Parallel, Meta-, ...., Concatenative? Really? What use is that to anybody?
[Project Euler](https://projecteuler.net/) is a good source of problems to solve once you're comfortable with the language.
&gt; With both major mobile platforms pushing Swift, even with different APIs, that would make Swift the single most important language in consumer-facing computing. I think you're forgetting about the web and Javascript, PHP, Python... and beyond that, Java. Java is still #1 in use and jobs worldwide, and Android is a significant but nonetheless small part of that (i.e. even without Android, Java would still be huge). Back in the inception of Android it's actually why Google chose Java: they wanted devs to be able to come to Android easily, and Java was/is the most common skillset. My personal opinion is that Google would rather try to make Golang the main high-level language for their platforms (already some interesting projects at Google to port various code like Python to Go) because it's much more integrated in their infrastructure.
You miss my point. On any given iOS or Mac app, swift is doing little else than scripting Cocoa components. That's pretty much it. Without the Objective C runtime under it nothing would work. No nib/storyboard loading etc. Yes, Swift can do more the script Objective C libraries - but just now, that's about all it is doing.
This is part 3 in a 4-part series I'm writing. - [Part 1: Introduction and the Lexer](https://harlanhaskins.com/2017/01/08/building-a-compiler-with-swift-in-llvm-part-1-introduction-and-the-lexer.html) - [Part 2: AST and the Parser](https://harlanhaskins.com/2017/01/09/building-a-compiler-with-swift-in-llvm-part-2-ast-and-the-parser.html)
Introduces you to a new model of thinking and problem solving, for one thing. (Also hella handy if you ever have to deal with PostScript or Forth!) My own kiwi DSL is partially concatenative, for example: in addition to taking a list of traditional parameters and producing output, kiwi rules (conceptually closer to Unix shell processes than functions) can also accept a standard `input` parameter. And since rule commands are first-class objects (like Lisp, it's also homoiconic), that means you can create rule command values with pre-entered configuration parameters at one point in your program, then concatenate any combination of those commands into a data processing pipeline to perform a specific task at another. Kiwi is also semi-declarative, in that each rule handler has a priority value (a little trick I pinched from SysV init config) that tells the runtime if one rule MUST be applied before another, regardless of the order in which the user declared them, or they should just be applied in order of appearance. Some of the more powerful rules even have coroutine/continuation-like behaviors, where a rule will partially apply itself at an early stage of data processing, e.g. to perform some preflight check/setup task, then suspend itself under a new priority so that it resumes at a later stage of processing, e.g. to perform the postflight check/teardown task that completes its responsibilities. ... Veeery different language to what most/all folks here will be familiar with, in other words, and if the only languages I'd ever worked with or read about were C-family ones (C/ObjC/Java/Swift/Python/Ruby/JavaScript/etc), I'd never even have realized such a language was possible, never mind how it could solve a whole bunch of previously intractable problems within the problem domain (high-end, template-driven packaging artwork automation) where I've been the last 8 years learning all this stuff. ... So now I have a domain language that no-one else in a $1Tn industry has got, and which provides a working solution to a huge problem that several large multinational C*-based technology vendors have spent the last two decades attempting—and failing—to solve. And I'm a barely functioning moron, the wetware equivalent of a decades-old Timex Sinclair 1000 with a wobbly RAMpack. So if I can arrive at a global industry-revolutionizing product just by reading a few dusty old books on languages not called "C*", imagine what the rest of you could be doing if you hauled your doughy asses out of your $Language Safe Space every now and again to see if there's anywhere you might be missing out. 
Much appreciated, I used this as a template to refactor the ugly code out of my core data objects. This led to a far simpler implementation (not to mention more efficient).
Swift is a pretty complicated language for a young'un. May I suggest Racket? It has like no syntax, it's 100% algorithm.
If I want to watch someone I don't want to know masturbate to things that aren't sexy, I'll go to a My Little Pony subreddit. We get it, you don't like Swift and think you're smarter than everyone else here because you like dead languages about which even the creators mostly no longer care. You've got the attitude of Rob Pike, but unlike you, he can get away with it most of the time because he actually made things that still matter in the real world. I don't think you'll find many people here who care about the language you think Swift should have been, but if you want to put your money where your mouth is and show us something better we can actually *use*, feel free.
Thanks for the feedback. One day, before you're a professional, you'll learn how to give it without being a prick.
Being a novice is sometimes a bit embarrassing haha. I don't really know what I was thinking when I wrote the code for dequeuing another cell but I knew I was getting it to print the title so I didn't think anything of it. But thank you so much for taking the time to look at this and provide some input! Your advice has helped a LOT with understanding what is wrong! I have fixed the problem regarding the cell and I removed the instantiation of the CardViewController. Now I just need to figure out how to call loadFilter() from the CardViewController, I've attempted using a delegate but that isn't working either. 
I am very excited to read this over the weekend. Sounds awesome!
Thanks a lot for sharing.
If they are such garbage why do you keep buying and doing them?
Here's the thing. You said a "before you're a professional." Am I in the same family? Yes. No one's arguing that. As someone who is a scientist who studies professionals, I am telling you, specifically, in science, no one calls me a prick. If you want to be "specific" like you said, then you shouldn't either. They're not the same thing. If you're saying "professional family" you're referring to the taxonomic grouping of programmers, which includes things from python developers to C++ developers to Swift developers. So your reasoning for calling a programmer a prick is because random people "call the unprofessional ones pricks?" Let's get HTML developers and CSS in there, then, too. Also, calling someone a prick? It's not one or the other, that's not how taxonomy works. They're both. A prick is a prick and a member of the dick family. But that's not what you said. You said I'm a prick, which is not true unless you're okay with calling all members of the programmer family pricks, which means you'd call PHP, C#, and other programmers pricks, too. Which you said you don't. It's okay to just admit you're wrong, you know?
&gt; Being a novice is sometimes a bit embarrassing haha. FTFY: Being a good programmer is frequently a bit embarrassing haha. I've been programming since 1976 and I've been embarrassed practically daily by my own mistakes. However, I've noticed that programmers tend to fall into two camps: the frequently embarrassed or the jumped-up jerks, these are the people who are not embarrassed because they've done no wrong - it is always the compiler or the Swift language or Xcode or iOS or Cocoa or some blog or some reddit thread which has made the mistake. I'm happy to be in the nearly constantly embarrassed camp rather than the alternative and I'm always eager to work with other developers whose expression is often one of bemusement over how they could have created such a well-intentioned cock-up. wrt the delegate: that sounds like the right way to solve that. If it still isn't working, perhaps you could approach it in two stages: 1) forget the delegate and niceties like weak references, and just have the CardFilterViewController call the CardViewController directly. Then, when that is working, 2) see what calls the filter vc is making into the card vc, define the delegate based on that, then see what references the filter vc has to the card vc and substitute the delegate for that and fix up the strong references to be weak, and the method calls to take that into account. 
I don't mind! I was actually interest in getting feedback to see if this is reasonable to charge. I decided to charge them $1500. I know that doesn't sound like all that much but there are a couple of reasons I have for charging so little. First off and most importantly I just want the experience, I think it's going to be a huge learning opportunity for me and will look great on the resume. Secondly, the client is a non-profit so they don't have too much of a budget to spend on this thing. And third, they also are interested in making several smaller apps or adding IAP to this first one, which could potentially lead to more contract work with me down the line.
[removed]
I know. I was suggesting those as an alternative. Code = Algorithms (kinda). The book stimulates algorithmic thinking, the thing you are supposed to learn before hard stuff. I started coding when I was 10. When I was 12 I knew how to use loops and arrays - that was all the algorithms I needed to make small games. I did end up learning a ton of algorithms and compete in programming contests. But that started was when I was 15-16 not 12. The only reason I learned so many boring nerdy stuff was because I had fun for a couple of years coding. Optimize for fun! 
give him an iPad with the playgrounds app that will teach the basics interactively, everything beyond that should be easy for him
+1. Everybody should learn that... and then run away from managing provisioning profiles manually and use https://fastlane.tools
What do you want to do with the contents? A parser just goes line by line looking for particular patterns and informs you when it finds that pattern, pretty much. 
&gt; Are you saying that the point of optionals is that we then don't have to write tests? No, they're saying the point of optionals is you don't need to test for null non-optionals. Because you have excluded them entirely from the range of possible input (or output) values statically.
It adds up. With all the little syntactic sugar to make these features more usable, Swift got immense.
I want to sort the main text from, say, a blog post or news article stripping it down to the main content
I've written Core Data apps in Swift, so unless I'm not getting your meaning, you are wrong.
You're just scripting Objective C objects. You can't write CoreData itself in Swift. It lacks the dynamic features. You remove Objective C runtime from Swift and you've got C++ with different syntax.
If he didn't recommend adding a ridiculous number of abstraction layers, abstract interfaces, etc. then the project would probably be a tenth of the size.
Have a look at: https://developer.apple.com/videos/play/wwdc2014/206/ Their extended demo of getting a page from wikipedia and then rearranging some of the elements should give you some ideas of how to approach this. You could then consider using webkit for your project as well, or, if you want to use some other html parser, nevertheless you should be able to reuse some of the ideas presented here.
&gt; Core data, no need for another dependency that can't be replaced Core Data and Realm are both dependencies.
lynda.com has a good course on it that you can watch with a free trial.
No, it's just that when you were younger no one was putting an emphasis on programming as much as they do these days, because remember when you just became a teenager Facebook was just taking off and no one realized just how many people could go from rags to riches by coming up with the right app ideas.
[removed]
What does the legacy ecosystem have to do with the syntactic sugar surrounding optionals? You mean in the sense that Objective-C kind of had automatic "optional chaining" (though they didn't call it that), and so they needed to add features like that to Swift or everyone would complain?
You don't necessarily have to look at RxSwift resources only. Rx is available in other languages as well. And there isn't that much of a difference. I'd recommend searching for RxJS talks on YouTube. Netflix has some good talks.
There's nothing wrong with Swift integrating with the ObjC runtime. It gives you the same powerful features with a syntax that doesn't make me want to take a ball peen hammer to my eye ballls
You could subclass UILabel and then in the text didSet you could check for the presence of the word through a series of if statements and then set the text color.
This may not work, because OP wants to set the color if the text contains a word, not if the text is simply equal to that word.
Rather I think /u/masklinn is saying that Objective C did not distinguish between optional and non-optional types. So, if you have the entire Cocoa API and _every_ type it mentions is potentially `nil`, you're going to have a lot of optionals to deal with in your swift code and you'll want that to be as concise as possible.
I'm not knocking testing, but let's be real that most programmers are not going to be testing as much as Uncle Bob might. His utopia is never going to happen, so we have to strike a balance between safety for the average programmer and lack of for the experts. I agree that perhaps Swift errs too much on the side of safety right now, but at the same time his premise that programmers should be trusted all the time and that if they just wrote more tests everything would be ok is bullshit. Trusting all programmers completely is why we have so many security advisories and deal with so much already. Older languages aren't as safe as they should be. Swift is trying to strike a balance between safe defaults that minimize risk and still have features that let you get more dangerous if you choose to. I don't feel it's where it should be yet, but Objective-C programmers are still able to access the dynamic features for now and link to Swift, and there's still a good chance we're going to see some more dynamic features in future versions. 
I am a complete newbie at it, I will read more about JSON data! :D
It's an article on NSUserDefaults without a bunch of extensions, protocols, and wrappers over-complicating things. Basically, it's a unicorn within this sub, and you want variables named precisely? But yes, it bugs me that "is_premium" is the only variable serialized to a key with a different name.
&gt; Saving to NSUserDefaults is a simple way to persist data within your apps NSUserDefaults isn't for persisting arbitrary data. It's for storing simple preferences.
Added to my ToDo bookmarks :D
If you’re working with others, then things like CocoaPods allows you to bring in external libraries at a known, working rev level without having to pollute your own source control system with third party source code. If you’re working alone, it really is preference. Are you using the same library in 20 projects? What if a new version of the library comes out with a critical bug fix? If you’re managing the library yourself, you have 20 copies of the same code in 20 different projects, and now you have to update all 20 of them yourself. 
I swapped out the variable names from the production code into the blog and didn't catch that mismatch - thank you for pointing it out! corrected on live.
You're absolutely right. Changed to camel-case on live
Thank you! This is exactly what I was looking for makes total sense.
Does this work with Swift's garbage collection/ARC? I've never understood if if that's capable of removing cyclical references.
My most recent example: I'm dabbling with ddd / cqrs / event sourcing so I'm making a package called "Domain". And of course my domain has several commands and events etc. So packages that communicate with my domain package can send commands through the `CommandBus`. The `CommandBus` has a function that has this signature: public func send(command: Command) throws { ... } And `Command` is of course a protocol. However, I only want commands to be passed through that my domain has defined for itself. I don't want anyone to just make up a new command that conforms to the command protocol. This would be a case where being able to make my `Command` protocol `public`, but not `open` would be very nice. I mean, what are the alternatives? I tried to make my `Command` an enum instead of a protocol, where every individual command is expressed through every case of the enum. But that has the problem that you can't define a function that only accepts a one specific command. There are ways to work around this, but they all create loads of verbosity. While being able to make a protocol which is `public`, but not `open`, would be the easiest and prettiest fix.
Yes - From the point of view of ARC, the graph is just a dictionary of arrays of objects that reference objects-that-hold-strings We know the dictionary maps {Vertex : [Edge]}, and Edge is {to:Vertex, from:vertex} but if the cycles in the graph are in our heads, not in the dictionary. If you have a disconnected subGraph, its still in the Graph dictionary. It isn't reclaimed until you delete all the relevant key=Vertex entries from the Graph dictionary. But, from a storage management point of view, there's no difference between: graph = { Va: [] }; // i.e a lone vertex, a. and graph = { Va: [ {to: Va, from:Va}] }; // i.e a vertex with an edge to itself in both cases you reclaim the storage by: graph = nil
Just after this thread I started playing with a chat client/server and it was just fantastic to work with BlueSocket. The best thing is I got it all compacted in one simple file for portability in other projects. Cool stuff. IBM guys are all genius.
Hmmm, bit of an evidence-free assertion there, skippy. Would you like to back it up with some concrete instances of dishonesty/bias in the above post which you then convincingly refute it using actual facts and logics and stuff, or would you prefer just to go for the full ad-hom? I mean, your current response is so void of… well, [i]anything[/i] approaching substance, I'm not even clear wh supposed to be playing the Nerd and who's playng the Better, never mind which one is permitted by playground rules to give wedgies and which one is not. **D–** Young Kyle is a delightful child, but he really needs to pay attention in class and try harder before his his grades will improve. Next!
 request.setValue("your_key", forHTTPHeaderField: "Ocp-Apim-Subscription-Key") see URLRequest and URLSession http://stackoverflow.com/questions/27041654/how-can-i-define-content-type-in-swift-using-nsurlsession
I would, if I recognized your bull as being worthy of consideration. You're a troll, you contribute nothing, and you have no value to this community. Go away.
It doesn't fully integrate with it though. It just lets you script a few things from it and it does its best to minimize it and hide it. So it only provides a fraction of the power. As to syntax - Swift optionals are all punctuation all over the place. Ugh. What a nightmare. Syntactic beauty is in the eye of the beholder - but Swift is an enormous language with minimal opportunities for extension vs Objective C which is a tiny language with extensive opportunities for extension. [The truly amazing thing about KVC, CoreData, bindings, HOM, NSUndoManager and so on is that none of them were known when Objective-C was designed, and none of them needed specific language/compiler support to implement.](http://blog.metaobject.com/2016/05/what-missing-in-discussion-about.html) Or to quote Alan Kay: &gt;The big idea is "messaging" ... If you focus on just messaging - and realize that a good metasystem can late bind the various 2nd level architectures used in objects - then much of the language-, UI-, and OS based discussions on this thread are really quite moot. My primary complaint with Swift is that it is an old fashioned language that is simply handed down and lacks the facilities for user level extension of core constructs. No useful metasystem is exposed.
I updated my previously built viewpager ( paging menu/tabs/views) library and provided swift 3 support. Here is the link if anyone wants to check it out https://github.com/nrlnishan/ViewPager-Swift . I would love to hear the feedbacks.
[removed]
[removed]
&gt; I don't need anything relational or sql-query-like... thoughts? How about NSCoding and saving to plain old plists for that case?
There is nothing I can productively ADD to Swift. The only thing I could usefully do to it is to take lots of stuff OUT. (Again, see Rob Rix's list. Eliminating the class-vs-struct distinction would be first on my hitlist.) That would actually make it a far better language, but it's impossible to do because once significant features are in they're impossible to remove without massively breaking every users' code. If Swift ever becomes self-hosting and I'm bored for something to do, who knows; I might just have a crack at the problem (but I do draw the line at spelunking C++; I've already took a look in there to see what'd be needed to make the [REPL not suck](https://bugs.swift.org/browse/SR-3195), and the answer was: more time and patience than I am willing to give. Want *me* to contribute at that level? [Should've made it a Lisp.](https://en.wikipedia.org/wiki/Apple_Dylan) Besides, I currently have two language projects on the go as it is: One has already proven itself technically fit for purpose and I now need to build into an actual Product *and* build a working company around it in order to sell it. That in itself is a 5-year job, so ask me again in 2022, by which time I'll be either a millionaire or dead. The other is an unorthodox left-field experiment in creating a next-gen scripting language, coming at the problem from the UX-down, not compiler-up, to answer this one weird proposition: *How can we make a "programming" language for our future Siri/Alexa/Cortana-controlled world, AND make it accessible not just to a few million Real Programmers, but to [TWO BILLION](https://www.statista.com/statistics/330695/number-of-smartphone-users-worldwide/) personal computer users?* Which, if you ask me, are much more thrilling and potentially world-changing adventures than bolting together *yet another* incrementally better C+++. But hey, what do I know? After all, I'm just another User...:)
Correct!
That is a huge oversimplification. But I don't see the point in spending time explaining it to. We don't even speak the same language.
My apologies. I did interpret it differently. I interpreted the label as having multiple words in it and being colored if a word was present anywhere in the contents of the label text. 
It's worth exploring Swift Package Manager or Carthage as alternatives to CocoaPods too. Then you can decide which you prefer for your project. 
Care to list some ways android is better ?
&gt; I don't want anyone to just make up a new command that conforms to the command protocol. Why not?
Just wanted to give you an update. Using a delegate would not work because I had no way of setting the delegate of the filter vc to be the card vc and so calling loadFilter() wasn't doing anything since it was being enacted on a non-existent view. So I did more research and decided to try using the NSNotificationCenter, and it worked!! I wanted to give you a huge thank you. After spending too many hours on this problem you gave me some direction. Why can I not give more than one upvote?
Thanks a lot, 
I feel sure that you will be able to help plenty of other people someday so it is my pleasure to help you today. However, I disagree that there is no way of setting the delegate. The filter and card view controllers are both contained within a view controller; there are embed segues defined in that view controller. Therefore, if you were to create a subclass of UIViewController and use that subclass as the containing vc, you would get a prepareForSegue for each of them. And that containing vc could tell one about the other, or it could be the delegate or any of a number of different ways to do it. I realise the notification centre does work, but that is not the usual way to accomplish something like this. This is a very specific 'event' going from 1 sender to 1 recipient whereas notifications are for when a sender wants to broadcast widely for anyone who cares to hear that something has happened.
Wow, thanks. This is some very interesting information. I am still in the "mainstream" language stage of my own education but would definitely like to branch out eventually and learn some of the languages out there on the edge. I'm going to read up on the links you provided and see if I can find some inspiration for what to look into next.
Hi there, I cannot remember the exact syntax but you can use the JSONSerializer to acces values from a JSON output. In the past I've assigned nested content to a new JSON array then performed serialisation on that. Hope that makes some sort of sense, if not let me know and I'll dig out some of the code I've used in the past. 
A post about architecture without a single mention of tests... hmm. 
Maybe using AWS SES wouldhelp. Otherwise, you need to send push by having a push server but I don't know the underlying logic. I would recommend reading about it first.
I really appreciate that you have posted the data and the code which you are using; so many requests for help lack even this. However, you haven't provided enough information. You should say what it does or doesn't do, such as 'it crashes with this error message...' or "it doesn't compile and here's the error:..." or "it prints out this and this, but i expected it to print that and that". We don't know if the request succeeded or failed, we don't know what data it _actually_ received, in short, there's way too much we don't know. The only way for anyone to find out everything required to even find out what went wrong would be to use Xcode to create a test app and do all the setup necessary to talk to a server, and then include your code in it. Then create a server which will respond to the request and respond with the data, and then we could see what went wrong. And that is too much work! 
Those services are only necessary if you do not want to set up all of the server-side infrastructure yourself. Some people do, some people don't. There's no way anyone can say "yes you need it" or "no you don't" because it isn't a pure technical question. It depends on how much you want to do yourself vs farming it out, and it depends on your budget and it depends on your ability (many more people would be able to sign a contract with a company than set up the server infrastructure). I would recommend you to look at a few of these services and try to find one which you can use to do some initial testing for free or nearly free with no obligation and then try to get your stuff working. In parallel, you could read and understand all of Apple's docs on what is required to set up your own service so you have an appreciation of the alternative. At some point in your testing, you should be in a position to decide if you want to serve it yourself or use one of these companies, and also if you want to use a company, if the company you used was any good. It should usually be pretty easy to switch from one company to another. You should also find out what would be required if you go with one company but after some time decide to switch to another. 
**Here's a sneak peek of /r/iOSProgramming using the [top posts](https://np.reddit.com/r/iosprogramming/top/?sort=top&amp;t=all) of all time!** \#1: [Finally got round to getting business cards printed](http://i.imgur.com/DdvI6Yu.jpg) | [comments](https://np.reddit.com/r/iOSProgramming/comments/5g9che/finally_got_round_to_getting_business_cards/) \#2: [The Cheapest Way To Build An App](http://imgur.com/a/ZjEN7) | [comments](https://np.reddit.com/r/iOSProgramming/comments/56vtp2/the_cheapest_way_to_build_an_app/) \#3: [taylor.swift](http://imgur.com/e8ETYlQ) | [comments](https://np.reddit.com/r/iOSProgramming/comments/276u3p/taylorswift/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/)
I don't think this approach works correctly if a Bluetooth keyboard is connected.
Emacs works really well and there are official enacs files in the swift repo
Sorry for that. My code sucesfully handles the JSON request. I am able to loop through to Values if let value = json["value"]. - &gt; This works and i am able to print the "value" and I am trying to access the Name, URL etc inside the Values loop. But when i try to access Name, URL i dont get any response (I am not able to get inside the loop of values and access Name, URL etc) if let name = value["name"] as? String{ self.feedsName.append(name) print("Teja Values \(name)") } if let url = value["url"] as? String{ self.feedsUrl.append(url) print("Teja Values \(url)") }
the idea is interesting though
Pretty weird to mention tests in an article about decomposition, nope? Or how do you imagine it? I propose a decomposition and then jsut say: "Oh yeah, BTW, it's should be testable." I mean, isn't that obvious?
Off-topic but I found a typo in your resume: "A URL shortener for members of Computer a Science House." It should be Computer Science House without the 'a' right?
"I get the distinct impression you haven’t actually used this language." I have. It's a duplicative, disjoint mess. Swift is bridged to the ObjC system, like Python over PyObjC or Ruby over RubyCocoa. The fact that the bridge is embedded instead of imported makes no difference: AppleScript's AppleScriptObjC bridge is likewise embedded and bridging is still a pain in the ass. Imported or embedded; Cocoa is treated as a second-class system either way. All of these languages have two string classes, two array classes, two dictionary classes (ok, AS bridges `NSDictionary` to `record`, but AS is a moron). They lash together two runtimes (native and ObjC) with similar but not identical behaviors. They lash together two class systems, two type systems; two everything. There is a significant impedance mismatch between syntaxes and semantics, between behaviors and implementations. Even MacRuby, which was an actual reimplementation of CRuby atop the ObjC runtime and Foundation classes, still couldn't eliminate the gluiness, because while it only had one String class, one Array, class one Dictionary class, it still had to define two full sets of methods upon all of them: one for Ruby API compatibility, one for Cocoa compatibility. And you will FOREVER be reminded of these awkward facts of life whenever you work with these bridged languages, because 80% of the time the bridging works well enough that you don't notice it, and then you do something that tickles the bridge, and all those inconsistencies and "you can do *this* here but not *that* there", and "Ooh, it looks like you're trying to use an NSString-only method on a String but you haven't imported Cocoa yet; would you like me to help you with that?", and all this other shit that all you folks with your Enormous Powerful Brains and love for showing own how much of your own and everyone else's generated complexity it is able to absorb and juggle as if it was a fun toy, not a fundamental professional responsibility to your user not to fuck up their lives just because you don't mind losing the odd ball because you've plenty others still to play with. I abhor that, and if you want to realize the rules of the game **I** am playing, read on. Or else skip to my next post for a concrete illustration of how Swift's "Do Everything And Bridge The Rest" eventually leaves not just its users but also itself and its developers far worse off than if they'd only thought a little more and done a lot less. ---------- So, where I'm coming from: The "troll" label is funny, cos nothing backs up my point that 99% of programmers don't even possess adequate breadth of knowledge, never mind critical analysis and [self-]correction skills to know what they're fucking talking about, never mind produce the correct solution, or even a mostly-wrong solution that they then cooperatively work to fix. Me, I'm wrong all the time, but I *know* I'm wrong, so work my ass off to become less wrong over time. One of these is Science; the other Ideology/Religion. Guess which is which. Even worse, the myriad fuckups of my life mean I'm now reduced to running a pirate "Professional Programmer 0.1.1" emulation on the wetware equivalent of a Timex Sinclair 1000 with the wobbly battery pack. (I still have the original the cupboard, BTW, from when I was 11 years old, and if anything it works better than I do!) So I don't have your luxury of writing a million lines of inefficiencies and brute-force-bloat to solve my problems as you do. Just as K&amp;R didn't have the luxury of writing a 20 million-line kernel just to bootstrap their Unix OS, cos their PDP11s weren't all that much more powerful than my old 8-bit micro was. The crippling limitations of their hardware **made** them work smart, not hard. Limitations of my broken brain force me to do likewise. Sure, I'll never be a great *technical* master coder like you all good folks; no question there. But when I need to spelunk 100KLOC of C++, I won't even try to do it myself; I'll hire one of you lot and pay whatever it takes for you to make the changes for me. OTOH, I'll never write a 100KLOC program myself either, cos I've already had to learn how to get more done in 10KLOC than conventional programmers have been able to write in 100KLOC—never mind get theirs to produce the results the user actually asked for. So no, I don't know more than you—if anything I know *less*—but what little I do know includes things few of you are even aware exists, never mind bothered to teach yourself. And that gives me an edge, cos while you are trying to brute-force your way through a problem, [I stop and think for absolutely ages](http://www.minibeastwildlife.com.au/resources/portia/) until I've come up with a strategy that lets me run right around it and still get to the solution first. I'm not kidding when I say I'm in a $1Tn industry and have now built in 10KLOC a unique, *working* technology that solves a $100M problem that *they* haven't been able to crack in 20 years. I just need to learn Chris Lattner's *business skills* toot suite, and I'll never be poor again. And I'm not even in it for the money. That is survival through base cunning—paying attention to all the little holes that everyone else ignores or don't realize are there, looking for weaknesses and openings I can sneakily stick a crowbar in and lever to *my* advantage. And I've been learning and evolving *that* skill for the last 16 years while the programmers around then and around now have hardly evolved at all. It's what Steve Jobs 2.0 did when he destroyed Microsoft's PC empire a decade ago, not by building a better PC—a game he *knew* he had already lost 20 years earlier and could *never* win back—but by fundamentally redefining what "Personal Computing" even means; by rewriting all the rules of the game so that now they were playing by **his** rules, not Microsoft's; rules he crafted specifically to give him the advantage and leave Microsoft self-destructing in the dust before they even understood what had just hit it. It's how Captain Ridley's Shooting Party cracked the German Enigma codes until Churchill knew more about the Nazi's military plans than Hitler did. So there's absolutely no point trying to pick a dick-swinging contest with me, because I *already* know my teeny tiny little pecker won't impress anyone. This is why I carry a Negan-sized cricket bat everywhere I go, so that while you're still getting your impressive equipment out I'm already cracking your skull, stripping out any bits I could make use of myself, and leaving the rest for the wolves.
You need to regenerate your .xcodeproj file, it seems to get out of sync when you add a new package: swift package generate-xcodeproj
It's perfectly possible to do what you want, but the answer isn't Siri. iOS 10 comes with speech recognition technology built right in, which means you can have your players dictate freely to your app. However, you're responsible for a) stopping and starting the voice recording, and b) parsing the text. To make this work, you would need to make your app listen until some meaningful noise is detected, then trim the silence beforehand and send the remainder to the speech recognition service. You would then get back what Apple understood the utterance to mean, and you'd simply parse it. Now, the "simply" part there might worry you, because parsing text sounds hard. However, I don't think it would would be too hard to parse a very small subset of darts-specific text: "player one hit a double 6", for example, or even "Karen hit a bullseye." A more tricky part here is figuring out what audio constitutes speech and what does not. The iOS speech recognition service has limits in terms of recording length and request frequency, and of course I imagine darts boards are likely to be in noisy environments where silence doesn't exist. If you're keen to pursue this, the first project in my book [Practical iOS 10](https://www.hackingwithswift.com/store/practical-ios10) covers speech transcription. Alternatively, perhaps consider making a touch-based UI.
Yes it should! Thank you!
Awesome, that's pretty much exactly what I needed to learn! I'll be digging into that book this week. &amp;nbsp; I think getting it to work in a noisy bar environment will be pretty tricky, but thankfully for my own use it'll just be in my living room. This is my first time working with iOS 10 or Swift as well; does this seem like a reasonable project to take on?
This is a good tip for programming in just about any language, not just Swift. 👍 The examples are a bit contrived though. Here's a more real-world example: suppose you need to work with a web service. You have a development environment and a production environment. The only difference between them is the domain name. struct Keys { static let productionDomain = "example.org" static let developmentDomain = "dev.example.org" static let domain = Keys.developmentDomain } func webserviceUrl(withPath path: String) -&gt; URL { return URL(string: "https://" + Keys.domain + path)! } When you're ready to flip to production, you just need to switch the `Keys.domain` constant. 
What is the type of value? Seems from looking at the JSON that it is an array. If it is an array, are you accessing it as an array? I would recommend some or all of the following: 1. consider using SwiftyJSON as other responders have suggested 2. use the debugger to step through your code and examine values and types as you go, trying to debug with print statements will take forever 3. pretty print some or all of your JSON so you are sure you are accessing the data correctly. For example, I copied the JSON from your question, added a couple of closing brackets so it was legal JSON, then pretty-printed it. Here's the first few lines: { "_type": "News", "readLink": "https://api.cognitive.microsoft.com/api/v5/news/search?q=microsoft", "totalEstimatedMatches": 1830000, "value": [ { "about": [ { "name": "Microsoft", "readLink": "https://api.cognitive.microsoft.com/api/v5/entities/a093e9b9-90f5-a3d5-c4b8-5855e1b01f85" }, { "name": "Artificial intelligence", "readLink": "https://api.cognitive.microsoft.com/api/v5/entities/9d99fb44-edac-0e03-1579-19d8d8591a49" }, { "name": "The Wall Street Journal", "readLink": "https://api.cognitive.microsoft.com/api/v5/entities/70834f76-d913-bf85-87a6-b9386945a646" } ], "category": "ScienceAndTechnology", "clusteredArticles": [ { "about": [ ...many more lines chopped... It looks to me like value is an array containing a dictionary at index 0. 
Yep, the tip is good for any language for sure. Started doing that myself since plain old c in industrial robotics. I'm creating a series of articles, where I would review the code (kickstarter ios, as one of the examples) according to these common mistakes series of articles (8 of them published as of now here: http://blog.idapgroup.com, I'm just reposting them to medium day to day). And the examples in them would be production related. That specific article is for complete beginners as well, as those with more experience, so I just took the simplest example possible. Not everyone worked with webservices and could grasp, what it is all about. But working with strings is one of the first things in any classes
If you want compile-time errors for this, a protocol isn't really what you want. Instead, you want something more like... public class Command { internal init() {} } - Note: It's public not private. - Note: It's initializer is internal... because it doesn't make sense for it to be able to be initialized. Now, your `RegisterUser` command looks like this: class RegisterUser: Command { let id: String let name: String } From here, there are a couple of ways to go. Your `RegisterUser` class _could_ be made `public` (and not `open`) and given a public initializer. But honestly, for what you're trying to achieve, I don't even think that makes sense. If you want to be so strict on what the user can pass in to you, I wouldn't even let them hint that your `Command` class is subclassed. Instead, keep your `RegisterUser` class `internal`, and right below the `RegisterUser` class declaration, I'd have something like this: public extension Command { public static func registerUser(id: String, name: String) -&gt; Command { return RegisterUser(id: id, name: name) } } Consumers of your library only know the `Command` type. You subclass it internally for OOP reasons, and to keep the internals of your code base squeaky clean, but hiding the gory details away from library consumers will in the end make your library a whole lot easier to use. So now if I want to use your code, instead of... let command = RegisterUser(id: UUID(), name: "John") I am instead doing... let command = Command.registerUser(id: UUID(), name: "John") The best part about this is actually in the way that a module's public interface/header is generated. All of these static methods you created on the `Command` class will all show up together. This will prevent the user from having to look through *every* public class in your code base and sort out which classes are and aren't command so they can know what command are and aren't available.
Sirikit won't have the domain support. You can use the voice transcription SDKs but they might have the same difficulties as Siri in understanding freeform requests. One option is to use a third party one. Have heard good things about IBM's Watson service: http://www.ibm.com/watson/developercloud/speech-to-text.html There's also: https://cloud.google.com/speech/ and https://github.com/Microsoft/Cognitive-Speech-STT-iOS There are demos out there of DIY Alexa/Echo clones built with Raspberry Pis that use the Watson service. You could even try out your idea in a quick-n-dirty Python script to see how well it works.
[removed]
 if let about = value["about"] as [String : AnyObject] { if let name = about["name"] as? String { someLabel.text = name } } 
I love Babylon 5, but I'm not sure I see the relevance. 
The image accompanying the post is of a Vorlon. As you know, they're all Kosh.
Oh, right, my Github user icon. Derp.
All of these replies are showing you how to do what you're already doing. Look up ObjectMapper. You're going to want to use a library like this to turn the JSON into a model object. Then you won't have to use `if let foo = ...` everywhere.
Typed this on mobile so it might not be 100%, but you're looking for this: addr4 = UnsafeRawPointer(address4).assumingMemoryBound(to: sockaddr_in.self).pointee 
If it's your first project, it might be tricky. Perhaps if you could split the project in two?
[removed]
76% of iOS users are on iOS 10 already. And that number is continuously increasing. 
I'll give it a shot, thank you!
Wrote my first content blocker to remove comments sections from webpages [App Store link](https://itunes.apple.com/us/app/id1193023410)
i think Playgrounds is great, and you should try it out. but for me, there were two dealbreakers that kept me from attempting to use it more seriously: - **You can't split code across files.** (There is a way to do this with the help of Xcode, but there doesn't seem to be a way of splitting code made on the iPad itself.) - **It doesn't come with very helpful debugging tools.** Xcode's Playgrounds were able to get rid of the debugger by providing views of live data right next to the code; but Swift Playgrounds doesn't provide those views _or_ a debugger. (Yay, print statements...) EDIT: To be clear, Swift Playgrounds does offer the ability to view the results of your code, by writing a view for it yourself [or using the built-in project template for easy data print-out]; but it doesn't give you the Xcode Playgrounds-style line-by-line view that can theoretically replace a debugger.
Yeah its an array, I did a blunder not reading the response keenly. I have got it up and runnin just fine. Thanks a lot for the input.
This is the mindset that got Microsoft into the pit to support Windows XP for 15+ fuking years! How about STFU!
&gt; For this purpose I think it's fine... thoughts? It's teaching bad habits to beginners. Not good, imo. The article already teaches NSCoding...why not just extend it a bit to NSKeyedArchiver rather than doing half a job and dumping garbage into NSUserDefaults?
I'll be more disappointed if it's not cancelled than if it is. 
Part of it which Turnstile does read from /dev/random.
Why not just use the build in dictate button on the keyboard?
Is the dictation button there for iOS 9?
You should support the current major iOS, and the one before that. That's it. When iOS 11 is out, iOS 9 support should be dropped. You're just a bit dramatic and unable to see that /u/ssrobbi wasn't inferring infinite backwards compatibility. You've massively blown his comment past its intent. c'mon dude
Heh. Just answered this yesterday for another question.... "Have heard good things about IBM's Watson service: http://www.ibm.com/watson/developercloud/speech-to-text.html There's also: - https://cloud.google.com/speech/ and - https://github.com/Microsoft/Cognitive-Speech-STT-iOS There are demos out there of DIY Alexa/Echo clones built with Raspberry Pis that use the Watson service. You could even try out your idea in a quick-n-dirty Python script to see how well it works."
Just a toy for kids, that's all
This guy codes
You're late.
Hmm yes that would definitely work and I really like the last part using the static methods. However, this does mean that I have to make commands classes (i.e. reference types). While I believe they should be value types. So therefor I think this approach is semantically not much better than my proposal of having a protocol that you can use, but not implement. And this is just one of the many example of this. Another example is when I make a specific class that serves a specific purpose for my library which happens to be generic. The unfortunate side-effect of it being generic is that I can't put it in an array, or stuff like that. In order to make stuff like that possible I have to make a so-called "TypeErasedProtocol" and have my very specific class implement that protocol. Now if I could trust that nobody else can implement this protocol then I can write code like this without any worries: let instance: MySpecificClass = typeErasedInstance as! MySpecificClass Which is of course possible if I make the protocol private. But again, maybe sometimes I need the user of my library call a function with an array of these type-erased-versions of my class. I don't understand why you guys don't see the (obvious imo) benefits of having a protocol that's public but not open. It also makes more swift a bit more consistent again, since it works the same for classes. Of course most of these problems can be worked around / solved in a different way, but none of those ways are as elegant as just having a protocol that no outsider can implement. Another benefit of having a protocol that's not open to be implemented by outsiders, is that the compiler would be able to know when you've made an exhaustive switch statement of downcasts. That'd be cool, no?
TL;DR: leaves Apple, not Swift. Joins Tesla, remains in Swift core team.
It's pretty much standard to use Alamofire: [https://github.com/Alamofire/Alamofire](https://github.com/Alamofire/Alamofire) It handles the network request, encoding of any data you send plus decoding (to dictionary or array) of the response.
Thanks, I'll check it out. [No Linux support yet](https://github.com/envoy/Embassy/pull/26) but the [Ambassador](https://github.com/envoy/Ambassador) wrapper looks like a good start. The input parsing leaves a lot to be desired though.
[MDArray](https://github.com/colinc86/MDArray) 
I think it does. At least on the English keyboard.
This is what I said, too. Yet I doubt he'll have much time left for Swift while developing systems for autonomous vehicles.
Compared to Vapor's 200MB or Kitura's 80MB I think Embassy's 1MB is a good start for a small server.
Everything gets deprecated eventually. 
Here you have a nice tut from Ray (check out the recording part): https://www.raywenderlich.com/94404/play-record-merge-videos-ios-swift It's a little outdated but I guess it can be easily ported to Swift 3.0 Uploading to any server is as easy as URLSession.uploadTask but for that you'll have to google it since I have never used Firebase and I don't know if they make it easier. HTH.
Oops, this one is behind a paywall: https://videos.raywenderlich.com/courses/beginning-video-with-avfoundation/lessons/4
If you're just getting started Parse is pretty good. It's not a hosted solution anymore but it's quick to get up and running. 
I've been working with aws services. The learning curve is pretty steep but it's pretty powerful. Same backend for both Android and ios app. Services that I'm using: Cognito - authentication and user data store. Dynamodb - data storage SNS - notifications S3 - image hosting Cloudfront - serving images Lambda - event hooks for running some logic. 
I wouldn't go with what's best. I'd go with what you know. If you only know swift, just stick with that. Then you're not learning a new language *and* framework *and* new concepts.
so thats the actual memory address of the object in memory right?
Take a look at the [Supporting Right-to-Left Languages](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPInternational/SupportingRight-To-LeftLanguages/SupportingRight-To-LeftLanguages.html) section from the [Internationalization and Localization Guide](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPInternational/Introduction/Introduction.html).
AFAIK, yes.
Didn't know about this thank you!
Cloudkit! It's free It's swift/objc, you know that. And it has service endpoints, so you can integrate with other platforms.
This is exactly the problem, thus the platform-wide fire. Supporting 8 is exactly the problem, this encourages user to lag behind and stay on older operating system. As the time goes on, the gap become larger. The new windows XP would born and it's going to be difficult to add new features to the system.
I am one with Firebase and Firebase is one with me. 
I think a bunch of great options have been listed here, but I wanted to try to glue them all together. I say that **there's no way of doing this that is provided to you by Swift**. But there are a couple of things that seem like they _could be_ solutions: - There's `lazy`; but, as ZennerBlue noted, this could have unintended behavior based on the lifecycle of the containing object. - Then there's `dispatch_once()`, which was what a lot of Obj-C programmers relied on to make singletons. If you were to try to use this to implement your feature, I bet you would quickly get frustrated by `dispatch_once`'s interface: it's a C function; it requires holding onto a token that you need to pass to that function; it's not immediately obvious how to think about that token (where do I put it in my code? can I store it in a database to "cache" it? does it ever "reset"?) It seems like both of these "solutions" end up being tricky to use, in one way or another. In fact, I would argue that they are tricky in the same way - specifically, with these solutions, **it's difficult to know when your web service will be called for the second time**. This isn't to say that `lazy` and `dispatch_once` are bad APIs. They do exactly what they are supposed to do - but **they are missing a key part of this problem: your application-specific logic, which instructs when your program can call your web service for the second time.** No one knows this logic but you. So, you need to provide that logic. (This is why I started off by saying that Swift doesn't provide a way of solving this problem - Swift can't provide you a way of solving this problem, since it's missing a key part of the logic.)
I have found Realm to be pretty cool as a backend for realtime apps. Their backend is still a big rough around the edges, but the experience of having real realtime synchronizing databases on the device is pretty amazing.
The whole "you should write tests instead" argument is bogus. Tests are useful, but so are languages like Swift that make it hard to commit stupid mistakes. I've written large complex systems in Python, and it gets really old needing to write unit tests just to verify that you're passing the right type of value. You want to comment on your functions what the expected types are, so make that part of the language and let it be enforced automatically, or you'll find yourself wasting time tracking down the place three levels away where you passed in a string instead of an array of strings, and everything seems fine until you try to iterate through the values and fail to match any in a spot far away from there. Languages making it easier to avoid mistakes is a good thing, and more so the more complex your system is and the more contributors you have. That time you "waste" trying to convince the compiler to run your code is time you're not spending later debugging bad code, and your work gets saved in the form of your code working, instead of being fragile in face of future changes.
whats wrong with learning new languages and concepts. Thats the whole point of programming.
Realm all the way. Moving from Core Data to Realm was like a breath of fresh air and has saved me so much headache. 
Although it is the most popular server side Swift solution, there are criticisms that it's not a very Swifty solution and that it's a bare transplant of server side frameworks to Swift. There are other more expressive frameworks like [IBM Kitura](https://developer.ibm.com/swift/kitura/) for flexibility and [Vapor](https://vapor.codes/) for speed.
I'm still working on the Donald Trum [game](http://jozemite.org/) where you can read about the process of making it in the [blog](http://jozemite.org/blog/2016/11/19/creating-wall-of-trump/). It's basically a physics based game where you have to help land the immigrants into the taco trucks so they can escape the wall.
They're completely separate things. If you learn how to write an app using Swift, and you learn how to write a back-end in node.js, then you will be able to write the app you desire.
Any opinions on using Django Rest Framework for most of that? I'm currently learning the basics of both Django and DRF in hopes of building a suitable backend for social networks. 
[removed]
[removed]
My experience with Django is limited to web apps. DRF is just as good as any other rest framework. You will have at your disposal an assortment of python libraries to do a lot of these things like securing your app, user management etc. With a social app, permissioning, scaling and push notifications settings (for mobile) become quite challenging very fast. So i'd be biased towards solutions that offer that out of the box. But Django, rails etc has such a mature ecosystem... That alone makes it quite attractive for a starting point. 
Wrong sub. This is a question for /r/iOSProgramming.
Looks awesome! Going to download it. Hopefully it grows into something amazing while still retaining its simplicity.
Why would you write a `perform(:if:)` method when you can write `if canWeHitThatWebService() { hitThatYWebService() }`?
DynamoDB vs Mongo or SQL is needlessly painful IMO as are a lot of their other services. Firebase gives you everything out of the box. AWS just gives you a box.
Are you comparing simulator to device ? Simulator is always more? Otherwise go back in commits and test each iteration and see which increased it
&gt; MySQL or MongoDb is just a datastore... lets say you front that with a server like express... that might be easy to begin with but will take quite a bit of effort to productionize the app... push notification, security, authentication, permissioning, asset hosting... by the time you've built all that... you'd be hoping you had considered AWS or firebase to be honest. I use MySQL with CakePHP. Cake handles all the authentication, permissions, hosting etc. It also ties in really well when you have a web front end for your app. As for push notifications, they are pretty trivial to send. From memory, I have one function that I include as a Trait to send a push notification. I highly recommend Cake. It's served me well. 
But I need a mac first 
19
You should check out CakePHP as a backend alternative. 
I was initially going to say this: Put together a Wordpress plugin, allowing you to call a function that sends a push notification in PHP when required. The sending of the notication is trivial. You will find examples on google for sending push notifications. Then I googled it: https://wordpress.org/plugins/push-notifications-for-wp/
fixed it now, seems like using an 600kb png file in an image view is not a good idea. 
Turns out there's also a [Udacity iOS/Swift Nanodegree](https://www.udacity.com/course/ios-developer-nanodegree--nd003)!
Hi, I'm starting a research Project in 90 days, more or less, are Kitura Websockets good enough right now? Thanks.
I've submitted my first App to the AppStore, nothing special, it blocks cookies from the sites you want. https://itunes.apple.com/app/nocookie/id1191131719 Now I'm waiting for validation of my second App, don't know if the AppStore will accept it, otherwise it will end on GitHub, it's a GUI for Transmission (Bit Torrent downloader)
This is really a job for the back-end guys / architect to handle.
[removed]
I'm not going to argue that you're wrong; you're right for this instance. But, I think the author was using a small 2-line method as an example. A few of these things could be useful in larger methods. Just sayin'.
[removed]
This link could give you some insights into what Apple calls "flipping" for right to left languages: http://swiftquickstart.blogspot.com/2016/12/part-2-uiviews-semantic-property.html
Thanks! I'll be sticking with Django and DRF for now then. 
Node ja on heroku
Use websockets in node if you don't want to do long polling
&gt;&gt;Take a perfectly readable 2-line method I'm not even mad, that's amazing. So you really think, that I was talking about the two liner? I mean, even the slightest idea, that the example was made as a shorthand for the sake of clarity never came up your mind? Now, lets take a real-life example: https://github.com/kickstarter/ios-oss/blob/master/Kickstarter-iOS/Views/Controllers/SearchViewController.swift Specifically, fileprivate func changeSearchFieldFocus(focus: Bool, animated: Bool). And what do we see in there? Oh yes, duplication. Why is there duplcaition? Because the likes of yours prefer to write 2 lines of code, then 3 lines of code and then voila, we have methods with several hundreds lines of code, that are unusable. &gt; In case Apple renames a property on UIView (and doesn't provide a migration script, like they always do), so you don't have to change it on 2 adjacent lines. Once again, I must stress, that you amaze me. You are hilarious, I insist on that. 1. Apple migration scripts continuously fail to work, API changes with deprecated methods are usually not handled by these scripts as well. 2. That could be your code, that migration tools don't have anything to do with. I didn't even think, that forward thinking is such a difficult thing nowadays. 3. The monstrosity was for the case, when you do SIMD operations with the same set of views. If you ever tried thinking out of the box and at least reading the article, you'd notice, that I stressed multiple times, that this should be done when the duplication arises. Right now the there is no duplcaition, but what would you say, if there was a second operation making these same views opaque in some setup method? &gt; It takes 20 minutes to figure out how to set a flag anywhere. Definitely a far superior choice would be to spend these same 20 minutes on changing the large chunk of duplicated code base and praying to God, that you didn't miss somewhere to invert that one particular Bool. Uh-huh. Been there, seen that. &gt;Using sender.isOn twice is fine. 1. For a newbie straight out of Ray Wenderlich - yep it's totally fine. For guys, that consider themselves developers, any duplication is not fine. I imagine, that the next thing you'd say is, that methods with more, than 'n' (where n &gt; 30-40) lines of code of code are fine as well, wouldn't you? 2. It would be funny, though, when the next big thing comes and you would enable views based on external bool, instead of sender.isOn You'd have to rewrite your code, I'd have to change one local variable. I do understand, that it's a bad choice for a person, whose productivity is measured by the amount of codebase changes they commit to git, such as yourself. Caching everything came from the olden C days and for good reasons, if you are not doing that, then you create problems for yourself and your colleagues. And should I mention, that you would have to make more keystrokes, than myself? &gt;&gt;Nobody can even start to think about the big-picture problems, because you're spending all your time struggling with low-level issues, like why you're leaking memory all over because everybody forgot to use capture lists for their closures. 1. Memory leaks could arise either way. That's not the question of decomposition. 2. Yeah, it's much better and easier to think of a big picture, when you implement everything in viewDidLoad. It's even better, if you copy paste the code all over the codebase without ever thinking. &gt;If you absolutely cannot write a program that violates any software engineering rule you've ever read, then go read the Rule of Three. Why would I bother with the rule of three, if it's flawed at its core? You know why? Because the likes of yourself at first think, that duplicating just one more time above 3 would be fine. And then it's just too late to change anything, as you are sitting with duplication all over the unmaintainable codebase, that just begs to be killed and buried. I do understand, that you are new to software development and still feel, like duplication is fine, but you should definitely read the articles below: http://mattorb.com/swift-conciseness-through-operators-extensions-and-unnamed-arguments/ http://mattorb.com/swift-conciseness-and-trade-offs/ The same ideas I applied were applied in here for better readability and code clarity. It could be improved even further, but heck, what do I know, right? P.S. Take a look at that piece of code: https://github.com/mattorb/iOS-Swift-Key-Smash/blob/901ec920e47313883782ab0a4daaa0e1c20032e1/KeySmash/ExternalKeyboard.swift I do know, how to improve it. What about you? Or would you just leave it like that with massive duplication that hurts readability and extensibility?
And why is that? Can you elaborate more on this matter? 
Yes, but I need a perfectly stable WebSockets and I won't have lots of help or time to fiddle with it. Gonna do some tests. Thanks.
Also use the BNR iOS book. They complement each other. After those two you should be able to do the Stanford course. Do every single problem and write every single line of code in both books and in the course. You have not finished a chapter until you did it 100%. About 99% of learners struggling is because of this. 
You are most welcome. Good luck on your journey. Apple development is fun. Just don't give up no matter what and you'll become the seniorest of them seniors in no time
Thanks very much for this. Exactly what I was looking for.
Ok so first you start a new project, single view application. In your first view controller drag a webview into storyboard in the webview, load up https://www.wolframalpha.com/ DONE!
[removed]
So I'm beginning to gather it won't be worth it. Thanks for your replies!
I don't really want to get into the argument, but could you please elaborate on the "implementing everything in viewDidLoad" part? What are the options and/or the proper way to do this? I would love if you pointed me to some article that I can read about that. Thanks :) 
I'm amazed at how you can be CTO at a tech company. I wouldn't even hire you with that mindset and attitude. Yes, reducing duplication is a good thing. But at the end of the day, what really matters is to be pragmatic. You can follow all the programming principles to 100% all you want and I if you did, I would not want to maintain that code. I think it's important to know different principles and how to apply them. But I honestly believe the article failed at communicating it's message.
Well said; I'm totally in your camp on de-duplication. Yes, there are ways and extremes of doing it that become too obtuse and we should remain pragmatic; but 99% of the time when I encounter masses of duplication over a code-base, it's clearly not a reasoned choice: at worst it's laziness, at best it's a lack of awareness that they're actually leaving greater scope for error or significantly harming performance.
On the difference of opinion in this thread: While there's a danger of over-doing de-duplication, in over ten years in mobile development I've seen *far more* problems that were caused by lazy redundancy all over a code base. Copy-pasted code, multiple redundant calls to methods with unaccounted side effects, wasteful use of computing resources (in ways that *did* impact performance and stability) all too often get hand-waved away by lazy developers as 'but we don't want to make it too complex', when it *wouldn't* be complex; just more robust. The kind of slap-dash, cargo-cult, Stack-Overflow oriented Development that often goes with this attitude is distressingly common and I'd sooner rail against that, than against someone who puts (perhaps) a bit *too* much thought into their code. OP acknowledges the example is a trivial, contrived one; but if articles like it breed an awareness of the 'spectrum' of concise (de-duplicated) to verbose (with redundancy) and highlight considerations about which level is appropriate, then I'm all for it.
I recommend using Alamofire. Saves a lot of work and leaves you with a sweeter syntax.
I think I have that book and unless it's been updated, it's for swift 2x. You'll spend allot of time trying to get things to work because they've been designed for 2x not 3. 
You're right, not necessarily only Medium :)
So, I would recommend two things. Firstly find a good book on Swift - any book that talks about Swift being an "object oriented programming" language, is NOT one you want to be looking at. Swift is a _functional_ language, and to write good Swift that aspect of it is fundamental. The BNR book is good, but then so is Apple's Swift 3 book on iBooks, and it's free. I would also recommend the Advanced and Functional Swift books from objc.io. They're certainly heavier, but invaluable on taking your Swift development to the next level. Oh, and Stack Overflow is your best friend. No, really. Secondly, and this is certainly a personal thing, but I would forget about courses. People that get good at development, get good because their guts drag them through the tough times (and there WILL be tough times), and not the nagging of a lecturer / teacher. Good developers' guts shout "hey, what does this do?", and "hey what if I wrote an app that does THAT...". It's called intrinsic motivation, and you need it to really get where you want to be. So in place of a course, think of an app, a game, anything that you want to make on your iPhone, and make it. Sure it'll be slow going at first, and you'll head to the books on a regular basis, but over time you'll rely less on the books and spend more time thinking about design, UI experiences, content, and overall making a great app. And eventually you'll get that app on the App Store (an experience all on its own), and your guts will already be pulling you in a new direction. Go with your guts and you won't go far wrong.
I personally wouldn't in this case, though I do like closures. Just not in this case. It looks yuck, and like it would be hard to navigate.
I wonder if this could work. Google/DuckDuckGo: swift site:medium.com
Hi hailtoodin! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/5oib4k/i_found_something_like_this_maybe_for_you_too/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
&gt;I would love if you pointed me to some article that I can read about that. Sadly, I'm unaware of any production related articles about that. I've written an article about that some time ago, but it's a simplified idea: http://blog.idapgroup.com/lets-reconsider-mvc/ I'm writing an article about the production related decomposition with real-life examples, but it still needs some work. &gt;What are the options and/or the proper way to do this? There is never a proper way. Conventional programming is not maths. There are better or worse ways and the choice should be made based on the analysis of tasks you have in order to figure out, what's good for you and why. The basic idea, is that viewDidLoad is not properly utilized most of the time. People tend to fill in views with models in it (bad idea, as you could receive a model after you load the view), setup views (bad idea, as view controller view should be responsible for setup of its subviews). Because of the viewDidLoad tends to be a really large method, that's really hard to grasp and control.
thank you for helping me! I have set every closure as as unowned self and every delegate as weak. 
&gt; OP acknowledges the example is a trivial, contrived one; but if articles like it breed an awareness of the 'spectrum' of concise (de-duplicated) to verbose (with redundancy) and highlight considerations about which level is appropriate, then I'm all for it. Well, I tried my best to highlight the considerations. Sadly, it seems, I miserably failed.
Can this plugin be used with intellij?
Oh, all of the courses that are in the Nanodegree are provided free from Udacity. Check out: http://udacity.com/courses/ios However, the Nanodegree might be a better fit if you struggle with self-pacing yourself, or if you want the certificate to show to potential employers. Much luck to you!
Or use the search function.
[Yes](https://plugins.jetbrains.com/idea/plugin/8240-swift).
No timers are used. Do you mean a visual timer? 
&gt;I'm not going to try to defend myself by listing my credentials Why would you bother enlisting credentials? A better way to defend your position would be to answer at least that simple question: &gt;Take a look at that piece of code: https://github.com/mattorb/iOS-Swift-Key-Smash/blob/901ec920e47313883782ab0a4daaa0e1c20032e1/KeySmash/ExternalKeyboard.swift I do know, how to improve it. What about you? Or would you just leave it like that with massive duplication that hurts readability and extensibility? &gt;I will note that I quoted (and linked to) a principle popularized by Martin Fowler and Charles Petzold. There's few people in the world with as much software development experience as those two. Why should it matter, who those guys are? There is a harsh reality, where Uncle Bob proclaims Clean Code to be the ultimate solution to all the pain in the software development. We do know, that VIPER is its implementation and loads of people dislike it. Would you say, that Uncle Bob is not an authority with loads of years of experience? Moreover, you stated, that it's ok not to cache accesses to local variables, which is the contrary of one the first principles any CS student learns? We have a harsh reality, where each and every solution has its tradeoffs. The rule of three tradeoff has an ultimate flaw in it: it allows for exclusions in duplication discipline. It says, that its ok to duplicate, but there is a hard limit on duplication occurrences. In real life developers just tend to increase that hard limit by a bit, and then by another bit. And then, we have massive duplication with copy-paste everywhere. So, it's much better to state, that each and every duplication should be removed, as there are no exceptions to the discipline in that case.
&gt;How is that a flaw? Every possible rule is equally flawed, then, if you can just claim that it's possible somebody might ignore it. Because, the rule, that allows for exceptions would be ignored at a much higher pace. &gt;Hello, straw man! You look very flimsy. Oh! It seems you are. Ha! You tried really hard. But you failed. My condolences. &gt;Can you demonstrate how setting a boolean could cause a memory leak? First of all, I was talking about the problem in general. I'm in a real awe of how you can't ever think and talk on par with your opponent and jsut try to drag down to at least something. That's amazing, I assure you. Secondly, you were the one talking about the memory leaks: https://www.reddit.com/r/swift/comments/5obhrv/swift_common_mistakes_noone_bothers_about/dci7l40/ &gt;Nobody can even start to think about the big-picture problems, because you're spending all your time struggling with low-level issues, like why you're leaking memory all over because everybody forgot to use capture lists for their closures. Why would I bother showing you how to achieve that (although, I have several ideas on my mind)? &gt;Closures in Swift have non-obvious memory management properties, compared to every other language (even Objective-C). They are quite obvious in my opinion. How is that difficult to follow a convention with so little rules? If you don't have explicit enforced capture lists, you either follow conventions or suffer. &gt;Do you have an actual program I could look at, that demonstrates your zero-duplication mandate? Nearly all programming languages I've ever used (including Swift) pretty much require some duplication at some level. Unless you're proposing we all switch to something like Erlang or Scheme, I don't see how you can avoid duplication entirely. You won't be able to avoid duplication entirely and that's for sure. I completely agree on that. But there are ways to at least decrease it to the absolute minimum. And any dev should follow them. The ideas I presented in the article are just ways to decreasing the duplication. GENERAL IDEAS, if you understand, what this means. As for the app, I will be refactoring one of the opensource repos in order to present the application of the general ideas I talk about in this series of articles. Stay tuned. &gt;For those cases, we always have "find &amp; replace". (Or more syntax-aware tools, which are great, but good ol' sed(1) works fine, 99% of the time.) We're already paying the price to use a statically typed language, so let's reap the benefits. Dear sweet God, please make me unsee that statement. &gt;Even if you encapsulate all the uses of the property in this class or file, there will always be other classes and files that use it. You can't deduplicate all identifiers down to n=1 cases globally -- else they would no longer be useful as identifiers! I didn't ever say, that there will be no duplication at all, but keeping it to the bare minimum is a must. And your POV in the original post is strictly against it. &gt;Not at all. Did you read my comment? I even provided a handy link to the Rule of Three. You provided one criterion for when to avoid duplication: "always". I provided a different criterion (favored by experts in the industry): "at n=3". It makes no more sense for you to accuse me of ignoring my criterion, than for me to accuse you of ignoring yours. I did read your comment. Sadly, I don't see, how you did the same with my comment and article. Let me get that straight, because, as I understand, you didn't get it yourself: "I was mocking you". Sad, but true. &gt;I suppose you could have been talking about the price of coffee in Belize. You spent 750 words rewriting those two lines of code, though, so I assumed that was the subject. If that is not the case, could you enlighten us? I'm starting to lose faith into the humanity because of you. Would you bother reading the article? I was sharing general ways of how to deduplicate the code based on a simple example. I couldn't even imagine, that someone is so close-minded, that he/she wouldn't get it. And what sense would there be in more sophisticated? If you couldn't apply and generalize the simple example, you won't be able to do that with a more serious piece of code being worked on (except for the case, when the code example is a copy of what you are trying to deal with). And now, lets proceed with my statements, which you conveniently ignored. Please, elaborate on them: &gt;Take a look at that piece of code: https://github.com/mattorb/iOS-Swift-Key-Smash/blob/901ec920e47313883782ab0a4daaa0e1c20032e1/KeySmash/ExternalKeyboard.swift I do know, how to improve it. What about you? Or would you just leave it like that with massive duplication that hurts readability and extensibility? &gt;The monstrosity was for the case, when you do SIMD operations with the same set of views. If you ever tried thinking out of the box and at least reading the article, you'd notice, that I stressed multiple times, that this should be done when the duplication arises. Right now the there is no duplcaition, but what would you say, if there was a second operation making these same views opaque in some setup method? &gt;For a newbie straight out of Ray Wenderlich - yep it's totally fine. For guys, that consider themselves developers, any duplication is not fine. I imagine, that the next thing you'd say is, that methods with more, than 'n' (where n &gt; 30-40) lines of code of code are fine as well, wouldn't you? &gt;It would be funny, though, when the next big thing comes and you would enable views based on external bool, instead of sender.isOn You'd have to rewrite your code, I'd have to change one local variable. I do understand, that it's a bad choice for a person, whose productivity is measured by the amount of codebase changes they commit to git, such as yourself. Caching everything came from the olden C days and for good reasons, if you are not doing that, then you create problems for yourself and your colleagues. And should I mention, that you would have to make more keystrokes, than myself?
Thank you I've stared today to learn swift cause you made videos on your channel! 
&gt; What about you? Or would you just leave it like that with massive duplication that hurts readability and extensibility? The entire file is under 50 lines, with short lines and well-named methods and simple language constructs. I think it's generally easy to read and understand. What aspect of it do you think is not? I can think of many ways to improve it, but without knowing *what kind* of extensibility you want, it's pointless to speculate. There are many possible axes of extensibility. We'd just be playing a game of "ha, you didn't happen to think of the same kind of extensibility I was thinking of". &gt; Why should it matter, who those guys are? I value expertise. It lets me learn new things without having to start from first principles myself each time. It's why anyone would read an article like yours, too. Why do you state that you're a "CTO" in your blog, and point to your LinkedIn account first, if authorship doesn't matter? &gt; There is a harsh reality, where Uncle Bob proclaims Clean Code to be the ultimate solution to all the pain in the software development. We do know, that VIPER is its implementation and loads of people dislike it. Would you say, that Uncle Bob is not an authority with loads of years of experience? Who are these "loads of people"? Is "VIPER" controversial? Are you claiming that the Rule of Three is controversial? Even if one idea in a field is, that doesn't mean every idea is. &gt; Moreover, you stated, that it's ok not to cache accesses to local variables, which is the contrary of one the first principles any CS student learns? I'm pretty sure I never said that. I'm also quite sure it's not one of the "first principles" of computer science. &gt; We have a harsh reality, where each and every solution has its tradeoffs. The rule of three tradeoff has an ultimate flaw in it: it allows for exclusions in duplication discipline. It says, that its ok to duplicate, but there is a hard limit on duplication occurrences. In real life developers just tend to increase that hard limit by a bit, and then by another bit. You keep repeating this claim, but without evidence. This does not match my experience. Perhaps it's a cultural issue? I've not worked with eastern European programmers before but I have worked with programmers from other continents, and sometimes they have very different practices than in North America. &gt; And then, we have massive duplication with copy-paste everywhere. It really does sound like it's a cultural issue for you. Perhaps in your country, software engineering discipline is lacking so that you feel the need to clamp down hard on every little thing you see. That might explain why you feel so passionately about this issue, but most of the other commenters here find it so foreign. 
&gt; But in this case, I'm having trouble seeing how this is a metaphor for an actual program. That's really sad, considering, I gave you two examples already. Let me recite them: https://github.com/kickstarter/ios-oss/blob/master/Kickstarter-iOS/Views/Controllers/SearchViewController.swift -&gt; fileprivate func changeSearchFieldFocus(focus: Bool, animated: Bool) https://github.com/mattorb/iOS-Swift-Key-Smash/blob/901ec920e47313883782ab0a4daaa0e1c20032e1/KeySmash/ExternalKeyboard.swift If you have trouble applying my samples to that code, I wonder, how you are able to code at all. &gt;More generally, programs are read more often than they're written, so why would we intentionally optimize for writing? It seems, that you never ever had refactored or changed the code before. Because the statement in here is on the verge of baldness. Reading giant viewDidLoad is generally easier, changing it isn't. That's why seasoned devs don't do that.
Been looking for the exact same type of tutorial, no luck finding any so far.
&gt;What aspect of it do you think is not? Er... Massive duplication? I'll be refactoring that code for my next article, would you mind giving me your linkedin profile? I'll be mentioning you just at the beginning of the article. &gt;simple language constructs BWAHAHA. That's the positive side nowadays? Then you shouldn't use swift, as there are too many language difficult language constructs and concepts in it. Use pascal or go instead, as even PHP became too sophisticated. &gt;I can think of many ways to improve it, but without knowing what kind of extensibility you want, it's pointless to speculate. There are many possible axes of extensibility. We'd just be playing a game of "ha, you didn't happen to think of the same kind of extensibility I was thinking of". The problem here is, that any seasoned dev would see: 1. Duplication 2. Use of force unwraps And that's what was troubling the author, so he applied techniques similar to what I presented in the article to improve his codebase: http://mattorb.com/swift-conciseness-through-operators-extensions-and-unnamed-arguments/ http://mattorb.com/swift-conciseness-and-trade-offs/ You'll have to wait for my article to see, what's exactly wrong. Stay tuned, as I'm not going to preemptively spill the beans. &gt;Why do you state that you're a "CTO" in your blog, and point to your LinkedIn account first, if authorship doesn't matter? Another weird question. Isn't that obvious? I'm marketing myself. &gt;I value expertise. It lets me learn new things without having to start from first principles myself each time. It's why anyone would read an article like yours, too. I value content. Even, if the guy has no name, like myself (lets face the truth), I would read him, if I like his content. E.g., I started reading Mike Ash, when he was still not that well known and I've never ever once regretted doing that. Same applies for hamster emporium. You can't apply that approach, though, as you can't even apply the directions from my article on something more sophisticated. &gt;Who are these "loads of people"? Is "VIPER" controversial? https://www.quora.com/Should-I-use-Viper-architecture-for-my-next-iOS-application-or-it-is-still-very-new-to-use &gt;Are you claiming that the Rule of Three is controversial? Exacly. It results in duplication. &gt;I'm pretty sure I never said that. False: https://www.reddit.com/r/swift/comments/5obhrv/swift_common_mistakes_noone_bothers_about/dci7l40/ &gt; Using sender.isOn twice is fine. &gt;I'm also quite sure it's not one of the "first principles" of computer science. Oh you, my poor dyslexic opponent, I never said, that it's one of the first principles of CS. I said, that it's one of the first principles any CS student learns. It's just a coding practice, you silly, but the one, that CS students learn at the very beginning of their journey. I know that, as I was teaching CS students voluntarily in my spare time. &gt;Perhaps it's a cultural issue? I've not worked with eastern European programmers before but I have worked with programmers from other continents, and sometimes they have very different practices than in North America. It really does sound like it's a cultural issue for you. Perhaps in your country, software engineering discipline is lacking so that you feel the need to clamp down hard on every little thing you see. Oh. How awfully predictable and flawed your statement is. Trying to put the blame on the devs from Eastern Europe and their mentality. But the thing is, that it isn't related to the nation. Most of the coding practices around the world (including US, of course) suck. It's multinational. A perfect proof is the code I previously sent: https://github.com/kickstarter/ios-oss/blob/master/Kickstarter-iOS/Views/Controllers/SearchViewController.swift https://github.com/mattorb/iOS-Swift-Key-Smash/blob/901ec920e47313883782ab0a4daaa0e1c20032e1/KeySmash/ExternalKeyboard.swift The problem is not in matching your experience, the problem is, that you keep your eyes wide shut and don't want to take a look around. Because the samples above are from US based programmers. Jsut read through the repos, you'd be shocked by the amount of duplication. E.g., I will be posting at least 10 articles with code review of Kickstarter, that would prove my point, that those are common mistakes, that no one bothers about and that using my ideas would improve readability, extensibility and maintainability of the code. Another important point is that you don't even see the duplication, where I see it (a perfect example of your blindness is https://github.com/mattorb/iOS-Swift-Key-Smash/blob/901ec920e47313883782ab0a4daaa0e1c20032e1/KeySmash/ExternalKeyboard.swift ). So I wouldn't personally rely on your experiences. I would try to reflect on your code and improve it, same, as the author of that repo did. &gt;That might explain why you feel so passionately about this issue, but most of the other commenters here find it so foreign. Let me just mention, that most of the readers didn't write anything. Most of the commenters were antagonized by my ideas, but let me remind, that those same "most" including yourself didn't even get, that the code I presented was jsut a sample code.
As was previously mentioned, you set the tone of the discussion by your original posts. I played along. If you read through my responses, I am mostly friendly, when the person states I'm wrong without getting the point of the article or corrects me. P.S. Rimming for reposts is beyond me.
The short answer is yes. It makes for much more readable APIs at the point of use.
well if you make a function (extend the String class) that does all this then you get a one liner it seems pretty readable to me though
[removed]
Use NSRegularExpression firstMatch(in:options:range:) https://developer.apple.com/reference/foundation/nsregularexpression/1409838-firstmatch
[removed]
Decent video! I have to ask a question about Swift's handling of tableviews: why the hell do you have to override a whole function just to change the UI of a tableview? The creators really couldn't streamline them into function calls and parameters like everyone else?
I agree with both of you here. in early days of iOS development whole application used to exist in AppDelegate. People literally divide their code into M, V and C. i believe that MVC was just a foundation of how responsibilities should be divided. When ever I feel like my class is getting too big to manage, I try to refactor it. (Xcode refactoring tools need refactoring/improvements itself) 
I agree with you code is yuk but sometimes we should try to experiment with things. You should never stop asking questions. just for an example, I been asking myself why cant we do multiple inheritance, it would be such a nice thing to have. Naturally we do inherit genes from multiple sources. While answering myself I learned why composition is better than inheritance :) 
Do you need to use Node? Ray has some really good screencasts on Vapor using Swift
Do you really need an Ingredient object to store ingredients? Could your shopping list not just store an array of Strings? This should show you what you need regardless - https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreData/HowManagedObjectsarerelated.html
&gt; This sacred knowledge could also be applied to protocols: &gt; let lock: NSLocking = NSLock() &gt; lock.lock() &gt; // do something &gt; lock.unlock() &gt; let result = lock.dispatch { &gt; return "some fancy result" &gt; } With respect to locks, Rust has a *really neat* concept which I've rarely seen elsewhere, though it plays into its notion of ownership you can probably get part of it in current Swift, just without some of the security: [the lock object owns the data it protects](https://doc.rust-lang.org/std/sync/struct.Mutex.html). See in theory the lock protects a *critical section* of code, but the reality is the vast majority of locks actually protect a resource, and the critical section is just the incidental code manipulating that resource. Yet in most languages you've got a lock, you've got a resource, and you've got to remember somehow that you need to lock A before you manipulate the unrelated B (even if they're one and the same e.g. Java's intrinsic locks) (and things get worse if you have nested locks). Most languages with lock convenience keep doing that e.g. in Ruby you can pass in a block which will be lock-protected, in C++ you acquire an RAII lock and everything until scope end is protected, in C# or Python you use a context-manager to automatically release the lock, but in all these cases the lock is still protecting a bit of code, without any visible relation to the resource you actually want to protect. In Rust, you *can not* access the resource if you have not acquired the lock and thus intrinsically know which lock matches which resource, because the lock *owns* the resource, and the lock guard (the RAII object you get when you acquire the lock) acts as a smart pointer. And if you want to lock a bit of code rather than a resource, you can just wrap `()`.
&gt;In Rust, you can not access the resource if you have not acquired the lock and thus intrinsically know which lock matches which resource, because the lock owns the resource, and the lock guard (the RAII object you get when you acquire the lock) acts as a smart pointer. And if you want to lock a bit of code rather than a resource, you can just wrap (). Your point and decomposition idea is total goodness. Could you please provide sample code of the example usage in Rust from creating a lock around the resource or behavior and up to using it? I could try replicating it in Swift. Can't google it myself right now.
I have the 12" Macbook from 2015 I got as a refurb off of ebay. It runs everything awesomely, even with only the i3 equivalent M processor. I don't get lag in the storyboards and only get lag in the simulator when I'm working with something like SpriteKit.
Yea it's a really nice way to do it that's at least somewhat common in FP languages. Haskell has the same idea in the form of MVars. It's also got TVars, the STM based non-locking but still concurrency safe equivalent. Both of those, plus various other goodies, have been ported to swift in https://github.com/typelift/Concurrent, though I've not had a chance to try them out personally. Clojure has the same sort of thing in the form of refs.
&gt; And that’s horrible. Just imagine forgetting to put either beginUpdates or endUpdates or just deleting them during refactoring. "horrible" is a bit harsh. Sure, using an extension for this is a great idea idea, but it isn't horrible to not use one. I like reading articles that have tips to make my code better, but the tone of your writing puts me off a bit.
I have a medium good windows PC with VMware installed (with mac software installed) and XCode works decent with 4GB RAM. If you want a windows PC, then look into this option.
VMWare is free btw
You have something out of order, which is probably the reason why you're getting an error. First, where does this ViewController exist? Storyboard? Nib? Programmed manually? It looks like you want to present a viewController modally with a NavigationController. You don't need to manually add the ViewController to the navigation stack, you can simply call: let navigationController = UINavigationController(initWithRootViewController : &lt;YourControllerer&gt;) You should set the title property BEFORE you add it to the NavigationController. &lt;Create your View Controller, not sure how you have this step&gt; productController.title = tappedCell.textLabel?.text let navigationController = UINavigationController(initWithRootViewController : poductController) Then you can call: present(nc, animated: true, completion: nil)
&gt;Sure, using an extension for this is a great idea idea, but it isn't horrible not to use one. Any duplication is horrible in my opinion. And it's horrible to underutilize language features, that could dramatically improve your code, in my opinion as well. &gt;I like reading articles that have tips to make my code better, but the tone of your writing puts me off a bit. I don't have a goal to make you like me. I'm not Bob the Coder, who asks for reposts or likes in each of his posts, and tries to be nice with just anyone, no matter how they talk to him. My ultimate goal is to force my readers into self-reflection in order for them to improve drastically and in short periods of time, by grasping the concepts, that I present using simple examples. My goal is only achievable, when I take the person out of his/her comfort zone and tell him the truth about his code. Moreover, I'm not left by any means, so my blog and discussions with me is definitely not a trigger-safe zone. Lets take you, for example, you want to make your code better. If I told you: "Ok, man, no problem, you can proceed on with duplication, as what I propose is just a simple guideline no one is obliged to care about.", would you reflect on the code you wrote already? I don't think so, as you'd think: "Oh yeah, I'll just stick with my way of doing things, I like it more." Why? Because you are used to it and people tend to avoid anything new, that is outside of their safe zone. Same applies to my opponents in that thread: https://www.reddit.com/r/swift/comments/5obhrv/swift_common_mistakes_noone_bothers_about/ My approaches are well beyond their comfort zone. Even more, I directly told, that their coding practices suck. Some of them decided to improve, others decided to defend the way the write. Shame on the latter. On the other hand, I told you the truth, that the approach you use, is horrible. Perhaps, you would get angry and avoid reading me ever again. Or you would swallow it up and never ever allow yourself making such an obvious mistake, as you now know, that this actually is a horrible mistake. So, it's up to you to decide, if you want to stick with me. I still have a lot up my sleeve, that even experienced guys don't do.
Not for Mac. They charge for the Mac OS version (unless something changed). VMPlayer is free for Windows. 
true, the details of what memory is being mutated(ref itself or ref's content) vary by language, optimization, reference count, etc. The basic concept is the same though. It's really just a bit of abstraction and compiler enforcement on top of how we'd write it most of the time with lower level concurrency mechanisms.
2012 15-inch Macbook Pro Retina 8 Gb runs Xcode like you'd run TextEdit. Macs are insanely good value in the long run.
&gt;at least non-closure noescape parameters It would be great, if they added it, as I've already seen a code, where a youngling fetches the Data UnsafePointer outside the enclosing scope. Even more, I would love code generation (templates, C macros, lisp-like macros, you name it) as well. Oh. Dreams...
check kitura or vapor .
Okay soooo.... what's the issue? I see you have this line: &gt; isUserInteractionEnabled = false Is it not working? Is it working half the time? Not at all? Etc.
The reason im looking at these books is because i am not a fan of e-books. I know its something im going to have to get passed but i still find physical copies much easier for myself.
Honestly I think the book that made Swift click for me was Hacking with Swift. The author frequents this sub and what I liked about that book is it didn't overwhelm you with unnecessary detail. He teaches you enough to get you up and running then adds as you go. Swift is a huge language and not exactly beginner friendly and it has a LOT of syntactic sugar and too many books (including the BNR book) give you all this up front which can make things confusing and frustrating. You spend more time trying to learn syntax than coding. Hacking with Swift, as far as I know is e-book only, /u/twostraws could tell you for sure, but I'd highly recommend it. 
I'm not sure what are you asking exactly, buy if your question is why do I have to create a custom class for a custom UITableViewCell, it's for great ability of customisation. If the question was something else, please make sure to explain it to me in a little bit more detail.
I've looked over Accelerate but it looks like the documentation is really sparse.
I'm glad you enjoyed the book! Yes, it is indeed digital only right now, because it lets me release free updates and provide bonus material such as videos. If you bought the book, you'll also have received a free update for my [frequent flyer club](https://www.hackingwithswift.com/frequent-flyer). Print might be possible, but it's expensive because Hacking with Swift is 1300 pages!
Whoa. Thank you very much.
&gt; Same applies to my opponents in that thread: https://www.reddit.com/r/swift/comments/5obhrv/swift_common_mistakes_noone_bothers_about/ My approaches are well beyond their comfort zone. Even more, I directly told, that their coding practices suck. Some of them decided to improve, others decided to defend the way the write. Shame on the latter. And some us decided that it's not worth our time arguing with stubborn jerks on the internet who self-describe as trolling and insist on getting the last word on everything, and went back to doing something productive, but if you're not going to drop it, why should we? This article has good advice, though your writing style is still off-putting. That other article, not so much, as your dogmatic belief in never, ever repeating anything gets in the way of writing code that is actually easy to understand. I say this as a senior dev with eleven years experience at a company with tens of thousands of engineers working in a single code base, so I have some experience with managing complexity and writing code others have to understand and modify. 
Take a look at [Surge](https://github.com/mattt/Surge) – you might find it more approachable. 
This could be a long shot, but the first thing I'd try is setting the rootViewController property of the instance of GADBannerView before loading a request. ie the fact that it worked 5 hours ago might be interesting from a WTF POV, but doesn't help fix anything...let the dead bury the dead and move along.
There has nothing to do with Swift; it has everything to do with the toolkit you are using. So, the answer would be different depending on whether you are using macOS or iOS. I'm guessing iOS, so you want to read the Apple documentation on push notifications. Here's a good place to start: https://developer.apple.com/reference/uikit/uiapplicationdelegate 
[removed]
&gt; though your writing style is still off-putting. Thanks for the compliment. I do appreciate it. &gt;stubborn jerks on the internet who self-describe as trolling and insist on getting the last word on everything You surely did fell in love with me. Sorry, I'm already married. &gt;And some us decided that it's not worth our time arguing with stubborn jerks on the internet who self-describe as trolling and insist on getting the last word on everything, and went back to doing something productive, but if you're not going to drop it, why should we? The brightest of you (swiftonista and yourself are among that huge crowd) didn't even bother reading the article and getting, that I wasn't talking about two liner, but about the general approach. Just saying. &gt;That other article, not so much, as your dogmatic belief in never, ever repeating anything gets in the way of writing code that is actually easy to understand. Please, elaborate on my statement about the ease of reading from my previous post: &gt;The problem with your statement is, that you propose to write beginner friendly code. What this would ultimately lead to is, that you won't be able to use any approaches, write huge viewDidLoad methods and Massive View Controllers, as any of the approaches (be it MVC, MVVM, FRP, RP, FP, VIPER, MVP, DI, DCI, etc.) impose additional cognitive difficulty on any newcomer unaware of the approaches. &gt;I say this as a senior dev with eleven years experience Mind sharing your linkedin and github profile? Blog, perhaps? I will be mentioning you in one of my future articles and I want to take a look at how good your code is. Perhaps, I'm wrong about you and your code is godly? &gt;a company with tens of thousands of engineers working in a single code base Are we talking about iOS here? &gt;I have some experience with managing complexity and writing code others have to understand and modify You are thinking about the others reading your code. How about you start thinking about the others trying to change your code? Because that's the most common thing, that happens with your code. And because of this thing, people tend to start reading your code in the first place. What's easier to change: 1. One access point or the copy-pastes throughout the whole code? 2. Magic numbers and strings or constants? 3. Local cached variables or the repeated getters of inputs? 4. Decomposed small chainable functions or functions with over a 100 lines of code copy pasted throughout the whole codebase? 5. Well structured inheritance hierarchies and compositions or entities, that are repeated with small changes throughout the whole codebase. I usually tend to hear about the ease of readability from people, whose code is horrible, they acknowledge that, but don't want to change anything. Should I even mention, that you just don't utilize the language, because you are opposed to the idea of learning something new? Let me just cite the guy, with whom I completely agree: https://www.reddit.com/r/swift/comments/5obhrv/swift_common_mistakes_noone_bothers_about/dcj57wt/ &gt;Copy-pasted code, multiple redundant calls to methods with unaccounted side effects, wasteful use of computing resources (in ways that did impact performance and stability) all too often get hand-waved away by lazy developers as 'but we don't want to make it too complex', when it wouldn't be complex; just more robust. The kind of slap-dash, cargo-cult, Stack-Overflow oriented Development that often goes with this attitude is distressingly common and I'd sooner rail against that, than against someone who puts (perhaps) a bit too much thought into their code.
Late 2011 MacBook Pro 15" w/ SSD. Works like a charm.
Thanks!
Try SnapKit! Its a DSL to create layouts using AutoLayout programmatically. It has some advantages like easier debugging because of easier reading of the constraints, much easier merge conflicts if you work in a team and so on...
thank you very much! Never heard of this approach before, and I've only used typealias to create closures for handling async calls. Is this the norm / best practice, to create a typealias to represent a tuple? Also, is using a tuple the norm / standard way to send multiple objects? I was expecting the response to be related to making a class instance and serializing it to NSData, but I didn't want to implement that till someone confirms that, and this is a different step that I personally find more neat (as it requires less boilerplate). 
Unfortunately not, the easiest (only) solution I'm aware of is to wrap the String in a new type and add functions to that. On the other hand, this kind of composition is presumably the correct way to solve this from a strictly Object-Oriented perspective.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/iosprogramming] [Easily add 2FA to your Swift app](https://np.reddit.com/r/iOSProgramming/comments/5ose86/easily_add_2fa_to_your_swift_app/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Okay, lots of questions. I'll try to answer to the best of my understanding: Tuples are at least the standard way to return multiple values from a function (notice they look like a parameter list, in `(Int, Int) -&gt; (String, String)`). The returned tuple can then be destructured, as so: let (item1, item2) = tupleReturn() item1.doStuff() Tuples can also be used for more general pattern matching: switch (bool, int) { case (true, 3): //do stuff default: //do stuff } Tuples are used in all sorts of magical ways, but they are still useful as simple lightweight containers for multiple values. You could call them an anonymous struct - it has no name, it can only be identified by what it contains. They're great for making a quick group of values, like the return value of, or a variable in, a function. But if you're doing object-y stuff, like casting, or need to make such a group frequently, I'd be tempted to make a new type, perhaps private to the current file. If you make the new type a struct rather than a class, the intialiser is generated for you automatically, so there's not much extra work involved. You really shouldn't need to serialise to NSData unless you're storing something to disk (using more advanced functions), or sending it over the network (as a file). In your everyday UI code, you shouldn't need to worry about it. *edited for clarity
Great, thanks for clarification; I believe you explained it enough for myself to look into the docs for details. I appreciate your help! 
The error talks about a store, so I'd assume it's a Core Data problem. Not too familiar with Core Data, but it looks like it's trying to load a database, but you've since added a property to a one of your managed objects. And because the old database doesn't have a value for that property (‘missing attribute’), it can't load it? Not sure why you'd be seeing it in that code, though, maybe the View Controller you create is trying to load from the database? I think the answer is that you need to implement a migration rule which set the value of that property if it's not found.
You're welcome buddy, I'm looking forward to your articles! :)
As the storyboard grew I felt a distinct lag and switched to a 15" Mid-2015 MacBook Pro (2.5GHz Skylake i7 16GB memory) and its been snappy ever since.
Further updating my very first app - [QuantiFocus](https://quantifocus.com), originally released last month and updated a few days ago. It's a personal statistics manager which you can use in many different scenarios. Swift is a lovely language :) 
I've a 13" MBP. 2015 model. Got it refurbished off the Apple store. 16gb ram, i7 processor and 512gb SSD. Works a charm. Absolutely love it. My new job is giving me a 1200 dollar laptop budget so I'm tempted to pick up a 12" Macbook to travel with. How do people find them for development? 
I heard about this functionality, unfortunately I don't use the buttons for navigation. I use buttons because it was more easy to trigger an action method from it, but the buttons are just images. This scene is in fact, 3 images where the user have to pick one. I'm looking to implement 'peek and pop' so the user can zoom the image before choosing one.
My favorite podcast now with CHRIS LATTNER 😍 Oh boy! Great *very* in depth discussion about Swift.
Was considering posting this after seeing it in the mailing list, but you beat me to it. Great news, bookmarked this page. Looking forward to Swift 4 already, and we haven't even entered stage 2 yet, when any and all features will be up for proposal again (property behaviours!).
Where and how are you proposing to pass this wrapper object from mainVC to filterVC? If the answer to that question is, 'in the `prepare(for:sender:)` method, then I wouldn't bother with a wrapper. I would get the destination view controller (filterVC) from the UIStoryboardSegue, and I would have 3 'set' statements to set the 3 appropriate properties in the destination (filterVC) from the data i have in the source (mainVC).
The article itself loooks good, but just link directly to the pluralsight article and not the weird stub page with no content.
What's the app? i just barely started working on my first app and i feel like i'm all over the place. 
Yeah, it was good
&gt; Surprising I never thought of that, but that definitely works (doesn't sound conventional though). I suggest you look at plenty of Apple examples and examples in blog posts and also open source UIKit based apps, and I believe you'll see that the way I suggest *is* the conventional way. That's not to say it is the only way nor that sometimes it can produce awkward code, but doing it other ways will end up being non-standard and a sticking point for anyone seeking to understand how the software works.
It disgusts me that you linked to your content-less blog post instead of directly to the article.
This should be possible in later versions of Swift! From the swift-evolution repo: &gt; Memory ownership model: an (opt-in) Cyclone/Rust-inspired memory ownership model is highly desired by systems programmers and for other high-performance applications that want predictable and deterministic performance. This feature will fundamentally shape the ABI, from low-level language concerns such as "inout" and low-level "addressors" to its impact on the standard library. While a full memory ownership model is likely too large for Swift 4 stage 1, we need a comprehensive design to understand how it will change the ABI.
I don't think you can store images without compression in the Camera Roll. Uncompressed images are very large, you would use up your user's storage very quickly. (And, afaik, you can't specify the file format used in the Photos library either, so no non-lossy compression). However, maybe there are better ways than just using UIImageWriteToSavedPhotosAlbum in the Photos framework (https://developer.apple.com/reference/photos), but I don't know that framework in detail.
Why not. It is possible with AirDrop. Thank you anyway. 
That is type-specific. Reference types can conform to NSCopying and implement `copy(with:)`, or they can hand-roll their own. NSObject also has a `copy()` method, but it just delegates to `copy(with:)` so while it's present on all NSObject there's no guarantee it actually works. So look at the methods provided by someType, and that's about it. If you're writing a generic method, I guess you could use NSCopying as a generic bound e.g. func copy&lt;T: NSCopying&gt;(source: T) -&gt; T { return source.copy(with: nil) as! T // need to cast to a T as copy(with:) and copy() return Any. }
Wait, wooot? Did they ever had an interview before? Oh god, I wonder if some higher up at Apple is a regular listener and how they react to the "please don't neglect the Mac, Apple!" nagging.
Yes the issue is recursive, if your type contains reference types you'll have to copy them somehow, and thus hope they implement copy facilities, either custom or via NSCopying.
Thanks. Reference types are weak in this area! I'm basically trying to keep an array of "historical" data populated with discrete copies of my reference type. Any ideas?
The guard statement could go in prepareForSegue, or in the ViewController, wherever works best. It's just to show how to get the data back from an opaque object. I understand that this isn't what ‘sender’ is meant for, but the only time sender is used is when calling performSegue, and in prepareForSegue. If this was a proper Swift API, sender would at least conform to a protocol, or something. You'd be able to do something with it. If a parameter of type Any is going to be used in any useful way, you've got to have knowledge about the call-site. At that point, why bother making it the sender at all? In practice, what better way is there to get data from ViewController A to ViewController B? What is the proper use for ‘sender’? ---- edit: Based on a quick look at [the docs](https://developer.apple.com/reference/uikit/uiviewcontroller/1621490-prepareforsegue) and a couple of sites, it's meant to be used as a way to ‘disambiguate between different logical paths in your app’. Sounds like what the segue identifier is for - figuring out what the intent of the segue is, from a limited set of options. But it requires using knowledge of the call-site to decide the caller's intent. edit 2: Read your comment, you're suggesting to store everything in properties is the conventional way. Still, my rant stands, it's an API design just asking for this sort of (ab)use.
What if the information you need to pass isn't a property of the source ViewController, such as the index path for a cell who's accessory button has been tapped? Do you suggest just making another property to track it? edit: asking because this is the sort of information I usually find myself needing - a local variable in the calling function, rather than (just) properties of the VC.
Not the one who downvoted, but there are two downsides to this approach: * Duplication: you need to make sure you write the strings out exactly the same when getting &amp; setting, or else declare your keys in a constant somewhere. If you don't, you may not find out until it's already leading to bugs. * Performance: dictionaries have to hash the string, then look up the value from a table of all values. This is very slow compared to a programming language's built in property lookup. While dictionaries were used for this sort of this quite a bit in Obj-C APIs (such as NSAttributedString), there are generally better solutions in Swift (parameters with default values, tuples, lightweight structs).
agree with all your points; particularly the last sentence, it *is* an API design just asking for this sort of (ab)use. Have to admit, in throw-away apps to get something happening with minimal fuss, I have snuck various bits and bobs into the sender argument ;-O! But I hope I haven't done it in 'real' apps, just because of the surprise I might leave for the next poor dev who has to figure out what my code is doing. I also agree that having to find someplace to store these pesky bits of data you want to send to the destination vc is vexing. Of course, it doesn't _have_ to be properties of the source vc, but every other way of doing it I can see is some variation of this because at the end of the day, the prepareForSegue is sent to the source vc, so it is the one that needs to be able to come up with the data. Therefore, I have got to the point where I wonder if a segue is a bad mechanism for when these kinds of acrobatics would be required. Maybe the good old-fashioned, instantiate a view controller, give it some data and then either present it or push it or whatever to get it on the screen is the more appropriate mechanism. It is a shame, but this is a kind of usual situation with Apple frameworks: either you can use the nice built-in feature which does **everything**, or you have to cobble together a completely "manual" solution, there is no halfway house.
Yes, it is a problem; I've added another response in this post discussing it further. I don't have a good answer. I have done every possible variation, and none feels good. Adding new properties is certainly the one I use most often (so I end up with properties like, `savedIndexPathForTappedAccessory`, giving it a wacky name so I don't get confused about what it should be used for. But this is one of these solutions which I use because it gets the job done, but all the while hold my nose because it just doesn't feel right. Here's hoping the next rewrite of AppKit/UIKit will solve this problem. Maybe this will be for the flying car operating system of 2057?
If you are iOS 9 and up, use PHAssetCreationRequest from Apple's Photos framework. If you need to be compatible with iOS from before that, use the AlAssetsLibrary framework.
No, you can not just say self.numberOfRows(5);, all that stuff is done by functions and it's like that because, well, Apple said so.
Look into the hitTest method on UIView
Vapor is stepping its toes where it shouldn't, no wonder it's growing over 200MB in source code and dependencies. While Fluent is a great alternative, most server apps will use their own flavor of DB mostly mysql, mariadb, postgres, oracle, db2, etc. Also the tight coupling with Node is a huge mess that adds so much complexity for very little gain. Don't get me wrong, I love Vapor and I'd like to see it keeping focused on its original intent as a server framework and fork other projects as addons. Kitura wins in that space.
Right, I'm saying that's a stupid idea. It would be much faster to have one line of code instead a whole function.
[removed]
I listen to all the ATP episodes and often use their product recommendations but this is the first episode where I kept thinking, "I would pay good money to listen to this". There was very little fluff but it was entertaining and informative at the same time.
Well, actually, I started looking through assembly, but there are too many cases to research in order to be completely sure.
Things Mark Price teaches you: buzz words to sound like you know what you're talking about. Things Mark Price doesn't teach you: safety features, error handling, TDD, fixing issues without a walkthrough, complex algorithms, task management, version control...likewise I could go on, but that's just a short list of things you would be expected to be good at as an intern, let alone a full time developer. So yes. Garbage. I'd also like to point out that saying you learned "protocols" and "POP" which is an acronym for Protocol Oriented Programming shows that you really don't know what you're talking about.
[removed]
If you are going to implement these with POSIX calls, you should strongly consider just implementing the missing holes in Foundation directly. This is what Foundation for Linux is going to have to do anyway.
Haha ya, very good point
Yeah the size/portability is what I'm looking for. Need to be able to just throw it in my backback every day. My main worry is the screen is too small. I think processing power/ram should be fine for the most part and I'll more than likely keep my MBP.
&gt;Note that I did not actually suggest which piece of code is better or worse. Note, that I proposed the maths analogy for the time, when you were still a schoolboy based on my personal experiences. &gt;The further away you get from standard platform paradigms, the more cognitive overhead is required, the more difficult it is for you (and others) to revisit code you've written later down the line. As I previously mentioned and described with school math analogy, it's strictly a matter of what you are used to. If you are used to FRP stuff, it would be easy to come revisit it later. If you are used to MVVM, it would be as easy as well. And, well, FRP, RP and FP are also paradigms. And they are qutie useful in improving your code, but stand away from apple native platform paradigms. &gt;The worst part of this is stuff like MVVM and VIPER, where design-pattern obsessed "architects" decide to impose structure on applications for structure's sake, at the cost of understandability (and therefore maintainability). While I could partially agree on VIPER for small projects (although, it has its use cases for larger ones), I couldn't agree on MVVM as a whole (I rarely use it myself, though). It's quite useful in case you are using FRP. &gt;Anyways, it's a false dichotomy, "massive view controllers" don't need to be solved with MVVM or VIPER, that stuff is cargo-culting of the highest order. Perhaps, you didn't get me. I said, that one end of the spectra are the massive view controllers and everything in viewDidLoad approach. On the other one are MVC, MVVM, VIPER, etc. Each of them solves not only massivity, but specific side-problems, that still hurt the maintainability and extensibility of the code in their own unique way. &gt;You can write clean, maintainable, easy to understand code, using the straight MVC paradigms prevalent in Cocoa already. I couldn't agree less. While MVC is perfect in terms of views and controllers, models, as shared entities in large projects, tend to become too large for their own good. E.g., in one of the bank iOS app sources I've seen models, that are well over 3k LOCs. And mind you, that was not the flaw of decomposition, but just too many different ways of interacting with the same data. For that specific case I prefer DCI to split the models into multiple entities. I really wonder, how you would handle that specific code in classic MVC, though.
I've developed MVVM-based apps in the .NET world where it originated, and the reason it's appropriate there has a lot to do with native platform support for databinding across the WPF/Silverlight SDKs. This is not the case on iOS, and hence MVVM is wholly inappropriate on this platform, but some people tried to shoehorn it in anyway. The result is, frankly, a convoluted mess. Just because you're using MVC doesn't mean all your code needs to live in models, views, and controllers. MVC is just the foundation. You can still separate code out as needed without having to follow the overly complicated structure of something like VIPER.
For what it's worth, the thing you're passing to the "with:" parameter of observe(with:) is a closure, so you have dealt with them some ;) It's hard to tell without knowing the specifics of what you need, but if you really do just need that function as a closure, just use it but leave off the parentheses. e.g. aFunctionThatTakesAClosure(pullCurrentUserCardInfo) instead of aFunctionThatTakesAClosure(pullCurrentUserCardInfo())
This is, broadly speaking, what a debugger like lldb does, so it is technically possible. It is quite complex to do so though; you may be better off using lldb itself and scripting it (it supports Python for scripting). If you really need to though, a rough outline would be: * Run as root, otherwise the security system won't let you do it (I don't actually remember if just being root is enough on modern systems. Been a while since I needed to know this, heh) * Get the mach task port for the process in question via task_for_pid() * Use mach_vm_read(), targeting that task port, to read the memory Looking at the open source mach_inject project might be a good starting point.
Protocol oriented programming, in swift, is a way of organizing your code in such a way as to almost permanently crash sourcekit and render xcode nearly unusable. Especially mixed with generics :)
Please, I have been doing some string to HTML stuff in swift for my GitHub and I have actually stopped doing it and moved onto some other projects I had as it's so complex edit - spelling (I didn't realise I was so bad on mobile)
This is proposed by two members of the core standard library team at Apple -- it's definitely gonna happen!
If you're passing in strings based on external input, such as a filename based on something supplied over the network, somebody might inject shell code that gets executed. For example, the filename `x"; rm -rf /*;"` might do something you didn't expect. You can escape the string, but there are many possibilities for injection with a shell, and you have to take care of all of those.
Wooooo How soon is this going to happen!!
Based on previous years, Swift 4 will probably be available in early versions in May, with an official public release (presumably with Xcode 9 beta 1) likely in June at WWDC, and a final version (presumably with Xcode 9 GM) likely available in September.
Or even easier without URLRequest if you don't need extra stuff, pass the url directly to the URLSession: let par = ["page": 2].stringFromHttpParameters() let url = URL(string: "example.com"+par)! let task = URLSession.shared.dataTask(with: url) { data, response, error in // stuff } task.resume() 
❤️
[Apple's debugging Auto Layout guide](https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/TypesofErrors.html#//apple_ref/doc/uid/TP40010853-CH17-SW1) is pretty good. When I started out, I also learned a lot from [this AppCoda guide](http://www.appcoda.com/auto-layout-guide/)
This was a great reply.
Yeah, thats crazy. Maybe if characters appeared in the list " ! " would be in the top 10.
I've been developing with Swift for about a year now, but I have never encountered any difficult with Strings. Could you give me a common example of problems with String and what these changes will do to improve that? I'm really curious.
Last I checked, Swift strings don't have a method for calculating their text size so you'll have to go with NSAttributedString. Basically, you know how big your labels are so calculate a text size with an initial font size and if the size of the text exceeds the size of your label, drop down a size for the font and repeat. Do it for both strings and then pick the smaller font size of the two. 
thanks
Im just starting to work on my WWDC 2017 Scholarship. I think its safe to assume it'll be a biography-esque app as it has been in years passed. Got it all sketched up and I'm excited to put my Swift skills to the test by building this app with 100% code no storyboard or anything.
If you're building iOS apps, you're unlikely to encounter big problems. It's when you start writing things like parsers/lexers and doing backend work that things get annoying (and slow).
Interesting stuff... Wondering - is there anything in Swift that would preclude Apple from using bitcode to cross-compile to ARM
Protocol Orientated Programming (POP) is NOT the heart of Swift. Swift is an Object Oriented language. They have made protocols more powerful and extensible compared to Objective-C and other languages. It's just a tool that can be used, but not the only tool for doing things. I've come across a couple scenarios where using a POP made obvious sense, but I've seen more scenarios where people go way overboard with them.
Trying to use Swift types. It doesn't look like you can. Yet at least.
If by access you mean read, see the implementation of value(forKey:) function in the first gist in this article: http://blog.idapgroup.com/any-can-bite/ It's a sample, in your case you will need to change the signature to provide external object. Can't send you a precise code for your case, as I'm on mobile. Also, read the article. Swift reflection has its quirks, if you have an optional property and want to cast them to protocols. If by access you mean writing, you won't be able to do that, unless @objc, dynamic or NSObject is used and then KVC. 
The best way I can describe it is through an example. Think about if you had to write a bunch of types to describe various animals. They all have different attributes and abilities but they also share some common attributes and abilities with others. The slow way to implement this would be to implement the abilities over and over again in each of the types. Instead, using protocol oriented-programming, you can create different protocols for the abilities and attributes: * FourLegged * Jumping * Biting * Etc. You can then have each animal implement those protocols and put the implementation directly on the protocol by extending it. Now whenever you have new animals you can easily have them get all the various abilities and attributes by picking out the right protocols. You can also easily add new functionality to existing protocols and all the appropriate animals will get that. Beyond that, you can start to write other types that take only certain combinations of attributes. If you wanted to write a function that only allowed receiving a FourLegged animal that could Bite, you can do that. This is all done with each actual animal type not being particularly dependent on the protocols it implements. You should be able to make changes to the protocols without having to do too much to the types that implement them.
Just released an app that allows you to browse and save wallpapers from Unsplash. [Link](https://itunes.apple.com/mt/app/papers-beautiful-photos-from/id1195554910?mt=8)
&gt; I know of several ways to do that, but still am interested in your vision. How would you use FRP or promises without VMs. I mean, how would you decompose the tasks on the high level to incorporate FRP or promises without VMs? Huh? I don't really understand your question... the two are orthogonal. You can do FRP without MVVM (FRP predates MVVM by many years), and you can do MVVM without FRP (see .NET/WPF). &gt; That's obvious, but how would you handle the specific case I described above in classic MVC, where each model has tons of ways of processing it from the data POV? Need a more detailed example I think. What does it mean for "each model to have tons of ways of processing it from the data POV"? &gt; Perhaps, we have a misunderstanding here. I'm not advocating for VIPER. The question I raised was a more general one. Even MVC, if done properly (not massive view controllers and viewDidLoads) has a sophisticated structure and is not that easy to comprehend. So, it's basically the question, would you sacrifice the MVC or any other approach in order to make the code comprehensible? Or would you rather expect the person to dive into the approach you are using in the project? Maybe. I think you are viewing it as spectrum of complexity: (Least complex) No structure ----&gt; MVC ----&gt; MVVM ----&gt; VIPER (most complex) With the argument being that, well if each approach adds additional complexity, and "complexity is bad", why do we even bother with any organization at all? But from my perspective complexity and maintainability are two separate dimensions. Something with zero structure (let's say your classic spaghetti code that beginners write) is simple due to its lack of structure, but it has low maintainability because the code is scattered and disorganized. So you begin to add some structure (say with MVC), things get more organized and therefore become more maintainable. So far, so good. Then you keep on adding more structure, but actually maintainability does not continue to improve, it begins to decrease, due to the additional overhead of the extra classes being created that you have to jump around to actually follow the flow of execution. The sweet spot is somewhere in the middle, where you have just enough structure to promote maintainability, but not too much that it becomes a burden. So I think the question of "sacrificing MVC" is not the right question: sacrificing MVC reduces maintainability and would not make the code more comprehensible. (This same situation is perfectly illustrated in the code snippets in your original article. At first, the code is unstructured and repetitive and has low maintainability. Then you begin to add some abstraction, and maintainability improves. So far, so good. But then you layer on more and more abstraction, and maintainability drops once again. The sweet spot is somewhere in the middle.)
Sadly, the only option for now is the code generation of an extensiom, where for each key there would be a setter function setting a property.
Okay thank you for that explanation!
Please use github (or something like github) instead, i promise you will not regret it :)
Object Oriented as in Inheritance/polymorphism? I guess so. You still need some sort of "object" to conform to a protocol. You can't pass protocols around since they don't contain logic or hold data. Also, they included in the language because it does have use cases. Not just for backwards compatibility.
I'm at a loss for the use cases. I've been programming in go for a while now and I don't miss OOPS and it's leaky abstractions at all
To be fair, most languages don't handle Unicode strings properly and will fail when array indexing into a string like this: "🇺🇸Hello🇺🇸".
[removed]
True but if they could be stored as a "unit as such" that would just mean cutting through units 
[removed]
I find myself having to extend String far more than anything else. This will be a very welcome addition...
As a young Swift developper, 'guard' should be way higher, isn't it ?
[removed]
"it won't let me cd into the project folder" "it" is what? bash? Xcode? your Mommy? we can't guess these things you know. How do you know "it" isn't working? Is "it" giving an error message? If so, I reckon you might get higher quality answers (than this one, for example!) if you share that error message with us.
Thanks for the reply. I'm new to core data. The ideas make sense, I have some experience with MySQL, the ideas are similar. I'm fuzzy on how the core data relationship functions. I wanted to confirm my strategy before diving in. 
Hey, do you know of any good resources for learning more about "DSL" or compilers? 
I fully agree and was disheartened to see this grave misfeature from C++ being included in Swift. 
Here's an example from my code. It grabs a JSON object from the start of a string, and then removes it from from said string. guard contents.first == "{" else { return } let range = contents.range(of: "}")! let indexOfJsonEnd = contents.distance(from: contents.startIndex, to: range.upperBound) let json = contents.substring(to: contents.index(contents.startIndex, offsetBy: indexOfJsonEnd)) let jsonData = json.data(using: .utf8)! contents.removeSubrange(contents.startIndex...contents.index(contents.startIndex, offsetBy: indexOfJsonEnd))
UINavigationController w/ a bunch of UIButtons, possibly in a UITableView or created programmatically? Each button then pushes the next view onto the UINavigationController. Pretty simple
It's funny because it's true I use protocols with `associatedtypes` a lot and before you know it, I'm seeing `&lt;&lt;error type&gt;&gt;`s everywhere ben though the compiler builds it just fine. 
Anyone know why CHECK is so high on the list?
unless there's hidden complexity behind those buttons, and if you already know html and javascript (and presumably css), you could probably do it with just that. Otherwise, if you are wanting to learn iOS programming as well as a language (presumably Swift) it takes a fair amount of effort to get up to speed with all that. There's no way to give an exact estimate of time because some beginners are absolute whizzes and others are complete dullards, and until you do it there's no way to know which camp you fall into.\ Edited to express my sorrow that I couldn't think of a clever pun to reefer to the topic of the app.
Swift uses LLVM's FileCheck for testing, I'm guessing it's because of that. http://llvm.org/docs/CommandGuide/FileCheck.html Here's one of those files: https://github.com/apple/swift/blob/c3b7709a7c4789f1ad7249d357f69509fb8be731/test/Reflection/typeref_decoding_objc.swift
They really need to rethink strings for Swift, it's an ugly mess right now! I have an extension with like 20 methods to make String usable, REGEX, substrings, etc. I agree that they are correct, but I don't know anyone that likes Swift strings.
Of course they discussed it, but I can't help but feel like they rushed Swift a bit too much. I don't mind the breaking changes, though, and my company doesn't either, but others aren't as fortunate.
&gt; For those of you not aware, if you set an enumeration to have a raw type of Int, it will automatically assign each successive case the next integer value starting at 0. Therefore, *I always leave the last case as a "count" case which will be the total number of cases.* Nifty trick.
You haven't really explained what you are trying to do: "...an app that shows multi directions from different points" I'm sure it does describe what you are doing, but there are literally 100's of things you could do which meet this same description. So, there are likely 100 answers people could give, and 99 wouldn't actually fit what you are trying to do. nevertheless, I'll have a go, because I'm a 'wild and crazy guy': Why not draw multiple overlays; one for each colour. So, if you want 4 different colours, draw 4 different overlays and make the first one red, the second orange, the third yellow and so on.
you are right, let me explain with more detail. For example, there are 3 different points which are in the different places on map, and when I select a destination point on mapview, it shows 3 different directions to destination point for each point. And i want to see different colors for each of them. By the way, I can't make stabile overlays, maybe there will be more then 4..
IMO this is better: extension RawRepresentable where RawValue == Int { static var numberOfCases: Int { var counter = 0 while let _ = Self(rawValue: counter) { counter += 1 } return counter } } Basically it adds `numberOfCases` static property to each enum with `Int` rawValue, iterates trough them and returns total count. Of course only works properly with enums which have raw values as consecutive integers starting from 0. It's better than adding `count` case because it doesn't interfere with enum's exhaustiveness in switches. 
You could constrain `RawValue` to be any type conforming to `Integer`, rather than requiring it to be `Int`.
For now, foolproof version could probably be implemented with code generation using Sourcery: https://github.com/krzysztofzablocki/Sourcery#examples
Yes absolutely, just like SQL injection, thanks for the warning. You have to sanitize all input. I have been very conscious to do so and really nothing I am using it for is based on user input. I think saying that this shouldn't be used in production is like saying you shouldn't use SQL. But you are absolutely right and I am going to update my post with a warning.
According to documentation `Integer` protocol guarantees `+` operator existence, but not `+=`. That's the reason.
Yes indeed, one of the most infuriating thing about Swift development/Xcode right now is the way you need to compile your code to force obvious errors to appear. 
Closures and how variables are captured could be an interesting topic as well.
You can give it placeholder constraints that will be removed at runtime. 
So, you'll need an array to hold which states they choose (because you seem to be saying they can choose any number). And then you can make a loop over that array and create an overlay for each state they chose, and assign each overlay a different colour. And you could have an array of 50 colours (because they can't choose more than 50 states) and use each colour in turn. So, on iteration 0 of the loop, you draw the directions to state[0] in colour[0] and on the next iteration you draw the directions to state[1] in colour[1]. 
Thank you! Have a nice day.
Yes, well, you gotta crawl before you can walk. You should ask your friend Google for Swift programming tutorials and iOS programming tutorials and learn the basics before trying to do advanced things like maps with overlays and multiple sets of directions.
Aye aye Captain! :))
I agree with the sentiment to AVOID using force operators but I cannot get on board with the idea of NEVER using force operators. There are absolutely times when it is better to use forced unwrapping, implicitly unwrapped optionals, and forced type conversions. As a general rule, if your program won't be able to recover from a situation use the force option. Try as hard as you can to find ways to recover, but don't just do an optional binding and some print statement that "this shouldn't have happened". You do not want your program to die of a thousand cuts, you want it to fail as quickly as possible so you are immediately made aware of the exact problem. Also, I wrote a [post](https://drewag.me/posts/2014/07/05/uses-for-implicitly-unwrapped-optionals-in-swift) a while back about when it is appropriate to use implicitly wrapped optionals.
I broadly agree with the concepts in the article, but articles that tell you the way you are writing something is terrible without even touching upon how one could write it better come across as lazy. 
Version 1.3 of [ScoreBreak](https://www.youtube.com/watch?v=QOPS4w6ld8w) made a public launch November, 2016. Now we are continuing to refine, v 1.3.7 was released a couple days ago with a component that my friend and member of our board of advisors said: 'Nice, you made iMovie for sports teams" when commenting on how silky smooth our scrubbing is, definitely thanks to Apple's APIs here. 
Swift also can do this already. But you have to go through the `.characters` view. This is because the character array of a concatenation of two strings is not guaranteed to equal the concatenation of the two array directly.
I disagree. Yes there are parts of an iOS app that are still going to have to interact directly with Objective-C APIs because of UIKit, but plenty of your code will not being interacting with Objective-C, most importantly, all of your business logic. And if you are using arrays or dictionaries in your apps you are interacting with generics all the time. My code is littered with generics. Not much of it is particularly complicated but they are certainly useful.
I find myself spending way too much time asking myself "how can I work around this missing feature" to consider using generics or POP. Maybe if I kept bashing my head against the incompatibilities I'd develop memory of the list of problems. But I haven't yet and always find the workarounds to be both uglier and inferior (code quality wise) than doing it the Objc way. 
Fair enough. In the end, to each their own. I can't call you a bad developer just because you don't like using generics. There can definitely still be an element of head bashing when it comes to the more advanced Swift techniques but I encourage you to try them again every so often. I do believe that when they are truly ironed out, they will be very powerful. However, I do discourage just writing Swift as if it is Objective-C. If you don't feel Swift is ready to use it in its own right, that is fair, it is probably better to just stick with Objective-C. Objective-C will not be going away any time soon.
Perfect! Thanks
Added.
You forgot https://swiftweekly.github.io/ Both swiftweekly use the same name but are managed by different people. ;)
I thought they were the same. Added.
A nifty trick, but also a risky one. Swift is still changing each release, and this is certainly not something that is guaranteed to work in future versions.
What happens if you just encode the vcard into the QRCode as an ordinary text string?
It's really just another tool in the belt. I personally hope they don't venture to far from OO paradigms. I'm not a huge fan of POP overall. I like that we can use extensions to instead of subclassing, but lots of people seem be using POP, for the sake of using it, even when it doesn't make sense.
I disagree. The String type shouldn't be responsible for its own validation. It shouldn't be both the subject and the object. A vaildiator does the validation on a string. The validator is the subject, and the string is the object. This buys you flexibility in being able to introduce polymorphism and configurability on the validator side, rather than baking each separate possible validation task as an Extension on String
This helped me get a handle on graphs https://www.raywenderlich.com/152046/swift-algorithm-club-graphs-adjacency-list
&gt; You can then have each animal implement those protocols and put the implementation directly on the protocol by extending it. This sounds like you're describing mixins more than protocols. Though granted, in Swift mixins are a feature of protocols. 
If you click on a word it shows where it was found. The list includes words that were in comments. For CHECK (as well as the, The, and a bunch of others) it only appears in comments. They also have a couple weird parsing things like "don't" or "apple's" was parsed as "don", "t', "apple", and "s".
I personally, think the count trick is poor practice. It breaks the concept of "one responsibility" and makes it more difficult to use an enum everywhere else. I spent a lot of time looking into the `count` issue and I ultimately decided it was better to use a var and update the count manually. Here's my recommendation: enum Sections: Int { case contacts, info var count: Int { return info.rawValue } }