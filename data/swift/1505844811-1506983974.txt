You can have two versions of XCode on the same machine you just name one something else. Just be careful to make sure you're opening your project in the version you want since it'll default to the newest. 
I was hoping to get a Mac mini which at first seemed perfect but they're still $400+ for 2014 hardware, 4gb ram and a 5400RPM hard drive *cringe* I was hoping to spend 400 or less but that seems like it'll be hard 
I learned Swift and Cocoa and Xcode (Xcode is a near-vertical learning curve if you're used to developing in C on Unix with Make and such and Vim for an IDE) on a Hackintosh that cost $300CAD to build. That led to dropping $3000CAD on a new 15" retina Macbook Pro that I use now.
Hey, you're awesome! Thanks for writing everything you've put together! I'm excited to see where I can go from here. I work in finance/real estate. Are there other software related skills or resources that I should look into that would be relevant for someone with a background like mine, where a lot of my desires to learn stem from the non-technical systems and processes within the real estate industry? Hoping to take advantage on some ideas I have thought up. 
Most of my books are about coding, but one – [Beyond Code](https://www.hackingwithswift.com/store/beyond-code) – teaches a variety of non-coding skills that most developers find useful. If you're just after more and more coding skills, then any of the others :)
Would not recommend a Mac Mini 2010 unless it's seen very little use. I got mine in 2011, upgraded RAM to 8 GB, and it's maddeningly slow right now. I had to give up learning Swift because Xcode is impossible to use at this speed.
Try not to get too bogged down with Apple's use of major versions. It's mostly marketing. iOS 11, from a development perspective, is no different to iOS 10. There are new APIs, deprecated APIs, etc. However, the fundamentals are the same. This goes for Swift and Xcode, too. (The only exception would be the migration from Swift 2 to 3 which was dramatic).
I looked into building a hackintosh and I don't have a friend who would let me use their Mac and I'm sure no stranger would let me download a weird program on their computer to do that either... Otherwise I would.
Have you put an SSD in it? What about reinstall the operating system?
You might want to check your college's property disposition. I just picked up a 2010 iMac (27") for $400 from UofM Property Disposition. I replaced a 2010 Mac mini with this iMac, and the difference is night and day.
We could set up an arrangement, where I build the Unibeast USB, put Multibeast on it then send it back. I' sure I'm not the only person would be willing to do this either.
You don't need to buy a mac nowadays If you have a modern PC you can install macOS on it! https://www.tonymacx86.com/threads/unibeast-install-macos-sierra-on-any-supported-intel-based-pc.200564/ http://www.insanelymac.com/forum/ 
Best of luck to you, no sarcasm. I've got a well-received if very very *very* niche Mac app under my belt and can't find a single freelance project to save my life.
&gt; Best of luck to you, so sarcasm. Eh? 
Edited. Oops.
Oh, haha! That makes more sense. I'm sorry to hear that it's difficult to find freelance projects for you. If it helps, it's becoming more and more difficult for everyone, as the industry changes. Especially, with these websites that allow people to book freelancers, who often will quote $200 for an entire app. (Which is why I was targeting non-commercial projects in this post).
Why not try the second hand market? I do development, when I’m on the road, on a 2012 MacBook Air. So you don’t need a super powerful machine.
Has anyone checked if that can run Xcode and the compiler tools? Also worth noting is Vapor, which allows Swift to be run on non-macs. I’ve tested in Ubuntu before and it’s okay. Still can’t build to phones or simulators. Nor can you use many of Apple’s underlying libraries. IMO it’s insufficient for learning but fun to play around with.
I made My pc into "Hackintos" about a month ago, works like a charm. I can boot to win 10 or sierra, both installed on different SSDs. 
I've reinstalled the OS (despite Apple's recommendation that I not do so). I haven't installed an SSD, that might make some difference. 
If your PC has high enough specs you can ran sierra on virtual machine and through that your xCode. But making hackintos is much faster solution ofc. And it's possible to install macOS on amd based pc, its just a bit harder. I can point to right direction if needed. EDIT: I run amd based system myself
Everything works fine, i dual boot macOS Sierra / Win 10 I released an iOS game using an Hackintosh in 2014 Only thing that you **must** know is that nothing guarrantees you that your system will be future proof (driver/os update) EDIT: If you want to try it, make sure you install macOS on a different drive, and make sure you unplug your HDD/SDD where windows is installed, just in case you do something wrong :) A backup would be nice if you can 
I have a late-2011 MacBook Pro, upgraded it to an SSD and 16gb RAM, it's a beast! my daily driver and cuts through Xcode like a champ. I see these on craigslist for $300ish, and then you can buy the upgrades for $150ish (or so?). thats my suggestion. 
That seems very doable if I could find one that cheap. I see people wanting $600 for their 2011 macpro
I am only looking second hand, but they are so expensive because people value Apple devices more.
I'm not sure if I want to do it because I want to have WiFi on whatever machine I have it on without a dongle, as well as audio etc which I hear breaks a lot...
Can we get a converter that converts ObjC-&gt;Swift2-converters to ObjC-&gt;Swift4 converters?
Don't spend money on a mac mini, those are way overpriced. If budget is tight I'd recommend a hackintosh. Not a 100% Mac experience but good enough for using Xcode. Go over at /r/hackintosh for help.
At home i just develop on Mac OS in VMWare and a simulator.
we can definitely go deeper! :)
Might sound pretty stupid but how do you simulate the apps on your phone instead of an simulator? Majority of the times it just freezes my mac when it's running and I have to wait for ages for it to get back to its normal state 
Do not get a spinning hard drive. 
That's what I'm trying but it's so hard because Macs with SSD are soooo expensive
Wow, even the second hand is expensive? I had no idea. I’m not *too* surprised, though. My 2012 Air is still amazing, I never have problems. It’s only a little slow compiling massive projects.
I don't see anything past 2010 going for less than $600 :/
Ouch.
Do you want to get into Swift development, or iOS development? You can run Swift on pretty much any operating system these days.
No.
Ideally both but I'm starting to think the entry fee is too high for me 
This is what I do xcode dev on: * Early 2011 MacBook Pro * Processor: 2.7 GHz Intel Core i7 * Memory: 8 GB * Graphics: Intel HD Graphics 3000 512 MB * Display: 1280 x 800 Handles xcode no problem. Only struggles with the simulators with bigger screens. So I stick to the iPhone 5 simulator (Don't know if this is going away with new version of xcode). And then I use my iPhone 6 plus to run on a bigger screen no problem. Only problem I find is the display size so use an external monitor.
I got the same machine. I put 8gb of ram and installed an ssd. It runs fine with dual monitors. I’m learning iOS development on it and it runs better than expected.The real slow downs occur when you run the simulator with Xcode but I hear that with Xcode 9 it should be better. I usually code on one screen and watch a stream on the other. No issues yet.
Having ported several thousands of lines of Objective-C to Swift, I'll grant that it's possible, but it's not at all obvious to me. Do you have any measurements to support this claim? Lots of porting is "This isn't needed at all", or "This is completely different", or "This pattern again -- keyboard macro time". A lot of the updates are faster and easier to do in Objective-C, because it's got @ markers and "NS" prefixes to make it easier for regular expressions to latch on to. What is your bottleneck when converting code? I could see this being helpful if one's bottleneck were "typing speed", but in my experience it's not. (It never is, in programming -- which is why programming interviews, as bad as they are, don't include typing tests.) It might be helpful if this converter could load an entire project and make global uniformly-correct changes to the AST, but that doesn't seem to be what it's doing. It doesn't even understand the difference in comment syntax between C and Swift.
You don't simulate them on your phone, you load them and run them natively.
You are right but for me typing is definitely a bottleneck. Typing out method names and what not. You still have to massage the resulting code quite a bit but right now, I comment out the method bodies and replace them wirth fatal error, get things to compile and the slowly port things. It really reduces the typing by a lot. You are right that you don't need some things but moving code around and deleting is still faster than typing. It can't load a project but it does find headers pretty well. I wrote a script that traversed the whole project and just executed the command for each file.
storage
Don't get the air. MacBook (regular) is still a good computer, though. If you're constrained for budget, it's a solid laptop. It *can* run Adobe things fine, but don't expect to do much multitasking. I use a 15" Pro. 1TB is overkill. You can buy multiple terabytes of external storage for the same cost in upgrading. 256GB is a bit on the small side, depending on your use case. I stick to 512GB. Since RAM can't be upgraded (easily), just be sure to get a 16GB model. 8GB isn't *bad*, but it's a minor cost for a potentially significant improvement (again, that multitasking thing). Processor upgrades are really not a big deal. I have one of the lower-model processors on the 2017 15-inch and it's more than sufficient, really. Unless you're constantly maxing out your cores, you're unlikely to notice a significant difference. Not worth the extra hundreds of dollars. I think the more important thing is the particular model you get. I love the 15-inch. I like the size of the screen, and it's really not very heavy (and it's a pound lighter than the older model 15-inch, so that's cool). If you're super concerned about portability, then maybe consider the 13-inch. Just go to an Apple Store and feel them and play with them. Figure out what you want by physically experiencing it, since you're about to dump a ton of money on the thing.
Buy the new 15" MBP with 16GB RAM and 1TB storage. Adjust the processor depending on how much room left in your budget. My wife recently bought new 13" MBP with 8GB RAM and 256GB storage. In less than a week after purchasing the unit, she had less than 15GB free space remaining. We realized there is no way this unit will last her 3-5 years. Luckily, we were able to return the unit and buy the one with 512GB storage. She is not even a techie or super user. I have a 2012 15" MBP with 8GB RAM and 256GB. For last two years I have been fighting running out of free space and RAM limitation with data-intensive tasks. Any future Mac purchase, I will not buy if I can't afford to max out RAM and storage as I want my unit to last at least 5 years. Minimum specs for myself are 15" MBP with 16GB RAM and 1TB storage (will prefer 2TB) if I can afford it.
I use a MacBook Air and I have an app in the App Store. If you're compiling a huge app, maybe best to go with a MacBook Pro.
I was in your boat and opted for more storage. I wish I had gone with more memory. Virtual machines and browser tabs eat a lot of RAM and that's primarily what I do with it. I have a NAS for media so my space needs are minimal. 8gb is still plenty though
Memory, followed by the processor and lastly the storage. 
What I did with my Hackintosh back in the day was I bought a Macbook miniPCIe Airport card, and put it into an adapter PCIe board.
It will, very much.
Great idea, but I feel like using an iPhone 7 doesn’t do it justice. Most likely will preform better on 8, 8 Plus, and X.
My Mid 2012 MBP, on which I have developed iOS apps full time for several years, is currently using just over half of a 750GB SSD. You need an SSD for rapid disk access, but they all have that. Space is not terribly important. 512GB would probably be fine, I've never been above that. I would recommend 16GB RAM. I have 16GB and it's been fine. Less would slow things down quite a bit with all the apps I have open. Processor doesn't matter too much, but if the difference isn't too steep I will go for a faster model. Edit: Note that this machine is purely an iOS development work machine for me. I have a desktop as my personal computer. Get more disk space if you plan to make this machine your dumping ground for photos, video, music and other junk. If you just need it to develop apps you don't need that much as detailed above.
Have you thought about tutoring new devs? $25/hr is really reasonable and you might have some fun pairing with people excited about learning Swift.
MBP &gt; MBA &gt; MB Memory should be maxed, HD space can be sacrificed if necessary. Getting a 2 year old top of the line is better than todays bottom of the line for sure though.
With the current lineup, I honestly feel that the Air is obsolete. If somebody just wants a less expensive Apple laptop, they should either be getting a refurbished previous model Pro or else a regular new MacBook. Not hating on the Air — it had its time. It's just that I think its time is over haha. Personal opinion.
Finally released my new app, [Bitbook](https://bitbookapp.com)! It's an app for comedians to organize all their material (text, audio, videos). I know you can use Notes and Voice Memos to do that but I figured this was a good idea to keep track of everything in one app.
I’ve been using it in the Xcode 9 beta. And now Xcode 9 is out. In your devices to run drop down, you’ll see an icon on the right to represent the wifi connected status. 
Absolutely, that’s super exciting to me. The only issue is committing to longer contracts (as I have to work it into my schedule). In other words, someone looking for a tutor might want 10-15 hours, versus 1-3 for a project. I see tutoring / teaching as longer term goal, but I’m totally open to it.
My 2 cents... if you have space for it, get a 5k 27” iMac with a 256GB SSD (not fusion). You don’t need a lot of storage if you’re just doing development and not storing lots of photos and music, and the SSD will speed up compile for large projects. Step up to a 512GB SSD if you plan to also run windows via boot camp or a VM. Memory is upgradable on those, so you can put in more later if you need it. All the processors for that model are sufficient, and these also have a dedicated GPU. Most importantly you get a built-in, huge really nice display to use with Xcode. So much room for storyboards. You can get the current model as refurbished with the same warranty to help control cost.
I don't know how you work, or what kind of software you plan to write. For me, screen size is more important than any of those, by a country mile. Keyboard and mouse are a distant second. I think a 15" laptop is barely passable as a development machine, but it's not exactly pleasant. You're not going to have a lot of space. I really don't know how people work on anything smaller than that. Even on the biggest MacBook Pro, I'm constantly scrolling and Mission Controlling just to find the thing I need to work on. I'm several times more productive on my desktop. What are you doing where 500GB (or more) would be relevant? You could spend 18 hours a day typing source code and installing dependencies, and never in your life make an app that used more than 1% of that. Firefox is about 120 MB -- are you planning to write an app 50 times more complex than Firefox? A reasonable minimum for macOS these days is 100GB disk and 8GB RAM. At that point, I'd spend my money on some nice big displays, before I spent any more on the metal. A 1TB SSD isn't going to do you much good if it's attached to a screen that's so small it hurts your eyes to use, or a keyboard you can't type on. 
For development, RAM. 8 GB is not gonna cut it for too long and macOS is RAM-hungry as is. You're gonna want to run virtual machines in the form of either iOS simulators or occasionally Linux depending on what kind of development you do. Also for 13" MacBook Pros make sure you custom upgrade to 16 GB of RAM and for the nonTB model AVOID the 128 GB base model. 128 GB of storage is nothing. For CPUs, as long as you don't do something like a 12" MacBook with an m5/i5 (for the 12" you /need/ the i7), there really isn't a /huge/ difference between same-size models warranting the price tags they carry. But the upgrade from 12" -&gt; 13" -&gt; 15" is noticeable CPU-wise. Also wrt to storage if you have particularly heavy files you need stashed somewhere just buy a good ol' hard drive. You can get hard drive to USB-C cables off Amazon for like $10.
Thanks for the response. I have an exterior hard drive to dump all my photos and videos into. I have a full frame dslr so those pics take up a lot of space. Yeah it's looking like 16gb and 500gb might be enough. You're reply definitely helped. It nice to see that after so many years it's still usable with those options. 
Yeah. I'm not crazy about having to either carry a dongle to plug my sd card into or having to plug my camera directly into the computer which is really slow method of transferring pics. I was leaning toward finding a gently used older model with more top of the line features. I figured anything 2013 forward would be good. Thanks for the reply!
Mac mini owner (i5 2.7, 8 GB, 1 TB HDD) here. My dad has a theoretically slower MacBook Air that is 700x as snappy. The SSD makes All. The. Difference.
I kind of fell the same way. The upgrade options aren't that great, and seem a little slow to try and be coding on and editing photos and videos on. My current laptop is a bottom of the line 2013 MacBook air. It just can't handle everything I want to do. 
Thanks!
Thanks for the reply! Good to know. 
Thanks for the suggestion. Maybe someday, but right now I need a laptop. I want to work remote for a while and travel. Lugging a iMac around would be challenging. But I will keep this in mind for when I put down roots!
I can see your point. I'm just getting into coding and development, but my current macbook air just can't keep up with everything. So that's why I'm looking to upgrade. I need a laptop because I plan on traveling and working remote in the near future. I can also plug a laptop into a TV and use the TV as a screen down the line, or into a display later on. That's why I want to make the investment into a good computer that is going to last. But thank you for the insight! 
Thanks! I have a hard drive so I'm good there. But yes. This is very helpful, thank you for explaining it all out. 
Wow, thank you for the response. Yeah, thats what I have been worrying over. I want something that is going to last. 
Ram, processor, storage in that order. When You run low on ram, everything drags to a halt.it will take you much longer to write the actual code. Processor will speed build up, but build take a fraction of your actual development time. Lastly storage. It's very easy to move infrequently accessed files to external storage. Go for 16gb of ram if you can. On 2 years, 8gb will not be enough ram.
That's why I'm staying away from the piece of crap 5400rpm drive lol. Apple tries their hardest to bake in some planned absolesence :)
 I have a MacBook Pro with a 256GB hard drive. It is too small, although I (try to) keep it for applications only with data on an external. I'm always having to clean it up to reclaim space, especially when I want to install a beta version of Xcode. Definitely get a larger hard drive, 512GB would be enough with an external for data (and another external for Time Machine backups!). 
Get a Mac mini late 2012 and upgrade RAM and SSD. The upgrade is optional but will help with speed.
This seems like a nice path since I assume 2012 is the cutoff for the easy-ish upgrades and non soldered ram?
Yes.
The class file is ParkTableViewController: UITableViewController I changed it to a UITableViewController because someone said it might fix the issue. 
Hi raxreddit! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/718huz/ar_basketball_app_hoop_stars_play_ar_basketball/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
I don't think a 2013 is good go. I think a 2015 is a lot better bet on many angles. Mac's last a long time. 
Got to release my first app today! It's called [SmartFilter](https://itunes.apple.com/us/app/smartfilter-for-messages/id1271258894?mt=8) and it uses machine learning to identify and filter spam SMS/MMS messages within the Messages app. I've been working towards this all summer and I'm really excited to have released it. A big shout out to u/twostraws for his Hacking with Swift series. It gave me the boost I needed to put this thing together.
its not even planned obsolescence shit's slow out of the box 
updated code in post. 
Yeah but everyone bought a Mac mini knowing it had a 5400rpm drive which is Garbage. Come on, apple. 
its pretty infuriating
I was not aware that the introduction of the new KeyPath mechanism in Swift 4 would have any effect whatsoever on the string-based key paths. Could you please give an example of something which worked before and doesn't work now?
it is like for...in in js
Problem solved. It seems that each property you want to make accessible KVC needs to be marked with @objc. Makes sense. give the Objective C origin of string-based KVC, but a bit annoying it isn't spelled out anywhere! Thanks for the reply.
I can't even find a 2012 that's not an auction under 400...
Ok, but in your project do you have a separate file for the parkCell? It should have the line Class parkCell: UITableViewCell { ... At the start. 
Thanks for responding. I'm new to programming, Swift is the first language I'm learning. Canyou explain what you mean? 
You in the US? I found one for £260 ish in the UK IIRC. On eBay.
Validate data with Vapor. In this post I'll cover the basics of data validation using Vapors Validator, and also show how you can use it inside your Model.
This mean that by 'in' you are getting each element of array
https://en.wikipedia.org/wiki/For_loop
Happy to help but not sure what the question is? I wouldn’t quit the day job unless you can afford it. Keep working and learning on the side and start publishing your own apps in the store to get experience and build up a portfolio.
What do i need to add in the TableViewCell file to make it work with the TableViewController? 
[removed]
The most important thing is the disk. Hands down you need a fast IO for your disk. then the processor is the n cat best thing. After that I’d say graphics. 8GB of ram is the minimum to get, but typically you should always max it out. I’m currently running on MacBook Pro retina 2015, 2.4ghz Professor. I do HEAVY dev including android, iOS and nodejs and other web technologies through Docker. I haven’t had any performance issues with these things 
I agree with most if this. Though getting the Macbook Air isn't a bad choice. It's got a better processor than the Macbook's. 8gb is generally fine, but you can't upgrade it easily and in case of the Air you can't upgrade at all since the RAM is soldered to the motherboard. Pick the storage you think you need, I'd say 16 gigs of ram. I would personally get the Air of you prefer battery life and portability. If you need a high res screen (photo editing) and more power, get the Pro. Would personally not suggest the "regular" macbook.
All those things you hated or found difficult: college, learning swift, job...they _are_ hateful and difficult. But they are hateful and difficult for most people, if not everybody. (hateful may be overstating it, but I think at any one time a majority of people find aspects of those things hateful). So, how do others carry on and do it. Sadly, I don't know. Forty years ago, I was in exactly the same position you are in (except the Swift part, of course, back then it was Cobol). I hated everything I started and gave up at everything I started because I hated it and wasn't immediately successful. Now, I'm 60 and have recently quit my latest job (swift programming) because I hated it, as I have hated every job I have had after lengths of service varying from a few days (literally) to a few years. I don't plan to get another job because I know I'll just hate it. I made one good decision in my life: when I was 21 I was living with my parents and realzed that I would rely on them forever if I didn't leave; so I left. That was good because it did get me off my a** and required me to work for my keep and also because I could escape the recriminations of family members for all my failures. If I were in that position today, knowing what I know now, I would have stayed in school and tried to get some counselling, and in particular some Cognitive Behavioral Therapy (which I don't know if it even existed back then); it sounds like that gives practical advice on how to persevere and get through this f*cking nightmare. There's no way I can advise you on whether you should go all in on learning Swift or not. In and of itself, Swift is just another programming language. The one 'magic' aspect of Swift is that it opens the door to iOS programming and there certainly are iOS jobs available to good iOS programmers. But programming, even iOS programming, is full of dull and repetitive tasks and there are just as many coworkers one would rather not talk to as there are in a grocery store. In other words (and bluntly): maybe learning Swift and getting a programming job would be a good thing, but simultaneously you need to learn a more valuable skill: how to stop being dissatisfied with everything - and I'd recommend professional counselling as a starting point for working on that. 
You need to connect your label as an outlet 
This is probably a stupid question but do i need to update xcode or download any additions to the standard library at all? Currently using Xcode 9 GM. 
No need for additional downloads, Xcode already contains everything for Swift. You don't have to update Xcode but I'd recommend to do so.
Thanks for the reply. i’ve already updated to the GM but will download it from the app store now that it has been released officially. 
Have you read the documentation? The first line of both descriptions is pretty clear in the distinction: formUnion(_:) Inserts the elements of the given sequence into the set union(_:) Returns a new set with the elements of both this set and the given sequence var x = Set([1,2,3]) var y = Set([3,4,5]) x.union(y) // result: {5, 2, 3, 1, 4} x // result: {1, 2, 3} x.formUnion(y) // result: {5, 2, 3, 1, 4} x // result: {5, 2, 3, 1, 4} 
Do you know why have they have added NSNib.Name, NSImage.Name, NSNotification.Name? Why not just keep strings?
A for-in loop iterates through the elements of an array. You can read the code as “for (each) element in array”. Your code is executed once for every element with the element passed in.
From what I've read, build number is the same. So you'd be downloading the same file.
How do I convert a playground to swift 4? I tried the convert to current syntax options, but pages with exampleString.characters.count still run (that's Swift 3 right, it's now exampleString.count in 4 right?) 
How do I convert a playground to swift 4? I tried the convert to current syntax options, but pages with exampleString.characters.count still run (that's Swift 3 right, it's now exampleString.count in 4 right?)
Yeah i think that is the case but i don’t believe it will auto update unless i download through the app store. please correct me if i’m wrong though as i would love to be. 
Good point, I think you're correct there and I might do the same
Because you are a human and either you or another developer will likely misspell them. Especially for things like these which are all determined before compile time. So might as well take advantage of it. 
This creates a bit of type safety and allows you take advantage of autocomplete. For example, previously you would write: let image = NSImage(named: "myAwesomeIcon") Now in Swift 4 you would declare all of your images in one place, like so: extension NSImage.Name { static let myAwesomeIcon = NSImage.Name("myAwesomeIcon") static let myOtherAwesomeIcon= NSImage.Name("myOtherAwesomeIcon") } The usage would now become: let image = NSImage(named: .myAwesomeIcon) It just helps remove spelling mistakes when typing the name of your images, and makes it easier to choose the image you want thanks to your image names now showing up in autocomplete.
Ok! it is a little complex but why not.
Yeah us 
You've only linked to a picture of a checkmark.
Thanks! I still don't know how to use the submit post form :D
Validate data with Vapor. In this post I'll cover the basics of data validation using Vapors Validator, and also show how you can use it inside your Model. This time with the link I hope :)
Strings are back to being Sequences. So now you get all the functions Sequence has. This works: // hell ye myString.prefix(2) EDIT: now isn't that much nicer? I'm glad they realized that the oddball edge cases of dealing with strings as Sequences wasn't worth all that extra verbosity *just* to do simple operations like substring. The migrator isn't an omniscient wizard, so I think it was just giving you the naïve conversion.
Cool. Thanks for the reply. I didn't check out any of the new stuff before this morning so this came as a bit of a surprise. The only thing I still don't really like is the extra String.init needed in a lot of places now.
Sure, somewhat better processor and battery but significantly worse display and form factor. For me, that's not a good tradeoff. The RAM is soldered in the Pros and MacBooks too, I'm pretty sure. It's one of the concessions they had to make to get them so thin. In general I always recommend the Pros, but budget definitely matters. The difference between the Air and MacBook is only $200, and for me the screen is worth all that by itself, let alone the better keyboard and weight factor (which matters since we're comparing two ultra-portable laptops). But like I said earlier, OP should definitely go to an Apple Store and play around with the laptops there to make a more informed decision for themselves.
There are a couple good Tilemap-based options including Tiled, which is fairly easy to work with, and the new Tilemap editor built-in to Xcode. Tiled is going to be a little more powerful and customizable, from what I understand. Xcode Tilemap editor just isn't that feature-rich yet, but works just fine for many projects. To answer your question in a broader way: yes, you can just make a large scene and move the visible area around in it (actually you're moving the scene, but it's all relative). Unless your scene is complex or very large, you device should handle it just fine. Then there's always the option of breaking your level into "chunks" (if it's a tilemap, you might call a chunk a 50x50 area), and loading chunks right before they become visible, and deleting chunks from memory that are no longer visible. That's a very common scheme if you're looking to support large levels, like open worlds.
What do you mean?
Swift 4 supports both. But characters might have a warning in Swift 4
 static func removeCode(fromString:String) -&gt; String { return fromString.substring(from: fromString.index(fromString.startIndex, offsetBy: 3)) } is now: static func removeCode(fromString:String) -&gt; String { return String(fromString.dropFirst(3)) } Which is cool and all but I don't like the necessary type conversion from substring to string everywhere. If I was to do this in lots of places I would probably extend substring with methods like dropFirstToString(count:Int) -&gt; String
I'm just learning swift now. Are the changes substantial enough that I should find a new tutorial?
Meta af.
Then just write an extension that does that (: that's the beauty of Swift, my dude. And I'm sure you already understand that, while somewhat annoying, it actually makes perfect sense; it's a performance enhancement, that allows you to do that substring copy when you finally need it. And something you might be overlooking is that String.init is actually making you actively think about how Strings and Substrings are working behind the scenes; that's usually a good thing. By burying the cast inside of a function within an extension, you're losing those semantics, which you're just regaining/replacing by naming the function "...toString". If anything, you're typing more for no gain. But I'm just being semantic-pedantic 🤣, you can use extensions however you want. EDIT: and I really hate to be that dude, but do you take advantage of parameter labels being separable from parameter names? I think the style guides would suggest something more along the lines of: static func removeCode(from string: String) -&gt; String { return String(string.dropFirst(3)) } Makes it more clear. The type doesn't need to be a part of the label because intellitype lets us know that already. Again, not try to be that dude, but some people actually don't take advantage of that to write clearer code. Added bonus: If we ever wanted to change the name of the local variable for some reason (i.e. to make our code clearer in its intentions), we could do it without breaking any of the calls: static func removeCode(from prefixedData: String) -&gt; String { //... }
What tutorial are you using? 
At this point, think of an array as a bucket full of things. _[string]_ means your function is expecting a bucket of strings and in your code snippet you are passing it a bucket with two names in it. A _for_ loop is basically saying, "for every thing in the bucket, do something." In this case, your code is taking out every name in the _to_ bucket/array, one at a time, assigning that name to a _person_ variable, and printing it. I think it might be a little clearer with a better variable name: func sayHi (people: [string]) { for person in people { print("Hi \(person)!") } }
Not really if you’re on 3 now.
Except he should ignore all the parts about String not being a Sequence. That's gonna be the most obvious difference (subtractive) from a Swift 3 tutorial.
You will be fine continuing to learn Swift 3 and iOS 10, but I do suggest updating to Xcode 9 as it has a lot of QoL changes. 
Yep. Side project not production code. Haven't done a style fix up yet and bad habits die hard.
Oh my god, I've been trying to figure this out for like a week. Thank you! You saved my latest update 🙏🏼 
 2017-09-20 16:19:13.112077+0200 Ramble[34479:2576971] *** Terminating app due to uncaught exception 'NSUnknownKeyException', reason: '[&lt;UIViewController 0x7f895de03c20&gt; setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key gifView.' You have an outlet in the storyboard pointing to something called `gifView` that isn't in the `UIViewController` class. If this is a custom UIViewController class, make sure you have defined the class in the storyboard for this view controller.
Good try OP.
Does this apply to UIImage too?
When should we start upgrading to 4?
Get in the habit, it's gonna be worth it! Use side projects especially as an opportunity to improve style. It's gonna make maintaining and reading your code on your real projects a breeze! Refactoring a project won't be (*as much of*) a nightmarish endeavor. I read the [GitHub Swift style guide](https://github.com/github/swift-style-guide/blob/master/README.md) and the official Apple one every now and again to keep it fresh in my head.
You can if you can push those libraries into the sandbox via git so they can build in their environment. I haven't figured out a good way to do that yet.
That makes me happy. You're welcome.
Whenever you want to. The conversion isn’t hard
Nah, keep learning Swift 3. Not much is groundbreaking in Swift 4
I did that and made sure to update the necessary code for the UILabel but it still isn't loading my data onto the UITableView.
Your code now has as! parksTable in your dequeueReusableCell method, instead of parksTable you should have the class name from your UITableViewCell subclass.
 I just launched my first app called [BookMe](https://itunes.apple.com/us/app/bookme-keep-track-of-clients-and-appointments/id1280815675?mt=8) . It is mainly for hair stylists, make up artists, barbers or anyone who does simple client work. Currently it is just using CoreData but I went extensive on that part. Took me a while to get it all down. Working with NSFetchedResultsController is painful but I think I mastered it. If any of you know anyone who does hair, barbering etc., let them know about this because there aren't many apps like this. I recently just updated it with onboarding.
Good concept, I dig it. Assuming you used new Core ML concepts?
I did not update the post but I will now. My project code was updated and returns no errors, but still isn't loading the data onto the UITableView. What might be the issue? 
Not just sequence, they’re collections too, right?
Your class should be a UITableViewDelegate not a UITableViewController as you’ve added the UITableView as an outlet. Also you’ll need to add UITableViewDataSource as well.
 Redundant conformance of 'ParkTableViewController' to protocol 'UITableViewDelegate' I took those two things out because I get these two errors. It says : 'ParkTableViewController' inherits conformance to protocol 'UITableViewDataSource' from superclass here 
Yes, because a UITableViewController already inherits everything from UITableViewDataSource and UITableViewDelegate, but as you added the UITableView as an IBOutlet you should be implementing those two protocols. I’m assuming you added a UIViewController to the storyboard originally and then added a UITableView afterwards?
That was how I did it before but right now it is a UITableViewController so I didn't have to add the UITableView in myself. How should I implement the protocols if it returns that error?
Is there anything upon which to base this assumption? How "likely" is it? I have never seen or heard of anyone ever misspelling any of these. Show of hands: how many people have ever had this problem with any of these strings? This really strikes me as "when all you have is a hammer, everything looks like a nail" syndrome. We have strong typing, finally, so we must strongly type **all the things**, even things where type safety was never a problem.
So did you delete the old view controller and add a tableviewcontroller? If so you’ve got a leftover reference to an IBOutlet in your code which will need to be removed. 
Can you zip the whole project and I’ll see if I can get it working?
It's not left over. I deleted all references and remade them so that they could connect again. 
Yes, but if you have a UITableViewController then you don't need to add the tableView as an outlet.
If if don't need the outlet how should I be connecting the data to the UITableView? 
Through your override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell method, but I think because you've also added (or linked) your tableview as an outlet as well then your data isn't getting connected to your labelForPark correctly. I'm guessing that in your ParkCell class you've connected your labelForPark as an outlet correctly? Plus I think you also need to implement: override func numberOfSections(in tableView: UITableView) -&gt; Int { return 1 }
I don’t think they made this change to UIImage.
Thanks for the reminder. Now if we could only get them to update iBooks so it displays the right graphic. Mine still says 3.1 even though opening the book reveals that it is new as of 9/9/2017. The lack of real feature set improvements, year after year, is a real downer. Edit: I really wish that Apple wold pay more attention to MAC apps in general, we aren't seeing real improvements. For example Numbers still doesn't handle ISNUMBER(). They really should be focused on removing all unsupported functions, features or whatever. This would make interchange of data and Excell programs far easier.
LLDB is great when it works, but 90% of the time I try anything on a real program, it just says "The LLDB RPC server has crashed".
best place for iOS develoment is in my opinion Stanfords cs193p. It's free (might only be available on iDevices).
I prefer to download the xip from the developer site over the app store download... The app store is just unreliable...
&gt; Stanfords cs193p alright i will have to look for that on itunes tonight. thank you very much 
oh god no, lipstick on a viper.
is this an absolute beginners course?
[removed]
[removed]
i'm going to try this as well https://www.udemy.com/ios-11-app-development-bootcamp/learn/v4/overview 
Thank you so much! If you don't mind going in to a little bit more depth. I understand what you're saying - that gifView isn't something defined in the UIViewController class. Do you mind helping me understand how to include it? I'm really confused because, as I mentioned, when I start a new project and import the gif exactly as I was shown in the video, it works perfectly, and I don't have to define gifView in the UIViewController class. Why would it be different here? I just tried it a second time, it worked again, and I can't see a single thing different between the file that does work and the file that doesn't (aside from the fact that there are other functions for unrelated tasks).
Yeah I’ve done it. But that first time I did it I learned to make a bunch of constants so I wouldn’t do it again. The biggest benefit to me is saving time with auto completion. 
You can use image laterals for that. 
+1 I also highly recommend to get xip file of XCode. You can download that file using a download manager. More reliable than app store.
😂
&gt; Mine still says 3.1 Mine shows "The Swift Programming Language (Swift 4)" 
Thanks! Yep, CoreML text classification. It was fun remembering a little bit of python to create the model.
I'm currently working through the Hacking With Swift projects(hackingwithswift.com). I will also second the Standford course. I've also been listening to a lot of Swift related podcasts and that has helped as well. 
If it's Swift bridged project, it's not easy either.
It sounds like your actions are mixed up in Interface Builder. You can upload to GitHub if you want to include the whole project.
w.....t......f
strange. Mine shows that at the top of the widow after the icon I clicked on. In other words when you are in the book. However the library icon still shows Swift 3.1
Because characters are variably sized, so you can’t jump straight to a character. You have to iterate over, or tell it to. A string index can be used because it’s correctly offset. 
Okay, I understand this, but...at the same time I don't. I thought the whole point of making a `String` a `Collection` again was to make them more easily iterable. If I can now do something like for character in string { //... } because `String` is now a `Sequence`, then it really doesn't make any since that `Int` indexes aren't a thing. I mean, I can just do for (i, character) in string.enumerated() { //... } And get the `Int` index.
Yes, and it takes O(n) time. Array indexing takes O(1) time because arrays are constant width. Collections don’t need to be subscript-able. Sets are iteratable but cannot be subscripted. Strings can be subscripted, but it would be in O(n) time, which makes the subscript operator misleading. You can write your own subscript extension on String if you want to. 
Okay, makes sense. The better question, then, would be: Why is this guy on Medium claiming this is new in the Swift 4 String API: &gt;a new subscripting API has also been introduced that enables you to quickly access a substring And then showing a subscript access of a string? EDIT: Medium isn't "reputable." I just meant that I see a lot of helpful Swift articles on it.
Medium is a publishing platform, not a company. Anyone can publish to it. They are correct, there are more tools, now, however their phrasing may be awkward. 
Medium is not reputable. Anyone can publish crap to it. 
But it's not a matter of awkward phrasing. The article is clearly saying that in the new Swift 4 String API, subscripting a `String` can be done to obtain a `Substring`, but in my Swift 4 playground, it's clearly not working.
Oh okay, didn't know. So is this just false?
Yeah, they're Collections again, which by default makes them Sequences.
I'm on my iPhone iBook app. Are you on an iPhone? Or a Mac? If you are using a Mac, then there might be some difference there... 
Ugh. Hopefully AppCode still works.
&gt; Now I lose all my highlights and bookmarks moving over to the new updated iBook. Do you see this just with The Swift Programming Language, or all iBooks? I suppose you should file a radar either way, but especially file one if it's something odd about the Swift book.
What? What does "for convenient deal with UIPickerView" mean?
I’m new... what is an image lateral?
There seem to be a lot of variations/improvements on VIPER lately, this is all good. 
What didn't you understand? This framework facilitates work with UIPickerView. 
I find the Codable / Decodable protocols to be pretty darn groundbreaking - especially if your app has to deal with serializing / deserializing data to web APIs (or even local .json files) Also the changes to String are fairly important as well.
Sorry. When you add an image to your asset catalog in Xcode, you gain the option to reference the image by name. So instead of typing `UIImage(named: “foo”) ` You just start typing the name of the image and Xcode offers you auto complete. For example start typing `foo`. 
Convenient deal?
Disregarding safety, I just don't feel like typing. I like autocomplete.
Hello developers! COBE team didn't stop with awesome (that's what you said :D ) lists of libraries. This month we bring you some new libraries so be sure to check it out! Like always, thank you for great feedback and suggestions :]
I undermined Swift 4 actually, just updated and I can see the changes for Strings and Sequences. My code for serializing and parsing JSON is now so much more simple
[You can subscript Swift 4 strings, just not with numbers, you need to use a String.Index](https://developer.apple.com/documentation/swift/string/1540052-subscript) (there are also range-based variants, also using ranges of String.Index)
The medium article is technically correct in that you can subscript strings in Swift 4. Where it is misleading is that it does not explain you do it via a `String.Index` type, not a number.
I can't find the article where I read it, but from the best of my knowledge Core NFC only supports reading, not writing :(
That's such a shame. The things people could do with NFC writing are limitless, and it's being locked up because Apple is scared of some competition in Apple Pay.
How do the others compete against Apple Pay? I thought there were a number of companies that were offering product in that line. Or is that were Apple has the "tap and go" where others can't.
if they introduced NFC writing, bank companies could implement it to where they could make their own mobile payment app. Or at least that's why I think they are withholding it. Just my opinion, I don't have any evidence to back it up though. 
I think Apple is getting a bit dangerous, they have strict control but sometimes that can really hamper development. I know Apple has a good share of the high end market, but the still need to be open enough for devs to do great things, while keeping the malware out.
Can anyone tell me if it requires High Sierra or just Sierra? Also, I'm hearing things about Xcode 9 being very slow, does Swift 4 work with Xcode 8?
See the [other comment](https://www.reddit.com/r/swift/comments/71gbke/slug/dnast36) 
It’s not really that bad of an Architecture. There was an update on it though. No more Input Output protocols, check out the new templates. It is great for larger projects since it forces you to fragment the code and Testing is really an ease with it. Had some hesitation at first too. 
Hm, i have checked the templates before writing this post. Will check again, thanks for noticing! 
As part of the rationale: &gt; We need to focus on the important things, because getting syntactic niceties into Swift 3 but missing on ABI stability would be really unfortunate. Huh. 
Really annoys me that they’ve deferred so much good stuff and still haven’t gotten stability. 
There's no `UIImage.Name` but you can still do extension UIImage { static let myAwesomeImage = UIImage(name: "myAwesomeImage") } and call it with `let image = UIImage.myAwesomeImage` 
Best way to get started -&gt; https://www.youtube.com/watch?v=zWWCWkcVXwQ
Under the hood it expands do `#imageLiteral(resourceName: "my-image")`, just a trivia/curiosity, I was wondering if it was a mistaken richtext-type feature leaked from the Playground editor that resulted in unusable code, but seems like it works on iOS as well.
Thank you! 
Stupid question, but did you do `textView.translatesAutoresizingMaskIntoConstraints = false` when adding the constraint?
How does that have anything to do with this? You could already autocomplete plain string icon names in Swift 3.
And now the Swift 4 way is ... to make a bunch of constants. So now you need extra syntax around what people were doing anyway. How does this help, exactly? As for autocomplete: do you not use an editor which can autocomplete image names as strings? Xcode already had that capability. We don't need a new type for that.
Why did it crash? What was the stack trace? It's hard for us to debug "it crashed".
I added it but still got: Terminating app due to uncaught exception 'NSGenericException', reason: 'Unable to activate constraint with anchors &lt;NSLayoutXAxisAnchor:0x1c08750c0 "UITextView:0x103034000'text'.centerX"&gt; and &lt;NSLayoutXAxisAnchor:0x1c0861ac0 "UIView:0x10244a340.centerX"&gt; because they have no common ancestor. Does the constraint or its anchors reference items in different view hierarchies? That's illegal.' I'm a beginner, I don't really understand the functions, I just added them up :o
This is trying to tell you that the UITextView isn't a subview on UIView. `view.addSubView(textView) textView.translatesAutoresizingMaskIntoConstraints = false textView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true` You may need to add height/width and a y constraint as well.
I have a own View in the View which adds the TextView to it with .addSubview(textView) but the Problem is that the textView has set x and y cordinated due to var TextView: let textView = UITextView(frame: CGRect(x: 140.0, y: 70.0, width: 250.0, height: 100.0)) how can I use your two functions and add height/with and y constrains? Sorry for my stupid questions and thank you for your help! :)
This is not a beginner course. He said he’s never tried coding before and neither have I (also looking for a beginners course) but at the beginning of the video it says that a prerequisite is being a strong object-oriented programmer. This seems like a class for people trying to just switch from one platform to another and already has a programming background.
Its okay, we all start some where. When using autolayout/constraints you don't have to set the exact frame, you also have to add each constraint like: var TextView: let textView = UITextView(frame: .zero) view.addSubview(textView) textView.translatesAutoresizingMaskIntoConstraints = true textView.heightAnchor.constraint(equalToConstant: 100).isActive = true textView.widthAnchor.constraint(equalToConstant: 250).isActive = true textView.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true textView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true Will centre the textview on its parent with a fixed width/height.
&gt; Recently, I really got tired from MVC and started looking for a new architecture. What does it even mean to get "tired" of an architecture? Are you also bored with two's-complement, and on the lookout for other ways to store integers? This still looks like MVC. It's just that the "C" is broken up into 6 (7?) sub-units with very specific names and duties. Worse, I think this is misunderstanding what architecture is for. Here's 250 lines of code that don't do anything. You wouldn't start a project by writing this boilerplate, any more than an architect would start every room by adding plumbing behind the walls (just in case!). An architectural design is what you abstract out of a system, or keep in mind as you build up, not something you lay down before you start. This is a good way to end up with a program that's 5 times as long as it needs to be, and nobody wants to work on. When you've got 25,000 lines of controllers, then you should start breaking them down into sub-controllers. Those sub-controllers may well look like these, or they may not. These particular "Clean" interactions may work for you, but they wouldn't line up very well with any project I've worked on. Take a random MVC application, like TextEdit, or Xcode -- would it be any better if it used all these classes? MVC grew out of what people learned writing applications in 1970's/1980's research labs. "Clean" looks like a way to sell a series of books with space photos on the covers.
Thank you very much, I got it now! I didn't knew I could set the frame to zero and manually set everything via code, now everything worked out. Thank you for your help and patience! :)
no problem.
delete
OH. Ok, thanks (: 👌🏻
Incidentally, there are many methods for manipulating `String.Index` *on `String`*: String.Index is an opaque type such that indexing is O(1)[0], but *manipulations* of the index are at best O(n) and need a string reference, so to get an Index for the 4th "character" (grapheme cluster) you write `mystring.index(mystring.startIndex, offsetBy: 4)` The Swift Book actually has [a reasonable introduction to the subject](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html#//apple_ref/doc/uid/TP40014097-CH7-ID494), the rest can be found [on the API Docs](https://developer.apple.com/documentation/swift/string) by looking at methods which take or return String.Index. [0] IIRC not the case for bridged strings/NSString 
Oh okay, thanks! I don't know why I didn't think of just looking at the documentation... I have one more question though. The doc mentions using the Sequence function prefix(_:) to return a Substring. But I get String.SubSequence, which actually makes sense, but do they have the same performance characteristics (i.e., share memory)?
Why don't you call the function inside the IBAction?
So it says @IBAction func OpenList(_ sender: UIButton) { OpenList.addTarget(self.revealViewController(), action:"revealToggle:", forControlEvents:UIControlEvents.TouchUpInside) } Or how do you mean? Edit: Or calling the ViewDidLoad function, which it is in?
Every time I see a new architecture it has more components
[removed]
What is OpenList? It is a function. ( As an aside, it would be best to follow the Swift naming conventions of starting classes with Upper case and instances and functions with lower case.) What do you want to add the target to? The button...not the function. Try adding the target to your UIButton instance. 
If i use the: @IBAction func OpenList(_ sender: UIButton) { OpenList.addTarget(self.revealViewController(), action:"revealToggle:", forControlEvents:UIControlEvents.TouchUpInside) } It pops up with the same error: Value of type '(UIButton)' -&gt; has no member 'addTarget' 
[String.SubSequence is an alias for Substring](https://developer.apple.com/documentation/swift/string/subsequence). SubSequence is actually part of the Sequence protocol, String provides it to conform to the protocol.
So far, definitely not. &gt; #CoreNFC &gt; Detect NFC tags and read messages that contain NDEF data. [(source)](https://developer.apple.com/documentation/corenfc)
You're a god.
If the login implementation is complicated enough to require 7 files and only communicates with one service I think you need to re-evaluate what the point of architecture is.
You've defined a function `OpenList`. A function is called in Swift (as in almost every language) by putting "(" after it, and then the parameters to pass to it. You put a "." after it, and then the name (almost) of a method in UIControl. What do you think is going to happen here?
Oh, thanks. Chanced the name to from ~~OpenList~~ to openList And i fixed it by adding @IBOutlet weak var btnOpenList: UIButton! and writing: btnOpenList.addTarget(self.revealViewController(), action:#selector(SWRevealViewController.revealToggle(_:)), for:UIControlEvents.touchUpInside) in the ViewDidLoad function :D Edit: So by inserting a referencing outlet named: @IBOutlet weak var btnOpenList: UIButton! And writing: btnOpenList.addTarget(self.revealViewController(), action:#selector(SWRevealViewController.revealToggle(_:)), for:UIControlEvents.touchUpInside) in the ViewDidLoad function it finally worked
That was just an example. I just took a screenshot how the architecture looks like...
It would be trying to find the addTarget method inside of the OpenList function which i see now i ridiculous. Thanks, this helps me to actually understand what I did wrong. :D
Sierra is fine. I'm not experiencing lack of speed. With some weird workaround I do believe that you can run Swift 4 on Xcode 8, but I don't think it's worth it. And besides you van have b both installed. Just rename your current Xcode.app to something like Xcode8.app.
To what changes do you refer, exactly? I can see aspects of Swift that could use improvement, but it's a much better language today than it was in 2014.
That's fine, nothing will bite you. (Though you won't be able to encode the Person object to include height if your server requires that).
Mac! Suppose I should report a bug. 
Random Class Renames and function renames. And while you're right that it is better now than it was in 2014, it is still shit.
Amazing! Congratulations on your release – I'm glad my books were useful :)
It's not random. It's a targeted initiative to adopt a convention. It's imperfect, yes, but people have been bitching about NSReallyLongNameSyndrome since before OS X Public Beta. I should know, I was there for that.
Random, arbitrary and ultimately stupid. How much time and effort is wasted trying to maintain code that shouldn't need to be maintained as heavily due to these changes. And have they actually added reflection yet... The name changes are stupid and pointless when they could be focused on adding functionality. Important functionality. 
Here's an example. timeIntervalSince1970.isSignMinus (boolean) changed to timeIntervalSince1970.sign (FloatingPointSign) requiring a change of a conditional from (.isSignMinus) to (.sign == FloatingPointSign.minus). Totally stupid change. And removing two characters at the start of the name does not decrease the length any appreciable amount.
If you want your opinion of the direction of the language to count, go contribute changes. There's a process. Use it. Or go use C# or whatever makes you happy.
You could add that property if you want. Or suggest on swift-evolution that it be readded. Also, the condition can be slightly simplified to `.sign == .minus`. But on the whole, the refactoring of the float point protocols was very important and needed to be done and wasn't arbitrary or random at all.
Ladybug - a new model framework for swift 4 that makes Codable super easy to implement! https://github.com/jhurray/Ladybug/
If you are using an **AVPlayerLayer** to render the video, set its **videoGravity** property to **.resizeAspectFill** https://developer.apple.com/documentation/avfoundation/avlayervideogravity/1385607-resizeaspectfill
a few years back it was quite a beginners course. might have changed since then. For free programming courses (not ios though) check out https://www.codecademy.com/
a few years back it was quite a beginners course. might have changed since then. For free programming courses (not ios though) check out https://www.codecademy.com/
As /u/Esteluk says, any data found in the JSON payload that's not requested is simply ignored by `JSONDecoder`, so it shouldn't cause you any issues.
This seems interesting, but gets a major thing wrong about `Codable` — mapping keys requires no additional boilerplate. Unless you're doing something custom for `encode(to:)` and `init(from:)`, there's no need to override them. For instance, the given `Leaf` implementation can be significantly shortened: struct Leaf: Codable { enum Size: String, Codable { case small, medium, large } let size: Size let isAttached: Bool enum CodingKeys: String, CodingKey { case isAttached = "is_attached" case size } } If `Tree.name` were a custom type (like `Name`, which had a custom `init(from:)` to decode out of the collection), `Tree` wouldn't need to implement `init(from:)` or `encode(to:)` either: struct Tree: Codable { struct Name: Codable { let value: String private enum CodingKeys: String, CodingKey { case colloquial } public init(from decoder: Decoder) throws { let container = try decoder.container(keyedBy: CodingKeys.self) let names = try container.decode([String.self], forKey: .colloquial) guard names.count &gt; 0 else { // ... } value = names[0] } public func encode(to encoder: Encoder) throws { var container = encoder.container(keyedBy: CodingKeys.self) container.encode([value], forKey: .colloquial) } } enum Family: Int, Codable { case deciduous, coniferous } struct Leaf: Codable { enum Size: String, Codable { case small, medium, large } let size: Size let isAttached: Bool enum CodingKeys: String, CodingKey { case isAttached = "is_attached" case size } } private enum CodingKeys: String, CodingKey { case name = "tree_names" case plantedAt = "planted_at" case family, age, leaves } let name: Name let family: Family let age: Int let plantedAt: Date let leaves: [Leaf] }
Good to know, and will update the `Leaf` implementation. Thanks! 
The rest of this looks interesting, though! Transformers were one nice thing about Mantle that are likely really useful here.
Thanks! I updated the readme per your feeback. Much appreciated! I think the main advantages are 1) reducing the bloat in models (custom `Name` type adds a larger memory footprint) 2) dealing with dates (`Codable` supports only 1 date format per type) and 3) just general readability. Imagine a model with 50 properties where one property name does not map to a JSON key. This would result in the developer needing a `CodingKeys` struct with 50 cases to accommodate the single difference in interface (would add memory footprint too :) ).
Is reddit just a place to whine about useless garbage for you. If you’re displeased with it don’t use it. Stop wasting our time with your negativity, plenty of people have given you logical responses that you have completely shut down with your disrespectful behavior.
Those are some well-reasoned and well-articulated issues you have with the language. Unfortunately, I'm not part of the Swift project (or Apple), so I can't help you with those. I do completely understand wanting a programming language that doesn't change, but that requirement doesn't leave you with very many choices today. Python, Ruby, Perl, Java, C#, JavaScript, C++, and even Fortran are all still changing every year or two. I suggest Common Lisp. It's a pretty good language, even today, and it hasn't been modified since 1994. Based on how the standardization committee went last time, it's very unlikely to ever change again. SBCL is an excellent (and free) compiler which is still being maintained. In many ways, Lisp is even more powerful than "modern" languages like Swift. If that's not your style, another option is Forth, which coincidentally was also standardized in 1994. I'm not as familiar with it but I hear it's also pretty good. These languages won't integrate with the operating system quite as nicely (if your operating system is macOS), but since operating systems change every year, too, you're going to have to have that pain point *somewhere*. You can't write programs like it's 1994 forever and expect people to want to use them.
I don't know how you're testing, but printing the bounds immediately after requesting layout probably won't be a useful metric of whether the constraints are correct or not. It's not going to change until the next update cycle. Also, the layoutSubviews() docs say "You should not call this method directly", so that seems kind of ... not good. Does blueView have an intrinsicContentSize? Requesting layout of a view with no intrinsic size isn't going to work, and the frame size you set manually will just be wiped out. The layout system *sets* frames, based on the intrinsic sizes and constraints. If you haven't specified the sizes of your views in any way the layout system can use, it's not going to be able to create a useful layout.
We don't know what's in your program. You're responsible for ensuring that you have the legal permission to distribute everything that's in your app. That's between you, and anyone whose code or assets you're using. If you don't know, consult a lawyer. The internet is not a lawyer. It seems common to form a legal entity (like a single-person company) so that any potential issues that arise don't fall entirely on you personally. Again, ask your lawyer.
&gt;It's not going to change until the next update cycle. This is one of those that I'm trying to figure out how to make it happen &gt;Also, the layoutSubviews() docs say "You should not call this method directly", so that seems kind of ... not good. &gt; I see, it should be setNeedsLayout() according to docs &gt;Does blueView have an intrinsicContentSize? Requesting layout of a view with no intrinsic size isn't going to work, and the frame size you set manually will just be wiped out. &gt; &gt;The layout system *sets* frames, based on the intrinsic sizes and constraints. If you haven't specified the sizes of your views in any way the layout system can use, it's not going to be able to create a useful layout. It's a what you see is what you get kind of situation. I run this exact code in the iOS simulator and use the boxes in the screen I see as a test. So what you don't see..is not there. I'm really not too familiar with the concepts and the naming here. When I talk about the size in this case I'm pretty much talking about the size of what I see on screen. I'm not too sure if this "size" is a property of the frame, intrinsicContentSize or anything else. I really appreciate your comments, but might you have an idea what I *should* do, apart from what I shouldn't do? I 
Oh, and you're such a positive influence, whining about people pointing out the flaws in a piece of crap language that is migrating backwards in usability and ease of understanding. How much effort was expended by people to publish how tos and tutorials on versions 1 - 3. Now version 4 has come out and changes things in random ways that breaks a lot of what has been written. As far as your claims that I was given logical response, no, I wasn't. A logical response would have offered a rebuttal more substantial than : "Join the committee writing Swift." - I have more important things to do with my time than waste it trying to get Swift to change in useful ways. "Or they have some plan for their changes". Really? Have they fully implemented reflection yet? No? Crickets? ... ? 1994 has called, it wants SWIFT back. "Show an example." - Which I did. And that's just the tip of the iceberg. As far as whining. It's venting, and if you're going to whine about someone venting, perhaps you should revisit your own priorities.
They should have left .isSignMinus as a boolean value. There was no need for them to change it in addition to adding the .sign property.
Considering the large refactor the floating point protocols underwent, it did "need" to change. If you want that property back, you can propose it. But like I said, it's trivial to add, so it's unlikely it would get much support, unless the use case is relatively common.
The only "Github support" in Xcode is that you can see all your Github repos within Xcode. Everything else works just like before.
You could use a 3-party-software named "SourceTree"
&gt; now Xcode only supports Github Huh?
The transition was really swift for me
try using pod update in your terminal if your frameworks are having issues. trying to manually change everything will take forever. I had the same issue from 2 to 3 
Just manage the remotes etc in command line.
2 to 3 was absolutely insane. I honestly worked on stuff for almost a week and a half. I definitely don't want to go that route again, but as soon as I clear all of my errors and warnings, hit cmd+b, it starts to build … is it working?! … oh boy … here we go … 52 errors, 4 warnings. Doh! I've never been good at working with package/dependency managers, so I'm not sure what this pod command does, but if it'll save me some time, I may have to jump on the CocoaPods/Carthage/etc. bandwagon.
You're too much. 🙈
Generally I would not advise you to update frameworks and your project at the same time. I would update each framework individually, and only then update the project itself.
Same here, and I'm a new coder. I just finished my first App and now I'm so overwhelmed by all these errors, especially the one in my pods. I don't even barely know how to fix them :( Can I just release the App without Swift 4 migration, because it works just fine on ios 10 and ios 11 devices? :)
Set Xcode's Swift Language version to 3.2, that should really help.
thank you! :)
So, the only way I found to use Bitbucket (which now works fine for me) is this: -Create a GitHub account (yes really, no that's not a typo bear with me). -Go to Xcode -&gt; Preferences -&gt; Accounts and add your Github account there -After you do that you *should* be able to clone your products from source control in BitBucket. It works for me fine now. I wasn't able to do it before adding the GitHub account. 
Or Tower, though you have to pay for it after 30 Days.
I've found it helpful in the past to NOT upgrade certain apps, but to rewrite them from scratch. It can also help as a way to learn the new version of the language. One thing you should be concerned about is keeping your old code intact. Remember, if you have any errors, you'll want to go back to that version of the code.
Are you saying the didSet for the item isn't getting called, or that the `if let id = item?.itemId { itemId = id }` isn't? I'm curious as to what your presentVC method does, maybe something in there is messing things up. Have you tried seeing what happens if you just use UIViewController's present method? Also I'd remove the `if let id = item?.itemId { itemId = id }` in `didSelectItem` sinze you're already doing that in the `didSet`. Set a breakpoint at `vc.item = item` in your `didSelectItem` and check to see if `item`'s `itemId` is actually nil.
Hey! didSet for itemId is not getting called. I put the itemId in if statement just so I don't have to use a '!' operator. &gt; I'm curious as to what your presentVC method does It presents the viewConrtoller. As we can't call view controller from cellClass, I just created a custom NavVC and put it in an extension of this VC class, Something like this: extension VC { func presentVC(launcher: UIViewController) { let rootViewController = UIApplication.shared.keyWindow?.rootViewController if let navigationController = rootViewController as? UINavigationController { navigationController.present(launcher, animated: true, completion: nil) } } } &gt; Set a breakpoint at vc.item = item in your didSelectItem and check to see if item's itemId is actually nil. Tried that. It actually has the itemId and itemLabel values. As I mentioned in my question, I can get the label item's value but can't get the id from it.
The very first sentence of [the Timer documentation](https://developer.apple.com/documentation/foundation/timer) is "Timers work in conjunction with run loops." Did you forget to start a run loop?
The fire() method does not start the timer, it just makes it fire off once; think of fire() as what the timer calls when it goes off. Rather than directly firing your timer, what you want to do is schedule it on a runloop. Go back and re-read the [section in Timers in the Foundation documentation](https://developer.apple.com/documentation/foundation/timer) and make sure you're using a constructor that adds the timer to a runloop or, if not, that you know how to add it to a runloop. Main thread is fine, so long as you're not doing much in the timer callback.
Is there not a current run loop for every program? The scheduleTimer methods should auto schedule them on the current one. 
Even in ObjC, standalone NSTimers like the one you're creating here didn't work, if I remember correctly. What's missing is the part where those timers get scheduled to run in a runloop. In your 2nd example, you could achieve that by changing it to _dataRefreshTimer = Timer.scheduleTimer(timeInterval: 10.0, target: self, selector: #selector(resortAvailableProbes) , userInfo: nil, repeats: true) or by manually adding them to a runloop like so RunLoop.current.add(_dataRefreshTimer, forMode: .defaultRunLoopMode) HTH
Is your `collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath)` method in a view controller? If so, just use UIViewController's `present` method. I see no reason as to why this isn't working other than that and how you're instantiating your VC - is VC not built out in a storyboard?
On the command line program? No. Where would it come from? It's a Mac technology, and you've invoked no Mac-specific entry point to [start it](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html): &gt; "The run method of UIApplication in iOS (or NSApplication in OS X) starts an application’s main loop as part of the normal startup sequence." 
Not using storyboards sir. And its deep down in a view controller. That's why using this extension. Can't really explain the whole structure.
So somehow I fixed it! The thing is everytime I select the item on didSelectItem the didSet method is called. So I just created a method first like this: `func setupId(item: Item) {` var itemId = String() if let id = item.itemId { itemId = id } print(itemId) } And in the didSet I just added this function like this: `var item: Item? {` didSet { itemLabel.text = item?.itemLabel if let item = item { setupId(item: item) } } }` And this is pretty much the fix!
Understood. I think I made some assumptions about the instance methods. I don't know why I had it in my head that Timer(timeInterval... was the same as Timer.scheduledTimer(timerInterval In objective C everything is spelled out (at least to me) including all the init methods. The problem on the Mac os app makes sense. I realized that right after I posted.
No, my Mac doesn't support 10.12, so it doesn't support Xcode 9, so it doesn't support (MAS) Swift 4. I suppose that could also be "Yes", depending on your point of view.
I discovered my issues. On top of not using the instance method I thought I was, I was calling a private selector from a class extension within the swift file. In Objective-C you conform to class protocols instead of make class extensions so the scope is not the same as the class... I guess. I am still little confused as to why a timer started in an extension isn't in the same scope. But whatever. It is what it is. Thanks for the help.
Sorry, I wasn't very clear. That's what I did. The problem is, once the frameworks were updated, the main project wouldn't migrate because the frameworks were Swift 4 and the app was Swift 3.2.
It would probably help to compare this to the built-in interfaces, not just show the Baya way. It's not clear to me that this is much of an improvement, but it's hard for me to imagine the big picture of how this example looked before. This library doesn't look *bad*. It just doesn't look like *enough* of an improvement for me to justify using a third-party just-released-version-0.1 layout system. 
It's a very interesting way to almost list out features of Swift. I like it.
I’m trying to understand Protocols better so I made a little example as an exercise because I learn best by doing and making mistakes. My thinking is that I want to take as much reusable generic functionality (traits of different species of pets), and put them in a Protocol so I can reuse that blueprint as a starting point for different kinds of animals (dog, bird, etc). Is this the right way to think about Protocols and when to use them? Then I want to print out a consistent summary of the pets even if you have all different kinds of animals. I just stopped at two kinds in this example. The petSummary function just prints out a summary of the pets as a unification of the different animals brought under “Pet”. Is this an OK implementation, or should I try to bring this under CustomStringConvertible since I’m already partially using that functionality? I’m also trying to understand CSC better too so maybe I’m misappropriating its usage. I’m open to any/all criticisms and suggestions for further understanding. Thanks.
Use the command line, seriously. Exactly zero of the devs I know, use the Xcode git integration for anything other than status, blame and diffs. I also use SourceTree occasionally for visualizing branches, but 99% of the time it’s just plain old fashioned CLI.
I've leaned the lesson;) but my problem is that when I check the log in the command line, it doesn't show the commit I've done in XCode. So I'm unable to commit or push the latest changes? In the command line the repo says that is up to date, but it doesn't see the changes I've made. It's like it's stopped being in sync with the files I edit in XCode :/
Broke the thread :-(
If you go to GitHub, did the commit make it up there? If not, reclone your repo and diff -Naur it with the exiting Xcode one. If the commit is up, reclone and point Xcode to it. I’ve had to fall back to patch for some particularly nasty merge conflicts. It’s a hassle, I feel your pain! If you have time, point SourceTree at it, you may be in some weird branching situation that’s not obvious from the command line but easy to fix.
Good video (and I don't mind you keeping your exuberant face up throughout :). It's entertaining to shout "UNION!" at our screens but it's also fun to watch your process. Keep it up! Thanks for posting original content. 
You don’t need storyboards to support the new phone. What problems are you running into exactly?
No, it didn't. The commit is visible only in XCode. Thanks for your help, I'll try to do what you've suggested.
[This video](https://www.youtube.com/watch?v=FXDEaL3mcCo) explains it nicely. So when setting up constraints for a view whose superview is your UIViewController's view, just set your anchors like this: someView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor).isActive = true I used bottomAnchor as the example but you get access to any normal NSLayoutAnchor when defining a constraint.
It looks like [this](https://twitter.com/jamesthomson/status/909519985743196160), here's my code in the didFinishLaunchingWithOptions, do I have to enable something here or? I know about the safe area constraint, but should I add constraints for each view in the view controllers? window = UIWindow(frame: UIScreen.main.bounds) window?.makeKeyAndVisible() window?.rootViewController = UINavigationController(rootViewController: PostsViewController(collectionViewLayout: UICollectionViewFlowLayout())) EDIT: typo
Do you... do you mean that people actually watch my videos?! Thank you so much, it means a lot to me. Have a nice day. UNIONNN
There is an example of subscript here: https://developer.apple.com/documentation/swift/string and here https://developer.apple.com/documentation/swift/substring let greeting = "Hi there! It's nice to meet you! 👋" let endOfSentence = greeting.index(of: "!")! let firstSentence = greeting[...endOfSentence] // firstSentence == "Hi there!" 
Don't blame Swift, the same two calls exist in Objective-C + (NSTimer *)timerWithTimeInterval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^)(NSTimer *timer))block + (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)interval repeats:(BOOL)repeats block:(void (^)(NSTimer *timer))block There are also no init calls that return scheduled timers. I doubt you ever called [[NSTimer alloc] initScheduledTimer...]. 
how do iOS apps get data from the internet? You make a url request to some API and in most cases you get back data in the form of JSON. JSON is just a description of how the data is structured. When your iOS app receives JSON data, it doesn't know how to read that data just yet. You have to serialize that data using the ```JSONSerialization``` class apple provides. You give that raw data to the ```JSONSerialization``` and out comes a Swift dictionary that looks like ```[[String:Any]] or [String:Any]```. From there you can now access all the keys and values to consume the data given to you via internet
If you're using Xcode 9, it's possible you've fallen prey to a bug that means images aren't actually added to your app, even though you copied them in. See the part marked Really Important Warning in bold at the end of https://www.hackingwithswift.com/read/1/1/setting-up – was that your problem? If not, email me a zip file of your project (paul@hackingwithswift.com) and I'll try to help.
&gt; https://www.hackingwithswift.com/read/1/1/setting-up I don't believe it was the bug - I did re-check the boxes for the images, so I'm not sure what else it could be. I emaile dyou just now
"ABI stability" isn't just a switch that somebody needs to flip. It's a 2-word summary of a giant tree of dependencies. And it's good stuff, too.
`extension CustomStringConvertible where Self: Pet` reads a little funny. Why not just extend Pet? Otherwise, this is all obviously legal Swift and it does what you think it should do. Whether it's good design depends on what you want to *do* with this data.
JSON is Javascript Object Notation. It's just a way of representing a Map as a string. In Javascript, maps (or objects) are represented with braces, and arrays with brackets. Key/value pairs are represented with colons. For example: { "key1": "value1", "key2": "value2", "key3": [ "nested_list_value1", "nested_list_value2", "nested_list_value3" ], "key4": { "nested_object_key_1": "another_value", "nested_object_key_2": "another_value" } } 
This seems like very well written, sensible Swift. It's not what I personally would write, but I don't think that matters – everyone writes Swift differently :) In my own code, protocols describe what you *do* (verbs) and structs describe what you *are* (nouns). So: both dogs and cats can make sound, both dogs and cats can walk, both dogs and cats can play, etc; those might make for good protocols. On the other hand, the dog itself or the cat itself would be better expressed (in my own code) as a struct that conformed to the protocols. As things stand, what you've written is more like inheritance, albeit expressed as protocols.
Adding on to the existing comments here, in general beyond iOS JSON is a very widely used format for representing arbitrary but structured data (think things like key/value pairs, tables, tree structures, etc). It's used for data interchange in web services, configuration storage, etc. Despite the name it doesn't really have anything to do with Javascript and there are JSON parsers and serializers in most major languages.
Is it just me, or does that actually look better than filling the entire X display?
I like it as well, but I don’t think Apple will allow us to hide it. Because that’s literally what gives the iPhone X a unique look and sets it apart from other bezel-less phones.
Here's what I used when I was dealing with the Yelp API struct YelpData : Codable{ var businesses : [Buisness] } struct Buisness : Codable { var name:String var rating: Float var price: String? var phone:String var distance:Float var url:String var image_url: String var categories: [[String:String]] var coordinates: [String:Float] var location : location var id: String } struct location : Codable { var address1: String? var address2: String? var address3: String? var city: String var zip_code: String var country:String var state:String? }
I didn’t say it was bad, there’s just been a lot of rejected changes and we’re no closer to ABI stability than we were. 
Those really shouldn't be `var`s.
You just need a launch storyboard to get the non-boxed version. No way around that, but it doesn't matter if you use storyboards anywhere else.
you could just as well use xml e.g. in form of a plist as a response and request etc. I'm not even sure why anyone would prefer json but it somehow happened
json is the shitty not type safe equivalent to good xml, it's mostly used by webdevs and so usually what you get when you send requests and receive responses from a webserver. If you create your own server you could also use xml.
Your `BusinessService` has an extra non-Optional field `total` which isn’t present in the JSON.
huh? xcode works well, he just created the repo on github first and so probably already had files on there (readme and maybe a license) the command line push would have complained as well
Actually for iPhone X (inside my LaunchScreen storyboard) I had to pin my UIImageView top&amp;bottom to **SuperView's** top&amp;bottom, **NOT** to SafeArea. This way launch screen on iPhone X took the whole screen.
Ray Wenderlich has a solid [beginner's guide for SpriteKit](https://www.raywenderlich.com/145318/spritekit-swift-3-tutorial-beginners). It has a chapter for collision detection that should help you out. I'd recommend browsing through other guides on the site as well, it's a real gold mine.
You need to set the category bit mask for the player node and the coin nodes using bitwise operators and then there’s a method that you use to test for them. I’m currently on mobile and not in front of my personal computer but that should already get you started. Edit: you should test which nodes are touching in ‘didBeginContact’ Something along the lines of this: https://stackoverflow.com/questions/22021084/sprite-kit-physicsbody-check-if-two-bodies-touch-each-other
"i need help with my code... What's the most effective way to share it... 💡of course! A screenshot!" 🤣
Haha 😂🤣
Now that I have the iPhone 8 Plus. This app is actually really cool!
Why not modularize it? Use several storyboard files separated by flow. That's what works for me.
wow. thanks. great suggestion! 
It looks good. Just a style note. You could shorten many variable names to make them more concise. For example successor/predecessor could be next/previous. firstNode/lastNode -&gt; first/last. You could also look at making it thread safe for fun: http://basememara.com/creating-thread-safe-arrays-in-swift/ 
Sorry my bad that is actually in the response data, I just cut it for brevities sake. I changed it in my original post to reflect that. 
Everything in mine works, unless an image_url is missing, which is why I'm not understanding why my code isn't working since I marked the imageURL as optional. It'll work fine in an area where all imageURLs for all restaurants are available but the second it's missing it no longer works :/ 
I'd definitely split it up. I'm not sure when/if memory will become an issue but in terms of collaboration, it's good to keep it as modular as possible. Git merge conflicts are a nightmare when working in storyboards, so having them split up mitigates that cost. 
Thanks! I feel like my subscript function on BidirectionalCollection could be way cleaner. There's also an optimization for subscript I can think of where the list is traversed either forward or backwards depending on if the given index is closer to the beginning or end, but A) my current implementation needs to be cleaned up before I start convoluting it, and B) I'm not sure if reverse() incurs overhead, so I don't know if it would speed up the algorithm.
74 view controllers in an app is nothing. I'm one storyboard that is too much, imo.
Thanks for the reply! 
I really appreciate your thoughts. I didn't even know the concept of using multiple storyboards until I made this post. You were very helpful. Best,
Nice. Why make it is a class instead of a struct? Swift’s built-in data structures are all structs and it plays nice with immutability constructs (var and let) 
It may surprise you, but there's thing, named Storyboard Reference, to manage this.
Sorry for criticism, but Wiki says multiset is a set which is able to keep many of same value, but your structure is key-value, not a set.
Hi. Thanks for your feedback. The way we implemented multiset in this video was to allow the same value to appear under multiple keys, but not more than once under the same key. How did you interpret the article?
Honestly, I'm still trying to wrap my own head around visualizing the whole data structure, but here's my best explanation: Really, I think the only reason I chose a class is because let value semantics didn't really make much sense, since it could only be initialized with a single element. But that's just a limitation of the data structure itself; I'm planning on writing an initializer that takes a Sequence and builds it up from that. So that'll solve that problem, I figure. 
&gt; You could shorten many variable names to make them more concise. No. Use variable names that explain what the purpose of the variable is for. This will save you more time in maintenance because the purpose of the variable is clear than it will save in precious keystrokes.
Swift's built-in data structures have a lot of extra logic to manage the COW behavior. Internally, of course, they still use reference types. In this case, Node has to be a class (or an indirect enum), since it creates circular references. DoublyLinkedList could be a struct, but if you just switched the word "class" to "struct" you'd get some pretty weird behavior, since the reference types would still implicitly share. It'd be nice to present a struct interface here, but the implementation is a bit more work. You'd probably want to copy the whole chain on any write. It's not exactly a trivial change.
Traditionally when you simplify a data structure by keeping a placeholder n=1 item, you don't expose that implementation detail to users. I don't know if there's any Swift protocols whose semantics you're violating (`removeAll()`?), but it seems weird. In this case, the special case isn't even that difficult: the corner case is going from n=0 to n=1 elements, which is easy, and you do it in `init` already. You could also store the values as `let element: T?` and use nil, or require `T.init()` and make a dummy one. Personally, I think that since you're not exposing `Node` as a public interface, that a couple of if-statements in the internal logic is going to be less complex than keeping the indices straight with a dummy node.
Okay, this is exactly what I mean. I just couldn't articulate this response.
In this case though, the shorter names are just as clear. So, there's no benefit to the longer names.
Poorly written 
&gt;or require `T.init()` and make a dummy one. Could you elaborate on this? I'm trying to implement it as `let element: T?`, an optional, but I'm getting frustrating writing all the corner cases 😅 how would you go about implementing a dummy node without dealing with an optional?
+1 on this. Since they added Storyboard references I started making a separate one for each flow through the app. It makes things smoother to work with in Xcode for me. As for how many VCs are too many for a Storyboard I think that comes down to what the screens contain. This is mainly for Xcode performance. If all of your VCs are table view controllers with one simple cell in them you can have a lot more of them then if it's large layout that has a lot of subviews with stacks views nested a few deep. It's really about the number of views and not view controllers. And for "is it bad practice to use something like 100 view controllers?" the answer is that it depends on the app. If you're making a flashlight or fart app, it's way too much. But if you have a complicated app it very well might be appropriate. From what you wrote my guess is that you could probably cut it down a little with some reuse but without seeing the project that is just a guess. 
It's just code, not Code. It's just user, not User. Why are you randomly capitalizing words? English doesn't work that way. Don't do that.
[This person](https://stackoverflow.com/a/43878146) probably explains the approach better than I could. Let us know if you still have questions.
Makes sense as the image is supposed to bleed out of the safe area
C++ STL multiset is extremely useful thing, try to look at. It's just a set, which have count(T) function along with contains(T) and regular set operations (modified by respecting value count). Personaly I see two main implementations: - simple: using private Dictionary of [T : Int]; - classic: implementing Hash Tree (with &lt;= or &gt;= comparator) yourself.
Anyone know if this would be a good idea or not, given that Swift 4 is now out? I'm usually not a fan of learning from an older version as you might have to 'unlearn" things, but at the same time, if it's 80% the same, then it can be worthwhile.
Five per SB at most, being one or two the main actors and two or three accessories like modals, options, etc. Break them up in different SBs or use XIBs and an app director to manage them all.
Thanks for the hint. I think I have to read some of the basics... I will have a look into the Documentation! https://developer.apple.com/documentation/foundation/urlsession
Thank you too! I will have to read about URLSession!
I will have a look into this pod! Thanks!
I recommend making a post over on [Stack Overflow](https://stackoverflow.com). You'll get a lot of help as long as you format your question properly: [Stack Overflow: Asking](https://stackoverflow.com/help/asking) Most of all, don't post a screenshot of your code. Post the text of the code. Pare your example down to the minimum someone can put in a fresh project or playground. If you have a few questions post them separately, they'll be easier to answer.
It's pretty standard to have the type of element in a `Collection` be `Element`. By changing `T` to `Element` you follow that convention and you can also remove this line in `ListIterator`: typealias Element = T I'd also change the name of the contained `Element` from `element` to `value`, that's another pretty common convention. If you change your single-line comments before a method, property, or some other elements from `//` to `///` you'll automatically get [quick help](https://developer.apple.com/library/content/documentation/Xcode/Reference/xcode_markup_formatting_ref/index.html) descriptions on them. It's a nice freebie for one extra character.
Lots of good advice to use storyboard references. I'll add that you can start splitting up your big storyboard by using Editor-&gt;Refactor to storyboard…
It claims that the grammars were based on some ANTLR grammars. Considering that ANTLR is a venerable old parser generator (I used it more than a decade ago?), I went and looked and it [targets Swift](http://www.antlr.org/download.html)...so you could maybe port this converter to compile to a Swift binary.
There are a courses for swift 4 also, and you'll find a big discount for swift 4 course just search for swift 4, and if I find a free coupon I'll share it with you immediately. 
JSON transforms into simple dictionary when comes to iOS.
Resetting*
Your site looks great, but it took forever to load that first background image.
Yeah, saw that video, however it didn't explain that I needed a Launch Screen.storyboard to actually support the iPhone Xs screen if I don't use storyboards. Thank you. 
&gt; "_" - we don't care what the input variable is because it's a button click? The _ is the label for the input variable, not its name. If you have a function declared as `func doSomething(onValue value: Int)` you'd call this as `doSomething(onValue: 5)`. If the function is declared as `func doSomething(_ value: Int)` you'd call it as `doSomething(5)`. &gt; "sender:" - just a variable storing an instance of type UIButton? Yes, it lets you know which UIButton has called the function. 
so pretty much the only difference is running the function only with a required parameter versus running it every time it's called?
No. Swift is open-source and Apple even created an initial Linux port. You don’t need an Apple computer to build or run Swift code. The future direction of Swift is discussed openly on the public mailing lists, so anybody can suggest or vote on new features or just watch how decisions are made. In fact, Apple even open-sourced their Foundation library as part of Swift. That makes it easier to take code written for iOS devices and use it on non-Apple machines. Also the stuff about structs and memory isn’t really true. The compiler can reason about value-types much better and optimise them, so the drawbacks are less severe and there are secondary benefits. So no, there is really no truth to the story.
And it clearly made a huge differnce, I agree. It was impossible to work with objective-c, and we also have to admit that the whole app store business was really stuck before swift. I mean, things really picked up when swift came in, thank god. And thank the gods also for all letting companies adopt a new standard. I mean, having a header file and an implementation file in 2014? Wtf dude, it was about time
Yes, and https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454 You can't parse [X]HTML with regex. Because HTML can't be parsed by regex. Regex is not a tool that can be used to correctly parse HTML. As I have answered in HTML-and-regex questions here so many times before, the use of regex will not allow you to consume HTML. Regular expressions are a tool that is insufficiently sophisticated to understand the constructs employed by HTML. HTML is not a regular language and hence cannot be parsed by regular expressions. Regex queries are not equipped to break down HTML into its meaningful parts. so many times but it is not getting to me. Even enhanced irregular regular expressions as used by Perl are not up to the task of parsing HTML. You will never make me crack. HTML is a language of sufficient complexity that it cannot be parsed by regular expressions. Even Jon Skeet cannot parse HTML using regular expressions. Every time you attempt to parse HTML with regular expressions, the unholy child weeps the blood of virgins, and Russian hackers pwn your webapp. Parsing HTML with regex summons tainted souls into the realm of the living. HTML and regex go together like love, marriage, and ritual infanticide. The &lt;center&gt; cannot hold it is too late. The force of regex and HTML together in the same conceptual space will destroy your mind like so much watery putty. If you parse HTML with regex you are giving in to Them and their blasphemous ways which doom us all to inhuman toil for the One whose Name cannot be expressed in the Basic Multilingual Plane, he comes. HTML-plus-regexp will liquify the n​erves of the sentient whilst you observe, your psyche withering in the onslaught of horror. Rege̿̔̉x-based HTML parsers are the cancer that is killing StackOverflow it is too late it is too late we cannot be saved the trangession of a chi͡ld ensures regex will consume all living tissue (except for HTML which it cannot, as previously prophesied) dear lord help us how can anyone survive this scourge using regex to parse HTML has doomed humanity to an eternity of dread torture and security holes using regex as a tool to process HTML establishes a breach between this world and the dread realm of c͒ͪo͛ͫrrupt entities (like SGML entities, but more corrupt) a mere glimpse of the world of reg​ex parsers for HTML will ins​tantly transport a programmer's consciousness into a world of ceaseless screaming, he comes, the pestilent slithy regex-infection wil​l devour your HT​ML parser, application and existence for all time like Visual Basic only worse he comes he comes do not fi​ght he com̡e̶s, ̕h̵i​s un̨ho͞ly radiańcé destro҉ying all enli̍̈́̂̈́ghtenment, HTML tags lea͠ki̧n͘g fr̶ǫm ̡yo​͟ur eye͢s̸ ̛l̕ik͏e liq​uid pain, the song of re̸gular exp​ression parsing will exti​nguish the voices of mor​tal man from the sp​here I can see it can you see ̲͚̖͔̙î̩́t̲͎̩̱͔́̋̀ it is beautiful t​he final snuffing of the lie​s of Man ALL IS LOŚ͖̩͇̗̪̏̈́T ALL I​S LOST the pon̷y he comes he c̶̮omes he comes the ich​or permeates all MY FACE MY FACE ᵒh god no NO NOO̼O​O NΘ stop the an​*̶͑̾̾​̅ͫ͏̙̤g͇̫͛͆̾ͫ̑͆l͖͉̗̩̳̟̍ͫͥͨe̠̅s ͎a̧͈͖r̽̾̈́͒͑e n​ot rè̑ͧ̌aͨl̘̝̙̃ͤ͂̾̆ ZA̡͊͠͝LGΌ ISͮ̂҉̯͈͕̹̘̱ TO͇̹̺ͅƝ̴ȳ̳ TH̘Ë͖́̉ ͠P̯͍̭O̚​N̐Y̡ H̸̡̪̯ͨ͊̽̅̾̎Ȩ̬̩̾͛ͪ̈́̀́͘ ̶̧̨̱̹̭̯ͧ̾ͬC̷̙̲̝͖ͭ̏ͥͮ͟Oͮ͏̮̪̝͍M̲̖͊̒ͪͩͬ̚̚͜Ȇ̴̟̟͙̞ͩ͌͝S̨̥̫͎̭ͯ̿̔̀ͅ Have you tried using an XML parser instead? 
Maybe use this html parser: https://github.com/tid-kijyun/Kanna
&gt; However, I picked up Swift recently and I noticed that there is a massive use of structs instead of classes. Structs are not allocated in the heap but on the stack. No, you're thinking of C. In Swift, "struct" is simply the name for value type. The compiler can allocate it on either the heap or the stack, depending on where it's most efficient. Or not at all, if it can optimize through the initializer. By using "struct" to indicate intent ("value type") rather than mechanics ("on the stack"), the compiler has a lot more latitude to generate better code. &gt; When you think about it, this would tend to increase the amount of memory used by an application as the objects get copied instead of allocated only once and passed by reference. No, structs don't always need to get copied when passed to a function, because the compiler knows when they're mutable. There is also massive use of immutable types in Swift. Have you even *tried* to look at the codegen? Do you have any evidence that Swift programs tend to take more memory than the same programs written in Objective-C? In my experience, they do not. If Apple really wanted a new convenient language that subtly used more memory, they could have just used a tracing GC, like most other modern languages. This was rejected on the basis that [GCs require 3-4x more memory](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160208/009422.html) to give good performance. &gt; Another issue was the serious push to adopt Swift at an enterprise level even if the language wasn't production ready. You mean by IBM? What does that have to do with Apple? &gt; I'm currently working on a project for a multinational corporation, and their internal guidelines are to use Swift 3 and immediately update to Swift 4 as soon as it comes out. It's my job and I'll do it, but since when is this sort of thing a good practice lol? Your company has questionable internal development practices, therefore Apple is out to get us? Objective-C is still a fully supported language on all of Apple's hardware, and will be for many years or decades to come. If people thought Swift was worse in any way, they could simply *not use it*. If anyone is out to get us, it's your "multinational corporation".
Apple pushed the language for enterprise adoption before it was ready, so that’s the end of it. No way to defend them, sorry
Is there any detailed documentation for Kanna?
No need for the conspiracy theory stuff. Yes, Apple definitely invests in Swift because it thinks it will be good for its business if programmers have a better experience developing for its platform. Apple inherited from NeXT the nice but quirky hybrid of C+Smalltalk known as Objective-C. It served well for a long time but it was time for a change.
To be fair, in C you can malloc or alloca a struct, where it resides is up to the dev. The difference to me is that writing any significant C program without structs would be sheer insanity, while in Swift they’re helpful when you’re dealing with concurrency, but even then you can completely avoid using them. I still like ObjC, it’s just so bloody verbose, that’s my biggest gripe against it. I couldn’t write ObjC without autocomplete, while I mostly don’t need it for Swift.
Yes, as long as you sell physical goods in your app. For virtual stuff, In-app purchase is the way to go. For how to use Apple pay in you app, follow the tutorial https://www.raywenderlich.com/87300/apple-pay-tutorial Had some issue with the python script to get stripe token since my backend is node I followed stripe docs to integrate it successfully. 
If that's all you need, a full HTML parser is way overkill. The Swift String class has various methods that can accomplish what you want: https://developer.apple.com/documentation/swift/string You could also use a simple regex.
True about the auto complete stuff, but I’ve been using it a lot so I’m not sure how I’d fare without. In any case, we got to a point where people who complained that obj-c was a pain because they had to think about the concept of memory and wanted something more high level, are now really happy that they got to work with Swift and learn about the type of objects you can create and where they reside... yeah, people *are* smart....
Just a business. They ensure they’ll get a huge influx of money from people who will be forced to update the apps multiple times and eventually migrate them to swift.
Anyone with an existing project in ObjC can just keep using it. It will be supported for at least another decade. Or you can mix Swift and ObjC. They are fully interoperable. It is up to each application developer do decide if the benefits of migration outweigh the costs. Nothing is forcing anyone to switch. Is that an A10 chip on your shoulder? 
The switch will be forced, that’s a fact. Now, next year, on in the next 5. How long it will take depends on the market. If apple can get money out of forcing the switch, they’ll do it sooner or later, depending on their current situation. See how nothing about this has anything to do with the language? That was just the opportunistic excuse. 
Since /u/Esteluk has already answered part 1 of your question, I shall attempt the 2nd. let error = (code: statusCode, error: errorString) is a `tuple`. A `tuple` is a collection of elements of different types. Using tuples we can have elements of mixed types stored together, without needing to create a wrapper class for them, or use an `Array` with `Any` type. Tuples are declared like this: (first: String, second: Int, third: Float, fourth: Double) We can access these values either by their parameter names, or indexes. So, let values = (first: String, second: Int, third: Float, fourth: Double) values.first values.second is the same as values.0 values.1 Also, it's not important that tuples have names, they can be nameless, but in that case, we can only access them via indexes. Btw, about your 1st problem, In all other languages, functions don't have external parameter names, but swift does. For ex: In java: public Int calculateDifference(int smaller, int larger){ //body } sumOf(10, 20); This leads to confusion as we don't know in what order the values should be passed. We need to check the documentation to realize that this function takes the smaller number in the first place, and larger in the second. Swift solves this problem by using external parameter names. func calculateDifference(smaller s: Int, larger l: Int) -&gt; Int{ //body} calculateDifference(smaller: 10, larger: 20) You can see the difference it makes. Here, s and l are internal parameter names, to be used inside the function. But, we have the option to forego the external parameter names if we so like. func calculateDifference(_ s: Int, _ l: Int) -&gt; Int{ //body } caluclateDifference(10, 20) I hope this helped you somewhat. 
this explanation far surpasses any text ive found. thank you for removing my headache. 
I set the root view controller of the window to the login controller if they need to logon. Otherwise, I load the main view controller when then app starts. If the user hits logout, I set the root view controller to the login VC. This unloads your main controller . After a successful login, you set the root view controller to your main controller
Terribly written article. 
I saw a good guess on StackOverflow: paid-download rank-pushing farms hit a lot of random free apps too so the paid activity gets lost in the noise. There's no way there are 1000 people in China who want to see a graph of tide levels in the US.
Holy shit, r/swift has it's own conspiracy theorist nut job. What a big moment for this community. 
I’m not familiar with that specific tutorial but what you typed there means you’re declaring an array of buttons on the Interface Builder - are you positive that’s what’s asked of you? Can you link the specific part in the tutorial where you need that? If what you need is not that you can always create the IB outlet from the drag action. Also keep in mind that if you want to connect from the Interface Builder to the text editor and you already declared the Variable, you don’t need to press control I don’t think 
Use system editor and ctrl+drag from your button to after class ViewController: UIViewController { //DRAG HERE! 
Ok I think I could do it with the String class from Swift...I can tell what I have to do to achieve my goal but I can't know how to write it in coding language... There is the following example in the documentation: let name = "Marie Curie" let firstSpace = name.index(of: " ") ?? name.endIndex let firstName = name[..&lt;firstSpace] print(firstName) // Prints "Marie" I guess that is quite similar to what I want. The difference is, I have not one seperator but two separators. My first separator would be "[href="/thisIsAlwaysTheSame/" and my second separator would be "/" so that I get the content between the two separators: "UniqueNumberA" ...but I can't wrap my head around this... if you could help me I would be really happy! Additionally I would have to iterate through my String to get an array of all my unique numbers, but this would be the next step... EDIT: Ok, after checking this example in more detail I think I can't really use it. Because in this case I am getting the index of the space, but in my HTML I can't just search for a specific index by one character - I have a substring I have to search for...but a substring has no particular index,,, So which of the classes could I use to solve my case?
Google is your friend.
Apple planned that
1. Don't use storyboards. 2. With that many, you are probably duplicating lots of view stuff. Even the largest apps probably don't have 75+ *unique* VCs. 3. Don't use storyboards.
Im confused about what keywords or functions to search for. I can see apple pay tutorials but I want people to be able to do this. At the till or service checkout, pull out their phone, open my app, my app asks them what choices of payment they want to use and then to use the wireless connectivity ot authorize the payment. Make sense? 
So basically an nfc checkout?
a? Could you clarify? Sorry I am a noob 
You press your phone against the nfc terminal and pay that way. Is it for retail or what kind of app are we talking about?
yes, i'm doing the Apple Pie guided project on the official apple dev. ebook, I got it to work by dragging it to the document outline instead of storyboard to the code thank you though
thanks this worked!
Doesn’t sound like it. Best way to start would be to not worry about drawing designs. Just start by laying out the key interface elements in a way that makes sense to you. Decide on a tint color and build the color scheme around that. Get user feedback and iterate from there. You’ll be surprised how quickly you can build something ‘good enough’ When you have a more solid idea of what you want I really like Sketch as a layout app, and there’s a free trial. You can find a lot of guides on how to use it efficiently. 
Only had a chance to glance but you probably need to make “previous” node a weak reference otherwise you’ll get a strong reference cycle. 
Check out the WWDC sessions related to design. 
Stick to minimalist designs - it’s easier to make them look good. Head over to [dribbble.com](http://dribbble.com) for some inspiration. Do some straight-up copying of designs that you like and aren’t too complex, just to figure out how you can make things look a certain way. Make some “apps” that don’t actually do anything, so you can focus on practicing layout and styling.
I’ve been working on a game kinda like flappy bird but I used my own drawings and made it a bit more fun. Never used swift so this is my very first project 
Can you explain it? so that I can improve.
Don't everyone just use Sketch to design their UI? At least beginners 
'Borrow' the styles and layouts that you like; download open source projects and check out how they do their interfaces.
&gt; Apple pushed the language for enterprise adoption… This is a brave assertion that lacks evidence. What kind of pushing? Who did they push? Can you support this with evidence? IBM, as an enterprise example, did it on their own for their own reasons. I've yet to hear of Apple leaning on a business to insist that it is used blindly. During [this talk](https://www.youtube.com/watch?v=SqnpZRCIE3Q) (geez, I hope it was this one. I can't remember for sure), IBM's Kitura team outlined why they decided to start working on a Swift framework. You say there's no way to defend them, but I can't see anything to defend. The IBM developers in the talk above don't use Xcode and they don't produce for Mac. They are using vim and emacs to produce a Swift web framework for Linux. How does this enforce adoption of new Apple hardware? &gt; Apple pushed the language… before it was ready… If you take this argument alone, it's interesting to note that they definitely did not do this. During the announcement of Swift they said that it wouldn't be source compatible from 1 to 2, and hinted strongly that 2 to 3 wouldn't be. They cautioned users against adopting it blindly. After he left Apple, Chris Lattner discussed at length the history and decisions in Swift's design on the [Accidental Tech Podcast](http://atp.fm/205-chris-lattner-interview-transcript/). Honestly, if they were trying to enforce hardware upgrades, why make every piece of it open source? Why open source the entire commit history instead of just the 1.0 version? Why allow non-Apple people to have any input, let alone language design and implementation input? Why go through the effort of porting it to Linux from day 1? Why make 32-bit library compatibility a priority when all Apple products are 64-bit based? Why make ABI stability a priority, then put in 2-3 years of effort just to get the language running on non-Apple products? Why isn't there any language-enforced use of anything Apple?
Not even just beginners. We use it for everything at the agency I'm at. Sketch is really great!
I would recommend not thinking about design too much. UI/UX is a huge area, and when you're just getting started it can be frustrating (as you're discovering). Don't overthink it. There will be plenty of time to get creative later. One great way to get into building your UI without doing much decision making is to implement your own version of someone else's UI patterns library. The easiest to understand is probably [Material design](https://material.io/). Once you identify what your app is supposed to do, you can draw out the user's flow, then pick the elements which are relevant to making that work and implement your version of it. If you want something more interesting, you might find [dribbble](https://dribbble.com/) to be a valuable resource. Apple has helpful [Human Interface Guidelines](https://developer.apple.com/design/) which you can use to help decide which types of elements to use during the planning phase. So does [Google](https://developer.android.com/guide/practices/ui_guidelines/index.html), and many others. The most important thing is to let your app's purpose and use define the design. Don't design the UI first, let it reveal itself through use.
Solid advice.
Ugh, shut it down. They figured it out. Seriously, you do actually raise a fine point: copying types with value semantics incurs both a runtime and a code size cost. Whether that cost is excessive, or pass-by-reference is some kind of antidote is an entirely different kettle of fish. Let’s examine this in more detail, shall we? &gt;Structs are not allocated in the heap but on the stack. First, some notation: Thanks to the work Michael Gottesman et al. have done on Semantic SIL (née [Semantic ARC](https://gottesmm.github.io/proposals/high-level-arc-memory-operations.html)) the notion of “copy a value” and “retain an object” (and “do nothing to a trivial value”) are one and the same. We call this `copy_value`. Similarly, “destroy a copy”, “release an object” (and “do nothing to a trivial value”) are all covered by `destroy_value`. Early on in what could be said to resemble Swift 1.0’s life, the decision was made that functions shall own their arguments. Practically, this means the Swift compiler will emit one `copy_value` per argument in a function call, and emit the corresponding `destroy_value` somewhere near the exit point(s) of the function. We call this convention “+1” or “owned” because it is the called function’s responsibility to see to it that the copy on its arguments is balanced by a destroy. “Aha,” you say, “the compiler is clearly just copying *everything*. Those dastards, those fiends, they’re all in bed with Samsung...” Not so fast. The optimizer is capable of taking a look at non-public functions and *zapping unnecessary copy_value’s*. It does so by changing conventions from “+1” to “+0” - and in doing so it removes a `copy_value`/`destroy_value` pair. We call this +0 convention “guaranteed” because the lifetime of the parameter is “guaranteed by the caller”. Side note: You may notice “reabstraction thunks” in stack traces. These are little shims of code the compiler generates when it needs to, among other things, call a guaranteed function with owned arguments and vice-versa. It just copies/borrows the argument as needed and calls the function. The optimizer is also capable of eliminating these if it can prove reabstraction is unnecessary - usually by inlining it first. The idea of removing copies is such a good one, we formalized it in the [Swift Ownership Manifesto](https://github.com/apple/swift/blob/master/docs/OwnershipManifesto.md) and are getting around to implementing bits and pieces. I had a hand in implementing an attribute for [guaranteed parameters along API boundaries](https://github.com/apple/swift/pull/11160/files). “Oho, smart”, you mutter to yourself, “BUT! Have you considered just... NOT COPYING THINGS?” Why yes, we have. Specifically, I would really like to see the language move to a +0 calling convention. We know the boundaries along which a copy is necessary (property setters, certain collection operations, etc.). In fact, I ran some benchmarks with a really roughshod build of Swift passing as many things +0 as possible and saw a roughly 10% speed up in our benchmark suite. With ABI stability looming, we have to make a decision on which convention to use soon. Hopefully my work on the +0 calling convention wasn’t in vain... &gt;When you think about it, this would tend to increase the amount of memory used by an application as the objects get copied instead of allocated only once and passed by reference. Err... this is strange. The heap is slower, more expensive, and harder to manage effectively (from a language designer’s perspective) than the stack. The idea that the cost of a single allocation, amortized over the life of an object, is easily less expensive than a similar value’s lifetime is absurd. Copies on COW types - by far the most used in Stdlib - become plain old retains, for example. This leaves copies of enormous struct types which are uncommon though not unheard of. Probably more fuel for the “+0 calling convention argument”. The truth is, most values don’t live that long. Those values that manage to get passed as parameters to functions can and do have their lifetimes shortened by the Swift optimizer to better reclaim resources earlier. This is something that isn’t really possible in Objective-C; a strong optimizer would destroy the dynamic nature of the language. In addition, a single object allocation is such an innocent way of looking at things. Along with your object you get selector caches allocated at all levels of the class hierarchy as messages are called, side tables if you exceed your runtime-granted bounds, associated object maps allocated by the runtime on demand, a global zeroing weak ref table allocated for your convenience, pages for autorelease pools (one per thread, naturally), need I go on? (If anything, ARC’s increase in retain-release traffic along parameter boundaries over MRC is a racket to sell faster A-series chips). Resource management is a particularly nasty area that programming language designers still struggle with today. But the idea that value semantics are a step backwards in that fight is utter nonsense. *whispers* the fools, actually thinking we optimize this language for anything other than our bottom line... I mean, uh, yeah.
Get yourself a decent SSL cert for starters.
As much as I would love to recommend Sketch as well, it's way too expensive and Mac-only. It's overkill for OP's purposes. OP would be better off just designing with paper prototypes or Photoshop / GIMP
what is the point of bashing the op for that? His SSL is perfect for me. 
Well, one of my colleagues, who is an experienced iOS developer, recently wrote an article on the same topic [top open source iOS libraries](https://www.spaceotechnologies.com/top-open-source-ios-libraries/). He included: 1 – AFNetworking 2 – Alamofire 3 – JSONModel 4 – MagicalRecord 5 – Chameleon 6 – GPUImage 7 – ReactiveCocoa Check it out if you are to know more about these libraries. 
&gt;I'm currently working on a project for a multinational corporation, and their internal guidelines are to use Swift 3 and immediately update to Swift 4 as soon as it comes out. You're so damn lucky...
Nice trick 
Download lots of other highly rated apps to see what they get right, and poorly rated apps to see what they get wrong. Focus first on usability and accessibility, and aesthetics will follow. For more of an understanding about why and when to use UI elements, Apple have design guidelines at https://developer.apple.com/ios/human-interface-guidelines/overview/themes/
The Swift 4 course from devslopes doesn’t cover Objective-C, so it’s worth checking out if you need/want to learn it.
Well it's good to see you've already made your mind up on the matter and aren't bothering to listen to anything anyone here has said.
Note - it's *dribbble* with three Bs. https://dribbble.com/
I'm using Firebase as my backend, here's the code I'm using for self sizing cells: func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -&gt; CGSize { var height: CGFloat = 80 let text = messages[indexPath.item].content height = estimateRowHeightFor(text).height + 20 return CGSize(width: self.view.frame.width, height: height) } func estimateRowHeightFor(_ text: String) -&gt; CGRect { let size = CGSize(width: 200, height: 1000) let options = NSStringDrawingOptions.usesFontLeading.union(.usesLineFragmentOrigin) return NSString(string: text).boundingRect(with: size, options: options, attributes: [NSAttributedStringKey.font: UIFont.systemFont(ofSize: 16)], context: nil) } // I'm also estimating the width in cellForItem cell.messageBubbleViewWidthConstraint?.constant = estimateRowHeightFor(messages[indexPath.item].content).width + 32 EDIT: The issue also happens as I scroll through the messages and I believe it doesn't happen if the messages don't exceed the view's height. Only happens if there are a lot of messages, not sure though as I've never encountered this kind of bug before. The chat view is built from scratch. EDIT 2: Here's my fetchMessages function: if (Auth.auth().currentUser?.uid) != nil { Message.downloadMessages(forUserId: self.id, completion: {[weak weakSelf = self] (message) in weakSelf?.messages.append(message) weakSelf?.messages.sort(by: {$0.date &lt; $1.date}) DispatchQueue.main.async { weakSelf?.collectionView?.reloadData() weakSelf?.collectionView?.scrollToItem(at: IndexPath(item: self.messages.count - 1, section: 0), at: .bottom, animated: false) } }) }
Thanks - fixed.
The less interaction a user has the better
&gt; At least beginners What would you say non beginners use?
Thank you! The resource materials for the swift v4 version of the book are available here https://developer.apple.com/go/?id=app-dev-swift-student-swift-4 . The version of the openrestaurant server located there is working correctly also with my swift v3 code. Still no images though.
You're just in bed with Apple.
Flat UI's are the way to go. Everyone is doing it now and they are super easy.
I would suggest you start with reading basic design books, like “The Design of Everyday Things” and “Don’t Make Me Think”. Then read articles on UX &amp; UI for mobile, Meng To has a nice book on that. And finally, go learn Sketch. My co-founder, Ahmed made a nice [beginner guide](https://medium.com/flawless-app-stories/https-medium-com-flawless-app-stories-the-ultimate-guide-for-mobile-developers-who-want-to-design-part1-a2d47c04fd49) on learning UX &amp; UI design for iOS developers, feel free to check it as well. 
At what stage? Most of the pros I know start on whiteboards, or paper.
We just launched Swift 4 support in case you'd like to check it out and share your feedback: https://swift.quicktype.io
[quicktype](https://swift.quicktype.io) infers types from JSON sample data, then outputs Swift `Codable` types and converters (Swift 3, Go, Java, C#, TypeScript, and Elm are also supported). This is a new project and we would love your feedback. Is this useful to you? What can we improve? Please let us know if there's anything we can do to generate more idiomatic code, or what additional options you'd like to see! You can also try our CLI: $ npm install -g quicktype $ quicktype -o LatestBlock.swift https://blockchain.info/latestblock
When I started learning programming, a quote that stuck to me was "good artists copy, great artists steal" so I am finally realizing how to put that into how I program. Thank you. 
I have no idea what that means, I'll look it up, thanks
I have heard of sketch before. Is it better than Photoshop?
Great advice, never thought of that. Thanks. 
So reading other app reviews would be a good idea?
I heard of sketch, I thought Photoshop was the only way to go though. I'll look into that. Thanks. 
If I was looking into making this a career, would sketch be a wise investment since I'll start learning to use it now?
I'll look into that. Thanks. 
Thank you for all the resources. I'll spend some time looking into those. 
Flat UI is avoiding the use of shadows (sometimes okay, usually not), gradients, background patterns or 'textures.' Previous to iOS7, Apple used a lot of skeuomorphism (trying to make a design resemble its real world counterpart; like making the Notes app look like a notepad)... which has definitely fallen out of style. It is also a larger part of the idea of minimalism -- presenting only what is needed and using design in ways that only accommodate the user's receiving of that information.
If you're planning on making it a career (and you can afford it) then sure, but if you're working for a company I would let them pay for the license. There are still companies that will insist on using Photoshop (my previous company did that until our designers finally managed to convince management to buy them Sketch), and during initial concepts I personally still value in using low-fidelity prototypes (i.e. hand-drawn or using PowerPoint/Keynote), so Sketch (coupled with Zeplin if you're working with a team) imo is just one tool. 
Oh gotcha, now the name makes sense lol.
Not wasting your time at all. You can pick up a lot by reading and you'll learn a lot through experience. Spend a lot of time thinking about how your user will actually use the app, which may be different than how you first imagine. Think about how people hold their phone and the range of the thumb. Think about how users can access various functionality with as few movements/interactions as possible. Basically, remember that every app at heart is a tool to get a job done. Don't let the tool get in the way of the job.
They’re different tools, but Sketch is much more tailored around UI design work rather than photo editing.
Very nice writeup! I hadn't thought of creating an extension of `Bundle` to read from the app's `info.plist` file. That's quite clever! One note: I prefer to use structs with static properties rather than enums. Static properties can still be accessed using the type inference dot-syntax, but structs are more flexible. The problem with enums is that when you want to add a new property, you have to write a getter with a switch statement. This is fine when you only have one or two properties, but if you find yourself maintaining over a dozen, things get messy and hard to read. The end result is ultimately the same — you can reference your properties with the dot syntax, like so: struct Environment { let apiEndpoint: URL let analyticsID: String init(endpoint: URL, analyticsID: String?) { self.apiEndpoint = endpoint self.analyticsID = analyticsID ?? "" } static let production = Environment( endpoint: URL(string: "https://api.example.org/v1")!, analyticsID: "0000000000" ) static let development = Environment( endpoint: URL(string: "https://api-development.example.org/v1")!, analyticsID: nil ) } let environment: Environment = .production You can also add static functions which enable you to do things like this: extension Environment { static func debugAnalytics(analyticsID: String) -&gt; Environment { return Environment( endpoint: Environment.development.apiEndpoint, analyticsID: analyticsID ) } } let environment: Environment = .debugAnalytics(analyticsID: "1111111111") 
Almost. You don’t need the CodingKeys, and I would need the decoding extensions, so can I turn those off? Also, most response types should be structs, not classes, as they make more sense as value types. 
okay, well the code I posted isnt in prettyprint. I tried uploading it like that but apparently it didnt work. 
Awesome! Thanks for taking a look. We include the CodingKeys when we translate JSON-friendly property names to more Swifty names (e.g. `next_evolution` becomes `nextEvolution` in the Pokédex example). Do you mean, omit them when we don't need to do this? We agree about structs vs classes, unfortunately we need reference semantics for self-referential types (e.g. trees), so we have to use classes here as far as we know. Do you mean that you *wouldn't* need the decoding extensions? Yes, we plan to add options to selectively disable those.
Hi, yeah, totally agree with your point about the difference between enums and structs !) And yes, in more complicated cases better to use only structs) I really like your approach, I guess it may be a fifth way to manage environments)
That's great advice, I never thought of that. Thank you. 
Yes, wouldn’t. Really I’m just looking for a way to generate Decodable types that exactly match the JSON, naming and all. Then I can use good Swift types from there. As for structs vs. classes, can’t you default to structs and just use classes in the narrow cases you have to? Or leave it to the user?
Well, I'm a pretty fair Swift programmer (IIMSSM), and I have to admit, this question has got me stumped. I've had some tough problems before: protocols with associated type requirements, access levels and type mismatches have all had me scratching my noodle in the past, but I've managed to figure them all out; but why Chinese people would download an Italian app is completely baffling to me. And the worst part is, Apple's Swift Reference manual and the half-a-dozen books I've read on Swift and all the fabulous Swift tutorials on the interwebs completely fail to deal with this Chinese/Italian quandry wrt Swift programming. Although Swift is 'open', Apple don't really give us access to the long-term road map for its development. We can only cross our fingers and trust that in some future version the compiler, run-time library and package manager developers will tackle this vexing issue. 
I was hoping pretty hard that the Swift team will tackle concurrency as soon as possible. But with the perspective of this post, there really might be more important problems.
It wouldn't hurt to do that, but you would get more of a feel for what good UI is like when you try the app yourself.
I think it's bots, there's a few other posts of people claiming the same thing (myself included) I'm not sure what they are getting out of it, but I think it could be related to review farms downloading apps to appear legit. (100% pure BS speculation)
Ok I get your sarcasm, yes it's not a question directly related to Swift, but I've seen many posts here about iOS or apps in general. And I am not obviously asking "why do Chinese people download an Italian app" , but "why do 2500 Chinese people suddenly download a one year old app that they can't use in a language that they probably don't understand, leaving 0 reviews and buying 0 in-app purchases?". 
TOTALLY. On August 24th, my Watch app went from a typical 0 downloads a day to average over 40-50 a day. I had +500 downloads for that last week of August and over 1500 downloads this month, and it seems from Asia region.
Ok thanks, appearing legit could be the reason. It would be interesting to know how and why do they choose one app instead of another 
Lot of effort for a shitty comment.
Same here! One of my four apps consistently sees 50-60 downloads per day from China. I don't see any ad revenue from it so I don't think any of the app downloads are being used at all. Thanks for asking this as I've been wondering the same thing.
"UIKit Components" section of the article sounds like bad practice. Xcode has built-in support for localizing XIB files by using .strings files. There's no need to load strings in code.
I prefer to do my wireframes in black volcanic sand with a stick. This is a video of our team doing high fidelity mock-ups https://m.youtube.com/watch?v=JdUFqkX2d6I
Working on an open source framework to support multiplayer ARKit-based development. Being released shortly.
Do you see anything in iTunes connect analytics? Such as referral sources?
When I looked at mine, my China downloads are all “App Store browse” for the source type. My app is a sticker pack for my university in the US and now over 2/3 the downloads are from China. ¯\\\_(ツ)_/¯ 
When you copied the images into your project what options were selected?
Perhaps to get other customers also download blah
It’s lit
With iOS 11, the "Camera" app is still an SLR, the "Mail" app is still an envelope, and the "Phone" app is still a Model 500 handset from 1950. iOS 7 introduced parallax wallpapers, which brought actual 3D effects to the home screen. Most of the iOS app icons still feature a gradient, too. If Apple were trying to get away from skeuomorphs and gradients, and towards flatness, they're not doing a very good job of it. It's certainly less rococo than before, but there's only a couple of Apple icons in iOS 11 that *aren't* skeuomorphic.
You should be more specific than just say "becomes messy" ... it looks like the message goes into the data store but is not displayed. Where do you update the number of items in the collection view?
I can’t really explain it, did you watch the video? That’s exactly what happens. In the func numberOfItems in section, I just return messages.count
You could try not making your app available in China and Russia. That should reduce some of the noise.
You're right. I'll update asap thanks.
Likewise, I'm getting 50 a day from China like clockwork. These numbers aren't reflected with Fabric or GA new user stats. 
Why are you using a collection view? Surely a table view will do with two different types of custome cell for sent and received messages. Actually probably just one custom cell and set the text alignment and background colour. I'd just say use a UITableView and set the heightForRowAtIndexPath based on how much content there is in the cell
It's not a problem having downloads from China, it's just weird. Thanks for your suggestion anyway!
Because I can’t pin the message input bar at the bottom with anchors. Do you know how to fix it though?
What? Of course you can still put it at the bottom. See [here](https://www.google.ie/amp/derpturkey.com/uitextfield-docked-like-ios-messenger/amp/)
Oh, the inputContanerView, I didn’t try that at all. Thanks! 
Yes I saw the video. You should go into the numberOfItems and print the messages.count to the debugger window. It could be an issue of being stuck in cache or something. Are you using a tutorial for this? It looks like a standard chat app, there's quite a few tutorials on that.
No, no tutorial. I will look into the cache issue. Thanks
It could be Chinese people living in Italy, but still have a Chinese itunes account.
I don't think so because I have 0 reviews and 0 in-app purchases out of 2500 downloads from Chinese accounts. And they went to basically 0 downloads per week to hundreds (I'm talking about China) from one day to another. And iTunes analytics shows only 1 session in the last 90 days, it seems they just download it and not using it. They are probably bots or something like that, but I can't really think what do they gain out of it
Can one filter out China from the iTunes Connect analytics?
I think you should start with the numberOfItems and see if that is being updated. One of the things I like to do when learning something new is to get a tutorial that has complete source code. Then take the time to understand how things work. Adding a record to a datastore and displaying that record should be pretty straight forward.
I have experience with backend and frontend, especially Firebase, not sure what’s causing it. I will also try and use a table view.
Nice write up. One thing this doesn’t cover is the occasional need for doing this at runtime... this mostly applies to QA cycles, but it’s incredibly useful to be able to switch on the fly. There’s an open source project to help tackle this called “Biome”: http://github.com/ndizazzo/biome
So is the numberOfItems getting the correct number of records? In other words, this is either a problem with Firebase or with the data browser. Firebase might not be returning the correct number of records or maybe not storing it, or caching it. The data browser might not be showing the data. It might be because of recycled cells or something else. Checking to see how many records it has is pretty easy. Doesn't the debug offer a way to list off all the elements in the data store? I know the debugger can list an array with one command.
Can I ask which dev slopes course you did? Also site and app looks great! You are going places for sure!
Why not just select the regions in which you want your app to be available? 
Yeah obviously they didn’t completely abandon the concept. They definitely moved away from it though.
Took this course before iOS 11 and all of the methods used here are still totally usable.
you can choose the country you want to see the analytics
I don't mind having downloads from China or other countries, I was just wondering why/what do they gain from it
I'm sure it has value, but I skipped Swift 3 and haven't done any swift since Swift 2. I was going to completely skip 3 and move to 4. I'm mainly learning Swift in case it's asked for on a job.
&gt; There’s an open source project to help tackle this called “Biome”: http://github.com/ndizazzo/biome thanks! I didn't know about that!
Couldn’t it be international students with foreign Apple ID’s?
I believe a few of them are, but my university has less than 10,000 students. To have over 1,600 downloads from China in this semester makes no sense. 
Can you explain what these words mean to you, and what exactly you saw them do? I've been following Swift since the day it went public, and I really can't imagine what you might be trying to say.
&gt; The difference to me is that writing any significant C program without structs would be sheer insanity, while in Swift they’re helpful when you’re dealing with concurrency, but even then you can completely avoid using them. I'm beginning to think that "struct" was a poor name, because everyone associates it with "C-like structures". In Swift, such fundamental types as Int, Float, Bool, Array, Dictionary, and String are all "structs" (i.e., value types). I pity the fool who tries to write a program without them!
You have one of those annoying cookie notification bars, but the "Learn more" learn doesn't say anything about how or why you're using persistent cookies to track us.
Glad I’m not alone! One of my apps gets about 50 dl’s a day from China. 
Also updated: - All the books in the [Hacking with Swift store](https://www.hackingwithswift.com/store) - All 300+ tips and examples in the [Swift Knowledge Base](https://www.hackingwithswift.com/example-code) - The "Be the compiler" [Swift test](https://www.hackingwithswift.com/test) - All 100+ [interview questions for iOS developers](https://www.hackingwithswift.com/interview-questions)
Okay, so I just got home and apparently messages.count is always +1. So if there are 5 messages, messages.count returns 6.
So when you add a message it adds one to the message count. That should show you that the data store is working properly. So now it's an issue of the data browser. You should be able to compare you code to the code in a tutorial and see what's missing. You have a number of messages displayed already in the video you linked, how did those get there? I assume you added those somehow, now you're unable to add more, how did the other messages get there? If it's the case where you add those in then started the program, try adding 3 more messages , exit the app, restart the app and see if the 3 new messages show up. That would indicate a problem refreshing the data in the browser. I forget the name of the method that refreshes the data.
Well, what I mean is to not make the app available for download in China. If there is a very low chance of people using it there, no big deal.
I'm on mobile, this is just a wild guess based on looking at the video: Maybe it's just that the layout does not update after you change a cells content. Try adding a cell.setNeedsLayout() at the end of your cellForItemAt
https://medium.com/@eric.dockery283/custom-view-transitions-like-the-new-app-store-a2a1181229b6 You'll need to tweak the animations a bit to get it to look correct.
&lt;3 You rock man!
This issue is too popular for mobile developers. Check comments here: * https://www.reddit.com/r/iOSProgramming/comments/6v2t9k/my_apps_are_getting_some_downloads_but_no/ * https://www.reddit.com/r/iOSProgramming/comments/6sv19h/app_downloaded_but_not_used_possible_reasons/ * https://www.reddit.com/r/iOSProgramming/comments/6sc71a/do_you_have_users_from_china_asia_market_do_they/ * https://www.reddit.com/r/iOSProgramming/comments/6v63hi/huge_amount_of_downloads_from_china_but_according/ 
Thanks! I really appreciate your dedication. 
Thanks a bunch! 
Just release an app called [Redi](https://itunes.apple.com/us/app/redi-square-stripe-analytics/id1277806298 ). It provides business analytics for customers using Square and Stripe. Written in all Swift utilizing a lot of [IGListKit](https://github.com/Instagram/IGListKit).
Actually, I didn't get down to any specific country, I just went to region. And now I did dig to a deeper level and it was specifically China. I am going to change it from Free to 99 cents and see if it drops to 0 right after. I am sure it will
This looks great but very time consuming. Designs will change a lot through the stages. It's best to use something that can help you design and make changes easily
Awesome, thanks :)
actual hacking or appropriation of the term to make it sound cool?
[removed]
You must be really confused when you attend hack days wherever you work.
Thanks, didn't know about it
How significant were the changes to update for Swift 4?
You can see a [full changelog of the project source code here](https://github.com/twostraws/HackingWithSwift/commit/daeef0e956949ec1eb4068a03c242724b6adecb6) – it took about two days to update Hacking with Swift, then a further three days to update the knowledge base.
Some solid advice here! Helped me out also!
Wat
Solid article. Had this issue earlier while doing some training videos. Managed to debug it myself but this is handy. Bookmarked.
Thanks!
Hey twostraws, I just wanted to thank you for your effort and all the free content that you have uploaded. It has made a world of a difference on my journey of learning swift and becoming a developer. I've got the swift coding challenges, next is the 100 dollar bundle. Keep on being fantastic!!
Awesome! And you're most welcome – I'm glad it all helps :) Remember, I can upgrade you to the [Power Pack](https://www.hackingwithswift.com/store/swift-power-pack) by discounting whatever you paid for any of the books it contains; just email me at paul@hackingwithswift.com – there's no point paying for a book twice!
You're perfectly right. Here we are: https://marcosantadev.com/cookie-policy/
I would expect it to be a [Dictionary.Keys](https://developer.apple.com/documentation/swift/dictionary/2894263-keys), not an array. Why do you say it appears to be a dictionary?
I tried to get it running in Xcode 9 but I get an error after importing it. I opened an issue on Github...
This is awesome! Although, for example in project 7: &gt; It's now time to parse some JSON, which means to process it and examine its contents. This isn't easy in Swift, so a number of helper libraries have appeared that do a lot of the heavy lifting for you. This isn’t true anymore as of Swift 4, though, is it? What with Codable and all that.
I am coming from Objective C, where [NSDictionary keys] returns an Array. Other than using it as a way to iterate over Dictionary, what good is it? I am trying to iterate over the keys , compare the value, and if the value meets the requirements, populate an array with the keys. In Objective C, I can take the Key as whatever object it should be.Can you give me an idea how I am supposed to use it like that?
Hey man thank you so so much. I really appreciate what you've done here. How long do you think it would take for me to go from start to finish?
so yes.
I find `Codable` is really helpful when teaching people to _write_ JSON, but less so when _reading_ JSON. For example, for my book Practical iOS 11 I wrote a tutorial that helped readers build a game using Apple Music, parsing the JSON using `Codable`. The problem is that Apple Music's JSON is surprisingly complicated, with lots of nested data, so you need to design a fairly detailed set of data types just to be able to read it in easily. So, I approach JSON pragmatically: if `Codable` is a simple fit then I go for it. Otherwise, I usually use SwiftyJSON, which makes even complex JSON parsing surprisingly simple.
There are 39 projects. If you do one a day, which is perfectly possible, you'll take a little over a month. If you buy the download edition and follow the guidebook, it has bonus challenges and review notes – I suspect two months is probably more likely.
This is great, thank you! As a beginner your tutorials were invaluable resources, and now that I have some more experience they are STILL an invaluable resource when I just need a quick refresher on how to do something. Just the other day I was Googling how to use haptic feedback notifications, your page on that was perfect.
Cool! I think there's much more value in knowing where to look for answers than trying to memorize it all, and I'm glad that approach works for you too.
&gt; These numbers aren't reflected with Fabric or GA new user stats. Can you explain that further? I'm not familiar with either of those
Except SwiftyJSON isn't really a JSON parser (i.e. you can't use it to initialize types), so it and `Codable` serve very different purposes. Otherwise I've found that two phase parsing using Codable works fairly well, where the initial phase are types that match the JSON exactly, which are then used to initialize the real Swift types you want to use, and you just extract and transform the data there. That way both types can use the automatically generated implementations.
What do you consider to be actual hacking?
Just found a silly interview question answer error: Question: What is the difference between aspect fill and aspect fit when displaying an image? Suggested approach: Aspect fit ensures all parts of the image are visible, whereas aspect fit may crop the image to ensure it takes up all available space.
Fabric is an analytics tool. I can see things like new users, returning users, time in app, retention and set up events so I know what / how my users are doing in app. It's well worth setting up (really easy) and gives you crash reports. Google analytics is another analytics tool. We use both since they are each better at certain things.
I don't consider coding and hacking to be the same. Anyone who says so is appropriating the term and trying to make it sound cool. edit: downvoted because people here think coding and hacking are the same. 
Thanks! It may sound like a dumb question... would it be possible to find work afterwards?
Awesome thank you. Just getting into this stuff.
Problems like this often arise when initiating networking from your view controllers. Forgive me if I didn't read your exact issue well enough (this iOS reddit app doesn't let refer back to the post while typing a response), that said: Try making a separate object manage your data, hold the state saying whether you're on of offline, or loading, and have accessors to the data, and some way for your VCs to observe state &amp; data changes, KVC maybe. Then you can keep your VC kinda dumb about networking, and more testable using a mock version of your manager object.
Hacking and programming are not the same, however, hacking can be programming. It doesn’t always mean breaking into something
You are trying to multiply string value of "25" by int 2 and this operation is not defined. Change age to be int, so you can actually multiply it, then after multiplication resulting int will be converted to string.
Thank you so much! I feel like an idiot now.
It's free at the time of this post. I just enrolled in it. 
So are you actually changing the root view controller when the user logs in or out? Something like this: https://stackoverflow.com/questions/15774003/changing-root-view-controller-of-a-ios-window answer 3?
You don't always denote non optional with `!`, really doing `var blah: String!` is a terrible idea and prone to developer errors (then crashes). If the property doesn't have value at some point, making it optional, unwrapping isn't painful. Sure there's cases where `!` isn't avoidable.
thanks - i need to scale that down!
Thanks man. Can't buy anything because no money but if I finally get a job I'll buy all your books honest. Great work.
I did the ios10 swift 3 course - looking to do the new one they have (ios11 swift 4) 
You very much can iterate over `availableProbes.keys` as if it was an array — even though in fact, it is a `Sequence`. You can even create a plain array from that sequence: `Array(availableProbes.keys)` if you require it to be an actual array somewhere else in your code. 
Awesome. Thanks. Can you tell me the benefit of it not being an array to begin with?
This is a tricky question to answer, because there are lots of other factors. However, I would say that if you work your way through Hacking with Swift fully, if you complete the homework assignments, and if you commit your work to somewhere public like GitHub, you're in a strong position to get a junior developer role, or at least an entry-level role. I wrote an article giving some advice that you might find useful: [ How to get a job as an iOS developer](https://www.hackingwithswift.com/articles/10/how-to-get-a-job-as-an-ios-developer).
Thank you – I'll get it corrected!
I wouldn't worry too much – this is the first of several million mistakes you'll make over your coding career. And what do we call a programmer who makes mistakes? A programmer.
And one more good approach on app localization you can find in this article: [DRY String Localization with Interface Builder](https://medium.com/flawless-app-stories/dry-string-localization-with-interface-builder-665496eb0270)
Not exactly "readability", but another cool thing: zero-case enums. Say you have a struct holding constants for example: struct UnitConversions { static let metersPerSecondToKnots = 1.151 static let metersToNauticalMiles = 0.000539957 } Someone can come along and accidentally create an instance of UnitConversions, which will essentially create a useless object. Just change the struct to an enum that has no cases, keeping the "static let"s. That way the object can never be instantiated (since you can't init an enum), and works the same as before. enum UnitConversions { static let metersPerSecondToKnots = 1.151 static let metersToNauticalMiles = 0.000539957 } edit: apparently enums can be init'd in a sense. You'd have to implement it yourself though (if you're not using rawValues)
[removed]
Sure but in this context, it's used to mean regular vanilla coding. 
Here's a few definitions for hacking that easily fit this subject: * to cut or shape by or as if by crude or ruthless strokes * to write computer programs for enjoyment Now stop being so pedantic
Thank you Lisa :)
well, we can make a bundle articles series :) 
you know, you are always welcomed on our small cozy Medium blog))
Just finished my new app [Dog Identifier- Dog ID Camera](https://itunes.apple.com/us/app/dog-identifier-dog-id-camera/id1286967051?ls=1&amp;mt=8) It uses new Core ML and Vision API to intelligently identify over 100+ dog breeds using your camera. Check it out! 
meh. no. You're not a hacker because you enjoy programming. 
Nice.
&gt; Using the GradientDirection enum, we have gone from the very abstract concept of points on a plane, to the much more concrete concept of a direction. This is backwards. A direction is abstract. Two points exactly specify where the gradient is. "Vertical" could describe infinitely many gradient positions -- it's an *abstract* description of them. 
Don’t need to allocate an array if you don’t need it. 
I'd recommend following a guide until you have the basics of MVC and UIKit. Jumping right into building out your design will be frustrating and time cost you more time in the end. I'm not too famiar with iPad, but hopefully this still helps. For grids and horizontal lists use a UICollectionView, for vertical lists use a UITableView. Your actual data should be in model classes (see MVC). Apple often uses what's called the delegate pattern. You can use UITableViewDataSource, UITableViewDelegate, UICollectionViewDataSource, and UICollectionViewFlowLayoutDelegate to fill the grids and lists with your data and handle things like adding and removing.
Thanks for your thoughts. I agree that it is more arbitrary than it should be, but I'm confused how vertical could describe infinitely many gradient positions.
So you redefine words to suit your needs. Got it.
I like this - might look to replace any kind of Constants structs I use with something like this. 
This is where I got it from. It's a good read with some other more complicated uses for it: http://ericasadun.com/2016/07/18/dear-erica-no-case-enums/
Theoretically, the gradient could stretch all the way from the top to the bottom, or it could start/end somewhere in the middle (or even outside the drawable area). In practice, I don't think this is really an issue. If your gradient is too complex for `GradientDirection.vertical`, you're probably better off providing a custom `CGPoint` for the start and end points.
&gt; Clarification of seemingly arbitrary values I actually starting writing these as structs with static constants instead! struct LinearGradient { var startPoint: CGPoint var endPoint: CGPoint init(start startPoint: CGPoint, end endPoint: CGPoint) { self.startPoint = startPoint self.endPoint = endPoint } static let vertical = LinearGradient(start: CGPoint(x: 0.5, y: 0), end: CGPoint(x: 0.5, y: 1)) static let horizontal = LinearGradient(start: CGPoint(x: 0, y: 0.5), end: CGPoint(x: 1, y: 0.5)) } The good news is that you use the struct in exactly the same way as before! func horizontalGradientLayer() -&gt; CAGradientLayer { let gradient = CAGradientLayer() gradient.startPoint = LinearGradient.horizontal.startPoint gradient.endPoint = LinearGradient.horizontal.endPoint return gradient } Except now you have the power to tweak the gradient to your hearts content: var shortVerticalGradient = LinearGradient.vertical shortVerticalGradient.endPoint.y = 0.5 Finish it off by adding an extension to `CAGradientLayer`: extension CAGradientLayer { var linearGradient: LinearGradient { get { return LinearGradient(start: startPoint, end: endPoint) } set { startPoint = newValue.startPoint endPoint = newValue.endPoint } } } // Updated gradient function: func horizontalGradientLayer() -&gt; CAGradientLayer { let gradient = CAGradientLayer() gradient.linearGradient = .horizontal return gradient } 
no. If you think a hacker is someone who enjoys programming, then that's exactly what you are doing. 
Thanks!
Pick any two points with the same x coordinate. (You picked (0.5, 0) and (0.5, 1), which is valid but completely arbitrary.) All of those are "vertical", but describe different gradients. I suppose in reality (with CGFloat) it's something more like (2^64 -2^53 )^2, but that's near enough infinite for me.
You can refactor particular user flows or reusable chunks of your application to their own storyboard. In your storyboard drag a box around the storyboards that should be separate then from the menu choose Editor-&gt;Refactor to Storyboard.. This will move these items to their own storyboard and replace them in your main storyboard with a storyboard reference (there may be some manual cleanup to do afterwards).
We are accepting guest articles as well :) Our blog is [Flawless App Stoties](https://medium.com/flawless-app-stories). We share comprehensive &amp; interesting iOS guides, tutorials on UX &amp; UI and some startup posts. If someone would like to join our team, feel free to DM me.
Right - this is supposed to simply be an abstraction above the relatively common use cases. If you're looking for more customization then it doesn't make sense to go with this approach.
So what you're saying makes sense, but this is supposed to simply be an abstraction above the relatively common use cases. If you're looking for more customization then it doesn't make sense to go with this approach.
I just got my first app published in the app store yesterday :) Nothing crazy, but a fun free app &amp; gotta start someplace! Was super fun to make https://itunes.apple.com/us/app/bardown/id1288999206?mt=8 (iPad only for now)
awesome! I just got my first app published yesterday!
Can you post the code you’ve tried so far?
You’re going to get more from this community by trying something, failing, and then posting what you’ve done. It’s easier to point you in the right direction when you’ve tried, than to give you the “right answer” off the bat. If you’re afraid of failure then software engineering isn’t for you.
I'm not saying there's anything wrong with your code. I'm saying you used the word "abstract" to refer to the concrete one, and "concrete" to refer to the abstract one. You seem to be using the word "abstraction" correctly here in these comments. It's just in the article you got it backwards.
Saved you a click: one of the questions is "Would you be willing to write articles without renumeration?"
That's the thing, I haven't written anything that looks to be going in the right direction. I am just wondering how to use the library so that I can interface with the isight camera.
Ah, okay. What did you try that didn’t seem to be going in the right direction?
I actually tried a lot of non working solutions. I assume it’s boring to read some code wrote by a beginner and explain what’s right or wrong. My question is based on a particular example but the main topic is the logic behind the choices expert developers take over their challenges. The problem is not that I don’t know the code, the problem is that I don’t have a mental map. I can’t visualize in my mind where to start. :) Kind of hard to explain, but as someone who just started in programming it’s not easy to reach the next step if you don’t have a method. I try to learn all the syntax, functions, parameters of Swift but sometimes I really miss how to connect everything. 
Considering the blog has raised over 20k for charity since it started about 5 years ago purely on advertising due to user based submissions. I do not think that is a bad question for them to ask. I personally met the owner of this site. He is a delightful, intelligent and community driven individual who has a genuine care for helping everyone. I think it's personally refreshing that there are sites like this that are selfless in the ambition to help people and not to make a profit. Also, there is an option to say no to that question, so you are only showing your true colors here. 
I totally understand. And the good news is that you get it. You know what you don’t know. That’s the first step in learning. However, you’re going to have to walk in the dark for a while. If I give you the answer, that’s not going to help you, in the long term. When I was at uni, a guy who became a good friend picked up a guitar and started playing, in front of everyone: he sucked. I mean, hard. But by the end of the year he was genuinely better than those of us that’d been playing for 5-10 years. And he’s handsome. The bastard. You’re going to suck. For a long time. But you’re not going to get good without failing. Publicly. Try writing some code. Post it here. We’ll let tell you why you suck. And point you in the right direction.
 import AVFoundation var now = Date() var camera: AVCaptureDevice? var captureSession: AVCaptureSession? That's where I'm going with it but I don't know how to get it to interface with the isight camera.
Okay, this is good. The iSight camera is an AVCaptureDevice. You need to find a camera (there’ll only be one on any Mac, if there is one). Then you need to add it to the session.
I just finished my 3rd app, and put it on the app store https://itunes.apple.com/us/app/shopper/id1271903976?ls=1&amp;mt=8 It helps you save money, by putting a new perspective on how you view money.
What would that code look like then? 
I’m done. You just want the code handed to you. And I have no interest in doing that.
private init() {}
This tutorial is incorrect. String! **is** an optional. It's the worst kind of optional, an implicitly unwrapped optional. It will crash if it's nil, and it absolutely can be nil. In many ways it behaves like a non-optional but it isn't one. Examples below var nonoptionalStr: String = "non optional" var optionalStr: String? = "normal optional" var implicitlyUnwrappedStr : String! = "implicitly unwrapped" print(nonoptionalStr) //non optional print(optionalStr) //Optional("normal optional") print(implicitlyUnwrappedStr) //implicitly unwrapped //nonoptionalStr = nil //won't compile. "nil cannot be assigned to type 'String'" optionalStr = nil implicitlyUnwrappedStr = nil //it's optional so we can set it to nil print(nonoptionalStr) //non optional print(optionalStr) //nil print(implicitlyUnwrappedStr) //nil nonoptionalStr.characters.count //12 optionalStr?.characters.count //nil. won't compile without the ? implicitlyUnwrappedStr.characters.count //compiles &amp; crashes "unexpectedly found nil while unwrapping an Optional value"
Not at all. I don't want the code just handed to me. I'm just not that familiar with programming in Swift. I've mainly done programming in Python and I haven't really done anything low level/ actually interfacing with hardware. I just don't know where to go from the code that I have written. 
Just do it the same way you'd do it in [Python](https://en.wikipedia.org/wiki/PyObjC)
Apple has a free text book on iBooks to learn Swift. So far it's one of the simplest books I've ever read for a programming language. 
Feel free to suggest topics! I'm happy to improve the collection.
I'll give it a try when starting new project
The error states you can't multiply a string and an integer. In Swift, you can't multiply, add, subtract, or divide things that are not the same. That means you can't multiply an integer with a double (decimal number) without first making both integers or doubles. 
&gt; I am coming from Objective C, where [NSDictionary keys] returns an Array. Do you mean `-allKeys`? Swift is not Objective-C, and it probably won't help you to think in terms of Objective-C data structures when writing Swift. &gt; Other than using it as a way to iterate over Dictionary, what good is it? In general, it's not a great way to iterate over Dictionary -- you can just iterate over a Dictionary directly. But the question is a bit confusing. How many great uses does a feature need? My car has no real use, except for driving me places. &gt; In Objective C, I can take the Key as whatever object it should be. I'm sorry, but I have no idea what this sentence means. I'm still not sure why you think it's returning a dictionary. What are you doing, and what is it showing?
Not to be "that guy" but you misspelled 'deployed' in the title. I kept trying to figure out what you were 'de-poly-ing.'
Ha thanks. Didn't notice that until now
Any comments on my Swift code is appreciated! I haven't been writing Swift as much as I used to so it probably needs some work.
It's 2017, dude. It's more important to have an editor that supports emoji and video memes than spell checking.
The article starts off well, but then peters out halfway through. Starting from the heading "But why should I care?", the words "operation", "associative", and "neutral" are never even mentioned again. It's like two separate articles that are glued together. Maybe if I squint just right, `interesect` [sic] is the associative binary operator, and the neutral element is a hypothetical `Shape&lt;C&gt;` whose `isInShape` always returns false? I'm really not sure why we need a new term for this. It was helpful to read in Wikipedia that a monoid is just a semigroup with an identity element. Those are the terms that we all learned in freshman math classes -- why do we need to create the term "monoid"? You're not even using the identity, or closure, so even "semigroup" would be sufficient. In other words, the "why should I care [about monoids]" section of this article literally ignores 2/3 of the definition of "monoid", which is not exactly a compelling argument that I should care about monoids.
Thanks for the input! I did forget to mention a neutral element and you are right, it would be a `Shape` that returns false for all inputs to `isInShape`. And regarding the example, I wanted to show something cool because intersecting a shape and a neutral element wouldn't have been as cool. But you are right. The example didn't show why it has to use a monoid instead of a simple semigroup. Guess I have to come up with better examples next time :) 
Your example of associativity is incorrect. You say: &gt; Associative property is when `f(c, f(a, b)) == f(b, f(a, c)))` holds true. But that is only the case in commutative monoids (e.g. later in the article you discuss strings or arrays under concatenation, for which the above is not true). Given the left side of your current equation, the right side needs to be `f(f(c,a),b)`.
Cool. Thanks! 
Awesome, thanks for the update! 
Samwell Tarly, did you go on a diet?
You might want to label the code blocks. I see that they are two different languages but making it explicit with labels will make them easier to understand. Also, this code is valid but can be confusing given that it relies on both the automatically-generated memberwise initializer and the trailing closure syntax: extension Shape { func outside() -&gt; Shape { return Shape { coord in !(self.isInShape(coord)) } } } You might want to be more explicit and leave off the trailing closure syntax: extension Shape { func outside() -&gt; Shape { return Shape(isInShape: { coord in !(self.isInShape(coord)) }) } } It may aid in comprehension since this more obviously is using an init method for the `struct`. Even more self-documenting and easily-understood: extension Shape { func outside() -&gt; Shape { let notInOriginalShape = { coord in !(self.isInShape(coord)) } return Shape(isInShape: notInOriginalShape) } } 
As u/applishish alluded with the "[sic]", you have "intersect" misspelled as "interesect" in one place in the article: &gt; We can first start by defining the **interesect** function which defines a new shape within the region of intersection. Overall it's an interesting and insightful article. A good read and some great ideas in there.
Good idea! Thanks for the suggestions
No. Your app will only be notified when it receives push notifications for your app.
And how exactly will Apple "get a huge influx of money" when developers move from ObjC to Swift or migrate to newer Swift versions?
It was only a matter of time.
Just came here to say that you have a nice smile!
Yep, the second I put it to 99 cents, Not a single download since. It is all click farms. 
I enjoyed the article (also a fan of Haskell), but the typos drove me crazy. If you want someone to edit it for you, PM me the original material and I'll send it back to you with corrections.
Thanks! And I’ve always wanted someone to look over my posts so thank you 🙏 
The same can be done for `intersect`: func intersect(_ s1: Shape) -&gt; Shape { return Shape { coord in self.isInShape(coord) &amp;&amp; s1.isInShape(coord) } Simplified: func intersect(_ s1: Shape) -&gt; Shape { let intersection = { coord in self.isInShape(coord) &amp;&amp; s1.isInShape(coord) } return Shape(isInShape: intersection) } I love the brevity of some of the language features but they can be tough when teaching people new concepts. Too much new stuff at once!
It just keeps "loading", any ideas why?
You’ll need to update Xcode. It’s a pain to do it for such small versions, but it’s easiest to just download the entire update from the Mac App Store. It will make sure to have all the symbols for the most recent iOS (here 11.1)
Are you on the Xcode beta or just regular old 9.0? 11.1 is technically beta so you’ll need beta Xcode as well
It helps, but they are quite different. I'd suggest the macOS book in the Hacking With Swift series.
Oh, I was unaware of this, but thank you! 
https://www.hackingwithswift.com/read/1/1/setting-up I'm currently right here, but these are iOS projects I think
Yea, I'd just get the macOS book. TBH, I couldn't write a full macOS app right now and I used to be a quite knowledgeable iOS developer.
You need Xcode 9.1 beta from the developer portal.
What do you mean by "start getting further into"? Have you tried cleaning the project, deleting and reinstalling xCode?
Native development will always exist. Maybe most of the crud apps out there will be replaced, but I doubt it. 
Meh Zeplin sucks after the last update or 2 probably won’t use it after the current project
[removed]
Someone will make a version of React Native with Swift. You just wait and see.
As a dev you will live through various platforms: yesterday was Objective C+Java , now Swift 3/4/X + Kotlin , and tomorrow ? Perhaps something born from the good parts of react native , perhaps a full ecosystem change (back to the web with first class PWA ? ) Stay curious, be ready , and use the right tool for the right task 
You should learn JS, as grotesque as it may seem now, it powers a lot of clients and backends. But I would not worry about RN taking over too soon. I found the performance for more complicated tasks very low, and the need to learn xcode and some swift is still there. Look at it as an addon to your toolbelt, not as a menace.
I live in London and a lot of companies are building apps in React Native (RN) to save costs - one team building an app for multiple platforms rather than separate teams for just one platform. I can understand that appeal from all sides. As a developer would you not prefer to work in an environment that can allow you to build on both Android and iOS seamlessly? That being said, there is no shortage of demand for Obj C or Swift. I do agree with you though, I would prefer to be writing in Swift and I am also concerned about what the future of app development will look like . My current thought is that something like RN will actually dominate. I cant see why a company would choose to split up its team into iOS and other platform teams vs having one team who can do it all. I also dont understand why a company who is paying someone else to build an app would pick a Swift team if an RN team can provide all the functionality (which is likely) at a lower cost and release for Android + iOS. Almost any application can be built using RN so its a case of a company saying "Do we pick RN and save costs, have a single team and release for multiple platforms or do we go an expensive route, split up our teams and have apps that may look/behave very differently on each platform (Monzo is an example of this) for some very bespoke reason" . I can see the benefits of using Swift for a company in certain situations, but I think these certain situations will reduce as RN begins to dominate. I guess nobody really knows whats will happen and for now Swift is most definitely "safe". My only consolation is that Apple obviously back Swift and are pushing it pretty hard both in terms of the language and their tutorial books etc. Also, I do find the majority of App developers prefer Swift. I hope these trends continue. I think so long as these factors are the case, there will always be companies picking Swift. I will be keeping an eye on how relevant Swift is to Apple and continue working in Swift :). 
No way. Libraries like react native, ionic and xamarin are great and all but they are always going to be playing catch up. I don’t want to underestimate the community, but you will always be dependent on them writing whatever bridging code is necessary to get that new cool feature that you may want to use. Sure you could write it yourself but might as well just write it in the native language at that point. Not to mention you still have to write two different pieces of code in a react native project to support both Android and iOS. Granted you don’t have to do it for everything but you will have to do it for some things. At this point I would much rather support two code bases. 
[This one](https://www.hackingwithswift.com/store/hacking-with-macos).
Hacking with Swift (the book) uses iOS 11 to teach foundational Swift. It is possibly the best place to start, even if you want to learn to macOS apps. That being said, if you would like to stay with macOS then you can start with [Hacking with macOS](https://www.hackingwithswift.com/store/hacking-with-macos) at anytime—like the other books in the series it is standalone.
[http://www.scade.io](http://www.scade.io) edit: added http:// cuz reddit formatting. thanks /u/dov69
I'm ok with people calling [this hacking](https://www.udemy.com/learn-ethical-hacking-from-scratch/?k_clickid=bf56c2fe-5543-4b9a-af0d-59f4bb6afd79_133469040&amp;utm_term=_._ag_IT-Core-EthicalHacking-T9-LAL-US-1P-_._ci_857010_._._pi_1727211017318955_._gi_all_._ai_18--65_._an_8TqmMX_._lo_United%20States_._&amp;utm_source=facebook&amp;utm_campaign=NEW-FB-PROS-TECH-IT-EthicHack1-BB-EN-ENG_._ci_857010_._sl_ENG_._vi_TECH_._sd_All_._la_EN_.&amp;utm_medium=udemyads)
Writing react native is a pain in the ass, there's no consistent auto complete, if any, there's barely any documentation, the basic react native is way too basic and verbose, the component packages are unreliable. There's no way rn will take over anytime soon. Now, it works really well once you're over all those hurdles, but there's always need to do something on native, like ARKit and the like, and making all that work together may not be that big of a deal but it's something that rn can't do on its own. I've tried to do things on rn, but the tools and js are really far from being any good to compete with swift.
If you like the MVVM nature of react-native it's worth looking into [ReSwift](https://github.com/ReSwift/ReSwift) All of the reactive style and safety, none of the JavaScript.
What's PWA?
What's PWA?
What makes react native so desirable compared to swift?
progressive web app
Woah this looks amazing. Still in beta though. Seems to be made by the same team behind Perfect.
It's cross platform.
There is no telling how the future will pan out. Rails was supposed to be the game changer, and for a time it did. Now new technologies are being built that have learned from it and making things better. 
A good chunk of mobile development will move to RN, independently of whether RN is good or not. That is fact. For how long? Who knows. In a way, RN is like Node. The JS engine giving orders to the native engine. In node it's C++, and in RN it's either Swift or Java. Node was super hyped a few years ago, but these days its adoption has stalled and a lot of Node devs are moving to other places. I think the same will happen with RN. I think RN works for low budget projects, but nothing really replaces a native app that uses the UI idioms of each platform. I think the future is actually a full native app that orchestrates between native views and webviews. I'm sure many apps are following this approach.
x86 powers everything, too, but that doesn't mean you need to learn to write it. As long as you know something that compiles to it, and a little about the technical details for the rare cases when you need to debug down to that level, you'll do fine. I don't avoid JS because it's "grotesque". I avoid it because there are much more efficient ways to take advantage of that platform.
Could you recommend your top five reads to get a introduction to these two topics?
&gt; As a developer would you not prefer to work in an environment that can allow you to build on both Android and iOS seamlessly? I've been hearing such promises from cross-platform framework authors for 25 years, and every single time it's turned out to be false. From what I've seen of RN so far, they haven't cracked it, either. Nobody has suggested to me any bit of special sauce in RN that would let it succeed where its predecessors have failed, and I can think of a couple reasons it's decidedly worse this time. As a developer, would you not prefer to work in an environment that can allow you to build on Mac, Windows, and Linux seamlessly? Then why aren't you writing in wxWidgets, or Java, or AIR, or XUL? Well, how many apps are you running on your Mac this minute which are written with any of those frameworks? Me, either.
So are Java, XUL, wxWidgets, AIR, Qt, ... It stands to reason that if a developer is writing native code in 2017, it's not because of a lack of availability of cross-platform toolkits.
How many RN apps are you running right now? I've tried one, and it was so bad I uninstalled it right away. If I can't write a drastically better native app than a RN app, I deserve to lose. But more generally, there's a new cool language every few years, and if you're looking for One True Language for your entire "career", you've picked the wrong career.
&gt; And regarding the example, I wanted to show something cool because intersecting a shape and a neutral element wouldn't have been as cool. Calling *any* `f(a,0)` which by definition returns `a` is not "cool". The definition of "monoid" literally requires there to be such a boring element, and I don't know why.
Why was it bad?
Xcode's memory graph is an easy way to find these.
Hmm, 5 could be hard if you want only reads. My first introduction was: “Make Your Own Neural Network” by Tariq Rashid It really shows you internals with great and simple math explanations. I heard a lot of praise for “Deep Learning” book which you can read here: http://www.deeplearningbook.org But it seems very math heavy. Another widely recommended read is online book Neural Networks and Deep Learning http://neuralnetworksanddeeplearning.com I read only few chapters but it definitely helped me. As for the MOOCs I am doing Deeplearning.ai specialization on Coursera https://www.coursera.org/specializations/deep-learning You can audit it for free, but I can attribute a lot of my work to the knowledge from it. I didn’t find any Swift oriented materials which would be novel. Sorry it’s not 5, but I hope you will find it useful. 
Does this have anything to do with Unity? 
Very interesting read! Props for trying to really understand deep learning by implementing all of this from scratch.
Thanks!
Yep, most of the capabilities of a native app is doable in most of the browser , except contact and file access, geofencing and always on screen
Agree, although 90% of functionality can be achieved in react native. Most apps dont need ARKit, hence me saying "very bespoke reason" in my first post. I notice that a lot of companies that build apps for others use RN for the reasons listed in my original post. Most companies building their own apps I assume will use swift more commonly for the reasons you explain. 
I see that it’s a Dictionary.keys now. I am clearly approaching Swift in the wrong way here. I made the assumption that because swift and objective C share a common frameworks (UI Kit, Foundation, Cocoa) that their data types would be the mostly the same. What I meant by “I can take the Key as whatever object it should be” is that because keys requirement is that it is hashable, if I creat dictionary of type CBPeripheral:NSObject, and as for keys, I would get back a collection of CBPeripherals. One thing I am having a hard time with in all of this is that it behaves as if when I store a CBPeripheral in a dictionary or an Array, that doesn’t seem to be sufficient enough to “keep a reference” in order to receive delegation callbacks. Of course this is likely due to some fundamental flaw in my understanding of swift vs objective C, but that’s why I am trying to learn. What’s taken me hours to debug and write in Swift, literally took me 15 minutes to write and debug, and have function in Objective C. My goal is to keep a list of all seen CBPeripherals and connect to one (or more) when the user selects it. The list populates a section of a table view, when I select the associated object in the table view, it should connect. But, it doesn’t seem to do anything after centralDidConnectPeripheral even though I ask for service discovery and set the peripheral delegate to self. 
Whoa that looks interesting. Does anyone have experience working in scade?
It’s also has hot reloading, live debugging and it’s seemingly faster to develop in general...
Everything below the UI layer (Foundation, CoreFoundation, Swift language and stdlib, posix, etc...) is mostly the same. The UI layer is related but fairly different.
Hmm... good question. Maybe it will become clear once I start using monoids more
Thanks :)
Yeah, I've stopped trying to reason my way through these things and just rely on the memory debugger and the Leaks instrument to find them for me.
There are no good cross platform tools. All have compromises. QT: it's expensive and doesn't allow to use the native OS GUI elements since it uses it's own rendering engine. AIR: I've used it for years and it has a lot of drawbacks like performance, lack of good devs, pretty much abandoned by Adobe, etc. wxWidgets: it's C++ and mobile support is poor AFAIK. Cordova: works great on Android but in iOS either UIWebView or WKWebView are problematic. Xamarin: since you still need to know each platform SDK the only advantage is writing in C# and sharing some of your business logic. RN: last time I tried it docs were crap, hot reloading was unstable, and you still need to like JSX and React. Haxe / OpenFL: the language is nice but the ecosystem is messy.
I am taking this course, and I started from the first lessons, they suggested to, however I know programming in different languages well. The track shows you all the most beautiful sights of the language, which it has a lot. So if you plan to develop on swift, and try to use all of its possibilities, then I highly recommend you the teamtreehouse. The course teaches you to develop, and think as a swift developer. Not just showing you examples as on most online courses. P.S. I didn't finish the track yet. 
Back at the start of the PC mania there were a number of solutions that promised to reduce development time. Some of these came from some very large companies. Most of them lasted for a while then died off. They provided jobs for a while, then those jobs dried up. Companies that are looking to short change the system by hiring a dev to do both platforms is probably not the company you want to work for. Chasing every fad isn't going to end well for the devs. It sucks when we don't have a clear path.
Developers have a history of putting up with just about anything if it lets them write great applications on the platform they want. All of these systems you mention have serious compromises in the *result*, not just the *tooling*. The entire RN story seems to be that it's nicer for developers, at the cost of being worse for users. But that was never the bottleneck. There's no ROI there. Look how many people wrote Objective-C, despite hating it, just to get their app on iOS. Or C++ on Windows. Or assembly language, back in the day. RN is solving the wrong problem. If I had a new car that cost about the same as other cars, but was slower and had an awkward UI, would you buy it? The big improvement over other cars is that your mechanic will really love working on it!
Interesting project. Im trying to understand why he thinks he has to write his on matrix math library, with MLkit ARkit, Accelerate and everything else that comes with Mac development. Now having better math support native in Swift would be a good thing, I'm just not sure why one would reinvent the wheel here. Any ideas / opinions? 
I guess this is one possible explanation, sometimes you learn by implementing. I don't always like how machine learning is represented as artificial intelligence in some circles as I don't see the intelligence in the techniques. Often it feels more like advanced database searches more than anything.
I wanted to have very verbose API for math. Library which I created right now is just thin Accelerate wrapper. I wanted to write math code in very similar form as you write math equations. Unfortunately Accelerate API is C based and not really Swifty. I didn’t want to use those low level functions in my code. And as I tested major portion of Matswift library, I was sure I got matrix algebra right and could focus on bugs and problems of neural network itself. I didn’t have to worry if there is everything right with pointers and arrays used in Accelerate. Additionally I am really fan of bottom up approach. When I try to understand something I want to control every aspect of it to make sure I got everything right. It’s just personal preference I guess. 
Yeah. I feel machine learning people are very scientific oriented while we, software engineers, are more code oriented. That’s the main difference between those fields. Basically those techniques are very data demanding. Maybe it’s oversimplification but the more data you have, the better. And about the machine learning being AI, I feel like it’s too much at this moment. Deep learning is subfield of machine learning which is subfield of AI. And it’s nowhere close to AI as we used to think of it. Calling every learning algorithm “AI” is trying to ride on a hype train. It’s just some clever math. Impressive yes, but artificial intelligence? Not yet. 
a) You can't override type of the property in Swift. b) UIScrollView and UITableView classes are written in Objective C
Most likely because you might not be able to predict there’s an identity entity there. Suppose you have two entities that “cancel” each other out to produce the identity entity. You’ll want to make sure that any operation with the identity entity produces the original entity. Just like in `a + 0 = a`, you need to define the identity entity for addition as `0`. That way you can later test for it if you need it, and so on. If you search around you’ll find more info like this post on [Stack Overflow](https://stackoverflow.com/q/35616377/887210).
Not quite, its motto is "learn once, write anywhere"
Hey, You are right about UIScrollViewDelegate and UITableViewDelegate, I often wondered about it myself, and I don't even want to think about "What if Apple just mapped all of the UIScrollViewDelegate methods into another protocol"... I'm not the greatest authority on Protocols but I'll give it a look and I'll try to achieve what you're trying to do. Please keep us posted if you find the answer ! 
That is cool. Is this the code to create ML, before then using it using Apple ML Kit?
Swift protocols and Objective-C protocols are similar in name only. The latter supports the kind of functionality you’re describing, but the former does not. The take away here is: don’t try to write objective-c in swift, whether you mean to or not.
So then is the best approach for the subclass to have ANOTHER delegate property (named something else)? Wouldn’t this get super messy with multiple levels of subclassing? 
So then is the best approach for the subclass to have ANOTHER delegate property (named something else)? Wouldn’t this get super messy with multiple levels of subclassing? 
It really depends on what you are trying to do. Plain solution to get the same result: “if let childDelegate = delegate as? ChildProtocol { childDelegate.childMethod() }”.
But that doesn’t enforce protocol adherence at compile time. 
Every (Swift) protocol should be hyper focused. 12 delegates with 12 different focuses? Yup. Stop subclassing. I mean, subclass UIView and UIViewController. Use protocols, protocol extensions. Use enums. Use structs. Fuck it. Use Swift classes. Just stop subclassing. It’s bad for you. Edit: I probably should clarify this
Neither does Clang.
Did you read the post...? To answer your question, yes, this does have something to do with Unity, partially.
Check UICollectionViewDelegateFlowLayout, it does the same thing. 
Well it’s a UITableViewCell subclass, and architecturally it makes sense in this case. 
A Progressive Web App is a Web App that can run in a browser even without a net connection because of Service Workers, which sounds great until you realize that Apple doesn't allow Service Workers on iOS.
It might be a stretch for me to call ML a fancy way to access s ad database but in many cases that seems to be exactly what the end result is. I'm no expert so this is looking at things on the surface but it isn't what I'd call AI. Not that that is bad sorting through information is one thing that humans simply aren't good at.
Well I understand the idea of learning something from the bottom up. This make me wonder is there an ongoing effort to extend Swift to support matrix math, and other mathematics for that matter in a Swifty way? You might want to get on the Swift forums and inquire as to interest because I can see Swift being far more useful with native matrix math support somewhat like Accelerate.
I use [Icons8](icons8.com) just make sure to either link them or subscribe if you release to app store!
https://www.ui8.net/
Sounds like you're halfway there.
FlatIcon.com is great :) 
 import Foundation let size = NSSize.zero let position = CGPoint(x: size.width * 0.1, y: size.height * 0.5) Works for me. You're going to need to provide an MCVE.
https://thenounproject.com/
Thank you! I am going to try this out when I get home in an hour!
I get 3 errors when using this piece of code; “Use of unresolved identifier ‘NSSize’” “‘Size’ used within its own type” “Could not infer type for ‘size’”
Swift forums is probably a good idea to start. But idk if any language besides Matlab or R have extensive native math support and I don’t think it could or should be part of Swift. Such matrix algebra is all about performance, so there is no universal approach here. Swift aspires to being multi platform language so such implementation should contain Accelerate/Metal implementation, something working on Linux and CUDA to be competitive at all. Too much for the core language imho.
There is no denying current dawn of machine learning is thanks to growth of computing power + having a lot of data. You could be right to some degree at least. Plus most of current “AI powered” applications are pretty dumb so it’s a stretch calling everything “AI” like we have now. 
Well I guess you could call it that. I find Apple’s CoreML pretty limited even though it has some pros. 
I personally like Treehouse, and the track for iOS development w/ Swift is great for beginners. It presumes no prior knowledge of programming or Xcode. 
I actually draw my icons myself and use makeappicons to download the images in the correct sizes works for me 
Glyphish 
Not sure if it's possible or would fit for needs, but a Swifty direction to consider: make delegate protocol extension with `where` clause restricted to your delegate type. Or make a new protocol that conforms to the existing one and check for conformance at run time. Many ObjC protocol methods are optional anyway and Apple has to make runtime checks too. Maybe add an assert when assigning the delegate to be safe.
Yea Treehouse is really really fantastic. 
Wow different answers all around. I use Icomoon to compile just the icons I need. Import custom ones. And use "Icomoon.swift" to display them as an image, text or button. 
Couldn’t you achieve this with an associated type in the base class and add a restriction to the associated type in your child class? On mobile, can’t play to find out.
I’ve found their Swift track to be very helpful. Feels like their tutorials are stronger on best practices for coding in swift than other tutorial sites I’ve tried. 
I think he meant CGSize, not NSSize. import Foundation let size = CGSize(width: 100, height: 100) let position = CGPoint(x: size.width * 0.1, y: size.height * 0.5) 
Same place I get my source code, tests, build scripts, and everything else: I make it myself. Maybe someday I'll be big and successful and have a graphic arts department but not yet.
That's a FAQ: [you can't](https://stackoverflow.com/questions/25342940/how-to-include-swift-file-from-other-swift-file-in-an-immediate-mode). As to why, I can only assume that nobody has gotten around to it yet. Contributions welcome!
I meant what I typed (I pasted it directly into /usr/bin/swift above), but these two types are toll-free bridged so they're exactly the same to the computer: 1&gt; import Foundation 2&gt; NSSize.zero $R0: CGSize = (width = 0, height = 0) 
What operating system is this? How are you running it?
What software you use to draw the icons?
What software do you use to make them?
I use adobe draw or procreate on my iPad Pro I usually draw the image on the iPad. The only thing is you have to make sure to either take the background color out or change the background color otherwise it will be white. Then I move it to my mac and crop it try to crop it as close as you can to the image unless your using a background then take it to makeappicon.com its free to use 
This message comes up about every 5 seconds even if click save anyways or save as Edit: I’m using Xcode 8.3.3 Edit 2: using XCode 9 fixes it
Swift requires compilation to work. Xcode simulates the behaviors of what will happen when the program is compiled and run. Terminal isn't a simulator. It can run a simulator, but it by itself will not simulate the environment you're looking for. If you wrote a simulator that ran in Terminal, I would bet you'd get a lot of internet points in the Swift community.
&gt; Most likely because you might not be able to predict there’s an identity entity there. I'm not sure what "predict" means here. If it weren't in the definition, then you would not be able to assume it. &gt; Suppose you have two entities that “cancel” each other out to produce the identity entity. That's invertibility, which is a completely different attribute explicitly [not required of monoids](https://en.wikipedia.org/wiki/Monoid#Relation_to_category_theory). If it were, we'd call it a *group* -- and then I would understand! What I'm hearing is "We've got this new thing called Monoids, which we squeezed between a Group and a Semigroup". I haven't heard a great explanation of why identity is required, or why invertibility is not. 99% of the time, these two go hand in hand. &gt; You’ll want to make sure that any operation with the identity entity produces the original entity. When? Why? What is the actual task I have in front of me where I'll want to pursue this line of reasoning?
Why didn't you tell us the version of Xcode you are using? It looks like you have the Constraints.xcplaygroundpage open in another app or Xcode is modifying it. Save Anyway. Quit Xcode and open it again. Make sure you look to see if you have that file open in another app and close it. 
Oops, sorry about that, I’m on 8.3.3. And I’ll try that.
Same thing still happens.
I guess not everyone can code then.
Thanks for the advice! 
Wow, thanks for all the info. But your'e right to point out that "reads" only is limiting. What I should have said is "what top five (or less if you don't have that many to recommend) RESOURCES (reads, youtube channels, online courses,... whatever...) would you recommend checking out if you're a complete noob interested in these subjects, in a A - B - C kind of direction, from complete noob to beginner with some understanding of things let's say... Again, thanks for taking the time to help out.
https://feather.netlify.com/
Been having the exact same error but with pages and a newly created document. I think this is an OS X error more than anything. 
Perhaps I can clarify some of the uses with answers in this post: [Why is Identity monad useful?](https://stackoverflow.com/questions/28645505/why-is-identity-monad-useful)
Just so others can save a step, it's actually: FlatIcon.com
Are you on MacOS High Sierra and using AFS?
Oops… fixed! was on mobile 😅
Yeah I’m on high Sierra version 10.13
Are you using the new AFS instead of HFS for your file system? I’m going to guess “yes”. Explanation: I’ve only seen this on HFS if I have the file opened in another editor. If you have it open it 2 editors, ie. Xcode and VSCode, don’t do that. I’d bet a nickel this is an AFS specific bug.
I thought if you were on high Sierra then it just automatically switched everything to AFS. Is this not the case? And I only had it open on Xcode, I double checked and even tried restarting xcode 
You have the option to stay on HFS, but you have to select it during the upgrade. You can upgrade to Xcode 9 and hope that fixes it. I wouldn’t expect a fix in Xcode 8, that ship has sailed.
Is there a way to see which system I’m using? I didn’t see the option to not switch so I’m assuming I’m using AFS
I'm a big fan of material design, so I tend to get them here https://material.io/icons/
There’s no option to stay with HFS+ and not convert to APFS if you’re updating an SSD. 
[removed]
I was on the beta prog, it def was there, didn’t realize they took it out. 
No worries! They stripped it out in b2 or 3, I forget which. 
not even Xcode codes right 
I was hired at my job for the sole purpose of rewriting apps written in the latest new shiny back into native code because frankly, the latest new shiny usually breaks, usually has weird glitches no one can solve, and is harder to maintain because you have to worry about multiple technologies instead of one. I wouldn't worry too much about fly-by-night technologies. Just a few years ago it was Phone Gap, Cordova, and Xamarin that were going to "make Objective-C obsolete" and none succeeded. 
Local notifications and push notifications are two different things. Go back to the documentation and clarify for yourself which one you’re using.
Have you tried turning it off and on again?
Picked up a 2011 Mac mini with i5/8gb/120gb SSD/500gb HDD for ~$250. That sound good? 
Lol I did actually 
That's probably alright. My 2011 iMac i5/4GB/1TB HDD has some difficulties do to the RAM I think. Running the emulator and actually opening Xcode can be very tough. 
Do you know the max amount of RAM the 2011 can hold?
I'm not sure about yours, but mine is 16GB according to Apple. A quick google search will get you your answer. 
Yeah you're right lol. I don't know why I like asking questions that i can Google. I think I just like the interaction...
I don't know any of the other languages and it seems confusing completely. I thought I could just assign HTTP header values but I don't know what would be the headers.
2011 Mac minis can hold 16 GB, Apple says it can only hold 8. My 2011 mini with a dedicated GPU has worked fine for Swift.
There's a version with a dedicated gpu? I did not know that.
&gt; Is reinstalling the operating system a good idea like it is on windows or is it the opposite? If it hasn't been wiped when you get it, I say reinstalling Mac OS X couldn't hurt. As for wiping and installing on every OS release: It isn't likely that an OS X update will result in an unstable installation. &gt; Factory reset? Yes, I think the 2011 Mac mini was the first Mac to allow internet recovery. &gt; Should I buy a track pad for it? If you really want to. Mac OS X should work just fine with any USB/Bluetooth mouse.
Thanks for the response! It looks like it's on the latest high Sierra beta so it's probably a fresh wipe at least. I also just like the gestures on MacBooks but I bet regular keyboard and mouse will be more efficient.
AFS is a network protocol, APFS is a filesystem.
More than enough. That was exactly my starter box until it got fried. Start with a clean install and get a trackpad if you can, I haven't used a mouse in over a decade. My input configuration is a trackpad on the left and a full keyboard with numeric pad on the right, they fit perfectly next to each other, same height, same shape. Now I got an Air and got it hooked to my monitor, keyboard and trackpad, couldn't be happier.
That's awesome. I also realized this is great because now I can use my Mac mini to make a boot disk to make a hackintosh out of my gaming pc. That would be sweet. 
Yep, I meant APFS, got mixed up since it’s called Apple File System, won’t happen again!
A group mate of mine used an API called alamofire to connect to our database for a school project, said it wasn’t too bad to get the hang of
I have a 2011 i5 Mac Mini with 256GB SSD, 1TB HDD, and 12GB RAM. It isn't very fast but it runs fine. It can get hot at times when running simulator though. I am just a beginner in coding btw. However I am a bit worry about the possibility of not getting new macOS updates in a year or two. Usually if you don't have the latest macOS then you can't install the latest Xcode and can't develop for the latest iOS. I love my old magic trackpad but the new force touch trackpad is super expensive :(.
Because of the REPL, Swift doesn’t actually need compilation to run in simple cases. If you set the environment to swift, you use swift for scripting. For example, by placing #! /usr/bin/env swift at the top of your swift file, you can run it from the command line with the swift command. (swift YourFile.swift). It sounds like you are trying use types declared in another file. In this case, you can compile both files and produce an executable. Suppose that the file you will use to output to the standard output is main.swift and the file you declared your struct inside of is MyStruct.swift. You compile and link the files into an executable called hello by running the following from the command line: swiftc MyStruct.swift main.swift -o hello To run the program use the command ./hello
You can have an in app switch and local notifications allow you to stop all queued notifications. Then using a User Defaults key value you can not set any future notifications 
Yeah the iOS update thing kind of stinks. Pretty shitty of Apple to do that but I get it, it's business. Hopefully in a year or two I'll know if I like developing in Swift and will have money for a slight upgrade. Or I may just make a hackintosh so I can have decent specs.
Have you tried reading the documentation for Firebase, Heroku, and AWS?
I was having the same problem and it seems Xcode 9 has solved it 
Add: definesPresentationContext = true
you.are.amazing. It works. Thanks!
Your Swift application is going to need to make HTTP requests to a Web API. Get familiar with the URLSession Library to make these requests and handle the responses. https://developer.apple.com/documentation/foundation/urlsession The AlamoFire library is a nice wrapper for this, but I think you would be better served by learning this yourself, and later using that library once you understand HTTP. 
Have you written apps that connect to existing APIs? If not I would strongly recommend it. Find a tutorial on using any public api to get yourself familiar.
The Restaurant Project in Apple‘s “App Development with Swift” ebook connects to a server and sends requests. Although I had some problems with it (Server didn’t work) I learned a lot by doing it.
Well that’s good to know, I just downloaded it so I’ll see tomorrow if it’s fixed.
So if you know nothing about networking/calling APIs, a quick primer: When you're on your web browser and you go to a webpage, your browser is sending a *request* to get the data (usually HTML, CSS, JavaScript) back to display the webpage. If you've been on a website and seen the URL bar look weird with question marks and stuff like &gt; "example.com/users?username=Larryn1030" that's because your web browser is including that *parameter* (username = Larryn1030) in its request to "example.com"'s "/users" endpoint. You can add other parameters, or even things in the "body" and "header" of your request, depending on the type of the request. The website then sends data back, depending on everything included in the request. So, if you find an API, look at their documentation to see what parameters you can send, and what responses to expect back. Sometimes you'll look at an API and notice it cannot return the correct data in the correct format you're interested in, or maybe you need to be authenticated (prove to it that you're a certain user by using a "token" or login information) An example of what a real world API might return: I made a python app (still pretty much everything above is the same between Python/Swift) which calls an API to get bills for any US state Congress. I include *parameters* in the request like, what state I want to get bills for, what years, or maybe a specific bill's ID. The API then returns a json object that only includes bills in that state, from those years, or maybe only information about a single specific bill. Then I can do what I want with that data, like show it to users. There are open, free APIs for all sorts of things, or you can even make your own (through AWS, or server-side Swift, for example). To start, just Google search for certain keywords to find an API that interest you. I hope that made sense and was useful to you. Sorry it got so long. 
For me, the only explanation is a slow MacBookPro. Disable auto run, left bottom button. Only execute code manually. XCode try to save but too slow it locked out by itself.
[https://github.com/oliverrussellwhite/Podcasts](https://github.com/oliverrussellwhite/Podcasts) Check out the AudioPlayer* files.
You can check with Disk Utility. You're not using APFS if your computer has a spinning hard drive (Fusion Drive included).
There are thousands of ToDo Apps in the AppStore and you get the basics of quite a few components.
Thanks for the idea!
The best app to make is the app you want to make. I know it may be hard to come up with these ideas at the moment, but it’s important for someone who wants to develop apps to start problem solving and think hard for themselves. Take a pen and paper, start brainstorming ideas on apps that you want to exist, or apps that exist that you could make better. This will definitely be a big help in your journey. And you shouldn’t be making apps to have them on the App Store yet, you should be making them for yourself and ensuring they’re the best they can be.
AVAudioPlayer is just a nice "extension" to AVPlayer. It doesn't necessarily mean you need to display a video. 
It’ll be fine. As far as the trackpad, there are some nice gestures you can do on them which would be the main reason to get it such as scrolling through desktop spaces and mission control, but you can do them easily through keyboard shortcuts. Seeing what it costs I don’t think it’s worth it for most people. I’d suggest just using a mouse. You could use 3rd party software like steermouse to map some mouse buttons to shortcuts that the trackpad could do - such as switching desktop spaces and mission control.
You may be over thinking it? The request just goes in httpbody with the proper encoding. Nothing in headers unless your doing something fancy. 
I have a similar spec. 2011 Mac Mini, 2.3 GHz i5, 8 GB RAM, 120 GB SSD. Been working on it for years and been happy with it. The only problem will be the lack of AirDrop compatibility with iOS. I find it incredibly annoying since now my iPhone and iPad are both AirDrop capable. And getting a used computer from a stranger begs for a complete hard drive wipe.
Yeah. How hard is it to do that?
I started learning 3 years ago. And the best one for learning from zero is Stanford CS193P by Paul Hegarty. Stanford makes it available for free, but latest one usually comes in March.
Having an SSD is really all you need pretty much. I run a Mac mini 2014- processing power is OK but the HDD really isn't. Also with pre-2014 Mac minis the RAM is upgradable so you have some futureproofing there.
Semantically I wouldn’t call that an API. Alamofire is a networking library. 
I was looking for a 2012 since it's upgradeable and had the most power while doing it but they still cost like $350-$500 because people value Macs more than they perform. It also has USB 3.0 but oh well :( I just wanted some kind of Mac to get in the game. I just hope it's as powerful as a similar year MacBook air or something. 
I've heard great thins about that course and it does look fairly comprehensive. One thing I have with it is that as far as I know I can't watch it on the Mac but have to do it on the iPhone or iPad. Would be more convenient if I could see it on the Mac. Not a deal breaker but it is too bad iTunes U is not available.
Alamofire
Trying to get an uibug with a refreshcontrol and the new large titles to work, pull to refresh works but as soon as the refresh ‘triggers’ the refreshcontrol becomes invisible. I implemented it the same way in a bare app and it just works as intended AND ITS KILLING ME
Try to fix one of your problems - sync agenda items between different agendas - control your home automation raspberry pi - create an app with widget which shows stocks, webpage x or just random pairs of boobies - create a share with bff app which has share extensions to share with a specific person
it is. dw
Umm.. Is that a question? 
&gt; However, Id like to I'd* like to the id is part of the mind along with the superego and the ego I'd = I would or I had 
It's more of a wrapper for Apple's networking libraries, don't you think?
For the recognising a Tap the best way is to use the build in function of Collectionviews func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) { print(indexPath) } From there you can open a new View or reload your current collectionView with the new data. To open a new view you can use self.performSegue(withIdentifier: String, sender: Any?) But there are other options like navigationController?.pushViewController(YourViewController&gt;, animated: true) or let viewController = UIStoryboard(name: "Storyboard Name", bundle: nil).instantiateViewController(withIdentifier: "View Controller ID") self.present(viewController, animated: true, completion: nil)
The App Store Review Guidelines say: "Come up with your own ideas. We know you have them, so make yours come to life."
How hard is it to do a full hard drive wipe* 
Sure but its not an API.
This was great. Don’t ever say sorry. 
The Swift Compiler doesn't know it should include that file. Use swiftc with both files at the same time or create a swift package. 
Hi thanks for this response, just having a look at the documentation to find out how this works. How may I use an object at a given indexPath to link to a new individual viewController ?
The safest solution would be to use NSXMLParser. It will provide you with attributes, names and content of any Tag it finds. Just ignore everything that is not an a Tag with that specific prefix in the href property. 
It’s a bit surprising that it isn’t available on Mac for you. I watched it on Mac via iTunes U
None of these are any of my problems.
[iTunes U](https://imgur.com/gallery/0UpEU) 
issue is that the course says "This course material is only available in the iTunes U app on iPhone or iPad" Here is the link: https://itunes.apple.com/do/course/developing-ios-10-apps-with-swift/id1198467120?l=en I can download and view it just fine on iPad and iPhone just not on Mac.
This easy. https://www.imore.com/how-do-clean-install-macos Also read the relevant parts here: https://support.apple.com/en-us/HT204904 This might help you as well: https://support.apple.com/en-in/HT201065 Make sure that the seller removes the Mac Mini from his iCloud account, or else you will be locked out of it.
Thanks but that was changed on the new iTunes and it now doesn't have an iTunes U section. They moved it to Podcast but as my previous post says that course says it is only available for iPhone/iPad.
You could make an array with the strings of the view controllers. And then indexpath.item gives you an int of the cell number. So you could do it like viewArray[indexpath.item] But I would recommend to open the same view and just filling it with the data needed. So if you select team 1 it fills the data with team[1].players or something like this. It depends on how you have your data stored
Boot camps don't work. For the simple reason due to cramming everything down into 8 - 12 weeks. They will tell you that all of it depends on your will to learn. You don't need to spend 10k to get the best results. My advice is if you truly want to succeed grab books learn from those for 6 weeks then the remaining 6 weeks sign up for subscription-based. Here is my reasoning, it will cost you way less to do it this way, both methods depend on your willpower to learn, the remaining 6 weeks allows you to question more skilled developers once you have engaged in 6 weeks of intensive development using books / online material. The biggest thing is that you won't spend tons of money getting the same or better results. As singleton said "Do not believe the X% of grads get jobs immediately" because they don't say if these are full-time jobs or if the grads were even able to keep these jobs. Once you graduate they will help you out less and less because they have new people to sell their bs to. It all depends on you. Join groups around your city, learn from books and online, build great things. Good luck! Reference: Have to been to a bootcamp, did not learn much. Ended up learning everything on my own. 
`intType.self` isn’t a type name. It’s a property. The closure needs a type at compile time. You may be able to use generics to get what you want, but I don’t understand your goal well enough to say how exactly.
Could be reduced overhead as iOS 11 uses Metal 2.
That was great indeed! Thank you. To clarify, I'd like to either implement my app into AWS or Firebase. Are these backends with API's? I'd like to learn how they work so that I wouldn't have to rely on only one should they close down like parse. Thanks 
Thanks for sharing this information. I had no idea the updated iTunes has removed iTunes U. It's a bit annoying, I guess I am not updating my OS or iTunes. But I think Stanford's course is still worth the trouble.
I'm waiting for conditional conformances to get implemented. It has been accepted 10 months ago but nothing happened since then. 
It was to give some inspiration
100% this. Make the app you want to see in the world - there is no other way to get the drive to learn. 
You want `typealias intType = Int`, where `intType` can then be used in function / closure signatures, etc.
It'll run Xcode. Won't be a stellar performer, but it'll get the job done if you don't ask too much of it.
What I was thinking was now that I have something to make bootable Mac usb I could make my gaming computer into a hackintosh. Or no at least my second computer that has a desktop i5 and a GTX 760...
Could work. Might make for a fun weekend project, actually. Word of advice: take your windows drive out completely, don't risk erasing it if you don't actively want to.
Yeah thanks for the advice that's happened before installing Linux lol
The reason you can't assign one of those closure to `mechanism` is because the input parameter type is causing a conflict. Lets assume the compiler let you assign a closure of type `(BaseVarationAlpha)-&gt;(BaseVariationAlpha)` to `mechanism`. Like this let alphaClosure: (BaseVarationAlpha)-&gt;(BaseVariationAlpha) = {...} var mechanism: (BaseClass) -&gt; (BaseClass) = alphaClosure `mechanism` is defined to allow a `BaseClass` as a parameter. It doesn't know what type of closure it contains. So what happens if you pass a `BaseClass` into it? mechanism(BaseClass()) This will end up calling `alphaClosure` but passing it a `BaseClass` when it requires a `BaseVarationAlpha`. And if `alphaClosure` is trying to use properties/methods that were added in `BaseVarationAlpha` it would crash. The compiler only allows taking a specific class and treating it as one of its base classes. Since `alphaClosure` requires a `BaseVarationAlpha`, that require taking a `BaseClass` and treating it as a more specific `BaseVarationAlpha`. So thats why it's not allowed. Now for a solution. Its not 100% clear what your goals or requirements are but heres one possible way to do it using generics. class MyClass&lt;Input: BaseClass, Output: BaseClass&gt; { typealias MechanismClosure = (Input) -&gt; (Output) let mechanism: MechanismClosure init(mechanism: @escaping MechanismClosure) { self.mechanism = mechanism } } This will allow you to define at compile time the Input and Output types for the `mechanism` closure. let mechanismClosure: (BaseVarationAlpha)-&gt;(BaseVariationBeta) = {...} let myClass = MyClass(mechanism: alphaClosure) This will result in a type of `MyClass&lt;BaseVariationAlpha, BaseVariationBeta &gt;`. So any time on call `mechanism` it will require a `BaseVarationAlpha` and return you a `BaseVariationBeta` without any need for casting. [Heres more information about generics.](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID179) 
Don't feel bad. I nearly lost the only backup of the source code to my app updating to High Sierra. Happens to the best of us.
Yeah, I'll take it once I finish the Treehouse tracks. Will just have to watch the lectures from the iPad.
Once you complete both of them, please update this thread with your experience. It’ll be very helpful for others
That could change rapidly with the right advancements. I Look at it this way there will be lots of room on Apple SOC to implement ever more advanced AI features as there is a limit to how much conventional processing power you can use in a cell phone. I just stumble on calling current Machine Learning solutions AI, seems like. mistake.
For Firebase, you'll have to configure a project on Firebase, then add a special package to your app that allows you to communicate with your Firebase project. [Firebase setup](https://firebase.google.com/docs/ios/setup) The process is similar for AWS [AWS setup](http://docs.aws.amazon.com/mobile/sdkforios/developerguide/setup-aws-sdk-for-ios.html) If you haven't already included an external package with your app, you'll need to use either Carthage or Cocoapods. It looks like Firebase only uses Cocoapods and AWS uses either Carthage or Cocoapods, so you might want to use Cocoapods. Both of those are "package managers" for iOS - I use Carthage for the enterprise/corporate app I'm working on, however, whether one is better than the other isn't important right now. With these packages, you'll be able to use the package's interface (the available classes, functions, etc they provide, also known as the Available Programming Interface, or API ;););) ) to communicate with whatever service you put on AWS/Firebase. These packages are essentially making requests to your projects endpoint. (The term *API* is appropriate to use for both web interfaces and local programming interfaces.) Also, small note, you know a lot of new keywords now which means you have about a billion new things you can effectively Google search for. Want to know more about Firebase's SDK? Search for "Firebase SDK iOS" Want to know more about Carthage or Cocoapods? Search for "Carthage iOS" or "Cocoapods iOS" Want to know what a web API might be? Search for "What are web APIs" or maybe "introduction to web api" Search for whatever keywords you find appropriate. It's kickass that you took the iniative to ask a question on a public forum like this, but don't be afraid to Google search, Google search, Google search, even if it means you're reading programming documentation that's way out of your league for a bit. As long as you push through it, it won't be out of your league for very long.
You could be right but I look at it as providing a common and frankly modern API for programmers to write to. As for too much for the core language, well what has been considered core language features has expended over the years. Another point here, having a standard way to do something doesn't mean you can't go your own way if needed. Having a standard solution (I'm thinking C++ here) doesn't mean that alternatives don't exist. In the case of C++ what the standard describe has expanded considerably and as a result has dramatically increased the language usability. Python, though not standardized in the sense of C++, is an example of a language that has become very popular due to having a robust standard library and core language features. In any event my thinking goes along the lines of Apple building a base to really drive ML into all sorts of apps.
Will do.
https://sketchapp.com is good
Thanks for posting the source of your Podcast app!
Not sure if it’s exactly what your looking for, but you can customise the notification and the icons/images shown using the NSNotification private API. See here - [https://github.com/lukakerr/Swift-NSUserNotificationPrivate](https://github.com/lukakerr/Swift-NSUserNotificationPrivate) 
Perfect! Thanks dude :-) For those finding this in the future: notification.setValue(NSImage(named: "img"), forKey: "_identityImage") can be used to set the icon for a NSUserNotification. EDIT: It moves the original app icon in smaller form to the left of the notification's title, which is not exactly what I hoped for, but well. Good enough for me.
My Mac Mini 2011 was great machine until it died, but if you need a Mac Mini with upgradable RAM then you'll probably want to spend the extra cash on a 2012 model, because there's an issue with the logic board on the 2011 dying almost as soon as the warranty expires.
Stanford course is presumably taught in college semesters and Swift 4 was just released. The earliest an update would therefore be possible would be the end of the spring term. (I do not know their schedule for updating the online course, however-- they may elect to only do it every few years!) Swift 4 is not a major update. The course is quite likely still almost completely current... though someone who has completed it and understands Swift 4's impact will have to verify.
Here's what I was working on for anyone interested: [https://www.youtube.com/watch?v=RURF4-PzLag&amp;feature=youtu.be](Game of Life style cell simulator) The closure functionality I was trying to implement was for the mechanisms tied to genes. I since have just modified each mechanism to take the cell state, such that any gene can modify any part of the cells current state (including any gene/mechanism!). Thanks again for the help.
I’ve been wondering this myself. Also, is there a way to access iTunes U through iTunes? It looks like they’ve moved all the courses to iOS. 
Welp
No sweat. It’s not going on the store, I’m just building it for shits and giggles.
Here's my podcast app: https://github.com/DavidPhillipOster/podbiceps
https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/AboutCoreBluetooth/Introduction.html
Probably at the end of the semester. 
I think you might find some good videos if you look at the catalog of WWDC videos provided by Apple. They talk about some of the inner workings of iOS and usually don’t drown you in code. When they do show code, it’s typically more proof of concept than “you need to fully understand each and every line.” I believe that you can find these videos on YouTube, but Apple officials hosts them on their website. A simple google search for Apple WWDC Videos should lead you straight to the treasure. 
Thank you so much!
I'm looking into switching avaudioplayer for avplayer for my open source audiobook player down the road too to support streaming 🤔 this will be great for comparison, thanks for posting 👌
Really cool. I've noticed massive improvements.
Apple will push ML everywhere. There is no denying that. But what part of it will Swift be? I don't have numbers but Swift is a building base of very insignificant number Apple products. I wonder if in their plans Swift is a serious language to invest or fancy thing for the developers. It is an important difference and I guess we will find out in upcoming years. I am afraid we will be just provided with some limited API (CoreML?) with Swift interface. What could make a change is the Swift community. Additionally, Apple is stumbling behind FB or Google when it comes to the ML because of their data policy. It's nice they care (or say they care) about their users' privacy but it could backlash on them (and on us with limited APIs available in the future). 
My own learning path consists of: 1. https://www.coursera.org/specializations/deep-learning 2. http://cs231n.github.io 3. http://web.stanford.edu/class/cs224n/ I am currently in the 3/5 of the first one. Further on I want to tackle "Deep Learning" book and maybe look into Reinforced Learning area. I did a fair amount of research and this path seems right for me. One more thing that comes to my mind is http://www.fast.ai course. Not so much internals of Deep Learning straight on there, but more visible effects and real applications of it. Everything is in Python.
It's usually a spring semester course, so I would imagine April or may of next year.
Cool! I just began playing with machine learning by using numpy only. As I want to know how it works in the base.
I just finished this book. It is a very good book with a lot of typo. Reading about RNN now.
I migrated a project to Swift 4 at the weekend and there have not been enough changes to prevent a newbie from getting on with things. 1) If you copy and paste code, Xcode will tell you what has changed and will provide a fix automatically. 2) If you’re typing code, the method signatures will autocomplete and you should be able to identify the new one just from looking at it. 3) https://www.raywenderlich.com/163857/whats-new-swift-4 Edit: Delegate methods might be a little different. I had one delegate where the signature had changed but there were no warnings. If you find a delegate isn’t being called, try retyping it. 
Yeah. Numpy + jupyter notebook is a great learning stack.You don't have to fight against language or environment. 
I didn't know how to send a JSON object, that's the thing... I didn't know HOW to encode the JSON. I've never done it before. I've never had to do an API call that involved a JSON object. I did finally figure it out after seeing someone else implement it on Github though... which didn't matter because fucking Google wouldn't let me use it without making an account, and I couldn't make an account because Google kept giving me an error when creaeting it.
I’ve used it to build a visual translator app. It identifies objects using the vision framework and then translates the object’s name in real time, you can check it out here: https://itunes.apple.com/us/app/translatr-camera-translator/id1280266073?mt=8 
rad! really cool app. Curious, did you use the ml objects that apple developer provides? and if so did you have to get permission to use it on your app? Or did you write your own ml object and train it yourself?
You want 2 apps (game and the one with button) and make the second launch your unity game? That could be achieved by custom urls
the good thing is you know how if fundamentally works without abstracted by the library. and build the fundamental knowledge of machine learning. 
You‘ll find it in the Podcasts section!
This is a great suggestion. However, all of the WWDC videos cover more advanced topics and new features. Perhaps I should clarify what I am looking for. Delegation is used everywhere, got it. A UITableView uses delegation, got it. Delegation is part of MVC, got it. How do I use it beyond copy past code? No clue at all. There are a hundred tutorials out there that will have me build a "simple" app to explain how a TableView works. They then proceed to not define terms, drown you in code, and fail to explain how the TableView works beyond "you need a delegate". It would seem to me that the TableView would be a good way to explain MVC, but then they turn a separation of concerns in to a view controller that acts as everything minus the storyboard. I can't tell if separation of concerns is a philosophical concept or and actual one (i.e. put things in separate files) and I am exhausted from looking at 25 tutorials and sites a day just to try to understand this. Ultimately I am not sure exactly what I am looking for, as I don't know what I don't know, but as a beginner I know that I can't take what I am finding on the web and do anything more than copy paste what they are doing. That is not learning.
That sounds like a possible solution to my problem. I have a game built in Unity, and then an app in xcode. I don't have 2 apps
I could not find. it says "This course material is only available in the iTunes U app on iPhone or iPad." at this link :https://itunes.apple.com/us/course/developing-ios-10-apps-with-swift/id1198467120
Everything works that way. Like in iOS you can build your layouts in storyboards and it's ok but if you are serious about it sooner than later you have to figure about how autolayout actually works. Same with Deep Learning, one thing is to build a simple model based on some tutorial and not really understand what's going on, another to have the knowledge to tackle some problems and figure out an appropriate solution. 
i have no experience with unity games, but it do shows as separate app on the device? if so then you need to google how to setup URL schemes in Unity
Yes, I used the Resnet50 model from Apple’s sample models. I didn’t need to do anything to it because thise sample models are already trained and converted. 
There's a workaround for the server bug [here](https://www.reddit.com/r/swift/comments/6l80gj/json_problem_in_app_development_with_swifts/djtsbym/).
&gt;120gb SSD/500gb HDD Huh? Which one is it? If it doesn't have an SSD you want an SSD. It should work just fine for Swift. Also when buying a computer from someone **always do a full system restore**. You never know what was on their previous computer. 
Thanks Jim! That’s actually what I used in the end xD
It has both SSD and HDD
Ha, no, it was a quick hack I put together very quickly while I was stuck on a train. I actually used [bottle.py](https://bottlepy.org/docs/dev/), which is a minimalist Python web framework. It was the most suitable way of doing this because it does a bit of the legwork and is very self-contained, so it was trivial to distribute as a single file you can run without any installation or configuration. If you'd like to spend some time on server-side development, it's not a bad choice to get started with simple stuff, although for more complex things, you might want to move up to [Flask](http://flask.pocoo.org/) or [Django](https://www.djangoproject.com/).
Actually I plan on learning about server-side development, so thank you!
That's interesting. I didn't realize you could get them with both. That being said make sure you do the system restore first thing! 
I watched a series of videos this weekend about arrays vs linked lists and in all tests the array was markedly faster. What are the use cases for a linked list over and array?
One of the areas where linked lists are superior to arrays are insert operations. If you insert an object in an array at position 0, all items that are already in the array might need to be shifted to the right one place, depending on the implementation of the array. Of course, internally, an array in Swift _might_ have been implemented as a linked list, so that an insert operation doesn't have to change the position of the other items; I don't know how Swift implements arrays without having a closer look at the internals or disassemble the code.
That is not relevant information, but thank you. 
It *is* a library, which *has* an API -- just like AWS *is* a service, which *has* an API. Have the web elitists tried to take over, again, and convince everyone that only HTTP is a valid basis for an "interface"? Programming interfaces have been around much, much longer than the web.
&gt; They then proceed to not define terms, drown you in code, and fail to explain how the TableView works beyond "you need a delegate". If you have any specific questions, I think people here would be happy to help. Apple's documentation has at least 2 different Guides that explain delegation, and I don't see any Apple-specific terminology that isn't defined or referenced. &gt; I am exhausted from looking at 25 tutorials and sites a day just to try to understand this. I would say stop trying to read 25 websites, and just read Apple's guides. They're much more likely to be correct, and complete.
Right. That’s why I said semantically speaking. And in this context OP is asking about taking to database backend through the web. 
[No. Just, no.](https://www.reddit.com/r/programming/comments/25xpre/bjarne_stroustrup_why_you_should_avoid_linked/)
&gt; No. Just, no. Yesssssssss! 
Okay, will put this advice into action. Wish me luck! 
Concepts like MVC and delegation aren't specific to iOS or Swift. These are general software engineering concepts and there's a lot of writing out there on the subjects. It might be helpful to zoom out of the Swift/iOS-specific explanations of these things and find more generalized reading. [This book](https://en.wikipedia.org/wiki/Design_Patterns) is a classic, and was instrumental for me in understanding design patterns. It also goes a bit into MVC. [This one](https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124) is solid too. [Here's a no-frills blog](https://medium.com/jeremy-codes/design-patterns-in-swift-6de09f27afba) that talks more about design patterns in Swift specifically that doesn't rely too heavily on using iOS' APIs (like TableViews) to explain what's going on. Hope this helps.
**Design Patterns** Design Patterns: Elements of Reusable Object-Oriented Software is a software engineering book describing software design patterns. The book's authors are Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides with a foreword by Grady Booch. The book is divided into two parts, with the first two chapters exploring the capabilities and pitfalls of object-oriented programming, and the remaining chapters describing 23 classic software design patterns. The book includes examples in C++ and Smalltalk. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/swift/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.27
&gt; If you insert an object in an array at position 0, all items that are already in the array might need to be shifted to the right one place, depending on the implementation of the array. That's a pretty big "depending on"! It's true if you're using plain C arrays, but it's not true with CFMutableArray, where insertions on either end have the same runtime performance. &gt; Of course, internally, an array in Swift might have been implemented as a linked list No. You can look at [the docs](https://developer.apple.com/documentation/swift/array/1540606-subscript) and confirm that's not true. Reading is guaranteed to be O(1).
Great, thanks for the link. I hope you enjoy the implementation of the singly linked list above though. If you have any feedback, let me know.
UIStackView is your best bet. Make sure your cell has a row height of UITableViewCellAutomaticDimention and a reasonable estimated row height
I recall reading a Google Tech blog post about it (can't find the link right now -- help?). They had tested a bunch of cases, and come up with a rule of thumb for when to use linked lists. The upshot was "almost never". The critical metric was the ratio of writes to reads. Unless it was going to be over 10:1 (or 50:1, or something absurdly high like that), the array was going to be faster, even for big arrays. Usually writes:reads is well under 1:10, so it's just not worth it. Having to shift your dynamic arrays every now and then for a write is not actually a big loss, because you just don't do it very often. A linked list takes more memory, and worse, has a random access pattern, so you're constantly blowing our your cache just to read from it. This isn't new. Some Lisp compliers used to optimize s-exps by packing them into arrays. I've never heard of a Python or Ruby runtime developer suggesting to optimize their dynamic arrays by using linked lists. Obviously there are specific environments with unusual performance characteristics (like a filesystem) where linkage is critical, but for the other 99% of cases, just use an array. Or if you're in a bad technical interview and need to demonstrate that you understand pointers.
The link isn't terrible, but your comment is useless. It would probably do much better if you used the video description: &gt; The part in Bjarne Stroustrup's keynote in GoingNative 2012 where he explains the reason that linked lists, and linked structures, are so bad for performance, even in the scenarios that programmers think that linked lists would be good. 
…or just use NSCache, which was designed specifically for intelligent caching, and even responds to memory pressure before your application is notified. [Example code here.](https://www.hackingwithswift.com/example-code/system/how-to-cache-data-using-nscache)
Isn't this the wrong data structure? &gt; We don’t use an Array because it would be slower. Did you profile it? It sure seems like it would be faster, especially if it were implemented as a heap. It'd use less than half the memory, and preserve locality of access.
Otherwise check out this video: [www.youtube .com/watch?time_continue=723&amp;v=gjkMVnlIcNE](https://www.youtube.com/watch?time_continue=723&amp;v=gjkMVnlIcNE) It's sometimes easier to understand if you have seen it. (if you are short on time watch from 4:50) Also if you are new check out the tutorial series that this video is a part of. It helped me a lot, getting started.
You don't need to use generics in nested classes. What you've done is just wrote generic inside generic, so the Node's T might differ from List's T and not constrained to it.
It is a good video, well explained but when you have a table view cell in the picture and unknown number if images that should populate the stack view, it's a lot harder. I'm not sure how to approach the initial configuration in the storyboard
Apparently expecting people to have the vaguest comprehension of CS in this sub is just too much to ask. It’s like script kiddie land in here.
He could obtain something similar (making the cache "transparent" irt memory management) storing the objects in the cache as weak references and registering for that notification (UIApplicationDidReceiveMemoryWarningNotification), i guess.
What kind of app are you making? Something like tumblr where you can share pictures, or just a view controller with a defined number of views in a stack view.
Something like tumblr! The number of photos is not exact, it depends on the users. The data comes from Firebase Storage and Firebase database. The number of photos for each post is stored in a dictionary with a incremental key (always starts from 0, then 1, 2,3...) and the value is the Photo Url that’s stored in Firebase Storage
That's not even the issue though, the people who believe that linked lists are better performers are more likely to have just come out of a CS course than to be people who have worked on production code. The thing I don't understand is why anyone would want to publish a programming tutorial in video format.
Also, I'm pretty sure the Swift array (much like NSArray) has built in optimizations for when it's being used as a list.
It sounds like you know how to get the data from the Firabase storage, but you would probably have to make the UITableview programatically in Swift. Try looking at this [stackoverflow](https://stackoverflow.com/questions/40220905/create-uitableview-programatically-in-swift) post.
What’s the benefits of doing it programmatically? When you’re not sure what you’re still doing, having something visual helps a lot not o get lost. But I’m open for options and learning how to do things the right way, not the easy way 
If you want to make it with the visual editor, you will definitely reach some limits, in this case the size of the canvas or the limits of the "settings" tool
Why do you say that? I wrote a 3-line test program and it very much does not appear to have that behavior. (But I don't think that's important for a heap, anyway.)
Ding ding ding!
It's up to you how you prefer but I use a mixture. What I always do is set up the skeleton for the cell and do basic configuration in awakeFromNib. So in your case you'll have an empty stack view and an outlet and then you can just have a method that appends a UIImage to the stack view .