Will appreciate some examples, thank you for your time.
I can see Apple open sourcing Swift, but frankly doubt they will submit it to be a standard. "Without the drag of a standard Apple would be free to change the language often." You provide the reason they would not want it to be a standard.... IF they need to change it they can.
 &gt;I can see Apple open sourcing Swift, but frankly doubt they will submit it to be a standard. Maybe but the lack of a standard would undermine the desirability of Swift outside of Apple. &gt;You provide the reason they would not want it to be a standard.... IF they need to change it they can. Well that is one perspective but we must remember that Apple has in fact presented other languages to standards bodies, OpenCL for example. Of course this isn't ANSI or some other widely accepted organization. 
A ViewController can only perform segues that are directly attached to it. In this case you should read about "unwind" segues. The basic idea is that regular segues move you forward, usually adding or replacing ViewControllers in the hierarchy, and unwind segues do the opposite - move backwards, or undo previous segues. 
There is also Hpple ( https://github.com/topfunky/hpple ). I used it just today and, coming from BeautifulSoup, it seems to work out quite nicely ( https://github.com/sebug/swift_decisions/blob/master/swift_decisions.swift ). Basically, you instantiate a parser, run an XPath query on it and that's that.
And yes a class with static properties is totally acceptable: https://thatthinginswift.com/singletons/
Sounds like you only made a single pointer to hold one coin. Try putting all of the coins into a collection and iterate through it while applying the same logic.
&gt; [iOS. The default coordinate system has its origin at the upper left of the drawing area, and positive values extend down and to the right from it.](https://developer.apple.com/library/ios/documentation/General/Conceptual/Devpedia-CocoaApp/CoordinateSystem.html) Probably the case here.
My button is exactly where I want it. Now even if I give the label the same exact points, why don't I see the label right on top of the button?
If you don't see the label on top at the same coordinates its because you added the button to the subview after the label
Thanks a lot Kametrixom! This solved it for me, thanks for the in-depth information, I was't able myself to find the documentation myself. Have a good one!
You might look at moving the boilerplate CoreData code out of your AppDelegate into another class dedicated to persistence. You could then make [the class a singleton](https://thatthinginswift.com/singletons/) so that whenever you request the managed object context you get the same one, without having to cast the AppDelegate all the time. let managedObjectContext = Persistence.sharedInstance.managedObjectContext
You need to enable the local session. AVAudioSession.sharedInstance().setCategory(AVAudioSessionCategoryPlayback, error: nil) AVAudioSession.sharedInstance().setActive(true, error: nil) 
What do you mean unplayable? Yeah, instructions are too vague... Up / Down / Left / Right are the only available gestures + you can make a move ONLY if the edge color around you is Green. The moment you make a move, the edge around you gets Red. And the first time you touch left/right/top/bottom border you can make a move again, etc. 
Thanks for your comment! I can understand why you have no problem naming this class `CoreDataHelper`, you know what it was made for. As a new member of your team, I may assume that it helps with fetching managed objects. There are few unknowns to me though: 1. what managed object context will it use? Is it the main one? How to use it with my local context? 2. if I can fetch some data maybe there's a possibility to save data too? Will it perform saving in current queue, main queue or background queue? 3. can it setup the entire stack for me? Three points to show you how different purposes this class may have. If you would divided it to three separate classes and name them accordingly to their purpose, I could easily know which one to use, and what to expect from them. However, naming is the least problem here. Some people consider helpers, managers etc as antipattern and [proof of laziness](http://blogs.msdn.com/b/nickmalik/archive/2005/09/06/461404.aspx). There are other possibilities like extensions. I hope I was clear enough explaining you why this naming is not the best and why you may want try a bit different approach. 
worked, ty :)
That might be what I'm looking for. The tutorials seem a little more straightforward and they include clear Swift instructions. Thanks!
Thank you for the comment, but what /u/Kametrixom replied was exactly what I was looking for! :)
thanks! :) i'll check out core data and realm. At the moment i'm thinking of learning the parse framework for this since i used parse as the backend to store the username and passwords. Any thoughts on using parse to store data? 
That just F&amp;%ing amazing!
Won't be long till someone ports it I guess :P
If it needs compilation then I'd say...no. What makes scripting languages great is that you can bootstrap easily to a server. If it requires compilation, I don't think it will work. C++ and C# are also open source and you don't see them being used as web frameworks as much as php,python or ruby. 
Shitty grammar. This sounds like an exhortation. Swift has become open source. Or even better, Swift is now open source
developers are used to running all sorts of tools this day and age - grunt, package managers, etc. If compilation is fast enough it is not really a problem. Bigger question is what would be the advantage be?
Stanford's latest iOS programming class is on swift i think. There's an app Swifty that lets you learn programming just using Swift on your phone. Apple's documentation is also a really good place to start.
Except it didn't. It will become later this year.
I think C# is used quite a bit! 
It won't be terribly meaningful unless someone writes a AppKit or UIKit libraries to interoperate with Linux, etc...
Foundation is enough. My server doesn't need UI. 
That's what they say. At the end of the year
Stanford's course is NOT for beginners. You need to be very familiar with OOP etc.
its not about the performances. there is a lot of web sites made with ruby (far worse than php imo) that works perfectly fine with millions of users. Its about caching
But Foundation is Objective-C.
Isn't Microsoft adding Swift support to VSCode?
Not really. The fact that they have subsequently decided to open-source it doesn't change the fact that it wasn't *always planned* to be that way. As Chris Lattner said, the decision wasn't made until a lot later.
I thought it was just Objective-C, right? Don't quote me on this, though.
The link links to itself.
Potentially. Once it's open sourced, people can build compilers for it for other platforms, modify the language and create forks of it, and even possibly build custom IDEs. I'd really like to see an IDE for iOS apps come to Linux as a result, although I'm not sure that'll happen...
Give us at least until after the WWDC week :) Swift 1.2 tutorials are still very relevant. While Swift 2 has many major changes, most of it are add-ons rather than a restructure of how Swift works. There are some syntactical changes, but very little compared to the scope of the current Swift language. For example: do-while loops have been changed to repeat-while new error handling mechanism - try/catch blocks labeled loop structures go to www.raywenderlich.com, they have the best and most diverse tutorials in the interwebz on Swift. 
There isn't too much different with the new language as far as syntax goes; you should be able to use the existing Swift tutorials.
You'll still need a Mac for iOS apps, while Swift will be open source the libraries need for iOS development like Cocoa Touch will not be.
Both.
Damnit I just payed the full price for iOS and OS X a few weeks ago
I just realize it's a self post.
I was able to do it, just plugged in my phone and waited until Xcode did some stuff to it. After that I chose my device from the dropdown menu besides the run button and it asked for my developer credentials. Then it built without any issue on my phone.
I wrote up some examples here: [What's new in Swift 2](http://www.hackingwithswift.com/swift2) – you might find it useful.
I just posted some examples of various Swift 2 features: [What's new in Swift 2](http://www.hackingwithswift.com/swift2). It's not exhaustive, but it does go over the major improvements and gives code examples to get you started. Swift 2 is an incremental improvement on Swift 1.2, so you should go ahead and follow your Swift 1.2 tutorials of choice before even looking at Swift 2 seriously.
Wow, you work fast! 
Now that you mention it, I would hate to develop a Swift program in a plain text editor. Completion and live warnings are really nice. Actually, why do I like Sublime Text so much for Rails development??
I really hope this means an IDE for Swift apps coming to Linux. I would love developing for iOS using a Linux-based OS...
Looks like it's time to pay up
That'd be awesome! But I doubt it..
You can view it..... it's on Apple's developer website.
Just like FaceTime™ ! ;)
You seem to have completely missed the point of `guard`, go and watch Lattner's section in the State of the Platform address.
&gt; Enrolled as an Individual. Your account has been automatically updated. To access development resources and view your account, sign in to Member Center and accept the new program license agreement. &gt; &gt; Your expiration date has been extended to include the sum of the days that remained in each program.
Thanks for the effort.
Generally Apple does not let you release apps built with preview or beta builds of XCode. Unless you are planning to release after September you will need it to work with the current version of the tools.
&gt; half way through cs degree &gt; intermediate developer Wooooooooooooooooo
I think that you will be fine. The move to Swift 2.0, from what I have read, adds some nice new syntax and features, and also changes around some of the Standard Library. But the core of the language is still very much the same. On top of that, I think that you should be able to pick up on a lot of the new stuff rather quickly. So I would say go for it. (As well, Apple updated their docs about swift to include 2.0. https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html)
To expand on what /u/voidref did not, the principle difference between an if else and a guard is that any optionals you unwrap and assign in the guard statement are available for the rest of the code block. Here is an example from the Swift iBook: guard let name = person["name"] else { return } print("Hello \(name)!") 
I love Swift and going open source is great, but I don't really see it leading to very much change in the current environment. I'm sure eventually someone will get it running on the web and do a few neat things here and there, but without support from Apple I doubt it would get much further than that. Swift is a great option, but there are already too many great options available.
The issue with IDEs on other platform has always been the code signing. There are a multitude of options for developing iOS projects on other platforms (eg, Unity, Xamarin, Kivy, etc), you just can't build the final application using them. Open sourcing the language itself is pretty unlikely to remove that restriction.
Not sure about that but there's [this](http://owensd.io/2015/05/21/swift-vscode.html).
I feel like you are still missing the main intent of the new keyword. The whole point is to avoid "if let ..else" for more readable terse code. You seem to equate it with "Well, it's not much different than if" 
I would finish the app on Xcode 6, at least until the final Xcode 7 is released. Not only does apple not allow submissions signed by beta software, a beta might not be stable / fast enough for you to use as a production environment 
You can definitely use swift 1.2 tutorials for bows swift 2.0 is more an extension of swift 1.2 than a replacement. Once you want start using swift 2.0 you can use the migration tools in Xcode 7 to help you with that.
Sorry: re-reading this it came across as a bit rude, and that really wasn't my intention. I guess what I mean is "I thought I had made that clear," but as you disagree then it's not as clear as I had imagined. I'll re-update the text.
Can someone summarize what is new in AVFoundation? I found this in the article: Just look at AVFoundation. Go on, look at it and cry tears of joy.
I started to summarise it, then realised it was a bigger effort that would require a specialised article. Also, some of the docs still haven't been updated, so it's hard to give a full overview. The things that caught my eye from AVFoundation are AVAudioSequencer, AVMusicTrack, AVAudioConverter, AVSpeechSynthesisVoice and AVAsynchronousCIImageFilteringRequest. Then from AVKit you also get the new AVPictureInPictureController, which really couldn't get much easier. I particularly like the look of this from AVAssetDownloadDelegate: URLSession:assetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad: – they've worked hard to make remote asset loading really clear, which is going to be particularly valuable for large assets like movies. Apple did a great job with this release, I think. So, I realise this is nothing like the summary you want, but hopefully it's given you some pointers to investigate further. Enjoy!
You're changing your argument by taking mine out of context. Yes, you can make a mess in Ruby. I never argued that Ruby is safer or even better, just that it is more expressive. 
AppCode already supports Swift, through the official compiler binary. 
But compared to AppKit or UIKit, Foundation is almost tiny. Not sure what Apples mid- and long-term plans are. A pure Swift on Linux won't be very useful for developers in the Apple ecosystem. In my opinion they have to find a way to bundle Foundation (I'm okay with closed source) to make Linux Swift useful. 
No. If you develop in Swift your biggest problem is that you have to convert your Source Code to Swift 2.0. Which means you can't go back to Xcode 6, which means you can't release your app until Xcode 7 is final, which will probably only be in September. Unfortunately Swift made Xcode betas pretty useless for ongoing projects. With Objective-C you could develop in the Beta and go back to the old version for releases. With Swift that doesn't work because the Swift syntax of the two versions are incompatible. --- And Yes. You can have Xcode stable and Xcode beta on your computer at the same time. If you want to play with a new project or playground go ahead and download it. Just don't convert code that you want to release before fall. If you want to test for compatibility with iOS9 you should use Ad-Hoc deployment or Testflight to get your app that was compiled in Xcode 6 onto an iOS9 device. Xcode 7 won't help because you have to convert your Swift code, and Xcode 6 can't deploy to iOS9 devices. 
I haven't tried Xcode 7 yet. But honestly, this sounds like a bug in Xcode respectively the compiler infrastructure. =&gt; https://bugreport.apple.com
Yay. Another style guide. 
It means that there's one more thing that Apple is giving away that the Linux kiddies will ignore when they're bitching that Apple doesn't give away their work.
I'm still on project 1 but so far I really love your book/series! I will definitely be sending a donation your way once I get over some of the humps I'm having. I posted in the /r/hackingwithswift subreddit under the project 1 thread about some problems I'm having! Thanks! 
I really like the concept of your book and how it has a program with exercises! I will definitely check yours out too! Thanks! 
Guys how can I get the length of string in Swift 2.0? My old code was (Swift 1.2): extension String { var length : Int { return count(self); } } But this doesn't work. I keep getting error: 'count' has been explicitly marked unavailable here (Swift.count) Expected an argument list of type '(T)'
Because Rails hasn't got fucking ridiculously long method names. Though check out RubyMine, it's a pretty neat Ruby IDE. 
I think Swift could be a great general purpose programming language for many purposes, and the web could be a great application. I’d hesitate to say "soon" though :) I think it will take a lot of time to explore the nooks and crannies of what a good Swift web framework might look like. It won’t be toppling Rails, Django, PHP or NodeJS in the next year. 5-10 years? Who knows? :)
Don't see mention of a WWDC session covering it, so my guess is existing library APIs will exist, but we likely won't know until the new app is released.
Thanks!
Thanks!
That code works fine for me in XCode 7 if I paste it into a playground.
I REALLY want apple to also support their libraries cross platform. I'd love to do all cross platform dev in swift as opposed to Qt... But we're definitely going to need the UI bits all ported too. Does anyone know the feasibility of a 3rd party making this happen?
JetBrains will likely make their IDE AppCode available for Linux. However Apple will likely never make AppKit and UIKit open source. That has too much strategic importance to them. 
To make it viable we need a GWT bridge or something similar. Better yet something like Django, or asp.net
Now if Objective Cloud will start to support Swift, that would be great.
agree with josh here. It really depends on your knowledge level. Do you have a good understanding of basic programming constructs such as variables, arrays, if statements, loops and functions, etc. What's your level of understanding on object-oriented programming basics such as classes, interfaces, encapsulation, inheritance, abstractions, events, etc.? If you don't have a good grasp on those already then you're a true newbie and I would suggest as Josh did that you find a more stable language to learn the basics. Don't get me wrong there are plenty of Swift beginner courses out there but just be prepared to deal with a lot of frustration due to the immaturity of the language that you wouldn't have to deal with if you were learning something like Android programming using Java (which might not be a bad place to start considering its more stable and there are lots of tutorials and resources out there). In short it really boils down to what are you willing to put up with. If you really want to learn iOS right now and have the time to devote to it then go for it. Find a beginner course that emphasizes learning the basics of programming while using Swift and have at it. Just be prepared to deal with the growing pains that come along with a language so new.
Specifically LLVM/Clang which isn't available on Windows (hence only OS X &amp; Linux support).
It also seems to work fine if I compile it as a regular source file. This seems to be something specific to your setup, not XCode 7 in general.
No argument. Passion overcomes a lot, and I really dig Swift. Just know that if you’re learning Swift and find it frustrating, it’s likely not just you. There are a lot of things about it that are deeply frustrating at the moment. Like XCode crashing upwards of seven times a minute when the Swift compiler encounters a certain edge-case syntax. Or local variables randomly not showing up in the Debugger. Or having code that previously compiled break in new point releases. And these aren’t problems you’ll have in more established languages.
Xcode 7 has a built-in feature that will change Swift 1.2 code to Swift 2 code with the press of a button. I tried it in one of my larger projects, and so far, everything seems to be working fine.
I think I saw in the list of new features to Swift in Keynote presentation:"Swift 1.2 to 2 migration tool". Did I just dream?
I had some issues with the new error handling not being converted smoothly using the migration tool. Took about 30 min to figure out what went wrong and fix it. Overall easy transition. 
I spent a lot of time with the 1.2 version of "The Swift Programming Language". I had a lot of notes and annotations on that iBook and it looks like the V2 book is completely separate. Should I finish the version I was reading or start from the same section in the V2 book? I just finished classes and structures and started on properties.
yes it took me about 30mins to an hour too. Going to try the migration tool that /u/spork-in-the-moon mentioned and fingers crossed. When will the first update to Xcode with Swift 2 be available - anyone know?
Imagine a world where a developer can build the entire user experience with the same language. Everything from the client app, to the server backend, to the firmware on external accessories, to scripting during development. The mental load needed to master those skill sets (or at least be highly proficient in them) drops noticeably. I think this has been a dream for a long time but has been unattainable until Swift. Or at least, that's the idea behind Swift. Making it OpenSource is the only way to achieve this goal. Apple needs community buy in and support. Not just a kickass language. Edit: Java has a lot of issues, the foremost of which is performance due to running in a virtual machine. Swift does not have this issue. In fact, Swift will surpass Objective-C &amp; C++ in performance for many things (maybe everything eventually). Yet Swift is as expressive &amp; easy to write/read/understand/maintain as a very high level scripting language such as JavaScript or Python.
&gt; I can't view this in the UK at the moment. That was most likely a CDN propagation issue. It probably was in the UK iBooks store an hour after you've asked. After the keynote I couldn't get it in the german store either. But that changed one or two hours later. &gt; It's free so I don't see any problem. Be careful, free content is copyrighted as well. 
Yes that’s a real thing
First of all, kudos on using a ; in a sentence! =) Your explanation is much better at communicating the intent and advantages of `guard`, and I hope you watched the "What's new in Swift" session that just happened. I really like Chris' extended explanation around it, esp. in the context of avoiding the "Pyramid of Doom" and JSON parsing. 
try here http://www.elementscompiler.com/elements/silver/
One can dream...
I hope this signals Apple becoming more friendly with Linux, though. That'd be swell.
Better yet, call Apple and ask. Why ask reddit first? 
You need to provide actual X and Y co-ordinates, i.e. numbers. If your "enemy" object is an SKSpriteNode, you should use something like this: fire.position = BodyType.enemy.position I covered exactly this in my first SpriteKit tutorial, which was [project 11 in Hacking with Swift](http://www.hackingwithswift.com/read/11/7/special-effects) – you might find it a useful read.
No but AppCode from JetBrains probably will, since their IDE is already basically cross platform. 
Use the migration tool. Xcode 7 will offer to update your Swift projects as soon as you open them.
What do you expect count to return on a UTF-8 encoded string? Bytes? Characters? What is a character? Here are some links that can give you an idea on why it was probably omitted on purpose: http://utf8everywhere.org/#myths https://dev.twitter.com/overview/api/counting-characters
&gt;When will the first update to Xcode with Swift 2 be available - anyone know? Yesterday. Go get the Xcode 7 beta from developer.apple.com.
Ditto! This guy seems to know what he's doing and BNR haven't jumped on Swift yet soooo... 
It isn't, although it is based on the open source IntelliJ SDK. The point I was trying to make is that 3rd party Swift IDEs, whether open source or not, are already possible without Swift itself being open source.
Yeah, I tend to use RubyMine for one month a year, really enjoy some of the cool features but then end back up on Sublime because its faster and looks better. Would be nice there was some other IDE options.
This will not necessarily return the value that you'd expect (for example emoji may count as two or more characters for NSString's purposes).
That app has a gorgeous UI, nice work! Would you mind elaborating on any tools you used? I am incredibly curious to hear about the process.
I would love to know the process as well. I am blogging my experience in learning Swift, and would like to know yours as well.
The UI looks amazing! Espn should hire you to do their app.
Thanks :) I love designing UIs as well as code them!
Actually I started with sketch for the prototyping and stuff, but I at some point I just wanna to code and moste of the UI was built on the fly, I didn't had a perfect desing concept.. I just knew I want a dark App with blur :)
I’m on mobile right now but its within an ibaction for the slider its essentially just player.currentPlaybackTime = NSTimeInterval(slider.value)
Lucky you. I got a huge number of errors in the migration where the migrator couldn't migrate my code (mostly related to error handling), leaving me with lots of manual work to do.
https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html look up iterating and how to add stuff.
Have you made sure the slider supplies continuous updates? I think the checkbox is just labelled 'Continuous', but I'm not at my computer so I can't verify. Also I might recommend stopping playback when the user first touches the slider and only resuming it when they lift their thumb, otherwise you'll get the horrible skipping. To my thoughts, this is how the music app works too. 
is there any crypt method implemented in php and swift (I mean the same method, ofc there are crypt methods in php)? so I dont have to implement a method myself?
Nice work! Are you using the articles from lolesports? Or do you write them yourself? If first, do you parse the website or do you get the "raw data" somehow?
Thanks! I use their unofficial esports API. Just "raw" json data!
Currently working on a Swift 2 Version and iPad / Apple Watch UI.
How big of a difference is it changing form Swift 1.2 to 2?
I was in contact with Riot Games for the last weeks and they are cool with it. App Review took about 8 to 9 days.. after they rejected me two times! Thanks :)
Should have clarified that these announcements were for new *Apple* developers.
What were the rejections for?
Go eSports!
Thank you! This is incredible helpful, I've been trying to build it with a UIScrollView and it was a total pain. I falsely assumed that UICollectionViews were only for static grids. 
Yes, pretty much. The Swift blog discusses this here: https://developer.apple.com/swift/blog/?id=7
Thanks!
Thanks for sharing. Do I need a Developer Program subscription to watch this? (Sorry, not on a machine with XCode to try)
Even cooler!
It's a font; why would scaling not be automatic?
I haven't really done anything with analytics but I think the easiest and most native solution would be [App Analytics](https://developer.apple.com/app-store/app-analytics/) from Apple themselves
I use Yahoo's Flurry. Its free and pretty easy to implement in your app. Although I haven't used Google analytics. Flurry you can create your own events and time events and watch where users go in your app. Apple's analytics is ok but its not that much data and it relies on users agreeing to share their data which not a lot do.
App Analytics presentation at WWDC is actually live right now: https://developer.apple.com/videos/wwdc/2015/ You will be able to watch the video [here](https://developer.apple.com/videos/wwdc/2015/?id=303) afterwards if you missed the live stream
Thanks for the tips! I think I'll stick to native coding for iOS apps and I can do C# for desktop stuff like you did; just sounds like a much easier time. Thanks again!
I'm impressed. Just discovered that println has been removed. That's a pity. Now we'll have to manually add our own newlines where needed. [Edit: fixed a grammatical error.]
Yes, maybe Apple can call it "Green Apple"..
Ah, thanks!
\*looks at the documentation again\* Well dang it, you're right.
Are you able to submit projects migrated to Swift 2.0 into the store? I've can't seem to find a solid "yes" or "no", though reasonable doubt tells me we'll have to wait.
It installs separately and cleanly from old xcode, so I can't come up with compelling reasons why not to at least check out the beta, unless you think it will be too much of a time sink. If you don't have a paid development subscription, the ability to run programs on my phone without the $99/year fee I think is well worth running the beta. I used to subscribe, then one year I had financial problems and letting the subscription lapse was an easy choice. It's nice to be able to put programs on my phone again.
They use an "image" property so I didn't see that it was a font at first.
Don't forget Localytics and more recently Paddle.
If you want to get the most out of it you should pic one with crash reporting and events, ATM we use a few as were trying to find the best for us but Mobile app tracking, Amazon, Counyly, Fabric. Fabric is pretty good for crashes and Countly is ok for events from my point of view. Although use countly 2.0 or less as the newest gave a lot of leaks and garunteed memory warnings and crash after app idling for 2+ mins.
I would put in a transparent view which touches the top and bottom of the cell, and then align the label or text to the center Y of that view. At least that's what I've done.
Xcode 6 can deploy to iOS 9 devices as long as you plug your iPhone into Xcode 7 to process the symbols first.
'Favored by a lot of people' and 'preferred' are two very different statements. Apple wholeheartedly, emphatically recommends using AutoLayout because it handles different devices, language styles, text sizes, and much more. Most frame code people write is just half-assedly implementing part of what AutoLayout gives you for free.
Hey! Parse is awesome once you get started. I struggled getting started with it too, and so I made[ this little code](http://paste.ubuntu.com/11694502/) to help get started populating a table view with different columns in swift. Make sure to change some of the lines I wrote to fit your Parse database. Here, I have a database on Parse of restaurants and ratings. I wanted to get a list of ratings and populate a tableview with those ratings. I'm going to assume you have background in basic swift, xcode, etc. Basically, you create the Parse class on the website, download their source code or follow their directions on how to get setup with parse, make a tableview, and link the tableview to the view controller as delegate and datasource (e.g. standard setup for a tableview). You also need a custom prototype cell that has a text label. Then, you can use my code as your viewcontroller. It might not work exactly (you might have to change some of it to make it work with your program), but the idea is the same. Take a look especially at how I iterate through the parse array: You query parse by first making a query object: let query:PFQuery = PFQuery(className: "[INSERT NAME OF CLASS FROM PARSE]") Then, this will get all objects asynchronously and create an array of values just from a specific column (similar to how you would parse JSON): query.findObjectsInBackgroundWithBlock { (obj, error) -&gt; Void in var object:NSArray = obj! as NSArray for x in object { self.rating.append(x.objectForKey("[What column do you want to get data from?]")! as! Float) //make sure the type here matches what you previously declared. I.e. if you have float here, make sure your variable is cast as [float] } self.tableView.reloadData() //because it's off the main thread, the tableview won't populate without this line } I hope this is a little clearer on how to get started with parse. Please let me know if you have any questions and I'd be happy to help/try to explain anything I could! 
Ah, that's a relief.
Size of the screen width to make it simple and show the view in the middle of every device. I have never thought of master-detail application, good call, I'll try that. I do not use Interface Builder so no idea about that sorry :(
No worries, I will try and find some time to fork it and add in some ideas, subscribe to traits collection changing etc. Will come in handy with the new multitasking features for iPad on iOS 9 :)
https://github.com/goktugyil/CozyLoadingActivity/commit/48b9ca8fcbfa7ecfdf0a6fabccaa511373ee6b58 Did it, thanks for the feedback!
I can still centre a view via frames or auto layout with the same amount of work and both look exactly the same on a 4s or 6plus. "Free" implies set once without any additional work which isn't true. Going from wAny-hAny to wCompact-hAny or any extreme difference. 
thank you so much! it's been a big struggle for me for the past few days. i'm not at home to try your code out but i was just wondering why "findObjectsinBackgroundWithBlock" is used rather than "getObjectsinBackground". I've seen findObjects being used in most of the tutorials while the parse iOS guide only shows getObject as the method of retrieving data. Is there a fundamental difference between finding and getting a PFobject?
You can print more than a line. It shouldn't have ever been called println and I think the change is an admission. That's just my opinion though clearly. 
Seconded, App Analytics. I don't want to be concerned about lawsuits and PII and all that. 
That's not possible online.
Apple's framework is NSJsonSerialization. It isn't too terrible to use, and is a decent way to learning the concepts of parsing JSON, which is one of the top things you need to learn how to do as a developer. Once you have an idea of how it is used, there are other frameworks out there that abstract it a bit more as well
[SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON) is nice.
I fully expect this sort of question with WebDev, but with iOS dev? 
You should be setting the frame, not position. Position isn't even a property of a UILabel. Also CGPointMake() isn't a swift function.. This shouldn't even compile. Try what you're doing except set the frame instead of position. As well, adding 10 to the yPos will make it 10 points lower. If you added it to your view under the button it would be hidden
You should make a custom class for your tab bar controller and then you can add functionality to do what you want when you switch tabs.
You should look at the documentation for a Tabbed View Controller. Like a navigation controller, it is a parent of multiple view controllers - in your example you have one?
Yup, you could add the value you want to share as a property of the tab controller. At some point before you switch screens, save that value in the property. (like the top answer here http://stackoverflow.com/questions/27307903/swift-tab-bar-view-prepareforsegue) Ideally you'd save this value after the user enters data.
Tutorial: http://www.appcoda.com/custom-segue-animations/
Oh it could be so beautiful. Imagine if Apple rewarded developers and made a limited run of Swift documentation books available. That beautiful typography and code snippets would look so sharp. Give me a couple of weeks OP, I'll see if I can get some printed from somewhere I know, although don't count on it!
Coming from a Pascal background (don't laugh, it is a powerful language), I don't want to get into bad habits with my coding in Swift. Ray Wenderlich has a guide to the style that he uses, and it seems OK. Can you point me in the direction of the style that is the consensus for writing code in Swift, if you don't think Ray's is quite right. I know that this is a personal taste, but there seems to be quite a bit of consensus around the traps for Swift.
- Put the response into a Dictionary - Pull the items out of the dictionary using their keys i.e. var url: NSURL = NSURL(string: "http://url_that_produces_JSON")! var data: NSData = NSData(contentsOfURL: url)! let myDictionary: NSDictionary = NSJSONSerialization.JSONObjectWithData(data, options: nil, error: nil) as NSDictionary let restaurant: String = myDictionary["restaurant"] as! String or if let restaurant: String = myDictionary["restaurant"] as? String { //do something } else { //do something else }
I agree. It kills me to see people run to install something from GitHub without first looking to see what the stock frameworks can do.
[here's a version](http://www.reddit.com/r/swift/comments/279rvn/i_went_through_the_epub_guide_and_created_a_pdf/) I compiled from the original Swift book when the language was first released. I printed it out with excess printing allowance when I was in college. not sure if this helps or not, but good luck!
Yup, SwiftyJSON + [Alamofire](https://github.com/Alamofire/Alamofire) is great. Here's an [Alamofire tutorial from the site you linked to](http://www.raywenderlich.com/85080/beginning-alamofire-tutorial), but the GitHub page manual should be enough to get you started :)
Have you tried clean your project and rebuild?
BTW, there are two versions of the book in the iBookstore at the moment...the current one and a 2.0 version (same for the Cocoa and Swift one). You have to search the store to find it.
Yeah no problem. If you're talking about getObjectsInBackgroundWithId, that takes a parameter and returns one specific PFObject. The find method returns an array of all PFObjects 
I got to the step where I can abstract content, but only if it's AnyObject. If I try and set it as string or something, it crashes and tells me __NSCFNumber can't be converted to String. let result = NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.MutableContainers, error: &amp;error) as? NSDictionary let parseJSON: AnyObject? = result!.valueForKey("result") let stuff: String = parseJSON!.valueForKey("Yhighest") as! String //crashes... but if I just do: let otherstuff: AnyObject? = parseJSON!.valueForKey("YlowestURL") println(otherstuff) ... Optional(4290) What's going on here? Also, I have two layers of dictionary... My jsonstring format looks like: Optional({ "result": { ... : ... ... : ... ... : ... } }) 
OT: it would be better to start animations (maybe only first time) on viewDidAppear.
Agree, I really like Fabric. Although their Mac app is a bit unstable and keeps freezing from time to time.
beautiful ui. Was all of this done purely in swift? Hopefully you might consider making a similar app for dota :) 
 ceilf(theFloat)
Actually as of Swift 1.2 you can do something similar to SwiftyJSON without importing any additional frameworks. As others have pointed out, try to get your head around Optionals and (forced) unwrapping. Imho this is fundamental in Swift and try to stay up to date (if your employer doesn’t say otherwise). Keep in mind that Swift is still in rapid development and be prepared that updates will break your code. For a good read what actually changed in Swift 1.2 see the article below. It even has a NSJSONSerialization example in Swift 1.2: [NSHipster about Swift 1.2](http://nshipster.com/swift-1.2/) Concerning your actual problem… If I don’t miss something out here your JSON looks something like this: `{ "result": { "Color": "F9", "Market": "Central", "City": "LA", "Highest": "Baldy", "restaurant": "Immigro", "Miles": 188.0 } }` From your string encoding I assume that you have syntax error. So if I’m not mistaken then please check your JSON file for a proper syntax. NSJSONSerialization is actually pretty straight forward. You create a dictionary from your NSData object with optional binding. I like to see the actual error but you can skip the error handling of course. After that you unwrap your dictionary with Multiple Optional Binding. If at any stage a key isn’t valid and the value can’t be unwrapped from the dictionary, this returns nil and switches to the else clause – hence this will not crash. This works beautifully when you're absolutely sure about the server response and the structure of your JSON. var error: NSError? if let response = NSJSONSerialization.JSONObjectWithData(data, options: nil, error: &amp;error) as? [String: AnyObject] { // This is new in Swift 1.2: Multiple Optional Binding if let result = response["result"] as? [String: AnyObject], color = result["Color"] as? String, market = result["Market"] as? String, city = result["City"] as? String, highest = result["Highest"] as? String, restaurant = result["restaurant"] as? String, miles = result["Miles"] as? Float { // do whatever you want with your data here println("Color:\(color), market:\(market), city: \(city), highest: \(highest), restaurant: \(restaurant), miles: \(miles)") } else { println("Couldn't unwrap the dictionary.") } } else { println("Couldn't read response. Error: \(error?.description), \(error?.userInfo)") } Hope this helps. Edit: Fixed formatting
You should move that to viewDidAppear as /u/sabiland said. As a side note (most probably) not related to your issue animations also stop working when you call UI code from a non-main thread by mistake.
I haven't watched it, I didn't know they exist, I'll watch them right away. Thank you very much for the answer.
round() or roundf()
Swift is definitely production ready. I have been using Swift for 10 months now at work, and I have no worries in continuing to do so..
That sounds reassuring, thanks! :)
Swift 1.2 is fine for production (just launched an app in it). It's an evolving language. Keep in mind that if you're ready to launch before Swift 2.0 is released you'll be using a pre-release version of Xcode and you won't be allowed to upload the binary to the store.
I've got an app that must be stable (it's for firefighters) and we've been using Swift since last September with zero issues. Swift is an awesome language that's definitely production ready.
Objective-C is dead. There will be no more APIs written in it. Go cold turkey!
Thanks I'll take a look at it
Ok thank you! 
Go ahead, been using it with lot of success in my current application. Stability had never been an issue throughout the whole thing. It's great.
Ints will round negative numbers away from zero, so it's always worth considering every case. I've been bit by that one before!
I have a tableview landing screen with a plus button. The user clicks it and is presented with a textfield to populate with a name. the user then clicks "save" this dismisses the view and goes back to the tableview. The new name should be here but it isn't.
You are going to have to post what's in your second vc. Do you have a property setup right adding it to the array?
Try adding reloadtavleview method to the viewdidappear function. Your probably not reloading the table when your switching back to the mainVC
Truncate would be a more accurate word.
Swift 2.0 isn't out yet (only a developer preview is). You can't submit apps to the store with it until a non-preview version is out.
If you want to pass a text to the second vc, you need to set that text in your prepareForSegue like this nextViewController.textfield = mytextfield Your nextViewController must have textfield as a class variable
Thanks! That fixed the problem!
Thanks!
my memory is hazy, but I don't think it took too long.
Remember a view controller is just a class and classes can have properties. So make a property on the view controller that you are segueing to and let the property's data type be of type Person. //view controller that will be receiving the Person instance class CustomerDetailViewController : ViewController { var Customer : Person } //view controller that will be passing the person instance class CustomerListViewController : ViewController { private var _customer : Person func prepareForSegue(segue: UIStoryboardSegue!, sender: AnyObject!) { if (segue.identifier == "CustomerListToCustomerDetailSegue") { let detailVC = segue.destinationViewController as CustomerDetailViewController detailVC.Customer = _customer } } }
This is what the NewSoundViewController looks like: import UIKit class NewSoundViewController : UIViewController { @IBOutlet weak var soundTextField: UITextField! var previousViewController = SoundListViewController() override func viewDidLoad() { super.viewDidLoad() // ikuzo! } @IBAction func cancelTapped(sender: AnyObject) { self.dismissViewControllerAnimated(true, completion: nil) } @IBAction func saveTapped(sender: AnyObject) { // Create a sound Object var sound = Sound() sound.name = self.soundTextField.text // Add sound to sounds array self.previousViewController.sounds.append(sound) // Dismiss this ViewController self.dismissViewControllerAnimated(true, completion: nil) } }
just wondering, what is the purpose of making extension functions such as below versus just making them public or private functions on the class itself? extension EditEventViewController { func didTapSaveBarButton() { } func didTapDismissBarButton() { } func setupTableView() { } func setupBarButtons() { } } Also it seems that CalendarPickerViewController.loadData() commits a bit of a MVVM no-no. Best practice approach is that it should be moved to a Services layer that would allow it to be re-used across multiple view models but at the very least the logic should live within a view model. There is other logic that is out of place also such as EventDetailsViewController.didTapRevokeEventButton(). Most of the logic in this function should be moved to a view model. The completion block being used on revokeEvent could be refactored to be called via a protocol from the view model. Could also use delegate interfaces instead of concrete classes in a lot of places to allow for better testing and parallel coding between team members i.e. something like //using a concrete type here restricts testing and parallel development //private var viewModel : EventDetailsViewModel //better private var viewModel : EventDetailsViewModelDelegate Overall nice job though, you guys are on the right track.
Swift 2.0 might be ready, but XCode 7.0 definitely isn't, while working the last few days with it, I encountered XCode crashed, SourceKit crashes (manages the syntax), CPU used up by XCode and lots of other simple things. It is a beta after all
Parsing a remote website's HTML is risky due to most modern websites contents being dynamically generated. That means that the [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model) might change from day to day and if you're not careful you're deserializer might fail or even cause your app to crash. A better approach in my opinion would be to keep the HTML data mining on a separate server instance that the Swift client could make simple HTTP requests to. By doing that you can quickly make changes, add (edit and delete ) more sites to crawl data from without having to make an update in the iTunes App Store. **Edit:** This merged [pull request #57](https://github.com/topfunky/hpple/pull/57) makes it possible to use said library with cocoapods in swift projects. I still stand by my previous answer though.
You're absolutely right there. I usually recommend the refurbished store to most people; my family has bought a few computers from there over the years with no problems as the warranty is the same and the condition is like new. If the poster responds with a budget in mind, then it'd be easier to assist in finding the most value for their dollars.
Wow, thanks so much. That answered everything, plus some. I would give you reddit gold if the situation with the CEO wasn't occurring. I was pretty hesitant about 1Gb working - thanks for verifying. I'll keep you in mind when I save up $600 - you'd be surprised how quickly an ER visit and 30 min surgery for a strangled hernia can add up, haha. Your eBay name same as reddit? Maybe I'll develop an app that controls an iPad hooked to robot arm blades, so your friends can operate on you while an instructional YouTube video shows them how to do it. Better hit up kickstarter. 
Sounds like a fun side business. I really enjoy talking comps too. In fact, I was really gunning for HP's "the machine," telling everyone about its potential, but it appears they were just blowing air, without a tested working model, since the release keeps getting pushed back. Ah well. Thanks again for the info. 
I will be able to block actions on the server based on the user's role, but I would like to hide parts of the UI if the user is unable to complete the action. For example, I wouldn't want to show an edit button for an object if the user doesn't have permission to edit it. In Ruby, I would be able to do something along the lines of: ``` if user.can?(:edit, Post) ``` I could of course complete a check for the user's role. E.g. if the user does not have the role "moderator", don't show the edit button. But this leads to imperative checking littered throughout the codebase: ``` if user.role.name == :moderator ``` In the former example, access definitions have been extracted from the UI code. Does that make sense?
[Swift 2.0 will support Linux](https://developer.apple.com/swift/blog/?id=29) so I think you could run Swift 2.0 on Linux or even on Windows with an emulator such as Cygwin. FWIW, I find that compiling Swift is more resource-intensive than running it.
Make sense, I don't thinks there's really a way to avoid all the role checks client side that I know of. It's ugly but not so bad if done cleanly.
I'm using a 2010 Mac Pro w/ 6GB memory. It runs Xcode pretty nicely. Every now and then it will hang for about 5 seconds, but I think that might be a result of the HDDs spinning up for swap disk access. I've read multiple places that using Xcode required lots of RAM. I believe it's true.
I'm on a late 2010 MacBook (last white one) with 8GB, it's definitely usable, but I wouldn't want much less memory. My work MacBook is last year's 15 inch with 16GB, it's so quick that it almost never gets in my way.
My guess is the custom font wasn't properly registered with the system. I tested the code and it works for me with a built in font. That aside, I would recommend a few changes to your code: — You need to call super.viewWillAppear(animated) — Are you "undoing" your nav bar changes on viewWillDisappear? Or do you want these changes to apply to the whole app? If you want it to apply to the whole app, your approach is definitely not what you want to do. — Instead of modifying the nav?.topItem?.title, you should be modifying the navigationItem.title instead Let me know if you have other questions!
Thanks!!! I do want the Nav bar to have the have that font through the entire app.
First, let's tackle the "throughout the app" part. The best way to do this is to use the [appearance proxy](https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIAppearance_Protocol/index.html). This would be best placed within the AppDelegate.swift file. [Here is a gist with code](https://gist.github.com/cbkeur/0e40c1d203c91b9ee254). Note that I tested this with a built in font, and if you run that code, you'll see the large text properly. Then, I'd update your ViewController2.swift to set the navigationItem. [Here is a gist that shows you the best way to do this when using a storyboard](https://gist.github.com/cbkeur/95e55ff9b7c8cc65d470) Try it out!
True, there will be swift compiler and standard libs for Linux, but Xcode and iOS programming will still be exclusive for Mac. 
I just got home from WWDC, and you're right, Swift 2.0 is a big improvement and looks great. Yosemite will be fine for running Xcode, but development is a lot more resource intensive than most computer usage. Also keep in mind, Xcode 7 is still in beta, and won't be tuned for final performance for a while yet. Minimum specs will leave you pretty unhappy. Try to get a Mac with as much RAM and as advanced CPU as you can afford. 1GB RAM is not really enough. I would expect 4GB is the minimum, 8 would be better. If you can't afford a Mac right now, work hard and save your money. Waiting a couple of months to save for a better Mac will go by quickly, and will pay off in the end. Good luck.
As Swift automatically wraps `round()`s that are called for `Float`s to `roundf()`, the only reason to use `roundf()` would be to force the use of `Float`s. 
Protocols, are useful to setup for activities. If you constantly import data, define a protocol for that such as a protocol for transforming JSON data into Swift objects. If your making a game, setup protocols for various mechanics. At the end of the day you want to use certain types or objects and make sure that whichever you substitute in, you can be sure that you can have them perform in a certain way. Extended protocols will certainly help with making API's easier to integrate into existing projects. it will also help with readability, as you will be able to read from the definition of a Type what it can do by checking what protocols it adheres to. 
Oh thanks for the heads up, I didn't know that. I guess I'm forced into Swift 1.2 then. Historically how long has it been before Apple takes a version out of pre-release? If I want to release my app this year, is it too soon to use Swift 2.0?
You can think of them as traits in other languages. When extending a protocol you're providing a common implementation for every type that conforms to that protocol. For example, every `CollectionType` can be sorted, mapped, reversed, and every implementation for every type would look exactly the same. Previously, you were stuck to creating a function like `sort` that takes a variable type `T` that conforms to `CollectionType` (if you don't know what that means, you should look into generics) or you'd have to implement the `sort` method in every single type. Granted, you could do both and then just call the function from the method which would remove a lot of redundancy but that's still a lot of boilerplate code. So, a generic `sort` function: func sort&lt;T: CollectionType&gt;(collection: T) { ... } or create a method on every type struct Array&lt;T&gt; { func sort(collection: T) { ... } } struct Set&lt;T&gt; { func sort(collection: T) { ... } } ... Why is this bad? Well the second one is obvious, redundancy. With the first one you just lose a whole lot of syntactic sugar: sort(map(collection) { $0.property }) { $0.property2 &lt; $1.property2 } instead of collection.map { $0.property }.sort { $0.property2 &lt; $1.property2 } Now, you can just extend the `CollectionType` with the `sort` method and you'll get it on all types for free. I hope that helps.
The immediate difference it makes to all of us is that global functions like count() and find() are replaced with methods like indexOf() – so much more discoverable, and more natural reading too.
Maybe is too late to answer but today I came across of this page http://info.activeintime.com/news/2015/3/27/swift-the-pebble-ios-sdk
Idea for defer is nice, but I (my opinion) don't like the syntax. Maybe something like this will be better: func abc() { } defer { // finally code } With current syntax, I am still not sure can I have several defer blocks in function, and if I can - which one will be executed first. Also with my alternative syntax it will be easier to locate defer portion of func. This are only my ideas and opinions.
/r/hackintosh ?
As Hawk_Irontusk said, this is made clear in the documentation – and in the article I wrote. So, I think it's fairly agreed upon :) With the Apple syntax, you can also place defers wherever you want and they will trigger when exiting the scope – loops, etc, are viable places.
I wish you could force defer to trigger when exiting a higher scope. For example, if you place a defer inside a for loop, it will trigger at the end of the current iteration, which might not be the expected result. Also, the following was surprising to me. I had assumed that the defer block was a closure, but it looks like it's not. var x = [Int]() func testDefer() { var i = 0 defer { let a = i; x.append(a) } defer { let a = i++; x.append(a) } i++ defer { let a = i++; x.append(a) } } testDefer() // a = [1,2,3]
Solid answer right here... I am loving Swift 2.0... But it baffles my mind that they can't get Xcode right... It's like a yearly letdown, and I find myself using a familiar catch phrase used in sports "maybe next year".
Congrats! I see duolingo on there, grats to that developer (I don't know her handle here!). Surprised to not see the reddit iama app in there.
This is mentioning a specific architectures, what are your architectures build settings with the project?
Would be really nice
Yes, there are. Not sure what that has to do with my point, though. 
Mmm put a breakpoint on prepareForSegue and check the value from the debugger. Are you using the JSON data on the viewController that's calling the segue? 
Thanks. I will probably rarely use more than 1 defer, but now I understand it more. Need to finish reading documentation :)
Any time! This is all so new and we're all discovering how things work.
This is definitely the best option if your limiting factor is money, not time. You will get way more bang for your buck.
I'm not sure Yosemite will be fine. Xcode 6.3 already dropped support for Mavericks, for example.
Also don't forget to look at [Apple's refurbished hardware](http://store.apple.com/us/browse/home/specialdeals/mac). My 2 cents: I recommend you look at a 13" MacBook Air, it might not be the absolute cheapest option available, but it will probably give you the best bang for your buck. One last point ... no matter what machine you buy, you **absolutely** should look for one with an SSD. Good Luck.
I'm running it on Yosemite now, and Xcode 7 will be released before El Capitan, so it will certainly run on Yosemite at first. Sure, they might drop support in a future point release but that will be a while out.
Swift is shaping up to a really nice language. They have taken care of most of the major issues I have experienced using Swift now. I suspect Swift 3.0 will introduce some method of dealing with concurrency which mix and match well with grand central dispatch. 
If you want to use keychain you can try [KeychainAccess](https://github.com/kishikawakatsumi/KeychainAccess), but i think NSUserDefaults goof enough for token
Ah okay, so Sketch is just an easy and handy way to make nice images to bring into XCode to recreate your GUI mock up. Thanks! I wasn't really sure what was so great about Sketch if you had to rebuild everything from the ground up when you went to XCode anyway. 
It will not find the class, a similar example would be UICollectionView which did not work on iOS 5.
Powerdrift is correct, but you really should avoid using Storyboard. It will hinder your understanding of view layouts, and once you reach a point of implementation on an actual project it will limit what you can (in practice) do. Form good habits early, and good luck!
A program like Sketch is great for what it's made for: Prototyping. What you have to do now is essentially rebuild that screenshot piece by piece until it looks like your prototype. I would suggest pulling out assets for each component of your login screen as images and going from there. So from the looks of it you probably want images for the mail and the key. The rest can be drawn on directly with UIViews, UIButtons, UILabel, and UITextfields. Once you have all the UI laid out to look identical to your prototype, start implementing the functionality (preferably in a separate class as the class you use to lay out the UI if you do decide to lay out your UI in code) such as changing the colour of the button, highlighting the icons, etc.
Xcode will prevent you from adding a UIStackView in IB, and likely in Swift, it won't compile. You might be able to add one programmatically in ObjC, but it either won't link or will crash as soon as you try and instantiate the class.
Yeah. Good luck with adaptive layout without using storyboard and the preview assistant. . That's great stuff for beginners. 
Excellent, thanks.
Yes, it will be feasible on Linux at least. But it will be still a long way to the existence of a healthy ecosystem.
I talked to a few Swift evangelists at WWDC, they said they're interested in porting over some of the Foundation standard library to Swift for the open source release. Still, it's gonna be a long time before we see things like HTTP servers, routing libraries, database connections, etc in Swift. Though the C interop will help with that!
I'm not so sure about that, never underestimate the craftiness of cocoa developers. I think many of us would create open source libraries for these things. Foundation would be awesome though, imagine we could use the same models on the server on Linux and on iOS! 
To get an idea of the future of Swift on other platforms, and the time and effort that may be involved, compare with Lazarus, which was developed to be an Open Source clone of Delphi, and designed to run on many different OS. The project in it's earliest form started in 1998.It was not until the late 2000's that it was reasonably workable on linux, windows and mac. See [About Lazarus]( http://www.lazarus-ide.org/index.php?page=about ) and [History of Lazarus]( http://wiki.lazarus.freepascal.org/History ).
This.
Isn't that what GNUstep has already done?
Is possibleNumber supposed to be a string? because it seems that Int() don't accept String as an argument. Try possibleNumber.toInt() instead.
It says arm64 armv7 armv7s, SDK is iOS 9 and deployment target iOS 9
Perfect, got everything positioned. Thanks a bunch
The resources that have gotten me the furthest are the iTunesU Stanford videos, which are available for free. Check out [Developing iOS 8 Apps with Swift](https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099), with Paul Hegarty as the instructor. Be warned: These aren't quick tutorials. It's a deep dive into the basics of iOS development. The iTunesU course has all of the course reading, videos of the lectures, and PDFs of the slides and assignments. It can take you pretty far. The version I did used Swift 1.2. 
I've tried them and stopped using them but I never really got too far into them. I will definitely try them again after your suggestion! Thanks man!
What helped me most was watching the demos, then entering the same code myself into a project. I'm only going back to the slides now; I didn't really use them at first, since they're so dense.
Alright! Thanks for the advice! 
Thanks a lot! That is really helpful!
I think Interface Builder is great if you want to build a relatively simple app. But I have no idea why you would want to use Interface Builder for something more complex, especially if you're working with other developers. We use [SnapKit](https://github.com/SnapKit/SnapKit) to write autolayout constraints. I think it's really elegant and fast to write. I know you can break up your project into multiple storyboards to help with merge conflicts, but we tried that and I did not enjoy it.
Thanks for the tips! I'm following several tutorials now and reading the Swift book from Apple; can't wait to dive into this stuff
I disagree (with your second statement). Analogies are not always one-to-one. I am giving the OP an idea that the use of open source Swift will not be overnight, and it is not an easy task.
Good question, and it will be interesting to find the consensus. For me, it is a bit of this and a bit of that. In some circumstances it is good to it programatically (e.g. an array of labels), and sometimes (probably more often) it is easier to use IB.
Every situation and every app has different needs. IB is a great and fast tool for solving less complex layouts. But as the complexity increases so does the hours you will have to put in to tame IB to you and your team's needs. SnapKit makes it almost ridiculously easy to create layout constraints pragmatically. That code will also be readable and easily understood by other developers, both while adding to it and while handling merges, which is not something I could say for IB.
I'm a visual person, and the idea of designing a complex UI and setting their respective auto layout rules entirely in code just sounds unnecessarily painful. I'll code subviews within objects in code but for the main elements I can't see doing it any other way than in IB, as cantankerous as it.
The ViewController is where most of your apps logic (read: functionality) will go. It works in between the model and the view by retrieving data in a way the model dictates and presenting it the way the view dictates along with changing which model to use and changing which view to use (by changing controllers). ViewDidLoad is a function that gets called when the view (UI) loads on the screen. It's basically saying the device is ready to do stuff. If you have any other experience programming you can kind of think of it as the main() of your view controller. Side note: When I first started iOS programming I felt there was a lot of stuff to take in all at once so don't get discouraged I think it happens to everyone.
I just realized the problem. XCode 7 doesn't build dynamic libraries in the same way that XCode 6 does. They've moved from binaries to text-based binaries in iOS 9. If your trying to use an XCode 6 Dylib in Xcode 7 your going to have a bad day. 
I look forward to this and comparing it to the way I handle doing my layouts (all in code). I'm sure there's optimizations / clever ways to do certain things I'm missing. Would you mind sending me a PM with the link when you release it?
You already didn't have to use Xcode in general; you could (and people do) use vim + swiftc, or whatever. Swift being open source doesn't change anything related to that, aside from maybe encouraging the creation of third party tooling around swiftc and friends.
You'll need to give the segue an identifier, and then in your view controller, override func shouldPerformSegue(segue: UIStoryboardSegue) -&gt; Bool { if segue.identifier == "YourIdentifier" &amp;&amp; yourConditionHere { return false } return true }
If you have views animating whilst a [super]view is being introduced to the screen, it absolutely is.
This is called auto completion, because after every " there has to be another one. You can torn this off in XCode's preferences. I don't know what you mean by things getting completely erased without any action though.
I favor IB. Of course I might write code for some things if that makes more sense. But in general I think people ought to use GUI designers. This I believe from an architectural and maintenance point of view. I have worked on large pieces of software with complex GUI before and I see many problems with coding the UI: 1. For a developer who doesn't know the app, it can be very difficult to jump into and change GUI done in code. Locating a specific GUI element based on say customer feedback and altering it is much harder when it is in code. With a GUI designer it is trivial. 2. Separation of concerns. By coding the GUI one very easily ends up mixing in complex logic with the GUI code. Changing this later can be difficult to figure out. Using a designer you clearly separate your apps look from your logic. There is no way you risk code getting into your xib file. 3. A xib file is data rather than code. Data is inherently easier to work with than code in the sense that data can much more easily be reasoned about and transformed. You could easily write a tool that transforms or manipulates all your xib files in some way. 4. Designing a good UI is an inherently visual task. You can not easily visualize how well something will look when coding it. Coding requires running the app a lot more. My experience with working on large apps is that turn over time because a real obstacle when coding a GUI. If you need 5 minutes each time you make a GUI change, development really slows down when you start fiddling with adjusting things a few pixels. You simply experiment a lot more with GUI than with code and thus you need a tool which can give you quick feedback about your choices. A visual tool can do that for you. There is a reason e.g. games are separated into a game engine written in C/C++ and a game logic and levels often done in a script language that allows changing things and experimenting at runtime. My own impression debating this with people before is that people who care about reuse and architecture but don't really care about UX often favor coding the UI. For somebody with a passion for good and beautiful UIs I think they will tend to be negative towards a coding approach. Designers don't try out their designs by describing them with words, why should you? It is the wrong language for the task. 
I don't think the downvotes are because people disagree with you, I think they're because people are tired of having this debate. 
&gt;The ViewController is where most of your apps logic (read: functionality) will go. Lol
Thank you for your contribution
The problem is even when I'm done writing the line it'll add a duplicate ". It seems like the autocompletion is buggy. I'll try to add a short video tomorrow. Hopefully that'll help understand this more. By getting erased what I mean is I type a line. Xcode auto runs the line as it is a playground. After the refresh the new line I entered is disabled or mixed up with a following line. Again, a video might be more helpful in understanding this. 
Ok, so you're lazy AND pretentious, we get it. Are you not confident to the point that you don't want to state your opinion on where a *beginner* should place the logic of his app?
In separate classes that a VC may use if needed. ViewControllers should be small classes.
An Open Source implementation of Foundation already exists. Check out: https://github.com/gnustep/base/tree/master/Headers/Foundation Hopefully GNUstep, or a new fork, will be the subject of a grand community effort in coming months. Yes, this is exciting :-)
I'm very optimistic that Swift will become well used outside of the Apple Universe: arguably, there is already a gap in the Linux Development landscape waiting to be filled by Swift: that of a fully 'modern', natively compiled language that has a huge developer community (and isn't C++). In addition, the parts that Apple do not intend porting i.e. Foundation, CoreFoundation, CoreGraphics can be found already in the form of the GNUstep project. Combining these is likely to be an exercise for the community, but I have no doubt that the necessary will and talent will come to bear.
&gt;Ok, so you're lazy AND pretentious yup &gt;on where a beginner should place the logic of his app? where it belongs: into the model. now pls consult google and leave me alone. 
I can't upvote this enough. One fun exercise is to look at an Apple or third party developer app and browse it's package contents. While you can't look at the nibs included in the package in IB, you can get an idea of how and how much that application makes use of IB. It may surprise you how advanced of a layout you can create in IB. Especially for universal apps and accounting for all the screen sizes we have these days. 
Hey @RohitSwift1, Maybe we could work together. I am 11, and I already have my social networking app (built using Obj-C, but I'm learning Swift) on the app store. I also know Java. -Arman 
Mostly because of "improper" usage of the apple advertising identifier.. they are really strict in this case.
Thanks! I tried my best, still learning UI design and Swift :) Fantasy LCS is on my ToDo list already, it might be included within the next 2-3 updates.
You're not wrong but given that OP says he/she is a beginner I wouldn't feel the need to say this. When they start to actually understand what's going on in their program then they can focus on writing cleaner code. 
Also, in a lot of applications a UITableView is a simpler and better option (if you don't need items next to each other, just one after the other). Instagram, Facebook, etc. are fancy UITableViews. 
Thanks OP! It's rare to see generosity like this, good on you! 
couldn't find much discussion about it here. the debate is dynamic with every iteration of the languages and IDE as well.
I've been struggling with interoperabiltiy, I'd love to see an answer to your question. I'm working with an ObjC SDK and it's been a pain in the ass trying to port over the methods to make them callable the .swift file. 
thank you
Hi, when I try to compile it says FXBlurView.h is not found. How can I resolve this?
From Apple: &gt; If you have a CloudKit app, you can use CloudKit web services to provide a web interface for users to access the same data as your app. This seems to be a web front end to cloud kit from Apple: https://cdn.apple-cloudkit.com/cloudkit-catalog Digging here: Some database operations require the user to sign in using their Apple ID. Your web app will need to handle authentication errors and present the user with a dialog to sign in. Apple actually presents the sign in page through a redirect URL so that the user’s credentials remain confidential. 
Didn't know people had VMs for OsX. Thanks! I'll check it out. 
It's easier to miss the negation with an ! than it is to read guard. It makes more sense if you're unwrapping optional as part of a guard conditional but in effect you are guarding for what you DO want, rather than testing for what you DON'T. Your two code samples will do the same thing though. 
I went down to the developer tools lab at WWDC this year to ask an engineer specifically about the problem where merely viewing a XIB arks it as changed (and you look are the XML and only the tools version has changed) I was told that this behavior is a bug. It's supposed to only change that version number after you have actually done something to modify the XIB. He went on to say that he had personally played whack-a-mole with this issue, and that we should file radars, and attach XIB XML to the issue, because there may be specific things in the XML that triggers the annoying misbehavior. So please — everybody — go forth and file radars on this one!
Ok, there is a public and private cloud container. We never use the private container, just the public. The App user never has editing capabilities, just the Administrator of the App back end content. Just can't see Apple advertising a product "you can use CloudKit web services to provide a web interface for users to access the same data as your app" that is filled with security problems, but learning here. And this one: "Apple actually presents the sign in page through a redirect URL so that the user’s credentials remain confidential"
Which talk, at what time? 
Thank you! Now the inverse; will Swift &lt;=1.2 compile on iOS 9?
It will, definitely. Can you write Swift 1.2 using Xcode 7? Sadly no. However you can use Xcode 7 to process symbol files from your iOS 9 device, and then deploy Swift 1.2 code using Xcode 6.3.
I have found guard to be useful to test if a good amount of variables actually exist, especially if I write an optional initializer for a class. 
Is it possible to ship an app using Xcode 7 though to a the app store? Or place the binaries from a file made in Xcode 7 into Xcode 6.3? 
Yea, I recently re-watched the talk and noticed that as well. Welp, if you can't override a function, might as well make a new one is the next best thing. 
Your syntax was a bit off in modifyInt (missing a parenthesis), as well as the modifyInt() call: func double(number:Int) -&gt; Int { return number * 2 } func triple(number:Int) -&gt; Int { return number * 3 } func modifyInt(number:Int, modifier: (Int -&gt; Int)) -&gt; Int { return modifier(number) } modifyInt(15, modifier: double) 
Swift 2.0 will be released along side iOS 9 &amp; Xcode 7, strongly doubt swift 2.0 in xcode 6.x
swift 2.0 is not ready yet. in one of the WWDC talks they mention a feature which is not in this seed but will be in the next, so it is essentially a beta 
Aw I thought we were bashing nodejs :(
I've been developing a game with Swift 2.0 in Xcode 7 (And running it on my iPhone which is only running iOS 8) thinking that I was ahead of the game and preparing for the future. Should I hold off until closer to the final release date? 
What...are you even talking about? What nodes? What finger? There is absolutely no context for your problem.
Hi shooky1! First of all thanks for your suggestions. Here are some explanations: Q: What is the purpose of making extension? A: We wanted to group methods in particular responsibility groups. That's why all target-action functions, class life cycle methods or methods publicly available are in separate extensions. We started with such thinking but at the end of the implementation we decided to go with 2 groups: one for private, one for public and internals functions. Also we didn't change that to keep project consistent. Making private extension instead of private functions makes file easier to test (in case of visibility what should be tested) and being able to see at a glance what functions are inside a class (Swift 2.0 with it's synthesized headers will make it much simpler). Based on experience gained during Roomguru development, we wrote [Swift style guide](https://github.com/netguru/swift-style-guide#code-organization). Q: Also it seems that CalendarPickerViewController.loadData() commits a bit of a MVVM no-no. A: You are right. This part of code should be moved to separate class. Please notice that CalendarPickerViewController was created in early stage of our learning curve. Later we separate such part of code in kinda "helper" classes and we decided to name them with NetworkCooperator suffix. One of the example is EventsProviderNetworkCooperator. Q: Could also use delegate interfaces instead of concrete classes (...) to allow for better testing and parallel coding. A: In Netguru we devide tasks per functionalities. Please notice that almost in every case, one developer was responsible for view controller implementation as well as for associated view model. It's true that Swift is protocol oriented programming language but all of us are coming with Objective - C background and sometimes obvious things are becoming vague when you don't step back for a while. We're still fighting with this and trying to elimate such situations.
yes, but i like my mouse and the cool sublime text menu for changing contexts and such. :P Make vim as easy to use and bam i'm in. (seriously though VIM is cool)
Oh god, so many of my colleagues that had a course which they used Lazarus hate it so much. They also needed to learn Delphi for no good reason...
Aside from being a different kind of "if let" there are limitations of what you can put within a guard block. You have to call something that exits: a throw, a return, or even an application exit(). So this makes control flow easier to reason because a guard must exit.
Thank you! But why does (Int -&gt; Int) have to be in parentheses? 
I understand that you can not submit iOS app to appstore using Swift 2, but can you at least do beta test for the app written in Swift 2 by using Testflight?
I think that /u/cryo means that you provided no context. I'm going to assume that you are using SpriteKit and you are talking about an SKNode object. It might help to mention that (or clarify if I am wrong) in your OP. It might also help to post some code.
Thanks, the SDK may be out of date or maybe it's just that I don't fully understand how to do it. I'll keep digging. 
I feel this would be a bigger issue if her was selling for profit. If he is selling at cost and we are all benefiting from one person performing a mass print order, it's a little less fishy, especially when the book is free. The best bet though would be to look into the licensing agreement apple has written up for the book which I can't do at the moment.
Sorry for bumping, but does no one have any idea how to fix my issue?
That use case is actually much simpler. You import the header file of the class you want to use and than you call the class in Swift. SO lets say that I have an ObjectA and it has an [ObjectA alloc]initWithB:myB]; In Swift that would look like ``let objectA = ObjectA(withB:myB)``. To call a method, it would be ``objectA.myObjectiveCFunction()`` I highly recommend reading the Swift 2.0 book in the bookstore, its a good book that will help you understand Swift better. Happy coding!
Damn. Well....I want to print it for myself but I'm too dumb to understand printers. The only way I know how to print things is to get in touch with my dear friend /u/Yasuuuya and ask him to do it for me. Of course, because we are such good friends, I will cover his printing and shipping costs because he's already donated his time to help me out. 
You can submit iOS 9 apps for TestFlight in ITunes Connect, so yes.
(Int -&gt; Int) describes the function you're passing. It accepts an Int and also returns an Int. I really love Swift in that everything is typecast (vs. the shit show that JavaScript is)
I'm just using Carthage right now. Would you use it if it had CocoaPods support?
Actually I wanted to build an app for myself as part of learning programming. So where do I get access to swift api?
Going from C++ to Swift is the greatest transition ever. The language really is beautiful. 
Something like SVGKit should let you load raw SVG into a UIImage-like object. At worst you should just need to take the SVG file's contents and munge the XML and redisplay the result as a new image with SVGKit. If you set up some ID's or classes in the SVG to make the changes you need easy, it shouldn't be too bad.
I wrote [a huge collection of free Swift iOS tutorials](http://www.hackingwithswift.com) called Hacking with Swift. It's a comprehensive set of iOS + Swift tutorials that are free and project based, and also designed to have a smooth learning curve so you're not overwhelmed with detail – you can start without any coding experience just fine. The fact that it's project based means you make 20 real iOS projects as you learn, so you end up with a library of great stuff to build on. It covers Swift, UIKit, SpriteKit, Core Image, Core Graphics, Core Animation and much more, and all the source code for the projects [is available on GitHub](https://github.com/twostraws/HackingWithSwift). I wrote it, so my opinion is obviously hugely biased, but I think it's pretty good and I hope others agree :) I recently started adding new projects for iOS 9 and Swift 2, and even put up a massive new tutorial tonight teaching CloudKit. You might find [my article on what's new in iOS 9](http://www.hackingwithswift.com/ios9) a useful primer.
I've found paintcode is worth the price. It's hard to beat native draw commands. 
After some quick googling and a peak at the code it appears to be for this website, http://hypem.com/ , some type of music discovery platform. 
Thanks for the response. I'll definitely check it out!!
The main problem you face is the paradox of choice. When I learned to code many moons ago, software was expensive and so were the books that taught you. Today all the software is free, and there's a huge amount of free tutorial material – so much that it's hard to know where to start and what has value. As a result, people fall into the trap of thinking, "if X is free and Y is not, Y must be better," and throw away their money. My advice: try the free stuff first (Hacking with Swift is great, but there are lots of alternatives that are also free!) and only pay if you didn't get on with the free stuff.
Wow. Paint Code looks really great. Unfortunately, in trying to make an educational app and can't afford the licensing for it right now :(
I asked a similar question a long time ago on a different forum, and someone went against the grain and offered me advice differing from the other commenters. So I'm going to steal his advice (which helped me immensely) and pass it on to you: I would learn *Ruby* first. It is such an easy, intuitive language, and you'll learn it in no time. I'd argue it's easier than Python, which is another easy language. Do code academy, or do Learn Ruby The Hard Way, or do any one of the other dozens of free resources out there. It's not impossible to learn coding first by learning Swift, but it'll be harder. I think it'll be easier -- even more rewarding -- to come into it with some programming knowledge. Things will just click better. So, that's my two cents. Learn Ruby, take as long as you need, and then move onto Swift after you've made a few simple text-based programs or games. 
As someone who just started coding about a year ago, I agree that videos are great. However, most of the ones I have seen with swift, no matter how 'beginner' they are, start off with some concepts that aren't intuitive if you have zero experience. Myself, I started with Obj-C with an online college course (which wasn't very good) and a book (which was) written by Stephen Kochan. I just started swift a couple months ago, and I can say, without the Obj-C background, I would have been able to get through the tutorials and make the apps in the videos, but would have missed the underlying principles. With that said, I don't think you need to start in another language first, swift is pretty user friendly, but be sure to get a good solid base in your learning, and try different strategies. Udacity has a great free intro into swift, but skips some of the foundations I mentioned. Udemy has one, but it costs money. However, if you express interest and wait a while, you'll get a pretty hefty discount (at least I did), and Rob Percival does a good job explaining the basics, which are variables, constants, if-then (loops), etc. I think the raywendrlich site is good, and he has a podcast, too. And Stephen Kochan is coming out with a Swift book in November which I think would be a good reference if you need clarification on something introduced in a video, or you're just trying out new things on your own. The biggest thing is, dive in, try it out, and don't get frustrated. Coders can have a bit of a club mentality (I saw someone ask on stackoverflow about how to read documentation, the first answer was "if you can't read documentation, you should learn"), but there's no secret handshake. There's a lot of code out there, and a lot of coders, and everyone has there own stye. You learn by doing. I didn't have a smartphone until 2010 or even know what Facebook was until 2011, but I've built six (really, really dumb) apps after just a few months, and I work 40-60 hour weeks. Good luck, and happy coding. Haole
Haha, ya, fair enough. Leave it to the engineer to not try and explain anything. Anyways seems like /u/fefejones pretty much got it, but to use an analogy we'd all understand it's like reddit for music.
You can use a function instead of a closure, which is really the same, just with a name, so you can call itself within: func lap(n: Int) -&gt; Int { if n == 0 { return 0 } return n + lap(n - 1) } I checked and it doesn't leak
I was poking around this tutorial today. Looks good, but it might be better for someone brand new to programming to start with a tutorial that just uses the language without the cocoa api complexity first. 
And this library is for an app to get data off of the Hype Machine website? Edit: As opposed to, I dunno, posting? Sorry I don't know how the Machine works. :)
It's a library to interact with their API. I build www.plugformac.com and it's what we use in the new version.
Got it. Thanks!
Alongside other things, you can use XCPlayground and its method XCPSharedDataDirectoryPath to read/write to its playground sandbox folders.
Wow, thank you for taking so much time to write this. Definitely helpful!
iOS Apprentice from ray wenderlich 
Thanks for the resources!!
😕
 do { let startWords = try NSString(contentsOfFile: startWordsPath, usedEncoding: NSUTF8StringEncoding) { } } catch { print(error) } 
I tried reading based tutorials first and it just didn't sink in, so I paid for a month of Lynda.com and crammed a foundations of programming course that used JavaScript. Then a couple of Swift specific courses. I found that Simon Allardice was the lecturer that worked best for me and I basically just went through his catalogue and picked things that would help with the project I had in mind. The reason I paid for it as opposed to using the free stuff is, well, I'm pretty easily distracted especially when I'm new to things and am hanging on to knowledge by a tenuous thread. The production value on the Lynda courses was better than the free ones I saw so there was nothing to distract me like poor sound quality or bad animations that stop me from being immersed. Now that I have a foundation to work from I can use the free stuff and not get distracted but personally I needed that starting point. I plan on heading back to Lynda for my next phase though. I still have a long way to go though. A looong way. Edit: I must say though that I'm sure there are very good free tutorials out there, so my experience with quality is probably not representative of most.
The only details we have are that : will be open sourced for Linux and this is going to happen by the end of the year.
Something can't be open sourced for an operating system. The language is open sourced and they (Apple) actively contribute to making Swift work on Linux. 
Or use try! to avoid wrapping. But then your program will crash if the read fails, of course.
I think that's just initWithContentsOfFile:encoding: Didn't see :usingEncoding. Xcode wants to complete initWithContentsOfFile:usingEncoding to :format:locale:error but with :encoding I get the same "extra argument in call" error.
I did write a "Just Swift" tutorial to begin with, but it was only for my reference – I'm a big believer that new things are easier to remember if you apply them in a real world context as you learn. However, it would probably take less than an hour to polish up my "season pilot", add in the Swift 1.2 and Swift 2 updates, and put it out there in case anyone found it useful – I'd probably add a big warning to the beginning saying I'd prefer people to learn Swift in staged chunks while making real projects, but everyone learns differently so it's worth a shot!
I've gotten about halfway through your tutorials. I love them! They are so informative and teach the reasoning behind why you do the code better than any website I've seen. Also I love that on your website you have warnings for users on the latest Xcode version. Thanks for adding new stuff to it and making sure it's up to date
You could always download the free trial of it gives you enough time
Which might actually be intended behavior, if the file lives in your main bundle, for instance.
I found Swift really easy to get into with minimal experience. Took a few false starts where I chose tutorial series' which weren't to my learning style but, when I hit on the right one, it was great fun and I saw my progression really quickly.
Which one was the right one for you?
I have never posted a programming question anywhere. My fucking bad.
I watched a YouTube series (can't think of the name off the top of my head) and followed it up with a book the same people had written. It involved making a game called Zombie Conga if that helps!?
I'm not sure about an API to access it, but during WWDC Apple released their own standard Swift documentation for the first time: https://developer.apple.com/library/prerelease/ios//documentation/General/Reference/SwiftStandardLibraryReference/index.html
That is Xcode 7 features.
I think you need to slow down a little; you're getting a bit ahead of yourself. The comments above are correct, but you aren't really understanding them – are you sure you really want to be dabbling with Swift 2 so very early in its beta stage? The problem is happening because Swift does has done away with the error parameter here. You must used do/try/catch. If you include "error" in the call, which was correct in Swift 1.2, it will not work in Swift 2. If you read [my discussion of the changes in Swift 2](http://www.hackingwithswift.com/new-syntax-swift-2-error-handling-try-catch) it might help. But I would suggest you consider using Xcode 6.3.2 for the time being – you can upgrade to Swift 2 very easily once you understand the basics.
If you mean no coding experience at all then you have unlimited options. I'd look into a college computer science program or something equivalent on line. Further I'd suggest a program that doesn't use Swift. Why? Well to learn the concepts upon which you build software and frankly the concocts upon which Swift is built. In the end if you just learn Swift and the SDK Apple supplies, you will put yourself at a disadvantage. Especially if you intend to make is a career. The story is slightly different if you intend this as a hobby but even then a few basic concepts learned properly can do wonders for your ability to work with Swift. As far as books directed at complete beginners and the Swift language, I don't know of any that I can suggest at the moment. That really doesn't mean much though as it seems like new Swift programming books come out everyday. For a beginner the book you choose ought to be focused as much on computer science as it is Swift. 
Oh oops, yep I'll be using SpriteKit. I don't want to pick your brain TOO much here but I do have some questions based off that. Haven't even begun trying to code it so it'll just be general stuff: (Again, I'm super, super new to any form of coding) Being able to capture the vector solves that problem for sure..how does that look though? You set a variable to be equal to thatsprite.something? To create someting more smooth looking you would, like you said, have to wait for the object to be off the screen and then relocate it, so the concept of having just something at the top to collide with doesn't necessarily work then right? The top of the object would hit the top of the screen then appear at the bottom instead of leaving then coming back up through the bottom. Can you/would you make an invisible frame larger than the viewable frame/game area so the object would leave and then eventually touch that once its out of sight THEN reposition and come back a bit below the viewable frame so it looks like it's sliding in and not just fully teleporting to the bottom? I dunno if that makes any sense. I'm sort of stuck not knowing what's possible/what you can do / what you cant do..so just tossing out what might make sense to me? Thanks for any help man, appreciate it a lot. 
Patronising wasn't my aim, I apologise. However, I do think you ought to at least consider leaving this alone and focusing on Swift 1.2: if you are struggling to convert this code to Swift 2, how do you hope to convert the rest of Hacking with Swift? You're on project 5, and the next 25 are all written for Swift 1.2. Only projects 31-33 are for Swift 2, so you're going to hit many problems along the way until I update the text. If you downgrade to Xcode 6.3.2 you'll be able to follow all the tutorials, learning lots. You can then take a one-hour Swift 2 upgrade tutorial, and understand everything. It would be much easier, I promise! Anyway, I'm going to assume you really want Swift 2 and Xcode 7, so I've fixed the code for you in this instance. Here is how it should be written in Swift 2: (NB: This is me typing Swift into a Reddit comment box – please check for typos!) if let startWordsPath = NSBundle.mainBundle().pathForResource("start", ofType: "txt") { do { let startWords = try NSString(contentsOfFile: startWordsPath, usedEncoding: nil) allWords = startWords.componentsSeparatedByString("\n") as [String] } catch { allWords = ["silkworm"] } } else { allWords = ["silkworm"] } Note that I have removed the if/let from your NSString initializer, because it no longer returns an optional – that's what the catch is there for. I have also removed the error: parameter for the same reason. Both of these changes were in the documentation you read. I hope this clears up your problem and allows you to continue following the tutorials.
SpriteNode.vector (a little rusty, the object might need a physics property set to have this available). Something suddenly disappearing off the top of the screen once it impacts the top might look awkward. You could however do that if you prefer. You should be able to detect if an object is within the frame of the screen (or game area rectangle). Once it leaves that space you can (within a frame time space) move it to the next location and apply the vector. So yes smoother. No need for the larger frame, the previous stuff should explain that. You get to specify what is able to impact with what in your app. 
Perfect, thank you very much for explaining! That should be enough to get me going. Appreciate it! Have a good one.
I disagree about the core data component, you don't want to force cast anything in that framework. Always use if let or guard let instead to make sure that there are actual objects. 
Great video! Very helpful. I'm going through your book online now and it's wonderful. Thanks for all of your hard work, it's incredibly useful for those like myself just starting with Swift.
Hey, Sorry for the late reply. Just been a bit busy recently. There's a pretty easy fix for this just open terminal and then cd into the project root directory like this cd /root/directory/OfProject/ProductSwipe-master\ and then once you're in run pod install Once it finishes running, try running the project again
From what I understand you would have to: hide the pause button screenshot blur the screenshot use the screenshot as the background for your new subview overlay that contains your 3 buttons. Unless that has changed in the last year, i think that is the only way.
[here is a tutorial that is close enough i think](http://www.raywenderlich.com/84043/ios-8-visual-effects-tutorial)
[Link directly to GitHub Swift Education](http://swifteducation.github.io)
Chris, When you say that guard does not allow the else block to fall through, does that mean that you do not need to explicitly return? On what scope does this hold true (for instance, would it explicitly continue if used in a for loop)?
Auto layout was difficult for me to grasp at first too. I watched the Stanford Swift videos and the way the instructor explained it was very helpful. I believe he goes over it in the first two videos. I’m on mobile right now but just Google it and you’ll find it. 
irrelevant disrespecting the dead classless
Hi. I was wondering if starting off purely with swift is a bad idea? Because when i see other languages, maybe because I'm not too familiar with the syntax seems to be almost cryptic to me but with swift, everything seems to be more or less user-friendly. 
That's precisely the problem I was pointing out. You are analysing code with a microscope, instead of seeing the big picture. Of course you won't be able to see the big picture unless someone explains it to you, or you spend and awful amount of time and effort.
Yeah - you can download Xcode 7 beta, or you can go to this site to play around with it here: http://swiftstub.com/
Yes, you can. But be warned: * Things have changed from Swift 1.2, so old code might not work. * Things may still change, so your new code might not work in beta 2, 3, 4, etc. * It requires Xcode 7, which is in beta and might be buggy. * You can't submit Swift 2 apps to the App Store just yet. You might find my [what's new in Swift 2](http://www.hackingwithswift.com/swift2) article useful.
https://developer.apple.com/education points to the GitHub page &gt;#Swift Curriculum Community &gt;In addition to the amazing resources in iTunes U for Swift Curriculum, there is a new Swift Education community on GitHub that provides access to all of the Xcode projects mentioned in the new high school curriculum on iTunes U. Download the projects for use in your classroom and contribute your own. &gt;[Join the community &gt;](http://swifteducation.github.io/) ___ and also points to iTunes U but refers to it as (my emphasis): &gt;#Swift Curriculum on iTunes U &gt;**Universities, schools, instructors and other authors** are publishing their curriculum and ideas for teaching Swift to iBooks Store and iTunes U. Check out this amazing collection of resources, including a new free high school curriculum for iOS app development on iTunes U. &gt;[Download the resources &gt;](https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewMultiRoom?cc=us&amp;fcId=531221819) Seems to be more of an endorsement than an official course.
You can use http://swiftstub.com/. It's an online Swift compiler. It should get you at least through the basic fundamentals of Swift.
Im not sure what to think. Probably a really elaborate hoax /s
Here are 5 free promo codes! Please enjoy and share it with a friend! WNEK6N7FYLT4 4FT9EHP47P9M EREAF6F7EE6E 6PRJ99H434MH PRAKMXPXY3KL
I think you're looking for [ImageKit](https://developer.apple.com/library/mac/documentation/GraphicsImaging/Reference/ImageKitReferenceCollection/). I haven't tried it myself but it sounds very promising
It's very easy. This is an expected thing from Apple, so they have made things simple to set up in Xcode. Just start taking new classes you would make in ObjC, and make them in Swift. Watch the [Improving Your Existing Apps With Swift](https://developer.apple.com/videos/wwdc/2015/?id=403) video from WWDC. You'll have to create a bridging header (Xcode will offer to make one for your when you add your first class in Swift). The bridging header should #import all the things you want available to the Swift side. When you want to use any swift code from objective C, just import a "[YourProjectName]-Swift.h", which tells xcode to look through your swift code (the file itself doesn't exist). Note: You will have a one-time hit of about 9MB in your app size, because it will bundle Swift runtime with your app. This is until Swift can stabilize enough as a language that iOS will start including the binary in iOS, and our apps won't have to include it.
Thanks, taking a look.
This looks like a lot of fun to play with - thanks for open-sourcing it and for posting here :)
Value types are not allocated the way objects are either; they're on the stack. So, similar to value types in C (like int), value types in Swift are cleared when the stack frame they're part of is cleared.
Really helpful answer. Thanks for the video, watching it now.
Swift's compiler won't be open-sourced until the fall, when 2.0 leaves beta.
I don't think xcode even works on Hackintoshs
Do you have your machine specs?
My Machine: Comp| Brand / name ---|--- CPU| QuadCore Intel Core i5-3450, 3300 MHz Motherboard | Asus P8H61-M LX Graphicscard | NVIDIA GeForce 8800 GTX Ram | 16 GB Audio | Realtek ALC887 Anything else ? :) 
That thumbnail
No, nothing works yet for Swift.
You can just use OS X 10.10 as a virtual appliance in VMware Player. Or use an online playground: http://swiftstub.com Or use RemObjects Silver in Wine: http://www.elementscompiler.com/elements/silver/
MF DOOM!
Maybe in Xcode7? As far as I remember either in the "State of the Union", or the "What's new in Xcode" WWDC session it was said that you can put some code in another file (or something like a module?!) to improve Playground performance. --- Edit: It was Session 104 "What's New in Xcode" &gt; You can add almost unlimited functionality to a playground by adding Swift code to the new supporting sources folder. &gt; &gt; This helps you keep your playground clean and focused while also giving you a place to put the supporting functionality. &gt; &gt; There is also a performance one here because the supporting sources, they can be compiled down because they're not run interactively. &gt; &gt; They're only there to support your playground and that helps them run really, really fast. By http://asciiwwdc.com/2015/sessions/104
It isn't required. You can write the signature this way, too, for example: func modifyInt(number: Int, modifier: (Int) -&gt; (Int)) -&gt; Int 
Make a custom TableViewCell subclass that has a pointer to the UITextField. You can use the delegate methods for UITextField to send text events back to the TableViewController. Or you can use the pointer from the TableViewCell subclass and read the text directly from the UITextField.
Sorry about all the troubles. I finished this project a while ago, and we have since decided to nix it from the main app. Haven't really kept up with it. Thanks for finding these issues though! Always good to get these kind of small things out of the way. I removed the MAVE pod from the project. It shouldnt've been there in the first place, so that should fix that issue with generating a new UUID . Side note: You should check out MAVE. They're basically an all in one, drop in solution to invites for you app. Very similar to how Uber gives a user $15 for referring a friend. Anyways, back to the errors. I also found the error with upcomingDeal. Totally my fault, it was a spelling error with one of the test brand names (it needed to be jcrew instead of JCrew) To get it all working, try pulling the project again and running it. You may need to run pod install like before to make sure FXBlurView and MZTimerLabel are installed, but it should be good to go. If you run into any other issues, or have any feedback, please comment again! Thanks again, and hope it works! 
Glad you got it to work, but you're following Skip Wilsons tutorial, aren't you? 
Awesome! Glad it worked. If you need any more help/details on how it works, feel free to PM me. Enjoy! 
Note: I wrote this before I wrote the main Hacking with Swift series, as a general guide to myself to help keep the course structured. I'm not a big fan of teaching straight theory so I never bothered publishing it, but [following a comment from a Redditor](http://www.reddit.com/r/swift/comments/3a35pu/where_does_someone_without_any_coding_experience/cs9386g) I figured I could polish up the text so that it's up to date for Swift 1.2 (and mentions Swift 2 where appropriate) and release it. If it's useful, great! If not, the original tutorials are still there, so it can't hurt! As always, comments are most welcome.
PS: Sorry for the Taylor Swift lyrics. Hard to resist, you know…
OK, so it turns out it took a lot longer than an hour to polish up the text, but [I got there in the end](http://www.reddit.com/r/swift/comments/3afmzp/swift_for_complete_beginners_a_hacking_with_swift/) and the "no projects, just Swift" walkthrough is live now. Thanks for the suggestion – I hope it's useful!
Not the “right” answer, but you can make `==` work with `CGFloat` and ranges: let location = CGPoint(x: 0, y: 0) let frame = CGRect(x: 0, y: 0, width: 320, height: 480) func == (lhs:CGFloat, rhs:ClosedInterval&lt;CGFloat&gt;) -&gt; Bool { return lhs &gt;= rhs.start &amp;&amp; lhs &lt;= rhs.end } if location.x == (0 ... (frame.size.width * 0.5)) { print("yup") }
OK - count me in as a complete beginner (48 years old, last programmed in the early 90's in Fortran) - I have a PC and an ipad. I assume this allow me to develop an app - say a special birthday greeting app for my mother's next birthday. What would be the distribution method that would allow her to install on her ipad (she lives in another state)? (forgive my complete ignorance on apple products, have always been a PC person)
Developing with Swift requires a Mac running a relatively modern version of OS X. Do you have one of those? If so, follow the instructions to download Xcode, and you're moving. If you make an app and want to get it onto your mother's iPad, it's tricky without using the App Store. If she's using iOS 8 you can add her as a beta tester, but that still means submitting it to Apple for review. If it's generally useful to lots of people, put it on the App Store and you're done!
I literally just watched your Swift 2.0 video an hour ago and recognised your username when it popped up on my screen. That was a great video by the way. Thank you though for the reply, I Googled my question for about half an hour and couldn't find anything even close to what I was looking for. 
I'm glad you liked the video! Don't be afraid to share it with others ;)
thank you for your answer. I'm sad that apple is sort of like the big brother they were supposed to be smashing in that 1984 SB commercial. When I saw your post I was excited as I've been thinking about trying to program again, and maybe I could do something nice for my mother... but even if there was an OS X emulator for my PC, if there wasn't a method to get it to her ipad then what's the point? (Also, didn't I recently read that apple is going to start charging developers $100/mo for even free apps in the store? How are people supposed to distribute things they create?) 
If you go down the Font Awesome route, you might find [FontAwesomeKit](https://github.com/PrideChung/FontAwesomeKit) useful.
I just noticed that the icons are actually png files. I tried to set one as a UIImage and then use it as the image on a UIButton. It didn't show up at all. Did the way to do it change in Swift 2.0 or did I mess something up?
You probably messed something up :) (It hasn't changed.)
Cool application for playgrounds. Playgrounds definitely have huge application for programming education. Though the old playground format with raw HTML and JS support was way more powerful and flexible then the new one with markdown.
I don't think that's possible directly. Maybe you can get it by dividing your sprite into multiple ones that are connected and each one has a separate collision bit mask. EDIT: Probably best to separate your sprite in an image editor
A lot of buttons have styles as well, with icons etc which correspond with OS wide functionality, e.g. There _may_ be a home button. 
These are excellent! Thank you.
I wouldn't call this a "learn to code course" - it's more course notes for teachers.
Actually now you can install the app on devices without paying the 100$, just with a developer account. So if he can get hold of the ipad he can install the app on it. All he needs now is a mac :)
There is a good part in "whats new in swift" from this years WWDC where the presenter takes away elements of the closure one by one and mentions why they can be removed 
How much did you spend all in all. Like buying the dev software and making an online accoumt?
There's a few ways you can do this - the way I'd approach it is to create a function called "resetForm", or something along those lines, and perform all your cleanup there. You can then add this as a target to your clear button, and fire it as part of a successful callback. An example would look something like this (under the assumption you're using UITextFields for data entry): func resetForm() { textField1.text = nil textField2.text = nil textField3.text = nil } If you're using the interface builder, you can hook this function up to as many button outlets' actions as you need. Hope that helps!
Hmm, good point about Xcode 7, I don't know. I think not cause they merged all the accounts already
One thing that's always fun is to create a new alias function, which just takes a closure as its only parameter and you can treat it as a keyword e.g. func dispatch(callback: () -&gt; ()) { dispatch_async(dispatch_get_main_queue(), callback) } dispatch { /* do things */ }
Swift is right here: there's nothing it can see from you or the STL that has the type `(T, Int) → T` *and* the identifier `*`. From the types, you're asking for scalar multiplication to be defined for every type ever! Because `*` isn't defined for heterogenous types either (e.g. Int and Int8), you will have to either drop your generic constraint and make all parameters Int, or you'll have to make every parameter generic and constrain them to `IntegerType`s, which is literally the definition of `*` in the STL. I don't think you need generics to solve this problem. By having types and static verification at all your program is "typesafe". It is not made any more so by being polymorphic.
right so, I understand your point! how are generics any use!? I mean if they can't even accomplish this simple task what can they do!
The minimum cost would be for the developer account. Which is $100 before tax. We also bought a square site for a year. I think we are at around $200-$250. 
Lets say I remove the Int scalar constraint, and move to: func genericMultiplier &lt;T&gt; (number: T, multiplier: T) -&gt; T { return (number*multiplier) } Can I really not have a generic function that multiplies two ints, or floats, or doubles, or whatever, is that not what generics are designed for!?
What you're asking now is for * to be defined for all types. You need a constraint on the generic type for that to work: func genericMultiplier &lt;T: IntegerArithmeticType&gt; (number: T, multiplier: T) -&gt; T { return (number*multiplier) } EDIT: You'd have a lot more success making this generic if you defined your own protocol protocol ScalarMultiplyableType { func scaleBy(Int) -&gt; Self } and used it to constrain the type of input you'd accept in that `genericMultiplier` function extension Int : ScalarMultiplyableType { func scaleBy(s : Int) -&gt; Int { return self * s } } extension Float : ScalarMultiplyableType { func scaleBy(s : Int) -&gt; Float { return self * Float(s) } } /// etc... func genericMultiplier &lt;T : ScalarMultiplyableType&gt; (number: T, multiplier: Int) -&gt; T { return number.scaleBy(multiplier) } 
I would use swift playground and do animations and a simple game. Being able to see a visual change while programming is great for learning. When I started out programming I really enjoyed when I could interact with something on screen. It's exciting and encourages experimentation. Eg I'd like that in blue or Let's make it faster. I taught high schoolers to make flash games for a few summers. They struggled with programming but really took to animation. http://m.youtube.com/watch?v=F9T551Y0mYo https://developer.apple.com/swift/blog/?id=9 I do like the idea of controlling a robot though. My first time programming was in first grade with the LOGO programming language. It had turtle robot that would draw out your program. Telling a robot to draw a square back in 1983 was pretty cool. 
Not without a little effort on your part. See my edit there.
Thanks for the consultant level advice! tip top mate.
You're really not understanding generics. They're not just supposed to let you do anything with anything. They're there to let you do with anything, anything that you're allowed to do. They're type constraints that are way more general than just writing the concrete types. For example, if your function were allowed, this would compile genericMultiply([true, false, false], 2) What would that even do? Multiplying a list of booleans by 2 doesn't make sense. A strong type system is here to help this problem. func genericMultiply &lt;T: IntegerArithmeticType&gt; (number: T, multiplier: T) { return number * multiplier }
Yes I saw that talk and I was very inspired. I can't seem to find his github account though, I can only find other github accounts with similar names. I really want that turtle playground :-O Thanks for the links, I appreciate it :-)
Try these. https://github.com/dimsumthinking http://dimsumthinking.com
Atom or Sublime text is probably as good as you'll get on Linux. Or http://swiftstub.com
Focus on the three basic constructs. Sequence, Selection and repetition and with them you can build anything. When I was first taught programming I was taught to relate it to cooking as programming has a lot similarities. If the kids can understand the three constructs and have a way to test and demonstrate them then they are well on their way of becoming programmers. 
I think I have an idea, I could just buy the same robot that we used at our university and then program the chip to respond to a usb input. All I need to know then is how to make a OS X Swift app communicate via USB. There is seriously not one tutorial to be found on how to do USB communications in Swift...
I don't know how much, but on WWDC they stated that they have made lots of improvements, on debug/release builds and whole-module-optimization. Also the code should compile faster.
Even though you probably won't have Apple's Cocoa implementation, the Objective-C interoperability will probably be included. Maybe it could be tweaked to include C++ interoperability. With that, you'd have access to GNUstep and Qt, or whatever native toolkit you like
I second using Swift to control a game. It has awesome tools for this already with SpriteKit, level editors, playground etc. This is how I got into programming as a kid. I was stunned about how boring programming was when I got to University. I would create a start projects so that kids could focus mainly on moving stuff around. You know take away some of the boring book keeping. Let them focus on e.g. the behaviour of characters in the game. 
If you want to get real cheap you can control a couple of bits over an RS 232 port. I've done so in the past to get an I/O to trigger an action. It is just a matter of using one of the handshaking lines. Of course these days many PC and all Apple products come without RS 232 ports but adapters can be had dirt cheap. If you get lucky it is cheaper than using an Arduino. For simpler projects like launching model rockets or setting off a catapult it is better than buying extra hardware. 
That is really awesome. I am really warming up to Swift. They have done a lot of things right. It is quite a challenge to make something powerful and easy at the same time. I like the idea in swift about introducing features gradually. I can imagine you can teach swift using very few features initially. 
Well there is GNUStep and Cocotron (http://www.cocotron.org) which essentially is about making the Apple GUI stuff available on other platforms. Since this is in objective-c it should be accessible from Swift. A problem with both of these projects is that they have had very little support behind them. If more people contributed they could probably become quite good solutions. But I think nobody was that keen on contributing to something which meant they had to program Objective-C to use it.
http://imgur.com/gallery/ZCPyaaA/new
Totalyl agree with you. When it was announced at WWDC last year, everyone poked fun at the 'println("hello")' slide that showed how concise Swift could be. After all, "print" looks pretty much the same in every language, right? But the real trick is what isn't there. There are no includes. No "main()". No top-level object wrapper. Similarly, when Tim Cook told the Goldman Sachs conference attendees that "you and I could even write an app" with Swift, developers were (appropriately) incredulous. But looking at it from his point of view, a Swift Playground really is revolutionary! Can you imagine him trying to set up an Xcode project in ObjC? All the stuff he'd have to struggle through do before he could even type anything? Being able to open up a Playground get something out of Swift with the first line you type might just end up being Swift's secret weapon.
 &gt;- bindings to a cross-platform GUI library of some kind. That might have a place but I'd be willing to bet that people would prefer a new GUI library written in native Swift. The fact of the matter is that mist of the GUI libraries in use now are very very old, the Gnome and KDE people all are working to with old code bases that don't even support the new features of their native languages. QT still has a lot of QT solutions that could be covered via the C++ STL. &gt;- a good standard/utility library (will probably come bundled with swift 2.0) Well I'm not sure about "good" but I believe I heard Apple saying that they would contribute a standard library also. If such a library provided much of the functionality in C++'s STL then it might attract people outside of Apple. This is one reason why I really hope that Apple submits Swift and its library to an international standards committee of some sort. The reason being the library and Swift itself could evolve such that the concerns of the outside world are meant. This is especially important when it comes to involving users from a wider array of programmers. 
It depends a lot on the nature of your code. iirc expressions like "let arr = [1.0, 2.0, ..., 99.0]" will no longer make the type-checker go exponential in 2.0, for example (edit: just checked in the interpreter, literal arrays of doubles are indeed much faster). I haven't checked in detail though.
This is great! I'm going to check it out. I just decided to learn swift over objective c as I learn ios development. This would surely help me out. :)
Terminology note: "exceptions" is the wrong word. Swift simply calls them "errors" to reflect the fact that they will never transparently unwind any scope, unlike exceptions which are usually defined by their transparent stack unwinding. Also because they are used to handle Cocoa/Objective-C's NSError type. Yes, there's a lot in common between Swift's error handling and Java's checked exceptions (which similarly must declare if the exception can escape any scope so they avoid true transparency). It's arguable that Java's checked exceptions aren't true exceptions but the point is moot: the language's designers get to pick their terminology.
eh honestly, I don't see much of a need. Its a nice language, but there are already very good solutions in place that work great! :)
Code formatting in your post is broken. I also can't understand what's your intention here - you want all checkboxes to be checked when user taps a single one?
Do you need to persist this structure? If yes, then I can suggest using core data for that (i.e. use core data entities for everything).
Here's an idea to avoid some of the robot integration challenges: do it in simulation. Here's a similar sort of thing I did a while back (not using Swift): http://artificial.com/breve.js/ . Look at the Braitenberg demo from the popup -- it's a simulated demo of a light-follower, which is essentially the same problem as a line-follower. It would be a neat little playground project to do this in Swift. As an aside if you're interested in this stuff and haven't already read Braitenberg's classic book "Vehicles", drop everything and read it now :). 
Yeah playground is going to be a big deal. While this sort of interactive environments have existed before nobody has made it has polished as Apple until now and nobody I know of has done it for statically typed languages. There was a some pretty cool playground like environments for Smalltalk back in the day, but that is of course a dynamic language. I think the main issue with xCode and playground at the moment is that while they got all the nice features it is still a bit buggy and unpolished. Once they got all this rock solid and stabilised it is going to be really awesome. With Swift 2.0 I think they really ironed out the last kinks in the language. Well built in concurrency support would have been nice.
You could always just assign a default parameter with the queue. Although having the default queue as the default behaviour would probably be acceptable, even without the parameter. 
If it's right away. Put a break on your viewDidLoad and see where it crashes. 
I would add a breakpoint for exceptions so Xcode shows you the line it crashed on. 
STL = Standard Template Library, by the way, which is for C++.
Yes, what's the need for innovation…
My somewhat limited experience has been that in Swift, where available, shorthand syntax is preferred as long as it doesn't impact readability. In the specific case of a variable called Direction, it should be pretty clear what the type is without specifying, if the surrounding context supports it.
I'm not familiar with the specific book, however, I definitely know from experience that design patterns carry over into Swift. For example, a Singleton in Swift is implemented in almost the exact same way as Java. Of course, some of the keywords are changed, but all the principles are there. Delegation is another concept, and that comes from the idea of protocols (interfaces in Java). So if you know these base concepts/are learning them through a book, they should be easily transferrable to Swift. However, there are some things that Swift has that other languages don't. Optionals are one of these examples. You want to make sure you learn how to use these properly and using for example `if let` and `as!` vs `as?` before you start implementing the design principles in your real code.
I have mixed feelings about this. I've had Xcode's code completion/navigation break on me on numerous occasions to where I couldn't have clicked on .East for example and chosen to navigate to the definition. In that instance, the short hand made my life a little more challenging to find the enum and see other values. I don't think the shorthand is bad, but when the tooling fails you (and for whatever reason mine fails frequently), it can make like difficult. I'll admit that in C#, I would have done the long-hand version just for readability. 
The GoF book is mostly about providing a shared vocabulary for talking about the design of programs. It's pretty broadly applicable. Functional programming patterns usable in Swift probably aren't described by it, but that's fine, it doesn't have to cover everything.
No, you have to return or continue, Swift cannot decide what specifically you want to do in the else case.
If you have some programming experience, and are a "decently good Object Oriented Programmer" then you should try and follow the (free) Stanford iOS Course on iTunes. Also if you haven't already, maybe a quick readthrough of the book *The Swift Programming Language* published by Apple (also free on iTunes) or [here](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/). I don't know of any other good sources, but it seems that through a Google search there seems to be a lot of ok places to start. Like [here](http://blog.teamtreehouse.com/an-absolute-beginners-guide-to-swift), [here](http://www.raywenderlich.com/74438/swift-tutorial-a-quick-start) and [here](https://www.bloc.io/swiftris-build-your-first-ios-game-with-swift). If you seem to be already pretty good with the language itself and are confused about XCode and all that goes with it, try the tips [here](http://www.reddit.com/r/swift/comments/2be9rx/swift_is_easy_learning_ios_development_is_not/) (reddit link). Or just any book, which works for me! Or like for me, buying a book always works, or helps a ton at least. There are tons on Amazon I'm sure. Or torrent one! Good luck! Remember, start small and build up. 
I have implemented TicTacToe, but there must be a bug somewhere, because there is no strategy at all right now -.-
Nope, just 2 "Threads?", I guess that are threads... both of them saying something like dylib crashed.
It's an more or less empty app. It's just a Workspace with cocoapods initialized and two added Pods. 
Edited my post, my App runs completely fine on every simulator provided by XCode, I just can't run it on my device. It's just a simple Workspace with 2 Pods installed and some baisc UI tests.
I used [Treehouse](https://www.teamtreehouse.com/tracks/ios-development-with-swift), you can get a free 1 month trial and the Swift track should only take you that long. [Ray Wenderlich](http://www.raywenderlich.com) also has some good Swift tutorials.
It's preferable to keep your code concise. If someone is looking at a line of code, they already have enough context to know that .DetailDisclosureButton means UITableViewCellAccessoryType.DetailDisclosureButton. The difference is that the latter option is an incredible 51 characters long, which, when you consider that many style guides prefer lines of code to be no longer than 80 characters, is quite a chunk of space on your screen. My Xcode setup uses quite a large font, but there's still enough room for maybe 120 characters per line when I'm running full screen. If I have the option of enums taking up half the space so I can focus on the important stuff, that's definitely preferable. If someone is new to my codebase, I don't think my enums are likely to prove the most challenging thing to understand – are you really using that many? And are they very similarly named? If so, perhaps the long form is for you.
Array in array doesn't seem efficient to me, I'm just simply trying to explain how it works. Wondering if there's better solutions that achieve the same thing. 
Did you try [the new Hacking with Swift introduction](http://www.hackingwithswift.com/read/0/1/how-to-install-xcode-and-create-a-playground)? It goes over all the language concepts in isolation, and might have been what you were looking for. Advance warning: It includes Taylor Swift lyrics.
For the most part I rely on verbosity and clearly named parameters. There's only been a few times where I put what a function does in a comment above it. I do however use #prama mark - name to group functions in the outline dropdown menu thing.
You can't just know Swift. All of Apple's frameworks are written in Obj-C. You need to know Obj-C. That being said, they are so similar that knowing one makes it quite easy to go to the other. The path I took was: Learn C on the Mac / Absolute Beginners Guide to C Learn Objective C on the Mac / Big Nerd Ranch Objective C Big Nerd Ranch iOS / Big Nerd Ranch OS X / Apple's Swift Programming Guide 
Wow, this looks like it will be great to dig into. Thank you for all of your work on this project--and for the code comments! (And sorry you were downvoted on StackOverflow.) This should be fun to play with.
Ya, it's okay, I'm not concerned about downvotes, it's just so that if someone looks for something like this they'll find it there :D
"Jump Bar" is the term you were looking for. :)
You are getting down votes because this is actually not true. Swift is fully interoperable (except where they have explicitly denied access to certain methods as a matter of design) with Cocoa. You don't need to know objc to use Cocoa any more. This is one of the *major* selling points for Swift.
Alternative for offline sync is YapDatabase w/ CloudKit Extension: https://github.com/yapstudios/YapDatabase/wiki/YapDatabaseCloudKit This has been working really well for me.
For crusty old Java programmers, protocols are interfaces.
make sure your running the app on the iOS9 simulator or a iOS9 device as the CGImage property is new in iOS9, or if you are on OSX the property is available only if you are running 10.11 see for iOS9 https://developer.apple.com/library/prerelease/ios/documentation/SpriteKit/Reference/SKTexture_Ref/index.html#//apple_ref/occ/instp/SKTexture/CGImage and for OSX 10.11 https://developer.apple.com/library/prerelease/mac/documentation/SpriteKit/Reference/SKTexture_Ref/index.html#//apple_ref/occ/cl/SKTexture 
It's all protocol oriented object programming to me.
to those of us versed in OO this simple protocol pattern is not the best way to spend 40 minutes to learn something
I think this can be a valuable talk for those people who think Swift is just a rehash of C#. I think this shows how much more powerful protocols in Swift are than interfaces and Java and C#. Although to be fair some of this power goes back to Objective-C. It is worth remembering that some of the advantages of Swift is advantages that Objective-C already had over Java/C# type of languages.
Some of it was of course just rehash of regular OOP patterns, but I think what is interesting is how protocols in swift makes it much easier to achieve OOP style design which hasn't really been possible in most statically typed OO languages. Many of these things have been possible in Smalltalk, Ruby and Python but not in Java, C# and C++ e.g. Providing default implementations for a protocol isn't something I know of being done in any other mainstream OOP language.
Looks good so far, I see you use Alamofire, have you used [SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON) in conjunction with it?
That is awesome. The best thing about CKSIncrementalStore is that you can reuse your CoreData knowledge and power your apps with it while leaving all the cloudkit hassle to it. 
Treehouse is incredible. The two instructors they have teaching Swift explain everything very well and give great examples to help you understand what everything is/does.
I get it now. You're like the anti-Crusty. You've seen this before, so it's not worth revisiting. I don't mean to be a dick, but how about adding to the community instead of tearing it down? Tell us some other cool applications that those of you well versed in OO take for granted. Give something original back to us instead of being a sideline complainer.
Great, bookmarked for the reference, thanks!
I was trying to help provide a translation of similar concepts that a subset of people who might be interested could relate to. Not start a language pissing war.
Didn't know that, from what version of Xcode did they start using Swift 2?
There's a setting in the compass app to toggle true vs magnetic. I think it's off by default which would be different from your code (newHeading.trueHeading).
I didn't see it as any sort of pissing war; I thought it was a rather humorous response =)
I don't think he was complaining. I found his comment helpful. The video has some helpful information, but there are many other videos that I found more helpful. There is a wide range of people in /r/swift, so OP's advice applicable for everyone.
It's not what he said so much as the way he said it &gt;tl;dw? He didn't watch it. Fair enough. &gt; thanks, but i watched it and feel it wasn't really that interesting. I would refer you to this: http://blog.metaobject.com/2015/06/protocol-oriented-programming-is-object.html[1] Oh he did watch it. Okay I guess he could have watched it between those posts, but... I doubt it. It looks like his first post was trolling. His goal was to post his "Your video sucks" blog post and then &gt; to those of us versed in OO this simple protocol pattern is not the best way to spend 40 minutes to learn something Talk about how real programmers already know this stuff. He could have saved a lot of time and effort by just pointing out that the techniques are grounded in OO and linking the article. Or better yet, extending on the information in the video with his extensive OO knowledge.
It means that this parameter shouldn't be nil but its technically possible. It doesn't actually try to unwrap the optional on function call, but rather when you use it. I think implicitly umwrapped optionals as function parameters don't actually make a lot of sense. I'm not on my Mac rn, but maybe it can be used like this: func prinIt(str: String!) { print(str) } var optString : String? = nil // Do some other stuff if optString = nil { optString = "lel" } printIt(optString) Does this work? 
The official Swift compiler will be going Open Source soon, so it will be available everywhere. In the meantime, some very industrious people have come up with this: http://elementscompiler.com/elements/silver/ 
I am using UIStackviews. Hence needed iOS9 and xcode7-beta
*viewDidLoad* is called when the NIB finished loading. At this time the view is not visible on screen. *viewDidAppear* is called when the view is visible on screen.
Could you post the current code you have? It's tricky to work out what your intention is without an example of what you are doing now. It sounds like perhaps the presenting view controller should be dismissing the children. 
I didn't watch it and asked for a tl;dw and one was not forthcoming, so I did watch it, and it was not interesting, then I made that post. It shouldn't be hard to sync those events up if you take a look at the timeline.
I think you're missing the point. One of the biggest benefits is that it's the same language on all platforms. Node.js has a similar benefit. We aren't saying that swift will out-perform everything else... it's just that there are some very nice benefits from keeping it all swift.
Sure. You waited some reasonable time for someone to explain the video to you. Then you did watch the fourty-five minute video, googled about it, found a critical blog post, then came back to link the blog post. In about an hour and a half. I'm not calling you a liar, but I don't believe you. But, that's beside the point. Even If I did believe you, nothing you did was constructive. I stand by my request that you do something positive instead of trying to shit all over something that will almost certainly help the majority of the people who watch it.
Got it, thanks! 
Away from my computer right now. As soon as i can i'll have a look see. 
Great presenter. Does anyone else think he actually IS Crusty? ;)
Haha thanks, I'll try with a more descriptive answer. It has been downvoted because I didn't actually gave the answer on stackOverflow but instead posted a link to the answer. I don't really like that rule but it kinda makes sense
Nice! I think I prefer the ` - Parameter` syntax to `:param:`.
Heh, on one of the slides, it says "Don't call him Jerome," this may be a hint. 
I've had good success with [ios-charts](https://github.com/danielgindi/ios-charts)
Another good note is that viewDidLoad is called the first time the UIViewController's view property is accessed, so it could be called before the view is even presented. 
Any tutorial on how to use iOS charts ??
Thank you guys for your replies.......But i finally got some video tutorial which helped me with my problem https://www.youtube.com/watch?v=hMdMg3mcSCc
Really.
Very cool! I like it
I'm happy you do :-)
First, value will be correct '1' for true. Then, at the end of the method, at last closing bracket, value will change to '110' and it'll read as false. I forgot to post my viewDidLoad to show thst CBCentralManager.delegate = self. Will edit in a few. 
Thanks, I used unwind and it worked. But if I use unwind segue to go back to the view where it's three views ahead, would it "dismiss" the three views? in other words, would it remove the three views from top of the stack?
Why?
You don't get to spend an hour fomenting hatred and then wash it all away with an Emily Latella bit.
Just updated our repo with Swift 1.1 vs 1.2 vs 2.0 performance unit tests: https://github.com/vsco/swift-benchmarks
[YouTube link](https://www.youtube.com/watch?v=g2LwFZatfTI)
Yes. Its like calling dismissVC on those two. If you don't want to dismiss and keep them in memory, just use push but careful of memory leak
I hope to god I never have to work on your code. 
so finally got around to watching this and here is my take... 1 - its great that apple is finally promoting best practices. If they would start to do the same for MVVM that would be great. I was reading a tutorial the other day that was explaining MVC and it said "...the C in MVC stands for controller; this is where all of your business logic should reside." Yeah - seriously this guy is teaching newbies how to build Massive View Controllers. 2 - The speaker is presenting "protocol oriented programming" as if its some awesome methodology that apple invented for Swift. I guess I shouldn't be too surprised since apple does this all the time when presenting new iOS features that have been present on other mobile OS's for years. But seriously guys, protocols are interfaces. Yes there are some slight differences between a Swift protocol and a .Net/Java interface (i.e. providing a default implementation for a protocol) but they are practically the same thing and designing your code architecture to take advantage of abstraction is nothing new. There is a book titled "The Complete Reference - Visual Basic.Net" by Jeffrey Shapiro that was published in 2002 that teaches these same concepts and is where I first learned "interface oriented programming" - we simply referred to it as "coding by interface". So this is a minor point but it just irks me when Apple takes on the "look at what we invented that's never been done before" attitude. 3 - I take issue with the fact of the speaker showing an older gentleman and labeling him as Crusty and ancient in his methodologies. Yes I get that in the end Crusty was vindicated but it still leaves an initial impression in many young coders that older programmers are somehow out of touch and can't keep up (Zuckerburg stated this flat out in an interview he gave not too long ago - apparently he isn't aware of age discrimination and the flat out absurdity of the statement). In my experience I've found that the arguments made by "Crusty" are more typically made by a lot of today's JavaScript programmers (young and old). You wouldn't believe the level of resistance many had to ES6 adopting OO principles. Especially if they learned to code on traditional JS and don't have experience in another language. Since this is a swift related talk, I'm guessing that maybe he was attempting to characterize experienced Obj-C programmers that are reluctant to use OO because I seriously doubt that there are any .Net or Java coders (young or old) that don't readily embrace OO. 4 - The speaker forgot to mention the very important guideline of when to use base classes vs protocols - when you need to provide an expected method signature set to unrelated classes use a protocol. If you want to provide a signature set that should only apply to a group of related types then use a base class (or you could use a constraint if you run into the multiple-inheritance problem). Additionally (as suggested in the video) create a protocol/interface for your classes when you want to provide a level of abstraction between a classes signature and its implementation (which is useful for things like creating a test or fakes layer i.e. Bob is not yet thru coding the DataServices layer so Jim makes a FakesDataServices layer that implements the DataServicesProtocol and the view model layer only accepts protocol parameter variables - that way the view model doesn't know who is sending it data - it just knows the expected public signature). 5 - I wish Apple would promote a coding standard to easily identify protocols vs classes. At one point the speaker highlights the Renderer protocol in the Drawable class signature and says "see Renderer is a protocol not a class". My point being is see how he had to point out to us, the audience, that it was a protocol not a class since it isn't immediately obvious. In .Net and Java its a pretty universally accepted coding standard that interfaces are prefixed with a captial "I". So in .Net the interface would be named IRenderer which instantly provides visual feedback to the person reading the code that this is an interface not a class. Maybe protocol types should be suffixed i.e. "RendererProtocol". Also there should be a standard to eliminate the ambiguity between allowing the 2 terms "protocol" and "delegate" from being used interchangeably. Maybe "protocol" is used to identify the type and "delegate" is used when naming protocol variables i.e. func someFunc(rendererDelegate : RenderProtocol) 
Ah thanks, that seems to be it
Thanks, but it is encrypted using FairPlay!
Oh, well then I can't help you, sorry
You'd need to replace all uses of UIKit, Foundation, CG, etc... with their Android equivalents.
https://gist.github.com/jhays/4fdb886620464ae03b38 Parallax and shading effects for UIKit
If you go to [Cocoa Controls](https://www.cocoacontrols.com/) you can find some really cool fancy UI things you like with all the code open sourced. These aren't really tutorials but you can definitely dig into something you're interested in and see how it's made. Obviously the code may not be pretty and/or the proper way to do things but it can give you at least a starting point in making your own fancy stuff.
yeah, i am doing it in the app (horizontal fullscreen collectionView) - view to the contentView - controller as childController to the collectionView there are some issues you should be aware of... like when reusing those cells (and controllers) - viewWill/DidAppear will not get called, autolayout and stuff i'd suggest not doing so, ill be refactoring that later 
Thanks a lot! I will try that :)
Thanks, that's a glod idea, didn't think of it. I'll try it out :)
Not at expert in Swift at all, but a couple thing you could try are setting the autoresizesSubviews to true, or possibly recalculating the cellWidth. You might want to println(screenWidth) when the search bar is brought into focus just to see if it has changed since the initial calculation. I'll try it in XCode tomorrow if you're still having trouble.
I'm down for this. I like Facebook groups although not sure if they make great references later? i.e. maybe that + a wiki would be good?
I'd be down. Why not a sub Reddit instead of a fb group?
Honestly, the comment that you have added doesn't really tell us any more than the function signature does. At least the param and returns part. I think the main comment stating what the function does is good, but the other part adds nothing to the code. You might want to use the param and returns space to expand on what the method might be used for.
Unfortunately /r/swift is already taken. 
I'm in! I've been trying to find a good group of Swift mentors and mentees to learn with. I've been doing a Udemy course, but everything seems to come to full stop when I run into something that doesn't make sense. I'm happy to see /u/twostraws in here! I just came across http://www.hackingwithswift.com/ the other day and it looks great! I was thinking about bailing on my Udemy course and just trying this instead. 
yes pls. Maybe slack channel?
Is there a Swift HTTP client?
"feature", client implies an application 
Some kind of HAML-with-swift kind of thing would be cool..
How's that going? Would love to hear from someone taking it. I started doing the Stanford course and it was (in my opinion) terrible for begginers. 
Now you tell me! Really though I found out the hard way myself. Fortunately it has been pretty smooth just updating the project to use XCode 7. SSL stuff in Info.plist was the only major change. 
Thanks I will definitely subscribe to that!
Will be glad to have you!
I've been hoping for ports of GMP and Clojure's Persistent Data Structures (the latter would be *much* more elegant in Swift than Java).
That would be great!
I wish I could be so lucky. When I let Xcode 7 convert my code in the app I'm currently working on, I ended up with like five errors in AppleDelegate. I just restored the previous version of my program and went back to Xcode 6.
There are not really any web frameworks, nor any libraries for scientific computing, statistics, machine learning etc. I also miss a open source cryptography library. Apple does provide a pretty good one, but it is missing a bunch of stuff. E.g. it would have been nice to have access to scrypt and bcrypt. I don't think there is any software for making compilers either. Something like parsec, yacc or lex.
numpy for swift, use the gpu for math
There is [Surge](https://github.com/mattt/Surge) which doesn't use GPU but specialized CPU instructions made for vector operations. I tested it once and I believe it was about 10-20 times faster than with normal CPU. Surge uses Accelerate, which you can totally use in Swift, it's just a little weird with the pointers and the method names
I made a struct which lets you calculate with Intervals if anyones interested. Works accurately with +-/*, inclusive/exclusive borders. Example: 1 / [-1, 0.5[ = ]-inf, -1] u ]2, inf[.
Reflection. You can only get values of properties via reflection, no way to set them.
Oh my goodness, proper generators would be awesome. If there's anything in the standard library that feels a little underfed it's the lazily-evaluated sequences, and trying to add my own in would be *so much* easier if I could just use `yield`. That said, I'm not sure Swift is able to stop evaluating code mid-block (and I think it may be something it's fundamentally not able to do - I remember trying to hack in a yield keyword using GCD and `dispatch_suspend`, but [as it says in the documentation](https://developer.apple.com/library/prerelease/mac/documentation/Performance/Reference/GCD_libdispatch_Ref/index.html#//apple_ref/c/func/dispatch_suspend), it can't suspend mid-block). In a similar vein, since recursive enums should be available in the next beta, I'd love to see some linked list structures in the standard library. Maybe along with some itertools goodness.
GeneratorType isn't technically a generator, I don't think. (at least not in the same sense as generators in Python) Basically, generators in other languages usually refer to something that can be used with the `yield` keyword. So, if you wanted to make a generator of 1...n: generator rangeGenerator(n: Int) -&gt; Generator&lt;Int&gt; { for i in 0..&lt;n { yield n } } Obviously a contrived example, but to manage the same thing in current Swift you've got to do something like: func rangeGenerator(n: Int) -&gt; AnyGenerator&lt;Int&gt; { var i = -1 return anyGenerator { return ++i &lt; n ? i : nil } } Those two examples look about the same difficulty, but if you look at what I had to do in each, there are some big issues with the second: * I had to have my first value be the one just before the first value the generator returns. This is *really common* when you've got to manage your own state for generators. * The entire closure for the generator has to be run before it can return the next value. This means that, for longer, complicated generators, you often get generators that enter a switch statement every time the next value is called, and you've got some signalling variable to signal how many times the closure itself has been called. The switch statement then switches on that signalling variable.
You'd think this is so common Apple would have included it as a property in their default segue types. "Oh you want to show a new view? Sure. From what direction?" 
C# have generators, implemented with `yield` keyword. And it's implemented internally as a state machine generated by compiler. I can't see how the fact that Swift uses native call stack versus, say, .NET managed stack (which is relatively simple and doesn't have magic "exit and save the state for re-entry" commands) changes anything. I'm not saying you're wrong, just can't see the difference. See: [Behind the scenes of the c# yield keyword](https://startbigthinksmall.wordpress.com/2008/06/09/behind-the-scenes-of-the-c-yield-keyword/), and [Iterator block implementation details: auto-generated state machines](http://csharpindepth.com/articles/chapter6/iteratorblockimplementation.aspx) Having a proper generator can make miracle for performance in chained map().filter().etc() calls iterating over one sequence instead of making a new container for each function call. Edit: [here is a disassembled C# function that uses `yield`](http://www.sirchristian.net/blog/2012/07/12/how-yield-c-actually-works/). No funny tricks, just a boring compiler-generated inner class that implements a state machine.
Yeah, proper reflection is a number two on my list. But I think we'll get that eventually.
Not by Apple. It's featured on iTunes U and endorsed by Apple but it's written by Yong Bakos. 
Will post, but first I have to do some documenting and testing and stuff. I'll reply when I'm done
Thanks, looking forward to it. 
I use [size classes](https://developer.apple.com/library/ios/recipes/xcode_help-IB_adaptive_sizes/chapters/AboutAdaptiveSizeDesign.html) to provide an adaptive UI. Size classes allow you roughly distinguish between small and large spaces, so the UI layout which is used on an iPad may be used on an iPhone 6+ as well.
Wow, I didn't know about this, thanks
PS: For what it's worth, it doesn't sound like your training course is that good. Have you considered trying an alternative?
A link for the lazy who (like me) though op wanted to make a new app that gives new masturbating "hand positions" http://en.wikipedia.org/wiki/Reiki
Even I would like to know how to do that!
[argo](https://github.com/thoughtbot/Argo) for JSON parsing is good library. There is also [Swiftz](https://github.com/typelift/swiftz) which has functional JSON handling, but a lot more as well. 
Thanks! And true that! It was a huge pain in the butt filling out the description for the app, preparing the screenshots, etc. the whole process was definitely not straight forward to say the least. Apple has a bunch of pages to explain it, but it takes a lot of googling to go through it. I'm surprised they haven't created a more streamlined process. 
If I weren't doing reiki, I would have thought of it that way too!
I had the same general type of issues. I found those delegate errors pretty easy to fix. In most cases (that I've seen) they change something small like a parameter name, or make an option an optional. I comment out the declaration of the function then right above it use autocomplete to type it again. It's easy to spot the differences when they are side by side. They changed observeValueForKeyPath as well. 
I was really hoping that at this year's WWDC they would announce that they've rewritten all of the core libraries for Swift. The NS libraries are still heavily rooted in ObjC, which can range anywhere from minor inconvenience to ridiculously annoying, particularly when methods are returning or requiring NSDictionaries or whatever. Toll-free bridging is great and all, but it's slow as hell, and jumping back and forth between two default implementations of a dictionary or string is unbelievably clumsy. Yeah, I can use String for almost everything, except that it's lacking a ton of methods, so then I have to make my String into an NSString, perform some basic operation, then bridge back to a String. Really weak stuff. 
Great, thanks for the pointer. I guess I didn't realize how much could be handled by size classes. 
Would you mind showing an example? 
task.resume() doesn't wait for a response. When a response is received it calls the callback for the task. This could be immediately, it could be seconds or years later(exaggerating of course, it's unlikely but "possible"). So if your program exits immediately after task.resume() the program is finished, no more callback function. Using the loop buys time for the response to come and the callback to be called.
viewDidUnload stopped being a thing in iOS 6; it's not called any more.
I have "iOS 8 Programming Fundamentals with Swift" and I am on Chapter 2 learning about functions. So far I really enjoy it. It seems to be pretty in-depth and it feels like I can use it as a reference later on because he breaks down everything into parts with examples. I've read a ton of programming books in general and I have a good feeling about this one so far.
Everyone is entitled to their opinion, but I can't take this guy seriously. He didn't bother to understand why Objective C is so named before calling it a horrible name for a programming language. Don't waste your time watching this, there's no worthwhile content. 
So i am new to Swift and ios, but wouldnt this only return one picker each and every time? If A is true, return 2 END. I am curious on how to utilize multiple picker views from the same view. So this logic doesnt seem like it would work... If I want to return both 1 and 2, but for different pickers, is there a way to do this? Im fairly sure a function can only return 1 value, so how is it possible to return ONE value for EACH picker? Perhaps I need to make a struct for multiple values? Any help/insight into this issue would be appreciated.
Made a post: http://www.reddit.com/r/swift/comments/3b4ck0/accurate_and_flexible_multiinterval_type_in_swift/
Can I ask, start to finish, how long did it take you? Also, do you have the tutorial you used for iAds?
Anyone who needs advice on what programming languages to learn next seems like they are in it for the wrong reasons.
Should be `class ConformingClass : BaseClass, SomeProtocol {`
My example is a bit incomplete, now that I look at it. The situation is more like class ConformingClassA: BaseClass, SomeProtocol { *SomeProtocol Implementation* } class ConformingClassB: BaseClass, SomeProtocol { *SomeProtocol Implementation* } I have two conforming classes, both subclassing the common base class and implementing the protocol. But they have different implementations for the protocol. I want to be able to assign any of them to a single variable that declares both the base class and the protocol that it must be implementing. Just like you do in Obj-C with BaseClass&lt;SomeProtocol&gt; *someVar; Anyway, apparently it is not a language feature (yet?) My workaround is to declare a variable in the protocol of type of the base class and implement it as a computed property that just returns self. Then I declare the variable as just SomeProtocol and access the base class functionality via the property. Messy, but IMO nicer than casting. protocol SomeProtocol { var base: BaseClass { get } *whatever methods* } class ConformingClassA: BaseClass, SomeProtocol { var base: BaseClass { get { return self } } *whatever methods* } class SomeClass { var foo: SomeProtocol func bar() { foo.base.baseClassMethod() } }
You should do it like this: class ConformingClass: BaseClass, SomeProtocol { *SomeProtocol Implementation* } class A : ConformingClass { ... } class B : ConformingClass { ... } Then both your classes are of type `ConformingClass`
More of an Xcode complaint, I want to be able to draw and write notes on a storyboard.
SomeProtocol implementation differs in the subclasses, thats the whole reason of having two (or more) of them. I could do that, implement the protocol methods as stubs in the ConformingClass and then override them in A and B
Oh I see, sorry. Yeah that's apparently not possible in Swift just yet. You're looking for abstract protocol methods. See also [here](http://stackoverflow.com/questions/25825988/swift-type-must-implement-protocol-and-be-a-subclass-of-given-class)
But I just found a fairly good workaround. Apparently the Swift developers have faces this problem as well. They solved it by making a class protocol, which defines the methods that have to be implemented in a class to work. Some protocols in their frameworks extend the `NSObjectProtocol` which means that you basically have to subclass `NSObject` for it to work. Here is an example of how it would look like in your case: protocol BaseClassProtocol { func baseClassMethod() -&gt; Int } class BaseClass : BaseClassProtocol { func baseClassMethod() -&gt; Int { return 0 } } protocol SomeProtocol : BaseClassProtocol { func specificMethod() -&gt; Double } class A : BaseClass, SomeProtocol { func specificMethod() -&gt; Double { return 0.0 } } class B : BaseClass, SomeProtocol { func specificMethod() -&gt; Double { return 1.0 } } var instance : SomeProtocol = A()
What's the app called?
Very cool site!!
Would getting the tr element and then calling [trElement childrenWithTagName: @"td"]; be what your looking for? That should get all columns of a single row into an array. edit: In Swift (woops): // I think that's what it'll look like in swift trElement.childrenWithTagName("td") as! [TFHppleElement] 
I finished IOS 8 Programming Fundamentals yesterday and I enjoyed it. I have a background in programming, but am *very* rusty in OS X/IOS and wanted to build my chops in Swift with IOS. I just started Programming IOS 8 today. I must say...I really really began to glaze over in the chapter (1 or 2) about Views. I mean, I understand they are important, but I think he lost his vibe here or something trying to convey far too much static information at once. It was definitely a slog (although bits were very interesting, I did find myself having to take frequent breaks so I could refocus my attention). I'll start on the next chapter, Drawing, tomorrow. Being a "more active" topic, I hope it will be more interesting/engaging.
An ability to turn enums into strings and enum strings back to their equivalent enum without having to write the boilerplate functions to do so. This is based on their names in code, not their string values, since you don't want all enums to be string based. It would be very useful for logging and so on. 
Swift 2.0 *has* error handling. do { try someFuncThatThrows() } catch { handleError() }
I'd like some way of getting static properties via reflection.
&gt; I can't for the life of my figure out why "protected" is still not an available keyword for scoping. &gt; Maybe that helps: https://developer.apple.com/swift/blog/?id=11 
or write your own string extensions and use those :-p
Shhh its op's life let him believe in what ever
Except when you want to open it on Android or Linux device with no iBooks. Not everyone uses Apple. PDF is a standard.
Thanks. Post felt real clean. I was like "this guy isn't trying to sell me something, he genuinely wants to share information with people" :)
all of the XCode issues you mentioned are the reasons I ultimately decided to go with Xamarin. I was originally using Swift on my home projects but once I had to start using Xamarin for work and saw how stable it was I decided to ditch XCode for good. I really like Swift and continue to follow its path but until Apple deals with the tooling issues I just can't justify the poor XCode experience when there is a more than adequate native development alternative such as Xamarin. And C# is very mature and it is soooo nice being able to use LINQ, async/await and also take advantage of extremely simplified JSON serialization/deserialization. I sincerely hope that Apple will deal with the IDE issues but I've read so many rants by Obj-C developers on how horrible XCode 4 and 5 was that I can't honestly put any faith in that hope. Earlier versions of Xamarin were painful also but there has been a marked increase in stability and user experience over the last 3 years.
&gt; I've read so many rants by Obj-C developers on how horrible XCode 4 and 5 Hey man, Xcode 3 didn't even have *tabs.* If you wanted to be able to move between multiple files, you had to open new windows for each one. What's crazy to me is how many developers I've worked with that don't take advantage of *any* efficiency features Xcode offers you. No tabs, no multi-windows or multi-pane, no hotkeys. I've seen developers working in two files that, each time they want to switch, pck up the mouse, click the little grid icon, then find the file in this essentially unordered list of files. I've seen people searching through folders in the organizer pane to find a file rather than cmd-shift-o opening. People who don't know about alt- and ctrl-arrow key movement and selection, so they pick up the mouse to move the cursor a couple lines away. No code snippets, no global find-replace, no hotkeys for build/test/profile... *nothing*. So I guess for those types, which seem to be exceptionally common, Xcode is just fine?
What are the limits on your project? Like, are you allowed to use any of the myriad of external tools out there as kind of a halfway point? I wish I had a direct answer to your request for a tutorial, but I might have some suggestions that could point you in the right direction: First, you could use the Amazon Web Service (AWS) S3 Bucket as a sort of halfway point between devices. Then, you'd have your android device and mac syncing to that bucket, just like Dropbox (I built a very basic dropbox clone just for a practice project, using this exact principle.) Another option, would be you could build a Java application for your mac and a native android app that uses dropbox's API. This might be the easiest way of getting started, since you won't have to worry about things like encryption and properly transferring files. Like I said, I'm not sure how much you want, or have, to do in regards to building it from scratch, but if you want to get this done ASAP, it would be hard to go wrong with using dropbox, and every good programmer needs to know how to utilize APIs, so its a good skill to practice as well. https://www.dropbox.com/developers/core/start/java https://www.dropbox.com/developers/core/start/android As for tutorials, I don't know of one off the top of my head that would be able to take you from knowing nothing in Swift to being able to build an app like this, at least in a short amount of time. I'd recommend you stick with your experience in Java, since android is based on Java, and you can run a java app on OSX without any issues. 
That looks perfect from what I've looked at. Thanks!
Saved this post as I am definitely coming back. I've been hacking my way around iOS for about 2 weeks now and will definitely check out your tutorials!
Oh – I like this idea! Let's see what others say, but this should definitely be on the list, I think.
Are you using AutoLayout to set the starting size of the button? Changeling the frame will have no effect if AutoLayout is being used.
So, I should pay $20 for a reformatted version of the official documentation that's I already have access to for free?
Have a look [here](https://en.wikipedia.org/wiki/Modulo_operation)
I agree, if OP needed access to documentation of 150 programming languages/systems. But, that wasn't OP's question 😆
Yeah, I was using AutoLayout. But I took it completely off the button and tried to recreate the button's frame in the ViewController and it still didn't work. Any ideas?
If you include .validate() you'll get an error in your response handler. If your code looks like this: Alamofire.request(.GET, "http://httpbin.org/get", parameters: ["foo": "bar"]) .validate(statusCode: 200..&lt;300) .validate(contentType: ["application/json"]) .response { (_, _, _, error) in println(error) } Then you'll get an error in .response { (_, _, _, error) in println(error) }
I think it needs classes as labels instead of homework/ exams/notes It should go like Biology 101/Calculus/Etc And it should have a calendar view. Nobody really writes all the stuff in one tab and one note is better for note taking. 
Oh! Did you set the translatesAutoresizingMaskIntoConstraints property on your button to Nope?
Sure, the content is the "same", but it saves me a little time and is often more convenient. When it's not, I still use the Xcode docs. So, that's worth $20 to me over a few years of use (so far).
Good app, you should check out an app called myHomework. I really like your email function.
Thank you for your feedback. I will greatly consider your grouping strategy for the assignments and exams. I didn't consider that strategy at all, very thoughtful. Thank you so much. I'll experiment with that and test it out, and it might just show up in a major update. 
Haha it's not my app! Just another app that I use for my school work!
lol, sorry about that. Thank you for showing me the app, I appreciate it. I have done some research on competition for a couple of weeks, this one went off my radar. I like to gain inspiration and implement new ideas. Any inspiration, in my view, is a gift. I'll be improving Studious to better fit the needs of students. The app includes a little mail icon at the top on the dashboard, you can send me feedback (if you setup your mail account on your iPhone) any time and I will try to implement it in the app. I'm striving to update the app frequently in order to help make the lives of students easier. :)
Done - just created!
I tried putting it in the button itself, in the animateWithDuration function, and in the viewDidLoad method (all at different runs, of course). No such luck. :/ And I can't find any resources/tutorials online to help either. Man...
panels is an optional which gets a default value of nil. You really need to do two things, add an empty array as panels default value and add a question mark for optional chaining when calling append. Appending a whole array is fine since panels is an array of arrays. var panels: [[Double]]? = [] for elements in HealthChecker { if elements &gt; 5 { panels?.append([self.health, self.sex, self.mood, Double(self.death)]) } } 
I put a bare-minimum example up on Github for you: https://github.com/jonzhan/UIButtonResizeExample I used autolayout animations instead of frames because that'll probably be a better habit in the long run. Let me know if you have any questions! :)
Did you have previous iOS development experience? I dont have iOS background. Only other programming language background. I didn't have any problem with Part 1 Language part of the book, but I'm having a difficult time with the Part 2 of his book... Overall though, a lot of information seems to be written, but his writings are bit verbose...
[Hacking with Swift](http://www.hackingwithswift.com) is not for everyone. In fact, in the introduction that's placed at the start of every chapter, it says, "What I have found time and time again is that any tutorial, no matter how carefully written or what audience it's aimed at, will fail to fit the needs of many possible readers." The downsides to Hacking with Swift as I see them: * I try to teach as part of a project. If you're looking for a quick answer to a question, you won't find it in HWS because I try to teach everything in context. * I cover very few advanced language features. If you want to work with generics or overload operators, for example, this is not covered. * I teach incrementally, trying to produce a smooth learning curve. This means you learn a few new things every project, and can't easily skip ahead. * I have very few screenshots. This was originally because I planned to release the entire thing using Kindle Direct Publishing, where screenshots are expensive. It would take quite a lot of time to go back and add screenshots now, and I'm more interested in writing new content. I wonder if I could crowd-source this… * There's no option to remove the adverts. The adverts generate remarkably low income, but do at least pay for the entire cost of running the site so that I don't have to worry about it. I don't have a subscriber-only area where extra things are delivered. 
I don't see a reason why panels needs to be optional at all. Change it to this: var panels = [[Double]]() Then go ahead and add arrays as normal. You can then return an empty or an array filled with items, depending on the results of your loop. If you desperately want to return an optional, just do a count on the array and return nil if the count is 0. One other small thing: it looks like you're returning very specific data. Have you considered returning an array of dictionaries instead, with the keys being "health", "sex", "mood", etc?
Whoa I'm not gonna use your tutorials at all. Too many downsides. (jking) Thanks for the comment. The downsides are not downsides to me at all. Your descriptions are describing a tutorial that I was hoping to find :D
Not really trying to beg for a free app here, but when I first released my app (High School Debate Timer), I dropped a whole bunch of free codes on the debate subreddits and some other debate websites (like Cross-X.com). I think a big part of getting exposure for your app is not necessarily just linking people to it, but giving people easy access to it. And if your app is high quality (and I'm assuming it is), then people who get it for free will tell other people about it, who will pay. So in that sense, giving out free codes is worth it.
Is there something particular about SpriteKit I didn't already cover? Projects 11, 14, 17, 20, 23, 26 and 29 were all on SpriteKit, so I thought I did a pretty comprehensive job.
Second this! There's currently a lack of tutorials in general with regards to tying up with online services
This is super helpful, thank you. Sorry for the late reply, I told myself that I would look at the comments here when I worked on Xcode again. Loved the last line, haha.
This is my favourite post about swift new capabilities... By far !
To be honest, I actually used your tutorial (Hacking with Swift right?) first, and I didn't like it, which made me switch to Paul Solt's. The reason why I didn't like yours was because I kept encountering XCode errors typing exactly what you did. That said, I'm encountering the same issues with Paul's, except now I'm not naive enough to quit after five minutes (because it's always something wrong on my side), so I would be willing to give yours a try again.
Thank you! This is really helpful.
Holy shit. Just when I was about to give up on adding that effect after 48 hours with no luck, you, my guardian angel, showed me the way. I love you. Have some gold for filling up my motivational fuel tank. Post updated with final code for anyone looking for the answer to my problem.
I definitely agree with you Comrod, can you give me some ideas of how to give away promo codes? This is my first time dealing with these codes. I'm not quite sure how to wisely use the 100 promo code limit. I'm pretty sure a few should be used for app reviewers. I hope to hear from you soon. 
The app stores analytics system hasn't updated quite yet, I'll report back when it does. As a developer, I'm not very good at marketing my products. I'll be picking up some books to read on marketing, but in the meanwhile, feel free to share any strategies you are aware of. :)
Every time you update your app, the promo code limit resets, so don't worry too much about the number. I distributed around 10 promo codes in each location (individual subreddit, individual website).
Mike Ash always does excellent work.
I should also clarify that your question was a bit vague -- I made the assumption that by saying &gt; ParseJson is the method, to parse. However, it doesn't work.. I can't load the Json data.. that was because you weren't getting to the actual ParseJson method call. If you're getting to that call then you've got another issue. Be mindful of the JSON contained in "index": "index":[{"id":"2","farbe":"gruen.jpg", ... The contents of json["index"] will return an array and then inside that array, it's elements are represented as tuples -- so be aware that unravelling this particular payload is a tiny bit tricky. 
I'll put it to you this way -- I've gone through very expensive Swift training (corporate training is a big money business and it always shocks me) and the contents of this very expensive training have been almost identical to what is available for free on Hacking with Swift. I would even go so far as to say I've seen, in some cases, more detail on HwS than in my other training. I'm not saying that means HwS is for everyone (as /u/twostraws mentions) but my intent in making that comparison is to say that I do believe HwS offers good value and does cover a lot of ground for someone who is looking to get their head in the game. 
It's good! building small apps and learning through making stuff. I doubt it will get me near proficient but it has made me understand how it is done. I'm doing the Swift course by Rob Percival
For scalability, you have to use your own server (either your own machine or buy one) and a web service. I'm 99% sure that imgur wouldn't allow someones app to upload pictures privately just for it's own use (maybe if you pay though). Btw, how did you make that users can connect to each other without a web service? Oh EDIT: There's of course iCloud! iCloud has got private AND public data storage. Private storage is private to the user and noone else can access it. But you can use the public part, which can be accessed by every instance of your app. (Of course you need the paid developer account for iCloud)
I think you might need to add more detail – how are you playing sounds? If you're using something like AVAudioPlayer you can just tell it to stop. If you're using SpriteKit, you might need to upgrade to Xcode 7 to get iOS 9's new SKAudioNode functionality.
You could try Parse. Even with no experience it's pretty easy pick up and learn. It's probably worth looking into.
Awesome. This looks something I can really learn from. I have one question. Aren't their complete Xcode files that already have the code in them, instead of how files are on the github? Or thats just a better way to share Xcode files?
Parse is great if all you need is to prove a concept but apparently it becomes a hassle when your app actually starts to scale. 
There is an Apress book for using sprite kit with Swift. Also covers scene kit. The book is called something like Beginning Games Development with Swift. 
How do you start the data load? Which method do you call it from?
You are going to need to store that user info somewhere. Check out Realm.io for a cool object persistence system. As for the photo stuff ... what platform you are on REALLY matters. iOS? OSX? for ios, use PHImageManager, for OSX use a file open dialog. 
What's triggering the root view controller to load its content? If it's being kicked off from viewDidLoad() or viewWillAppear() then it makes sense that it reloads each time... you need to keep from reloading if it's not time to do so.
The content is being loaded when the function is called in viewDidAppear. Is there somewhere else I can put the function that loads the data so that it does not load again when I do an unwind segue?
Great suggestion. Thanks. Not yet seen this swiftism before: "as? [String] ?? []"
Closures! Going to take a bit of thought before I've completely wrapped my brain around this. Thanks. 
The idea is to learn, not to use completely template code from the start, I think. 
Or, indeed, a custom struct.
I don't think there is a place for more nooby questions, although on Stack-Overflow you can often see very.. let's say basic questions ;P What you're trying to do is: println(UInt64.max - UInt64(Int.max)) It didn't work because `UInt64` and `Int` are not the same type. And to be able to do subtraction, you have to use the same types. So because `UInt64` can have larger values than `Int` you should cast the `Int.max` value to an `UInt64`. Btw: - UInt64 is equal to UInt - Int64 is equal to Int 
Oh yeah right, thanks
Can you set a breakpoint and see if the "let newcell = tableView.dequeueReusableCellWithIdentifier("myCell2", forIndexPath: indexPath) as! MyTableViewCell" line ever gets reached?
Just getting ideas from other people, calm down. 
I've noticed a disturbing trend of beginners using force-unwrapping all over the place because they don't understand optionals and they think `!` "fixes" things. I think teaching the purpose of optionals and how to handle them safely is essential for any beginner course. 
Of course interop often makes that necessary, but I try to isolate it as much as possible (e.g. by unwrapping in the overridden method and calling a private method with the result). It's getting much better, though.
Very nice and Swifty! I don't know if I could use this in any of my projects, but I'll keep this in mind ;)
He has point though.
Well no one else wants to touch Swift and I'm the only one trying build interest in my department. So I'm all they have. 
Cheers! Yeah, I went mad with protocol extensions. Great fun.
Yeah I second this. At my work I see the ! abused all the time and people writing stuff like: if foo != nil { foo!.doStuff() } Instead of using the more idiomatic and less likely to screw up approach: foo?.doStuff() It is also important to be aware of the ?? operator. I use that a lot to provide default values. E.g. I wrote some string functions to find the start of a word given a caret. let i = self.rsearch(caret)?.successor() ?? startIndex So `rsearch` here is an extension I created which searches backwards for first occurrance of whitespace. That might of course fail and return nil, since there might not be a whitespace. But in this case the word boundary should be from the very beginning, which is elegantly solved with the ?? operator.
Any idea if they have anything like this for Android? I am also in charge of restructuring the Android class. This looks awesome so far.
I agree. My apologies for calling you out /u/downvotefodder, it's just a bit frustrating to see similar comments that are way more negative than this. 
But was he wrong?
Sorry for the late reply on this. If you're doing that refresh in viewDidAppear it'll run every time the view shows up on the screen. If you only want it loaded once you may want to try moving it to viewDidLoad.
Check out Paul Hegarty's course from Stanford. You can find it on iTunes U.
If you just want to display the content you can use the new SFSafariViewController which will have safari within your app (inclusive reader view)
It probably wouldn't but there's really no reason you should have to do this. This is really bad user experience. What exactly are you struggling with?
I don't get why this happens.......
You need to store that your user has purchased the IAP then do conditional checking whether they've purchased or not. Follow through a good IAP tutorial. Most are old but still relevant. Ray Wenderlich is a good place to start as I know they converted a lot of stuff to swift if that's your bag. 
The video &amp; slide sync should work well on iPad but yeah, not super phone-friendly. Realm is considering ways to make this work better on mobile, but in the meantime you’d have to watch on Desktop or Tablet, sorry :(
Dunno if this is really your area, but I've not found a great tutorial on it elsewhere: cocoapods. I've written a few (basic) frameworks, but I just *cannot* get my head around the cocoapods system. I know there are decent guides (on the website etc), but I'd love to see something a little more beginner friendly. A beginning-to-end tutorial on how to get something you write from a few lines in Xcode to the cocoa pods repository would be great.
I have the native functionality implement already now. But I can't share dynamic text string into the alert view. The native SDK is just test, if is it possible to do it with official library - but this is not the right way. The issue is on the FB Policy side. :(
This is a great idea – thank you! I'll see what I can do.
It is not bad with free functions. But we do need to stuff data into some data structures right? Say we have a point struct with an x and y coordinate. We want those to go together. Some data is such that we want to make sure users of the data is not using it in the wrong way by mistake. So you hide the member variables of you data type (class or struct) and only allow the data type to be manipulated by directly by some method you have attached to the class. This is what we call encapsulation which is an important principle in OO programming and many other paradigms. You can of course provide extra free functions which operate on your data type but now those functions can only function by calling the methods you have exposed. They can't fiddle with the internal data of the data type, and thus you as a creator of that data type can be certain it is not used in the wrong way. Be pragmatic. If you don't need a class, don't use it. I don't see any benefit of having a class for each IBAction, that just sounds painful. Finally from the point of view of an IDE, it can be useful to have classes just because you can then easily get method completions on an object showing you what you can do with that type.
I already have the system in place to where the correct user gets an SMS, so even the user data isn't that important. But it'd be nice for future development. Instead of sending an SMS, is there a system in place where the app can listen for a certain event at some address or something? 
You might want to look into remote push notifications :)
A.W.E.S.O.M.E 
can anyone stream? do I have to be good to stream?
Ugh, requires flash.
I was excited until I saw flash. I'll stick to twitch.
I feel like I must be misunderstanding your question. Do you mean, just incrementing the unicode character?
Yeah, pretty much that. So I want a button that with every click, the buttons' text will change to the next letter in the alphabet, once it gets to the last one, it should loop back around to the letter 'A' again (i'm guessing that will be a simple if statement for the last letter). How do I increment through the unicode characters? (if that's the best way to do this). I've incremented through ASCII values before in c++ but not sure how to in swift Thanks for taking the time to reply!
Thanks for that! I'll try it out
I think a better way is that you can bind the button image or color with button, and make a clean background. Of course, you can still use the current background, and do some math work. For example set the button 0 with frame(x:0,y:750/800 * screenHeight,width:200/400 * screenWidth,height:50/800 * screenHeight)
I may be wrong but in the switch statement, two doubles are not actually passed to the performOperation function. A block is passed and it will do something with two parameters ($0 and $1) once it's called. That's why in performOperation, the operation method is called with two parameters that are popped from the operandStack (operandStack.removeLast()). Hope I'm making any sense ... :)
I think that should be the proper way to do it, but then sometimes it can be handy to abstract it out. But then Protocol Extensions kind of eliminate that, especially when adding additional properties and methods.
If it's like Twitch then no, you don't have to be good at all.
You need to read up on closures in Swift. Basically, an anonymous function is passed as a method parameter, and called from within performOperation. The $0 and $1 are short-hand syntax for the first and second argument respectively. https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html It looks like there is a problem with the square root operator, by the way, since it will pop two arguments off the stack and call a function which only accepts one (and will also discard the other one).
What does this offer over using Twitch's own Development/Programming category? 
two doubles are not sent to performOperation(); instead, a function that takes two doubles and returns one is sent to performOperation(). performOperation() gets those evasive doubles from the operandStack. 
After looking at all the different types of apps out there, I'm thinking the general consensus is like you said, pretty horrible for the price being asked. I think the reason for this is because every person affected by aphasia need to be treated specifically based on their current situation and evaluation. The only way to know how to treat them properly, is to know the affected person personally. Also, the tools (iOS apps) out there are not personally tailored for patients and are very broad if you know what I mean. So my goal is to make my app as personally tailored as possible for him to have as much reinforced positive emotions as possible when he gets the right answer. The last thing I want him to feel is being overwhelmed by the amount of wrong answers he gets, which aren't relevant to his recovery. Meaning, if we ask him to identify a random dog and he gets it wrong, it will be discouraging. But if we ask him to identify his dog, he may get it right because he is more emotionally attached to that image (dog), I hope. I am making one on paper right now, but I would prefer an app. Hope that makes sense. Lastly, this app is a supplementary tool to help with his recovery and by no means a replacement for a speech therapist. I will continue to add more images to the app as they come available. Hopefully when I make this app, people will be able to take my app and replace my images with their own. I would never wish for this to happen to someone, but if this gives people any hope of their loved one being on a path to a successful recovery, why not try this.
For your very first app you might want to think about using SpriteKit instead of the native view stack -- I think the node-based view hierarchy is a little easier to wrap your head around.
I just read some of your source-code... And wow! It's amazing! I think I never have seen anything more beautiful and Swifty! You really made great use of the latest features and also used ones that most people probably don't even know. I'm really amazed in how you did this, you're a genius to me, the true King of Swift. What's your background though? Obviously you like Python and Haskell, but what have you been working as? What have you done to be so good at this? Because this is truly a masterpiece.
Yeah, I'm thinking a story book format. Right now, we're just trying to evaluate how severe his speech is affected, so this is a way. I'm thinking it'll be a short 15 minute exercise. The stroke was recent, so the speech therapists just want to evaluate him.
Awesome! I understand, I'm too not very good at integrating with other stuff (I tried a few but I wasn't amazed). I have started (kinda) programming 7 years ago (I was little) with VBA, a few years later I started with Java, got really into it. Then Swift came out a year ago and now I don't even know Java anymore. I'm actually really motivated now to learn Python, Haskell and to write something as beautiful as your framework in Swift. What are you studying right now?
The biggest difference is known as "passing by reference" vs. "passing by value". For a class, when you talk about its name in your code (in your example car1) all you're really talking about is its name. in contrast, when you talk about the name of a struct, you're talking about the *actual thing*. And the code acts like that. [Here's an example](https://gist.github.com/oisdk/24b84865af321d1c35aa): class SomeClass { var a, b: Int init(a: Int, b: Int) { (self.a, self.b) = (a, b) } } struct SomeStruct { var a, b: Int } var cla = SomeClass (a: 1, b: 1) var str = SomeStruct(a: 1, b: 1) var ar1 = [cla] var ar2 = [str] cla.b = 2 // {a 1, b 2} str.b = 2 // {a 1, b 2} ar1 // [{a 1, b 2}] ar2 // [{a 1, b 1}] The arrays act differently here - `ar1` contains the *name* of `cla`, whereas `ar2` contains a copy of `str`. So, when you change a property of `str`, you don't touch what's in the array. The other differences kind of follow from this: immutability is more applicable to structs, for instance. All of these things allow the compiler to perform some *serious* optimisations, which means, in practice, that structs are far, far faster. So why would you use a class? Well, in the past one reason might have been in order to allow a certain type of inheritance. But we're all drinking the protocol-oriented-programming gatorade these days (as we well should - on the off chance you've not seen [this](https://developer.apple.com/videos/wwdc/2015/?id=408) fantastic talk stop reading right now and watch the bejaysus out of it), so that's not really applicable anymore. What *is* still applicable is shared state - if you *want* something to be passed by reference, classes are the way to go. 
To add to foBrowsing. Structs are things such as int, float, point, vector2D, circle, range, index etc. Basically smaller objects you want value semantics for, meaning assigning from one variable to another should make a copy. Classes are things such as Person, Car, Window, Sprite, Scene, BankAccount etc. That is larger objects which has a more clearly defined identify and were you definitely don't want things to accidentally get copied. Variable assignments should just create a different pointer/reference to the same object.
it's not declaring a function, it's calling a function. row and column (the second one) are declared by the subscript above the function being called: indexIsValidForRow(row:Int, column:Int) -&gt; Bool so for example if you did var foo = Matrix(rows:4, columns:4) foo[10][4] would throw a fatal error of "Index out of range" when the subscript getter called assert(indexIsValidForRow(10, column:4))
I haven't got a clue what `interpose` does, will probably learn Python soon though because now I'm especially eager to learn what it does! Thanks for the suggestions! Will follow their blogs. Btw your blog is really awesome too, I just looked through the articles and I think you're a talented writer too! I really believe you're gonna make it far in life, your skill for understanding complexity and applying abstraction is really advanced. About CocoaPods: I too don't get it, I mean I know what it's useful for, but it's really weird. There should be an XCode-Plugin or something. I know it's not optimal to just copy a framework into your project, but I'll stick with that for now. Short story about the five challenges in your blog: I heard about the challenges in a podcast, the fourth one was mentioned and they were complaining about the complexity of it. I thought "That doesn't look too complicated, let's give it a try", so I did... After about 2 hours of getting the same problems you described I temporarily gave up. I explained the problem to a friend, he said "Gimme 20 minutes". Well after 1:20 he had a solution. He used C# and wrote about 200 lines. I ported the solution to Swift, he was quite amazed when I only needed 8 lines (functional programming wohoo!). Later I found out the solution didn't work, told him, he fixed it, still didn't work, fixed it again, still didn't work, fixed it again, and... it worked! He was not using the string concatenation sort method, but wrote about 300 lines... Of course I was really trying to find a case where it didn't work, I came up with the weirdest cases, but none broke it and after thinking about it for a while, I was convinced that it was really working. Later that day I though: "Such a huge amount of code for such a small problem, this doesn't seem right". So I started thinking again and after a short while I came to solution with the string concatenation sorting and I was amazed how simple it actually was. So I implemented it in Swift like this: ["41", "4", "45", "5", "39"].sort { "\($0)\($1)" &gt; "\($1)\($0)" } (It's not efficient as your solution, because two new strings get created each comparison and because of string comparison itself) He wasn't happy when I showed him what he wrote in about 300 lines in C# could be solved in 1 line in Swift :P
Okay so Swift throw is really just returning Either types, but is there any way a developer can actually experience the difference between this an a Java style throw? Are there things you can do with one of the systems which can't be done with the other?
It's not really returning Either types, but it's somewhat conceptually equivalent to it. It's essentially a pure compiler feature, whereas in Java and C# it's a runtime feature (stack unwinding). In C# an exception can happen everywhere and for any reason. They are much tighter controlled in Swift. 
Heh, sorry bout that- it was all pasted from my tiny phone
Oooo... I can see it better now. The column:column example they used threw me off. They could have used a different name!
You're right, it was the ":" that was throwing me off (along with using the same name twice). Surprisingly enough, it didn't register to me as odd as up to that point in the book. I bet the reread will show me I got everything backwards and upside down =P
Now if only we had gotten an `Either` in the STL instead of several new keywords...
wow, that seems much simpler. I tried it out but i'm getting a 'Type of expression is ambiguous without more context' error 
Thanks for the response. I guess my issue is when I return to the first View Controller, the bottom bar disappears when I set the hidesBottomBarWhenPushed property to "true". Do you know if there is any way to add a method to the back button in the nav bar?
Tip: Put four spaces before every line of code: struct Matrix { let rows: Int, columns: Int var grid: [Double] init(rows: Int, columns: Int) { self.rows = rows self.columns = columns grid = Array(count: rows * columns, repeatedValue: 0.0) } func indexIsValidForRow(row: Int, column: Int) -&gt; Bool { return row &gt;= 0 &amp;&amp; row &lt; rows &amp;&amp; column &gt;= 0 &amp;&amp; column &lt; columns } subscript(row: Int, column: Int) -&gt; Double { get { assert(indexIsValidForRow(row, column: column), "Index out of range") return grid[(row * columns) + column] } set { assert(indexIsValidForRow(row, column: column), "Index out of range") grid[(row * columns) + column] = newValue } } } 
I think you've got some fundamental issues with your data structures. Why have your Fields represented as elements in an array of the fields hold different information? You'd do much better to add those as individual properties to your Event struct. Your logic also doesn't do what you think it does. Where is the original array coming from? If it's an array you're creating, consider passing an array of structs instead. EDIT: Okay, I just realized it's coming from Hpple. That makes more sense. Well, let's look at what you're getting and the best way to turn that into usable data. You said they're in a long array, and each 4th element marks a new event? Well, we can use Swift's [Stride](http://swiftdoc.org/swift-2/func/stride/) that iterates through every *n* items. So we can make an Event struct, like this: struct Event { let event: String let date: NSDate let points: Int let venue: String } **Note** that I combined `date` and `time` into an NSDate, because that manages both dates and times. You'll need to combine the time and date, separately, into an `NSDate`. I can help with that once you get there. Let's look how you build those Events. Say you've got an array of nodes that's got the following format: let nodes = ["Correspondent's Dinner", "9:00PM", "44", "April 25th", "White House", ...] // Assuming each element is a TFHppleElement with those strings as their 'content' You can `stride` over them like so: var events = [Event]() for index in stride(from: 0, to: nodes.count, by: 5) { let eventName = nodes[index].content let time = nodes[index + 1].content let points = Int(nodes[index + 2].content)! // careful here, if the HTML doesn't actually convert to Int, this will crash. let date = nodes[index + 3].content let venue = nodes[index + 4].content let event = Event(event: eventName, date: /* parsed NSDate from 'time' and 'date' */ NSDate(), points: points, venue: venue) events.append(event) } Depending how your data is structured, that should give you a properly parsed Event list.
Could you post the code where you use that function?
Livecoding TV is a new service that has a few people that code in swift if learning by watching is your thing!
You can call titleForRow yourself if you want, but it sounds like you're doing quite a bit of work in that method and that's where the difficulty lies. If you're worried about performance, move the row title calculation somewhere else so you can make titleForRow not much more than an array look up, in which case calling titleForRow is cheap. You could use a shared method call on your model if you like. If you're not worried about performance but instead about code duplication, just call titleForRow – if later on you find it's slow it's easily refactored.
I think before even delving into programming you should ask yourself what you want to build and go from there. It's much easier to pick up things when you have a purpose and goal in mind.
Although I do not a a source, neither have I experienced it myself. But I suspect your app will be rejected for this. Apple is really nitpicky over it’s UX
That's the thing, everything I do seems to fail when trying to call it. I've done it in other languages, but not swift, and Google turned up nothing. I know it's just one line, but for the life of my I cannot generate a workable solution..
Currently on Chapter 10 of this book and it is absolutely amazing. You must try it out OP!
It was 25 years ago and I don't remember. It was something used to treat migraines. It was a giant pill.
Apple says, "With Xcode 7, all you need is an Apple ID and you can develop and test on any device" in its ["New Features in Xcode 7" document](https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_7_0.html), so I suspect it's available only with the beta. Give it a try, perhaps? The worst that can happen is Xcode 6.4 doesn't do anything. 
I think you also need the iOS 9 beta.
IOS dev program is only $99 - just for clarification
This does work for me (Swift 2): let str = "hi you".utf8 let first = str.first // first = 104 let second = str[str.startIndex.successor()] // second = 105 let third = str[advance(str.startIndex, 2)] // third = 32
Sent you a PM
Yeah, you need the beta version of Xcode, it's already working, I tried it on 2 iPhones, both on iOS 8.x. You definitely don't need the iOS 9 beta. Just need an Apple ID.
Which I believe you need a dev account to download.
No, he doesn't have a point; he has an assumption that is probably incorrect. He assumes the OP doesn't know what Swift beginners should know first. Maybe OP does know, maybe OP doesn't. The post doesn't make this clear. But even if the OP does know what Swift beginners should know, it never hurts to get a second opinion. What kind of moron bashes somebody in a position to actually make a difference for asking the Swift community how to improve the education of new Swift programmers?
The OP gives no indication they don't know what they are doing. OP is simply asking the Reddit Swift programming community for some input, which is an entirely valid thing to do. The OP is actually giving you the opportunity to influence the education of future Swift programmers. Maybe try not taking a shit on the opportunity and instead actually being helpful? Just a thought.
No, you don't. I successfully run my apps without paying, with Xcode 7 beta and iOS 8.3 on my iPhone.
add a view inside the cells content view and set up some constraints. Then you pick the same color to the tableviews background and the cells view. 
You have a tableview, inside it you have a cell. And inside the cell there is one content view. Thats the one you need to set as the same color as the tableview. Lets say you set it to red. Then you drag in a new view, an UIView. And place it inside the cell. Create some constraint so there will be some gap, set the color to white (or what ever color you'd like). Then you will have a gap :) Also remove the separator :)
It will be with the new Xcode, 7 I think. So it won't work now.
Apple released the first beta of Xcode 7 during WWDC, so it does work now. 
Primarily games, but would in general like to become educated in a computer language of some sort
Awesome! Thanks for sharing. Just about to sit down and go through the tutorials :D
Awesome! Is it easy to learn so far?
You and I have very different definitions of realistic. How hard would it have been to replace anything looking like `... -&gt; NSErrorPointer -&gt; T` with `... -&gt; Result&amp;lt;T&gt;`? The enumdef itself is ~5 lines of code if you do it right! Still, you're right on the nose with the familiarity piece.
I have Xcode 7 beta and I can confirm the ability to side load apps without having a developers license. I've had at least 3 apps on my phone to test things out. I'm pretty sure the certificates expire after 3 months through, so you'd need to just quickly reinstall. 
Gotta cover all my bases here: Is that file in your Compile Sources list? Click your project at the top of the Xcode file navigator, then click Build Phases and look in Compile Sources.
Could you post the server side script used to execute the push notification (just the script, no cert or anything else please)
The best thing about this tutorial is the part that makes you question *why* you need to parse HTML in your app and offers some potential alternatives. I'd be interested to know what OP's use case is because parsing HTML directly within an app is the sort of thing I'd avoid if possible.
The new Xcode will allow you to test your own apps for free. If you want to test your apps now, you'll need to jailbreak and install something called "AppsyncUnified" from Karen's pineapple repo and some software on your Mac. Full details are [here](http://angelxwind.net/?page/how2asu).
Bindings would be impossible without KVO so there's that. Also I don't know this for sure but I would imagine property observers just use KVO under the hood.
Go to [Apple's Dev Site](http://developer.apple.com) and get it. It doesn't replace your current Xcode. Also, it's mostly stable (though I'm not sure if my issues are more related to being on 10.11 than Xcode itself). 
This is more of a Cocoa/osX question, I suspect. 
how about instead putting the selected options in an array, and then using reduce to create a string? let ar = ["1", "2"] ar.reduce("", combine: +) 
it's usable and somewhat stable, it doesn't replace the normal xcode, it just adds a new app called "X-Code Beta" here's the [download](https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7_beta_2/Xcode_7_beta_2.dmg).
here's the [download](https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7_beta_2/Xcode_7_beta_2.dmg). It just adds a new app called xcode-beta
Car and animal are two common examples in OO but they're pretty awful because they're so hard to relate to what programming you already know. Class conceptually do four things: namespace, bundle data, bundle behavior, and extend behavior. Namespacing is the easiest to understand: it's nice to have a hierarchy of names, like math.squareRoot or whatever. Data bundling is a little trickier but not too bad. Imagine you have a line drawing function. How should its call signature look? It could be drawLine(x1, x2, y1, y2) or drawLine(x1, y1, x2, y2), but really it would be more clear as drawLine(point1, point2). So make up a class called Point and say it has an X and Y as members of it. A class is just a way of bundling together related data. The third thing is where it gets tricky. Let's say we want to talk about reading in data. It could be from a local file, from user typing, from the Internet… whatever. We just want to know whether a thing can be read. Well one way is to make a class with a Read method and then make subclasses for the different things you want to read. Then just specify you need a Reader and let the subclass get switched out later. Finally, once you understand the idea of subclassing it lets you write code with the idea that different behaviors can be swapped in as new methods in a subclass later. 
Users should get read-only access to your public database without an account, or read/write with an account. Obviously the private database requires an account either way.
But thats obj-c 
But hardly ASCII, unless you're *sure* your original text contains only ASCII characters. Otherwise, of course, there is no way to get the ASCII value as there isn't one.
Note that ASCII is a 7-bit character set and that Swift strings can contain characters from the entire Unicode range, which is 21 bit, so your question, in general, isn't really well-defined.
On mobile so not going to write code. And the answer will depend on how your laying out your views. For example, If you're not using autolayout and doing everything with just frames, then you should just need to update the label's frame's origin. If you are using autolayout then you probably need to update the layout constraint's constant that controls the horizontal layout for the label (e.g. the horizontal leading constraint or the horizontal center constraint, etc, maybe even the labels trailing constraint - it depends how your view is laid out). Then you may want to call layoutIfNeeded on the view (depending on where this code is being used). If you're using a UIStackView for layout then there's probably still another answer that someone else can provide (I haven't played around with that yet).
Thank you! That really helps, I'm using auto layout so I will try and see if I can update the constraints in my code. Also, how could I not have auto layout for my label? I feel like if I don't put in at least three constraints for each label/button etc then their positions are really unpredictable haha
You should be able to get fine control a lot of the time with just 2 constraints for labels. Maybe there are situations where you want to also have control of a maximum width of the label (so it doesn't grow off the screen) which would require a couple additional constants. If you weren't using autolayout at all and doing everything by frame size and position calculation for all your views, then you wouldn't be using constraints. I personally don't develop that way, but I know people who still do. I guess it comes from developing pre-autolayout. 
I made a small String extension, giving you an array of `UInt8?` (A value between 0 and 128 when the character is ASCII, nil otherwise: extension String { var ascii: [UInt8?] { return unicodeScalars.map { $0.isASCII() ? UInt8($0.value) : nil } } } "Hi, there :D 😏".ascii gives: [72, 105, 44, 32, 116, 104, 101, 114, 101, 32, 58, 68, 32, nil]
`NSWindow` has a [`screen`](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSWindow_Class/index.html#//apple_ref/occ/instm/NSWindow/screen) property you can use for this. Use [`+[NSScreen screens]`](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSScreen_Class/index.html#//apple_ref/occ/clm/NSScreen/screens) for the screens available on the current Mac.
Oh, right, I should have said: interpose sticks an element between the elements of a sequence. Like this: interpose 0 [1, 2, 3] [1, 0, 2, 0, 3] Thanks for reading my blog! I've got to get some more posts up, haven't written in a while. I've got to properly check out C#. I've heard good things about it. (especially with regards to generators: if there was a `yield` keyword in Swift (like there is in C#) my entire framework could have been about a tenth of the size it is now.)
To sign you App you need Xcode 7 beta. After you've signed your app you can use Xcode 6. I am currently having trouble rubbing my apps on iOS 8.4
Your work seems to tackle a very different issue to Apple's – I wonder if this is the sort of thing they would be interested in once Swift gets open sourced for real?
I don't think there is need to incorporate so many statistical distributions into stdlib. Most people don't most of them and I know it :).
If you want the whole thing to scroll as one, then you can use one tableview with different sections. But if you want each of those lists to scroll independently then you would need separate UITableviews. To handle separate tableviews set the viewcontroller as datasource and delegate for all of them. Then in IB look for the 'tag' attribute for each tableview and set them to different numbers (eg top tableview has tag = 1, middle has tag = 2, etc. Then at runtime in the datasource and delegate methods use the UITableviews being passed to those methods and switch on their individual tag values. The tag field is there for precisely this sort of thing and is baked into UIView. You can use it for handling multiple objects from a single delegate.
You can do it 'classically'. Just open Terminal, go to the project's directory (in terminal) and use git init command to create new local repository. It should be visible by XCode almost immediately. If you have problem navigating to project's directory in Terminal, you can use small app from Mac App Store called Go2Shell, which places itself in Finder and allows you to open Terminal in directory currently opened in Finder.
I would use a table view with sections for this. If you want to scroll them independently I agree with fubarx, but I would rather have used 3 separate controllers. IMHO I think the tag stuff is nice to avoid if possible. And frankly for most people getting used to splitting up their controllers into more parts would not be a bad thing. People then to use UIViewControllers as massive dumping grounds for everything. objc.io has a pretty nice issue on how to split up your view controllers and make them less fat. Check it out it is pretty nice: http://www.objc.io/issues/1-view-controllers/
Had a look at the apps. As you said, very basic but I like the UI design and I couldn't break them so that was positive. Keep it up and build something more complex!
Nice job. I really liked Tiplet. The design was really nice and it was simple. I didn't like Plus One however. I thought it was a little too simple and the color of the buttons kind of threw off the simple aesthetic UI. Nice work on both of them though.
Alright, thanks for the info! Much appreciated.
Check out the 'reduce' method on Array: let val = [1, 2] let str = val.reduce("") { "\($0)\($1)" }
NSURLConnection has been deprecated in favor of NSURLSession. Using this might solve your problem. It also looks like you're using some custom class called JSON for deserialization? You could try using Cocoa's NSJSONSerialization. let jsonData = try! NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions(rawValue: 0)) If you are not using Swift 2.0, you will not need the 'try!' **PROTIP** If this code is being executed from the main thread, you should not perform a synchronous network request, as it will block your UI until completion. Either use an asynchronous request, or dispatch to a background thread before doing your request.
Wow, that sucks. Well, here's how I'm doing it at the moment.. var1.transform = CGAffineTransformMakeRotation(1.6) That rotates my label 90 degrees, would this be the way that you would do it? It's the only way that I could find :/ Also, thanks for replying! much appreciated
thanks!
Seems correct, except that Pi isn't 3.2. You probably wanna rotate by M_PI/2.
Ah, can you explain this to me? I'm still unsure as to how this rotation thing works, I'm not sure what the number represents so I just played around with it, 1.6 seemed to rotate my label 90 degrees, however 3.2 didn't make it rotate 180 as I found out haha. What does the M_PI/2 stand for? What does it do in terms of rotation? Thanks!
Well, I'm not sure how far you are into schooling, but M_PI_2 is a constant that's declared in the C math library. It it a substitute for (pi / 2), which in radians equates to 90 degrees.
Oh right, makes sense. Thanks for that, much appreciated!
Short hands: * 0 = 0 = 0° = 360° * M_PI = pi = 180° * M_PI_4 = pi/4 = 45° * M_Pi_2 = pi/2 = 90° * 3*M_PI_4 = 3pi/4 = 270° This is by no means meant to represent the whole [Unit Circle](https://en.m.wikipedia.org/wiki/Unit_circle). You'll learn this when you study pre-calculus. Glad to help!
This is very interesting, and I agree that it seems fairly clear API! Do you think you could add to the page an idea of what happens if you tried to write "String in Chain in String" – which "String" is matched? And how about performance – presumably this is doing a fair amount of string matching? Doing that would help make the project more appealing to use. I'd suggest you avoid unnamed parameters to help make the API even clearer. For example, `underline(1)` – what does the 1 mean? More broadly – and this is just gut instinct stuff I'm bouncing around as discussion, not a recommendation! – I wonder whether re-spinning this to be more imperative would make more sense? Compare this: string.match("Chain").withStroke(1, andColor: UIColor.blackColor()) string.match("In").underline(1, andColor: UIColor.yellowColor()) The first one can be read out loud and makes sense: "match chain with stroke." The second is half imperative: "I want In to be underlined." How would it look if you went totally imperative? As in: string.underline("Chain") string.underline("Chain", inColor: UIColor.yellowColor()) 
`Array.goDeeper()` is genius. I love it.
[Well done](http://media.giphy.com/media/N5ggKzJteVtGE/giphy.gif)
Would be a lot better if this was an iPad app I could use. Too many free resources on the Internet that are easily accessible via a browser on a laptop for me to justify paying $40 for this app. UI also looks cheap, if that makes any sense. Anyways, I'll wait for the reviews and see if this is worth anything. Until then, good luck with it, I'll be sure to keep up with any updates/improvements you guys make! 
Erm, did you know that an NSAttributedString can be initialized with path to an RTF file that you can create right on your Mac?
An array of optionals or an optional array? That's the question.
hehe, when even developers don't want to pay reasonable prices for software you know that the market is totally fucked.
Alright, thanks for the tip! I'll look into that
👍👍👍👍👍
Good point. This tends to be the best approach. But it's still good to understand the difference between class methods and instance methods.
Preview can do it
Automatically... or is this a sarcastic comment? :p
Is there still a way to pick a seed for random numbers using GameplayKit? There are cases for wanting a highly random output of numbers that can later be repeated.
I've settled on telling people 'Implement your stuff in Swift, but learn how to read and understand Objective-C.'
If you don't have anything to contribute to the original post, please don't post at all.
This is WRONG. IBDesignable and IBInspectable allow you to create a property such as rotation and then create an affine transform in that property to rotate the view RIGHT in IB.
OP, look at IBDesignable and IBInspectable and create a property on UIView namely "rotation" or so, and in there, create an "affine transform" that rotates your view. This is doable and EASILY doable. If you want more info, let me know.
I discourage this, very much. Apple is going to, in a year or two, put all their efforts on Swift and stop updating or writing any code in ObjC. They have already started. Learning a language is not a 1-2-3 step. It takes a lot of time. Why waste time on learning something that is going to be pretty much second-choice in a year? I don't suggest OP does this.
It's not that Parse doesn't scale well, it's that it's almost completely lacking enterprise features (e.g. backups) and the support is atrocious.
Thanks for the comment. What do you think i should do to the plus one UI to make it better?
I'm not sure, but could it be a problem caused by DRM. Apple music puts DRM on the music files. 
Well done. The more that is available on Swift the better. Thanks.
are you calling func beginGeneratingPlaybackNotifications()
Yes I have that under viewWillAppear
This is not Swift specific. Comment as little as possible and as much as needed. It very much depends on the obscurity of the code. Sometimes intelligently named methods and parameters are enough. If you have a (stupid example) method like func addOneToNumber(number: Float) -&gt; Float { return number + 1 } there is no need to comment. It is obvious from the naming of the method and parameter what it does. Assume that the person reading the code has no idea what it does. Comment accordingly. If you add a hack or weird workaround, explain what it does and why it does it.
Thanks for the tip! Still haven't been able to play around with peoples suggestions yet but I'll try this out when I can, thanks again!
I'm not sure I agree with comments not explaining *how* your code does something. Take this, for example: /* Scan indices right-to-left until finding one that is not at its maximum (i + n - r). */ for (i=r-1 ; i &gt;= 0 &amp;&amp; indices[i] == i+n-r ; i--) ; /* If i is negative, then the indices are all at their maximum value and we're done. */ if (i &lt; 0) goto empty; /* Increment the current index which we know is not at its maximum. Then move back to the right setting each index to its lowest possible value (one higher than the index to its left -- this maintains the sort order invariant). */ indices[i]++; for (j=i+1 ; j&lt;r ; j++) indices[j] = indices[j-1] + 1; /* Update the result tuple for the new indices starting with i, the leftmost index that changed */ for ( ; i&lt;r ; i++) { index = indices[i]; elem = PyTuple_GET_ITEM(pool, index); Py_INCREF(elem); oldelem = PyTuple_GET_ITEM(result, i); PyTuple_SET_ITEM(result, i, elem); Py_DECREF(oldelem); } (line 2476 - 2503 of the itertools module in Python) For something like that, isn't it more clear? (obviously it depends on where it's used, and there are going to be examples of over-commenting, I'm just not sure about saying so absolutely that comments shouldn't explain method)
There's a modern myth that code doesn't need comments and that well written code can be read in the same way as you might read a book. Both of these are wrong. Examples that show that comments are not needed invariably show code that is so sterile and simple (e.g. **number + 1** below) that it is meaningless. In reality, real code is complex and obscure, written quickly - usually to a tight deadline, hacked into submission and tested inadequately. In this reality code comments are a frequent help for the poor sucker (with inadequate training and experience) who comes along afterwards and has to clear things up.
Here is the list of WWDC 2015 videos dedicated to each language respectively this year **Objective-C:** Nothing! **Swift:** 1. 106 - What's New in Swift-HD 2. 411 - Swift in Practice-HD 3. 401 - Swift and Objective-C Interoperability-HD 4. 408 - Protocol-Oriented Programming in Swift-HD 5. 409 - Optimizing Swift Performance-HD 6. 403 - Improving Your Existing Apps with Swift-HD 7. 414 - Building Better Apps with Value Types in Swift-HD
&gt; That doesn't mean that Objective-C is going anywhere soon I totally disagree. Objective-C will be deprecated in less than 5 years, mark my words. Just like garbage collection, Objective-C has always been the black sheep, hence the creation and focus on Swift.
Just learning Swift right now for my first (OS X) app. This approach is serving me well. 
 /// An enum to represent possible arithmetic failures. /// * AddToMax - An attempt was made to add to the respective 'max' of an IntegerType. /// * SubtractFromMin - An attempt was made to subtract from the respective 'min' of an IntegerType. enum ArithmeticError: ErrorType { case AddToMax case SubtractFromMin } /// Adds one to a number /// /// - param numberToAdd: The number to add 1 to. /// - returns: numberToAdd with 1 added to it. /// - throws: ArithmeticError.AddToMax if numberToAdd is Int.max. /// - precondition: The number is less than Int.max. /// - postcondition: The number has 1 added to it. /// - complexity: O(1) func addOneToNumber(numberToAdd: Int) throws -&gt; Int { // We can't add 1 to Int.max, so check to see if the // passed-in number is Int.max. if numberToAdd == Int.max { // If it's Int.max, throw the AddToMax ArithmeticError // to give context to anyone who calls this function. throw ArithmeticError.AddToMax } else { // Add 1 to the number and return it. return numberToAdd + 1 } } /// Subtracts one from a number /// /// - param numberToSubtract: The number to subtract 1 from. /// - returns: numberToSubtract with 1 subtracted from it. /// - throws: ArithmeticError.SubtractFromMin if numberToSubtract is Int.min. /// - precondition: The number is greater than Int.min. /// - postcondition: The number has 1 subtracted from it. /// - complexity: O(1) func subtractOneFromNumber(numberToSubtract: Int) throws -&gt; Int { // We can't subtract 1 from Int.min, so check to see if the // passed-in number is Int.min. if numberToSubtract == Int.min { // If it's Int.min, throw the SubtractFromMin ArithmeticError // to give context to anyone who calls this function. throw ArithmeticError.SubtractFromMin } else { // Subtract 1 from the number and return it. return numberToSubtract - 1 } } Perfect. Eh, maybe it needs more OOP. 😉
I've found that I write better code if I have an audience. Consider putting some of your code open-source on GitHub! 😃
Do you *seriously* believe Apple will rewrite *everything* in Swift in the next five years? It took Apple 10 years to deprecate Carbon.
I think you need to change the colors of the buttons. There a little to bright on a black background. Maybe use similar colors but lighter, or do shades of gray. 
big fan of sketch by bohemian... There are templates for anything you need.
If you're already familiar with object oriented programming iTunes U has a good free class on Swift from Stanford. I have spent most of my time in Ruby and started going through that a couple weeks ago, it's a great intro.
ObjC has been the primary implementation language for what became OS X and iOS since the late 80s. "Black sheep" is pretty much the opposite of reality.
Nice - just got it. For $10, even if the content isn't great it'll still probably be worth it.
Real programmers don't comment 😆
My most important rule of thumb: if I do the obvious thing, and end up having to change it, I put a comment in explaining why the new code isn't doing the obvious thing.
By then, it will be too late. Get into the habit now. And you do have an audience. You. I've gone back and looked at my own code and not known what I was doing, even when I tried to comment rigorously.
Plus I really dislike how the author completely wrote off monads as 'too complex'. Like, for real, take some pride in your work as a computer scientist and learn the tiniest bit about the functional abstractions that made Swift possible.
But I think there has been/is quite a bit of thought about what classes and structs "bring to the table" semantically. The problem is that a lot of people (typically those oriented more toward functional programming) look at Swift's far more flexible implementation of structs and run absolutely wild, suggesting that this increased flexibility must mean that we are destined to use structs, and only structs, everywhere. On the flipside, I don't think we were in any more danger of OO folks using classes where they should have used structs than before Swift came into existence. It's the functional people who've gone off the deep end and are trying to toss classes out the window. We can talk about semantics all we want, but as usual with things functional, the case against mutability and reference types is built largely on arcane, or otherwise limited, hypotheticals. One of the most genius things about this article is how it envisions an arbitrarily large project, specifically so we can avoid cute toy examples that ultimately bear little resemblance to anything of use or scale.
That article is unreadable on an iPad, scrolling changes the zoom level around. 
No one questions the volume of work the current regime has produced, what they question is the quality. At the end of the day, the set of programs I can write in C and the set of dangerous programs I can write in C overlap significantly. In Haskell that overlap is much smaller, in Idris even more so, in Coq and Agda [almost] nonexistent. We have spent far too long hooking objects together to describe a particular solution to a problem we've long since forgotten. In FP you describe the problem and work with the compiler and type system to arrive at a safe and effective answer. I don't believe you when you say that not every problem has a "Mathematical [read: Reasoned]" solution, because that corresponds precisely to the case where you aren't describing the problem well enough (you haven't produced a Type specific enough to model your problem effectively). I do believe a lot more work has yet to be done lowering the jargon down to a level where mere mortals can understand it, but you could very well say the same thing of OO's incredibly rich vocabulary to the uninitiated. It's all the same jargon, you're just familiar with one side of it. To dismiss the other side because it's too "out there" is akin to dismissing Mandarin Chinese because it doesn't follow English's lexicographic structure.
&gt; ...the set of programs I can write in C and the set of dangerous programs I can write in C overlap significantly. In Haskell that overlap is much smaller... But the difference is that, given enough skill in defensive programming, I can make a safe C program that actually does something practical (I'll allow, again, that "safe" means something different for people shipping products and people being OCD about statefulness and theoretically possible race conditions). Give me a solid OO language and the outlook only gets sunnier. &gt; I don't believe you when you say that not every problem has a "Mathematical [read: Reasoned]" solution... Because that's not what I said. I said that most problems we're working with are not most naturally modeled in raw Mathematical terms. One thing I'm consistently amazed by is how much FP evangelists underrate the aptness of a problem model in software development. It's not just some trifling thing. It turns out to actually be really important, and it's the biggest reason why OO has dominated in the field. And by the way, OO programmers aren't just a bunch of dunces who couldn't pass HS trigonometry. One gets the feeling all too frequently that FP folks feel otherwise. &gt; I do believe a lot more work has yet to be done lowering the jargon down to a level where mere mortals can understand it, but you could very well say the same thing of OO's incredibly rich vocabulary to the uninitiated. I'd never argue that OO is without its issues when it comes to jargon, or whatever. As a self-taught programmer, I had to learn all of it on my own. The reality, though, is that OO--once you push past the jargon--makes intuitive sense, largely because it implies a taxonomy metaphor (not to mention other visual metaphors, like that of the factory) that we readily understand from basic studies in all sorts of other areas (middle school science, for example). Again, I'm not "dismissing" anything here. I argue very openly that there are aspects of FP that OO languages can, and should, incorporate to make things more convenient and to allow OO programmers to execute tasks more effectively. The oddest thing in this whole debate is how the OO "side" gets accused routinely of dismissing FP, and meanwhile, the FP "side" is openly committed to basically seeing OO obliterated. I'll just reiterate that practicality and pragmatism have been at the heart of modern programming since the days of the early MIT hackers in the 1950s. OO comes directly out of that tradition, and I don't think we're going to see any great shift in that regard, protestations of language/paradigm campers notwithstanding.
 let rows = 100 let validRange = Set(0...rows)
Hah...as simple as that. thanks! 
Oh look, another "I don't understand and I feel threatened by functional programming, therefore it's silly" post. 
I've just finished watching this course. It gives a good introduction to iOS programming with Swift, explaining the most important concepts behind iOS apps and XCode. I think the course is great for a beginner and I'm really happy with what I've learned. XCode didn't change much from the time this course was released, so you can't say it's outdated. I've read about new Swift features, but that isn't related to what this course teaches. You're really just getting the essentials here, but that's what a beginner needs. It's a very good course, I really recommend taking it.
It won't work that way: This happens first: inputTextView.text = textView.stringByAppendingString(catchContent) So now the content of the string is everything you have written so far. self.inputTextView.textColor = UIColor.redColor() This sets EVERYTHING red. You should use a mutable string for that: var myString:NSString = "Random Text" var myMutableString = NSMutableAttributedString() Define a Mutable String with Font Georgia and size 18 from the string source, in this example from myString. myMutableString = NSMutableAttributedString(string: myString, attributes: [NSFontAttributeName:UIFont(name: "Georgia", size: 18.0)!]) Add attribute redColor to the Location 2 with the Length 4 (This colors "ndom" from "Random Text" red!) myMutableString.addAttribute(NSForegroundColorAttributeName, value: UIColor.redColor(), range: NSRange(location:2,length:4)) Just set the mutableString to the UIElement. labName.attributedText = myMutableString 
Oh dear, I'm interested in learning Swift and he definitely knows marketing tactics -- I'm so close to purchasing it already! Would you be able to provide examples of some "old information" stated in the course?
It crashes my app! It is causing me so much pain.
This was happening in my simulator as well but not causing any crashes. Maybe your crash might be actually caused by something else, and this keyboard thing is a coincidence?
1. I don't know. 2. I didn't try the course, largely because I made my own free Swift course. But if the Lynda course appeals to you, why not? Everyone learns in their own way, and you know yourself best. 3. I hear this a lot, and the answer is definitely "no". If you learn Swift 1.2 really well, a quick skim over my [What's new in Swift 2](http://www.hackingwithswift.com/swift2) article will be enough for you to upgrade. Don't spend your time worrying about what's coming in the future. Do something great now, and it'll definitely pay off no matter where Swift goes.
I wrote few and liked it, but it would be nice if Xcode had some support for this. Cocoa is a bit too verbose for writing by hand, and you need full blown project for debugging and autocompletion.
May I suggest [my library](https://github.com/ndavon/NDHpple) if you're looking for a way to extract certain elements? You can iterate over the results and fetch the strings.
Its just thing that have been affected by the update to iOS 8.1 and 8.2 really. That, and he relies on Parse for a lot of lessons, and they have changed their API a little bit from what's there. Honestly, every time I had an issue, I just straight googled the error and found the solution, or checked the comments for that video, someone usually solved it. There were maybe 10 lessons of the 150 that were impossible if you straight followed the video, unfortunately they were often the major "final lesson" of the chapter. That being said, I don't think its a deal breaker, especially for $10. Those issues might even force you to be better than if they weren't in there. 
I was reading through the tutorials, and was just about to comment on how one might hope a bit more screenshots to make it look less dry; when I realized you have video versions of them on YouTube! And no link that I could find anywhere on the site! (Not to mention the hi-res videos as promised on YouTube) What happened? I daresay if the videos weren't such potato quality, you'd have Lynda beat!
Place the tutorial into its own view controller, present it modally, and don't present a close button until they reach the end. As for an ID number, you could show an alert controller asking for it, with only an "OK" button to dismiss. If they don't enter anything (check the character count after trimming) just re-show. I should add that you need to be careful not to annoy your users on their first run of your app.
Ouch. Yeah, I do get why that would be annoying. I think Lynda tries to solve this by splicing a larger tutorial chapter into chunks of 4-5 minutes each, so you could theoretically swap out just a single chunk as required. This is of course providing that that code isn't then revisited later on in the tutorial... You could also always handle it with YouTube annotations ("use as! instead of as here", etc), but those could also distract from the focus of the task at hand. All in all, I don't blame you at all. Looking forward to the updates!
You want me to write your code for you? :) class ViewController: UIViewController, UIWebViewDelegate { override func viewDidLoad() { super.viewDidLoad() let url = NSURL(string: "https://www.hackingwithswift.com")! let str = try! NSString(contentsOfURL: url, usedEncoding: nil) let wv = UIWebView() wv.hidden = true wv.delegate = self view.addSubview(wv) wv.loadHTMLString(str as String, baseURL: nil) } func webViewDidFinishLoad(webView: UIWebView) { let contents = webView.stringByEvaluatingJavaScriptFromString("document.getElementsByTagName(\"body\")[0].innerText") print(contents) } } Obviously I have taken dramatic coding shortcuts for the sake of brevity: try! is inexcusable here, network access on the main thread is always a bad idea, and so on, but hopefully it shows you the technique.
It's kind of the the point of a scrollview that its subviews don't necessarily have the same size as the scrollview itself - otherwise, scrolling would be a little unnecessary. How do you expect/want the views in the scrollview to change? If you want them to occupy the space that's available on the screen (minus the keyboard area if it's shown), the scrollview doesn't really make a lot of sense. When I have scrollable content in a scroll view and the keyboard appears, I usually set the content insets at the bottom of the scrollview to the keyboard's height, so that all of its contents are accessible. This doesn't change the views inside of the scrollview of course, but that's usually what I want anyway. 
Great! I did too and am charging through it. Let me know how your progress goes!
Thanks for the feedback. I was a little concerned about the issues of updates, but I think it'll be alright. How long did it take you to complete? I'm charging through it right now but suspect I'll slow down a bit further in.
obviously I am doing something wrong. Can you please work with my code in the question? I can't seem to get it working. It would be great if you could share the Xcode project file with me. Anyways, here's the whole code: // // URLManipulator.swift // AppName // // Created by Harshdeep Singh Hura on 29/06/15. // Copyright © 2015 Harshdeep Singh Hura. All rights reserved. // //this piece of code will be implemented in later versions of the app. import UIKit class URLmanipulator: UIViewController, UITextViewDelegate { @IBOutlet weak var summUrl: UITextField! //url to parse @IBOutlet weak var urlSumm: UITextView! //the final output place override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. //See if the clipboard has any URL var clipboardText = UIPasteboard.generalPasteboard().URL if clipboardText != nil { summUrl.text = "\(clipboardText!)" } } @IBAction func urlLoad(sender: AnyObject) { /* HTTP parsing */ var defineUrl = summUrl.text let urls = NSURL(string: defineUrl!) let task = NSURLSession.sharedSession().dataTaskWithURL(urls!){ (data, response, error) in if error == nil { let urlContent = NSString(data: data!, encoding: NSUTF8StringEncoding) // Convert html text to plain text for manipulation. //manipulation stuff here } } task!.resume() } }
No!
Why not??
I just want the height to be equal to the scroll view height 
It took me about 6 months, but that was really on and off. Sometimes I'd go a week and complete an entire section, other times it would take me a month. I think that if I actually sat down and did it non-stop, i'd be able to get it done in about 2-3 months. Of course, I was doing it after coming home from a 10 hour job with an awful commute, so I had to force myself to do it, otherwise I'd just sit and play video games. It also helped that I had a a pretty decent amount of experience as a programmer before starting the course. It isn't strictly necessary, of course, but it helped me clear the starting lessons much faster than if I was learning basic programming concepts from scratch.
That seems fairly reasonable then. I see a lot of people using defaults for things that don't need to persist, which is needlessly wasteful and convoluted, but your situation sounds like a fine use for it.
Me too now! How far in are you? Keep me posted on your progress.
I'd probably still pass the required information as some sort of data object through prepareForSegue and then have the view controller that require that data it to handle it's persistence itself.
I don't think it is a good way to start a business relationship with the mindset that someone is going to lie to you. In the scheme of things... if they deliver when they say they will and what you pay them is an amount you and they are satisfied with... why does it matter?
yep 
Use Dependency Injection. 
Of course it matters. It matters because no one should pay $50 for 1 hour of work when the developer took only 15min to do it. And an inexperienced person will never know how long a code should take to finish, but doesn't mean they should be screwed and taken advantage of for it. Why else do you think majority of employers now expect you to do a 'programming test' when you apply for a job? It's a way for them to tell if you're being true to your words on your resume. 
Well, based on what you wrote, NSUserDefaults is indeed a good choice. You're not storing much, and you need data persistence.
I think using NSUserDefaults to PERSIST your data is probably a good thing. On the other hand, I think using the NSUserDefaults class in each of your controllers is a BAD thing, because of its opaqueness and lack of type-safety. Instead, you should probably read the appropriate values from NSUserDefaults into a struct in your initial VC, then pass that struct between subsequent VC transitions using prepareForSegue. On the other hand, I admit I have run into a pain point with prepareForSegue that has caused me to compromise a tiny bit on the "global variables are bad". I realized pretty quickly that if I want to define cross-cutting behavior that depends on common access to some kind of (essentially) global state, like user preferences, or credentials or what have you, prepareForSegue really sucks for providing that state to VCs because there will be cases where it will also need to provide unique state between two VCs in addition to the global state, which means that each VC might have its own unique implementation of prepareForSegue, and that is a nightmare for maintainability. What I ended up doing was defining a protocol ("AccessToUserPrefs") that defines an optional property representing the state I wish to pass to all my VCs. protocol AccessToUserPrefs { var optPrefs: MyUserPrefsType? { get } } Then I define a UIViewController extension that extends the protocol and defines a computed property with a getter that accesses the global state. extension UIViewController : AccessToUserPrefs { var optPrefs: MyUserPrefsType? { get { return MyUserPrefsType.loadPrefs() } } } This makes the global state accessor a centralized implementation that can be optimized or swapped out in the future without having to refactor N-number of VCs. And your VC logic that merely reads the state can be written in a way that is agnostic to how it was provided in the first place: if let prefs = optPrefs { // prefs is defined, so do user-specifc behavior } If in the future you choose to go with a purely prepareForSegue-based approach, you can change your extension to use objc_getAssociatedObject and objc_setAssociatedObject to mimic instance storage, or you could change it to use a UINavigationViewController hierarchy, etc. EDIT: I would also like to point that the above approach becomes even more powerful with Swift 2.0 Conditional Protocol Extensions.
Look, all coders and developers subscribe to the 'Montgomery Scott Principle' - y'all think we're wizards and miracle workers, so we will always tell you whatever task you want will take way longer than it actually will in order to keep up that perception. But for real, you can only ask how long it would take to code in a perfect and pristine environment... which no one has had, ever. So it's not really a fair assessment.
If you don't have a solid understanding of what you're hiring someone to build you aren't going to be able to assess that persons ability. There is no trick question. Also, If you're budgeting a couple hundred bucks on elance and just giving the person a simple spec, I would say just don't. More times than not it will be a horror story.
Don't hire based on time. A good dev has a deep understanding of the frameworks available and a good grasp of the tools. Also things like gracefully handling errors, properly commenting code etc. Just set out a project total cost and hire the one that seems to be the best fit. What matter is it if it takes them 10 minutes or 10 hours, the important thing is they fulfilled your project requirements and you end up with something you are happy with.
Heeeyyyy!!! We are cake-day bros! (or bro and sis)
Software engineer and hiring manager here. I find that this is a useful thing to check for. I like to include a question that is completely unexpected so that I can witness how the candidate responds and what they choose to say. One such question that has worked for me in the past is "Do you believe that there is extra terrestrial life?" Things to watch out for are obvious signs of indignation or of boredom; work demands are not always what one might expect so I find that the element of the unexpected is a big help for determining the character of a candidate. I know its sounds a bit weird or off-kilter but I have hired some of my best workers this way! The trick is in the delivery; light-hearted and breezy is the way to go.
Finally someone who understands me. You can't easily determine the capability of someone based on their resume alone. You have to somehow give them a test of sort to see if they're capable of what they say they are. 
When you tell people about your app you should say what it does. Especially when posting it to Reddit to get feedback.
OK! I'll edit the post wait...thanks for the advice! I'll always keep that in mind.
To me, it feels like it'll only interest a very niche group of users. Can't be bad for practicing purposes though. Hope it works out.
I'll try that
Simply open TextEdit on your Mac, design your string the way you want, with all the colors, etc, bold, italic. Save the file to an RTF file and load it into an instance of `NSAttributedString()`
I'm not sure how to get it programatically, although I'm sure there's a way, but if you just want to determine if you have 1.2 or not then you can open a terminal and type `xcrun swift` and it will say "Welcome to Swift version \*.\*".
Xcode 6.1.1 means you're using Swift 1.1. The swift version is tied to your Xcode version, so if you want to use the latest features you need to be on the latest Xcode. 6.3 and 6.4 both use 1.2, and 7 uses 2.0. 
&gt; Chris Lattner started Swift when he was at Microsoft What? He said it was started in 2010. 
You're using v1.1.
They said the "first port", we won't know if it will be the whole shebang or maybe a small subset of Swift's current abilities on OS X.
Can I expect to Have 1000 - 10000 Downloads? or am I asking for too much?
Building *for* linux is something promised by Apple. Building *on* Linux is still an open question but I don't think it's hard to see Apple providing or accepting support for the compiler on Linux. Eventually someone will make the compiler spit out Windows-compatible binaries, my guess is that this will *not* make it into the official Apple version but you should be able to do it unofficially. You will have to depend on 3rd party wrappers for each individual GUI framework to build desktop applications. It ships with UIKit/Cocoa obviously. My best guess is that linux and windows GUI wrappers will be 3rd party and poorly supported. Apple does the things that make sense for Apple. In my opinion, the open source move is both a good will gesture to lure hardcore developers and an attempt to see if Swift-for-servers has any legs. A language in which you could easily write both server (linux) and client (ios/osx) would be a huge draw for the Apple platform. Anything else is unlikely as it doesn't contribute to the platform.
my bet is just the base language runtime and what would be swift's equivelent of corefoundation. highly doubt apple will ever release any of their gui frameworks to work on linux, but openstep might be able to fill in the gap or even allow for crossplatform apps.
This might help you a bit. That UI looks a lot like the Passbook UI. It won't be 100% but this tutorial might give you some ideas how you could achieve it. https://maniacdev.com/2014/05/a-uicollectionview-based-component-for-creating-stacked-card-layouts-like-passbook-and-reminders
That's really useful thanks, any idea what to do with the category view stuff? 
- Hacking with Swift has slightly outdated videos or documentation with no pictures, but is very good and useful videos. - iOS Apprentice is great as PDFs. - Lynda has a good course too of videos. Great for the first time as it teaches you some key basics.
I hear ya. It will be a few weeks before you'll be to use RocketDB Beta. I was just saying it might interest you. 
Thanks. They didn't say anything more specific? Just Fall 2015?
How is RocketDB better than Parse? You say you can write all of your code in Swift... Does that include your "server side triggers" on the backend? If not, that might be a misleading.
Write a function that gets called when the user selects a table cell. You can use tableView:didSelectRowAtIndexPath: https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/#//apple_ref/occ/intfm/UITableViewDelegate/tableView:didSelectRowAtIndexPath: I would put all my code in a separate function called displayButton or whatever, and call that from the tableView function
Awesome question! There are tons of great backend services like Parse. RocketDB gives you everything they offer and more. Here is where we differ... All of RocketDB is real-time unlike Parse, and our unique trigger system allows the developer to do anything they want on the server side if needed be in the client-side language they love. Meaning you can handle any technical scenario you can think of that several backend services can't accommodate without having to still create your own unique infrastructure. Since Apple is open sourcing Swift. Yes.
On first launch, set a flag (simple bool variable will work) and save it to NSUserDefaults. When the app launches, you can check for that flag and show your tutorial if they haven't loaded the app before. Contrary to what other users have said, there is nothing wrong with a well-done and unobtrusive on boarding process. Rating an app 1 star because of a tutorial is obnoxious and unnecessary. If the app is poorly designed thats one thing, but there's nothing wrong with a tutorial or walkthrough.“
Depending on what exactly your doing and how your doing it of course but..... When your user presses said button couldn't you add the entry to your collection (presumably an NSArray) at index 0 and then call reload data for the table? That should add it to the top instead of the bottom. 
For the "paged controller" you should probably take a look at [UIPageViewController](https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/ViewControllerCatalog/Chapters/PageViewControllers.html). I'm attempting to make something to that effect, sort of like the Instagram "Activity" tab (dual lists, swipe to navigate to each of them). This view controller helped.
How do i get page view controller to work with the category tabs instead?
Gotcha. Thanks for the comments. I think I have enough to make up my mind, and already building a custom backend, I guess I'll check out Parse next time! 
Okay take this with a grain of salt because I'm a beginner/intermediate iOS dev, but my understanding of how the UIPageViewController works is that it has a list of ViewControllers that it can display in a page format. Swiping to the next "page" transitions to the next view. Using the [delegate protocols] (https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIPageViewControllerDelegateProtocolRef/index.html) you can track which view is showing (and which one is coming up) and send that information to the category tabs (to do the little under-bar animation of sliding in conjunction with the user sliding to another category). I don't know specifically how you would set up the category tabs... they might just be custom UIViews.
apple also open sourced FaceTime. oh, wait...
UIColor.redColor().colorWithAlphaComponent(0.5) //0.5 is 50%. alpha goes from 0-1
[Apple Documentation](https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/GestureRecognizer_basics/GestureRecognizer_basics.html)
1. The only real difference I found was needing to put "as!" in place of all the "as" since that recently changed, but that was it. If you use iOS9's Xcode, there are a few other differences, but part of troubleshooting them is learning. 2. Depends how new you are. I found it decent as a good "I know other programming languages but not Swift" refresher. 3. No. It differs with more advanced stuff, which you aren't going to be using during training.
Give them a small project and rate the quality before rewarding them something larger. Did they handle errors well? Did they work out the issues? Did they do proper scoping, etc. Time is not a fair trial unless it is outrageous because we all do different tasks at different speeds. Earlier today I could remember the function to parse JSON, so I had to read the documentation. If you "gave me a test" on this, someone might beat me, but did that tell you anything?
Can you be more specific then linking the entire tutorial? 
There's not a lot here that is really helpful in working out what your problem is. One thing that jumps to my mind is that tutorial is using a lot of hardcoded numbers for locations and sizes, that means your elements will only be in the correct position for one screen resolution. All others will look wrong.
I suspect that your image for filterButton is the wrong dimensions, or lacks the @2x/@3x in its name. Also, you should use initWithImage if you're not going to use text. 
Tomorrow I'm going to dive into using this in xcode until I really understand why and how it works. But right now I'm going to go ahead and say thanks!
Only about halfway through section 4 tbh, I got it a few days ago and it took a while to get iOS running on a virtual machine on my computer but now it's working and set. What about you?
Tried looking with address sanitizer turned on?
I have been looking for a backend solution which will allow me to prevent certain fields of a class being sent to a client based on another field. Parse gave me the option to use cloud triggers, but that couldn't stop someone using the parse api to query the class directly. Would this solution offer me that?
I'm also curious about the compile speed benefits people are experiencing as whole module optimisation is supposed to parallelise the build progress better. What difference are people seeing? Like patneimeyer I'm unable to get it working due to compiler segfaults but I'm curious.
The point of value types such as structs is that they are supposed to be immutable. This is to avoid a whole class (no pun intended) of problems when working with reference types and mutable state. That said you can mutate the internal state of a struct by adding the mutating prefix before he func keyword
That works. Thanks. And it gave me another key word to look up for further understanding.
I use [SwiftMath](https://github.com/madbat/SwiftMath) if that's any help.
Thanks. Very clear explanation. Much appreciated. On reading about the differences of classes and structs, a lot was made of copying and referencing, but I do not remember reading about not being able to change a value from within the struct. Maybe 'value types' was used, but the implications of this was not mentioned. Thanks again.
The warnings basically tell you that your application won't look like it does when you built it in the interface builder. You can ignore them, it won't hurt the functionality of the app. If you want to get rid of them select one item in the interface builder that throws one of these warnings and then click on the little [triangle](http://imgur.com/Z0QIL7K) in the bottom right of the interface builder. Then click on update frames. Now the warning should be gone.
Probably because there's still a fair way to go before the Storyboard interface is the tool it should be. Also because understanding how to programmatically design interfaces is a good skill to have. In short, no, you're going to have to convert it the hard way.
Can you build a working one for me please? I cannot figure it out. Maybe I can look at yours and learn something.
Maybe this book can help you, I used the previous version to get going with iOS 7 and obj-c https://www.createspace.com/5177731
 Even simpler with Optional Chaining: if let val = age.text?.toInt() { result.text = "Your cat is \(val * 7)!" } else { result.text = "Please input a whole number!" } BTW, In Swift 2, `String.toInt()` is replaced with `Int(String)`.
I am following the tutorials. They are very thorough &amp; they provide source code &amp; storyboards for each. So far pretty good.
[iOS Apprentice](http://www.raywenderlich.com/store/ios-apprentice)
I wrote my own, so obviously I think it's rather good. It's also free, which certainly helps! [Hacking with Swift](https://www.hackingwithswift.com) – it has 35 free tutorials right now, all graded so you learn as you build real projects.
Note that `text` from a `UITextField` should return an implicitly unwrapped value, so you shouldn't need the optional chain. You can just use: `if let val = age.text.toInt() {`
Nope, don't have a clue
Well, you're right to be thinking you should be usin the storyboard more. Always opt for that when you can. It makes your project more maintainable. No, there's no way to turn your swift code into a storyboard. 
Here you go, some random feedback on literally anything. :-) Code style: always lean toward "let" rather than "var" when possible. var means the variable is mutable, which is undesirable if it doesn't need to be mutable. You have duplicated code for calculating the "rating" and "roundedRating" string - turn this into its own function so you're not having that same code copied and pasted. Low priority, but it'd be good to add some i18n (NSLocalizedString) sooner rather than later, makes a better impression. You have lots of storyboard warnings, clear those up. Check out the device previews with an "assistant editor" to see what might be going wrong. "Update frames" / "update constraints" is your friend here.
The Apple Swift language docs discuss this: https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html "Function parameters have both an external parameter name and a local parameter name." ... "By default, the first parameter omits its external name, and the second and subsequent parameters use their local name as their external name." ... "The use of external parameter names can allow a function to be called in an expressive, sentence-like manner, while still providing a function body that is readable and clear in intent." More detail at the link.
:(
This will be changing in swift 2.0
[Treehouse Training](http://teamtreehouse.com/tracks/ios-development-with-swift) has veen very helpful with Objective-C so I would assume their Swift course is also very informative. Also, [iTunes Standford Course] (https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099)
Lots of people like the [Stanford course on iTunes U](https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099) - it's super popular and has excellent reviews. I'm not sure whether they take you through projects or not. I wrote a [5-Part Guide to Swift](http://roadfiresoftware.com/free-swift-course/) that takes you through creating a project - a REST client that talks to a backend JSON API.
Thank you! How would I incorporate this library in one of my projects. Sorry, I know this is really basic and all but I am an absolute beginner with swift
Hacking with Swift looks seriously awesome. Nice work!
I see an optional in the docs as well, but that doesn't seem to be the case in Xcode 6.4: [http://imgur.com/sfMQeWo](http://imgur.com/sfMQeWo)
Thank you!
Once you're a little more comfortable with the way it's done, I'd also check out this for turning storyboard identifiers into code: https://github.com/krzyzanowskim/Natalie It's going the opposite direction of what you want to do, but it gets rid of worrying about the strings all the time.
Thank you! I come by here every day, so if you have questions you can post here or on /r/hackingwithswift and I'll do my best to help.
It entirely depends on what you want the Bible app to do. Building an app that essentially lets people read the Bible start to finish would have a completely different design than an app that would allow someone to enter a verse number and read the specific verse. What's the actual purpose of the app?
Don't use Jabber unless you want to waste your time. XMPP libraries are old, unsupported and usually have poor documentation.
It's actually the iTunes U course mentioned below.
iTunes U is free and will get you started.