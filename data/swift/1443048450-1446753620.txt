Probably. Most of my work has been fun little apps mostly for myself, and my OS X development work was all open-source (save for some in-house utilities I wrote at a couple jobs). Point is, the market is saturated enough in certain locales (such as San Francisco) that employers won't even be interested unless you've shipped a few semi-popular apps. I was actually hired by one startup to write an iPad app, but once they learned I knew Python they had me do backend web development instead; they never got around to doing an iPad app (in fact, the CEO scuttled the idea after I'd worked there for a few months; he decided there was no future in the mobile market, I guess). I got a job at another startup, but the CTO decided to buy another smaller company for their engineers, rather than letting existing employees do the iOS app. He offered to let me move to the mobile development team, but then retracted his offer a couple days later; I later left the company for unrelated reasons, having *almost* gotten a chance to work on iOS stuff. I don't actually do much OS X or iOS development anymore, though, so I'm not that concerned nowadays.
I don't think so because you need to make sure Auto-Layout is working correctly.
When I was starting out I found this course really helpful: - [Code with Chris - How to make an iPhone App](http://codewithchris.com/how-to-make-an-iphone-app/) It's aimed at beginners, but it's a good place for even an experienced programmer who is new to iOS and Xcode to start as it provides a good overview of basic technologies and the IDE itself.
If learning is your objective, than definitely check SwiftStub.com out and just work on learning the language, then move on to learning Cocoa. I had a good talk with one of my co-workers yesterday and one of the biggest hurdles to learn is separating the language Swift/Objective-C from Cocoa. It's not just all one big iOS thing jumbled up. I know I had this problem of separating what the language provides and what Cocoa does, when I first started doing self-learning. It's all very possible to do. If i can do it, you can for sure do it. Just have the desire and dedication.
Just a small correction - in this case you're not allowed to pass in nil, because neither of the parameters is optional. You define a parameter (or any constant/variable) as optional by placing question mark after the type, so if you wanted to be able to pass in nil as the first parameter for example, you'd declare your function like this: func myFunctionName(param1: String?, param2: Int) -&gt; String { return "hello, world!" } Notice that in this case, parameters don't do anything, so your function would work if you wrote it like this instead: func myFunctionName() -&gt; String { return "hello, world!" } Parameters are used to "parametrize" the function, they are only useful if the function is going to use them. Shameless plug - I developed a free course that teaches programming basics with Swift to complete beginners, check it out here: [Swifty Ninja Jr](http://galibugs.com/swifty-ninja-jr/) 
Excellent. Thanks for the prompt answer!
http://www.h4labs.com/dev/ios/swift.html?q=animation&amp;age=10000 
[You might like my own tutorial on animations.](https://www.hackingwithswift.com/read/15/overview)
Thank you!
I noticed this with my test flight build submissions, it's extremely annoying.
I've used Swifty JSON in the past. It's great for parsing. There's a good tutorial for it on raywenderlich.com http://www.raywenderlich.com/82706/working-with-json-in-swift-tutorial
So i found UIView.animateWithDuration but it does not seem to be working. According to the documentation and my understanding the label should say `Do these things` and then after 4 seconds should read `I don't want to` Display.text = "Do these things" Display.adjustsFontSizeToFitWidth = true UIView.animateWithDuration(4.0, delay: 4.0, options: [], animations: { self.Display.text = "I don't want to" self.displayMasterArray() }, completion: nil) 
Yo, [here's a working example](https://gist.github.com/anonymous/1d14ef2be2803c917b6a) that should be good enough to get you started. You should be embarrassed that it took you that long to figure that shit out. In fact, you should probably just quit coding and major in liberal arts or something - you're just not cut out for this. Also, [here's proof](http://i.imgur.com/pTJ8UZC.png) that it's working. 
Yes, that's exactly it. Implement the method in your controller (and declare your conformance to the WKUIDelegate protocol), and set the controller as the delegate.
Swift is shaping up to become a really good language. I think this should be exiting to a lot of people who aren't necessarily swift fans, just because it is going to push functional programming more into the mainstream. I know Swift isn't a functional language but it does make a lot more people familiar with functional constructs. Swift is going to be mainstream long before Scala, Clojure, F#, Kotlin, Ceylon or Rust.
I really hope someone is going to build a swift version of Django. I'd really love to use swift for web-development. :-D
Hi I have seen Tesseract but looking for alternatives. Plus I mentioned OpenCV and Tesseract already ðŸ™ˆ 
About that bit &gt; "If your code is in the late stages of development and you must stay on Xcode 6 for a little while, you will need to continue to use OS X Yosemite as your development OS. The combination of OS X El Capitan and Xcode 6 is not supported for App Store submission due to significant changes in the underlying architecture." I have an app that is written in Swift 1.2. It needed a quickfix, that I did not have any problem submitting from an El Capitan GM system with Xcode 6. It seems to happily coexists with Xcode 7, although I haven't tested it much.
I couldn't agree more. :-) Damn I hope someone will build that. It would be cool if Taylor Otwell would suddenly be interested in Swift. I love the syntax that he often creates with his libraries.
thanks
Well...you can try it for free for 10 days. And 10 days. And 10 days.
I forgot. Does iOS 9 come with Swift runtime or is it still bundled with the app?
I don't believe you can an app waiting to released and create a new version with a new build pending review. IIRC, you have to either release the app or remove it from "pending dev release" before creating a new version. It's a minor hassle.
You can do this programmatically by defining the background in the view in the viewDidLoad(). self.view.backgroundColor = UIColor(patternImage: UIImage(named: "background.png"))
There's lots of stuff on github. i can't tell you what's good though. http://www.h4labs.com/dev/ios/swift.html?q=github&amp;age=10000 You might want to go through the stuff I've tagged as beginner: http://www.h4labs.com/dev/ios/swift.html?q=beginner&amp;age=10000 
Google is not the first place you should look. The first place you should look is the documentation. Look at the class reference for `NSImage`. You'll see that there's a property simply called `template` that you can assign to.
Have you looked at PaintCode and QuartzCode? They work in a similar way you've described.
Thanks for the advice, it worked perfectly.
Best way to know if something is worthwhile is to do it, see how it does, then pivot if necessary. FWIW, As a business, it's hard to tell if it will be successful, as a tool, it may very well be.
For sure, but right now iOS development alone secure a huge following for Swift. This will make it more interesting for other people as well once it goes open source because people will know that there is a community, libraries, resources, people to ask for help, tools etc. A lot of nice languages have lingered on almost dead because they never managed to reach critical mass for a community. Swift is already across that milestone.
We are happy to announce major update to Swiftify (https://www.objectivec2swift.com). From now on, you can convert full files and even XCode projects! The following features are now supported: â€¢ Join .h and .m files into .swift file(s); â€¢ Merge declarations and implementations of classes, methods and properties; â€¢ Convert XCode project file (by replacing .h and .m file references with converted .swift file references).
Check [Awesome Swift](https://github.com/matteocrippa/awesome-swift), there are lots of interesting stuff there, you can surely find something useful. Not exactly a library but when you need to write a custom UI component first check [CocoaControls](https://www.cocoacontrols.com), most of the projects are written with Objective-C but sometimes it makes life easier. 
All of Artsy's production apps are open source. Thats pretty awesome. [swift kiosk app using mvvm](https://github.com/artsy/eidolon)
This is actually super innovative. Go for it.
Try this - var str = "Hello! Go to hell! " let regex = try! NSRegularExpression(pattern: "\\bhell\\b", options:.CaseInsensitive) str = regex.stringByReplacingMatchesInString(str, options: [], range: NSRange(0..&lt;str.utf16.count), withTemplate: "***") print(str)
not if someone else beats him to it
No, that doesn't make any sense, especially your second example is just plain confusing syntactically. If you need to check if a certain variable matches one of multiple values you could check if it's index in the array of those values is &gt; -1 (at least that is how you do it in Javascript, I haven't used Swift at all).
This is a hack, but you can do: if let lat = Optional(locationManager.location.coordinate.latitude) where lat &gt; 30 &amp;&amp; lat &lt; 40 { // ... } But it's just as simple to do: let lat = locationManager.location.coordinate.latitude if lat &gt; 30 &amp;&amp; lat &lt; 40 { // ... } Edit: Also, just for the specific example you're using you can use ranges quite succinctly: if (30.0..&lt;40).contains(locationManager.location.coordinate.latitude) { }
Thanks! How would I proceed if I wanted to replace multiple strings at once? like different patterns and withTemplates? So 'hell' gets replaced by 'H***', 'damn' by 'd***' etc?
This is actually a problem I've had. I try to churn out app ideas based off the personal issues I face but this never occurred to me. Great idea. Go for it! Good luck!
Thanks. fastlane looks very interesting.
My 2 cents - You may want to nail down who your target user will be and then develop the product accordingly - Designers already have many tools and u need to provide more value and differentiation. In general it is difficult to change people https://www.quora.com/UI-Design-Tools/What-is-the-best-modern-mockup-software Whatever u do my recommendation will be to execute the project incrementally and get customer validation as early as possible To turn this product into a business make sure all elements in BMC are addressed http://www.businessmodelgeneration.com/canvas/bmc 
If someone else also does this, that just validates the idea for me. Well, I quite close to release a beta on this, so...
Hmm... CV would have been cool but, at least you've found a good use for selfies. Keep the "best of luck", everybody needs some now and then 
Oh absolutely and thanks for it. I don't even know if the world needs this or not. That's why I made the mock ups and posted this in a few places. The response has been positive (like in this thread), so I started making this some time back. Should have an MVP out soon.
Ok I understand now. I have that feeling about many things/apps often but I guess who are we to judge...lol, thanks for the input though.
The best first language is the one you're excited about. Writing code (any code in any language) is by far the most important thing for a new programmer. Having said that, I think that Swift is a great language and is fairly easy to learn, and depending on your goals, might be a better choice than Python or Ruby if you really don't care which one you start with. I say that because the Swift's syntax is a little more traditional and less idiomatic than Ruby and Python. I think that Swift will set you up to learn other languages faster than the other two. But, the tools around Ruby and Python are a little easier to wrap your head around than Xcode. Writing in a standard text editor and running command line is pretty straight forward. Yes, you can do command line stuff in Swift, but all of the tutorials are Xcode based. Just dive in, man. And feel free to ask questions. If you get a bad response here (some folks are a little touchy about what "belongs" here) then try /r/learnprogramming or message me directly.
http://blogs.tntech.edu/kimmy/files/2015/02/4lFdlEN.gif
IMHO, such tutorials are a waste of time from the perspective of the writer. All the basics about swift syntax are in swift book, made by apple and distributed through ibooks. Allthough, if writer want's to continue tutorials into more advanced levels or go into library tutorials, maybe some basics on hand are convenient, but if it's only the basics, then it's just rewriting of the book.
Trying to understand optionals in terms of null is a little misleading - it can kind of give you the wrong idea about what an Optional is. `Optional` isn't a solution to a problem that `null` created - it's more that both `null` and `Optional` try to solve the *same* problem. For some functions, returning a value doesn't really make sense. The `indexOf` method on `CollectionTypes` is a good one here. It returns the index of the first element in a collection that equals its parameter: ["a", "b", "c"].indexOf("b") // 1 (it can also work with a predicate) Now, if the function *can't* find the element in the collection, it has three options for what it can return. The first is a sentinel value - something that matches the type of what the method usually returns, but doesn't make sense in context. ~~In Python, for instance, you'd get back `-1`~~ (correction - see below). This is a little hairy for obvious reasons: you've got to look up the documentation for each sentinel value, if you forget the check for it it could be passed to loads of other functions, never being discovered, etc. The second option is to use `null`. This is a value that inhabits every type. It's kind of like a sentinel value, in that sense. It's one better, though: it's the *ultimate* sentinel value. Instead of checking whether the "not-found" value for `indexOf` is `-1` or one-past-the-end, you can know that it will be `null`, as that's the convention. Still, it's not perfect. You can forget to check for it, you can pass it around. You *still* have to look up the documentation on each individual method, to see whether or not that method can return null. If you forget *once*, it spreads throughout your code, and there's no easy way to check which variables may or may not be null at runtime. The third option is `Optional`. Think of it like a box which may or may not contain a value. In other languages, every type is like that box: an `Int` is a box which may or may not actually contain an `Int`. With optionals, the type system can make sure that you specifically deal with the possibility of the box being empty. It also means that you can cordon off values which may be `nil` clearly - they're all of a different type. Finally, if you want to say "screw it, I'm a grown up, I know when my values are null and non-null", you can use `!` to unsafely unwrap optionals. You can still use sentinel values like `-1` in Swift if you want to, of course, but `null` isn't possible: if a variable's type is `Int`, then it contains some `Int`. Thinking of it in terms of null again makes the benefit clear (I can be sure that every non-optional in my code *actually* contains a value), but it's important to know that that's not really accurate. It doesn't make sense to say "Swift is great, because every variable contains a value", because in Swift, a variable *not* containing a value just doesn't make sense. It's worth noting that these ideas aren't really unique to Swift: they've been knocking around in several other languages for decades now. What might seem new and weird is actually old and battle-tested. (specifically for Optionals, the one to check out is Haskell, if you're interested) **Edit:** As /u/masklinn pointed out, Python's `index` method actually throws an exception if the item being searched for isn't in the list. The `str.find` method *does* return `-1` for "not-found", though. Exception handling is, of course, another option - there are loads of other ways to deal with this idea of "a function which may or may not return a value" - saying tat there are only three options is a bit of an oversimplification. In Swift, though, `Optional`s are treated quite differently to errors. Generally speaking, if something is treated as an error, it's actually seen as bad practice to use an `Optional` to describe it. You should expect to see `nil` in the normal operation of your code: an error, though - either `throw`n or in a `Result` enum - should be unexpected.
Thank you for your thorough response. The historical context was very informative. 
Congrats! Do you have a background in design? It looks really good! What library did you use for the chart? 
Love it! Did you use photoshop for the icon? It looks gorgeous. 
Thank you ! I actually used Illustrator, I guess the same thing could be done with photoshop but I'm just more confident using Illustrator ;)
On a side note about optionals. You should check out Kotlin for Android development, it also has optionals. (Among numerous other benefits) Once you get used to the notion of optionals it's really quite nice.
Ok So I used this code. func displayMasterArray(){ timer = NSTimer.scheduledTimerWithTimeInterval(0.5, target: self, selector: Selector("changeDisplayText"), userInfo: nil, repeats: true) } func changeDisplayText(){ if index &lt; masterArray.count { Display.text = ("\(masterArray[index])") index++ } else { timer.invalidate() //userInteractionEnabled = Yes Display.text = ("Go") index = 0 } } 
Looks good! Congrats!
Cool, I couldn't tell if it was force + drag, if not I think it would be nicer, and if possible give feedback with the clicker/vibratory_thingy of each step while he slide. 
Its currently just dependent on force applied. There is haptic back when clicked at different levels
Interesting. Never thought about it that way. Thanks for the informative response!
Closures are great for providing a callback function or something, I use them all the time and I don't even know their true nature. Help.
OP: 'I can't actually think of a time that a closure would be needed where a function wouldn't do exactly the same thing in a much clearer way' Well, you've got all the concepts: code, capturing variables, syntax. So, you just need to have a use-case where a closure does something different, something better than a function. Now, I'm going to assume you have seen plenty of examples of using closures and loads of pedagogical reasons for using the closure. So, I'm not going to offer yet another example of closures for you to gaze upon. I'm going to suggest that what you need is a real life situation where, although you _might_ solve the problem with a function, you will realise that a closure offers a better solution: maybe you can eliminate some extra variables or parameters or something. You don't need to know more facts about the _answer_; you need to have a real life _question_ to which you can apply this answer. And only your future work can supply that question; you've already seen plenty of other peoples examples and problems; you need to have your own problem. In the meantime, just keep using functions! Anywhere you can use a closure, you can use a function: let unsordidList = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten"] let sordidList1 = unsordidList.sort { (item1, item2) -&gt; Bool in item1 &lt; item2 } func isLess&lt;T: Comparable&gt;(item1: T, item2: T) -&gt; Bool { return item1 &lt; item2 } let sordidList2 = unsordidList.sort(isLess) wrt 'in' well, again, I would say you know it goes where it goes and when you need to put it and when not (I assume) and 'in' is the word they chose and you just have to use it. I think other languages might have other syntax (maybe some kinds of arrows? =&gt;? or -&gt;?) and now it is part of the language and I don't see there's much you can do about it except to accept it and hope that when you design and implement your own programming language, you will come up with the one true way all these others have been scrabbling to find ;-)! 
Your post is completely unrelated with swift. Paste your problem and code examples in stackoverflow
&gt; In Python, for instance, you'd get back -1. Actually you'd get option 4 "an exception": &gt;&gt;&gt; [1, 2, 3].index(5) Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; ValueError: 5 is not in list `str.find` returns `-1` if the needle isn't found[0], but `list` does not. [0] it also has `str.index` which behaves the same as `list.index`. Incidentally because negative indices are valid in Python (they index from the end) the sentinel value `-1` is kinda crap: in many languages if you index using it it'll fault, in Python it won't.
You're dead right. Thanks for the correction. 
This brilliantly explained closures for me, thank you!
Although this is a reference to a newsletter that I curate, given its focus is Swift open source, I thought it would be reasonable to reply with a link. http://SwiftSandbox.io covers Swift open source projects on iOS and OS X. 
Great app! Some feedback: * (**bug**) Somehow the title of your app in Notifications (next to the icon) is in Hangul/Korean? The rest of your App is in English. My system language is English. * (**feature**) An option to enter an amount in the notifications widget to get an exact conversation * (**feature**) Apple Watch support! Input an amount to convert a currency (from your favourites list) quickly on-the-go. If the app is watchOS native and fetching exchange rates only happen one time a day, using it on the watch should be fast! Again; great looking app! I would pay for this.
Thank you ! Great feedback. 1. The bug you mentionned is very interesting. Can I ask you if you have a korean keyboard installed on your phone ? I have noticed the same thing happening on my SO phone and she has the korean keyboard installed. It seems to me that the korean name appeared after she updated to ios9. I tried to replicate the bug on my phone by installing the korean keyboard and switching between languages without luck. 2. I have never considered making an Apple watch version but the way you describe it makes me want to do it. I am actually looking up second hand watches on ebay to try to get started :) 3. I agree that it would be nice to be able to convert directly from the extension. I've been thinking about doing that for a while and I'm trying to circumvent apple's restrictions on inputing data in the extensions by making a num pad that would pop in the widget when needed. Hopefully that will work nicely. Thanks again for your feedback
This is awesome! Thanks so much!
Totally agree that use cases is what main piece of the puzzle that I'm missing. Thanks for the reply and the code! :)
Not at all, to be honest. I think most of us rely on autocompletion and documentation. After a while, the stuff you use the most sticks - for a while. Nothing wrong with that. I haven't used Swish for a month or so (but fore that, daily paid contracting work), and here's roughly what I remember: - most of the syntax - View controllers exist, and there are different subtypes of them. Can probably think of 3-4 different types. - I'm pretty sure I know how the touch lifecycle and the VC lifecycles work. - CoreAnimation is a thing. Seriously, that's basically what I have loaded into my brain now. I know where to look up the rest.
You didn't mention the "final" form, `let add = (+)`. (Not enough type information here, but your examples don't have that either).
You mentioned elsewhere that you "don't know where to start". When I taught programming I saw this all the time: students trying to write code from the top down, from start to finish. That's not how it works. We typically build from the inside out. Attack one very small problem: print out a rectangle's position and size. Draw a black rectangle on screen. Change colours. Draw two rectangles. Draw a hundred. Replace the colour with an image. A hundred different images. Download images from the web. Make them scroll when you swipe the screen. Make them scroll nicer. Take your time. This stuff is hard. If you feel slow or stressed, here's my favourite fact: I'm a professional game developer since ten years or so. I average about five lines of (correct) code per day. You can keep up with that, I promise.
Any ideas on what app should I make first? Im new with programming and with swift. Where should I start? What should be my first app (except from "Hello World")?? Sorry for bad english.
I think you are vastly underestimating the code required to do this. 
Fear not; you do not need to memorize methods however you will just start to learn them becuase you use them so much and they typically have very logical names. Never the less here are some things to remeber: 1. You can *always* use the internet to look things up that you don't remember. 2. You will start to learn the methods you use a lot by heart and you will not need the internet any more just because you use them so much. 3. Most methods have very logical names that allow you to assume what they do 4. Your IDE will help you out too!
Thank you so much! I am honestly speechless you could not have said it better and you also opened my eyes a little more. It's almost as if I thought there were restrictions when coding. They aren't necessarily restrictions. You look at a problem and YOU decide how to solve it. Yes there may be better methods to go about doing it but you have to let your mind be free and that is where the joy of coding really is. Freeing your mind and imagination of the endless possibilities. I think now that you have opened my eyes a little more, learning basic coding isn't the issue. My problem WAS that I thought there was a right and wrong way of doing things. And yes there are wrong ways of doing certain methods but that's not what I mean. I feel like I'm just rambling on at this point but I just really wanted to thank you again for your awesome comment. 
Thank you so much! I'm not going to give up! I am seeing my weaknesses and I am working on them. Although my main weakness seems to be coming up with interesting app ideas. I can think of a few but there haven't been any that stick out to me and make me want to jump on it immediately. 
It stands for Integrated Development Environment and it is what you write your code in. Some IDEs are XCode, AppCode, IntelliJ, PyCharm, Eclipse, etc
I started that course and watched 2 or 3 lectures then some stuff came up. I've heard that it starts easy and ramps up pretty quickly and becomes a pretty difficult course. What are your thoughts?
I'm having issues as well. I'll open a project and there will be random errors, if I close and re-open, those errors will go away. I have a few cocoapods in my project (Alamo, Swiftyjson etc) and sometimes xcode will randomly not be able to load the module and throw an error, but when I build it goes away. It's all really annoying so far, it feels so buggy for a official release. I was very close to submitting my app with xcode 6 but not 7 is putting me back while I try to figure out all these errors.
I get weird errors like this all the time. Sometimes (but unfortunately not always) it can be fixed by nuking the Derived Data directory and restarting Xcode (Preferences &gt; Locations &gt; Derived Data &gt; Finder), or cleaning the build folder (hold Option and click the Product &gt; Clean Build Folder). Edit: And yes, I agree it's buggy, but XCode+Swift has always been buggy for me. It seems like some source code causes XCode/Swift to behave really erratically. 
More like autocompletion in Xcode. 
You know how you can call functions? Closures are are basically stopping to declare an inner function that implicitly passes in a copy of all the variables of the outer function, then passing that newly defined function to some method call, or to put it in a variable for later It is merely syntactic sugar on doing that manually normally, making a really long parameter list on a helper function then passing it as a helper function Now swift has some syntactic sugar which lets you define a closure for the last element in a function call that is a closure as a trailing block, this is just sugar on passing a normal closure into during the function call Lastly, "in" is a delimiter starting up the text of the closure after showing its parameter list, nothing complicated there, it does look a little weird though with the rest of the C-Style syntax everywhere
I'd go scheme/racket then swift Swift's hardest concepts are in that language as well, and it is designed for teaching and quite a bit smaller http://www.ccs.neu.edu/home/matthias/HtDP2e/ is a good book, and there are free online courses using it After you get the basics of programming using it, swift will be waaaaay easier to get
I'll give that a try. Thanks. Xcode 6 seemed to be in a good position. I wish I had stayed with 6 since I don't really need any new features. 
Try a local-only note-taking app. (I'm assuming you don't really care for features with this) 
This is what you are looking for: https://github.com/tsuchikazu/iTunesSwift
What about just writing a function that takes the thing you're testing as the first argument, and then an array of closures afterwards that test the value? I think there's a way to not need the closure brackets too with @autoclosure or whatever. Then you could do and(valueToTest, $0 &gt; 30, $0 &amp;lt; 40) {} Or add an extension to Any so you can call value.isAll($0 &gt; 30, $0 &lt; 40)
That's nice, but not really an example for a protocol extension use case - instead of `extension ErrorPopoverRenderer where Self: UIViewController`, you could just do `extension UIViewController: ErrorPopoverRenderer` (same for UIView). 
I've been writing code for about 20 years and I am terrible at memorizing anything. It certainly would help to have photographic memory with programming but generally I use tools to help me and lookup stuff frequently. Many advance editors and IDEs will do completion on method names and function names. Efficient search functions are key. Often I remember doing something similar to what I am doing earlier. I might remember some keyword related to that so I can search it up on my computer and lookup that code. In fact my memory is so terrible that I use a program called Ulysses a lot. It is great and organizing lots of documents and snippets and allow you to filter and search it. Whenever I have learned something new, fixed a tricky bug or something I write some condensed notes on it in Ulysses and add links to web pages with more info etc. So that is my general advice. Find tools that will help you deal with your own deficiencies.
What about a game? Password generator, app that lets you take pictures of stones and figure out what they are called, A sophisticated calculator, An app for helping out people playing board games like D&amp;D, An app for practicing or training on something like a taking a drivers license, An app for measuring distances to an object you see. The latter you could do with trig, let the phone measure angles etc. Or perhaps a stop motion animation app (let it take multiple pictures you can put together to a movie). Anyway lots of things you can do.
You know for us professionals we often don't remember how to do stuff from scratch either. Often we just take some previous app or something we have done and reuse parts of that. Just get used to reading existing code and figure out how you can lookup what various methods and classes do that you find by using the built in documentation. Learn how to navigate code with xCode. A lot of my work is about looking up stuff I have done before or stuff other people have done and repurpose it.
Here is what I have now: //One ninja is carrying two baskets with 3 watermelons each, and another ninja is carrying one basket with four watermelons in it. Who is carrying more watermelons? // var ninjas: [String: [String: Int]] = [ "ninja1": [ "baskets": 2, "watermelons": 3 ], "ninja2": [ "baskets": 1, "watermelons": 4 ] ] var ninja1: Int = ninjas["ninja1"]!["baskets"]! * ninjas["ninja1"]!["watermelons"]! var ninja2: Int = ninjas["ninja2"]!["baskets"]! * ninjas["ninja2"]!["watermelons"]! //max(ninja1, ninja2) if ninja1 &gt; ninja2 { print("Ninja 1 has more watermelons") } else if ninja2 &gt; ninja1 { print("Ninja 2 has more watermelons") } else if ninja1 == ninja2 { print("Both ninjas have equal watermeolons") } else { print("Something went wrong.") } If you notice the commented line in the middle, I'd like to somehow pull the variable name rather than value from the max function. Then I could eliminate my if block and instead do something like: print("\(ninjaWithMore) had the most watermelons") The if block works but if I were to add additional people, my if statement would become unwieldy. And I considered matching the value to the variables but that seems wrong. Maybe there isn't a simple way to do this. I keep thinking there's something I'm just not are of though. let winner = max(ninja1, ninja2).key That doesn't work but is what I'm looking for. Maybe I'll need to code a function that loops through the users, to account for more than two, and then does a comparison and stores the user and value for each one checking to see if current is greater than all previous. That gives me what I want and accounts for any number of users.
Wow thank you so much for the awesome advice! I will definitely try it out!
Yes. I had a weird 'error' in a piece of sample code I was typing in. It wanted to replace 'let blah' with '_' !
I was actually going to say the opposite. I think the beginning is where it's the most difficult (and the least interesting). I'm on lecture 12 of 16 and things are pretty fun now (animation, etc). I struggled getting through the reading assignments, they're obviously all technical, and really long. I think you end up reading 95% of the entire "Swift Programming Language" book. Also check out the WWDC talks from 2014 on Swift after you watch the Stanford videos. They go over most of the language features and all of the basic things you need to remember.
I was able to get an app up and working in right at a month. I did spend a load of time each day on it. I used a udemy course to get me out of the ground so to speak. I fallowed that up with a lynda.com fundamentals that extended my core swift knowledge. I am now thinking of what i want to do and pretty much able to execute on simple stuff. I also would say remember we are here in this sub to help so if you get total brick walled reach out. I reached out when i had hit my wall. The users here were spot on and got me back on the road. This I think is the most crucial advice i can give people are out here on reddit and they will help you. This will get you over what ever minor wall your facing which keeps you moving. I think it works like if your moving your not dead the same goes with code. 
Ya I might do that. Thanks. 
Here is what I have now... doesn't account for equal values but I'll fix that later. var ninjas: [String: [String: Int]] = [ "Ninja 1": [ "baskets": 1, "watermelons": 4 ], "Ninja 2": [ "baskets": 2, "watermelons": 3 ], "Ninja 3": [ "baskets": 3, "watermelons": 3 ], "Ninja 4": [ "baskets": 1, "watermelons": 3 ] ] var maxNinja = "" var currentTotalMelons = 0 for (name, melons) in ninjas { let totalMelons = melons["baskets"]! * melons["watermelons"]! if (totalMelons &gt; currentTotalMelons) { currentTotalMelons = totalMelons maxNinja = name } } print("\(maxNinja) has more watermelons")
If you want your comparisons to be more sophisticated, you've just got to make the closures a little more sophisticated. Problem is, obviously, that it gets a little hard to follow, so it's a good idea to break a lot of it into separate functions. First off, you should write a function that totals the melons from a given dictionary: let total = { (d: [String:Int]) in (d["baskets"] ?? 0) * (d["watermelons"] ?? 0) } total([ "baskets": 1, "watermelons": 3]) // 3 There are obviously a load of ways you can do it: func total&lt;H : Hashable, I : IntegerType&gt;(s: [H:I]) -&gt; I { return s.values.reduce(1, combine: *) } It doesn't really matter, though. Then, finding the maximum element of your overarching dictionary is easy: ninjas.maxElement { (a,b) in return total(a.1) &lt; total(b.1) } But you said you were looking for a different result if there were more than one ninja with the maximum amount of watermelons. It's a good idea to generalise this. what you want is a function that returns the maximum element**s**, rather than just one element. The closure that `maxElement` takes just returns a boolean for whether or not its first argument is less than its second. What we need is something that gives a richer comparison - less than, but also equal. You could fiddle it with just one function, though. Say only `&lt;` was available to you. You could do this: // Trying to find the relationship between a and b a &lt; b // if true, then a is less than b b &lt; a // in combination with the line above, this function returning false would tell you that a == b But that's a hassle. So let's define an enum: enum Ordering { case LT, EQ, GT } Then the `maxElements` function can use it. It looks like this: extension SequenceType { func maxElements( @noescape comp: (Generator.Element, Generator.Element) -&gt; Ordering ) -&gt; [Generator.Element] { return reduce([]) { (accu, el) in accu.first.map { best in switch comp(best, el) { case .LT: return [el] case .EQ: return accu + [el] case .GT: return accu } } ?? [el] } } } Then, the `comp` function: func comp&lt;C : Comparable&gt;(a: C, _ b: C) -&gt; Ordering { if a == b { return .EQ } if a &lt; b { return .LT } return .GT } Then, finally, here's how it would work the `ninjas` dictionary: var ninjas: [String: [String: Int]] = [ "Ninja 1": [ "baskets": 1, "watermelons": 4 ], "Ninja 2": [ "baskets": 2, "watermelons": 3 ], "Ninja 3": [ "baskets": 3, "watermelons": 3 ], "Ninja 4": [ "baskets": 1, "watermelons": 3 ], "Ninja 5": [ "baskets": 3, "watermelons": 3 ] ] ninjas.maxElements { (a,b) in comp(total(a.1), total(b.1)) } // [ // ("Ninja 3", ["watermelons": 3, "baskets": 3]), // ("Ninja 5", ["watermelons": 3, "baskets": 3]) // ]
Thanks so much for the extremely insightful help!!!
Could you possibly post your workaround that you found? Maybe someone here would be able to help crack the case :-)
That would be a good way to do it. I'll be honest, I stopped messing about in Xcode for a few weeks and now I feel like I've forgotten the dumbest stuff. But this all helps, thanks!
Anytime
You can use [`CVDisplayLink`](https://developer.apple.com/library/mac/documentation/QuartzCore/Reference/CVDisplayLinkRef/) for this.
The first error is *probably* coming form "View controller based status bar appearance" in the info.plist. I think it's a bug unless there's a new way to handle status bars starting with xcode 7 / iOS 9. I see the second in an app I'm currently working on (canOpenURL method in your app delegate), but it never fails to open the facebook auth page. Also - do you see the same errors when running on a device?
Yeah, I think that'll have to do. Just seemed like there ought to be a way to keep my table updates in sync with the display refresh for maximum smoothness, as it were.
Use a display link, but use GCD to asynchronously call your UI code to avoid overloading it: http://stackoverflow.com/a/5956119
If I upgrade to EC, will I still be able to submit to the app store before official release? If so, I'm willing to give that shot today.
When I started Swift I went with the Stanford course, which was great. After that, though, it was really just a lot of different things. Blogs really helped - NSHipster, Chris Eidhof's, [Cocoaphony](http://robnapier.net), Natasha the Robot, Swift Sandbox, Ole Bergman's, and, (my favourite) Airspeed Velocity. On top of that it's good to go through the standard library, and fiddling with things you don't know about. Weird-looking protocols, especially, are usually really interesting. These days, I'm spending most of my time in Haskell, which is having stronger and stronger impact on my coding style. It's also a good idea to write a blog yourself. Even if no-one reads it, explaining things to someone else makes it clear in your own head. HTH
25 times per second is too often for reloadData... Table views are not meant to be animated in that fashion. /u/Catfish_Man is right, if you use a view-based table view, you should be able to just grab the relevant view/sub views and refresh them directly. If for some reason that doesn't work, I'd suggest trying a collection view instead of a table view. 
Try this: https://www.hackingwithswift.com/
I'm taking the same course and also feel like I'm missing out on a lot of knowledge but here's how I came to think of it the other day: It's not about 100% memorizing how to do everything, it's more about learning the language and knowing what people are talking about on stack overflow and anywhere else that addresses your specific need. I'm building an app right now that uses a lot of things I haven't seen in the course yet because I'm able to (mostly) understand other tutorials and what people are talking about on here.
Much thanks. A quote from his FAQ in regards to teaching by building an app vs theory: "But let me tell you this: the problem with learning theory by itself is that your brain doesn't really have any interest in remembering stuff just for the sake of it." Excited to dig in to this.
Awesome! Thanks for the reassurance! And good luck with your app! I have a few app ideas but I want to wait until I get a little further in the course to start on my own. 
So... What's your question? Looks like you got the necessary pieces and all you gotta do is to put them together correctly. I agree this is not a very trivial task for a beginner. But at least try smth and then ask specific questions. If somebody will just write the code for you, it won't help you in the long run :)
So you want it to simply *display* as space-separated, or actually store it as 4 different integers? The former is simply some string processing â€“ use `RandomValue.description` to obtain a `String` representation of the value, and split it every two characters (this is a rather trivial exercise left for the reader). The latter there are a number of methods of doing, but it may be easiest to do the former and then turn each string back into an `Int`.
&gt; http://stackoverflow.com/a/5956119 Be careful what you are updating on a background thread. Most UI elements should only be updated on the main thread. Best practice is to update the model on the background thread based on the events then pass a copy of that model to the main thread in order to update the UI. There are some things that you can only do on the main thread in UIKit land, unless you are working in OpenGL/Metal land of course. Check out AsyncDisplayKit for something that tries to skirt around this issue. As a side note for events based programming check out ReactiveCocoa, it describes exactly what you are trying to do. However it might not have the performance you're seeking. 
Can you give me a TL:DR of what this is
Thank you for that.
I am in no way a swift developer. I am really just learning it myself right now. Coming from a no-programming background, Lyndia's Object-Orientated Programming Fundamentals by Simon Allardice was a great start. I then moved to iOS development with Swift, again with Simon Allardice. I can imagine Lynda is an expensive platform, but the one month trial offers plenty of time for both these courses (both around 4 hours).
I have done both of those courses at Lynda and they are great. I can recommend them too but where do you go to take it to the next level? 
It can't be UIStackView, because that's iOS 9+ only. Everything that AAA companies like Instagram do is custom. That being said, Scott Goodson, Senior iOS Engineering Manager at Instagram is a huge proponent of https://github.com/facebook/AsyncDisplayKit so I bet that's involved. Also it's AWESOME so you should use it and so should everyone.
Cool, hoping to see Swift as a possible replacement for my usage of Julia/Python/Numpy
One of the early chapters in the latest Big Nerd Ranch book on Cocoa (5th edition) has a tutorial on exactly this. 
Go to HackingWithSwift.com, check out the Example Code page. Look up speech to text, there should be something there!
"Once I introduce a unit test for a yet-to-be-developed method, that entire test class fails." While this is true, you actually get a compiler error on the exact line where you're calling a yet-to-be-developed method, and that red line looks almost exactly like the red line from a test failure. You actually get a failure faster than you would by running the test, and it's a granular failure pointing to the exact line that failed.
[See my example here.](https://www.hackingwithswift.com/example-code/system/how-to-parse-json-using-nsjsonserialization)
I've been banging my head on the desk with this too. Any updates?!?
Ideally, the start date should contain both the date and the time - no reason not to include it there, right? Anyway, if you can't do that, you just have to combine both dates into one, and sort by that. Basically, you'd create another date formatter for the startTime to parse the time into a date. Then get the year, month and day date components from the start date, and the hour and minute components from the startTime date (look into NSDateComponents). Then create a new date from all of those date components. Then you have a date that includes the time as well, which you can use to sort.
I'd start by looking at UICollectionView and UICollectionViewFlowLayout
Delegates handle the event. If the event is triggered and there is no delegate then an exception is raised.
UIImagePickerController UICollectionView UIPickerView UIScrollView Just to name a couple more
You should look up the Model-View-Controller design pattern. Really helped me get around this sort of thing, coming from a web design background myself.
I appreciate the answer! I've got the language down, it's just that it gets complex. like overly complex. Like casting something as an AppDelegate, or making sure something is a a CLLocation manager, or an MKCoordinateSpan - I mean, I'm just now learning the extent of everything the data can be stored as. I understand you'd assume I'm pretty green. I'm not reaally. Thanks for taking the time to answer though. I've got Swift down pat, it's pretty straightforward, however, all the MKs CLs UIs AVs, etc, and all of those are quite a lot to keep track of for a beginner. 
Foundation is pretty much the Objective-C peer of the standard library, but it's a good bit bigger. So it has direct analogues like String &lt;-&gt; NSString and Array &lt;-&gt; NSArray, but also stuff like parsing various file formats, file IO, etc... Generally in Swift you'd use the Swift versions of things that are in both, but the other stuff is still useful :)
A delegate is just another object that you ask to make a decision for you (or in the case of someone else's class, one of your objects that they ask to make a decision for you). There's *zero* magic here, and no language features supporting it. It's literally just "we promise to call these methods on the object you set as delegate in order to decide what to do". Java folks may know it as "inversion of control". The alternative other frameworks use is generally requiring subclasses to override the decision point. FWIW this is one of the most common new-Cocoa programmer questions I see. People *really* expect "important" concepts to be complex and have language features supporting them. Simplicity surprises.
Thanks. So, it's weird to me that I have to convert from Strings to NSStrings and back and forth and so-on with other types. I understand why it's necessary, but what is behind them being non-interchangeable? I get that NS objects are Objective C but it's like I'm translating to different languages within the same language? Like if I started *toEnglish(hablo espaÃ±ol)* in the middle of a sentence, but that was the only way I could say that sentence.... 
The *idea* is that everything imported into Swift is automatically translated to take Swift types for anything that has a corresponding Swift type, so a method that took an NSString in Objective-C would take a String when imported into Swift. That means you only need to convert if you want to call methods *on the string itself* that NSString has and String doesn't, which should be pretty rare (since String pretty much has all the ones that were considered a good idea to have in Swift). Given that it is (â€¦or should be at least!) so uncommon, and that it has some performance cost (allocating the new NSString), having implicit conversions isn't worth it.
Delegation is a way of designing certain bits of code so that it can ask some other bit of code what to do or hand off responsibility for doing something to that other code. The Delegate is the bit of code that can do those things. Developers design their code with Delegation in mind when they either want to have many possible things plug in to the code they're writing or when they're going to ship their own code out to the world in a form that doesn't let people modify it. This makes it possible to make the code that accepts a Delegate do new things that weren't part of the original developer's design.
Thanks also_HIM - I really appreciate the advice. I knew there had to be a more elegant way of doing things; have to admit I posted my code in the hope someone would be able to point me in the right direction. (Thought I was just going to get a bollocking for the ugly prefilling of an array with crap just so I can later poke values in at arbitrary locations) Yep, my hacky solution works but only because I know I'll only ever have 6 rows max, and they'll always be visible. But there's no reason to do it wrong (like you say) - I'll fix the code the way you suggest - ta for introducing me to viewAtColumn. I have to admit I did type "tableView(" and scroll down through the autocomplete list looking for something that looked like it'd return me a view but didn't spot viewAtColumn.... The naming of controllers and classes etc: I've found this confusing throughout my brief Swift experience. I know what I'm creating are custom view *controller* classes, but in the storyboard editor, if I drop, say, an NSView onto my storyboard and go to change its class to my custom class, the class already listed there in the inspector will be NSView, not an NSViewController. [edit: I'm gonna have to ask a separate question here about this] Renaming all my classes can wait for now - I'm running out of time and money and just need to get this working well enough to earn some dollars (don't worry, I'm not selling the app (!) I'm just using it to move a camera around...) Thanks again - learnt a lot from your reply.
I was wondering if it might be worth biting the bullet and implementing coredata. I'll try it out.
Why would I worry if you sell the app? Now if you were selling ridiculous in-app purchases in a kids' game you might have something to be ashamed of... It's important to note the distinction between a view and a view controller (you may want to study the [MVC](https://en.wikipedia.org/wiki/Modelâ€“viewâ€“controller) paradigm if you haven't yet). Views show stuff on screen, like a button, slider, row of a table, or sometimes more complex things like a whole table itself. User interaction happens through views but generally a view only handles those in basic ways - highlighting the button or table row - and passes off the rest of the response to someone else (its delegate, or the target of its action, or whatever). That means views can be fairly generic and very reusable. But of course they're useless without something that can tell them WHAT to display and/or that handles meaningful responses to user interaction. THAT is what a view controller is for. It tells the views what to display (hey slider, your min value is 0 and max is 11, and the current value is 6) and is usually the target of actions (slider says: hey controller, the user just cranked it up to 11. Do something awesome!). When you're working in a storyboard, every view has to be "contained within" (really, owned by) a view controller - or be a subview of a view that's contained within a view controller, but you get the point. Of course in "real" life the only things ever on screen are views (and windows) and the controller is pulling its strings behind the scenes. But storyboards, being visual, have to show you the controller somehow. The view controller's root view fills the whole controller (except the little header), so if you click on it you're going to end up selecting the view, not the controller. Click on the circle-square icon in the header to select the controller, or look at the hierarchy in the left side panel and select it there.
glad i could help. this is just one of the many architectural patterns used throughout iOS/Swift. this is probably particularly more true of Swift with it's extensive use of protocols and Apple's encouragement towards using protocol oriented programming over strict object oriented programming. i would highly recommend getting accustomed to design/architecture patterns in general, as they apply to much more than iOS/Swift and can be extremely useful when building your applications rather than relying strictly on available API's.
[removed]
&gt; Why would I worry if you sell the app? Hehehe - I was just trying to say that this app, with all its ugly hardcoded bits and lack of cellView re-use, is only going to be used by me in a relatively controlled environment - if it was going to be used by others I'd need to pay a lot more attention to ... well, the variety of unpleasant code smells emanating from it (I love the concept of code smells, which I learnt right here :) I think I've got a reasonably good understanding of views vs controllers vs data-models. Each of my views has a controller to handle the display and update of data, but the data is housed in the model, not in the controllers nor the views. It's the naming of classes that confused me - say I create a view-based table, and create a cell that I want to create a new controller and look for. I'll add some controls to it, and I'll write a controller for my cell. Up until now, my controller classes have started like this: class ChannelCellView: NSTableCellView { @IBOutlet weak var channelActualPositionSlider: NSSlider! etc etc Everything's worked OK, but you're saying I should be subclassing NSTableCellViewController instead? I think what's confused me is that when you drop an object (say, a plain old NSView) onto your storyboard and go to the Custom Cell dropdown in the inspector, the default (greyed out) class listed there already is always an NSxxxView, not an NSxxxViewController. So I've named my custom classes blahBlahView, and subclassed a View rather than a Controller, because that's what I seem to be replacing. Another example: I've created custom slider graphics, and to display them, I subclass NSSliderCell, and write some code to override the drawKnob and drawBarInside functions. I then find the slider I want to jazz up in my storyboard, and change its Custom Class to my new class. But all my customisation code is ... well, it's *code*, not an entity on screen, so isn't my code, technically speaking, overriding the NSSliderCell *controller*, rather than overriding a view? Re-reading your reply, it seems both views *and* viewControllers can contain code. So the decision on whether you should be subclassing a view or a viewController should be based on how generic the functionality you're trying to implement is?
Wow, I am lost. If I strip out all the code till I just have the View class ( derived from ScreenSaverView ) it works. The moment I add in any of the other swift classes the ScreenSaver panel attempts to call the init on those and ignores the View class. If I force my other classes to inherit from NSObject, I can avoid the crash, it silently swallows the unknown selector I think. But it still doesn't call the View class. 
Checkout NsDateFormatter dateFromString:
Hey. Thanks a lot. I was looking for something like this :) 
http://www.algorithmist.com/index.php/Main_Page Also, if you're a Java dev, "Data Structures and Algorithms in Java" by Robert Lafore was excellent. Google "Data Structures and Algorithms in Java" .pdf and you should be able to find a free copy like I did.
This might help - http://shop.waynewbishop.com/ - I havent read it and dont know if its good but should get you started with swift and understanding data structures. I learned this coming from a different programming language so never really needed it.
Sometimes you just have to say screw it and go hunting or fishing. Not that you need to catch any fish or kill any deer, but rather to experience the positive aspects of nature and the hunt. You may think I'm nuts but a hike in the woods and a chance to observe wildlife is very refreshing to me. If up you are in the USA your only real worries are if you are in mountain lion or Grizzley/brown bear country. Other animals can be dangerous but the lions and bears are fully capable of stalking you! So what does this do for you? Well number one it provides the brain with stimulation that is not at all like programming. This rests the part of the brain associated with programming. The next benefit is physical exercise. They effort expended can release chemicals that give rise to euphoria plus other positive biological effects. Plus exercise is a well known way to tone the body and hiking is very good for the heart. I also have this theory that the natural shape of things in the wild engenders a feeling of freedom that you don't get sitting inside a room with four square walls. The shape of a tree root or even that of a rock is very free form, free of the limitations of Planar walls and ceilings. Lastly if you do actually spend some time hunting or fishing you may gain the benefit and satisfaction of eating a meal you have harvested yourself. 
Thanks for the excellent explanation. It's hugely appreciated. I think I'm getting the hang of things. So, to address my original problem (needing to update some UI controls without reloading whole rows), my plan is this: - in a background thread, my MotionControllerBrain gets word from a motor driver that its position has changed, and decides the UI needs to be updated. - it dispatch_async's, on the main thread, a call to "updateTableLiveUIControls" in my table view controller - the table view controller then calls "updateCellLiveUIControls" in each of (or a subset of) my cells' view controllers - the individual cells then update a subset of their controls as appropriate. So there's a chain of command; the tableViewController doesn't need to know anything about the contents of the cells, UI-wise; it just knows "this cell is for Pan, that cell is for Focus". The cells themselves can implement their super-fast "updateCellLiveUIControls" to update a subset of the controls as necessary. It does mean that implementing some functionality means adding a function to every controller in the chain, which gets a bit tedious, but I think it's the only way to do things. Say I want a button in each channel cell that lets me switch off a motor. There'll be a button in the cell itself, with an action attached that calls a function in the table view controller, which calls a function in my higher-level MotionControllerBrain class, which calls a function in my CommunicationsController class, which calls a function in an individual SerialInterface class, which can then actually send the right "motor off" packet out the serial port. It does mean I end up with a "func disableChannelMotor (channel: Int)" in quite a number of classes, and all but the last of these functions just call the same named function in the class "above" it in the hierarchy, just to pass the message through, but I'm guessing that's normal. Dude, you've spent a lot of effort clarifying all this for me - many, many thanks :)
Happy to help. It's a good way to wake up the brain on boring mornings ;). Your setup sounds good. And yeah, it's not uncommon to have a whole chain of method calls passed up the controller hierarchy. There are ways to short-circuit that but they're rarely a good idea so I won't go there...
Since I don't have an 6S (yet): how many steps does 3D touch support? I was under the assumption it only had normal, medium &amp; hard.
Really neat little app. Haven't gotten around to messing with 3D Touch in Swift yet, but this shows it isn't that difficult.
Thanks so much!
It does actually give you a float between 0 and the maximum possible force (depends on device) which is pretty accurate (like 0.0000000001 accurate I guess). All the app does is dividing that by the maximum possible force, multiplying that float by 100 and cutting off everything after the decimal point.
That code doesn't say anything about the hardware i.e. if the hardware spit out 5 steps or 500 you'd use that line of code. It does appear to it would be quite continous based on the patents though http://www.forbes.com/sites/jvchamary/2015/09/12/3d-touch-iphone-6s/
You should definitely give this book a spin. It was the text I used in my data structures class in college. Still on my bookshelf 12 years later.
Yup, I designed it by myself. It took me just less than a week, 1-2 hours a day. However, I had previous knowledge about programming (I'm studying CS), I was just new to iOS development. Good luck with everything!
Or raise the cap to 105% and crack it past 100!
Thanks! Right now I'm using Core Data, but I am planning on switching to iCloud in the next version. The migration should be really easy, the data is really minimal.
Haha. I'm try to debug this issue and Xcode 7 keeps crashing when I try to debug po self.tabBarController?.tabBarItem.titleTextAttributesForState(.Selected) Good luck with finding a solution. Edit - While going through the debugging process, I found that the two tab bar items are actually pointing to different objects. Maybe the one displayed has some properties overwritten? (lldb) po self.tabBarController â–¿ Optional(&lt;UITabBarController: 0x13fd0a2d0&gt;) (lldb) po self.tabBarController?.tabBarItem â–¿ Optional(&lt;UITabBarItem: 0x17014c1e0&gt;) (lldb) po self.tabBarItem &lt;UITabBarItem: 0x17014b210&gt; 
Do you know why people never seem to use NSOperationQueue? I mean, it is supposed to simply wrap the GCD right?
I agree, this is infuriating. Messages app is the biggest offender, in my experience. To have to kill and relaunch the app to get the keyboard working is just tragic.
Not sure if this is much help, but I've heard about this before. What they did was make the text field size 1 line high and expand it as the text is entered. Unfortunately, I don't know how to do this, but it might help you find the solution. Good luck!
You may be looking at two different characters. Did you type the "+" on your keyboard and are trying to compare it to the one in the phone number? If so, they're probably not the same. Remember that some Unicode characters look very similar, but to the computer they're completely different. Try and cut and paste the "+" in the phone number into your code. Hope this helps. 
Also, you will notice that the title label gets stretched. Instead of a transform, you might consider actually changing the height of the button to grow it.
you put a conditional closure inside your IBAction. The app is crashing because your variable is nil. You should do this for all variables where it could be empty. if numbersOnlyTextField.text != "" { bananaCount() }
I am still getting the same error with that update. I also tried " " instead of nil @IBAction func calculate(sender: AnyObject) { numbersOnlyTextField.resignFirstResponder() if numbersOnlyTextField.text != nil { bananaCount() updateLabels() } }
Basically, the concept is you can and should only force unwrap things that you're sure have a value. You can do this by checking before you try to unwrap it. Force unwrapping it makes it go from Optional(String) to String. If it's crashing, you don't need to unwrap it. You need to not run the operation on an empty value. You can try setting numbersOnlyTextField.text = "" in your viewDidLoad, then on the button press say if numbersOnlyTextField.text !="" { code } else { print("error") } 
also it helps if you post the error you're getting. 
Here's your answer: &gt; -[UIKeyboardTaskQueue waitUntilAllTasksAreFinished] may only be called from the main thread. Most any action involving the UI needs to be performed on the main thread. I haven't looked at your call stack, but I can only assume `-[UIKeyboardTaskQueue waitUntilAllTasksAreFinished]` it is invoked by `performSegueWithIdentifier`, in which case you should be deferring that to the main queue: dispatch_async(dispatch_get_main_queue()) { self.performSegueWithIdentifier("loginSegue", sender: self) }
How do I check if the cast to double is successful?
read this as well about if let optional binding: http://stackoverflow.com/questions/25828301/swift-if-let-optionals-how-is-it-evaluated
I had similar thoughts, but I didn't know how to move this to main thread while calling inside the completion handler! The dispatch async looks exactly like what I need! Thank you! Edit: Resolved the problem perfectly, and I got to read a lot more about dispatching and threading, which was hugely helpful. Thank you again. 
Thank you so much! This fixed it!
More and more foundations are kits are being rewrititten in Swift. At the WWDC '14 where Swift was introduced, they did say that one day the whole of OS X may be rewritten...
Permanent saving method: Use CoreData and make it an entry into the db. Or use structs.
Well, of course, I don't know. But, when I look around Reddit I see that puts me in the perfect position to say what I think. No, iOS will not be written in Swift. Of course, new pieces of iOS might very well be written in Swift, but that's only because Swift is obviously the right choice for most of the programming which is going to happen on Apple systems. But, iOS is yesterday's news. As a developer, every day I notice a few things that are wrong with iOS and with the SDKs; Apple developers must notice 2 or 3 times that, if not an order of magnitude more. They need to start afresh. If they don't do this, then creating a new language was just an interesting and fun exercise. Languages are not ends in and of themselves (in a corporate context; they may be so at a school), and Apple don't create languages or SDKs for our use; we just get the benefit from what they've done in order to create the software which causes us to buy the hardware. So, over the coming decade or so, I look forward to iTunes, iOS, Cocoa, UIKit, etc etc being replaced by whatever is appropriate for music management, operating systems, user interface toolkits, etc, etc as we approach the end of the first quarter of the 21st century.
I suspect new projects will use Swift. It's already a much nicer language than Objective-C. 
If you looked into android or windows phone you would call for apocalypse then
Watch the Swift part of WWDC 2014. Also download Xcode 7 and look at the developers kits. Don't know why my comment was down voted.
Apologies, it does work, my mistake sorry One last thing, so after the button increases, how do i then decrease the size of the button to say 20% and then after that increase it back to its original height. Thanks for your help Krip
Because it's wrong.
Just as a sanity check, try it with a hardcoded version of that URL, to make sure it's not something else in your code messing it up. If that works, but completeUrl doesn't, then try removing the !. I've noticed at least one buy with implicitly unwrapped optionals not working right in the latest XCode.
Can you show is **completeUrl** here? Maybe it's malformed in some what that is preventing the NSURL constructor from working correctly.
Where do you see evidence that the developer kits are written in Swift?
Way to waste your saturday night. Good job
I think its an important point to make here, that they could potentially rewrite the application frameworks in Swift, but its highly unlikely they will rewrite the 'whole' of any of their OSs in Swift. Swift is a great language but its not a language you build a OS in, that field is still left to ASM,C, and C++
haha you suck stop trying to code, idiot
I take your point. I'm not sure what to google...tried the obvious but can't find the right keyword 
Thank you so much for taking the time to answer. Scrolling in the CollectionView is disabled. In the attached Screenshot, you can see roughy what I'm intending to do. The user should transfer money from one "bank account" to another one be swiping. At the moment, my problem is that I don't even know how to find the UIViews that are selected in a swiping gesture with only having coordinates.. http://imgur.com/QhuxNCf
You do realize that the engineers who are maintaining iOS are the same ones that have helped to develop Swift right? Suggesting that the engineers use Obj-C because that's what they know is a pretty ignorant statement. Good programmers are good programmers no matter what language or platform they use.
The Calulator app in iOS 9 is Swift. https://twitter.com/jckarter/status/650142048444526593
Thank you, this will help me :)
None of Apple's iOS 9 or El Capitan frameworks contain any code written in Swift at this point. While Swift may be used in *apps*, the OS frameworks are not using it at all. In fact, neither iOS 9 nor El Capitan ship with a usable copy of the Swift standard library. You can have a look for yourself: find / -name libswiftCore.dylib -print It's not in /usr/lib and there's no copy of it hiding in /System/Library/Frameworks either. Technically, there's a copy in Apple's Malware Removal Tool (/System/Library/CoreServices/MRT.app) but that's an example of a standalone app embedding it for private usage (and it's the only default app on the Mac that does **edit: apparently the Dock statically links a version for private usage too**). The reason is quite simple: everything written in Swift must be linked with *exactly* the same version of Swift or it will fail. &gt; Swift currently offers no ABI stability for any code and provides no ABI non-fragility for framework authors. &gt; &gt; â€” Greg Parker &gt; &gt; gparker [Greg Parker] is right, and this is important. &gt; &gt; Swift 1.0 is not guaranteed to be binary compatible with "swift 2.0" (or whatever). We guarantee that compiled and distributed apps and their frameworks are binary compatible with the OS and will continue to work well into the future, but a Swift framework today will not work in the future. &gt; &gt; We expect to lock this down, but not by the final release of swift this Fall. This means that all swift code in an app (including frameworks it uses) should be built by the same version of Xcode. &gt; &gt; â€” Chris Lattner https://devforums.apple.com/message/986618#986618 This comment dates to before Swift 1.0 but ABI stability (sometimes called the Swift "resilience" model) is still not a part of Swift as of version 2.1. While lack of ABI stability wouldn't prevent *internal* components of a Framework being written in Swift, the Framework would need to embed its own copy of the Swift standard library and none of them have chosen to do this as of iOS 9/El Capitan.
Since you are using a UICollectionView, you can ask its layout for the layout attributes of each indexpath, and the attributes has a frame. you can see if the point is inside that frame. Now you know the indexpath of the item that the point is in.
A big part of the hesitation to switch now is that Swift's ABI is unstable. If they were to tie Swift to OS releases then, say, 1.2 code would fail catastrophically on devices shipping the runtime and libraries for 2.0 or 2.1.
i heart this comment
Hey thanks for the heads up!
I get same error with hardcoded version. And if I remove the ! (added by XCode) I can't build the project. Any other suggestions
I have to say I tried that and I am dealing with the issue where a button placed at the bottom of the screen is only visible in iPhone 6, but it appears to be outside the screen when I am testing it for iP4s f.e.
yaaaa ok?
&gt;We are still on track to open source Swift (including Linux support) "by the end of 2015" as promised, more details will come out when they can. &gt;-Chris Source: https://www.reddit.com/r/swift/comments/3kbjjn/so_swift_isnt_open_source_yet_then/cuwwub2
Jup that did it! Thanks! 
As a iOS dev I think Kotlin is really cool as it would allow going between iOS and Android development without having too big change in mindset. Although of course APIs and such will be quite different.
Sometimes an additional gesture can introduce delay. For example, if you have a single and double tap gesture recognizer, there has to be an additional delay before the single tap is recognized, because otherwise, it wouldn't ever be possible to do a double tap. In other words, after a single tap, there has to be a little bit of time in which you can do a second tap to make it a double tap. Before that delay is over, the single tap can't be recognized, because it isn't certain that it'll actually be a single tap. That's probably what you experienced.
That is avoidable by using autolayout. You just need to set the correct constraints. E.g. if you want to have a button placed at the bottom of the screen on all devices you need to set the constraints to the bottom margin. And if it's a full-width button just set the left and right constraints to 0, or if it's a smaller button you want to have centered, just set it to fixed width and center it horizontally. And lastly set a fixed height and it will always be on the bottom of the screen, irregardless of screen size or rotation.
Why try another language when you can use Swift on other platforms using [Silver](http://www.elementscompiler.com/elements/silver/)? I haven't tried it but if it does what it advertises then you would be able to run Swift on different platforms now. 
http://www.h4labs.com/dev/ios/swift.html?age=90&amp;q=autolayout
https://twitter.com/jckarter/status/608441279677128705 Dock and Calculator use Swift, the latter having been rewritten entirely. https://twitter.com/jckarter/status/650142048444526593
[**@jckarter**](https://twitter.com/jckarter/) &gt; [2015-06-10 01:11 UTC](https://twitter.com/jckarter/status/608441279677128705) &gt; @gumbright Dock and Calculator in 10.11/iOS 9 use it. ---- [**@jckarter**](https://twitter.com/jckarter/) &gt; [2015-10-03 02:55 UTC](https://twitter.com/jckarter/status/650142048444526593) &gt; @stroughtonsmith Yep. iOS 9's Calculator was rewritten in Swift too. ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Yeah I think it's only the iOS calculator. 
 if let text = textField.text { if let index = englishArray.indexOf(text) { spanishOutput.text = spanishArray[index] } } Edit: this is for Swift 2
Some of the less used APIs arent that well optimized for swift yet... in your case, it seems that the only issue is that you're comparing an UInt with an Int - Swift can't compare those, because it doesn't do implicit casting like ObjC. Just do `UInt(ITLibMediaItemMediaKindTVShow)` to convert it to an UInt and it should work.
I haven't used Parse but here are some recent blogs about it: http://www.h4labs.com/dev/ios/swift.html?q=parse&amp;age=180
Sure. and build our own copies of the compiler. if we get a compiler crash, maybe we can track down what does it. Also, at least for me, knowing how something works at a low level helps me understand the higher-level stuff. Plus having a (somewhat) stable language definition, even if it is just code, can help developers of language modes of other editors (e.g. Sublime text / vim / emacs / etc)
When dealing with subscripts, the problem might be dealing with not unwrapping the optional PFObject.
Hard to tell because I don't know what you're clicking on screen/what actions are getting called, but I'd say youre scheduling a new timer every time without invalidating the previous one. So the second time through you have two timers firing. And then three. And then four....
Yea that's what I thought! I was surprised how similar it is. I really like Android development and Kotlin perfected it, just like swift did for iOS development.
Yes just call timer.invalidate() before creating a new instance for your reference 
Gotta say after investigating the Silver website and their other products. The people behind it sound annoyingly pretentious.
&gt; We are still on track to open source Swift (including Linux support) "by the end of 2015" as promised, more details will come out when they can. &gt; &gt; Source: https://www.reddit.com/r/swift/comments/3kbjjn/so_swift_isnt_open_source_yet_then/cuwwub2 Not vague at all. 
Well, they are the only people who offer something of the sort. 
"If it ain't broken, don't fix it." Maybe when frameworks need a rewrite this would happen, but for most of them if it works well now I see no reason to do so. Swift isn't failed to be interoperable either.
Huh. Wouldn't the old timer be dereferenced? Edit: Ah! Colleague says &gt;scheduledTimer makes the run loop retain the timer (which is repeating). &gt;so replacing selfâ€™s reference to it doesnâ€™t dealloc it. since itâ€™s still scheduled on the runloop and retained by the runloop.
Ur probably calling the timer multiple times
Well, you can use XIBs. But your styling still won't be all in one place. CSS is a practice that works fine for websites, but it's not practical or really used at all when developing apps. You are going to need to change the way you think about app development. UIAppearance is definitely not a best practice. Best practice is either using XIBs, or writing dedicated view classes. If you want a UIButton with a specific style, subclass it, style it, and then you can use it wherever you want. 
JVM is fat. Speaking of which, it would be very interesting to see how much trouble it will be to adapt this language to the world of micro controllers. This is one reason I'm wondering how big this release will be, that is what will the standard library look like. 
When you reset the count - re-initialse the timer or call invalidate on it and call it again 
I totally disagree with this position. If you can't describe basic data structures you aren't ready to enter the world of programming. In this case I believe this is where the guy failed. It is one of the reasons I recommend to people asking about learning Swift, from a novice background, to find a decent college level course or text equivalent to the first year of a degree program. Then go from there. Frankly a person ought to be able to crash through a first year comp-sci program (the programming classes) in about a month. This should set them up for more advanced material. The reality is this, when hiring people you have two considerations to investigate: one is to determine what they have learned in a general sense and the other is what they know about language and tools specific to your team. You simply can't rely upon what a person can demonstrate skills wise focused on specific tools. Doing so can lead to a very one dimensional employee that lack the flexibility needed in a business environment. 
Or Dash which is well worth the price on App Store. 
It isn't possible for most humans to memorize every method in the SDK. However writing apps leads to frequent patterns of API use and this will result in certain methods being burnt into your memory. 
JVM is fat? What does that mean? Yea I'm curious what they release to the public as well. I mean they have to the release the full run time right??
Thanks pal!
Thank you for this! :-) I'm working on a walk/run cycle timer for myself and was wondering why I would lose an update here or there. Your technique should eliminate the problem I'm having.
Have had good results with coreplot but you'll have to figure out the Swift bindings. There's also: https://github.com/i-schuetz/SwiftCharts
A window of 90 days is totally vague.
Yea I think I got intimidated when Rob (the guy whose classes I am watching online) makes it seem like he has all of these methods memorized. At the end of each section there is a small quiz and some of them require us to fill in almost a complete method. That's what made me feel like I wasn't doing something right but in this case I feel it may not be me, it is the tests and the way Rob presents his lessons. Don't get me wrong Rob is still an awesome teacher though!
This is what I felt when doing anything in the XIB's. So the next question is, whats the best practice for where to put all the UIAppearance definitions? I Was going to create a Style class with it and init it in the appDelegate. The reason using UIAppearance isnt an inherently obvious tool to use is I find myself having to style properties that aren't accessible though UIAppearance. For example, adding a gradient to a button. This then leaves style definitions in 2 different places. 
You didn't say the window was vague, you said the *deadline* was vague. The deadline is very specific.
Extremely useful...
It depends on how much experience you have with iOS development already. I'm relatively new to programming, and came from having written a bit in Python, and I found that the book helped me developing the first app. If you just want to brush up on the syntax, I would probably just use Apples own resources, as their documentation is really good. 
tried this? https://github.com/Alamofire/Alamofire/blob/master/README.md#embedded-framework worth noting that some libraries don't support some xcode version or ios, so double check these.
Thanks - I feel fairly comfortable with Swift - I'm considering this book more as an addition to the office library we have so the team could refer to it from time to time and we could give it to new developers to use. Seems like it could be useful from the 2nd aspect, not so much the first.
Most likely C, C++, and Assembly, just like [Objective-C](http://www.opensource.apple.com/source/objc4/objc4-437/). We won't know until they release it!
Well for a chapter in a course you probably should memorize what is being taught simply to get past testing easier. In the real world, when working with very large SDKs the only things that you will remember well is the methods you use a lot. That is where modern IDE's and documentation systems come into play. 
Take a look at the wikipedia pages for LLVM and Clang. It's most likely a front end for the LLVM. That is the compiler takes Swift and compiles it into LLVM's intermediate form, which is then optimized, then is put into assembly. Clang is the front-end for C, C++, and Obj-C and written in C++. I'd assume the Swift front-end will be as well.
Great instruction. Well done!
Yes, thank you. I was able to install the Alamofire framework, it seems there are some issues with the frameworks I'm trying to install. 
Great, thanks for you help!
I miss the days when compilers were written in themselves. :-)
Most serious non-interpreted languages are self hosting, but with Swift's spec changing as rapidly as it is, that would be impractical. My guess it Objective-C. 
Objective-C was never self-hosted. Swift probably won't be either. LLVM is written in C++ so keeping the compiler in C++ keeps consistency across the codebase.
Set up different targets by copying the current one - one for each environment - and add all the config values to the Info.plist files.
Would someone care to explain my -5 vote for this comment? &gt; Swift is a language and doesn't have a source code, but has a specification, which is already published (mostly, at least). Open sourcing refers to the compiler and, in my opinion more importantly, the standard library. Is there any part of this that isn't correct?
It is like when learning a foreign language you start with materials in your native language but move on to materials in the target language as you progress.
I thought they were moving away from skeuomorphism. 
Thanks! This seems to be working. I was able to add some frameworks without this method (Alamofire, and a JSON library). It's quite confusing when the name of a library is e.g CSwiftV that I still need a bridging header. 
Yeah, you'd think that would compile a module. Assuming you have the source code for the Framework, you can adjust its build settings so that it does ("Defines Module" should be set to "Yes," and it make sure to use the value of "Product Module Name" is what you use in your `import` statement.) If a Swift library isn't set to do this by default, you might want to submit that as an issue in the repository!
Reminds me a lot of [Faker](https://github.com/kleiram/faker) ;). How about we bundle forces?
Why in the world would you be down voted for this? In the 90's I worked for in a dev group that made a very popular Mac compiler, and it was pretty amusing that it did in fact build itself. "Bootstrapping." Kind of cool if you think about how how the languages and IDEs evolve by building mutated versions of themselves.
http://i.imgur.com/rmImMqA.jpg
Chris Lattner is a big C++ coder, so that makes sense.
If you're interested in more on Monads in Swift, I've got a few other articles in my collection: http://www.h4labs.com/dev/ios/swift.html?age=10000&amp;q=monad
I thought it was a good answer. Thanks!
Please rethink your design of using a tab bar if you want to do this. Refer the [iOS Human Interface Guidelines](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/Bars.html#//apple_ref/doc/uid/TP40006556-CH12-SW1). Users expect a particular functionality when they tap on a tab bar icon, and deviating from that isn't good practice. &gt; Donâ€™t use a tab bar to give users controls that act on elements in the current screen or app mode. If you need to provide controls, including a control that displays a modal view, use a toolbar instead (for usage guidelines, see Toolbar).
The thing I love about Ray Wenderlich's books is that you always get free updates when syntax changes/evolves. I bought the Apprentice books back when they were in Objective-C and then received the Swift books free (which have also been updated several times). For that alone, I'd suggest it's a valuable purchase. 
Second this. I don't even know if RottenTomatoes or any other databases have API...
For live performances, the SeatGeek API is a quite complete event catalog. Full Disclosure, I work at SeatGeek. 
You first write it in an existing language. Like C, usually. Then when it's almost done, and can compile properly, you start re-writing stuff in the new language until all the compiler is in the new language. 
The AWS SDK is really difficult to use and, if you're only using S3, it's bloated and adds a bunch of other unneeded code to your project. I've created [AmazonS3RequestManager](https://github.com/AnthonyMDev/AmazonS3RequestManager) as an alternative that makes it very simple and easy to make requests to the S3 REST API. If you end up using it, I'd love to receive any feedback you have for me! If you have any issues while using it, please just make an issue on the repository. Thanks!
*Awesome
my bad! Fixed :) 
Was just meant as elaboration of some of the other good answers :)
You got me excited for a minute -- I was think software to support shortwave radios. 
It could be written in itself, we simply don't know. Considering all the action around LLVM and Apples investment there it will likely be part of that tool set with a good chance of being written in C++. 
What does your data source look like? If you are just using a simple array, you need to insert at index 0. Append will add to the end of an array. If you are saving them to disk and reading the files from disk, then you probably need to sort the objects that are being read from disk in some way. Maybe by adding a new field for a date created and sorting your data source by that field you can get this to work? If you edit your post with a code sample I might be able to be of more assistance. Also, StackOverflow is usually a much better place to post questions like this. You will get many more responses much quicker there. Just a heads up!
the NSURL parameter is for if you are uploading an object that is saved to file. You pass in the URL path of the file in the local file system. You can also use the putObject method that takes an NSData parameter to upload an object you have in memory. For that method, you would want to convert the UIImage to NSData using UIImagePNGRepresentation or UIImageJPEGRepresentation. And yeah, I get what you mean, but i think that the security key shouldn't be too hard to obfuscate. Nothing is ever 100% unhackable, even Amazon Cognito, but this should be pretty secure. If you are worried about it, I would just set up your access permissions so that the user for that secret key cannot do things you don't want them to do (i.e. edit ACL, create buckets, delete objects, etc.)
I ended up making a JSON file of the data instead, and using SwiftyJson to parse it as I couldn't get any of the CSV frameworks for Swift to work. Perhaps someone else has better experience than me with these frameworks?
Exactly what I wanted to learn! Thanks!
That's pretty cool. Thanks.
I'm actually currently in the process of creating custom serializers that parse the errors that can be returned by the Amazon S3 service. That should be out in the next week or so. Using the `validate()` method will validate if the status code for the response is successful or not, and pass an error through to the response serializers. But it won't give you the specific error coming from S3. let fileURL: NSURL = NSURL(fileURLWithPath: "pathToMyObject") amazonS3Manager.putObject(fileURL, destinationPath: "pathToSaveObjectTo/fileName.jpg") .validate() .responseString { (response) in if let error = response.error { // handle error } }
Most binaries you can poke around with, look at assembly code, embedded string etc to figure out what language it was most likely written in. E.g. not hard to see something is written in Objective-C as there will be all these references to objc_sendMessage
Right now it's mostly motivation that I miss. There's still plenty to implement in order to provide a full twitch experience. The current twitch interface has a lot we can look at for reference. - Login to twitch - Display subscribed, followed channels - Provide a way to subscribe, follow - Search bar - Consolidate existing code Thanks for your interest :)
You should add milestones and feature issues in github. 
I see. At least it'll give you some error if a request fails all together. I like how condense it is btw. Very easy to use man. 
I'd be down to help.
This is something I've always wanted for the Apple TV. So props for getting something going! I'm working on my own thing right now but I'll keep an eye on it, I hope you can get some help though.
This sounds pretty sweet man
Feel free, we added some issues. I'm updating the documentation on a separate branch for new comers :)
Thanks! I tried really hard to make it a pleasure to use. Unlike the Amazon SDK. Haha I'll have better error parsing of my own out very soon
No problem, glad I could help! 
I haven't tried using this on the Xcode beta yet. I probably won't officially support that version until after the GM seed release. Are you sure the errors have to do with the new version of Xcode? That seems odd to me. If you think you can fix the errors and want to make a pull request feel free.
I'm not sure if that is actually how you do it because I only glossed over the code, but it seems like you are downloading the m3u8 from the hls player and then accessing the stream like that. AFAIK that is a violation of their TOS, so I would be cautious of that. 
Yeah man, it actually says : /Pods/AmazonS3RequestManager/AmazonS3RequestManager/AmazonS3RequestManager.h:29:9: error: include of non-modular header inside framework module 'AmazonS3RequestManager.AmazonS3RequestManager' #import &lt;AmazonS3RequestManager/AmazonS3SignatureHelpers.h&gt; ^ &lt;unknown&gt;:0: error: could not build Objective-C module 'AmazonS3RequestManager'
We are currently reconfiguring target-based structure to scheme-based one. There are 12 targets at the moment. Blog post will follow. Will let you know once it is ready.
[removed]
Apple went to a lot of work to allow attributed strings to be portable between Mac OS and iOS. For example, NSColors turn to UIColors and vice versa as needed. Do you have some kind of custom attachment in your attributed strings that you need to implement on both sides? Should you be using a custom attachment in your attributed strings that you implement on both sides?
I integrated the video quality change mechanism. Before I could run the project I had to update some stuff in the API to follow some changes made in AlamoFire. I hope that doesn't cause an issue for you, but all I did to get the AlamoFire stuff was run the pod install, so I would assume it's just the most recent and up to date AlamoFire source.
You didn't specify if you want to use objective-c or swift, if you are ok with the former you can check out the Big Nerd Ranch book about iOS. If not, they will sooner or later release a new swift edition. And check out what /u/twostraws linked.
Instead of thinking in terms of columns, why don't you creare a custom UITableViewCell with this layout: [uiview with fixed width][uilabel] The first UIView will have a background color that depends on the availability status (and that you will change when needed) and the label will contain the usual text, easy to do.
[u/KenNL](https://www.reddit.com/user/KenNL) from r/gamedev has thousands of public domain assets on his [website](http://www.kenney.nl/assets). Good place to start.
I added previous and next dates links. I also default to the current date with a date of 0. http://www.h4labs.com/dev/ios/swift.html?date=0 And if the date is -1 it shows yesterday's data, which might make more sense since there is a lag in obtaining the information: http://www.h4labs.com/dev/ios/swift.html?date=-1 
1. Play Devil's advocate and assume you are using an API that is too low-level for what Apple considers appropriate for platform-agnostic behavior, and look for higher-level alternative implementations: i.e., start [here](https://developer.apple.com/library/ios/documentation/General/Conceptual/iCloudDesignGuide/Chapters/DesigningForDocumentsIniCloud.html#//apple_ref/doc/uid/TP40012094-CH2-SW8) and make sure your client conforms to the recommendations. 2. If option 1 fails to provide an answer, use platform tests *judiciously* to create divergent code paths based on the target platform, and encapsulate those paths under a simple platform-agnostic api of your own design. See [doc for Build Configuration Preprocessor Directives](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-ID34) and [example](http://stackoverflow.com/a/24065534) 
This is a brilliant set of tutorials. Seriously, use this.
The second I saw Apple demo 3D Touch on stage, I thought... I WANT this in the app I'm working on! It'll be more of a v 2.0 feature though :P
That's really cool, thanks for the feedback Oskar! I feel that I understand the basics as I've programmed Java, C and Haskell before (I'm a comp. engineering student), but things like "delegate", storyboards and !, ? signs I still find very confusing as tutorials never go in depth on these things. 
Swift, and thanks! :)
Thanks for taking your time and replying, good stuff! Have a great day sir :)
As part of a conference talk about [avoiding the Massive View Controller trap](http://roadfiresoftware.com/developing-for-ios-without-falling-into-the-massive-view-controller-trap/), I wrote a little Todo app called Todoo that uses the MVVM pattern and employs the single responsibility principle to keep each class focused on doing just one thing. You can [grab the code](http://roadfiresoftware.com/developing-for-ios-without-falling-into-the-massive-view-controller-trap/) and feel free to ask any questions you have about it - I'd be happy to answer them and explain my approach.
Yes, delegation is a one of the core concept in iOS development that I initially found to be confusing as well. I started to understand delegate better when I tried to implement uitableview and its delegate function from uitableviewdelegate and uitableviewdatasource. Basically delegate is protocol and protocol is also a very important concept in Swift as Apple claims it to be a protocol-oriented language. You should start by understanding the idea of protocol in a Swift context. [Apple's Swift Book](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html) did a pretty good job at explaining it. AutoLayout in Storyboard was also confusing to me at first, so I look up Ray Wenderlich's tutorial on this and it helped me a lot. I think once you understand delegation and auto layout thoroughly, the learning curve will be way less steep!
You can actually just use `HomeModel.h` and `HomeModel.m` just as they are in that writeup. When creating the `HomeModel.m ` Objective-C file, Xcode will ask you if you want to create a "bridging header." Opt to do so, and to this new bridging header, add an Objective-C import statement like so: #import "HomeModel.h" `HomeModel ` and `HomeModelProtocol` will then be accessible from your Swift files in the same target.
You can either do /u/5HT-2a 's answer, or you can use [this converter](https://objectivec2swift.com/#/converter). (No guaruntees it'll work)
Thanks for the reply! I had thought about this, but since I've already started translating it into swift, and since the rest of my code is in swift, I decided to just stick with it, and now I'm too stubborn to go back :P If you're interested, here's the code for my sql model: https://ghostbin.com/paste/6yu3w and here's the view controller I'm trying to access it in: https://ghostbin.com/paste/txmpj
Thanks, yea I've attempted using that converter, to no avail though unfortunately :(
One approach you might take would be to set a property observer for your Player.position, then update the enemy position in the didSet portion of your observer.
One of the benefits to optionals is that you're allowed to initialize them like so: var delegate: SQLSourceProtocol? = nil ...Assuming you want the initial value to be nil of course (which again, it generally should be for a delegate property).
Don't forget to set `delegate` at some point before calling `downloadItems()`, otherwise it will still be nil when it comes time to decide whether to call `delegate!.itemsDownloaded(_locations)`: override func viewDidLoad() { super.viewDidLoad() sqlSource.delegate = self sqlSource.downloadItems() } P.S. Breakpoints are awesome, try them out! P.P.S. Almost forgot: Make sure to mark the `delegate` property as weak to prevent a retain cycle: weak var delegate: SQLSourceProtocol? = nil 
I love you more than I thought was possible to love an online stranger. But seriously, thank you. You just brought me so much relief to my day :D About the weak var though - I get the following error: 'weak cannot be applied to the nonclass type "SQLSourceProtocol". Will look into that soon
Great! You just need to make sure to declare `SQLSourceProtocol` as being for classes only: protocol SQLSourceProtocol: class { // ... } Otherwise, the compiler interprets it as being possible to assign conforming *value types* as the delegate, which you don't need or want.
Please use if let delegate = delegate { delegate.itemsDownloaded(_locations) } or even better: delegate?.itemsDownloaded(_locations) instead of checking for nil and then force unwrap! The `if let` structure and Optional chaining are there for exactly that! I know that's a direct translation from ObjC to Swift, but you missed such great features
Why allocate the extra space on the stack like that? :P
Ha ha yeah I was kidding, very much agreed with that last sentence. On that note though, if you ask me, creating a new variable that's identically named to an instance variable is less clear than the forced-unwrapping. Does Ray Wenderlich's style guide weigh in on this one?
Wow, never thought of these. I guess the best way is to parse NSAttributedString and remove the text attachment cells, but replace it with something iOS is compatible with, then upload it...
There might be a better algorithm than this, but here's how I'd do it: var beaconCounts = [beaconA: 0, beaconB: 0, beaconC: 0] for beacon in beacons { beaconCounts[beacon]?++ } let topBeacon = beaconCounts.sort({ $0.1 &gt; $1.1 })[0].0 This is assuming that beacons are descendant from NSObject (or are otherwise hashable).
My stuff being a small search engine built around 2000+ Swift language urls that I've opened sourced? https://github.com/melling/SwiftResources I've gone through the trouble of tagging most of the data. http://www.h4labs.com/dev/ios/swift.html Seems a bit strange that people would complain about that.
Yes, this. Don't take it personally, just try to post about other things once in a while.
Thanks for the reply! I ended up finding a way to do it.
Is the glitch an annoying shadow to the right of the VC?
No, both VCs are somehow overlapped for 0.5 seconds when animation/segue is occuring. 
**EDIT 2:** Aha, yes, the problem is when child VC (via segue push, etc.) has some colors (background, table cells, etc.) with transparancy. **EDIT:** I think it could be something like this: [iOS7 - previous view pollute next view while pushing](http://stackoverflow.com/questions/19831229/ios7-previous-view-pollute-next-view-while-pushing)
http://trendingcocoapods.github.io Also --&gt; https://medium.com/ios-os-x-development/libraries-used-in-the-top-100-ios-apps-5b845ad927b7
I'd recommend the Debug Podcast by Guy English and Rene Ritchie. They interview lots of old hands and in particular many people who worked at Apple. I recall one interview with someone who was on the iOS team, though I'm afraid I can't remember exactly who it was.
Thanks, I'll check it out. It's funny how I've never seen any mention of them.
1. [Alamore](https://github.com/Alamofire/Alamofire) for network handling or you can use [AFNetworking](https://github.com/afnetworking/afnetworking) which is Objective-C and written by the same author. And, use [Moya](https://github.com/Moya/Moya) for network abstraction layer. 2. [SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON) to deal with JSON 3. [Mantle](https://github.com/Mantle/Mantle) a model framework for CocoaTouch 4. [SDebImage] (https://github.com/rs/SDWebImage) to download image async and cache or you can use [FastImageCahe](https://github.com/path/FastImageCache) from **Path** 5. You can use reactive programming, such as ReactiveCocoa, BoltsFramework, RxSwift, ... Other references: [Swift open sources](https://github.com/search?l=swift&amp;o=desc&amp;q=stars%3A%3E1&amp;s=stars&amp;type=Repositories) and [Objective-C open sources](https://github.com/search?l=objective-c&amp;q=stars%3A%3E1&amp;s=stars&amp;type=Repositories).
I'd say no, it's fine. Using tools to do it makes it more flexible as you also say (with support for OAuth and what not), but if that's not needed, just go ahead.
http://www.imore.com/debug-47-melton-ganatra-episode-i-demoing-software-steve-jobs http://www.imore.com/debug-48-melton-ganatra-episode-ii-understanding-apple ill second that recommendation, and I think these 2 episodes are the ones perishabledave is thinking of. I like the Rogue Amoeba episode too
Thanks, This medium link seems useful.
Thanks. Will look in each of libraries. Any specific guideline for starter?
NICE! for sure gonna check this out.
Very Cool, Thanks for Sharing!! Downloaded 
Ok. look at that may be help: typealias jsonResult = AnyObject class APIController { private let session = NSURLSession.sharedSession() func queryGlobalResults(urlString: String, callback: (jsonResult) -&gt; Void) { guard let url = NSURL(string: urlString) else { return } let jsonQuery = session.dataTaskWithURL(url) { (data, response, error) -&gt; Void in guard let response = response as? NSHTTPURLResponse where response.statusCode == 200 else { print(error?.localizedDescription) return } guard let data = data as NSData? else { print(error?.localizedDescription) return } do { let jsonResult = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.AllowFragments) callback(jsonResult) } catch let error as NSError { print(error.localizedDescription) } } jsonQuery.resume() } }
Nice, simple and clean app! Accomplishing and successfully shipping a working product always feels great! Now you have time and you can go back and clean it up and add more features! (Different meditation sounds :P ) along with fixing any potential bugs that may arise from different users. Also you now have free time to brainstorm more great app ideas. Good luck and Have fun man! 
In your ViewController: api.queryGlobalResults(URLS.recitersURL) {[unowned self] (jsonResult) -&gt; Void in guard let jsonResult = jsonResult as? [String: AnyObject], sectionTitle = jsonResult["title"] as? String, recitationsArray = jsonResult["recitations"] as? [NSDictionary] else { return } ...... }
Thanks a lot! I have a bunch of sounds that unlock as you meditate more days... maybe I should let people know that earlier or give them more choices up front? About bugs - what's best practice way to find out where ppl are crashing.. is that something native in Xcode/iTunes connect or just wait for reports from users?
&gt; Is it a 'bad' practice to get data directly by using NSURL or NSData for links like the example one? If you're doing it on the main thread, definitely. Those calls block, which means your user interface hangs until it receives a response from the network, which can be an unpredictably long time. To the end-user, this appears to break the application. 
I honestly don't recommend using any third-party libraries. When you find yourself relying on a library, you aren't learning the basics of the actual language you're trying to master. If you really want to learn iOS/Swift, focus on Apple's own frameworks (UIKit, Foundation, CoreLocation, etc). You'll be amazed how much you'll actually understand iOS afterwards. I also recommend WWDC videos!
No books needed. Watch the various WWDC videos and check out Apple's sample code. 
https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11
Ah didn't know that, it probably mentions that somewhere on the product page. I jus searched the store and downloaded from there. I don't really use meditation in the traditional sense. Usually like, after a workout or a small break in between assignments for class. Jus put in the headphones and listen to something relaxing and browse the internet or w/e. A quick 5-10 min break allowing me to refocus. Honestly i'm not keen on finding bugs yet, as I am just learning swift and xcode but you did mention you weren't the happiest with the code you wrote. Perhaps in your free time, now that you've shipped, you can start to look at different design patterns and adopt one of those or if you feel up to the task, discover more about all the random code segments you mentioned. I don't know if some of those are even applicable since its relatively less involved than other apps out there, but food for thought. Already logged 2 small 5min sessions :D
I grabbed it but won't be able to give it a go until tonight. Warning, usually these things cause me anxiety, so I'll let you know how it goes.
Thanks for this it was really helpful. Im now trying to get round the problem of having each of the car model table cells displaying the full dictionary array. i'll keep trying!
Great! Yup, will keep a look out for bugs and can test on friends devices now it's out on the market. I do the same as you, grab quick 5 mins break in between coding to refresh.... and every day or two, a longer session when I have time..
I use library so that i don't reinvent wheel again. Lot of people put their effort in making open source libraries stable. I might miss one scenario in code and have to pay a hefty price. I agree with you that writing everything by myself make me learn a lot. Will take a tradeoff of using some libraries and rest myself. Thanks for giving pointer about WWDC videos. Will see them.
It took about 6 weeks to make, and 2 weeks to submit - got rejected by Apple the first time. Spent 1-2 hours each night plus good several hours on sat and sunday to make it. I did a couple programming subjects at Uni about 15 years ago, nothing since then so pretty much starting from scratch. I learned mostly using Hacking with Swift, the Apple reference, stackoverflow and various video tutorials (stanford ones, one on udemy etc). If you want the gory details, I blogged about the progress from hello world til now: [http://tinyhappysteps.com/](http://tinyhappysteps.com/)
Congratulations on your first release keep up the good work!
I couldn't figure out a way to keep it running when the user would lock their screen. First I tried to opt out of multitasking but the app would be killed within a few mins when screen locked. So I set for background audio and just played a silent audio track.. Apple didn't like that :) I read others suggested to use GPS in background but I couldn't find a good reason to have it. So I ended up just implementing audio during the meditation and letting users mute it or change to other tracks (eg beach, forrest, rainfall etc) and they accepted it.
Glad you figured it out!
Definitely using apple api is good, but if there not one then using library is good. btw i am new and still exploring what all apis to use and how to use them. What are most important libraries or apis i should use in my project.
No, it's not good because it's Apple. A good example is SnapKit. This makes auto layout usable. Without SnapKit auto layout in code is a train wreck. Apple has improved on this in iOS 9 but it's still not great. If you can learn to get the job done with a framework it's no different from learning an apple api
Your crucial question is well worded, 'Therefore, how am I supposed to connect this purely row value with a nested array/section from the letter array?' And the way you do it is by thinking they are connected and believing they are connected and finally knowing they are connect, simply because _you_ _say_ they are connected. *YOU* are the *almighty programmer*; it is you that says a row in the first table corresponds to a section in the second table. We do this _ALL THE TIME_ IRL. For example, If I hand you a pair of dice and say whatever you roll, I will give you that amount in $$$$s! So, you roll a 7, and I give you $7. What was it that connected some spots on a couple dice to some pieces of paper (dollar bills)? It was _me_ doing the connecting. What is it that connects that $7 you just won with the purchase of a delicious beverage? _You_ (and the owner of the shop you buy it in) make the connection, you are mapping an amount of money to a quantity of drink. If it doesn't make sense, just put the part about making sense to one side and just do it; I can tell you know what to do by the clear explanation you gave, and the nice summary in the final question. After you do it a few times without it seemingly making sense, you will discover the way for it to make sense to you.
Chris created LLVM but not iOS.
Any reason why you don't want to make lists and notificationToken optionals? If that's not an option, you can initialize with default values, i.e. lists:[ListModelView]! = [], then you'd be able to call self.populateLists() in init 
What is the legality of this concerning the copyright of the swift logo?
It seems like I hear about Google engineers (Guido van Rossum, Joshua Bloch, Peter Norvig, Rob Pike, Ken Thompson, Tim Bray, etc.). But besides Chris Lattner, no one comes to mind.
If I can ask, what things cause the anxiety while using these types of apps normally?
please post some examples i am not very confident with callback functions and structs and completion handlers. It is not making much sense to me. 
I got my serializer working here is the updated code class func authResponseSerializer() -&gt; ResponseSerializer&lt;Authorization, NSError&gt; { return ResponseSerializer {request, response, data, error in guard error == nil else { return .Failure(error!) } guard let validData = data else { let failureReason = "Data could not be serialized." let error = Error.errorWithCode(.DataSerializationFailed, failureReason: failureReason) return .Failure(error) } var jsonData: AnyObject? var jsonError: NSError? do { jsonData = try NSJSONSerialization.JSONObjectWithData(validData, options: []) } catch let error as NSError { jsonError = error jsonData = nil } catch { fatalError() } if jsonData == nil || jsonError != nil { let failureReason = "No data returned" let error = Error.errorWithCode(.DataSerializationFailed, failureReason: failureReason) return .Failure(error) } let json = JSON(jsonData!) do { let auth:Authorization = Authorization(json: json) return .Success(auth) } } } but now this function is giving me the error "Cannot call value of non-function type 'NSHTTPURLResponse?" func responseAuthorization(completionHandler: Result&lt;Authorization, NSError&gt; -&gt; Void) -&gt; Self { return response(responseSerializer: Request.authResponseSerializer(), completionHandler: completionHandler) }
After a nightmare of moving from Swift 1.2 to Swift 2.0 I am *this close* to just dumping any dependencies an writing everything myself. Realm.io included.
I hear you. My mind's often running like crazy it's hard to feel "zen" like during a meditation session (especially when I was starting out). But I would say a couple of things: - I heard a great quote "there's no such thing as a bad meditation session". That really stuck with me and let me relax about my "performance" in meditating. Even if I was distracted, if I managed to keep my eyes closed and butt in seat for the full 5 mins that would count as a successful session. - You do get better at it with repeated practice. It's a great feeling to be able to draw on inner calm during stressful times.. Good luck :)
Quick and dirty no-library solution: #if DEBUG dup2(open("/path/to/file.log", O_CREAT|O_WRONLY), STDOUT_FILENO) dup2(STDOUT_FILENO, STDERR_FILENO) #endif `print()`, `dump()`, `NSLog()`, etcetera will then write to that file.
By default, the search for user headers doesn't recurse into all directories. Check the path of the header file relative to your project, and use that in the import statement... Something like this: #import "Pods/catalyze-ios-sdk/Catalyze.h"
Thats the pitall of using a lot of frameworks, if you don't know how they work underneath it can be hard to figure out problems. The upside to writing your own code is that you know how it works, so you'll be able to migrate to the new system. 
Lack of *guaranteed* support is a great reason. 
Looked at the books from Apple itself? If you already know programming those books are good and quick to read.
You cannot store arbitrary types (eg. Your struct) in NSUserDefaults. And on that note, please don't store user data in NSUserDefaults. It's only meant for string user's settings and such. The proper thing in your case would be replacing your struct with a NSObject that conforms to NSCoding and writing the array to file. 
Thanks for the help, but unfortunately I haven't been able to put it in a way that will allow me to import it. I'm going to get in touch with the guys from Catalyze and see if they can shed any light on this. Cheers
Then whats a good way to save user data?
Firstly, there are *definitely* parts of Swift that currently seem to use really inefficient algorithms when compiling; I have had single files that can take ~4 minutes go to 15 seconds just by fiddling around with the code. Thus, if you are having *ridiculously* slow compile times you may just need to identify the problematic construct and replace it with an equivalent-but-different construct. There are I think some command-line flags you can pass to swiftc to get it to tell you how long each file took, or if you have an obvious culprit you can just watch the build log as it builds and figure it out just by eyeballing that screen for a full build. Anecdotally the worst culprit for egregious compiler-performance have been functions that had a lot of @autoclosure parameters mixed with a lot of generics; "manually inlining" equivalent logic to at the call site was often enough to go back to reasonable compilation times. For the rest of your Q, as I understand it for now and the foreseeable future WMO only operates within a module, and not really across modules; how much this actually matters will of course depend on the type of code you are writing and how you break it down into modules. This is IMHO going to be a major problem for Swift if it's not addressed soon -- it really limits the utility of writing high-powered reusable abstractions if they lose a lot of performance by being stand-alone frameworks -- but it is hard to say how much it's going to impact a concrete scenario without doing some profiling. Once of the WWDC Swift talks this year had a concrete example, but I forget which it was. (I really hope they don't put this issue off for too long, and introduce a way for e.g. a release build to merge-then-WMO the constituent modules). For the logistics, you can do it either as a big workspace or as separate projects and add the outputs manually. The workspace is IMHO a nicer setup if it's just you (or your in-house team) working on stuff, but doing it as external projects might wind up playing better with stuff like Cocoapods or Carthage.
Core Data
I guess I have something else to learn today 
NSUserDefaults can only store property list types as stated in the documentation. Use an NSObject and conform to the NSCoding protocol. This will allow you to serialize your object as NSData and then it will be possible to store it in NSUserDefaults (or to disk as a file). You probably shouldn't avoid learning Core Data though, it is the correct approach.
I am not sure whether you actually got Alamofire from original repo. The code you posted is outdated. New Alamofire uses ```GenericResponseSerializer``` If you check Alamofire repo, you will see how it is being used in ONO. After you get latest version of Alamofire following code should work. extension Request { public static func authResponseSerializer() -&gt; GenericResponseSerializer&lt;Authorization&gt; { return GenericResponseSerializer {request, response, data in guard let validData = data else { let failureReason = "Data could not be serialized." let error = Error.errorWithCode(.DataSerializationFailed, failureReason: failureReason) return .Failure(data,error) } var jsonData: AnyObject? var jsonError: NSError? do { jsonData = try NSJSONSerialization.JSONObjectWithData(validData, options: []) } catch let error as NSError { jsonError = error jsonData = nil } catch { fatalError() } if jsonData == nil || jsonError != nil { let failureReason = "No data returned" let error = Error.errorWithCode(.DataSerializationFailed, failureReason: failureReason) return .Failure(data,error) } let json = JSON(jsonData!) do { let auth:Authorization = Authorization(json: json) return .Success(auth) } } } } PS: I don't know why you don't use Alamofire's built-in JSON responseSerializer ```responseJSON``` . You can use that serializer, get your JSON and initialize your ```Authorization``` with the JSON you get with Alamofire. 
I agree. I'd rather write my own solution rather than depending on a 3rd party framework. Writing a solid networking backend is not really that difficult, NSURLSession/Task is ridiculously easy to work with nowadays.
[removed]
Is it sensitive data? Or would it not matter at all if a user went in there and changed it? If it's the latter, you can simply write out to a json file. But a user could edit that if they were so inclined. Next step is NSCoding with NSKeyedArchiver. It's a bit more secureâ€”you can't just go in there and edit values by hand, which would remove 99% of user manipulationâ€”but it still can be unarchived, edited, and rearchived by anyone, if they were so inclined. Past that, you can encrypt the data before writing it via the above step. This is very secure, and it's still relatively simple. If all you are ever going to be saving for a user is this small bit of information, do one of the above. Settings up a whole Core Data framework would be ridiculously overkill for this.
NSUserDefaults has no idea what do with your custom struct. If you write an asArray method for your **CustomStruct** that returns an NSArray length 2 of an int and a date, you can put **that** in a new array that **will** go into NSUserDefaults. Naturally, on the restore side, you'll need code to walk the array of arrays, an hand you back an array of **CustomStruct**s
I actually believe this may be an issue with my SSL certificate. We just added an SSL cert to our API. how do we make sure our app is using the SSL. Would that prevent us from loading URL images from the API? 
The point is: you should never force unwrap something like that
Sounds like it's triggering an infinite loop? Would you happen to be calling it from within the class it instantiates, maybe?
I dont understand, i isolated the class by removing all code in the "indieReviewView" view controller. I am instantiating reviewView in a seperate view controller. This is how its set up 1. Tab Bar controller 2. user taps tab bar item 3. view controller 1 is presented modally 4. view conroller 1 has AVCaptureSession, then calls instantiateReviewView() func instantiateReviewView() { let storyboard = UIStoryboard(name: "Main", bundle: nil) reviewView = storyboard.instantiateViewControllerWithIdentifier("indieReviewView") as? independantReviewView reviewView!.view.frame = CGRectMake(0, 0, self.view.frame.width, self.view.frame.height) self.addChildViewController(self.reviewView!) reviewView!.didMoveToParentViewController(self) self.view.addSubview(reviewView!.view) } 5. app cpu usage hits 100% and freezes. Now there is another method I have called instantiateSearchView() which has the exact same code but for a different view controller, and that works fine. I commented out the "instantiateSearchView()" in the view did load. So the only things happening in view did load are 1. AVCaptureSession 2.instantiateReviewView() - where the bug occurs. 
I have a good c# background plus java. 
Don't present views modally from a tab bar click. 
I can't see it as I'm in UK and it seems to be limited to the US, but TeeVee does this on iPhone if anyone is looking for an iPhone equivalent! :) 
Yea I'm sure that the OP was hoping that people would list other products that do the same thing on a related platform...
You could start with C then refactor from there? https://github.com/devshane/zork
there's stackoverflow
Nope, Swift programs use standard IO just like any other. `open()` and `dup2()` are just system calls, so this will work as long as you have the `Darwin` module imported (which `import Foundation` takes care of).
Let me see if I can help. You currently have: var letter = [["a", "b", "c"], ["d", "e", "f"], ["g", "h", "I"]] And from what I read, you're having trouble seeing how to access elements of your array. Let's start by reformatting the code a little bit. var letter = [ ["a", "b", "c"], ["d", "e", "f"], ["g", "h", "I"] ] Now, instead of thinking of this as a nested array, think of it as an array of arrays. What happens when we access the first element of our array? let firstSubArray = letter[0] // now, firstSubArray = ["a", "b", "c"] Each element of your array, is an array itself. So, in your case, when your user selects "one", you could just extract the subarray you want like I did in this example. You can also access individual elements of your array directly. For example, to get the letter "f", we would use: let letterF = letter[1][2] // "f" is the ^ ^---third element // of the ^-second subarray You might also consider using a dictionary instead of a multi-dimensional array. var letter = [ "one" : ["a", "b", "c"], "two" : ["d", "e", "f"], "three" : ["g", "h", "I"] ] let arrayOne = letter["one"] // ["a", "b", "c"] That might help you keep it clear in your head.
So in case anyone else comes across the issue here, basically because in my Podfile I typed in use_frameworks! I don't actually need a bridging file and instead just needed to type import catalyze_ios_sdk whenever I wanted to use the catalyze features, such as a log-in screen.
/u/veracitymilk is right - just to add a little, the `\n` means "newline". It's not actually displayed usually: in text encoding, it's just a signal to print the rest of the text on another line. In Swift, if you want to store a string with a new line in it, you can't just press enter, because the compiler would find that difficult to parse. The solution is to put in a special character that *represents* a newline. By convention, that's `\n`. There's one other subtlety here: the print statement *doesn't* actually print "Hello\n". What you're talking about is the output (I'm guessing) on the right-hand-side pane in a playground. This pane shows you all of the special invisible characters, because you usually use it for debugging purposes, so the invisible characters may give you more info. If you look at the console (the bottom pane) you'll see that the print statement actually *does* print "Hello".
Well not ALL. It's not showing you &amp;nbsp
I really like [Swell](https://github.com/hubertr/Swell). It is all written in Swift and pretty light weight. I think the author designed the API in a nice way and it is handy with how you can configure loggers with .plist files. So you can change logging level without recompiling, and you can do it for individual loggers or for all loggers. The nice thing about that is that you can make a binary framework that you distribute to customers using Swell and customers can change how detailed the logging is by just changing a .plist configuration file.
Well, it's showing you spaces. It's in fact rendering them as... spaces. Which is pretty much the normal way to do it. &amp;nbsp is an htmlism. 
[removed]
non breakable spaces are a HTML construct. The space is a character on its own and Swift renders it as it is.
Congratulations! As a huge consumer of TV shows, this will keep me updated on what's on (I'm no English major so the name is alright!) right from my wrist.
I had this issue before OP. Just move the whole viewController up, then slide it back down when the keyboard dismisses.
1. Money manager is not a hyphenated term. 2. Creative Commons shouldn't be used for software. They [say so themselves](https://wiki.creativecommons.org/wiki/Frequently_Asked_Questions#Can_I_use_a_Creative_Commons_license_for_software.3F). 3. You've included a number of images to which you have zero right to redistribute - the Monopoly tokens. 4. Your commit messages are atrocious. 5. So's your grammar: &gt; Play Money uses the **r**ealm database to manage **it's** storage. The Tab Bar Icons are **L**icensed **with a** CC BY-ND 3.0 and provided by icons8. I appreciate the excitement of sharing a creation, but at least make things presentable. Haven't even gotten to the code yet, much less the app. D:
Just one question: how'd you get an update approved within 3 days, lol
few things make me rage more than commit messages that read "updated file"
To give a not-too-specific possible answer, register the UIViewController that contains your UITableView as a UIScrollViewDelegate, and then override the method [scrollViewWillBeginDragging:](https://developer.apple.com/library/prerelease/ios//documentation/UIKit/Reference/UIScrollViewDelegate_Protocol/index.html#//apple_ref/occ/intfm/UIScrollViewDelegate/scrollViewWillBeginDragging:). Each time that method gets called grab the first cell in self.tableView.visibleCells and update its frame to be (0, 0, yourCellWidth, yourCellHeight). The cell should still get deallocated (and disappear) properly when you slide up enough, but by then should already be covered by another cell, so memory is still managed nicely, hopefully. **If that method "scollViewWillBeginDragging" isn't called often enough or at the right times, you could also try scrollViewDidScroll: also mentioned in those docs.
I feel you brother. Storyboard is a cock-sucker even with beta. 
There is feedback then there is FeedBack. Damn! Joking aside, I think code feedback would actually be more interesting, especially given this is a free app someone has done in their spare time, likely as learning exercise. 
[Swift going open-source - xcode on linux?](https://www.reddit.com/r/swift/comments/3gi10f/swift_going_opensource_xcode_on_linux/?) [Swift Without a Mac](https://www.reddit.com/r/swift/comments/3lxbg4/swift_without_a_mac/)
Thanks, I really appreciate you help and honesty. I'll try to fix these things this day :) 
In my case some Xcode 7.0.1 (or 7) crashes were related to some external plugins I used. *XCodeMiniMap*, *etc*. 
Passing tuple (value, index) is one probable solution to this problem, but not being able to delete an element in array is regression compared to Objective C
Buying a Mac isn't any harder on the wallet than buying anything else of equal capability. Beyond that you want a fairly powerful Mac to run XCode. This is especially the case of this app development is for a business venture, the cost of the Mac isn't even a consideration in the overall scheme of things. 
I love that moment when the interpreter kicks back on, and the text reverses direction (even though I never took my hand off command+/).
I've done a couple of things to help out in this area. One is a tool where you can drop a design and it'll show you the Swift code for the main colors in the image: http://codepen.io/blixt/full/VvYPOm/ Another is a Swift extension that lets you use hex colors in Swift code (make sure you only parse the colors once and not every time you redraw though!): https://gist.github.com/blixt/821a0748257dc8d3581f
I guess a starting point would be taking a look at how these guys are doing it. https://github.com/TeehanLax/UITableViewCell-Swipe-for-Options
This is a custom UITableViewCell class that I wrote for one of my applications. It will give you a starting point, allowing you to slide to the left and reveal a button. You can switch the sliding logic if you want the swipe to go the other way, then just change which buttons you display. class MediaItemApplicationTableViewCell: UITableViewCell { @IBOutlet weak var titleLabel : UILabel! @IBOutlet weak var subLabel : UILabel! @IBOutlet weak var coverArtImageView : UIImageView! var originalCenter = CGPoint() var deleteOnDragRelease = false var collection : MediaSelection? var canBeDragged : Bool = false init() { super.init(style: UITableViewCellStyle.Default, reuseIdentifier: nil) let recognizer = UIPanGestureRecognizer(target: self, action: "handleCellPan:") recognizer.delegate = self addGestureRecognizer(recognizer) } required init?(coder aDecoder: NSCoder) { super.init(coder: aDecoder) } override func awakeFromNib() { super.awakeFromNib() // Initialization code } override func setSelected(selected: Bool, animated: Bool) { super.setSelected(selected, animated: animated) // Configure the view for the selected state } func handleCellPan(recognizer: UIPanGestureRecognizer){ if canBeDragged { switch recognizer.state { case .Began: originalCenter = center case .Changed: let translation = recognizer.translationInView(self) center = CGPointMake(originalCenter.x + translation.x, originalCenter.y) // far enough for delete? deleteOnDragRelease = frame.origin.x &lt; -frame.size.width / 2 case .Ended: let originalFrame = CGRect(x: 0, y: frame.origin.y, width: bounds.size.width, height: bounds.size.height) if !deleteOnDragRelease { // snap pack if not deleted UIView.animateWithDuration(0.2, animations: { self.frame = originalFrame }) } default: break } } } override func gestureRecognizerShouldBegin(gestureRecognizer: UIGestureRecognizer) -&gt; Bool { if canBeDragged { if let panGestureRecognizer = gestureRecognizer as? UIPanGestureRecognizer { let translation = panGestureRecognizer.translationInView(superview!) if fabs(translation.x) &gt; fabs(translation.y) { return true } return false } return false } return false } } 
Just go to an Apple store (or any other that has them) and buy an unlocked model. You'll have to pay the full price of the phone but you'll be good to go without having cell service. I did this with an iPhone 6.
How long ago did you go to the Apple Store? It seems that Apple only began selling the iPhone 6S/Plus [a few days ago](http://www.theverge.com/2015/10/8/9485291/unlocked-iphone-6s-available-apple-store). [If you go on their site](http://www.apple.com/shop/buy-iphone/iphone6), you can select "SIM-free" at the "Carrier" option. It's a bit pricey though ($549 for the base 6, $649 for the 6S). But if you only plan on using it for development, I'd highly suggest going with a used option. There are loads of people selling their last-gen iPhones, and plenty of them are unlocked.
do you have a separate PF subclass for your BubbleTest class?
I was just wondering if it is necessary to inherit form nsobject. You're coming from obj-c right?
Wouldn't get too hung up on the interface code. That is generated. The original code might have spread these extensions across multiple files. But generated interfaces usually dump everything together. I use extensions for many things. (1) to split up large classes over multiple files. Usually each file then deals with logically related functionality. E.g. I could put all implementations of a delegate in a separate file. (2) Some functionality doesn't belong in a class at all. E.g. a regular String class shouldn't know how to draw itself on screen or how to save itself to disk. What you put inside your String class should only be related to manipulating the characters, searching etc. But in a separate file you can put extensions to String for drawing, saving to disk etc. Apple does this e.g. so that e.g. drawing extensions to something like NSString would be in AppKit or UIKit but not Foundation. So code that uses String but only imports Foundation will not have any GUI or Graphics dependencies. (3) In general I try to avoid inheritance. If something can be done with extensions instead of inheritance I do that instead unless it causes obvious problem.
It took around 7 days, and then I was rejected. Then another 6 days and rejection, and finally on the last attempt it took about 7 days. Your app should be reviewed soon.
Awesome great advice. Will implement in the next update!
I consider a port of xCode completely unlikely. Swift is built on standard unix stuff and likely straightforward to port. xCode isn't. There is no Cocoa, Core Graphics etc on Linux and Apple is not going to port all that. That doesn't matter though. AppCode from JetBrains supports Objective-C and Swift and will almost certainly be available for Swift development on Linux. The AppCode IDE is the same as for IDEA for Java so it is already ported to all major platforms. For Swift developers in general this will probably be good as Linux developers will be forced to use AppCode which will give AppCode a much bigger market than they have today, thus likely accelerate its development and feature set.
Thank you! I'm currently working on the ipad version, I was having a little trouble keeping it universal but I think I've got the hang of auto-layout now.
He's filtering an array of these objects later in the code with an NSPredicate, which requires the class to conform to NSKeyValueCoding. Easier to just inherit from NSObject than write the code yourself!
&gt; You're coming from obj-c right? Sure am, with fewer and fewer reservations each day. /u/aandrewc is right on point in regards to this example. I actually really like Swift's lack of the monolithic root class, but it's true that NSObject is a really powerful object to inherit from. While we're on the subject, anyone know how to pull off something comparable to NSObject's dynamic message forwarding in Swift? I was sad when I learned that NSInvocation had been explicitly walled-off.
I need to evaluate some JavaScript that redirects to a locked page. Don't think this will work.
You can use the [`evaluateJavascript:completionHandler:`](https://developer.apple.com/library/ios/documentation/WebKit/Reference/WKWebView_Ref/#//apple_ref/occ/instm/WKWebView/evaluateJavaScript:completionHandler:) method on `WKWebView` to execute javascript and get the result back. 
Ugh, just figured it out &gt;_&lt; I was getting nil when specifying the width for the frame, specifically the arrowimage.size.width property. Turns out I copied references to the images into my project, not the actual images themselves. &gt;_&lt; Can't believe I spent a whole day stuck on this! Carry on..
I can't help but feel traversing the view hierarchy is generally a bad idea. I can't tell here exactly what you're trying to do, but it smells like a good fit for the delegate pattern.
Did you figure this one out? I'm seeing the same issue with a View controller built on the storyboard. This was working on ios8.x in Xcode 6.x, just now seeing it while upgrading everything.
In c/objective-c, "nil" makes no sense for value types like bool. For reference types, it's valid. I would expect KVC to behave accordingly. (By which I mean, you should be able to use optionals for objects.)
[removed]
The only drawback in SpriteKit I noticed on iOS 9 is performance. Strange performance drops/glitches.
Hackingwithswift.com is an excellent resource, showing more of how to do things rather than going into the theory. Though, there are some great explanations there as well. iTunes U has a few courses from Stanford which focus explicitly on Swift. The professor is excellent, but the course does move quickly (it's Stanford, so yeah), so don't be aggravated when you get to the second or third lesson and he expects you to understand the theory behind computers and stacks and pop and push... You'll get there, but it's a great resource and you can learn it at your own pace. I've found Swift 2 to be so new that a lot of tutorials haven't been updated for it (and a lot changed between 1.2 and 2, like try and catch). Hackingwithswift is pretty much up to date and you can find iOS 9 tutorials that will cover Swift 2. Udemy has a course as well as Lynda. Google is your friend. Paste a copy of the main error and you'll probably find a solution. Swift might seem friendly and, well, Swift, to learn, but iOS development can be very complex. raywenderlich is a great site as well, but some of his iOS 9 and Swift 2 tutorials are locked behind a paywall, so try the many other free resources first before deciding if it's worth buying his "book". 
I like the Udacity courses. Here you have: https://www.udacity.com/courses/ios
Exactly i just want one row so not sure using the table view is the best option for what i want to do. 
Oh, cool! I didn't know you could request an expedited! Thanks for letting me know!
I was able to fix all those issues, I just need to update the screenshots. Language issues are more likely to occur because of me being a High School student and English is not my native language.
I want to begin iOS app development and have started the iTunes U Stanford course(which I guess by now is pretty much where everyone starts.) My question is - where do I go once I complete that and Ray Wenderlich's tutorials? Do I dive in to make my own app? Or is there any other resource I should first check out? 
The button must be control dragged to the file which contains the UIViewController definition / source code. Press control and drag the button on the interface builder screen to the text screen containing the source code. You should see a marker and when you release the mouse button, a dialog will ask if you want to make it an outlet or an action. Select action. Then cut and paste you code into this action.
that's what I've been trying to do. when I hover the blue marker over my ibaction function is doesn't highlight and let me connect it like usual. I've tried dragging it to both the UIViewcontroller.h file and my view controller.swift file which subclasses the uiviewcontroller 
I'm a novice, but I'll try to explain (and subsequently test my knowledge): If you have kids and you want to go out to a movie, you hire a babysitter. The babysitter is now the delegated boss of the kid. littleKid.delegate = BabySitter
so has anyone fixed this?
What's your programming background? Swift going to be your first experience with development? There's tons of beginner information on the web.
An object has all kinds of methods and properties and complexity. You don't want to talk to that all that hot mess, so you create a simpler object that has less doodads and you talk to that instead, and it passes what you are doing/reading along to the big bad object, and thus it's the delegate of it. *Under the covers*, a modern app and its messaging queue is so complicated it's like Cthulu. You don't want to talk to Cthulu, lest you be driven mad. You talk to an acolyte.
Thank you for the advice, really!
At a very basic level, a delegate is an object which implements a set of methods which allow it to react to and thus modify the behaviour of a particular instance of another class, the delegating class, which must be written with delegation in mind. It can be seen as an alternative to subclassing which is in some ways less complex - rather than understanding the internal workings of a delegating class to alter its behaviour when writing a subclass and overriding methods, one need only understand its delegate protocol, and write a new class which implements it. Frequently, one need understand even less than that, as the methods in a delegate protocol are usually optional, so you only need to understand the ones you're actually going to use.
Apple offers a free book to learn Swift: https://itunes.apple.com/ca/book/swift-programming-language/id881256329. As someone with prior experience in a few programming languages you should have no problem with it.
So, that's a very good point! It's still, to this day, a point of contention. People, right now, mostly use delegates because that's what Cocoa's done for decades. But there are a lot of APIs that are moving to a callback-based system (just look at `UIAlertView` / `UIActionSheet` vs. `UIAlertController`)
Never apologize for being a beginner! Glad you're learning!
I don't really have the credentials to be giving advice, but I want to work on a game, 3D, much like that incredible Enterprise-D simulator. I started learning Unity and Unreal but backtracked a bit when I learned about the limitations of each and the capabilities of each. I had no idea what I needed or wanted out of my project, or what each platform's offering was in the context of what I wanted to build. So, I'm starting at the beginning. Probably not the quickest or most efficient way to do things, but I'm learning Metal now! I like this way of thinking for me. Once I've learned the limitations of Metal and the rest of the iOS gamedev toolkit, I'll really know what the other kits have to offer my project and whether or not they'd be a good fit because I'll know what I need by that point. I won't get stuck developing in Unreal only to find out that I need more complex shaders, or my geometry can't be imported... Not that those have come up, yet, exactly, but knowing the very basics is, for a me, a much better starting point to figuring out how those other kits can help. While its pretty much standard to be taught jQuery alongside HTML and CSS these days, the lessons I've attended always start by teaching you the JavaScript method of accessing the Dom without the jQuery wrapper. Then, the instructor introduces jQuery and shows how it solves a problem (the complexity of getting and modifying DOM objects without jQuery or something). I think you should see what the core iOS tools have to offer before jumping straight to an alternative. 
Wow, man. I love that you're like," I'll jump into Unity and Unreal" I respect that. I agree I need to stay within iOS and just toy with SpriteKit. LevelHelper just looked pretty cool from the page I saw on it. I'm planning on making some cool side scrollers to start off so SpriteKit is best for that. Good Luck in the quest for Metal.
Haha thanks. I had experience in Maya and Blender in the past which made it very easy for me to start working on geometry and building levels and characters. Before I knew it, though, I was face first into Blueprints and then read some of the horrific reviews of how Blueprint coding turns into process wasting and... Anyway. I learned I didn't know enough about the project or the tools to decide whether either would work well enough. I was really excited by some of the new game tools that came with iOS 9 and Metal, which has been adopted by Unreal and Unity (afaik), looked right. Sure, starting off with your own engine seems tough, but if you follow good coding practices and keep everything in self-contained functions etc... I think my project will have the core of an engine I can use and extend elsewhere that I know is as close to the GPU as I can get. Their opening page and low cost of entry ($24.99 if you just want to export to SpriteKit) looks great, and it may well turn out to be jQuery-like, making it easier to code without introducing too many limitations, but I don't really know enough about it, my finished project or yours to know if it has anything to offer. I'll tell you one of my bigger fears about these tool kits. My app will look and behave just like a thousand other apps built on the same tools. Unreal hasn't really had this problem (Gears of War looks a lot different than UT), but iOS has a lot of apps that look, feel and act the same with different assets. I'd hate all my hard work to appear as if it were a flappy bird clone to the first reviewers. Starting at the core might have the same result, but at least I won't have the Epic Games launch screen in there to prove it!
if you want free...id start with the swift book by apple or Hackingwithswift.com if you want a video series I've started a new one youtube showing how to make an app with parse...https://www.youtube.com/channel/UCj6deFyKcRdp51mvsYjPJIQ I do not cover the basics like varibles, loops, ect...for that hacking with swift or apples book is the only way to go for free. Personally id spend $10 and get Mark Price's course on udemy, best ive found by far. Cheers! edit -- my videos are not that good, but im still learning :) 
I have the exact same fears. Its hard to produce something that feels new when its built on something thousands of games have been built on. but yes GoW is fresh compared to UT.
Huh, well oh well, I enjoyed the course and the $29 I spent was well worth it. Not sure how missed all the $10 sales tho, haha! Thanks!
i just spoke with him in the class chat room, hes no longer doing the $10 promos anymore....so get it at what ever you can and quick! 
Not everything goes on sale, so your $29 class might not have dropped. It seems like the more expensive, the more likely you'll get it cheap in a sale.
http://www.extremetech.com/deals/205028-et-deals-10-online-courses-at-udemy The last one was just a few days ago. Keep an eye out.
These additional layers of abstraction basically limit you to creating a subset of cookie cutter / lowest common denominator apps. They're perfect for an established company/brand who just wants to stick their logo on something and offer a handful of basic features. Realistically if you're an individual or small company you need to offer something more interesting and unique to have any chance at success. If success only required shuffling around some predefined UI elements and changing a few strings we'd all be trillionaries by now. 
It will probably never be possible to build a tool (in other words it wouldn't make sense) where everything could be done with drag-drop + clicking, etc. Almost every non-trivial (even down to the simplest programs/algorithms) solution has a very specific coding-logic. Now, imagine a tool which would have every possible combination available through some IDE building blocks. In the end you would have to do the same (or probably more) hard work configuring those blocks. It is easier and faster to write code directly :). And it's fun at the same time. As I see things now, we have probably reached almost top-abstraction-level (as *UptownDonkey* noted) possible. The one thing about abstraction missing is maybe trivial-**full**-cross platform compile.
All three of the technologies you proposed are reasonable choices depending on what you're looking for. --If you want to run anywhere, have a desktop version, or already have some web/db experience, a web app would probably be your quickest route. -- if you want established and mature libraries and tooling, try using Cocoa in ObjC. Swift may be the future, but I promise Cocoa will remain a useful skill for the next 5 years at least. -- If you just want to learn Swift, or come from a scripting or functional background, Swift is getting more and more usable. Your project sounds small enough to work your way through while introducing you to a few different development zones (layout, databases, cloud syncing). There are now several competing lightweight db frameworks with Swift ports (for your purposes, iOS-native CoreData may be overkill) and lots of the earlier Swift hiccups in tooling have been resolved. 
I never really liked that thing with aligning the parameters vertically... Always turned it of. Having a single invocation take up six lines all by itself bugs the crap out of me. :P To that end, when breaking up lines I always try to keep the meaningfully-related parameters grouped with one another. After all, that's usually why the developer put them in that order in the first place: view.addConstraint(NSLayoutConstraint( item: view.superview, attribute: .Top, relatedBy: .Equal, toItem: view, attribute: .Top, multiplier: 1, constant: 0 )) 
Can you reupload the book?
Prepare for a lot of work. If you don't have background in object oriented programming it will take you some time to even learn Swift. Then you need to learn how Cocoa Touch works to create a GUI and then setup a secure database server that will expose an API to read and write data to it. Not trying to discourage you just a heads up that this project could end up taking months for someone who didn't do anything like that before. A great resource for learning Swift and Cocoa Touch is this [Stanford](https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099) course.
You could do it like the following for var i = 0.95; i &lt;= 1.05; i += 0.01 { print(i) } Which is what xlogic87 suggested, or you could do it like this. for index in 95...105 { print(Double(index)/100) } Top one is probably more clear for someone else reading it though.
try metal
&gt; I get this impression this isn't something you can relate to, but a lot of people see "interacting with others" as the go-to practice. What's annoying is people asking before trying. I assume that you are here to learn. You will learn more by trying and failing and trying and doing than you will by posting a question then waiting hours for people to give you answers. If you'd actually tried it in Xcode, you would know that you can do what you want...*and* you would have the satisfaction of knowing that you figured it out yourself. Stop being so needy and provide for yourself.
I'm a quick learner, it's a fairly "basic" project (for now). I've set aside several months for it, I know this is not a weekend job considering my current knowledge. I do have a good grasp of logic, which have allowed me to learn not only the programming but also several spoken languages by myself. I also spend 99% of my programming career with databases. (Oracle, MSSQL, MySQL), so that's not a point I'm too worried about. I will probably end up here now and then, when I'm stuck with syntax (which is the bulk of my errors in most cases). Clarion is an OOE, so there is that, even though I haven touched the stuff in ages. My main obstacles as I see it are my lack of skills creating the GUI, especially for touch. Once I can connect to a DB, pull records and make lists, apply filters, I'm set for the rest. I have the workflow/storyboard on paper, including each of the visual screens. I know fully well this is a ambitious project. I'm not one of those people that will go "I have a great idea for an app, I'm looking for a free programmer, you'll get paid when we start selling!" (Look on Craigslist or other sites, there are hundreds of people with "great ideas"). Thanks for your comment and heads up :D
Code please. Help others help you.
Hey, I appreciate the pure utility with which you qualify other peoples' experience, but realize that we're all here because we enjoy discussing programming, so I gotta formerly ask you not to do it out loud. If you wanna get your fix of poking holes in people's enjoyment, that's what Stack Overflow exists for.
Good question! The Primer SDK allows you to set a user id for each user. Then, when you locally generate a SmartLink on the iOS side, the link has information on the user it was created by, eg user id When the link is shared to someone else, by lets say sms, and the receiver clicks the link, they're brought to the app store to install the app. Once they install, the Primer SDK gets attribution information and will receive the creator's user information, eg user id. There's no limit on what information you can pass here so you can do things like promo codes and profile photos :) Skim through a quick guide to see how easy it is to setup! http://docs.goprimer.com/docs/invite-links-guide
look into `dictionaryWithContentsOfFile`. ~~All plists are dictionaries~~. From there youshould be able to get the array of entries and enumerate the other dictionaries. Edit: `arrayWithContentsOfFile` will do the trick.
Ah, you meant the rule-builder window and not the list of rules itself. I've never made a rule with so many criteria. Reading/writing a plist is pretty straightforward, as the the other two guys have already shown. In Swift you'll use NSArray(contentsOfFile:) and writeToFile(_:atomically:). Or the equivalent URL based methods. 
In addition to what has already been said: Swift is a much, much faster language than Javascript. You don't want to waste precious CPU-cycles on a mobile device where performance and battery is crucial. Javascript is also not very easy to maintain in larger projects and lacks proper threading. Swift also gives you more safety than Javascript does which will hopefully lead to less buggy code and Swift also offers a couple of language features that are really nice and not available in Javascript. But there are not only language problems. There are platform issues as well. A platform like fuse will always be one step behind Apples tooling. When Apple changes things in their SDK, people using Fuse have to wait until Fuse adapts and implements those changes. Then there's also the community portion of it. I bet you that the Cocoa, ObjC and Swift community is much, much bigger and that it is easier finding help, tutorials, guides, blog posts and 3rd-party code if you stick to ObjC and Swift. https://medium.com/@harrycheung/mobile-app-performance-redux-e512be94f976
Seriously, this game is my husband, my brother in law, and my new obsession. DAYS with this game!! One critique (or admission that I'm not as smart as I thought) - is there a way to mute the sounds that I'm missing?
Hey, no biggie! I never would've noticed it since I keep my phone on mute all the time. Leave it to my husband ;-) Good luck and thank you so much for such a simply addiction and fun game! 
How are you planning on getting the lecture data? If you are going to manually input it, use Parse.com and set up a class. Its free and you'll be able to change data without resubmitting or redistributing the app. 
I wondered when explicit captures are needed and why there is both unowned and weak. For anyone else confused: [see this StackOverflow](http://stackoverflow.com/questions/24320347/shall-we-always-use-unowned-self-inside-closure-in-swift).
Ohh, sorry, I didn't think anyone would need it anymore. The link works again now ;)
Maybe try declaring it first. Then, from the little dot next to the declaration line of code, drag to the button in IB.
Thanks for all the suggestions! I ended up using the stride method and it works great. 
Just in case anyone's delicate sensibilities are offended by this, there's also a http://goshdarnclosuresyntax.com/
Oh, and in case you need it, there's also http://fuckingblocksyntax.com. I've definitely used that one before.
My mistake, I should've double checked.
I actually really appreciate this list being is as complicated as it is; it's a summary of how *flexible* the syntax is rather than convoluted. With Objective-C, you more or less had to redeclare the same block every time declaration every time you instantiated one, again when you're passing it as an argument, then once more when invoking it. you invoke it to through a method... Now I smile every time the parameters of my passed-in closures match those of the parameters they're being passed to.
Oh for that part we use a technique called fingerprinting. Gist of it is that when they click a Primer SmartLink, the webserver notes that its from lets say an iphone from ip 192.168.1.1. When the user then goes to app store, downloads and installs the app, then opens it, in the initialization of the app, the Primer SDK registers itself to our servers and mentions that its from an iphone + ip 192.168.1.1. If its within a small window, we can determine the link + properties, eg user id who created the link, and send it back down to the SDK. If you're interested in more technical details feel free to email me at tian@goprimer.com I'd be happy to go into detail to show you how it works when integrated into your iOS app
Tried that and for some reason it still isn't working? let view = self.view as! MTKView view.delegate = self view.device = device view.frame = NSRect(x: 0, y: 0, width: 800, height: 600) view.sampleCount = 4 
What I would like to see is a Swift binding to Monrel2 web framework: http://mongrel2.org
This is very interesting info!
I started over and it ended up working. the only thing i changed is in the parse website i chose to make the project language objective-c instead of swift. I've been following this tutorial if anyone has any feedback on it. also if there's any documentation on making a parse backend with swift that would be awesome. It's taken me multiple tries to do it in swift and i can't find any help on it on stack overflow. it's all in objective c. https://www.youtube.com/watch?v=7sL47vpWTMU
you could create short animations of what an algorithm does with some data structure or an animation of what a filter does with an image etc. etc.
&gt; The compatibity with C blocks further shows that arguments are not sent as tuples. C sends its arguments as tuples too... it just never chooses to call it a tuple or offer any way to model a tuple in the language. (Ignoring registers) the C calling convention requires that you push arguments onto the stack in a given order before calling a function: that makes the set of arguments a tuple (it's a packed, ordered set of values sitting on the stack). Obviously, once you include registers and CPU-specific calling conventions, it all gets complicated and ugly but that work happens at the LLVM level. The SWIR (Swift intermediate representation) is free to represent it ideally.
I stand corrected. I was more talking about some kind of high level tuple class, but being specific is important.
This is going to be a tough sell... You are essentially asking someone to code for free - and to assume that your marketing skills are out of this world to see any kind of return. Would you go to an engineer and tell them you know I want you to build me a prototype for an idea I have and after you build it, I will sell it. You're placing all the risk on the engineer.
My memory says there are a few cases but the only one I can immediately find is: https://devforums.apple.com/message/1080084#1080084 he says: &gt; Varadic tuples are not intended to be supported outside of argument contexts. This is an artifact of our parameter handling leaking through, not the hint of a future feature that we'd like to support. By implication, he is saying that an argument context is a tuple (though argument context tuples have their own unique features). Other Apple devs give similar information. Including jckarter here: https://devforums.apple.com/message/980987#980987 saying "all functions in Swift take a tuple of arguments".
The string is received from an API, I have no control over the format it comes in.
You can alter the string before creating an attributed string from it.
Thank You, I will try this
Sure thing. Just keep a reference to the buttons and give the button you actually want to tap an IBAction/addTarget: method to work with. You can do something like: @IBAction func changeColours(sender: UIButton) { let buttonArray = [button1, button2, button3, â€¦] for button in buttonArray { button.tintColor = UIColor.yourColor() } }
:) Gently dipping in my toe to see whether reddit is as warm, welcoming, and nonjudgemental as I have heard.
Thank you. Added with this commit https://github.com/thellimist/SwiftRandom/commit/dca255aecced29ed94eadb19eccb3b0389f8a707
It is 100% the p tag. CSS adds a break after p tags. Use a span tag instead
The app's Document folder.
[some thing like this](https://gist.github.com/sixfngers/26f740d2660bbc7cf883) only one picker updating on the selection of another but hopefully you can take it from here.
http://www.swifttoolbox.io/
I have no knowledge of obj-c and what bridging headers are and I've already spent more than 12 hours trying to fix it now. Fixing it in the portrait mode would do the job right now. Is there any fix for that? I was thinking of flipping the preview video horizontally after it has been processed and then overlaying the box on it. Can that be done somehow? Thanks!
&gt; I was thinking of flipping the preview video horizontally after it has been processed and then overlaying the box on it. I am not certain but, I think that would be pretty taxing on the app and phone. Sorry I can't give a better answer than that. Again it depends on your intentions. If you are trying to build an app for release, then I definitely wouldn't use your proposed solution. If this is a learning experiment and that is the only thing holding you up, try it and see if it give you the results you are looking for. Time permitting I will see if I can fix the bug, I see your open issue in the git repo, and have it watched.
https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ is a primer for learning how Swift works -- its perspective is sort of for new programmers and sort of for those coming from other languages, but it is fairly comprehensive if you can understand it For Swift+iOS frameworks, Paul Hegarty's Stanford course (available free through iTunes U) is amazing: https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099
Am very new to programing.
That's not swift. ;)
I am not sure what function it was but it was available in swift 2, where you can check the system version. With that in mind, you can do something like: if #available(iOS 9,*) { font = UIFont.systemFontOfSize(12, weight: UIFontWeightLight); } else { font = UIFont.systemFontOfSize(12); } For iOS &amp;lt;9, default font is Helvetica Neue Light. This is roughly a pseudocode because im on mobile. But you get the idea. EDIT: thanks to /u/frownysmiles for providing the function. I updates the source code to match the correct function.
ohh ok. I suggest storing the data in Parse and then using cloud code push the notifications to the device. I included the link for a Docs below. [Parse Push Notifications](https://parse.com/docs/ios/guide#push-notifications)
Don't people Google first before they ask these questions? I mean this reddit seems to be nothing but people asking how to learn Swift every week. This question must have been asked a million times on all possible forums. My letting out steam here isn't directed at you asking the question but rather about us allowing this reddit to turn into this. I've been interested in many other programming languages before like Go and Julia and their reddit's is nothing like the poor quality of the Swift reddit. This reddit just feels like a question and answer session and very little about Swift. Of course I am a big idiot for keeping looking for interesting stuff which hardly ever pops up.
I usually use Cocoapods to get stuff from github. Having said that though I feel there is a poor culture of overusing third party stuff coming from people familiar with JavaScript, Python or whatever open source world. People jump too quickly on third party stuff before bothering to learn the Apple provided frameworks and tools. You should really think twice about using some obscure third party stuff because sometime it is a total over engineering or poorly maintained. The iOS world changes rapidly and suddenly you got an OS upgrade and you depend on third party libraries which the author has stopped caring about. As a consultant I took over an App that suffered for this in all sorts of ways. They used Core Data with a bunch of third party libs on top of that, for managing less than 1K of data. Total waste. I replaced it with simple file reading and writing and threw out both core data and the third party stuff. Ended up with less code, better performance, fewer dependencies and something much easier to understand. They did text field validation of emails with some over engineered library that used all sorts of multithreading to do their work. I had hell fixing odd racing conditions. I thew it all out, wrote it from scratch running on the main GUI thread. No performance issues and spent less time writing that code than figuring out just one single bug in the third party lib. These are just some examples. I had lots of experiences with this. Before grabbing a third party lib, think carefully about how difficult it really is to do what you want. Often you need is very narrow and can be done in very simple ways rather than relying on some fancy library.
so there's no way to do it with 2 components?
oh you mean the picker view has two components. I see. i read it wrong.
[new gist](https://gist.github.com/sixfngers/2f8b360820449e75fe52) i don't know if the switch statement in the didSelectRow delegate function is the most elegant way to handle the changing of the data, but it should push you in the right direction.
http://raywenderlich.com is extremely helpful. Lots of tutorials that focus on actually building apps so you learn by doing. Learned an extreme amount from them when I first started and even now that I'm a professional developer I still read it from time to time.
Have never found anything like that, check http://github.com
Yes, you get the same problem. There was discussion of this way back when swift 1.0 was still in beta so it seems unlikely to simply be an oversight at this point. But you can try filing a bug report, it can't hurt. 
I'm not asking anyone to work for free...
You're correct, this is a (known) bug in the compiler. -Chris
&gt; UX is as anomalous as Front End Dev, and could mean anything. UX usually means "I like coming up with UIs but I don't have the skills to make them look any good". ;) As a developer you're really like your little personal Shark Tank. People pitch their ideas to you and ask you for your time instead of money (which if we're honest is money). So yeah, you can do those gigs - if you are absolutely sure that it's a good investment. If someone asks "ey dude, can you code that for me? It will take only 6 months" ask yourself if you would give 6 months worth of your income to that guy instead. Usually the answer will be "hell no". 
I tag playgrounds on my Swift site: http://www.h4labs.com/dev/ios/swift.html?age=10000&amp;q=playground Some are just articles, that may contain playground, but if you look at the github urls, you'll find a bunch. 
Alright, thanks for confirming this. Heres to hoping it gets fixed in the next version! Thanks for all the hard work!
Have you ever implemented infinite scroll and/or pagination in web or some other environment?
Imagine Taylor Swift fans being confused about her capability of her performing optional chaining.
No sprite kit just UIKit
I'm just constantly reminded of Misty's Starmie wrecking my ass with "Swift" when I was younger
Well where's the fun in that?? Seriously thank you though. 
I'm not sure what your asking here; how to persist data to the iOS device (saving it), or what collection type. If the latter, I'd recommend either a Dictionary (Full name : Quote), or a custom class, which would look like this: class QuoteByPerson { var firstName : String var lastName : String var quote : String } My preference would be to make a dictionary, because of easy acces to a quote by name.
Check out NSFileManager
Be glad you aren't working in R or Go. It's also fairly easy to filter your search results.
Take a look at Apple's other Swift book, *Using Swift with Cocoa and Objective-C*^(1), and the *Filesystem Programming Guide*^(2). ^1 [iBooks](https://itunes.apple.com/us/book/objc/id888894773?mt=11) ^1 [ADC](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html) ^2 [ADC](https://developer.apple.com/library/ios/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010672-CH1-SW1) ^2 [PDF](https://developer.apple.com/library/ios/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemProgrammingGuide.pdf)
Couple ways you could go about this: * Position the score label relative to the screen, not to the scene. So something like: scoreLabel.position = CGPointMake(UIScreen.mainScreen().bounds.width - 10, UIScreen.mainScreen().bounds.height - 10) That way it is not relative to a your moving scene. Use whatever values you like. It may be easier to work with maxX, minX, etc instead of the width and height of the screen but its a matter of personal preference. * Continually move the label based on the camera position by adding and subtracting the dX and dY movements of the camera, which you'd probably do in the update function by tracking the difference in the camera's position from where it was in the last frame to where it is in the current frame. This would be more expensive performance-wise but is still an option. I'd go with the first myself. Hope that helped.
* Make sure your identifier is correct * If I'm understanding your flow correctly, you are trying to segue back to the first view from the second, in which case you could just use the unwind function. Check this out: http://www.raywenderlich.com/113394/storyboards-tutorial-in-ios-9-part-2
There's your subreddit April fools idea for 2016
Add -taylor to your search.
Well she could unwrap my optional and find nil... or Some(T).
No.
I'm assuming the completion handler executes after the given seconds? Have some error variable that you set if there is an error, and check for that error in the completion handler. It should look something like: delay(seconds: 4.0, completion:{ if !self.processError { SwiftSpinner.show("message 2") } }) 
https://github.com/adrianblp/taylor.swift
Username checks out 
The answer is "yes and no", which I realise is unhelpful. Yes, you can download stuff, and yes you can store stuff, but tvOS gives no promises it will be there next time â€“ everything that is not part of your app can be cleaned off at any point. 
Reminds me of trying to search for Z (the Bitmap Brothers game) about 15 years ago...
You can't really do that. /u/julius559 has a reasonable proposal that's a simple fix, but in general I wouldn't use a timer for this at all - show/change the spinner messages when you're starting to load or are done loading, not at hardcoded fixed delays.
She should have made Apple pay!
I'm an amateur puppeteer. Now searching on "puppet" give me a unix management tool half the time. edit: a letter
I don't know how Amazon promotion codes work but I don't think it is something I or the publisher (O'Reilly) can create and share, unfortunately.
I'm not completely sure what you're trying to do but I have a very deep suspicion that you're doing it wrong to begin with. There is probably a chain of things that need to be done in succession so that's why you kick off things at different intervals. But instead you could simply kick them off one after each other and simply never call the next thing you wanted to do. julius559's solution is a patch that might solve this individual problem, but I think it's better to think over the whole structure of this again.
Hi there, I am sure it will come to iBookstore sooner than later if it's not already there? I don't know the relation between O'Reilly and Apple and how I could provide you with a promotional code that you could use in iBookstore but I can ask O'Reilly about this. Thank you so much for your support.
I'll give that a try when I get home, thanks!
I'm going to give /u/julius559 solution a shot when I get home. Further to your post, in general this is how things work. -Viewdidload starts the spinner and calls the delay method which simply changes the message ("We are doing X, Now doing Y... etc) it's all nonsense but it lets the user know something is happening. -while that is happening, Alamofire is doing an HTTP request to get some JSON, which is then displayed on a google map (this takes some time, hence the need for a spinner). If the HTTP request throws an error, I want the spinner message to change (I can get that to happen), but then it continues to change on schedule with the func spinner, and this is what I want to stop (the func spinner method). I hope that makes sense. Thanks for your help too.
I get it, it's just bullshit stuff to make the user feel like something's happening, like "adjusting the vertical bits", "initializing map vectors" or something like that. You could make it easier for yourself to call the same method over and over and check every time before you show another message. var messages = ["one", "two", "three"] var finishedLoading = false // set this to true in any case you finish that network call func showNextMessage() { guard !finishedLoading &amp;&amp; messages.count &gt; 0 else { return } SwiftSpinner.show(messages.first) messages.removeAtIndex(0) guard messages.count &gt; 0 else { return // No messages, stop calling the delay } delay(seconds: 4.0, completion:{ [weak self] in guard let strongSelf = self else { // Might crash otherwise when you unload it while it's waiting return } strongSelf.showNextMessage() }) }
I'll wait until they are done editing it. This bullshit about leveraging your paying customers to test your product has got to stop.
&gt; This bullshit about leveraging your paying customers to test your product has got to stop. With O'Reilly, when you get the Pre-release version of a book, once the book is out, you automatically get the latest version. You won't have to buy this version seperately and then buy the final version again.
Hi there, from what I know, with O'Reilly, if you have a printed book, you'll get the eBook for free.
I'm not entirely sure what you're asking. Your struct can either be a class or a struct, and both will compile. There is no difference there. The reason you need to set a non-optional value in the initializer is because if you don't, the value will have a nil value and that's not allowed unless you tell the compiler that you're expecting it to be that way with an optional. In your "callsPerson" class, the compiler would be perfectly happy with not assigning a value to "lastName" because you declared it can be optional. I hope this answers your question..
I get what you are saying, but it's not really "bullshit stuff to make the user feel like something is happening"... something actually is happening, it's just happening in the background. However, if I just left the map blank for 3 seconds while the http request is made and the map markers are loaded, the user will think that app is frozen. Thanks for the solution suggestion as well. I think it could work as well. I'll give it a shot if the other solution suggested here doesn't work.
Off topic, but `fullName` may be better off as a computed property: var fullName: String { return "\(firstName) \(lastName)" }
thank you very much for this. what is best to do in your opinion: get the print version or ebook?
No, initialization methods in Swift are not functions. They always start with "init". class classPerson { var firstName: String var lastName: String var fullName: String init(playerData: [String : AnyObject]) { if let FirstName = playerData["FirstName"] as? String { firstName = FirstName } if let LastName = playerData["LastName"] as? String { lastName = LastName } fullName = "\(firstName) \(lastName)" } 
Thank _you_ for your support. Best of luck with the new job.
If buying from Amazon is a priority for you, please let me know as I could ask O'Reilly and see if they can put together a discount code that works on Amazon (if at all possible).
But I already have it so that my player is a child of the camera. I feel like this would just throw me an EXC.
Absolutely, searching for R is the worst. 
Your innerFunc takes a completion closure of type `(Int, String?) -&gt; ()` - that closure may not throw anything. If you want to allow that closure to throw, you need to annotate it. Also, because you want the completion closure that `innerFunc` calls to be able to throw, `innerFunc` in turn needs to throw too - if there's no `throws` annotation, a function simply isn't allowed to throw anything, so that cannot possibly work. Finally, because innerFunc(...) may throw (that is, the version you want to have), you have to call it with a `try` in front of it. So we need to do three things: allow the completion closure to throw, add an annotation to `innerFunc` that indicates it may throw, and call it with a `try` (you don't need to catch the error if you want it to propagate up, as `exampleFunc` throws). Here's how it's done: func innerFunc(int: Int?, completion: (Int, String?) throws -&gt; ()) rethrows { guard let int = int else { try completion(1, "noop"); return } try completion(int, nil) } func exampleFunc(string: String?, completion: String -&gt; ()) throws { guard let string = string else { throw MyError.Invalid } try innerFunc(nil) { int, string in if let string = string { throw MyError.Invalid } } completion(string) } 
Hey, I always love the book selection that O'Reilly has. What audience are you targeting with that book? I'm a Software Developer and just did a few tutorials on Swift. Will it help me understand the iOS platform more? Would you recommend me buying it as an entry to work with Swift? I'm looking to build apps for personal use and maybe in a long shot release them to the AppStore. Appreciate you giving out the discount for the folks here on reddit!
I'm no expert on this, but I think this is the confusing bit: The UIImage doesn't exist yet, and the code is incomplete and doesn't show the endgame. What you're doing when you call example4.fetchImage().onSuccess { image in // do something with image here } is you're *creating a closure* that is passed to the `onSuccess` function (that's the `succeed` parameter). In "real life," that closure, along with the error closure, would be stored somewhere (in properties of the Fetch object I would assume) while the image is being fetched. Once the fetch completes, it could call the appropriate closure: `succeed(theFetchedImage)` or `fail(fetchError)` and the closure would be run. *That* is how the image is passed in. The example code is just half-baked and doesn't show it; as written, the onSuccess and onFailure functions just entirely ignore the closures you create, and there's no actual fetch happening so you never see the completion part... Edit for additional detail
It does not go over programaticly segues. As far as I'm aware Im linking correctly.
yeah the bottom space to superview wasn't there when I first created the two views in my sample file i linked to. I had to use the editor menu path I mentioned above. and then it added all 4 of them. One thing is to make sure your view is in fact inside its parent, I'm not being a jerk but its the little things like that are easy to overlook. im using Version 7.0.1 (7A1001)
I assume you're not getting an error on save. Do you call eventStore.commit() to commit the saves before attempting the deletion? (alternatively, use `eventStore.saveEvent(event, span: .ThisEvent, commit: true)`)
Congrats on writing and publishing! One weakness of cookbooks I've found is that their solutions tend to already be prolific online. So, what does that book have that I can't find with Google?
I actually love enums, it's really fun to think up ways to use them in every project I do. Great article to help me in my obsession, thank you!
Huh? A node can have multiple children. What is your concern?
I'm afraid there's no way to specify an arbitrary list of multiple types, and the reason for this is that Generics are part of Swift's *static* typing. While `where` clauses may make it seem like just a loose set of conditionals, all Generic code must be able to compile down to each type you use it with. If you were to specify arbitrarily types in your definitions, this would require the body of your code to use Swift's dynamic typing, e.g. `if classType == [NSManagedObject].self` or `if item is [NSManagedObject]`. This defeats the purpose of Generics as a static typing method. Instead, this is actually exactly what overloading is for; it allows you to still achieve static typing with the same-name functions while allowing them to accommodate arbitrary types.
Have you looked into delegations and protocols? Here's a helpful link: https://www.andrewcbancroft.com/2015/04/08/how-delegation-works-a-swift-developer-guide/
Hi there and thanks for your support. I contacted O'Reilly and they have replied: "Both of your requests [Amazon and iBook Store discount codes] are something that we are unable to do, sorry. Both of those retailers do their own deals on individual products." Unfortunately as I guessed it seems to be impossible.
Thank you so much for your support. Answering your question: Short answer: no! :-) Everything in this book can be also found in other places. Usually Apple's forums are the best place to look. Unfortunately places like StackOverflow are filled with suboptimal solutions to common problems that programmers face and they usually don't explain the thought process behind a solution. Another advantage of any book, including mine, would be that it puts together all these new features so that you don't have to search for them separately on Google. Sometimes, when reading books, you will see things that didn't know were possible. Now searching for something that you don't even know exists would be very difficult. **edit** thank you for the gold!
Hi there. I got the following reply back from O'Reilly with regards to this: "Both of your requests [Amazon and iBook Store discount codes] are something that we are unable to do, sorry. Both of those retailers do their own deals on individual products." Sorry about this. I understand though that O'Reilly cannot issue discount codes at a retailer's website, like Amazon.
I would say to, yes, try it out. Just remember to not focus much on the language, but to focus on the concepts you're being taught. 
Yes, absolutely!
thank you so much i just purchased it. looking forward to a caffein filled night with Xcode. one Q: if i want to complement this with more material, what book or books do you recommend?
I didn't know that. I do now. Thanks a ton! 
Thanks for the feedback. I'll put it on my amazon wishlist for a later buy :)
&gt; Pre-edit #2: Ok...it looks like the eBook isn't a part of the deal. Hi there again. I have now checked and it seems like the eBook *is* part of the deal! I hope it worked for you as well?
If you plan on doing the iOS Stanford class, they have an entire suite of CS classes on iTunes U. you could start with their equivalent and work your way towards the iOS class. 
[Bitfountain](https://www.bitfountain.io/) 200+ videos completely free to learn the basics of iOS development with Swift. After that, you can sign up for the subscription to get full access to the more advanced courses. New material is constantly being added. There are over 100k students taking bitfountain courses. [full disclosure: i'm part of the team!]
You might have better luck with [Bitfountain](https://www.bitfountain.io/). The iOS Foundation Course is over 200 videos meant for absolute beginners to Swift and programming in general. The foundation course is completely free. You'll have to subscribe for access to the advanced courses.
I've seen them: Harvard and Stanford lectures. Definitely worth it.
Hello! If you have problems, that's OK. If you make mistakes, that's OK too. You know what we call an engineer who makes mistakes? An engineer. The key is to ask questions to people who are able to provide you with useful, encouraging answers. Sometimes that's Stack Overflow. Sometimes it's definitely *not* StackOverflow. But in general I've found /r/swift to be a great place to get help and support. In your case, you tried my Hacking with Swift series â€“ great! But it sucked â€“ d'oh! Please don't give up. In fact, this is your chance to learn Swift while also helping others too: if you read my tutorial and thought, "boy, I don't understand this," then let me know and I'll try to answer your questions. I can then add those answers to the main site, so that everyone else benefits too. You can ask questions to everyone on /r/swift, you can ask questions straight to me by replying to this comment or finding me @twostraws on Twitter, or you can post to /r/hackingwithswift and see if someone else can help. If you'd rather ask questions privately (that's OK too) you can email me paul@hackingwithswift.com. Either way, the problem is my writing not your ability to learn, so please don't give up!
It looked like it was a side deal, but its a good price anyways! 
"CHECK OUT OUR APP" looks like a section header and the rest is a cell in a tableview.
Thanks for checking! Edit: I understand this will sound ungrateful, though that's not my intent. However it's ironic here that a 30% discount would have saved us more money than a 40% discount because of shipping costs. O'Reilly is offering free shipping at a certain price point, and the 40% discount takes us below that price point. A 30% discount would have taken us right above it. As it is, we get a net discount of 23% when it's all said and done. Again, I don't mean to sound ungrateful, it's just interesting how the math turned out. It's still lower than the Amazon price, plus it gives us early access to the ebook, so that's great! 
It looks more like you have to upgrade to an ebook for 5$
What is the difference between UITableView and UITableViewCell? is the cell a part of the table and the table is the entire thing?
Great article. When implementing hashValue would it be possible to drop the switch and simply return self.rawValue?
I would not pass view controllers around to other view controllers for the purpose of accessing data. You have stumbled across a compelling reason for the standard model-view-controller design pattern. https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller The data you want to share between the two view controllers should be in a separate class.
Obviously for username and password input, it's just a nice animation instead of the normal placeholder in a uitextfield.
It's a subclass of a UITextfield? I'm very confused about what you're on about.
Sorry man I got confused about what you were asking, there is an example in the GitHub repo if you want to give it a go.
Thank you so much for doing this, it has made a huge difference for me 
I'm not sure what you mean about the SDK textfieldKit, but if you can access the textField by saying textField.becomeFirstResponder(), you should be able to do something like: textField.text! = "F" textField.text! = "Fa" textField.text! = "Fak" ... textField.text! = "Fake typing" This sounds really clunky, but you could do it using a NSTimer and then a switch statement to mimic the typing. There probably is a framework on GitHub made to do this sort of thing.
This would be best performed by an animation instead of an automation, preventing stray user taps from messing things up entirely
Why not fill the field in one shot
Delegates Look at this example https://github.com/udacity/ios-nanodegree-uikit-2.0
PureLayout
Very, very nice and very useful
Marco Arment's CompactConstraint
1. The other parameters are basically. request, response, data, error. I still don't know if there is a way to get file path from these parameters. 2. Alamofire looked pretty good but it is making me miserable.
It takes ~5 lines to do the minimal thing you were asking for with NSURLSession. I'd just use that.
You wish!
Thanks!
I didn't think about that and I don't think they did either since we all thought people would prefer the eBook version anyways. I will send this directly to O'Reilly and get back to you.
I feel that they're mostly unnecessary now with anchors. Instead of ``` view.addConstraint(NSLayoutConstraint( item: titleLabel, attribute: .Leading, relatedBy: .Equal, toItem: self, attribute: .Leading, multiplier: 1, constant: 10) ) ``` you can now do: ``` view.leadingAnchor.constraintEqualToAnchor(titleLabel.leadingAnchor, constant: 10) ```
Just a note: if you're thinking about sending that app to the Mac App Store, Apple will almost certainly not accept it because right clicking the menu bar icon to show the menu is not intuitive.
Thanks for the heads up but I wasn't intending to, mainly because I don't have a developer account. I am more just looking at making something which I will use and to help build my programming knowledge. A good example of a similar app (But with a different function) is the Caffeine app, that has a menu when you right click but toggles the apps main function when you left click.
Cartography
Thanks! If you have additional practical use cases for enums, I'm happy to add them to the article :) Cheers
Yes, it dose support customization and rotation, superview resizing. If you want an example, use the command - 'git clone' or 'pod try KCFloatingActionButton'. In addition, I plan to make highly customization and more animate style.
I think the request parameter contains the URL. try print(request.URL)
ohh... I think request.URL gives the URL of the file that I was trying to get. I was trying to find out what the local directory URL path is after it gets downloaded and saved onto my device. I reworded my sentence a original post a bit.
yes. here you go. this is just me trying to make the menu work, with still very limited swift skills. This version is the one with the menu on the left still, without all the changes. Go crazy.... https://github.com/PhilippForbin/slideoutmenu (i hope this works, new to github...lots of new things)
Masonry/SnapKit.
You can prototype your Custom cell into your UITableViewController nib (if you use storyboard). Here is a tutorial : http://www.ioscreator.com/tutorials/prototype-cells-tableview-tutorial-ios8-swift
you were close, but the compiler is telling exactly what to do. the error on line 58 - Cannot assign a value of type '[Restaurant]' to a value of type 'Restaurant' notice the brackets around Restaurant that means its an array of Restaurant Structs see if you can figure out what to change without looking at the spoiler * hint its NOT on the same line (58) the error is occurring on solution: [Spoiler](/s "line 56 add brackets around Restaurant so it reads as var selectedRestaurants : [Restaurant]") edit** spoiler tags show up as links here hover to see the answer, cause the link is just broken. ---------------- again the error on line 60 the compiler is telling you whats wrong. Value of type 'Restaurant' has no member 'Restaurant' if you look inside the RestaurantNameTable for the property restaurantNamesArray is an array of Restaurants the reason its throwing an error is because an array of array of Restaurants doesn't have a property Restaurant just remove the .restaurant from the end of the line DestViewController.restaurantNamesArray = selectedRestaurants hope that helps
If you don't want it to look exactly like the native cell, it's generally easier to create your own cell subclass. You can create a separate XIB for it if you want to reuse it in multiple table views, but you can also just use a prototype cell if it is only for one table view. 
Was this ever seen as not-good practice? ðŸ˜° I've been using this approach because working with custom cells right from Storyboards is a bit more tedious. 
Hey. First off all im guessing i still have to change the revealToggle to rightrevealToggle? Just changing the identifiers does not work. After moving the items to the right and running the simulator, the button turns gray and xcode shows me a warning in the app delegate. I have updated the github link to what it looks like right now. So, if you or anyone else has more ideas, i'd be excited to hear them.
ok. nevermind. you were absolutely right and i just misspelled the name for the toggle. It needed to be right**R**evealToggle. So thank you very much u/sixfngers04. Now i have to figure out how to get the text to the perfect spot. 
if you are deselecting the row (...somehow), in prepareForSegue the indexPathForSelectedRow might be nil. Also, if the segue is on selection of a tableviewcell the sender for prepare for segue will be the cell. so just do self.tableView.indexPathForCell(sender) and you will get the correct indexpath.
May I recommend my own free Swift tutorial series? It's called [Hacking with Swift](https://www.hackingwithswift.com) and it's based around building complete projects as you learn. It's free, so there's no harm checking it out â€“ let me know if you hit any problems and I'll do my best to answer!
Looks good, how long did it take you to learn everything to make it?
Hacking With Swift is definitely an excellent resource. I would also recommend [Codepath](http://guides.codepath.com/ios). They have some excellent tutorials that range from beginner to more advanced.
Can you link the Udacity tutorial? 
Congrats. &gt;I am going to release many many more apps. Instead of releasing many many more apps, how about supporting and expanding this one? There are so many 1.0 apps that simply rot in app stores. I know it's easy to make a quick and dirty app. It's hard to grow it into a "must-have" utility for your customers. 
I've used [SnapKit](https://github.com/SnapKit/SnapKit) with great results. I personally can't stand the visual format language.
Can you make it spin three times then in the completion block make it spin one last time but at a random amount?
How are you making it spin once? If you can make it spin once and you can make it spin and stop at a random position then you should be able to make it spin a random arbitrary number of times and on the last spin have it stop at a random position. 
not sure if this is the case in swift but often times a rotation greater than 360 will get shortened so if you are rotating 780, instead of going around 2 times and stopping 60 deg further than the start, the rotation will only go the initial 60 deg. again not sure if this is the case with core animation off the top of my head. regardless if thats the issue you are facing you can fix this a couple of ways. rotate in a direction at a speed and track the rotations traveled, stopping whenever you need to. or do multiple animations of 360 until you reach your limit then animate to your random number. 
iOS and thus Swift likely picks up more new developers per day than possibly any language in our history. By new I mean first time. I agree it can be annoying to see the same questions come up; resources are mentioned in the side bar for getting started. I remove the posts on occasion, but I'd prefer to let downvotes guide content over a heavy hand. I enjoyed this post as well! 
I've already done all of these things. Imported files, cleaned, deleted derived data, reinstalled xcode, updated cocoapods, restarted computer.
The obvious ones: Get more downloads (I know, easier said than done), get users to use your app more/longerâ€¦ You could try to cut direct ad deals with relevant companies or white label your app and license itâ€¦ Hard to give advice without knowing which app you're talking about. Edit: Interstitial and video ads obviously pay better. Facebook Audience Network supposedly has a higher ecpm than iAd too. Going to try this in the next few days.
1) You can't store UIImage with CoreData - instead, you should save it to file and persist filename (this is also true for most solutions which persist data) 2) I can recommend using [Realm](https://realm.io) if you want to make your classes persistable (without creating CoreData models and all other fuss). All you need - to make your class descendent to Object and change tags var type to something like List&lt;StringWrapper&gt; (but you still need to save image to file).
I'm not a huge fan of mocks in tests. I'd rather test the behavior, not the implementation and tracking what calls what, even if I'm adding duplicate testing.
I love the Cartography syntax constrain(view1, view2) { view1, view2 in view1.width == (view1.superview!.width - 50) * 0.5 view2.width == view1.width - 50 view1.height == 40 view2.height == view1.height view1.centerX == view1.superview!.centerX view2.centerX == view1.centerX view1.top &gt;= view1.superview!.top + 20 view2.top == view1.bottom + 20 } But the whole "use code to see what's going on" thing is just not true. With autolayouts in IB you see the change almost real-time, with coded constraints you usually need to start the app. IB gives much better hints about misplaced views or constraints that are missing. The problem with AL in IB is that at first it looks like an easy to use tool but when it's used by someone that doesn't understand autolayouts they usually just end up creating a big frustrating mess for themselves.
Uh ohhh - I'm in Ireland so I wasn't aware there were geo restrictions on this item in the US. I'm hoping someone has an alternative link. 
I haven't done this in Swift, but instead of deleting your classes, you could just make them NSManagedObject subclasses yourself, and change the properties to the Swift equivalent of @dynamic. It does change the way you instantiate your classes, so you'll have to refactor all that too.
If this is the book by Erica Sadun, its at: https://itunes.apple.com/us/book/swift-documentation-markup/id1049010423?mt=11
If you're a swift noob and you're in a tutorial that has you messing with generics, I think you may be on the hard path. Your first error was simply the need to define an initializer, which you did later. Here's an excerpt from a playground I just created that all seems to work fine. import Foundation class Array2D&lt;T&gt; { init(columns: Int, rows: Int) { // No-op } } let array2d = Array2D&lt;Int&gt;(columns: 5, rows: 3) 
OP, if you already have your JSON data in a string, are you creating the JSON object directly from that? It will need to be an NSData. Here is the code from the SwiftyJSON page using your JSON as the input string. var jsonString = "{ \"Car\": { \"FourWheel\": { \"TwoDoor\": { \"Red\": { \"Stripes\": { \"Price\": \"$50,000\"}}}}}}" if let dataFromString = jsonString.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false) { let json = JSON(data: dataFromString) print(json["Car"]["FourWheel"]["TwoDoor"]["Red"]["Stripes"]["Price"]) }
This is a good function to use, OP. Uses the guard statements which is good. Plus, you can modify this to pass in a different json object if you'd like.
You might consider some course type guidance at something like Bitfountain then come back and put your past knowledge to use once you understand what it takes to make an app end to end.
you can store data in core data. there is an option for external storage on data properties which essentially does what you've described transparently 
So, guess this is a good time for me to learn. Why would I not want to have a strong self retained here? Honest question, because I didn't know that was possible in Swift.
Thanks! We appreciate it, open-source was the first thing we agreed on going into this.
tbh im sorta unsure also, hence the "?" I mostly come from Obj-C and so because of habit have used [weak self] from swift2+. I know in swift you can weak or unretain self in closures. Why, is because from what I understand, you are calling an async function which captures self in its closure, which means if, when you get to closure called after the async part, self could possibly have been nilled and cleaned up, capturing the strong self would prevent the cleanup and still run the code in the closure which may rely on other strong objects which are now nil and cause fatal errors.
You're looking for an `NSTextAttachment` within a `UITextView` (or `NSTextView` for OS X). [Here's a good tutorial.](http://ossh.com.au/design-and-technology/software-development/implementing-rich-text-with-images-on-os-x-and-ios/)
I too read iOS Dev Weekly. May as well link the whole newsletter: https://iosdevweekly.com/
It took me 2 nights of working on it for a couple hours before bed. It was a pretty simple. The AVFoundation API has lots of cool things for audio and visual aspects of your app. ðŸ˜Š 
You're right. I will continue improving this app for now. ðŸ˜Š 
Yes, I do mean printed to the console. I guess that's some swift lingo I need to learn (in Java there isn't a double meaning on the word print) I did connect the button, and I did make the text outlet. Button is called FinishAndSend and text is called something like FormulaNameTest. When I remove the line that sets the text, even though I enter text in the field, it still prints nothing. 
Apple's free book on Swift is great.
Without mocks, what's your strategy for isolating the subject under test?
The code you provided looks ok - in order for me to see what the problem is, I would need to see your whole project. I have quickly created a basic project and I think it does what you seem to be wanting from the details in your post. Check it out and see if it can help you. https://www.dropbox.com/s/99vk2l906zmfwmc/Test.zip?dl=0
Good walk-through. It even included the illusive Subtitile constant.
If you're making a settings page, I would suggest you use UITableView instead of rolling your own scroll view. If you do insist on using your own scroll view, I would suggest you add them as subviews in code so your nib is not so long. This can also improve loading times when going to the view. Table views also really helps with this.
I wonder this my self. Then we just need a Windows compiler port so we can write universal native apps in swift. 
Microsoft is already working on that, iirc.
https://www.reddit.com/r/swift/comments/3l94dj/what_happened_to_open_source_swift_2/ On track for this year. 
No, because autolayout has to work across different devices with different resolutions. It doesn't really use any predefined units. Numerical values are used only to give you a sense of proportion. You can set the "width" and "height" of each view controller in storyboard to be any number you want, but the corresponding numerical values of any constraints within that view controller can be proportional. For example, constraints can have negative values.
Yep, still: We are still on track to open source Swift (including Linux support) "by the end of 2015" as promised, more details will come out when they can. -Chris
Fundamentally, autolayout is apple's solution for describing location and size of UIViews. To do this, you must provide enough information for UIKit to know a UIView's location in the x and y direction as well as the UIView's height a width. The "information" is provided in the form of constraints. You must be sure to provide enough constraints to full describe x,y,width,height and not too many constraints so as to provide contradicting information where x,y,width,height may end up paradoxical. You can (and perhaps should) think of it as system of equations in your middle school algebra class. Each constraint represents an equation and there are four unknowns. Therefore in order to use autolayout on a view, you usually will provide 4 constraints.
[removed]
That's the thing. It immediately gives me this error... &gt; warning: could not load any Objective-C class information. This will significantly reduce the quality of type information available. whenever I try to use the CGImageCreateImageWithData function. My code was much larger but it kept failing so I've trimmed it down to this function and I still receive this error. :\
For a brand-new app, my rule of thumb is to always use the most recent iOS version as the deploy target so you don't adopt the cruft from previous versions.
It certainly *feels* faster; which makes sense since it launched without parallel compilation, caching and a few other easy wins.
I think you are right! I can't make it spin more than 360. But i don't understand your solutions, can you explain for me? Maybe make some code lines? I just posted my codes below. Thanks!!!!
Are we talking compiling to bitcode or no?
Any place you find yourself repeating the same steps over and over with only slight variations is a good place to use a loop of some kind instead. Also, you should probably move to swift 2 at this point. 1.2 is not supported by Xcode 7.
[I cover exactly this problem right here](https://www.hackingwithswift.com/read/11/3/bouncing-balls-circleofradius). Don't worry about reading the rest of the tutorial; that particular chapter says: &gt; Adding a bouncer took five lines of code, but our game needs more than one bouncer. In fact, I want five of them, evenly distributed across the screen. Now, you could just copy and paste the code five times then change the positions, but I hope you realise there's a better way: creating a method that does all the work, then calling that method each time we want a bouncer.
Just want to say, this is not my repo. This was one that I found, still love the idea.
Just a tip *if you need only few common buttons for your game*. For one of my games I actually used native UIButtons (also UILabels for score, etc.)! Over my gameScene ViewController I've added one UIView + Autolayouted UIButtons. And bingo - easy solution for simple buttons actions like: Menu, New game, etc.
It is in stuff like this were much of the genius is Swift lies. Anybody can create some awesome modern language by just picking some cool features of the academic shelf. The challenge is how to make this all work as effortless as possible with a programming language over 30 years old and a framework written in it going back to 1989. Java, Go, C# never had to deal with this challenge. They pretty much sidestepped the issue by creating their standard libraries all from scratch. Which these convertible types Swift is able to bridge an impressive number of arcane legacy stuff, without inventing too many special cases in the language.
Like it's so hard to press one button and get on with it.
Sounds like you already should have a job, if you've been working "ON" Swift for a year's time. Swift isn't available as open source yet, and only Apple developers themselves can actually work ON it. Maybe you meant you've been "USING SWIFT" for about a year now. I'd start by linking out to your apps in the AppStore. Next I would begin your search using LinkedIn, etc. Once you get a profile setup, start looking for recruiters, and other resource managers that would have opportunities. Hope this helps.
I would recommend asking this outside of a SWIFT related sub-reddit. A programming language won't increase ad revenue. #justsaying
Someone needs to make an adblock filter to filter these out
Can you comment on how involved the community can get with swift? Are patches going to be welcome or is it just a code dump?
what repo address can i try this??
I don't know if it has been released for Jailbreak. Was just on Github.
Be sure to submit a `[for hire]` in /r/SwiftJobs!
I'd use a nested function here instead, but they are essentially the same thing. 
&gt; it felt like every other phrase had some sub context Care to share an example or two for those of us not subscribed to llvm-dev? :P
Please oh please open source Swift this week. Have a great conference OP!
Thank you, this is amazing
The one time I've used UISplitViewController so far I also had a hell of a time figuring out the arbitrary stuff it seems to do. I don't know the answer to your question, but it you might find the UISplitViewControllerDelegate methods to be useful. See what gets called during the transitions.
Please don't. Shit's bad enough on the desktop.
http://exercism.io is a great resource for just about any language.
So what's your point?
Yeah. It is currently implemented as a helper api for playgrounds. There may very well be a serious reflection api in one of the future swift releases although it would still be slow as the compiler can't optimize it away. However, there're still many interesting use cases even for read only reflection. Auto-generating JSON etc, basically all data export use cases come to mind.
the part I need help with, is how can I make my code, so the a.Attempts = the user's input and the same with a. Success = the user's input. 
I have no idea, I don't even know what MapKit is :) Sorry! 
After you set all the UITextFields you tap some button: @IBAction func Check(sender: UIButton) { ... } Then you can retrieve UITextField values like this: let attemptsValue:String = Attempts.text Convert it to *Float* and voila or convert it to *Float* directly from *Attempts.text*.
Check this tuts: http://www.raywenderlich.com/90971/introduction-mapkit-swift-tutorial (for Swift 1.2) and https://www.youtube.com/watch?v=SaZbA6DSkYM (this video seems to be cool - for Swift 2)
hi here's how id do it, * remove that Tries class from inside the IBAction and place it in its own separate file. * instantiate a tries object in your view controllers like so class ViewController: UIViewController { var a = Tries() //.... * to get data from your text fields the syntax is textFieldName.text so in your case it would be Attempts.text etc. * in your check() action the code should be something like a.Attempts = Attempts.text //.... * and then finally when you have the attempt values you can call a.shot() in the check() action. Let me know if this helps.
I'd be interested as well. Although I know pretty much everything from Swift already, check out my [Make-It-Compile Challenge](https://github.com/Kametrixom/The-Swift-Make-It-Compile-Challenge) in which I use some of the most unknown techniques. I'd love to help you understand it more and contribute :D
It could be Microsoft, they are LLVM support to Visual Studio.
The compiler already uses different dispatch methods depending on context. You can even force methods/properties to use dynamic dispatch, including pure swift ones. There's just no way to access them dynamically without resorting to using Obc-C based code. There's no reason a .NET or Scala like implementation is 'impossible'. It would just mean that part of your code would not be statically guaranteed or optimized, which is a trade off a lot of devs would be happy to make for parts of their codebase. Clearly, though, it's not a priority for the dev team which is somewhat understandable given the age and rapid development of the language.
You're mutating the text property of a UILabel off the main thread in ViewController.swift, on lines 43 and 58 (commit c496894). Just move the work in the NSURLSession completion block onto the main thread and you should be set.
Hey I figured out :) Appreciate the help!
Thanks, but...how do I do this? **EDIT** Never mind, solved with: dispatch_async(dispatch_get_main_queue(), { self.output!.text! = inf })
The UITextView delegate has a protocol method you can implement called: textView(_:shouldInteractWithURL:inRange:) Present your view controller from within this method, then return false so Safari isn't opened.
My understanding is that no it's all handled in the app store by apple. They simply require you to keep your images in asset catalogs so that they can know what images are different "versions" of the of same image and what those versions are (2x, 3x, etc). Their "checklist" of what to do is [here](https://developer.apple.com/library/prerelease/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35)
This reminds me of an interesting blog post I saw a few weeks ago: http://tech.trivago.com/2015/10/06/python_receipt_parser/ They're using Tesseract for OCR also, but their processing code is in Python. Still, it might give you some ideas for how to get started
They missed the gnarliest part of the process, in which you need to unsafely cast (or dynamically resolve the type of) the `Any`'s produced by `generatorForTuple()`'s generator. Enumerating tuples *shouldn't* come up that often, of course, except for Apple's tragic decision to translate all C arrays in existing APIs into tuples, which is where the need for this sort of thing arises. For that though, you might as well perform the one unsafe cast and get it over with: var terminalIOs = termios() withUnsafeMutablePointer(&amp;terminalIOs.c_cc) { tuplePointer in let arrayPointer = unsafeBitCast(tuplePointer, UnsafeMutablePointer&lt;cc_t&gt;.self) let arrayBuffer = UnsafeMutableBufferPointer&lt;cc_t&gt;(start: arrayPointer, count: Int(NCCS)) for CC in arrayBuffer { /* ... */ } } 
Awesome :)
&gt; Instance member 'swipeAmount' cannot be used on type 'ViewController' This error boils down to the fact that you cannot reference one possibly-uninitialized instance variable while initializing another. Instead, in general you would need to explicitly order the initializations in an `init()` routine: var A: Int var B: Int init() { A = 1 B = A + 2 } In this case however, there's the other problem where `@IBOutlet` variables aren't actually set during initialization, which is why they need the `!` optional designation. During initialization, they will in fact be `nil`, causing a crash if referenced from an `init()` routine. Instead, you should override your ViewController's `viewDidLoad()` method to set the value: @IBOutlet weak var swipeAmount: UITextField! var swipes: Int! override func viewDidLoad() { super.viewDidLoad() swipes = Int(swipeAmount.text) } I'm guessing you're looking for `swipes` to always reflect the current value of the text field, however? If so, you would want to use a dynamically calculated property: @IBOutlet weak var swipeAmount: UITextField! var swipes: Int! { return Int(swipeAmount.text) } 
Sweet. Thanks for the helpful information. It worked great.
If the images only exist in the asset catalog (as opposed to just sitting in the project like they used to) and after building your app your code succeeds in loading the images [UIImage imageNamed:] (or swift equivalent) then you are all set. Another way to look at it is if you open the built app bundle and you don't see images sitting there but you see Assets.car (the compiled asset catalog) and you succeed in loading your images at runtime then it's all as it should be.
Arrays and dictionaries are passed by value, not by reference in Swift. If you want to pass an array by reference, you can wrap it in something. &gt;My understanding is that in swift all variables are just references and only structs are passed as deep copies. That's not really right at all. *All* primitive types in Swift are value types: ints, floats, strings, arrays, dicts. Along with structs and enums. *Only* proper classes are reference types. You may also want to check your wording on "deep copy." Nothing in Swift *or* Obj C makes a deep copy by default. That behavior needs to be implemented wherever it is desired. If you put a reference type inside of a struct, and you copy that struct, it will retain *the original reference* to the object in there. It does *not* copy the object. That is: struct S { var v = UIView(frame:CGRectZero) } var a = S() var b = a println(a.v.frame) //0,0,0,0 println(b.v.frame) //0,0,0,0 b.v.frame = CGRectMake(1,2,3,4) println(a.v.frame) //1,2,3,4 println(b.v.frame) //1,2,3,4 
Interesting. By the way, what does the NS in NSMutableArray stand for?
you could try this! they're all free and definitely has some game tutorials included. https://www.hackingwithswift.com
Understood. Planning to open-source some of the code for sure. Will come back here when I do. Thanks for the heads-up
To build a game you might want to look into SpriteKit. Mind you for a beginner I'd say this is much harder than when I started coding games. But my first game coding was really just moving bitmaps around on the screen. SpriteKit is more difficult because there are far more concepts to get because it is much more sophisticated. You can rotate and scale your sprites (moving bitmap images), check for collision on them, link them together, so e.g. you can have a tank sprite moving with a turret rotating at the same time. So although the initial learning curve is higher, if you put in the effort there is a lot of cool stuff you can do. I suspect you can start by just playing around with some SpriteKit example games and get a feel for it.
Have you confirmed that all the code gets run? Like have you e.g. set a breakpoint or placed a print() statement in the code to see that it gets run? Make sure that viewDidLoad actually gets called after prepareForSegue. I can't remember the sequence of the top of my head, but these are the sort of things one can do wrong. Make sure things happen in the sequence you suspect by placing breakpoints. Also better to write `destination.userName?.text` instead of using "!". The "!" is a bit overused by new Swift developers. It will crash your code if there is a nil there. Sometimes you want that because a nil being there indicates a coding mistake. Most of all I think the good thing about limiting usage of ! is that it makes it easier for you to locate potential places were crashes can happen. If you got ! spread all over your code, it becomes hard to narrow down problems. We've seen this with apps we have released that we frequently would get crash reports back from users where the problem was caused by a "!", often in code which simply wasn't critical that ran. So only put ! on things which really must work and which you can't handle in another way.
Probably not the right level, though.
It *shouldn't be possible*. Because adding a new alternative would create a *supertype*, and only subtypes are valid with the Liskov substitution principle. A mechanism to create a subtype by *removing* a case would constitute an interesting feature.
Right, but extensions don't really create new types. But it would obviously be a problem for some of the same reasons.
Hey /r/swift! Ran into a silly bug yesterday that got me thinking and experimenting :) Fun little demo, nothing more. Hope you all enjoy!
While this is entirely true, and *not* pedantic, it is also of no concern to your average developer, because arrays will *act* as if they were passed by value in 100% of cases. The only thing that could be confusing is if you are reading memory addresses in the debugger and wondering why the address of the two (supposedly different) arrays are still the same.
... but they can't navigate through SFSafariViewController anymore, which makes them sad again.
I'm brand new to the swift language or any computer language so I'm teaching my self one step at a time. Needless to say, I'm frustrated because I follow tutorials for Xcode 7.1, do exactly as they say and still I get these errors! Wtf am I missing about this simple "hello world" button?
If you are trying to print a string, try using just "Hello World". If it is in swift 2 which I assume it is because you are using Xcode 7.1, your print statement should look like this. print("Hello World") It probably won't run since it is not in a function and nothing is calling it. If you just want it to print when the app loads, put in the viewDidLoad() method.
Is this a joke? I genuinely can't tell
Let me be the first to welcome you to programming! The picture you've provided shows that you might benefit from learning a bit more about basic structures and concepts in programming like statements, functions and classes. You can take cool introductory courses over on sites like codeacademy.com and find an abundance of information online. Don't try to rush into making your first app or whatever. Try to understand the concepts and ideas behind programming first! Good luck!
Don't be a douche. This person is trying to get into programming and ridiculing him for asking questions isn't going to make his first experiences very good and might put him off it for good.
Settle down. I was genuinely curious. Now that I know he's (or she) is serious I'm happy to point them in the right direction.
Inside the curly braces i.e. { }. The viewDidLoad function is the first to run when your app starts. I'd recommend you actually create a playground in Xcode and work that way while you get the hang of variables and basic control flow. PM with any questions. 
No one noticed that he copied and pasted and got &amp;quot; instead of "?
The fact that you don't have double quotes. Anything between double quotes are strings. print("This is a string.") Which shows that you probably copied and pasted. Next time write it out. You need double quotes. print("Anything inside double quotes is a string. Hello Again!") If you want to just print the value of something, you don't put double quotes. var x = 5 print(x) //5
You need to try learning the basics of the language of Swift first before doing anything with apps. That's what playground in xCode is for. You can test Swift code. You would know what you did wrong if you knew the basics such as strings because you don't even have double quotes. I recommend you read the first few chapters of the Swift book by Apple that is free in iBooks. That's how I learned Swift. At least the basics because if you did, you would've known that you're trying to print a string, and that's not how you do it. You need double quotes. 
The right direction would've been to say, "your string isn't between double quotes."
Awesome, looks great! What's the font, by the way?
Check out http://hackingwithswift.com and /r/hackingwithswift.
The font is [monofur](http://www.dafont.com/monofur.font); I read about it in a website and I just love the pink/purple/dark colors environment.
Mine was when I first started out and it was horrible. Like /r/badcode bad. Have you heard of regular expressions? This would be the way to go and it is probably what I should have done. Can you say what you are trying to do with the info? 
Not sure why no one has mentioned this yet, but you can do a screenshot with Command+Shift+4 Also, you should generally copy and paste text instead of taking pictures of it. if you indent 4 spaces in a comment you can have a monospaced text blob this was not a haiku 
hahahahahhhhahahahha you fuckin stupid idiot jesus christ just give up lol im seriously dyin over here holy shit thats funny
Maybe because AirDrop doesn't work for s***. :P Nice seeing you here, by the way! Didn't know you were a dev.
Really?
If the lad is struggling to form a print statement correctly, and failing to place it in a valid scope, I doubt an incomplete SpriteKit code snippet will be much help to him. Just call it from didMoveToView? Oh ya cool, I'll get right on that. 
You're getting angry over a comment on the internet.
&gt; Maybe because AirDrop doesn't work for s***. :P Yeah.. it's really frustrating how often I try to send 6 pictures to someone, and it just says "waiting" forever. This is when we're both outside wi-fi range.
Damnit, if only I wasn't a button down shirt kind of man. 
Your question has already been answered, but I just want to reiterate on the "don't copy and paste" thing. Even if you're copying code by the letter, if you type it, you'll see autocomplete suggestions that you can scroll through. Some of those suggestions will get stashed in the back of your mind and be helpful later on. Also, you'll learn the new syntax because it will be similar but not exactly the same as what you're copying. Lastly, you'll encounter less errors. And yeah, definitely at least skim through the programming guide. Apple has their Swift books for free on iBooks. Tutorials are all over the internet. Starting off with something simple like a notepad or even just playing around with labels and text fields can get you started. Good luck. I started with Python on my own in 2007 after much Linux geekery. Then I learned some basic C# on my own in 2011. I went to community college for Computer Science and learned C++, gave up, then went back to it starting with Swift about five months ago. Now I have an app on the App Store that no one uses, but hey, I'm building my portfolio and learning new things.
Never had an issue with it. It sometimes take a little for the other device to show up, but that's pretty much it.
Haha trudat "k turn airdrop off and back on... No...ok let me cycle mine again... Ok there we go" still learning, very very slowly
You can't, Swift doesn't allow this type of circular reference. If it were possible, you'd probably write it as `typealias Foo = (Foo) -&gt; ()` and then func `f(foo: Foo) {...}`; it's a compile error though as mentioned. Come to think of it, I don't know any language that allows this. What are you trying to do? There's probably some other way.
Thanks
Oh! Tailor Swift! Ah.......!
Can Someone ELI5 what this does 
Thanks for a nice tool without force cast. 
I've been hoping a tool like this would be released! Can't wait to run it against my codebase! 
Why not write it in ... Swift? ðŸ˜¸
func rekt()
I'm not the author, but Java is: 1. Cross-platform (your Unix/Windows build server can run this against your Swift source code) 2. Feature-packed, and even nicer to use with JDK 8 (streams, functional interfaces) 3. Backed by a huge community of well-tested third-party libraries, like ANTLR for language definition and parsing It's certainly not a bad choice, and if it's the language the team was most comfortable with, more power to them.
I tested this out on [swiftstub.com](http://swiftstub.com) as I'm not in my laptop right now so It might be different in Swift 2.1 as that website is using 2.0. This is what I'm picturing... kinda. I only wrote out the function declaration as the rest would just require if statements inside the functions (whichever you choose). func firstFunc(val: Int) { //Do something } func secondFunc(val: Int, _ someFunc: (Int) -&gt; Void) { //Do something } func mainFunc(val: Int, _ someFunc: (Int, (Int) -&gt; Void) -&gt; Void) { print("Hello World!") } firstFunc(1) secondFunc(1, firstFunc) mainFunc(1, secondFunc) It should print "Hello World!" on [swiftstub.com](http://swiftstub.com). More info can be found on the [Swift Documentation](https://developer.apple.com/library/watchos/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html).
OpenGL is a very complex solution. Sounds like you want [Quartz](https://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_context/dq_context.html#//apple_ref/doc/uid/TP30001066-CH203-CJBDCHAC). Make a NSView subclass and override the drawRect call. The link is in Obj-C, but turning it into swift should be very straightforward.
&gt; Swift only (no Obj-C) That might be tough. Practically everything that's available in Objective-C is available in Swift, however, so it does you a world of good to at least be able to *read* basic Objective-C, and have enough Swift knowledge to where you can write the equivalent code yourself. &gt; Am I required to use something like an OpenGL view? Nah, everything you described can be done within the standard graphics context. Check out the [Cocoa Drawing Guide](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CocoaDrawingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40003290).
I guess I just am not understanding how the standard graphics context gets initialized. I think I am missing the step of adding a subview to the view controller. If I can figure out how to do this, does it have a context which I can get, because it is a subclass of NSView? Or do I have to create one?
In this case, we're not talking about the controller; you need to create a subclass of NSView itself, and in that, override `drawRect()`: class DrawingView: NSView { override func drawRect(dirtyRect: NSRect) { super.drawRect(dirtyRect) /* ... */ } } You can then have Interface builder instantiate this by adding a Custom View, and changing it's class from the Identity Inspector (View &gt; Utilities &gt; Identity Inspector).
Aha! Now that's the missing link I could not find! I had figured out how to add the custom view in interface builder, but had no idea about how to actually connect it to code. Thanks!!
Awesome!! Don't you love these moments where the thing you've been working through suddenly works? :P
As potentially dangerous as it is, there are definitely appropriate times to use `!`. Rules of thumb: * Use `?` if it will be necessary to perform nil checks at any point (including optional chaining, of course). * Use `!` if the value isn't set from `init()`, but *will* be set before being referenced elsewhere. If you're writing a Framework with public accessors, make choices based on how users may interpret it: * Use `?` if they are responsible for setting it. * Use `!` if you will have set it for them.
That's great news Chris. Thanks for posting.
Agreed. When using implicit unwrapping, one thing you should do is make sure you've got an assertion of some kind in there that will run as soon as possible after you intend for that property to be set. For instance, if you have a property on a view controller that by all rights should be non-optional, but that you can't set in an initialiser, then use implicit unwrapping, but use `precondition(foo != nil, "Attempted to load view controller without setting foo")` in `viewDidLoad()` or similar. The key is that you want to guarantee that you don't go past that point without setting the value and you want it to fail immediately if a programmer error occurs that allows this to happen. This is about as close as you can get to a non-optional property without taking over initialisation. Remember that this is designed for situations where it's a genuine programmer error that needs to fail fast â€“ `precondition()` and the like aren't appropriate for run-of-the-mill runtime errors. 
Don't use Dropbox for syncing code. Use a version control system such as Git. 
Close, but no. In your example, I want to be able to call: secondFunc(1, secondFunc) but I don't see how to write its type declaration. In C, I'd say: typedef int (*SecondType)(int, void *); int second(int n, SecondType f) { if (n &gt; 0) { return f(n - 1, f); } return 0; } and call it like this: second(33, (SecondType)second); 
All I want to do as save the information to a string or in an array and display it using a UILabel to the user.
If you are going to use cocoapods, make sure you actually check the pod sources into your source control so you have a consistent experience and repeatability as that will allow you to have absolute control over what code is going into your app.
ok, the first step is using a service like Github. They have a pretty good desktop app to make git less of a pain to use. The next thing is to add the pod sources and generated project files to your repo. For a starter tutorial go here: https://help.github.com and read the 'set up git' and 'create a repo' items. If you run into problems check out https://ios-developers.io, you can get an invite to the slack, and people are generally helpful if you are nice.
I'm not sure what you mean or how we could do that, could you please elaborate?
&gt; tapgesturerecognizer Oh, you're talking about iOS. Gotta specify; this sounded like an OS X app. :P
Thank you so much!! I'll toy around and try doing this. I'll probably have more questions, but extremely glad someone finally helped!! 
Haha for sure. Lemme know what problems you run into.
&gt; [brace-style] Class should not have any line breaks before the opening brace Can we have an option for this? As you can imagine, due to my preference for this deeply philosophical issue, I have a zillion warnings like this. EDIT: Ok, so this are the rules - https://github.com/sleekbyte/tailor/wiki/Rules Definetly the newline thing should be here. Also, where is the no k or K before constants thing coming from? It is how Apple defines constants mostly.
ðŸ‘Œ
I'm sure this subreddit will help you if you come across any challenges- just be careful sharing app ideas that could potentially be used.
Ensembles.io is often recommended. I haven't tried it. (I plan to next month) Edit: I think it utilizes CloudKit though. 
I ended up writing the document in html and printing the document. But its probably just easier to spend a few days leaning the PDF methods.
&gt; iCloud Core Data is not stable at all and pretty much every post and comment on stackoverflow discourages its use. That sounds like it is from two years ago. 
Hey /u/TheBigBraumTheory, I don't want to come down hard on you, or sound like an old curmudgeon software engineer, so please don't take this personally. Here goes: I think it would be a lot better for everyone in this community, if you posted the specific issues you're running in to when developing this app. Asking for people to PM you is not a great tactic, and it's not good for this community either. If you post the issues you're having, people in this sub (including me) would be more than happy to help you out. Why don't you make a new post with the exact problem you're having (help us, help you), mention me with a /u/ and I promise to look at your post! However, by asking people to PM you, this entire community misses out on the knowledge that will be exchanged. Perhaps someone in this sub is having the exact same problem you are. Why not help two people at once with a public post? Just my opinion.
HAH touchÃ©. Anyway, glad you got it got it going!
import UIKit class ViewController: UIViewController { @IBOutlet var myLabel: UILabel! @IBOutlet var Tuborgflaske: UIButton! var imageView: UIImageView! override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. imageView = UIImageView(image: UIImage(named: "TuborgFlaske")) imageView.center = CGPoint(x: 180, y: 180 ) view.addSubview(imageView) } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } @IBAction func tuborgSpinn(sender: UIButton) { let randomNumber: CGFloat = CGFloat(arc4random_uniform(1200) + 3600) UIView.animateWithDuration(2, delay: 0, usingSpringWithDamping: 1, initialSpringVelocity: 4, options: [], animations: { [unowned self] in self.imageView.transform = CGAffineTransformMakeRotation(CGFloat(randomNumber)) }){ [unowned self] (finished: Bool) in self.Tuborgflaske.hidden = false } let randomNum = arc4random_uniform(6) if randomNum == 0 { myLabel.text = "Drik 2 tÃ¥rer" } else if randomNum == 1 { myLabel.text = "Dine sidemakkere drikker" } else if randomNum == 2 { myLabel.text = "Drik 4 tÃ¥rer" } else if randomNum == 3 { myLabel.text = "ForÃ¦r 2 tÃ¥re vÃ¦k" } else if randomNum == 4 { myLabel.text = "ForÃ¦r 3 tÃ¥re vÃ¦k" } else if randomNum == 5 { myLabel.text = "ForÃ¦r 1 tÃ¥r vÃ¦k" } else { myLabel.text = "Bund!" } } } 
Specific rules may be skipped via the "except" flag as follows: tailor --except=brace-style,constant-k-prefix main.swift The [constant-k-prefix] rule was something suggested in a few style guidelines ([Coursera](https://github.com/coursera/swift-style-guide/pull/2), [Ray Wenderlich Swift](https://github.com/raywenderlich/swift-style-guide/issues/74), [Ray Wenderlich Objective-C](https://github.com/raywenderlich/objective-c-style-guide#enumerated-types)), specifically that: "Older k-style constant definitions should be avoided unless writing CoreFoundation C code".
The text field's delegate methods should provide info on the changing text- I think you want shouldReplaceCharacters withRange or something like that (I don't remember exactly and I'm on mobile) With that delegate method you should be able to determine if the text field change will result in it being blank- at which point you could call textField.resignFirstResponder()
You can set a mask for a view's layer, so basically you'd create one image that you draw on and then use the result to mask the other layer. Check out CAShapeLayer and UIView.layer.mask as a starter. You could use UIBezierPath to draw on the layer mask.
There is also excellent framework which eases the pain of making requests you should check out. It's called Alamofire. https://github.com/Alamofire/Alamofire
Apple's official Swift book which you can get for free on the iBooks store is really the best Swift resource out there. It's not an online tutorial, but it's the best Swift resource out there. It covers the language from top to bottom and it's always up to date (it gets updated at the same time Apple releases a new version of the language). https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11 That's for Swift only though. For iOS development I can recommend other books, such as the Big Nerd Ranch's, the iOS development series from Apres, iOS Programming Fundamentals with Swift from O'Reilly, and Programming iOS from O'Reilly. I have personally read them all and would recommend them to anyone. Don't learn a big technology from tutorials because they don't even cover half of it. Start with the important topics, and then feel free to read tutorials to get started on specific frameworks. Good luck!
Thanks, that makes sense, I'll see where that gets me!
Videos not yet available. They'll probably be here when ready: http://llvm.org/devmtg/2015-10/
This looks awesome! I might need it in a project coming up, I'll provide more feedback then.
Not home now so I can't test it, but does this allow the user to scroll through the rating to set it? (As if it was a slider) Also how does it perform when there are many of these on screen? Would it show down a collection view if it's in each cell? 
&gt; does this allow the user to scroll through the rating to set it? (As if it was a slider) It's exactly how it works. &gt; Also how does it perform when there are many of these on screen? There shouldn't be any problems, unless something forces all RatingViews to re-layout frequently. &gt; Would it show down a collection view if it's in each cell? I will try it to make sure. There will be another problem, I guess, - RatingView will swallow touches (if editable), making collection view hard to scroll.
Launched a simpler design, for the less tinder inclined https://teespring.com/swiftdotrycatch 
Thanks, I didn't know that was the case.
Nope. And it's unlikely it will ever be. Once an app is created, it can't be extended dynamically. Any "plugins" would have to be libraries/frameworks built into it.
Any property you wanted to inject would have to be optional, or you'd get a compiler error if the designated initializer completed and the value wasn't set. So you could make all your properties optional, with an empty initializer. But DI is not a very *compatible* approach with Swift. You can do it, but not sure why you'd want to. It might be helpful to understand exactly you're trying to do. There's rarely one best-practices approach for every use-case. If you're just trying to do configuration (with value objects like strings, numbers, etc.) or even wiring objects together, you could pass a Dictionary to the init method which would then loop through the key/value pairs and uses setValueForKey to initialize the properties. If you want to take that approach keep in mind: * **This approach would not support cycles.** * The properties have to be declared dynamic * The class must extend NSObject * You should probably create your own base class that extends NSObject and use that for your other classes * Define the init method in the base class to do the initialization and make it required * Then in base classes, you'll have to expose the init method by defining one that simply calls super. 
I did look into it and its a great library. My application is a simple and read only one. I thought it will be an overkill adding Alomafire to the codebase as I will be using it mostly for GET requests (Authentication and forgot password are the only POST requests)
thanks. good advice.
we don't know this just yet, but Swift is apparently going to be open sourced by the end of the year, so we'll see
Your init function needs to call a super class initialiser before leaving, so call one of the initialisers of UIViewController: init(labelText: String) { self.labelText = labelText super.init(.....) // some appropriate initialiser, possibly the empty one, if available. } 
But what would be the initializer of the superclass if it doesnt have any? Just empty super.init?
Alamofire is great for these types of requests. It's light-weight, and has excellent method chaining features. Protip: Create a Git submodule for Alamofire rather than using CocoaPods. You'll thank me later!
There's an alternate meaning behind `char **`/`UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;CChar&gt;&gt;` as well, which is a C array of C strings. The common example of course is `argv`, but if you're working with APIs such as `exec()` or `posix_spawn()`, you may need to create your own, which is something I struggled with when I was first learning Swift. The closest thing to an elegant solution I've been able to come up with for converting `[String]` to a nil-terminated array is as follows: let arguments = ["bash", "-c", "echo foo"] let argv: UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;CChar&gt;&gt; = arguments.withUnsafeBufferPointer { let buffer = UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;CChar&gt;&gt;.alloc($0.count + 1) buffer.initializeFrom($0.map { $0.withCString(strdup) }) buffer[$0.count] = nil return buffer } This must then be deallocated after use, of course: for arg in argv ..&lt; argv + arguments.count { free(UnsafeMutablePointer&lt;Void&gt;(arg.memory)) } argv.dealloc(arguments.count + 1) 
That wouldn't work. myString is not a single line
if you're having problem joining the group just comment your username and i will add you
Are you saying you have a string that wraps several times, and you want to make it like double spacing? Your question isn't clear.
If a subclass doesnâ€™t specify any initializers, it inherits its superclassâ€™s initializers^1 . So in your example, notSoSuper would need to call an initializer thatâ€™s defined in UITableViewController. Take a look at [this guide](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html#//apple_ref/doc/uid/TP40014097-CH18-ID216), itâ€™s got a nice set of examples with diagrams. ^1 A subclass can specify convenience initializers and still inherit
Thanks!
From stuff I've read, it does retain type info at runtime so it is not like Java type erasure. My guess would be something like C# generics. But e.g. I believe there is no boxing and unboxing of primitives and structs in arrays. If you look at [Mike Ash's example](https://www.mikeash.com/pyblog/friday-qa-2015-04-17-lets-build-swiftarray.html) of implementing a Swift array class, it looks like the whole values are copied in and stored consecutively. 
Search youtube "Stanford swift" for great intro course to swift and iOS development. After that check WWDC videos for advanced topics on swift.
Good catch about the return, I'll edit the comment and add it.
You want to add `lineSpacing` to your attributed stringâ€™s paragraph style.
for OSX yes: an app to create apps in a easy way.
Yes, this is close. The semantic model of swift generics is that they use runtime dispatch through "witness tables" provided by the protocol conformances of the generic types. This model allows for fast -O0 compiles and separate compilation of generics. The problem with this model is that actually relying on this for everything would produce code that runs very slowly. To solve this problem, the optimizer uses heuristic-driven generic specialization that does code duplication where it thinks that it is profitable and sensible. The way to contrast C++ and Swift is: C++ eagerly duplicates code in the frontend (and hopefully the optimizer can eliminate some of the copies later, with LTO...). Swift does not generate any copies in the front-end, but does generate them in the optimizer. In practice, this means that Swift is better at generating the "right" copies, and also spends much less time generating duplication in .o files that only get discarded by the linker. -Chris
NSDateFormatter is expensive, I'd recommend cache the formatter if you are going to use it repeatedly.
â€¦ does anyone use AppCode? If so, why?
Aptly timed with the switch to the renting model.
Yeah, that's a problem too. You need to edit the app bundle's Info.plist for it to accept Java 8 which, IIRC, gets replaced with every update. To install Java 6 you just need to download the installer from Apple (which I wouldn't really call "jumping through hoops"), but yeah, having an old version of Java installed is about as secure as putting a sticker with your password in the corner of the screen. 
I use .containsPoint() for my SKSpriteNode buttons and it all take place in touchesBegan() and touchesMoved() (my game requires the user to move his finger on the screen over and over). Basically, depending on how your code is, just put something like this. button.containsPoint(userPosition) {} Where user position is a variable that holds the position of the user. Which you can assign to inside the functions after the: for touch in touches {} //I think it's like this touchLocation = touch.locationInNode(self) Or depending how your code looks like. I could try it when I get back on my laptop.
Nice! Although should've done it in light.
I've only tried 1 book from Big Nerd Ranch Guide and it was to learn Objective-C and it was such a terrible book. I had no idea what I was doing. The book didn't emphasize important parts of programming that beginner me had no clue about.
I honestly wouldn't either. I have 2 apps in the App Store and just stick to regular banner ads. People do click on them, trust me. We don't need ads sticking in their face where they're forced to find the x button to exit it.[Proof people click on banner ads](http://imgur.com/CizNQ3A). Only 1 of my apps has ads.
Always do current as you will be up to date with xCode and Swift. That's what I do and I have 2 apps in the App Store.
I think his question was directed at those who code in Swift since xCode works well, why use another IDE?
I have really enjoyed going through all of the documentation from Apple: The Swift Programming Series (iBook Store) https://itunes.apple.com/us/book-series/swift-programming-series/id888896989?mt=11 Apple Swift Resources: https://developer.apple.com/swift/resources/ Apple Developer Resources: https://developer.apple.com/resources/
The app Swifty is pretty good.
Last week, /u/clattner (Chris Lattner himself) promised that it is still on track to be released by the end of 2015: https://www.reddit.com/r/swift/comments/3q2zqa/when_is_swift_going_open_source/cwbu0be
Ok, I'll keep my eyes open. Thanks for the prompt reply and the source :)
I use it because it has lots of nice features that can really speed up development. But the app is a complete and utter mess when it comes to resource and battery usage. I keep hoping for them to fix it, but I'm fairly confident that I will not renew again when my license expires in June. 
you can make an app for a website
I completely agree. http://swifty-app.com/ 
I will reply here and hope I will cover all your questions. &gt;Also, a follow-up: what version of Java are you using with AppCode? Back when I tried it you had the choice of Apple Java 6 with nice font rendering but instability/crashes or Oracle Java 8 with broken font rendering and other graphics glitches. AppCode 3.3 contains bundled JDK 8 with fixes from our JetBrains team. In this case *fixes* mean exactly what you mentioned - most of rendering issues should be resolved in this version. In any case, you can switch JDK version that is used by AppCode - invoke "Find Action" by pressing Shift+CMD+A, type "Switch IDE Boot JDK" and choose between JDKs installed on your system. &gt;From what I remember, the Devs posted something like "that is a feature no sane developer would ever need" even after tons of people +1'd it and later flat out refused to say if it would ever be implemented. If you mean [this](https://youtrack.jetbrains.com/issue/OC-2581) issue - I think, that was some kind of misunderstanding, cause our devs just outlined, that they cannot give any ETA for this feature - but this feature request is in tracker and we do not forget about it. &gt;I also remember that I came across one or two bugs that they declined to fix with the reason being something like "it works on the Windows version of IntelliJ so it's not our problem". I guess you mean some issues that can be fixed only by Platform developers and in such case corresponding ticket should be created in IDEA tracker. Am I right? 
As I already answered - we have JDK 8 built into 3.3 installer, so you do need to download it separately. So, you do not need to download Java 1.6 at all. 
I've heard people say they really like some features of the AppCode editor, so this looks interesting. BUT... If you were reliant on AppCode to do your development, Xcode 7 support _just_ came out.. almost TWO months after iOS 9 was released. I wouldn't want to be tied to AppCode exclusively for development for that very reason. Maybe it's not that hard to switch back to Xcode for those times you need to get stuff out, but I don't want to do that. So honest question: did this bite any AppCode users trying to build iOS 9 apps?
Hey thanks for dropping by and giving a detailed answer. I'll probably have to google some of the you describe here, but I mostly get it ;-) You wouldn't happen to be able to contrast this with C# as well? Always good for us Apple fans to have an answer to the MS fans when they start ranting on about how stupid Swift is when you already got the most awesome language ever C# (according to them) :-D
To be honest, we support Xcode 7 [starting from EAPs in September](http://blog.jetbrains.com/objc/2015/09/appcode-3-3-eap-starts-now/). This link is an official release announce, and Xcode 7 support is mentioned only because this question was frequently asked by our users who don't know about early access program (or don't want to use EAPs). 
Thank you for this. I am at $9 with 1K downloads. Time to get work.
Yes because its refactoring tools absolutely destroy Xcode, and it has a Perforce plugin which means I spend as little time as possible in P4V. My only gripe is the Interface Builder (at least in v3.1) just doesn't cut it, so I have to jump back into Xcode for any UI work.
No, because as I know - there is no open API for submitting builds to App Store. 
Because I can do pretty much anything with the keyboard. With Xcode I have to pick up the mouse for basic stuff, like switching between files quickly. Also, the ability to find usages and jump to definitions is pretty key for a large codebase.
Not only that but finding usages of a function or variable is also vastly superior. They're not even in the same league when it comes to that.
Cocoa Programming for OSX, 5th edition. I don't like it as much as earlier editions, but it's entirely swift now (I think) and it's been a big help for me. 
&gt; xCode works well thanks for the laugh
When we will get all the refactors available to objc? Extract, inline variable, code completion for a switch statement on an enum etc Seems like this is still missing, and it's the only thing keeping me from coming back to AppCode
Definitely learn how to use Instruments.
I'm going to have to agree here. xcode is quite complete, but I would like to see its tabs sorted out and adopt more UX decisions from Jetbrains.
Well, let's start with the easy part first: https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Extensions.html &gt; Extensions can add new functionality to a type, but they cannot override existing functionality. So, you can't override in an extension, at least not the way you're expecting. As for why it works, I think swift is treating the 2nd one as an internal method, so it's able to coexist with the one in the main class. You can call them explicitly this way: B&lt;Greetings&gt;().foo() B&lt;Hello&gt;().foo() That's my guess anyway.
Ok, this may describe the issue better than me since I'm still trying to wrap my head around it. The rules are confusing. http://nomothetis.svbtle.com/the-ghost-of-swift-bugs-future
I second this, especially hackingwithswift. It's written by an awesome dude who takes you through 36 tutorials which cover all sorts of interesting and fun aspects of swift development. He's also very responsive on Twitter and frequents /r/swift. Good luck on your journey! It sounds like you have the perfect mindset to take this on :) also, if you have an background in ui/ux design then you are golden. 
Someone on here mentioned getting some graphic design experience. I personally don't have any formal training there, but it's also something you can learn online to some degree. I've copied all the links from my 'Design' bookmarks folder. A lot of them have to do with 'Flat' design methodologies, but that's just my preference. You might find some of them useful either way as you begin to design and build your first apps: * [Flat UI Colors](http://flatuicolors.com/) * [Ultimate Guide to Flat Design](http://www.webdesignerdepot.com/2013/09/the-ultimate-guide-to-flat-design/) * [Free Vector Icon Database](http://www.flaticon.com/) * [Adobe Color Schemes](https://color.adobe.com/explore/most-popular/?time=all) * [Graphic Design Junction Freebies](http://graphicdesignjunction.com/2013/05/flat-design-ui-elements/) * [My first ever experience with design/animation](http://blog.matthewcheok.com/design-teardown-stretchy-headers/) * [More teardowns as above](http://designteardowns.com/) * [Google's Design Guidelines](http://www.google.com/design/spec/style/color.html#) * [Creating app icons in Photoshop](http://appicontemplate.com/ios8/) * [Creating a Good Flat icon in PS](http://www.softboxpresets.com/blog/create-a-long-shadow-effect-in-photoshop) * [Flat Design Inspirations](http://fltdsgn.com/) * [More design inspiration](https://niice.co/) * [Design Showcase for Inspiration](https://www.thebestdesigns.com/) * [...even More](http://zurb.com/patterntap) * [Dribbble UI Animations Inspiration](https://dribbble.com/search?q=UI+animation) * [Behance UI Design and Animations](https://www.behance.net/search?field=132&amp;content=projects&amp;sort=appreciations&amp;time=week&amp;search=mobile%20UI%20Animation) * [App Design with Swift](https://designcode.io/swift-design?utm_campaign=Swift_Developer_Weekly_11&amp;utm_medium=email&amp;utm_source=Swift%2BDeveloper%2BWeekly) Hope it helps! Also, as far as getting used to code and tools, really start browsing Github.com for cool projects and peoples' incredible work. You can learn A LOT there. Cheers
Are you using a bridging header file? Pretty sure Google's SDKs are all Objective C. You should be able to add the imports to your bridging header file and I don't think you need to add the import statement at all in your swift file. I could be wrong and Google could have updated the way they do things, though, so I'm just spitballing.
I personally stuck to games only because it's much easier to create a game idea than a non-game app because almost everything has already been created. Not games. Games can be creative. Unique. Special. I think games are easier to invest than a non-game app. 
This
No, given that AppCode makes seamless use of the xcodeproj format, I didn't find it any problem to switch back to Xcode for the period it took AppCode to catch up. The only 'problem' was missing AppCode features. Since 3.3 EAP 2, several weeks back, Appcode has been fully working with Xcode 7, so this release comes only as an official consolidation. I can't praise AppCode enough; it's a vastly superior code editing experience to Xcode. The way I see it, some Applications just weren't meant to have simplified, Apple-style User Interfaces, and that includes IDE's. In this respect, AppCode is the perfect antidote to Xcode. That said, editing of project settings and Interface Building are better done in Xcode. Use the strengths of both, in tandem, and reap the benefit.
Interestingly enough, ANTLR has a C port. You could wrap around it in Swift (using bridging headers) and THEN build it Tailor in Swift!
Never used it, but the jet brains products are normally excellent appcode
Ah, 'Find Usages', two simple words... so much productivity.
&gt;Is Swift really used in production? People need to stop asking this. Yes, it's being used. A lot. By many different teams, on a variety of projects. It is production ready, there are no deal-breaking bugs, and it produces apps that are a hell of a lot more stable than ObjC based apps. 
And Swift is much more readable 
Yes it is. The design of initializers on Swift makes it so that once you've created an object, the compiler guarantees it is fully initialized. This makes sense because values can be optional, whereas in ObjC where all reference types are optional and scalar types default to some arbitrary value (usually some variant of zero). And the fact that you can provide initial values at the property declaration site makes this important as well.
[Lyft](http://thenextweb.com/insider/2015/07/17/the-lyft-ios-app-is-now-written-entirely-in-swift/).
Yeah, but if I've already opened three files, for example, and I want to just hop between them, there's no easy way to do that. AppCode has a file switcher that tracks the last n files (configurable) and allows you to quickly jump between them. I use that constantly.
Finder. It's part swift.
I have a suite of apps (9 in total) currently in the store -- about 20k daily users across those apps (we have not started marketing yet, we do about 10x that on Android). We released our apps in June -- Swift was production ready waaaaay back then and it only gets better with each release. I'm with /u/blaizedm, people have got to stop thinking Swift isn't ready for prime time -- hopefully 2.0 will put that mentality to bed once and for all.
Swift is undoubtedly ready for many jobs but it is still disturbingly easy to [crash the compiler](https://github.com/practicalswift/swift-compiler-crashes). This is not a good look for a production ready language, and leaves me worrying (quite reasonably) whether there are other bugs in the compilation process that I'm not seeing. That's probably why this question is still being asked. I love the expressiveness and type safety of Swift but am disappointed by the handling of generics in protocols which makes [some patterns](https://www.reddit.com/r/swift/comments/3rgjx9/limitation_of_swift_generics_vs_java_generics_is/) which would be a breeze in Java, impossible to implement. Also lack of any meaningful reflection is something I hope will be addressed soon.
Every app developed by [Metova](http://metova.com) in the past year has been developed in Swift, and there are tens of them. One example that I know has been released is [BookGrabbr](https://itunes.apple.com/us/app/bookgrabbr/id991822262?mt=8). There are others, and there are many more in production. 
Thanks. The one tough thing is that the system is so complex. Embedded binaries, obj-c linker, linked this and that. I kind of learned swift along the way and took a udemy course which never covered frameworks vs projects, binaries etc etc so I get real lost when digging into that stuff to fix errors. 
Thanks. When I upgraded to 7 I did use the migration tool. Alamofire seemed to cause a lot of issues there and that seemed to cascade to other modules and such. This time I'm using bitbucket and pushing my code quite a bit. However, does bitbucket keep track of all those small changes in build settings, build phases as well, or does it just track written code?
I manually added parse analytics and it worked fine. It was the parse crash reporting added through cocoapods that didn't work. Google analytics was also a pod and I followed the instructions to a T including making the bridging header file. It wouldn't recognize the GGLContext. I posted on Stackoverflow and someone suggested a totally different header file and I think implied that the Google documentation was off. I am going to try and add the mix panel analytics tool. We use that for our site and have had good experience with the support. 
I kind of think the documentation is outdated for Google analytics. They were still telling users to add pod 'Google analytics', 1.0 and they are already up to 3.13. I submitted a bug report for that. However you can see [here](http://stackoverflow.com/questions/33486701/after-implementing-google-analytics-according-to-documentation-i-am-getting-an/33487901?noredirect=1#comment54766288_33487901) that someone has indicated that perhaps their instructions for the bridging header file are also off. I may try adding GA again but in a new branch. 
I just wrote a Swift desktop app for a client. It replaced a Ruby script that broke when they upgraded the OS.
All but two of the aforementioned are iOS (one, the Finder, isn't even written in Swift) and the op asked specifically for desktop apps. There's probably a better way of finding them, but here's what's on my Mac: |Application|Notes| |:-:|---| |[Fabric](https://fabric.io)|*CSYMGenerator* XPC service only| |[HazeOver](http://hazeover.com)| | |[Helium](http://heliumfloats.com)|| |[MacDropAny](http://www.zibity.com/macdropany.html)|| |[Persecond](https://flixel.com/products/mac/persecond/)|| |[Redacted](https://itunes.apple.com/app/redacted/id984968384?mt=12&amp;uo=6&amp;at=1l3vmtU&amp;ct=)|| |MRT|Malware removal tool, `/System/Library/CoreServices/MRT.app/`| Swift apps include the language's core library plus everything else it needs inside the app bundle. So, to find the above, I ran the followingâ€¦ find / -name "libswift*.*" â€¦ then excluded Xcode and all source repos from the results which leaves the list. I should note that I don't use a lot of apps people might consider everyday essentials - e.g. I don't have an image editor, word processor, spreadsheet, &amp;c - so the rather short list above is probably not representative of the average user.
&gt; something like this in Objective-C: &gt; `NSError *error = nil;` &gt; `NSArray *imageFiles = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:@"./" error: &amp;error];` &gt; &gt; `if(error != nil){` &gt;` NSLog(@"Ouch! Error!");` &gt;`}` Yuck. Ignore the nasty formatting. The point: in Objective-C the convention is to check if `imageFiles` is nil and to act on that accordingly, not to check if `error` is nil. Don't know why that is/was so hard for people to get.
It's there if you don't need a terminating newline character at the end of your print statement. The separator is there to allow you to replace the default separating character for when you pass in multiple strings. For example, using a separator of "," and a terminator of ",EOF", you could print the strings "one", "two" and "three" as "one,two,three,EOF" without knowing the exact number of arguments passed in.
I've not seen much discussion in regards to swift *desktop OSX* apps. There's plenty of examples of successful swift iOS apps, but less so for desktop apps. I'd love to see some discussion about testing on older mac hardware or OSX versions or any other issues unique to desktops.
Same boat as you! Also a graphic designer curious about programming. I'm taking a Udemy course right now. Just started though. Good luck!
I get what your saying, however the errors are so weird and random that it's hard to pinpoint what's causing them. I also did title the post "How do you deal with xcode and swift"... so it could be argued that I was directing my angst to Apple.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/swiftonlinux] [Chris Lattner: Open-source Swift is still on track](https://np.reddit.com/r/SwiftOnLinux/comments/3rerh6/chris_lattner_opensource_swift_is_still_on_track/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Welcome to the world of credit card processing. Warning: it's awful. Stripe is a gateway. They offer an sdk that lets you take credit cards, debit cards, and Apple Pay. They work with a gateway to go out and collect the money and then they put it in your merchant account at a bank. There are lots of comparables to stripe. Braintree is good and also supports PayPal on top of the same things. Both offer things like fraud protection, storing credit cards to bill later, subscriptions, etc. Apple Pay is basically a replacement of a credit card itself. Your gateway/processor combo has to accept it. Apple doesn't have anything to do with actually processing the transaction.
Of course... Thank you also for inspiring developers to invest their passion and time into a great weather app because I agree with how useful that is and how badly it is needed right now. It just sucks that trashy weather apps will flood the market until then..
Ah so it just automatically "fills in" the credit card information? So Stripe or some other service has to process? So to clarify, apple pay cannot process transactions? I have to use apple pay on top of another service, i.e. stripe?
I have been learning it since it came out. I understand most of it, its just the actual iOS stuff like changing the properties of things and the stuff you would don't use that often. I don't really know how to put it. Basically, the language makes sense to me and I have been able to figure out most of the bugs in my app. 
10$ seems pretty reasonably priced for an app you care enough to write to reddit about.
Think about it. Parse and Google frameworks/libraries are probably very bloated and difficult to maintain. The upsides are nice. But when it goes wrong, who you gonna turn to? Buyer beware.
Correct on both questions. Apple Pay just stores and fills in a card for you. You still need a processor to process the transaction.
Sounds great, I currently live in China and I'll private message you skype user name.
ugh sorry. Long day... I meant to complain about printing without a newline. print("string", terminator:"") I find the way to opt out to be overly verbose. It's not as if printing without a newline is a rare occurrence. I wish they kept them as separate functions for the sake of elegance.
Awesome!
This is with Swift 2.1 and xCode 7.1 from my game that already uses leaderboards designed in SpriteKit. iTunes Connect: 1) Log in into your [iTunes Connect account](https://itunesconnect.apple.com/). Go to My Apps, and select the app you want leaderboards with. 2) [Go to Features, and then Game Center](http://imgur.com/t2GWuDs). Click the plus sign to create a leaderboard. If you want to make a set of leaderboards (grouped leaderboards, then go to the right and click on "More". 3) After clicking the plus sign, follow the instructions of what kind of leaderboard you want. At first, do a single leaderboard if you're not sure. The "Leaderboard ID" you assign to it will be used in your code as a string when accessing it, so make sure you type something nice. Now in xCode: 1) [Include the GameKit.framework library by choosing the "+" sign.](http://imgur.com/c5uAWhf) 2) [Add the string "GameKit" into your info.plist](http://imgur.com/8LK7Y1b) 3a) Add the following on top of the GameViewController.swift file with the other import code. import GameKit 3b) Add the following function inside the class in the same swift file. func authenticateLocalPlayer() { let localPlayer = GKLocalPlayer.localPlayer() localPlayer.authenticateHandler = {(viewController, error) -&gt; Void in if (viewController != nil) { self.presentViewController(viewController!, animated: true, completion: nil) } else { print((GKLocalPlayer.localPlayer().authenticated)) } } } 4) Call the "authenticateLocalPlayer" function from inside the viewDidLoad() function. 5a) Now, go to the GameScene.swift file (or wherever the execution will take place). And also add the following on the top. import GameKit 5b) Add the following code inside the class function. //shows leaderboard screen func showLeader() { let viewControllerVar = self.view?.window?.rootViewController let gKGCViewController = GKGameCenterViewController() gKGCViewController.gameCenterDelegate = self viewControllerVar?.presentViewController(gKGCViewController, animated: true, completion: nil) } func gameCenterViewControllerDidFinish(gameCenterViewController: GKGameCenterViewController) { gameCenterViewController.dismissViewControllerAnimated(true, completion: nil) } In my game, I have a button to display the leaderboards, so wherever that may be, just call the "showLeader" function to display the leaderboards. 6) You must have a function that sends the score to the leaderboards. Outside of the entire class declaration, I have the following function that accepts the user's game score as a parameter and sends it to the leaderboard. Where it says "YOUR_LEADERBOARD_ID", that is where your Leaderboard ID I mentioned earlier goes in. [As pictured here](http://imgur.com/Txlpp87). //sends the highest score to leaderboard func saveHighscore(gameScore: Int) { print("Player has been authenticated.") if GKLocalPlayer.localPlayer().authenticated { let scoreReporter = GKScore(leaderboardIdentifier: "YOUR_LEADERBOARD_ID") scoreReporter.value = Int64(gameScore) let scoreArray: [GKScore] = [scoreReporter] GKScore.reportScores(scoreArray, withCompletionHandler: {error -&gt; Void in if error != nil { print("An error has occured: \(error)") } }) } } 7) This is the function I have that is called on a game over. It decides if the score is greater than the previous highest score, and if it is, it will send it to the leaderboards. **This code is entirely up to you, but make sure it calls the saveHighscore function which sends the data to the leaderboard.** func overrideHighestScore(gameScore: Int) { NSUserDefaults.standardUserDefaults().integerForKey("highscore") if gameScore &gt; NSUserDefaults.standardUserDefaults().integerForKey("highscore") { NSUserDefaults.standardUserDefaults().setInteger(gameScore, forKey: "highscore") NSUserDefaults.standardUserDefaults().synchronize() saveHighscore(gameScore) } } Notice the function "saveHighscore" is called in the end. 8) Finally, in the game over function (or whatever you called it), call the function "overrideHighestScore" so it can check if the score is good enough to save. After doing both, wait a few minutes until the leaderboards is connected to your app (or that they do load). It works on my game. **Hopefully, I haven't forgotten any step.** [Screenshot of my game leaderboards](http://imgur.com/kd3exqU) that were used to make this tutorial.
No, splits are something completely different. Assistant editor will automatically change it's contents based on the main editor and you can have more than one. The contents in splits will stay the same, so if I want to see a view controller, the corresponding .h and the corresponding unit test at the same time that is 3 actions I have to invoke compared to 1 action with assistant editor. 
I love weather apps. I paid $10 for the Radar Scope app for iPhone years ago, and it was worth every penny. It is a professional level meteorological tool, particularly in the tornado detecting arena. It provides high resolution, real time wind velocity data from multiple, selectable radar towers. The $10 app in the tvOS App Store, while it is very pretty (from the screenshots it looks gorgeous), is not the caliber of app I'm willing to pay 10 bucks for. It just doesn't do enough. Look, if the $10 app was a $2 app I probably would have bought it and we wouldn't be having this conversation. I'd have a very nice looking local radar app. Done. I don't really have to think too hard about a $2 purchase. $2 is a taco. But at the $10 price point, something else happens entirely. $10 is a considerable amount of money, not only to me but to the average app consumer. $10 is two days of groceries. While it's easy for me to impulsively drop 2 bucks on an app, I think long and hard about a $10 purchase. I'm surely not the only person in the world like this. If 10 people are willing to pay $10 for this app, but a thousand people are willing to buy it for $2, which is the better option for a dev? The guy could probably make fistfuls more money than he is now and have exponential growth in his download count if he was more in tune with what the average consumer is willing to spend. My two cents. I love you guys. I love the apps you make. Somebody should really make a nice looking, cheap app that has local radar. Me and all the other average joes that just got a new Apple TV would have bought it already. 
Swift does not have F-bounded quantification (of which your scenario is one example). You can avoid the need for F-bounded quantification in almost all cases by using associated types and type constraints. Even if it did work, it's frowned upon. You might want to read Eric Lippert's article decrying the use of the "Curiously Recurring Template Pattern" feature in C#: http://blogs.msdn.com/b/ericlippert/archive/2011/02/03/curiouser-and-curiouser.aspx
The biggest thing that ObjC has over Swift is reflection. Reflection in Swift is pretty terrible, and with ObjC you can do a lot of really crazy stuff during runtime. I don't think that's a reason to prefer one over the other, I think the main reason some experienced developers prefer ObjC is that they don't want to be bothered to switch. Another good reason is that for maintaining a legacy project, it's never going to be worth it to completely rewrite the entire thing. So unless you're starting a new project, there isn't really a reason to change. 
I use it all the time, except for Swift projects, where it is still lacking the refactoring tools that make AppCode so great.
I'd consider myself an "intermediate" level programmer. I write cleaner and safer code with Swift than I did with Objective-C, and I guess the things some devs miss from Objective-C are things I never really used anyways. In general, Swift just makes more sense to me. I think for the vast majority of developers, the new things that Swift can do that Objective-C can't, should far outweigh the things that Objective-C can do that Swift can't.
Does this have anything to do with Java and C# performing type erasure?
[Wordeth](https://itunes.apple.com/us/app/wordeth/id1052870871?mt=8) is written in Swift.
Agreed. Apple has been working on Swift to replace Objective-C. While you can use both (even in the same project), it is clear that Swift will be the language to use going forward for iOS, Mac OS, watchOS, tvOS and whatever else comes next. It seems squarely aimed at web developers who are comfortable with object-oriented programming and scripting, which is great, because Apple, who helped define the mobile web, seems intent of killing it off in favor of apps. Which is also great.
I would recommend learning the latest version. A lot of stuff has stayed the same, but enough has changed that I think it's not worthwhile to learn an outdated version.
Upgrade and learn the latest version of Swift.
[**@SmileyKeith**](https://twitter.com/SmileyKeith/) &gt; [2015-11-03 05:14 UTC](https://twitter.com/SmileyKeith/status/661411150362357760) &gt; Just found some glorious old Swift 1.0 code &gt;[[Attached pic]](http://pbs.twimg.com/media/CS3N77HVAAE_HWN.png) [[Imgur rehost]](http://i.imgur.com/oKEq8TP.png) ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Hi I created a new coupon code. You can use this code https://www.udemy.com/the-complete-marketplace-daily-deals-app-with-swift/?couponCode=FREE_INDIRIMOBIL
Is there a technical reason you can't upgrade to El Capitan? You could learn Swift 1.0 and transition to Swift 2.0 later but just because you don't want to upgrade makes very little sense.
I'd recommend the latest version of Swift from the start. If you need to, you can learn using swiftstub online.
 &gt;I have Mavericks, I really don't want to upgrade to Yosemite or El Capitan. However, I want to learn iOS programming now. This needs an explanation. If you have a technical reason then fine don't upgrade, however ElCapitan is awesome in my experience and highly recommended. Beyond that Swift is under rapid development as is XCode, as a developer it is in your best interest to keep up. &gt;I have XCode 6.2, but that's the oldest version of Swift. **Would you recommend upgrading and learning Swift 2.0 from the start** or is are the two similar enough that it's still a good idea just to do Swift 1.0? Absolutely!! Can't stress this enough, upgrade everything including your OS. Do this to the latest "released" versions but I'd even consider the betas as Swift development by Apple is extremely active right now. Each Swift release fixes bugs and supplies you with better diagnostic information. In a nut shell you want to stay on the bleeding edge with Swift due to its rapid evolution. 
I agree with the first part, but what it has to do with the web developers?
Uhm. The only similarity Swift has with Javascript is some functional features. Otherwise they are worlds apart. The only other thing reusable from web is JSON, which became de-facto standard for communication with backend. No CSS or HTML in sight. And language is just a small part of the iOS programming picture. The rest is Cocoa Touch, which is nothing like (thank gooness) the mess the modern web got itself into. 
Thank you very much
"I don't like upgrading, but I want to be a programmer." Good luck with that. 
Like others have said; Swift 1.0 is not just 'outdated', it's plain broken: I wouldn't even consider making it the focus of your learning. You have no choice but to upgrade your OS really. More generally, frequent software updates for the benefit of end-users (not developers!) is the 'Apple way'. You're going to have a rough time as a developer in the Apple eco-system if you try and fight that. Not saying I necessarily agree but that's the way it is.
https://www.livecoding.tv is a thing.
Awesome! Thank you!
OK, I guess we're getting somewhere. This will do for now.
You want to learn iOS programming? If you don't use the latest xCode or Swift, then you won't be able to make apps for iOS 8.? and above. And you would only be able to test on an iPhone that is allowed by your xCode 6.2, which means you can forget about testing on iOS 9, which is what is out right now. Do upgrade, as it will be a huge benefit. When I first started my game, I was using Swift which was outdated on xCode which was also outdated. When I finally updated my iPhone, I wasn't able to test my game on my iPhone, so I downloaded the newest xCode. Guess what? Now my code didn't work because it was outdated. It's better to learn 2.1 and just update xCode and your OS.
You say, 'it seems exceptionally messy.' But you don't say what your criteria for messiness are! My ideas about what is messy will be different from yours. For example, I would regard one definition of messy to be "here's a bar chart with no labels" (from the user's point of view). And judging by that, I would say that *any* code which draws the labels has given the **user** a non-messy bar chart. So, on the one hand there's that point of view. On the other hand, of course, it is a kind of ideal to have non-messy output with non-messy code, where possible. In that regard, I'll just list a few ways which *I* would consider make the code less messy (but again, these may not be from a point-of-view with which you agree): * tuck the rotate-string-and-draw-it code away in another method which drawRect can call; or add it as an extension of String * use the technique in the accepted answer on the stackoverflow question you cite to rotate a label which would accomplish your stated wish of, 'Ideally I could do the equivalent of dynamically adding UILabels from drawRect...' However, do be careful with creating objects in drawRect because you have to be sure their lifetimes match your expectations; in particular, people often have problems creating duplicate objects on every trip through drawRect (which is called **a lot**) and end up with millions of labels. * There are even more sophisticated text drawing frameworks in Cocoa, you could examine them. But they are likely to require massively more set-up and would be a case of using a sledgehammer to crack a nut So, if your criteria for non-messy means something like text.drawAt90DegreeAngle(), then, no, that isn't possible. But you could write such a method, using my first suggestion. And that is the way I would do it. The other two suggestions were just because I was trying to be thorough and not exclude possibilities which I wouldn't myself use.
*Parametized* generic protocols are not supported. Protocols with associated types are definitely generic. 
This article is very old, though I'd be interested in seeing an updated comparison.
http://www.primatelabs.com/blog/2015/02/swift-performance-updated/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+primatelabsblog+%28Primate+Labs+Blog%29 still "old" tho. Honestly I don't imagine the numbers have moved a huge amount. It certainly produces code that is fast enough.
Never say never, it seems like there's cases where a full rewrite can be very beneficial: http://www.sunsetlakesoftware.com/2015/11/03/what-we-learned-rewriting-our-robotic-control-software-swift
I agree with you there. Especially on my memory-limited dev box, Find Usages in Xcode is most of the time pretty useless.
Yes, it does look like a toy example, but it was distilled from a real &amp; ongoing problem I am encountering while porting part of a large ObjC project. Can't share the code as it belongs to my employer but two separate efforts to re-architect it so far have hit a brick wall due to either: - Inability to check conformance to a generic (type-aliased) protocol: easy in Java - Inability to carry through the implementing type to a (notionally) abstract base class: easy in Java Agree that mix-in via protocol extensions has been excellent elsewhere in the code, and I probably need to work out how to better lever the power of first class functions to solve problems in new ways. Just goes to prove that syntax and features are the easy bit... the real learning of a new language is in the design (and Swift just isn't Java) :-)
What actually happens when you run the code? Does any response happen / what error messages do you get (if any). Edit: Try this Alamofire.request(.GET, url, parameters: parameters).responseJSON { response in if let JSON = response.result.value { print("\(json)") //Do stuff with the data here. } }
I just spent 10 bucks on coffee that's just going to hit the urinal by nightfall.
Thanks for the reply! let url = "https://api.imgur.com/3/image/8ABRUYt" Alamofire.request(.GET, url, parameters: parameters).responseJSON { response in if let json = response.result.value { print("\(json)") //Do stuff with the data here. } } Response is authentication issue: { data = { error = "Authentication required"; method = GET; request = "/3/image/8ABRUYt"; }; status = 401; success = 0; } I'm guessing the client ID needs to be included in the parameters somehow? Just not sure how to structure it, even as a URL...
That part of OP's question is inflammatory. "Production" is ambiguous. You might have to wait a few years before you see it being used in a pacemaker, for example. But, iOS apps, perfectly fine. But asking for examples of DESKTOP apps is a legitimate question. There are probably thousands of iOS apps, but I can understand wanting to see other desktop apps in Swift.
Ow my eyes.
thx for answer i am sure you are right !=) it's jsut that i can't understand how to get it into my code since i am beginner i will post here a bit of the code so you know what i mean :)! var query = PFQuery(className:"friends") query.whereKey("toUser", equalTo:"user.currentuser") query.findObjectsInBackgroundWithBlock { (objects: [PFObject]?, error: NSError?) -&gt; Void in if error == nil { // The find succeeded. print("Successfully retrieved \(objects!.count) friendrequests.") //here i save some things in variables if let objects = objects as? [PFObject] { for object in objects { print(object.objectId) } } } else { // Log details of the failure print("Error: \(error!) \(error!.userInfo!)") } } if i want to start a Query right after this Query is completed i should be able to do thath with a completion right ? 
 Alamofire.request(.GET, url, parameters: parameters) .validate(statusCode: 200..&lt;300) .validate(contentType: ["application/json]) .responseJSON { response in switch response.result { case .Success(let value): // do something with the value case .Failure(let error): // do something with the error } } Also, does Imgur require encoded parameters? If so, Alamofire's Request object allows you to encode them in various formats. Hope this helps.
I did do that, it was really weird. Xcode 7.1 didn't like that I had a picture in a dynamic cell. I just removed the picture. 
http://i.imgur.com/SH2hwvd.png and off I go
 func addTwoInts(a: Int, _ b: Int) -&gt; Int { return a + b } func multiplyTwoInts(a: Int, _ b: Int) -&gt; Int { return a * b }
Thanks for the challenge!!! Here is my solution recursive backtracking: // solve(number, sum) gives a possible solution to get // from number to 1 with the sum of the operations sum func solve(number: Int, sum: Int = 0) -&gt; [Int]? { if number == 1 { return sum == 0 ? [] : nil } if number &lt;= 0 { return nil } if number % 3 == 0 { let nextStep = number / 3 if let partialSolution = solve(nextStep, sum: sum) { return [0] + partialSolution } else { return nil } } else { let remainder = number % 3 if remainder == 1 { // the remainder is 1 I can add 2 or -1 to get a multiple of 3 // trying 2 if let partialSolution = solve((number + 2) / 3, sum: sum - 2) { return [2] + partialSolution } // trying -1 if let partialSolution = solve((number - 1) / 3, sum: sum + 1) { return [-1] + partialSolution } } else { // the remainder is 2 I can add 1 or -2 to get a multiple of 3 // trying 1 if let partialSolution = solve((number + 1) / 3, sum: sum - 1) { return [1] + partialSolution } // trying -2 if let partialSolution = solve((number - 2) / 3, sum: sum + 2) { return [-2] + partialSolution } } return nil } } func printFor(number: Int) { if let solution = solve(number) { var temp = number for op in solution { print("\(temp) \(op)") temp = (temp + op) / 3 } print("1") } else { print("Impossible") } } printFor(929) If you want to practice/understand recursion read [this](https://www.weheartswift.com/recursion/). If you are looking for similar exercises to practice Swift -&gt; try my [book](https://www.weheartswift.com/swift-programming-scratch-100-exercises/) 
you have the same solution but with 0 explanation ... you are not on topcoder. When sharing solutions you should make your code readable. n, p, l, a, ans - not good variable naming. 
Was just about to write my explanation there. Spotted a bug, had to change it!
Underscore just means that a variable has yet to be named. In this case, using an underscore should ignore the first parameter of case( _, 0).