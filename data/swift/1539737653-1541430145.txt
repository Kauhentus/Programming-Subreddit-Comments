I subscribed to it few few back, actually it‚Äôs one of the ‚Äúnewsletters‚Äù I really enjoy
Any one using AWS Cognito for Google Authentication? Is it possible to use a custom UI instead of the provided Amazon UI for login?
Inheritance can be a real pain in the ass sometimes. Composition is often preferable, but CoreData doesn‚Äôt really have a mechanism to support it. Perhaps the answer is to treat the objects as individuals in CoreData and add protocols, in code, for shared functionality?
Finished an update to my layout library: https://github.com/HotCocoaTouch/DeclarativeLayout 
That was a great explanation if state. Thank you. 
üëç
I‚Äôm having a problem updating the artwork within an UIImageView using the Media Player framework. 
Core Data entities can ‚Äúsubclass‚Äù other entities. They‚Äôre called parent entities. See here under Entity Inheritance: https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/KeyConcepts.html#//apple_ref/doc/uid/TP40001075-CH30-SW16 Note also that abstract entities are also supported.
SpriteKit/SceneKit is amazing. Probably my favourite game frameworks to work with. But with them not being cross platform, its difficult for anyone to justify making games with it. 
Unwrap the optionals. You ain‚Äôt gonna corrupt memory unwrapping optionals (safely)!
I usually group them by their function. Several functions dealing with printing? Put them in PrintingUtilities.swift.
What docs haven't been written yet?
Making some assumptions about your input string: print("00110001 00110010 00001010" .split(separator: " ") .compactMap { String(Unicode.Scalar(Int($0, radix: 2)!)!) } .joined(separator: "") ) 
Maybe animate the constraints based on the [UIScrollViewDelegate](https://developer.apple.com/documentation/uikit/uiscrollviewdelegate) methods.
I‚Äôd have one outer vertical collectionview that has two sections. The first section has one cell that is full width and that cell is itself a collectionview, this time with horizontal scrolling. The second section contains all the other cells. That way you‚Äôll get the whole thing to scroll vertically together.
This part of the year is a particularly busy month for me ‚Äì since September 1st I've already spoken at iOSDevUK Swift &amp; Fika, NSSpain, SwiftConf, TechFest, and Mobiconf. So, I'm really glad I just released a [speaking page on my site](https://www.hackingwithswift.com/speaking) that has videos of those talks and more so everyone can watch them. I also opened up the nominations phase of the [Swift Community Awards for 2018](https://www.hackingwithswift.com/awards) ‚Äì anyone can nominate the people and projects that helped them most over the year, so check it out! Apart from those two I'll be working on my new book, [Testing Swift](https://www.hackingwithswift.com/store/testing-swift), trying to get my Swift learning app ready for TestFlight ([it's on GitHub](https://github.com/twostraws/Unwrap) if you'd like to check it out), and speaking at another event in Poland this weekend.
Is there any good swift books any one would recommend to a swift newbie? I am familiar with a few other languages and I like having a psychical resource to read over
I was thinking about something like this having everything in one collectionView but thought it would become very very complex as to handle other tasks later on. I was just hoping I might be able to solve this via scrollView, if I ma not able to I will resolve to this method. Thank you.
Making my first app. Making it for myself and a colleague. The app fetches data from [sentry.io](https://sentry.io) and shows the user projects registered at [sentry.io](https://sentry.io). The user can also check issues related to projects and filter them.
A little respect for the community can go a long way towards getting help. We‚Äôre not your dogs.
Sorry, my language isn‚Äôt right, I introspect that, it was my fault, sorry guys, I didn‚Äôt mean it disrespectfully, my apologies! I‚Äôm just a little bit rushing.
What‚Äôs happening with simulator? Since newest Xcode update, simulator is soooooo slow, anyone have same issue? 
Is there any video or tutorial explaining the view hierarchy. Like, maybe a video showing when you argue if you‚Äôre effectively moving the ‚Äúcamera‚Äù to a new location, or if the camera stays but you‚Äôre putting something new in front of it. And if you segue to a given VC, away from it, and back to it, is it the same instance of the view you first saw, or a new one? Can you just keep segueing between views or do you need to keep dismissing old ones - I.e. do they remain open in the background? 
Lol ! Would force unwrap them ;)
Yeah I‚Äôm looking at this too. Thanks!
In my experience, review times between 24 and 48 hours are absolutely normal.
I would force it hard 37 times into them ;)
I remember getting halfway through this class and being overwhelmed. I went back to HwS tutorials and the other Stanford class on OOP until I was ready.
I recently had to do exactly this. I originally did it by literally animating the height constraint of the collection view, but ended up using a transition library with a much nicer effect. Check it out https://github.com/HeroTransitions/Hero
Yes, and you can experience more if your app present signs of trouble :)
Cool. I think some combination of these tiered entities and protocols for some cross class functions is the right answer. I will play around with it!
You're dealing with the unix concepts here: pipes, standard input, standard output, standard error, etc. The `Process` and `Pipe` classes are wrappers around this operating system functionality. I don't know of a good article explaining these topics (and hence why you're seeing the behaviour that you are), but maybe what I've said above will help you to Google it, unless (hopefully) someone else comes along with a good source. Happy hunting!
Did you add any auto layout constraints in your storyboard (or xib)? Basically that message is saying your layout may get funky because iOS doesn‚Äôt know where to put things Since this is your first lesson, if things show up on screen, I think you can ignore it until you learn about auto layout 
Patience, young one.
You would actually want to create a launch storyboard that adapts to different screen sizes. 
There are several backend frameworks using Swift but it seems like you ca do what you want to do on Firebase using Cloud functions 
You can write the backend code in Swift by using these frameworks "Kitura, Vapor, Perfect", I would suggest you to use your own backend server instead of using firebase, I don't like the backend code logic on my app and firebase data does not belong to us. We have to contact the firebase to get the data. If you need a fast solution then firebase is for you and I have use Kitura and it is pretty similar to express.js 
Thanks, I was thinking of using Vapor. Do you know of any good tutorials for what I am trying to do.
I'm pretty sure Firebase would let you do this with cloud functions.
But can it be written in Swift?
Vapor 3 is a very powerful framework. However, you won't be able to find tutorials other than just basic ones unfortunately. [this](https://www.vaporforums.io) and [this](https://vapor.university/) provide some good information. You can try joining the discord channel. Take it from experience that your development time is going to increase cause you're going to have to figure stuff out on your own.
One thing that comes to mind is working with non-Swift stuff. If you want to work with HTML or SQL you'll probably want to open a different IDE/text editor. Having Swift work well in VS Code/Sublime (which already has good HTML/JS etc support) would make things easier. Template languages too.
It's not a bold move, it's a good of a learning tool as anything else. I would suggest you keep your deliverable VERY small. It's so easy to try to build the next warcraft or facebook with your first project, but that's unreasonable. Do a tiny game with few features. The MacBook is a good start, don't worry about the drawing tablet or much of the other stuff (photoshop is probably necessary though) Xcode is the most common IDE, you will need that too. As for learning, there are good courses on pluralsight and udemy, but you may not need them. You can find good resources for free on youtube and other video sites. Good luck!
Thanks! Wouldn‚Äôt the drawing tabled be needed in order to draw characters, objects etc? Ive been checking out Udemy :)
You should use downloaded assets for now, focus on getting the game working with placeholder art, then swap the art out as a last step. You don't want to get mired down in the UX/UI stuff when you are learning to code. That kind of thing can really drag down your timeline. Also, the udemy course I am thinking of comes with art for ya. Here is a link: https://www.udemy.com/ios-11-app-development-bootcamp/learn/v4/ You should be able to follow along very easily and learn a lot. 
I learn It from vapor docs there docs are pretty good [https://docs.vapor.codes/3.0/](https://docs.vapor.codes/3.0/) Or if you have any question you can ask the vapor team in discord [https://discordapp.com/invite/vapor](https://discordapp.com/invite/vapor) &amp;#x200B;
Ok it‚Äôs been accepted. Thanks! Sorry I‚Äôm not great at waiting for things. Should probably get better at that.
Let me know when it‚Äôs more than 3 weeks ;) Apple do whatever they want, no SLA. Just gotta live with it. 
I‚Äôm sorry SLA?
Service Level Agreement. It‚Äôs strange. Some apps I submit updates for take 24 hours. Other ones any arbitrary length of time, longest being 3 weeks ‚Äúwaiting for review‚Äù. There‚Äôs no rhyme or reason to it, Apple gonna Apple. 
Huge huge fan of vapor. It‚Äôs async now which makes it sometimes hard to get concepts quickly, but Paul Hudson‚Äôs ¬´ server side swift ¬ª is an absolutely amazing book and I can‚Äôt recommend it enough. It gets you on your feet super fast. I recommend checking it out, I was able to make my backend quickly with it. Also, vapor has a deployment and hosting free tier solution, which is also generous and cool. If you happen to go with server side swift, just note that his template for cloud deployment is slightly off, but pm me and I can point you to how to fix it :)
I use [Dash](https://kapeli.com/dash).
You should do this in node.js (typescript specifically as suggested by firebase) by writing firebase cloud functions. The cloud function you will want is an HTTP function which is basically a link that you can call that will run your internal http function. Sadly firebase does not offer a way to do this like every day at 10 or something. This is called a cron job. There are many services that do it for free however. Just search free cron job callers or something. 
No, I did not. That's actually quite confusing and error-prone then.
could you elaborate a little (or point me to a resource) on the "firebase data does not belong to us" part?
It‚Äôs just something to consider when using ArraySlice. This is why you‚Äôre supposed to use startIndex and endIndex.
ArraySlice *is* largely interchangeable with Array, they both conform to mostly the same collection protocols, eg RandomAccessCollection. Ideally this would be an implementation detail, but with Swift's memory model they decided to be more explicit in this case.
My understanding is that there isn't a known way to hide it without making it meaningfully less effective as an optimization.
Swift has taken the approach where a sliced collection is simple a view into the storage of the original collection, rather than eagerly copying its elements into a new Array. The reason to have a specific ArraySlice type is so you are aware of the memory management around the contents of the original array ‚Äì the slice is holding a strong reference to it, so it will stay alive even after other references have disappeared. This gives you control over when a copy occurs so you can optimise performance and memory usage. This is explained further by Ben Cohen in [What's New in Swift - WWDC 17](https://developer.apple.com/videos/play/wwdc2017/402/) at 35 minutes in, which covers slicing strings but also applies to arrays and other collections.
Why are you modifying the devices volume from your app?
Just launched my app, [WiseEyes](https://itunes.apple.com/us/app/wiseeyes/id1391408511?mt=8). It's a matchmaking dating app where you set your friends up with other users in the app. It's been a long journey, but I finally got here.
The problem is that there's no "official" way. Yes we can use auto layout programmatically but as we can see by the crazy amount of 3rd party frameworks, it's pretty terrible. What we need is for Apple to step up and offer a true solution for teams who don't want to use Storyboards.
When dealing with JSON, the simplest thing to use is a single nested [String : Any] object. Each JSON field can be made the String key, and the value will be that key‚Äôs value (even if it‚Äôs a nested JSON, the value can be another [String : Any] object). You can set the fields with: data_dictionary[‚Äúfield name‚Äù] = json_object[‚Äúfield name‚Äù] as String 
Haptic good, sounds bad. Fuck with my device‚Äôs volume and I‚Äôll instantly delete the app.
Why do the characters ***-*** and ***‚Äì*** shift my label upwards? I have a UILabel within a circular frame. Every other mathematical operator that I use (e.g. +, √ó, √∑) fits perfectly centered within the frame except for ***-*** and ***‚Äì*** (which I'm using in lieu of the minus operator for UI reasons). &amp;#x200B; When using these characters the entire UILabel shifts up throwing the operator off-center from the frame that surrounds it. I was using the font *Avenir*, but also tried *Symbol* to see if it was an issue with how the font was designed. &amp;#x200B; **Here are my settings:** * Alignment: Center * Baseline: Align Baseline * Autoshrink: Fixed Font Size * Content Mode: Aspect Fit
What instances are you thinking of where they're not interchangeable? Changes in the ArraySlice are reflected in the underlying Array, and ArraySlice shares all the important protocol conformances of Array. By having a separate ArraySlice type, Swift informs you that you are in fact working on the original array when you might not want to be.
Why would you have to create a separate storyboard for each view controller? You don't have a problem creating UI's programmatically, but you have an issue triggering segues programmatically? Why don't xib's accommodate dynamic content? What does that even mean? Merge conflicts with storyboards are mostly a myth. Merge conflicts are almost as easy to resolve as merge conflicts in code. Why do you like typing so much? Why are you afraid of interface builder? The best way to use storboards is for flow only, individual xibs for each view controller. The storyboard will load those xibs automatically. We use this pattern on a very large team on a very large app without issue. 
I just don't like that there's a lack of a clear leader in the 3rd party offerings (might not be a bad thing but still). Also I'm always skeptical about adding too many 3rd party frameworks in Swift because we're still seeing a lot of code breaking issues when a new Swift version comes out. I've had issues where some libraries are not updated at all or take way too long to be updated. &amp;#x200B; Trusting such a major part of my app to a third party makes me feel uneasy. Also when passing the project to someone else (or having a new team member come on board) this create a small hurdle because they have to get familiar with the framework
Sounds like I didn't word it correctly: I don't want to mess with the device volume‚ÄîI want to know what to set the device volume at when I'm testing the volume of my app. Does that make more sense? Please see the clarification above. 
Will the method always be called from the same queue/thread (e.g. the main queue). If so, you can do this as follows. When you initiate the request to the server, set some `requestPending` instance variable to `true`. In the completion handler for the request, set it to `false`. In the method, check if `requestPending == true`. If so, add the completion handler to some `pendingCompletionHandlers: [(Token) -&gt; Void]` array. When you make the request, also add the completion handler to this array. When the request finishes, execute all the completion handlers in the array with the retrieved token, and remove them from the array.
That's a very good idea! like a subscription pattern, so to say. I like it, thank you!!
Compare this to the alternatives: * Always make copies of the slices, and remove the need to keep the original buffer alive. Simple operations like `dropLast` now copy all but 1 elements. Not ideal. * Make slicing work the same, but hide it under the hood of the Array type. Sliced the first 2 elements of a million element array? Guess what, you're stuck with all 1,000,000 items in memory, because the buffer is necessary to store the slice of 2 elements.
Thanks. Yeah, I've noticed how different the frequencies can sound at different volumes.
If you have the option, I'd give SSS (Server Side Swift) a run. I did see a tutorial on it, but it was quite a while back. There's some big names backing SSS, so you should have some support. If it fails, you can always go over to Node.js, I did and it wasn't all that hard. Took a few courses and got a cert earlier this year, just haven't done the security stuff yet.
What kinda 3rd party stuff are you talking like? Generally the only thing I use is SnapKit, any piece of UI can pretty much be made in minutes, and yes you could say 'this framework is battle tested' and the like but, really how battle tested does a UILabel and a UIButton in a stackview with a state control really need to be?
It's a trade-off. Sometimes it helps, sometimes it doesn't. It's great for divide-and-concur algorithms that split up an operate on slices of the array.
Looks nice! I saw it has some chat style functionality, did you MessageKit for that UI? If so how is it? Also curious how you did the backend, is it CloudKit or something else?
I am currently working on a client app that 100% does this, for the most efficient result, we used a 'manifest' core data object which then has relationships and stuff, which gets deleted when there is an update, then on parsing the manifest, you create only. 
How get cell value from selected row in NSTableView? I have table with two columns and need to get value from first cell of selected row. Help please. If you can please tell me this in detail. Thank you in advance.
You need to run your code on a device, in order to test that. In the simulator, nothing will happen. 
It doesn't? let foo: [Int] = [1, 2, 3, 4] let bar: ArraySlice&lt;Int&gt; = foo[2...3] // [3, 4] let baz: [Int] = foo + bar // [1, 2, 3, 4, 3, 4] Seems to work fine.
It would be error-prone if slicing an `Array` returned an `Array`. This is one of the reasons it returns an `ArraySlice`, you then know that you have a view into an `Array` and you've inherited the indices. So not error-prone at all unless you ignore that.
It would be error-prone if slicing an `Array` returned an `Array`. This is one of the reasons it returns an `ArraySlice`, you then know that you have a view into an `Array` and you've inherited the indices. So not error-prone at all unless you ignore that.
Thank you! Yup, I did indeed use MessageKit. It's by far the best chat library out there. For the back end, I'm using Firebase (both Firestore and the real-time database).
Hello again, I've finally gotten a moment to take a look at this stuff and have had a bit of a play. I've managed to set up a struct and use it to transform a snapshot. I followed a tutorial from Ray Wenderlich which happened to use a struct and Firebase, to get started. &amp;#x200B; The struct I created looks like the following: &amp;#x200B; &gt;struct FruitPicture { &gt; &gt; &gt; &gt;let key: String &gt; &gt;let imageURL: String &gt; &gt;let description: String &gt; &gt; &gt; &gt;init(imageURL: String, description: String, key: String = "") { &gt; &gt;self.key = key &gt; &gt;self.imageURL = imageURL &gt; &gt;self.description = description &gt; &gt;} &gt; &gt; &gt; &gt;init?(snapshot: DataSnapshot) { &gt; &gt;guard &gt; &gt;let value = snapshot.value as? \[String: AnyObject\], &gt; &gt;let imageURL = value\["imageURL"\] as? String, &gt; &gt;let description = value\["description"\] as? String else { &gt; &gt;return nil &gt; &gt;} &gt; &gt; &gt; &gt;self.key = snapshot.key &gt; &gt;self.imageURL = imageURL &gt; &gt;self.description = description &gt; &gt;} &gt; &gt; &gt; &gt;func toAnyObject() -&gt; Any { &gt; &gt;return \[ &gt; &gt;"imageURL": imageURL, &gt; &gt;"description": description &gt; &gt;\] &gt; &gt;} &gt; &gt;} &amp;#x200B; The database referenced by the struct looks like this: &amp;#x200B; &gt;"image" : { &gt; &gt;"fruit" : { &gt; &gt;"-LOLHakW-EtqevCeHfzl" : { &gt; &gt;"description" : "round orange", &gt; &gt;"imageURL" : "[https://firebasestorage.googleapis.com/1/image1](https://firebasestorage.googleapis.com/1/image1)" &gt; &gt;}, &gt; &gt;"-LOLmQWLXXyiCUwDBwID" : { &gt; &gt;"description" : "big banana", &gt; &gt;"imageURL" : "[https://firebasestorage.googleapis.com/1/image2](https://firebasestorage.googleapis.com/1/image2)" &gt; &gt;}, &gt; &gt;"-LOM1R4EH9nszjJp0Va5" : { &gt; &gt;"description" : "small apple", &gt; &gt;"imageURL" : "[https://firebasestorage.googleapis.com/1/image3](https://firebasestorage.googleapis.com/1/image3)" &gt; &gt;} &gt; &gt;} &gt; &gt;}, &amp;#x200B; And that is working fine, and is similar to what I was achieving already using the class. The next thing I want to do is collect the image data associated with each category and collate the data into an array, which can then be used top populate a CollectionView. &amp;#x200B; The way I'vetracked the items and category membership is by having a parent item (a bowl) with categories (type of fruit) as children, and having keys of items (individual fruit) within each category. The idea is to gather the keys of the items within the categories then iterate through them to reference the image data (as shown in the database example above). An example of the database where the categories and items are tracked is below: &amp;#x200B; &gt; "bowl" : { &gt; &gt;"apple" : { &gt; &gt;"-LOM1R4EH9nszjJp0Va5" : true, &gt; &gt;"-LOM1aRZT2XCE-6fvLBK" : true, &gt; &gt;"-LOM1hSTmRY6wGrWMvIo" : true, &gt; &gt;"-LOM1xnvKE6lc7fizomh" : true &gt; &gt;}, &gt; &gt;"banana" : { &gt; &gt;"-LOLmQWLXXyiCUwDBwID" : true &gt; &gt;}, &gt; &gt;"pear" : { &gt; &gt;"-LOLHakW-EtqevCeHfzl" : true, &gt; &gt;"-LOM2DBGGuX5VQLmBz46" : true &gt; &gt;}, &gt; &gt;"orange" : { &gt; &gt;"-LOM26\_pm6lbJ1D6hVPB" : true &gt; &gt;} &gt; &gt;}, &amp;#x200B; You've suggested doing something like follows to transform the snapshot data: &amp;#x200B; &gt;struct Picture { &gt; &gt; var imageURL: URL &gt; &gt; var image: UIImage? &gt; &gt;} &gt; &gt; &gt; &gt;struct PictureCategory { &gt; &gt; var name: String &gt; &gt; var pictures: \[Picture\] &gt; &gt;} But so far I haven't been able to build a struct / understand how to manipulate or iterate through the snapshot to transform the data to achieve something like you've suggested. Are you able to provide further help or suggestions? Thanks!
&gt; When dealing with JSON, the simplest thing to use is a single nested [String : Any] object. No, no, no, many times no. At first this may seem to be true but then you go to parse the structure. Every time you pull a value out of the `Dictionary` by using a key you need to properly test the returned value to unwrap the `Optional`, then you need to cast that value to a type, again testing it to be sure the cast worked. Or you can force it all and face running into a crash when your house of cards comes tumbling down. Instead, use `Codable` and proper structures. You get all that for virtually free all for pre-defining your structures which you should do anyways in a strongly-typed language. You end up with a nice structure that you can use freely, no messy casting involved. The use of `Any` in Swift is a bad code smell, yes it's sometimes necessary but it should be avoided if at all possible.
Yes, you should define a structure per JSON object. Since the JSON represents an API you should be able to count on the fields being there to map into your structures. If any fields might be optional then mark them properly as `Optional`. With `JSONDecoder` you'll have a simple conversion of your JSON string into structures without needing any casting and with proper error handling.
A snippet: ``` let occupiedXRange = firstOccupiedRow...lastOccupiedRow //print(occupiedXRange) return cells.map { row -&gt; [Int] in Array(row[occupiedXRange]) }```
I think this is premature optimization. Eagerly copying the elements would be better as the default behavior. If you want this sort of slice, then perhaps you could use an explicit ArraySlice type annotation, much like how you would use an explicit Character type annotation if you don't want a string.
Preface each line of your code blocks with four spaces to format them as code.
How many changes do you expect and how do you track changes? If you have a modified date the only thing you need to do is update what has a modified date after the date specified in the last manifest you pulled. If you don't have modified dates and/or large changes all of the time it's better to wipe and restart. But if you do know the modified dates, it's perhaps easier to have the server generate a static JSON covering all of the changes between version 11 and 12 so you don't need to do that work on every client. &amp;#x200B; `if version gap is larger than 1 or if is new client` `wipe` `load complete dataset` `else` `load differential dataset`
Well, of course it needs to be cast. It's an `ArraySlice`, not an `Array`. That's working as intended and quite different than the initial example you used: someArray + someSlice
Well just this article has 3 suggestions: \- Snapkit \- PureLayout \- LayoutKit and there's a bunch more out there. &amp;#x200B; My biggest issue is trusting a third party to support new versions of Swift quickly. Maybe once Swift 5 comes out I'll pick one since we won't have to worry about it anymore (since you should be able to use a Swift5 framework in a Swift 6+ project)
I use SnapKit personally but only because i was introduced to in on a project, but tbh becuase they are mostly based on NSLayoutConstraint, I dont think its gonna be updated any time soon which makes them safer.
Apparently the API is broken on their end. If there is no value for multimedia they encode it as an empty string: "multimedia": "" That's an unfortunate choice on their part, they should have either made the key optional or had it be an empty array. Those options are much easier to handle and are much preferred to changing the type of data like this. Just add: extension Story { enum CodingKeys: String, CodingKey { case title, abstract, url, multimedia } init(from decoder: Decoder) throws { let values = try decoder.container(keyedBy: Story.CodingKeys.self) self.title = try values.decode(String.self, forKey: .title) self.abstract = try values.decode(String.self, forKey: .abstract) self.url = try values.decode(String.self, forKey: .url) if let multimedia = try? values.decode([Multimedia].self, forKey: .multimedia) { self.multimedia = multimedia } else { self.multimedia = [] } } }
Good luck, learning to code is like learning a spoken language - slow going at first but the rewards are huge (both in creative outlets and financially.) 
Nice work
"If you want the correct answer on the internet, post an incorrect one". Thanks friendo! I follow your logic. The one thing that comes to mind though, is that I never trust the consistency and reliability of JSON pulled from the web. Maybe it's my experience with bad servers, but I feel the need to test every value anyway. Next time I'll try the Codable object and see how that works for me.
Sorry for the newb question but where would I put this extension? Wouldn't extensions usually be outside of the class, in which case `Story` and others won't be recognized?
I think you are right. It seems difficult to set it up though. Any advice?
So instead of using the extension, I just put the enum and initializer in the Story struct. When I run the app, I get the error `Error serializing JSON keyNotFound(CodingKeys(stringValue: "title", intValue: nil), Swift.DecodingError.Context(codingPath: [], debugDescription: "No value associated with key CodingKeys(stringValue: \"title\", intValue: nil) (\"title\").", underlyingError: nil))` I'm not sure why's it's finding nil for title now.
No, this has nothing to do with that.
&gt; When you start getting tricky hiding mechanisms then you start running into trouble. That ship has sailed. There's a dozen abstraction layers below you that already implement "tricky hiding mechanisms". You've got free lists and a VM and an MMU and register renaming and speculative execution and a whole lot of other performance features which mean that what you think you're doing in Swift isn't what is really happening in silicon. I don't see the benefit of adding an intentionally dumb layer at the top of the stack. It's like the Supreme Allied Commander trying to micromanage how they cook pancakes on base by giving a hint to one of his Generals. Whatever he says is going to get so reprocessed and rephrased by the time it gets down to the Private with the frying pan that it's going to be basically meaningless. Pretending that the layers below you are dumb has been one of the big failings of the army, too. You need units which are smart and can operate on their own. There's more trouble if you assume that you can effectively micromanage the entire stack from the top.
We've known how to make efficient persistent data structures since at least the 1980's. Arrays are not exactly a new problem to the field of computer science.
&gt; Do I need to get a drawing tablet? First, you need to learn how to program. You seem obsessed with buying exactly the right hardware/software, but it's all multiplied by 0 if you can't write a program. I wouldn't spend any money until you have a specific need (which you probably won't). CS101 is a common weed-out class because a lot of people [just can't grasp indirection or abstraction](https://www.joelonsoftware.com/2005/12/29/the-perils-of-javaschools-2/).
‚ÄúPremature optimization‚Äù? Not only is it as final as final can be it is also depended upon by everybody that uses the standard library. It is an absolute final optimization 
The point is that with copy-on-write it's inherently safe. It only copies when you need it. By putting `ArraySlice` functionality into `Array` you're doing the opposite of the idea behind copy-on-write, you're maintaining a two-way reference to the sliced `Array` and keeping no easy way of indicating that there's a reference to another `Array`. You can hide what the object is actually doing so long as you minimize side effects. It's not going to affect the programmer much if the `Array` directly or directly maintains its store, so long as when the object is used it works exactly as advertised. With `ArraySlice` you know that there's a two-way connection to another `Array` and modifying it will have side effects. It works exactly as advertised. All this other nonsense about commanders and generals is the true straw-man.
Why bother? Essentially, that's the situation we have now but it's flipped the other way. You annotate that you want to make a copy rather than get a slice that references: let foo = [1, 2, 3, 4] let bar = Array(foo[2...3]) So what we're really talking about is the semantics of the annotation, is it better to use the `Array` init method or need an explicit annotation to return an `ArraySlice`? And how do you imagine that annotation would be implemented? Right now, by default returning an `ArraySlice` it's simple to convert that into a copy. The other way becomes more complicated.
[https://app.quicktype.io/](https://app.quicktype.io/) 
Hi, please disregard this question if it's too basic or simple. I just started learning swift a few days ago. I'm reading "intro to app development with swift". And I've been pretty comfortable with all the material so far. But I've hit a little bit of a snag in the last day or so. Chapter twelve: Instances and methods. To make it short, I don't really understand what an instance is, as in I don't know what it's supposed to look like or how to use. Any google searching leads me to people talking about structures and classes, which the book says to not worry about to later. So I guess I'm asking if anyone can point me in the direction of any material that could clarify, or tell me what I'm looking for. I just want to know what an instance is, and some examples if possible. Thanks for you time! 
And yet, python's slice operations always cause pessimistic copies. [Java used to share underlying memory](https://stackoverflow.com/q/33893655/3141234), but that caused leaks of large strings when small substrings kept their buffers alive. It's not a solved problem. There are 3 approaches. Always copy, always share, or leave it up to the user. Python uses the first approach, Java used to use the second, now uses the first, and Swift uses the third, giving you the flexibility to decide for yourself.
I think the issue is this: let imageResponse = try JSONDecoder().decode(Story.self, from: data) for imageResults in imageResponse.multimedia { let images = imageResults.url self.images.append(images) } You're trying to use the same data a second time. Don't do that, what you want is: for imageResults in result.results.multimedia { let images = imageResults.url self.images.append(images) }
Would that loop be inside the initial `for` loop, or outside?
Oh, and this is where you should put the extension. It's best to use them because it makes your code more readable and signals intent for the extra code: struct Story: Decodable { let title: String let abstract: String let url: String let multimedia: [Multimedia] } extension Story { enum CodingKeys: String, CodingKey { case title, abstract, url, multimedia } init(from decoder: Decoder) throws { let values = try decoder.container(keyedBy: Story.CodingKeys.self) self.title = try values.decode(String.self, forKey: .title) self.abstract = try values.decode(String.self, forKey: .abstract) self.url = try values.decode(String.self, forKey: .url) if let multimedia = try? values.decode([Multimedia].self, forKey: .multimedia) { self.multimedia = multimedia } else { self.multimedia = [] } } }
&gt; please disregard this question if it's too basic or simple. First, let me assure you that no question, especially this specific question, is too basic or simple to deserve a comprehensive answer. The question of what 'instances' and 'methods' are is a conceptually foreign problem to those unacquainted with software. Types in a programming language can be thought of as the shape of a value. Consider the type of something to be the blueprint, and the 'instance' as the actual car that's created from those schematics. Let's look at a concrete example. ``` struct Car { let make: String let model: String var fuelLevel: Int } ``` This type, `Car`, describes what values will exist inside a value that has type `Car`. Let's create an *instance* of this type. ``` var volt = Car(make: "Chevy", model: "Volt", fuelLevel: 80) ``` This value *is* a `Car`. The type `Car` specifies that there will be three pieces of data once you make a `Car`, `make`, `model`, and `fuelLevel`. You can access these fields with a `.`, like so ``` print(volt.make) print(volt.model) print(volt.fuelLevel) ``` Now, let's add a *method* to this type. ``` struct Car { let make: String let model: String var fuelLevel: Int mutating func addFuel(_ fuel: Int) { self.fuelLevel += fuel } } ``` Now, notice this function is marked `mutating`. It's marked this way because of the line ``` self.fuelLevel += fuel ``` This line *mutates* the inner value `fuelLevel`, which, in turn, *mutates* the instance. There's also something new used inside that method, `self`. `self` is a special value that you can use inside a *method*. In fact, the only distinction between a function and a method is the presence of this `self` variable, which shows up when a function is declared inside a type. This `self` variable represents the current *instance* that's being called. ``` volt.addFuel(20) ``` By calling this, we call `addFuel`, passing in `volt` automatically as `self` inside that method. As a result, ``` print(volt.fuelLevel) // prints 100 ``` For more information, I'd recommend reading the Swift Programming Language book: https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html
Thank you so much! I really appreciate you taking the time to type this out for me.
The code above is exactly what I have done, except it is into a function where I pass the command and its parameters. All the output is a string that I can process, and I have using print() only to send some information to the user.
I love the idea and what you have so far! 
This is brilliant! 
&gt; Each week, we analyze the top UI patterns and the latest design trends from the üî• hottest mobile and web apps Yeah, I've seen the UI patterns of the "hottest mobile and web apps". They are primarily examples of what not to do when making an app. Instead, let's study the ones with actually good UI instead of the "hottest" ones.
Only good for apps where you will have control over such things. Most likely your own apps. Any company app that has designers would not allow these kind of changes to be made by a dev. I wish we could see a sample before signing up...
Long term, become a web developer, learn react, then learn react-native. Or become a mobile developer and learn native iOS or android and then learn react-native. But don't learn react-native as a first and end-all. You'd just be pigeon holing yourself in a tech stack very dependent on web and native devs, of which you'd be neither. If you really want to learn react-native first, that's fine, just plan to learn native mobile or web dev at some point in the future. Somewhat related, a native mobile dev or a web dev will get paid more than a react-native dev. It's not the future. I'd challenge you to list the top apps in the App Store built with react-native. But like WordPress development is to web development, there's a lot of react-native demand right now in the mobile space. A lot of crappy apps isn't the best endorsement that something is the future. People used to say WordPress would eat the web, it didn't. Or any of the half-dozen cross-platform mobile stacks would eat mobile, they haven't. Then it was mobile-first webpages would replace native mobile, they didn't. Now it's react-native... it won't. 
Flutter is where it‚Äôs at üò¨
Gotta love the UI glitches your site has on a mobile browser ...
Depends on your goal. If you‚Äôre looking to build your side gig or MVP for your startup, React Native may be the right choice to start. But long term wise as a career, the native development will have many more opportunities. Just search for job postings for React Native vs iOS dev at a techy city, say Austin. 
I wished so much that you are right, but alas... once you break past the Hello World stuff, there‚Äôs still too much beta-ish problems that need tribal knowledge and workarounds to make a reasonable Flutter app work. I like the push for brand-first design, but Dart and too much screwdriver work has me pausing on Flutter for another six months before I look at it again.
It‚Äôs nor the future of mobile apps. Concept of React Native is not really new and their implementation is full of horrible choices. Don‚Äôt be fooled by the hypes. 
Tbh this kind of post was happening like 3-4 years ago with Cordova/phonegap/Xamarin, of which only xamarin has barely survived.
What kind of problems you had? Sure Flutter has problems but does it have more problems than other platforms? I'm not sure. 
Specially those ugly looking Google ones
The idea sounds good. It's a good practice to analyse trending apps. But the realisation is impractical. It's a salad of unrelated ideas. A cargo-cult. As a developer I often receive tasks like: "do like the competitors app, but better", and I hate it. 
I had the same dilemma but then I came across this article on Airbnb and how the are moving away from react native to native iOS / Android. [medium article](https://medium.com/airbnb-engineering/react-native-at-airbnb-f95aa460be1c) It‚Äôs worth a read. My thought process was to deep dive into one language in to grasp all the concepts since I‚Äôm new to CS. Just keep in mind that you‚Äôll eventually NEED to learn a new tech stack on the fly. With a solid foundation, it‚Äôs easy to translate what you know.
Do you have any recommendations of which API to use?
Instead of a newsletter I'd very much prefer a RSS feed
I would see if there's a system already built for this. Reddit has one, but IDK if they release their source code or not. You might want to look into bots like what they use here on Reddit, the reason is that handling all the user email and reporting can be a big job.
Which apps are you referring to, just as an example?
I haven't kept a list, generally if I encounter an app with a horrible but "hot" UI I dump it and never look back. Often, I'd rather switch a web app to the desktop site rather than use the mobile version. For example, with Reddit I always browse using old.reddit.com and I do not use their mobile interface. There's too much emphasis on flashy web sites and apps that take too long to load, are missing features of the main site, and which use confusing elements that make no sense but "look good". The [KISS principle](https://en.wikipedia.org/wiki/KISS_principle) should be applied to UI development as well as the underlying system. Form follows function, give people as direct access to the features as possible without overcrowding. Often the native controls are the best controls and you shouldn't make up something new just to be different.
Swift is also usable on Linux and Windows. It's not 100% there yet for all use cases but it's getting there. And Apple devices are a huge target anyways. Not to mention there have been several studies and anecdotal evidence that show Apple users tend to spend more on apps so you're more likely to make money off of them than Android users. So, yes, Swift is worth learning.
Too bad for them I turn that off‚Ä¶
Assume that Swift is your first language - once you've learned your first programming language, the next one is gonna be way easier. For example, once you know Swift, if you want to get into Android development, learning Kotlin is super easy because the languages are quite similar. But you'll have an easy time with most other object oriented programming languages, and Swift gives you some knowledge about functional programming, too. If Swift isn't your first language, well, it depends if you plan to work in that field? The time investment to learn Swift shouldn't be too big. In any case, "only" Apple devices is a huge market. You pretty much have to learn Swift if you want to do develop native apps for that market. 
It does. It's a very elegant language and it continues to move towards the cloud. Not only Apple invests in it but also IBM with it's Kitura web framework. I haven't yet used it but I did give Vapor and Perfect a try and while they aren't still there yet, the language offers some advantages over Java (speed) and NodeJS (memory). NodeJS for example has a low memory footprint comparing it to Java, and Swift is 2x better than NodeJS when it comes to memory. If you look at computational speed NodeJS is no match to Java and Swift does an even better job than Java. Most cloud providers bill you on memory usage so you could probably run two Perfect/Vapor/Kitura instances instead of one NodeJS instance and have the performance of a Java web service. I think this is pretty neat.
No programming language is the correct tool for every platform. You have to decide over a usable language across multiple platforms (through tools like react-native), bite the bullet and try to learn the basics on multiple devices or just focus on one platform. &amp;#x200B; When you say it 'doesn't sound good'.. to who are you referring? Apple / Google and most big companies hire for specific platforms. So they wouldn't necessarily expect a Swift developer to know Java.
I am so lost in most Google apps (maps, drive, youtube, sheets). So many illogical twists and bops...
I'll have to look into sendgrid, I worked with the MS Outlook API for sending email and got that working, never got the Gmail one to work and never got an answer back from Google.
iOS devices are where the money is. I like the Android phones and I don't like Apple not having some low cost solution for developing nations, but I have to give Apple credit, they bring in the money. Look at the per device income you make with iOS. The iOS app store is less flooded than Android by about a million apps. While Android allows anything to be an app, Apple filters out junk. IMO, native is more important on iOS than Android, so Swift vs RN is also an issue, iOS consumers like and have grown to expect more and they are willing to pay for it. Android would be wise to follow Apple's lead here and clear out the junk apps and raise the standard.
Create an AVCaptureSession , and add a AVCaptureDeviceInput to it, that you made from the microphone's AVCaptureDevice. Add AVCaptureAudioDataOutput to the session and it will hand you buffers of audio samples. You can also add a AVCaptureAudioPreviewOutput so you can have a volume meter or graph U.I. Once the session is all set, start it.
You can‚Äôt. All `Date` instances have a GMT offset of 0. What you can do is set the time zone and locale for `Calendar` or `DateFormatter` and use those to retrieve values/strings that match the time zone you‚Äôre looking for. And, yes, setting those properly should account for any changes in daylight savings or similar. 
Thanks a lot! üëçüèª Gonna try that! 
Hey, one thing i surely can suggest you is get acquainted with .map .reduce .sorted etc operands, they really easy your everyday life, basically i've done what you wanted with this code : &amp;#x200B; `let largest = interestingNumbers.map { item in item.value.map { (item.key, $0) } }.reduce([], +).sorted { $0.1 &gt; $1.1 }.first` `if let l = largest {` `print(l.0, " --- ", l.1)` `}` &amp;#x200B; In short you map your dictionary to tuples (type, value), but map gives you \[\[(type, value\]\], then you reduce it to make \[(type, value)\] and sort them in descending order based on value, then all you have to do is take first object and there you have your type and value available for you. &amp;#x200B;
Bull, people install because you have a tool they want at the price they want. Not because you have a flashy but horrible app. Make it solid, usable, dependable. Make it do what they need and get out of their way. That‚Äôs when they‚Äôll use your app more, rate it well, recommend it to other people. The people who buy a flashy app, use it once, then forget it are very bad customers to have. 
[It's all right here](https://developer.apple.com/documentation/foundation/dates_and_times). In particular, you'll want to look at the DateFormatter and TimeZone sections.
Yeah Google should stop to impose that horrible material design to iOS users.
A Date is an absolute point in time. You could think of it as a data structure that‚Äôs backed by a TimeInterval since ‚Äúreference date‚Äù. Since this is a point time, there‚Äôs no such thing as TimeZone. That doesn‚Äôt come into play until you need to start presenting it with DateFormatters, sharing it with external systems, or dealing with Calendars. Those objects should help you transform your date object into your desired representation.
There are too many interviews Question. I have noted down each and every question with answers. But I have noted down on my site, so everyone can get help from it. https://www.iosiqa.com/p/companywise-interview-questions.html There are list of iOS Interview Questions. It has also link of answers. people can easily prepare for interview. Just visit it. 
Try AudioKit if you‚Äôre a beginner.
What I did here was create a `CChar` buffer, read into it, then initialize a `String` with the buffer. I used `getnstr` because it's much safer than `getstr`. import Darwin.ncurses initscr() addstr("What is your first name? ") refresh() let bufferCount = 100 var first = UnsafeMutablePointer&lt;CChar&gt;.allocate(capacity: bufferCount) getnstr(first, Int32(bufferCount)) addstr("What is your last name? ") refresh() var last = UnsafeMutablePointer&lt;CChar&gt;.allocate(capacity: bufferCount) getnstr(last, Int32(bufferCount)) addstr("Pleased to meet you, \(String(cString: first)) \(String(cString: last))!") refresh() getch() endwin() exit(0) 
Thank you for your feedback. Would love to get more insights from you about how to make it better and more useful for your work as a developer. You can always reach out to me on Twitter (@amirkhella), or reply to the recipes email, with insights, ideas, requests or questions. I personally read all replies.
I have a few rules of thumb: 1. If the function is completely pure, then it is allowed to be a function; otherwise it's a method on an object. 2. If the function is only going to be used in one file/class, I just define it as fileprivate in that file. 3. If the function is specifically related to a particular class (maybe your CSV cleanup function takes a CSV struct and spits out a cleaned up version), it can be a static method on the class it's related to. 4. If none of the above are appropriate, create an enum (or a final class with private constructor and no data fields) with no cases and attach the function to it as a static method. This way, you are simulating namespaces instead of polluting the global namespace. For your examples: * Alert creator - This will likely not be a pure function (if it actually displays the alert). Sounds like this belongs as an extension to ViewController, since those are the only things that are going to be creating alerts. So, I'd create a file called \`ViewController+alert.swift\`, that has an \`extension ViewController\` that contains your new method: \`func alert(title: String, message: String)\`. * Sound Management - I'm not sure what this would be doing, but it sounds like it's going to modify some kind of global state, so it's probably not a good candidate for a function. You might even be best off making a \`SoundManager\` struct/class that you can talk to for changing/querying sound stuff. * Clean up CSV - If you're literally intending to just pass a string into this thing and get a new string out, then a function (on a "namespace" enum) would be fine, but if you plan on doing more to manipulate CSVs, I'd make a CSV object with a \`cleanUp\` method. 
"If you are not embarrassed by the first version of your product, you've launched too late". We preferred to launch sooner and fix things as we go, rather than launching later and missing an opportunity. If you send me a list of the glitches you found, we'll get them fixed over the weekend.
Thank you!
To go a little shorter and more abstract than the other answer: an "instance" is just a term that means "an actual example of XZY". Forget about Swift for a second; if I have the concept of "Number", then we might say that 3 is an "instance" of "Number".
Thank you!
&gt;I get this thrown constantly at me and honestly start to think people might have a point here. "I'm a mobile developer - but only for Apple devices" does not sound pretty good. Sure, you can also code for Desktop, TV and Watch with it but also just for the Apple devices. First off don‚Äôt be so easy to believe idiots! Second if you are on a quest to learn a programming language instead of learning computer science you are on the wrong track. If you understand the science, the language you implement your solutions in won‚Äôt be a big deal. More importantly a strong CS background allows you to choose the right tools for the job. Often that might mean working with more than one language. To look at it another way your lack of a strong CS degree resulted in this question. Third the alternative on Apples systems was Objective C! Swift, which is a very young language, already has wider adoption than Objective C ever did. Fourth Swift is being ported to other platforms including Linux and Windows. More importantly users on those platforms are getting buy in because Swift offer significant advantages over other offerings. Given that a switch to modern languages doesn‚Äôt happen overnight. It takes time for a community to acknowledge advantages and start a migration. Fifth Swift is hardly a mature programming language! In fact it is under rapid development. It is fair to say that the language and its libraries don‚Äôt have all the features even Apple wants or needs. This makes Swift development bleeding edge even if that edge isn‚Äôt as sharp as it was 2 years ago. So you really can‚Äôt expect massive adoption on other platforms at this time. If you watch other successful and widely used languages develop over time, the successful ones like Python take awhile to leave the niche they developed in to wider acceptance. Some languages like Ruby never leave their little niche. Will Swift blow up to be the Python of the next two decades? I can‚Äôt predict; all I can say is the right features exist for that too happen. It is all about having the mind set in the community say yeah this is pretty good. To put it another way, the advice you are getting is crap. Because no matter what platform you are on you have two issues. One is learning the common language of that platform - this is the easy part. The second issue is learning the API to the GUI and system which is a far bigger chore. By the way I hope you know the difference between the two. 
Thank you very much. I am not familiar with char, will look into it.
How do you decide which ones have the best UI without already starting from some principles that you‚Äôre using to judge? Isn‚Äôt that just saying ‚ÄúX are the important things, Y is the best because it implements X, so therefore X are the important things‚Äù
[`CChar`](https://developer.apple.com/documentation/swift/cchar) is a `typealias` to the platform's C character type. It's better to use than `Int8` because it signals intent and it changes with the environment.
I used AVFoundation and AVAudioEngine recently. I‚Äôd be happy to help if needed.
There are very few different types of languages. Some languages make certain tasks easier than others. If running into a new language stops your programming cold, you need to brush up on your languages in general, not just the new one.
Why not write one yourself?
&gt; a GMT offset of 0. UTC, these days. 
NSLocale is part of it.
That‚Äôs not *entirely* accurate. Date instances don‚Äôt have any GMT offset. They represent a point in time completely independently of time zones. That said, your advice about Calendar and DateFormatter are spot on.
Yeah, I should have said that they use UTC. There's a subtle difference between GMT and UTC - the former is a time zone, the latter is a time standard. However, a time that has a GMT offset of 0 is the same time as one in UTC.
That‚Äôs not what I meant. NSDate/Date has absolutely no concept of a time zone or time standard ; UTC, GMT, or otherwise. Internally it is literally just a number of seconds since a specific point in time.
Very true. That's an accurate statement. However, when a `Date` is created it is set to the relevant UTC time interval since the epoch. So, effectively, `Date` is in UTC time.
I'm in my early 20's, get to work 100% remotely from home, and have a 100k+ salary that would easily equate into a 200k+ salary if I lived in silicon valley just because I can code for "Apple devices". Don't let those people get you down, they obviously don't know what they are talking about. If you want to be an Apple only developer, there are plenty and will always be plenty of opportunities for you out there!
Apple is selling low cost options in the form of the older phones they still sell as new with lower prices. It barely gets a slide during the keynotes, but they have 7s and SEs that are selling like hot cakes in developing nations and all those phones just got much faster with iOS 12. 
It‚Äôs not just several, it‚Äôs a routine trend line that gets run every quarter or so. Android has more phones on the market, but the majority of those phones never even install 5 apps. Think of Android as a replacement for all of the old Java and Symbian phones that could only ever play Bejeweled. Those are the Androids that are actually selling when the ASP is hovering around $200. iPhones since 2013 are now all running iOS 12 and it‚Äôs a huge boost to those devices across the board. 
For some reason, I thought the SE was being discontinued, but I just checked, they still sell it. I bought the 6S and love it. It was about $200 last year and is still holding it's value very well.
Depends on your goal, I have found Apple platform a good market for indie developer. I have one app that is one both Android and iOS, Android has 2x more users but they both have the same revenue. If you want to reach more user, Android is a good platform to go. If you want user who are willing to pay for quality app, go for App Store.
Some tips for Playground to freeze lesser : 1. Long click the 'Play' button and set it to manually run (it only runs when you click it, as opposed to auto run after each keystroke) 2. Create a macOS playground instead of the iOS one so it won't need to launch an iOS simulator in the background.
Try restarting your Mac or updating/restarting Xcode. 
That looks brilliant! Especially easily being able to cancel requests. Up until now I‚Äôve tried Kingfisher, but most of the time I ended up building a very simple caching system myself. I‚Äôll follow development on this!
1. `reduce([], +)` is better written as `joined()` 2. `map` \+ `joined` is just `flatMap` 3. `sorted { $0.1 &gt; $1.1 }.first` is just `max(by: { $0.1 &lt; $1.1 })` 4. you might as well throw in a `lazy` for good measure &amp;#8203; let largest = interestingNumbers.lazy .flatMap { key, value in value.map { (key, $0) } } .max(by: { $0.1 &lt; $1.1 }) &amp;#x200B;
How much RAM does your Mac have?
I have MacBook Pro 2017 13 inch 8GB Ram Core i5
13.0 inches ‚âà 33.0 centimetres ^(1 inch = 2.54cm) ^(I'm a bot. Downvote to remove.) _____ ^| ^[Info](https://www.reddit.com/user/Bot_Metric/comments/8lt7af/i_am_a_bot/) ^| ^[PM](https://www.reddit.com/message/compose?to=Ttime5) ^| ^[Stats](http://botmetric.pythonanywhere.com) ^| ^[Opt-out](https://www.reddit.com/message/compose?to=Bot_Metric&amp;subject=Don't%20reply%20to%20me&amp;message=If%20you%20send%20this%20message,%20I%20will%20no%20longer%20reply%20to%20your%20comments%20and%20posts.) ^| ^[v.4.4.6](https://www.reddit.com/user/Bot_Metric/comments/8o9vgz/updates/) ^|
Clear derived data?
keeps* crashing it keeps That's the way it works in English.
Clearing the derived data did not help
FYI, it's RAM, not Ram. It's an acronym. I've seen crashes on the 4GB models since when you have too many programs open, the Mac forces memory into the area where it compresses memory. This will cause beachballing for a long time. In your case, the crash is invalid selector sent to instance, which is caused by a bug in Xcode.
Instead of `do { try foo() } catch { fatalError() } ` you can just do `try! foo()`. It's the same thing, either way you're going to crash `foo()` throws. 
This is bad advice because there‚Äôs a solid chance you miss one of these places you‚Äôve done this and then you end up with unsafe code in production. Use the catch block, but at least print the error. Avoid `!` as much as possible except IBOutlets. 
I have no problem using fatalError() but that‚Äôs not the point I was making... person I replied to suggested using `try!` which is what I was discouraging. Also using the explicit unwrap operator should be avoided, which again fatalError() is not the same. 
Use a lower and stable version to add the file in and reopen in the new project 
Try cleaning the project and rerunning. I‚Äôve found whenever I work in multiple modules or deal with taking mock data from files I will sometimes see this exact issue that has no valid reason for existence. It‚Äôs no guarantee, but cleaning is always a great way to get rid of those ‚Äúwtf‚Äù errors
But did you regenerate the Xcode project?
I think all this advice is really good for people to see. I did not know precondition failure existed so I‚Äôve learnt that today.
That was exactly my thought. Though I‚Äôd probably use a guard-let over an if-let here. guard let path = Bundle.main.path(forResource: ‚ÄúSine‚Äù, ofType: ‚Äúwav‚Äù) else { fatalError(‚ÄúFailed to create path for Sine.wav‚Äù) }
&gt;I'd have to iterate through both the local and fetched manifests and search for differences, and I'm not sure how efficient that'd be compared to a straight purge. First of all, I couldn't really understand what exactly you're updating - are you updating the schema of the entities such as the attributes and how they're defined? Or are you not updating **entities**, but updating the **records** created? If the former, then have you heard of Core Data Migration? It's created for exactly this purpose, you don't have to explicitly analyze each difference between how the old and new entity is defined - that's what it does. If the latter, then unless there's a good reason I'd probably suggest the purge approach. Manifests are only good for small and manageable updates. If you're going to have many 1000s of records, what is the advantage over analyzing those records if the incoming data is the single source of truth anyway? 
Seeing how you're not getting a Swift backtrace of your problem, there's a possibility that you're feeding invalid data to the audio engine which might cause a crash in one of the low level APIs behind AVFoundation. Maybe check if the wave file contains valid data, or try different input files?
You put to much faith in blog posts
Set a header properly on the USURLSession request Authorization: Basic [base64 encoded username:password] var request = URLRequest(url: url) request.httpMethod = "POST" request.setValue("Basic \(base64LoginString)", forHTTPHeaderField: "Authorization")
So as TULCane said you have to use the header: `Authorization: Basic &lt;base64 encoded username:password&gt;` The code would look something like: ``` let usernamePasswordData = Data(base64Encoded: "\(username):\(password)") let usernamePassword = data != nil ? String(data: data!, encoding: .utf8) : "" let request = URLRequest(url: url) request.httpMethod = "POST" request.setValue("Basic \(usernamePassword)", forHTTPHeaderField: "Authorization") ``` This has not been tested, since I'm not at my Mac right now.
Technically it should be ‚ÄúBearer‚Äù instead of ‚ÄúBasic‚Äù. See section 2.1 https://tools.ietf.org/html/rfc6750 Though to be fair some APIs use ‚ÄúBasic‚Äù.
I have created something like this for a client, my recommendation is to add a reported section to your back end control panel and content that has been reported frequently shows there for you to review and delete/approve
My error is happening during `wholeDecimalNode.scheduleFile(wholeDecimalPulseTone, at: nil, completionHandler: nil)`, however, I did try your suggestion. The code is still passing the path point but failing during `scheduleFile`. I have removed and re-added the files to my bundle and also confirmed that they are valid and playable (which they are). In addition to the aforementioned, I have tried cleaning my project as another user suggested. I can't discern a difference in the code versus the working backup project. This is very confusing.
No. MacBook Air can't detach display and Smart Keyboard for iPad is far better regarding dust proof. Typing is the same.
Interesting. It works for me on web. It also works in the app.
Also, the phones they sell in rich countries with the iPhone update program are mostly new after 1 year, the financial company that works with Apple is not throwing them away to a shredder, they must be re-selling them in mid-wage countries. Something has to explain that, in a country like mine, about 20% of sales are iOS, but 50% of internet usage is iOS.
Thanks a lot for a reply! üëçüèª
Thanks a lot for your reply! Well, since it's more of a learning project that I do just for fun, I want to try to do all the heavy lifting myself, just as you mentioned. But in case I fail to do that, I'll look into the AudioKit - thanks a lot for that! üòé
Thanks a lot for a response! Well from what I understood, both AVFoundation and AVAudioEngine are kinda high-level - or is there a way to get raw input data from the mic with those? Like I already mentioned in the other response, I'm trying to do it "the hard way" (just for s##ts and giggles &amp; also to learn), that's why I want the raw input stream from the mic. But if you have any tips to spare, I'll be more than glad for those!
Hi Deadcoder. Sorry I didn‚Äôt reply sooner. Do you know where I could find the proper nasa API? I‚Äôm struggling to find one that returns high res satellite photos. 
It's already part of Foundation: [Calendar](https://developer.apple.com/documentation/foundation/calendar)
This is probably too advanced for someone beginning to learn swift and the general concepts of programming. Definitely worth learning this sort of thing at some point though, once OP has nailed down the fundamentals. 
You can answer both of your questions by looking at your for loop. What happening is the for loop is iterating over the three elements in your dictionary, and giving you two values on each iteration: kind and number. Kind is your key, and number is your value eg. kind = ‚ÄúSquare‚Äù and number = [4, 9, etc.] You should be able to adjust the code in the for loop to get the answers you‚Äôre looking for. Let me know if you‚Äôre still having trouble. 
let aString = "Some search text" let replaced = String(aString.map { $0 == " " ? "+" : $0 }) ‚Äú ‚Äú Is what you are searching for. ‚Äú+‚Äù is what you are replacing it with. 
Have you imported Foundation? I'm pretty sure this is a method only added via importing Foundation, as it's a method on NSString, not Swift's native String type.
I'm running in swift 4.2 on xcode 10 on High Sierra... it's odd that it worked for you and doesn't work for me...
At the top of the file, just add ``` import Foundation ```
Oh, that's much easier than I expected. I thought it was going to be a whole click and find thing.. thank you!
Thank you for your help! 
The Apple-provided frameworks are vast. They have a solution for many problems, although some aren't too easy to use so you might want to turn to third-party frameworks and libraries. With experience you'll find their naming is pretty consistent and you can pretty much guess at the name and find out if they cover that functionality. If you have any other questions on the frameworks and what you're trying to accomplish then feel free to ask. I'll try to help if I can.
This is why I nearly always put the import statements even into my example code, they can be assumed but if the person you're talking to doesn't know about them then the code won't work. I also put the bare code into a playground, if possible, just to make sure it's isolated and works in isolation.
Agree. But I do enjoy ternary operators. When I was first learning, it wrote everything out like above, but now a days my brain condenses code without even thinking about it. 
I haven't personally done it, but [CIDetector](https://developer.apple.com/documentation/coreimage/cidetector) looks like it might work. 
Yes that does look promising. I‚Äôll give it a try. Only issue might be that the rectangle has rounded edges.
It‚Äôs impossible to keep everything in your head. For me l usually write down what I‚Äôm going to need all on a google doc or something, breaking it up into the most essential and then less essential and so on. For me not spending more time than necessary on this step and getting started right away helps me to make progress and get the ‚Äúflow‚Äù going.
Use sketch or a similar app. Create all the screens you think you will need and inside those write down what functionality and views you will need inside each one. Start with an mvp(minimum viable product) and build off that. 
Weeks of coding can save you hours of planning ;)
The problem with getting started right away is that I can miss crucial architectural decision which will lead to rewriting some parts of code in the future.
No, your app lives in a sandbox, so you could do this for your app, but not for the phone as a whole (to the best of my knowledge) 
That‚Äôs also a helpful part of the learning process. Eventually you will develop habits/design principles that you apply to everything. So starting from scratch gets easier and easier.
Which method should I put that in? 
For planning, roadmaps, and development, plus miscellaneous task tracking, I use Asana. For UI and UX, I‚Äôll sketch ideas in my iPad with the Linea app and do concrete ideas with Sketch for Mac. 
How are you accessing the image for the imageview?
$500 will get you 2-8 hours of a professional dev's time. A social media app requires 500+ hours.
One 500+ hours is a load of crap lmao built a social media app using firebase in under 3 hours. But as I‚Äôm still learning what I want done I do not know how to do yet. I‚Äôm not asking for a professional developer I‚Äôm looking for people who do it on the side for fun and for cash 
Knowing how to import *something* is supremely basic stuff.
Call it on your table view, probably somewhere in viewdidload like ‚ÄútableView?.allowsMultipleSelection‚Äù
Why is Google pushing this (TensorFlow) so much?
You need to satisfy all constraints before the view will layout properly. Try adding a width + height constraint to your top and left constraints, or constraining all 4 sides of the view and then try and run your app in the simulator. 
Also check the life cycle of apps, there are known cheats but Apple has closed them over time. Facebook did a notorious hack to maintain outside of the normal life cycle and Apple was not happy. https://techcrunch.com/2015/10/22/facebook-says-it-fixed-a-bug-that-caused-silent-audio-to-vampire-your-iphone-battery/ Facebook claimed it was an error.
Jasonmodisett has given you good advice, you've only given it two constraints. It doesnt know how large to be, or where else to display on the screen.
Thank you very much. That was a few hours of fruitless searching that you fixed in seconds. I very much appreciate your help.
&gt; To achieve this, we built support for AD right into the Swift compiler. Seems to imply that compiler support was preceding this effort.
I never plan any of my personal projects, I just go on Sketch, make the UIs and then I to Xcode and start working. I know this sounds really stupid and wrong, but I do personal projects just for fun and to learn more about the language/framework. 
That didn't work unfortunately :/ 
Use trello for all of that stuff. Saves a lot of time.
As another commenter said, you'll need to store which path is selected. In your cell dequeue method you'll need to updated the is selected status and check mark visibility to match the row. In the did select, you'll need to reload all the visible cells, which you can get from the tableview (I forget the exact function, but you should be able to find it). 
This is my algorithm of development my home projects. &amp;#x200B; \- I start from asking quiestion "What problem do I want to resolve?" \- When I get correct and full answer I sketch UI. \- When I get sketch of UI I think about it's simplifity. \- When I get simple and usable UI with good UX, as I think, I plan MVP. Then I have plan and have rush of 5 hours coding. Without any architecture and clean code. Only code and the simpliest and effective components and libraries. All is for the fastest result. \- If after 5 hours of rush I still want to work on a project and I see it sexuality, I plan second hard work and have rush of next 5 hours coding with better architecture and more clean code. &amp;#x200B; After this I get MVP and start marketing campaign and first sellings. After getting profit I think about extension of application and refactorings etc. &amp;#x200B; For all of this I spend only 3-4 days. It's small time to waste if project will be unnecessary and sufficient time to be effective on demanded project.
This only works for the selected state, not for the accessory. 
Can you suggest the open source project to medium level developer 
I didn't see that bit, my quote was apparently repeated much further down in the article as well, where your quote shows up as well. This does appear to be an effort that may be completely putting the cart ahead of the horse, given we don't even have ABI stab yet in the language. The compiler also still has bugs like `Set(Array(String))` causing a crash due to memory corruption. Adding special handing for niche technologies seems like the last thing the language needs right now. 
It‚Äôs google working on this, not the Apple core team. They‚Äôre contributing to a feature that also benefits the google brain team. 
I don‚Äôt think this is possible with a framework. And the compiler doesn‚Äôt have any plugin system. 
For my own projects I always AdHoc-code. I decide what should be done next and do it, no special planning. Or I get new idea and start implementing it, etc.
I start with prototyping, quick and dirty. Once I know what I want to make and how to make it I plan for a MVP. I make sure that everything is as decoupled as possible. Then I define the API for each component. Most of my personal projects are open source (and not popular) so I often use GitHub's tools for projects, issues and milestones. 
I still maintain that this is not something that should be a core language feature but rather an additional framework you would include. Unless there's a much more general-purpose usage that I'm missing I can't see it as being central to programming in general.
Why not? You can certainly build a system of equations without any specific compiler support. You can then compute the differentials of those equations, again without anything specific required in the language. For example, protocol Equation {} protocol Differentiable { associatedtype Differentiated: Equation func differentiate() -&gt; Differentiated } struct Linear: Equation { let firstCoefficient: Float let constant: Float } struct Quadratic: Equation { let secondCoefficient: Float let firstCoefficient: Float let constant: Float } extension Quadratic: Differentiable { func differentiate() -&gt; Linear { return Linear(firstCoefficient: 2 * secondCoefficient, constant: firstCoefficient) } } let foo = Quadratic(secondCoefficient: 5, firstCoefficient: 2, constant: 1) let bar = foo.differentiate() print(bar) // Linear(firstCoefficient: 10.0, constant: 2.0) Now, this is a naive implementation and just serves as a simple example. We could easily create a `Polynomial` struct and have a more generalized algorithm for calculating the derivative. The point is that there really isn't a pressing need for language-level support of this kind of mathematics.
Thank you David! :D
But OP's app will be pulled or not be allowed to be published on the App Store, as OP says that the app will only control the brightness throughout the OS.
&gt;The point is that there really isn't a pressing need for language-level support of this kind of mathematics. Google needs it for their Swift for Tensorflow project, apparently. Just because you've never needed it in an iOS app doesn't mean that it couldn't be a useful addition to the language. But feel free to voice your concerns [in the Swift Evolution discussion](https://forums.swift.org/t/the-automatic-differentiation-manifesto/17015/7), I'm sure they'll be able to tell you why this needs language support.
Yolo. The way I see it, if the app takes off, I can hire some lads to refactor whatever architectural hell I come up with ;) &amp;#x200B; /s
&gt; Just because you've never needed it in an iOS app doesn't mean that it couldn't be a useful addition to the language. Very true and I'll see about adding a voice to the discussion. However, I don't see a compelling argument made in this "manifesto" or in any other research I've done that says this functionality needs language-level support. No less the fact that even if it does it still doesn't pass the bar for widespread applications in general computing. If this sort of computing really does need language-level support then it's probably best to build a separate language and provide a bridge to call it from other languages.
 AWS Pinpoint is good, but I actually use[ Appsee](https://www.appsee.com/) and I find it‚Äôs a better bang for your buck. The user recordings (also crash recordings) and touch heatmaps have helped me track gesture errors, bugs, and conversion funnel drop offs. 
I use this tool [https://app.quicktype.io/](https://app.quicktype.io/) to convert the json to struct, I have use the `Codable` protocol, this article [https://benscheirman.com/2017/06/swift-json/](https://benscheirman.com/2017/06/swift-json/) explain the topic very well `struct DistanceMatrix: Codable {` `let destinationAddresses: [String]?` `let originAddresses: [String]?` `let rows: [Row]?` `let status: String?` `}` &amp;#x200B; `struct Row: Codable {` `let elements: [Element]?` `}` &amp;#x200B; `struct Element: Codable {` `let distance: Distance?` `let duration: Distance?` `let status: String?` `}` &amp;#x200B; `struct Distance: Codable {` `let text: String?` `let value: Int?` `}` &amp;#x200B; **// JSONDecoder** `let decoder = JSONDecoder()` `decoder.keyDecodingStrategy = .convertFromSnakeCase // convert this "destination_addresses" to "destinationAddresses"` `do {` `let distance = try decoder.decode(type: DistanceMatrix.self, from: data)` `}catch let error {` `print(error)` `}` &amp;#x200B;
Not to mention they routinely ignore common design practices like swipe to go back (`UIScreenEdgePanGestureRecognizer`), or pull down to dismiss photos.
Check out [Object Mapper](https://github.com/tristanhimmelman/ObjectMapper) You could assign this JSON to an object like `googleResponse` and eventually get to the 2288 through: `googleResponse.rows?[0].elements?[0].distance?.value`
What really bothers me is that we have the Plus models for 4 years now, still no landscape youtube on the iPhone... but the same goes for many other brands tbh... like reddit. But Apple also forced some of their apps back to portrait, like the App Store...
Did you accidentally press cmd+t?
This really isn't a tutorial, more of a cheat sheet. You'd be better off just reading the [docs](https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html). It has all that you've listed and more information.
&gt; So I need to plan whole architecture to avoid changing decisions in the middle of my work That's not possible. Inflexibility is death in programming, especially in an environment where things change every year on you, if not faster (considering changes in App Store rules). Step one, write your goals down. Most iOS screens are evolutions from basic types shown in the [HIG](https://developer.apple.com/design/human-interface-guidelines/). Plot a simpler version of your end idea on a piece of paper. Work off the [basic app structures](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/navigation/) shown in there and implement a simplistic version of your end idea there. Try it out by poking the paper. Does it accomplish some goals? If not, why not. Now, find *one attribute* of the system to make more elaborate. Now do that. Does that accomplish your goals better? When you're done poking paper and imagining, take what your final drawing so far is, and make it in code using fake data, simplistic UI elements, and very little animation. Does that work now? Alright, now write down all the improvements you could do to make it better. Now write down how much you think each of those would make it better (units don't matter). Now write down how long each could take to design, and do. Write down how much time you'll spend max on that idea before jettisoning it. Do 1 item off that list that's going to be worth a lot of value to the project, but isn't going to cost that much. Do that repeatedly. After some architectural issue is a drag repeatedly while coding, refactor out something into an abstraction that helps you. When you fail to meet a deadline, stash that code in a branch, revert, then do a different feature. Keep doing this repeatedly until you have a good enough project to test with people. Show people, ask them to do things it is supposed to do. If they can do them, great. If they cannot, work on help text, design changes, and other bug fixes until people can. 
You can implement didSelectRowAt in https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614877-tableview to set the cell at that path to accessoryType = .checked and each other visible cell to accessoryType = .none. e.g. tableView.cellForRow(at:indexPath).accessoryType = .checked for cellPath in tableView.indexPathsForVisibleRows{ guard cellPath != indexPath{ continue } tableView.cellForRow(at: cellPath).accessoryType = none } Or you can implement https://developer.apple.com/documentation/uikit/uitableviewcell/1623255-setselected accessoryType = selected ? .checkmark:none 
At one time simple mathematical functions required you to role your own. Eventually they ended up in libraries in many languages. The question though is a library a good place to put facilities now considered normal and in many cases supported in hardware? Various levels of support for trig functions come to mind here. This can be likened to the electronic calculators replacement of slide rules. This will date me a lot but I can remember as a child walking up to the kitchen table because my father was excited about an affordable calculator that Did square roots. By the timelier high school 8 years later I owned an HP with just about every scientific function I could use. Effectively the science behind what was possible moved forward as did expectations of what a calculator should be. The analog here is the question of what should be included in the box when it comes to programming languages. Frankly I‚Äôd have to read the linked article several times before I could answer that. 
How wide spread a feature will be used in a language isn‚Äôt that easy to judge. Back in the day people didn‚Äôt exactly accept object oriented programming. There are in fact many features that get built into languages that developers either have a hard time accepting or leave to others (generic programming is an example). It is really hard to judge if a new language feature will set the world on fire. As for Swift it is the new language specifically designed to push modern features down to frontline programmers. There is no better place than Swift to introduce new features like this. You would never build this into C or COBOL. 
On the other hand maybe the future is browser apps using compiled languages -&gt; web assembly. Things really could swing either way. Don‚Äôt underestimate the possibility of JavaScript being so popular due to lack of reasonable alternatives.
It seems based on the gist that language-level support is to help with ergonomics issues. They kind of mention this in the "Why make AD first-class?" section. This is admittedly a bit over my head but as teddim pointed out I'm sure someone could better explain the motivating factors on the swift evolution thread.
&gt; At one time simple mathematical functions required you to role your own. Eventually they ended up in libraries in many languages. The question though is a library a good place to put facilities now considered normal and in many cases supported in hardware? Various levels of support for trig functions come to mind here. There's a huge difference between having libraries (frameworks) and adding it to the core language. I agree with the former, I disagree with the latter. Except for the base arithmetic operators pretty much all mathematic facilities are defined in libraries and not in the language themselves. Even when the hardware has built-in mathematical functions they are generally accessed through a library, not the language. I've looked over their proposal and I really don't see any need to build this into the language. Yes, there may be a bit or two that could be defined in a neater fashion through having some parts added to the language but it could work just fine without that. If we absolutely must build some parts into the language then I'd rather see it done in a more generic manner so that other libraries and frameworks can make use of the features directly. However, I don't see a compelling case for this.
&gt; Numerical computing has a very different set of requirements than application development and systems development, and we believe that Swift needs to better address those requirements and improve the usability of numerical software. Since they know it has a 'very different set of requirements', why are they trying to shoehorn it into the same language? This makes no sense to me.
Would you advise against just using a View in your existing VC and hiding or showing it as needed (as long as it is relatively simple)??
Not at all, if you male it simple enough then there you go, but, if you‚Äôre going to use it in more than one ViewController make it modular. 
Hi, I hope this is right place to put this. I'm currently developing an Apple Watch app which uses Background Tasks. To analyze my current issues, I'd like to receive a protocoll at the end of the day where I can see that at XX:XX Task 123 was executed. To achieve this, I want to use print / log sttatemens and read them from my computer in the evening. However I could not find a way to read the print statements on my device after disconnecting it from my PC. Is there any way to do this?
I would recommend Stanford Lectures.
I think there's a lot of unwanted/useless pre-mature optimization in those lectures that makes it harder for newbies to grasp.
I would recommend to start from a little app like maybe a Weather app that displays the weather of your current city, then try to build on it once you start understanding the stuff. You can find a lot of tutorials over the web. &amp;#x200B; Start by building little stuff, step by step, that will also keep you motivated. 
For a newbie that's a big leap, you have to know JSON serialization and web connections. Start smaller.
Do you have any experience programming at all? I'd start with simple terminal programs on macOS or just playgrounds. Avoid any user interface (UI) stuff in the beginning, do some stuff that involves numbers and then move on to manipulating text. Stuff like calculating Fibonacci numbers, reversing text, sorting things, figuring out the largest item in an array. Very basic but learning. Then move on to user interaction, either in the terminal or through a graphical user interface (GUI). Make a simple calculator or question-and-answer app. Maybe a guessing game. After you've done a few of those start thinking of more complicated programs to make. Keep everything as modular as possible, the less the parts interact the easier it is to program them. Think of every part as a Lego brick, self-contained and it has a way to link to other parts. Functions do one simple thing, they take in a few parameters and output their result. They never modify anything outside of themselves. Methods in a struct or class can modify the properties of that struct or class but still try to keep them very simple and have few side effects. The same goes for structs and classes, keep them simple and doing one very specific thing with little involvement of anything outside their own properties. Use your file structure, generally keep one file per struct or class unless you have a group that's very closely tied together and can't exist on their own. Make groups and organize your files by them. For example, make a group called Views and put all your views into it, make a group called Model and put all of your data types into that. Look up patterns such as Model-View-Controller (MVC), Model-View-View Model (MVVM), Model-View-Presenter (MVP) and organize around those patterns. Doing this will be more advanced so don't hold too strictly to it in the beginning but keep it in mind for later.
Exactly, create a special-purpose language and libraries that supports just what is needed and provide an API for other languages to call into it. Best of both worlds, you get what you need for this type of work and you don't clutter up a general-purpose language and tools.
hackingwithswift.com
As a function I call it this way: executeProcess(process: "/usr/sbin/system\_profiler", arguments: \["SPApplicationsDataType"\], output: &amp;output) where output is declared as var output: String Function will be: func executeProcess(process: String, arguments: \[String\], output: inout String ) { ... code above }
Thanks for the information! I have no background in programming, so I do plan on keeping it as simple as possible, but learn as much as I can along with the process. 
Any well-rated course on udemy!
That looks really slick. 
`convenience` initializers are a concept that is relevant only for Swift classes ‚Äî they are the counterpart to `designated` initializers for those types. The [language guide on initialization](https://docs.swift.org/swift-book/LanguageGuide/Initialization.html) gives a fairly comprehensive description of that they both mean (search for ‚ÄúDesignated Initializers and Convenience Initializers‚Äù ‚Äî hard to link directly since I‚Äôm on mobile), but error there is correct: since `structs` have no inheritance, the distinction between `designated` and `convenience` is meaningless and doesn‚Äôt apply. You can just take the keyword off.
Thank you
wat
Your question is unclear and your code is unreadable thanks to the lack of formatting. Also you posted this 10 minutes ago. Please don't spam the sub.
Yeah, so definitely [download Xcode](https://itunes.apple.com/us/app/xcode/id497799835), which comes with Swift Playgrounds. Next, I would check out some of Apple's own books on Swift and app development: * [The Swift Programming Language](https://itunes.apple.com/us/book/the-swift-programming-language-swift-4-2/id881256329?mt=11) * [Intro to App Development with Swift](https://itunes.apple.com/us/book/intro-to-app-development-with-swift/id1118575552?mt=11) * [App Development with Swift](https://itunes.apple.com/us/book/app-development-with-swift/id1219117996?mt=11) You can download and open those in Books (formerly iBooks), and instead of reading passively, you should open up a Playground and follow along with the examples as you read! That interactive style of learning should really help cement the concepts in your mind, whereas with reading alone, you'd probably forget everything within a week, if not sooner. 
I‚Äôd seriously consider taking local courses and finding a local group to connect and share with. Online stuff is good but you can‚Äôt beat the kind of back-and-forty you get in-person. Especially if you might want to make a career out of it, take some courses at a local university which might go towards a degree some day Don‚Äôt worry too much about learning a particular language either. For the most part everything transfers across languages. Once you learn one the next becomes so much easier. Swift is certainly a good starting language but there are many other good ones. 
Sure, but then why is it disallowed? The distinction between Swift access levels in many contexts is meaningless and doesn't apply, too, but we just smile and accept it as part of the language. Saying "private" at the file level is identical to "fileprivate", but it's not a syntax error. It's just redundant. 
sorry i'm not good in english I use a tableview to present index of page for exemple book index the pages are in collection view My question is : when I click on a tableview row I would like to have a page of my choice for exemple row 2 of tableview item 2 of collectionview no to the beginning of the page (item) Thanks
Thanks, I had tried that one already, but the two types are interchangeable. I'm looking for a way to prevent making dumb mistakes, like below. Notice that let w3... shouldn't work, because I'm passing an ID number to the function that wants an offset. cheers typealias IDNumber = Int typealias Offset = Int struct Widget { let studentStuff: Int; init(_ studentStuff: Int) { self.studentStuff = studentStuff } } let offset = Offset(12) let idNumber = IDNumber(13) func getWidget(offset: Offset) -&gt; Widget { return Widget(offset) } func getWidget(idNumber: IDNumber) -&gt; Widget { return Widget(idNumber) } let w1 = getWidget(offset: offset) let w2 = getWidget(idNumber: idNumber) let w3 = getWidget(offset: idNumber) print(w1.studentStuff, w2.studentStuff) &amp;#x200B;
You want to set your tableview as the delegate of the collectionView. This will allow the tableview to read which cell you two and then adjust the collectionView accordingly.
I‚Äôd use the structs like you mentioned. Give them Ints as properties rather than inheriting though. I think you could then use ExpressibleAsIntegerLiteral conformance to make initialising easier (look like initialising a normal Int) 
This is a matter of style at this point, but here are my thoughts. I would make this decision based on how the functions will be being called. &amp;#x200B; To answer one of your questions: Yes, that's exactly what named parameters are for... to form the unique signature of a function, to distinguish parameters from each other, and to help readability for usage. So naming your parameters is exactly what you would do in the most purest form of your situation because how else would you have more than one String, more than one Double, Foo, etc? We name parameters to specify the input. &amp;#x200B; However, there are exceptions that I would compromise. For instance, are you calling this quite often, such as in 100 places? If so maybe your code can bend the verbosity rules a little in order to save some annoying typing. Or maybe 9 times out of 10 you use the ID lookup and that can be your \_ non-labeled function and make the other one with a named parameter. &amp;#x200B; Another common practice (i.e. in Java), is to make 'IDNumber's a type of it's own, just like you did. This is because it can sometimes have some more meta data associated with it or other times requirements sometimes change it from an integer to a String or something. But an offset is almost always considered a plain integer, so that would be the least likely to get the special treatment. &amp;#x200B; Here's another tool in your toolbox if the verbosity is in the way: if the custom type will almost always be created with a literal, like your Offset(12) and IDNumber(13) example, then consider implementing [ExpressibleByInteger](https://developer.apple.com/documentation/swift/expressiblebyintegerliteral). I may not help with your Integer confusion problem, but just keep this in your back pocket for any compromises you choose. &amp;#x200B; If you're relying on a developer to read some API very carefully without any proper warning signs, eventually you will have the bug and ultimately get called in the middle of the night for it. If it's preventable with the type system, you have to implement the foolproof option or make a unit test that tries to spot this infraction. 
Im on mobile so I‚Äôm not 100% on the syntax, but I believe you want `typealias idNumber = Int` Now you have this new type that is in fact an Int, but it‚Äôll do compiler checks like the ones you want. So if you try to pass an Int where an idNumber is expected, the compiler will complain. You get all the same functionality as an Int, and you can easily cast between the two, if you need to for whatever reason. 
Use one public function that accepts an enum parameter and divide the work to two inner functions: ``` enum WidgetQuery { case offset(\_ offset: Int) case `id`(\_ id: Int) } func getWidget(by query: WidgetQuery) -&gt; Widget { switch query { case offset(let offset): /* do offset stuff here */ case id(let id): /* do other stuff here */ } } &amp;#x200B; /* used like */ getWidget(by: .offset(40)) ```
Yeah, still learning the basics, but glad to see what I can eventually advance to. Thanks to everyone for all of the help!
I'm reading Apple's introduction to code, just trying to wrap my head around the basics right now. Do you think I should learn these operands now? Or continue to explore the basics.
Can I pm you?
No worries
I routinely use `RawRepresentable` for this sort of thing. For each kind of object ID, I have a different type. So there is this underlying struct: struct Identifier&lt;T&gt;: RawRepresentable, Equatable { let rawValue: Int } And then in each type that has an ID I do: struct Widget { typealias ID = Identifier&lt;Widget&gt; let id: ID // ... } Now the function would be declared like this: func getWidget(_ id: Widget.ID) -&gt; Widget {...} And there's no way to confuse a Widget ID with an Int, or an ID of some other type object. 
This is a nice library, but I would remove the `Numeric` conformance. Adding/Subtracting/etc. tow IDs just doesn't make any sense at all.
Library looks pretty good.Thanks for sharing.
You will also need to add one more line else the Date will loose the millisecond precision. \`\`\` extension Date { init(millis: Int64) { self = Date(timeIntervalSince1970: TimeInterval(millis / 1000)) self.addTimeInterval(TimeInterval(Double(millis % 1000) / 1000 )) } } \`\`\`
Hey Evert! Haven‚Äôt heard of you in a while! I‚Äôll have a look into it today but I just wanted to pop up and say hi. Would you like feedback on code quality, performance, the solution you created or all?
Since swift is one of the fastest languages anyway and this is a very simple package I'm not too worried about performance. But yeah code quality and the solution would be nice. üòä
I just sharing my personal experience. I learned iOS development due to: 1. My teamlead tasks and mentorship. 2. Stackoverflow. 3. Official documentation. 4. Random articles from the internet. 5. And of course Standford videos. I didn't find them hard, even the opposite. But there are things you can't lear without an example: using Xcode tools, working with storyboard, simulator etc. It took 1.5-2 month to start develop production code. But I already new other programming languages before I started to learn Objective-C (Swift wasn't created yet).
I don't understand how importing works: ‚Ä¢ if i declare an extension in a utility.swift file, i dont need to import it anywhere, it's just accessible ‚Ä¢ I install for example SnapKit via cocoapods, and I import it once in one viewcontroller it's accessibile everwhere ‚Ä¢ I install another pod called 'NightNight' for dark mode convenience, but this is require to be imported to every file it is used? can anyone tell me why or what's happening? thanks
Not tested, but try searching for Scade. If I recall correctly it allows to run swift on android, but use is built on eclipse and not every framework will work. It might changed, because I was messing around with it around year ago, but they had very good slack community so I you might check it out also there.
Can you? Yes Should you? Hell no Can you escape Java/Kotlin? Nope
As a technical science project, probably yes. You can also use Kotlin to make stuff for iOS. But should you for an app destined for production? Definitely not. Even though they came about for different purposes, Swift and Kotlin are remarkably similar. However, iOS and Android are world‚Äôs apart as platforms. Use Swift for iOS and Kotlin for Android. That‚Äôs what they‚Äôre meant for and there are mountains of docs and examples and support to work with.
Yeah, well, that's just, like, your opinion, man.
I have a function called "XYZ" that returns a random integer from 1-6 . How would I make another function that takes the random integer from "XYZ" and uses as an input? So my new function "ABC" would take whatever XYZ spits out and run it. I wrote something like func ABC(XYZ(): INT) but it doesn't work. Is there something I'm overlooking?
Minor style advice: In the example in the readme, if you make `Ability` an enum, and conform to `CaseIterable`, then you can use `Ability.allCases` in the `if user.isSuperAdmin` rather than a manually defined array literal. A bit more future-proof if more abilities are added in the future.
Just saw this comment lol, I have always just used Xcode Swift &amp; Objective-C native. Unsure of the best solid cross compatible IDE for iOS &amp; Android, but I will have full access to the source/files, back-end/DB, etc very soon so I will have to look at it. The project is huge and I feel like it will be hell to rewrite the front end. The app has lots of parts involved. Looks like I will be a Cordova pro. I mean I have messed with HTML/CSS a lot, especially years ago before I programmed and I have wrong a huge program that is still in progress in Java, so looking through all the code and understanding the methods &amp; syntax should be a "breeze" but I do not know how bad Cordova is, I guess I should mess with it myself these few weeks and check it out. But I do firmly believe in native development and not in using other code like you mentioned to compile into a webview. Personally I lose respect for the developer in a way but whatever pays the bills and works for the "developer".
&gt;Except for the base arithmetic operators pretty much all mathematic facilities are defined in libraries and not in the language themselves. Even when the hardware has built-in mathematical functions they are generally accessed through a library, not the language. This was true. But then having such functionality built-in to the language or part of the stdlib, standardizes those. Else one need to resort to the many different libraries and if such a usecase is getting very common, then there is nothing wrong with adding it as part of the language, something similar to Mathematica.
I am getting stuck on item 1, any tips?
I mean, technically you can develop any app in and for anything with enough clever bodges and cross compiler skills. However that would be a massive pain. Just use NativeScript for Android if you don't want to use Java
Swift compiles to Android now, so theoretically you could use Android‚Äôs C API and make some stuff happen with Swift, but it‚Äôs not exactly a time-saver considering how much UI infrastructure you‚Äôd have to build. In my dreams, someone makes a React-Native-esque framework using Swift instead of V8/JS, but that‚Äôs a ways away from being truly production ready, last I checked.
Nearly everything you do in a programming language is an additional library. That‚Äôs a feature, it keeps the language flexible and extensible with quick compile times. Adding complexity to the language can be bad so you push anything but the most general-purpose functionality to frameworks/libraries. Mathematica is a different animal. It exists to provide mathematical operations and the additional complexity is worth it to serve that purpose. Swift is a general-purpose language and these sort of additions do not serve that purpose well. If it can be shown that some of the features have serious benefit to general-purpose computing then they should be considered but in a very conservative fashion. So what parts of this proposal need to be core language features? What parts can be as a framework? How can the parts be used to solve common general programming tasks? Let‚Äôs break it down properly and find out whether the additional complexity is necessary or if it would be better to create a framework/specialized language for these kinds of computations. 
It is technically possible but why? Just embrace the native development language for the platform. The mobile app I worked on contains Java for Android, Swift for iOS, Typescript for react-native, Rust for shared high performance logic. It is not easy but quite possible.
I‚Äôm gonna take a look at this code later, because I think it looks promising- but in the past I used the ORSSerial framework for doing USB. 
Paper and pencil baby. There‚Äôs nothing like some fresh graph paper
Looks awesome! Like the other commenter, very clean. Thank you for releasing 
I think crosscompiling Swift into Kotlin could be doable. But to be practical you need to reimplement UIKit &amp; Co... at least parts of it. 
https://api.nasa.gov/api.html
&gt;I‚Äôm willing to pay whatever amount $10,000,000 USD
And to get the printing to work: extension Offset: CustomStringConvertible { var description: String { return offset.description } }
&gt;I‚Äôm willing to pay whatever amount $10,000,000 USD
And to get the printing to work: extension Offset: CustomStringConvertible { var description: String { return offset.description } }
The cost to build an entire social network (the mobile apps and web services), will run into the hundreds of thousands of dollars. Consider that the cost of one engineer, at $100 per hour, is $200,000 per year.
$50k
This sounds really cool!
I can't say one way or the other but googling your question comes up with $25000 minimum going up to 100k depending on features, cross platform etc, etc.
I‚Äôm looking for about 5000 and for it be completed by January 
I‚Äôm looking for about 5000 and for it be completed by January 
Looking for about 5000 and it be completed by January 
Exclusively IOS, 50k
Exclusively IOS 50k
Exclusively IOS, 50k
Exclusively IOS, 50k
This sounds really cool!
This sounds really cool!
If your looking for just iOS and not android $50k. If you want both IOS and android and native for each platform then your probably looking at $75
What if I made a game on iOS and I don't want to duplicate it's engine for Android?
Not related to Swift btw. &amp;#x200B; You can download your Instagram data and parse it out of the data they send you. I did this with a few of my chats earlier this year. You can find the download data option in the app settings. &amp;#x200B; They send you json files of all your chats and every message is included. (Even if they were deleted from your device, if they were "unsent" the won't be there) 
Not related to Swift btw. &amp;#x200B; You can download your Instagram data and parse it out of the data they send you. I did this with a few of my chats earlier this year. You can find the download data option in the app settings. &amp;#x200B; They send you json files of all your chats and every message is included.
Thanks! I'm curious.
Not related to Swift btw. &amp;#x200B; You can download your Instagram data and parse it out of the data they send you. I did this with a few of my chats earlier this year. You can find the download data option in the app settings. &amp;#x200B; They send you json files of all your chats and every message is included.
Thanks and my pleasure :)
Thanks :)
A team of people might be willing to do it as cheap as 20K. An indie dev might charge around 10-15K though.
How much does it cost to build anything custom? You just have to shop around. It could be $500-$5000
The push SDK we‚Äôre using gives me the embedded JSON data as a [AnyHashable : Any] object. How the heck do I decode this? I use JSONDecoder to decode API requests, but I can‚Äôt use that because it expects a object of type Data. Ideally I‚Äôd like to decode this push data directly into an object like I do with API calls
How much does it cost to build anything custom? could be $500 to 5000
So you wanna build it for 5000
Not me but any dev starting and looking for work for their portfolio who knows how to do that would charge anywhere in there. Whoever quoted $25k is insane, that‚Äôs nearly a full time job/custom backend/server side stuff. eta: I see you want custom backend so probably $5-8k as that‚Äôs more than just an app. You‚Äôre also going to need hosting etc.
25k for the app work, 25k for backend and 25k for the infrustructure. Est 75k
I'll second tagged as the best solution to this problem that I've seen. For objects, empty subclasses solve the problem perfectly and trivially. For value types(and class clusters like NSString) the solutions are more problematic. Tagged is the best(least bad?) option I've seen as it gives you things like equateable, raw representable, string literal convertible etc for free. If you're converting existing code you've got to be really careful about unwrapping these structs anywhere they get passed into an any or dictionary or the like. 
Get rid of the usbDelegate class entirely- this is how you would implement your code into a ViewController. The previous code has notification/protocols to handle when something is added/removed, a while loop to do this puts an enormous strain on the system. // here would be your main code.. class ViewController: NSViewController, USBWatcherDelegate { private var usbWatcher: USBWatcher! override func viewDidLoad() { super.viewDidLoad() usbWatcher = USBWatcher(delegate: self) // Do any additional setup after loading the view. } override var representedObject: Any? { didSet { // Update the view, if already loaded. } } func deviceAdded(_ device: io_object_t) { print("device added: \(device.name() ?? "&lt;unknown&gt;")") } func deviceRemoved(_ device: io_object_t) { print("device removed: \(device.name() ?? "&lt;unknown&gt;")") } } &amp;#x200B;
Seems a little steep not sure what‚Äôs wrong with using firebase for the backend for now 
Makes sense
Using firebase as back end for now 
are you aiming on keeping your 'social' network to like &lt; 1k users ?
And to get the printing to work: extension Offset: CustomStringConvertible { var description: String { return offset.description } }
I dont think your ever going to get the desired outcome with firebase. You are going to need a lot of cloud code.
The USB code is fine (you said you copied it from somewhere). Rather, the issue is that it is intended to be run inside of an app and you appear to be using a playground. The problem is this part: while true { sleep(1) } You are sleeping the main thread. That means that it is blocked and you cannot receive notifications on it. You need an active runloop for the callbacks to work. Replace the last few lines of code with this: var example = usbDelegate() import PlaygroundSupport PlaygroundPage.current.needsIndefiniteExecution = true That keeps the playground running indefinitely (you will need to manually start/stop it) without blocking the thread. Then the async callbacks to your delegate object will work.
I‚Äôm wondering I see you can buy templates online for social media apps and you ever seen or heard of someone using these and adding there own code? 
If you‚Äôre developing apps and deploying them on your phone using your personal Apple ID, the certificate will expire after a certain amount of time (A week IIRC). This isn‚Äôt specific to Ray‚Äôs apps but a limitation from not having a developer account/certificate. The only way around it is paying $99 a year to Apple to join the developer program. 
Not personally no, but then when you want to add stuff to it you are limited to working with the original developers codebase which could be poor
I'm an app developer with several apps in the app store and I wanted to get my reviews from users as soon as they were posted so I built AppReviewBot. I thought it might be useful to some other developers and I'd love any feedback!
IS THAT ONE MILLION DOLLARS?
Of course money is the solution. Thanks for letting me know!
Actually it will run in a MacOS... So I could not make it work. The loop there is because I cannot paste my code here, so it simulates something lol
Nice I will try that, and the loop is just for simulating. By the way my application is a terminal mode program, without any ViewController Thank you
I remember this tutorial from a couple of years ago is based on NSTask - it may point you in the right direction. It focuses on NSTask but mentions NSPipe and standard input, output and error. [https://www.raywenderlich.com/1197-nstask-tutorial-for-os-x](https://www.raywenderlich.com/1197-nstask-tutorial-for-os-x)
Even this might be lowballing it for the long-term but it‚Äôs a start. I‚Äôd say 3 full-time developers for a serious app and service, you could probably get away with 1 if you really cheap out and don‚Äôt care too much about the long-term at this point. You‚Äôll pay for it later, though, if you get successful and have to re-engineer everything to keep up with the clients. 
Yes this is possible. There are several ways of handling this. It‚Äôs really up to you since there are quite a few possibilities. This is a pretty standard exercise for image analysis. 
Killer idea. Love the concept and will definitely use it once I launch my new project. My only con is that I tried out Facebook on your website and the most recent review was from Brazil and was in Portuguese (I‚Äôm assuming ‚Äî if not, definitely a hispanic language). I wouldn‚Äôt even call this a con, but maybe it‚Äôs something you should rethink if this ‚Äúproblem‚Äù it can be duplicated (I‚Äôm in the USA). Also, what stops a competitor from using your service against someone? I personally don‚Äôt have an issue with it ‚Äî as I would likely use this to snoop around and do research/improve my own product ‚Äî but I can see how it gives someone a huge competitive advantage over those who do not know about it. Honestly, this is a rhetorical question... something to help you market and improve your service. Anyway, like I said, this is some good shit my friend. Us devs rarely get to hear this a lot but: thanks for taking the time to make my life easier. Best of luck with this and your future projects. P.S. I was a business guy who learned to program rather than a programmer who had to learn how to build a business. I see business logic differently than most devs and I see opportunities where most people do not. so here‚Äôs another suggestion ‚Äî your business is SAAS-esque and I think you may be successful by following some of the SAAS companies business models. Ex 1: You made this for devs, why not open and market it to enterprise companies. Let‚Äôs say the average indie dev has 10 live apps and some company has 20+. If you made the service free for 5 apps, $XX for 5+ apps, and $XXX per year for 10+ apps you could establish some predictable annual recurring revenue. Ex 2: The Instagram app has 7MM+ reviews, would it reward you if you allowed a program you worked hard hard to build to send this many reviews to Slack for free? Wouldn‚Äôt it be cooler to put a cap on how much data is shared? I don‚Äôt know, maybe a 500,000K message tier for free and then you bump it up? Both of these examples are extreme but they paint the picture of how far you could possibly take this. Maybe you‚Äôre just a nice guy who wants to leave his mark on the World and give this away selfishly, there‚Äôs nothing wrong with that ‚Äî but I think you‚Äôre brilliant and could do a lot more with this. I suggest you check out Product Hunt and post there... Check out the companies and products there also. Both examples are business models of a lot of SAAS products/services being shared. Good luck!
Thank you very much! I will study that :)
Hmmm you could change the ViewController to an NSObject instead &amp; it should work. I‚Äôm not too familiar with command line programming- is this an arduino project?
&gt;a terminal class program So this is for a command line program? You didn‚Äôt mention that. It‚Äôs unusual for such a program to keep running and listening for async events but okay. The IOService notifications require a run loop so you need to have one active. Normally, NSApplication or UIApplication manages the run loop for you. But if you are writing a command line app then you need to manage the [NSRunloop](https://developer.apple.com/documentation/foundation/nsrunloop?language=occ) your self. [Here is a reasonable example of how to do it(in Obj-C)](https://gist.github.com/syzdek/3220789). That also allows you to check for exit conditions or additional input from the user.
No, it will run as a daemon or agent in background.
Thanks!
This makes no sense. Do you want this done properly? Or with Godzilla sized bugs and security holes plaguing your project? Do NOT get an inexperienced dev to do this for you unless you want it to fail. You get what you pay for. Find someone who has A LOT of experience when you're handling peoples' personal information.
oh shit, you're right. This is so different than everything else I've used before.
Seems to be a decent summary of nullability and compatibility between Objective-C and Swift, although the title could indicate the Swift part a bit better. One thing popped out that you might want to fix: &gt; This code is equivelent to Swift: Should be: &gt; This code is **equivalent** to Swift: Other than that it looks good in a quick read. If I get a bit more time I'll take a better look. Good luck on the rest in the series!
If you can get a reduction, this would be good to [post as a bug on webkit.org](https://webkit.org/reporting-bugs/).
Will do, thanks!
Interesting how they did almost nothing with objc for many years and then added all this stuff.
How often does it updates ? Says constantly streaming what that means exactly ?
Currently I'm teaching a Swift class to kids from age 11-13 at a school. We are making a fun text based game to learn the basics of Swift. [Here is a video demo of the app](https://uplearnedu.com/courses/code-club-term-3-2018/lessons/challenges/) . We have been also learning python as we are updating all the computers to Mojave and Xcode 10. 
&gt; warn_unused_result Thats's the Objective-C reverse of `@discardableResult`? Neat. I wish I had a decorator that could force somebody implementing an override of a function to call the `super` function. That would really kill a lot of subtle bugs. Objective-C is still a great pick for libraries, especially the heavy lifting (lots of C/C++) ones.
The one thing that I found really disappointing is that they don't do anything within Objective-C itself, it's all squarely aimed at Swift interop.
Great article. If anyone's looking for a pre-rolled approach to this, I use [Anchorage](https://github.com/Raizlabs/Anchorage) a lot in day-to-day work and I like it a lot.
I've never heard *anyone* say they hate Swift, let alone many people. I'm struggling to think of a reason why someone might feel that way. Swift is a pretty big leap forward for ease of development on iOS / macOS. Perhaps you've heard some people mentioning that Swift is slower than Objective-C for certain things, I guess? Don't let anyone tell you a language is bad if they don't have a good reason. It usually means that they just can't deal.
My last Swift article on Medium
I have literally never heard this. Ever.
As it was explained, there are multiple approaches to solve it. In most projects adding that side-effect to addSubviews is going to be perfectly fine while in others were there might be frames &amp; bounds you should provide a better name in order to show you're applying a side-effect. When it comes to the "right way", there's no right way. There are multiple approaches. Sundell approaches has the same downside of most of them, it adds a learning curve and doesn't follow Apple's syntax. While this can be good, this article focus on following the same syntax so you don't increase the learning curve of your projects.
Nullability and lightweight generics affect Obj-C itself, letting the compiler reason about your code more than if you didn't have them.
I have never heard of this, perhaps some of them got confused with the concept of Closure and Optionals? üòù
Yeah, this helps improve Objective-C code, but really goes a long way towards better Swift interaction.
Some of the improvements help Objective-C as well. If you enable some extra compiler flags, you can get a build error if you're trying to pass `nil` to a `nonnull` parameter, etc.
No, not per se. They allow you to make certain methods and properties unavailable - and in Swift they won't come up in code completion. An example, where I use them is like below. &amp;#x200B; `- (instancetype)init OBJC\_UNAVAILABLE("Class is a singleton. Use sharedInstance instance")`
Why even use autolayout at this point? There are so many non-autolayout based layout libraries that are 10+ times as performant and far more expressive. For example, Facebook Yoga or this nice wrapper around it https://github.com/layoutBox/FlexLayout
In regards to annotating that `super` must be called in overrides, I've thought about this also. It would really make the code more safe.
Ah. Good to know. I went with NS_UNAVAILABLE: ```swift - (instancetype)init NS_UNAVAILABLE; + (instancetype)new NS_UNAVAILABLE; ```
Exceptional
I prefer this one: func cellSwitchDidChange(sender: UISwitch) { let point = sender.convert(CGPoint.zero, to: tableView) guard let indexPath = tableView.indexPathForRow(at: point) else { return } // do something with the indexPath }
I use closures in the custom cell so it can perform x function. So you write an optional closure in the cell class and then have the sub button perform that optional closure. In the vc that populated the cell I add the what it should do through the closure, making sure that self is weak so that the vc is not strongly retained. 
Those two access levels are only "harmlessly equivalent" there because you said so. The Swift book describes `private` as: &gt; Private access restricts the use of an entity to the enclosing declaration yet just sitting naked in a file, there is no "enclosing declaration". I'm not sure why the compiler allows this, but it does, so we accept it. Likewise, everyone and their dog has at some point written "convenience init" on a struct. It's obvious what it means. I can think of no harm that anyone would have ever incurred, had the compiler decided to make this a warning instead, but the compiler doesn't allow it, so we accept that, too. The whole init situation is still a big wart. I've been waiting years for them to take a crack at SE-0018, but it seems nobody is interested in cleaning up this particular mess. The fact that a class's convenience init in an extension is different from the same exact convenience init in the class itself is pretty subtle and weird. 
&gt; I've heard often that ... There's a name for this: [weasel words](https://en.wikipedia.org/wiki/Weasel_word). Who said this to you? Ask them.
You must not have been in the Swift community that long if you haven't heard this, because [this article](https://www.hackingwithswift.com/articles/27/why-many-developers-still-prefer-objective-c-to-swift) made the rounds last year. You can google "i hate swift" and turn up many more. It's not hard to think of reasons to hate Swift. It's lacking in many areas, and if those happen to line up with the work you do, then you're going to have a bad time. People who use Swift but hate it don't tend to last long in r/swift, because any comments at all critical of the language get quickly downvoted to oblivion.
Saying you don't like autolayout in these subs is like burning an American Flag at a 4th of July picnic. :-( &amp;#x200B; Thanks for the link.
I was able to make it work!! :) THANK YOU! A sideway question: How I would be able to get the productID and vendorID? Should I open a new topic or it is not complicated to implement into that code?
The StoreKit documentation says **tvOS 9.0 or later**, so it's available. 
Oh cool, thanks!
Don't worry. I get downvoted every time I've brought up those other libraries. I still use them, as do some pretty huge apps. I also get downvoted for doing things programatically. 
Heya DippySwitch, I have used a strategy to load more result when the last row in tableview is reached. I do the checking in cellForRowAtIndexPath like this : var coinArray : [Coin] = [] let baseURL = "https://api.coinmarketcap.com/v2/ticker/?" // fetch 15 items for each batch let itemsPerBatch = 15 // current row from database var currentRow : Int = 1 // URL computed by current row var url : URL { return URL(string: "\(baseURL)start=\(currentRow)&amp;limit=\(itemsPerBatch)")! } func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { // if reached last row, load next batch, and use a LoadingTableViewCell if indexPath.row == self.coinArray.count { let cell = tableView.dequeueReusableCell(withIdentifier: loadingCellIdentifier, for: indexPath) as! LoadingTableViewCell loadNextBatch() return cell } // else show the cell as usual let cell = tableView.dequeueReusableCell(withIdentifier: coinCellIdentifier , for: indexPath) as! CoinTableViewCell // get the corresponding post object to show from the array let coin = coinArray[indexPath.row] cell.configureCell(with: coin) return cell } // MARK : - Batch func loadNextBatch() { URLSession(configuration: URLSessionConfiguration.default).dataTask(with: url) { data, response, error in // Parse JSON into array of Car struct using JSONDecoder guard let coinList = try? JSONDecoder().decode(CoinList.self, from: data!) else { print("Error: Couldn't decode data into coin list") return } // contain array of tuples, ie. [(key : ID, value : Coin)] let coinTupleArray = coinList.data.sorted {$0.value.rank &lt; $1.value.rank} for coinTuple in coinTupleArray { self.coinArray.append(coinTuple.value) } // increment current row self.currentRow += self.itemsPerBatch // Make sure to update UI in main thread DispatchQueue.main.async { self.coinTableView.reloadData() } }.resume() } I recommend using UITableViewDataSourcePrefetching to simplify the preload of data on rows that are not visible yet to user (rows below the visible screen area). I have written a guide for this here : [https://fluffy.es/prefetching/](https://fluffy.es/prefetching/), hope this helps on your pagination!
Add this to the io_object_t extension: func vendorID() -&gt; Int? { if let cf_vendor = IORegistryEntrySearchCFProperty(self, kIOServicePlane, "idVendor" as NSString, kCFAllocatorDefault, 0) { var vendor: Int = 0 CFNumberGetValue((cf_vendor as! CFNumber), .intType, &amp;vendor) return vendor } return nil } Product id works the same way except that the key is "idProduct".
\_fewer\_ dependencies &lt;/stannis&gt;
You can make custom initializers when loading from xib, so you need less non-optional optionals.
I didn‚Äôt know you could do that! How?
I'm a little disappointed that they went with C++-style overrides, which offer no structure at all, rather than CLOS-style qualifiers (`:before`/`:after`/`:around`), which would have made it easier to declare and enforce this. With Swift properties, they did use a more CLOS-like style (`willSet`/`didSet`), and it works great. Imagine if they had done a similar thing for methods. Your subclass could override `before func foo()` and `after func foo()`, and the superclass could (using existing access controls) prohibit overriding `func foo()` itself, so you couldn't avoid calling it.
I think the point made in the article is that getting the indexPath from the tap and doing anything means you‚Äôre coupling too tightly. Using delegation or closures makes this less coupled and much more reusable. This lets the cell determine what to do with its data/interaction and not a parent view that could potentially have no idea context on what exactly it‚Äôs showing. 
I‚Äôve always avoided manually setting isActive due to the performance implications. I always add extensions like this, but generally have them return an inactive constraint or constraints so that I can call NSLayoutConstraint.activate([]) with an array of constraints. https://developer.apple.com/documentation/uikit/nslayoutconstraint/1526955-activate
I'm not interested in watching the video but did you use builder.add() to add calorie samples to your workout?
Is it setting on the main thread?
When you import a pod like that, you are importing an entire module. Everything open or public is accessible to your code. By default any class or method is open to the module that contains it. When you import something, you are telling your file that it can use the public elements in that imported module. When you create your own file its added to your target/module by defualt and there is no need to import it because it‚Äôs already in the module you are working in. 
I'm not a lawyer, and this is not legal advice: &amp;#x200B; I may be wrong, but I believe you do still have to have a privacy policy because, even though you're not remotely accessing the data, the user still needs to know what data is collected locally and what it is used for. A very basic privacy policy (i.e., just list the data collected and what it is used for, and that it is not accessed remotely) should cover all the bases until the app needs to connect to the internet, but a privacy policy is required nonetheless. When you do connect the app to the internet, you may also need to alert your existing users to what would amount to a major change int he privacy policy. &amp;#x200B; I know it's kind of a pain, but it's better to be safe than sorry- even if Apple doesn't require it in your case. (I'm not sure whether or not they do)
You have to host it on a website. You can use Github Pages for a quick and free way to get a webpage up and publicly accessible if you don‚Äôt already have a website.
I use weebly to quickly make a free website. 
Thr shortest and simplest privacy policy is ‚ÄúThe app does not collect any personal data‚Äù. 
I‚Äôve never found any performance issue even when according to Apple‚Äôs documentation using NSLayoutConstraint.activate has the best performance. What I did find in some performance tests and I will investigate that more deeply in the future is that the performance of that function was actually worse.
I create a tableview with 4 row for exemple module1 module2 module3 ..... each module contains multi pages module1(page1,page2,....) My problem : how to pass to the pages of each module I have a collectionview to present all pages
Interesting. Simple and to the point.
OK, seriously? if matchedType.isEmpty == false { return true } else { return false } Every time I see this I lose complete faith in whoever is writing the code. Why would anyone do this when it reduces to: return !matchedType.isEmpty 
Just create one from a sample. You can do it in sites such as [this one](https://www.freeprivacypolicy.com/) where in a few steps you can create your own in whichever language you want for free. AppStore Connect will probably ask you for a link, the site will give you your own.
And if you have more than one element (2 switches or 3 button etc) per cell? :) There are many reasons why delegation is a key concept in iOS dev world, one of them is that it scales. 
You seem to go around this the wrong way. Shouldn't you research the sources first and then come up with a credible claim for your paper? &amp;#x200B; It might sound more credible if you say "*some* developers that worked with Objective-C for many years find Swift lacking in *some* areas" etc.
Or you can animate the delete of just that one row. 
Yeah but wouldn‚Äôt that be bad coding since now your view doesn‚Äôt reflect your state? Also, if the user scrolls or rotates the controller, the deleted row will be recreated since the data source will still contain that row. 
Well delete it from the datasource obviously. I just meant you don‚Äôt have to reload the entire table. Apple has given the ability to remove one or more rows in an animated fashion and all indexpaths on subsequent calls are still accurate Because Apple magic. 
I understand that but that‚Äôs not the problem I‚Äôm facing. Consider this situation, I have an array with 3 items at index 0, 1 and 2. In my table view data source method I create my cells and to the delete button in each cell I assign the tag equivalent to their row. Now, consider that the second row‚Äôs button is tapped, in the button‚Äôs action method, I get its tag which is 1, so if I delete the cell at index 1, and I delete the element at index 1 in my array, we have a mismatch because now the cells have tags 0 and 2 whereas array has indexes 0 and 1. When I then try to delete the last cell, the app crashes since the index is now out of bounds. So I wanted to know if there was a better way to do it without having to call reloadData because while it updates the buttons‚Äô tags, it also reloads the cells, and I don‚Äôt want that because every cell gets a random background colour in the cellForItem... method, so reloading changes the bg colour for all remaining rows. 
&gt; func vendorID() -&gt; Int? { &gt; if let cf_vendor = IORegistryEntrySearchCFProperty(self, kIOServicePlane, "idVendor" as NSString, kCFAllocatorDefault, 0) { &gt; var vendor: Int = 0 &gt; CFNumberGetValue((cf_vendor as! CFNumber), .intType, &amp;vendor) &gt; return vendor &gt; } &gt; return nil &gt; } Thank! Worked perfectly 
So instead of pod installing a tested fully featured lib you recommend rolling your own? One that's only about 20% less verbose? That's not a path I'd recommend. It's an interesting exercise in writing a DSL but this article took longer to read than reading the docs of an existing auto layout lib, and actually writing the code would have taken longer. At work we had one of these homegrown autolayout libs that we basically all stopped using a few years ago as soon as we pulled in a decent third party lib. I think we recently rewrote the last few places that used it so we could finally delete it.
It's more before installing a fully tested featured lib you learn how you could do a simple one by yourself. This article doesn't aim to provide you a solution to copy-paste, if I would go for that I wouldn't even write an article at all... It aims to show how you can build something without much effort while fully understanding what everything is doing. Using third-parties is not the solution to every project, every team &amp; every company. Plus it focus in Apple's preferred syntax. While it's not my preferred way of doing it, it's still healthy to learn it first, improve it and only then, in case you or your team still dislike it, try a different approach (like for example a totally different DSL or framework) In short, the title of the article is "Power-Up Your Anchors" so it's all about that and those 20% that you say can make a huge different in readability.
ok, so why would i need to import nightnight everywhere and not snapkit?
Thank you!
Yeah, this is a non-trivial issue. If something like StackExchange-&gt;Tutorials existed, it would be as good as it gets.
Maybe all you experienced programmers start a big mega thread to decide on general best practices. After you decide, you post those in an easy to read guide. &amp;#x200B; That way, everyone has a consistent reference to check against when upvoting/downvoting tutorials. &amp;#x200B; I'm not really sure how else it would work, save for making people send the mods resumes before they're allowed to post which seems a little crazy.
So I wonder how would be this group of reviewers that will ensure that all this information is following "best practices", as u/BenevolentCheese said who becomes the judge and arbiter of that? &amp;#x200B; I'm ok with the idea but this is something that take some time.
No matter how good our intentions we'll always fall a bit short, as you have mentioned. All we can do is to try to work together as a community, perhaps nominating people and voting on them. Maybe use the upvotes of posted content as one metric, combined with starting with a few trusted reviewers and having them grow by adding others. We should be as inclusive as possible, there are general and broad principles that most developers can agree upon and then there are simple differences of opinion. When it comes down to a matter of opinion we should include both sides. However, there are some practices which are not useful for a tutorial or informational content: 1. Very brief articles or tutorials that really don't inform or teach. 1. Examples that are fairly incomplete or buggy. 1. Articles which cannot be understood due to extreme formatting problems or writing issues. 1. Posts which are obviously misleading or trolling. Yes, these can be a bit subjective but you have to start somewhere. I'd welcome any and all ideas on how to balance inclusivity with filtering out bad content.
While this all sounds very liberal, like most things with that lean in that direction, what you will end up with is censorship, gross arguments about opinion and a very disfunctional forum. Frankly it flys in the face of what an open forum that discuss Swift in a general way should be. Now I‚Äôm not dismissing your point here at all, this just isn‚Äôt the place for such a forum. One option would be a set practices reddit so that the function of the forum is clear. Another idea would be a well maintained web site that is actually owned by the people passing judgement on the code. Beyond all of that best practices are often judgements made in time that don‚Äôt hold water over time. This especially as a language evolves over time. This fluidity has been an issue in the C++ community as what is considered best practices has evolved significantly over time. In the case of Swift we are talking about a language and library set that isn‚Äôt even stable. So if someone was to setup a web site devoted to Swift best practices they will need the time and energy to review content as practice and the language evolves. So no I don‚Äôt think this is a good idea especially considering the way that reddit and /r/swift operate. If somebody thinks that a code fragment posted here is bad in some way, a rational (calm and reasoned) response should be posted. Leave it up to the reader to decide what fits his code. Beyond that as a reader here, to in part learn about Swift, I‚Äôm less likely to find advantage in one sided discussions or censored communications. As a reader that moment when the light bulb clicks on is often the result of a conversation where differing perspectives come up. Sometimes understanding why you would do something in a given way requires a deeper understanding of things than might be obvious in the project at hand. Excessive moderation just leads to posts that are very thin on the hows and whys. In a nut shell censorship isn‚Äôt the thing we want to see in a forum focused on Swift in a general sense. Moderation can be very distructive to a technical forum especially if the wrong people get involved in that censorship. Beyond that has there been enough time with Swift for people to really develop a set of best practices? In some cases possibly but has anyone developed to the point that they consider themselves a Swift expert? 
This is quite a supposition, that all processes which seek to improve the quality of content will result in overzealous enforcement. Anyone who seeks to be hired by an organization or work with other people should learn how to be part of a review process. It's through discussion and review that we exchange ideas and become better programmers with better code. Yes, you can be a solo learner and a solo programmer but that path doesn't turn out well for many people. I've seen projects created by developers who have only worked in isolation and they often turn out badly, they never learned new ways of achieving their goals and got stuck in the same ruts over and over again. The key to a healthy community which helps people learn and grow as developers is frank, open discussion. However, you do need to keep the signal-to-noise ratio in check or it becomes difficult to exchange information. Take a look at many of the poorly-moderated subreddits and see how they get clogged with bad actors and misinformation. People often stop posting useful things because they are drowned out by the not-useful posts. People also stop visiting the sub once this happens, why would you go somewhere to get help when the help is difficult to find and often bad advice? Moderation can go the other way, certainly, becoming too authoritarian and rigid. This is something to be vigilant against and to have checks and balances in place. As I have said, it's far better to err on the inclusive side than to completely shut people out. However, this doesn't mean moderation is a bad thing ‚Äì just that it needs to be balanced and tempered.
So, basically, become like /r/askhistorians?
I think we could achieve the same effect by simply being more vocal about the good and bad in tutorials. Even a bad one might have some useful information in it so a flag against the entire thing wouldn‚Äôt necessarily be appropriate. Even Paul Hegarty‚Äôs videos don‚Äôt contain 100% good practices. I saw one where he used the titles of some buttons to determine which button had been pressed. I shudder just thinking about it!
This entire post is just meant to answer an "interview" question? (Who the hell would ask this in an interview??) Here's a better question: when you should use inout. Answer: pretty much never. Side effects are bad. 
This is just discussion.
r/swiftelite 
OK, I gave you discussion: you should (almost) never use inout. 
How do people engage in a review process if they can't see the post? 
New rule: no more making rules
Not really sure of the answer to this so here‚Äôs a few things that might be why. Maybe someone else can chime in. 1. You used a bridging header for the import which makes it accessible everywhere (I don‚Äôt think you did that with snapkit though) 2. Snapkit extends UIViewController so once it‚Äôs been exposed, all view controllers know about it. 3. Might just be random. Have you ever created a new file and didn‚Äôt import UIKit but UIKit objects worked fine? Then did the same in another file and Xcode immediately complained UIView, UIColor or UIXXX is undefined? Not really sure the reasoning behind that either. 
Ahh I think it must be #2. That would make sense!
It all depends on the process, doesn't it? If it's an open review then the post would probably be tagged as in review and people could comment on it as normal. Once it's sufficiently reviewed according to a pre-determined criteria it could be tagged as accepted. If it's a closed review then only certain people will have access to the post. They can review it, vote on it, then release it to the rest of the sub. I'm sure there's other ways that a review process could work, hopefully people will have some good ideas and we can come up with an implementation that works for most.
Objective-C was actively changing and improving since the release of Mac OS X. We got ivars in implementations, default autosynthesized properties, ARC, blocks, autonilling weak pointers, @import, and more. Post-Swift, though, it‚Äôs pretty much only had changes for improving interop, even though many of them like nullability and specifying types for collections improve Objective-C error-checking as well.
&gt;what you will end up with is censorship No, no we won't. Choosing not to post a tutorial is not censorship, and claiming that it is shows you to be extremely out of touch. 
If you are choosing not to post somebody else‚Äôs work it is censorship. Lookup the word in the dictionary. Censorship can be absolutely hideous in a forum like /r/Swift. It can make sense in other venues. A perfect example is maintaining a curated list of source code examples. In any event you demonstrate clearly that you really don‚Äôt understand what censorship is and why it is harmful to a forum focused on all aspects Swift. Sadly many others don‚Äôt grasp the problem either. By the way there are degrees of censorship on every redditt forum, the point is you stay on topic. Here the topic is Swift. Frankly this issue is all about a venue that allows people to understand the good and the bad. Maybe more importantly understanding the whys. People do not grow in capability as programmers if the don‚Äôt understand the deeper reasons for why things get done in a certain way that is acceptable to the larger community. So in actuality the desire to censor bad code will actually lead to even more bad code. 
I completely forgot to press sent. Opened the app with this list ready: Abilityset is expressiblybyintegerliteral and needs to be rawrepresentable with a fixedwidthinteger but the helper initializer only works for UInt, can be extended to all fixed width integers. You can make objects and types hashale with ObjectIdentifier. Using it‚Äôs description in a string is a bit hacky and unperformant and will not work for two types with the same name originating from different modules. Your subscript on the dictionary in the typtuple file doesn‚Äôt use one argument. Might not be used at all Your usage of a single dictionary called policies is putting restraints on your code. What you seem to want is to identify the combination of two types with either a policy. You can make this an array and make the types type-safe rather than generic to put them in the same array type-safely Finally, performance in Swift is implied but it‚Äôs not free. You do need to think about it, regardless. PHP which is known for poor performance can beat poor swift code if the PHP code is better quality. PHP has a handicap here by design but is by no means indicative for code quality and the impact on performance. I just 2 weeks ago debugged a Swift API that had a response time of 300ms. The problem ay fault was the authorization mechanism just like what you‚Äôre displaying. A small mistake that is obvious if you take the time to dig through your code‚Äôs performance. But because of where it was used the impact was huge.
Thanks man! That's the closest solution seen so far. However, messing with Intrinsic size doesn't seem to play well with auto-layout. I'm telling out designers that we CANNOT support multiline in a nice way.
You need to reread your own post because the dry reasons you use to promote censorship are the same reasons that I suggest are reasons to avoid it. From my experience a person is in fact a pretty useless programmer if he doesn‚Äôt have a deeper understanding of how to do things. Thatdeeper understanding doesn‚Äôt one from people demanding that code be written a certain way. It comes from understanding why fragile code breaks andfrankly that means you need to see bad code. I‚Äôd go so far as to say that we code provides a bigger learning opportunity that well regarded code when rational discussion takes place. Swift itself wouldn‚Äôt exist today if it wasn‚Äôt for the technology employee in Swift didn‚Äôt get hashed out in the many languages it is derived from. Beyond all of that we already have a form of quality control in place as one can downvote if desired. Plus the nature of Reddit is that all materials are timely. That is interest in posts evaporate fairly quickly. No one is forced to read anything here. In anyevent your post has all the feel of a person on a power play trying to exert his way of thinking upon the community at large. Frankly this wouldn‚Äôt be the first time that I‚Äôve run into someone that has the attitude too ‚Äúdo it my way or to hell with you‚Äù. In the end this is exactly the smells that are coming from your desire to place excessive controls on Swift related posts here. I come here to learn about Swift and I expect that the forum will keep out unrelated information. As a forum for learning it will never be useful if nothing can be posted that is applicable for learning. Beyond all of that, the whole concept of best practices is questionable for such an immature language. This anything offered up as a best practice really needs focused on the more stable aspects of Swift and be accepted by at least a few in the community. Effectively best practices should be examined just as much as bad code, probably more so. So you really can‚Äôt have the concept of best practices unless the forum is free to discuss them. Otherwise you just end up with a dictator promoting his opinion. In the end this is exactly what I‚Äôve seen most moderation evolve into. When that happens things usually get ugly. So in a nutshell I don‚Äôt believe you have the best interests of the forum at heart. All the effort you might put into moderation could be better spent demonstrating better ways that explains the whys I needed. 
Using tags would be quicker and less hacky. 
Tutorials are seldom perfect code. Often you have a rapidly constructed framework to model a certain feature or API. The goal is in demonstrating that feature, how it works, what it is used for &amp; etc. there is seldom perfect code in a tutorial. If you want examples download Apples WWDC videos. These are perhaps some of the most professionally produced tutorials out there but much of the introduction of new tech is done with highly contrived code. Tutorials have never meant to be ideal represention of good code in the general sense. 
That is a strange place for programming tutorials. ‚ÄúLet me pause this and squint so I can see what the hell you just typed.‚Äù
If the examples are incomplete and buggy, and can't be understood due to extreme formatting problems, why do we need new reporting flags for that? Won't people simply downvote them?
The internet means it's easy for anyone to be a "professional". There's lots of professional (and professional-looking) content out there that's pure crap. "Peer review" sounds good but who's actually done this? You cite Swift's own frameworks as a good resource. Have they been peer reviewed? When, and by whom? 
Just wondering if you have the app running on a simulator. If so, make sure the display for it is "physical size" otherwise the regular expanded version loses a little bit of graphical features.
This is pretty funny, on a forum where people have names like "thisischemistry", "BenevolentCheese", "spinwizard69", and "Stazalicious". Are we professional? How would anyone know? Am I going to have to pass an interview to post comments, too? Or do we raise the barrier for posts, but still allow any old junk in the comments? Voting and comments have worked fine for 10+ years here. What's so special about this programming language that it needs a review board for posts?
The issue is that voting on a post starts at 1 and bottoms out at 0. In addition, post voting tends to be pretty low in r/swift which means it can be difficult to tell if a post is a bad one or if it just has one more downvote. The other thing is that a post can look good to someone with little experience but be apparent to someone with more experience. Also, some posts might seem fine with a cursory look but a detailed review brings up issues. The voting system is good for a casual like/dislike but I don‚Äôt feel it adequately rates the type of information we get on this sub. A classification system which allows for more detailed analysis and tagging might serve the sub better. That‚Äôs why I brought it up for discussion. 
If you go onto the mailing lists and discussion pages for Swift development you‚Äôll see that quite a lot of review goes into every aspect of its design. Apple also has internal code reviews and has done so for years. I know several people who have done software development there over the years and code is peer reviewed. As a professional developer for a large corporation I have participated in peer code reviews myself, both in companies and with open source projects. It‚Äôs a fairly common activity among professional developers. My point is exactly along the lines of your first one. There are many people passing themselves off as professional and it can be tough for newcomers to sort out the ones with good practices vs the ones with bad. If we, as a community, can provide better information to them so they can make informed decisions then it will help the entire community. 
&gt; In addition, post voting tends to be pretty low in r/swift which means it can be difficult to tell if a post is a bad one or if it just has one more downvote. And you think it would be *better* if posts required detailed analysis by "experienced engineers?" &gt;The other thing is that a post can look good to someone with little experience but be apparent to someone with more experience. Again, who is the judge of who has more experience and who doesn't? Are you going to start running interviews? &gt;A classification system which allows for more detailed analysis and tagging might serve the sub better. No one would participate. Every post would be pending review for days, and when finally someone reviewed it you'd be making a call based on the decision of a single person, who may or may not be "qualified" (as if such a thing exists, as if any single engineer could accurately determine the veracity and value of any given post) to review it in the first place.
Seconded
Thank you so much for all this info. I think I understood most of it, but maybe not all of it, but definitely enough to make some improvements. If I make some improvements and make a pull request on my own repo, would you be open to review that PR to see if you think I improved the code? Only one time of course, I wouldn't ask you to do that more than once.
i've never experienced side effects from inouts. 
&gt;If you are choosing not to post somebody else‚Äôs work it is censorship No, it absolutely is not. The only way you can believe this is if you believe that no one else has freedom of speech. Otherwise you not hanging my manifesto about how you eat poop on your door is "censorship" So no, choosing not to post a work is not censorship, end of story. 
Censorship is such a dirty word that paints my post with a rather broad brush. If *you* reread my posts you'll see that I'm putting this out for comments by the community at large and I'm presenting several ideas to kickstart a discussion. I'm not advocating we go on a censorship spree by a long shot. Rather, I want to find ways to encourage trust in this subreddit by properly vetting good content and correcting content with issues. It's true that we already have voting and that serves as one way to validate content. However, not everyone has the ability to understand some of the more subtle problems in content. That's why we have experts in subjects, they have the experience to more easily find issues and point them out. If we can leverage the experts we have here we can improve the good content to bad content ratio. Not only that, we can have a resource to help the people who want to produce good content and are not aware of the issues in their tutorials and articles. There have been many times I've reached out to authors to help them copy edit their work and improve their code. I'm certainly not the best programmer in the world, by a long shot, however I do have many years of development experience both professionally and as a hobbyist. I've also had my code reviewed by some pretty sharp people over the years and they've taught me so much by pointing out my mistakes. I view helping others by doing the same as paying it forward. Perhaps "best practices" is a bit of a misnomer. Software development, in general, has many ideas that have merit. Often these ideas are called "patterns" ‚Äì there are good patterns and there are anti-patterns. They often aren't very language-specific so even a young language like Swift can have good practices. Opinions on good practices will often differ so we should have a breadth of people with different ideas and opinions to share their concepts of good practices. This is different than developers who are coding in ways that are error-prone, roundabout, and likely to cause bugs and increase development times. Most times that isn't simply doing something different, that's doing something that is counter to efficiency and producing a solid product. You seem to have made up your mind about my purpose. I don't agree with your assessment about my purposes but won't argue against it, that's your opinion and the only way I can show that it is not true is through my words and actions. Hopefully we can hash out the differences between our ideas and come to something which will improve the community at large. 
Half are those are done by a Indian who says the shit in a Indglish (intentionally misspelled for a reason) that makes it impossible to understand what they say. That and add to the fact they literally ignore Apple's recommendations and do BAD BAD BAD practice. They also don't really give you the theory behind of what everything is doing. I am stuck reading the docs most of the time more than actually seeing on what the tutorial is doing. &amp;#x200B; I normally after a certain point just read the docs or a book to learn. I might use Stack Overflow every once in a while for a really niche thing (Ex: What is the link to open this app and compose an email with it?) or a error I can't solve, but most of the learning comes failing hard and caring about the stuff. &amp;#x200B;
No end of story here! When you choose to restrict somebodies post to a forum that is directly related to his post that is you censoring him. It has nothing to do with what I believe, it has to do with the word censor and what it means. By the way a certain amount of censorship already take place in this forum as they weed out unrelated and garbage posts. I‚Äôm not against making sure content here remains Swift oriented! What I have a problem with is censoring of content that is Swift related, especially if it is judged based upon someone‚Äôs ideals of correctness or good practice. For one what is good practice changes over time. For another there are usually more than one way to get things done with any systems programming language. Perhaps more important than the previous reasons is the value of education. How does one learn if his mistakes can‚Äôt be referenced? It is like working in a position where failure isn‚Äôt tolerated. You end up with a bunch of people doing mediocre work and never going the extra mile to try something new. The whole point in a Swift forum is to get people to try something new and to learn about the new kid on the block. Frankly I can‚Äôt even begin to understand how you can be so wrong with your ‚Äúno‚Äù comment. 
No, complete end of story. Choosing not to post someone else's work is NOT CENSORSHIP. AT ALL. You have no right whatever to be posted anywhere. Otherwise you chosing not to post my 50 page essay on why you eat poop is censorship.
I don't think you know what side effects means in this context lol. Declaring a parameter inout literally informs the user of the function that there are going to be side effects. 
Don't you guys thing this all is too subjective? I'm against censorship and for freedom of speech.
The problems which are you list here are trivial. The only problem can be with #4, when trolls lead newbies into harmful actions, like formatting their disk or bricking their iPhones. This can be reported even now, we don't need additional rules for that. And also, we have vote system here which will automatically punish such posts.
No relation with the author. Just wanted to come in and say that I did one of his courses (on protocols) and found it high quality. Good pace, video always on Xcode and no fluffy or slow bits. 
Okay so I'm trying to improve my code, [see here](https://github.com/Evertt/gate/pull/1/files), but I don't quite understand how you're envisioning the array of policies and making the types type-safe. I understand that some of my code is not type-safe, but that's only internally. When people talk to the library using its API everything works type-safely. So a user of my library could never make a type-error.
Thank you! I'm glad you enjoyed my POP course.
It‚Äôs how it‚Äôs supposed to be if your not a paying dev. Free dev profile expires every seven days. You need to recompile it an reupload to your device to get the app working again
Yes! Couldn't agree more. I did his "Introduction to Algorithms and Data Structures in Swift 4" and I was very impressed. Excited to get my hands on this one.
Yep, what they said. &amp;#x200B; To expand a bit if you're unaware, when it's compiled your app is signed with a "provisioning profile". As mentioned, unless you've bought a developer licence that profile will only last 7 days and you won't able to publish to the App Store.
Oh ok thank you, I didn‚Äôt know that. Every time it would crash I would go nuts trying to figure out how I could mess up such a simple procedure, especially one that I‚Äôm making using a step by step YouTube tutorial! I know better now, thank you! 
Did you guys just remembered all the code when writing code ? Or save it as a code block and paste it out when coding ?
And to think that you never told us what it did.
How did you upload it to your iPhone? Also, is this a new feature of Xcode?
I‚Äôm not sure if it‚Äôs a new feature, but yes it does exist in Xcode 10 Do you know that button somewhere in the top left part of the screen, the one which you use to create simulations of whichever iPhone you want? Well, if you have your iPhone connected to your computer, in the drop down menu of that same button, you‚Äôll see the name of your iPhone on the list as well. If you choose that, the app will download on your iPhone. :)
You just have to connect your iPhone and load the app again. The app certificate only lasts about a week so that's why it crashes. If you want it to last longer you have to buy the apple developer license that is about $99 per year. If you need any help, contact me. 
Wow... just... wow
Try www.hackingwithswift.com it‚Äôs a good place to start.
I had a quick look. It looks like the text docs that he provides have to be paid for. I will come back to it later. Thx. 
Think about it like speaking your native language. Do you memorize every sentence, or do you reach for your bag of pre-made sentences and speak them? The answer is, of course, neither. The hardest part about learning a new language, programming or human, is figuring out the grammatical and syntactic structure. But once you feel comfortable knowing what pieces do what, you feel comfortable making larger systems with the pieces you know.
First off to learn Swift download Apples manual!! It is very well written and free. Second don‚Äôt run even consider Objective C, the sooner Objective C dies the better in my opinion. I‚Äôm not what you would call a full time programmer and most of my recent work has been in Python, I consider It Objective C to be the opposite of Python when it comes to readability. In general I hated Objective C every time I had to use it. Third the APIs for iOS will be a bigger learning curve than Swift. This is pretty much the case for any windowing system but iOS and Mac OS can throw you some curves so expect to take some time to adapt. The API selection is pretty huge so make a point to see if there is an Apple supported way to do something before rolling your own or using a third party library. Also slightly related there is a quickly growing collection of third party libraries and a Swift package manager. So search before writing. Forth XCode is just another IDE! For simple projects you can get under way pretty quickly. Fifth as much as I love Python it isn‚Äôt the language to ship executables. I know that this will ruffle feathers but it is even more important on mobile where power usage is a factor. You will want to structure your software to minimize power usage else have the anger of the user community thrown at you. So you would need to use a language that compiles to native code even if Python was usable on iOS. The nice thing is that elements of Swift are not that far removed from Python in ease of use and code clarity. Six I‚Äôm on my cell phone at the moment so no links to good Swift sites. 
I dont know if everyone‚Äôs joking or being serious
Thx that was very helpful. You have answered my questions. 
No, it isn't. You are not entitled to have your article posted. And the moderators also have the freedom of speech in choosing what not to post. Literally the only way you can believe it is censorship is if you believe that no one else has the right to free speech.
If you don‚Äôt pay, you have to follow through the tutorials online. If you have 40 bucks to part with though it‚Äôs by far and away the best swift resource on the market. I bought this, ended up buying several more of his books, listening to his podcast, got a handful of his conference presentations lined up for when I get a bit of time. If you are serious about learning swift, you could do far worse than digging in to that website. 
I really appreciate you taking the time to work with my suggestions :) I'll definitely help you out! It's really strong for a person/programmer to take criticism and ideas and leveraging it to move forward. The thing with type-safety it a little more than API. So type-safety's main advantage is knowing which type is where in your public APIs, so you get compile-time guarantees that your usage is correct. Since your last commits you actually did make the Any APIs public, so at this point they can make type errors. I already did spot a few in your commit which I'll highlight in the review there. A second thing is your internal APIs, which become more complex because you need to unwrap Any. Any changes to this library may be impacted by the use of Any. And in general getting rid of these kinds of code is a good exercise for programmers. Even if it's not necessary now, it teaches you to deal with future situations better, too. Another big thing is performance, again. Using my code posted on GitHub here: [https://gist.github.com/Joannis/bc63701ea334430b03031414e93c634f](https://gist.github.com/Joannis/bc63701ea334430b03031414e93c634f) As you can see the difference in performance from using `String` or using `Any` is significant. The any type needs 2x (on debug) and 3x (on release) more performance using the Swift 4.2 compiler bundled with Xcode 10. This becomes less important as your code is executed less often. I didn't measure it, but I'll suspect your more complex types with generics will suffer more. So I definitely think it's worth the effort to get rid of Any in favour for a cleaner codebase.
Or jailbreak and re-sign it automatically with ext3nder 
Using autolayout is retarded at this point (if your starting from scratch) when there things like this available. I converted some of my components from snapkit to facebook yoga with this flexlayout library, the layouting code was cut 5 to 10 times depending on the component. Best of all performance was significantly improved. I notably had a tableview that was using automatic row dimension with autolayout that was not scrolling at 60fps on all devices, not shit is blazing. But as you say, people will be salty that their beloved autolayout, that they spent a lot of time mastering, is no longer king. Hell I am a snapkit contributor myself, but you have to be realistic...
I mean facebook yoga is pretty great, it's more expressive, more flexible and much, muchhhh more performant than autolayout. There is literally no argument for using snapkit/autolayout if you're starting a new project from scratch. But cucks will be cucks and downvote, I stopped caring about karma (that is if i ever did?) a long time ago. This dumb website is made to restrict speech and enhance sheep mentality, aint having it. 
As /u/MetalGearCliff said, the download isn't free, but you can read online. The online projects are identical to the download edition, but the download includes some extras such as revision material, extra detail on key points, and challenges.
Thank you for the glowing review! I'm glad it's been so helpful :)
[CS193P](https://itunes.apple.com/us/course/developing-ios-11-apps-with-swift/id1309275316) sounds perfect for someone with your level of experience. 
**import** UIKit *//var index : IndexPath?* **var** index2: Int! **class** myCell : UITableViewCell { **@IBOutlet** **weak** **var** Label1: UILabel! **@IBOutlet** **weak** **var** Label2: UILabel! **@IBOutlet** **weak** **var** image1: UIImageView! **func** commonInit(imageName: String) { image1.image = UIImage(named: imageName) } } **class** TableCiewControllerTableViewController: UITableViewController { **var** number = \["1","2","3","4"\] **let** transportItems = \["sect1","sect2","sect3","sect4"\] **override** **func** viewDidLoad() { **super**.viewDidLoad() } *// MARK: - Table view data source* **override** **func** numberOfSections(in tableView: UITableView) -&gt; Int { *// #warning Incomplete implementation, return the number of sections* **return** 1 } **override** **func** tableView(**\_** tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { *// #warning Incomplete implementation, return the number of rows* **return** number.count } **override** **func** tableView(**\_** tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { **let** cell = tableView.dequeueReusableCell(withIdentifier: "transportCell", for: indexPath) **as**! myCell cell.Label1.text = number\[indexPath.row\] cell.Label2.text = transportItems\[indexPath.row\] **return** cell } **override** **func** tableView(**\_** tableView: UITableView, didSelectRowAt indexPath: IndexPath) { performSegue(withIdentifier: "test", sender: **nil**) **self**.tableView.deselectRow(at: indexPath, animated: **true**) } **override** **func** tableView(**\_** tableView: UITableView, heightForRowAt indexPath: IndexPath) -&gt; CGFloat { **return** 60 } } //collection view **import** UIKit **var** imageArray = \[String\] () **var** ima = \[ObjectColl\] () **class** ViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout { **@IBOutlet** **weak** **var** collectionView: UICollectionView! **var** imageName: String! **override** **func** viewDidLoad() { **super**.viewDidLoad() collectionView.register(UINib(nibName: "QuranCollectionCollectionViewCell", bundle: **nil**), forCellWithReuseIdentifier: "collectionCell") collectionView.delegate = **self** collectionView.dataSource = **self** imageArray = \["im1","im2","im3","im4"\] *// Do any additional setup after loading the view, typically from a nib.* } **func** numberOfSections(in collectionView: UICollectionView) -&gt; Int { **return** 1 } **func** collectionView(**\_** collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int { **return** imageArray.count } **func** collectionView(**\_** collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell { **let** cel = collectionView.dequeueReusableCell(withReuseIdentifier: "collectionCell", for: indexPath) **as**! QuranCollectionCollectionViewCell cel.configure(with: ObjectColl(im: UIImage(named: imageArray\[indexPath.item\])!)) **return** cel } **func** collectionView(**\_** collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -&gt; CGSize{ **return** CGSize(width: collectionView.bounds.width , height: collectionView.bounds.height ) } &amp;#x200B; // collectionViewCell with nib file **import** UIKit **class** CollectionView: UICollectionViewCell { **@IBOutlet** **weak** **var** viewQ: UIView! **@IBOutlet** **weak** **var** ImgS: UIImageView! **func** configure(with photo: ObjectColl) { ImgS.image = photo.im } } with this code when I click on each row on tableview I get \["im1","im2","im3","im4"\] my problem is: i want when click on row 2 for example i must have im2 not \["im1","im2","im3","im4"\] &amp;#x200B;
Seems pretty fun. I bought today my Mac to try getting into Swift as hobby - let‚Äôs see. Any newbie tips for swift (I know a lot of stuff in python)?
It already has been used on the Linux platform in various backend applications.
Yes: https://github.com/Thomvis/BrightFutures
IIRC objective C was too, yet it's dying a slow death. 
Nope. Unless it begins to go into AI and compete with Python. Swift is fast and there‚Äôs no reason why it shouldn‚Äôt overtake Ml. 
Yes, once they fix SourceKit/autocomplete and have it integrate well into many other IDEs, the language will be top notch. The language is already great, it's the tooling that's fucking awful. Refactoring never works, half the time I cannot see the type of the functions/vars I am using, etc. Lot's of stuff to fix.
If they get ABI stability and get built times down it stands a chance.
Objective C support has always been terrible on Linux, and I've literally never heard of anyone using it seriously. Also, it's dying because *Swift is replacing it*. 
I think Python is big in ML because: - Specialized libraries are used, so the main language's speed doesn't matter that much. - There's no need to compile anything. - For the case when you *do* need to do computational stuff, Python already has a bunch of numeric libraries. I'd say Julia is a far bigger potential competitor than Swift here. 
Yes! It's been slow to be adopted outside the Apple ecosystem, because it's still in an awkward state on other platforms. However, it's steadily starting to improve. That being said, Swift probably has a bright future even if it's never used outside the Apple ecosystem. 
True, but apple can just as easily move to a new language, and swift will disappear like objc.
Objective C isn't just being used less and less because there's a new alternative. It's because Swift is better than Objective C in pretty much every way. In contrast, if Apple randomly decided to make another language, they'd have to convince everyone that it's better enough to make a move worth it. Even then, they stuck with Objective C for ages. There's no reason why they'd ditch Swift. 
I love Swift, but it won‚Äôt in its current state. I‚Äôm really looking forward to how ABI stability will change things, but for now getting dev environments set up anywhere other than macOS/Ubuntu is a pain, and a very poorly supported pain at that. Package management is also lackluster.
People don‚Äôt really jailbreak anymore. Not since we started doing online banking and 2FA on our devices.
Yes which is remarkable considering it‚Äôs a shit pile with last decade IDE support and tooling.
Thats not what i meant. I mean a framework which has specific folder and modules for controller, views, routing, etc
You are right and there is progress on that front with Swift and TensorFlow. https://www.tensorflow.org/swift/
You need to be more specific on what it is you are looking for. You named all server side frameworks in your examples. Swift is primarily used for Apple platform development with a few. Somewhat popular server-side frameworks
What you are asking for isn't really applicable to iOS development, unstick yourself from the web - they aren't equivalent. UIKit/Cocoa Touch has everything you need.
Swift is the new Objective-C. You use it for building native apps for Apple products and that‚Äôs it. That‚Äôs not a bad thing, it‚Äôs a tool. I really enjoy Swift, but wouldn‚Äôt ever use it on the back-end. I‚Äôd much rather use node for that.
https://www.objc.io/books/app-architecture/
UIView, UIViewController, UINavigationController, UITabBarController, Storyboards, Xibs, Auto Layout, Core Data, the list goes on. UIKit and the Core frameworks provide a complete application framework, for all layers of MVC, plus a whole bunch more. You can pick and choose which parts you actually want to use, the same as with any other unopinionated framework. It is exactly what you're asking for. 
&gt; Why is that? If there are any frameworks like this please comment and share. Because you've missed the most obvious one, that makes creating any more pretty much a waste of time. UIKit and the Core frameworks cover the full breadth of app architecture. iOS and Xcode ship with the framework built in, ready to go, no extra installs required. 
That isn‚Äôt a rational argument. The fact is in the near future people will be interacting with AI technology to program. That doesn‚Äôt mean Swift dies, this especially on Linux where it is being adopted for its advantages over dated solutions. In any event your previous statement about Objective C are misleading. Objective C never saw serious use on Linux as frankly far better tech existed in C++ and Python. Further Objective C came to Apple via Nextstep and there it was used In the very early years of the Industry trying to improve C. Apple adopted Objective C it really was never ‚ÄúApples‚Äù technology. 
It is in an awkward state on Apples platforms. People seem to forget just how new the language is. After a major reworking around version 3 it has just got to the point of being reasonable stable as core language features go. 
The problem is it isn‚Äôt the new Objective C. Objective C was developed long before Apple took on Nextstep and the intention was to produce a more modern C. The problem is C++ matured into a much better product. Swift on the other hand was started by Apple as a systems programming language that would adopt modern techniques. Their making it open source has lead to a significantly different language than what they started out with. It really does have the best of many worlds with nothing really simple n the same league at the moment. As a result Swift is in a good position for wider adoption and in the industry. 
I think this point of view flies in the face of reality. Swift is very much community driven as such there is little to stop people from using it on other platforms. Just like MS couldn‚Äôt stop Python or the demands for a proper C++ compiler. Swift right now is perhaps the best language to replace Python as a universal language seen on all machines. It has ease of use, modern features and speed. However if anybody expects this to happen overnight they are mistaken. It took Python years to get the position it is in now. 
It is bullshit like this that people need to watch out for. You can go to https://swift.org/download/#releases and see that Ubunutu has been supported for a very long time. On Fedora DNF can install it for you no problem. It is shocking that so many bits of misinformation have been posted in this very short thread. 
Okay. Now it clears my confusion in this topic. Thanks all
It's not the same, but you can find a transcript of it [here](https://asciiwwdc.com/2010/sessions/424)
Thanks, I know about it, it's the first link in google.
Seems like a question for /r/datahoarder 
You can install it on linux, but developing swift programs on linux is hell. Editor support is nonexistent, sourcekit is broken, ... You're basically left with only syntaxic coloration.
What video is it?
&gt; although the chances of anyone being able to do anything malicious with that exploit is pretty slim already Right. That specific exploit will be patched, but you‚Äôre installing unsigned and unathorized binaries from cydia. All it takes is one malicious package masking as a useful thing to compromise security. End-users cannot be trusted to verify a binary is safe, which is exactly the reason why iOS is locked down in that regard in the first place.
Core Animation in Practice, Part 1
Thanks, this is what I was looking for! The video is called "Core Animation in Practice, Part 1".
Back to 2012, the videos are available by editing the year on this URL: https://developer.apple.com/videos/wwdc2012/ Prior to that, the videos were distributed through iTunes so they‚Äôre harder to find.
Helpful answer. Need more votes.
I would strongly disagree that C++ is better than Objective C. I've written quite a bit in both. My POV. 
You can install unsigned applications on macOS and it's still considered secure. As long as you're not using sketchy pirate repos, you're not going to have any security issues with jailbreaking.
&gt; apple doesn't build optimised compilers for it anywhere else(or atleast i don't know of any) &amp;#x200B; You sure know that it's an LLVM language, right? Basically uses the same compiler as C++, Rust and others... &amp;#x200B; &amp;#x200B; &amp;#x200B;
&gt; it‚Äôs still considered secure. It‚Äôs not considered secure. The option is just there because it has to. The default settings on macOS only allow you to run signed binaries.
Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.
You're alone in that opinion. Running sketchy software that you downloaded from the pirate bay is insecure. Having the ability to run whatever software you want without having Apple hold your hand and tell you everything's going to be alright is not inherently insecure. All that the requirement for signed apps does is make you put your blind trust in Apple and the dev, instead of just the dev. It also stops you from taking trust out of the equation and reviewing the source code yourself, whereas the vast majority of jailbreak tweaks are available for review on github. If you really are aiming for the utmost in security, you'll want to be verifying and compiling every single program you'll be using.
just curious, why are you looking for videos from that long ago?
I really like that. Also I think that would decrease number of iOS, tvOS, ... specific articles/questions and focus more on actually Swift-specific stuff.
An optional is one approach, but if you wanted to be more explicit about the "error" case you could return an enum instead of an index, e.g. enum PossibleIndex { case valid(Int) case overshoot } this way in the code you will switch and it will be clear what the lack of a valid index means 
&gt; sometimes a bad subscript can be generated--this randomness is by design. It's a kind of flaw in the gremlin's constitution. I want to throw an exception that can be caught by the higher-level code so the gremlin can die of overshooting himself in the foot. You aren't describing an error condition. As you say, it's by design. So don't use Swift's error handling for this. If you want a value to indicate the gremlin is shooting himself in the foot, then check for that value instead of using a bad subscript to intentionally trigger an error. &gt; I'm open to any kind of ideas for passing an error up to the higher layers that doesn't result in a lot of cumbersome `try` If you want to return a value to the calling code, use `return`. 
It's not as simple as python, but IMO it's easier to write correct and maintainable code in Swift. Plus you don't have any pyenv nonsense to deal with.
Swift is a fantastic general-purpose language. I am now using it as my primary development language for command-line tools and web servers.
It's not as simple as python, but IMO it's easier to write correct and maintainable code in Swift. Plus you don't have any pyenv nonsense to deal with.
Well, it depends if you want or not the side effects. They are not good or bad, you should be the one deciding if you want them. Stating your input parameter as inout implies that you understand and want the side effects. 
Did they fix the compile times? Because that should be a deal-breaker for almost everyone who‚Äôs aware of it unless everyone‚Äôs apps here are just really simple CRUD apps. I‚Äôve worked on massive apps that took forever to build, and we didn‚Äôt use Swift simply because compile times would be tremendous (plus Swift is constantly changing, or in other words, unstable).
OS X hasn't been the correct name for quite a while anyway.
Once they add Windows yes!
Personally, I don't have any issues with compile times so I can't comment on that. [ABI stability](https://swift.org/abi-stability/) - the issue with Swift being *unstable* you mentioned - is [scheduled for Swift 5.0](https://swift.org/blog/5-0-release-process/)
I agree that Swift isn‚Äôt similar to Objective-C as a language. My comparison was in that l don‚Äôt believe it will make much of an impact outside of the Apple ecosystem. I‚Äôm all in on iOS development, but I would much rather use other languages on the server. I recently left an engineering position at Apple and I can tell you that the team I was on didn‚Äôt use Swift for server-side processing and wasn‚Äôt considering it. If you love Swift outside of app development, terrific, but for now its certainly niche, and may always be...
Does "registered" == "paid"? Or is a free dev account sufficient?
What else can Swift be used for? Humor me, for the sake of having a conversation vs using Google.
You really shouldn't be using exceptions as control flow mechanisms. It's both generally bad practice in most languages but also usually incurs a performance penalty. Use an optional instead which would give you the same control flow but in a much better method.
And server side programming.
It‚Äôs a general purpose programming language, so it can be used for pretty much anything. Whether it is a good choice for a specific use case or not is a separate question.
&gt; You‚Äôre alone in that opinion. I am not. If I was, then why would Apple engineers choose to impose a total lockdown of binary execution on iOS, prompting you to want to jailbreak?
Doing my intro to app development, part 9 atm
Sometimes learning the basics as they were intended when first created is important. Also, not everything from one video is in the next.
...that's used 99% of the time for iOS, macOS, tvOS, and watchOS apps. I love its potential for server-side use, but I just don't see a lot of it yet in the Real World.‚Ñ¢
Well, in that case we should never use anything ever. 
It is now open source, and its compiler emits LLVM IR, so it can be used in any platform there is an LLVM compiler for.
I would be dying to use Swift in real-world cross-platform applications, games included. I loved to use it to program games, I wanted to use it elsewhere.
Side effects are almost always bad and if you strive in your programming to avoid them you will write better, more maintainable, more understandable, and less error prone code. There is a reason modern languages have gone from having 'inout' being intrinsic to requiring explicit definition. 
Thanks, I'm not an expert and not sure why I was downvoted. &amp;#x200B;
no, if i have to print out the title inside each question it shows error
Wait so what else can you do with swift outside of Xcode 
[Tensorflow](https://www.tensorflow.org/swift/)
[Tensorflow](https://www.tensorflow.org/swift/)
Free is always sufficient until you want to publish a paid app.
If folks were not aware, this is the description in the Swift man page. I think it‚Äôs a better description for the subreddit, and I‚Äôll change it to this.
Or until you want to use an api that isn‚Äôt included in the free version like NFC or iCloud. 
Xcode support has been great for Swift, but a community depending on just a single editor is a vulnerability to long term usage (imagine if Apple ever gave up on Swift; development of the preeminent Swift editor would die). The recent [October 15 announcement](https://forums.swift.org/t/new-lsp-language-service-supporting-swift-and-c-family-languages-for-any-editor-and-platform/17024/2) that Swift will be supporting the open-source LSP language service will go a LONG way toward building Swift support in other editors. This hasn't yet been done, but it is a huge step toward making Swift tools like syntax highlighting, and code completion ubiquitous among source editors that have adopted LSP. In itself, adoption of LSP won't make Swift a ubiquitous development language on Unix/Linux/BSD platforms, but it will remove the dependence on Xcode and Mac OS as the only serious platform for Swift development.
Would like to +1. I adore Swift but the compile times are just atrocious compared to something like C/C++, and the binaries aren't exactly as fast either given the time it takes to load the Swift Standard Library on the first invocation
Server-side Swift is getting better. You can easily create APIs with many different frameworks including a new one by Amazon called Smoke. Swift can also run on embedded systems or something like a Raspberry Pi / Arduino. 
I've seen numerous still manage to make front page, all the same...
Not to detract from the LSP announcement, which can only improve things, but JetBrain's AppCode and Clion are both alternative IDE's with production-ready Swift support. Clion is particularly notable in that it has no association with the Apple ecosystem.
You can do so today if you want. Just ad a shebang line to your script. For example: #!/user/bin/swift as the first line in your file. You need to use the correct path for Swift on your system of course. Obviously Swift is still developing so the wide array of libraries does not exist yet. However you can accomplish much right now with Swift as a scripting language. 
Well it is mostly the fact that industry chose C++ over Objective C that lead to that statement. Either one of them has been eclipsed by modern technology though. The one thing C++ has going for it is modernization and standardization which is a huge advantage in my book. 
... and found it lacking in UI, Editors, Tooling would be my best guess.
That is true for every language that has come to Linux. Like all things Linux pick a problem area and work on it. 
&gt; Did they fix the compile times? Maybe you need to upgrade your CPU. Did they tell you that Intel machines weren't getting any faster recently? They lied.
&gt; but developing swift programs on linux is hell Using Linux as a desktop OS... just... Do you understand that once you make a swift program on macOS, you can run it on your Linux server or command line environment? Generally speaking, people are interested in using Linux as a server OS, not a desktop OS. 
Is Swift usable on Linux yet? Because I don't have a spare Mac sitting around to use as a server.
Try pasting the JSON into this web app : https://app.quicktype.io , it will generate the Decodable Swift code from the JSON, you can then compare the output with your own code. Hope this helps!
Yes, Swift is fully supported on Ubuntu. You can find all the releases at [https://swift.org/download/#using-downloads](https://swift.org/download/#using-downloads). There is also [docker support](https://github.com/swiftdocker/docker-swift) which makes it easy to mess around with in any OS. **Note:** Here's an post detailing that official docker support is coming from [Swift.org](https://Swift.org): [https://forums.swift.org/t/kickstarting-new-official-docker-support-for-swift/15487](https://forums.swift.org/t/kickstarting-new-official-docker-support-for-swift/15487).
Yes you are right. You will create a new struct for every nested object.
No, you can't. You will have to make some tweaks as stuff like ObjC bridging isn't supported, and thus there is a lot of unavailable stuff. If you look around the most popular libraries, they have if guards to support linux: chances are your program will also need some And your comment about desktop linux is downright stupid. Many developers are using desktop linux, sorry to burst your bubble.
Yeah but some of these languages got cross platform tools. For example, Microsoft made VS Code cross platform, and since TypeScript and their LSP implementations are all written for node, they work on linux. Same goes for Golang tools, they're not cross platform. Apple started working on a swift LSP for a reason: they must give linux users better tooling themselves, otherwise people will keep working on languages like Rust or JS
working through a udemy course and looking to extend one of the lessons. trying to get an output either print statment or IBOutlet from a function, any help would be great. **import** UIKit **class** ViewController: UIViewController { **@IBOutlet** **weak** **var** diceImageView1: UIImageView! **@IBOutlet** **weak** **var** diceImageView2: UIImageView! **let** diceArray = \["dice1", "dice2", "dice3", "dice4", "dice5", "dice6", \] **var** randomDiceIndex1 : Int = 0 **var** randomDiceIndex2 : Int = 0 **override** **func** viewDidLoad() { **super**.viewDidLoad() } **override** **func** didReceiveMemoryWarning() { **super**.didReceiveMemoryWarning() } **func** updateDiceImages() { randomDiceIndex1 = Int(arc4random\_uniform(6)) randomDiceIndex2 = Int(arc4random\_uniform(6)) print(randomDiceIndex1) diceImageView1.image = UIImage(named: diceArray\[randomDiceIndex1\]) diceImageView2.image = UIImage(named: diceArray\[randomDiceIndex2\]) \##### the problem **if** Int(randomDiceIndex1) = 0 &amp;&amp; Int(randomDiceIndex2) = 0 print("snake eyes") } **else** { print("roll again") } } \#### **@IBAction** **func** rollButtonPressed(**\_** sender: UIButton) { updateDiceImages() } **override** **func** motionEnded(**\_** motion: UIEventSubtype, with event: UIEvent?) { **if** motion == .motionShake { updateDiceImages() } } }
I thought there was still some missing things from Foundation. Was that finally handled? Legitimate question as I‚Äôm unaware if that changed
https://www.ibm.com/cloud/swift
This is amazing thank you so much!
Add a tap gesture and ensure isUserInteractionEnabled to be true
Apple doesn‚Äôt have to do anything really the language will survive on its merits or it won‚Äôt. In any event the language is really young yet, it hasn‚Äôt even been rolled into the larger LLVM /Clang project yet. I really think people are expecting way too much from the Swift project. Consider how long it took C, C++, Python and some other languages to develop the infrastructure they have. In its current form (the overhual around the Swift 3 / 4 time was pretty huge) Swift is a little over two years old, I‚Äôd have to say that they have actually accomplished a lot. Is it perfect, certainly not, it is however pretty good for its age. 
When you set that on a fetchRequest only the immediate items in the fetchRequest won't be returned as faults. Your forms are not faults, all your forms will be loaded into memory. As the other poster said, in CoreData a fault is not an error, just an object that has none of its properties filled in. If you access any of its attributes or relationships it will be resolved automatically and transparently (i.e. you don't have to do anything). That's done for performance reasons, you usually don't want all objects expanded in memory. For example there's no need to load 10,000 forms into memory if your tableView just shows 20 at a time. The default implementation of description, which you are calling by your print call, does not access any properties. It's specifically build to not realize faults, for performance reasons. You should really consider if you actually need to "unfault" these objects. You usually don't need to. If you actually need all the questions everytime you do this fetch, you could tell the fetchRequest to prefetch the questions. request.relationshipKeyPathsForPrefetching = ["questions"] That's probably a more reasonable idea than to fetch and expand all forms. But as I said, it depends on how you use the object graph. Recommended reading: - Faulting and Uniquing: https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/FaultingandUniquing.html - Decreasing Fault Overhead: https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/Performance.html#//apple_ref/doc/uid/TP40001075-CH25-SW7
I agree that if Swift can replace Python, no one can stop using it. Swift can aim Python's position. That's pretty possible goal, and I want it too, and it's somewhat likely to happen if Swift can support more platforms. So far, number of supported platform is mediocre. As more people realize benefits of static checks, I believe that Swift has more chance to replace Python or any other higher level language. But for lower level, there's strong competitor -- C++/Rust. So far, Swift and Rust has their own strong and weak points. And I believe Rust is doing better in these area. - Static checks. - Code generations. - Package manager. - Command line ecosystem. - Memory control. - Supporting more platforms. I'd not talk about C++ because it is currently dominating the lower level market. In my opinion, Swift can take dominance in more higher level areas, but in question for lower level markets where C++/Rust stands in. Swift can cover and deal with some lower level stuffs, but performance and safety cost is still very high. I mentioned zero-cost C++ inter-op because that can be a killer app in the market. Without such weapon, influence of Swift would stop at somewhere from high to mid-low level programs. That's still great and bright, but that's not "everything" :) 
##r/apple --------------------------------------------- ^(For mobile and non-RES users) ^| [^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| ^(-1 to Remove) ^| [^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/853qg2/ignore_list/)
thanks for the detailed answer and the links as well, i thought there is something wrong with the method i used to save the data
Looks good!, thanks for sharing, how it compares with VLC?
Username checks out
consider setting the navigationController.navigationBar.titleView with a button of your own.
Sooo, did you have a PI following you? or is did you find some other source of the "Good afternoon" messages?
Wtf does this have to do with swift?
Just put a hidden button 
What OP is describing are Errors, not Exceptions (which Swift doesn't support), and I don't know why you think they "usually incur a performance penalty". Isn't the whole point that they don't?
If your button is not perfectly align to all screen sizes is because you're not using LayoutConstraints, or if you are, you're attaching them to the wrong elements. Regarding a more elegant solution, add this to viewDidLoad(): let tap = UITapGestureRecognizer(target: self, action: #selector(didTapNavBar)) self.navigationController?.navigationBar.addGestureRecognizer(tap) Then, somewhere else on your ViewController, add this: @objc func didTapNavBar() { print("user did tap navigation bar") }
Oh my bad. I was jumping between languages and got them mixed up
There will still be a language called "Swift" but if they keep changing the syntax every year will it still be what we'd consider Swift today? "I don't know what the language of the year 2000 will look like, but I know it will be called Fortran." --Tony Hoare, 1982 
It certainly seems to be spiraling down the drain.
I would start with a UICollectionView with a custom cell that has two buttons on it for the up/down. I don't think I've done one like that. You could to a gesture for the up/down, kinda like the swipe left/right, but that could be a problem if you have those to remove someone. One other option is the pressure menu. I bring this up because I'm not sure the +/- on each cell is a great UI/UX. It takes screen real estate. IMO, there's at least two aspects to developing a great app. One is making it functional and they other is a great UI. If you do your logic well, changing the UI shouldn't be a big problem, however, that means all the layout you've done will have to be reworked. So it's worth thinking about a great UI layout. Looks like an interesting project, I think the collectionView is the right choice, get that working with custom cells and you should be on your way.
Wow must have hit a fanboy nerve.
Works great! Thank you!
Thank you for the replies, I'm excited to go forward. 
Awesome. Thank you for the post, highly appreciate it and saved for future reference! That does make sense in terms of usability though. If those are finally ported over we'd be in a much better state. I'm optimistic for the future though after Swift 5 and ABI stability is achieved.
How can you claim that developers only move to a language if it's "better", when the entire history of computing is littered with examples of mediocre languages propped up by the mere luck of being the primary language of a popular platform? Objective-C was and is one of the most popular languages in the world, purely because of its place on the iPhone and Mac -- nobody on any other platform used it for any significant projects. Swift is in the same position so far. Javascript is not the best dynamic language (to put it mildly, ahem) yet is perhaps the most used language in the world because it's in every web browser. Visual Basic and Microsoft Basic got a similar boost. Unix brought C, and Windows brought C++. There's relatively few popular languages today that *didn't* come to us as the language of choice for a popular platform. If Apple in 5 years said that the future of their platforms was (pick anything...) Go, is there anyone who doubts that millions of developers would immediately start learning that? I've written large applications for Apple platforms in Swift, and it's certainly not because Swift is the best language. It's just the best way to talk to AppKit/UIKit.
Clear and well-written article! üëç I think it's likely that when people imagine an interface they imagine the visual aspects and don't even take into account haptic feedback. The company I'm at is about to redesign our app to be more user friendly, and I don't think we've even DISCUSSED it. It isn't annoying to the user unless overused and can be used to create a delightful in-app experience. Thanks for the article! 
Its Machine Learning good enough for you? &amp;#x200B; [https://codelabs.developers.google.com/codelabs/tensorflow-for-poets-2-ios/#0](https://codelabs.developers.google.com/codelabs/tensorflow-for-poets-2-ios/#0)
Thank you but what is special about it? Tensorflow is already written in Python and There will be Tensorflow JS. And maybe in other languages too. 
Hello , i am a none developer and i have Zero programming knowledge but I really want to learn coding with swift , is there any good online courses out there you can recommend guys ?
I did the same, although both Swift Error and NSException have their similarities. It's an easy thing to confuse. In fact the Swift Programming Language has [this to say](https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID512): &gt; Error handling in Swift resembles exception handling in other languages, with the use of the try, catch and throw keywords. Then they go on to highlight the differences, which shows there isn't much of a performance penalty: &gt; Unlike exception handling in many languages‚Äîincluding Objective-C‚Äîerror handling in Swift does not involve unwinding the call stack, a process that can be computationally expensive. As such, the performance characteristics of a throw statement are comparable to those of a return statement.
No, it's really not. In fact, in a language with tuples and throws, I can't think of a way single situation when inout is *ever* a good idea, period. It's an anti-pattern, plain and simple: it creates far more problems than it solves. The sooner you learn this, and the sooner you learn *why* this is, the better programmer you'll be. 
I‚Äôm a high school student trying to use my love for Physics and love for computer science to make an app that will display accelerometer, magnetometer, gyroscope, light sensor, barometer, compass, and sound intensity data all in real time. This is my first coding project (other than nongraphical C) and so far I couldn‚Äôt be struggling more. 
No clue, this is not a law sub. I'd ask on one of those.
Don't those subs have policies against giving law advice?
No clue, I don't visit them. However, this sub is about Swift and not about law.
they should be illegal everywhere, at least for anyone below the gambling age. &amp;#x200B; a good game needs not for loot boxes.
How is a loot box different from buying credits so you can get five more moves in a match three game?
It isn‚Äôt much different at all and it‚Äôs a shitty way to make a fortune but people are gullible so what are you gonna do ü§∑üèª‚Äç‚ôÇÔ∏è
Buying to get something vs Buying for a chance of getting that something
You cannot inherit from two classes (UIResponder and CMAccelerometerData). This is referred to as multiple inheritance. You can however inhertit from multiple protocols (UIApplicationDelete) If you want to inherit from CMAccelerometer data, you'll need to that somewhere else. Make your own child class and create an instance of it. 
Do this in the respective View Controller file. Take a look at this: https://www.hackingwithswift.com/example-code/system/how-to-use-core-motion-to-read-accelerometer-data
Or publish a free app for that matter
Thanks for the feedback, if you want to send me which word are worded strangely I‚Äôll correct the article, sorry but English is not my native language and writing clear posts is the most critical thing. 
Udemy with Angela. Just started the course about 3 weeks ago, little over halfway through. It's $11, totally worth it. She runs a bootcamp out in London so she knows what people need to know when just starting out. Then you'll get another load of resources from her that will keep you really busy. After that, you will start getting the feel of what you need. I will add, it helps if you have a couple app ideas in mind and to start building those as you gain knowledge since the best way to learn is to build. 
Without seeing more code it's unclear why you want the AppDelegate to inherit from the `CMAccelerometerData` class. It's also unclear why you want a custom private `application(_: didFinishLaunchingWithOptions)` function that replaces the `UIApplication` variable with a `CMMotionManager`. In addition to this, you need to add parenthesis to the end of the `let motion = CMMotionManager` declaration and move the declaration, plus the `startAccelerometers()` function outside of the `application(_: didFinishLaunchingWithOptions)` as anything put after a `return` statement won't be actioned. It should look like this; let motion = CMMotionManager() func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool { // Override point for customization after application launch. return true } func startAccelerometers() { if self.motion.isAccelerometerAvailable { self.motion.accelerometerUpdateInterval = 1.0 / 60.0 self.motion.startAccelerometerUpdates() } }
What you are looking for is probably the Apple framework *MultipeerConnectivity*. There are a few tutorials easy to read out there ;) If it is not good for you, then you probably need to go to a lower level and use only Bluetooth (faster than wifi usually but more restrictive) with CoreBluetooth or even BluetoothLE (extremely restrictive).
Well you are going to run into problems sooner or later with this setup. cell's are being re-used so when you scroll past the re-use point they will lose the checkmark it will lead to weird results. I need to see some more code to help you out.
MultiPeerConnectivity should work great for you. Take a look here https://www.objc.io/issues/18-games/multipeer-connectivity-for-games/
Check out www.hackingwithswiff.com. Some people are decent developers after a few years. Some people never become decent developers. I think that it usually takes at least five to ten years before someone knows what they‚Äôre doing when it comes to building software. 
If you already have (a little) object oriented experience I would suggest the Stanford Swift/iOS11 course. It‚Äôs available for free on iTunesU and YouTube, and explains very well how to build your UI‚Äôs and use Swift features.
Agreed with Te\_co, and this populism "the better programmer you'll be" is something you can sell to beginners, I haven't seen one valid argument. 
So you want hit detection on a sprite?
Are there any online source with exercises to code applications on your own?
Man, that logo is really nice...
I don‚Äôt know the technical details, but I ised to play a GREAT iPhone game called Spaceteam. You would sync up with other iPhone users via local wifi or bluetooth and everyone had a control panel and would shout out instructions on their screen that woupd be applicable to someone else‚Äôs control panel. Super chaotic and silly. Lots of fun. Anyhow, it can be done!
There is no peer-to-peer BT classic solution available on iOS AFAIK. Bluetooth classic uses the EAAccessory protocol, and requires a MFI (made for ipod) license and approval for apple (the accessory that is). You'd have to use BLE.
Too much emphasis on giving accurate estimates and hitting them. In my experience tasks break down into near-trivial customizations of existing code and original, creative, work where, because it is new, you don't know how long it will take. How much time do you anticipate needing for unanticipated problems?
Excellent article and analogy ‚Äì and a fun read!
I'd argue that being able to provide good estimates is one of the most valuable skills in any professional environment, especially in programming and other engineering fields. Yes, you can almost never anticipate every activity accurately but you can at least come up with a decent common case and account for some surprises. It's also called an estimate, it's not a promise. You're giving information to the other people involved in the project so they can plan their parts. Everyone should understand that schedules sometimes change and should add that into their own planning. Any professional that can consistently provide tight and accurate delivery on their estimates can and should demand more for their services because their increased professionalism allows for better planning and delivery. It's not the only skill a developer should have but it goes hand-in-hand with experience and ability.
just to clarify this: at the moment my guess is this is the issue my App is terminating with uncaught exception. This is why i posted this in /r/swift 
Crash logs? Debugging?
Since this is iOS how should i debug it? The main fact is not my own app the main fact is the status bar issue. 
If you're not the developer then why are you posting on a developer sub? Report the issue to the actual developer.
I am the developer but not of iOS dude. nvm... thank you for your good infos. 
You're saying that you think the operating system is interacting badly with your app that you develop? It's certainly possible. You could use the macOS Console app to take a look at your device logs: [Console User Guide](https://support.apple.com/guide/console/welcome/mac)
Thank you for the concise reply ! (Really.). I too have read some Robert Martin. I see you point of view, and agree with most of it. Fair points. One example for using inout would be recursion. 
I have no idea who Robert Martin is. &gt; One example for using inout would be recursion. Can you give some example code to illustrate your point?
Thanks i will have a Look tomorrow at work. I will let u know if it Helped :) 
Did you ever report a bug at the Apple Bug Reporter ? In my opinion it is Really pain to do so. You get no response from Apple. I have an open Bug Report since April and nothing ... 
Is it an intermittent issue or do you have steps to make it repeatable? Does it happen in a certain version of iOS? Do you see it in the simulator? You have to try to isolate out every bit of information that you can about the bug. If you find anything concrete then try posting it here and maybe someone will have a better idea what's going on.
Your code looks good, however this is not something I worry about too much. Yes, there is a cost associated with creating a `DateFormatter` but there are very few instances where the cost will seriously impact the speed of your app. Unless you're rapidly creating a bunch of them I wouldn't bother optimizing around them. The first rule of optimization is to create the simplest and most clear code. Then profile your app and see where there are significant slowdowns. Get the low-hanging fruit and major cases first, then evaluate whether you really need to go after stuff like `DateFormatter`. Most times you'll find that the extra time and complication in being more efficient is just not worth it.
Thanks for replying. I tried to reproduce the issue many times and it only happens from time to time that my App Crashes. I will go on tomorrow and hopefully get some more Details. 
Eh... &gt;The above results show that when converting 100 dates, reusing a DateFormatter instance is \~37% faster than creating a unique DateFormatter instance for each conversion. While in real terms the difference in time isn't much, as a percentage the difference is pretty conclusive that reusing a DateFormatter instance is significantly cheaper. You kind of mentioned this, but a 37% difference in this case is pretty much meaningless. It's actually much less than I expected, to be honest. Most of the time is still being spent doing the actual formatting.
This might be different from person to person, but I believe the best moment to start developing an app is *when you feel like it*. You have an idea about an app you'd like to make? Start coding it. Inevitably you'll run into a wall sooner or later. That's when you go back to the "classroom learning" to study the concept you had problems with. Once you learn that and overcome that obstacle, back to coding. Until the next problem. Rinse and repeat until your first app. It won't be perfect (it will never be) but it'll be a huge step forward. There's always room for improvement. Classroom learning, courses etc. are great when starting out, I agree. But the only way (at least for me) to actually assimilate the concepts is to use them in a real scenario. Again, this is just how I started and I'm interested in reading other developers' opinions on the subject. Good luck in your journey!
You just need to get started and do it. If you run into something you're not sure of how to do, then you go back and learn how to do that, then continue on with the app. 
One language I worked with for over 10 years, I ran a business with it and worked as an employee using it. There was no book published that I didn't read on it. After about 2 or 3 years, the skills didn't really change much. You can think of it as riding a bike. Everything you NEED to know about riding a bike can be learned in less that 1 day, maybe even a few hours. Then you practice for say, 3 to 6 months and you're probably 80~90% as good as you're going to get in order to ride a bike for the rest of your life. Programming has much more things to know, but knowing EVERYTHING from pure memory has very, very little commercial value. I had to look up date formatting a few years ago for one project, it wasn't that I was new to programming, it's that I've never done date formatting in ObjC before. If you limit yourself to loading data from RESTful APIs to tableviews, you could make a nice template in a month or so and be ready for years of professional work just doint that. TL;DR: Start as soon as you can, crash often, get back up and crash again... Get used to crashing.
Just do it. You don‚Äôt learn to swim by reading books on swimming. 
This current post says [removed]
My perspective as an Objective-C developer is that it helps to consider the conditions that would cause a nil. If the only cause of a nil is a serious error that you need to catch before you ship, by all means, force unwrap it. Crash early, crash often, crash loudly so you discover the bug and fix it before you ship. A good example of this is UI, like force unwrapping a reference to a button. &amp;#x200B; If it's something that could conceivably be caused by a runtime issue or an external issue, then do proper error handling. Some examples are data validation, out of resources, or an unexpected result from a library or OS framework. Any area of your own code that is a frequent source of bugs should also be treated carefully because that's where it's most likely that you're going to have a bug slip into a shipping version.
The point of the optional is safety, specially while working with UI components. Suppose you get your data from some binary, and you expect an Int, but the data is corrupted or whatever and so that Int ends up being a nil. You don't want your app to crash just because ONE data couldn't get retrieved‚Ä¶ the alternative is just, not displaying that field. If you put bangs everywhere, you'll need to do a lot of IF statements checking that everything is what you expect to be. But if you use optionals, then you just let it go. Embrace the ? and let it go my dude. :) &amp;#x200B;
&gt; So crashing the app when the actual error occurs is bad, but letting nils fly all over the place until your app chokes on them in a completely different part of the code, and then you have to dig around to find out where the nil came from, that's good? If these are the only two alternatives, I feel like there's a flaw in your design. Like, optionals have a specific use, which you seem to understand, and the code that uses them should be written to handle both the nil and non-nil cases. Are you overusing optionals without good reason? Like, in my code I do use optionals but I'd say the vast majority of my code involves no optionals and no force-unwrapping. Most of my function arguments are non-optional, most of the return values are non-optional, etc.
Stop giving C++ programmers a bad name. Sure, C++ lets you shoot yourself in the foot if you absolutely want to shoot yourself in the foot. But, it also has mechanisms to protect you... like optionals, which have been in Boost for over 4 years and are part of C++17. So, yes, you are definitely missing something.
Suppose, we want to find an item in a dictionary for example? Force unwrapping suggests we *always* expect to find a result. let result = dictionary[key]! // Potential crash here doSomething(with: result) This can be easily remedied by the following: if let result = dictionary[key] { doSomething(with: result) } 
If you force unwrap an optional with a nil value at runtime your app crashes. It‚Äôs as simple as that. 
Wow that was pretty obtuse
Couldn‚Äôt agree more. Software Development estimation is probably one of the hardest things we do (after naming things and doing things exactly once), but it‚Äôs necessary. To some extent, every estimate will be trading off between precise and accurate, and you need to allocate time for the unknowns to a reasonable degree. The guiding principle we have been using at my company is ‚Äúgive me an estimate that would shock you if you went over‚Äù, and that‚Äôs been working well so far. 
For me it comes down to the difference between errors and valid states which happen to be `nil`. Something which must exist for the program to succeed is a `Something`. Something which could legitimately exist or not exist in all states is a `Optional&lt;Something&gt;`. When you force-unwrap an Optional, you're explicitly saying that you *know* that the unwrap will succeed, and you swear on the life of your process. If you were wrong, it's an immediate boom. `abort()` with no chance to recover. That's perfectly acceptable if you've done the maths nearby and it's obvious that you know something the compiler doesn't. I wouldn't force-unwrap in any other case though. There's a much better option - exceptions. Exceptions are for when a condition *must* be met in order to continue with your function, but the condition isn't met. If that condition is that you must unwrap an optional, the usual way is to use a guard let. Here's a contrived example: ```swift enum DocumentError : Error { case fileNotFound case missingId case invalidId } struct Document { /// Must be even for arbitrary architectural reason let id: UInt32 /// Most documents don't say anything useful. /// We can represent useless documents as well let usefulInformation: String? init(content: Data) throws { if content.count &lt; MemoryLayout&lt;UInt32&gt;.size { throw DocumentError.missingId } id = content.withUnsafeBytes { $0.pointee } if id % 2 != 0 { throw DocumentError.invalidId } usefulInformation = String(bytes: content.advanced(by: MemoryLayout.size(ofValue: id)), encoding: .utf16) } } func documentAtPath(filePath: String) throws -&gt; Document { guard let data = FileManager.default.contents(atPath: filePath) else { throw DocumentError.fileNotFound } return try Document(content: data) } ``` In C++ a lot of engineers shy away from exceptions because of their expense and innate footgun quality. Even more engineers use them for flow control, and I wish those people a merciful post-apodisation death. Swift exceptions are genuinely usable, and can be considered another orthogonal result of a function; like you would use `Result&lt;T, E&gt;` in Rust - if you're familiar. It's not practical with Swift exceptions to do that awful Java/C++ trick of wrapping your entire application in a `try/catch` \- the language enforces that you decide what to do with every throwing function. You can decide to just rethrow it, but that means you have to mark *that* function as `throws`, until you get back to `main()`. Usually there is a point quite soon up the call stack where you can handle the `Error` in a meaningful, sensible way - either try an alternative path or inform the user of the failure.
That's not an answer, though. When I look up something in a dictionary, I usually know it's there. That's why I'm looking it up. Should I always use a 3-line statement, instead of a 1-character unwrap? Why? What should I put in the "else" clause? You're not suggesting anyone should just ignore these cases and let it fall through into unpredictability-land, right? That's clearly worse than aborting, which is what a force unwrap does.
Try it on a real device.
I would but there‚Äôs a whole other issue with that. My MacBook doesn‚Äôt really like my iPhone. When I connect it, majority of the time it just rapidly connects and disconnects, but for some reason it works perfectly fine when it‚Äôs starting up and not signed in to a user. 
Basically, you‚Äôre not supposed to shoot yourself in the foot with a null-pointer exception in prod. Optionals disallow you from doing that and force you to rethink your code. By using optional bindings or guards, then you have to provide a control flow for when something is in fact null.
I don't know what kind of context/data you usually work with, but by experience, the average model user model in pretty much all the apps I've worked with had dozens of optional fields (Age, city, whatever). Whether you look up that data in a dictionary, or direction on model object, these optional fields should be ... well just that; optionals. If a user hasn't set his hometown, I don't want to crash, but I want to handle it gracefully and hide a UILabel for example. And that's just the very obvious use of optionals, there's also fallible data retrieving functionalities (network calls, dealing with files etc.). There's tons of situations where you'd want to handle a nil case. Optionals are a way to force you to consider these situations and handle them properly, and the syntactic sugar in Swift makes it not-too-annoying to do that. Now if what you're really trying to express is that it makes no sense for your app to keep on running if some value happens to be nil, then sure, by all mean, force unwrap it!
Just start doing it.
[LinkedIn](https://github.com/linkedin/swift-style-guide#35-optionals), [Google](https://google.github.io/swift/#force-unwrapping-and-force-casts), [GitHub](https://github.com/github/swift-style-guide#avoid-using-force-unwrapping-of-optionals) and [NetGuru](https://github.com/netguru/swift-style-guide#optionals) all agree that force unwrapping should be avoided at all costs.
Your formatting's gone a bit funny. Reddit doesn't understand triple ticks. Everything must be indented at lest 4 spaces to be considered code.
I asked some friends at school, apparently I‚Äôm supposed to write my code in View Controller. I was writing it in AppDelegate. Nobody bothered telling me that. Not Reddit, not even Apple, not any of these online courses I‚Äôm taking, I‚Äôm done for
No problem - and you'll be happy to know I'm adding more Swift questions as we speak! I do appreciate that this is a Swift forum and never intended to spam anyone.
Awesome Again!
&gt;So crashing the app when the actual error occurs is bad, but letting nils fly all over the place until your app chokes on them in a completely different part of the code, and then you have to dig around to find out where the nil came from, that's good? You might be thinking of optional as `nullptr` or `NULL`, but they're more well-behaved than that. Optionals are simply an `enum` with an associated value. The language has syntax to easily handle them, but they're very simple types. No reasonable app should "choke" on them. They provide an opportunity to gracefully deal with a null (or otherwise invalid) result, without anything as heavy as an exception.
You say you love optionals but clearly don't understand how to use them. I don't mean that in a bad way, hopefully this helps. &amp;#x200B; \&gt; I put bangs on almost everything. Stop!!! 99% of the time you should never force-unwrap an optional. I don't understand how this is possible, are you not using \`if let\` or \`guard let\` to unwrap your optional values? Are you checking your value against nil and then force unwrapping? &amp;#x200B; \&gt; They seem surprised that I would want my app to crash on a nil optional. Then maybe your value isn't actually optional if you expect it to always have a value? You are shortcutting proper error handling with an app crash. Optionals are a logical choice: is it correct for this property to be absent? &amp;#x200B; \&gt; So crashing the app when the actual error occurs is bad, but letting nils fly all over the place until your app chokes on them in a completely different part of the code, and then you have to dig around to find out where the nil came from, that's good? Propagating errors through your app has nothing to do with optionals, that's just bad design. I'm not sure why you think this is related to using optionals. &amp;#x200B; \&gt; Why do you prefer the ? over the !...? They really aren't the same thing. The \`?\` is just syntactic sugar and has different use cases.
IMO, simply put, it‚Äôs because you‚Äôre likely structuring your data wrong. Typed languages, especially those with Option types, allow you to validate input and transform it into data structures that *cannot hold invalid data.* ‚ÄúI put bangs all over the place‚Äù sends enough signal to me, armchair code reviewer, that you‚Äôre not at all carefully considering data validity, and you‚Äôre using ‚Äúthe app crashes‚Äù as an error handler. That‚Äôs a poor experience for your users, to have to pay that price for your mistakes. We all make mistakes when considering large, complex code paths. Validate your data first and present an error if it‚Äôs user-generated content, or fail fast and loudly if it‚Äôs invariants you know (for a fact!) to be true that you cannot fully express in the type system. But as in C++, when in doubt, defer to the type system.
I've followed the development of Swift since 1.1 and the use of optionals and force unwrapping seems to have settled on a couple of philosophical points: 1. Optional data types should be the exception. Most data types should be designed to hold a guaranteed value, preferably in a struct rather than a class, and should have some known state at all times. The fact that a type might hold nil means that the programmer has to take special care with it and consciously consider how that fact impacts their code structure. Swift treats optionals as a thing one must explicitly adopt because this is a common source of bugs in most programming languages and Swift has attempted to design away the causes of common bugs. 2. Force-unwrapped optionals are meant to be used in code that bridges Swift with another language that has no notion of optional types or code that deals with raw pointers or memory buffers - and that's pretty much it. In both of those cases, the programmer is expected to wrap that dangerous code in some Swift-y interface that guarantees the Right Thing Will Happen. It's an absolutely essential capabilty, but circumvents the philosophy of point #1 for those cases where it can't be avoided. If you think this is a mind-bender, wait until you start to dig into the protocol-oriented programming stuff. :)
Oh? Are you on the old Reddit? I used the Markdown editor option on the web app, and it renders ok there. Looks ok on the Android app for me as well. 
Macbooks seem to have a problem where they can not send enough power to the device through the usb cable, use a usb hub and it should eliminate the problem (it eliminated mine and that of my colleagues) 
I've never heard of it before, could you write up what it does?
It's a tool for finding unused Swift code. Hopefully the front page does a good enough job of explaining things: http://peripheryapp.com/
The idea that there are literally no situations where using `!` is acceptable, and that if you *do* use it then you're the devil, is dogmatic online-coding-hipster rubbish. It possibly stems from the fact that it's easier for online teachers to teach that, than imparting an actual education in Computer Science. On the other hand, throwing the baby out with the bathwater and completely ignoring one of the best features of the language is a bit extreme too. Let's say your app needs to show ads, and the ad network's SDK executes a completion that either returns an ad object or nil: ``` adSDK.loadAd { (advert: Advert?) in advert!.displayFrom(viewController: self) } ``` You're saying in that situation that you'd force unwrap and who cares about the consequences? Not every situation in which you need to deal with `nil` is unrecoverable. Surely you can see that?
If you aren't aware, `mutating` is a keyword that denotes that the parent object's reference to `self` will be changed. In other words, the object itself changes completely. Struct properties are inherently immutable. This means that whenever you modify a property, an entirely new struct is created. When you modify a class's property, you don't need to create an entirely new instance of that class since the properties are inherently immutable. If, however, you have a `let` property in your class and need to change the value for that property, you may use a mutating function to modify the class's reference to `self` with a new instance of that class with the `let` property modified.
We can try to retcon some theoretical, philosophical, answer about how classes are like Alan-Kay-style-objects and need to maintain their own state internally, and it's none of the caller's business. Or we can go with the real answer, which is likely that it's because of ObjC compatibility. Yeah, probably that.
So how do they make money now?
Simply put, structs are read-only. When you do this: var p = CGPoint(x: 0, y: 0) p.x += 1 What's really happening is this, where it creates a new struct: var p = CGPoint(x: 0, y: 0) p = CGPoint(x: p.x + 1, y: p.y) In fact, those two statements are literally equivalent as long as CGPoint's initializer has a trivial implementation (does nothing but set those properties). Now consider this extension: extension CGPoint { func doNothing() {} mutating func incrX() { x += 1 } } Both `doNothing` and `incrX()` have function signatures `() -&gt; ()`, but `incrX()` has to create a new struct in order to modify `x`. How does it pass that new struct back to the caller? By declaring it `mutating`, it's really implemented by the compiler as `() -&gt; CGPoint`. Now, you might ask, why doesn't the compiler automatically turn non-mutating functions into mutating functions? Because if you write a library this way and only distribute it without the Swift source code, then a library user's compiler has no way of knowing the function really returns a new struct.
Pro Mode: [https://www.peripheryapp.com/#purchase](https://www.peripheryapp.com/#purchase)
It has nothing to do with Objective-C compatibility, it's purely a Swift thing to maintain struct optimizations without turning mutating functions into static methods (the compiler does that instead).
I‚Äôll try that, thanks!
I'm not sure why value vs reference typing has anything to do with mutability. Rust has mutable and immutable references, for example.
Protocols should be more specific, the idea is to not need to know about any implementation details outside of the protocol definition. The issue here is that you need to know how to parse the argument to get your value. In short, modelDidChange should take a string rather than the notification object, even if it needs an intermediary object to transform the notification. Otherwise, you should just make self the target, as self is the object that knows how to parse it. BTW the compiler will warn you if there is no implementation on self for the selector argument. 
I like the idea of failing hard and fast during prototyping, but then going back over and putting some sort of error handling, or at least failing with a log message. The problem is that just searching for ‚Äú!‚Äù On a large codebase is painful. I instead will use guard let else { fatalError() }. While more verbose, it‚Äôs much easier to grep and accomplishes the same thing. Then I‚Äôll replace fatalError with a custom logging function that returns the Never type where it makes sense. This also just gets me out of the habit of circumventing optionals, which IMO is just as important as the compiler checks.
&gt; they‚Äôre mostly there for ObjC compat Citation needed. Classes serve an important role regardless of ObjC.
Thank you for this, your answer was worded well. What might be an example of a situation where you would want to make a function mutating as opposed to declaring what would be modified with var?
Structs are value types, whereas classes are reference types. This is explained in detail in the Swift book from Apple, so I'd advise you take a look there to get the full low-down. Essentially, a when something is a value type it means that the value IS the identity of the object. The number '2' is a value because it's meaningless to say this number '2' is different to that number '2' - 2 always being 2 is kind of fundamental to mathematics! The same applies to more complex types such as structs with many properties. If all the properties are the same then that object IS identical to any other instance of that struct with those values (even this wording is wrong, because there is no other instance - they ARE the same thing). So, in a struct, if you have a function that changes one of the values you have to mark it mutating because it indicates that this function will alter the identity of the struct. The struct after calling the function will be a different struct to before the function was called. Now, classes are different. An instance of a class is a separate thing to any other instance of that class. You will have a reference to these objects, but even if their properties have identical values, they still remain separate objects. Imagine I have a number '2' door number to hang on my door - that's a separate thing to any other number '2' door number that exists. It's meaningless to treat them as the same, even if they were manufactured from exactly the same material, etc. They are separate instances of 'number 2 door numbers'. If I painted mine a different colour, it's still the same physical object as it was before I painted it, and being painted doesn't change any other 'number 2' door numbers out there.
Does the last example compile?
In my 2 years of developing with Swift, I have never had a case where I would not just make a `let` property `var` if I needed to change it. Doing so honestly seems like bad practice; I just wanted to highlight that `mutating` can be used with classes :)
You're right! it doesn't. I removed the last example to prevent confusion.
The last example doesn't actually compile since `self` itself is immutable, and I removed it to prevent future confusion. So no, you wouldn't use a mutating function there. My mistake.
Thanks for the article! This was actually the guide that I resorted to after I couldn't get Receigen working. I think the issue I kept running into was adding OpenSSL to a modern day project and then being able to run that project. With each OpenSSL framework, either it had Objective C compatibility errors, or files were missing from the framework. Can you get OpenSSL to play nice with a Swift 4.2 project?
Thank you and I see that I need to learn much more that I thought before to create a simple form with some controls. But, just by following the simply most simple tutorial where someone just drag a control, set the property it will work, showing all the available actions for that control, but following that it wont happen with my Xcode, as shown in the picture I put here. 
Nil is not an error if you write your code properly. But even if you get into a fatal error in a module, you most often should just "disable" that module and show an error message to the user. Like if you can't save a file because the user doesn't have enough disk space. If you want errors then throw one and let the result type be non optional.
@rennarda said it too, but here's my take: Structs in Swift are treated as a single piece of data. (What Swift people call a "value type") Let's say I have some struct `Box`, and make a variable `b1`, like this: let b1 = Box() Since `b1` is declared `let`, and since a Box() is a single chunk of data, changing a property of a Box() in a `let` variable breaks the rules of `let`. Swift guarantees that `b1` is immutable. If anything is going to change (mutate) `b1`, Swift forces you declare that. That's where `mutating` comes in. Any function on a `Box` that might change some part of it must be declared `mutating` Here's `Box`: struct Box() { var isOpen = false mutating func open() { isOpen = true } } Not allowed: let b1 = Box() b1.open() // calling a mutating function on a non-mutable (let) value Ok: var b2 = Box() b2.open() `b2` is mutated (changed) but that's ok, since we make `b2` a `var`, not a `let` What about classes? let c1 = Container() It's confusing, but the __value__ of a variable holding a class is a __reference__. When you assign a struct value to a variable, it's treated as a single piece of data, so each variable has its own copy: let b1 = Box() let b2 = b1 // b2 now contains is own copy of b1 When you assign a class (reference) variable from one to another, you are copying a __reference__ to the data. Each variable contains its own reference to the __same__ piece of data. let c1 = Container() let c2 = c1 // c2 and c1 now refer to the same Container instance Having `let` references doesn't guarantee anything about the thing being referred to (your class instance) being mutated or not.
Try making it a collection view and allow the bottom cell to scroll with a table view in each cell
100% Let‚Äôs Build This App On YouTube Amazing teacher &amp; get all ur software from official apple websites 
those are the simple but huge things that are left out of tutorials and such. it can be very ambiguous when a tutorial step is just a code snippet and the author just assumes you know where it should go :/
Swift official [docs](https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html) [Udemy](www.udemy.com) [Hacking With Swift](https://www.hackingwithswift.com) [Let‚Äôs Build That App Youtube ](https://m.youtube.com/channel/UCuP2vJ6kRutQBfRmdcI92mA) [Sean Allen Youtube ](https://www.youtube.com/channel/UCbTw29mcP12YlTt1EpUaVJw) 
This was a great resource for me https://itunes.apple.com/us/podcast/developing-ios-11-apps-with-swift/id1315130780?mt=2
Your conditional should look like this: if randomDiceIndex1 == 0 &amp;&amp; randomDiceIndex2 == 0 { print("Snake Eyes!") } else { print("Roll again") } Also, fyi you can generate random numbers with the new random function: `Int.random(in: 0...5)`
 func randomNumber() -&gt; Int { return Int.random(in: 1...6) } func someOtherFunc(_ number: Int) { // Whatever } Now, to do what you're talking about, just call: `someOtherFunc(randomNumber())`
 A terminology question. Would it be correct to say that the struct Temperature is being **instantiated** at the point that currentTempreture is created? `struct Temperature {` `var celsius: Double` `init(celsius: Double) {` `self.celsius = celsius` `}` `init(fahrenheit: Double) {` `celsius = (fahrenheit - 32) / 1.8` `}` `}` `let currentTemperature = Temperature(celsius: 18.5)` `let boiling = Temperature(fahrenheit: 212.0)` &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
What is the error..?
There is a Apple app. I made a monster walk through a maze. Lookout google. 
&gt;What's really happening is this, where it creates a new struct: &gt; &gt;... &gt; &gt;In fact, those two statements are literally equivalent I agree that those two statements are semantically equivalent but is it accurate to say that that's what's really happening at the memory level? Intuitively it would not make sense to also "overwrite" the properties that don't change.
That depends on whether the compiler can determine that it‚Äôs safe to do so. For a simple local variable, it can implement that optimization for both cases, since the explicit assignment (second example) also overwrites the variable it‚Äôs copying and is free to reuse the memory. Whether the compiler actually optimizes them both the same way, I don‚Äôt know for sure.
Very nice, will give it a go
I wasn't able to replicate the error. We also tried Pod install on his machine, but not Pod Update. 
Seems like an issue with Xcode configuration or version ... not with your work
I would suggest that for each of your Entities, open the Inspector panel, select the Data Model Inspector, and choose Manual/None for Codegen. Since you have already ‚Äúmanually‚Äù created subclasses using Editor &gt; Create NSManagedObject Subclass, the compiler conflict may be resolved.
New Xcode projects that use Core Data are initially set up to automatically generate the NSManagedObject subclass for each entity. When you're creating the subclasses yourself, you end up with two versions of each class, the one Xcode generates and the one you created, so you get a compiler error. &amp;#x200B; There are two ways to fix this. The first way is to delete the source code file for each NSManagedObject subclass you manually created. The second way is to turn off the code generation for each of your Core Data entities. For each entity in your data model, open the Data Model Inspector and select Manual/None from the Codegen menu. Go with the first way if you want Xcode to generate the NSManagedObject subclasses for you. Go with the second way if you want to create the NSManagedObject subclasses yourself.
You may want to try wireless debugging, then you can leave your phone on a charger and not have to be plugged into the macbook. Makes actually picking it up and checking it often a little less awkward too. &amp;#x200B;
Objective-C doesn't work the same way Swift does when it comes to cocoapods and frameworks. Here is the [documentation](https://guides.codepath.com/ios/CocoaPods) that will help you. The specific section you need is: &gt;Potential Issue: Unfortunately, all Objective-C Pods haven't been updated to work with the new dynamic frameworks behavior. You might come across certain Objective-C Pods that no longer build after adding the use_frameworks! directive. In these cases you can either not use the use_frameworks! directive (you'll now need to create a bridging header) or manually edit the offending Pod to help it find the headers (as done in the linked issue).
Yup just learned about that today while reading the App Development with Swift book, but to do that don‚Äôt you have to plug it in at least once?
Ok that makes sense. So, if I want XCode to generate the subclasses, can I make an extension of the classes for my class specific functions? Am I able to add protocols via extension?
Sure, so does Swift. It‚Äôs up to the design of the class. The keyword is there to allow the compiler to produce more optimized code, and for much easier type checking. 
I really recommend hackingwithswift.com.
That is correct, yes.
Yep. Need to make it work that first time
I got that done, the images were still small but I‚Äôm restarting anyway. 
print out `dict` in the line before your crash. I suspect that that key isn't in there, and the dictionary might be empty, which will probably guide you to something further up, which is where the real error is. Also, you should clarify what the change was. Xcode is the program you use to code, and you may have updated to Xcode 10 (10 is the latest version). Also, Xcode 10 allows you to make the min required version of iOS 12.1. So which broke it? The Xcode 10 upgrade, or the iOS 12.1 requirement?
My mistake that was a typo. I meant I upgraded to Xcode 10.1. And I‚Äôll try what you suggested. Thank you! 
Cool, good luck!
If you preface each line of code with 4 spaces it will put it in a code block like this: let foo = 10 print(foo)
Okay thank you! I actually was just able to fix it so I‚Äôm not going to bother editing this post to change it, but now I know for the future! 
Your `Dictionary` is `[String:Any]` and you're not properly unwrapping the result of the subscript, as well as force-casting it. That's a recipe for disaster. First of all, avoid `Any` in almost all circumstances. Swift is strongly-typed and `Any` avoids that, it's an anti-pattern to use it. What you want to do with your current code is this: let foo: [String:Any] = ["test":"good"] if let result = foo["test"] as? String { print(result) } You'll get `Any?` from the subscript operation, it will be case into `String?` and then `if let` will test it and unwrap it into `String`. The constant `result` will have the value if the unwrapping succeeds and you can use it inside the curly braces.
Thank you! I‚Äôll try that out. 
I‚Äôm still kinda new to Swift and haven‚Äôt built an app as complex as this so when I was researching this specific topic I found a tutorial video for it and followed that. 
Try to avoid `var` where possible. If you're only ever setting the properties in the `init` then use `let` to make them constant.
No problem. You can do things in so many ways and they'll still work. Following some of these guidelines will allow the compiler to better optimize your code. Also, it will protect you against accidentally mutating your data objects when you don't mean to. Lastly, using these will inform you better of your intent when you go to use them later. Good luck and if you have any questions feel free to ask!
Yes, if you have Xcode generate the subclasses, you would create a class extension file to add functions and protocols to the subclasses.
Are you constructing your view hierarchy in Interface Builder or in code? Show us your code, and we'll show you what's wrong. Note that your outermost scrollview's pan gesture recognizer must not start until your innermost (TableView)'s pan gesture recognizers fail.
Please read all of the comments in the following thread: [https://forums.swift.org/t/revelation-about-mutating-struct-methods/14900](https://forums.swift.org/t/revelation-about-mutating-struct-methods/14900). At the beginning its stated, as here, that when a value type is mutated an entirely new value type is created. But in the end that does not appear to be the case. The "value" is simply mutated in place.
It absolutely would.
If keeping your manually generated NSManagedObject subclasses, make sure you clean your build folder to delete the auto generated subclasses that currently exist to eliminate those errors too. 
Random shot in the dark but it looks like it could be a difference in the version of Swift and/or Xcode. 
Open the workspace instead of the project?
I‚Äôm not aware of a way to do that via a static struct. You would probably be better off using SwiftyJSON or another method that would allow you to inspect the Json before casting it to a hard type.
I'd go with making the ThingMetadata struct, but only include the fields in it that I currently have a use for. There's no need to decode every field that's sent to you, so just decode the ones you're actively using. So I'd just keep the stub of the ThingMetadata struct there, ready to add the extra properties to once they become useful. It's good practice to not write code that you're not going to use anyway (YAGNI principle). But once you've got the stub of the metadata object, it's at least easy to add in bits once they have a purpose. I don't think you're going to find a way to do anything more clever with Swift's Codable functionality. It's not very flexible, so you'd just end up writing lots of manual decoding, for properties that you don't currently have a use for. 
Theres no way of doing this afaik. I dont see why you would want to either. A bad solution, but functional one, would be to define each property as string/any, and convert to your desired type upon reading the property. This would end in messy and confusing code though. 
They teach you how to author code, and assume you know how to write it
I‚Äôm having the same issue. 
Yeah, that seems really poorly worded. It makes it sound like a new *copy* is being created, which is not true. A new copy won't be created until the struct is assigned to a new variable, and even then the compiler will probably optimise away the copy. I guess it's the difference between what the language semantics defines and what the compiler will actually do. And the compiler *won't* create a copy when a property is mutated (unless it's a copy-on-write standard lib type). 
Because structs, unlike classes, behave differently when declared with `let` instead of `var`. If you declare a `let` struct, you cannot mutate it's properties. Any `mutating` methods, therefore, cannot be called on an immutable struct instance.
&gt; What's really happening is this, where it creates a new struct: var p = CGPoint(x: 0, y: 0) p = CGPoint(x: p.x + 1, y: p.y) No, that's not what's happening, and no, they're not equivalent. Constructors can have side effects. Mutating a variable has no side effects (unless the property setter is overridden). The compiler does not copy structs each time they're mutated. Nowhere in the Swift documentation does it even *imply* that sort of behavior. You are confusing simple variable mutability with copy-on-write (COW) behavior. COW means that when you manually copy a struct variable in your code, a copy isn't actually made until the other variable is mutated. This is an implementation detail. Please don't spread misinformation.
&gt; Also, the way you worded that last sentence makes it sound like this behavior only applies to standard lib types. They're not special üòÖ for anyone reading. They're regular Swift structs. Copy-on-write is only built in to standard lib types (array, dict, etc). Normal structs that we create ourselves don't have copy-on-write built in, and only get it if the compiler figures out that it's possible in a particular instance. So if the compiler can't see a tidy way to make it quasi COW, it'll create a new copy immediately at assignment time. https://github.com/apple/swift/blob/master/docs/OptimizationTips.rst#advice-use-copy-on-write-semantics-for-large-values But the compiler would be mad to create a new copy on every property mutation, so it would be a very weird situation where that would happen.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apple/swift/.../**OptimizationTips.rst#advice-use-copy-on-write-semantics-for-large-values** (master ‚Üí 73589ec)](https://github.com/apple/swift/blob/73589ec5a1897b379f01f4b314b5cd183a444b75/docs/OptimizationTips.rst#advice-use-copy-on-write-semantics-for-large-values) ---- 
Ah, I forgot about this. I'm confusing COW compiler optimizations with the `isUniquelyReferenced` API used by standard library types. For the record, [you *can* implement those features yourself ;)](https://developer.apple.com/documentation/swift/2429905-isknownuniquelyreferenced)
Yeah, this one trips me up all the time too. I really think Swift structs don't deserve the praise they get, and that they're much more unintuitive and misleading and inefficient than people realise. I tend to keep away from structs for almost all purposes, due to the risk of them causing unexpected or unintuitive performance fuckups, and in the lack of thread safety of copy-on-write (even though the semantics leads you to the false belief that it must surely be explicitly thread safe). For the benefits Swift's structs provide, the costs are just too high, in my opinion.
Thank you. And at what point is Temperature being **initialised** ?
Off the top of my head, if I had to do this then I might explore something along the following lines: - Generic struct for properties with `value: T` and `timestamp: TimeInterval` properties. - Decode to struct comprised of these properties. - Wrap that in a struct that uses dynamic member lookup to forward to the `T` value for convenience. But to be honest, it's probably more trouble than it's worth. 
If you've fixed the problem, please post the solution here so that when somebody who has the same problem finds this post in a search, they will see your solution. 
I don't work with Firebase, but [this](https://stackoverflow.com/questions/34215522/cannot-import-firebase-into-swift-class) is possibly relevant.
Thank you very much for the reply! It's helpful to know, I think it's doubt I have in myself that I can apply the things I've learned so far, but knowing that you (and many others) have said that I just need to go and try it is great to know. I'll get coding! 
Thank you very much for the reply! I just wasn't sure how much 'basic' knowledge I'd need to get me going, but it sounds like I just need to get going and see how I get on. Thank you!
Thank you very much for the detailed reply! It's inspiring to know that there are others out there that started in the same place I am now. I think the question I asked was to understand if I 'knew' enough to get me going, but it sounds overwhelmingly that I just need to stop reading my books, and get coding. As you say, the books and the community will always be there to help when I get stuck, and that's reassuring to know. Speaking of books, and after your quote, I think this one is quite appropriate as well: "*The world is not in your books and maps, it‚Äôs out there"* I just need to get out there and do it! I hope your app continues to develop, and all the best! :-) 
Thank you for the reply, it's nice to hear a very clear consensus from everyone! The question was asked to validate my knowledge and whether it was enough to get going, but it sounds from everyone's response that I should stop asking, and start doing. The comparison of learning a spoken language is a very good one actually, and that makes a lot of sense - you wouldn't read through a whole language book before trying to speak it, you'd go out and give it a go, and that's what I need to do with my coding. Thanks for the advice! 
Perhaps you can use NSTableView, with rows and columns. https://www.raywenderlich.com/830-macos-nstableview-tutorial
I would say that in the process of *instantiating Temperature* that *currentTemperature is initialized*. The difference being that initialization is an operation that acts on values. Think about it as a two-step allocation + initialization. The space for currentTemperature is *allocated* by adding its size to the stack pointer, and *initialized* during the call to `Temperature.init(farenheit:)` or `Temperature.init(celsius:)`.
Relevant [XKCD](https://xkcd.com/979/): [Wisdom of the ancients](https://imgs.xkcd.com/comics/wisdom_of_the_ancients.png)
Some content might help. What's BillDesk, why do you want to know, what Swift programming problem are you trying to solve?
Yes, first thing I tried. 
A fully Swift iPhone app at work for inspections and identifying assets using Eddystone UID on BLE beacons.
You shouldn't expect a great program at the start, just focus on making it work. Over time (with proper training) you'll improve the code. There's a lot to learn when you account for things like patterns (MVC, MVVM, etc...) and a well structured object oriented program takes time to know how to build. You might try some "roast my code" things after you get more complex apps written.
An attacker can change the bundle ID of the app on a jailbroken device to attempt to change the DeviceCheck token, but then the device token generated from DeviceCheck will be invalid when it reaches your / Apple server for validation, thus your server can just return a response denying the user for claiming reward.
Post some code of what you're trying, text please ‚Äì not images. And what do you mean by "URL of that ViewController"? They don't have URLs.
I have not implement any code now. I have to select one approch for doing bill desk in app. So I am doing r&amp;d. I am given one PDF file from bill desk. But in which they want return URL in post paraneter. In return URL i want to give URL of my VC. So after completion of transaction, I am redirecting to my VC. So pass return URL and how to fetch response from bill desk in that VC?
What's your background? Are you an experienced developer with 10 years of experience in C++? Are you an interested high school student, and this is your first foray into programming? Are you a bio major who knows a bit of Perl?
"Waaahhhhh, he called me a fanboy! DOWN-VOTE HIM AND LEAVE! HUMPH!!!!!" Swift compile times blow. Get over it and stop being an irrational fanboy. The language is doing great besides that.
Great tutorial. As suggestion, it would be great to have steps to add Cocoapods and test targets for each platform.
&gt; Swift compile times blow Not on my machine. And my machine isn't a speed demon per se. &gt; Get over it Get a better computer. &gt; stop being an irrational fanboy Fanboy of what? Fanboy of faster PC? What a fucking idiot are you. &gt; I know you probably only work on very simple CRUD apps and call yourself a senior dev and don't see the compile time issues, Code monkey detected. &gt; but work on something like a 9 GB project and let me know how that goes when the build time in Objective-C is already 15 minutes on high-end computers. 9Gb project? What a idiot, are you trying to compile what? Even Linux kernel with every module is smaller than that. You are the worst kind of idiot, the idiot that thinks he is even smarter than others. If you werent a total ignorant idiot, you would learn to use libraries, but I bet that you dont even know what that is. Stick to JavaScript, idiot. 
Is the runaround here needed because of Carthage (I don't use Carthage)? The normal way I make a cross-platform framework is a lot less complicated: * Create framework target; I usually use macOS. * In Build Settings of the single framework, add all of the supported platforms to the "Supported Platforms" setting. * Make sure Valid Architectures is up to date for all of the different processors. * Ensure that you have the right Code Signing settings for each SDK in the Signing section. This way, you only need one target, and one scheme (select the device target in the scheme selector, e.g., *My Mac*). Is Carthage not compatible with such frameworks?
Why are the most toxic, defensive, people like you always the most oblivious and yet most confident? All I asked was if they fixed the Swift compile times, and it triggered you like I fucked your sister, lmao. &gt; Not on my machine. Get a better computer. Okay. Do I need to explain this again? Are you going to read this time or just repeat the same thing like a raging neck-beard? If you work on simple CRUD apps that are very small, you obviously won‚Äôt notice it. If you work on large apps, you most definitely will. And judging by your attitude, I‚Äôm pretty confident thats all you work on. &gt; Fanboy of what? If you‚Äôre an iOS dev and don‚Äôt know that Swift has compile time issues when compared to objective-c, then good luck in your career, or maybe considering going Javascript where you don‚Äôt have to think about ‚Äúconfusing‚Äù things like this. &gt;Code monkey detected. Pseudo-programmer detected. Actually that comment makes no sense in that context. So you probably have no clue what a ‚Äúcode monkey‚Äù is either. &gt;9Gb project? What a idiot, are you trying to compile what? Even Linux kernel with every module is smaller than that. Yes. Us big boys do a little more than update SQL tables and display the data in a list on the phone. :) Lmao you don‚Äôt think 9gb projects exist. Your raging is reddit gold. &gt; You are the worst kind of idiot, the idiot that thinks he is even smarter than others. Ya dude tell me! Im such a dumb, stupid, dumb-dumb know-it-all! &gt; Stick to JavaScript, idiot. That‚Äôs funny. Usually clueless ‚Äúpseudo-programmers‚Äù aggressive attitudes like yours fit in the Javascript camp. You might wanna check them out.
 struct GenericThing&lt;T,U,V&gt;: Codable { struct Flooring&lt;U,V&gt;: Codable { let count: U? let thick: V? } let color: T? let age: U? let floor: Floor&lt;U,V&gt;? } typealias Thing = GenericThing&lt;String, Int, Double&gt; typealias ThingMetadata = GenericThing&lt;TimeInterval, TimeInterval, TimeInterval&gt;
I was exploring this approach too. Decode Thing like normal. Then convert Metadata to SwiftyJSON.JSON and keep that around. Now TimeIntervals can be extracted from Metadata by using keypaths from Thing. This would require writing a tool to extract keypaths relative to Thing. I suppose writing such a tool would be possible with reflection. This would be quite a bit of work. A pro: it would be able to adapt to changes to the Thing struct. 
&gt; There's no need to decode every field that's sent to you I agree. I find it fun to explore these types of things as a learning exercise. 
If your new to programming, I strongly urge using the 2 Apple Books on iBooks, they're free and no dongle needed. the coding software is Xcode and yes you'll need it. youtube Sean allen Let's build that app and many. more. &amp;#x200B; Angela Yu's course (not free but cheap) Udemy.
I am happy to see that Amazon started to dive into Swift. This is good news for whose want to build micro services and web applications using this language in the industry.
&gt; I have not implement any code now. implemented* any code
&gt; I am facing problem while posting data. I am facing the* problem while posting data. 
This really improved the program, thank you. I am, however, struggling with a class to parse the CSV files and the length of the function `followingRun` below. Any further suggestions? import CSVImporter // marathon: /home/luis/Dropbox/Documentos/Coding/Swift/Libraries/CSVImporter import Console // marathon: https://github.com/vapor/console.git import Files // marathon: https://github.com/JohnSundell/Files.git import Docopt // marathon: https://github.com/lf-araujo/docopt.swift.git extension Date { static func - (lhs: Date, rhs: Date) -&gt; TimeInterval { return lhs.timeIntervalSinceReferenceDate - rhs.timeIntervalSinceReferenceDate } } class Interact { private let terminal = Terminal() func askDouble(_ question: ConsoleText) -&gt; Double { guard let result = Double(terminal.ask(question)) else { return askAgain() } return result } private func askAgain() -&gt; Double { guard let result = Double(terminal.ask("Input not recognized, enter a valid number (a double of type 0.0):")) else { return askAgain() } return result } func print(_ content: String) { terminal.print(content) } } let doc: String = """ Allocator Passive allocation investment tool. It departs from three assumptions: 1. the age when one wants to stop investing (should take life expectancy in your country into consideration); 2. the user risk profile; 3. that assets are grouped in three pools. 3.1. the emergency fund, corresponds to expenses for six months (think six months of unemployment), 3.2. the second pool corresponds to low risk investments 3.3. the third pool are the high risk investments. Try to vary the types of investment within each pool, this tool will not handle investments within pool, only the total pool value. Decision on what is low and high risk, as well as decision on the risk profile is entirely on users discretion. Every year, the tool will help the user allocate the correct amount in each of the pools, based in a simple algorithm. Finally, since sometimes one needs to quickly record a deposit into one of the investments , there is a quick-add add command, in which one can add the latest low risk and high risk investment without going trough all the questions. Usage: allocator [(quick-add &lt;low&gt; &lt;high&gt;)] Options: -h --help Shows this screen --version """ // Managing arguments var args = CommandLine.arguments args.remove(at: 0) let argument = Docopt.parse(doc, argv: args, help: true, version: "0.0.1") var header: String = "" var content: String = "" // Setting today's date let date = Date() let formatter = DateFormatter() formatter.dateFormat = "yyyy-MM-dd" let today = formatter.string(from: date) // If this is not the first run func followingRun() { let importer = CSVImporter&lt;[String: String]&gt;(path: "finances.csv") let importedRecords = importer.importRecords(structure: { (headerValues) -&gt; Void in header = headerValues.compactMap { $0 }.joined(separator: ",") + "\n" }) { $0 } if argument["quick-add"] as? String == "true" { quickadd(importedRecords) } else { let reversedRecords = importedRecords.reversed() let zipped = zip(reversedRecords.dropFirst(), reversedRecords) var lastPercentUpdate: String = "" if let twoDictionaries = zipped.first(where: {$0["investpercent"] != $1["investpercent"]}), let date = twoDictionaries.1["date"] { lastPercentUpdate = date } let lastentry = Array(importedRecords.suffix(1)) var investpercent: Double = Double(lastentry[0]["investpercent"]!)! var expenses: Double = Double(lastentry[0]["expenses"]!)! let question = Interact() if (formatter.date(from: today)! - formatter.date(from: lastPercentUpdate)!) &gt; 15778800 { expenses = question.askDouble(""" It's been more than 6 months since you updated the amount you should be saving on the emergency pool. Please inform how much are your cummulative expenses in 6 months: """) investpercent = Double(lastentry[0]["investpercent"]!)! - 1.0 } let investedlow = question.askDouble("Invested value in low risk since last time:") let investedhigh = question.askDouble("Invested value in high risk since last time:") let lowtoday = question.askDouble("Total low risk value today:") let hightoday = question.askDouble("Total high risk value today:") let savings = question.askDouble("Enter your current savings account status:") let invest = question.askDouble("Finally, how much you have to save today:") let aimhigh = ((lowtoday + hightoday) * investpercent) / 100 let aimlow = ((lowtoday + hightoday) * (100 - investpercent)) / 100 if expenses &gt; savings { question.print("It's time to update the savings account, deposit \(expenses - savings).") } else { if investpercent &lt;= 0 { investpercent = 0 print(""" Congratulations! You've reached the year which you wanted to stop moving money around! Don't forget to consider converting all high risk investiment into types of high risk investiment that generates dividends. """) } } let investhigh = (aimhigh / (aimhigh + aimlow)) * invest let investlow = (aimlow / (aimhigh + aimlow)) * invest let objective = expenses - ( (lowtoday + hightoday) - (investedlow + investedhigh) - (Double(lastentry[0]["low"]!)! + Double(lastentry[0]["high"]!)!)) print("\nDeposit \(investhigh) into the high risk pool.\n") print("Deposit \(investlow) into the low risk pool.\n") // salvar o arquivo content += "\(today),\(investpercent),\(expenses),\(savings),\(lowtoday),\(hightoday),\(objective)\n" do { try Folder.current.file(named: "finances.csv").append(string: content) } catch { print(error)} print("Your data has been saved to finances.csv in this directory. Goodbye!\n") } } func firstRun() { let question = Interact() let age = question.askDouble("What is your age?") let end = question.askDouble("In which age you want to stop managing finances (default: 80):") let profile = question.askDouble(""" What is your risk profile: low risk (type 40, this is the default), medium risk (type 20), high risk (type 0). Intermediary values are accepted: """) let expenses = question.askDouble("Enter your current cummulative 6 months expenses:") let savings = question.askDouble("Enter your current savings account volume:") let low = question.askDouble("Enter your low risk investiments total:") let high = question.askDouble("Enter your high risk investiments total:") let invest = question.askDouble("Finally, how much you have to save or invest today (default: 0):") if expenses &gt; savings { question.print(""" You haven't reached the first step of creating the emergency pool. Deposit \(invest) now into your savings acount and keep doing it suntil it reaches \(expenses)\n Good luck! """) } else { let highobjective = ((end - profile - age) / 100) * invest let lowobjective = invest - highobjective let question = Interact() question.print(""" Deposit \(lowobjective) into your low risk investiment pool. Deposit \(highobjective) into your high risk investiment pool. Your data has been saved to finances.csv in this directory. Goodbye! """) var content: String = "date,investpercent,expenses,savings,low,high,objective\n" content += "\(today),\(end - profile - age),\(expenses),\(savings),\(low),\(high),\(expenses / 6)\n" do { let outfile = try Folder.current.createFile(named: "finances.csv") try outfile.write(string: header + content) } catch { print(error) } } } scope: if !Folder.current.files.names.contains("finances.csv") { firstRun() break scope } else { followingRun() } 
Right. Considering that so many of us are just leaping right into it it‚Äôd be nice if you could scale the specificity of tutorials 
&gt;So crashing the app when the actual error occurs is bad, but letting nils fly all over the place until your app chokes on them in a completely different part of the code, and then you have to dig around to find out where the nil came from, that's good? &amp;#x200B; Correct. Because it's not about you, it's about your users. For example, I'm currently working in a library that's several person decades of code, and used in several apps that are are also several person decades worth of code. Three are thousands or tens of thousands of optionals that better not be optional or the entire lib ceases to function partially or completely. Some of these could become nil because of a misconfiguration on the server. This would be a problem but an isolated problem. Several million people a day would carry on using these apps and never even notice there was a problem. Maybe another million would notice that some or part of that feature was replaced with an error dialog. A few hundred thousand of them would be fairly annoyed about it. But that's way better than every single user getting a crash, and millions of people being angry, many of whom will give us bad reviews and leave comments about how our app is a crashy piece of junk. Correct optional handling forces you to think about how serious the problem is and what the recovery options are. Can you just no-op and return with no harm done? Can you use a sane default value that won't break anything? Are we really and truly hosed? Those really critical nils ought to bubble up to user facing error screens very quickly. Use fallible initializers. Entire subsystems should never even be allocated if some of the more critical optionals are nil. Also you can assert on the more important optionals so you get the crash at the source of the problem in debug builds, but you're still *forced* to write the error handling code that'll run in release builds. Doing it this way also pushes you to minimize optionals. Don't like writing all that error handling code? Use sane defaults, push optional handling of important dependencies into fallible initializers, so they're not optional, turn critical missing data into errors at the API layer rather than passing around data full of nils. Optionals are bad things to be avoid wherever reasonably possible.....but be thankful you have type level support for them when they're unavoidable, which is fairly often :)
It's very hard to read your code without any highlighting but I think you've improved it a lot. Now think about the following: what if every function did only one thing? In this case your firstRun and followingRun functions are very long and they do a lot of stuff. I would say that to train yourself to split it up further you should comment every section of what it does. For example: // Import records // Clean records // Order records (import, clean and order should probably be subfunctions of getRecords) // Get user input // Process input and get to a conclusion // Save file // Show output What if that would be four function calls inside followingRun, so followingRun only delegates work to other functions and doesn't do any "work" itself? So you would read those function names almost like documentation of what happens inside that function. Then dipping inside of the getInput method you only ask the input from the user and then return a struct or object UserInput that has all of the information you gather. Then there's a function process(input: UserInput) that only processes the input and outputs something like a conclusion: enum Conclusion { case tooManyExpenses case enoughSavings } So every function now does only one thing, either being a high-level "coordinator" function or a very specific function that has very clear input and very clear output. The enum and struct I proposed help you group your data better and get a better mental idea of what happens. Now you can easily test what Conclusion you get from what UserInput without having to actually load a CSV, actually ask the user how it works. You just write 10 unit tests to check if it always reaches the right conclusion and never have to enter anything manually again to see if it works.
Awesome share! I may just have to try out that Panels framework.
&gt; Constructors can have side effects. That's why I wrote: _as long as CGPoint's initializer has a trivial implementation_ (called "memberwise initializer" in the Swift documentation). It doesn't state in the documentation that they're equivalent but the compiler will emit virtually identical (and literally equivalent) SIL for both cases at the `-O` level, which produce identical assembly. Maybe we're disagreeing on the criteria for equivalence. It's true that the documentation doesn't expressly state that in a statement like `p = CGPoint(x: p.x + 1, y: p.y)`, the compiler can reuse the memory location of `p` to avoid copying unchanged fields. At the same time, due to struct value semantics, there can't be a case where setting `p = CGPoint(x: p.x + 1, y: p.y)` produces a different result than `p.x += 1` (provided the init is a plain memberwise initializer), which is why the compiler will generate identical code.
Without optimizations, it produces different code. Your assignment, at the very least, re-initializes every member of the strict. Simply modifying an instance variable does not. Have you ever programmed in a C language‚Ä¶? You're saying a lot of things that don't make any sense
Without optimizations, `return 7 * x + 5` and `return 5 + 7 * x` produce different SIL. Are you suggesting those aren't equivalent? &gt; Have you ever programmed in a C language‚Ä¶? Yes, I've been programming in C and C++ since the early 90s, and Objective-C since the first release of Mac OS X. Let's keep things civil.
I was asking a genuine question, not trying to insult you. You're making some seriously confusing claims. AFAIK there is no documentation to suggest that modifying a property constructs an entirely new instance, even if only before compiler optimizations. It is presented as similar to simply modifying ivars of a C strict in a C language. I would be interested in some evidence to the contrary if you have any (and I mean that; I'm not trying to be condescending)
Thank you for your insight! This helped me a lot!
Xcode is barely compatible with such frameworks. Every time I've attempted something like that, there were issues with integration into different types of targets in some way. I think most people want an official way to do this from Apple.
It is faster than the 13 inch 2015 Macbook Pro but not the 15 inch one because that one has 4 cores while the new Macbook air only has 2.
I‚Äôm trying right now to extend a single-target iOS/macOS framework for tvOS. I‚Äôve followed the steps you‚Äôve listed here (as well as updated the device families to enable simulators). However, the framework I end up building seems empty. When I import it into a tvOS project none of the exposed Framework stuff is available. I guess I must be missing something... any tips?
So how is this different from UUID and if Apple banned the use of UUID, why wouldn't they ban the use of this?
Because (at least according to this explanation) Apple‚Äôs servers are actually identifying the device. So the phone generates a token that gets sent to Apple, Apple uses that to identify the unique device, then sends the answer to the developer. The developer gets two pieces of data - bit 0 is T/F and bit 1 is T/F. It‚Äôs somewhat similar in theory to Apple Pay - the merchant can charge your unique card without actually knowing who you are. 
Thanks for the explanation u/Raf08a! Yep, it's like what u/Raf08a said, Apple's server identifies the device, and we have no way to pinpoint the device since we only have two bits to work with, but we can know if the device has redeemed reward previously.
Thank you. I'm also thinking about NSCollectionView with custom cells. I've found the tutorial on the same site :) https://www.raywenderlich.com/1246-collection-views-in-os-x-tutorial . 
This is pretty nifty. Thanks!
How do you add a custom screensaver on Mac? 
Mine says it's not compatible with my version of MacOS (10.14)
That's a weird one. I'm currently using 10.14 with a late 2015 MacBook Pro and it's working without any problem. Mac is a bit weird when it comes to screensavers, delete it, close settings (this step is very important when it comes to screensavers written in swift) and try again. If this doesn't work, I'll have to dig a bit more but it'll be hard to solve since I cannot reproduce it. If you want to give it a try feel free to fork it &amp; please open a pull request if you find a way to solve it
I followed the steps about deleting, now it works perfectly. It was most likely an error on my end. Thanks for the help! Love the screen saver!! Wish Apple would make more screensavers like these. 
This looks neat!
Sharing is caring üòÑ
awesome, thank you
I do like that site and actually have it open for reference right now. I've set up the structs the same way that they're generated there (here's what it generated: https://app.quicktype.io?share=XChF77LBFQE6qDQFpm4z), however I'm still getting this error when I print the data typeMismatch(Swift.Array&lt;Any&gt;, Swift.DecodingError.Context(codingPath: [CodingKeys(stringValue: "response", intValue: nil)], debugDescription: "Expected to decode Array&lt;Any&gt; but found a dictionary instead.", underlyingError: nil)) PS I updated my code in my OP
I appreciate your concerns but I think it's okay to assume that I'm safe with this since I'm not getting any profit from it &amp; these animations were publicly published in the last keynote (available in iTunes). Plus there's Aerial - [https://github.com/JohnCoates/Aerial](https://github.com/JohnCoates/Aerial) \- which is really famous and if Apple is okay with it, I think they should also be ok with Brooklyn.
I really hope so üòÖ Thanks man! 
Swift is a programming language. UIGestureRecognizers are part of UIKit. You'd have better luck asking in a board dedicated to iOS development and not a programming language.
This thread turns into a digression on when or if structs get copied, which is weird because the Swift language documentation says nothing at all about when or if copying ever happens. Swift structs are value types. The whole point of defining that at a semantic level is that the programmer doesn't know or care if copying occurs. The compiler may copy, or it may not, or it may copy on alternate Tuesdays. Swift 6 may do something completely different than Swift 5. It may allocate it on a heap and do 4 layers of pointer indirection to get to the Int (we truly hope not), or it may optimize away the entire struct (as long as it's not a public interface) and just use a plain Int in a register. Of course, thanks to architectural registers, even moving an Int from one register to another might or might not be a "copy". And thanks to virtual memory, any operation which touches main memory might also cause a page fault, and trigger a read (copy!) from disk. You just don't know. Mutating a struct does not copy it, usually, probably ... but don't wager any money on it.
&gt; Collecting user information like name, email, phone number, or age is one of the top reasons why mobile developers add social login or 3rd party login providers into their app. &gt; When developers collect information about their users, they can start engaging with those users. It‚Äôs a win/win, the user can quickly and easily sign-in with a known provider and credentials and you get to collect a little bit of information about them üòä. This is pretty creepy. As a user, I would not describe it as a "win", either from a security or a privacy perspective. &gt; you are leveraging a brand 200 million customer‚Äôs [sic] trust while getting something back, I suppose that's one way to justify it to yourself. I would say you are attempting to *steal* the trust that Amazon has earned, and spread it onto your own app, which has no history with me, and has given me no reason to trust it. &gt; like their name, email address, and zip code to build more personalized experiences. There's no way I can think of that knowing my email address would improve the "personalized experience" of an app. If I wanted to give that to you, it takes only about 3 taps. Any app that does this is just as bad as Facebook and the rest. I bought into the Apple ecosystem to avoid this shit.
https://developer.apple.com/documentation/uikit/uigesturerecognizer/1624212-view I thought there was a definitive answer in the docs, but the way UIGestureRecognizer is set up, it is attached to a single view. In fact, the appropriate way to do it is here: https://developer.apple.com/documentation/uikit/uiview/1622496-addgesturerecognizer
[removed]
‚Äúmore personalized‚Äù = ‚Äúwe have more data about you and we know what you are doing literally‚Äù
Compile time is fine on my big ass projects, how big is your project? How many frameworks? LOC?
You can't attach a UIGestureRecognizer to multiple views. There used to be a warning in the Xcode console whenever you tried but I think they removed it in iOS 10 or 11. There are patterns to get around this though. For example when dealing with gestures on collection views Apple says: &gt;You should always attach your gesture recognizers to the collection view itself‚Äînot to a specific cell or view. The UICollectionView class is a descendant of UIScrollView, so attaching your gesture recognizers to the collection view is less likely to interfere with the other gestures that must be tracked. In addition, because the collection view has access to your data source and your layout object, you still have access to all the information you need to manipulate cells and views appropriately. &amp;#x200B;
Anyway you can make this a live image for IOS? Somone previously took the Screensaver from a mac at the Apple store and converted it to a live image, i set it as my phone lock screen, now i hold the screen abs it plays the whole thing its cool
I want to learn swift. Almost from scratch. So I think I can help. 
You can‚Äôt! It sucks. An intent has to have all of its parameters filled out when it is donated or when it‚Äôs registered with a voice shortcut. I *really* hope in a future version of iOS Apple adds the ability to get input and have a user fill out some or all parameters of an intent dynamically when the ask Siri.
1. The Swift Programming Language book reads more like a description of language semantics, but if you‚Äôre a seasoned developer already you can‚Äôt do anything better than just trying to write Swift and googling when things don‚Äôt add up. Maybe google a Swift syntax reference to get you up to speed about how to spell the concepts. 2. I wish we had namespaces! I think we‚Äôre gonna need them once we implement C++ interoperability if that ever happens. For now, the Swift module model is essentially determined by the build system, independent from folder structure. The unit of namespacing is the module, and we don‚Äôt require you to module-qualify declarations that you import. 3. On macOS, I really like [Dash](https://kapeli.com/dash) 4. Most definitely! I don‚Äôt know how I could prove that concretely, my understanding is that it‚Äôs more of a development practice vs something codified in the language or the library community.
I am confused....Is this simply a video player that is playing a video of Apple's animations? 
Do you have an example of your code? To fix the crashing issue use either 'if let' or 'guard let'. Example: guard let image = UIImage(named: "MyImageName") else { return }
This is awesome
I originally had a similar thought, trying to find example open source apps but the differences in implementation are vast and you can't know if you're learning bad practices (example list, compiled by Jeffrey Jackson: https://github.com/jeffreyjackson/mac-apps). My first steps into macOS development were with a Udemy course but these are always only surface scratchers, at best (it was Nick Walter's at https://www.udemy.com/macos-programming-for-ios-developers-mac-apps-os-x-cocoa/). Don't know what your preferred IM channel is, but I can surely take a look at your code and give you some feedback, if you want.
I‚Äôm reading this book right now and it‚Äôs pretty good. I highly recommend his book Pro Swift. I read it last year and it‚Äôs one of the best computer books I‚Äôve ever read.
For the moment it's exactly that. I extracted the animations from the keynote, did some post editing to bump the quality &amp; remove some blur, but yeah that's the MVP. With the upcoming new features, you'll be able to select which animations you want to display, maybe a custom clock? and other things that people suggest :)
I fully agree. I am in the same exact situation you are, new for swift and macOS programming. I also thought the Swift would be more easy. Thank you for asking that. 
I have a small and simple open-source macOS app, [Hush Time](https://github.com/TheCodedSelf/Hush-Time), that might help you.
What‚Äôs the difference between his Hacking with Swift and Pro Swift books? Is one more advanced than the other?
 **I have some complex networking in my app**( I don't use any third party dependencies, because of project requirements). For instance, I send three network requests in parallel after first two requests provide results. All my networking is done in separate models, known as networkClients(following MVC-S pattern) and are **called directly from repository**, not from ViewControllers. **However, I need the last request to notify my viewController after I get response from network.** How should I do that? I don't think notification center would be right solution because it can cause memory leaks and I have not found correct approach to complex problem like this. Please provide some prominent solutions. It should conform to good design pattern like MVVM or MVC and should not be some workaround or hack. Maybe delegates would work? *I know that rxSwift would solve my issue, because I could start observing for results after initializing viewController and after data would be updated from repository my viewController would also be notified...* 
Why do you think NotificationCenter would cause a leak ?? Delegates is always a good way to do things. NotificationCenter is good portion since it allows you to decouple code and not have dependency. The other option is KVC but it would bring dependency on networking into your viewcontoller. 
Yes, Pro Swift contains highly advanced topics. I recommend that after having a nearly full overview of the language‚Äôs capabilities. 
Wow! Thank you so much for the glowing review ‚Äì I'm glad you enjoyed it!
I'm not a whiz, but I've been watching a lot of WWDC videos about core animation lately. fillLineAnimation.isRemovedOnCompletion = true Using this is called out in a video as something not to do. I've noticed it's in most examples online, but apparently can cause issues. I think you want to set the "model" value instead. So run your animation as normal, and then just set the updated values on the layer directly. func resetLayer(layer : CALayer) { layer.removeAnimation(forKey: "lineFill") circleWithProgressBorderLayer.strokeEnd = 0.0 } Hopefully this is correct, I'm going from memory and have only done a few animations.
Yes it seams notificationCenter might be a good solution, because of lack of dependency
yes that would work, however can't add RxSwift this time because size of this framework really matters...
You can send a notification whenever it makes sense to do so. In this case, probably after you‚Äôve parsed all your network call responses. The thread you call the post notification doesn‚Äôt matter as much, but you need to be on the main thread to update the UI. You can do that in the notification observer registration, or with a dispatch call in the notification handling code. Generally you let the UI worry about being on the main thread, not the notification poster, since the UI may not be the only thing listening for that notification.
Although a lot of the material in Pro Swift was not new to me, the material that was made it very worthwhile for me to read. Paul has a very good writing style. He explains things in a very clear, concise manner. If your new to Swift start out with Hacking With Swift. If you like it definitely read Pro Swift.
Not a problem. We‚Äôve communicated before. You asked me to send you a review of Pro Swift but I was unable to because at the time my company wouldn‚Äôt permit me to use their name in the review. I believe that the form you sent me for the review required I provide my company name.
The company name isn't shown on the site; that was more for me to see who was reading.
Take a step back from design patterns and using an established paradigm. Your intuition is absolutely correct ‚ÄîNotification Center is usually not what you want, because it leads to some really messy code that‚Äôs hard to reason about. Given how Cocoa is structured, your intuition is also correct about *delegates*. The root of the issue is twofold: - Your view controller needs to know the results from your network controller - Your network controller shouldn‚Äôt know anything about your view controller (separation of concerns) With that in mind, you really want some kind of concept that portrays ‚Äúthis is an object, any object, that knows how to respond to my network response‚Äù. A delegate is usually the answer here. protocol NetworkControllerDelegate: AnyObject { func networkController(_ controller: NetworkController, didReceive response: YourResponseType) } Then you can add a property to your NetworkController weak var delegate: NetworkControllerDelegate? &gt; Side note: It needs to be weak because an object should not own its delegates. The delegate relationship is usually one class who owns an object, and the owner object sending messages back up to its owner. Then you need to call this delegate method once you‚Äôve received your response delegate?.networkController(self, didReceive: myResponse) Then you just have to implement NetworkControllerDelegate in your view controller and it will forward the message without the network controller needing to know anything about your view controller.
I‚Äôll take a look, thank you!
Yeah I‚Äôve heard this book is great! If I recall correctly the FIRST example is an image viewer (aka what I‚Äôm trying to do [though it‚Äôs probably not document-based]), so I definitely am gonna add it to the wishlist. 
Firebase Auth has an "anonymous sign-in" feature that will let you create a Firebase user without requiring the user to sign in. This will still let you use all the features of FirebaseDatabase or Firestore with authentication, but no sign in required from users. You can find the documentation [here](https://firebase.google.com/docs/auth/ios/anonymous-auth) on how to use it. Disclaimer: I work on the Firebase Core iOS SDK.
Yeah, luckily there are a few good online/print courses I‚Äôve seen, I just come from a webdev background so I‚Äôve gotten used to reliable and fun tutorials that are like, free on YouTube. Not being stingy‚Äîjust broke right now. Hopefully won‚Äôt be soon. And thanks for the offer! I‚Äôm not with my computer right now but I will be soon, I‚Äôll let you know if I could use any help. Do you have experience w/ document based apps?
Hey thanks so much. I guess the issue we were hoping to handle is, if someone loses their device or has multiple devices...that approach will separate their data. There probably isn't anyway to access the user's Apple ID?
Thank you for the information, i‚Äòll read up on user defaults then.
The cool thing about delegates is that the pattern only relies on you having separated responsibilities into different objects, not anything intrinsic to MVC or MVVM. You can have delegates for view controller to talk to other view controllers, models to talk to view controllers, views to talk to view controllers, it doesn‚Äôt matter, as long as the object doesn‚Äôt know anything about its delegate other than that it can respond to the delegate methods üòÅ
If you're accessing UIApplication.shared.delegate before the app is fully loaded, the value will be nil. If that's the case, try assigning appDelegate in a different part of your code, after the app is loaded.
I was defining it outside of a function but inside the class, hoping to use it throughout the class. I guess that‚Äôs why it wasn‚Äôt working. But, strangely, when i moved it to a global variable (outside the class definition) it worked. I think making the vars inside the class but lazy would help (this was crashing before, but I think it‚Äôs because my func was messed up). Don‚Äôt know which Is better. 
Yes it seems that way! Have asked a lot of devs about this question. Others suggest notification for loose decoupling and better separations :D will probably use delegates just confused :D but really happy for this information! Thank you all!
Overpriced and useless.
I don't recommend this for apps that are big, but as a temporary solution, you could get the currently logged in iCloud user's unique identifier from within your app, from what i've read. If you have that, use that as the username (auto-register when the user logs in), and set the password to something encrypted and salted. Cut the id in pieces, swap them around, encrypt them with hmac and be creative with that salt, etc. and that's going to be the password for that account. This will keep the simple attacks at bay, at the very least! Never use the iCloud unique identifier directly though, you may want to make something cool that translates this identifier into gibberish, use the previously mentioned techniques, so you don't end up with a databas of your user's iCloud identifiers. This way whenever the same user tries to register, the app will see (if the encryption and salting mechanism is the same still) the previously created account and you can log in to it. Your user's iCloud identifier (or anything that is shared between the user's devices) is the key to your user's username and password! :-)
then recommend an alternative to the OP 
Documentation. SO.
It sounds to me for your use case NotificationCenter is good choice. 
Yep, I can relate, Apple's own documentation is sparse and often lacks some basic examples; Though Cocoa itself is well designed, for the most part. Putting together a few demo apps is definitely the way to go, learning a bit of everything on the way. By absolute coincidence, my current main project is in fact a document-based app with macOS as primary platform, went from concept design into development in Spring this year.
I much prefer the Hacking With Swift books. 
Thanks man. So this would be tied to their apple ID and the same across devices so long as they are logged in w/ that ID?
Simply amazing!!! I am surprised you even asked this honestly with all the recommendations Wenderlich receives. Just try the tutorials and you will see. They are well worth it.
I‚Äôve certainly found their tutorials to be useful and wide ranging, but have never tried getting one of their books
Yeah. Make sure you test it ofcourse!
What?
Very much a fan of Paul Hudson
&gt;Paul Hudson Hudson is great, one human can write so many books on Swift always blows my mind.
I‚Äôm still learning and I use App Development with Swift by Apple, the iOS 11 bootcamp by Angela Yu, and sometime the book on Swift by OReilly. Are these good resources? 
I won their debugging/reverse engineering book at a cocoaheads meetup and LOVE it. I now use lldb commands and can use assembly to help debit problems. It‚Äôs kind of like their online tutorials in terms of format, but it is a book. 
Top
I think their books are easy to learn, but not as advanced or having deep analysis like objc.io
Write so many books AND keep them updated so quickly and completely, even over major versions, is astounding. Also speaks publicly at conferences, engages with readers and learners directly on Twitter (and Reddit) and has continued and genuine enthusiasm for Swift in so many places. I don‚Äôt know where he gets his energy and focus from, but I‚Äôm convinced he‚Äôs a machine or a team of people!
I was a student scholar for his conference. Great guy, great team, and great lessons/workshops. His website is pretty top-notch and has tons of great info, as well as the books.
Recommended. (I wrote one or two things there a few years back. All totally out of date now though so you are unlikely to see it.)
Thanks! I've seen that mentioned as well, but I don't really understand the reasoning behind it. Alright so, I got rid of .isRemovedOnCompletion and set the model value. I'm still having the same issue and I tried to printing the strokeEnds when animation is played or reset and it seems that even though I'm setting strokeEnd to 0.0 at reset, the strokeEnd still assumes some arbitrary decimal point value when I go to play again. This might be the root of my problems. [Here's a screenshot.](https://imgur.com/a/YXmNkaK) Any idea what could be causing this?
Hey, just headed to bed so I‚Äôm on mobile. Check out https://devstreaming-cdn.apple.com/videos/wwdc/2017/235q83l07a9gtq2rhh/235/235_building_visually_rich_user_experiences.pdf , it has a Core Animation Best Practices section. It explains the model vs. presentation thing and might point to what‚Äôs going on. That WWDC session is really dense and the best resource I‚Äôve found
I‚Äôve only bought one of his books, the App Development and Reverse Engineering book. It‚Äôs *excellent*, and I highly recommend it. (For context, I have ~15 years of Cocoa experience, and consider myself an expert. Still learned a bunch from it.)
I have bought ‚Äòmetal by tutorials‚Äô and ‚Äòrx swift‚Äô and I thought they were very good.
thank you for explaining in detail, I wanted to ask one more thing, should i use core data for something like this, i didn't use it in first place because i thought userdefaults would handle the work(which they didn't), as there were only 3-4 options initially, and i thought that cell is not refreshing with the correct value because there are too many switch statements happening in loading of a cell.
just checked it and its working, thanks!
Those are perfectly fine! I began my iOS journey with a course by Angela and I just got an iOS gig
Glad I could help
Check out Hacking with Swift and Ray Wenderlich. 
Quite aside from the pros and cons of singletons, the app delegate is there to respond to application-level events. It doesn't mean *"Put everything that doesn't belong in a view controller here"*, which is one of the most common anti-patterns I see. This is data persistence ‚Äì what's it doing in your app delegate? 
It really depends. I find it quite good if you want to get up and running with a framework or concept very quickly. On the other hand if you have time to sit and read apple‚Äôs programming guides are generally more in depth. If you are a complete beginner ray wenderlich is a really good place to start.
www.hackingwithswift.com is great for swift and his book Hacking with MacOS might help you get started with Mac development as well. 
Plus IMHO it's fun.
I can really recommend TeamTreehouse. They cost $25 a month, but tbh I think it's a pretty good investment, because their tracks are extremely good and somehow I keep being motivated when I watch their videos (to watch more). They have a 50 hrs Swift/iOS track and Obj-C/iOS track, which can bring you pretty far. I'll leave you my referral code if you want to take a look at it [http://referrals.trhou.se/t15thbruce](http://referrals.trhou.se/t15thbruce)
1. Try and think of a cool little app you could try and start building right away. It doesn't matter what, just something that you personally will be enthusiastic about. 2. This [article](https://www.raywenderlich.com/731-macos-development-for-beginners-part-1) looks like a good place to start with developing a Mac app (I've only skimmed through it to see if it was suitable for a beginner). 3. Go through that article slowly and take the time to understand the different sections of XCode - it will make it much easier to understand what the Swift code itself is doing later on. 4. Playing around with Xcode (that article describes how to install it) is a great way to learn. Try and make changes in the code and see how that affects the app. 5. Once you have some familiarity, then as /u/Salman544 mentioned, the official Swift [docs](https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html) are an excellent place to learn about the language itself.
SonarQube with the SonarSwift ([https://docs.sonarqube.org/display/PLUG/SonarSwift](https://docs.sonarqube.org/display/PLUG/SonarSwift)) plugin will do that. &amp;#x200B; Don't forget: the corollary of decreased duplication is increased coupling.
That's a really good idea, thank you. :) I had a cool idea for an app that would help my morning commute. But I don't have any iOS devices, only a MBP. Are these Swift tutorials etc. suitable for developing for OS X too? Swift doesn't differ for the desktop OS?
They have a wide range of depth...which is an issue at times if you aren't on the look out. Otherwise, they get most basic/intermediate topics done well.
I didn't like them. From what I read he assumed in every book that a total noob to programming and Swift was the reader. Even though he had an intro to Swift book and each book had a long intro section. It made the books a chore to read due to the belaboring of elementary concepts every step of the way. He'd introduce concept D which depended on concepts C, B and A. And instead of just explaining how D worked here, he'd spend time talking about A, B and C. But if you skipped anything you'd miss a crucial point about the new concept D. 
Good content, good topics, poorly organized authors. It's a few years since I last looked at it, but their Core Data book was just absolutely full of great concepts and ideas that are horribly explained. 
[Simian](https://www.harukizaemon.com/simian/) might do what you want.
Swift itself is consistent across iOS / MacOS (and anywhere else it is used) but each platform has some specific libraries (bits of code) that you can use as you develop your app. For instance the way you tell the app to load a new 'screen' is different on iOS and MacOS, even though the Swift code is following the same rules. &amp;#x200B; That tutorial I linked to is specific for a MacOS app.
&gt; Don't forget: the corollary of decreased duplication is increased coupling. Only if you do it incorrectly.
I‚Äôve never seen the word corollary used before until today, and this is the second time it showed up. Weird how words are like that or at least seem that way. 
I‚Äôm sorry I‚Äôm not answering your question whatsoever but I have a question of my own: when talking in terms of 1-1000 or even 1-1,00,000 what is the advantage of computing prime numbers as opposed to reading from a database of known prime numbers in those ranges (seems like it would be faster)? Or are you just using this code to test the speed of cpu vs gpu in different scenarios using metal?
Best resources: Ray Wenderlich and the official docs. Also play around with playgrounds Just my opinion though, Swift might not be the best first programming language. I might suggest Python or Java, but hey its totally up to you.
If you have an iPad download the app playgrounds. It‚Äôs designed for children but as you progress you get some really hard logic puzzles and there‚Äôs other mini games that test other elements of programming.
That‚Äôs exactly what I like about his books. He gives you the big picture. 
I spent 6 months in tutorial hell and using the hands on approach. Paul Hegarty's Stanford course brought clarity to a lot of important practices that run of the mill youtube tutors overlooked. It's 17 lectures in English with clear audio. [https://www.youtube.com/watch?v=ilQ-tq772VI&amp;index=1&amp;list=PLPA-ayBrweUz32NSgNZdl0\_QISw-f12Ai](https://www.youtube.com/watch?v=ilQ-tq772VI&amp;index=1&amp;list=PLPA-ayBrweUz32NSgNZdl0_QISw-f12Ai)
Here's a great resource for learning essential programming concepts (algorithms and data structures) that happen to use the Swift language. https://github.com/raywenderlich/swift-algorithm-club
So, a coworker and I have decided to make a mural or portrait out of Rubiks Cubes. To ease the process of plotting individual pixels, I create a quick Processing (Java based language focused on graphics) program to draft up the general layout. This had some limitations since each image requires different parameters for the colors and amount of detail, so I wanted to create an app to let us create these on the fly with an easy interface. I know how to get the pixel colors and brightness from a UIImage, but am trying to figure out how to create a new, pixelated image from this data. Any input would be appreciated. Thanks!
There's no way to access the user's Apple ID, no. It's not unreasonable to ask users to add a user account to sync between devices. Either that, or use Apple's CloudKit which should sync automatically without logging in. I prefer Firebase though ;)
Is that just basically 1000% more pixel per pixel?! for an image.
Not sure I understand you 100%, but I think so?! Basically, depending on the ‚Äúresolution‚Äù I want in my Rubik‚Äôs cube drawing, I go over a square area of an image, average out their RGB values, and decide which of the sixth colors to use based on that (white being brightest, then yellow, orange, red, blue, and green). The reason for the app is that depending on the image, you need more contrast in the lights or in the darks, so you have to change the values from 0-255 on how you decide which color to show. Hoping the app will help find that sweet spot easier and allow me to mess around with the order I use colors for brightness
Try to answer this, How do you, "Efficiently creating a **non-**pixel based image?"
Wait, thanks, but your post makes it sound like CloudKit and Firebase are mutually exclusive. We may well ask the user to add a user account to sync between devices, just trying to find a way around it.
Wenderlich books are really high quality and extremely clearly written. I picked up their iOS animations book and was blown away by how easy they made it look. I also have their Core Data book and have started Ch.2, loving it so far. I'm aiming to get their Machine Learning and ARKit books soon, once I'm done with Core Data. Being an iOS and an Android dev, I believe the Wenderlich books are a huge boon for the iOS dev community, something the Android dev community sorely lacks. I'd also like to recommend Paul Hudson's and and objc.io books. They're all excellent. 
Have you tried setting the z-index of your sidebar to a higher value than the navigationbar?
Your code looked fine, so I've tested it and it works perfectly for me. I can start, pause, resume, and cancel and I can always start the animation again with no problem. The only instance in which it won't restart, is if calls to `pauseLayer` and `resumeLayer` are imbalanced. If I pause the animation, then remove it, *then* try to start it up again it won't start. But that behaviour is expected, and it's easily fixed by adding a call to `resumeLayer` before adding a new animation. Perhaps you could share your timer implementation, as your code that deals with CoreGraphics seems fine.
Well as far as i know they are abstracted. There are reference (classes) and object (structs) types. Reference already implies that it is a pointer instance. E.g. If you create a class it is a pointer
Actually its not a side bar. It just navigation to other view controller. Just general Push and pop is showing this effect.
You can use `inout` to indicate that you are expecting what would be known as a pointer in C. ` func triple(_ a: inout Int) { a = a * 3 } var a = 2 triple(&amp;a) print(a) // 6 ` 
I'm pretty sure you'd want to use GLSL for something like this. I'd write a shader that takes a side length (for the Rubick's Cube cell size) sample the color of a vector and mapping to a palette. Take a look at the function `gl_FragColor`. Doing so in the OpenGL layer would keep performance great (likely on older devices as well) but I'm sure you'd get great performance on Metal too, I just don't know enough about it to recommend it. 
Yes, there are actually multiple types in Swift to represent a pointer: https://developer.apple.com/documentation/swift/swift_standard_library/manual_memory_management
tl;dr: Yes. Longer: Depends what you want to use them for. There are pointers in various forms in Swift.
Swift still supports everything C can do in that regard but the default bahavior is that everything you write yourself is a value unless you mark it as a `class` or inherit from something that‚Äôs either a `class` or `NSObject`. https://developer.apple.com/documentation/swift/swift_standard_library/manual_memory_management
That's so cool. I wanted to do something similar to that when I saw a video of people making a photo of Bob Marley (maybe?) using Rubik's cubes. I suggest you look into Metal kernel shaders. They're easier to setup than OpenGL, and way more performant on Apple devices. 
You might want to consider running a k-Nearest Neighbors classifier with k=6 -- after convergence, you should have 6 different centroids (i.e. colors) with which you could assign any pixel in the original image to based on whichever is the closest color in RGB value. In that way, you might avoid your issue of needing to manually adjust the contrast. The only drawback is that you likely will not end up with traditional Rubik's cube colors. 
I write Metal implementation of some encryption algorithms, and I need to have prime numbers generation function with some **random range** as a param (like 50 000 ... 1 000 000 000, 10^3 ... 10^5 or other) and compute it inside shader. I cannot copy some array of precomputed prime numbers into GPU memory because there is some memory limitation of GPU memory (for example range 1...10^9 produces ~50 000 000 prime numbers and it's around 50 000 000*4 = ~190 MB (using uint32) and it's very big array). And in my case, I cannot store some large database with prime numbers and select random integers. 
You‚Äôll want to do a check on the size of the array, and if you‚Äôd like, set a default for prevItem for when the condition that the size of the array is &lt;= 1. PrevItem only works when the array is large enough to have that index (I.e. &gt;1).
Regardless of how many objects your array has, your code will always crash. Because you are getting the object with [indexPath.row-1] and for the first row, the index will be -1. Arrays start with index 0, anyArray[-1] is always out of bounds. You can check the "indexPath" before you get prevItem. If it's bigger than 0 that means you can set the prevItem but if it's equal to 0 then the code will crash.
if myArray.indices.contains(targetValue)
You want crashes? Because force unwrapping is how you get crashes. I mean you can do it if you're really really sure the optional contains something. I guess that's what you do with C++ all the time anyways ;) But for sanity (read: code that ships to customers who then complain that their app is crashing) I'd always do proper unwrapping. The few lines of code saved aren't worth the trouble of having to upload an emergency update because shit's exploding.
I bought his Udemy tutorial last year when Swift 4 came out for some $10 or so. The networking stuff was worth the price alone and It came with a HUGE bonus download. Hard to beat the bargain. I bought his "Space Viking" tutorial back in 2010, it was my first iOS game tutorial and it was fun. Some of his tutorials are outdated and don't always get updated to the newest stuff. There was a OAuth tutorial that happened right about the time Apple did an upgrade that made it outdated and there was no update from RW. I'm sure that's the case with most tutorials, they become outdated at some point.
What is the application for this? It sounds like an uncommon requirement and it may be a flag that you are using an anti-pattern here. There are valid cases where something like this is required, but generally a more sophisticated store or state management solution would be used.
For efficiency you can use core image and write your own filter. This will be a ton less boilerplate than using opengl or metal directly. The core image programming guide is a good place to start. Here are the docs on custom filters: https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/CoreImaging/ci_custom_filters/ci_custom_filters.html You can start tinkering with custom filters in quartz composer. I usually use this to prototype ideas. You setup an image, a custom filter and an out and link them together. There‚Äôs then a small window to write your kernel code.
thanks
&gt; "if let" and "guard let" won't work because the optional needs to stay wrapped so that I can unwrap it further down. You're going to have to clarify this, why do you need to unwrap it further down instead of here?
Always make sure that your index is in the range of 0 to the count of weightDataModel?.weightData.
[CloudKit](https://developer.apple.com/documentation/cloudkit) is a way you can store your data on iCloud and it'll automatically sync between devices - this would be separate from Firebase Database/Firestore/Storage. You don't have access to any iCloud identifiers or anything, everything is automagically synced for you without having to worry about it. It provides "minimal offline caching support" (from their docs) so isn't really a replacement, but if you're looking to just sync some small data you could do that. I wouldn't suggest it, but one thing you could potentially do to combine them both is: generate a `UUID` and store that in their iCloud drive. Then check for the existence of it in the iCloud drive on a new device and use that as the identifier. Again, I wouldn't suggest doing this for any sensitive data at all. But... if it's not private data it might be an acceptable workaround. This would have side-effects though, if someone is logged in on a shared iPad someone in their household would get access to their "account".
You are most likely suffering this crash because you're not managing your data model for this on the right thread (and thereby causing inconsistent values between the number of rows in section calls and getting back indexPaths outside the valid range). Data touched by the UI thread needs to be edited on the UI thread. When items are added to weightData, you need to call the proper insert/delete calls, or you need to reload the data That said, you can offer yourself a bit of protection with this: override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let itemIndex = indexPath.row let previousItemIndex = indexPath.row-1 guard let weightData = weightDataModel?.weightData, weightData.indexes.contains(itemIndex), weightData.indexes.contains(previousItemIndex), let item = weightData[indexPath.row], let cell = tableView.dequeueReusableCell(withIdentifier: "weightDataItem", for: indexPath) as? WeightDataTableViewCell else{ return } You then do not need the if let check, and can directly use all the non-optional values. 