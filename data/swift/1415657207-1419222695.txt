There are only 8 and it doesn't say they were built entirely with Swift, only that &gt;"More developers are incorporating Swift code into their apps. And some are building all-new apps entirely in Swift." Some apps cited existed before Swift and only had minor updates since iirc.
Check out mine, built entirely using Swift. Works from iOS 7.0 and up. [Immunizations](http://itunes.apple.com/us/app/immunizations/id914709957?ls=1&amp;mt=8)
Look closely. The solution says `var instanceOfB: B? = nil`, NOT `var instanceOfB = B()`. Those two are very different. Also, note that there is additional code in A's `init`.
Why don't you look at Apple's developer documentation? 
Seems like an interesting project. Do you have a link to any online material?
You should be able to understand all the code I've posted since it's commented all over. You're missing some stuff in your code if you compare to mine, like getting the distance to move for the rectangles, in my code its the variable DistanceToMove, its not much of a difference but gives accuracy so its better to use that than what you have in your moveToBottom distance values. And just look at my //Spawn section and the spawnPipes function, I can already see some stuff that you're doing different.
You probably know that Objective C and Swift are interoperable and that adding lines of Swift in an Objective C app doesn't necessarily means they rewrote the whole thing... Partial migration is a more realistic guess. edit : removed the drama
I fixed this by closing XCode and deleting derived data at :~/Library/Developer/XCode/DerivedData Hope that helps. 
if it's somewhat reliable, file a radar (http://bugreport.apple.com). For now, I just chalk up the whole toolchain as unstable as I sigh and restart Xcode for the Nth time that day. I've got one Swift project where type inference in the editor is broken - getting &lt;&lt;error-type&gt;&gt; or a regurgitation of "let varname" without any actual type information. The "Xcode is behaving weird" voodoo which has been around since Xcode 4 came out has been - restart Xcode, clean the project directory (hold down the option key), clear out the Derived Data, reboot device, reboot Mac. Somewhere along the line it'll start behaving reasonably for awhile.
I made a manual photography app in 100% Swift that uses the new iOS 8 camera APIs. It's called [Luff](http://luff.io/) In the process, I made a custom slider with variable sensitivity that I might open source soon
This looks pretty useful. I'm downloading it now. Does it connect to the Health app in any way?
I'm sorry, I have absolutely no idea what you're trying to do here. I think you might need to rethink the data structures you're using to store this.
https://github.com/MichMich/SwiftTextClock - 
I've rewritten my app completely in Swift and have it uploaded to the AppStore. Waiting for a few more days of testing before submitting it for approval. I'm testing via. TestFlight at the moment. I hope to open-source the app in GitHub once it's deployed and working. 
Apple Pay API is not likely to be released publicly until iOS9. Apple generally uses new features like that in a first-party only environment while they solidify their library for public use and support.
There are currently no real Health app connections to make in regards to this app specifically. Hopefully Apple expands it in the future.
&gt; You guys Love it or Hate it and why? I haven't built a fully featured app with it (though will be soon), but I'm loving it. When I successfully write a generic function I feel like lord supreme badass programmer of the world. Strong type checking can be frustrating, but it prevents stupid assumption making and allows the compiler to catch lots of problems. When I'm back in objective-c land I find myself really missing small features like map/filter/reduce (though I've just ended up writing my own extensions). Only thing I really dislike are the lack of header files. It would be fine if there was a shortcut in XCode to only view a class' public declarations. But there's nothing I can find. I really, really, really hate this. &gt; What makes it so much better than Obj-C? I wouldn't say "SO MUCH BETTER", but it has better type checking, and good compiler type checking and type inference. Switch statements and enums (w/associated values) are way more powerful. Generics are awesome. Closures are way better than blocks. Freely passing functions around comes with a lot of benefits, and will hopefully make ReactiveCocoa bearable to use. &gt; Thinking further in the future, what makes it so superior? Eventually, new cocoa/foundation APIs will only be available in swift. 
I go with GoDaddy because I have all my Domains from them. Never had a problem with them, but I'm not sure what you're referring to when you're talking about "good place". Edit: Grammar
GoDaddy is probably __the worst__ place to purchase a domain. Just reading around the net you will find out quickly how horrible this company's practices are. I'm glad they are working out for you though. src: http://antigodaddy.com/
I just do what you're suppose to do. Buy the domain and pay for it on time. Guess I'm lucky.
their practices are in the way of even what you described. As explained by a lot of the reviewers in the aforementioned website and many other reviews on the internet. GoDaddy buys your domains in advance before you can buy them, just so they can sell the domains to you for 10x the price or even more. Go there, search for a domain worthy of registering and come back to it a few hours later (or as one of the reviewers said, 10 minutes later!) and then GoDaddy had already purchased the domain for themselves and put it up for auction for 10x the price. This is some really shady business practice and customers should be aware of that.
I too bought a domain once and I will never again.
Are you asking for the consensus or individual opinions? 
Smart name :)
&gt; Only thing I really dislike are the lack of header files. It would be fine if there was a shortcut in XCode to only view a class' public declarations. But there's nothing I can find. I really, really, really hate this. Have you tried using a private extension for all of your private stuff? &gt; Eventually, new cocoa/foundation APIs will only be available in swift. Possibly sooner rather than later, considering the Apple Watch platform is right around the corner and will have very different characteristics to iOS and OS X devices. 
I really like the art :) 
Swift is an innovative new programming language for Cocoa and Cocoa Touch. Writing code is interactive and fun, the syntax is concise yet expressive, and apps run lightning-fast. Swift is ready for your next iOS and OS X project — or for addition into your current app — because Swift code works side-by-side with Objective-C. 
Here. Technically arrays already have a type T but for some reason it doesn't extend AnyObject, which includes ===, and I can't make S extend T. I'm sure someone can come up with a better solution, but this worked when I tested it. extension Array{ func indexOf&lt;S where S:AnyObject&gt; (elem: S) -&gt; Int { for var i = 0; i &lt; self.count; i++ { if elem === (self[i] as S) { return i } } return -1 } } edit: Actually yeah, [exSwift](https://github.com/pNre/ExSwift/blob/master/ExSwift/Array.swift) has a much *much* nicer version. Didn't even know about equatable.
Neat graphics! Did you do the art yourself?
You should have exactly one instance of each class, I'm not sure how you can call that a Maze. Copy my "solution" source into a playground and construct an instance of class A (by writing `A()` somewhere at the end - the `println` line does not print nil. Your only job is to understand why. 
My educated guess is that you did not use the `@2x` specifier in the image name. The toolbar actually expects an image with 22 points size. If you use a filename without @2x in the name iOS will treat it as a non-retina image. In non-retina mode 1 pixel equals 1 point, so iOS thinks your 44 pixel wide image is 44 points wide, which is too big for the toolbar. tl;dr the image should be named like `toolbarImage@2x.png`
Unfortunately, I don't have any information for the new version of Reto that I developed, but there's some stuff on the "old" version: http://www1.in.tum.de/lehrstuhl_1/people/42-projects/current-projects/486-reto The changes are rather massive however - the old implementation is in Objective-C only, the new one is in Swift and Java. A lot of the stuff changed, for one, we abandoned the old "high layer", so reto's API is pretty basic now: discover peers, establish connections, send data. No group invites and management, no serialization-related stuff. We (or rather, I) decided to leave those topics for the Application developer. Internally, a ton of stuff changed as well... but it doesn't make a lot of sense to write about those, since you can't access the old or new sources (yet).
Mine's exactly the same. Trying to build a full project in swift just seems impossible at the moment. SourceKit crashes as soon as I start typing in certain files. I haven't bothered submitting a crash report because I'm sure Apple must be aware of this issue as it happens so often in so many different files. It is crazy that they've released this as the GM version. I check every day hoping there'll be an update so I can actually get on with things without constant flashing SourceKit popups and lack of autocomplete. Drives me absolutely crazy :(
I used to use Namecheap until I had a problem with a domain and received the worst customer service I can remember ever experiencing. It caused my business serious problems and they were completely shameless in ignoring me and fobbing me off when they knew how serious it was. I switched to Hover and haven't had a problem yet. However the true test of a service provider is how they handle problems, so I only cautiously recommend them at the moment. 
That seems to have done it! Thanks!
2 different things: website vs. domain name A website is hosted on some computer, somewhere, on the Internet. A domain is a name you purchase (foo.com, joej.org, whatever), against which you place records (www.joej.org, e.g.) that point to that computer. They don't have to be the same company. I'd think it be best if they weren't. For me: Godaddy for domain names (yeah, I know folks don't like them) &amp; webfaction.com for hosting (because they are AWESOME)
Oh, in that case you need to make sure that your info.plist contains: View controller-based status bar appearance set to YES and then yes, you use `[[UIApplication sharedApplication].setStatusBarStyle:UIStatusBarStyleDefault animated:YES]` Translated to swift: `UIApplication.sharedApplication().setStatusBarStyle(.Default, animated: true)`
It is likely that anyone subbed to /r/swift will be interested in it or like it. If you asked this at /r/objectivec you would probably get more, um, objective answers.
Perfect! Thanks It wasn't working, but did when I set View controller-based status bar appearance to NO. The preferredStatusBarStyle() override function then didn't work but setStatusaBarStyle() func did. Thanks for your help :)
You may be looking for var myArray = ["one", "two", "three"] for item in myArray { var index = find(myArray, item) // How to find the index of an item in a sequence println("index of \(item) is \(index)") }
You should probably create 3 (or how ever many you need) blank table cells when you need the container and make an animation to reload the table data. Done, you said the container is over the top of the table so there should be no problems
&gt; Have you tried using a private extension for all of your private stuff? I like this idea, and will likely begin to do this, but you still can't separate variables into extensions. Also, when using a new class, I would prefer a view that only showed you what was relevant, by hiding its implementation details and private methods. All of the bridged foundation APIs look like this.
I'm still learning swift, but I learned enough in the 30 days or so it took to write version 1 of my app, and I'm still learning as I proceed. Note, before I ever wrote a line of Swift I read Apple's Swift book from from to back. What I find limiting about swift is the lack of dynamic dispatch that makes ObjC so nice, and the odd mismatch between ObjC @selectors and swift's stringly-typed selectors when using ObjC APIs that expect selectors. Also, the Swift debugger is nowhere near as solid as ObjC's.
Individual opinions
Thank you everyone for the feedback, but I'm not sure why all comments have 0 points...
It's a big step forward. It's a nicely designed language, but it's unfinished and has lots of rough edges. Give it a year, and it will be a clear superior to Objective-C for the vast majority of tasks. Those that learn it now will be tripping over lots of bugs, but they'll be ahead of the game in the near future. The developer community does not yet have a solid grasp on how the best way to use Swift in various contexts is. This community knowledge will have to be built over time by the early adopters. It wouldn't surprise me if Apple started making some features Swift only, particularly for Apple Watch. 
Ok, but it printed 1, because you passed 1 to that variable in A(), thing is, I don't know what the value is going to be, when it's being incremented in GameScene. I try all the different things including what you wrote, but I keep getting nil, 0, or some weird errors. I create the instance, just like you showed me, and still nothing. It really gets to me. Any ideas why is that not working? Maybe the problem is how I'm changing the scene? Could you please look at the code? http://pastebin.com/qspnAiGE
&gt; but what can I do to transfer domains? It's very easy. https://www.namecheap.com/support/knowledgebase/article.aspx/876/83/how-to-transfer-a-domain-from-godaddy
In my sample code, it doesn't matter who changes foo, the same thing happens if B itself changes foo for whatever reason. However, your problem is a little easier than the thing I posted originally, because you actually create a new GameOverScene multiple times whenever the game ends. I though you created it only once and reuse it. But your solution works fine. The only thing you need to do is to pass the score to the game over scene. There's no real need to pass a reference to the game scene itself. But, for the sake of argument, if you want to have a reference to the game scene, just add `scene.gameScene = self` after `let scene = GameOverScene(size: skView.bounds.size)`. Alternatively, you could have a `score` property in the game over scene and assign that instead (i.e. `scene.score = score`), and remove the reference to the game scene. Note that self refers to the current instance of the game scene, the instance in which the enemyDidCollideWithSpiral() function is executed. This is more or less the same idea as the `instanceOfC.instanceOfB = instanceOfB` line in my example code, just that `instanceOfB` is the "current" object, which can be accessed using `self`.
Doesn't matter, instead of var gameScene: GameScene? = nil, I have: var gameScene = GameScene() and that works! THANK YOU! THANK YOU JASAMER! YOU ARE THE BEST!
Well, as the output says, it's an optional. The dirty, easy way is to use `gameScene!.scoreText`. I guess the game scene shouldn't be an optional anyway, if you always pass a game scene to the game over scene. I'd create an initializer for the GameOverScene that takes the game scene as a parameter, then you can make the reference to the GameScene non-optional, and you can just do `gameScene.scoreText`. Read up on how initialisers work for that, Apple's book on Swift has plenty of information about that. Maybe you should also read up on optionals, while you're at it.
Go with the Swift. Its maintainable and readable. Yes, there aren't many frameworks and libraries out there yet but still, if you're making a simple app without the fear of deadlines, I'd then suggest to stick yourself with the Swift as you might start hating Objective-C in a couple of months. 
sorry what is your point? Can you make a statement that has a real meaning?
Yea, optionals? kinda throw me off a bit. I just don't like dealing with them. I just try to avoid them and set variables to a generic Class() if I don't initially know what they are. How bad is this?
I dunno, but ((all? These? Make!) Me? Wanna)? Kill? Myself!
My point is that you're trying to prove to someone that a company is no good by directing them to an obviously biased source. 
Sudocode... UIView.animateWithDuration...animations {tableview.view.center.y += heightOfContainer container.center.y += container.frame.size.height} //You MIGHT have to use a UIViewController instead of UITableViewController and throw a UITableView inside, that way you can just move the center of the entire UIView. I'm suggesting this because I'm not sure if tableView inherits from UIView and so not sure if UITableView has a .center property. EDIT: changed formatting a bit.
Hahaha, I know the feel bro. Just curious, do you currently have a job as a developer? Or is that the future goal?
Wow, exSwift looks awesome. It feels like cheating though.
I'm an employed PHP web developer looking to expand horizons :)
Clearly this is a rare problem. Don't fall into the though trap that is seeing complaints on forums online. Nobody's compulsively logging in and reporting their no-problems status. The few that do are just as rare as those reporting problems. Yes, the problems are real. Yes they are annoying. How can they be happening? Obviously, they aren't a noticeable problem on Apple's side of the fence or they wouldn't have shipped it. Xcode is complex and not a mass-user facing product. Having used a number of IDEs over time, I've never once had one without annoying bugs. They are difficult to make at all, let alone well. Anyway, the situation is not that hard to understand. The real question is what do you do? If you can't work well in Xcode, then, stop using Xcode and try alternatives (like AppCode which has some swift support now.) If they are worse, well, you have what you have. Be sure to consider the problems when making estimates of time and such. Hopefully next update will fix it. FWIW, I've never once had SourceKit crash, but, I have killed numerous playgrounds and segfaulted the REPL on the command line a bunch of times!
Just tried what you suggested, unfortunately [this is the result](http://imgur.com/Dzgq8Ia). This is the issue that occur no matter what way I try to do it, I get the TableView to slide down the required 150 (container view height) but the container view still shows up at the top of the table view...
I don't see it as bad -- if anything, it kinda enforces the Null Object Pattern. For more complex cases, instead of simply initializing to an empty Class, you could create a subclass that contains default values. The main benefit behind optionals is that it requires you to be explicit when you _want_ to deal with null values.
This pretty much depends on what happens when you use the instance of the generic `Class()` before you know what it should be. Does it do the correct thing? Nice. You actually can't use that instance because bad stuff happens? Then you're just circumventing a safety feature of the language, which is a pretty bad idea. I think optionals are a really awesome thing, it makes code so much safer. What problems do you have with them?
Not having variables in an extension ought to be a good thing IMHO. That means that the core of a class can be defined without extensions. So to understand how a class works all you have to look at is what is within class. If you can just add variables whilly nilly then somebody reading the code can't know for sure what is the minimum amount of code that needs to be understood to use a class. That is sort of usefull to know for anybody considering subclassing e.g.
Here is my opinion from translating parts of an app to Swift. Swift has a lot of potential. Right now that isn't getting fully realized because the swift specific standard library is tiny. There is so much stuff missing. You can't do much Swift programming without Cocoa at the moment. It is still rather unpolished. Stuff that ought to work doesn't work. E.g. inconsistencies between what works in the REPL and the playground and when compiling in normal project. xCode has quite limited support for Swift. There is no refactoring and assistant view doesn't show related GUI e.g. A number of things is rather awkward and annoying to do because we are using APIs designed for a very dynamic language which was very casual about types. E.g. dealing with JSON data is a pain with Swift. While optionals is quite neat, they can be quite annoying at times too. I feel we need a lot more powerfull constructs with optionals or more extensive libraries and syntax sugar to deal with optionals. When you are dealing with IO or text conversion based code you often end up with having to unwrap a lot of optionals and this gets very messy quickly. Looking at Rust and Haskell they seem to deal with that by defining higher level constructs. If I only knew more about this I guess what I ought to be saying is that Swift lacks some sort of Monad. I am actually rather torn about what to do with the app I am working on now. I quite like Swift but it doesn't quite feel finished. So I don't know if I should charge ahead with Swift or try to slow it down until Apple has worked out some more of the issues. The full Swift transitions is going to take years. There are so many libraries to adapt and best practices we need to get into.
I've used the `unwrap` function, and I quite like it for quick checking of multiple optionals. Note that you can also use the switch statement with a tuple to pattern match multiple values at once. For example: switch (optionalFirstName, optionalLastName) { case let (.Some(firstName), .Some(lastName)): println("Hello \(firstName) \(lastName)!") case let (.Some(firstName), .None): println("Hi \(firstName)!") case let (.None, .Some(lastName)): println("Greetings \(lastName).") case let (.None, .None): println("Good day to you!") } From: https://gist.github.com/tomlokhorst/f9a826bf24d16cb5f6a3
Nice. I'm unemployed. It sucks! IOS developer is the goal. But I'm pretty discouraged as it's been months since I've had a job. Hoping to finish this small game I'm working on while I apply to jobs. 
I kinda expected that I'm not the first to think of this :-) The unwrap function is a bit more concise than using a switch statement, I like that about it. Using switch also gets rid of the nesting issue though, which is the most important part.
Thank you for your detailed response. I agree with most of what you're saying, especially with it not feeling finished. In your opinion, how long do you think it'll take for people to fully transition to Swift? My guess is 2-3 years. Also, what makes you strongly believe that Swift has a lot of potential? Edit: Grammar
Good luck man. I landed this job purely on self teaching, so it's possible. But be sure to not let it take away from other things :)
All the question marks can be avoided by wrapping a block with an if. Bit Swift doesn't like that. And then my code looks like it's asking questions or yelling. I just don't like how the same type optional is actually a different type. And then to do more than one expression a line I end up having multiple parenthesis each having an exclamation or something. Instead of an if or try catch block. 
I suppose I have yet to encounter the need for optional classes. Maybe when I need to use them, I'll appreciate and understand their functionality more.
This is why I'm asking the question: am I the only one having this issue? I wonder if this is isolated on some code that makes this happen or if this is global. On the latter I can't do anything but otherwise I could expect some informations from someone who might know what is causing that, thus changing the way I code so I can avoid that bug. I made a very simple project that shows the bug. It does the "SourceKit crashed" on every desktop we have that have the official XCode 6.1 release. https://s3.amazonaws.com/ever-hosting/Simon_stuffs/SourceKitCrashed.tar.gz Just untar, open the xcode project and try to write "println(" in the WriteCodeHere.swift file. Does it happen to you too? It does that constantly on some files. 
I managed to make a very small project where the issue is happening all the time. I filed a bug report.
Yes this is a known pattern, in Haskell it is called an Applicative functor. Basically it combines a tuple of containers to a container of tuples. In your case the optional can be seen as a container with at most one element in it, so you can only obtain a single element (tuple) in the output if none of the inputs were empty.
Solve the permutation problem for zero elements, then for one element. Then for two, in terms of the previous solutions. Discover the pattern how to go from n to n+1. Then you are done.
Xcode has a cool new feature that lets you inspect your view hierarchy in the debugger. I'd try that, most likely one of your views doesn't have the size that you expect. Another technique I sometimes use when working on view hierarchies is setting my view's background colors to a bunch of different transparent colors (e.g. `view.backgroundColor = UIColor(red: 1, green: 0, blue: 0, alpha: 0.1)`), so their frames are visible. That can be pretty helpful with figuring out what's going on.
I found removing everything in ~/Library/Developer/Xcode/DerivedData/, including the ModuleCache directory helped. Make sure you shutdown Xcode before you do this.
This does crash on my system. It also crashes if I pull the code into another project. Based on the crash log, it looks like it's related to the level of indirection involved in this type of inherited protocol implementation as it crashes during a dedecoration of a type.
Assuming this is your view hierarchy: View (parent view) |_ Container view (menu) |_ Table View Have you tried using constraints to accomplish this? Constrain the menu view to the parents leading, trailing, and top edges. Constrain the bottom of the menu to the top of table table view. Constrain the table view to the parent view's leading, trailing, bottom, and top edges. Make an outlet for the top edge to table view constrain. Then when you want to show the menu, you animate the table view's constraint to the parent's top edge. This should act like changing the Y origin of the table view and increasing the height of the menu view. 
Swift code is more predictable by nature. You know exactly what everything's type is and whether it should have a value. If you are going to get a null pointer exception, you often typically rely on it being wherever you put a "!". On the other hand, SourceKit and Xcode are definitely not predictable when writing in Swift.
The point of my posts is wanting to hide all *private* variables and functions, in order to make it really clear to the consumer exactly what is available. The other poster mentioned private extensions as a way to separate out private methods into another place and make it really clear what methods are available. However, as mentioned, this does not solve the problem for private variables.
So upset. exSwift's indexOf works just the way find() works. Am I incorrect to think that the index of an object is it's location in an array? I'm baffled that swift wouldn't have a solution to this. I suppose I'll have to use an NSArray.
Use CloudKit and use the public database. The public database of CloudKit is linked to the developer's iCloud account. Have device 1 write a CKRecord on CKDatabase.publicDatabase() and then create a fetch request on Device 2 that waits for the data to be written. That's how I would do it if time wasn't of essence here (syncing two CloudKit requests takes some time and is network dependent). Otherwise you could use Bluetooth APIs? That requires both devices to have bluetooth enabled, which pretty much almost never happens really from what I've seen. People don't use Bluetooth as often as we think they do. 
A fairly simple way to handle this kind of stuff might be to use websockets. 
Turns out I was wrong. My world is a lie. Slightly embarrassing but at least I learned something new.
So this whole thing falls down and crashes if only one of the optionals are nil? I usually want to check if something is nil and if not, read from it, and then check the read data if that's not nil, do something else with it... So it's a chain. I very rarely would want to unwrap two optionals in one line of code!
&gt; So this whole thing falls down and crashes if only one of the optionals are nil? No. That would be terrible. For chaining, you already got optional chaining and map and stuff like that.
fall down and crash was a metaphor for fail... So if i have something like this: var str1: String? var str2: String? var str3: String? = "My String" and do this: if let (a, b, c) = unwrap (str1, str2, str3){ } else { } it will fail the whole if statement because str1 and str2 are nil. Correct? What I am saying is that I personally very seldom want to check two or three __independent__ optionals in one line. Usually the second optional is in the first optional. So first you have to unwrap the first optional (e.g. an array) and then read the other optional from it and then so on.... How many times in your programs do you have to unwrap multiple optionals which are totally independent in one line? If the answer is a lot, then I would change the way the program works.
I disagree. It's perfectly legitimate to have to run an operation only in the event that three independent optionals are non-nil. Consider for example that you have three IBOutlets to animate and (for whatever reason, there are many) optional chaining is not sufficient. You have no else cases, you just need to animate if all three outlets are non-nil. It may not come up all the time, but when it does, I think this is a much more elegant solution than nested if-lets. And it's of course better than keeping implicitly unwrapped optionals around in swift-only code. 
That has nothing to do with optionals!!! I think you may be a bit confused about the idea behind optionals. Outlets are __not__ optionals. They are implicitly unwrapped optionals. Also outlets are set right after your awakeFromNib method is called. If you call them before that method, of course it won't work and your unwrap method won't help because, well, they are nil. So knowing that they will be nil, what is the point of checking it? Sorry but I just don't see how this is useful. Perhaps a real example would be nice. 
It's like saying cars are like motorcycles because they are both called vehicles! This is neither here nor there. We both know a car and a motorcycle work in the same way only in the most basics of things (the engine, the exhaust, etc) and at the same time are completely different in many ways so that if you can fix a motorcycle it doesn't mean you can fix a car just because they are both vehicles. I find your argument flawed. Outlets __must__ be set as implicitly unwrapped optionals. That's the right way of doing it and that's the way Xcode does it when you drag and drop an outlet into your code. But I suppose you can set them as optionals just for the heck of it but why? The reason that they are implicitly unwrapped optional remains a mystery to me but regardless, I still do not see where this unwrap function would be useful. 
&gt; Outlets must be set as implicitly unwrapped optionals. This is simply not correct. Try setting a standard optional IBOutlet, it will work fine. What will *not* work is setting a non-optional property because it will not be initialized at the object's init. But IBOutlets are optionals - and you're absolutely right in that standardly IBOutlets can safely be set as implicitly unwrapped because as long as we -awakeFromNib and the outlet is connected, we're sure that it's non-nil *for now*. Moreover, an implicitly unwrapped optional **is still an optional**. They can undergo all the standard safety checks that optionals can, including if-let syntax (NB: this cannot be done with a non-optional!). They are not two different beasts, they are a slightly different way to use an optional object. Your car analogy doesn't really apply. As to why you would check against nil on an outlet? You really don't have to look far to come up with some sort of example. Consider the following scenario: I have a custom view with a dataSource delegate (similar to UITableViewDataSource) and while there is a default data source at -awakeFromNib, this data source may change - or perhaps even be nil in the future. Here, it would be unwise to use an implicitly unwrapped optional because we know that this outlet may change at runtime. Not to mention the fact that you may want to use optionals for your outlets just for style sake because implicitly unwrapped optionals are not strictly-speaking "safe".
&gt; Your car analogy doesn't really apply. Unfortunately this is a case of a lost cause, speaking with you, that is. It might help you to go back to the basics of Swift written by Apple here: https://developer.apple.com/library/ios/documentation/swift/conceptual/Swift_Programming_Language/TheBasics.html And yes, this was meant to be condescending. You are discussing a well known and documented feature of Swift and saying that implicitly unwrapped optionals are the exact same as optionals. They aren't. Just do your homework to see... &gt;As to why you would check against nil on an outlet? You really don't have to look far to come up with some sort of example. Consider the following scenario: I have a custom view with a dataSource delegate (similar to UITableViewDataSource) and while there is a default data source at -awakeFromNib, this data source may change - or perhaps even be nil in the future. Here, it would be unwise to use an implicitly unwrapped optional because we know that this outlet may change at runtime. Again, you did not explain your usecase for the unwrap function. Your unwrap function is useful for checking two or more optionals at the same time for not being nil. Your example talks about only __one__ data source, which you can just write one line of code without this unwrap function to unwrap the optional conditionally with the "let" statement. !!! so, can you give an example of when you would actually use this to do what you intend it to do (unwrap and check more than 1 optional in one line of code?).
Actually, the docs are carefully worded on the matter, which say the following (emphasis mine): &gt; When you declare an outlet in Swift, you **should** make the type of the outlet an implicitly unwrapped optional. This way, you can let the storyboard connect the outlets at runtime, after initialization. When your class is initialized from a storyboard or xib file, **you can assume** that the outlet has been connected. In other words, there is nothing that requires IBOutlets to be implicitly unwrapped. However, based on the assumption that IB will connect the outlets for you, it is generally safe to use an implicitly unwrapped optional. &gt; And yes, this was meant to be condescending. You are discussing a well known and documented feature of Swift and saying that implicitly unwrapped optionals are the exact same as optionals. Not only is this not the way it is explained in the docs, but it's demonstrable in practice that implicitly unwrapped optionals are just optionals which are implicitly unwrapped on use. Try the following code sample in the REPL. If this doesn't demonstrate that an implicitly unwrapped optional is the same underlying structure as a standard optional, I don't know what will. import Foundation class Object {} var implicitlyUnwrapped: Object! = Object() switch implicitlyUnwrapped { case .Some: NSLog("implicitlyUnwrapped is non-nil") case .None: NSLog("implicitlyUnwrapped is nil") } &gt; Again, you did not explain your usecase for the unwrap function. My point is that it is perfectly conceivable that your outlets may change at runtime. In such a case, you may not want to use an implicitly unwrapped optional because that assumption which Apple clearly explains in the docs may no longer hold true. It's also conceivable that this may hold for several outlets at once. For example, maybe you have three, four, or even five different UIGestureRecognizers connected with optional outlets (for reasons discussed above) that you need to work with. I think this sufficiently demonstrates that such a use case can arise without making a whole project of sample code.
&gt; My point is that it is perfectly conceivable that your outlets may change at runtime. In such a case, you may not want to use an implicitly unwrapped optional because that assumption which Apple clearly explains in the docs may no longer hold true. &gt; It's also conceivable that this may hold for several outlets at once. For example, maybe you have three, four, or even five different UIGestureRecognizers connected with optional outlets (for reasons discussed above) that you need to work with. If I have 5 gesture recognizers in 5 optional outlets? Let's take this statement one by one: 1) Outlets are implicitly unwrapped optionals, not pure optionals, so no checking for nil required considering that you must access them after awakeFromNib, at which point they are guaranteed to be a valid instance. 2) If I have 5 gesture recognizers, I would either set them up in code, in which case I know exactly when they are created so I won't make them optional. Instead I would make them "lazy" so they are allocated whenever they are needed. In the other case, I would create the gesture recognizers in IB in which case, they become implicitly unwrapped optionals and will be guaranteed to exist when awakeFromNib is called. So in all these cases, no need to check two or more optionals in one line. Can you please provide a real example instead? This is like the third time I am asking and no real example is provided which does make me think this why somebody who really understands the workings of Cocoa would want to use this unwrap function.
What have you got so far? 
&gt; Outlets are implicitly unwrapped optionals, not pure optionals, Standardly. However, this is not always the case as I explained. &gt; I would create the gesture recognizers in IB in which case, they become implicitly unwrapped optionals and will be guaranteed to exist when awakeFromNib is called. ...except unless that assumption doesn't *always* hold. Like I've tried to explain. &gt; This is like the third time I am asking and no real example is provided which does make me think this why somebody who really understands the workings of Cocoa would want to use this unwrap function. K. I've explained use cases, and done so without appealing to any unnecessary "you don't *really know* what you're talking about" kind of arguments. If that's not good enough, then we're done because that's all I am willing to provide. 
It is not an assumption if it is fully documented. awakeFromNib, it's all in the name. Anybody will understand that when that method is called, the nib is loaded and outlets are present. Before that, no, outlets aren't present. This is not an assumption, but how Cocoa and Cocoa Touch work, and this is thoroughly documented. I don't know what you are on about. 
https://developer.apple.com/library/iOs/documentation/UIKit/Reference/NSObject_UIKitAdditions/index.html#//apple_ref/occ/instm/NSObject/awakeFromNib Quote from the documentations: "The nib-loading infrastructure sends an awakeFromNib message to each object recreated from a nib archive, but only after all the objects in the archive have been loaded and initialized. When an object receives an awakeFromNib message, it is guaranteed to have all its outlet and action connections already established." So please note that we arrived at this convoluted discussion because you mentioned that you would like to check if two or more outlets are non-nil and then call an animation or a block of code on them. Well, guess what, after that method, all your outlets are non-nil and you don't have to check them to be able to use them. Now, you mentioned that your outlets may be replaced at any time? That means: 1. They magically get replaced by something. 2. You change them manually in your code. The first one is impossible. They don't magically get changed. The second one raises eyebrows as to why would anybody want to change their outlets at runtime. So basically, what I am telling you all this time is that after awakeFromNib, your outlets are set, and will be set for the duration of the program until they are messed with (which you should not do) or are destroyed due to many reasons such as out of memory errors or your object deallocation. If an out of memory error occurs, well, viewDidUnload doesn't get called anymore (it used to in older iOS versions) so your views and outlets will __not__ be purged. I am tired of this really. I stand corrected that the unwrapping of multiple optionals in one line of code is absolutely useless until unless you can show me pieces of code on GitHub or somewhere valid that do really need to unwrap multiple __unrelated__ optionals in the same line.
Yeah I've had this problem too. I fixed it by deleting "ModuleCache" in the Derived Data folder. It solves the problem next time I'm opening xCode. 
I use gandi.net for my websites
I think once I had an issue like that and the problem was I hadn't added the file to the current target. (Select file in project view then check the inspector on the right). Maybe this happened to you? Wild guess though. 
Imagine you're writing a simple app that has two textfields, in which you can put numbers, and the app adds them. Then you could have the following function in that App (this is obviously a very basic example, but it's not very hard to imagine something like this occurring): func textFieldChanged() { if let (number1, number2) = unwrap(textField1.text.toInt(), textField2.text.toInt()) { let result = number1 + number2 resultTextField.text = "\(result)" } }
I use GoDaddy for domains and Bluehost for hosting. Bluehost is super basic but is affordable especially for an app website.
&gt; Outlets are not optionals. This is straight up wrong. Implicitly unwrapped optionals are optionals, it's right in the name.
I wrote this [app](https://itunes.apple.com/us/app/koppubs-liverpool-fc-pubs/id928482079?mt=8) completely in Swift with Parse. This was the first app I've built. It took me around 3 weeks to learn Swift and build it.
Try changing your myPlayer var. var myPlayer:AVAudioPlayer = AVAudioPlayer() myPlayer = AVAudioPlayer(contentsOfURL: NSURL(string: audioPath), error: &amp;error) myPlayer.play()
What you are looking to do would be very easy to set up with the storyboard file. Have two segues depending on the outcome of the login validation. One segue would navigate to the the menu, the other to the administrative side. Another helpful tip for menu apps in particular: Show the restaurant how to activate guided access (https://support.apple.com/en-us/ht5509). They can disable the ability to navigate back or to close the app which is very helpful. I have used a few restaurant apps and of course the very first thing I do is click the home button to see what else is on the iPad. (What can I say, I'm a snoop).
Thanks Jason! Sorting out the logic for the game seems like the most difficult part.
Yeah of course. I will send you a message.
I like the language. I especially like the lack of header files. I hate the compiler and the IDE. The compiler has countless frustrating bugs, the IDE (SourceKit) constantly crashes, the indexer fails for no reason. There is no refactoring. Error message are cryptic. To my view it is will be a good language to work with one day, but it is unusable in a serious project at the moment.
I have the had the SourceKit Crashed message about 50 times today.
It's like saying Menopause is a pause from men because "it's right in the name".
How is this different from doing this MUCH simpler version? if textField1.text.toInt() != nil &amp;&amp; textField2.text.toInt() != nil{ result = textField1.text.toInt()! + textField1.text.toInt()! } It's shorter and much easier to understand and no magic unwrap functions in there.
Haha, that's bullshit and you know it.
First off, the unwrap function isn't magic. It's pretty simple really. The problem with your solution is that if you just start to use exclamation points everywhere, you're bound to make a mistake at some point and your app crashes or you miss bugs - the very thing that optionals try to protect you from. That's the benefit of unwrap - no need to force unwrap things directly. So I say it's better to not use the exclamation point anywhere, except in very specific circumstances. I shouldn't even have used it in the unwrap function, but I guess I got a bit lazy. (But even with the exclamation points in there, it's better than your solution, because the dangerous part is only done in one place, instead of everywhere you unwrap stuff).
No the file was added correctly, I sorted it out thanks anyway.
same effect, I sorted it out already thanks though...
oh ok no worries
Say this is in your login view controller: @IBAction func validateUser(sender: UIButton) { … validate your stuff … switch validationResponse { case adminUser: self.performSegueWithIdentifier("admin", sender: nil) break case customer: self.performSegueWithIdentifier("menu", sender: nil) break } Of course you would have had to set up those segue's inside your storyboard before calling the segue (otherwise it will crash). Feel free to send me a DM on reddit for contacting me.
I came across this exact issue. Do you also find that adding another button fixes the previous one, but causes the original not to update? Let me know if you come across any type of fix.
UIBezierPath is your friend http://www.planet1107.net/blog/custom-shape-uibutton-tutorial/
This might help http://stackoverflow.com/questions/5198716/iphone-get-ssid-without-private-library
There's a thing called CLLocation, read the reference. I've used it a tiny bit for a sunrise calculator, so only basic functions but it seems to be good enough. I'm pretty sure that you'll need to know it to use any other maps api.
Hey everyone! I'd love to get your feedback on Publinks :) I'd also like to make it available on Cocoapods but I'm not sure what the deal is with pods written in Swift. I keep getting a linker error, "unknown option character `X' in: -Xlinker" when using it as a local development pod. Any tips or pointers would be GREATLY appreciated. Thanks!
Been like this on my machine for ~2 weeks. I work in vim now and only use Xcode to build.
Someone answered this on Stackoverflow for me: class ViewController: UIViewController { @IBOutlet weak var imageView: UIImageView! let images = [ UIImage(named: "brooklyn-bridge.jpg")!, UIImage(named: "grand-central-terminal.jpg")!, UIImage(named: "new-york-city.jpg"), UIImage(named: "one-world-trade-center.jpg")!, UIImage(named: "rain.jpg")!, UIImage(named: "wall-street.jpg")!] var index = 0 let animationDuration: NSTimeInterval = 0.25 let switchingInterval: NSTimeInterval = 3 override func viewDidLoad() { super.viewDidLoad() imageView.image = images[index++] animateImageView() } func animateImageView() { CATransaction.begin() CATransaction.setAnimationDuration(animationDuration) CATransaction.setCompletionBlock { dispatch_after(dispatch_time(DISPATCH_TIME_NOW, Int64(self.switchingInterval * NSTimeInterval(NSEC_PER_SEC))), dispatch_get_main_queue()) { self.animateImageView() } } let transition = CATransition() transition.type = kCATransitionFade /* transition.type = kCATransitionPush transition.subtype = kCATransitionFromRight */ imageView.layer.addAnimation(transition, forKey: kCATransition) imageView.image = images[index] CATransaction.commit() index = index &lt; images.count - 1 ? index + 1 : 0 } }
First thing to try: delete all derived sources. Not only the ones from the project that crashes SourceKit, all of em. You find those at ~/Library/Developer/Xcode/DerivedData. If that doesn't work, I'd try backtracking: go to the last version before the problems started. If it still doesn't work, I guess Xcode hates you (it hates me, too, for some reason). Otherwise, redo your changes carefully and try to find that thing that causes the crashes. Unfortunately that's pretty hard to do, I tried...
No. I haven't really looked into it though. Not sure if any good ones exist?
This has been happening to me since Xcode 6 beta 1! I don't know why the hell Apple still hasn't fixed it. Anyway my remedy to cure this is deleting the Derived Data folder. I have this Xcode [plugin](https://github.com/kattrali/deriveddata-exterminator) installed to make this a little easier.
So you're going to have to override the tableview cellForRowAtIndexPath method. In the example it's in MyMenuTableViewController. The specific line is cell!.textLabel.text = "ViewController #\(indexPath.row+1)". I THINK the default cell style will allow you to use an image like so: cell.imageView.image = UIImage(xxxxxx)
This is how I resolved it. I was having the same issue. Just constant crashing, couldn't work. Deleting these fixed it.
I thought I heard that core data was used for undo and redo functions, etc.
Look into: 1. NSURLSession (download/upload data) 2. NSJSONSerialization (to serialize/deserialize JSON received or to be sent to server) 3. NSOperationQueue and NSOperation (to encapsulate the download/upload job) into a queue of tasks.
I suggest creating the shape of your button in Photoshop and then create a mask out of it, then apply the mask to the layer of your button. Boom, you got your button in the exact shape you need it.
Thanks. I was having this problem and my xcode is trashed. Started a post that nobody responded to in /r/iosprogramming. I'll try deleting that derived data. 
I wrote a simpler version for you which is a lot more flexible since it uses the power of arrays. You do not have to write a separate unwrap function for different number of optionals. You're welcome: var total = 0 for value in [textField1.text.toInt(), textField2.text.toInt()]{ if let value = value{ total += value } }
No problems. Also consider checking some already built libraries on GitHub. They will save you time at the cost of you sometimes thinking to yourself "wtf is this library doing really. Why is it not working!"
Regarding the block variables not existing, have you tried setting the type of the block variable before using it? At the moment, they are untyped... 
Wow, that looks great. Thanks!
You are right! That really sucks. I also tried AppCode for you and you cannot see the params there either. Double sucks. Edit: Don't worry. Microsoft today announced open sourcing .NET and enabling it for OS X. Soon we can write apps with a proper IDE (Visual Studio) instead of the toy we are given by Apple.
deleting derived data worked for me! Thanks!
If I understand well your question, you want the actual touch area of the button to correspond to the image instead of keeping being a rectangle. So, when you touch areas in the frame that are transparent in the image, the touch is not registered by the button. I don't think there is a straightforward way of doing this. If I had to give this a try, I would start by overriding the *touchInside* property of *UIControl*. In the getter you can check if the touch lands on a transparent pixel of the image. To do so, you can use this: https://developer.apple.com/Library/mac/documentation/GraphicsImaging/Reference/CGBitmapContext/index.html
For any given programming problem, you're gonna find more than one solution. So great job! You found another solution for a pretty trivial problem, while ignoring the idea I'm going for. This isn't supposed to solve for a variable number of optionals of the same type, it's supposed to be a solution for a fixed number of optionals of a different type. Actually, looking a bit more closely, it doesn't to the same thing. You conveniently left out to assign the result in the success case. You'd need to do something like this: func textFieldChanged() var total = 0 var failed = false for value in [textField1.text.toInt(), textField2.text.toInt()]{ if let value = value{ total += value } else { failed = true } } if !failed { resultTextField = "\(result)" } } Uh... I'll stick with my solution, thanks...
What's with all the "!failed" business? This is the right code if you want to do the assignment at the end: var total = 0 for value in [textField1.text.toInt(), textField2.text.toInt()]{ if let value = value{ total += value } } textField3.text = "\(total)" There is no need to check for failure there. This was your original requirement: &gt;func textFieldChanged() { &gt; if let (number1, number2) = unwrap(textField1.text.toInt(), textField2.text.toInt()) { &gt; let result = number1 + number2 &gt; resultTextField.text = "\(result)" &gt; } &gt;} So you are adding the two optionals and putting the result into the text field!
For undo/redo there is [NSUndoManager](https://developer.apple.com/library/mac/documentation/cocoa/conceptual/UndoArchitecture/Articles/AppKitUndo.html) It's also good to know about [memento pattern](http://en.wikipedia.org/wiki/Memento_pattern)
Just my 5 cents: - Currently your code isn't very reusable: you have TopLevelController in which you setup gesture recognizers and other stuff, but content controllers are also hardcoded there. - I suggest setting proper content inset for tableview in MenuTableViewController, because status bar overlaps your menu.
Cool. O fico, fai tu :-) 
Hey DBT, just going thru your publinks and this is what leapt out at me. So when I saw your post and read "publish-subscribe" I immediately formed a synopsis of what to expect in your example however what I found was a bit different. So usually the idea with publish/subscribe is this. The publisher agrees to notify all of its registered subscribers of any events that the subscriber has decided they are interested in. So let's say the publisher may have a total of 10 events and the subscriber can be interested in x out of 10 of them. But all the publisher is responsible for is sending notification to the subscriber. The example code is a bit brief but from whats there I can't see why we would dedicate an entire view model to a single cell instance. I was expecting to see something like an array of Note objects on a biz logic class. Then whenever an element is added or removed from the array then the biz logic class would notify all subscribers via something like class NotesBizLogic { func someMethod() { //.... var newNote = Note(text: "some text") notes.append(newNote) subscribers.bizLogic_NotesListWasModified?() } } and on the viewController you would do something like: func bizLogic_NotesListWasModified() { tableView.reloadData() } func tableView(_, cellForRowAtIndexPath) - UITableViewCell { let note = bizLogic.notes[indexPath.row] //assign note values to your cell controls here } So this way the biz logic class and the view controller/cell view are entirely de-coupled and the cell view is not handing off blocks of code to the biz logic and expecting it to execute them on the cell views behalf. This also gives you a bit more flexibility if that block's signature ever needs to change. I should point out also that I'm interpreting viewModel to be the viewController and the way in which I implement my apps my view controllers are strictly used for UIKit/presentation logic and contain no business rules logic other than an instance to a biz rules class. If you are using your view models to house both your biz logic and presentation logic then maybe your approach works better for you in that type of architecture. It seems like you're looking to achieve a level of data binding for each individual cell which I haven't given much thought to and may be a valid scenario but just going on the brief example code provided the implementation is making my spidey sense go off :-) EDIT: I changed the code examples to reflect that I use my biz logic classes to modify the state of my data sources and to then notify the view controller whenever the state changes. I previously had the examples referencing the view model when they should've been referencing the biz logic class. Clear as mud right. Sorry if that led to any confusion.
I agree with almost every recommendation except for skipping enumerations and optionals. Enumerations have a very low learning curve and play a key role in day to day programming. In Swift optionals also play a very prominent role in day to day coding and there's just no avoiding them. If I had to guess optionals are probably the #1 reason why some would suggest for newbies to first learn programming concepts using an easier language. So as I type I think I've begun to realize that I fall in the "use an easy language first and then move to swift" camp. Only I would advocate don't even teach them a programming language at all but start with pseudocode first. I think the thing to remember is that the newbie has to first acquire a programmers mindset (i.e. how to think in a procedural and step by step fashion while using conditional and repetitive programming constructs). And that mindset should be implemented using the drop dead easiest language to learn out there i.e. pseudocode - no syntax required - just learning how to think like a programmer. Syntax can be learned in a matter of minutes; its instilling that programmer mindset into a newbie thats the real challenge. And pseudocode strips away all the syntax, compiler errors, etc and allows the newbie to focus strictly on learning how to think like a programmer. EDIT: Thinking back (and by back I mean 1996 in my freshman year of college) that's exactly how I learned to code. We had a programming theory class first which strictly taught us the theory of programming using only pseudocode and then followed it with a programming 101 course which used VB. I realize now the theory class definitely made the VB class easier because I already knew about the foundations of programming ( i.e. assignment, conditional and repetitive constructs). So I was able to focus on learning VB, its syntax and the IDE.
Can you use this to make the client: https://github.com/daltoniam/starscream and this to create the server: http://socket.io . More infos about WebSocket Protocol http://datatracker.ietf.org/doc/rfc6455/ 
Thanks for the feedback. The second point, about the content inset - yeah that was pretty sloppy and more of an oversight. Do you have any suggestions to make it more reusable? Would it require rethinking the architecture?
Hey. How about TextView? https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextView_Class/index.html#//apple_ref/occ/cl/UITextView
Not sure if there is a specific way, but one work around could be you assign an int value for each image and generate a random number between 1 - 5 and show the corresponding image.
Thanks, I'll try both
This is definitely an option. I do something similar to this, using a switch statement. You name the images image01, image02, etc. and then use string interpolation to make something like: string imageName = "image0\(randomNumber)" SKSpriteNode(imagenamed:imageName) (I'm probably a bit off on the syntax, away from my mac right now.)
If you're doing a single view app then you can do what /u/fwersock said. You could also make a tabbed app that gives you a button on the bottom to bring up another view controller.
I have screenshots too.. but I'm so helpless now I guess I can't figure out how to upload them to my post
One downside of swift right now is the lack of tutorials, examples, and books available. That's quickly changing, but I would't start a critical application in it until next year.
Firstly we need to see some code. But off the top of my head check your frame:CGRect to ensure that you're not putting the coordinates twice for each view in your hierarchy. 
Would you be available to help me out? PM if you can, thanks . 
Explanations don't get much better than their's on their github page. They even have a mini-screencast walking you through the installations.
Okay thanks! :)
CATextLayer
CodePath, https://vimeo.com/codepath They have a half dozen videos walking through Yelp.
Swift is the property of Apple, will only run on Macs, will only run in Xcode, and will only target Apple products. It's a hard teaching language: the code is so verbose it is hard to discuss in front of a class. Python is your friend here. 
Without any diagnostics: There are different sizes for different iPhones. What you see in xCode's storyboard is controlled by the (select View Controller, select the Attributes Inspector, see the Simulated Metrics Section) simulated metrics size. What you see in the simulator is controlled by the simulator device, which you can set near the Run button. 
The magic word is "Segue", meaning the controlled passage of one view to another. Click on the button, drag to next view controller. FYI, you can do "Editor/Embed In/Navigation Controller" to give the push/pop style segues.
There are two different issues: the algorithm and the Swift language. Which is giving you fits?
http://swiftstub.com/ ,hope this willl be helpful
http://www.raywenderlich.com/83276/beginning-adaptive-layout-tutorial
Hey, I'm sorry, I completely forgot to respond to this. Any update?
Thanks for the feedback. I agree with you on the fact that optionals are a pain to learn for a beginner. But this is why I recommend to skip them and learn them later. In university I did all my first programming in Pascal and C. For a long time, while we were learning the basic of procedural programming, we didn't use pointers, so no need to worry about null values. Variables always had a value. We started using pointers to build dynamic data structures, when the basics of procedural programming where well understood. This is why I don't think you need another language at the beginning. Although it's true that when you start venturing into OOP you will probably need nil values. I'm not sure though, probably you can still avoid them. I'll give it a thought and correct my article accordingly. Optionals start popping up everywhere the moment you start dealing with Cocoa classes. But I think you shouldn't touch them until you learned programming concepts and the language.
Can't say you don't have a point. One can only hope that Apple will soon release Xcode updates to fix the problems.
My guess here is that Auto Layout is kicking in and moving your view, because of some ambiguity in the layout constraints. Even if you don't specify any, a simple checkbox in the .xib file is all that is needed to turn it on (which is checked by default). Xcode will then automatically create the constraints.
I would prefer drawing text directly on UIView because I want to draw many different texts at many different places but before using UILabels, I will try first "abc".drawAtPoint(somePoint, nil) and UIText. In any case, when I will have found the best way, I will describe it on this forum. Thanks to all of you for your feedback.
So I tried this library. It really is useful, especially for working with json apis. However, in the process I discovered that dependency management in swift is highly lame.
That's extremely strange considering the fact that `ifaddrs.h` is part of the iOS SDK...
I just did this a couple of days ago, here is how I did it: You will need a class that has the WKNavigationDelegate webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction: WKNavigationAction, decisionHandler: (WKNavigationActionPolicy) -&gt; Void) func webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction: WKNavigationAction, decisionHandler: (WKNavigationActionPolicy) -&gt; Void) { WebViewController.setCookie() if let frame = navigationAction.targetFrame { … Handle Normally … } else { decisionHandler(.Cancel) UIApplication.sharedApplication().openURL(navigationAction.request.URL) return } decisionHandler(.Allow) }
If you don't set the the iPhone view on your main storyboard to any of the iPhone sizes, it will looks weird on the preview. Go to your main storyboard, open up the right pane, click the view controller, and set the size and orientation on the right side. That should fix the problems with what it looks like in the preview. To fix how it looks when you rotate, that has to deal with auto-layout.
The ease of the NSURLSession APIs make AFNetworking/AlamoFire largely superfluous for consuming JSON apis. var request = NSMutableURLRequest(URL: NSURL(string: "https://www.payload.json")!) request.HTTPMethod = "GET" request.setValue("application/json", forHTTPHeaderField: "Accept") request.setValue("application/json", forHTTPHeaderField: "Content-Type") var task = NSURLSession.sharedSession().dataTaskWithRequest(request){ (data: NSData!, response: NSURLResponse!, error: NSError!) -&gt; Void in var jsonObject = NSJSONSerialization.JSONObjectWithData(data, options: nil, error: nil) as NSDictionary? dispatch_async(dispatch_get_main_queue(), { () -&gt; Void in //update UI on main thread }) } task.resume() For more control or to use system features like background updates create NSURLSession object with configuration/s and implement NSURLSession protocols instead of passing a completion block.
Have a reference on it being designed as a teaching language? [Apple itself says](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/) it's an "industrial-quality systems programming language" that happens to be "friendly to new programmers." Playgrounds (if they work) are a nice learning environment, but I don't believe Swift is a good teaching language in the sense something like Pascal was. 
nevermind, sorted: enemyFromCorner1.position = CGPoint(x: size.width, y: size.height) enemyFromCorner2.position = CGPoint(x: size.width - size.width, y: size.height) enemyFromCorner3.position = CGPoint(x: size.width, y: size.height - size.height) enemyFromCorner4.position = CGPoint(x: size.width - size.width, y: size.height - size.height)
Chris Lattner (sp?) in June (I think on his twitter feed) linked to an article who pointed out a lot of pluses of things like playgrounds, and of how braces were easier than whitespace languages for people brand new to programming. It wasn't about swift, but was cited as a heavy influence on the design. It has a lot of blue in the background of the article.
Xcode 6.1.1 GM seed is out, with a lot of SourceKit fixes, especially ones related to DerivedData.
[Image](http://imgs.xkcd.com/comics/like_im_five.png) **Title:** Like I'm Five **Title-text:** 'Am I taking care of you? I have a thesis to write!' 'My parents are at their house; you visited last--' 'No, no, explain like you're five.' [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=1364#Explanation) **Stats:** This comic has been referenced 61 times, representing 0.1503% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cm2y25g)
`libdispatch` has a few functions that would help with it. An *in*elegant way to do this follows: dispatch_async(dispatch_get_global_queue(0, 0), { () -&gt; Void in sleep(5) dispatch_async(dispatch_get_main_queue(), { () -&gt; Void in // your code here }) }) A more ideal way would be to use `dispatch_after`.
The "more ideal" way he's talking about is this: dispatch_after(dispatch_time(DISPATCH_TIME_NOW, delayInNanoseconds), dispatch_get_main_queue()) { // your code } I don't recommend using stuff like `sleep`, it's usually a bad idea to block threads unnecessarily.
worked like a charm! Thanks!
&gt; Cocoa is analogous to UIKit. No, AppKit is analogous to UIKit. The difference between Cocoa and CocoaTouch is, largely, unimportant in this case. The point was that learning the frameworks is much more important than learning the language if he wants to be effective, and doing so with Objective-C will provide him with many more resources for learning than doing so with Swift.
Swift language issue , didn't knowbthe lang syntax still learning
On a related note: I discovered a cause of SourceKit crashes that might help some: don't write nested classes (i.e. declare classes within classes). I moved those and the SourceKit crashes got a lot less. Not sure if that's also fixed in 6.1.1.
Didn't fix my SourceKit crashes :(
The link in the article that leads to your app is marked as malware by WoT.
I you haven't done so already, restart your Mac. I know that's a dumb thing to suggest, but sometimes people forget to try that. 
That's a little bizarre. Not sure what I can do about it, but thanks for letting me know!
You did a really great job with this!! Thanks for sharing =)
Thank you so much! It's simple examples like this that make learning a new programming philosophy that much easier.
MessageUI is for sending emails and SMS/iMessage through the native interface. You will need to roll your own solution. I recommend using a pre-existing backend like Parse. 
This seems to have fixed most of my SourceKit crashing problems. The IDE was essentially unusable for anything more than the most trivial of projects before I installed this update. I have literally hundreds of SourceKit crash logs. I'm new to iOS development and it was extremely disappointing to see the woefully amateurish quality of the apple IDE after coming from years of using Eclipse, Webstorm, and Visual Studio, none of which crash if you attempt to type a letter. Hopefully this update continues to be stable.
You are better off creating a timer, where the timer's callback keeps a counter, and sets the background color to the next one each time it's called. Remember, that you have to return so the event loop gets time to update the view state. As written, you've set the backgroundColor 10 times, and never let the event loop actually draw anything, so only the last one will be shown.
I've created an example of how you might go about this here: https://github.com/ztj/ColorShifting
The SourceKit crashes, to my knowledge have been only happening with Swift projects. I haven't had it happen with my Objective-C classes yet. Swift is still in its infancy stage, and though you're right that it shouldn't be this crash happy considering it's GM already, I think they will fix most of these crashes by the next couple of Xcode releases (at least, I hope they do).
This is the right answer. Because I sometimes benefit from seeing things written multiple ways: Setting the background color doesn't actually paint the color in. It tells UIKit "Hey, next time you get a chance, paint in this color." Since your code is still busy choosing another set of random colors, UIKit doesn't get a chance to do its thing until your code stops for a breather. That's why the "last" color is the one you see. As mentioned here, you need to set the color, then give up control for a period of time so UIKit can actually do the things you told it to.
Nice summary and encouraging as someone who wants to start coding in Swift soon. Thanks for that! I'm definitely excited to try Swift. Even have a coding idea for an app, but there's very few examples out there for OS X apps rather than iOS apps right now, plus Swift still seems to be a bit in flux, so I'm waiting a couple months more, I think.
Congratulations! You should also post the code to GitHub please.
Ah, the joys of using a library both older and larger than you. 1. I started an OS/X command line app "FunWithSwift" or the like in order to put and save slightly longer snippets of code. 2. Write your first IOS app by following along a 'monkey see-monkey do' style tutorial. For example, http://www.google.com/url?q=http%3A%2F%2Fvimeo.com%2F102084767&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNFgV8OZQtfLhrs_IWhjRk9--v6jkQ is a "tip calculator" in Swift. 3. Accept that, for a while at least, you will only be able to do the tasks you know how to do. That is, the frustration of knowing "off course the framework does that, but I don't know where to start" will persist as you continue to pick up new areas of knowledge. Code every day, even when it is frustrating, and the knowledge accumulates. 
If you look for CodePath videos at Vimeo, you will see some challenges. Basically they run through "clone a movie browsing app", "clone Yelp", "clone Twitter", etc. They give about half the app in step by step movies. Challenges in Swift are very different than challenges in IOS. Consider the meta-challenge. Post at least one micro-challenge a day: e.g., "Write a function 'addMe' that takes two arguments is called 'addle(first: 3, second: 6)' (hint: see '#')". Post to an editable GIST or GitHub. Make a body of work. Bribe collaborators with cookies. 
I second this. Parse is a good backend that handles this sort of interaction and I have used it for chat systems before. Free for development and small deployments.
Start with a couple quick reference guides. I suggest you read them carefully; it helps greatly. Other than that, it's off the the WWDC Swift Beginning and Intermediate videos (50 minutes each). Swift Language Beginner Quick Reference by Ray Wenderlich A one page overview of the most frequent language features of Swift. http://cdn2.raywenderlich.com/wp-content/uploads/2014/06/RW-Swift-Cheatsheet-0_3.pdf Swift Language Quick Reference by William Dillon A two page, dense, quick reference guide to the syntax of the entire Swift language. Most users will not need to use more than a fraction of Swift to get their jobs done. http://www.housedillon.com/wp-content/uploads/2014/06/Swift-QuickRef.pdf 
Sorry no. Swift has no concepts of threading, no reflection, no exceptions, little view of process management, no virtual machine hooks, and is not a teaching language. Swift is designed to work on IOS and OS/X to write applications. That is all. The only nods towards teaching that I have seen have been in the PlayGround (REPL) usage of plotting the value of variables over time. Compare that with the information given to a new programmer at http://pythontutor.com 
UIViewAnimationOptions(rawValue: someValue) solved the problem, thank you!
Mine still crashes too, I wonder why this issue has become common again. Last time it has been this problematic for me was early beta .. 😓
This thread has been linked to from elsewhere on reddit. - [/r/mistyfront] [FYI - new release of XCode v6.1.1 GM - supposedly fixes SourceKit crashes (/r/swift)](http://np.reddit.com/r/mistyfront/comments/2mghel/fyi_new_release_of_xcode_v611_gm_supposedly_fixes/) *^If ^you ^follow ^any ^of ^the ^above ^links, ^respect ^the ^rules ^of ^reddit ^and ^don't ^vote ^or ^comment. ^Questions? ^Abuse? [^Message ^me ^here.](http://www.reddit.com/message/compose?to=%2Fr%2Fmeta_bot_mailbag)* 
That definitely makes sense - it still has quite a few rough edges and bugs - but things are only going to get better!
I installed Web of Trust (I assume that's what you meant by WoT) just to test this out and couldn't reproduce the issue. Can you try it again?
i found a workaround... my xib files code was: class FormView: UIView { override init(frame: CGRect) { super.init(frame: frame) var nibContents = NSBundle.mainBundle().loadNibNamed("FormView", owner: self, options: nil) var xibView = nibContents[0] as UIView xibView.frame = frame self.addSubview(self.xibView) } required init(coder aDecoder: NSCoder) { super.init(coder: aDecoder) } } The problem was when i tried to set the frame o_O And now: class FormView: UIView { override init(frame: CGRect) { super.init(frame: frame) var nibContents = NSBundle.mainBundle().loadNibNamed("FormView", owner: self, options: nil) var xibView = nibContents[0] as UIView xibView.frame.size.width = frame.size.width self.addSubview(self.xibView) } required init(coder aDecoder: NSCoder) { super.init(coder: aDecoder) } } :P
Here is Chris Lattner's comment about this (he said more in the apple dev forums): &gt;The Xcode Playgrounds feature and REPL were a personal passion of mine, to make programming more interactive and approachable. The Xcode and LLDB teams have done a phenomenal job turning crazy ideas into something truly great. Playgrounds were heavily influenced by Bret Victor's ideas, by Light Table and by many other interactive systems. I hope that by making programming more approachable and fun, we'll appeal to the next generation of programmers and to help redefine how Computer Science is taught. [Learnable Programming](http://worrydream.com/#!/LearnableProgramming) [Light Table](http://www.chris-granger.com/lighttable/) Definitely, they *were designing* for this. I don't think *learning to make iPhone apps* is a particularly easy path to learning programming. I do think learning basic computing concepts isn't that bad in swift though You may *disagree that they succeeded at their goal* (You're not alone there, I think they made something far more approachable looking that it really is deep down, especially once you wade into real code), but that doesn't mean *it was not intentionally taken as a design goal to make a learnable, teachable language, partially targeted at students in the field* over professionals
Good idea! Added
I'd go with http://www.schemers.org scheme and SCIP over Swift (or even Clojure) Swift is learnable moreso than Objective C, but it will be frustrating that a huge portion of the libraries are inaccessible behind a wall of complexity (the Cocoa libraries pretty much mandate a lot of work to get up and running).
Did the console print out anything useful? Go to the console and scroll up. You'll see a bunch of numbered lines that count down as you scroll. Right above number 1 should be a description of the exception thrown. Copy and paste that back here, if you could. My guess is an orphan outlet. The exception will say something about key-value compliance and the reason is that your outlets in code and your outlets in the storyboard don't match. 
Anything useful? Let me go and check Ill gyazo the console output. 
http://gyazo.com/0548210a11267ff53a60eedd0e03e3e4
Looks like it's an issue with your javaLabel outlet. Did you delete or rename it in your storyboard but not your code file or vice versa?
Yeah I did lol, I fixed it! Thanks for the answer!
Great!
No, I'm writing for Mac. And I think it is some basic Xcode setting since it does happen even after creating a new project. I just don't know which setting.
You might need to import AppKit instead of Cocoa.
&gt; I feel like Swift was designed for most variables to be non-optional, non-nullable values Of course it was, same as other languages defaulting to non-nullable references/pointers/what have you (MLs, Haskell, Rust) &gt; It's annoying - the boilerplate is annoying, the unwrapping is annoying, and the cognitive overhead of deciding what should be !, ?, etc. is annoying. Yes that's the huge issue of the transitional phase. The best way to handle it right now is probably to build shims between Obj-C libraries and frameworks and your Swift code. These shims can make the decision to: * keep optionals optional when that makes sense * forcibly unwrap optionals when it's only optional because Obj-C has no alternative semantics * convert optionals into a native Swift enumeration (possibly back and forth) Apple seems fairly committed to Swift, so in the future I'd expect swift-native libraries which won't have these issues.
I'll look through to see what's relevant and post it somewhere. The thing with this issue is that I'm fairly certain I know what the issue is and from a lot of searching, I know what the fix is. I just don't know how to fix it haha
Thank you for sharing your experience. In your closing, I read: &gt; *"I will not be doing my next big client project in Swift"* Please, expound a bit on "why?" Language still in flux? Optionals really that troublesome? Or...?
It really comes down to the Bugs section and productivity. The Swift toolchain is still buggy and I don't want to be using it as an excuse with a client. Also, just due to experience, despite the many Swift wins, I'm probably as productive or slightly more productive in Objective-C. If a client specifically *wanted* a project done in Swift though, I'd be all for it and ready to jump in!
AFAIK, it's used in serializing objects - converting instances from "live" objects of their class to storable data which can be reconstituted later using the NSData class. (I welcome being corrected if I'm mistaken here, as I'm still pretty new to Cocoa as a whole…)
NSCoder is an abstract class (a class that doesn't do anything by itself but provides a template for implementing a more specific class that *does* do something) for serialising and de-serialising an object. Serialising is just a fancy word for turning something into a stream of bytes. NSCoding is a protocol. If an object declares itself as conforming to NSCoding, it is saying that a class that implements NSCoder can interact with it for the purpose of serialisation and deserialisation. NSCoding/NSCoder is not specific to Swift or Objective-C but is part of the Cocoa framework. You can think of serialisation as being a bit like zipping up a folder of files. The most common reason for an iOS/OSX app to do this is to save something to disk and therefore the most common example of NSCoding is NSKeyedArchiver and NSKeyedUnarchiver. The [NSHipster](http://nshipster.com/nscoding/) article on NSCoding is worth reading.
I accept that.
NSCoder is a great meet up to tip a few back and meet fellow Cocoa/Cocoa Touch programmers. It's also a protocol for storing data.
Could you please upload an image of your full storyboard? The problem is most likely that you've set something up there.
You could do that effect by overlaying a transparent black view.
Absolutely. To elaborate, (if you're using spritekit) create an SKSpriteNode with the same size as your game scene, set it's alpha property to something like .2 and toss it up on the screen in a z-position between the game scene and your game over labels/ buttons
Like you're five? ["OH MY GOD! WHERE ARE YOU PARENTS?"](http://xkcd.com/1364/)
You could make use of the [delegate](https://developer.apple.com/library/ios/documentation/swift/conceptual/buildingcocoaapps/AdoptingCocoaDesignPatterns.html#//apple_ref/doc/uid/TP40014216-CH7-XID_6) pattern.
Maybe you've set a breakpoint?
Are you using a version control system with your project (e.g. Subversion, git). Those are indicators that you've "a"dded a new, untracked file and "m"odified an existing file. 
This answered my question. It was git. Thanks.
http://gyazo.com/392fbc98fdf2f352cb2aca55dc206b6f http://gyazo.com/dfe6d35c9653a3d5afb7761dd0071542 http://gyazo.com/d116face3b7fa26baef0d1891923b468
Hmm, it looks a bit convoluted. Try dragging in a Tab Bar Controller from the Object library and compare it with yours.
Cocoa imports AppKit :/
Did the first two and was hoping I wouldn't have to do the last. Well I'll give it a try. Thanks for the hints!
Try posting in iosprogramming
Good on ya for shipping!
Are there no swift changes with 6.2? Usually they're listed in the xcode release notes, but I don't see any. While i'm enjoying Swift, I'd be really concerned if the next update we get for the language isn't until next fall.
It's not an error, you've told the debugger to halt there by setting a breakpoint. In Xcode, they generally look like a blue arrow on the left side of your code. Learn about them, because they are very useful.
I’m seeing a few modifications to some of the Operator Prototypes at the top of the Swift standard library, but that’s about it. This was probably just meant as the WatchKit release.
Many nice observations. Good point about how Swift has these 3 groups of developers with very different backgrounds. I felt a bit like this in Objective-C as well. Like you had all the Java guys who would do all these weird type casts. And then you would have the ruby guys who would go crazy with the dynamic nature of Objective-C, modify classes at runtime and what not. But for sure the whole functional crowd entering Apple territory because of Swift feels alien. But I am excited to see what sort of influence they will wield and what they can teach us old timer OOP folks. I hope we can see better ways of dealing with Optional in Swift. Right now I don't feel like it has been hashed out properly. It is too easy to end up with deep nesting. I've seen the functional guys show examples of monadish stuff inspired by Haskell which seems to improve things. Still I wish that these sort of things was perhaps more standarized in the language.
I have a TabBarController. It is the initial view controller but I have no idea. On every other view controller I have a tab bar there but when I run the project they don't appear. I have absolutely no clue what to do, but Google is you best friend in times like these! Thanks for you input though! 
Thanks for the kind comments. I couldn't agree with you more about the deep nesting (as a result of optionals) - it's pretty ugly and it needs some syntax that at a minimum allows it to be merged into a single "if let" in a standard way. Yeah, I think the point about the three different groups was probably my best point in the whole article. The article's been making the rounds on Twitter/Flipboard/etc but you're the first person to highlight that part of it. There really is almost a "clash" going on between these three groups (although not in an animosity driven way) just below the surface of the Swift community.
Hello. I don't even know how the compiler could do something so clever. The article mentions two different ternary operators and it seems like in both of them the compiler is doing the same thing. So there is definitely a pattern to it. Very interesting nonetheless.
code fellows seemed amateur as fuck when i checked them out some time last year, back when they were still doing rails. i linkedin/twitter stalked a bunch of the alums from their first cohort, and decided to bail when i saw that all of them were still unemployed 2 months afterwards. would love to know if they actually refunded them or not i would like to give some advice to anyone looking to break into ios dev who sees this post, which just seems like a shameless plug for code fellows that was "encouraged" (in quotes because i am sure there is some sort of incentive offered by the people who run the program): go grab the wenderlich tutorial packs for $150 instead of spending 5k+ on an ios bootcamp, and place much more emphasis on learning objective c before swift, because, right now and for at least the next year, the vast majority of employers will not care whether or not you have swift experience. 
I don't know but you could look at Alamofire. It works as a framework. Also, be aware that embedded frameworks only work on iOS 8 and above AFAIK.
I just downloaded it and it ridiculously fun! Keep it up!
Do I download them? I don't have a Mac yet but I'm interested in iOS development.
[**@psionides**](https://twitter.com/psionides): &gt;[2014-11-16 10:09:51 UTC](https://twitter.com/psionides/status/533924901485551616) &gt;[#swiftlang](https://twitter.com/search?q=%23swiftlang) TIL: you can pass a tuple with all args as the only argument to a function, i.e. "foo\(paramsTuple\)" \(@ant\_bello\) [#SwiftCrunch](https://twitter.com/search?q=%23SwiftCrunch) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/2mrzsz%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
And how many of you just read through [this](https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007072-CH1-SW1) from Apple and figured out the rest?
Wow. Thanks for this, just picked up a lot of courses.
but why?
Installing Xcode 6.2 beta did the trick, so reinstalling Xcode would have probably worked as well. :)
I'm looking to get [this course](https://www.udemy.com/ios-8-and-swift-how-to-make-a-freaking-iphone-app/) but there's a lot of 'Coming Soon' content. Does anyone know if that will all be included when released?
Thank you! 
Good question. It's cool to know, but I still didn't find a single place where this could be useful.
either functions secretly use tuples behind the scenes, or tuples automatically unwrap... actually since swift has let (x, y) = tuple syntax I'm willing to say it's the second case. As for practical usage... well that's another story, I'm thinking this is either a bug or an unintended side effect.
Tuples weren't allowed in Objective-C, unlike a lot of languages that do allow it. It's great that swift allows it because you'll come across a function that you'd like to return more than one argument together and this makes it 10x easier.
Currently, there are pretty much no APIs that use tuples as return types of functions. If that was a little more commonplace, it would be more useful. But what I really like about it is that it makes return types and parameter types more "compatible". If you want to have a function that returns multiple values, you have to return a tuple. Because you can use a tuple like OP describes, you can directly pass multiple return values from one function to another, if the types match. Eg. if you have a `fun f(x: A, y: B)`, and a `fun g() -&gt; (A, B)`, you can write `f(g())`, where otherwise, you'd have to write `let r = g(); f(x: r.0, y: r.1)`. Seems very reasonable that this is possible.
This. Everything's in there, or can be found near there, including advanced concepts like class clustering.
Thanks! --&gt; For anyone interested in an in-person course, make sure to check out www.makeschool.com/summer-academy/
The example don't work; I think they already bit-rotted. I want this impossible function: func n(fn : func, args: tuple) -&gt; any? { for arg in args: if (arg is NilProtocol) &amp;&amp; (arg == nil) { return nil } return fn(args) Then I could call this: n(UIImageView, (image: n(UIImage, imageFromFile: user?.pic))) and not worry about propagated errors crashing the system. Swift does not make it possible, nor provide any helpful syntax here. 
What resolution are the videos in?
Think of something you want to make, and then make it. If you hit a snag, google your problem or check out the swift documentation. This will get you learning dynamically and thinking critically about how to apply what you've been learning to what you want to be doing.
You'll get that content as soon as they finish it, it's included in the price already. 
thats the problem... i cant think of anything useful to make... that doesnt already exist....
Jumping jacks 
Don't let the fact that something already exists deter you from making something for your own use. I'm working on a grocery list app right now. A GROCERY LIST!! There are probably hundreds of those across every App Store imaginable. But there isn't a single one that works EXACTLY as I think it should. And using someone else's doesn't give me any coding practice.
Because the types match func foo(_ a : A, _ b : B, ...) -&gt; Result is a function taking an n-ary tuple to a Result. Function application foo(a, b, ...) is sugar for foo((a, b, ...)). Tuples play a huge part in this language because it keeps C's old "uncurried by default" approach to everything. Tuples are also a convenient way to look at argument passing. A tuple passed to a function comes out as either a block of registers or a bit of stack space.
Thanks very much, but again it seems that ctrl+click and dragging from the source to the destination should create the segue, and that the segue will happen on click. That's what I've done. The segue doesn't happen. 
The BNL song "It's All Been Done" is very relevant here. It's not the originality that matters right now, it's about developing the coding and problem-solving skills required to go from an idea to a functioning application. By improving these abilities, it'll be way easier to tackle the complex issues you may face once you do have an original idea you want to pursue. 
Swift jumping jacks?
The hardest part about learning programming is retaining it and putting it to good use. What's the use of learning how to make a "Hello World" app? Why make a list of "[Scary Bugs](http://www.raywenderlich.com/1797/ios-tutorial-how-to-create-a-simple-iphone-app-part-1)" with which you can rate their 'scariness'? The point is that these are critical building blocks to your knowledge. Next time you fire up Xcode to make your next app, you'll remember your previous apps (and probably open them) and use *those* experiences on which to build your app that much faster. You can't go from having no knowledge of Xcode, iOS and Swift to building Clash of Clans in one sitting. It takes a lot of building to get there. So, to your question, you should make a bunch of small apps. * Build that "Hello World!" app * Now build it without looking up any help (just to see how much you remember) * Now build an app that shows a table with a list of numbers from 1-100 * Now re make that number table app so that you can click any number and it shows you the number in its own window * Now re-make the number table app so that you can click a number, but then you can change that number and it's saved back to the main list * Now make a table list app that can have numbers added to it dynamically (not pre-loaded) * Now make a table list app that pulls data from a JSON feed, such as [Reddit's feed](http://www.reddit.com/.json) * and so on... That's how I'd approach it anyway. 
&gt; Think of something you want to make, and then make it. And once you're done with that, publish it. I learned more in the two weeks before I put my app into the store than I learned in the six months I wasted with tutorials. And of course the weeks after my app was live were a very valuable learning experience as well. Making apps just for the sake of making apps is a waste of time. Show them to the world. 
This. My first app in the store was a small one-task utility in a niche category which was already full of apps. At least two dozen apps did the exact same thing my app did. It's a really tiny market so that's a lot of apps. But all of them were more complicated than necessary. So I made another one. The first google alert for my new app was a review site that asked "Review App XY - Do we really need another one?". I was prepared for some harsh criticism until I actually read that review. It basically praised my app as the best one in that market. Fast forward 3 years. My app owns that category. It's the only app that has a reasonable amount of reviews. It's the only app that got an update in the last year (which is usually a strong indication that no users uses these apps). Some guy even made an exact clone of my app. For Windows Phone! Because it's a small market the app does not generate much income (around $100 a month), but I still love having it. If I would have stopped because there were already apps of that type people would still use the shitty apps that were already there ;)
I personally learned all my iOS skills from [Apple guides](https://developer.apple.com/library/ios/navigation/). It took me time, but that has helped me to get a deep understanding of how iOS works. The pros are: * The guides are available online (or offline with Xcode) for free and constantly updated * They cover (almost) every topic * They include everything you need to know about something The cons are: * They are incredibly terse. Although they explain concepts clearly, they don't spend too many words on them * They have no logical sequence. It took me a lot of time to find which information I needed first when I studied them the first time To learn some more advanced concepts, I follow blogs like [Objc.io](http://www.objc.io) and [NSHipster](http://nshipster.com) [I am also following the same approach on my personal blog](http://matteomanferdini.com)
Oh oh oh oh ok I get it now! Thanks so much!
The more I look at the Apple documentation, the more I'm realizing that's the place to get my information. 
You sir, are amazing... I may be really stupid, but I have implemented this class, sadly its never getting called, but everything still compiles. Any Ideas?
I suppose you could do this in a lot of languages.
You can try implementing some algorithms/data structures from Cormen's "Introduction to Algorithms"
There's also Treehouse: http://teamtreehouse.com/tracks/ios-development-with-swift and http://www.Bitfountain.io
You can use the *CoreImage* framework to add gaussian blur to your images. Simply instantiate an *CIFilter* object and apply it to your image: let filter = CIFilter(name: "CIGaussianBlur") ... 
Except I'm developing the App for iOS its like the Alien Blue night mode or Tweetbots Dark Mode
Before the webView:decidePolicyForNavigationAction: function can be called you have to set the class that holds the protocol's action as the NavigationDelegate of the WKWebView. This can either be done in your storyboard by control clicking from the web view to the class, or in code with: webView.navigationDelegate = 'delegateClassInstance' To make things the simplest I suggest having the view controller that you use to display the WebView as the delegate to the WebView's navigationDelegate.
I thought it ws a good start to understanding fetching data. Would be interested in learning more about put interaction rather than just gets. For example, how to pass curl commands using nsurlsession in swift. Not many tutorials out tyere for that kind of stuff.
This is great, consider expanding the tutorial even further!
This is what I use: [StackBlur](https://github.com/tomsoft1/StackBluriOS).
However you are most likely benefiting from those features indirectly. Core Data, Cocoa undo framework, bindings, KVO, delegates etc are all based on these Objetive-C features. Even if you don't use these features directly you likely use a lot of libraries and frameworks which are dependent on them. E.g. dealing with delegation is quite elegant in Objective-C due to the ability to forward messages. You can e.g. daisy chain delegates. I've found no way to do that in Swift.
Thanks for taking the time to respond. Upon entering this I am getting a few issues. webView?.navigationDelegate = ViewController() This compiles but doesn't do anything. Which I expected. webView?.navigationDelegate = ViewController.self Gives me an error about how it does not conform to WKNavigationDelegate I am feeling pretty lost on this issue. Im more than happy to give you a copy of the full code in a PM if you are willing to help me through this. :-/
Oh thats an easy fix to make. In your view controller declaration you add the WKNavigation delegate. Like this: class MyWebViewController: UIViewController, WKNavigationDelegate { … } and then when you are assigning the view controller as the delegate (in my example I will use viewWillLoad(). override func viewWillLoad(animate: Bool) { … Other will load code … webView.navigationDelegate = self }
Are you just watching the videos? Or are you actually following along and do what they are showing? For me, I repeat everything they do in the video in xcode and play around before I go to the challenges. It's difficult to learn just by watching. 
I was like you, about 18 some odd years ago, when I was in college. Zero programming experience. I had no idea what a programming language was. This is not directly related to Swift, but I can tell you form experience, like anything else, that it is practice that will make perfect. My first language was ANSI C and what little hair I had left on my head back then I tore out. I recall writing a programming on my PC that crashed and all of a sudden the printer starts printing shit out. I was like cool, but WTF!! You need to get comfortable with the basics of computer programming to begin with. Functions, Objects, Methods, Classes, loop structures, conditional structures, Data Types and all that crap. It will take a little time, but you will get there. I learned Objective-C over the past 4 months and even though I have been programming for a long time, there are still times that I forget the syntax. You just have to constantly do it. Repetition is the mother of all skill. Just don't give up! Good luck!
I suspect trying to make an app in an IDE that you're not familiar with using a language you don't know without a conceptual understanding of programming is overwhelming. Therefore, maybe it would help to use XCode's new playground feature where you are free to explore programming concepts. Try to make and work with variables. Try to work with logic structures, loops. See if you can think of something YOU want the computer to do for you. Think about how to do it. Then do it. 
By far most useful response I got, thanks
The first rule to write code is: writing code. The second rule to write better code: write more code. And thats - besides the fact that it could help if you can think in an abstract way - is all to get into the coder universe. To be honest: The chosen language doesn't matter that much as it matters to get the basic understanding of control flow, data types and loops. Don't stress yourself. Just type the lessons or pick some coding katas (dozen of them out there just google it). Keep it simple, just get it to work. You can't remember the syntax? Split screens and type it off but type it. Just curios: Why did you chose swift as your first language?
I stand corrected, it can work.
When I was first learning programming it took me around a year before syntax stopped being the primary problem.
Embrace the pain, you are simply in a discomfort zone, which means you are learning. I've been doing this for 30+ years, and I still feel the pain when learning something new, but I now get enjoyment from the fact that I know breaking through the discomfort will feel great. Take your time, if you feels helpless, work on it less, but chip away a little every day. This helps me go faster: - always be coding. Have XCode (well, AppCode for me) running so you can code as you watch. - get more out of watching. I use [Swift Player](https://itunes.apple.com/ca/app/swift-player-speed-up-video/id545216639?mt=8) (the name is a coincidence) where I can speed things up, replay the last few seconds with a quick swipe, and bookmark interesting parts in a video. - spending less time, but working on it every day, even if it means 5 minutes of review if I have no time. I always have 5 minutes. Good luck!
Sweet. Thanks.
Sounds very close to what I felt like when I started. Don't stress to much, write stuff down, ask questions, engage the online community. No matter what you do, stick to one language and master it. All the languages are very similar but provide different functionality. Different tools for different jobs. The fundamental concepts are pretty much the same across the board. When you are ready you can transition into another language very easy for the most part. I like to think of programming languages kind of like the difference between American English and UK English. Although they are different, you'll be able to understand a lot more then you realize. I like to think of syntax like the punctuation across different languages. Programming is more about thinking and problem solving, not typing code. Before you sit and put all the lego pieces together, you must decide what and how you will build it.
Just purchased the 'Complete swift guide...by making 15 apps" series during the discount and look forward to getting to it once I finish learning objc. Which have you found the most useful so far and have you used any other resources that are worth noting? 
You shouldn't be able to get the signature correct. Swift functions are not function pointers, they're (conceptually) blocks. Keep your pointer arithmetic and callback procs away from Swift.
Check out https://layer.com if you want messaging. Probably alot easier API, even though I haven't worked with it. Yet... :)
Just in case someone gets confused, it should be r.$0 or r.$1
No, it's not supposed to be `r.$0`. What would that even be? I'm accessing the first and second values of the tuples, which can be done with `tuple.0` and `tuple.1`.
No worries, 1.5 years ago I started a Objective-C course after years of PHP, Javascript and Actionscript. I felt like I became an absolute computer illiterate. I didn't understand anything I was doing. I made sure I did every challenge en followed every lesson. And 6 months later, my first app was approved by apple, and is still selling every day today. Hang in there, buddy. Because you don't have any programming experience, it might take a bit longer, but one day you'll be replying on Reddit to someone who is struggling, just like you were.
Sometimes to get it you need to approach it from different angles. Read a different explanation of the same concept or if really stuck consider playing with another language. Anyway your issue with initialization. Let me give it a shot to explain it. Say you have a person struct. struct Person { var firstName : String var lastName : String var age : Int } Now imagine the compiler was not as strict as Swift. Then you might want to give person some initial values like this: var boss : Person boss.firstName = "Steve" boss.lastName = "Jobs" But then oops you forgot to give Steve Jobs an age! So when you write somewhere else in your code: println(boss.age) That would not work very well. The age variable has not been defined anywhere. So this would output garbage, crash or whatever. Depending on what your compiler thinks is a good idea for how to deal with undefined values. That is why Swift objects have initialization. It forces you to set a value for every field. Your "init" function isn't valid unless your have set a value for every field in person. So the compiler will just start complaining to you, to make sure you don't do stupid mistakes I just gave an example of. Next problem is "self". You have to imagine that your "init" function or actually every function which is part of a struct or class has a first argument called "self". Like this: struct Person { var firstName : String var lastName : String var age : Int // just imagine this is what it is. The code below is not valid swift code init(self : Person, first : String, last : String) { self.firstName = first self.lastName = last self.age = 35 // As an example. Not every variable on person needs to be passed in as an argument to init. You could initialize them to fixed value. } } 
Hi! My Saturday afternoon was fine, thank you for asking. How was yours? What sort of reference guide is this? Like a document library, similar to Dash? Or something else? Without knowing, I would probably suggest Ruby, Python and Haskell. It seems odd that you're giving away the most useful ones for free. I'm not sure who would go for Perl or FORTRAN as an in-app buy.
Hmm, you make a very good point about offering the useful ones for free. Thank you for your input! And my Saturday afternoon was great, thanks for asking! 
C, C++, C#, Actionscript, Lua, Vb.net
Whoops and the type of reference guide is like a dictionary with "all" of the syntax from the languages I include with "definitions" for each syntax and an example for each 
That's cool, but sounds like a huge undertaking! Are you going to be writing all the content and code samples yourself?
Wow, I just read one article, but it was well written, concise and they have examples.
Good content.
ActionScript3, Python, and Lua that TelyX already suggested. 
Oops, something went wrong. Tried it in place where GameScene goes to die, but It's throwing me this, after GameScene is being replaced for GameOverScene, where highscore is being displayed: 2014-11-23 11:02:39.747 AfraidGame[1046:327358] *** Terminating app due to uncaught exception 'NSUnknownKeyException', reason: '[&lt;NSUserDefaults 0x104821350&gt; valueForUndefinedKey:]: this class is not key value coding-compliant for the key highscore.' my code for what you've written: var currentHighscore = NSUserDefaults.valueForKey("highscore") as Int if scene.score &gt; currentHighscore { NSUserDefaults.setValue(scene.score, forKey: "highScore") NSUserDefaults().synchronize() println(NSUserDefaults.valueForKey("highScore")!) } skView.presentScene(scene, transition: SKTransition.fadeWithColor(UIColor.blackColor(), duration: (1.0))) and the code in GameOverScene: var currentHighscore = NSUserDefaults.valueForKey("highScore") as Int gameOverLabel.text = "score: \(gameScene.score), highscore: \(String(currentHighscore))" 
There is no formal description of a set subset in Cocoa terminology. Could you please clarify what you would like to achieve? Are you using NSSets?
I've been learning programming in fits and starts over the past 2 years. Through this time I have gained a pretty decent understanding of things, but haven't yet put together a fully fledge app - and recently decided to go all-in this time with iOS. I find that whether through documentation or tutorials, my biggest problem has been to understand the macro reason for doing things. Why? I think in general, many resources are very 'micro' oriented, but don't explain the underlying structure and how all the parts fit together. It's left up to you to do the digging. I've been struggling with some concepts in Swift + iOS dev, but have made a little bit of breakthrough progress and my method is as such: Do a tutorial, or part of it and try to understand it as you go along. The key though, and very tedious but effective for me - has been to go over what I've done and actually rewrite the documentation in my own words. This really forces me to think critically about exactly what I've done. Since I started doing this, I've noticed my understanding go up in a marked way. I also recommend trying to visualize what is happening. Most importantly, don't give up!
Have you had a chance to check it out yet? I was thinking of buying that one as well.
Great stuff! If Apple's advertising at WWDC about there being around 1000 new APIs is correct (and they carry on at this pace), it won't be possible to cover all of them ;-)
Yeah but I've only gotten about 10% of the way through. It's good so far, the 'teacher' seems to know what he's talking about and it's a pretty extensive course so I'd definitely say it's worth the $14 or however much you're paying now with the black friday offer. 
I am assuming this is an .sks file that is __not__ empty. correct? so you've had content on this before and you cannot open it now with the new Xcode? do you have your old (working) xcode still on your computer?
okay that's good to hear that it's working with the old Xcode. Erm, have you tried copying all your contents from the file in Xcode 5.1.1 and then create a whole new project in the new Xcode, and paste your scene contents into the new Xcode and see what happens?
Just tried it, still didn't work :(
I'm doing the Universal one first. It touches on Parse which is something I find valuable and really want to learn. It also happens to be the shortest class. Finishing a course 100% can be pretty motivating.
Not just that, but the docs for swift aren't ideal for a new commer either, they're good as a refe nece source, but they absolutely won't help you get started. 
Well since you have a few months before actually starting to code for OS X, you'd be better off using that time to really polish up on Objective C, and then when the time comes, learn Swift, it'll take you less than a week to get used to the language if you've done your work on Objective C. And then you can choose what suites you best, but yeah having a knowledge of Obj C is always very helpful if you're doing Swift, especially right now while it's still new and not taken over Obj C. If you don't have a Mac or can't run OS X, you'd probably have less chances of programming in Obj C or Swift. And you can't just learn by reading books, you need to practice. So if that's the case then you should learn C or C++ IMO while you wait for your Mac. Or Javascript or Lua if you want something more like Swift, that has a lot of syntax common to a scripting language. This is just to get started and understand the concepts of programming and how to think like a programmer.
In addition to this, it's worth noting that a lot of the courses and info out there use beta versions so as to be first out of the gate with their educational material. Meanwhile the language has changed in subtle but significant ways. An experienced programmer won't have a problem understanding why, for example: var i = 1 i = 2.3 works in one version (Xcode 6.0), with implicit cast to int on the second assignment, and blows up in another (Xcode 6.1). Why now you need to use ! and ? in certain places that didn't require it before. A beginner will spend most of their time trying to figure out why so many things don't quite work like the course or book says it's supposed to work
If you want to study something, the Human Interface Guidelines and tutorials on how the interface components work together aren't a bad idea: you need that in either language. Scheme, Clojure, or maybe even Python or Ruby would probably be a better thing to start in than ObjC and swift
I always tell people to start with Python. It has easy, English like syntax, and it's an interpreted language so you don't need to compile it. Just download the Python interpreter, type "print hello world" into a text file, and you've just written a Python program. Once you learn the basics in Python, learn C and then start on iOS. Most of the books and other materials for learning iOS programming are for Objective-C, so you may pick that up while you learn the frameworks. Then you should start learning Swift. The reason you go through this is because you want to learn how to program, not just how to make apps. If you learn how to program, you can pick up the next big thing once Swift is obsolete. I work with several people who never really learned how to program, they just learned how to write code on one specific system. These guys will be screwed if that system becomes obsolete.
I'm surprised that ever worked frankly, I thought they prohibited implicit casts from the get go? (Except a very select few cases)
Good lord no, Javascript. No, wtf. Why would you wish that brain damaged garbage on anyone as a first language. Please tell me you're not an advisor or a teacher.
IMO, if you're learning programming languages for the first time you should start with something pure and powerful. Smalltalk is a good OO language to start with, Haskell is a good functional language (like Swift is) or alternatively OCaml (but ignore the OO stuff if you go with Ocaml) and Lisp would be the best procedural one (any Lisp is probably ok but Common Lisp is the best out of box IMO). Once you know how to program properly, it will be easier to dumb down what you know to less capable languages.
It's like a building! You need to start building from the ground up! Start with low level assembly language, get seasoned in machine code, then move up to C, then introduce yourself to C++ for the object-oriented programming skills, then try a garbage collected language like C#, then move up to Objective-C, and finally Swift. Good luck! :-) :-) Seriously though, what I think should also work pretty well would be a _well-documented, well used_ (for the community and looking up already answered questions on [Stack Exchange](http://stackexchange.com/)!) language. Swift is fairly new, this is mostly why I recommend something else first. I'd recommend C# for a Windows user since the IDE is extremely good for being a free package (C# Express Edition) and the language feels clean, yet with modern concepts. But for an OS X user, I'd probably rather recommend Python or something like that, not the least because it's built into OS X. For "serious" work you'd perhaps want a later version of Python than what's supplied with it but it doesn't really matter for a beginner or even intermediate user. As for the development environment if you do choose to go with Python, [PyCharm](http://www.jetbrains.com/pycharm/) is pretty great, available for OS X, and free if you use the Community Edition.
As usual, many different people advise different things. Some advise to start with Swift, some with Objective-C, some with another language. My advice is to start with Swift. In short, the reasons are: * It's not any harder than other programming languages. Especially using playgrounds, learning gets much easier, in my opinion, because they offer tools you don't have in other languages. * Programming concepts are the same, in any language you learn them * Learning directly in Swift has the advantage of not having to learn two languages. True, any experienced developer can switch from one language to the other, but if you are learning from scratch you are not experienced by definition. And why spend the time learning two languages when you don't really have to? I wrote more about it [in this blog post.](http://matteomanferdini.com/swift-learning-roadmap/)
Are you *trying* to scare this person away?
He is *not*. It turns out that learning functional languages is much easier for students who had not been infected by the imperative virus (i.e. by the programming in terms of "how"). Programming by telling the "what" (i.e. declarative programming) is a rewarding experience that every programmer should grok in his/her career.
You can write perfectly elegant code in Javascript, but the pure language really makes no sense of what is a "best practice". There are several ways to do inheritance for example, where in Java I'd be hard-pressed to fuck it up. A very well structured course, with a clear emphasis on *programming* concepts and not *javascript* could work. An advantage of learning Javascript is the portability and instant gratification. I would almost cast my vote for CoffeeScript; having those advantages, and a much less nebulous object model. Plus pattern-matching is there, which I think really motivates looking at types structurally.
For the most basic kind of programming Swift works fine as a beginners language I suppose. However as you want to learn more advance concepts I fear that Swift might be a bit difficult to get for a beginner. I started programming about 20 years ago and know dozens of language to varying degrees. But I got to say moving from ObjC to Swift has given me some frustrations at times. It can be rather tricky to figure out what you did wrong because Swift is quite strict about types. I don't want to give you the idea that Swift is a bad language. I think it is awsome, but it has some rough edges. It doesn't feel like Apple is completely finnished with it. From all the languages I have tried I think the ones that have impressed me the most as beginners languages is Smalltalk, LISP/Scheme/Racket, Lua and Python. Racket has a great book for beginners and a great learners environment called DrRacket. With smalltalk I don't know what is THE environment these days. I used something called Dolphin smalltalk way back. Lua is used a lot with games, so you might be able to take an existing game and use Lua to control the characters in the game. That might be a fun way of learning. Python is sort of THE beginners language these days it seems. So there is plenty of learners material. All these languages have strengths and weaknesses. If you really want to get into Mac development I strongly suggest looking at Smalltalk because Smalltalk was the inspiration for Objective-C which again inspired Swift. So a lot of the concepts and ideas you learn in Smalltalk are directly transferable to Objective-C, Cocoa and Swift. If you want to learning programming fun and entertaining, then Lua might be a nice option as you can play with modifying games. If you want to get a solid understanding of programming languages in general I think DrRacket is great. It is very easy to get started. Easier than almost anything else but it scales up, so you will gradually be able to learn how almost anything in other programming languages work. Python is good if you want to be able to get help from a lot of people and you want to learn he basics without necessarily learning how things work. It also is quite generic. You can't as easily transfer your Python knowledge to Mac development as you could with say Smalltalk.
I think starting off with Swift is a great idea, so as long as you stick to it and ship a simple product, or maybe more. You want to avoid paralysis by analysis, and just simply "DO" as opposed to waxing and waning between which languages are the best to learn. Whatever language you choose, there will be lots of transferability in terms of the overarching concepts. If you're not feeling Swift after doing a project, maybe pick up Ruby or Python (or whatever language you think will allow you to create whatever it is you want to create). While the syntax may not be the same, and there will be nuances to each language, which you can pick up pretty easily if you've been paying attention to what you're learning. I started off learning Ruby/Rails, shipped some simple projects. I learned MVC and how everything works (in order to become a better product manager). Now I'm using the same approach for Swift. I wouldn't worry too much about jumping around. Dedicate yourself to doing something, following through to the end. Whatever resource you learn from (Treehouse, Bitfountain etc), just make sure you get to the end and use plenty of the resources at your disposal. I wrote a bit about my experiences here: http://www.quantifire.net/blog/learning-to-code-update-swift-for-beginners-by-treehouse/
One of my first languages was Javascript. It was a good start - you don't need anything except a browser and text editor, no complicated software to install at all. It's just a really simple way to get to write some imperative spaghetti code, e.g. learning about functions and control flow. If you want to go further and do OOP and stuff, I'd switch languages.
&gt; Haskell is a good functional language (like Swift is) Swift has some functional features, but this sounds like Swift and Haskell being quite similar when they are not. I'd say Swift is closer to Java than to Haskell...
This design pattern is good, but the way it is used here is very poor. Bundling half a dozen method calls into a single expression makes the code more difficult to read and doesn't add anything of value. It's a classic case of somebody learning a new trick then using it in inappropriate places. The author also uses false comparisons that disproportionately favour his code. For example, he uses `acceptGzip()` in his example in place of setting the headers manually. He's not comparing fluent with non-fluent there, he's comparing a convenience method with the absence of a convenience method. 
That's my bad. Got confused with the way you get the tuple values anonymously from the input of a closure.
C is good to know because it's the "mother language" of most programming languages. It's not required to know C to be a programmer, but knowing it will give you a good starting point learning other languages.
Could you point to a good example?
It will probably be easy for you to create new variables on the new views and concatenating the result from the previous view. I believe it's an easy solution and it can work well for you. 
I"m doing the same as well, commenting my notes for each playground I create as I follow along Amit's lessons. I also discovered (option+command+/) to highlight a block of code and comment it out.. which kinda helps me a bit when I don't want certain code to execute, but I can still refer to it.
the most straightforward way to pass values to a new view controller is to declare a variable in the new view controller and then use the prepareForSeque override function in the originating viewController to pass the value. Give your segue a name in the storyboard, then use that name to check to trigger the passing of the value. here is an example in your destination ViewController: var finalString:String = "" in your originating ViewController: override func prepareForSegue(segue: UIStoryboardSegue!, sender: AnyObject!) { if (segue.identifier == "finalView") { var detailVC = segue!.destinationViewController as DetailViewController; detailVC.finalString = currentString } } Have you learned about segue's yet? 
Clojure, Haskell , Ruby
We learned about segue's briefly, I understand your code but to be honest I have no clue what I am doing. 
the only way to learn this stuff is to keep going. It took me about 6 different projects to really understand segues. It was so frustrating to me that one had to go thru all these hoops just to pass simple values between view controllers. So I understand how daunting it all is. Have you programmed before? What language? I really learned a lot from the guys at bitfountain.io - I took their swift course as to kickstart my understanding of it and it was invaluable. They do a good job of getting you to understand the concept behind some of this stuff. I paid about $80 for it and it was well worth it. You might want to check it out if you are still confused after your current course. 
You can cheat and keep all the data in a global variable. It's bad practice generally but sometimes it's cleaner than passing variables piecemeal like a relay
i don't agree. The whole Alamofire (https://github.com/Alamofire/Alamofire) library is built on top of the fluent interfaces. regarding comparing fluent and non-fluent, i can see the example at the end of the page explaining the difference between the two approaches. have you read the article?
Here is another example that should work for you. I tried to keep the instructions and variable names clear for you to understand. Hope it helps. 1. First set up a property in the second view so the first view can access it. 2. Create a variable for the label in the viewDidLoad() that will be updated by the property you just created. 3. Back in the first view insert the prepareForSegue(). xCode will auto complete this function for you. 4. Inside of the prepareForSegue() function you just created you can create a variable that will transfer the data to the second view controller. 5. Now the new variable you just created will have access to myProperty in the secondView. You can now set the value of the new variable to the text of the first label . —————————————————————————————————————————— 1. var myProperty : String = “test” // View #2 2. viewDidLoad() { self.secondViewLabel.text = self.myProperty } // View #2 3. override func prepareForSegue( segue: UIStoryboardSegue, sender: AnyObject? ) { } // View #1 4. var sentMessage = segue.destinationViewController as secondView // View #1 5. sentMessage.myProperty = firstViewLabel.text // View #1
Very nice! I wonder where else this could be used... seems like it's best used when there is a builder-pattern opportunity?
I am not saying you are wrong. But really, knowing pretty much any language will help learning other programming languages. I started with javascript and went from there to Objective-C and Java. Not untill a year into that I faced a program in which a tiny amount of C++ was neccessary to know. Still haven't had to work anything with only C. If you want The strict academic way and deep knowledge, of course C is a language you must learn. But I come from the other side where produced products and result is the only thing matter. It is like spoken languages. Most of these are based on German or Latin, but neither of those are required to learn english/spanish/french etc.
&gt;you don't need anything except a browser and text editor, no complicated software to install at all. Everyone has this now. Even [Haskell](http://tryhaskell.org/) can do it (notice the IDE link as well, fully in the browser). &gt;learning about functions and control flow. The issue is: Javascript has a lot of cruft and incredibly stupid design decisions. These are all things you have to unlearn if you decide to go further in software development. Right now it looks like you can go far with Javascript because it's in fad mode so badly that people are even doing Server side development with it. But eventually the enterprise is going to take a step back and see what this is actually costing and realize Javascript actually has very limited uses, and is questionable even in those areas.
&gt;You can write perfectly elegant code in Javascript You *can* write elegant code in assembly. It just takes a lot of effort and a lot of *experience*. Which is what someone learning to program does not have. Why give them a language where it's theoretically possible to write elegant code as a first language when you could just give them a language where elegant code is the norm? &gt;where in Java I'd be hard-pressed to fuck it up You can see from my other post I advocate strongly against Java as a first language for the same reason I'm against JavaScript: bad design leads to learning things you need to unlearn later (e.g. "why can String override "+" but I can't?", "how do I see if two 'things' are equal?", etc.). &gt;A very well structured course, with a clear emphasis on programming concepts and not javascript could work. In which case you could use most any language. &gt;An advantage of learning Javascript is the portability and instant gratification. This is not a factor today and hasn't been for years. Most every language has this. Even [Haskell](http://tryhaskell.org/).
it seems like it is useful for many cases. i am using it right now for what the article explained (an easier to use connection class) and i did a url creator that you can pass it various arguments like (https/http/domain/extension) and it can build the url for you... pretty much the same idea as in the article though.
Hmm, I'm a bit of a noob too so hard to tell just from that. Are you able to post the full code?
please... don't do that... CoreData is there for a reason.
Yes, but if you are new to programming, it's very likely that you won't need to do so until much much later. The options are: - Learn in Swift and eventually you might have to learn Objective-C. Or maybe not. A lot of libraries are being translated and you might never need to touch Objective-C code (very idealistic, but well, worth mentioning) - Learn in Objective-C and sooner or later you will have to learn Swift. Probably sooner, since everybody is moving there and you might leave Objective-C behind. - Learn a third language you will never use in iOS development and have to learn at least one new language (Swift) if not two. It's hard to tell of course, but if you have to place a bet, the first seems the safest to me. I would definitely never go for the third personally.
yes to take something dead simple...querying a DB...and turn it into something that is overly complex for many simple storage/retrieval tasks.
for simple storage, there is NSUserDefaults
Even Mattt Thompson (AFNetworking, NSHipster, etc...) thinks that CoreData is "Pain in the Ass": http://nshipster.com/nscoding/
Everything is a pain in the ass if you don't know how to use it. Thompson has to learn the framework better. Once you learn something, it will become easy for you to use and difficult for those who don't know how to use it. It's just plain text really... That being said, I personally believe that using Sqlite in your app will cause you more headache than using CoreData. You have to everything manually, use C APIs, allocate and deallocate memory, cursors, create and drop databases if needed, create tables, put data manually, create rows, everything. A lot of this hard work is done for you with CoreData __but__ I don't want to convince you to use CoreData. That's not my job.
I'm a web developer who's been getting into Swift. Was really excited about using Core Data as an ORM over an SQLite database (even been reading the alpha book Pro iOS Persistence) until I started doing it. Fuck, I'd rather to back to the dark ages of writing 'SELECT * FROM users' than have to deal with the pain the ass that Core Data is.
that to me translates to "I don't know how to use it, therefore it must be hard to use". That is very... dumb!
It seems like it is useful for classes that need to do a task, and then you dispose of them. of course it can be used pretty much anywhere. any method that returns void can now return Self and then we can chain calls. regardless of what type of class we are working with
SourceKit crashes are driving me insane!
Well, I don't know how to use it. I'm actively learning by reading up on it (with the book I mentioned) plus experimenting in other apps. The thing is, Core Data is a pretty unpleasant wrapper for a database. For example, a nice ORM would let me do something like @users.where(email: 'foo@example.com').first, where Core Data requires me to set up a bunch of instances and predicates just to run a simple query. It would be a lot faster to just write the damn SQL query.
As far as I know, 6.1 has a sound bug with the simulator (Please correct me if I'm wrong). Did they fix that in this update?
I know how to use Core Data and it's *still* a pain in the ass. There are a lot of times when a straightforward SQLite solution is more efficient than jumping through all the hoops you have to in order to get Core Data to work right and not crash on you. For the record, it's not that hard to do your own caching and migration management, and it lets you get the job done without having to fart around with hierarchical MOC's and merge handlers. 
Does 6.2 fix the horrendous storyboard interface builder bug where views get randomly resized to 0,0? That issue is KILLING me.
That's a bug? I thought I was doing something horrendously wrong with auto-sizing constraints. SO.... MUCH.... WASTED.... TIME.....
Why you're being down voted is beyond me. Looks like a good library and this is the only direct answer to the question OP asked. 
Thanks! Looks like you're single person here who is trying to help instead of telling me how great Core Data is =)
It is a heinous blight upon developers that I secretly believe (not really) was introduced by a Google agent to setback iOS dev to the benefit of Android apps.
To a certain degree, Swift and ObjC are interoperable. So whatever you're trying to learn in Swift, you can use the ObjC resources you have and code in Swift instead. It is also a good exercise to understand what is and is not interoperable.
don't know how sold on SQLite you are but [Realm is a nice alternative solution](http://realm.io/)
Even a Swift-specific JSON parser would need to have some of that complexity, since you're taking an arbitrary data structure and trying to describe it statically. The point of a new language in this case isn't necessarily to make things less bulky, it's to make them less buggy. That said, it *is* possible to be both concise and safe here, it just requires a radically different style of programming. Check out http://robots.thoughtbot.com/efficient-json-in-swift-with-functional-concepts-and-generics 
ah, that's good to know. I've only used it in some sample projects so I've never really pushed it to the limits per se. Would be interested to know what specific areas you had problems?
That's pretty out of context. From the same article: "there is no substitute for Core Data". His opinion (I've read the link before) is that it's an essential tool, but it's shouldn't be used in every place where you need to persist data.
Is this also true with C as well? I have a decent knowledge of C and could easily write the code I need in C but do not know any ObjC. And is there a special way to use the code together or can I just place it all in the same swift file?(either C/Swift or ObjC/Swift) Also are the library names the same for both swift and ObjC, where I could essentially just translate from ObjC to Swift? 
Haskell is a purely functional language, while Swift is multi-paradigm. Swift's support for functional stuff is clunky at times (have you compared e.g. currying in Haskell vs. Swift? It's an essential part of the language in Haskell, in Swift it's more like an afterthought, with that special syntax and whatnot). Swift can't have many of the features Haskell has, simply because it isn't pure. Also, "real life" Swift code is usually pretty imperative, and while you can do that in Haskell, too, it's just quite different with monads and the do-notation and all that stuff. Swift just isn't purely functional. Another thing very different is laziness... sure you can achieve it in Swift (you can in any language if you try hard), but the way the language works by default is very different. About Java: Yeah, Swift has some additional stuff with algebraic datatypes and value types. But on the other hand, Java 8 has lambdas now, so you get higher order programming and all that stuff in Java, too (most importantly for map, reduce and related functions on collections). In the most common use cases I'd say Swift is closer to Java, because both are used as an imperative, OOP programming language primarily, with some functional stuff tacked on. Haskell, on the other hand, is just 100% functional. Have you tried writing Haskell-style code in Swift? Last time I tried, I didn't get very far (complier troubles and language limitations)... but that was a while ago (one of the first few betas).
Just so I understand, you're communicating with a server but you're not using HTTP as a transport so you can't use NSURLSession?
I'm not talking about some website that offers a compiler. You can do Javascript with a Browser and a Text editor locally, without internet and depending on someone's server working. But I agree, I wouldn't really recommend JavaScript to learn programming; I was just commenting that it worked pretty well for me around 10 years ago.
I could explain this to you in objective-C but I don't think that's going to help, sorry pal
Perfect, exactly what I was looking for, though I understand it well enough now.
Officially, there are no changes to Swift in Xcode 6.2: https://devforums.apple.com/message/1074584#1074584
&gt; You can write elegant code in assembly. It just takes a lot of effort and a lot of experience. ... Yes, because Assembly lacks high-level abstractions. JavaScript has them. The in-elegance of the language, as I already stated, comes from the multiple ways to do things. Mixing in code from another source might not make any sense. But a beginner can start out writing code following one method, and fully understand that one method. &gt; You can see from my other post... I never advocated for Java. I just said it had a very strict way of doing inheritance (which IMO is a disadvantage). &gt; This is not a factor today and hasn't been for years. Most every language has this. Even Haskell. Its still running on top of a JavaScript interpreter - probably with incomplete standard libraries. One of the reasons I wrote "instant gratification" is because you can write very visual examples manipulating html. You're going to have a hard time finding a site that lets you write graphical examples, like JSFiddle, that has integrated Haskell.js. Also, I'd like you to point out an easy to explain Screen drawing monad.
Swift is compatible with Objective-C. Is there any reason why you can't, for example, use Cocos 2D with Spine 2D from your Swift code?
I wouldn't read too much into the reasons for or against learning a particular language. As long as it's still in popular use, and most of the languages listed here are, then there's no real downside to learning any of them. The fact that Swift interests you is a good indication that you should start with it. Once you've become fairly comfortable with one language, it becomes far, far easier to learn how to use others.
Open your Xcode project (with the Obj-C sources). Create a new Swift Source file, and allow Xcode to configure a bridging header (it asks you automatically). You now can write code in Swift in your existing project. You can replace your Obj-C classes with Swift versions if you want to port them, or just add new code in Swift. It's pretty straight forward. Just make sure to add all Obj-C classes you want to use from swift to the bridging headers file. 
But if Spine doesn't have a swift runtime how would I integrate spine, which is my problem. I'd have to wait for a Swift runtime which I haven't found any news of by googling. I'd have to keep that project Objective-C for the most part, in order to use Spine. Btw thank you for the help so far! 
Try it. Swift works quite smoothly with Objective-C frameworks/libraries. Create a Swift class in your project, and instantiate one of the Spine classes that you currently use (remember importing the class in the the bridging header). All of your project can be in Swift, and you can use any Objective-C frameworks you want. It doesn't matter that your Spine runtime is in Objective-C, you can still write your code in Swift. You may want to read this if your confused about how to call Objective C code from Swift: https://developer.apple.com/library/ios/documentation/swift/conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-XID_25
Not fixed as far as I see, and seems specific to views that do not have any specified constraints. I've come to the conclusion it's Apple basically saying: *"Nice layout you got there, but you don't have any constraints set up yet... I'm concerned you might be trying to avoid using Autolayout. Be a shame if you lost all your size and coordinate positions..."*
I don't think its possible to run code in the background if it doesnt use one of the background modes listed in this doc: https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/BackgroundExecution/BackgroundExecution.html Do any of those match what you are trying to accomplish?
You already found an example, [UIApplicationDelegate](https://developer.apple.com/library/ios/documentation/uikit/reference/uiapplicationdelegate_protocol/index.html). If you implement some class that uses a delegate yourself, you, uh, just call the methods? Like `self.delegate?.whateverMethod()`. There's no special delegate syntax, the delegation patterns is usually implemented with a protocol (e.g. UIApplicationDelegate) that is implemented by the delegate class (e.g. AppDelegate), and a class (e.g. UIApplication) that calls methods on the delegate (e.g. applicationDidBecomeActive) and references it using some property usually called `delegate` (e.g. UIApplication's delegate property).
Thanks for that. Is &gt; self.delegate?.whateverMethod() meant to have an "?" in it? 
Yes, delegate properties are usually declared as `weak var delegate: DelegateProtocol?`, because you want to have a weak reference. This is just how the delegation pattern avoids reference cycles. For that reason the property has to be an optional (a weak property may be deallocated at any time, so it must be able to be nil). Also, a delegate may not always be set, so that's another reason why the property needs to be an optional. So when you want to call a delegate method, you use the question mark to indicate that there might not be a delegate, and that you're OK with the method only being called if there is a delegate set. If there's no delegate, nothing will happen (i.e. no crash, no warning, it's as if the line didn't exist). This is usually the behaviour you want when there's no delegate set.
If you need to do networking on iOS devices, [this is the related guide from Apple](https://developer.apple.com/library/IOs/documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html#//apple_ref/doc/uid/10000165i) This said, if what you need to do does not require something very specific, I suggest using a library like [Alamofire](https://github.com/Alamofire/Alamofire)
&gt; Is this also true with C as well? No. C is its own beast. &gt; ...is there a speial way ot use the code together Yes. You can use C, ObjC and Swift all in the same project. However, I believe you will need to wrap your C code with ObjC before you can use it in Swift. &gt; ...can I just place it all in the same swift file? No. Swift files are for Swift code, ObjC files (.h and .m) are for ObjC, C++ and C &gt; ...are the library names the same for both Swift and ObjC? I am assuming you're talking about the Apple iOS frameworks, such as CoreData, CoreLocation, QuartzCore, etc... If so, then yes. Consider the following ObjC code: NSString *myString = [@"Hello" stringByAppendingString:@"World"]; The equivalent Swift code would be: let myString = "Hello".stringByAppendingString("World")
Correct me if I'm wrong but the first ? only accounts for the delegate itself not being nil. You would need a secondary ? after the method call to account for optional methods i.e. something like: delegate?.whateverMethod?()
That's correct
Yeah sure, I assumed non-optional methods in the delegate protocol. If you have optional methods in the protocol, you need that additional question mark.
I did not know about that encodeWithCoder() part. I'll look into that. Thanks for the info! 
Or if you don't want or need to make it serializeable, just call the global function fatalError with some message from the initializer. I don' think it sill complain about uninitialied variables then, since fatalError is a @noreturn function.
But don't just use an implicit optional if you don't plan on actually setting it later its lifetime. That would be very error prone.
region.radius perhaps?
&gt;JavaScript has them. Yes but [they're wrong](http://code.tutsplus.com/tutorials/top-10-things-that-javascript-got-wrong--net-9266). &gt;The in-elegance of the language, as I already stated, comes from the multiple ways to do things. I disagree. Lot's of languages have multiple ways of doing the same thing. Javascript has lots of ways to do things *that are horrible anti-patterns*. It also has no sensible way to do the correct way (hence modern advice that you also import a JQuery or similar and program in that, never vanilla JS). &gt;But a beginner can start out writing code following one method, and fully understand that one method. Except they cannot. The language is so surprising, you cannot look at one piece of code and be certain what it does. &gt;Also, I'd like you to point out an easy to explain Screen drawing monad There are more things to do in code than drawing things. In fact, the majority of code out there is not drawing things.
Ok, I so maybe Swift is closer to Ocaml or F# than Haskell. But F#/Ocaml are miles closer to Haskell than they are Java and I would claim the same about Swift. Swift is probably closer to Objective C then Haskell in practice, but Java is miles away &gt;But on the other hand, Java 8 has lambdas now, so you get higher order programming and all that stuff in Java, Yea but seriously, Java has nothing. You have classes, you have methods. They've added some more bolt-ons but usually this justs gets converted to a form that you can use in a prior version of Java (e.g. Generic types is a pure compile time construct that doesn't exist in the compiled code. Contrast Java Generics with C# generics to see what I mean). &gt;In the most common use cases I'd say Swift is closer to Java, because both are used as an imperative, OOP programming language primarily, with some functional stuff tacked on. If you had said, say C++, I probably wouldn't have responded. But I'm working in Java right now.... this language has nothing. The fact that such an underpowered language got famous is a testament to how bad the alternatives were back in the day.
Not implementing init(frame:) was my first idea, but apperently is is called anyway when using the following implementation of the view: class ViewController: UIViewController { let myView = MyView(foo: 42) override func viewDidLoad() { super.viewDidLoad() view.addSubview(myView) } } (I understand that this wouldn't show anything because the frame is not set, but this implementation could be valid when using AutoLayout.) When I run it without the init(frame:) implementation, I get the following error: MyView.swift: 11: 7: fatal error: use of unimplemented initializer 'init(frame:)' for class 'SubclassTest.MyView' 
Can you write your own plist or use core data instead? Or even iCloud if you want to repeat the experience for the user on multiple devices. A quick search seems to indicate that using NSUserDefaults seems pretty common on iOS, but the idea horrifies me. NSUserDefaults isn't meant to be used this way. You can't really prevent people from changing the plist, but as you suggest, some crypto can at least allow you to obfuscate your values and provide the ability to recognize that they're garbage if the user does change them. Try working through Apple's CryptoExcercise in any case, regardless of which path you choose. It's still in Objective-C, but I'm assuming that's not an issue. https://developer.apple.com/library/ios/samplecode/CryptoExercise/Introduction/Intro.html 
Maybe this answers your question. https://www.youtube.com/watch?v=AQXWsDNno8o
YES THANK YOU SO MUCH I SOLVED ABOUT 8 (exaggerated) OF MY PROBLEMS WITH THIS! THANK YOU SOOOOOO MUCH!
I just experimented with this, and I'd say this is almost in straight up bug territory. The problem here is that UIView's init seems to be a convenience initialiser that calls UIView's designated initialiser, init(frame:), with CGRectZero. If UIView was written in Swift, you wouldn't be able to call `super.init()` in your UIView subclass - you have to call a designated initialiser. But the compiler fails to check this when the superclass is a Objective-C class, because the compiler can't check whether the constructor is a convenience or designated initialiser. The whole ruleset for initialiser inheritance is a bit complicated, and it really shines through in this case... The easiest solution is to call UIView's designated initialiser, aka `super.init(frame: CGRectZero)`, or use my proposal where you pass the frame to the initialiser.
Managing high scores and achievements is one of the things GameKit is built for (I'd assume including the prevention of users from tampering with the values). I'd look at that.
Glad you said it was bug territory. Started to doubt my own thinking skills. ;) Thanks for helping. I'll try to find the best solution.
Wait, so you want the App to get the name automatically without the user putting it in? Thats "impossible" unless having the app get access to the contact card
I'm sorry, I didn't watch the tutorial to the end ! my bad ! When i saw the "first hello world app" I thought that was the regular tutorial. Thank you !
I found these video tutorials to be very helpful for getting started with iOS development in Swift. They are designed for someone new to programming. http://codewithchris.com/how-to-make-an-iphone-app/
Tutorials are an OK starting point, but the real learning doesn't happen until you make something of your own (I don't mean the project the tutorial gives you, I mean working on a project you genuinely want to make).
So, just a linear animation curve? That's pretty much the easiest scenario ;-) First off though, if you're using it in UIKit for animating stuff, you may be able to use `CAMediaTimingFunction`. For some stupid reason, that class doesn't have an `evaluate` (or something like that) method, so you can't use it for anything else. But it's easy enough to write by hand (time is a value between 0 (at the start) and 1 (at the end). The rest should be self explanatory I think. func valueForNormalizedTime(var time: Double, startValue: Double, endValue: Double) -&gt; Double { if time &lt; 0 { time = 0 } if time &gt; 1 { time = 1 } return startValue + (endValue - startValue) * time } You would call, in your first example, like let currentValue = valueForNormalizedTime(currentElapsedTime / totalAnimationDuration, startValue: 1, endValue: 10) And then you do something with the value and call the whole thing in whatever time interval you want.
What are you planning on using cookies for? I would recommend checking out the NSHTTPCookieStorage and NSHTTPCookie class. https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSHTTPCookieStorage_Class/index.html
Looking into SwiftyJSON now, definitely seems to be much simpler. Thank you!
Might not be entirely appropriate but you could use the keychain if you're not storing too much information. I used it for an application to store sensitive information. You can use https://github.com/granoff/Lockbox to simplify accessing and storing data. 
No problem!!
Session handling. Basically I want to use it to store session ID's. 
Swift's error handling model is the same as C/Objective-C: if the function can fail, return an error code or object. Error handling in Cocoa uses NSError to encapsulate the error: https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ErrorHandlingCocoa/ErrorHandling/ErrorHandling.html
Thanks. One last question: When I hold down Ctrl and drag, I can set the name of a button for example, yet clicking on that button won't show me its identifier. Is there a place/field in Xcode that'll show me a component's identifier?
I assume you're talking about creating IBOutlets. If you right click on any interface element in IB you'll be able to see all of its existing outlets, actions, delegates etc
Thanks again. Do you know how I can access IB, please?
I think you can just make another label variable and update it with the selected color.
You can use the NSTimer Class. Check the link below. https://developer.apple.com/Library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/index.html
Thanks I'll look into it, my concern would be the fact that my app is not exactly a 'game' in a traditional sense, but if it will help with the data model then it's worth trying.
Another good suggestion, I have never used keychain but I'll do some Google searching on that.
&gt; "YOU WON'T BELIEVE THE 10 THINGS JAVASCRIPT GOT WRONG" 1. JavaScript didn't name itself 2. Isn't Unit an object? Plus, isn't the idea here that Null is a subtype of every type, so you can have covariant data structures? (Null isn't just a subtype of object) &amp;nbsp;&amp;nbsp;&amp;nbsp;3-5. These aren't disadvantages. Haskell also has them. &amp;nbsp;&amp;nbsp;&amp;nbsp;6\. yup &amp;nbsp;&amp;nbsp;&amp;nbsp;7-10. The author appears to have run out of actual ideas. &gt;There are more things to do in code than drawing things. In fact, the majority of code out there is not drawing things. Yeah. But those things are boring. And you're not my real dad. 
1. I suggest you create another file that contains your subclass of UIScrollView. 2. init:coder is typically used to serialize the object, and it's a required initializer in Swift. 3. Just implement the required initializer: ` class SomeScrollView: UIScrollView {` required init?(coder: NSCoder) { super.init(coder: coder) } }
The Apple docs are a good place to start: https://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/ViewLoadingandUnloading/ViewLoadingandUnloading.html This process hasn't changed just because you're using swift. Basically create your views programmatically in your view controllers loadView method.
This is one article of many, the first my search returned. The big things for me are things like: (Nan == Nan) == false That's a joke. Your language fails if the above happens.
InitWithCoder is called when the view controller is unarchived from a nib. You'll have to implement another initialiser like a generic init or with specific arguments. Then you will want to implement loadView in your viewController. LoadView is where you would put your view creation code, and where you can instantiate you scrollview subclass. See the Apple docs for an overview of the viewController lifecycle. https://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/ViewLoadingandUnloading/ViewLoadingandUnloading.html
As \u\Watabou90 says, just implement the initialiser. If you don't understand something's purpose, look it up. I know it's a little annoying in this case, but you have two ways to go about this: 1. Figure out where that initialiser comes from. Unfortunately, it's a little hard to find, but it's required by the [NSCoding](https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSCoding_Protocol/index.html#//apple_ref/swift/intf/NSCoding) protocol, which UIScrollView implements. 2. The other thing that's a little more concrete is to look for what this [NSCoder](https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSCoder_Class/index.html) thing is that you get as the parameter of the initialiser you're supposed to implement. This type of problem shouldn't be a "SUPER huge issue". If you don't understand something, you just look at the documentation. Long story short, when your view is part of a xib or storyboard, and that storyboard is loaded, your view will be initialised with that method.
Make another outlet for your text field and connect it (e.g. `@IBOutlet var textField: UITextField!`). Then, in `pickSomeColor` you can add `nameLabel.text = "Hello Mr \(textField.text)!"`. I don't know what "add text for each color" is supposed to mean. 
Thank you for your time! Its for training purpose, i want something like "Hello Mr \(name), your choice is blue" for exemple 
Thanks! I Will see!
Well, I'm sure you'll figure that one out :-)
I'm currently learning this myself, though using objective c. Feel free to pm me if you are interested in learning together. If you don't care about using objective c, I still have some programmatic boilerplate that should be helpful
They have an app for that http://simpholders.com
It worked very well !!! thank you !
Thanks ! it worked !!
I wrote a [blog post](https://harlanhaskins.com/2014/03/02/laying-out-ios-uis-in-code.html) a long time ago about exactly this, but I'd warn you: managing UIs programmatically lends to much larger codebases and makes it so much more difficult to iterate design that for me, I've shifted my position 180 degrees. IB and Auto Layout are amazing tools, and you should use them until they stop serving your needs.
Urls need a scheme. Urls aren't just used for websites, i.e. if you have an random application called "foo", you can register the "foo://something" scheme, and when you call the openUrl method with such an url, the foo app will be launched and is able to handle the rest of the url. So the problem with your code is that because the scheme is missing, iOS has no idea what application to open the url with. There may be many different applications that handle urls with different schemes on your iOS device. The only thing you have to add is a "http://" in front of your links, because the http scheme is handled by Safari.
what's it called?
i'm using neither, i'm making a post request to a REST API. i'm not attempting to load a page, i only want to store the cookies(hash) sent in the header on the phone so the user can make further post requests. 
Yeah I actually found that's what I needed to do last night, however, I'm not sure how I'd go about doing it. I'm using the code provided [here](http://jamesonquave.com/blog/making-a-post-request-in-swift/) as a tutorial. I'm getting back a response object and I've tried saving it in a NSHTTPURLResponse variable/constant, but I keep getting errors. What's the best way of turning the Response into the NSHTTPURLResponse so I can use subclass?
You should be able to check if the response is the correct class like this: if response.isKindOfClass(NSHTTPURLResponse) { let httpResponse = response as NSHTTPURLResponse … use the httpResponse … }
Okay, so I'd write: println(httpResponse.allHeaderFields())? 
This line is a bit brutal: `let t1 = reflect(m)[i].1.valueType.self`. (side note: why is there a self at the end?) I'm having troubles grasping the `valueType` part here. The docs say that it is identical to `value.dynamicType`. So you're basically saying, give me the value of the field that you're trying to set, and then get that instance's type, so you can construct it. So, for that to work, the property you're trying to set has to be set to something already, right? If you call the function from the constructor, you may be trying to access the type of something non-existent, which seems scary... on the other hand, you have to initialise it somewhere anyway, otherwise the compiler would complain.... If you post a bit more of your code, I could experiment some, but I can't really try it out like this obviously...
Thank you for sharing this, it's great! And OP, good job to you as well, but this thing takes the cake.
It is totally brutal and made me cry while writing it. Right, I am trying to get the type of that field. It may or may not have a value, yes, but I just need to know what type that field is. But I'm not sure. It's a soft circumvention of the optional type (all my models have implicitly unwrapped properties). It is also unclear to me if `valueType` for nil values because the debugger refuses to show me the type, even when I know the field has a value. I was following this answer (at the bottom): http://stackoverflow.com/questions/26280176/swift-generics-not-preserving-type although it's quite not the same issue, and admittedly, I'm starting to throw lots of darts... I've already tried multiple different ways, and removing or adding .self in either case doesn't seem to make a difference.
allHeaderFields is a variable so you wouldn't need the (). You can access just by httpResponse.allHeaderFields. To get the actual values of the headers, it is always a good thing to know what the object type is going to be. For instance say you want a header value with the key 'myapikey', and say that returns a string. To access that value you would call: let apiKey = httpResponse.allHeaderFields["myapikey"] as String?
The response is already in an NSHTTPURLResponse, not JSON, so you don't need to parse it. Which class / method are you using to make the request?
&gt; managing UIs programmatically lends to much larger codebases Amen. I've just inherited a project that isn't particularly complex, and there are thousands of lines of code dedicated to managing UI that just aren't necessary at all, and I'm finding all sorts of bugs that have crept in because of it.
&gt; I know that Swift doesn't support error handling Huh? Of course it supports error handling. Have you confused error handling with exceptions? Exceptions are not the only way of handling errors.
Upon further investigation, it does appear that since the value is nil it doesn't get the right type. :( I just get out (ExistentialMetatype) Not exactly helpful.
I did some further experimentation, too, and I think I got good news for you. My sample is pretty simple, but I think it solves your problem. In that example, I get the type of the property `foo` using reflection - note that it's an implicitly unwrapped optional that's initialised to nil. However, I'm able to create an instance using a type obtained via reflection. I first get the mirror's valueType, which is of type Optional&lt;A&gt;; then I get the type A with that little helper function, then I instantiate it. Good luck! class A: NSObject { required override init() {} } class B: NSObject { dynamic var foo: A! = nil } func getOptionalGenericType&lt;T&gt;(optional: Optional&lt;T&gt;.Type) -&gt; T.Type { return T.self } let b = B() let fooMirror = reflect(b)[1] let fooType: Optional&lt;A&gt;.Type = fooMirror.1.valueType as Optional&lt;A&gt;.Type let fooUnwrappedType = getOptionalGenericType(fooType) as A.Type let instance = fooUnwrappedType()
http://swiftstub.com - also you can save and collaborate there.
gist.github.com?
Swift frontend and go backend, which did you enjoy working with more?
You have been banned from China.
Ahhhh okay I see. Let me throw this in the playground and I'll see if it works!! I really appreciate the effort. Been going nuts with how to solve this.
It segfaults on that `finalObj` line :( Just in the same fashion my original code did (but the optional thing was indeed needed). I am beginning to think I'm being too ambitious before the language's reflection features are really fleshed out (and I should probably at least inquire about this line of code or submit a bug report). For now, I may just write some sort of method and hard compare it to some types. Not ideal, but it'll work.
you are amazing, thank you so so so much!! 
Show the "Document Outline" (left column inside the XIB editor view). If it's not showing, select "Show Document Outline" from the Editor menu in the main menubar. If you really can't select the UITableView in the document outline and delete it by pressing delete, then create a new XIB file and copy everything except the UITableView into it because there's something really wrong with your file.
this is more than likely the infamous 0,0 bug that happens in XCode. There was a post on here from just a couple of days ago where we were all cursing it cause it was driving us crazy trying to figure out what was happening. For some reason though the author has decided to delete the post. But yeah XCode is setting the size of the table view to 0,0 so it still exists it just has no size therefore you can't see it. Highlight it in the document outline and change its height/width properties and voila its back! One of the guys suggested that the bug only happens when there are no constraints present on the control that keeps disappearing so you can try setting some constraints on your table view and see if that helps. But yeah you're not alone in going crazy trying to figure out why a table view keeps disappearing. We've all wasted a lot of time on this one.
If you're in 6.0+ it could have to do with size classes. Open the left pane that has the list of all subviews and constraints, if the table view node is slightly greyed out it was deleted from a single size class. To solve, click on the table view node and press backspace/del.
Well, I ended up solving it by opening the document outline and deleting it from there - I didn't realize the document outline is not the same as the little object navigator bar (above the Storyboard area). However, I'm still having strange issues with things - for example, I'm trying to place an Activity Indicator above my table view, but when I do, it becomes stuck in the tableview and can't be moved at all.... am I missing something?
This is one of the most common things people get stuck on, and the solution is quite simple. You have always been required to implement that initializer if you subclass a class that implements NSCoding. The problem, however, was that Objective-C had no way to enforce that rule. Swift makes it possible for initializers to be required, so therefore it is. So the solution is basically to implement it ... but if you really don't want or need it to be implemented, you can implement it but just write a fatalError("Not implemented") inside of it. But beware that you can't load if from a .storyboard file then. 
Thanks!
Ok thanks!
The designated intiializer is one more level up, on SKNode.
It's definitely not *written* in python. But, it uses LLDB, which uses python for scripting. Installing pip shouldn't break that; I have pip along with numerous python versions installed and the swift repl runs just fine. Have you messed with the system python framework at /System/Library/Frameworks/Python.framework? Maybe try opening an lldb shell and run the script command?
If you do: strings /usr/bin/swift does it say: swift ? Edit: And do you happen to have python-swiftclient installed?
I use the Yosemite default 2.7 and everything runs fine. I'm gonna chalk it up to macports doing something weird; I've had problems like this with it in the past.
[I was using this link](http://jamesonquave.com/blog/making-a-post-request-in-swift/) to make the post request, and I finally got that working! But now I"m struggling to make a GET request along with the cookie that I got from the POST request. Using the code on that website, would I have to create a new method similar to it that stores the cookie in the header? 
The context you're in at that point is that of ViewController, not an instance of view controller, so you can't refer to instance variables. Should the width and height really be instance variables, or were you trying to create a named constant?
postimg.org?
What about it?
Can you post some code? Specifcally, what's the signature of CGOLView's initializer that takes the width and height. Are they ints, or CGFloats? Your variables are going to be typed Int, and if the destination wants CGFloats (or something different), you need to cast it or give gridWidthValue the appropriate explicit type.
There's just a lot of ways to do something like this and it's not clear which one is right for you. For example, in your current implementation, the width and height are variables, so what should happen when you change them? Should the view be somehow updated as well? Here's a few different ways: 1) Do it in the init init() { gridWidthValue = 50 gridHeightValue = 50 _gameView = CGOGLView(gridWidth: gridWidthValue, gridHeight: gridHeightValue) } 2) Default argument values in an initialiser init(width: Int = 50, height: Int = 50) { gridWidthValue = width gridHeightValue = height _gameView = CGOGLView(gridWidth: width, gridHeight: height) } 3) Top level constants, defined outside of the class/struct let defaultGridWidth = 50 let defaultGridHeight = 50 class ViewController { var gridWidthValue = defaultGridWidth var gridHeightValue = defaultGridHeight let _gameView = CGOGLView(gridWidth: defaultGridWidth, gridHeight: defaultGridWidth) } 4) Static variables on a struct or class variables with a small workaround since class variables don't work currently. In future you'll be able to use “class let defaultGridWidth = 50” or similar to create a class variable without the embedded struct. class ViewController { struct DefaultValues { static let gridWidth = 50 static let gridHeight = 50 } var gridWidthValue = DefaultValues.gridWidth // if you even need these as instance variables anymore var gridHeightValue = DefaultValues.gridHeight let _gameView = CGOGLView(gridWidth: DefaultValues.gridWidth, gridHeight: DefaultValues.gridHeight) } etc. But if you need to keep the instance variables in sync with _gameView then you're going to need didSet or computed properties instead. 
You tell me.
I guess maybe I wasn't particularly clear. You can see from the error message mentioning “ViewController.Type” that it's looking for a class or static variable called gridWidthValue. That's what I mean by being in the context of the ViewController, and not an instance of ViewController. Similar to how you can't access instance variables from a class function, whereas you can from a method. Allowing your code to work would require some set of rules about the initialisation order of instance variables and initialisers, or some dependency analysis to ensure that the width and height are initialised before the CGOLView is initialised.
You are talking about Xcode, the shittiest software ever written by Apple. The problem you describe happened to me. The way to get the table back is to select it from the document outline and go to the ruler tab on the right side. You will notice that Xcode adjusted the size of the table to 0,0 and probably throw the x,y to some coordinate in hell. You have to adjust it back to the size and position you want and apply a constraint to fix that in place. Once you have that constrained it will not go away anymore. 
Whoa - lots to soak in here! The end goal is to allow the user to use the slider to change the values, so naturally, I would want the view to update realtime - is this possible when thinking of the code you posted to help me out? Also, quick note, thanks a ton for following up and for responding with such length and explanation, since I'm new to this, it's helping tons. Cheers.
Okay, so I posted a more detailed question here and got a few answers. I'm working between your answers and thiers. I've used #3 (top level constraints) from your answer and it accepts these variables perfectly. SUPER. Now my end goal, as you can see here: http://stackoverflow.com/questions/27208949/trying-to-switch-a-direct-integer-value-with-a-variable-in-swift ... is to get currentValue in there and to update the view in realtime when using the slider (which changes currentValue), is there any way you might be able to throw me another bone? Thanks again!
Sure. One simple way would be to add a didSet observer to make changes to the view whenever the width or height was changed. struct SynchedVariable { var i: Int = 0 var j: Int = 0 { didSet { i = j } } } var s = SynchedVariable() s.j = 1 s.i //=&gt; 1 which can be combined with any of the above methods for setting initial values. In your case you might update the properties of the CGOLView whenever either of the instance variables are changed. If you need two way synching, where the CGOLView properties might be changed by something else, you would need something more complex. I wouldn't recommend that, though. Honestly, for your example, it seems like the width and height are really properties of CGOLView and not the container. You might want to solely store their values in CGOLView and make a computed property on the ViewController to get and set it from the CGOLView, so it's only stored in one place. I don't know much about your requirements though.
I meant you could use a global constant outside of the class in order to initialise the instance variables within the class to default values. Not to create a global variable outside of the class in order to hold state for the class. Then you would add a didSet observer to the instance variable inside the class, and update the view accordingly.
You've got the "Hello, World!" already working and running? Well now plug in your iPad mini, open Xcode, and run the code on your iPad mini instead of the simulator. 
wow, I did not know anything like this existed! thanks
Or you can just have it call the super class's implementation immediately.
You aren't going to get anywhere without becoming intimately familiar with Apple's developer library. I strongly recommend you follow the *Start Developing iOS Apps Today* tutorial, which takes you through creating outlets and actions. From there, you shouldn't have any problem doing this.
How do you know if the op is referring to iOS?
Considering that Swift can import and call I to Objective C libraries, I would think the answer is no.
Have you read the introductory material in Apple' developer library? They have guides on most of the platform.
Not if you have any properties on the object. Then it would be incomplete. But otherwise yes, then it would be valid.
The big ones in my mind are: * catch exceptions * create or invoke C function pointers * interoperate with C++ To be clear: Swift probably won't be getting exceptions (it will probably get something else to handle similar use cases). C function pointers is probably coming. Interoperability with C++ is an unknown – don't hold your breath on this. More here: https://github.com/ksm/SwiftInFlux
Yes, you need to cast all conversions in Swift (remember: M_PI is a Double so it needs to be cast but all your other numbers will be inferred as the correct types).
[Message passing](http://www.buckleyisms.com/home/2014/6/16/the-case-for-message-passing-in-swift.html)
These are pretty esoteric rough edges, but... Importing C unions is the single biggest missing feature I've run into. It basically makes large portions of ~~vDSP~~ vecLib and the entire GLKMath library inaccessible from inside Swift. Related to that, the second biggest missing piece so far would be getting swiftc to use SSE/AVX/NEON extensions. After staring at ASM dumps for a about a week I had to concede that I have no idea how to get it to spit out SIMD ASM for packed vector operations. It's entirely likely that I'm not doing something right (missing compiler flags?), but given that I got it to generate SSE code (that executed single element math) my guess is that somewhere between the conversion into Swift IL and then into LLVM IR it's preventing LLVM from being able to apply SIMD optimizations. From what I can find, Swift's enum types don't have any native support for bit mask type functionality. Wouldn't be an issue except for the fact that its used in a number of places in various frameworks, and having to do .rawValue and a typecast to an Int every time you need to operate on something is a bit of a drag. I've seen people declare struct's of Int's with constant values and use them instead of the Enum type because they're syntactically easier to work with. This probably won't be an issue in the long run, though, as various frameworks transition away from using bit masks. I guess it's worth mentioning that all of the various frameworks that define constant values as a char[4] are somewhat painful to examine in Swift without manually converting the 32-bit integer value into to a 4 character Swift string. It's not strictly a "missing" feature, but from Swift 1.0 -&gt; 1.1 there were a number of changes that rendered code compile-time incompatible between releases. Given how closely tied iOS releases and Xcode builds are, this makes me nervous for code bases that have to be backwards compatible with older releases. The traditional C way of dealing with this would involve #ifdef's and various define's, but that runs entirely counter to a lot of the design ideas of Swift. It would, at least, be nice if the compiler exported a Swift version number as a define automatically - having to create a new build target for each version of Swift you intend to support is not a scalable solution. And while it can be done, packing buffers for GPU upload is significantly easier in C/Obj-C than it is in Swift. Doing it in Swift does *not* give me warm and fuzzy feelings. But like i said... those are pretty esoteric. For the most part it's been an extremely capable language that behaves exactly how I want it to. Just many of the lower-level frameworks do have rough edges that haven't been addressed yet.
If you are doing anything with Core Graphics you will have to cast CGFloat. I think it wasn't necessary at some point in the betas, but I might be wrong.
thanks alot and i am working with ios
I'm not a complete Newbie. I've coded in Java, HTML, and CSS before, so I have a decent amount of coding experience. Anyway, yes, I have my "Hello, World!" .swift program up, but not running on my mac. I can make it run through a playground if that helps... Also, I plugged my iPad mini in, and I was told it was an "Ineligible device" I restarted both my iPad and my Mac, but my iPad mini is still "Ineligible" I'm not sure how to make it eligible? (**Edit:** I just updated to Xcode 1.6.1. Still not resolved. **Edit #2:** This is what I'm seeing: http://tinypic.com/m/igdy6u/1 ) Again, thank you for the help you're giving me. I'm excited to finally be getting into mobile development. :) @gilgoomesh: Thank you for the heads up! 
haha,very good advice, taken seriously, anybody would be resilient, as learning to code is an easy task which rarely is rarely quit. In all seriousness, I think the 'nand to tetris' course actually tries to walk this kind of path.
Haven't checked if it's been implemented yet but missing #ifdef means there's no straightforward way to have debug-only code that doesn't get compiled into the final product. You can have different files included through project settings but that gets cumbersome. Having inline compile-time directives would be handy for those situations.
NotSockPuppet raises a good point. Learning Swift the language is easy. Just read the free iBook from Apple on Swift and that will get you up to speed quick on the Swift language. Where you're going to struggle is learning the in's and outs of the IDE and also learning the Cocoa framework. To learn XCode I would suggest going thru a beginner video series - there are plenty out there and don't shy away cause they cater to beginners cause surprise - you are a beginner. I've got 20 years experience covering .Net/MFC/VB and I still went thru those beginner courses and they were extremely helpful in learning XCode and helping to obtain an iOS mindset and way of thinking. Also [this is a very good book](http://shop.oreilly.com/product/0636920034285.do) that covers the Cocoa framework.
Swift still feels undirected. Almost any non-trivial program runs into strange language limitations that have people learning Objective-C. For example, I've been trying to write a function for days to pass-through errors. That is, call "midpoint~(1, 3)" where midpoint is "func midpoint (#low: Int, #high: Int) -&gt; Float" and "~" is my overloaded function taking function and tuple. The intent is to call midpoint iff neither argument is nil and otherwise return nil. As far as I've been able to determine, it is not possible in Swift. I can write a function for the specific midpoint function. I can write separate generics for unnamed tuples of different lengths. I cannot write generics that accept a named tuple and let me at the values. Why? Named tuples are half-baked; tuples lack accessors and constructors, and so on. Others would point to other issues in Swift, but the core lack is direction. Swift really needs a "Swift Birdsong" laying out the design overview. It might include "Data should be typed and initialized" and "Careful code can be high performance", or even "Swift is Apple's language for use in Xcode to make IOS and OS/X applications." The lack of explicit design tradeoffs is what allows all the language features: generics, protocols, closures, etc. to end up with a lack of direction or coherence. 
First, some background. ⌘-Clicking a symbol in your source code, whether in Objective-C or Swift, takes you to the symbol's definition (in the case of UITableViewDataSource, it displays the UITableView file in the UIKit framework. This is likely so that you can copy-paste the func's required by the UITableViewDataSource protocol. Are you able to build your project (⌘B), after adding the following code to your FirstViewController? func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return 0 } func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { return UITableViewCell() } 
Yes, actually! I tried that before and I must've done it wrong, because it didn't work. **That should allow me to continue the tutorial though!** So, if I understand right, the fact that I can't command-click that symbol doesn't matter too much, because I can add the methods that I need directly into the controller? If that's the case, would you happen to know what's causing me to not be able to command-click on the symbol? Can you explain what a symbol is? From what I understand, the UIKit is just all of the elements of apple's iphone interface, and UITableView is just a sub-element of that, and they're referred to as symbols?
Turns out it was something buggy with Xcode, this answer fixed all of my autocomplete issues: http://stackoverflow.com/questions/25133039/xcode-6-isnt-autocompleting-in-swift
iOS 8 introduced the concept of Size Classes for each device. iPads are considered regular width and height in either landscape or portrait. iPhone 6 Pluses are considered regular height and compact width in portrait, and vice versa in landscape. iPhone 6es and below are compact height and width in both orientations. So I'd consider the 6 plus closer to the iPad UI than the iPhone UI.
Thanks for the comment. However, this doesn't really answer my question. I'm looking to design a UI for a simple app I'm making and want the fundamentals set before I start designing. Since I can't wait any longer I will design the first part of the UI for the iPhone 6+ and going with my best guess for the canvas size; 1242 x 2208
So i saw your original post. I use sketch. What i am doing now a days is I use 5 size. In xcode make it flexible enough to support till iphone 6. And I make the ipad design and make it flexible enough to fit iPhone 6+. I can totally skip the 2nd part and make the iphone 5 size compatible in 6+ as well based on my requirements. Xcode is very flexible to manage the screen sizes easily. Is there anything very specific you want to know?
Hey, thanks a lot. Well, I'm thinking of starting with an iPhone 6 + size since that's the phone I ordered. Then scaling them down? I guess that would make some sense. Also, for the iPhone 6+ I'm guessing the screen size I should work with in sketch is 1242 x 2208?
https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOS/ It's still written with Objective-C, but it shouldn't be too difficult to transfer the content if you understand what you're doing.
Hi,Please change the code below if (representedElementKind != nil) { if (representedElementKind != UICollectionElementKindSectionHeader) { updatedAttributesInRect.append(attribute) } } to if (representedElementKind == nil) { updatedAttributesInRect.append(attribute) } It should be work.nil when representedElementCategory is UICollectionElementCategoryCell
There is no roadmap for when any new features will be in Swift. There are no class variables in Objective-C either. There never were – for more than 30 years. I'm not sure I understand your desperation.
Ya that should be fine. But as part of design rule we always start with smaller screen design and then grow. 
I've recently done something similar with a WKWebView. You can inject your own JavaScript so it'd be fairly easy to link to an external stylesheet or change the source of the already existing one.
I don't think this belongs here as it has everything to do with the iOS SDK. Maybe try /r/iOSprogramming ?
Thanks mate
This is not related to Swift and should probably be asked on /r/iOSprogramming ;)
Swift does support #ifdef like build configurations. See: http://stackoverflow.com/questions/24003291/ifdef-replacement-in-swift-language
Give an example where you need class variables? Not saying that you shouldn't use them, but it's pretty much always possible to rewrite that stuff without static variables... I'm just interested in the problem you're trying to solve, maybe I can give some ideas?
Hm. I guess if I were to write this, I'd just make that `categoryBitmask` an instance variable, and pass it in with the initialiser. That way, you also don't have to put the class var in some arbitrary place - in your code, is there a good reason why the categoryBitmask constant is in `SomeNode` - couldn't it be in `OtherNodeThatCollidesWithSomeNode` as well? If you pass the bit mask to the initialiser, you can just have the class that creates the nodes decide which nodes should collide (it could have some constants for the different bit masks used). Seems like a reasonable idea to me, but maybe I miss something. About the procedurally created objects, that sounds like a good use case for a factory object. Eg. you have a `FooFactory` class with properties for max/min speed/size, that has a method `generateFoo` or something, and constructs a concrete `Foo` instance with some speed/size in the correct range. This should give you quite a bit of flexibility again, since you can have different factories with different parameters. All of this stuff requires that you pass a lot of information to the object's initialisers, and give the creator of an object a lot of responsibility. This is basically the idea of [dependency injection](http://en.wikipedia.org/wiki/Dependency_injection), which is a good software development practice.
&gt; couldn't it be in OtherNodeThatCollidesWithSomeNode as well? Well, it's possible, but I don't really like it. I want to keep it quite strictly object oriented since the whole SpriteKit is OO. But I also think it will become a problem later when the number of places where I need to access the variable will increase. &gt; About the procedurally created objects, that sounds like a good use case for a factory object. That is a good idea, I should probably do that. Thanks! &gt; ... dependency injection ... I sort of already use this idea. In contrary to my example, all custom nodes actually subclass a general node which will get all of its data injected trough its initializer. The subclasses' responsibility in the initializer is to provide and inject the data to the general superclass. This example got a bit complicated now, hehe. Thanks for the help! But I still want class variables :)
&gt; Well, it's possible, but I don't really like it. I think I failed to get that point across. My point isn't that you should put the bit mask it there, but that the choice of where to put the bit mask is kinda arbitrary and that it would make sense to move the bit mask definitions "up a level" (i.e. to the class(es) creating the nodes). About work arounds: have you seen [this one](https://gist.github.com/brentdax/97a79e96b57db871ee62)? I quite like it since it's a pure implementation detail. You can use the class just as if there was a class variable. When Apple introduces class variables at some point, you only need to change the implementation of the class, but nothing else.
Okay, I think got it now. That's a great workaround. Another one I've considered is to simply use a computed variable, since I never intend to change most of the values I'm thinking of: var number: Int { return 13 } Probably not performant, but not that important for most cases.
Cool! Thanks for that. Glad to see they put it in.
is there any reason why you can't use structs? You could do something like: struct BitMasks { static let SomeNode = 0x00000001 static let OtherNode = 0x00000011 static let AnotherNode = 0x00000101 } class SomeNode: SKNode { override init() { super.init() self.physicsbody = SKPhysicsbody(/**/) self.physicsbody.categoryBitmask = BitMasks.SomeNode } } and if you ever needed categories you could nest your structs i.e. struct BitMasks { struct Category1 { static let SomeNode = 0x00000001 static let OtherNode = 0x00000011 static let AnotherNode = 0x00000101 } struct Category2 { static let SomeNode = 0x00000001 static let OtherNode = 0x00000011 static let AnotherNode = 0x00000101 } } 
It is very possible to do so. However, structurally it doesn't make much sence to me. A specific node should know its own type, it shouldn't have to ask the BitMasks stuct about it. And although I am very grateful for your help on workarounds, the question is when class variables are coming. Class variables do serve a very important part in OOP, so I'm just curious to *when* they are coming out so I don't have to work around stuff any more.
Very interesting post, didn't give this any thought before, I'll definitely be playing around with this!
You implement `func pickerView(_ pickerView: UIPickerView, titleForRow row: Int) -&gt; ()`, which will never be called because it's not a method in the `UIPickerViewDelegate` protocol. It should also be a compiler error, since you return a string in a method that has a void return type. You need to be careful and implement the methods from the protocol, not something that looks similar ;-) Also, pay attention to errors and warnings. You actually need to implement `func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -&gt; String!`.
I see! Thanks so much helped a bunch!
...why would you want to do this? Edit: to answer your question, I do not believe it is possible. I do not believe the software can tell the battery anything. It can only read information from the battery. 
No, there is no API and there is no software interface here; charging is controlled by hardware. Also... why?
&gt; Importing C unions is the single biggest missing feature I've run into. It basically makes large portions of vDSP and the entire GLKMath library inaccessible from inside Swift. Can't you use the Accelerate for this? https://github.com/mattt/Surge works well. **Edit** Well it doesn't address C unions, but vDSP etc. can be handled by Accelerate.
See my original post, I've explained better why I'd like to do this.
Why: See my original post, I've explained better why I'd like to do this.
You should probably read up on batteries here: http://support.apple.com/en-gb/HT204054 There is an approximate cycle amount for lifetime of batteries, ultimately it won't really matter how you charge it in the long run, that'll only make marginal differences. Also, no there isn't an application level API. It's controlled by the hardware.
I encourage some critical thought here. If you keep the charge lower, you're also reducing the amount of useful capacity of the battery - meaning that you actually *increase* the number of times that your battery is charged. Essentially, you're robbing Peter to pay Paul. In other words, a fully charged battery may last 10 hours, so you recharge once a day. A battery kept around 50 that charges up from 25 and begins discharging at 75, will need to be "charged" twice per day. There is a very good reason that no company includes a huge battery to only use part of it in hopes of having a computer last a few hundred charge cycles longer. 
Modern laptops have charge controllers which take care of this, essentially by occasionally drawing power from the battery even when the laptop is plugged in. Unfortunately I can't find an official source (though omfgtim_'s looks good), so here is some evidence which you may find more or less convincing: 1) Stack Overflow posts [indicate](http://apple.stackexchange.com/questions/12271/should-i-disconnect-my-macbook-pros-power-cord-when-the-battery-is-fully-charge) that Apple *used to* recommend unplugging the battery from power periodically, but if you now visit the [Apple link provided](http://www.apple.com/batteries/maximizing-performance/) you will see that it doesn't say anything about unplugging / not charging. 2) I notice that my laptop occasionally switches from "charged" to "charging", when when plugged in and relatively idle. Battery percentage around this time is consistent with the stuff in the document omfgtim_ linked to. 3) I'm typing this from a 4-year-old MacBook Pro which is plugged in about 95% of the time but which is currently unplugged and giving me 5 hours of battery life on WiFi, which is pretty damn impressive for such an old battery. Edit: sorry for the stereotypical Stack Overflow style answer (explaining why you wouldn't want to do something rather than explaining how to do it). I don't think it's reasonably possible. 
Whoops - I was thinking of vecLib, not vDSP. You're right, though - vDSP is imported by Accelerate.
If you're getting a crash while running, it's probably because myView is never set. You may have it as an @IBOutlet, but is it actually connected to something in a XIB or storyboard?
I am getting an error at runtime. It is not connected to anything, unless constraints count as being connected and i do have it as an outlet. 
So when tried myView.hidden = true, in a new program without it being in a new view controller it works, but when i run it in with the second view controller i get fatal error: unexpectedly found nil while unwrapping an Optional value (lldb) 
So your outlet is connected? When you click on the view in IB and go to the far right tab of the right toolbar, it shows that there is an outlet from that view to your code? Where exactly did you put myView.hidden = true?
Never give up.
I have 2 view controllers in the storyboard and it does not work when it is in the second one. I think i need a segue method. It is in the didLoad method. 
Is it in viewDidLoad of the second view controller?
First thing: Swift is a great language to start, but since it is a new language there are not many documents and tutorials on it. I'd suggest downloading the free Swift ebook by apple from the iBooks store. I believe it is written in a way that's very readable even for newbies. Second: Don't give up. Coding involves learning to think in algorithms which isn't easy. You are going to learn a lot along the way. BUT anyone can do it. It is just a skill like any other. If you put effort into it and keep an open mind you can become a decent programmer in less than a year. Third: Good luck and have fun! Ps.: If you wish I can look for some free material later. But I am on mobile now and I need to sleep! :)
i figured it out I just needed to remake the view controller2 thanks for the help
You can't set an IBOutlet for a view in another view controller. Just simply writing @IBOutlet and naming it the same variable as in the 1st view controller doesn't make it connected. You'll have to set the 2nd view controller's .myView manually in code, perhaps when the segue is being performed or using viewWithTag: etc. Hope that makes sense!
Okay, what happens if someone calls that method, passing in the type returned by CommandVital as a type parameter? Then (assuming that all the CommandX methods return different types) what you get essentially behaves as: class func fromSFSObject (o : SFSObject) -&gt; CommandVitalType { ... } And then, you end up trying to return CommandError, CommandPlaySkill, CommandPlayerWon, or Command from a method that's supposed to return an object only of the type CommandVital or one of its descendants. This should be invalid in any language that supports generics, and you should have Command as your return type, without passing in a type parameter. You shouldn't be using generics in this case. If you need to run code dependent on the type returned, then do a type check on the object returned by the method.
Number of cycles isn't actually = number of charges. A full cycle is when the battery has been depleted by 100%, not necessarily consecutively. &gt;A charge cycle means using all of the battery’s power, but that doesn’t necessarily mean a single charge. For instance, you could use your notebook for an hour or more one day, using half its charge, and then recharge it fully. If you did the same thing the next day, it would count as one charge cycle, not two, so it may take several days to complete a cycle. So keeping a battery at 50%, or keeping it near 100% won't actually make any difference at all, this app (if possible to create) wouldn't achieve anything.
When I'm making my prototype cells, would I drag in a single label and then program the sections and rows around that single label or do I need to make two labels in storyboard for each section? I'm confused about how I set up the data arrays for the different sections. I originally thought I should have one array for one section of data and another array for a second section of data but I can only return a single cell in the cellForRowAtIndexPath. I know I'm missing something very basic here.
I was able to get somewhere closer to what I wanted. I started with a fresh project and I seem to be able to produce two sections each with a row with the same text. Now I'll have to think about how to program it so each section with have different headers and each section has it own set of data. override func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int { return 2 } override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return 1 } override func tableView(tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "Test" } override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { let cell = tableView.dequeueReusableCellWithIdentifier("LanguageSelect") as UITableViewCell return cell }
The cycle count is an approximation of battery age. Battery aging (i.e. oxidation, gas evolution, etc) happens as a result of receiving current. A battery doesn't care how many full vs. non-full cycles there are; the cycle count is maintained by the power controller as an approximation only. Yes a full cycle provides more wear, but it's not as though charging in the middle has zero effect. A non-full charging cycle might not roll the cycle count, but it certainly ages the battery. OPs proposal is not going to make your battery last forever. 
Try using IOPowerSources to read data from the battery. Once it gets to 75% have a popup tell the user to unplug? You can't directly tell the battery to stop charging, so this is the best I can come up with. I feel that your reasoning is incorrect as to why you would want to do this, but it's ultimately your decision. 
Ah yes, I see. Misread. 
Additionally: "The Current State of Swift Development" with iOS Author, Carl Brown: https://www.youtube.com/watch?v=dxFSNqUhKeI&amp;list=PL4PT8J7BPxK0apanH6_iT7IP_ajhtaE_M&amp;index=2 "The Current State of Swift Development" with iOS Author, Randy Scovil: https://www.youtube.com/watch?v=LJPGI1GzhN4&amp;list=PL4PT8J7BPxK0apanH6_iT7IP_ajhtaE_M&amp;index=1
I did this in Objective-C a while ago (for a personal project that never got released). I basically allowed for typing the Markdown in real time and formatting the document as I typed (a little like how [Mou](http://25.io/mou/) works, but with only one pane). *This wasn't easy*. Start out by learning Swift. The Apple book is pretty good (also see the wiki and FAQ for this subreddit for more places to learn). It will take a while to learn enough to be able to build a Markdown editor, so build other stuff on the way. Once you're confident in your abilities (and be warned, this will take a while) you'll want to start looking at the process of parsing Markdown and use the Cocoa Text APIs to create the editor with all the formatting that you want.
The closest I've found so far is reporting the AppKit version, which would at least correlate (weakly) with the swift version. #!/usr/bin/env swift import AppKit let version = NSAppKitVersionNumber println("AppKit \(version)")
That is a brilliant way to start coding. You are much more likely to succeed if there is something YOU want the computer to do for you. I suggest you begin by getting to know the simple aspects of the language such as basic syntax including variables, loops, functions, and so on. This is easier to do by using XCode's playground feature. Good luck!
It's mentioned a few times in these comments but it doesn't hurt to reiterate: don't give up! Perseverance and persistence is everything. Learn to be resourceful. Even with a new language like Swift, chances are that any problem you may encounter has been solved by someone else and been documented somewhere online. Google your issues, errors, questions, and scour StackOverflow, developer.apple.com, RayWenderlich, etc. tirelessly until you figure it out. Last but not least, it's important to remember that people are your #1 most valuable resource. People write Stack Overflow posts. People write the Apple Docs. People write tutorials. People in this industry are friendly, willing, and ready to give advice. You just have to ask. There is no shame in asking, only in being afraid to ask. Speaking of people, Reddit has lots. Browse these threads and don't be afraid to chime in. Don't be afraid of sounding stupid. Worst case scenario: you're wrong and someone corrects you, and you learn something. Good luck!!
I now have something that interests me! I have been able to input the same set of data into both lists (the Strings "First" "Second" &amp; "Third") when I implement: override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) { if let cell = tableView.cellForRowAtIndexPath(indexPath) { if indexPath.path println("\(indexPath)") } } This returns: &gt; &lt;NSIndexPath: 0xc000000000000016&gt; {length = 2, path = 0 - 0} &gt; &lt;NSIndexPath: 0xc000000000008016&gt; {length = 2, path = 0 - 1} &gt; &lt;NSIndexPath: 0xc000000000010016&gt; {length = 2, path = 0 - 2} &gt; &lt;NSIndexPath: 0xc000000000000056&gt; {length = 2, path = 1 - 0} &gt; &lt;NSIndexPath: 0xc000000000008056&gt; {length = 2, path = 1 - 1} &gt; &lt;NSIndexPath: 0xc000000000010056&gt; {length = 2, path = 1 - 2} When programming each button in each section, how do I let the method know I'm producing code for path 0-2 vs 1-2 ? edit: Formatting
Sweet, thanks!
You should get Sketch. It's way better than Photoshop, at least for developers.
You have a mistake in line 32. You set the direction of the up gesture recogniser to down.
Yosemite has been the worst OS X release since I first started using Macs in 2007. Not only the OS itself is plagued with lots of show stopper bugs, but its accompanying software are also very buggy. Not to mention that the Photos app is still missing and not released! Yosemite to OS X is worse than what Vista was to Windows.
No, he means a new Photo app which will replace iPhoto
The Photos app used to be features in apple.com/osx. Now they have even removed it from there. But it was announced when Apple unveiled Yosemite. See here for example: http://www.imore.com/photos-os-x-yosemite-explained
Are you kidding? I love Yosemite. I've been using it since the early betas and while the first few betas crashed regularly (which wasn't entirely unexpected) I haven't had problems since the late betas. I love the text message / phone call support and the other continuity features as well as the refreshing new look. Couldn't go back to Mavericks.
Is there a killfile for redditors? Jaysus...
I have that exact same issue! I've been looking (albeit not very hard) for a solution for it, but it doesn't seem to happen to a ton of people (or a ton of people don't gripe about it). Was also having wifi issues, but that was fixed with 10.10.1
I'm on Xcode 6.2 beta. Hate to break it to you guys but still the SourceKit crashes occurs but not as much as it used to. [This guy](https://twitter.com/_ryannystrom/status/539991018012016640) seem to run in to the same problem in Xcode 6.1.1 too. 
is the bug when xcode is in fullscreen state and wanna run the project, it gets confused and close the IDE fixed? That is really annoying.
Nope, just checked.
thanks, hope they give the fix as a xmas present
It's not fixed in 6.2-Beta yet either. I've just got used to clicking in the very bottom right corner of the button because it works fine there,
Don't forget to never give up.
Gonna use now cmd+r to run the projects. I just think this is an awful bug, specially when you're testing at speed of light and making quick changes and suddenly XCode is closed.
I hate to be blunt about it but this article is just bad advice. First lets understand the purpose of an enum. Enums are used as a way to provide meaningful labels to a group of related arbitrary values. Now lets look at UserInfo from the article: enum UserInfo { case Email (EmailAddress) case Facebook (FacebookAccount) case EmailAndFacebook (EmailAddress, FacebookAccount) } Ask yourself this - would UserInfo be better represented as a class or an enum? The name itself "UserInfo" lets you know that this is a model and it should be represented as a struct or class. Enums are not meant to be used as an alternative to structs and classes to create a model. Using associated values with an enum simply allows you to attach a piece of related data to the label. Associated values are not meant to transform an enum into a struct or class. Just because you can do something doesn't mean you should. //should Colors be an enum, class or struct - clearly enum fits here enum Colors { case Red(0x00010110) case Blue(0x00010100) case Green(0x00010110) } Secondly, you should not enforce business rules by using specific programming constructs. Why? Because business rules change and if they do you shouldn't have to un-necessarily refactor your code. For instance, what if the business rules were to change and it was ok for both properties to be empty. The whole enum approach is now extreme overkill. Not only is it overkill but again it highlights how enums are being totally mis-used from their intended purpose. What if requirements determine that a 3rd piece of information must be present and let's say that this 3rd piece of data is a property on an AppConfiguration class? How would that fit into the enum solution? The business rule of "email or facebook acct must be present" (and any future business rules) can be easily enforced via a validation routine. //where true is valid and false is invalid func validateUserInfo(user : UserInfo) -&gt; Bool { return !(user.email.isEmpty &amp;&amp; user.facebookAccount.isEmpty) } If any new requirements were to come along you simply add that logic to validateUserInfo(). Moral of the story is simply this - Don't do data validation via type selection but thru logic. Look at it this way, by doing data validation thru type selection you are literally doing data validation against the programmer and not the input gathered by the app.
I agree. I read the BigNerdRanch book and it's extremely easy to follow up for an experienced developer, I guess it also should be for a newbie. I've also migrated several examples from Obj-C to Swift and it's been relatively easy too. Although some topics in Swift require different guidelines (like error management, optionals/nils, functions/blocks), the typical result is that Swift code requires less lines to achieve the same result.
Thanks for your constructive criticism. What you said makes sense and is probably produces safer future proof code 
I like the enum approach for enforcing invariants that other parts of the code rely on. As for business rules, it can be a matter of assurance vs flexibility. Maybe it is business critical that some properties always hold - it makes sense to enforce these at the type level. 
thanks....great :)
I would say, do it in AVC. This is the controller responsible for the editing of the data, so it should be responsible also for creating a new record. It could also be done the other way, of course, and I would not consider it incorrect, but I would say it would require an unnecessary passing of data back.
Swift does not have it's own observation paradigm. You can inherit from NSObject and still use KVO, but Swift does not have a similar mechanism.
first, you don't want the convenience flag if it should be required. so I would change it to something like this: override init(frame: CGRect, dialStrings: [String]) { super.init(nibName: nil, bundle: nil) // ... the rest of the code } and if you don't want it to be required, I would add this: convenience init() { self.init(frame: CGRectZero, dialStrings: []) } 
I have used Tesseract for recognizing text in objc. I guess it would work fine with a swift project too. * https://github.com/gali8/Tesseract-OCR-iOS
It's pretty easy to sort your data source array with `.sort` or `.sorted` in swift. Don't be afraid of it! Even in a more complex case - I created a struct to hold contacts organized by beginning letter - the sorting code is just this: `self.contacts.sort { $0.letter.localizedCaseInsensitiveCompare($1.letter) == NSComparisonResult.OrderedAscending }`
First thing I looked for, but couldn't find one...
The form fields on the web page ultimately are submitted to the server via a GET or a POST when the user submits the form. All you need to do is watch what it does via browser developer tools, or a proxy, and then generate a similar HTTP request from your app. So when the user taps your GO button (or whatever) you read in the text fields, set them as parameters on your URL Connection object and then run it and process the response. I don't know enough swift to provide any more details. 
&gt; then generate a similar HTTP request And hope the site doesn't use any sort of CSRF protection.
Could somebody provide code examples?
You could try www.weheartswift.com/swift-programming-scratch-100-exercises/ 
You have to write if bundle != nil { // do some stuff }
Very cool. Great for showing how simple and awesome Swift is to my Windows buddies.
Hi everybody! I thought I'd share this here in case anyone is interested in it. While reading through The Swift Programming Language, I took notes on *everything* that was surprising, not immediately obvious, or that I simply had additional thoughts on. I turned them into "A Swift Summary" on GitHub, and hopefully you'll learn something new from it—I know I did!
I can't call `override init(frame, dialStrings)` since that initializer doesn't exist in the super class
Thanks for your answer. Regarding code reusability and separation of concerns I think it's easiest to have the table view controller handle the addition, so you would easily be able to exchange the add view controller since its only task would be to return specific data.
you're quite right. what is your problem anyway?
Apple have been progressively auditing Cocoa APIs to determine which methods could potentially return nil and which never can and so shouldn't be optional. mainBundle can't return nil so it has been marked non-optional. You no longer need to check to see if it's nil (and you can't since it doesn't return an optional).
The stringFromNumber method on NSNumberFormatter is declared like this: func stringFromNumber(number: NSNumber) -&gt; String? note the ? at the end – the method returns an *optional* String. You need to unwrap this optional to get the String inside. This line: price = "$"+nf.stringFromNumber(priceFloat!) should be: if let priceFloatString = nf.stringFromNumber(priceFloat!) { price = "$" + priceFloatString } I suppose it doesn't really matter but if you further rearrange things a little, you don't need to test priceFloat != nil and then also force-unwrap priceFloat when you pass it to stringFromNumber. e.g.: var nf: NSNumberFormatter = NSNumberFormatter() nf.maximumFractionDigits = 2 if let priceFloat = result["collectionPrice"] as? Float { if let priceFloatString = nf.stringFromNumber(priceFloat) { price = "$" + priceFloatString } } 
Actually another thought occurs about your code... If (result["collectionPrice"] as? Float) *is* nil, then price will be left as nil and your program will abort when you force-unwrap price on the newAlbum line. This is the purpose of optionals: to force you to pay attention. Of course, it doesn't really work when you use the "!" (force-unwrap) operator. You should be *very* cautious when using force-unwrap and only use it when you're certain there's no path through your program where the value could possibly be nil.
The window will be immediately deallocated at the end of the 'openTheWindow' method. Try using an instance variable to hold a reference to the window. 
Used to be in the sidebar - not sure why it was removed?
Same thing is true with the Album's name. And one more thing: If `thumbnailURL` and the other urls actually are optional (i.e. not required), then make them an optional in your Album class. This is exactly what optionals are for. You use the empty string when there's no URL (`result["artworkUrl60"] as? String ?? ""`), but using optionals is just a better solution.
I have just started messing around with sprite kit and I know they have the touchesBegan and touchesEnded event handlers. Maybe when something is touched you can register some or set an instance variable or global variable with the current touchesBegan position and state and then when touchesEnded happens you can handle whatever click information it is you want. 
would anyone please be kind enough to direct me to some literature that best explains optional and force unwrapping? 
Thank you for the help!
I'm not quite ready to delve into SceneKit yet but this looks incredibly helpful and I'll be bookmarking. Thank you!
im getting the same kind of errors with this code import UIKit class DetailsViewController: UIViewController { @IBOutlet weak var albumCover: UIImageView! var album: Album? @IBOutlet weak var titleLabel: UILabel! required init(coder aDecoder: NSCoder) { super.init(coder:aDecoder) } override func viewDidLoad() { super.viewDidLoad() // Do view setup here. titleLabel.text = self.album?.title albumCover.image = UIImage(data: NSData(contentsOfURL: NSURL(String: self.album!.largeImageURL))) } } Incorrect argument label in call (have 'String:', expected 'fileURLWithPath:') Value of optional type 'NSURL?' not unwrapped; did you mean to use '!' or '?'? Value of optional type 'NSData?' not unwrapped; did you mean to use '!' or '?'? 
Sure, just make a bridging header for it. Remember, Objective-C is C + stuff. Read the book Apple published on interacting between Swift and Objective-C. Furthermore, you can see a short example of what some of the code will look like when doing this here: http://stackoverflow.com/questions/24004732/how-to-call-c-from-swift?rq=1
Thanks. I was obviously over thinking it because looking at the code now it's a really "well duh" moment. I take let mwc: testWindow! = testWindow(windowNibName: "testWindow") change it to let mwc = testWindow(windowNibName: "testWindow") and move it out of the openTheWindow method and it all works as expected.
This is great, I would like to see an example. 
Been looking for tute like this for a little while, thanks! Part 1-3 are great! Nice work! I'm really excited for the rest of the series! :)
it the center sprite is a square why do you want to make a hole? just make an animation that advances as the user digs. Every frame of the animation represents a hole, deeper and deeper and make that animation the texture of the sprite.
You still don't seem to understand what optionals are and how to unwrap them. If you need an NSURL, you can't use an NSURL? without unwrapping. You need to know the difference between these – and how to unwrap or wrap one to get to the other – if you're going to use Swift. It's possibly the most important part of the language. You need to read The Swift Programming Language Basics and learn what optionals are and how to use them: https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html
it's not really a "hole", it just that at the point where the user press, it must have nothing. idk if u understand. do you know "where's my water"? if not, look at that [video](https://www.youtube.com/watch?v=eBESgaxs4E0). When the user clicks in the sand, it disappears, and the water can go through it like if there was nothing. I want to reproduce the exact same thing
do you have any relevant code? do you understand the basics of the framework? Seems to me you need to locate the point of contact in touchesBegan: , then add your "digging" logic. As for "going through" the square, set the bit masks of the nodes to not collide with each other. 
how do i had that "digging" logic?
I would implement a grid system for the dirt, n by n ground nodes. Then when the user touches the screen, we see which node was touched, and remove that node from our view. 
Thanks - I was happy to pay $49 for it but purchased it tonight for $29 thanks to your link.
if I make them cover bigger surface, it will be less precise. I think I will make a UIBezierPath for the square, put all the points in a NSMutableArray and when the user touches the screen, it will redraw the path with a hole in it
It's kind of odd that csvCells[1] is the first line from your file, as arrays are 0 based (think "how far from the beginning" not the index of the array, it helps) and so the first line should be csvCells[0]. So barring figuring out why that is happening, have you considered just doing csvCells[1][0]?
Yeah, I was puzzled by that as well [0] was returned as blank, for some reason. I believe I tried csvCell[0][1], but I feel like it threw an error at me. I'm not at my computer at the moment, but I'll give it another go next time I have access to it. 
There is an important issue to address right off. You do not have a "two dimensional array." What you have is an array of arrays. It's not one array with two dimensions. And most importantly, it's not a table. Your first element in the array csvCells will point to another array. That array may be empty. Then the second entry, [1], points to an array with content. So, even though csvCells[0][1] throws an error (probably index out of bounds or similar) that doesn't mean csvCells[1][0] will. Next, a CSV may have empty row or rows with fewer or greater entries than the other rows, because, frankly, there is no standard for CSV. It's just a hodge podge of a file format and nothing to help nail down what it will contain (as opposed to something like an XML document with validation tools available.) So you might have an array of arrays that when viewed as a full component looks something like... [ [], ["header", "header2", "header3"], ["value", "value2"] ] That's four total arrays, 3 of which are "contained" in the fourth (or first, however you wish to look at it.) Anyway, the next important thing to note is that I just realized why your first array is empty... it's because you put it in there when you created the outer array! You haven't specified a type when you did var csvCells = [[]] What you did there was create a new array containing one new array and assign it to csvCells. What's more, this magic ONLY works because of the Objective-C bridge and importing of Foundation (even if by some other thing you imported.) What you might want to do is something like: var csvCells: [[String]] = [] This says you want a variable of type array of array of String, then you assign an empty array which will have the appropriate type due to inference. And more importantly, it's proper Swift syntax. the [[]] thing won't even work without Foundation imported. Alternatively, you can be explicit about the types on BOTH sides and do something like: var csvCells: [[String]] = Array&lt;Array&lt;String&gt;&gt;() Also, doing either one of these will avoid creating an array with one empty array which you then append to. It will also mean that csvCells[0][0] isn't returning Objective-C bridged nonsense that would allow something like... adding an array of integers part way through, calling .uppercaseString on one and getting a nil!! (I am a little annoyed that this happens, but, it's all new and odd behaviors are bound to occur.) So.... hopefully that clears things up.
Thank you so much for taking time out of your day to write all of that out. Arrays are still a bit of a confusion point for me, obviously, as I'm learning as I go with all of this. As soon as I'm back to my computer, I'll give this a shot. 
having trouble creating a required init function
These are brilliant, thanks so much. Hope to see more.
Already checked part 1 and 2 out. Nice stuff! Im going my second year at a computer science school. I think it is very good for beginners
if let cv = collectionView { yOffset = cv.contentOffset.y etc }
Unfortunately this didnt work for me. Do you know how else I could fix it? This is the code block I am looking at: if let visibleCells = collectionView?.visibleCells() as? [inQuestCollectionViewCell] { for inQuestCell in visibleCells { var yOffset = ((collectionView?.contentOffset.y - inQuestCell.frame.origin.y) / 240.00) * 30.00 inQuestCell.offset(CGPointMake(0.0, yOffset)) } }
collectionView is the optional that you are first checking for null, that's the point of the fragment I gave you.
Just started working to creating apps. Useful blog. Thanks for the share. 
Don't you need an IBOutlet? Control + drag that bad larry right in there
Awesome if you are getting started I would suggest you to even look at this http://shrikar.com/blog/2014/12/02/getting-started-with-mobile-app-development/
Thanks mate!
Cloudkit!
Thanks
you are welcome!
I'll answer this myself, all I had to do was get rid of the www from the url
I did it like this: func followOnTwitter() { let screenName = "betkowskii" let appURL = NSURL(string: "twitter://user?screen_name=\(screenName)")! let webURL = NSURL(string: "https://twitter.com/\(screenName)")! let application = UIApplication.sharedApplication() if application.canOpenURL(appURL) { application.openURL(appURL) } else { application.openURL(webURL) } } without @IBAction, because I don't really know how that works. It worked, it transfered me to the twitter app, problem is tho, my app crashed after that. No errors, just lldb. Any ideas?
@IBAction means the function is available to hook up through interface builder. Your app most likely didn't crash, it just got backgrounded.
Cool. Thank you man. 
At swift? I'm just about to finish my first game. It took about a month. It only took so long because I was learning on the way. Come up with the project that excites you, might be a little game, maybe twitter app, and just google some tutorials. for EVERYTHING basic, here are some of ray's tutorials: http://www.raywenderlich.com/tutorials That's all you need for now.
Ahh cool!
This is great, thanks! One question so far—why not drop every "self."? I've left them all out as I follow along and it seems to work fine. [all of them, save the isMemberOfSet extension to Character—the "String(self)" I left intact.]
What do you mean: "the launch screen no longer appears"? What Apple means by "launch screen" is: the image that the operating system picks by looking at the compiled app's Info.plist and asset catalogs. All before your code is ever run, and all using resources that are, from your app's point of view, read-only. 
That's still weird behavior. If you have control over the website, you might want to look at your DNS records. It seems like your www host is redirecting you to the homepage regardless what page you're visiting. To make sure, try printing the composed URL to the console. Also, you are explicitly unwrapping your webView right there. Is there a reason it's optional? If it's an IBOutlet declared as @IBOutlet var webView: UIWebView! Then you don't need to unwrap it within that statement, or anywhere else. It's implicitly unwrapped for all uses.
I see your point and you made me think about something I didn't consider. Actually this functionality should not be present in either of the two view controllers. This is a mistake I often do myself and I have to keep in mind all the time. Ideally, the role of a view controller is to connect the model to the view layer and pass data around. Creating records is something that should be delegated to some other class, or the view controllers will start to grow uncontrollably. This way what you say still holds, but instead of returning the data to TVC, AVC would pass it to this other objects. [I wrote about this more in detail here.](http://matteomanferdini.com/how-to-keep-your-view-controllers-small-for-a-better-code-base/)
Awesome, just what I've been after recently! Thanks.
No class vars yet.
Check the [FAQ](http://www.reddit.com/r/swift/wiki/faqs) linked on the side bar (it's a short read). It looks like you want the links in the second question.
&gt; Start small, work your way up. Best advice. Walk before running. 
cool, thanks for the replies, I'm not giving up
Agreed with everyone here. iOS is vast and the best way is to get ur hands dirty and feet wet by diving in. You will be surprised by how much you can learn. Just keep at it as there are tons of resources online. I wish I was afforded that opportunity back in college.
Is there anyway to go back to an old version of xcode? 
That's the spirit.
Something like this? https://developer.apple.com/library/ios/samplecode/GKTapper/Introduction/Intro.html#//apple_ref/doc/uid/DTS40010283 It's quite old and in Obj-C, but if you know how to read Obj-C it should give you an idea...
As you probably know by now, it's not very simple. If you're doing it alone for the first time, prepare for a painful day or two. 
See, problem is, I don't even know how to read obj-c.
not to be harsh but knowing objective-c is pretty important to fully grasping swift... at least at this point. I recommend grabbing BNR's book on Obj-c. it's a good starter and covers a lot of good programming concepts edit: on mobile. spelling/grammar 
https://github.com/jackcook/GCHelper/ what about this? Is that helpful at all? Sorry, just googled it on my phone, I'm at work
And one more I found, could somebody take a look at this? https://github.com/martincarlin87/SudokuGame
It seems like you are looking for a shortcut but there is none. SW engineering is complex and you just have to learn it slowly and deal with the difficulties and move past it, one step at a time.
It seems to me that your biggest problem is the misunderstanding that Swift is iOS development, which is not true. Swift is the language used for iOS and it's definitely a fundamental block (so, well done in learning it), but it's just the first one. iOS development includes much more: * the tools: you need more than playground in Xcode do build iOS apps. You need to know how a project is structured, how to build interfaces, how to organize your code and how to build it * the basic paradigms of iOS: the view hierarchy and the common iOS controls, the MVC pattern, the target-action pattern, the delegation pattern * the iOS frameworks: there are many and they are big and you definitely don't need to know all of them (I'm a freelance dev with 6 years on iOS and I never touched some of them). You need to know they are there though, and how to find the ones you need. Networking, for example, is in there. Good luck with your journey!
it's probably init(nibName: nibNameOrNul, bundle: bundleOrNil) since it's a regular viewcontroller 
&gt; extensionContext?.openURL(NSURL(string:"http://reddit.com")!, nil); works for me 
what's wrong with changing the flag convenience to required? 
Thanks. Works for me. 
Can you please explain me in plain english whats the use for ? here?
Learning a language is only the first step. Next come the APIs. [The Big Nerd Ranch](http://www.bignerdranch.com/) has excellent books for ramping up on the idioms of Cooca. You have to spend time exploring various APIs in the iOS ecosystem. After you're comfortable with the basics, you should be able to pick up a new Cocoa API easily. Next comes building a full-fledged application. This is a long road littered with half finished projects. Start small.
SOLVED!
Thanks, yeah I read a little bit last week. Sadly I got a new project at work so I'll have to put this off really sinking into this for a bit.
For a beginner I would suggest you first have a dozen or two dozen trivia questions statically stored with the Swift project. Make sure you get the basics of how your app works first, asking questions, checking answers, keeping score etc... Once you're comfortable with that then move the trivia questions/answers to a server and figure out how to make requests to the server. Personally I would use NodeJS as a web server only because I'm very familiar with JavaScript. Whatever server side language your'e comfortable with will work there is no right or wrong technology here. Just get something to work and make sure you don't get frustrated with your approach. If you are curious or interested about JavaScript and NodeJS you can learn more here http://nodeschool.io/#workshoppers just don't feel obligated to learn it if you don't want to. 
Apple has a set of documentation. Those docs are quite useful.
Use Vagrant. It manages setting up a virtual server in Virtualbox for you, and you can use one of many preconfigured server configurations from Vagrant Cloud. It will avoid cluttering up your operating system with server software too.
I was programming for some time before getting into iOS development at all. Just diving into it was pretty rough. I ended up finding some courses about the topic on Lynda.com that were extremely helpful. Check out Simon Allardice's [iOS App Development with Swift Essential Training](http://www.lynda.com/Swift-tutorials/iOS-App-Development-Swift-Essential-Training/185036-2.html?srchtrk=index:1%0Alinktypeid:2%0Aq:iOS%2B8%2Btraining%0Apage:1%0As:relevance%0Asa:true%0Aproducttypeid:2) to help you get started. He does an excellent job at explaining *the how*, but more importantly, *the why*. He also has more courses about general practices for programming that will help if you've never utilized the proper use of object oriented languages.
Can you post some code, either on here or pastebin or something? It's a bit difficult to assist without seeing what we are working with. Off the cuff though, I have run into similar issues when attempting to randomly choose a particular enemy to spawn in a game. Based on your initial question, I bet the problem is happening because that particular index of an array is storing nil for whatever reason. Are you using optional binding to check the objects as they come out of the array?
Hey and thanks for the reply! I'm new to programming so I'm not very knowledgeable or good at debugging (sorry). I built it as a game and have a bunch of scenes: 1) Main Menu with a play button 2) Game scene with a timer 3) End game scene with a replay button i noticed that when I first run the game there are no issues, but after my timer runs out, it calls the end game scene which has a replay button. When I hit the replay button to bring me back to the game scene, that's when I have problems. Going from end game back to game, after a bunch of swipes it changes something and returns a nil value that crashes my program. Also, I have a "tap to start" and the last time I just ran it, when it switched to the end scene I hit replay and it crashed saying I pass an "[UITapGestureRecognizer startCountDownTimer:]: unrecognized selector sent to instance" which is contained in my play scene...not the scene I was in???
Can't thank you enough for the advice! I will try adding some println statements in my methods to track what's going on. How would you go about making a timer for a countdown in spritekit without using NSTImer? My goal was basically user taps play, then there's a countdown and once it hits 0, it fires the play function. 
Yeah! So, implementing a timer/countdown is going to happen with your update loop. Take a look at the method signature for Update: override func update(currentTime: NSTimeInterval) { } So, you need a couple of vars to hang onto yourTimeCounter and previousTime. After that, in your update loop, you'll want to do something like this: // this allows you to see the elapsed time between update loops, // if you add them to the counter, eventually you'll get your desired timer. yourTimeCounter += currentTime - previousTime if yourTimeCounter &gt; 0.5 { // 0.5 here being the desired "timer" yourTimeCounter = 0 playGame() } previousTime = currentTime // obviously we need to know the previousTime Toss in a boolean to see whether or not your game is playing and I think you'll be in good shape.
Great article! - Very helpful... Maybe change the wizard example for us non-DandD players :) 
Excellent guide man! Great stuff!
Awesome, I'll definitely look into using the update loop. Btw I thought about it, why do I need a delay after 3 seconds if my countdown is 3 seconds? Just need a condition to fire the method after it hits 0 like you just said...the fck was I thinking lol. God I hate being a newbie
Don't get discouraged mate. Building these things is a skill, an art. And it requires a lot of practice, a lot of falling down. But in the words of Alfred, just gotta get back up. Anyways, hope it helped man! Learn some more, and answer someone else's questions! 
It means "do the following (i.e. calling the method `openURL`) on the extensionContext if it is not nil". In other words, you acknowledged that extensionContext may be nil; the ? indicates that nothing should happen if it's nil.
Stop apologizing -- if I didn't want to help I'd stop replying! Think of it as stopwatch. You are using yourTimeCounter to count up to an arbitrary point. You start the stop watch at the beginning of your game, and then every time the update loop fires (FPS), it is taking the currentTime (which is measured in number of seconds since 1979), and subtracting the previous time (n seconds minus whatever). After that, you've got a tiny bit of game logic that is saying: Is yourTimeCounter equal to desiredAmountOfElapsedTime? Let me know if this makes it a bit clearer. edit: I will say that this particular approach will NOT work if you need super precise timer functionality. I think in your current game it'll be fine. [Check out this article that articulates a better approach.](http://fabiensanglard.net/timer_and_framerate/) 
I'm glad this is surprising and of use. :)
&gt; unexpectedly found nil while unwrapping an Optional value This sounds like you have an optional variable that you are force unwrapping. You should avoid force unwrapping wherever you can. It's a workaround, not something you should use normally. From the description of your application, I would guess that one of the image filenames is wrong, so the `UIImage` initialiser is returning `nil` when the random number generator hits that image, and you are force unwrapping it, causing the crash.
Thanks for the advice! I double checked that the names of my files that I stored in the array completely match that of the ones I have in my atlas folder. I've taken out NSTimer and GCD from the project and it seems to be working without any bugs (so far...just ran my project and didn't get an unwrapping error!). Currently, I'm trying to figure out implementation of a timer without NSTimer using the advice from mphfish. 
Sorted it myself: First, add GKGameCenterControllerDelegate to scene: class MenuScene: SKScene, GKGameCenterControllerDelegate { and on the line below it: func gameCenterViewControllerDidFinish(gameCenterViewController: GKGameCenterViewController!) { //code to dismiss your gameCenterViewController // for example: gameCenterViewController.dismissViewControllerAnimated(true, completion: nil) } this will silence the error popping up in the class line. Then, in desired place (mine was touchLocation for a menu button) var vc = self.view?.window?.rootViewController var gc = GKGameCenterViewController() gc.gameCenterDelegate = self vc?.presentViewController(gc, animated: true, completion: nil) and that's it. It works!
You're barking up the wrong tree. `NSTimer` and GCD aren't going to cause crashes unwrapping optionals. That makes no sense at all. Force-unwrapping optionals when they are `nil`, or using implicitly unwrapped optionals causes crashes like that. The best you have done is avoid the bug by accident. You need to pay attention to how you use optionals or you're just going to get more and more bugs like this. If you want a timer, use `NSTimer`. That's what it's for.
Both mphfish and [this article](http://stackoverflow.com/questions/23978209/spritekit-creating-a-timer) advise against using NSTimer though. It would seem a hell of a lot easier to just use it but I don't want to risk bugs or crashes if there's a better way you know edit: just played with their swift example and got this working, thoughts on the code? http://www.codeshare.io/CCtKV
Hey! Good news, I found something that works. I added this to my didMoveToView() method and it started a countdown that then ran my playgame()...what are your thoughts? http://www.codeshare.io/CCtKV
all the tutorials Ive found are for beta versions and seemed to have become obsolete 
I think that's a good solution. You may be able to optimize it a bit further, maybe by moving the countDownTimer to a property. That would allow you to use a property observer to keep the two in sync. But that's probably nit picking at this point. Any further crashes?
None at the moment, app is running stable so far...still need to add more functionality though so who knows what problems those may cause. Anyway, I can't thank you enough for your help! 
I followed this to create a to do list with Swift, https://www.youtube.com/watch?v=war0gHL26ns The guy uses the beta version in the tutorial but I followed this tutorial using version 1 of Swift when it came out and I didn't encounter any problems.
Hey there, it seems like you're in luck. Today I did a write-up on the exact subject of creating a simple table view in Swift, you can find the post [here.](http://innermonkdesign.com/all/build-simple-uitableview-using-swift-xcode-6-1-1-tag-support/)
Yes, but the World.Gravity doesn't affect to a specific point. 
'cause I was bored: here's a implementation of the [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle). I like how it's possible to exchange the values of two variables with `(a, b) = (b, a)` in Swift, that's pretty neat. func shuffleArray&lt;T&gt;(var array: [T]) -&gt; [T] { for index in reverse(0..&lt;array.count) { let randomIndex = Int(arc4random_uniform(UInt32(index))) (array[index], array[randomIndex]) = (array[randomIndex], array[index]) } return array } let array = ["a", "b", "c", "d"] let shuffledArray = shuffleArray(array) Edit: If you want to have an in-place shuffle algorithm (i.e. one that doesn't copy the array), change the function signature to `func shuffleArrayInPlace&lt;T&gt;(inout array: [T])`, and remove the return statement. Call with `shuffleArrayInPlace(&amp;someMutableArray)`.
We have a 3-hour Swift primer online coming up later in December you might be interested in. http://www.totem.training/online-classes/a-night-of-swift
How are you curating the material? You could just store your abstract, link, and image thumbnail as a Parse object, or you could store just the abstract, link, and thumbnail link to the image from the original site and let the client-side load it. Depends on a few design decisions around loading data. Depending upon the complexity of the app (does it have news categories?), you could use something as plain as a Twitter feed, and pull this same data via REST API.
If you want to have attraction to a point, do the math yourself. You need some vector math for that, I'd assume SpriteKit has some functions for that, but it's easy enough to write from scratch if necessary. Here's how to do it: Store the point you want to attract the nodes to in some variable/property, i.e. `centerOfGravity: CGPoint`. For each node that is affected by gravity, you'll need to calculate the impulse applied to that node. First, you calculate the vector from the node's centre of mass to the centre of gravity, let's call it `nodeToGravityCenterVector`. Then, you calculate the "amount" of acceleration (i.e. the length of the acceleration vector that acts on your node) gravity gives for your node with the inverse square root of the length of that vector, e.g. `someConstant * (1.0/pow(length(nodeToGravityCenterVector),2))`. The constant allows you to specify the "strength" of gravity; the higher it is, the higher the attraction. I'd just play around with it until you get a value that matches what you want. If you have a defined scale in your game (e.g. 10 px = 1 m in real life), then you could compute the constant to match earth's gravity, for example. Not going into detail here though. It may very well be possible that you don't want to use the inverse square law for gravity; for example, if you want the gravity to be constant not matter the distance of the centre of gravity, just use a constant for the amount of acceleration. Now that you got the length of the acceleration vector (aka "amount of acceleration", lets call it `gravityAmplitude`), and the direction of it (`nodeToGravityCenterVector`), we can compute the acceleration vector given by gravity: `accelerationVector = gravityAmplitude * unitVector(noteToGravityCenterVector)`. It assumes you can multiply a vector (probably represented by a CGPoint in your case with a scalar - not sure if SpriteKit offers a function for that. It also assumes you have a unitVector function, which is computed as `unitVector = sourceVector * (1.0/length(sourceVector))`. Pretty sure you know that, but just in case, you get the length of a vector with `length = sqrt(pow(sourceVector.x, 2) + pow(sourceVector.y, 2))`. Finally, because we can only apply impulses and forces on nodes, and not accelerate them directly, we need to compute the impulse to apply. The higher the mass of the object, the larger the impulse (the acceleration given by gravity is the same no matter the mass of the object, so the impulse needs to be larger for heavier objects). `impulseVector = node.weight * gravityVector` should do the trick. In your game loop, do that math for each node, and apply the impulse you computed to each node. You can then change the point of attraction by changing your centerOfGravity property. This may seem a bit complicated, but it's not all that hard to do all in all (should be 10-20 lines of code). If you get stuck, feel free to ask, you'll get there :-)
Spot on question! Nothing! :D
Nice, Very Helpful! Do you mind if I ask how I can get a text box's contents from a separate view controller into the title?
Yep purple link, that tutorial however didnt show how to implement a custom cell though, thanks however! 
Swift as it stands is primarily a (great) new way to use the same old (but good) Apple APIs. As a language, it has the potential to be a lot more than that, especially once there's a Free Software implementation (preferably Apple's own, but either way it will happen eventually) and the F/LOSS guys get hold of it.
You seem to have "suffering is good" as an ethos: that's troubling in programming. Swift is new. There is plenty of suffering there :D. It's IDE support (Called SourceKit) still crashes a good bit. I see no reason to strongly favor Objective C for your particular project other than that. Swift is more C++ish than Objective C in some ways (it's a bit like haskell case statements mixed with lots of template C++ mixed with C mixed without pointers). Swift provides *tons* of new ways to do things, especially value based, functional styled things. Objective-C has been having swift features back ported into it (including closures, which are called blocks in ObjC) for years. Objective-C and swift can be clearly mixed in projects. If the sockets are all you're worried about not having a good tutorial for, write them in a mix of C and Objective C, then call the class or functions you wrote them in from Swift. I will admit the pointer access marshaling for swift is a bit clunky, but it's not insane. Cocoa *today* is completely accessible by Objective C and swift. I expect that to continue for a year or two, but eventually I expect some APIs to favor the Swift programmer. As far as staffing goes, I think for the next year, Swift positions will be harder to fill, and after that, Objective C will be harder to fill. 
Thank you. To get a string from a different view controller to show , you need to store that string in a place that your view controller can get to it. To do this, create a variable at the top of your view controller below the import to hold the string. Better yet, you can store strings directly in something like NSUserDefaults, that way, you can tell your view controller to show whatever you add to the relevant NSUserDefaults key. Hopefully soon I can have a tutorial showing this further. Good luck!
A quick search on Github turned up https://github.com/wdem/mongo-swift-driver. One issue I can see with having the application doing requests directly to the database instead of to an API is that if you want to make a change or patch on the database you'll need to have backwards compatibility which is a mess. I used NodeJS/Express as my middleware/API instead as it gave me the ability to use versions for easy-ish backwards compatibility as well as I was able to rate limit requests along with other features without pushing an update to the application. Now all you need to do is use one of the HTTP request libraries either included with Swift or http://nshipster.com/alamofire/ to make those request to your API. Should be easy to use the data after that.
I looked at that and it didn't look finished as there were a lot of empty functions with to todo. One solution I thought of was serving up a json page but that doesn't allow me to make changes and I was having trouble parsing it. Your post is above my level of understanding, do you know of any resources that will send me in the right direction Edit: looked at that link, my expressjs gets data from the bodyparser. Can I use parameters to fill those some how when I make a post request?
You can make a GET request with ?paramaterA=foo&amp;paramaterB=bar at the end and use req.query to access them. I'm AFK at the moment but I can upload an example once I get back to a PC
Could you post more of the stack that's causing the EXC_BAD_INSTRUCTION exception? Without more context, it's difficult to figure out exactly what is going on. EXC_BAD_INSTRUCTION exceptions happen when you try and tell an object to perform an action they do not know how to do. Usually the compiler will check to make sure you're not doing something like this and show a warning, but there are instances where you can come across this issue without a compiler warning (e.g. you tell a button to call a method `doStuff()` on a view controller, but the view controller doesn't have a method `doStuff()`). Other than that, it seems like you might be having some confusion with what a `UITextView` is itself. `UITextView` is actually a subclass of `UIScrollView`, and should resize itself as necessary as text is entered. When the body of text in a textView is larger than the frame of the textView, the textView automatically increases its contentSize, and will scroll to show the line of text the cursor is on. You do not need to put the `UITextView` inside of another `UIScrollView` (unless of course it is your intention to, but for normal purposes of getting text to scroll it's not necessary). Additionally, from the storyboard screenshot you've attached, it looks like the frame of the textView is extending below the view controller's bottom. Resize the textView so that it fits within the viewController, it should be easier to work with then.
Merging storyboards got hundreds of times better in Xcode 6, FWIW.
Global variables are a bad idea 99% of the time. The rest of the time, they are a terrible idea. It's generally a bad plan to come asking for help accomplishing a specific implementation detail in a language. It's better to explain what you are trying to do more broadly and see what people suggest. There is almost definitely a better way to do things than use a global variable.
Where is your code that sets the size if the banner? I don't see it here
Also your func takes a banner view object that you don't use?
SourceKit stopped crashing after the latest Xcode release.
Doesn't seem to provide parameter placeholders in the auto-completion. Thats a bummer :-( Maybe in the future
you're right for the most part. the frequency is much less than what it was in previous versions. I still get some weird behavior and one or two crashes here and there but it is much improved starting with 6.1.1
Still getting SK crashes here, even after the latest update :(
Go to organizer, select your project then delete derived data
Is this in a series of tutorials for swift or a one off? Just asking since the title says "beginner"'friendly but it seems like a lot of details that a beginner would need/want to know are glossed over. For example you have they make an outlet for the table view with explanation or link to what an IBOutlet is or what weak is. Or when creating a cell it skips over the concepts behind what's being done. No mention of what an indexPath is or what dequeuing a reusable cell means. Just being honest but I'm not sure how beginner user friendly it is. It seems to just be more of a "parrot this in order to get x,y,z to work" rather than "understand the concepts of what's going on so you can do it for yourself without help from now on."
Answering your question in the title: the answer is using the inout keyword like so: func willChangeInt(inout i: Int){ i = 20 } func func1(){ var myInt = 10 willChangeInt(&amp;myInt) //myInt is now 20 } 
 func bannerViewWillLoadAd(banner: ADBannerView!) { println("Ad about to load") } func bannerViewDidLoadAd(banner: ADBannerView!) { adBannerView.center = CGPoint(x: adBannerView.center.x, y: view.bounds.size.height - view.bounds.size.height + adBannerView.frame.size.height / 2) adBannerView.sizeToFit() adBannerView.alpha = 0.5 adBannerView.hidden = false println("Displaying the Ad") } func bannerViewActionDidFinish(banner: ADBannerView!) { println("Close the Ad") } func bannerViewActionShouldBegin(banner: ADBannerView!, willLeaveApplication willLeave: Bool) -&gt; Bool { //pause game here println("Leave the application to the Ad") return true } func bannerView(banner: ADBannerView!, didFailToReceiveAdWithError error: NSError!) { //move off bounds when add didnt load adBannerView.center = CGPoint(x: adBannerView.center.x, y: view.bounds.size.height + view.bounds.size.height) println("Ad is not available") } } This is all the code I have. Now that I think about it, there's no code for the size in there. Any way how I could do it? Btw, the size of the banner is perfect for the portrait mode, how to change it to landscape mode? 
It's going to be a fairly simple news app. There will be images and a title, and the user simply touches that and it reveals the content. I simply do not know where to start when dealing with data like this. I would like to update these articles whenever and have it automatically pushed to the user. 
Parse allows me to import JSON files. Is it feasible to take a text document (blog) that I write up, convert it to JSON, and upload it as a Parse object? How would formatting be affected? 
Thanks a bunch for checking out the tutorial and for your comments. Any advice is always appreciated. Thanks again for your feedback.
[a great book](http://shop.oreilly.com/product/0636920034285.do) on learning the Cocoa framework using Swift. I own this book and can say firsthand that its really good. Also you might want to look into video courses such as ["How to build a freakin iPhone App"](http://www.udemy.com/ios-8-and-swift-how-to-make-a-freaking-iphone-app/) - you cover a lot of ground faster with video than with a book.
You can also just enter the styled text in Interface Builder.
sorry. just trying to help
I wasn't getting autocompletion in if let x = whatever {... } for x within the {. I was really excited about it too.
Have you tried seting the frame of banner view to what you want?
thanks very much. don't know why you are getting downvoted for being nice to another human being. Have an up vote my friend.
[Please don't:](https://www.reddit.com/wiki/reddiquette#wiki_in_regard_to_comments) &gt; Make comments that lack content. &gt; Announce your vote. Reddit works best when people vote up things that contribute to the discussion and vote down things that don't contribute to the discussion. Empty praise doesn't contribute to the discussion. If you feel the need to post praise, then you should at the very least say what it is you like about it, even if you can't say anything else.
Thank you for the link to that book. How much experience would you say you need for that book beforehand? I've done some ruby, c++, and java, but I can't really say "I know x language".
OP - I'm in the same boat as you and I'm trying to assemble a group of Swift newbies to help each other out while trying to recruit a mentor or two for us. If you have a Skype or FB message me your info if youre still going hard into learning. It is definitely frustrating for all of us trying to learn it but together we'll figure it out :)
Tis' a good idea. I am going to start doing this.
oh no, i meant i'm frustrated at xcode not you! ***hug*** :)
if you know the basics of any programming language then you're ready for this book. By basics I mean you know and understand the general concepts of variables, arrays, if statements, loops and object-oriented programming. If you recognize all of those terms from experience with any other programming language then you'll be just fine with this book.
Best book out right now is the Official Apple docs.. I haven't come across anything in hardcopy format yet. Outside of that I've been using Treehouse as a guide to navigate the basics.. and once I ship an app from there, I"ll be moving over to Bitfountain's Swift course.
&gt; a ton of errors If you want help, post the errors. 
This is already in Foundation. `NSURLComponents` has a `queryItems` property.
initialize a variable to be the most recent random number, initialize at 0 or whatever serves your purpose. In the function, have a new variable equaling the new random number. Do a while loop comparing the two and in the while loop set the second variable to a new random number. Return the second variable at the end of the function and set your first variable equal to it.
Try: dispatch_async(dispatch_get_main_queue()) { self.message.text = messageContent } The data task is most likely completing in a background queue, and UIKit items need to be updated in the main queue.
And what you enter is probably effectively backed by an RTF file! Now the API makes perfect sense. Cool trick nonetheless, I had no idea. 
No you need to seek help. 
This book's so nice I bought it twice... accidentally, because I'd forgotten I already owned it and saw it and thought "This book looks great."
[This is the one I'm looking forward to](http://www.amazon.com/Cocoa-Programming-OS-Edition-Guides/dp/0134076958/) (not out until April). I've got the previous (Obj-C) version, and am working my way through it in conjunction with Apple's Swift language guide. But really looking forward to the next revision (which I linked) which will cover Swift. Take my opinion with a big grain of salt as I'm very much in the preliminary still-learning stage, but I've always seen this one well-reviewed.
Hahaha yes, I've done that. Does the word at the end of this sentence have a value, or does it not?
Wow, that's really awesome - thanks!
i did get 'a ton of errors' make sure you have the required libraries that they silently add as dependencies: [https://www.parse.com/apps/quickstart#analytics/crashreporting/ios/existing](https://www.parse.com/apps/quickstart#analytics/crashreporting/ios/existing)
I've found this generic socket server, using posix functions http://stackoverflow.com/questions/24977805/socket-server-example-with-swift It is probably a good starting point for you. Cheers 
WOW thank you for taking your time. Unfortunately Im too new to understand this!
Thank you i will try it !
That block of code is called a closure, it's basically an inline function. I don't pretend to fully understand their advantage beyond superficialities, but for your question "in" is the bridge between the parameters (data, response, error) and the code that will be run. "Run these variables IN this block of code." Someone smarter feel free to correct me or expand on it. 
I'm keeping a private variable in the Randomizer class that saves the last generated random number. Then in the newInt() function which is the randomizer function, I check the old value, if that's equal to the new value, I generate a new one until we have a new value. If there is no previously-generated random number, I take the number and give it to you but I save it also so that next time we can check against a previously-generated number. don't worry, this is very simple stuff. I am sure you'll get it shortly.
Most closures allow you to access variables that exist outside of the scope of the block defined within the closure. It helps save some work from passing around references to other methods as parameters, or having to make everything public, which itself has concurrency issues at times. (Note the usage of messageContent within the block, which is defined outside of the block.)
You have a lot of balls, kid. You slop together some shit in 24 hours, call it a course, and charge suckers for it. Just like Learning Tree.
I finally understood after I read http://goshdarnclosuresyntax.com/
You know, you don't have to write code like this: let url = components.URL if let url = url{ // … } …you can just write this: if let url = components.URL{ // … } 
Good job kid. Keep creating output. Ignore the haters who can't produce results.
also, { myVar, _ in println("hello, \(myVar)") } is much easier to type than, let's say, function(myVar, anotherVar) { println("hello, " + myVar) } 
Almost. The {(x, y, z) in ... } syntax generates a closure that takes arguments (x, y, z) as if it were a function defined with those arguments. The closure still captures variables from the context but can be passed to another part of the code that expects a function with a specific type signature. 
Interesting. Any tips on where to start looking at these? I haven't seen any pure Storyboard tutorials so far. I'm slowly moving towards creating a NavigationController with a SidebarController by learning from the following repo: https://github.com/evnaz/ENSwiftSideMenu
Closures are code that run in the future that uses variables from the present. So a closure could be written how the item closes a connection, deals with incoming data, or how to act once a given view is on the screen, using context from when the closure is defined. It's a great tool for keeping all the data in one place that acts on a situation rather than smearing it around 4-5 delegate methods 
I would just setup a nodeName.removeFromParent() to be run each time you tap the screen.
preference
Just use an SKFieldNode. https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKFieldNode_Ref/index.html
You can create a new project in the same workspace as your current project. It can be a sub-project of your current one, or a sibling project in the workspace. The type of project should be Cocoa Touch Framework. Give it a name. If all you need is a single method, you can declare it in the global scope. Create a new Swift source file in the new project. Write your new function, making sure to declare it as "public" (public func &lt;name&gt;()). Make sure to Build the target for your new project. Click on your main project in the project navigator to open its settings. In the "Genera" section, under "Embedded Binaries", click the plus sign to add a new framework. You should see an item for your new project (eg:&lt;your-project-name&gt;.framework). It should have a "toolbox" icon. Click on it and click "Add". Go to a source file in your main project. At the top (just under any current "import" statements), add an import statement for your new project (import &lt;your-project-name&gt;). Now in that file you should have access to anything declared public from your new project (eg: newProject.newFunction()). 
Yeah I've al says found Hillegass books to be my favorite. 
Using a framework for this purpose is really overkill, you can just import the actual source into each target directly. This is what Apple recommends. Check out the WWDC 14 sessions on writing 'portable' code.
When it comes to teaching beginners, low-quality output is harmful. Output for the sake of output is a waste of time, but if it's a beginner's course, you're going beyond that and actively fucking somebody over.
Great job! Finally, a Swift course that is relevant to programmers who have experience writing iOS apps! Can't wait for more :)
You should probably make this a bug ticket with apple
Thank you! i hope i'll get it soon ! This is the only way to save a number?
You should find something useful here: http://www.reddit.com/r/swift/comments/2oekzd/sprite_kit_how_can_i_make_a_hole_in_a_sprite/
... look who posted it.....
I thumbed through the book yesterday at the local bookstore and wasn't impressed enough to buy it. The best books I've run across so far are [Ray Wenderlich's](http://www.raywenderlich.com) Swift book and iOS 8 book, especially if you learn well by example. (I have no association with the site other than being a satisfied customer.)
There's nothing in the description that says that it will be a Swift version of the previous edition, just that it will cover the Swift language. Have they indicated elsewhere that it will be all Swift?
It's time for you to grow and stop judging people
1. You have to judge me in order to make that statement. 2. It's time for you to grow up and be responsible.
You seem quite irritated, as they say, a man is as big as what bothers him and the fact that I have an opinion about what I put my money on really bothers you. I prefer not to pay for any technical book really at the moment as there are tons of tutorials online. the fact that I am wise and choose where I get my sources seems to be irritating to you and I'm enjoying that to no end. by any chance, do you work for RW? Right now you sound like a marketing person for them.
I have to agree with this. the best is Apple's documentations and just searching online. up vote coming your way my friend.
Yes. I tweeted them because I was working through the current Obj-C version and wanted to know if there would be a Swift version, and [they said there would be in the next version.](https://twitter.com/bignerdranch/status/530115838486278144)
Yes I would totally agree. I'm currently getting this error : Theron 1 : EXC_BREAKPOINT (Code=EXC_ARM_BREAKPOINT, subcode=0xe7ffdefe) on this call : bottomtiki.physicsBody = SKPhysicsBody(rectangleOfSize: bottomtiki.size) 
How old is he?
Thank you again for taking your time ! I'll kept it aside because I might need it later !
This is pretty sweet, I didn't consider that it might be possible to use ~~Swift~~ Metal for computation instead of graphics. The APIs look pretty reasonable, too.
Thanks for liking it. I will add a link to github repo with the complete example later today. Best, Amund 
Not quite sure what your plan is. You can subclass objective-c classes in Swift, for example. Or you can create Swift objects in Obj-C and vice versa (and call methods on them of course). I think you can even write class extensions in Swift and use them from Obj-C and vice versa. You may want to read Apple's documentation on [Obj-C/Swift interoperability](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-XID_25).
Hi, thank you for the link So what I *think* I'm trying to do, is have my Obj-C view controller be a delegate for my swift controller.. Essentially what I'd like to do is pass in my self.view from ViewController, into my swift class and perform operations on the view itself (add a layer, etc)
The thing that you "think you're trying to do" sounds quite different from the one you'd "like to do". An example for the first thing is: You have some controller "A" that has a button which shows an email view controller. So A creates the email view controller and shows it, and sets itself as the delegate of the email view controller. The email view controller then, for example, calls the "failedToSendEmail" method on the delegate, so that "A" can display some special stuff when sending the email failed. I can't really think of a typical use case of the second thing you're trying to do. If I understand this correctly, it might be a better idea to create a new UIView subclass that "performs the operations". Basically, there are two entities responsible for configuring a view: the controller that uses it, and the view itself. At least in my experience, it's pretty rare that you need a third thing that also configures a view. To answer your question though, you can instantiate/call methods on Swift objects by importing the generated headers in your Obj-C code (`#import "ProductName-Swift.h"`, where "ProductName" is the name of your project usually; you can look that up in the build settings (just look for the Product Name setting). Then you can use any Swift classes that are Obj-C "compatible" (most importantly, they need to subclass NSObject in some way (indirectly is fine, too)). The methods can have an UIView as a parameter, so you can pass those methods whatever you want, including your `self.view`. In the link I posted before, look into the Mix &amp; Match section. 
Thanks, Christopher! Hope you learn a ton. :)
Thanks for the comment. Do you have any evidence that suggests this is low-quality output? Or that it's fucking somebody over?
I'm not sure how to take this. I taught a live workshop based on this content several months ago, and people told me they loved it and learned a ton. So I re-recorded it, added a couple new lessons, and packaged it as a course. It certainly wasn't the result of 24 hours of work - I've been doing iOS for 5 years and Swift since it was in beta...
I actually agree with you that low-quality output is harmful, and if my course *is* low-quality, I'll gladly make it better.
Thank you, you were very helpful. I just passed the view through, and operated on it however I needed. I don't know why I was under the impression that it was necessary for me to delegate it.
Cool stuff!
You could try www.weheartswift.com/swift-programming-scratch-100-exercises/
Change your end game condition? Put the nodes that "count" into a separate array (i.e. add them when they appear, remove them when you start to fade them out), and use that array's count for the end condition. Your game logic shouldn't rely on the nodes used for the graphics too much anyway (imho).
I'd be curious what your experience is with performance using the compute kernels relative to using the rasterization pipeline - my own experience with applying convolution kernel to images was that the raster pipeline was significantly faster. Also, slight niggle - when you create the destination buffer you create an array filled with zeros, create a new MTLBuffer object that copies the data out of the results array, and then after execution create another array using the data from the MTL buffer to fill it. Especially if you can guarantee the destination buffer is going to be overwritten it would be slightly cleaner to simply create the MTLBuffer object without initializing it with anything using ```device.newBufferWithLength(_:options:)``` instead of ```device.newBufferWithBytes(_:length:options:)```. You could (conceivably) do something similar with the input buffer and operate directly on the contents of the buffer using an UnsafeMutablePointer when seeding it with input data, but I assume that in any real world situation it's probably safer to stick with creating the buffer from the contents of an Array. Very cool writeup though!
So, what's the problem? Adding an image, audio or video to an existing app doesn't seem too hard? I might be misunderstanding what your "drafted template for an app" is, though... The combination of "all I need is to fill in the blanks" with "I'm out of time" sounds pretty scary to me though. [It's those last 10% that always turn out to be 90% of the work in the end](http://en.wikipedia.org/wiki/Ninety-ninety_rule).
lgroeni and dethswatch: thanks for comments - haven't done any benchmarks yet (blog post was mainly about getting it work at all), but feel free to play with it, see github repo: https://github.com/atveit/SwiftMetalGPUParallelProcessing
Here's some sample code from Apple that helped me. https://developer.apple.com/library/ios/samplecode/TableSearch_UISearchController/Introduction/Intro.html
Thanks!
This is awesome! I'll be sending you an email for sure! I've been meaning to pick up swift and I've always liked the Sams teach yourself books! 
I have played around with SpriteKit so not sure..
Where can i learn more about presenting VCs like this?
The usual way (quick and clean) for this kind of data is NSUserDefaults where you can setup a key kind of "authToken" and read/update/delete it everytime you nees it.
Auth tokens should always be stored in the keychain to be certain they remain secure. Storing them in NSUserDefaults provides no encryption and it would be incredibly for someone with malintent to access the token either from the live device or from a backup of it.
Hey how does one store information into the keychain? I'm doing something similar, where I need to store the hash. Would it still make sense to store the hash in the keychain? 
You can use one of the widely used open source keychain wrappers, like [SSKeychain](https://github.com/soffes/sskeychain). Check out their source to see how they work.
Thank you. Was having same problem as OP - then your comment reminded me that I mislabeled the IB, renamed it, but never deleted the old connection. Now I'm up and running. Good on ya.
I ultimately found information on storing the data into the keychain through Stack Overflow posts and it seems to be working really well.
I wrote [Locksmith](http://github.com/matthewpalmer/Locksmith) for storing data to the Keychain using Swift. SSKeychain is probably a better option at this stage though, unless you prefer Swift.
thank you for reading my comment
Very cool. If you can, please email me. brad.yale@pearson.com. Thanks,
I would encourage not to build a menu of this type. It's something Apple is strongly discouraging (and who knows, they might even reject for it one day.) See WWDC 2014 session "Designing Intuitive User Experiences"
Also send an e-mail. I bought some of the Sams book in the past and they've never disappointed me. I'm confident that this book won't change my opinion on that but I'd like to see for myself.
This thread has been linked to from elsewhere on reddit. - [/r/iOSProgramming] [Employee looking for reviews on a new Swift book, provides copy of the book in exchange for a honest review. \[X-post /r/Swift\]](http://np.reddit.com/r/iOSProgramming/comments/2pley4/employee_looking_for_reviews_on_a_new_swift_book/) *^If ^you ^follow ^any ^of ^the ^above ^links, ^respect ^the ^rules ^of ^reddit ^and ^don't ^vote ^or ^comment. ^Questions? ^Abuse? [^Message ^me ^here.](http://www.reddit.com/message/compose?to=%2Fr%2Fmeta_bot_mailbag)* 
I'm not sure of the quality but this might be helpful. https://github.com/davidkobilnyk/BNRGuideSolutionsInSwift
As previously mentioned, Swift uses retain counting (specifically, automatic retain counting) to keep track of objects. There are `weak` stores, which do *not* add a retain count to an object, as well as (from Objective C) autoreleased items. There is a global autorelease pool that gets drained periodically, but you can still wrap code that calls Objective C functions in an autorelease block to create your own.
Definitely. Check out the forums for the book--folks have been posting Swift solutions/translations/inquiries for each chapter since Swift came out. EDIT: I would suggest going thru CodeSchool's [Learn Objective-C](https://www.codeschool.com/courses/try-objective-c) tutorial/game a couple times just to familiarize yourself with Obj-C syntax. And definitely attempt the conversions to Swift yourself first, using the forums etc when you get super stuck.
I'm always interested in looking at learning from other developers' projects! As far as the licensing goes, I have no idea other than that I know Github automatically generates an MIT license or whatever you want for you.q
Good to know that Github can do that. I do use Github right now but all my projects are private.
thank you, i did see these as well but as you say they don't go deep enough into it. i have also looked into some books on scenekit but they're far from finished yet or are completely in obj-c
I don't have time to look into the sample project right now since I'm at work. The other thing that comes to mind is that the x86_64 architecture is only used in debug (simulator) builds on iOS. The SDK might be a release build with 64-bit arm support but not 64-bit x86 support, if it's an iOS library. 
&gt; And what you enter is probably effectively backed by an RTF file! It's archived in the .xib, actually. 
Makes sense. Are the attributes just in the XML or whatever format they use? 
You can open a xib in TextEdit and have a look. IIRC, it's UTF-8.
[Why not just get a book on Swift?](http://www.amazon.com/Swift-Hours-Sams-Teach-Yourself/dp/067233724X/ref=sr_1_4?ie=UTF8&amp;qid=1418873857&amp;sr=8-4&amp;keywords=bj+miller)
apple documentation now provides swift equivalents, you should check there
This seems like an excellent option. I'll do exactly that, thank you!!
I'm sure that will come in handy, thank you!
Swift itself isn't very difficult as far as I've seen, but the cocoa touch/xcode framework is the steeper learning curve itself from what I've dove into. And everyone says the BNR guides are superb quality.
Im super interested! I'm experienced in C and objective C but recently got started with swift so I could build an ios game over winter break. It would be cool to see what an entire program built from scratch would look like code-wise
How on Earth would he have such evidence? All of your content is locked behind a paywall. Do you have any samples? Anything that would let someone evaluate your teaching style and familiarity with Swift before paying money?
It really adds strength to exclamation marks, I think. This only happens if let timeSpentCoding = self.AsMuch as OPDoes!
Try setting "build active architecture only" to "yes", if it's set to a different value. That should, at least, allow you to build for the architectures for which the sdk is available.
Sounds like you'll need some kind of server if you want, say, Bob's posts to show up on Mary's phone. Look into Parse, maybe. It makes it pretty easy to throw things on their backend. There are other similar services. Start building your data models out and figure out what info your Post object will have. This might be review, but just to cover all bases, when a user fills out the form, grab each text field's text property when the submit button is pressed. Use those Strings to initialize a new Post and either display it locally or throw it on the server. To build the whole message board, you'll probably pull down some posts based on a predicate/search term, put them in an array, and use that array to back a tableView. 
thanks man! That really means a lot to me!
Sure, you can get the first lesson for free through the landing page. http://roadfiresoftware.com/learn-swift/
Just downloaded it and tried it. I like how the game looks. However, for the first game, i didt know what to do, i expected a short introduction. And for me, it is to hard in the beginning, is the speed constant, or does it increase?
it increases. I guess I just didn't have anyone to try it, and thought it was to easy. Thanks tho!
I have to say, i kinda dislike the 5 star ratings on the game screenshots that aren't sourced to anywhere. Game otherwise looks good :)
Downloaded. Very fun! This forum has tons of great people helping all the time.
first thing - CONGRATS FOR SHIPPING YOUR GAME! What an inspiration! Second.. gonna download it now :) Keep on shipping!
Whoa, thanks! I just discovered this.
Don't make it the same function? One function that handles gestures, and another one that creates nodes. 
That's not even close to enough information. I did something similar recently, and the same thing just worked. So you're doing something "special" that keeps it from working, but I can't possible know what if you don't post any information about what you do.
Hey thanks for the reply! Thought of that but I'm still very new so how say my function creates a node that's a red square. How do I pass the information from that function that a red square was created so that when I swipe it knows the red square is on the screen? again sorry I'm new =/
There's quite some stuff about your code that I have a hard time understanding... if I guess correctly, you want the game to display an image, and then you have to swipe in the correct direction, then the next image is displayed; otherwise it's game over, and so on? I'm gonna give you some feedback, 'cause you can write your code way shorter. I'm just writing off the top of my head, so excuse some slight syntax issues. First off, when you add your gesture recognisers, you only need one. let swipeGestureRecognizer = UISwipeGestureRecgonizer(target: self, action: "didSwipe:") swipeGestureRecognizer.direction = UISwipeGestureRecognizerDirectionRight | UISwipeGestureRecognizerDirectionLeft | UISwipeGestureRecognizerDirectionUp | UISwipeGestureRecognizerDirectionDown self.view?.addGestureRecognizer(swipeGestureRecognizer) This should replace line 44-66. It's a gesture recogniser that recognises all directions. I'll do the `didSwipe` method later. Next, we need a method that adds the next node; but before that, lets introduce a property that stores the "correct" swipe direction we expect. It's an optional, because we don't have one if the game hasn't started yet: var expectedSwipeDirection: UISwipeGestureRecognizerDirection? = nil Now we write the method that adds the next node (the play game method doesn't make too much sense to me, I'm just guessing what you're trying to do). func showNextNode() { // Line 82-97 of your code self.expectedSwipeDirection = UISwipeGestureRecognizerDirection(rawValue: UInt(1&lt;&lt;(randomValue/4)) } That UISwipeGestureRecognizerDirection might be too much for you, it just computes a direction based on the random value (0-3 is left, 4-7 is right, 8-11 is up, 12-15 is down). Use some switch statement if you want to have something else. Next, the gesture recogniser calls `didSwipe`, let's do that: func didSwipe(gestureRecognizer: UISwipeGestureRecognizer) { if let swipeDirection = self.expectedSwipeDirection { if gestureRecognizer.direction == self.expectedSwipeDirection { self.showNextNode() } else { gameOver() } } else { println("Game hasn't started yet!") } } On line 33 you can also call `showNextNode()`. You can also add the gesture recogniser immediately, because if the user swipes too early, it'll just print "Game hasn't started yet!". Maybe this helps? I'm a little drunk though, so maybe not. :-D
Wow I can't thank you enough!!!! I have an array of 16 elements that represent images and the play method (what I did...I know terrible) was supposed to generate a random int from 0-15 and pass that as the string for my image to be displayed in the swiperImage SKSpriteNode. I was TRYING to say if you swipe [insert direction] and it wasn't a certain image, end the game....I could post the full code for what I did if you're up for the challenge haha, if not this has helped a ton man
Game looks great! Just downloaded it to try out. Congrats on finishing your project!
Yes and no. Yes, you can do apps with it. No, even Apple says Swift will change a lot and mature for a couple of years.
Yes, I have a production app that is about 50% swift.
Yes, I've dev enterprise app with swift and objc(legacy). swift was used since xcode 6 came out.
I checked UITableViewCell class and all classes it inherited from. I can't seem to find in Obj-C. Clearly I'm doing something wrong I just don't know what.
from what I see its deprecated, you could use a collectionview with modified cells too
You might consider a singleton DiceSoundEffectManager or similar that abstracts some of the implementation such as handling if there is an existing sound playing, loading the filenames, etc. Then you can send the singleton simple messages like (sorry for the objective-c) [[DiceSoundEffectManager sharedManager] playSoundEffectForDiceNumber:] However - if your project is fairly simple, and you don't forsee the need to play effects form multiple places, the view controller would be a fine host. 
Thanks for that tip, it's a great solution. For my project I may just stick with the main VC so I can move on to more interesting things on the "to do" list. After it's done I can always circle back and do things a better way!
The language is largely fine. Xcode is even crashier with swift than without :(
You need to append to the file. writeToFile: on NSString will overwrite the existing file and replace it with a new one every time you call it with the same file name. I'm on my phone so I can't give examples, but Google appending strings to a file. You could also read the file first, add the new content, then overwrite the file with the new string. Also, you may want to consider not using a plain old text file for storing data. I'm not sure of your use case but you may want to look into storing the data in a plist or using NSCoding to archive an object that represents your data. Maybe even NSUserDefaults if this data represents some sort of simple settings or state!
There was already a good answer on this. Thanks to everyone who replied though http://www.reddit.com/r/swift/comments/2fr849/uitableviewcell_with_custom_width_in_swift/
Is this performed on the main thread? 
PS, it's very rudimentary right now. My iOS app development and job are getting most of my mindshare right now. Any contributions would be greatly appreciated
Just search Github for "iOS OCR" -- Found 47 projects. https://github.com/search?utf8=%E2%9C%93&amp;q=ios+ocr
nice design, downloading now. will come back and tell u what I think
You are removing the record from your array, but not from the tableview itself. When reloading the table, the table is trying to reload a row from which you just deleted it's data. Try using the [deleteRowsAtIndexPaths](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableView_Class/index.html#//apple_ref/occ/instm/UITableView/deleteRowsAtIndexPaths:withRowAnimation:) method. [Apple has a pretty good write-up on how to use table views](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/TableView_iPhone/AboutTableViewsiPhone/AboutTableViewsiPhone.html#//apple_ref/doc/uid/TP40007451), albeit for Objective-C (but if you use the reference it's easy to find out how to program it in Swift).
Yeah I did end up using deleteRowsAtIndexPaths. But I just wanted to know why this error was occurring. I get that I'm not removing the record form the tableview itself, but I am removing it from the tableview's source, and then telling the tableview to reload all of it's data. If the error is occurring because of what you said, then that's interesting to know. I thought that the tableview would just forget all it's current data and get it again from the data source. It wouldn't matter if a row's data was deleted, the tableview wouldn't care about it anymore because it got new data, whether the new data is same or not. I should read up more about reloadData()
I remember something similar. I basically declared a triple as a let and appended it that way. Not sure if it still works though, can give it a shot
Okay so first, the error is telling you that the function "append" doesn't have an argument declared to match up with the second parameter you're giving it. Essentially, it's interpreting the passing of the tuple as the literal list of parameters to the function rather than a single tuple argument. Second, I can not reproduce your success with the string interpolation in an isolated test case. Something else must be causing it to work when it works for you. I am able to approach it with a let. In the following code, neither of the two commented out approaches work, but, the final approach does, in a playground: var items: [(String, String)] = [] var x: String = "x" var y: String = "y" //items.append(("x", "y")) //items.append(("\(x)", "\(y)")) let item: (String, String) = (x, y) items.append(item) 
ERRORLOG: 2014-12-19 19:06:51.970 movieTest[21708:652723] Unable to simultaneously satisfy constraints. Probably at least one of the constraints in the following list is one you don't want. Try this: (1) look at each constraint and try to figure out which you don't expect; (2) find the code that added the unwanted constraint or constraints and fix it. (Note: If you're seeing NSAutoresizingMaskLayoutConstraints that you don't understand, refer to the documentation for the UIView property translatesAutoresizingMaskIntoConstraints) ( "&lt;NSLayoutConstraint:0x79eb7ab0 H:|-(34)-[MPKnockoutButton:0x79e99d70](LTR) (Names: '|':_UIBackdropContentView:0x7a0d2bc0 )&gt;", "&lt;NSLayoutConstraint:0x79eb7b20 H:[MPKnockoutButton:0x79e99d70]-(34)-[MPDetailSlider:0x7a0cd800](LTR)&gt;", "&lt;NSLayoutConstraint:0x79eac100 H:[MPDetailSlider:0x7a0cd800]-(34)-[UIView:0x7a0ce1c0](LTR)&gt;", "&lt;NSLayoutConstraint:0x79eb7ae0 UIView:0x7a0ce1c0.right == _UIBackdropView:0x7a0a11e0.right&gt;", "&lt;NSLayoutConstraint:0x7a0c57a0 H:|-(0)-[_UIBackdropView:0x7a0a11e0] (Names: '|':MPVideoPlaybackOverlayView:0x7a0d3880 )&gt;", "&lt;NSLayoutConstraint:0x7a0af2c0 H:[_UIBackdropView:0x7a0a11e0]-(0)-| (Names: '|':MPVideoPlaybackOverlayView:0x7a0d3880 )&gt;", "&lt;NSLayoutConstraint:0x7a0ce550 H:[MPVideoPlaybackOverlayView:0x7a0d3880(0)]&gt;", "&lt;NSAutoresizingMaskLayoutConstraint:0x7a0a5f20 h=-&amp;- v=-&amp;- _UIBackdropContentView:0x7a0d2bc0.midX == _UIBackdropView:0x7a0a11e0.midX&gt;", "&lt;NSAutoresizingMaskLayoutConstraint:0x7a0a5f50 h=-&amp;- v=-&amp;- _UIBackdropContentView:0x7a0d2bc0.width == _UIBackdropView:0x7a0a11e0.width&gt;" ) Will attempt to recover by breaking constraint &lt;NSLayoutConstraint:0x79eb7b20 H:[MPKnockoutButton:0x79e99d70]-(34)-[MPDetailSlider:0x7a0cd800](LTR)&gt; Make a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch this in the debugger.
it was hard, yes, thanks!
I see. Well it's just confusing to have the append method interpret the tuple that way when it was clearly declared that the array holds tuples. So, from that, I realise that to append a tuple to an array we just do: items.append("x", "y") //or items.append("\(x)", "\(y)") We just don't need a second set of parentheses!~Eureka? haha. Can't believe no one else has mentioned this before in so many places where this problem has been brought up. Thanks for taking the time to help out It's still confusing because if we use let item = (x, y) and then do items.append(item), the variable item will be read as (x, y) so it should be the same as doing items.append((x, y)) By the way, doing items.append(x, y) gives an error saying "Accessing members of protocol type value 'String' is unimplemented". Do you know why that's happening? Also, from your previous code, you could also do items += [("x", "y")] //or items += [("\(x)", "\(y)")] //or items += [(x, y)] As long as the object on the right And the object on the left are both arrays.
Thanks so much for taking the time to post an answer.. I thought it was something silly going on. Made my day! 
Yeah, thanks.
First off, I believe everything demonstrated here is undesired behaviors. As for the items.append("x", "y") and why that works, and why items.append(x, y) doesn't, I believe it boils down to overloaded method selection and is a great example of why overloaded methods is a stupid language feature. You have no idea which method/function is ACTUALLY being called. command click in the IDE just takes you to the first match for the most specific type (Array extension append.) The reason I think this is because while items.append((x, y)) does not work, the following does: items.append((x, y) as (String, String)) Since it has an explicit cast, there is more specific type information than an anonymous inline tuple might have. It's a sign the x and y aren't really String at this point, or the the tuple's type is being decided by the oddities of the overload selection process or even both. One issue is that Array and String can both actually be NSArray and NSString wrapped in a compatibility layer. That could be part of the problem too. As for your additional examples... while they may work, it's silly to create an array just to throw it away. Ultimately, the version I would use which I believe will be most resilient to bug fixes in the future is: items.append((x, y) as (String, String)) 
var myArray = Array&lt;Optional&lt;(String,String)&gt;&gt;() myArray.append(("Test","Test2")) I think this works?
lol that does work. I've never used that syntax before, doubt I'll ever be using it. Good find though.
Insightful. Good info.
Yeah that is the best way to do it then. Nice find.
These work as well var myArray = Array&lt;(String,String)!&gt;() myArray.append(("Test","Test2")) and var myArray: [(String, String)!] = [] myArray.append(("Test","Test")) 
This was a horrible decision, bot. What if Objective-C developers want to or don't yet know that they want to learn Swift? Downvoted ;)
What if you create an array for all the sounds and a random number generator instead of writing those 2 lines?
That's what's happening actually. Choosedicesound returns a string with a file name. Do you mean just have the function do the initialization and playback all in one? I guess that's an option. It's a one-second sound, speed shouldn't be an issue. 
Exactly, all in one, I'm not sure about what's causing ur trouble, but that might be a possible solution?
Swift Programming from Scratch -&gt; www.weheartswift.com/swift-programming-scratch-100-exercises/
Yup, thanks, that header really slipped past my eyes.
Building off of WedgeSparda's and jellevdv's recommendation, I would recommend building a REST API into your server. Going this route, all the information your server gathers from these websites could be stored, serialized and then sent as JSON objects or XML. Your app could then parse that information and present it to the user however you see fit. 
I think you're right... solve the problem by just avoiding it altogether! I'll do that so I can move on to more interesting dilemmas, thanks for the suggestion!
Okay, really weird, maybe this is just a bug or maybe it's still a scope issue that I'm not understand. As a shortcut to implementing your idea I just stuck a player.play() call in the main init() of the dice sound effect... so as soon as the sound is initialized it just plays. This worked... the app starts up and the sound plays, then plays every time I click the button. So then I uncommented the line that selects a new random sound effect when the button is pushed (so it plays a sound, then puts a new sound into the variable). Now it works! Mind you it plays a new sound effect when I push the button AND when the variable gets initialized (thanks to the player.play() call in the init), but it works every time! If I uncomment out the player.play() call... everything goes silent again. All very strange, but now at least I have a way to make it work. Thanks again for the simple suggestion.
Isn't this called an RSS Feed?
Use insets on your cells instead of trying to resize it. The layout of cells is controlled by the table view, and its considered "hacky" to do it the way you are going about this. The other option just make a view within your cell be the one with rounded corners, and inset however much you want. Then just give the cell a clear background.
@IBOutlet lets a developer link variables to elements in the interface builder section in Xcode. A simple example: if a developer links an @IBOutlet of type UITextField to a text field they created in the corresponding view controller in a storyboard (by control click-dragging), then they can programmatically access the UITextField's text property to do further processing on user input.
/u/gamemasta0 pretty much summed it up but I'll add that IB stands for Interface Builder, left over from previous versions of XCode before the Story Board. Knowing the name helps with some of the context to understand what they are. If they were created today they would likely be called an SBOutlet.
Ok thanks so much!
Thanks so much!!!
That's not true. Interface Builder is still the name for the tool used to create storyboards and xibs. It's definitely still called Interface Builder.
Adding the (otherwise entirely non-functional) IBOutlet keyword in a @property definition makes this property show up in Interface Builder as a target for connections to UI elements in your nib or storyboard. That's all. IBOutlet and IBAction are the two ways you make your ViewController code talk to and receive input from the View you build in Interface Builder.
It's not even likely though. Storyboards are but one of many things that Interface Builder makes. That'd be like calling Xcode 'the .m file editor.' Interface Builder is a tool. It's a tool used to build interfaces in whatever form they may be, xibs, Storyboards, whatever cool stuff Apple wants to make next. It has always been and will likely always be Interface Builder.
Create a sequence of animations. Here are some resources: - https://www.weheartswift.com/introduction-scenekit-part-2/ - https://www.weheartswift.com/introduction-scenekit-part-3/
Well I'm totally willing to admit I'm wrong on this one so it's no big deal for me.
No I have not. What sort of stuff can I do there?
Consider using a [UIPanGestureRecognizer](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPanGestureRecognizer_Class/index.html#//apple_ref/occ/instp/UIPanGestureRecognizer) with **minimumNumberOfTouches** set to 2 attached to you SCNView.
I'm on my phone so not going to go into a lot of details but that's not really how segment controllers work (they're not associated with a specific sub view so to speak). You want to make an IBAction from the segment controller for the action indexChanged. Then in that action function you can get the segmentcontroller.selectedSegmentIndex. Then based on the selected index you can change your view how you want. 
so i would have to setup each view for each segment pragmatically? I can't just set it up in interface builder and connect them somehow?
Sure, here you go: This is the code that I place in my ViewController's viewDidLoad: method : let scnView = self.view as SCNView scnView.delegate = self scnView.play(nil) This is the implementation of the delegate method: func renderer(aRenderer: SCNSceneRenderer, updateAtTime time: NSTimeInterval) { println("This will be called before each frame draw") }
In Swift and Objective C, objects are deallocated when they are not referenced anywhere any more. When you set dice sound to the new value, there's no more reference to it's old value, and it is therefore deallocated. If you don't want to play multiple sounds at once, you can just switch the order of the two lines in "rollTheDice". 
Somewhere below, someone mentions that NSString vs. Swift's String might be the issue. This is exactly the reason. Lets examine the types in your code: textField1.text is a NSString. A variable of type NSString can be used just like a Swift String. The important part is that `(textField1.text, textField2.text)` has type `(NSString, NSString)`, not `(String, String)`, which is the type required by the append method. Tuples of NSString can not be automatically converted to their Swift counterparts, so that's where the problem comes from. When you do `("\(textField1.text)", "\(textField2.text)")`, you get a tuple of type `(String, String)`, because string interpolation results in Swift strings, not NSStrings. As for the `items.append("x", "y")` thing, that is actually pretty interesting. Seems that you can use tuples and multiple parameters interchangeably (I knew that it works the other way, i.e. you can pass a single tuple to a method that has multiple parameters), but I did not know it works the other way round too (pass multiple parameters to a function that takes a tuple). However, in this case, Swift is able to convert the NSStrings to String, because the append function works like a function that takes two Strings, and each string can be converted separately. When you use `array += [...]`, you get the exact same type problems, so that doesn't help you at all. A possible solution: let tuple: (String, String) = (textField1.text, textField2.text) myArray.append(tuple) TLDR: Swift can convert NSString to String automatically, but not (NSString, NSString) to (String, String). 
yes, anything is possible. You will have to create a CGPDFContext and write the image to it. http://flylib.com/books/en/3.310.1.74/1/