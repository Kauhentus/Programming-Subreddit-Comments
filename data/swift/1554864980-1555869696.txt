&gt; It is anchored to the top and bottom of the screen so its height should be the screens height right? Anchored using constraints, or anchored by you dragging it’s boundaries in the storyboards? If it’s just the latter it likely won’t do what you’re trying, and even if it’s the former, it’s possible that it was necessary to break those constraints to resolve a conflict.
Wow, that looks fantastic! I’ll make sure and download this when I’m near my Mac!
The language should just disallow shadowing. What is the benefit of re-using the same name? It’s confusing and hard to comprehend when shadowing happen.
No, it does use "object" to refer to instaces of classes, structures, and enumerations. [For instance:](https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html) &gt; A type must be hashable in order to be stored in a set—that is, the type must provide a way to compute a hash value for itself. A hash value is an Int value that is the same for all objects that compare equally, such that if a == b, it follows that a.hashValue == b.hashValue.
I think that would be a significant regression in ergonomics. Take parameter names, for example: struct Dog { var name: String init(name: String) { self.name = name } } We'd have to change it to `init(name aName: String)`, adding an extra label to many (most?) initializer parameters. We also could no longer do things like `guard let superview = superview else {`, we'd have to say `guard let mySuperview = superview else {`.
We're a long way from Swift being performant enough for *all* new systems development to be done in it. There was some debate recently on the Swift forums where someone was pitching adding Swift-native compression algorithms in the standard library. The guy who wrote some of Apple's compression libraries basically said Swift versions would be several times slower than the C and assembly implementations that people ship today.
Do you have to be able to fetch new images from a remote location? If they’re promo images you could ship them with them app maybe?
Hmm, interesting. I was thinking of this: &gt; An instance of a class is traditionally known as an object. However, Swift structures and classes are much closer in functionality than in other languages, and much of this chapter describes functionality that applies to instances of either a class or a structure type. Because of this, the more general term instance is used. (from the [Structures and Classes](https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html) chapter)
Yea unfortunately they are updated a few times a month.
JSON.stringify(). You read that right, return a string, then deserialize it in your code.
What’s “map”?
Let's say you have a complex problem that takes about 2000 lines to solve but you want only 1 public class with 3 public functions for it. If you split that up into multiple classes in multiple files that know about eachother, they still won't litter your autocompletion.
Questioning all my life decisions.
https://en.m.wikipedia.org/wiki/Map_(higher-order_function)
Desktop link: https://en.wikipedia.org/wiki/Map_(higher-order_function) *** ^^/r/HelperBot_ ^^Downvote ^^to ^^remove. ^^Counter: ^^250093
**Map (higher-order function)** In many programming languages, map is the name of a higher-order function that applies a given function to each element of a functor, e.g. a list, returning a list of results in the same order. It is often called apply-to-all when considered in functional form. The concept of a map is not limited to lists: it works for sequential containers, tree-like containers, or even abstract containers such as futures and promises. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/swift/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
You are inserting each new layer at position 0, i.e., the bottom. Each new layer keeps getting added underneath the previous. Simply remove the old layer and the new layer will show up.
Hopefully start an Apple Watch app with firebase. Complete a few new updates versions of my current timer app EveryTime.
I’m looking for a good tutorial series, set of articles, or book on intermediate/advanced animations in swift. I’ve been looking for something comprehensive but most I find are single examples or useful tips and tricks. Thank you!
why does UIKit (swift too maybe?) go crazy with overload methods. For example in UICollectionViewController override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -&gt; CGFloat almost every method has the method name and I have to find the method i want based on the param type. I come from a Java background and I have never encountered so many APIs with an absurd amount of overloaded methods. What is the reason for this, am i overreacting?
Neither of those is an overload, they are different methods. You can also autocomplete them by using the second part of the method signature (numberOfItemsInSection, cellForItemAt...). The reason behind them all starting with collectionView is because they also take the actual object as a parameter in case your method handles more than one collectionView in this case. It's simply Swift naming style to have the name of the first parameter as a start of the function sometimes.
&gt; Method Overloading is a feature that allows a class to have more than one method having the same name, if their argument lists are different. They have the same name, collectionView right?
Yeah I didnt add the class properly thats why it wasn't working.Thanks
He’s trolling.
Map seems to be doing loops O(N). Looks like split+joined still need to loop O(N) and generate ArraySlice and loop O(M) again to recombine them, where M is a number range of 0...N Is there something clever that split and joined something smarter than O(N)+O(M)?
Started a new job last week. I am super exited to start working on the application(Cannot name the client because of business reasons) which is multi national(Localisation) and complex at the same time(mapKit, payment gateway, etc). Coming from a startup, working in a large corporation with all the "processes" and communication channels excites me at the moment.
I’m pretty sure there is an apple sample for photos on tvOS if you search around.
I continue with my one day a week working on a mobile travel diary. Currently the iOS app has the main focus. I use the Google Cloud with Firebase, Firestore, Storage, AppEngine etc as a back-end. I document the whole process on Youtube, so if you are interested to see what is necessary for building a real-life and complete app. Just have a look: [https://www.youtube.com/channel/UCK1zKCoLY61Xb9UgGyjGarQ](https://www.youtube.com/channel/UCK1zKCoLY61Xb9UgGyjGarQ)
im on day 6 thank you so much for doing this!!
Yes, but there's more to this than just being an overload. If you look at the ObjC implementation of the same methods: - (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section; - (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath; You'll notice a distinct naming style and ordering of the arguments. Note that Objective C does not support overloading, and these are different methods. In order to keep the signature the same in Swift and interoperability (I believe most of the UIKit is still written in Objective C, iirc), the Swift methods keep the same naming style, only in this case, the first argument also becomes the name of the method, e.g.: func collectionView(collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell In this case, I omitted the _ at the start of the list of the arguments, which will make for a very clumsy usage: let cell = collectionView(collectionView: myCollectionView, cellForItemAt: indexPath) It's better in this case to let the first argument seep out of the argument declaration and put it in the function name (use the _): func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell So if you needed a function such as this one somewhere else: let cell = collectionView(myCollectionView, cellForItemAt: indexPath) you get a much cleaner implementation. Tl;dr - Objective C.
It would be funny if it would not be so silly. Your sample is not about what the library handles int general. You keep pointing me to the to of the mountain while i am talking about the whole thing. The article is exactly about the problems i listed. Everybody know how to present view controller modally, of how to deal with the chain of responsibilities. When they need to handle the issues listed they may create their own solution or use this one. The article is actually about Coordinator pattern and its potential weak sides when comes to handle this cases. Meanwhile, we are talking about "chalk and cheese" Eventually, we are both happy and can return to the complicated things we both handle. Here i finish this conversation.
Many of the .NET developers use Windows, some because they are working with .NET Framework and not Core, some because of Visual Studio, and some because they like Windows I guess. But, you are definitely not stuck on Windows, .NET Core is cross platform, and does work well on MacOS and Linux (I've tried using both and I didn't see any problems). You can use VS Code, or any other editor that you like, but I would recommand Rider, which in my opinion is the best IDE for .NET after Visual Studio.
tl;dr: the function signature works differently in Swift/Obj-c compares to some other languages. I will use C as an example. C uses token in front of the bracket as the signature of the function. Swift/obj-c using tokens in the bracket as well for the signature. Consider the Following: \`\`\` // signature in C : complexAlogrithm int complexAlogrithm(float age, int year, int month, double moonPhrase) { // implmentation } // calling the func in C, complex( 18, 2019, 4, 3.567 ) // this becomes unreadable as number of arguments grows &amp;#x200B; // signature in swift: complexAlogrithm(age:year:month:moonPhrase:) func complexAlogrithm(age : 18, year: 2019, month: 4, moonPhrase: 3.567 ) &amp;#x200B; // The signature is long, but it pays off in a long run when things get super complex complexAlogrithm( age : 18, year: 2019, month: 4, moonPhrase: 3.567 ) \`\`\` now, if you look closely the signature of the functions are: \`\`\` collectionView(\_:numberOfItemsInSectionsection:) -&gt; Int collectionView(\_:cellForItemAt indexPath:) -&gt; UICollectionViewCell collectionView(\_:layout collectionViewLayout:minimumLineSpacingForSectionAt section:) -&gt; CGFloat \`\`\` \* let me know if any terminology is incorrect
Is it (or what is) the best practice to use key-value-observing ([link](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html)) for tableView/collectionView? Is KVO meant for UI, acting like states? or mainly for non UI classes?
i have been trying to learn swift for the past 3 years and i still have no idea how do i even make an ui view
If this is for macOS, you should use a delegate for your textfields. I'm on mobile so I can't check docs to see what function you have to implement, but there's one such as shouldEndEditing or similar where you could verify there's only 1 point in the field.
You should be using UITExtFieldDelegate for something as simple as this. Creating your own custom keyboard would be overkill.
A pdf might be better. Then you can use some OCR to retrieve the data so you dont have to store it elsewhere.
Can you elaborate.Im still new to Xcode so I’m trying different things
Other than compiler optimization then no, as I said I think `map` is a better choice for many reasons. Using `split` and `joined` might signal intent better but not be as efficient. Of course on a small `Array` Of less than a couple of thousand elements efficiency really doesn’t matter too much. Sometimes self-documenting code is more important than efficiency.
Are they updated _onto_ the devices? You can just access them using the Photos framework if so
parameter names are part of the method name in ObjectiveC and Swift.
If you're trying to convert HTML text to normal, human readable text, use my String [Extension](https://github.com/kinngh/Swift-Extensions/blob/master/string/html_to_string.swift) Also, you can just create an instance of [Mercury Parser API](https://github.com/kinngh/mercury-parser-api) to pull text from Wiki and other websites, well most of them. This is a modded version I forked to remove the keep alive function and to keep the API calls in the free range for Lambda.
Have your text field’s delegate implement the [textField(_:shouldChangeCharactersIn:replacementString:)](https://developer.apple.com/documentation/uikit/uitextfielddelegate/1619599-textfield) method. In this method you return false when you don’t want a certain change to happen to the text.
Can anyone recommend a good tutorial on preventing memory leaks? The general concept is fairly simple, but a bunch of examples would be really helpful.
There's usually no need to use KVO in Swift, but that really depends on your specific issue. KVO is a part of ObjC, or Smalltalk, where [message passing](https://en.wikipedia.org/wiki/Objective-C#Messages) is a part of the architecture.
Your didset will be called when the label is set, not when the label’s text is set. That’s not what OP wants.
You can start here: https://www.swiftbysundell.com/basics/memory-management or here: https://www.raywenderlich.com/959-arc-and-memory-management-in-swift if you want more detail.
 let view = UIView(frame: CGRect(x: 0, y: 0, width: 100, height: 100)) addSubview(view) In case you're not trolling.
Yeah I still have almost no idea how that even works
Define a frame for the view you're creating. This one will start in the top left corner (x = 0, y = 0), and have the size of 100x100 (width = 100, height = 100). let frame = CGRect(x: 0, y: 0, width: 100, height: 100) Use the above defined frame to instantiate a new view: let subview = UIView(frame) Add the view as a subview to the view of the viewController (the assumption is that this code is inside a viewController class, which will already have a view defined). view.addSubview(subview) Not really much to this, if this presents an issue, I suggest taking a step back and starting learning from variables and constants, some objective oriented programming, algorithms and structures to learn the basics.
Ok thx I understood now something
Sometimes I need both, so I use the `enum`'s `case`s as the raw values of the `OptionSet`
Absolutely, PM me your info so I can add you to TestFlight when I get to that point? Should be ready soon, I just added a Today widget extension today and need to pretty it up a bit, after that I can build and submit for beta testing. Thanks for asking!
Yes I'll be updating the photos via iCloud from my computer. I just don't know where to begin using the Photos framework. I've searched for tutorials since I'm still new to development but haven't found anything that really gets me started. I just need a little guidance to get started. Thanks
I've searched, no luck.
I guess I'm old skool. But what about this? `var arr = ["A", "B", "A", "C"]` `print (arr)` `for i in 0 ..&lt; arr.count {` `if arr[i] == "A" {` `arr[i] = "B"` `}` `}` `print (arr)`
or just use javascript to access the document of the wkwebview
Just keep in mind that such a thing can’t be your only line of defense against invalid data. Many users will be using a Bluetooth keyboard for data entry.
I'm currently working on it now for my job. Not gonna lie to you, it's horrible to work with haha. Give this a read: https://www.objc.io/issues/21-camera-and-photos/the-photos-framework/ And heres some sample code: https://developer.apple.com/library/archive/samplecode/UsingPhotosFramework/Introduction/Intro.html#//apple_ref/doc/uid/TP40014575 https://github.com/ooper-shlab/SamplePhotosApp-Swift
Thanks so much. I'll dive into it once I get to the office in a few. Also thanks for the heads up.
No worries man, good luck. Just remember that PHAssets just represent an image. To get the actual UIImage you need to request it using an instance of a PHCachingImageManager. You also need to make sure all you're authorised to begin with - using some class methods on PHPhotoLibrary. It'll be a headscratcher but you'll get it
AWESOME!!! LoL thanks again.
OMG! I am using Stringify for the payload before I put it to the WebView!! I never thought of grabbing it out that way! Heck I even have to wrap the json in another json parent....don't ask, its how the back end wants it. &amp;#x200B; dear lord man!
I think you should add “solved” to the title just so redditors could check the helpful answer here
Well if you have optimized assembly there are few compilers that will beat that. One could merge that ass only with the Swift code if they really don’t wanted. In any event I see huge long term advantages for Apple to move development to Swift.
Typing this into google: “tvos icloud photo API example” Yields: https://developer.apple.com/documentation/photokit Scrolling down to “topics:” yields this link https://developer.apple.com/documentation/photokit/browsing_and_modifying_photo_albums Which has a download button. Seems a good start.
I'm not aware of any Apple API or framework you can use for SSH. A quick Google didn't turn up anything for me. You will likely need either implement the SSH protocol yourself or integrate with a library that already has.
Im on my phone at the moment, but I remember for one value I ended up deciding the properly to a private nullable bool, then exposing a public property that returned `bookmarked ?? false`
That's a good idea, thank you. It's unfortunate we have to result to stuff like this though… Codable is so rigid. It's not a good tool when you need to deal with poorly designed APIs.
I've been searching more than a 3 hours and I found some things but they need installing things with terminal and implementing it to Xcode project, but couldn't understand it
https://developer.apple.com/documentation/uikit/uiresponder/1621092-inputview
I think I ended up overiding `init(from: Decoder)` for complicated JSON, and doing the private method for stuff where only one property was likely to be null. You're right, it's annoying when JSON responses are poorly documented and don't behave as you would expect! I imagine whoever wrote that api is using something like JS where null is "falsey" so returning null or false would have the same effect. Very annoying if you're using a strongly typed language though!
Awkward. It's actually the API for the open source forum used by the Swift Forums 😬
I have an app that deals with a similarly annoying API. In the end I implemented the Decodable initialiser myself because I couldn't find a nicer way to do it. It would be nice if (among other things) there was a more flexible way to decode Bools. There are lots of APIs that use 0 and 1, and others that exclude key-value pairs when their values are false, neither of which can be handled out of the box. There are lots of posts on the swift forums about these kinds of limitations so I guess it's only a matter of time before it gets addressed.
Yeah. But not even just bools. There should be a more generic way of providing default values where `null` is given or where no key is found. There's a lot wrong with Codable, I think they'll fix it soon when more important things are off their plate :/
Angela on udemy should get u going
Yes. I always pick the closest keyboard as possible, perhaps add some characters or a next button in the accessory view that aren't there by default and filter out the input. But then the API still needs to be bullet-proof
&gt; Codable is so rigid. It's not a good tool when you need to deal with poorly designed APIs. It's designed that way. It's great for simple cases. It's not meant to be the end-all-be-all of serialization systems.
I disagree. It should come darn close, or at least, closer. It's pretty much useless for most meaningful cases imo. It can't even be used properly for the Swift Forums API without loads of boilerplate, as you can see. I think it was just designed without real world use cases in mind.
Another important change in Swift 5 is the Exclusivity Enforcement in release build in Swift 4 it was available in Debug builds. It helps to eliminate bugs and security issues, ensure binary compatibility, and enable future optimizations and language features. [https://medium.com/swiftify/exclusivity-enforcement-in-release-build-in-swift-5-abd751432035](https://medium.com/swiftify/exclusivity-enforcement-in-release-build-in-swift-5-abd751432035)
How about naming member variables differently? This has been done very often before in other language. struct Dog { var 🌀name: String init(name: String) { 🌀name = name } } guard let superview = 🌀superview else {_ Would this little defensive programming be a goos practice for Swift code? This would totally avoid this local variable shadowing problem. It’s probably too late to make this a language requirement . But it’s a very bad thing to have if introduce a local variable can cause silent error.
You can make the coded property private and optional and add a calculated property that returns the private property or the default value.
Released Monarch Trips - a flexible, collaborative travel planner for iPhone last month. Many users wanted a iPad version so just released that yesterday. &amp;#x200B; App Store Link: [https://itunes.apple.com/app/id1454473627#?platform=ipad](https://itunes.apple.com/app/id1454473627#?platform=ipad) Landing Page: [https://monarchtrips.io](https://monarchtrips.io)
I always use it. It helps me know the variables scope just by looking(like you said, for clarity), and it's not like they'll ever remove/deprecate it. Not having to use it is a neat shortcut, but I don't want to get confused in the future, so... I use it.
You should check this lib: https://github.com/JohnSundell/Codextended/blob/master/README.md
Seen it, doesn't help at all in this scenario sadly. Thank you though!
I have an iPad client for a terminal that connects to servers via SSH, so it must be possible.
You should define this type as optional. If the conversion fails, let it be nil. You should not define default values in your decode process, only the consumers of that field should actually know what to do if the property is nil, which you can handle nicely inline with nil coalescing.
You can replace `return String(self[Range(start ..&lt; end)])` with `return String(self[start ..&lt; end])`. You also need to change `startIndex` to `start` in `let end = index(startIndex, offsetBy: r.upperBound - r.lowerBound)`. Having said that, why are you doing this? Do you really need random access to the contents of Strings?
So make it optional, and if needed make a different version of the object to use in your app which you convert from. &amp;#x200B; struct MyJSONObject: Codable { var bookmarked: Bool? } struct MyModelObject: Codable { var bookmarked: Bool init(\_ jsonObject: MyJSONObject) { self.bookmarked = jsonObject.bookmarked ?? false } }
String(self.prefix(r.upperBound).suffix(r.upperbound-r.lowerbound))
You've got a lot of "if let ..." and "try?" and "if isEmpty" and "as?", and never an "else" clause. Are you sure defaults.set(...) is being called?
I've checked, and am pretty sure it's being called as intended.
I'm not worried about strings here. I'm worried about Boolean or integer values which have a sensible and expected default value.
**func** checkFor(**\_** searchName: String, in names: \[String\]) -&gt; Bool { **for** name **in** names { **if** name == searchName { **return true** } **else** { **return** **false** } } } &amp;#x200B; This returns an error, saying it 's missing a return. Why is that? My guess is that it's the nature of "for loops."
Yeah, it’s probably an NSToolbar with its parent window set to hide its title, with the center view being a custom view based NSToolbarItem. I don’t have my Mac handy to try, but if you want to know exactly how it’s composed you might be able to launch a second instance of Xcode via the terminal, open a Mac xcode project in the first Xcode instance, attach the first instance’s debugger to the second instance, and then use the first instance’s exploded UI view. I’ve used this technique for other Mac apps I’ve been curious about in the past.
Awesome, I’ll give that a try. Thanks.
The technique you are looking for is called A-star (Often stylized as A*). I would highly recommend learning how it works, it’s pretty cool. But there definitely should be about a million implementations of it on the web.
I typically separate my network parsing in two: the type I want to use and the type that matches exactly what's returned from the network. My internal type may not even be `Codable` but the network type obviously is, and since it matches the network response, the synthesized conformance works fine. Then I just tie the two together in an initializer for the internal type. I perform my validation, default fallback, and other transforms there. It's a bit verbose since I don't have any generation going on, but hooking the network types into something that generates them from JSON shouldn't be too hard. But overall everything gets to keep its synthesized conformances and I have direct control over what happens in the middle, so no need to write `Codable` directly.
You're using defaults.set() and defaults.object(). Are you assigning that with something like the following in code that you did not include? let defaults = UserDefaults.standard When I've used UserDefaults in the past I've done To Save: UserDefaults.standard.set(valueToSave, forKey: keyString) To Load (since you know that you're saving encodedData): let retrievedValue = UserDefaults.standard.data(forKey: keyString) If that doesn't work, my only other guess is that maybe UserDefaults is really strict about the data types it saves, but retrieving data specifically will return the "Data" type, just because it's Swift. From the documentation page: &gt;A default object must be a property list—that is, an instance of (or for collections, a combination of instances of) NSData, NSString, NSNumber, NSDate, NSArray, or NSDictionary. If you want to store any other type of object, you should typically archive it to create an instance of NSData. https://developer.apple.com/documentation/foundation/userdefaults The function: NSKeyedArchiver.archivedData() Is returning "Data" not "NSData" https://developer.apple.com/documentation/foundation/nskeyedarchiver/2962880-archiveddata
Interesting approach! Thanks for sharing ☺️
Thanks for the really detailed reply. &amp;#x200B; Yes, I've declared the following in the ViewController class. let defaults = UserDefaults.standard &amp;#x200B; I just tried typecasting the returned Data from NSKeyedArchiver.archivedData() as NSData as follows: do { let encodedData = try NSKeyedArchiver.archivedData(withRootObject: pictures, requiringSecureCoding: false) as NSData defaults.set(encodedData, forKey: Keys.pictures) } catch { print("Cannot encode data: \(error)") } But this is not helping either.
If you're using an older textbook and the newest version of swift - it may be out of date. Swift is pretty bad with the yearly updates and old tutorials. From the error - it sounds like something under userCameraRoll() is a badvalue. comment out the lines one by one and rebuild to see if that's the issue. I'm not pretty crappy with Swift and don't use it much, so hopefully someone else will give a better answer.
&gt; NSUnknownKeyException Did you declare camera usage in your plist
OK, we have no idea what's in your textbook. It looks like somehow, you have set up the camera object within the instance of your view controller to be directly called when you wired up your IBAction for useCameraRoll. In the storyboard, and in the scene for your view controller, right click on the button that you have wired to useCameraRoll. See if you also have it wired to more than one object. Also, which line in the above is causing the crash? Which version of Xcode are you using and which version of Swift are you compiling for?
In storyboard, Ctrl click on whatever button you attached to useCameraRoll() and make sure it’s still connected; most likely it isn’t.
In your save method you never call the synchronize method. That is why it isn’t saving. You have to call this to sync the data after you change something. https://developer.apple.com/documentation/foundation/userdefaults/1414005-synchronize
Mostly I use MVC, but since I started to use flutter (which is state-based UI), I have started to think that MVC could benefit from state-based KVO in some specified case. i.e. an array for tableView got updated which trigger the comparison and do the batch update accordingly. This would make the tableView/collectionView more autonomous by have one interface with the "otherside", the array and only.
You haven’t needed to call synchronize for awhile now. From the docs: &gt; this method is unnecessary and shouldn't be used.
I’ve seen some libraries that wrap the C implementation of open SSH. I found this one just now. Never used it before, so I can’t vet it at all. https://github.com/jakeheis/Shout
I think the following might be your problem `displayCount = aDecoder.decodeObject(forKey: Keys.displayCount) as? Int ?? 0` if you change this to the following does it work? `displayCount = aDecoder.decodeInteger(forKey: Keys.displayCount)`
The Accessibility Inspector app (one of the additional developer tools that comes with Xcode) can also often provide information about these things. In those case it shows it as being a `NSToolbarView`
You are right, this is why i found the split+joined more intuitive, and hoping to find if it could match the efficiency of map/for-loop. \*insert Thanos disappointing meme here\*
Working on added some new feature to a few apps: - Business Model Canvas ([link](https://agents.page.link/r-store)): and iPad as what the name suggest for creating business model canvas. Adding iPhone support, tough one due to design constraints. - Coldsnap ([link](https://agents.page.link/cs-r-store)): motion trigger video camera app,. Looking at either updating or porting this to flutter. - Canton Fair Buddy ([link](https://agents.page.link/cb-r-store)): trade show photo note app. Looking to improve local notifications by having it sync with a remove source so it can be updated without updating the app.
I am curious, what inspire you to create a markdown editor?
I am still pretty new, so I didn't really know how to change the completion block. But with much googling and trial and error, I discovered that using async, I could effectively tap into the view's dimensions as they would be after the device rotation had completed. I pasted a code snippet of what I did into he original post. &amp;#x200B; I will look into the completion block a bit further as it seems like it might be a better solution.
Works like a charm! Thanks u/g-Off!
Are you testing on device? UserDefaults might still be faulty on simulator.
He set an IBOutlet first and only deleted it in code.
I'm using the simulator. &amp;#x200B; I got it to work after correcting the line of code in my Image class, using aDecoder.decodeInteger(forKey:) instead of aDecoder.decodeObject(forKey:), as pointed out by u/g-Off. &amp;#x200B; Is aDecoder.decodeObject(forKey:) supposed to work for integers?
I found it while searching but I didn’t know how to add it to my project
You should take a look at [MVVM w/ reactive](https://hackernoon.com/mvvm-rxswift-on-ios-part-1-69608b7ed5cd) for such paradigm then. KVO is only available if your objects inherit from NSObject which is not something intended to be used that way in Swift.
The names array can be empty in which case your for loop won't be entered and the function can't return a value. Add a return outside the for loop.
iTunes university, iOS course from Stanford is the way to go.
Thank you for pointing a the right direction
I suppose you don't want to return false without check the whole array. You meant keep looping till the end and return as soon as the name is found. Try the following: ``` func checkFor(_ searchName: String, in names: [String]) -&gt; Bool { for name in names { if name == searchName { return true // return as soon as the name is found } } return false // return false only when finished loop the whole array without find the name } ```
Ah, I think I see the issue. Calling background threads (like calling this function from Siri Shortcuts) typically initiates a new instance of this class, so the one used by the shortcut is different than the one used by the app, so after it’s done that instance of the class no longer exists. My suggestion would be to use UserDefaults so save the shuffled order and get that in the main app, that way no matter when the user goes back to the app that will be available. Another suggestion would be to use a singleton, but if your app is ever unloaded from memory (I.e. the user doesn’t open your app for a while) then that data will be lost. Hope this helps!
Thanks! I should have mentioned this, but I actually am using a singleton. I've got my Shuffle class, of which those functions are members, and I have it initialized globally as shuffleObj. The code in AppDelegate that calls the shortcut looks like this: func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -&gt; Void) -&gt; Bool { print(userActivity.activityType) if (userActivity.activityType == "com.talkingsmall.MusicTestShuffler.shuffleAllAlbums") { shuffleObj.shuffleAllAlbums() if let vc = window?.rootViewController as? MainScreen { vc.unHideNavButtons() vc.playAndChangeButton() } } return false } In the meantime, I'll play around with user defaults.
Cool! Happy to help out!
No thanks, I read Reddit for my news and posts.
Could you post text instead of images? It makes it easier to replicate and debug.
 `struct EkeyDetails : Decodable {` `let hwTTDetails : ekey` `let keyDetails : key` `}` `struct ekey : Decodable {` `let TimezoneRawOffset : Int` `let AdminPwd : String` `let LockVersionAndroid : String` `let LockVersioniOS : String` `let LockKey : String` `let AesKeyStr : String` `let LockMac : String` `let LockFlagPos : Int` `}` `struct key : Decodable {` `let roomNo : String` `let hotelName : String` `let startTime : String` `let endTime : String` `}` `self.components.scheme = "https"` `self.components.host = "us-central1-hotel-management-demo-73b23.cloudfunctions.net"` `self.components.path = "/fetchUserKey"` `self.components.queryItems = [URLQueryItem(name: "mobile", value: String(917987654322))]` `let url = self.components.url` `var request = URLRequest(url: url!)` `request.httpMethod = "POST"` `_ = URLSession.shared.dataTask(with: request) { (data, response, error) in` `let dataGot = try? JSONDecoder().decode(EkeyDetails.self, from: data!)` `self.roomNo = (dataGot?.keyDetails.roomNo)!` `}` &amp;#x200B; This is the code with the structure.
You’re force-unwrapping something that may be `nil`. You’re already using `let` with `try?` so why not change that into a `if let` and unwrap it properly?
I tried an `if let`, but I still cannot access the data. Also, I will keep in mind the upper and lower cases in the code. Thank you.
If the `if let` is failing then it’s probably an issue with decoding your JSON. Make sure your model matches the one in the JSON.
Can you post the text of the JSON you're getting as a result of the POST call?
What OS are you writing your app for? This appears to be focused on server side apps since it uses the Swift Package manager.
For iOS
D D (Oct. Higher) D A
Because a lazy property is only instantiated when it is needed.
Well I’m sure there is a technical reason for this but I’m kinda thinking it’s along the lines of this: Let’s say you have a lazy car and observe willSet. So your code is going to access the lazy var and it gets initialized, but wait! willSet gets called first and oh wait we gotta access this variable so we should initialize it, then it will call willSet again and loop. Please take this with a grain of salt as it’s a guess and correct me if I am wrong.
We did use Perfect Swift in our 2 projects. It was allright but sometimes it’s hard to find solutions as there is very few people that use it.
Use try catch for decoding. It will tell you where the error is.
It seems to be connected I just checked, I am going to open a new project and redo the connections and copy the code over.
To be interoperable with objectivec.
Was working on my first game which just got release to appstore few days back. Here is the link if anybody wants to try it. [Word Quest - Word Search Game](https://itunes.apple.com/us/app/word-quest-word-search-game/id1451966020?ls=1&amp;mt=8) &amp;#x200B; Currently working on HealthKit so that i can integrate it on my other app. Here is the link if anybody wants to have a look. [Gym Diary - Track Your Workout](https://itunes.apple.com/us/app/gym-diary-track-your-workout/id1328908841?mt=8)
Oh my god. Thank you.
That is the definition of a lazy property, yes, but it doesn't explain why they aren't allowed observers.
How can something that isn’t created yet observe something else?
You're right. Although this seems cleaner syntax than my approach, I wasn't sure if it's doing the same thing or not. &amp;#x200B; Ohh. If you use "else" (which I know now you can't do because loop might not even run thanks to empty arrays), it'll exit before checking the whole array. That's an important detail I completely overlooked. Thanks!
&gt; You’re force-unwrapping something that may be nil. ... &gt; Generally most Swift programmers use initial caps on types and lower case properties and methods. These may be true but they don't explain EXC_BAD_INSTRUCTION.
Previously, you claimed "this increment is not saved to UserDefaults". Did you not actually confirm that the value was saved? If this was the solution, then it sounds like the value *was* saved. You just weren't loading it correctly.
I have no idea what you mean by that. A property observer observes the property it's attached to, not "something else". Before it's instantiated, there's nothing to observe, so it wouldn't be triggered. After it's instantiated, it could work just like any other property.
Because they capture (mutable) context from their surrounding environment. If they always captured by value they could be values themselves, but then you couldn't use them in a lot of situations people like to use them (e.g. updating a local variable inside a dispatch_sync())
No reason, except they haven't gotten around to implementing it yet. One of the Swift core team [filed a bug](https://bugs.swift.org/browse/SR-7083) last year for adding that feature. In his words: &gt; Since lazy properties are supposed to look and feel like stored properties, they should be able to have observers.
nice. but the subject of protocols in your video is really about 7 minutes long. if you want to show how to setup a project with labels and buttons, then it's fine, but someone looking to learn about protocols and delegates is probably already beyond that point.
I see you're an Undertale fan as well 😜
That would imply that languages without this requirement would make them value types. Can you name any other language where that is the case? The whole point of a *closure* is that it *closes over* its environment.
Yes, I know that. I just wondered if anyone had worked with one of those implementations and could recommend it.
Not a problem. It's already the case that observers aren't called during initialization, or during the execution of one's own observer.
good to know! Ive updated my comment.
But if I did it your way, someone would comment “how’d you set up the project?” Can’t please everyone.
I gave you a specific example to generalize the approach. And what’s a sensible and expected default value for a number?
"here i have setup 2 views with a button and a text label, if you don't know how to set up a project see my 'how to setup a project tutorial'" you do defer some info to "look it up on stackoverflow" so you are already doing it. i'm saying staying on subject is more beneficial, just my advice. again, no one that doesn't know how to set up a project is wondering how to pass information from one view to another with delegates when they don't even know what a view is in the first place. just trying to help.
Well, it depends on the number. If the number is an identifier of some kind, then it makes sense for it to be optional `nil` is a good default. If it's something like `upvotes` then it should default to `0` and not be optional. It's absurd that Codable expects your APIs to always be well thought out. Instead we have to fight with it as well as poor APIs we need to work with.
You can write swift on the pi?
Sure, I do (with vim) but most people tend to write their stuff in Xcode and then scp it to the Raspberry Pi.
Sorry, I thought this was the Swift subreddit. If you want more detailed answer, here it is: https://medium.com/@oliver_hu/objective-c-blocks-ins-and-outs-840a1c12fb1e
It's all good, I appreciate you watching and the feedback. However, you assume that people working on delegates and protocols are familiar with outlets, and my experience doing YouTube videos has shown that total beginners will watch these videos. Also, I show them the way I do things in storyboard, which could give them a different perspective if they learned to do autolayout in code for example. I will add a timestamp in the description that lets them skip to when I first start, but most people still don't do that.
Any luck?
&gt; You should not define default values in your decode process, only the consumers of that field should actually know what to do if the property is nil This is backwards. If you're handling the `nil` situation in the consumers, then it's not a default value, it's consumer-specific handling. That's fine if you want that, but it's not providing a default – it's doing the exact opposite. &gt; What if class A wants the default value to be “title” and the other class wants the default value to be “a longer more specific title”. This should be handled by the consumers, but you aren't describing a default value here, you're describing a situation where you don't want a default value. The OP wants a default value.
I misread your OP. Rereading, it looks like at one point you had a property called useCameraRoll connected to your storyboard and then at some point deleted the property from your code? The error is saying that the reference is still set on the storyboard, but doesn’t exist in the code.
Interesting thanks for the info.
I am running a Swift 5.0 vapor 3 app on the last gen pi zero (32 bit), it works great without issue for me. But keep in mind, unless you setup some kind of complicated qemu/docker thingamajig combo to compile arm on your desktop, you will have to compile your Swift code on the pi for the built executable to work, which for a pi zero means an hour+ to compile a barebone Vapor project :) Enjoy
Just to give some feedback. I think I found what I was looking for... Pantry.fetchRequest().execute() This way it returns an `[Pantry]` and is less code than my first attempt.
I re made the whole project and it did work, I did it piece by piece and everything worked. Maybe I had a loose connection somewhere or something. Not really sure
Would [something like cross compilation toolchain for the Raspberry Pi](https://github.com/AlwaysRightInstitute/swift-mac2arm-x-compile-toolchain) be helpful? I know very little about cross-compilation, but if you can build ARM binaries on your Mac for an iPhone it seems like cross compiling for the Pi should be in the realm of the possible.
&gt; if you can build ARM binaries on your Mac for an iPhone it seems like cross compiling for the Pi should be in the realm of the possible. Yep, I haven't delved deep enough to understand exactly how the mac to iPhone(arm) compilation stuff works tbh.
I realized, on hindsight, that I should have pulled up the .plist file to check that if the value was saved. &amp;#x200B; Previously, I tried to verify if the data was saved by loading the data (to print) after the "if let ..." in the save() method; I wrongly assumed the issue was with saving the data.
&gt; the app also crashes. Also unsure why. What does "crashes" mean? Did you read the exception? What did it say?
&gt; Sorry, I thought this was the Swift subreddit. Yes, it is. Is this snark supposed to imply something? &gt; If you want more detailed answer, here it is: ... That article says nothing about Swift, value types, or reference types. I'm not sure why you think it's relevant here. What does Objective-C interop have to do with whether closures are value or reference types?
No, it's completely orthogonal to memory management. ARC is (AFAICT) unique to Apple's two languages. Other languages with analogous features, like Haskell, use different memory management systems.
I can’t make much of this one https://i.imgur.com/lPUzvOQ.jpg
`didSet` only fires when you’re not setting it’s default value but change it. `let` and `lazy var` never change. It probably has to do with `oldValue` only being available in that scenario.
Make a parametrized animation in Paintcode and then pass the parameters from the sensors to it in your app.
Value types are not reference counted and can conform to protocols.
Install vs code and download a swift plugin.
It would be really interesting to see what the differences are between the two. My guess is the "wiring" of the IBOulets or IBActions. It's possible that you have one hooked up to two things.
Are you sure that's the crash? It doesn't look like an exception or abort to me. If you step it with the debugger, can you tell the last thing it executes?
&gt; `let` and `lazy var` never change. Huh?
I'd have to assume that's due to something going wrong with the decode, of course any error being thrown in the `try?` is being converted to an `Optional` and details are getting thrown out. To see more detail about a decoding error you'd have to use `try` and `catch` to display exactly what's going on.
Go ahead. Try to change them.
Sadly just a signal 9 message.
Why not work upstream? The llvm community is welcoming to new ports, especially well maintained ones.
Follow the answer someone already gave there.
SpriteKit
Uh, OK: ``` $ xcrun swift Welcome to Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1). Type :help for assistance. 1&gt; struct S { 2. lazy var i: Int = 5 3. } 4&gt; var s = S() s: S = { i.storage = nil } 5&gt; s.i = 10 6&gt; s.i $R0: Int = 10 7&gt; ``` Now what?
9 is SIGKILL. The OS doesn't send that itself. Something had to have signaled that to your process.
i opened my project and i got a message that said "migrate to swift 5?" - i clicked yes and my project worked as usual
I’ll get back to this question in about 25. I’ll update once I find the real kill
No, they do not depend on it unless you explicitly make it so. You can define a protocol as being class bound, but it’s always the object itself that gets retained. Protocols are just interfaces. They are called ‘protocol’ because it encourages us to define them in a more behavioral sense, and compose our objects around them as opposed to defining the object first and deriving interfaces from that. (Hence protocol oriented over object oriented.) Generally speaking, ARC only cares about objects. So, unless the protocol is marked as being class bound, the compiler assumes that whatever implements it will be a value type, such as struct or enum. If a class is used to implement a regular, non-class bound protocol, then the compiler will use a strong reference, and you will not be allowed to declare it as weak. If you know your protocol will only be implemented by classes, (never structs), then you should declare it as class bound: `protocol Kaboom: class { /**/ }` Then you can use ARC annotations with them.
At my job, we call this deep dropping. Written in-house, it doesn’t just open based on a notification, but also a web link or a link in the app that takes you to another screen.
 I want to make a starting business which I make an app for coupons like Groupon. How hard is it for someone with zero experience in Swift? I know Matlab and there are some coding there but not as much as swift. &amp;#x200B; I want the app to have a front page and a side menu with different kind of stores (restaurants/clothing/etc) and each one of those leads to a page with like horizontal and vertical stacks of coupons and some ads. &amp;#x200B; Is it impossible without working on it full time? I am good at the modelling part but I am not sure if I can make the coding part if it will take several thousand lines of coding.
Apart the other answers, you could also use a regular expression.
Here’s a counterexample: NSArray is a reference type in Objective-C but is bridged to a value type in Swift.
I'm trying to understand the mutex in swift, and I'm confused by the code below. Why is my object of String array is not locked when I tried to add next element from another thread? class KekThread { private var mutex = pthread_mutex_t() init() { pthread_mutex_init(&amp;mutex, nil) } func safe(completion: () -&gt; ()) { pthread_mutex_lock(&amp;mutex) completion() pthread_mutex_unlock(&amp;mutex) } } var array = [String]() let kek = KekThread() let nsThread = Thread { print("nsThread sleep 2 seconds") sleep(2) print("nsThread append next element") array.append("nsThread") print("ns thread completed: \(array)") } nsThread.start() kek.safe { print("safe appending") array.append("kekSafe") print("doing sleep after job") sleep(5) print("wake up and print array") print(array) print("Exit") }
Because you are not locking on same mutex in separate thread. In order for it to work as expected you have to use kek.safe in second thread Thread { kek.safe { print("nsThread sleep 2 seconds") sleep(2) print("nsThread append next element") array.append("nsThread") print("ns thread completed: \(array)") } }
LOL, I stand corrected. I never used lazy vars for anything but static initialization I guess!
gr8 b8 m8
Yep, also, a lazy var only generates the initial value if it hasn’t already been set.
Lesson 4.7 of App Development with Swift just helped me do this using Codable protocol. Would recommend.
Sorry but could you elaborate
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/iosprogramming] [When should and shouldn't you use extensions in Swift?](https://www.reddit.com/r/iOSProgramming/comments/bcdhqn/when_should_and_shouldnt_you_use_extensions_in/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Here is a small example of a way you can do this. This is using a Type that already conforms to Codable (String), but you can apply this to any that does. func saveUserData(with dataToWrite: [String]) { let propertyListEncoder = PropertyListEncoder() do { let data = try propertyListEncoder.encode(dataToWrite) UserDefaults.standard.set(data, forKey: "data") } catch { print(error) } } func loadProductInventoryFromUserData() -&gt; [String] { let propertyListDecoder = PropertyListDecoder() var storedData: [String] = [] do { if let da = UserDefaults.standard.data(forKey: "data") { let stored = try propertyListDecoder.decode([String].self, from: da) storedData = stored } } catch { print(error) } return storedData } func saveUserDataTextField(with dataToWriteFromTextField: String) { let propertyListEncoder = PropertyListEncoder() var savedData: [String] = loadProductInventoryFromUserData() savedData.append(dataToWriteFromTextField) do { let data = try propertyListEncoder.encode(savedData) UserDefaults.standard.set(data, forKey: "data") } catch { print(error) } }
To retrieve the values saved in the UserDefaults you have to use the function: UserDefaults.standard.value(forKey: String) This will return the value as Any, so you will have to handle the data returned and cast to your type.
A closure being value type does not prevent it from having captures of reference types.
I'm working on creating a note taking app that is tailored towards making engineers homework easier to fill out and turn in. I'm taking a lot of inspiration from goodnotes. This is my first time creating an app and I just started learning about swift the last week of March. My first version is going to be very basic, have a collection of pdfs to edit and draw on with autofill for page headings, simple shapes, color pallet, and export pdfs to print or submit online. Then expand on that.
EXC_BAD_ACCESS is completely different from EXC_BAD_INSTRUCTION. It's the difference between "Do not enter" and "Your steering wheel has turned into a watermelon".
Dont think of userdefaults for your basic implementation. Just use normal var properties like [String] to track your latest values. UserDefaults comes into play when the app load up initially or is killed so just save your data when the app goes to background and load the data when app does the initial load in appdelegate, or when the view controller loads.
And to transfer the data to each field... you literally gotta go through each field and set the text... use a for in loop. Thats where u can get creative and do what makes sense to you. I would iterate through subviews maybe?
Is there a *standard* X,Y object that isn't part of CGPoint, etc? I'm trying to write some totally generic Swift code that has no reliance on Apple objects. I could roll my own pair, of course, but I'm wondering if I simply missed an existing one?
It prevents it from having value semantics. If you want to implement reference semantics using value types that's simple enough, but I don't think it's useful to refer to the result as a value.
You're absolutely correct, somehow my search turned up the wrong one and I didn't see that when I posted it. Anyways, it's not unheard of: [Error parsing JSON in swift 4](https://stackoverflow.com/questions/48876384/error-parsing-json-in-swift-4) Either way, without more information I think we have to conclude that this is related to parsing a malformed JSON string or something else going wrong with the decoding. If we had the project available to us we could probably tease out what's going on.
The other comments are right but you could also do this with a single line: `return names.contains(searchName)`
Not really afaik, CGPoint is standard because of the iOS / UIKit background. Closest standard in plain swift would probably be a tuple `(x: Float, y: Float)`
If you have to explicitly get the value out as a specific type, where would the practical use of this be?
Check out Either! https://github.com/robrix/Either
What’s a real world example of this? Surely this goes against the strongly typed nature of Swift?
Great minds, etc.
Let’s say one of your classes can process either (and that’s the keyword here) an array of `Int` or a `Range&lt;Int&gt;`. You’d like to support both methods separately, but, fundamentally, the logic is the same, so you can introduce this `Either` type over which you can switch to write your specialized code for the matter. You can then expose two methods, one for the array, the other for the range, that will trampoline into this `Either`-receiving one.
It doesn’t, you are constraining the types of the associated values to be either one of the specified two. The compiler will enforce this. See [my other comment](https://reddit.com/r/swift/comments/bchu25/_/ekqv5pa/?context=1) on the topic
Or use a generic?
In that case wouldn't you be better doing: func with(range: Range&lt;Int&gt;) { with(array: Array(range)) } So that the code can handle N input types, but doesn't require branching in the actual logic to handle them all.
Then you’d have to find common ground between the `Either`-ed types to constrain them with a protocol, which may not always be simple
Right, the sample use case was maybe too simple
imo attributed enums are a much better way to handle this
You think introducing an Either type is simpler?
This just feels so dirty. What *practical* use case would you want to be processing either a range or array?
So it's like an enum, except without the type safety?
If one method is returning two types, and there's no common protocol between them, what good is it to return them in the same value? Returning `Array&lt;Int&gt;`-or-`Range&lt;Int&gt;` is pretty common, and it's easy to use a protocol for that. Or frequently you'll be combining these later, and what you really want is an `IndexSet`.
Are you using Vapor or Kitura?
I mean, if I said it was named something else instead of `Either`, it could be useful, right? Like `Result`? Would you say it would make it into the standard library?
Like I said, this use case was maybe too simple.
Not sure if I understood exactly what you want. Do you want to add a new table view cell with the text of your input field, every time the user tries to save? Here are some advices: I would keep an Array in memory, and write to UserDefaults as less as possible due to performance. Try to find the best time to save: user is leaving that screen or is putting the app on the background. Also, every time this array is changed, you can try to reload the table data. Make the table’s data source use the array.
Great job! I used one really similar solution a while ago. What I think some people are missing, is that things like this, are not be used to solve a problem, but to improve a solution. Unfortunately I can't remember the situation, but using a Structure like this, we improved the code readability and decreased it's size by 40%. We could have done using generics, enums and/or a common protocol (Actually, using enums and common protocols were our first solution), but the conditional statements and figuring out the common interface between the two types were making the code a bit hard to understand. Try to come up with an example like this: Solved using what we have today x using the \`Or\` structure.
Oh nice! Sometime's you don't find out that something already exists until you make it yourself.
Yeah, it seems to be a cleaner implantation by using an `enum` instead of a `struct. That follows stuff like `Optional` being an `enum`.
Discussion of `Either&lt;Left, Right&gt;` came up when `Result&lt;T&gt;` was initially pitched, but it didn't make the cut. For the same reason that `Result`'s failure case is constrained to `Error` – that pitch was intentionally tied to handling errors, not truly a generic one-of type.
I don’t know why that’s working at all because I’m pretty sure `sublayers` is `nil` by default. Try calling `insertSublayer` on the layer itself instead of sublayers.
Was it some sort of filtering?
You need to keep track of the sublayer you add to a parent layer and replace it when necessary. For example: class ViewController: UIViewController { @IBOutlet weak var _targetView: UIView! private var _currentBackground: CALayer? private func setBackgroundLayer(_ backgroundLayer: CALayer?) { _currentBackground?.removeFromSuperlayer() _currentBackground = nil if let backgroundLayer = backgroundLayer { _currentBackground = backgroundLayer backgroundLayer.frame = _targetView.layer.bounds _targetView.layer.insertSublayer(backgroundLayer, at: 0) // Insert below all other layers. } } @IBAction func didTapNone(_ sender: Any) { setBackgroundLayer(nil) } @IBAction func didTapSolid(_ sender: Any) { let solidLayer = CALayer() solidLayer.backgroundColor = UIColor.red.cgColor setBackgroundLayer(solidLayer) } @IBAction func didTapGradient(_ sender: Any) { let gradLayer = CAGradientLayer() gradLayer.colors = [ UIColor.yellow.cgColor, UIColor.purple.cgColor ] gradLayer.locations = [ 0, 1 ] setBackgroundLayer(gradLayer) } }
Not really, but it might be a good way of using it! Maybe you could use it as a result of a `.map` operation, where do you need the value `a: Int`, but if does not exist, get value `b: String`. Of course you could create a new Enum or Struct, but it may be used only for that case. I think using `Either` or `Or` concept would improve its readability.
Are you sure the uploadviewxontroller and the associated array is initialized - try this - setup an array in that view controller and try to append the images to it. You can always send that array back or even better, setup some delegate method to pass them back through.
So in uploadViewController, I created a struct called Clothing. Inside that clothing is “static var top_images: [UIImage] = []” unless that is incorrect somehow. &gt; You can always send that array back or even better, setup some delegate method to pass them back through. What do you mean by that? Can you provide an example code? I’m new to Swift so I am still learning various data types and methods
Remove this line: `import Firebase`. That always improves code.
Then I won’t be able to read the filepath of the image from Firebase which I need.
Lookup how to create a delegate - it’s not really a swift thing. https://useyourloaf.com/blog/quick-guide-to-swift-delegates/ I think to determine the answer to the other question, one would need to see that code as well - but I would get the struct out of the viewcontroller anyway as that’s not a good idea to begin with. The struct should be its own swift file (or a swift file with various structs).
Oh okay, I’ll put the struct file into a global.swift file and reference it through that. What other code do you need to see?
I think you would have better luck with the delegate to be honest. Just create an array of items and then delegate them back to your vc for handling - if you need the benefits of the structure then make sure you are initializing that and then passing that same object around (probably through a delegate method)
Sure, post some code and I’ll review it.
I’m asking because I have no experience with Firebase but have be intrigued by it for a while, especially since Google seems to be steering developers towards it pretty heavily. So is Firebase that bad? How?
This is normally called `Either` but I’d prefer to write an associated data enum specific for each use case.
They are basically a contract that allow your classes to be less coupled. They are not always needed but IMO they make the code more flexible and easier to read. They are especially useful if you want to make a multi platform app, where you only replace some platform specific files and the rest of the codebase is shared. Also, they allow you to unit test your code by replacing implementations of protocols with mock classes.
Protocols are also useful for clearing up autocomplete. (Besides what the other guy said)
I just woke up, and I’m on my mobile phone, so formatting it difficult. But double-check this part here: reference.getData(maxSize: 1 * 1024 * 1024) { data, error in if let error = error { print("Error \(error)") } else { let picture = UIImage(data: data!) UploadViewController.Clothing.top_images.append(picture!) } } self.rawImage.image = UploadViewController.Clothing.top_images[0] The callback you pass to `getData` might be running asynchronously, which means `Clothing.top_images[0]` is called *before* the image was added to the array.
Protocols have the purpose of abstracting multiple classes into a common interface so that those classes defined within the protocol can be decoupled from the rest of the codebase. Communication to and from the protocol classes is funneled via API. You can achieve this through other methods like object inheritance with one superclass that is parent of every class inside the API.
I use them to add common functionality to uncommon objects. Picture a scene you want to draw. You have a car, bike, dog, and cat class. Dog and cat might be a subclass if animal. Car and bike, a subclass of vehicle. None of them know how to get drawn to a scene. None of them have x,y cords. Making them conform to a Drawable type protocol, with x,y properties and a drawing function will allow you to keep this drawing code in one place. There’s actually a very good Apple session on protocol oriented programming that is worth a watch. On mobile, so difficult for me to search it out and link.
One very important application that hasn’t been mentioned here yet is the use of protocols in generic constrains. Imagine you were in charge of writing some kind of function that adds 3. func addThree(to value: Int) -&gt; Int { return value + 3 } You write it once, and then you realize you need the same function for Float, Double, CGFloat, , etc. You could rewrite the exact same function for all those types, but the very thought of that should make your spider senses go haywire. “I’ll use generics!”, you say, and rewrite your function func addThree&lt;T&gt;(to value: T) -&gt; T { return value + 3 } You think you’ve done quite well, until just a moment later when the compiler dashes your hopes. T could could be literally anything, like a view controller or even a closure signature, and there’s no way to add 3 to those. What we really want is to tell the compiler that we want to define this function for all types T that have a + operator defined for adding integers. Enter generic constrains using protocols! There exists in the standard library a protocol called IntegerAritgmeticType that specifies exactly what we require. func addThree&lt;T: IntegerArithmeticType&gt;(to value: T) -&gt; T { return value + 3 } Now it works, and you can sleep soundly at night knowing that there is no duplicate code. All is well in the wold. ...until the next morning when your boss asks you do the same thing in Go.
I've seen that but it been a year or more. I pretty much just went over my head at the time. I should probably revisit it.
I’ve been building iOS app professionally for 8+ years and still go back to that video for ideas. There’s a lot to take in.
Nice example, I love the end 😂
Firebase is fantastic. The fact that people are still using things like SQL in 2019 is beyond me. I realize for some applications it makes sense. But here OC, is just another Reddit hater. Move along.
You’ve used protocols without even knowing it. For example, all of the text views on iOS (UITextView, UITextField) obey certain text editing and storage protocols. They’re useful for code reuse between projects because they allow for loose rather than tight coupling between classes. A class can pass an event to another that it knows nothing about other than it obeys its protocol. Protocols are even more necessary in Swift than Obj-C because it’s a less dynamic language and won’t let you call a method on an object unless it knows it implements it.
Something that hasn’t been mentioned yet as far as I can see is that protocols clean up your dependency graph significantly and allow a much easier time unit testing since Swift doesn’t allow reflection and has no good real way to mock objects. If your class depends on protocols, you can mock those much more easily than if it depends on actual classes.
The technique you're looking for is called Beamforming. It uses the delay between multiple microphones and their location to figure out the source direction. One method for this would be delay and sum beamforming. There is a C++ library called [Odas](https://github.com/introlab/odas), which can do beamforming, sound source localization, tracking and separation. There is also a tool called [odas_web](https://github.com/introlab/odas_web), which can show you the location of sound sources on a sphere in real-time. I have used that library and got pretty decent results. I used different hardware though, which had many more microphones than an iPhone. It would probably require a lot of work to get that running on iOS though.
Thank you for the answer. The main problem I’ve identified seems to be an issue with taking input from multiple mics simultaneously. I’m not sure iOS supports this.
When you press the button in cell, you can open the view controller in the correct context in a number of ways: • In your `collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath)`, where you are configuring the cell with data from your model, you can put the item index in the button's `tag` (It inherits from UIView). • Or, you can subclass UIButton, use that class in your UICollectionView Cell and set the indexPath into the added field in `collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath)` to the indexPath • Or, you can walk up the UIButton's superview chain until you come to something that isKindOfClass UICollectionViewCell, then ask the UICollectionView for the indexPath of that cell. * Or in your `myButtonTapped' you you can ask the UICollectionView for the array of visible cells, then check each one for a UIButton that exactly matches `sender ` the button that was tapped. rather than pushing the newController in one line, once you have the indexPath so you can get at your model, you want: if let vc = self.storyboard!.instantiateViewControllerWithIdentifier("userProfileController") as? UIViewController { vc.pdf = model[indexPath.item] self.navigationController!.pushViewController(vc, animated: true) }
Yes, Codable is life-saving magic
Protocol-oriented programming. Just google it.
Meme making app? No.
Everyone has good input but I’ll add my 2 most common uses cases. My models are structs (yours should be too lol). Structs don’t have the luxuries classes do so protocols help there. Also for unit testing. If you have a class confirm to a protocol then you can mock it just by conforming to that protocol. It’s similar to subclassing but a bit nicer in my mind
To add to this horizontal classes can help prevent fragile classes where the deeper in the hierarchy the more impact a change will have.
To a* UIImage array. You use an in front of a word that *sounds* like it starts with a vowel. UIImage is pronounced you-eye-image. That doesn't sound like it starts with a vowel sound.
Put it up somewhere like GitHub or similar and post the link to the repository.
Try writing unit tests with concrete classes.
&gt;post something a little fun Thank you for the live streams &lt;3
Here it is: https://developer.apple.com/videos/play/wwdc2015/408
Dependency injection. 😄
looks like you are a customer of meme then
Yea all my experience with iOS development was self taught and I didn't use protocols early on. They were complicated and I was in charge of my own projects so I could structure them how I wanted and get around having to use them. When I gained more experience working in teams the needs for protocols started popping up everywhere and when I got comfortable with them I actually preferred them over my own methods. They come up a lot in situation where you want to communicate between two classes that are related, or two view controllers when one was presented by the other. You don't want to keep a strong reference to the other class, you don't want to do a type checking for parent, and you might not even be sure when you'll get the info you need to send back (like on a network call). So you can make a simple delegate that the parent class implements, have a week reference to it that gets set on the child and whenever you get the info back you just call a delegate method and can forget about it. This especially starts showing it's benefits where multiple controllers or classes should have similar functionality and implement the same delegate.
&gt;That would imply that languages without this requirement would make them value types. Can you name any language where that is the case? Actually, Rust's closures are value types. Simplifying things significantly, a closure in Rust desugars to a (unique) struct with a `call` method and properties for all of the variables it closes over. A consequence of this is that closures don't have a fixed size and therefore can't be stored in a variable without making it generic. It also complicates returning closures from functions. I'm not saying Swift should have done this though – in fact, this might not work in Swift at all since structs can't store mutable references to variables. And there's no doubt that this makes Rust's closures harder to get used to than Swift's. But it's certainly not impossible for a language to have closures that are value types.
You are definitely right! Thank you! I wouldn’t have known that getData runs asynchronously
I like protocols for two reasons: unit tests and protocol extensions. Like the other day, I wanted to write unit tests for a controller class, but it’s constructor took another object that had a constructor that took a lot of other stuff. Too much of a pain in the butt to set up all that stuff just to be able to test some functionality on the class in question! Protocols to the rescue. I made a protocol, made the parameter class conform to that protocol, then I was able to just make a really simple couple line class just for testing that confirmed to that protocol too. I could pass an object of my new little testing type into my controller’s constructor without all the dependency rabbit hole. Protocol extensions are, in my opinion, one of the coolest parts of Swift. I think of it as like, being able to add default functionality to types without having to create complicated inheritance hierarchies. I hate to be the RTFM lady, but the book explains it better than I can :) (specifically the “protocol extensions” section) https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID521
Think the issue here is that the cells frame is relative to its parent (the collection view) however you’re adding a view with the same frame to the collection view’s parent. There’s a convert function to get the bounds relative to a particular view. Bear in mind that once you scroll, the frame of your white views will need updating. It probably makes more sense for the white views to be contained in a UICollectionViewCell subclass with the frame being set on layoutSubviews
because scrollView has a content inset but view doesn't
I’d say the main purpose of being protocol driven is easier implementations of Mocks.. and dependency injection. Inject protocols through setters or the initialiser of any class that requires dependencies- then when you unit test this class substitute those dependencies for mocks and drive the behaviour of different scenarios by controlling the mocks output. You’ll find this is standard in companies where they want to cover their code in unit tests. Plus using protocols adheres you to SOLID and clean code, which makes readability, change and day to day working life much less stressful than it needs to be. It may be slower and sometimes a bit verbose to wrap everything in protocols, but it’s worth it when it comes to to refactoring or changing/expanding your code. Particularly in larger codebases.
Sure! All those patches will end up upstream (we are already there with 4.2.x, not yet with 5.0). The community working on this is so small that most of the times is hard to reach the release date with all the issues identified/fixed.
thanks i didn't know about that, i searched that and replaced :- zoomImgView.frame = cell.frame zoomImgView.center = cell.center with :- let attributes = collectionView.layoutAttributesForItem(at: indexPath) let rect = collView.convert(attributes!.frame, to: collectionView.superview) zoomImgView.frame = rect
You can still do it with the frame from the cell like before. Just remember that frame is the position relative to the super view and bounds is the position relative to itself.
[NMSSH](https://github.com/NMSSH/NMSSH)
&gt; They are basically a contract that allow your classes to be less coupled. Or not be classes.
(preface: I use the term classes for simplificity, but the same applies to structs and enums.) Classes usually "coordinate" with each other, in that an object of one classes holds onto other objects of other types, which work together to achieve a task. In such a situation, coupling types by explicitly referring concrete classes, means that it's very hard to pull these classes apart to test them in isolation. When you can't pull classes apart to test them in isolation, you can't make unit tests. When you chanhe one class and inevitably break it, you end up breaking not on the test for that class, but also the tests for every other class that coordinates with the one you changes. I'm sure you've heard it a thousand times, but protocols allow you decouple interfaces from implementations. By making your classes couple to protocol, you afford yourself the freedom to easily swap out which particular concrete class' objects are used to "plug into" that "protocol plug". In particular, you can use this to substitute mock objects in place of real implementations. That way your unit tests: * can run faster (mock objects are simple and light) * run without side effects (no writing to real databases) * have fewer preconditions (no need to have access to the internet, third party APIs, databases, hardware, etc.) * test units in isolation, so breaking X, only trips tests for X, and not its buddies Y and Z. Depending on classes is like soldiering cables between your appliances and your walls. It makes it hard to move things. Protocols are like introducing plugs and sockets in the system. The functionality is exactly the same, but you gain the freedom to move things around easier.
Can you name a specific issue that protocols resolve? Many programming languages lack protocols, or have protocols but lack much of the Swift/Haskell feature set, or don't use protocols as frequently in the standard libraries. I've never had an issue writing unit tests in them.
What is Ask HN?
It’s a section of the Hacker News website where people ask questions: https://news.ycombinator.com/ask
Me too ! But my MarkDown Editor is for IOS.
Why specifically AskHN? Why not a whole new HN app?
Okay so let me see if I am understanding what you are saying correctly. I will have my button tag get the indexPath. Then it will pass the path to a button in the collectionview? So basically it would look like this? &amp;#x200B; `@IBAction func myButtonTapped(_sender: Any) {` `if let vc = self.storyboard!.instantiateViewControllerWithIdentifier("userProfileController") as? UIViewController {` `vc.pdf = Button.tag` `self.navigationController!.pushViewController(vc, animated: true)` `}` &amp;#x200B; I have never used the tag part of the button and when I tried to look up documentation, there wasn't any that I could find other than stackoverflow. &amp;#x200B; Is there a way I could do this with `collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath)` ? &amp;#x200B; Sorry if these seem trivial type questions. I have never dealt with UI before.
Everybody focuses on the links on HN when building a client. I find discussions (although not link discussions) to be a more interesting source of content.
You could simply try this. :) https://my-json-server.typicode.com Just put the data to your repo like in the description and you should be good to go. This one right here https://jsonplaceholder.typicode.com already has some fake rest api set up. You can fully test your front end with it as nothing will be persisted.
If this level of dynamic behavior is required for your use-case then it's a fine way to do it. However, if you need something that flexible then I can't help but wonder why you aren't just doing a web app.
If you're asking about have a dynamically generated form, no, it's not a bad practice at all. Here's something that I like to use: [https://fideloper.com/description-of-hypermedia-apis](https://fideloper.com/description-of-hypermedia-apis) &amp;#x200B; Personally, I believe that the client app should know as less as possible from your business layer. This means the client should only be responsible for knowing how to present something for the user, gather his inputs and send to the backend using the same "language". Your idea points into that direction.
The tag holds an integer, so not: vc.pdf = Button.tag instead: if let button = sender as? UIButton { vc.pdf = mypdfs[button.tag ] }
You're looking for https://developer.apple.com/documentation/foundation/datecomponentsformatter You can give it a TimeInterval (i.e. a Double) and it will give you a nicely formatted time string for that many seconds. You can configure it to use whatever units you want, and so on.
Not sure this belongs here. I am pretty new to Swift and starting to grasp the fundamentals and how everything works together. One question that has been nagging at my curiosity is how apps are “updated” visually without an actual update. Let me explain: So let’s say I want to build an app for a clothing brand. Every time I have a new sale or a new product to add I assume this doesn’t require an actual app update. So I am curious how updates like these are pushed to the app. Long-term I want to build apps for clients and I’d like to be familiar with how a client would update details in the app for a clothing store or even a real estate app for example.
With such a detailed explanation as “but it doesn’t work” you are sure to receive grade-A help
a
hmm true
Seeing the new reddit web app, I don't think it's technology is quite there yet.
I haven't done this before but try share the ARSCNView instead
You may be more likely to receive help if your code is properly formatted. Please google “Markdown reddit” to learn more.
I can’t speak to those languages that you didn’t name, i’ve only written UTs in a handful - js, ts, C#, java, obj-c and swift. Having a protocol means you can provide a mock without having to deal with other concerns of the concrete class and it’s own dependencies. The more abstract your code, the less it is an issue. But basic things like testing code that checks if today is 1st Jan, if file is on disk, if URL is reachable etc is a lot easier if you do not go through that setup but for the class directly concerned with managing those dependencies.
There is no need to update the app. The app is just a front end that displays your data, that data can come from anywhere. You just need to make sure your front end is flexable enough to handle what you want to throw at it. So when you change the data in the cloud/server the app will know how to display it. It’s similar to loading a web page. In fact the simplest way to do this (though maybe not the best) would be to stick a WKWebView in your app and then your data is basically just a web page.
When you instantiate the error you don’t need the `_:`. I’m not sure, but you may need to specify the variable in your `catch`
You should be structuring your project so that storage is just used for storage and you do all your business logic in the DB. So you should keep an array of the object ids in the DB and then your app or a firebase function can use those object ids to fetch the correct file from storage.
it's hard to "fix" something that makes no sense. This is basically gibberish.
 s: S = { i.storage = nil } What is this code doing?
I guess God doesn't know how to use Reddit code formatting.
I'm learning swift recently and in my vacation I'm thinking about a problem and thought to share. I want a similar function like random.int for strings. I searched on web and suggest to use random.element, which isn't working on xcode. Any other way to get a random string out of my array?
I love these kinds of in-depth articles. I start off understanding everything, progress into "yeah I know some of these words", and then drive off a cliff towards the end (but not before my mind has been expanded). I haven't worked with generics too much so that's probably it gets over my head eventually, but I still loved reading it!
Use map, timesSeries: [String:T]
CPython uses reference counting for the most part, but it also have a tracing garbage collector that it runs occasionally to clean up strong ref cycles.
I'm finding myself in a situation where I am subclassing two different classes (NSViewControllers) both of them completely different (with their own UI and functionality. But the code of the subclasses is for both instances exactly the same. I am basically adding fucntionality for the NSViewController to become a detached NSPopoverViewController. Of course I want to implement the DRY principle. But I just can't seem to find a way how to do it. I cannot use generics as a superclass when making a superclass. Nor can I use extensions or delegation since the subclass also has some new UI elements such as a closing button. Am I missing something here? How can I not duplicate code for these two subclasses. Thnx!
CodingKeys don’t have to be enums. You can make a `struct CustomCodingKey: CodingKey { }` I’m on mobile so it’s hard for me to write more examples but this will give you the ability to generate dynamic keys
Should be renamed to, how to install cocoapods and import your first framework
Oh of course the post is not meant to create an entire Heart Rate Monitor Device but to make easier working with IoT device with BLE with an external Heart Rate Monitor device as an example
I love the idea of generics. I just haven't had any opportunity where writing a method for generics would work for me. (At least not one where my brain made the connection!) Thought I had one once, but then found reduce(), which took care of my issue for me.
You \_might\_ want to treat Series as a more generic \`\[Date: TimeSeries\]\` or \`\[String: TimeSeries\]\` Dictionary.
That sounds like a good idea to me. Make sure you cache the most recent JSON to a file so that your forms work if your users are somewhere without an internet connection.
Please post text instead of images. We can copy-paste text to help work on your issue, with images we'd have to re-type it all. It just makes it more difficult to help out and many people don't even bother if there's images without any text.
If you’re learning pure Swift without iOS, there are lots of online options for writing and running Swift code. This is one of the best: https://repl.it If you want to learn iOS, then you need a Mac. MacInCloud is a good service for a Mac virtual machine you can log onto remotely, and pay monthly: https://www.macincloud.com
Just curious, do you use RxSwift or any React programming patterns (not necessarily any particular library)? Do you stick with MVC or do you also use MVVM patterns in your code base (or even just in code you have to read)? I don't yet see a pressing need to understand generics in my own code, but generics seem very helpful for code that uses React or MVVM patterns. I get the feeling that clarifying generics features will make such patterns more understandable in code that I've already started seeing... but I guess I'll need to understand generics (as a concept) better as well.
Why do you think it's not functioning properly? It's doing exactly what you tell it to do; it catches the `.error1` error then prints out the string `"error1"`. If you want it to print the caught error, you need your catch to look something like: do { try someFunction() } catch let errX { print(errX) } or: do { try someFunction() } catch AnExample.error1(let errStr) { print("error1: \(errStr)") }
Actually turned out it was an Xcode problem. Restarted Xcode and it ran properly. Sadly today xcode did that sort of thing many times. Most recently tonight was trying to solve a difficult-to-trace crash when an alert controller was presented in xcode simulator.
you can dual boot linux on ur computer and write swift on that also if windows is giving you trouble.
https://andrewmichaelsmith.com/2017/02/developing-an-ios-app-on-linux-in-2017/
You could try macOS in virtual box or try installing hackintosh on your current windows machine (given that is compatible). Both of them will require time and frustration to get it working. I think best bet would be to buy a Mac if you are trying to deploy. Maybe sell your current windows and get a used Mac mini.
Yes, I do want to deploy it on my iPhone, this is why I opened the thread. Also i was suggesting exactly MacInCloud, but I wanna know if it’s gonna give me what owning a mac at home is going to or there are some limitations as well?
You don’t get admin access. A macincloud vm comes preinstalled with lots of stuff, and you can request additional software installs. You’re not going to be able to run code on your iPhone from a Mac in Cloud VM either. The only thing exactly the same as owning a Mac at home is owning a Mac at home.
Save and get a used MacBook. I got my MacBook Pro on Ebay for $1,500 3 years ago. I got lucky it was almost never used with only 3 cycles. Ii would have cost me $3,000 if I bought it from Apple. I know $1,500 is too much to some people but you can get a 13 inch on Ebay for less than $500. It's just older and probably really used. That's what I would do.
Keep in mind Linux cant deploy to iOS like the OP wants, but you can still make useful Swift projects in Linux, especially cool backend projects with the advent of SwiftNIO
What I am missing is how many users are running into issues with the current generics implementation? I may have glossed over that, but I’d love to know if it is really needed to introduce additional ‘bulk’ by introducing `any` to all generic variables (if that’s the way it gets implemented).
This looks like a non-native application (e.g. web based). Note that these apps will not use Swift, and will not have access to native iOS binary frameworks (Foundation, UIKit, ARKit, CoreGraphics, SpriteKit, etc...). These binary frameworks are currently only accessible on MacOS development environments.
Thank you for the response. What is the typical or most common backend for updating the data? That’s really where my confusion comes in. I assume a client would need some sort of interface to connect to that allows them to update what is shown in the app.
I think you should spend time learning the basics of Swift online or with Linux before you invest in a Mac, but if you plan to deploy to iOS, you should invest in a Mac.
Buy and old Mac mini 🤝
Ah, I had no idea. I just feel like it's harder to read if it isn't an image. But I'll remember it for next time!
Giving you a real answer instead of sarcastic: &amp;#x200B; Firebase is great... If you don't need a REAL database, but instead a place to store data. What's the difference? &amp;#x200B; Firebase is kind of like a storage unit. You rent a big empty room and you can put whatever you want in there. Sounds great! But, if you've ever had a storage unit, chances are you realize that it soon becomes unwieldy, especially if you're taking things out and putting them in often. Before long, it becomes a heaping pile of mess and you can't find anything, you don't know if what you're looking for is even in there, and unless you were really diligent about structure and organization from the very beginning, it's pretty much hopeless to try to make any changes down the road. &amp;#x200B; A database is more like a library. Everything in there is labeled nicely and stored in a very specific location. You are a bit more limited in the types of things you can store, but in general you can easily find whatever you need, store whatever you need, and best of all- make changes to old formats and existing data without too much work. &amp;#x200B; Firebase is EXCELLENT for solo/mobile devs or teams that don't have a "backend guy" who can build/manage a database, since it takes more work- and security and such isn't automatically handled by Google. It's easy to start, easy to use, and it doesn't cost a large investment of time or money initially. &amp;#x200B; However, long term, it will cost more to keep storing the data, and chances are you'll need to make changes and will be left with stale data that you don't even know how to access at some point. &amp;#x200B; As with most dev tools, it's basically a toss up between ease-of-use and power. If you want easy, use Firebase. If you want power, use a SQL database.
Protocols are basically interfaces from other languages. Use that as a starting point, and you can see how they are useful.
Are you talking about adding more methods to user profiles?
Use it for a week, get frustrated at how it freezes every couple of minutes, sell it to the next looser.
I bought a 2012 mac mini with 16 gb ram and a 512 ssd for 350 and I use it primarily for swift and it works perfect. Actually for swift it works arguably better than my new macbook pro ( which I got for swift and will probably be returning )
A certain degree of reuse is necessary before generics start becoming useful. That's why you generally see them used in libraries rather than app code.
"Firebase is one of the most important backend database technologies for mobile apps, but it does not secure user data by default, does not provide third-party encryption tools, or alert developers to insecure data and potential vulnerabilities. To secure data properly, developers need to specifically implement user authentication on all database tables and rows, which rarely happens in practice. Moreover, it takes little effort for attackers to find open Firebase app databases and gain access to millions of private mobile data app records." SERIES: Security Now! EPISODE: #669 DATE: June 26, 2018 TITLE: Cellular Location Privacy ARCHIVE: https://www.GRC.com/securitynow.htm
Well, you lose some of the contextual highlighting if you directly post it here. Even if you use a code block by prefixing each line with 4 spaces. However, you could always use a service like [GitHub Gist](https://gist.github.com) or [Pastebin](https://pastebin.com). Examples: [GitHub sample](https://gist.github.com/colgraff/3abb14f26d18432b3a6104776a594918) [Pastebin sample](https://pastebin.com/jiuJaD94) Code block: struct Pet { let name: String let age: Int let details: String } let foo = Pet(name: "Fluffy", age: 10, details: "A dog.") print("Name:", foo.name) print("Age:", foo.age) print("Details:", foo.details)
This API isn't a great candidate for Codeable/Decodable and JSONDecoder. It would be simpler to just use old-school NSJSONSerialization, JSONObjectWithData:options:error: and convert the resulting dictionary into your model object. No fancy syntax sugar, but it would take 10 minutes to code up, and you'd be done.....
 https://stackoverflow.com/questions/45647630/how-to-remove-uimenucontroller-default-items-in-swift https://stackoverflow.com/questions/37945518/how-to-create-custom-uimenucontroller-with-only-custom-items-other-than-default/37946329#37946329 The links should help you.
I've run into tons of issues with generics, especially once you start trying to mix generics and protocols
I agree, this JSON structure is just awful to setup with *Codable*.
The real trouble comes when you start using Associated Types
Yeah, there's some ineptitude going on here....
I've encountered Swift's limitations with generics on each of the few serious projects I've undertaken with the language. OP says '*Don't panic*' - Panic? I'm elated to see this! ([Having bemoaned Swift's ailing generics support a few days ago](https://www.reddit.com/r/programming/comments/b5mdkj/swift_5_released_abi_stability_enforcement_of/ejesgyr/)). A return to focus on the Swift Generics Manifesto is what the language needs to fulfill it's ambitions as a serious high-level language, now that the lower level parts are well catered for.
Thanks for the thorough answer. The part that always intrigued me was the easy data sync aspect for mobile apps so I was curious. Thanks again.
Windows comes with a built-in Linux subsystem now (Windows 10, 64-bit).
This. The current generics implementation is great until you want to declare a variable as a protocol conformant type, only to be shut down because it uses an associated type and can only be used as a generic constraint. This has always seemed broken to me. To the point where I’m forced to choose between using protocols or a generic type but not both. :/
I’m planning to buy the latest Macbook Pro, one of the most basic configurations: i5, 8gb, 256gb. It’s the only one that won’t break my budget, i assume programming doesn’t need an OP configuration, but still i better ask upfront - is it good enough for programming with Swift?
Great! This is what im about to do!
Oh i see, then this isnt an option neither. Gonna learn the very basics online until i’m ready to buy a new mac then. Thank you!
Good luck and have fun :) feel free to message me with questions
Correct, they dont have to be classes. I was talking more about interfaces in the broader sense.
Correct, they dont have to be classes. I was talking more about interfaces in the broader sense.
Would there be ways to record the movements programmatically instead of recording via QuickTime player? My goal is to 1. Save steps of touch movements 2. Create a video with those steps of movements 3. Save that video into my database Thanks!
Some of the most common places we use generics in my apps at work are: - When we want to fetch a specific kind of object over the network, we have a `FetchModelOperation&lt;T: Decodabe&gt;` class, which guarantees that you get the right kind of object back once the network request is done. - When creating view controllers from Storyboards, instead doing stuff like `sb. instantiateViewController(withIdentifier: "UsersViewControllerId") as! UsersViewController`, we have a generic function which lets us say `sb.instantiateController(ofType: UsersViewController.self, withIdentifier: "UsersViewControllerId")`. We do the cast check inside that 1 function rather than everywhere we want to create a view controller, so we make sure that we consistently log a good message about what went wrong. Those are just 2 examples, but they're nice little improvements that prevent us from needing lots of different versions of the same thing everywhere.
But would any of those issues be solved by this proposal?
A mac mini can be a low budget alternative :) (even though it‘s prices increased like every other apple hardware)
When you refer to toolbar at the bottom of a view controller I think you are referring to the toolbar that is built into a Navigation Controller. There is also a class called UIToolbar which is different (as you are seeing learning in your example right now).
I have done this before by downloading a metafile(manually written) first, which tells me howmany files are in each folder. But it's a horrible work around, and over all firebase is really bad, not sure if ther eis any better but I hate working with it
Yes I see. I've just used SwiftyJSON and finally I wanted to transit to Codable and this is what happens. But thanks
I’m assuming it’s a custom view by the dev.
Especially since it worked in Obj-C. Sure, you get less static safety, but way more flexibility. This entire discussion and feature is all about making Swift's static type system "more expressive" (it can express/admit more types of programs) which is exactly the downside of static typing. If your static type system and syntax is not the target programming language itself, you are necessarily limited in the types of programs you can write. I worry that Swift is attempting to be the new C++, since it's written by C++ guys and appears to be following in C++'s footsteps, vis-a-vis: we'll just keep adding features to solve our issues! To me, C++ programming is really unfun, and I *always* end up wasting time trying to figure out either a) how to get C++ to just to what I want, or b) wasting time trying to restructure my program into the most elegant C++-y form. Bah.
The second case seems like unnecessary extra code. Using a force cast (or maybe even better, a `guard` + `as?`) will tell you exactly what went wrong in a clear, Swift-y way, without having extra code to maintain.
Enforcing that we call that one function everywhere is easier than making sure everyone follows the same pattern throughout the app when initializing VCs. Before we had it, some people would try to fail silently, some would fall back to creating the VC from code, some would just force-unwrap. This makes it easier to enforce a uniform pattern for VC initialization from storyboards, It also lets us be exhaustive in one place, logging that there was no VC with that identifier, or there *was* one but the type didn't match.
Having to handle libraries written on Obj-C or C++ with no swift support
Or, Even worse, plain C!
Module stability. You currently can't ship a binary framework in Swift. So if your business is selling your library to someone without giving them your code, you can't use Swift. In Swift 5.1 (if it makes the cut) that will be resolved, because we'll have binary and module stability. Also, it's very rare but some protocols are impossible to conform to in pure Swift. NSAccessibilityNavigableStaticText can't be met in pure Swift. You need to at least declare the conformance in a `.h` file and do the implementation in Swift with `@objc()` attributes.
You're right that toolbar is on the bottom of the view. This is probably a custom view with multiple delegates functions for the buttons actions.
I am not sure I understood your case correctly. maybe a code snipped with your array and attempt would help. &amp;#x200B; But I guess you have an array of strings from which you want to fetch a random one. &amp;#x200B; let array: [String] = ["one", "two", "three"] let index = Int.random(in: 0..&lt;array.count) let string = array[index] or let string = array[Int.random(in: 0..&lt;array.count)]
try working around with REST APIs. use the app to connect to a REST API and fetch its data to display in the app. In order to update the app contents, one would update the API data on the server.
&gt;take an input such as her name and goal(Running or going to the gym) UIKit + some design to make user interface or entering details &amp;#x200B; &gt; remind her of the goal each day Look at how to implement notifications with UserNotifications framework, you can set these up with either location or date/time based reminders &amp;#x200B; &gt;"location services" feature on her iphone to check if she went the gym that day CoreLocation using Geofencing, you can set up the gym as a location, and the app will be woken up in the background and you are able to perform some work to save that she visited &amp;#x200B; These 3 apple provided frameworks are the starting points of the features you describe, for saving content locally depends on how much you need to store, you could look at the FileManager API for something more simple, and then CoreData or Realm for something more advanced. My advice to you would be start with the simplest app you make can that solves the problem and then slowly add features to make it better, you may find some features aren't as useful as you initially thought! &amp;#x200B; Good luck!
These are valid reasons, but keep in mind Apple considers Swift the future. If you are developing in the Apple world it is always better to swim with their tides.
This guy! Unless you absolutely have to support Obj-C, C or C++ libraries (which you almost certainly do not), and you're starting a new project, there's no good reason not to use swift.
Are your VC ids ever different from the class name? You could shorten the function even further by generating an ID based on the class being passed in. I do this for registering and dequeuing cells.
&gt; but keep in mind Apple considers Swift the future. Yup, but not yet. &gt; If you are developing in the Apple world it is always better to swim with their tides. Yup.
&gt; which you almost certainly do not Oh, sweet summer child :)
I stand by that :) if OP is asking, then I’m guessing OP doesn’t have a bunch of libraries to link.
Perfect! This helps me out a ton. A question. Is there a good site that indexes frameworks? or is it best to just google the action im attempting to have done and add framework to the end of it?
A bit of both, Apple docs are a the canonical source and they have a comprehensive list of the frameworks and APIs you can use [https://developer.apple.com/documentation/](https://developer.apple.com/documentation/) . Newer frameworks usually have slightly better documentation. &amp;#x200B; This obviously doesn't include third party frameworks which are a whole different thing, another good source to learn whats available to you is [https://nshipster.com/](https://nshipster.com/) which has in-depth articles on a whole bunch of topics.
You could always put a objc wrapper around your module.
for VC or any view’s id, we just create a static string var.
TBH I haven't dug into it enough yet.
Yup, Apple will point for years to the new way of doing things, then at some point make a change where if you’re still using the old way, you’re in trouble. See manual vs Autolayout and the introduction of safe areas in iOS, or Carbon vs Cocoa and the 32-to-64 bit macOS transition.
You can call C from swift
Yup, this is exactly what I was getting at. For example right now we have chosen to go with Apple’s subscription service rather than implement our own. Obviously we could get better rates, but as a start up do we want to be fighting Apple on this issue? Do we want to get our app rejected because we linked to our subscription in the wrong way? Will we be featured in the App Store if we do not use that system? I don’t know for sure the answers to these, but I don’t want to take the chances. But before anybody thinks I’m complaining about this, I am not.
What does it do? What do you expect it to do? You left out 2/3 of the necessary components.
It's a safe bet that anyone reading a question here has an editor on their computer which can format Swift code.
10 seconds in: "This doesn't really have anything to do with Swift."
AFAIK, Swift is completely interoperable with Obj-C. What's the problem here?
Yeah, I bet he doesn't have to run UI tests on macOS 10.11 either.
At my company, we have a huge C++ codebase housing well-implemented business logic. To use that with Swift, we simply made a thin Obj-C++ wrapper and called through that. Even having to support those older languages is not a reason to not use Swift
They don't consider Swift the future, yet?
Bridging can be a pain in the ass. With that being said, I’d still favor that approach over objective C usage tbh
+1. Having to use C libs is not an argument against Swift. All it means is you will have to leverage a wrapper.
True, but if you want to interoperate with C, using Swift is much more painful than just writing in C.
So a bunch of Apple's own frameworks, like Security? Oh dear.
If you're among the 99% of software developers in the world who aren't developing hot new apps for the latest version of Apple's platforms, it's still a terrible choice, and may always be: - Writing some analysis to be published which needs to be read and run by scientists 25 years from now? No. - Writing new avionics for an Airbus A320 update? No. - Writing a program that needs to run on many platforms, so the core library should be written only once, as portably as possible? No. - Writing software that's going to go on a satellite, and will need the ability to be able to be updated in-flight in 10 years? No. - Writing a quick script to generate a report on a bunch of data on your computer? No. - Writing embedded software to run on a next-generation washing machine? No. - Writing some updates to a mature system that's been around for 20 years? No. - Writing an audio app that needs realtime processing? No. - Writing a compiler? Ha, no. - Writing a program that needs to interoperate with existing BEAM VM modules? No. - Writing a program that needs to target a non-64-bit or non-ARM/x86 runtime? No. The list goes on and on. It's a much shorter list as to when it *is* pragmatic to use Swift: - You're writing an application where (recent versions of) macOS/iOS/watchOS/tvOS are the primary (or only) platforms that need to be supported.
From what I've seen, the people with issues mixing generics and protocols are not the same people who will be excited to hear "hey, new language keywords and syntax, and dozens of pages of dense new documentation to read and understand!"
&gt; I worry that Swift is attempting to be the new C++ Absolutely. They ["expect Swift to be a better language than C++" and claim to "know C++ well enough to not want to repeat its mistakes"](https://github.com/apple/swift/blob/2c7b0b22831159396fe0e98e5944e64a483c356e/www/FAQ.rst). [Inner-platform effect](https://en.wikipedia.org/wiki/Inner-platform_effect): "Ha-ha!"
C is fine; no wrapper needed. Same for Obj-C and Obj-C++. The Swiftified calls to them might feel awkward to type but the interop is 100% there. Remember, lots of Apple APIs are written in C, like CoreGraphics, CoreAudio, most of CoreFoundation... Lots of things that are in the "Core" libraries. And all of those work fine when called from Swift
Yeah but it ain't too bad. Just keep the bridging siloed and you can transition away from Obj-C at a comfortable pace
Lots of "no", but not much reasoning
In Firebase, I have the following nodes... User -&gt; Item -&gt; Iteminfo1, Iteminfo2, Iteminfo3. Since Firebase loads all of a nodes properties, do I have to continually load from the firebase database or is information related to the User already on hand and ready to access - I am wondering if it would be more efficient to load the data once and share it through protocols and function inputs, or if I have to call a load function directly from the firebase for each node.
Yes, but you can’t call C++ at all, so it’s hard to make the case that C is worse...
I think that the question is more “when should I use ObjC over Swift”, and it’s not like you’re going to use ObjC in airplanes either...
I'm taking my 3rd or 4th shot at a song writing app. Been messing with Swift for about a year and a half. I've written a couple of apps for personal use but this one might be worth sticking on the app store at some point. I've started this app several times, gotten stuck on something stupid and given up in frustration but this time I am powering through it. I've been at it a couple months now in my spare time. Most of my time is of course spent on rewriting code I wrote last month and the current code isn't pretty but I learn something new every day. &amp;#x200B; It's funny that the stuff that I thought would be simple causes me the most headaches and the stuff I thought would be hard, like connecting to datamuse and learning how to decode JSON for a rhyming dictionary, took an hour at most. &amp;#x200B; I should have it done in another month or so, then I will get some song writing friends to test it. If it looks like something that might go over, probably hire a designer to make it look pretty as my colorblind ass shouldn't be allowed to dress myself, much less pick colors for a UI.
I was talking about a mandatory framework you HAVE to use, and was developed by someone else who did not think about Swift support or didn’t even exist at the time. In some cases you can write a wrapper to interact with Swift. But in some cases not everything works.
Do you have an example where it doesn't work? I've only done small amounts of mixed Swift with C++ projects and not dealt with anything complicated enough not to work.
\[textFieldArray\].forEach { // test if empty, do stuff if not? }
Playground is normally used for learning and practicing the syntax of swift. If you’re planning on making a text based game, I would create a single view app project. As far as the OS that you create it on, it shouldn’t necessarily matter if you use auto layout correctly. Their are plenty of tutorials online for this, best of luck!
Damit! forEach! Thanks!! lol
I can only remember things if I don't need them myself, if I need forEach tomorrow I won't remember it exists.
If you just want to check for empty and not actually manipulate the text fields, I would filter the array and check the count of the filtered array
What's your audience? Just yourself or do you expect to distribute it at some point? Would you open-source it or would you sell it?
Just my self, I am very new to swift
You can also use `filter`
You could write an extension for an array of UITextField: `extension Array where Element == UITextField` And then write a computed property called isEmpty: `var isEmpty: Bool { // If any of the textfields is empty it will be true return contains(where { $0.isEmpty }) }` Then just called [textFields].isEmpty
Look up how to use a text field and use code to display text in it according to if statements and switch statements for example. Also look up how to use a button. There are lots of tutorials online and stack overflow is good for when you get stuck.
allSatisfy might be cleaner
This Might name it something different though, since Arrays already have a property “isEmpty”
I don't need to check for validation, since those methods are already written ( I hope!! ) , it's just making sure they have text. in them.
Do you have previous programming experience? Ultimately it doesn't matter but I'm curious.
You’re right! Maybe you could invert it and call it something like “isFull” or “isComplete”. You could use the array method `allSatisfy` instead of `contains` and check that `!$0.text.isEmpty` for every one.
The above answer using allSatisfy is probably best for your case then
Hey, at least I was wearing a Swift shirt! ;) (The talk was intended to have more Swift, but while preparing it, I realized that the juggling parts were interesting, and the Swift parts were boring.)
I know quite a of python
Okay, I think I kind of figured it out... I extracted the raw audio data from the Swift program using AudioKit and exported floatChannelData to a CSV file for analysis. I analyzed the CSV file with the audio data on MATLAB: I plotted it to make sure it was the expected amplitudes of the audio data and then played it back using the correct sampling rate and the CSV audio played perfectly. So it looks like this is what's happening: 1) The AudioKit grabs the raw data in integer bits (e.g., SIGNED 16-bit per sample) 2) AudioKit divides the raw data going from integer to float (e.g., floatChannelData\[i\] = (float)intChannelData\[i\] / (2\^16))
Straightforward approach: ``` let thereAreEmptyTextFields = [textField1, textField2, ..., textFieldN].contains { ($0.text?.count ?? 0) == } ```
The cool thing about this approach is that you can respond differently to each of them being empty (e.g. setting the background color) The bad thing about this approach is that at the end of the loop you don't know if you can take action based on the state of ALL of them (e.g. submit the form if all fields have been filled out). You *could* do it with a `var` declared above, but at that point, you should do it another way.
Instead of chaining a `.filter` and a `.count` you can do a `.contains` with a closure that works like `.filter`'s. See my top level comment :)
Right, you’d need a var outside the loop or to wrap it all in a function that returns “barf” (or throws an error) if they’re not all empty or whatever the case is.
The latter 2 snippets include an unnecessary map of the array that results in it being traversed more than once. Obviously not going to result in a performance issue in this case but still not ideal
I agree that it's not the most efficient. But the impact is so small, that I rather trade off the negligible performance effect in exchange for the readability.
Stack Views will be your best friend.
I don't see how it improves readability at all though. Seems like it actually just makes it worse
Post some actual code please.
Actually, it does. At least in Swift. It has to be a reference in order to enclose it’s surrounding context. It works like a pointer to the scope that surrounds the closure. Though similar, closures are not lambdas. You can always create closures that do not rely on surrounding context and make them static. Assuming they are pure functions, then you can pass them around like values, meaning not worrying about retain counts. They are still references, but like static or class variables and functions, the system only needs to inflate it once and they will live in heap, never to be deallocated. Regardless, it is up to the developer to ensure that they behave correctly.
Add them to an array. Loop through the array. Bail if any of them are not empty.
Are you not using a collection view for this? Because you definitely should, with a custom layout
Every item should be constrained to the box that binds it. Best way is a collection I think.
The easiest thing will be to do a macOS Command Line Tool and do all of the input and output on the command line. A guide: [Command Line Programs on macOS Tutorial](https://www.raywenderlich.com/511-command-line-programs-on-macos-tutorial)
I apologize. I assumed that the reasoning for these would be obvious. - How is someone 25 years from now going to get the Swift compiler/runtime for Swift 4? I see people having trouble building Swift *3* code today. - Avionics has strict requirements for all aspects of the development process and tooling, many of them legally mandated. The CPUs aren't generally 64-bit ARM/x86, anyway. They don't run on either of the two supported operating systems that Swift supports. - Audio apps aren't even written in Objective-C today, due to the realtime requirements. Swift is even worse at being able to write a function that doesn't allocate memory. If you have any of these in particular that you don't understand, I'd be happy to explain it.
That's one case. You may have noticed I listed more than one! You can quite reasonably use ObjC for a compiler (it's actually a great language for that!), or to extend a 20 year old C program, or on a 32-bit system. Even the Swift developers aren't using Swift for compilers yet (have you tried? it's still quite painful), and it's not a simple addition to an existing C program (as ObjC can be, as a strict superset, and supported by a number of C compilers), and Swift on 32-bit platforms has a number of drastic limitations ("legacy runtime", Darwin only, etc).
Personally I'd call it textfieldsEmpty as it won't clash with anything and still be quite clear.
This is actually a feature of AVAudioFile. It has a processingFormat property which you can set at [initialization](https://developer.apple.com/documentation/avfoundation/avaudiofile/1387283-init). The format conversion is implicitly performed between the file’s format and the processing format.
Although I’m not targeting machine code, I am, in fact, writing this reply in a break writing a compiler for ARM’s ASL language in Swift. I wrote the lexer with Flex because I’m old-school, but other than that, it actually is going alright. Where will I hit problems? I only quoted one example from your list because I expected that it would get the point across. I believe that almost all of the case that you have listed are poor fits, or at least unusual fits, for Objective-C. * Writing ObjC code that will be used 25 years from now? That’s an optimistic outlook on both the future, and the stability, of the ObjC language and its frameworks. 25 years ago, people used Object as the ObjC root class. * Writing new avionics in ObjC? Dubious, waiting for examples. * Writing a portable program in ObjC? Dubious, certainly not the best choice. * Writing software on a satellite in ObjC? Dubious, waiting on an example. * Writing a quick script to manipulate data? I’d totally do it in Swift. What’s the problem? * Writing embedded software on a washing machine in ObjC? …sure? * Writing a device driver in ObjC? Dubious, waiting for an example.
you can avoid nil coalescing operator / forcibly unwrapping optionals by putting the boolean before the conditional \`\`\` let allTextFieldsAreFilled = \[textField1, textField2\].filter({true == $0.text?.isEmpty}).isEmpty \`\`\`
I guess it's a matter of preference. I usually rather chain a few `.map` with simpler tasks than to have one long expression.
Could you please share the code on how to get the raw float values using AVAudio only?
&gt; Writing a device driver in ObjC? Dubious, waiting for an example. See NeXTSTEP's DriverKit.
Has it been attempted again since the turn of the century?
No, because Apple switched to Embedded C++ for IOKit to attract developers. Since adoption of Objective-C is pretty much predicated on what Apple does, I don't think anyone has tried to do this.
great course on udemy for learning swift programmatically. highly recomended [https://www.udemy.com/ios-11-swift-complete-app-store-programmatically/](https://www.udemy.com/ios-11-swift-complete-app-store-programmatically/)
I think `for textField in textFieldArray` Is generally preferable syntax. ForEach doesn’t really offer any benefits besides chaining functional calls, plus you can’t break out early or return out of whatever function you’re in.
True!
Size classes if you also want to put on iPad
`textFields.allSatisfy { !$0.isEmpty }`
Bump. allSatisfy is a great implementation of andmap
Another commenter suggested a collection view but I think I agree with stack views instead. Rather than trying to line up your labels to a background image though, I would scrap the image altogether and give my individual labels their own background colors.
I had a similar layout and I ended using a table view with a custom stack view that all cells used, just to be sure all the views were the same width and make it look like columns.
First of, labels should be subviews of this color rectangles, buttons on the bottom should be pinned with autolayout to the bottom. And I would use UICollectionView, there are plenty examples of similar layouts
If you want them to keep their aspect, then aspect ratio constraints are your friend. But you should really look into collectionview for this.
It's definitely good enough. MBPs have fast I/O which is important when compilation isn't hugely parallel. That said, more RAM is only going to help, especially as the machine ages. If you can sacrifice something else, or wait/save a little longer, 16GB will be a noticeable improvement.
nah, the labels can be the color rectangle themselves, saves you a lot of views here
Scrap the image and add the colours to the labels. Use stack views or a collection view with custom layout.
You can write and compile on macOS. Check this out: https://jblevins.org/log/swift
You need to update to the current macOS release, *or* install the macOS Swift libraries from your current release (can be downloaded on https://developer.apple.com/download/)
Most compiler developers these days are at least familiar with C++. Several major compilers such as LLVM, V8 and the JVM are developed using C++. If they were happy with C++ why would they bother designing a new language?
fieldsEmpty or areEmpty sound like good ones to me too
Can you get the number of "files" in a "folder": no, see this [Groups](https://groups.google.com/forum/#!topic/firebase-talk/ZUy3hHWPShU) post for more info (TL;DR: use the database). Can you get a download URL for a file based on a reference: yes, the docs for [iOS](https://firebase.google.com/docs/storage/ios/download-files) show how to do this.
Aha now I see what you mean. Off the top of my head: * If they are unwilling to use the built-in migration tools, nor to download an older binary of the compiler, then they can build any version of the compiler toolchain since it's open-source. The reason each version is so different is because it wasn't formed perfectly from day one (something I'm shocked Apple would admit!) So they need to make breaking changes to fix things, hence the major version number bump. I'm honestly impressed, and I respect this a lot. I imagine what C or JavaScript might look like today if they were willing to make such breaking changes along the way, rather than an endless series additive bodges. * Fascinating. I'd love to look deeper into that. In theory, Swift could compile for any system that LLVM supports. And currently, the Apple-endorsed operating systems are macOS, iOS, tvOS, watchOS, and Ubuntu. I have it working fine on Windows, too, without the UI. I bet audioOS and bridgeOS use Swift too. I wonder if anyone's gotten it to work on Android... Probably? * Obj-C's bloated runtime is something to run far far away from very quickly. Swift did, and it's better for it. Every benchmark I could come up with shows Swift being faster than Obj-C at equivalent tasks. This is one big reason that my former employer, Renewed Vision, switched as fast as they could; the performance boost for their live video software was very valuable to the company. As for other questions, could you address these bullets too? - Writing a quick script to generate a report on a bunch of data on your computer - I already use Swift for this - Writing embedded software to run on a next-generation washing machine - Why not? If these things receive OTA updates, it wouldn't be much of a burden to include the current Swift libraries in those. I'd bet good money that wouldn't be the 10th largest thing in that update - Writing some updates to a mature system that's been around for 20 years - Apple hasalready started writing code for macOS in Swift, and that's 18 this year - Writing a compiler - I write a BrainFuck compiler in Swift and it was delightful. Considering getting deeper and trying out more useful languages. Might someday try to write a Swift compiler in Swift - Writing a program that needs to interoperate with existing BEAM VM modules - What are those? - Writing a program that needs to target a non-64-bit or non-ARM/x86 runtime - AFAIK, LLVM supports anything you want it to - Writing a device driver - gonna try this soon 🙏🏽
You win! Looking at the screenshot posted made me cry a little. Reminds me of the overseas code I have to fix because people thought it made no sense to pay us when they could get someone to do it for less than 10% of what we were asking, which btw was probably less than the total they’re paying now.
Try installing https://support.apple.com/kb/DL1998?locale=en_GB
Yes, yes, yes. Let's pay an overseas group 10%, but they take 8 times as long, plus longer to fix issues, plus they can't talk to our clients who pay for the work, plus....
You’re being generous by assuming they deliver a final product. Most of the time they somehow manage to deliver a pile of crap that they can run through a very precise “path” to demo the requirements. Don’t deviate from that path because then everything will fall apart
Right click on the D button in the storyboard and make sure it doesn't have a connection to "cTapped."
You're generally better off posting code as text or as a link to a project on GitHub or similar. That way people can copy-paste the text and try it out for themselves, it tends to make it easier to help you out.
&gt; Here are pictures of my code: *facepalm*
Do you have any constraint warnings? What happens when you resize the app? Have you tried the "reset to suggested constraints" option
I see that there are constraint warning, how do you reset to suggested constraints?
I figured out how to delete/reset the constraints
If your app is using localized storyboards, you may have to modify them all.
making a cute app for my gf for our anniversary
You could make a static Util / Helper class that implements the method. class Util { static func showAlert(title: String, message: String) { /// ... impl } }
I have a UIViewController extension for displaying alerts and I cannot get it work in a class. class Util { static func showAlert(title: String, message: String) { customContactAlert(title: "contact_button_title".localized(), message: nil, preferredStyle: .actionSheet, actions: [ UIAlertAction(title: "contact_email".localized(), style: .default) { action in }, UIAlertAction(title: "contact_message".localized(), style: .default) { action in }, UIAlertAction(title: "contact_call".localized(), style: .default) { action in }, UIAlertAction(title: "contact_cancel".localized(), style: .cancel) { action in }, ]) } } My question is how can I make it work?
I have a UIViewController extension for displaying alerts and I cannot get it work in a class. class Util { static func showAlert(title: String, message: String) { customContactAlert(title: "contact_button_title".localized(), message: nil, preferredStyle: .actionSheet, actions: [ UIAlertAction(title: "contact_email".localized(), style: .default) { action in }, UIAlertAction(title: "contact_message".localized(), style: .default) { action in }, UIAlertAction(title: "contact_call".localized(), style: .default) { action in }, UIAlertAction(title: "contact_cancel".localized(), style: .cancel) { action in }, ]) } } My question is how can I make it work?
You need to present the view controller. Idk what customContactAlert does but if it returns a UIAlertController subclass then you need to present that.
What error are you getting?
Use a protocol restricted to UIViewController, put your code in an extension on that protocol, and have your classes implement the protocol.
The thing tricky about alerts is that you need the current (frontmost) viewController, so it's a little hard for a piece of stand-alone code to post an alert. There's also the issue of whether you want to handle multiple alerts, one after another. In one of our apps, we start at the rootViewController and find the top viewController from it. There may be more elegant ways of doing this. The ObjC code is something like: &amp;#x200B; void ShowAlert( NSString *title, NSString *message ) { dispatch_async(dispatch_get_main_queue(), ^{ UIViewController *vc = IOSAppDelegate.sharedDelegate.window.rootViewController; if ( [vc isKindOfClass:[UINavigationController class]] ) vc = [(UINavigationController*)vc topViewController]; else if ( [vc isKindOfClass: [UITabBarController class]] ) vc = [(UITabBarController*)vc selectedViewController]; ShowAlertFromViewController( vc, title, message ); }); } static void ShowAlertFromViewController( UIViewController *vc, NSString *title, NSString *message ) { // handle modal view controllers - find the top while ( vc.presentedViewController ) vc = vc.presentedViewController; if ( title == nil ) title = NSLocalizedString( @"Error", @"Error alert title" ); UIAlertController *alertVC = [UIAlertController alertControllerWithTitle:title message:message preferredStyle:UIAlertControllerStyleAlert]; UIAlertAction *action = [UIAlertAction actionWithTitle:NSLocalizedString(@"OK", @"Button") style:UIAlertActionStyleDefault handler:nil]; [alertVC addAction:action]; [vc presentViewController:alertVC animated:YES completion:nil]; }
Can you please give me an example?
The [swift docs](https://docs.swift.org/swift-book/LanguageGuide/Protocols.html) on protocols should have most of what you need. The documentation for restricting protocols is a little light, so [this stackoverflow thread](https://stackoverflow.com/questions/35133887/how-to-require-that-a-protocol-can-only-be-adopted-by-a-specific-class) may help.
Something like this: ```swift protocol DoesAction { func doAction() } extension DoesAction where Self: UIViewController { func doAction() { print("I did the action") } } class MyViewController: UIViewController, DoesAction { } let myVC = MyViewController() myVC.doAction() ```
This is the best answer so far, it should be something like this protocol AlertPresenting{} extension AlertPresenting where Self: UIViewController { presentAlert(title: String, message: String) { //your implementation of alert } } now in your view controller you make it to conform that protocol class ViewController: UIViewController, AlertPresenting {} and then you can call your presentAlert(title: "test", message: "this is test") in your view controller
You could either pass in the view controller to this method and present it at the bottom from that viewcontroller.. or return the alert from this method and let the calling viewcontroller present it
Sorry it's bad. I've only been doing this for like 2 weeks, and I'm 15.
Angela Yu's course on Udemy covers *exactly this*. It's section 10, it looks like.
I have a tableView filled with names. I want to split this in to 3 sections. I want a section for pinned items, that only changes if a user pins or unpins them. I want a section that holds the last few recently edited items and then I want a section for everything left over. At the moment I have the data in 3 separate arrays, I know I can Switch on the row in cellForRowAt and make it work, but that is sloppy. &amp;#x200B; What I cant figure out is how to convert my data to something I can index with indexPath? I know it's possible, I just cant figure out what to use.
as far as the timer "continuing" when the app is closed, what you probably want to do is save the totalSeconds when button is pushed and when your user reopens the app get the current time a do maths with the saved totalSeconds. same for "updating" with your timer when the app is open.
Then choose "swift file" instead of "cocoa class"
I think there is nothing wrong with going quick and dirty with extensions on this one. With extensions the implementation is seamless and you can really forget about it. I think you should keep the extension. You ll come up with more useful generic ones in the future.
Now I feel dumb lol.. Thank you!
A possible elegant solution is to subclass the uialertcontroller and add a weak property for the presenting uiviewcontroller. Then you can just use a function like show() to present the alert on that vc.
yup, this is the answer! thank you :)
This should be the answer. You haven’t called present on the alert from a VC
Is firstViewController the ViewController that calls the segue? Then why are you doing firstViewController.hasText? Shouldn’t it be self?
The only "problems" with this solution is that it (1) is in Objective-C when this is a Swift forum and (2) it's not very generic. Many of my projects have the following in them: extension UIViewController { static func top() -&gt; UIViewController { guard let rootViewController = UIApplication.shared.delegate?.window??.rootViewController else { fatalError("No view controller present in app?") } var result = rootViewController while let vc = result.presentedViewController { result = vc } return result } } Which allows me to get the top most presented view controller from anywhere in my code base. It's great for presenting alerts, but also for presenting any other view controller.
This is the same as shitting on the ground and calling it a modern art exhibit. Why would you do it this way? This is no different than just extending a UIViewController. This is not pragmatic at all. I understand the usecase for protocol extensions using the where clause, but a uialertcontroller is limited in the places that it can be called. Lets see from a VC, from the window? From a nav controller? But this limits it to just a VC subclass and at that point you would just use an extension. Regardless, nice coding lol just doesn’t seem good for *this* usecase
I think this functionality needs a database to retain the time and date since the functionality requires to work with app closing. Check realm, it has easy learning curve and quick prototyping as well.
Nothing wrong with that. Use his suggestion and try to reimplement it! That’s how you learn
sorry to hijack, but can you tell me how to I would go about creating a punch in clock for employees? Or rather what I should google in order to start? It's insane how illusive this is and I'm having trouble breaking it into parts
And for the most part avoid using `class` unless you absolutely need what a `class` gives you: - reference semantics (passed as reference) - inheritance - saves memory and copying large amounts of data - shared state Generally, you'll use a `struct` instead: - value semantics (passed as copy) - no circular references so less memory leak issues - tends to produce faster code through better optimization - inherently thread-safe because no shared state Also, protocols and composition can take the place of inheritance for both `class` and `struct`. There's also `enum` which can be used in other situations. I'd say get familiar with all 3 of these object types and learn which best suits your needs.
I do not think that would work with a tab bar controller, but I’m not certain of it.
Haha that’s pretty dope. Take my upvote
I won’t tell you what to google to solve a very specific business case on a very specific platform for a specific language. I will tell you that prepareForSegue is an object level scope and not a static or class level method so there is a self that can be referenced within the method. And if firstViewController is self then you should reference that. If you can clarify what ViewController exist and where the data exists then that would help. Else I’d start googling iOS debugging in Xcode and step through your code and figure out what object is in scope during this method.
Thank you, good sir!
Update: Someone added this (I'm thankful I was able to look at it before the answer was deleted) `func setBackgroundLayer(_ backgroundLayer: CALayer?) {` `_currentBackground?.removeFromSuperlayer()` `_currentBackground = nil` `if let backgroundLayer = backgroundLayer {` `_currentBackground = backgroundLayer` `backgroundLayer.frame = targetView.layer.bounds` `targetView.layer.insertSublayer(backgroundLayer, at: 0) // Insert below all other layers.` `}` `}` `@IBAction func solidButton(_ sender: Any) {` `let solidLayer = CALayer()` `solidLayer.backgroundColor = UIColor.red.cgColor` `setBackgroundLayer(solidLayer)` `}`
why was the .alive inferred but not .grateful?
Because the .alive is a case of .status, therefore it would autocomplete, but the function is theoretically of return type Any.
just testing you. :P the composition would look bad without it.
Sorry for the delay in response. There was another answer here that I've since added into a comment (&amp; project) that provided a working piece of code that I was able to understand &amp; implement. As for your confusion, I was able to attach one gradient before the program would crash. I can't say much about the former attempt now. If you feel comfortable - would you mind answering a question about the code I've posted in the comments about this issue, though?
inb4 Swift totally changes the syntax and the tattoo is deprecated &amp;#x200B; but in all seriousness, nice tattoo!
I actually just laughed so hard! 😂 thanks for that!
`if case .alive = status` doesn’t have the same ring to it.
It gives you the top presented view controller, even if it's a tab bar controller. Why wouldn't it?
What moods are returned for other states?
Happy, horny, or hungry are pretty much all I go through.
Nor does it compile.
I assure you it does compile, I had the whole thing in Xcode.
That's going to be hilarious when you're 70 trying to explain it to people after there's been two different successor languages for programming Apple machines. It'll be like trying to explain Pascal for the guy who got a tattoo in the early 80's.
Do you need self there?
In this instance, status would be an extension of the superclass, A.K.A. self, so yes.
copied and pasted. good stuff
Straight from stackoverflow. 😉
When I’m 70 I’m gonna be that old fuck with a MacBook writing artificial intelligence (hopefully), I’m sure I won’t mind chatting with some youngster about back in my days with swift.
You can also invert the situation and use a static function or other such helper that you pass the view controller instance to.
MY COBOL/JCL TATTO IS TIMELESS, GODDAMNIT!!!
Here's a quick [SnapKit tutorial](https://www.iosapptemplates.com/blog/ios-development/snapkit-tutorial-ios) in Swift 5, that showcases the basic layout constraints. I highly recommend going with SnapKit rather than Apple's version of programmatic auto-layout.
Glad you got this after Swift 3 or it’d probably throw a syntax error
hardcore man, upvote for you
First, are you sure there’s a key named `”Goal”`? Second, are you sure it is a `Double`?
Thank you! ☺️
/VSAM
If he ain’t horny, make him a sammich.
I like tacos too. 🤷🏻‍♂️
Where is the unit test? 🧐
Up my project manager’s ass.
Hope it’s not permanent
I don’t think you have a good understanding of how tattoos work... 🤔
the key is "Goal." Now, when I set the value of Goal - it is saved as an Int. Interestingly, if I have the print a variable that hold Goal in viewDidLoad, I have an optional number that appears. But, as this question states, when printed in viewDidAppear returns nil... for whatever reason.
Some are semi permanent, they hold on only for 2 weeks 🌝
Great, right around the time this code will take to deprecate.
You’ve really thought this through
Lol I had the whole thing in a project typed up just to be sure it worked before I had it permanently put on me!
Ayyy, my fellow Lambda comrade!
Lol what’s up! Lambda squadding up!
[weak self] otherwise you ll become a zombie
You just answered your own question. You saved it as an Int, and when you fetch it, it's wrapped in an Optional. It's not a Double, and Double has no initializer which takes an Optional.
oh no...
*Kool-aid man voice* OHHHH YEAHHHH
else { return nil }
Else{ rot() }
Funny that I learned a bit about swift coding from the comments :)
Glad to be of service lol
A deprecated warning message added to the tattoo at that point would add to the laughs!
Whats the function called
Lifecheck
You are using value for key, which won't wrap it in an NSNumber that can be bridged to Double. Use object for key.
This. 🤔
Hello, Cdunn2013. It appears that you have broken [Redditquette](https://www.reddit.com/wiki/reddiquette), which states not to leave comments that add nothing to the conversation. Please do not comment "This", as it adds nothing to the thread. If you agree with a post, use the built in upvote system made for this exact purpose.
Hello. Stop ruining the fun for everyone. You really just come off as a prick with this bot, and the problems you try to fix with it aren't even that big of a deal. Let people make their jokes and get that stick out from your butt. This is a bot.
Oh, look who's there! It's AntiLowEffortBot! I thought you stopped sending hate messages! Who even made you and why? Stop. Seriously. People ain't gonna stop these jokes cause a bot told 'em to. Please stop spreading hate. This is a bot. Beep boop.
Taco is a folded sammich. 🤗
🤔... By god.... 🤯
Read the API documentation, we don't know what school you are attending.
Can you please check this out? Is that a clean way of doing it? https://pastebin.com/6skqUvw1
Can you please check this out? Is that a clean way of doing it? https://pastebin.com/6skqUvw1
Can you please check this out? Is that a clean way of doing it? https://pastebin.com/6skqUvw1
Can you please check this out? Is that a clean way of doing it? https://pastebin.com/6skqUvw1
Use breakpoints to find out which of the data is nil. Is your text field in the first view controller properly initialised/connected from storyboard?
I like the syntax but I don't believe in tattooing a brand on myself, that's just me personally.
&gt;Debugging sucks hole on the front-end especially with tools like webpack converting your code and making it into something entirely different than what you originally wrote. Uhmm, source maps? webpack plugins (UglifyJs) can emit them.
I don’t like doing brands, but I’ve always really liked the swift bird logo, and I’ve always wanted birds tatted on me, so it fit pretty well.
why Mood is Camel Case while status and alive are just lower case ? no parentesis after the if ?
Mood is an enumeration, which is capitalized while status is a variable and alive is a case of an enumeration. The parenthesis is optional in quite a few languages.
Hey! Sorry for the little context! And that's exactly what im trying to do! I'd like to break it down by (my broken english) words: `let index = Int.random(in: 0..&lt;array.count)` `let string = array[index]` &amp;#x200B; In the first line, you create a constant that picks one number according to the number of elements in the array. In the second line, you pick one element by the random number of the index constant. So 0 = 1st element 1 = 2nd element &amp;#x200B; Is that correct? And thanks for your help! :)
In about 2 years, this will be deprecated. Much like your current ability to make sound judgements.
Wow, a bit harsh there... who shit in your Cheerios?
:)
&gt; but the function is theoretically of return type Any Eww :(
It is different than just extending a UIViewController, because now you can use the protocol method only in those view controllers that conform the protocol. If you would put it in UIViewController extension, it would be available in every view controller, even in those that don't need that method.
Your self will be alive forever, so no chance of deprecation, maybe just refactoring.
that is exactly what is happening in the code above. &amp;#x200B; it is also important to note, that the random number should be &lt;array.count() and not &lt;=array.count(). As in the example the count() method would return 3, but the index of the array only goes up to 2 because it starts at 0, while count() does not.
Actually I'm also currently switching from Front-End development, and yeah I kind of got tired of so much libraries and possibilities what can be used or what to learn. I'm now in the beginning of learning iOS Development and yeah it's very different from React and Front-End but looks promising for me. I've tried initially to use React Native for App development but anyway I decided now to switch completely to Swift.
Good thinking. Always test before deploying!
If the return type is Mood, you don’t need to specify the enum name before the value, i.e. *.grateful*
That looks good
Githawk -&gt; https://github.com/GitHawkApp/GitHawk
Should use switch statement with an enumeration like that :). Nice tattoo.
&gt; Now, when I set the value of Goal - it is saved as an Int. Well, if its saved as an `Int`, then you need to read it back as an `Int` first, and then convert it to a `Double`. Something like: let goal = Double(defaults.integer(forKey: "Goal")) Note that if you use `integer(forKey:)`, the return value defaults to `0` if there is no integer value for that key. It's the equivalent of `(defaults.object(forKey: "Goal") as? Int) ?? 0`.
does the mood become _pissed_ when status changes? 🤔
https://kottke.org/plus/misc/images/cube-rule-food-01.jpg
&gt; It’s a bit bigger than the native app 52mb is not “a bit bigger” than 24mb. That’s a significant difference. Hard to say how this scales with the app, but it’s definitely an issue. And, as with anything from Google, they can drop support of it at any time. Writing once for all platforms is always appealing, but there will always be a need to tweak natively. And if coding hybrid apps, why choose to learn Dart? Using React Native or Ionic, you can leverage the easy and support of Javascript or Angular JS (respectively). The main point of this article is Flutter is good for small businesses to get apps on both platforms. But I’d say if you’re a small business trying to hire Flutter developers with experience with Dart, you won’t get a large enough response to select a hire easily. And Flutter has only been around since 2017. Does no one remember the horrors of Swift 2.x and below? I think small businesses have enough risk without adding this to the pile.
I am no Swift expert, but I think the problem is that the textField on the SecondVC is not initialized yet when you try to give it a text value. What you should do is create an optional string variable in SecondVC and make it equal to the text in FirstVC. Then in ViewDidLoad of SecondVC, you have to say that the text value of TextField is equal to the optional string variable that you created.
Amazing!
Well I guess you could argue that the “compiler” in this scenario is the person reading it, so it’s indeed true that the perceived return type of that (to us unknown) surrounding function would _otherwise_ be unclear, aka “Any”. Explicitly returning type “Mood” helps the compiler (i.e. us) inferring the return type of that surrounding function, so I think that’s very valuable information!
Or perhaps it has a return type of \`Emotion\` which \`Mood\` conforms to. :p
I guess switch self.status { case .alive: return Mood.grateful default: fatalError() } doesn't have quite the same ring to it.
All you need to read: &gt; As a result of the comparison, it seems that native iOS development has some significant advantages over Flutter and clearly gets a higher score in this comparison. However, we should consider that Flutter also supports other platforms like Android with the same source code. Flutter apps looks very close to actual native apps… Yes, Flutter is cross-platform but that’s not a great selling point. Generally, developing using non-native components means your app ends up looking non-native and clunky. It’s a bad design from the beginning. Just take a look at the Java debacles over the years. You got apps that did the job but which never felt quite right on the various platforms. Instead, split your app into natural pieces and develop them using the best fit of technologies that is possible. Use backend technologies that are best for a backend and native frontends so that they can be tailored to each platform. Don’t try to do a one-size-fits-all solution that codes both android and iOS at once, it rarely turns out well.
I have a body covered in tattoos. Lots of them. Full sleeves, hands, knuckles, neck. I think a total of 5 times has someone asked me what they ‘meant.’ Which is funny because most of them don’t mean shit. Just some fun art. I do have the fast inverse square constant on my knuckles tho.
Thank you very much. Have a great day!
Just return .grateful... ?
Maintain and extend an app for 10 years while maximizing the number of devices you need to support running years old versions of the OS. This is where the real pain is, not the initial development. 95% of the code we wrote in 2009/10 still runs unchanged.
All these use cases are outside the scope of regular iOS apps and thus aren't a good example of why not to use Swift. Most of the stuff you mentioned is e embedded programming, and Swift is naturally not a good fit. Just like you wouldn't use Python to write iOS apps.
&gt; On the contrary, iOS development is from as far as i can tell, pretty much standardized. Hah! (Double-hah, because you even mention React right in your question.) &gt; Debugging sucks hole on the front-end especially with tools like webpack converting your code and making it into something entirely different than what you originally wrote. I hate to burst your bubble, but iOS developers use compilers, too -- and the output looks far more different from the input than what webpack does.
Why is the Swift logo upside down?
"Infographics" are usually pretty bad, and this one is no exception. - Using [pie charts for relative timings](https://blog.codemagic.io/uploads/CM_Swift-vs-Flutter_reload-time-2.png) makes no sense at all. - Having bars of a bar chart point in opposite directions makes it impossible to visually compare them. - The "Building in CI" chart has 3 bars (2 pointing right and 1 pointing left), and I'm still not sure exactly what they all mean. - "App size" uses an area-based chart, and the right one is supposed to represent 2x the size of the left, but it's 4x the area. That's a pretty significant Lie Factor. I haven't checked the others. - Some of the numbers are min+sec ("4 min 3 sec"), and others are sec ("149 s"), which has no possible purpose except to confuse or mislead the reader. - The colors are bizarre and garish and were chosen by someone who is either colorblind or on an acid trip.
Self...see? I knew I forgot something simple!
I think a database would be a massive overkill when UserDefaults could be used
You forgot to force unwrap grateful 😂
Crossplatform technology is for writing platform independent code. For example we have a C++ core for 5 platforms that handles network requests, caching and other platform independent stuff, have an ObjC/Swift framework for iOS and Mac to translate the API of the C++ part for use with MVC then have UI code separately for iOS and Mac. UIKit/AppKit has been in development for a long time and they're still full of bugs. You can't expect a FotM crossplatform library to have less problems.
CRINGE LORD
Lol, okay. 😎
not my cup of tea in the tattoo department but glad you like it!
That tattoo idea should have been quickly thrown away, wtf
You should have been quickly thrown away, wtf.
Thanks!
I actually managed to deploy to my IPhone from a macOs running from VirtualBox and an app that simulates USB connection over the same wifi network The whole thing is a mess and unstable so i just ended up with a new 13’ MBP It is doable tho
naw, you know that ain't true. Don't get a permanent marker for a temporary idea/feeling
This is something that I’ve been considering for over a year, you can see yourself out. ☺️
I don't understand loyalty to brand or programming languages. Chances are, in your life Swift is just going to be one of many programming languages. My remarks shouldn't be taken seriously because I'm far from being comfortables with tatoos at all.
I plan to add other programming languages as I learn them, I just did the syntax in swift because that was the first language that I dove heavy into. I appreciate your comment, but tattoos are kind of my thing.
yikes
-u/frankieboytelem ‘s mom when he came out.
Ah shucks, you got me.
Boom. Roasted.
Hi everyone, I have the following setup on one of my pages: [https://imgur.com/a/Lzfnmm0](https://imgur.com/a/Lzfnmm0) &amp;#x200B; Can anyone tell me why the UIView isn't showing up when I run the app? The background displays a google maps pin. I've tried everything and I can't make the UIView appear. Thanks.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/eUN4fgD.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20el7cjhl)
If tattoo == tacky { regret() }
Else { enjoyAndFuckTheHaters(); runCount += 1; print(runCount);} //prints 1
All i see is a cache miss on the cpu.
[removed]
This looks like a shirt I'd buy at Good Will in 20 years and wear ironically. Probably mostly to parties. Of course, I don't know if I'll still be going to parties in 20 years. Ya know, because of the singularity. But on your skin.
Lol good one, bro. 👌🏻
Lets hope they don't change the deprecate this syntax, so you have to put line through it
^(I'm new to programming and a friend gave me a Swift programming tutorial book.) Where do I download Swift for Windows?
There is no real simple way to run Swift code on Windows. Apple has Xcode, but no IDE that runs Swift/Cocoa apps natively. [There is a way to port Swift 3.0 to Windows](https://www.infoworld.com/article/3067364/swift-for-windows-arrives-at-last-but-as-an-unofficial-port.html), but it is an unofficial way to do it, and I am not sure if there is any Intellisense in whatever IDE you use once it gets ported.
I've been a developer for more than 20 years. I've used various front-end, back-end and mobile technologies. One thing for sure in the 20 years the overall developer experience has improved dramatically. I do remember writing code for a few hours, compile for an hour and then discover the misplacement of a ;. My point is: It doesn't really matter whether you work on the front-end, back-end or mobile development. You need to master the skill and learn the used libraries. See this as a challenge and a way to keep you mind fresh. It's good to dive into some thing new once in a while. Keep on coding.
I like u/computatrum_ ‘s idea of putting a deprecated error when they do.
Thank you. Upvoted
That is actually a nice tattoo hahaha \[deprecated warnings would be the cherry on top, but well done\]
nil???
Jeez, I swear I tried that already. It did the trick though thanks.
Even when Java had first party Cocoa support from Apple it never quite managed to feel native.
Th “mood” can be omitted and inferred by the compiler, would not pass code review.
That's not even what's being proposed. `func foo&lt;T: Protocol&gt;(_ t: T) ` will still work fine. `any Protocol` is meant for functions like `func foo(_ p: Protocol)` since using a Protocol as a type like that doesn't actually do what it seems like it should be doing and usually ends up causing problems later.
Wow, that tutorial is pretty awful. It wraps `print()` just to print a single string with all of the other arguments defaulted, the wrapper interpolates that string instead of just passing it as the first argument, and it manually reimplements `readLine()` for no reason. The only good part of that tutorial was using an enum for the command line options.
I linked it mostly to give an idea on how to set things up. There are other guides out there and a search will turn them up. Honestly, I didn't go through the entire tutorial because I already know how to do command-line programs. I simply didn't want to type up an article myself when there were others already out there.
Depends on how you coded it, and it most certainly would pass code review.
So i got this questions from my last interview: ~About my experience Have you worked with: -storyboards constrains -programmatically generated constrains / views -the assets folder - different sized views - portrait and land uis - tablet ui. ~ Swift related questions: What are the main differences with objective-C. What are protocols, extensions. What are the main benefits of extensions. -What's the main focus of functional programming Some programming related questions: What are unit tests. What is the main point of them. Give an example Is it ok to call an external service in a UT. What workaround would you do if you have to test a rest api call I can't remember any other from the back of my head right now but I hope this will help you
It sounds like a phone screen with some technical questions. They will ask questions to gauge your knowledge of swift/iOS (unwrapping optionals, value vs reference type, delegates and protocols, etc). There will probably be many easy ones and then the questions will increase in difficulty. Phone screens usually go over your previous experience and give you an opportunity to learn more about the position before an in-person interview. If you’re worried, I would recommend reaching out to your contact at the company and asking more information about what to expect during the phone interview.
Depends on team, sure but wouldn’t pass ours lol. To each their own
Why is the logo upside down?
Thanks for building that. I've wondered why Apple hasn't done something like this themselves. Just drop a 1024x1024 image as a single asset and let the build process create everything it needs. Simple.
To make it look like it’s flying off.
Thanks for thanking me :) I know! You would think that would be a feature by now. Feel free to help me enhance the code if you have any ideas! Also, have you tried following the “Getting Started”? I’m just curious if my instructions are clear and work correctly.
I haven't, but I've starred it. I'll check out when I get back to work next week likely.
Awesome! Please let me know how it works for you :) Hopefully I’ll pretty it up this weekend haha
If you don't need to automatically scan a project for all images, autodetect the largest one, parse imageset bundles, print nice warnings, etc., then it's only like a 3-line shell script.
I am just imagining someone with guard self.status == .alive else { preconditionFailure() }
Yeah the AppIcon is an easy one just because you know the asset size. The real meat of the script is meant for the image assets. Also, instead of hard-coding things (like 1x 2x and 3x scale) I read the specs from the Contents.json in case Apple ever changes the requirements (kind of like when they introduced the 89.5@2x for iPad Pro) to help future proof.
[https://www.udemy.com/ios-11-swift-complete-app-store-programmatically/](https://www.udemy.com/ios-11-swift-complete-app-store-programmatically/)
KickStarter open sourced their app around two years ago, it's huge and pretty scary but a good "read": [https://github.com/kickstarter/ios-oss](https://github.com/kickstarter/ios-oss)
Thank you. Thank you very much.
Thank you very much! Appreciate the advice!
Why don't you watermark videos while taking them?
I'm learning swift
Since you'll be talking with the CEO, he might also ask behavioral questions anywhere from "where do you see yourself in 5 years" to what is your biggest weakness, etc. So take a quick look at this as well. [https://www.youtube.com/watch?v=PJKYqLP6MRE](https://www.youtube.com/watch?v=PJKYqLP6MRE) P.S. Always prepare some questions to ask for the end of the interview about company/team/funding etc.
Remember that &lt;T&gt; can also be a tuple. `Result&lt;(Left, Right)&gt;`
Sure, but that tuple means the result will be both left and right together. `enum Either&lt;A, B&gt; { case left(A); case right(B) }` means it's one or the other.
*constraints
Crossplatform technology is for writing platform independent code. For example we have a C++ core for 5 platforms that handles network requests, caching and other platform independent stuff, have an ObjC/Swift framework for iOS and Mac to translate the API of the C++ part for use with MVC then have UI code separately for iOS and Mac. UIKit/AppKit has been in development for a long time and they're still full of bugs. You can't expect a FotM crossplatform library to have less problems. In order for RN to not be totally shit, you need a lot of very experienced developers in all 3 platforms that are also open to this kind of shit. It works for Facebook/Instagram because they develop RN too, so they will get first class tech support if something's wrong. I assume that this would be a smaller project and investing that many experienced devs into it would cost much more for your customer.
For living interview i guess you can use xCode, case the main aim of such interview see how did you understands basics of particular platform not only language.
Perhaps this might help... https://stackoverflow.com/questions/41843974/is-facebook-ios-app-built-in-react-native I also like this article as well - https://conceptainc.com/blog/why-you-should-or-shouldnt-use-react-native/ Another - https://arielelkin.github.io/articles/why-im-not-a-react-native-developer.html Although the licensing is finally straight - given FB’s recent track record with other issues such as privacy, fake news, etc. One must inherently ask how bound to the ecosystem they are willing to become ... and I’m a shareholder.
Ok, so as I understand - in the end you still need an iOS/Android native developer to finish the job. Sounds like waste of resources.
Personally, I'll probably always choose CloudKit because of a severe distrust in Google. Even privacy reasons aside, stuff like this: https://adage.com/article/digital/google-flips-switch-its-next-big-money-maker-maps/2163976 In summary, they massively hiked the prices for consuming their, in this case, Maps API. Who's to as what or when something will be next. Granted, the same applies to Apple, but they're at least slightly incentivized to keep utilities core to their platform running and available. Also I really like SQL, so a freebie win there.
How do i do that?
Imagine for a moment you were the CEO looking for the right person. What kind of person would you be looking for? I would be looking for someone who will be the right fit and have the requisite technical foundation to be able to not only know current technology but also be able to adapt to future changes. But because this is a startup their attitude toward you is very important. Many startups feed on developers and spit them out when they are done. It's not sustainable long term for the individual. One question I would want to know is what does the CEO want to do with this company? Build something and turn it for a profit? Or do they have longer term goals. Most early CEO's get pushed out if the company is successful because their temperament is perfect for building but not for sustaining.
Use global variables. Like this Struct MyVariables { Static var *name*: *Type*?/! (Getter or setter) }
I don't think it it the best way. I think I need have a reusable variable.
I haven’t had many interviews but, in my experience, interviewers absolutely don’t care about perfect knowledge of APIs and their parameter names. They don’t care about forgetting semicolons or being unsure about exactly how to type type-constraints in protocols. An effective interviewer wants to see: 1. If you can think critically 2. If you can communicate effectively (explaining *and* asking questions) 3. If you can take the information provided and questions answered, and solve the presented problem in a straightforward way—or at least get a meaningful way through it Other factors include: - understanding the efficiency and trade-offs of your code - understanding the general case (i.e. the math behind it) - code organization - code clarity - edge cases These are all high-level skills and abilities that indicate (to some extent) whether or not you are a good engineer. Memorizing parameter names indicates only that you’ve memorized parameter names.
*also, use carthage or better yet, git submodules...* - Satan
Xcode
If I were interviewing someone for a job in iOS, yeah, I would want them to display some knowledge and ability in one or both of the languages of the iOS ecosystem. Also, I would, as a job seeker, be wary of a place that wanted me to do a coding interview in Leetcode instead of using Xcode--which does things like provide autocompletion for function parameters and is also a fairly fundamental tool that I would like a candidate to be able to show proficiency in. &amp;#x200B; Also, I'm curious how many times you are going to ask this question? This is third post I've seen. I'm sorry you aren't getting the answer you want, but it's not going to change.
LOL I was concerned when I read git submodules until I read who would say such a thing
In UIViewController write something like this var data: Any { didSet { if let data as? String { // proceed string value } else if let data as? Int { // proceed int value } } }
Submodules are great when you are actively developing your dependencies too.
https://link.medium.com/7Q6pDqtY0V AirBnB has a huge react native effort for their apps. And they approached the technology in an attempt to achieve very specific goals. Once they realized it wasn’t achieving those goals then it became easy to determine that they should sunset it. As a business stakeholder the ideas and potential benefits are not invalid when they see them. Write once deploy twice, single codebase etc. those are good goals and valid business concerns. But they do not understand (probably) the drawbacks and concerns and limitations of using a system like react native. There is a lot of tech debt you’d accrue upon using React Native. Part of negotiation as a developer with business stakeholders and clients is the ability to drill down to the root problem and provide a solution that appeases both parties. Try and come to the thought process of theirs as to why they want react native. It might be a valid technical requirement (ex: a large react codebase that already exists that might be able to be ported for a react native app) or it might be buzzword soup where they just think it’s the “new” thing.
I think it's a pretty sensible thing to do, if not only for the added layer of abstraction where only \`public\` properties and functions should be touched by consumers but then you do need to expose them for classes like a \`Decorator\`.
It's a good idea in order to separate app layers (Dumb Views, View Controllers + Navigations, Business logic // View Models, Models // Data // Networking). Although if you create a new framework per feature it's a good way to have an exponential build time for release builds.
I don’t think that’s accurate. My team has an iOS and Android app in the stores, built with react-native and we are all JS DEVS.
You say “no” by increasing the price. Granted there is a risk of still saying “yes”.
If they’re frameworks they will be dynamically linked and would actually have a faster build time since each build won’t have to recompile the library. That being said this never works for large projects. Dynamic linking can have significant overhead - seconds to link multiple libraries. I’ve seen launch times as long as 11 seconds having too many large dynamic frameworks in an app.
You don’t have faster build time with many frameworks to codesign when doing a release build.
I agree, release builds often use the compilers optimizations and need to recompile (may even need to recompile for physical device since release often gets deployed there). But day-to-day development of feature work gets faster compiler times with dynamic framework. It’s really a catch 22 of if you want a faster daily compile times (developing) or want users to have shorter launch times (due to dynamic linking)
Can tell something more about the app, how complex is it? Maybe you could share a link to the Appstore?
And in case of ‚yes’ just find another team to handle it :p
Thanks for detailed response!
I work with a lot of companies who are building apps. There is a massive uptake on ReactNative and other similar cross-platform / hybrid frameworks. The answer is as usual: it depends on what you / your customer are trying to optimize for and the complexity / feature-set of the app itself. I have seen it be very successful, especially in situations where the app doesn't use too much of the phone capability under the hood. Apps that mostly provide content are great examples, or simple ones that emulate a web app. If you want to optimize for the cheapest way to have both an iOS and Android app, this is it! I have also seen these be very successful even where they use advanced features like machine learning on device with Android based on Tensor Flow and iOS based on CoreML, but setting these up properly and maintaining requires much more native knowledge of each platform. Pure native is great, but it requires you to usually have 2 teams if you need both Android and iOS and there may be disparities in ability around each team making it hard to get feature parity in apps. Where native tends to shine is where there is a lot of usage of low-level APIs, graphics, intense processing, etc. In short, I think RN and like frameworks are here to stay - and for good reason, but you and your customer need to figure out if they are the right solution for you.
Am I missing something, or how does the framework get access to application data and methods? For example, to show an alert, start a network download, or even just use the data model?
I couldn't disagree more. It works just fine, just decode that dict as having string or dates as keys. Works perfectly.
The application would need to use strategies like dependency injection and delegation to pass data models, methods, etc into the framework. The framework wouldn't have access to the app directly, that would create a circular dependency.
That's really access control, not abstraction. Facades have been part of object-oriented programming from long before "private".
How do frameworks like AppKit get access to your application data when you use them?
Right, but how does the framework get access to the structs and classes? Swift doesn't have header files like ObjC. Do you create a "model" framework that both the application and modules import?
What are you talking about? You might want to elaborate.
What's wrong with submodules for frameworks?
Carthage &gt; Cocoapods. @ me idc. I’ll fight.
I'm confused. When a customer asks you to make something, and it's not illegal or unethical or impossible, why aren't you doing it? In the case where your team isn't qualified to do it (e.g., no experience, had problems with this technology before), then just say so, and direct them to another team which has those skills.
AppKit doesn't know anything about private app data structures. It does know about the AppDelegate and AppKit derived classes by using ObjC's dynamic typing/class loading system, something not used by pure Swift classes/structs.
Realized that my title might not be quite enough to explain what I mean. First the button is super wide and I am not sure what is causing that. Second the icon is massive and I would like it to be smaller to be closer to a normal undo button. I hope this clarifies it a bit better
Protocols defined in the framework that things in the app implement.
I find RN works well. It’s very easy to wrap native apis and components if they’re not already available. I normally do 90+% RN with a tiny bit of ObjC or Swift for native apis when I need them
Tell them the truth. &amp;#x200B; Facebook and Instagram use RN for extremely simple screens. They have hundreds of web developers, so it makes economic sense for them to devote several full time developers to maintain an internal framework to make these web developers productive. How many full time developers do they want to devote to managing the framework? &amp;#x200B; Then point out that this has RN has a track record of failing once you get past MVP. [AirBnB](https://medium.com/airbnb-engineering/react-native-at-airbnb-f95aa460be1c) failed. [Udacity](https://engineering.udacity.com/react-native-a-retrospective-from-the-mobile-engineering-team-at-udacity-89975d6a8102) failed. [Uber](https://twitter.com/alanzeino/status/1101167947874103296) failed. These companies had the budget to throw money at the problem, and still couldn't get it to work. &amp;#x200B; Explain that despite all the hype before RN's very public failures, quantitive analysis revealed [less than 2%](https://twitter.com/sandofsky/status/981677077169561600?s=21) of non-native apps use it. That number includes companies that tried it on one screen, gave up, and never returned to it. &amp;#x200B; Then ask why they want to use it. It's almost always because they think they can write once, run everywhere. Explain that ten years ago big companies tried this with shell-apps, and it went nowhere. Propose to them other code-sharing techniques, like sharing non-UI code in C++. That's been shown to work. &amp;#x200B; If they don't listen to you, and insist on using it, then wish them well and explain that you can't help them. It's unethical to sell a client on a shoddy platform, and a bad app reflects poorly on your portfolio. &amp;#x200B; If they do listen to you, make sure to follow up when RN inevitably crashes and burns. When Zuck admitted Facebook's HTML5 strategy [was a mistake](https://techcrunch.com/2012/09/11/mark-zuckerberg-our-biggest-mistake-with-mobile-was-betting-too-much-on-html5/), and had to rewrite the app from scratch, I circulated the story to stakeholders and pointed out that we sure dodged a bullet.
There's a couple of ways to do this. First of all, you shouldn't be redrawing every single line every time. Draw to a layer and then draw again on that layer. If you have to undo then redraw everything except the last draw. After so many operations even the undo will take some time. It's probably safe to have a limited undo functionality, say 30 times or so. Keep a buffer around of the last drawing 30 undos ago and add the 30th operation to it when you add a new operation to the drawing. Then drop the 30th operation from the undo queue and add the newest operation. Not to mention that if you're lagging on 100 simple lines then you might have a problem somewhere else in your drawing code. Maybe post it so we can see what's going on.
TextEdit.app was originally Java, and I never heard anyone ever complain or even notice. Can you name any feature of Cocoa that Java couldn't properly utilize?
For longevity, I wouldn't pick (the current version of) *either* of these languages!
You could do that. But conro is saying you build the framework to be generic, know nothing about the data it’s working with. Like how UITableView uses a data source to create its cells. The tableview exists outside the scope of your data models, because the tableview can do the tableview things without knowing which data mode it’s displaying
Of course! Good luck!
which one is better for testing?
Thanks for a prompt reply!! I didn't know I could just draw onto a layer, that's insightful, thanks, I'll try that. I thought about limiting the amount of undo's, but it's not typical for most drawing apps and yet somehow they don't lag. Maybe there's some other way?
And devastate your app's loading time in the process.
Never heard of either before and I do a ton of test-driven development. Of course, testing is simple so I just roll my own.
Access control is the tool, abstraction is the goal.
There's lots of ways but most apps limit the amount of undo operations, they probably just don't advertise it and you probably just don't hit the limit. A lot depends on how heavy each operation is to keep in memory and how complex it becomes to undo it. Rather than talking in generalities the best thing to do is post some actual code and we can try to find out why simple line drawings are so heavy an operation in your code.
I’d always prefer subtrees
[removed]
You have a point there but new tech exists when it comes to buildings as well as code generation. Consider the roof on my house, the contractor looked at it and gave me options, some I wasn’t aware of, that is his job. Beyond that the contractor is responsible for meeting building codes and the like so he is not going to do things that I ask for that make that difficult to meet code. You might say that programming doesn’t have building codes. In a sense the web does have codes and that is the API’s and behavior of the browsers. Combined with the HTML and various other standards ( and browser interpretations of those standards) a programmer does have “”codes”” to comply with just like a roofing contractor. So given this, yeah a developer should try to understand the customers request and offer up alternatives if they exist. This especially if they believe react native might not be the best approach to solving a customers problem. Note that the developer has to be careful here because it is easy to get one the wrong side of the customer. Some will be unwilling to accept a challenge to their intelligence (which can be a very real response from the insecure). Others might consider any proposal you can reasonably offer up and if not that at least explain why they have this requirement.
are you actively developing frameworks though?
&gt;Facebook and Instagram are built with React Native Point out that this isn't really true; they have small bits written in RN, but most of their app is fully native.
You'd still need access to a protocol for callbacks to work, unless they were @objc objects. As conro said, the protocols could be defined in the framework rather than the application. That means no sharing of protocols between modules, though.
I would like to see some benchmarks because I suspect you are correct. I think if you use static rather than dynamic libraries it might be ok, though.
If you look there is a divider object you can put in toolbars
sadly the thing is, that top bar is a navigation bar and I can't use the dividers :(
Lmao if they ask react native, u really don’t want them as your customers lol
What about settling for a solution that involves both? Core of the app written in native and then certain features written in react native?
SOLUTION: Do no use PDF, save a master png image at 512px. Then in preview, resize to 75px, 50px, and 25px. Then put those into your asset file
My favourite answer :)
How long it took you to learn it on decent level?
They appear to both be testing libraries, so if one were better in all aspects, the other wouldn't exist. You might as well ask "Swift or Rust: which one is better *for programming*"?
The point the commenter you replied to is making is that View controllers don’t need to know about your private app structures either but those work as “generic frameworks”. An example of making your project entirely with frameworks would be like 1 framework for networking and models. This includes private structs and classes (maybe). Maybe unit tests them as well. Maybe like 10 framework modules for UI which know nothing about the models or frameworks. Like an example ui module would be a cocoapod you’ve used before. That maybe does some fancy uicollection view or buttons or a custom view controller with fancy transitions Maybe a couple more frameworks which again know nothing about your core biz logic for location management or maybe a notification or routing module. You’d then make a project that compiles all your frameworks together with dependency injection and delegation. But if you needed to update the way a module worked or make a new one you wouldn’t work in this last project, you’d have to go back to the modules or make a new one.
Thanks for that but that doesn't really answer my question.
Why not have a maximum of 31 layers then? That way no need to redraw everything on undo, just hide the top layer and merge the lowest layer with the main layer.
&gt;That means no sharing of protocols between modules Right, because ideally modules should be self-contained. If Module **A** depends on Modules **B** and **C**, and **B** depends on **C** and **D**, and **D** depends on **A** and **C**... crap gets confusing and really hard to maintain. The point is to make **A**, then make **B** with no knowledge of **A**, then make **C** with no knowledge of **A** or **B** etc. Close the door and forget that those other modules exist, and make this module in a vacuum. It's the same with making self-contained **objects**; crisscrossing them makes spaghetti code. Each module does its ONE thing, irrespective of what other modules do or what data models they use. &amp;#x200B; On an other note, I think I'm using the wrong term... callbacks are for when you pass a function into a parameter (like a completion handler), but I meant a property on an object that is a function and can be set or swapped out. For example: // Module A public class MyObject { public var onMyEvent: (() -&gt; Void)? private func eventOccurred() { onMyEvent?() } } ...and... // Module B public class Character { public private(set) var health: Int ... } ...then... // Main App class MyController: UIViewController { var object: MyObject! var character: Character! @IBOutlet var healthLabel: UILabel! func viewDidLoad() { super.viewDidLoad() object.onMyEvent = { [healthLabel, character] in // not capturing self, prevent retention cycle guard let health = character?.health else { return } healthLabel?.text = "\(health) HP" } } } This can be handy as a simple alternative to a delegate protocol (just watch out for strong reference cycles). The modules are completely independent of each other, but the main app pairs them together to make them do cool stuff. Of course, the same can be done with delegates, where only the main app sees the protocols and conforms to them as necessary (as you put it, no sharing protocols between modules). &amp;#x200B; If frameworks are the hammer, saw, workbench, etc. then the main app is the product. A hammer doesn't know anything about a saw, so if I switch out a circular saw for a table saw the hammer doesn't need to change--no cross-dependencies. The tools don't know about the product either, so they can be used to make a birdhouse, a table, a chair, whatever. Each tool is really good at what that tool does, and depends on nothing else. Then you can combine all the tools/resources in different ways to make cool things. Or maybe the main app is the glue that holds together the pieces... I'm confusing myself now. I'm not good at describing stuff :P Hope I'm helping somehow! &amp;#x200B; PS: didn't realize how long this was getting. My bad!
`func x(a: String, b: String = "lol") {` `print("Swift")` `}` `func x(a: String) {` `print("Taylor")` `}` `x(a: "test") // prints "Taylor"` &amp;#x200B; I generally understand function overloading, but I don't understand why Xcode prefers the "Taylor" function not the "Swift" one. Any ideas?
&gt; I'm confused. When a customer asks you to make something, and it's not illegal or unethical or impossible or even infeasible, why aren't you doing it? Because the same client will just blame you a year from now when it takes significantly more time and money to get work done, and their app is significantly more buggy. &gt; Suppose I went to a contractor and asked them to build me a steel building, and they came back and said some people on their team had used steel and ran into problems with it, and others on the team had never worked with steel, and wouldn't a wood building be nicer. Whose building is this, anyway? First, it's the city's. You'd need to submit permits for whatever you build. Unlike software, real engineering requires permits and following building code so that nobody is harmed when you steel building collapses in an earthquake. Sadly, there is no such thing as building-code for software. If developers build buildings, we'd tear down and rebuild sky rises every two years, and write triumphant blog posts about it. Anyway, even if you can technically build a steel building up to code, your contractor may know it will cost significantly more to service electrical or plumbing since they have to cut fresh steel instead of replacing a wooden stud. So far I've spent two years working with contractors on a significant renovation. There were many circumstances where I asked them, "Can we do X?" and the good contractor explained the issues with X, and I decided not to do it. That's why I'm hiring professionals instead of watching DIY YouTube videos.
You're getting hung up on numbers. Every x undoes save a version of the drawing layer. Draw from that drawing layer from then on. If you have the room you can keep old drawing layers for additional undo operations. blank operation operation operation save layer operation operation operation save layer operation operation operation Now you only need to reload the layer and/or draw 3 operations maximum. This is one way of doing it. Of course if each layer takes up too many resources then you can't save so far back and you'll have to limit the total amount of undo operations. If each drawing operation is light enough then you can have many levels of undo/redraw above a saved layer.
Yea seriously. Apple has a wwdc video where they actually put a number on it and say try not to use more than like 6 frameworks. In reality this can be pretty tough though. If you can make your libs static I suggest you do that.
So I knew react before RN got released. I don’t think React is too difficult to understand. RN has more to it: you style with something very similar to CSS, animations has its own api. I did find having knowledge of native development helped a lot with RN
It's really just looking for keys and values and making sure that they all match up. As long as everything matches it doesn't matter too much what the actual names of the types are. The only types that are annotated in the encoding are: CFString CFNumber CFBoolean CFDate CFData CFArray CFDictionary All other types are converted to one of those or are composed of one of those. A Swift `class` or `struct` would be encoded as a CFDictionary of keys and values. No other type information will be recorded.
This answer. It’s only one that puts you asking questions and actually trying to solve the client’s problems which in the end is what you are paid to do (if it fits your business model).
First you need to ask yourself: "What am I missing from XCTest?"
Also, I've just remember a couple more I was asked if I had have worked with linters and what do they do (I believe that's how you spell it but I am sorry if it's not ) [check swift lint of you haven't] Explain coredata, what's it's main usage and some other coredata related questions. I recommend you read this if you haven't. I was asked if i knew what memory cycles where, how can they happen and if I knew about instruments and other tools to workout some solutions to this. Also, delegation ( i didn't mention this since it's a special case of protocols) but read about it if you dont remember it very well Let me know how you do in your interview. I am open for mock interviews if you want :)
I love cocoapods, works great with fastlane
What is your target for this? iOS? macOS? An app, playground, console, what?
iOS app
lmao I was just gonna come here and ask for help on this too Fadi haha
You'd probably want to read something like this: [Build a count down timer with Swift 3.0](https://medium.com/ios-os-x-development/build-an-stopwatch-with-swift-3-0-c7040818a10f) Of course, it uses Swift 3.0 so it probably needs to be updated and I really didn't review the article. Still, you could do a similar search for something better or modify this approach.
Wow thank you so much! I would greatly appreciate a mock interview! Are you free tomorrow?
What is your title asking? &lt; It appear, It appear**s***,
Not with static libs, which can contain Swift since Xcode 9.3
But if anything goes wrong, no one really knows how to resolve the damn mess cocoapods impose on a project
Probably a flashlight
The irony
Client: I heard it’s AmAzInG, and I’m a cheap asshole that knows nothing but keeps pushing bullshit because I heard about it from some really bad outsource company.
It’s moving towards RN. Job security is in that direction so doing RN will help you in the long run. Though Flutter seems like a better approach to me, Dart is almost tolerable. iOS apps were always more stable than Android, since Swift often an order of a magnitude. I can’t imagine applications written in a language so poor that it even makes Java looks good in comparison while providing a leaky abstraction over two mobile OS’es of which one was a shit show natively already will get anywhere near that stability. Probably the pendulum will swing back to native again but still mobile is just saturated already.
building your app programmatically is highly recommended. [https://www.udemy.com/ios-11-swift-complete-app-store-programmatically/](https://www.udemy.com/ios-11-swift-complete-app-store-programmatically/) great course on udemy
That makes lots of sense. Thanks for the simple explanation!
Why the example does not work now? I had to change the `Mirror( )`init to add 3rd parameter `displayStyle: .struct`?
I haven’t really had any issues, but I’m also a maintainer if many frameworks and plugins.
So the method never gets called? Have you used breakpoints? Or do you mean to use \`keyUp\`?
The whole AirBnb thing is way more complicated than that. Transitioning an existing app to a React Native app is a thousand times more difficult than creating a React Native app from scratch. I know because I've done both and I'd never recommend trying to migrate because of the complexity.
acceptsFirstResponder return true?
Yeah it never gets called. The "d" is a variable for the key int thingy. I tried breakpoints to debug but still nothing.
Tried but change anything. Where should it be added? I'll try it again to make sure.
Is it a playground
No, full app
I’m a web/iOS developer w/ JS &amp; iOS/swift experience but no React, and it only took me about 2 weeks of full time work to feel really comfortable with RN. Obviously I had things to learn still, but I thought it was pretty easy to get up and running.
Maybe try a complete clear out of build folder?
The Airbnb thing is definitely more complicated like you said and I agree. But I linked the article to give ammunition for the OP so that they can use literature from a large company that has evaluated React Native for its merits. Your opinion is also valid. As is mine, where I’ve done similar projects as well. In my experience of talking to clients, coming to the table with articles written by big name reputable companies has more merit sometimes than personal anecdotes.
How do I do that?
What has gone wrong for you? I haven’t run into issues that could not be solved by a quick google (usually setting a build config from the podfile).
Just included Github link in the post, feel free to take a look. How exactly do I draw onto a layer instead of redrawing every single line? I only know of addSublayer and drawRect methods..
You know there's already cubic bezier curves, right? No need to reimplement them. [`addCurve(to:controlPoint1:controlPoint2:)`](https://developer.apple.com/documentation/uikit/uibezierpath/1624357-addcurve)
I'd like to recommend [XcodeGen](https://github.com/yonaskolb/XcodeGen) with Carthage with two reasons. 1. Get rid of xcodeproj means no more conflict when merged (generated by XCodeGen on demand) 2. Easy integrate Carthage frameworks
It is a member var that you just return true for.
Thanks, that's very kind of you! Yes I know of addCurve method, I'm using it, but I'm also using an algorithm to create control points based on line points. Still, I can't see how to draw onto a layer instead of redrawing every time. What's the method there?
You could use static frameworks.
Pardon me if I misunderstood your question. But are you asking what's the purpose of private and public variables? If thats the case, this might help [https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html](https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html) If not, this may help [https://docs.swift.org/swift-book/LanguageGuide/Initialization.html](https://docs.swift.org/swift-book/LanguageGuide/Initialization.html) If not, I think it's okay to omit instantiating with private variables and having getters and setters. You only use those if you want other classes to access it.
As for my experience, better to make your struct’s properties optional then handle the decoding and encoding yourself. This will help you with inconsistencies of the JSON. I’ve worked with a backend developer who instead of returning a boolean sends a string “true” or “false” in the JSON. That developer didn’t bother to change so I had to adjust my code.
I'm aware of the difference of private and public variables - my question is more on when to use them "correctly". In Java you basically never use public variables in my experience, but when looking at projects and tutorials online I haven't ran into the same strictness about private and public variables in Swift. *"If not, I think it's okay to omit instantiating with private variables and having getters and setters. You only use those if you want other classes to access it."* Yeah, so a lot of my objects are more for holding data rather than having a lot of logic, so in almost all of them I will access the variables from outside classes to set new values or show their values through labels etc. The point was then, should I opt for option one or two?
If your professors are expecting "getters/setters" in the Java sense, where you have an instance variable then accessor/mutator functions for each ivar, you can explain that Swift takes care of that for you. Properties (like id, location, uuid, etc.) are implicitly an ivar + setter/getter. You just don't write the Java-style boilerplate. When you write `var name: String`, you are implicitly writing `func getName() -&gt; String` and `func setName(_ name: String)`. Swift just generates that for you, if necessary.
&gt; a lot of my objects are more for holding data rather than having a lot of logic This seems like you might want to use structs instead of classes
Oh, really? That's nice to know! But my question is what is `var name: String` closest to or equal to of the two instantiations below. `private var name: String` `public var name: String` I thought `var name: String` was the same as `public var: String`, because I can access the variable directly from other classes. But if you are saying that when I have an instance of a Beacon in another class, and its name variable is instantiated as `var name: String` and I write to the variable the following way: [`beacon.name`](https://beacon.name)`= "John"` , I implicit call a function `func setName(_ name: String)`, does that mean that I can see `var name: String` as private with the getters and setters implicitly set?
Yeah, that's true as well. But doesn't change the fact that I need to consider the private/public instantiation of variables, which a struct doesn't solve. But thanks for the links, I'll try to dive a bit deeper into it.
If it's just a struct to store your data, then it should all be public since it shouldn't run any logic that'll change a private variable. Private variables are useful for when you need to store a state within the class that no one else needs to use.
Ah, okay, that makes sense. Yeah, so that was what I was more interested in. So a rule of thumb is that when having a struct, which often only serves the purpose as a data structure (I know it can have functions too etc.) it'll be alright to keep the values public, since you are accessing them from other classes.
Great! Glad I finally helped. Usually for me structs are just really simple stuff like a 2D Vector that only has x and y as floats. Then my Player class would have a position that's usually either public, or private with getters and setters.
Yeah, I mean that also makes sense. I guess I was just a bit puzzled because a lot of my model objects did not have a lot of logic, hence they were more data structure like which resulted in a lot of public variables. But yeah, I'll probably refactor a lot of them into structs instead. Thanks :-)
`var: String` is `internal var: String` which means the var is public *within the module*, `public` would make it available outside the module Its been a long time since I've used java but I think this is the default access there as well, but since Java uses modules / packages more often the public access change is required more often
Swift has `public`, `private`, and `internal`. `internal` is the default. That means that anything else in your app or library can access it. But if you're making a library, then nothing outside can see it. So `var name: String` is actually identical to `internal var name: String`. So, if you're writing an app, it's like `public var name: String`. If you're writing a library, to external code it's like `private var name: String` (because only the library internal code can see it). &gt; does that mean that I can see var name: String as private with the getters and setters implicitly set? Yes. getters/setters are just there implicitly. You always access properties through their getters/setters. The compiler's optimizer might notice certain patterns and promote your code so it accesses the memory directly instead of through a method call, but that's an optimization. From a language perspective, if you access a property, you're going through an accessor if one exists.
We had a submodule framework in one of my earlier project, this sub module was used in two diffrent projects(Project A and B). Devs of both the projects worked on the submodule, many times some dev on Project A would make changes to the submodule that would make it unusable on Project B. This would go on for some time until it was decided to keep separate branches of submodule for both the projects, there by defeating its purpose.
The default access level is “internal” which is visible to code in the same module, but not to code in other modules. The somewhat over-complicated Swift access levels are open, public, internal, fileprivate, and private.
From an UML diagram perspective (do you have experience with those?), there are the options of private and public (in theory also something called protected, but let's ignore that). A public variable is when another class can access the variable directly. A private is when it can access it through a setter and getter - so I guess I could make the statement that Swift's internal variable == private attribute in the domain of UML diagrams. They seem to behave the same way at least
&gt; instead of returning a boolean sends a string “true” or “false” in the JSON. That developer didn’t bother to change so I had to adjust my code. It's great that Swift lets us customize decoders and handle this, but this kind of stuff drives me crazy. It's reached the point at work where server devs will review this stuff with me before shipping it, because I complained to their managers enough about how their APIs were horrible. Same thing applies with dates – don't send me 2 different dates in 2 different formats in the same JSON response!
Why not have a reviewer from both projects that both would need to approve a pull request? I mean if both the reviwer and the dev making the pull request knows how to develop frameworks then that's even better.
`AVPlayerViewController` has a `contentOverlayView` property. You can add a `UILabel` to that view and have a `Timer` which moves it at specific time intervals.
I'm copy pasting my answer from the answer above: &gt;From an UML diagram perspective (do you have experience with those?), there are the options of private and public (in theory also something called protected, but let's ignore that). A public variable is when another class can access the variable directly. A private is when it can access it through a setter and getter - so I guess I could make the statement that Swift's internal variable == private attribute in the domain of UML diagrams. They seem to behave the same way at least I mean, if the internal variable is accessed through a getter and setter and not directly as a public variable, I would think it can be inferred as a private attribute when creating the UML diagram.
`private(set) public var uuid: String` or if you don't want to change it after initialization: `let uuid: String`
There's lots of variation to access control. UML has public, package, protected, and private. Swift has public, internal, private. | swift | UML | | public | public | |-------------|-----------| | internal | package | | private | private | | fileprivate | n/a | | n/a | protected | So `var a: String`, `a` is `package` in UML-speak.
It’s true! As web service developers their APIs should be well written and follow the standards. Most often I encountered devs that will not make changes since they’ve already done the API and as a mobile dev I am always left to adjust my code. Different structure for models, date formats, JSON properties returned as string, and so on.
Uhm, I see. Thank you so much for the clarification! I didn't feel like there was much on UML in Swift terms out there!
There was a review process but this guy was new and merged it without following process. I found out when our build started failing.
The answer is that Swift is not Java. Internal is between public and private. It’s effectively public to code in the same module and private to other modules. You should not write getters and setters as methods (and your option 1 won’t even compile), and even in cases where you create a property that has get and set, you can only access them through the property name, not with any method-call syntax. https://docs.swift.org/swift-book/LanguageGuide/Properties.html https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html
You need to set up the permissions in your repo then. Only pull requests for master/dev/whatever branch and only the reviewer group is allowed to merge those pull requests.
You can control cursor keys with the overrides of functions moveUp, moveDown, moveLeft and moveRight with: override func moveUp(_ sender: Any?) { print("Press up") } Also, event.characters has the key and you can use: event.characters?.uppercased().first Or even detect raw cursor keys with: if event.modifierFlags == .numericPad, let arrow = event.charactersIgnoringModifiers, let keychar = arrow.unicodeScalars.first?.value { swift Int(keychar) { case NSLeftArrowFunctionKey: case NSRightArrowFunctionKey: case NSDownArrowFunctionKey: case NSUpArrowFunctionKey: } } Best regards
Oh and don't forget those who implement the change onto the current version which you already shipped...
i prefer xCode case it's sounds like x-man :-D
Projects - clear then go back to projects with alt key pressed and it should show then (sorry I’m away from my laptop on holiday so those buttons might not be those exact words)
I am beginner in using Swift and pretty comfortable in it but currently I got a challenge to use C/objective - C in one of my project , where the critical requirement which I feel as a challenge is "Create a C source code module and build them into a static library and integrate with the dynamic library." **tried methods :** * explored how to create static library in xcode, able to find some stuff in internet but all are recommending to use objective C/Swift , cannot find how to use "C source code module" (first question) * also understand that can also choose C language in xcode while creating a new project file for macOS and choosing command line tool (and tried running some sample C language code snippet , it worked). but not understood how to write a static library using c lang (second question) . *any small help would be highly appreciated .*
Part of the issue is you seem to be doing your smoothing algorithm every time you draw or re-draw a line. Why aren’t you caching the intermediate result in some way and using that to draw? If you have to re-calculate every line every time you do a draw of course it’s going to be slow once you get to a decent number of lines.
Late to the party, but I’m starting from scratch and rebuilding one of my apps from the ground up using Swift. It’s going to be nice to move away from my 4-5 year old Obj-C code base, but damn if this won’t take forever with a toddler running around. 😂
Nope, maybe on monday. Where are you from? (For timezones purposes ofc)
From my understanding and as Doc says, if you create any var default behavior is `public` if you really want to make it private in swift, then you need to declare by `private` and add setter getter methods for it.
Because of the way Swift handles its fields, you never have to declare a dedicated getter/setter for them. The only time you should see this is if you want to associate something, like `set(value:forKey:)`
Default access is internal, not public
1) Why do you have an id and a uuid? 2) You might consider making the uuid property a UUID instead of a String. 3) Block 1 will throw compile-time warnings, because the getter and setter are recursive functions, equivalent to this: class Beacon { func getUUID() -&gt; String { return getUUID() } func setUUID(_ uuid: String) { self.setUUID(uuid) } } The general practice around that problem (if you really want to use getters/setters) is to add the prefix "\_" to all the private properties: class Beacon { private var _uuid: String public var uuid: String { get { return _uuid } set { _uuid = newValue } } } ...but in this case, that just complicates a simple solution (Block 2) for no real benefit. **If your getter and setter expose exactly the same interface as the property, just let the property** ***be*** **the interface** (no getter/setter needed). &amp;#x200B; Getters and setters make more sense if you think about them as "computed properties". As shown above, they're just functions in disguise. Take a simple View object: class View { var origin: CGPoint var size: CGRect var center: CGPoint { get { let x = origin.x + (size.width / 2) let y = origin.y + (size.height / 2) return CGPoint(x: x, y: y) } set { let x = newValue.x - (size.width / 2) let y = newValue.y - (size.height / 2) origin = CGPoint(x: x, y: y) } } } Outside the object, `center` looks like just another property. But really it's just a handy, convenient way of looking at/manipulating `origin`, using the center-point of the view instead of the top-left corner. (I ripped this example straight off UIView. If you override the center property of a UIView and provide a default value you'll get a build error, because you "cannot override with a stored property". The original property wasn't stored, because it's a *computed* property) &amp;#x200B; 4) finally, and this is just my personal pet peeve: if you're not using features of NSObject, don't use NSObject (if you are using NSObject features feel free to tell me I suck). Always inheriting from NSObject makes no more sense than always inheriting from (\*conforming to) UITableViewDataSource--if you don't specifically need that functionality it just clutters up the object's interface. In Java everything inherits from `Object` one way or another, but Swift specifically avoids that pattern. All objects should inherit only from the stuff that that object needs. Question everything. Trust no-one. Not even me.
Swift's access modifiers are: `public`, `internal`, `fileprivate`, `private`. Default behavior for everything is internal. Imagine you're making a framework that declares MyObject, and you want programs that import you framework to have access to MyObject, but not to its property 'id'. You might write something like this: public class MyObject { var id: UUID // equivalent to writing "internal var id: UUID" } If you're using Xcode, pull up a file that declares some object in your main editor, and open the Assistant editor (make sure Assistant window is set to "Automatic" or "Counterparts"). The Assistant should show you the fully qualified interface of the object in your main editor. If you wrote the stuff above, the Counterpart would be: public class MyObject { internal var id: UUID } Can be handy for seeing how your object is going to look from outside the object.
I have this sometimes too but it eventually disappears. Have you tried just quitting Xcode and reopening it?
Try “Let’s Build That App” He uses Swift for design aspects.
It’s not “stepping it up” to build UIs without IB. It may be an alternate way of doing it, but it’s not inherently better. In fact, there are a lot of downsides. Why are you considering it?
I just wanna learn
Exactly. There are some people that swear on their lives that Storyboard or Programmatic is better but seriously guys, not one is better than the other. Just because some guys on the Internet say that programmatic code is better because there are no merge conflicts etc doesn't mean that it is the one and only way to create apps. We use Storyboard at work very extensively and I've had no problems with it.
I manage the CICD at my job and am responsible for notifying teams to tell me how to fix their merge conflicts if any when jobs are forwarding changes to the next month. Out of the over many teams and developers, conflicts related to storyboards have been like one in 2 years. I find it funny when people say storyboards cause conflicts. No, bad team members do. And let me specify we have over 40 iOS developers. That’s a lot of pull requests and changes going on.
How is it stepping it up? It’s a good skill to have if needed but they each have their pros and cons. Storyboards make it easier to bring the view controller to life. Also easier to visualize and know what elements go with what. Some developers write shitty names for outlets. If they did it all programmatically, it be a fucking mess to review their code, especially since it adds more lines of code.
I swear by IB, and use code for those parts of the IB-sourced view hierarchies (various atttributes and animations/segue) Too many things you give up — to say northingnof doing spatial layout using a visual/spatial tool in the first place — to resort to programmatic means. It’s like using assembly language instead of a higher level language because you “should know how”. And that’s not even considering the people who may have to maintain and extend your work after you’re no longer on the project.
This, Brian is the reason I've gone fully programatic.
Naming aside I believe it makes it easier to work with auto layout, animations, changing constraints etc... BUT, the code bloat is real. Code structure is imperative, and it makes the on boarding process for new developers on the project a hell of a lot harder.
You don’t need a tutorial if you’re familiar with storyboards. You’re adding the same constraints in code. Just lookup the syntax for adding constraints / anchors
We had an engineer at apple come to our conpany for a training. He told us to use storyboards whenever possible. He said that a few years ago it was a git nightmare but has improved a ton since then. I would code the UI whenever you cant use the storyboard, which should be seldom.
Then comment that on the PR and wait with continuing reviewing that part of the PR till it's fixed. It's also easy to visualize views made from code if the code is well structured and constraints are added in a logical order.
Yes but we’re talking about over 15 PRs made weekly by over 10 teams. Not everyone codes clean sadly.
Then reject the PRs until they hit a quality level that you are comfortable merging.
The question was without Storyboards, not without IB. If Storyboards aren't worse, why does Apple avoid them so? In all of macOS and its stock apps, they only use Storyboards for 2 or 3 preference panels -- even in apps which came well after Storyboards.
I’ve worked at Google, Spotify, and now Facebook doing iOS at all three. Want to know how many used IB? Zero. Maybe if you want to do iOS development for a lemonade stand sure use storyboards, but if you want to join the big leagues, you’re going to have to write views by hand.
Don't use vanilla auto layouts, they're just an exercise in typing tons of hardly readable code to do very simple stuff. Try [https://github.com/roberthein/TinyConstraints](https://github.com/roberthein/TinyConstraints) or [https://github.com/LucasVanDongen/Constraint](https://github.com/LucasVanDongen/Constraint) (the last one is a bit of self-promotion ;) ). A non-leaky abstraction over autolayouts makes you twice as productive while delivering more readable code.
don’t force unwrap (as!) unless you are 100% that there exists a node with that key. you can use simple `if` statements or also `if let` and others: https://link.medium.com/ICVQtg092V
Also, if you post text it’s a lot easier to help you than if you post images.
You’re trying to unwrap an optional that has a nil value assigned to it. When you use ‘as!’ The exclamation part is unwrapping the optional. You can just check if the optional is nil before you unwrap it. So you can do if (self.childNode(withName: “threats”) != nil) { threats = ... }
or at least use a screen shot for god's sake
Do you use storyboards as a design tool? I use Sketch to design and visualize everything then code it.
You can use the [Apple Music API](https://developer.apple.com/documentation/applemusicapi) for this. It’s a [JSON:API](https://jsonapi.org/) flavor of API so you might find some tools there to help. Note that to fetch data about the users library you will both a developer token _and_ the music user token.
So not to rehash what everyone is saying about the nil operation, the node that you have defined as “threats” has not been initialized or isn’t fully initialized and should be the first concern. Also you haven’t made your node a child of the receiver so of course it’s gonna return nil. You might have it as an attribute but it’s not a child and therefore calling it returns nil. If you want to see and test, try printing out the class’s children nodes. It will probably print nothing.
yeah i’m sorry i don’t have my laptop with me so i was trying to solve the problem from afar. my bad :(
Could it be because those apps are from before IB was an option? If you're already programmatic, no reason to refactor into storyboards. I feel like there could be more compelling arguments than simply "but they did it" without even knowing why.
We also use IB and it helps and it's perfectly fine. Not to mention it's easier for the other teams because we can show them the storyboards.
1. I'm communicating with a node.js server which is a part of the system, and the id is a specific generated ID, while the uuid is another type of ID ish. But yeah, could probably skip the "normal" ID. 2. A bit unsure why tho? The uuid is associated with a physical beacon object and it contains a String, so I don't see the real benefit of having an UUID type in this scenario 3. Wow, that is ugly haha - thought there would be a better way to have a getters and setters. But thanks for the demonstration, I guess I'll omit them 4. Yup, you're completely right. I've also changed most of my model's to structs instead of NSObjects. Thanks for the "rant", I appreciate it! :-D
1. Do whatever makes sense, I could be wrong. I just know that it can be a nightmare to have different ids for an object, i.e. localID and syncedID or something. 2. UUID is a built-in type in Swift that's convertible to/from a String. It's just nice to be guaranteed that your uuid will always be a uuid and not some random string like "Johnny Appleseed". But again, if it's easier/better for this situation to do it that way, do it that way. 4. Structs are great. Happy coding!
Thank you ☺️
It's fine to keep stuff in memory that might be needed later. Try this to see if it still stays in memory after a memory warning: https://stackoverflow.com/a/9892627/6324550
hahaha gonna make a new thread
You could just start with https://github.com/SnapKit/SnapKit for autolayout.
Thats for web based stuff I am using the media player. I have already got access to playing songs I just don't know how to display all the songs in a list.
Swift will chose the most suitable candidate, so the first function will never use the default parameter. If the second function also had a second parameter with a default value, you would get a build time error when trying to call x with only 1 parameter because both candidates are similarly good. I think this should at least have a warning about your first function never using the default value for b.
Apple uses Storyboards and “is in the big leagues.” Their apps seem to be much more polished across various devices and languages. I suspect this is because they’re able to test UIs more effectively through Storyboards.
You make it sound like those companies’ iOS apps are the pinnacle of the iOS platform. To me their apps are unpolished across different devices and in different layout scenarios, routinely break the Human Interface Interface Guidelines, and just don’t feel like native apps. I imagine that their UI testing isn’t very thorough, and that’s in no small part due to writing UIs in code.
I’ve gone through redesigning an app that was mostly built via storyboard and let me tell you it can be hell. Not to mention design in storyboards is extremely hard to reuse throughout your project. I’d much rather create a custom UITableViewCell one time in code and reuse it than fiddle around with storyboards to make that appear several places in an app. I think you’re totally right looking into programmatic interweave development
The reason I like programmatic better is because I can call custom ViewController initializers and provide my data that way and make the default init private. Less optionals to worry about.
Is it many small storyboards though or a few massive ones? My understanding was that massive storyboards cause conflicts, and are a pain to resolve
As in he persuaded you to go all in on one approach, or he taught both approaches and you decided on that yourself?
/u/Godly_Sinner could you clarify if you mean Storyboards, or Interface Builder more broadly?
You can develop all sorts of software other than iOS apps with Xcode. You could work on developing command line tools. You could also just use the swift compiler and develop with other IDEs/text editors.
There’s a lot of storyboards. Some teams may have massive ones because that’s how they do it. But most people I see here complain about storyboards causing conflicts, they don’t say massive ones.
Xcode comes with a playground which is worth checking out. Just open Xcode and choose the playground option. :)
Yes we do that. We don’t merge if it sucks. I’m the most picky reviewer. Sadly some developers just suck and keep making the same problems. And apparently, almost more than half have never heard of MVC because a lot of them prepare the cell UIs in the view controller, leading to incredibly large cellForRow methods.
At my job, no. We don’t have Sketch. The UI teams give us the designs and then we build reusable components from it. No, storyboards is not a design tool. I do use Sketch for designs. I use storyboards to bring them to life faster. Except all of the UI specific things (like color themes, font, etc.) are all done in code. I find storyboards is just easier for constraints since I’m a visual person.
http://online.swiftplayground.run This is an online playground that is constantly updated and allows you to download anything you write.
Exactly what i was looking for. Thanks
Awesome! No problem
Better performance, better scalability, better maintainability, better for large teams. The only real advantage storyboards have is for rapid prototypes or very small, uncomplex apps.
FB was rewritten well after storyboards came to be, and Google rolls out new apps constantly.
If you properly encapsulate your layout into view classes then the onboarding for new team members should be no harder.
I started with storyboards and moved to building everything programmatically after a couple of years. How long have you been building iOS apps?
Since 2013 and also when Swift was introduced. I also work as an iOS engineer.
I would assume you still build custom UI components programmatically though, right? And then use storyboards as a supplement? Like if you have a custom button, you aren’t defining everything in the storyboard are you?
No. I use storyboards and nibs for constraints and element placing. Everything else is done in code: text, colors, etc.
Good deal man!
Something like this? https://developer.apple.com/musickit/
Some things cannot be done in storyboards so its at least worth learning in case you need it one day
Great question. I was under the myth that it mattered which ine but best to learn both and let me decide what I think is appropriate.
It’s not about the apps, but whether making UI without IB is an important skill or not.
Bigger doesn’t mean better. I would rather write a lemonade stand app than work on google spreadsheet app.
Some people are ok floating around in the minor leagues, some people want to be in the big leagues. Depends what you want.
Considering the beginners and more documented and accessible way to create apps is wirh Storyboard, I think doing it without it, is stepping up the iOS development skills. In my career it came on a point, where I was more involved in building reusable app frameworks. They allowed to e.g. provide a native app based on en elaborate xml description (for which we built a web editor). IB or code doesnt say anything about whether the app will be good or not. To really benefit from the programmatic approach, you need to have a bit a more complex usecase than just a 10 predefined screen app. E.g. highly variable article views or similar stuff. Then it can allow for greater reuse and safe you a time in the long run.
I can't recommend this Youtube channel highly enough.
Brian Voong's LTBA tutorials are what I always turn to when I need to work without storyboards. https://www.letsbuildthatapp.com/
Why can’t you have a cell in a nib and register it in several VCs?
For online editor, you may want to try mine here: https://pak.lebah.web.id/webswift It works on a Linux machine. If you want a local editor, you could simple use VS Code and some appropriate extensions. Here's mine: https://imgur.com/aZGSAcL
You actually can do that. I’d just rather not have to every time
&gt; I’ve worked at Google, Spotify, and now Facebook doing iOS at all three. That's interesting. Last time you were arguing this point, it was only Google and you were purportedly working there at the time. And that was only a month ago or so. You sure do get around.
Lmao
Absolutely 💯... Don’t let these noobs tell you otherwise brother.
Google's Colaboratory supports Swift https://colab.sandbox.google.com/notebooks/welcome.ipynb
He's Beast
Same. Feel so clean and in control :)
How would one go about making CLI tools or just using the compiler to make other apps?
C-C-C-Combo-breaker!
I avoid using storyboards in all my projects. Instead I use pure code or xibs to write VCs, and write custom views programmatically only, which is the cleanest way to develop UI I found over the years. When working with large codebases that use storyboards and segues extensively, I always feel frustrated when I attempt to figure out the logic flow of the app, as I have to constantly go back to a massive shithole storyboard and oppress the urge to punch through the screen when xcode freezes again.
I personally prefer this approach as I can programmatically set the constraints. I had too many problems getting frustrated with the storyboard constraints, probably pinning to the wrong view. I took the purelayout framework and hacked together a version for the new iOS.
File -&gt; New -&gt; Command Line Tool?
Oops, if that’s really it, thank you. I guess I’ve never looked into doing anything other than iOS dev with Swift so I never gave that option much thought when I saw it
This is one of those areas of Swift that's not well specified or documented. I'd link to the section of the manual that describes how it decides which one to pick, but there doesn't seem to be any such section. It's also somewhat arbitrary right now, and I wouldn't depend on its behavior staying the same forever. There's a number of bugs filed against it. [SR-2810](https://bugs.swift.org/browse/SR-2810) found that it picks the function with the same number of parameters as arguments it was called with -- *even if* those include parameters with default values (as here), or variadic parameters, and thus this choice makes no logical sense.
I've been in the iOS industry for awhile and am always confounded to hear people find storyboards useful. Most iOS devs I've asked find it quite clunky and unintuitive. And those that do prefer it seem to only be using it as a substitute for a more design-equipped software like Sketch :/
lolololol
Fulgor was my 2nd fav. I'm a Spinal guy.
You're assuming that's the case. Nowhere in Apple's language manual does it say the compiler will pick the "most suitable candidate", nor have you defined what "most suitable" means. func f(x: Int..., y: Int = 0, z: Int = 0) { print(x, y, z) } func f(x: Int...) { print(x) } Is the first definition of `f(x:)` here "most suitable" when exactly 3 arguments are passed to it, and not when 2 or 4 are? I see no reason this would necessarily be the case -- and from the comments in the Swift bug tracker, it looks like other people don't think so, either.
Spinal is classy but the brute force and speed of Fulgore used to live me in awe.
Teleport, "dragon". Good stuff.
Being in code helps me learn the apis better. Then when I do decide to use IB it can be thoughtful vs default. That is my thinking right now.
Ooooh this is very good. I went through college in Vim and sometimes prefer it for macro wizardry, vimdiff, or other stuff.
Working on the Facebook app isn’t something to be proud of. It’s a product people begrudgingly use out of fear of missing out, not because they enjoy it.
I use xvim2 so I can use vi with xcode but dang this is nice for those one-offs. Gonna go do this. 👍
Swift can now run on Linux and Windows (WSL) as well, so you may code on any Text editor that supports Swift syntax and then compile it, just like an IDE. I have used VSCode for that.
 I'd just like to interject for a moment. What you're referring to as Linux, is in fact, GNU/Linux, or as I've recently taken to calling it, GNU plus Linux. Linux is not an operating system unto itself, but rather another free component of a fully functioning GNU system made useful by the GNU corelibs, shell utilities and vital system components comprising a full OS as defined by POSIX. Many computer users run a modified version of the GNU system every day, without realizing it. Through a peculiar turn of events, the version of GNU which is widely used today is often called "Linux", and many of its users are not aware that it is basically the GNU system, developed by the GNU Project. There really is a Linux, and these people are using it, but it is just a part of the system they use. Linux is the kernel: the program in the system that allocates the machine's resources to the other programs that you run. The kernel is an essential part of an operating system, but useless by itself; it can only function in the context of a complete operating system. Linux is normally used in combination with the GNU operating system: the whole system is basically GNU with Linux added, or GNU/Linux. All the so-called "Linux" distributions are really distributions of GNU/Linux.
&gt;It may be an alternate way of doing it, but it’s not inherently better. In fact, there are a lot of downsides. This. Sometimes it's better to use Storyboards. Sometimes it's better to do it in code. The sign of a great Developer is someone who knows which approach to take and when. Personally, I take the middle-way and use View based UI's. This allows for a lot of re-use in the same App and between different Apps. It also makes development faster since I can use a basic test App that has the UI immediately available.
If you work in a team it’s better
UIProgressView is more precise than one decimal place - you can set progress value to any number between 0 and 1. How did you get that it’s precision is only one decimal place?
It says in the apple documentation. And when I try to set a value less than 0.0 it just defaults to 0.1 when I run it.
&gt; The current progress is represented by a floating-point value between 0.0 and 1.0, inclusive, where 1.0 indicates the completion of the task. The default value is 0.0. Values less than 0.0 and greater than 1.0 are pinned to those limits. That’s a quote from docs - there is nothing about precision, only about the domain - between 0 and 1. You mentioned setting value below 0.0. How should it even be displayed when 0 means empty progress?
I set the value to 0.01 just to test it out and I could tell that it was not 0.01 and it looked the same as 0.1.
I think I may have asked the wrong question. My question is how I can get less than 0.1 in the progress view
I just tested that, and 0.01 looks much different than 0.1 on UIProgressView. Maybe it's matter of width of progress view? I created UIProgressView with the width of the whole screen.
Works fine for me. Here's a screenshot with three UIProgressViews. The first is set to 0.1; second to 0.01; third to 0.001. They all look different. https://imgur.com/moC4N0f
I was able to fix it. I just created another progress view and made it 1/10 the size of the first one. So when it first runs it will run the small progress view and then it will run the big one. This way it is super precise. It looks even more precise than actually making the progress view equal to 0.01.
I thought FB uses React Native for a lot of things. I thought that was a huge part of the reason why React Native even exists- that and Instagram.
I don't think I've ever met somebody this proud to work for these companies literally thousands of people work for. I used to work for Apple doing iOS (hardware) development. To me it wasn't the worst, but it was certainly among the worst places I've worked. Just because the name is big and recognisable doesn't mean it's a great place to work or even that you're a good engineer.
The only ones complaining about them probably don’t know how to use them right. I see a lot of people complain about constraints, but if you really know how to use them it’s not a big deal. How is it clunky and unintuitive? It makes it easier to bring view controllers to life. I’m also a professional iOS engineer and I work at one of the big 4 banks. We don’t have a requirement of which to use but most teams use storyboards. Makes it easier to know what elements correspond to what, especially on very complicated interfaces. On my own projects, I use Sketch for designs. Storyboards is not a for designs. It’s for development.
Works on Linux?
You stay in HK?
I'll try that too, thanks
Why?
One important point, everything done in IB can be done in code but not everything done in code can be done in IB.
While true, this bot needs a hobby.
You filter your ble devices using service uuid while you start scan for peripheral. Otherwise you can have a look in advertisement data white key for local name to filter in the peripheral that have been discovered. To easier things you can have a look a the following library. [Gormsson library](https://github.com/MoveUpwards/Gormsson)
Yep!
Thats cool I have never even thought of using VS for Swift.
Does anyone know which color scheme that is? Reminds me of torte but seems a little different.
It's a code smell to have two authoritative sources for the same data, and also to compare Doubles for equality. It probably won't matter here, but why do this? It's a weird use of observers. Just make struct Temperature store the value in SI as soon as you get it, and use a computed property for non-SI units the user wants.
It was much more passive, I used to watch his videos for help, all unrelated to UI. Once I got the opportunity to start an iOS application at work from scratch I wanted to push myself out of my comfort zone and remembered that he would always preach the power of programmatic UI.
*know, not now
Have you checked the xib, the outlet might still exist there?
Do you know what services are on the sensor? Because you can send the UUIDs into the scanForPeripherals function and it should only scan for devices with those services. So you should only find your specific devices. Also a shameless self promotion. I did a talk about core Bluetooth. You can find it here: https://youtu.be/XEUxl5zlNVw
You can just call a sort() method on your pictures variable like this: &amp;#x200B; &amp;#x200B; pictures.sort()
Do you mean that I should do this in line 13?
writing pictures.sort() within the viewDidLoad function does nothing for me, the names of the images are still displayed in a random order in the table view controller simulation
Yep, no need to complicate it, sort the array after your pictures array is full I.e after the for loop
Put it after you have added items to the array
Damn, it seems so obvious now, and it worked. Thank you!
Got it, thank you for helping me!
I’d recommend replacing lines 24-28 with: pictures = items.filter({ $0.hasPrefix(“nssl”) }).sort() (If you copy and paste it, you may need to replace the quotes with straight quotes.) Also, calling an array of Strings “pictures” is misleading. I’d probably use something more along the lines of “imageFileNames”.