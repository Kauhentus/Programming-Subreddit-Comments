Just use a Timer, update an incrementer and stop the timer after 4 runs
What does the 1 second represent ? is it purely a cosmetic delay to the user or is it so a process can finish ?
If you are actually waiting for some process to finish and not just arbitrarily waiting 1 second, I would instead look into dispatch semaphores or dispatch groups.
 import Foundation struct Answer: Codable { let id: Int let text: String } struct Article: Codable { let id: Int let title: String } struct Video: Codable { let id: Int let title: String } struct EveryType: Codable { let answer: Answer? let article: Article? let video: Video? } if let data = jsonText.data(using: .utf8), let decoded = try? JSONDecoder().decode([EveryType].self, from: data) { print(decoded) } 
So you make a type struct box: Codable { var article: Article? var video: Video? } Then Article and Video are their own struct/type as well. 
The 1 second is a cosmetic delay yes, by far the most important part is waiting until the loop is finished before continuing.
The 1 second is just a cosmetic delay, by far the most important part is waiting until and making sure the loop is finished before continuing.
With Xcode 9.3 in probably another month or so.
There’s a little bit of info on apinotes [here](https://github.com/apple/swift/blob/master/apinotes/README.md) if you’re interested; unfortunately they’re not really documented well, but you might be able to construct something by looking at examples from the repo.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apple/swift/.../**README.md** (master → be93fe0)](https://github.com/apple/swift/blob/be93fe04f5b6e9cacb44adfd4c8c00d06c572cd0/apinotes/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dv0t8a2.)
You can use the code you posted with the dispatch now but you would need to do: for x in 1...4 { for y in 1...16 { DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + x * y) {} // CODE ADDING MOVEMENTS TO QUEUE } updateBoardArray() printBoard() // NEED TO WAIT HERE FOR 1 SEC } But that would take 64 seconds to complete ? 
Very nice to see some activity on the server side of things for Swift. But it would be important that major players really get on board and create some kind of standard. I would love to see something like the Phoenix framework for Swift. 
This is the way to go, see [my answer](https://www.reddit.com/r/swift/comments/812dbs/json_array_of_mixed_types_jsondecoder/dv0s0xd/) for all the nitty-gritty details. You don't want the last struct, though, since what you have is an array of objects - not an array of objects containing arrays of objects. Also, you really should prefer to use `let` over `var` unless you're absolutely sure the property needs to be mutated. It's safer.
&gt;If you just want C-like macros, nothing's stopping you from using a preprocessor I want the language to have them. They should be *part of the culture of Swift*. It is important to write code other developers can understand, use, build, and build on. gyb is internal: Internal tools are subject to wholesale replacement in Apple. I'm aware of it, and it's not as aware as [Stencil](https://github.com/kylef/Stencil) or understandable as just using something like [pystache](https://github.com/defunkt/pystache). Lisp level macros (which are primarily different from C macros in that they are abstract syntax tree units rather than sliced/pasted strings) would of course be preferred, but if that's too much, even a half measure would be appreciated to solve the most basic of issues. ### At the third party level: "Move whatever speed, and break things" approach of Swift, third party libs aren't always reliable building blocks in the long term. [Sourcery](https://github.com/krzysztofzablocki/Sourcery) is *alright* (and is somewhat a mix of codegen and AST aware "macros" for sake of this discussion) The lower level [SourceKitten](https://github.com/jpsim/SourceKitten) is alright for making your own tools, but still suffers the third party curse. 
I started at DevMountain about a year ago. Just like most things, you get out of it what you put into it. If you go, work your ass off. Put everything else aside and focus on that for a few months. You'll come out with a solid foundation, but you will still have a LOT to learn. You won't have a ton of CS type knowledge, but you come out with 2 apps in the app store and the practical knowledge to get you started. When you leave, keep working on your own apps, until you find a job. There are people at DM that are there to help you find a job. They could do some more there, but they can't find a job for you. But I was able to find a job about 6 months after leaving DevMountain. Personally, I am happy I did it. I would do it again. It isn't perfect, but I know the people running the program and I know that they are constantly trying to improve the program. And it is called a bootcamp for a reason. I was thinking it would be 9-5 maybe a little longer, but it was more like 9-9 or 9-11. It was a lot of work. It was exhausting, but it was really fun and now I am working in the industry at a great job, making more than I was expecting to make right away. I'm happy to answer any more specific questions you may have.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [krzysztofzablocki/Sourcery/.../**AutoCases.stencil** (master → a07ff96)](https://github.com/krzysztofzablocki/Sourcery/blob/a07ff96453e5138b6735ff9541d8cc67918450e8/Templates/Templates/AutoCases.stencil) ---- 
The answers provided by /u/thisischemistry and /u/bmbowdish will work, but instead of making a struct with all-optional properties, the recommended solution is to provide an `enum` instead: struct Answer : Decodable { let id: Int let text: String } struct Article : Decodable { let id: Int let title: String } struct Video : Decodable { let id: Int let title: String } enum Entry : Decodable { case answer(Answer) case article(Article) case video(Video) private enum CodingKeys : String, CodingKey { case answer, article, video } public init(from decoder: Decoder) throws { let container = try decoder.container(keyedBy: CodingKeys.self) do { self = .answer(try container.decode(Answer.self, forKey: .answer)) } catch DecodingError.typeMismatch { do { self = .article(try container.decode(Article.self, forKey: .article)) } catch DecodingError.typeMismatch { self = .video(try container.decode(Video.self), forKey: .video) } } } } This way you can't end up with a type that has no content, unlike the other solutions. With this, you can now have let decoder = JSONDecoder() let feed = try decoder.decode([Entry].self, from: data) If you want a little bit more fanciness, you can also add struct Feed : Decodable { let entries: [Entry] public init(from decoder: Decoder) throws { let container = try decoder.singleValueContainer() entries = try container.decode([Entry].self) } } so you can then `try decoder.decode(Feed.self, from: data)`. With that approach, it's also easy to add public var videos: [Video] { return entries.flatMap { if case .video(let video) { return video } else { return nil } } } and similar.
Are these kinds of loops used in a lot in code in other languages? I am not use to seeing Node, Python, Clojure or Objective C code using a lot of index based iteration these days. 
Yep, that works too — will update for brevity. :)
Not off topic OP should do that. 
I love `guard`, it's cleaned up my code considerably and really increased the intent and readability.
i second this. i’ve wanted to mess with spotify for a while but couldn’t find much outside a couple youtube videos (and i try to stay away from alamofire)
Let me try it another way: as a programmer, when writing code, it is not obvious without looking up in the documentation whether one should use value or reference semantics. Consider the contrived example below with a class Dog and a struct Cat. When using the classes, you cannot tell from looking which semantics to expect. You have to consult the definition/documentation. ``` class Dog { var wasFed = false } struct Cat { var wasFed = false } var dog = Dog() var puppy = dog puppy.wasFed = true print(puppy.wasFed, dog.wasFed) // true true var cat = Cat() var kitten = cat kitten.wasFed = true print(kitten.wasFed, cat.wasFed) // true false ```
For what it’s worth, about half (40-50 people) of the devs at my job don’t have degrees. And many came from DevMountain. In fact, none of the iOS devs here have a degree. We are all self-taught it went through DevMountain.
PATs do a specific thing: If you are conforming type **A** to a protocol, PATs "hold place" for a type **B** that must exist and also be implemented in order to finish conforming. The thing is, most the time, people who end up making PATs do so "to make the compiler happy". They really want Liskov substitutable types that can be used in collections. These same people often find the type erasure steps arcane, and they don't want to do the pain in the ass version of lots of type checked fixes. You can generate most type erasures needed in most codebases. That's why I was looking at gyb, and macros: I can't get most people to care about type erasure, but think for most cases, you can just generate it away. 
I recall sending a message to the mods a long time ago about opening a Discord channel for /r/Swift, but never got any feedback from it. Would be neat as I use Discord more often than Slack.
Wow! Thanks a lot for the info.
Thanks so much for the feedback. Is hard to get feedback from people like you! So much appreciated. So far it sounds pretty dang good. I'm pretty excited to get started!
Vapor's integrating with NIO as we speak. The first HTTP request and response have gone through within 12 hours of open source release 🔥
The first request and response have gone through on a NIO/Vapor build
They are mostly confusing to people because of how the people run into them one day. They end up backing into them rather than really seeking them for the problem they are meant to solve. They are meant to solve *the problems of people specifying protocols*. PATs are fundamentally humans working around the combinatorial explosion of types you would get if you type parameterized everything when making generics. They allow a person writing a protocol to say "You must make/find multiple types in order to conform to this protocol. These types must be related in these specific ways" 
Awesome. Exactly what I as looking for. Thank you for your guidance. I was close but was overthinking it inside of init(from decoder: Decoder) I was tinkering with singleValueContainer last night, but with the impression I had to iterate it after retrieving it. I was also tinkering with using an enum to store the feed items. Anyhow, I've got it working and the code is much more concise and efficient. Thank you much!
Great suggestion about IDable. I considered the OOP approach to this but structs cannot inherit from structs. My brain doesn't yet make equivalent thoughts for POP. Slowly getting there. Also you are right about using let on some of these properties. Some of them can be mutated in place (like vote related stuff) but most should be constant. Thanks much
Article and Video are Codable. However I've gone with /u/itaiferber enum suggestion. Thanks for taking the time
Don't benchmark in playgrounds, they're unoptimized. If you're benchmarking on Mac, make sure you turn on optimizations. And without your code, it's impossible for us to tell you what you're doing wrong.
&gt; as a programmer, when writing code, it is not obvious without looking up in the documentation whether one should use value or reference semantics. Let me give you a great heuristic: Controlling a real world object -&gt; Class Managing the resources of inputs or outputs into a real world object -&gt; Class Managing data that has to update in place due to performance/responsiveness reasons -&gt; Class Everything else -&gt; Value types until proven otherwise. So: If those cats and dogs are in a shelter, and you're *actually managing their feeding*: You use a class. If those cats and dogs are hypothetical feeding schedules, or are games about cats and dogs: You use a struct. Some things that make it a lot less important: - Default to struct until it can't be a struct - Use var lot less - Add a few assertions in guard statements: class Dog { var wasFed = false { willSet{ if wasFed { newValue != true } } }
This is being fixed.
Xcode has been cursed ever since they merged Project Builder and Interface Builder. It's just easier to notice using Swift because it's newer and hasn't had as much time to shake the really obvious bugs out.
Yes 
I think something that most people dont learn early about present is generally, you present SINGULAR funcionality, like taking an image, and you push anything that will navigate futher, so if you find you are presenting then presenting you know thats bad code smell, and should be pushing instead. I know its kinda unrelated but i feel if you follow this rule, you wont experience what you are experiencing .
Sorry about there, here is a link to my code https://github.com/BlairAltland/swiftsorting/blob/master/ViewController.swift
Initializers are too complicated. It takes real thought to know when you need to add "required" or "convenience" and when XCode tries to add it in for you it often gets it wrong. Then you need to know which superclass initializers you're allowed to call, because it's not ever obvious. Then there's this nonsense: required init?(coder aDecoder: NSCoder) { fatalError("init(coder:) has not been implemented") } Also, sometimes when you override one initializer you lose built-in ones that should be unrelated, like in a `struct` or anything derived from `NSManagedObject`.
When teaching programming I feel like you want to cover most situations that they're likely to run in to. To me a standard c-style for-loop is just nuts &amp; bolts 101 stuff. Maybe a better way to phrase it is that when I teach a language I pick one that covers everything and then push students into more specialized languages after they master the basics. I personally love ruby, but wouldn't teach that as a first language. I feel the same way about swift (although it's better than ruby in that regards). I would still start students on something like C# or Java and move them to Swift once they had enough fundamentals that I could explain why swift is "strange."
I've mostly taught game programming and index-based iteration comes up all the time when dealing with grids.
Thanks but could you please clarify this in laymen terms I'm still new to iOS development
He’s saying that when you `present` a ViewController it is added to memory and it is the highest point of the view Hierarchy. If you `push` it, it is able to remove the old ViewController from the view stack and therefore is better with memory demands and fluidity in the app. 
This isnt what i meant, I meant it from a point of view of which direction you should use, when a VC has a singular use like taking a picture or adding a facebook post, you should present it because its like a stopper yuou either cancel it or complete it, if you can go to another VC from that VC you should push since you are still navigating
is dimissing the same thing as pushing?
No pushing, is actually typically the way you’d handle things in UINavigationControllers. That way you can have a back button. I apologize, I misspoke there earlier - had a bit of a brain fart. 
How did you manage to get that to hook up as I couldn't find their GoogleService-Info.plist that is required.
Well if you present a view controller you should dismiss it at the end to let it deinitialize. So you will free up memory. As others mentioned if you only present view controllers you will end up with a memory leak if you don't free them.
Is there not a clean way to just have the loop wait until it was complete before looping again? Rather than using time delays?
Was looking at those and trying to implement them but couldn’t get it to work from the examples I was trying to imitate. 
 [quicktype](https://app.quicktype.io/?l=swift&amp;initializers=false&amp;alamofire=true) can now generate statically-typed Alamofire response handlers and Codable structs from JSON. If you use Alamofire in Swift, we'd love some feedback. For example, given the JSON: { "name": "David", "lucky number": 7 } quicktype generates a Codable: struct Person: Codable { let name: String let luckyNumber: Int enum CodingKeys: String, CodingKey { case name case luckyNumber = "lucky number" } } And some Alamofire extensions: extension DataRequest { // ... @discardableResult func responsePerson( queue: DispatchQueue? = nil, completionHandler: @escaping (DataResponse&lt;Person&gt;) -&gt; Void) -&gt; Self { return responseDecodable(queue: queue, completionHandler: completionHandler) } } Which allow you to do a statically-typed request like: Alamofire.request(url).responsePerson{ response in if let person = response.result.value { print(person.luckyNumber) } } We're looking for feedback on this feature – is this the code you would expect? What can we improve? Thank you for your time!
&gt; `DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 1) {}` You're literally asking it to do nothing, after one second. You need to use the block to specify what you want it to do. r/swift needs a real FAQ, because "how do I get my loop to wait?" is definitely turning out to be a FAQ here. 
Not really. On all Apple platforms, "x is AnyObject" always returns true, even for value types. To test if it's a class, you need to check the metatype, since they don't (currently) bridge.
"Index-based iteration" and "C-style for-loops" are completely orthogonal.
make an Int counter, make an async method with completion, call itself until counter is done 
The reason that doesn't work is that the people who created Swift don't see them as problems. These language features were created as *solutions* to perceived problems. &gt; It’s maddening and it sucks the life out of you. I happen to agree with this guy! But if you're a type junkie, spending all afternoon adding generics to your type hierarchy isn't a problem. It doesn't suck the life out of you. It's your playtime. It's what you're doing anyway. Ever go to a music store and get the salesman who's been there for decades and has opinions on everything? I want a decent pair of bookshelf speakers for my living room so I can listen to my music there. Oh, but what style of music? What amplifier are you using? What's your source material? What are the dimensions of the room, and how acoustically reflective are the walls, and where will you be positioning the speakers? Ugh, stop it! I just want something that costs under $500, so I can listen to my music! (Screw it, I'll go buy a HomePod.) The people who work at this level are by definition the people who *like* dealing with the world at that level. They are baffled that you don't *want* to speak their language. In both hardware and software, Apple has top-notch designers, who start with an end goal, and figure out how to use technology to let people accomplish it. In dev tools, they've got some top-notch engineers, but I don't think they ever started with the end in mind. They took "LLVM" and "strong typing" and made a product out of them, without asking if it's what developers want. I know lots of developers and exactly 0 of them ever suggested that lack of PATs was an issue for them, in any language. That's basically a feature idea swiped from a 2007 "Journal of Functional Programming" article comparing Haskell and SML. Meanwhile, I just crashed Xcode again. Meanwhile, so many developers have drunk so much kool-aid that if someone has the gall to remind us that there is no engineering basis which would justify the complexity of these features, they're [immediately downvoted](https://www.reddit.com/r/swift/comments/80u4bd/whats_the_worst_part_of_swift_in_your_opinion/duzu9rg/). There's nothing in this wishlist that should be a surprise to anyone working on dev tools at Apple. No Swift engineer is going to say "Whoa, I had no idea that our new language, with more keywords than C++, is considered by some programmers to be *too complex*!" These are intentional design issues, and you'll have as much luck convincing Apple engineers otherwise as we did trying to convince Windows 3.1 users in 1993 that having to edit an AUTOEXEC.BAT file every day is not acceptable. 
It’s an abomination of a Java class from the Spring framework. It’s one of the best examples of bad naming in programming. I like to use it to discriminate on naming but I usually get the order (and this time even skipped a word or two) wrong, likely because the name is so bad. The actual name is AbstractSingletonProxyFactoryBean. Look at [this](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/AbstractSingletonProxyFactoryBean.html) shit.
uBlock was too aggressive and hid the form. Very nice articles. Subscribed 
Could you provide more info what is it and in which cases do you use it?
secp256k1 is an ECDSA curve which is widely used by many cryptocurrencies to create signatures of transactions or other arbitrary data (e.g.: provide data integrity). You can see ECDSA as a digital signature algorithm and secp256k1 as a specific implementation with various nice properties. If you want to read more about ECDSA start with the Wikipedia articles: https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm And a specification about recommended curves: http://www.secg.org/sec2-v2.pdf For Swift projects it can be used either for Cryptocurrency App development (e.g.: Automatically sign and send Ethereum or Bitcoin transaction for an exchange, Create a Wallet App, a decentralized Web3 application,...) or for your own needs to provide data integrity for really anything.
**Elliptic Curve Digital Signature Algorithm** In cryptography, the Elliptic Curve Digital Signature Algorithm (ECDSA) offers a variant of the Digital Signature Algorithm (DSA) which uses elliptic curve cryptography. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/swift/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
Thx mate
Think of view controllers like playing cards. Maybe you start with one card face up on the table (let’s call it the ace of spades), when you present another view controller/playing card (queen of hearts) you put it on top of the other card on the table. When you dismiss the queen of hearts, you remove it from the stack on the table which reveals the ace of spades beneath it. BUT let’s say you didn’t do that and you still had the queen of hearts stacked on top of the ace of spades...what if you used PRESENT to show the ace of spades again? Well if would take another playing card with ace of spades on it and stack it on top of the queen of hearts. This isn’t good because the table (memory) can only hold so many cards and using present creates copies of cards and this gets pretty hairy pretty quickly. So you have to be thoughtful about playing with one deck of cards and not breaking out another deck of cards to show a card you already have. Does that help? It helps me when I think of it this way. Hopefully you like playing cards. Bye!
You probably want to use your own serial queue instead of: DispatchQueue.global(qos: .utility).async In updateIcon, otherwise it could lead to thread explosion
The Vapor slack is awesome, and a lot of the authors are active there.
It's all just fake internet points anyways, not worth even mentioning. I've gotten tons on quick comments and lost a bunch on ones I spent a lot of time crafting.
thanks this is the answer i was looking for
Wow GREAT explanation. I wish everyone explained things with easy to understand analogies like you did!
The removal of the unary increment and decrement operators, ++ and --.
I actually learned this the hard way. I was using Firebase’s real-time database and I kept running into issues with data updating and/or not updating or reflecting updates Somebody helped me by using this deck of cards analogy and I discovered that just because I can’t see the VC doesn’t mean the functionality I called on it isn’t still running in the background. So just as you can call certain methods on ViewDidLoad or ViewWillAppear you can/should do the same (if appropriate) on ViewDidDissapear etc 
I just picked up Swift and am loving it. Strangely it makes me feel calm. 
OK, apart from the name, the description in the language reference, the syntax, the semantics, and the extra restrictions on implementation and usage, they are the same thing. 
Shame you can't read the code on mobile.
What are you talking about? Submitting a lot of work items in rapid succession to the same concurrent queue (global or not) would create new threads.. doing the same on a serial queue wouldn’t
Continuing my Udemy course along side learning Swift and working towards getting an app on the store this year. https://www.udemy.com/ios-and-swift-for-beginners-200-hands-on-tutorials/learn/v4/overview Also trying to resist the urge to download Xcode 9.3 beta, worried it might confuse me since i am currently on the Xcode 9.2 Version.
sorry that guy's a dick. Not everyone here is like that. 
No, the global queues have a fixed number of worker threads. They're meant so you don't have to care about this stuff
I agree as far as this was true especially in the first months of Swift. New Xcode beta usually meant that your code wouldn't compile anymore and you had to take effort to mitigate the issues. Next breaking change AFAIR was Swift 2.3-&gt;3.0 (this was when I started actually working as iOS dev). But since then, it feels *relatively* stable to me.
Swift generics really should be covariant though. Do you think that you shouldn't be able to call `foo(bar: [Any])` with `let baz= ["a"]; foo(bar: baz)` either? Because that "automatically casts to a different type", that is, `Array&lt;String&gt;` to `Array&lt;Any&gt;`. But that thing just works with arrays and some other types from the standard library in Swift, but not with generic types. I agree with getting rid of User1 and User2 though, if that is possible.
3 to 4 was a far smoother transition than 2.3 to 3. It is getting more stable, no doubts about it.
People here told you about the issues from the developer point of view, but there are also issues from UX point of view. Animations between view controllers are an important aspect of user experience. On iOS it's generally accepted that you progress from left to right, while popups (present) come out from the bottom. If you kept presenting VCs, your app would look quite ridiculous with flow going from bottom to top.
! should generally be avoided. If you need to force unwrap something, always consider if there's a way to safely unwrap it. Generally, just think about it in terms of "always has" and "can have". A person always has a birth date, so it's not an optional. A person can have a car, so it should be an optional probably.
Better yet would be [generalized existentials](https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md#generalized-existentials), which would solve the problem by making these protocols concrete like any other protocol per-se, _and_ free us from polluting our namespace with type-erased wrappers (which are a workaround for lack of existentials)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apple/swift/.../**GenericsManifesto.md#generalized-existentials** (master → 496122b)](https://github.com/apple/swift/blob/496122b143ca62ca9a679c2afb061180b052759a/docs/GenericsManifesto.md#generalized-existentials) ---- 
Try this program: import Foundation for _ in 1...1000 { DispatchQueue.global(qos: .utility).async { usleep(1000) } } CFRunLoopRun() by the time you'll hit the CFRunLoopRun, check how many threads are live in your process
Shit, you're right. Color me surprised! Thanks for the tip, I always thought these queues took into account the number of cores for some reason. I have some code to tweak now...
I think you're thinking of OperationQueues, not DispatchQueues
You can use DispatchGroup(). 
You want to use OperationQueues, DispatchQueue.concurrentPerform or serial queues instead
&gt; Submitting a lot of work items in rapid succession to the same concurrent queue (global or not) would create multiple new threads... GCD is meant to manage the "thread explosion" problem for you by pooling worker threads among queues. So it should never be a concern at all. &gt; doing the same on a serial queue wouldn’t Well, you limited the concurrency, which is a separate dimension of the problem.
UIImage is part of UIKit, so this example is not UIKit independent.
It is not perfect but the ViewModel itself doesn't conform to any UI related class or protocol.
The thing is that you shouldn't use labels as logos. If you want a nice logo to show on the login page, draw it on a graphics app with a nice font and some frills, then [export it as a PDF file](https://codentrick.com/vectorized-assets-for-ios-with-pdf/).
I edited my post and said the app isn't anything serious so it's not a huge concern. But you right that is probably the best way to go about it. Thank you edit: woops meant to reply to u/GoodCashier
&gt; I edited my post and said the app isn't anything serious so it's not a huge concern. But you right that is probably the best way to go about it. I edited my post and said the app isn't anything serious so it's not a huge concern. But you right that is probably the best way to go about it.
1) correct, serial queue is the right solution (and not just, a dispatch source of type OR is even more correct to make sure your updates are paced) 2) GCD will happily keep on spawning new threads until it hits a constant limit. Threads do carry a cost (memory + cpu), so even if the deterministic order property wasn't necessary, it's still a bad idea to use them that way, from a perf perspective.
Getting my house on the market. 
Honestly an overlooked tip that devs generally don’t know is to add kerning to your labels, try the fonts again but using an attributed string with .kern: between 2-5 usually nice depending on the boldness of the font
 label.font = UIFont.systemFont(ofSize: 10.0, weight: UIFont.Weight.black)
I am trying to implement an app that uses machine learning. I use tensorflow.
My suggesting is to invest some money on a custom UI/UX made by a professional. A graphic designer would give you a perfect design on psd format and then you can implement this in your app.
Great approach. Do you have more info on the app?
Programming is a lonely sport. You should not try to convince anyone. Just enjoy the feeling and the productivity that code provide to you.
Xcode is very hungry for space. Derived data is your first enemy. Also archives can get some space.
&gt; When I click on the files, there isn't even a "Target Membership" section in the file inspector. Then you didn't add them correctly. Wherever you dragging the file in or adding the files to isn't the correct place to do it. &gt; dialogue dialog* A dialogue is a conversation between more than one person.
As I said the point is that thc VM class does not conform to any UI classes or protocols. This is so that you don’t have to deal with methods like view did load, memorywarning and the million others. You only communicate the data in a way that the view can use it without any further manipulation. 
&gt; when restarted Xcode the error just disappeared... weird Welcome to Xcode. 
&gt; A dialogue is a conversation between more than one person. Yeah, the computer and the user.
That is extremely hard to look at it with no formatting. It doesn’t appear you ever added the imageview as a subView to your main view
Stop making excuses. It's the wrong word. Look. &gt; I ended up going through the "Create a new file" **dialogue** and copying and pasting my source code It's a dialog, not dialogue. https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Dialog/Tasks/UsingAlerts.html 
Happens to me constantly. Except the part about the errors disappearing when I restart Xcode.
Look at UISplitViewController. If it doesn't do what you want, you'll probably have to do it manually in code because autolayout and size classes don't differentiate between portrait and landscape on iPads, they're both "regular" size class. We sometimes do this stuff in viewWillTransitionToSize. 
I reformatted the code in my comment on /r/iosprogramming here: https://np.reddit.com/r/iOSProgramming/comments/81kg23/why_isnt_this_working_swift/dv3nig9/ My analysis is the same as /u/rkennedy12: the image view is not being added to the main view.
Man, I used to think Xcode sucks when I was doing iOS development. Now I pray for VSCode/Atom/vim/whatever to come anywhere near the ease and simplicity that Xcode offered me as an iOS dev.
I'm just against generated source code in principle. No thanks.
When it comes to architures and acronyms, I only follow the principles without getting imposed by the structure or rules. The goals of most of the ‘good’ architectures are to have clear separation of concerns, avoid massive files, avoid mutability and have clear and safe ways of managing state. And there is no rule that says you cannot have a VM composed of multiple small VMs, each catering to a specific feature. The same goes for views, controllers, interactors, models or anything else really. 
I would look at something like adaptive layout: https://www.raywenderlich.com/162311/adaptive-layout-tutorial-ios-11-getting-started
Is it an error or is an exception breakpoint getting hit?
Well this project doesn’t use any dependencies and it builds and runs just fine for me. 
That swift is not this swift bruh
It's hard to understand from the example code which lines are your lib, and which are filler. It might help to slim down the examples in the README to the absolute minimum number of lines, so it's clearer which parts are using your lib. Basically make it super easy to see "all you need is these three lines!". It's also worth using syntax highlighting in the example code blocks, ie starting the code block with three backticks then "swift".
It's the British spelling of the same word.
Yeah that's heaps easier to read :) Much easier to get an idea of what it does now. The README is what people come to first, so it needs to sell people on how easy to use your lib is, before they stop reading and go to look at another lib. So it's all about selling your lib as super simple and easy to use. You can always include the full detail in separate Markdown files in the repo, that explain how to use the lib in various specific situations. Those are for once you've already got the dev convinced. 
&gt; Swift’s generics are “invariant”, that means, a generic type _A&amp;lt;B&amp;gt;_ cannot be converted to _A&amp;lt;C&amp;gt;_, even if _B_ is a subtype of _C_. &gt; &gt; This is very annoying. Sure but variant generics will either be type unsafe or pretty restricted in how they can be used (like in C#), so it’s not like it’s something Apple can easily add. 
&gt; The only thing that might help you is something called type erasure, which is just absolutely fugly in Swift and you shouldn’t use it if you can avoid it. Meh.. it’s the same as in any other language that’s doesn’t have some kinda explicit syntax support for it. Exactly the same as it would be in C#, for instance. 
any screenshots?
Thank you for replying and splution but I have some column which i dont want to change so using REPLACE won't change all columns?
Yeah bro you were correct I should use INSERT OR IGNORE. Thank you so much for helping me out.
&gt; users email user's* email users = more than one user http://stepinto2ndgrade.com/possessive-nouns/ 
You cannot read the mail that the builtin Mail app has. Microsoft has its protocol ActiveSync, and Gmail has a custom protocol. You could write your own app that speaks ActiveSync or the standard protocols POP or IMAP. But the user would have to configure the account(s) in your app. You would also need to figure out how to notify your app when new mail arrives, something that POP and IMAP don’t do.
Udemy Swift bitmap by Angela Wu https://www.udemy.com/ios-11-app-development-bootcamp/ Very engaging teacher and takes you through at a good pace. Not too fast where you get lost and not to slow where you zone out. 
Alright, I’ll check that out too. Thanks!
Look for coupon codes too! Never pay full price for a Udemy course. 
Haha, I know yeah, I have bought a couple and always apply coupon codes.
 You cant declare a variable like that because Array is a generic type. This means you have to declare which type of object are stored in the Array like that: var testArray: Array&lt;Double&gt; = []
At the top, they declare an array of `allCoordinates`. They then make an empty island and sea array. `for coordinate in allCoordinates {` We’ll go through all coordinates one at a time. We will call it each one a `coordinate` in this loop. ` if coordinate.column &gt; 3 &amp;&amp; coordinate.column &lt; 7 &amp;&amp; coordinate.row &gt; 3 &amp;&amp; coordinate.row &lt; 7 {` Here we see if the coordinates rows and columns fall within a certain range. In this case, that both the row and column are between 3 and 7. ` island.append(coordinate)` If we are here, the row and column are between 3 and 7. So we will take the coordinate and add it to the island array declared earlier. `} else {` Else, if the row and column are not both in that range, we come here. ` sea.append(coordinate)` We take the coordinate and add it to the sea array. `}` This loops through all coordinates in the original array. So in the loop you can do whatever you want with each individual coordinate. 
Came here to say this. Love her series. I’m currently working through it myself and I’ve gone through a lot of videos and hers are the only ones that have made me start to understand the concepts. 
That's what I thought, but wasn't sure. Looks like they'll have to use an outside email service :( Thanks.
More like never pay anything for any course. There are plenty of great free resources out there and it's a very easy language to learn. Paying to learn it is probably a waste of money, unless you're getting a bachelors degree along with it.
Where do you find coupon codes for courses? I always pay $11... I think thats full price since almost every day they have "discount"
Doesn’t hurt to try the Intro to App development Swift iBook from Apple too. A bit geared towards school age crowd, but they use real world examples and have you do it as you go along. The entire course is done in playgrounds and the book is just to tell you what to do next and quiz you. I like that they teach you the theory behind everything instead of you having you repeat code. 
We have a work account. We don’t pay for anything. So might as well use a structured course that keeps track of your progress. Even I was paying, the Angela Wu course is worth well more than what is charged. I’d pay for it without complaint. Don’t go for what is cheapest, go for what helps you learn the best. 
Swift is a programming language that can be used to develop iOS apps, ObjC can also be used and they can be mixed. In addition to Swift and ObjC, you have an large API and and IDE to learn. Xcode is the IDE. You'll also want to learn Object Oriented programing. Stanford is not really the place to start, you need to start with an entry level tutorial an YouTube has plenty of them.
Thank you so much stranger. I will follow your guide!
Alright, I’ll check it out. Thanks!
That’s what I used to. Got the course for £10. For about 140 odd videos it’s great value. 
I’m also doing that course, and it’s by far the best one I’ve been following so far. Just completed the module on machine learning, she’s very engaging and you cover an awful lot of topics (except notifications, but she said she’ll add a video about them soon).
If you have an iPad, you could try out the Swift Playgrounds app there. Works best of you have a keyboard but you can do it without 
Alright, I’ll check it out. Thanks!
I just started this year, and this is what I’ve done so far: -TapCoding - A very basic app that helped introduce me to the principles of Swift. -Swift Playgrounds - This doesn’t help so much with the technical knowledge, but helped me learn how things can be applied. Plus it’s pretty fun. -London App Brewery Udemy Course - Like others have already said, this course is great. Angela is a very good teacher, and you learn how to build working apps. I’m about halfway through the course at the moment, and I’ve learned so much more than I thought I was capable of learning. -Design+Code - This is very focused on the design aspect of iOS developing. I’m a graphic designer, so it has been very helpful for me to see how Swift relates to design. I hope this helps. Before I started learning Swift, I only knew a little html. Just keep at it, and you can definitely do this!
I just started with Swift this year, and this has by far been the best resource: [https://www.udemy.com/ios-11-app-development-bootcamp/](https://www.udemy.com/ios-11-app-development-bootcamp/) I have zero programming experience, and Angela has helped me learn so much.
Can you explain what you mean? I believe we already generate that.
Hey man also do yourself a favor and check out a course on Object Oriented design. Lynda has some good videos on this. I took a data structures class this semester and it opened my eyes tremendously in my swift class I was taking in school. It will help you understand and accelerate your learning with Swift.
I've personally had the most success with the iOS Apprentice book by Ray Wenderlich and their video content.
Thank you for all your help and advice. I really appreciate it! I’ll look into all of these!
Thanks for your advice. I’ll definitely look into that!
Thanks for your advice. I’ll check them out!
 import Foundation extension Dictionary { func toJSON() throws -&gt; Data? { return try? JSONSerialization.data(withJSONObject: self, options: []) } } extension Encodable { func toJSON() throws -&gt; Data { return try JSONEncoder().encode(self) } } extension Data { func toString() -&gt; String? { return String(data: self, encoding: .utf8) } } struct Person: Codable { let id: Int? let name: String let age: Int enum CodingKeys: String, CodingKey { case id case name = "the_name" case age } init(from decoder: Decoder) throws { let values = try decoder.container(keyedBy: CodingKeys.self) id = try values.decodeIfPresent(Int.self, forKey: .id) name = try values.decode(String.self, forKey: .name) age = try values.decodeIfPresent(Int.self, forKey: .age) ?? 0 } func encode(to encoder: Encoder) throws { var container = encoder.container(keyedBy: CodingKeys.self) try container.encode(name, forKey: .name) try container.encode(age, forKey: .age) try container.encode(id ?? 30, forKey: .id) } } do { let json = try ["the_name":"Rex"].toJSON() let sut = try JSONDecoder().decode(Person.self, from: json!) print(sut.name, sut.age, sut.id) print(try sut.toJSON().toString()) } catch { print(error) } Codable contains default implementations of `init(from:)` and `encode(to:)`, but if you want to do custom encoding or decoding, using default values for example, you have to set encoding rules for every property in your `Codable` class/struct. If quicktype can do this, I don't see the option for it.
I see! Yes, this would make a good option. Here's the relevant file in case you're interested in contributing: https://github.com/quicktype/quicktype/blob/master/src/Language/Swift.ts
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [quicktype/quicktype/.../**Swift.ts** (master → de071c8)](https://github.com/quicktype/quicktype/blob/de071c89b548fc80ec2ebdde3ee8c43048a2be04/src/Language/Swift.ts) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dv5bmx0.)
&gt; Is this a significant one? This question is more important than a lot of people think it is. Continually adding keywords and identifiers in the name of safety from theoretical problems will just create a verbose language that’s hard to read, write and explain. 
I would look at team treehouse Swift course It goes into painful detail. People that know programming feel it moves slowly, but for absolute beginners it is incredible. It will teach you about xcode and slowly ramp you into more interesting and difficult programming techniques. For a while it will be hard to understand how the things they go over will EVER help you, but it quickly builds a basis of knowledge you will rely on for some time Source: taught myself swift from scratch when I decided to change careers, now leading a team of iOS + android devs
Thanks, it helped a lot!
Unfortunately, email is still pretty crappy to work with. From my very limited experience, each of the popular email platforms handles their authentication differently, so you'll need to account for each of the platforms you want to use. 
This. The KISS principle is so important in a language. Clojure is one of my favourite language partly because it’s so ridiculously simple. I like swift, but it’s already too complex. It doesn’t need more complexity. At all. I have enough on my plate as a software developer, I don’t need the language to get in the way of doing my job by providing loads of mental overhead. 
Have you been able to get any of them to work at all? I've been stuck all day trying to get either Outlook or Gmail to work. Seems the tutorial for GMail API doesn't work, it has a dead link in it and Outlook login is given me an error before I get to the password. Can't see to get any info on this.
Right, the same thing happens if you have a base class, override a method, then change the overriden method. class Foo { func hi(name: String) { print("Hi, \(name)")} } class Bar: Foo { override func hi(name: String) { print("Hello, \(name)")} } Bar().hi(name: "Bob") // "Hello, Bob" Change the method: class Bar: Foo { func something(name: String, greeting: String) { print("\(greeting), \(name)") } } Bar().hi(name: "Bob") // "Hi, Bob" You get `Bar`'s method in the first instance and `Foo`'s method in the second. Not a bug, that's the design. Would adding some keywords make it more explicit? Maybe, but it definitely shouldn't be an unexpected side effect. When you change the signature of a type that inherits from another class or protocol, check to see if there is a default implementation! Here's the more serious source of bugs in this whole topic: protocol Foo { func hi(name: String) } extension Foo { func hi(name: String) { print("Hi, \(name).")} func hi(name: String, greeting: String) { print("\(greeting), \(name).") } } class Bar: Foo { func hi(name: String) { print("Hello, \(name).")} func hi(name: String, greeting: String) { print("\(name), \(greeting)!") } } let test = Bar() let protoTest: Foo = test test.hi(name: "Bob") protoTest.hi(name: "Bob") test.hi(name: "Bob", greeting: "Aloha") protoTest.hi(name: "Bob", greeting: "Aloha") // Bar's hi: "Hello, Bob." &lt;- overriden implementation // Bar's hi: "Hello, Bob." &lt;- overriden implementation // Bar's second hi: "Bob, Aloha!" &lt;- overriden implementation // Foo's second hi: "Aloha, Bob." &lt;- protocol implementation Note what's been done here. `Foo` has two default implementations, a declared one and a non-declared one. The declared one is always overriden by types that also implement it. However, the non-declared one is only overriden when you specifically call it on an object of that type. If the object happens to be the same type as the protocol then you get the default implementation in the protocol. Talk about a minefield. 
Size classes is what you're looking for. You can add variations on the isHidden property of your view by setting the view you want to hide in portrait (compact width aka wC).
When I was working with email, I used a popular framework I used Github called MailCore. `https://github.com/MailCore/mailcore2` It was pretty good. From what I understand, a lot of the "big" email alternative applications use it.
Thanks, I'll look into it. 
&gt; has it's own client ID its* own client ID it's = it is 
Big Nerd Ranch's Swift book is the best I've found. If you get through that book you can be a junior dev imo
Came to say this. 
1) Learn how to represent data and concepts in code. Purely work on swift with no UI, namely algorithms and data types. This is the most dry and painful part but it goes a log way because it helps you get the syntax out of the way. 2) Find some project online, study their design patterns and play around. 3) build toy apps!
Alright, I’ll check it out. Thanks!
If you want to learn the language, the official book is the best source, I think: https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html
Check out CS193P's [Core Data lecture](https://youtu.be/ssIpdu73p7A) and the demo lecture just after it. And please don't use CoreStore until you understand Core Data, for your own sake.
I found mixed reviews regarding that. But I don’t have iPad :(
Hi, Is this something available on Udemy or khan academy? 
Hi, I am not sure what exactly you said. So I know you told me to start at representing data and concepts in code but it makes little sense to me right now. Could you please explain like I am five? :P
Thank you it helped a lot now i can continue learning when i got this 
Not necessary! But a good option for learning the language 
When someone corrects another person's grammar it is most often a person of average intelligence trying to put on a pretense of intellect.
No it’s on team treehouse 
There’s a couple approaches, if I’m understanding your question correctly. 1. Two sub ViewControllers Depending on which cell you press in the main view controller, you can perform different argues that lead to different sub ViewControllers. In each one you can decide to use different cells and logic and whatnot. 2. Register multiple cells in one table view Your main view controller always leads to your one sub view controller. The main tells the sub that it’s using a certain type of data, either by a boolean or an enumeration. Your sub registers two different types of cells, and based on your boolean/enumeration it dequeues different ones by the different identifier. Choosing will be the difficult part. You have to ask yourself about duplicate code. Is the rest of the sub view controller the same or drastically different? Do the cells have the same inputs or not? Do the different cells lead to different actions? Are you presenting the table view or other components differently? Ideally you want to minimize the amount of duplicate code that results from this. If you feel like you’re making one sub view controller that has two major modes and it feels like you’re writing two entirely different view controllers into one, it may be better to just write two ViewControllers. 
Haha its ok, thanks I got some idea but yeah I need to start from beginning so I need to learn everything....
Its very difficult to help, not enough information is given. What is wrong? Is it crashing, throwing an error? 
It is giving me this error: Error Domain=NSCocoaErrorDomain Code=4865 "No value associated with key nombre" Let me re-upload the new code
That's quite a useful tool, but the name of your article is really misleading. The article has nothing to do with framework oriented programming, just introduces a tool that would help with the common files across the framework projects. 
[removed]
Its a story from Library Oriented Programming video to the Cookiecutter template to the tool to manage that will enable you to achieve Framework Oriented Programming in Swift.
Post your struct and your CodingKeys
Finished with Apple’s directions on the FoodTracker app. Now I’m trying to apply those lessons to a home project with a raspberry pi. 
for that the iOS sdk should be fine but it is still quite under featured 
Is it still being developed (the iOS Spotify SDK)? The last update was one year ago...
probably not. it sucks. lack of support makes it pretty difficult to make anything with expected features. 
&gt; Its very It's* very it's = it is This is second grade English
You probably want to look for an internship. Most company’s that hire ‘Junior’ developers still expect them to have some experience. A lot of companies do part time internships that can turn into full time jobs though.
I tried first lecture and it was little intimidating to me. But I found other two pre req course listed in class overview. I went over first 3 lecture in one of them and I am finally able to understand what class is what method is etc. some concept of loops 
Would you recommend applying for internships even if I graduated from college instead of entry level positions?
Sweet! Good luck, it will all fall into place in no time.
Depends on your degree and resume.
In fact, most companies do not hire "Junior" developers at all. You're either an intern or a developer.
At my company I’m classified as junior developer but it’s mainly for pay reasons, I’m treated no different to other devs. 
You can’t use the web api to play music. Right?
I'm not 100% positive but I don't think you can play music from the web api directly. But i think you can play music indirectly by using url links
I’m like 99% certain you can’t. Might want to look into it. 
Yea, you're probably right because I honestly didn't look too much into the Spotify web api because the iOS SDK seems easier to work with. God they should update the SDK though feels so clunky 
spotify web api or the ios sdk?
Both. I have been using the iOS sdk since the day it came out. 
They stopped with commits about 7 months ago. It had changed quite a bit before than, and dairy often. Started out as a nightmare, then became just clunky. My guess is they started focusing on the web api because more developers use that. I would assume they will circle back around. Unless they decided that no one uses the iOS sdk really and abandoned it. I feel like they would have said that if so. 
Fantastic!!
I was hired by my company as a junior dev with no prior iOS development internship and only side projects. We’re about ~200 people and I love my job. I’d say definitely don’t limit your search to large companies as small/medium companies are willing to train junior devs as well. 
Fuck off again.
Pandora 
Source: I used to work there. They are good about hiring people right out of college.
Oh gotcha. I found a video series on youtube (https://www.youtube.com/watch?v=FjsxG07haJI) that teaches how to make an app that allows spotify search to search and play songs from spotify with the web api. So I guess you can do it with the web api? But the series is outdated.
If you find a developer, they will refer you to a recruiter.
Alright thank you but how do I even go about asking for a recommendation if they end up accepting my connection? What is their incentive to give a random linkedin connection a recommendation?
I see. sorry but I've never asked a random connection on linkedin for a recommendation what do you think would be the best way to ask?
Did you ever give Hacking with Swift a try?
"Hello Name, I am a young, fresh-out-of-college software engineering student and a long time fan of Pandora. I'd love to work there, and thought having someone who works there introduce me to a recruiter might be the best way in. If you are open to it, would you be willing to make a referral for me, I'd not I totally understand. Thank you for your time! Your name." Then if they decline, check their connections and ask someone else.
I have heard about it but never looked into it but I hear its a great resource
I used both for my app. I used the iOS sdk for auth and streaming purposes and the web api for searching. I found it easier that way
wow i didnt know it would be that easy to ask. Thanks a lot for your advice and help!
is there something wrong with the search with the sdk?
oh i okay gotcha thanks
Cool. Inspiring. I am in the same boat that you were once. I am half through lecture 4 on the stanford course. But too slow. May be i will switch to the Apple book for now and go through the Stanford course completely later. 
Best of luck! Let us know how it goes.
Awesome! Don't get discouraged though because you will face a lot of frustration. I honestly think Apple's "App Development with Swift" made a lot of that frustration go away by teaching me the fundamentals. But if you decide to read it, don't just read; read and code and most importantly ABSORB what you are reading/coding
sure and thanks! I'll keep you updated
You don’t need a sub-viewcontroller, just use uiview. Create a new class that inherits from uiview, one for each distinct table you need to show. Instantiate then from a single view controller. Use the delegate pattern to communicate between the various views.
IMO, there's a few "branches" in iOS dev, like games, utility, business, social, etc... Different branches have different levels of experience. I think internal business apps are the growth for the future of mobile. These are custom mobile apps that a business uses for their employees. This used to be the client server stuff from the 90's to today, but now it's on mobile. Knowing a lot about data really helps, from local to full stack custom API servers for private businesses. The target would be a 50+ emp shop that does some specialize work that would benefit from a custom mobile app. Ideal would be to have divisions that have different needs just to keep you busy.
It’s fantastic, highly recommend it as well. 
Still, its not about Framework Oriented Programming. Its about how you create and mange frameworks with a third party tool.
Wait until you discover stack overflow! Btw, nice tl;dr! :)
&gt; 1 months time 1 month's* time months = more than one month : /
&gt; its a great resource it's* it's = it is
There are a fair amount of inconsistencies in the Server Side Swift course from what I've experienced.
Really? I went through hacking with swift last year and didn’t encounter too many of them. The sub is helpful with errors.
I’m sorry to hear that! The Vapor book is still getting frequent updates because the team are still releasing changes as they prep for release. If you email me at paul@hackingwithswift.com I’ll get them fixed immediately!
Makes sense. It should be something like Framework Oriented Programming in Swift made easy. Thanks. I will see if I can update.
You can change the pitch and speed whenever you want, even when you're playing – just modify the `AVAudioUnitTimePitch` and `AVAudioUnitVarispeed` instances you created. You're making them locally inside the `Play()` function, but if you move them to wherever you're creating your `engine` and `audioPlayer` you can then adjust them later.
I would go with [unbox](https://github.com/JohnSundell/Unbox) if you don’t mind using third party library. In case you want/need native solution - codable in swift 4 together with [alamofire ](https://github.com/Alamofire/Alamofire). Connecting it all together I suggest use [promise kit](https://github.com/mxcl/PromiseKit), which is really great for any async calls. :)
Ah, ok. I guess I’ll have to look into that! Thanks for the detailed reply!
&gt; 1 months time Nah. "1 months time" just sounds with retarded :P
https://twitter.com/codevapor/status/970012673852178432?s=21
Code is looking good. Perhaps add check for double removal. In the `Channel.broadcast()` function. I think there is a problem when there is nested broadcast's happening and one of the subscriptions being nilled. This may cause double removal of subscriptions. I haven't tried out the code, so I may be wrong. Often I subscribe to notifications in `viewWillAppear` and unsubscribe in `viewDidDisappear`. Perhaps add a `unsubscribe` function.
So... RxSwift 
I dunno how good it is, but I like the tutorials by Coding With Chris. 
Thanks mate! I'll check out his videos.
Exactly the boat I am in. Started with this book and now have a full time job working with iOS and swift! Thank you /u/twostraws!
Gratz on the hard work and dedication, and welcome to the real world ;).
That’s what it takes, for anyone reading this - lots of hard work and dedication! Just stick with it! Thanks /u/lunarchaos42 :)
Great thank you so much, fixed my issue! :)
There are a number of financial API's available that you can connect with for a service fee Two examples are [Yodlee](https://www.yodlee.com/products/) and [Plaid](https://plaid.com)
1 months enough time
Depending on your country, in the UK the open banking regulations are slowly being rolled out about now but you still have to be a financial institution to utilise them I think otherwise you cannot access financial data, there’s so many restrictions
Enough to apply?? 
Awesome! That's exactly the kind of result I love seeing :)
I built something similar to this using the Delegate pattern, e.g. Multicast delegates. I like the idea of 1-to-many but only to those who need to know (Not NotificationCenter).
Similar, but has benefits without the huge overhead and needing to learn a new programming paradigm or including a huge framework.
Yes you’re right but it’s useful to learn. Once you master one RX then you’ll have them all in your tool belt 
Yes basic sense
This is actually true with the Vapor book, but having emailed /u/twostraws, he's very quick to respond and trying to make things work due to the Vapor team making immediate changes for 3.0. However for the most part, the concept of Futures and Fluent in Vapor is still explained well.
I'll have to check them out. 
Swift basic language but you dont learn all of them 1 month. First month you make good app but not enough. You study every time
One of Apple's free eBooks [Intro to App Development with Swift](https://itunes.apple.com/us/book/intro-to-app-development-with-swift/id1118575552?mt=11) [App Development with Swift](https://itunes.apple.com/us/book/app-development-with-swift/id1219117996?mt=11)
That will work on phones, but not iPads. Unfortunately both portrait and landscape mode on iPads are "regular" size class. 
Check out Stanford’s Course: https://itunes.apple.com/gb/course/id1309275316 Personally I like how Paul Hegarty conveys what he knows and incorporates practical (albeit not always useful) examples. 
quicktype isn't half-baked ;) It's about 85% baked, I'd say. It's true that it's a deceptively simple problem. 9 months into it, I can't believe how far down this rabbit hole goes. For example, see our blog post on using Markov chains to detect maps vs classes from JSON property names that we'll post tomorrow. We explain what's wrong with the 30 other implementations of this idea: https://blog.quicktype.io/debut/
I have a degree in mathematical finance 
I certainly appreciate new and simple alternatives, but a few things about this don't feel quite right. &gt; Now we support 1-to-many communication, but we doubled the number of lines, right? This is the main problem with NotificationCenter. "Double" sounds somewhat dubious: - It doesn't count the +100 lines of Channel.swift. - If we're allowed to disregard lines that don't need to be added again per-notification (this example has only one), we can also disregard a bunch of other lines. - It doesn't look quite idiomatic to me. For example, a couple of lines do nothing but give a new name to a constant, which I assume is to keep lines short to fit on a blog. Reformatting is great, but it shouldn't count as actual complexity. - Almost 25% is spent re-wrapping a `userInfo["theme"]` back into a ThemeDidChangeNotification, which is then immediately unwrapped again. Why not just check this in the guard directly? The NC sample code looks artificially complex to me. Not that NC couldn't be improved upon, but it's not *that* bad. &gt; Channel implementation is less than 100 lines of code. Short is good, but my primary goal is correctness, not size. NC has a couple decades of real-world usage and bug fixes, and that counts for a lot. 100 lines of code doesn't seem like much, but with threads and generics and escaping blocks and weak refs (and no comments), this is not exactly simple, and it's not clear to me that it's correct. I'm not sure how this would ever work, for example: for invalidIndex in invalidIndexes { subscriptions.remove(at: invalidIndex) } and that's not even the complex part of it! The author never says what about NotificationCenter "always looked a bit inconsistent to me", or why it's a good thing that "We can finally stop using NotificationCenter". It's well-documented, and it works, and that's table stakes for any proposed replacement.
A bachelors of science? Did you take any programming courses while getting your degree? Have you worked on any larger projects, like apps of your own or something open source? Do you have any code samples or example projects?
i have not taken an formal programming courses. here is my GitHub: https://github.com/jasonyunjoonpark I'm not sure how to upload my Xcode project that has a podfile with dependencies. Because of that i can't upload my latest work
Yeah they are good. But for starters, it’s a very fast course and I think not easy to understand if you don’t know Swift already. That’s my opinion. 
Copying my own comment (I mm not typing it over): https://reddit.com/r/iOSProgramming/comments/81zhiy/_/dv6cvmc/?context=1
any advice on how to rephrase it? or do you think i should take it out completely? I'm just trying to portray my dedication towards ios dev
I would hire you for an entry level iOS position with high expectations based on your resume and projects you’ve made. Best of luck in the job search. 
You can remove the "quit to pursue" thing. If you're a self-taught it already says you have some kind of dedication to it. You can bring that up on the interview or something if you really want, i just don't think it fits in the resume.
Don't mention that you left at all. They'll infer it from your work history or if you say it gave you some iOS-relevant skills.
Having a degree of any kind, but especially something science/math related, is a good thing. The fact that you have code samples really helps too. Make sure to put a link on your resume. You could probably get considered for a entry-level position. One thing I would do is to try to trim your use of force-unwrapped `Optional` and type-casts in that code at GitHub. They are "bad code smells" that indicate possible issues with the code. For example, in https://github.com/jasonyunjoonpark/BigCityWeather/blob/master/BigCityWeather/ViewController.swift These should be regular optionals: var degree: Double! var condition: String! var imageUrl: String! var city: String! Lines like these: if let location = json["location"] as? [String : AnyObject] { if let name = location["name"] as? String { self.city = name } } // repeated for each property Can be changed to use the Swift `Codable` protocol, avoiding the typecasts altogether: // Codable structs struct Weather: Codable { let location: String let current: Current let error: Error } struct Current: Codable { let temp_f: Double let condition: String let icon: String } struct Error: Codable { let code: Int let message: String } // decode your data without having to typecast if let data = data, let weather = try? JSONDecoder().decode(Weather.self, from: data) { // all properties are now in a Weather struct object }
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [jasonyunjoonpark/BigCityWeather/.../**ViewController.swift** (master → 5ef8b1e)](https://github.com/jasonyunjoonpark/BigCityWeather/blob/5ef8b1ebab5175acc364df54fc19344450471872/BigCityWeather/ViewController.swift) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dv8bup5.)
I would just rephrase the subject of it. I’d say what inspired you to enter the field of mobile development. This is a time when a cover letter would help a lot. I’d agree u/geologicalfowler that “quit” has a negative connotation. Some resume readers skim for key words and “quit” throws up a red flag. On that same note, try to work in terms like “engineered” in experience when it somewhat fits to make those appear more often and give the appearance that you’ve always been an engineer even if you’re new to development.
1) If you're going full iOS dev, remove anything not related to it, unless you know the company you're applying to desires some of the other skills you have. (besides education, leave that all times) 2) Projects/Experiences are the most important thing on your resume, so bring it all up, below your personal info. then education, then skills. 3) If your projects are live on the store, put a link to it.
Thanks for your input. I don't usually force unwrap optionals. The only reason I did it in that project is because I was 100% sure those properties existed. Also, I am aware of the codable/decodable protocol but sometimes I like to name the variables myself instead of having to conform to whatever the name of it is in the json from the api. Another thing is how do you get codable/decodable protocol to properly work if one of the names of the keys has a space?
You add a nested `enum` named `CodingKeys` to translate between your property names and the keys when they don't match up. From Apple's own [example](https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types): struct Landmark: Codable { var name: String var foundingYear: Int var location: Coordinate var vantagePoints: [Coordinate] enum CodingKeys: String, CodingKey { case name = "title" case foundingYear = "founding_date" case location case vantagePoints } } There are two changed properties `name` and `foundingYear`. The JSON keys for those are really "title" and "founding_date".
What kind of high expectations? Thanks for your input
I would apply for entry level positions with your background. Add a couple of interesting code samples - like a complex mathematical operation, implementation of a few core programming structures (linked list, red-black tree, so on), [Diffie–Hellman key exchange](https://en.wikipedia.org/wiki/Diffie–Hellman_key_exchange), or other technical challenges. Something so they can see you're not just an ordinary person slapping a few bits of code together. That sort of thing sets you apart from the hundreds of other people they see in applications and gives you something to talk about in an interview.
Thanks for the feedback! I've added unsubscribe function after seeing your comment. :)
I'd take web knowledge out if that's all you're going to list for it, although it may help with some resume filter bots I guess? Expanding on that, if you know JS, put that in as a language. Maybe specify if it's ES6+ or not, but by doing so, you may know of frameworks and libraries like Node and React, in which case it's worth mentioning "Web knowledge". I think this permits enough for an internship interview for sure. However, for iOS in an interview, I'd be curious on more things like Objective C readability, Core Data, Core Animation, and what you mean by async. Are you saying GCD? Since you've already graduated, I'd be working on being the best I can be for an actual job. The first job is always hard though.
You have options: 1. Work remotely. 2. Work for yourself. 3. Move to a location where there is demand for iOS developers.
One of the biggest annoyances of NotificationCenter is the fact that it can be difficult to debug. If you use it throughout your app, its not uncommon as you change code that you encounter random methods getting called because you forgot to change a notification name or remove an object from the list of observers. Plus, any thing can't listen in since the notification is broadcasted system wide. Using this or multicast delegates allows you to broadcast but only to those that need to know.
Remote work is difficult if you're not knowledgable and/or established. Or very VERY inexpensive. Probably for a year or two it's good to be in an office and able to work closely with coworkers. The good news is that most iOS dev jobs ought to pay you enough to afford housing near-ish to any metro area that you're searching for a position.
How did you go about transitioning from reading the books to feeling comfortable enough to apply for jobs?
By your resume i would assume that you can learn on your own and can handle new tasks that your are not yet familiar with. Companies need these kind of people. 
My experience may different greatly from others: I don’t live in a major city and jobs aren’t easy to come by around here for specifically iOS. But I practiced a lot writing everything out I learned in his books. I probably went through his first books a few times each practicing over and over again. From there I tried to to recreate apps that are popular. Just the basic features with my own spin on it. I got comfortable using different iOS APIs like this and I also got comfortable understanding different libraries. After that I made two very simple SpriteKit apps - and then a very simple piggy bank app for helping kids learn to count change and save. Like I said I’m not from a major city - and someone around here that I had done work for before was looking for an iOS developer. I applied and got the job. I don’t have a college degree and am self taught. I’m not sure how good my odds would have been in a large city but probably not very good. I hope this was helpful!
It was. Thank you! I'm really into iOS programming but I haven't had a ton of time working on it. Guess I gotta kick my butt into gear
How well does her course work with Xcode 9? I’m watching some of the preview videos and she’s using an older version?
Thanks I really needed that motivation because honestly I think that's my strongest skill rather than my technical capabilites
Yea i ended up just deleting it thanks for your advice
took your advice and removed web knowledge because I really just want to target ios 
Nice monotonous increase
Haven’t had an issue. I believe she said the course works for the most current version as of now. That was always my issue, an older video where nothing applies anymore. But I’ve gone a good ways through so far with zero issues. 
`longjmp()`ed to a new career?
Hey could you help me out or if you have a simple project that has spotify authentication with a login button could I check it out? i tried to follow this guide: https://medium.com/@elonrubin/ios-spotify-sdk-swift-3-0-tutorial-b629af4b889d but for some reason I can't get it to work.
[You've reached the Cory hotline!](https://www.youtube.com/watch?v=hqJ5gKZNkuY)
If you want to mention the change, use "moved from" rather than "quit". 
Looks pretty good to be honest. I’m graduating from a UK university and one thing I have learnt is having a good LinkedIn profile helps and showing it as open to opportunities. Ive had 3 startups message me with them interested, 1 Major makeup company interested in me for internal apps and the Department Of Work And Pensions tell me that he will tell me of any work that he feels that is suitable for me. This is within 2 weeks! 
I would finish and release both projects. Even if they aren't "hits" it is very impressive to link to a real app that the reviewer can use and try out. Makes you seem more "real".
Here's the blog about map detection: https://blog.quicktype.io/markov/
Okay. I have no idea why. But I force quit xcode and now it works. I'll just leave this here for future people confused.
It was Xcode being an idiot. Resetting it worked. 
I know you’re just starting out so this might be harder but if you hold down command+Double click the file you need to open(in this case `ViewController.swift`) that will open the right file in the assistant editor. 
What everyone else has said. A lot of times in office collaboration can very valuable. Especially just starting out. 
* "Passion" is an overused term. I would avoid it, especially with a qualifier like "true". If we were in an interview and I said "You say your true passion is mobile development. Why?"... what would be your response? I have asked this before, and in my experience, people don't really have an an answer. But some people reveal that they care about certain aspects of development, like accessibility, design, using development as a creative outlet, etc. (Those are more interesting and appealing to me than someone who boringly says they're "passionate" about such a broad thing.) * I would ask you about "SDK Implementation". What SDKs? Apple's? Third-parties? Which ones in particular? I would expect all developers to be able to work with any SDK necessary (unless it was an SDK related to a particular specialized field, like Machine Learning, for example). * "MVC Model" - It'd read this as "Model View Controller Model". I'd just put "MVC", or "MVC Architecture" or "MVC Design Pattern". * Someone else mentioned removing your knowledge of Web technologies. I would actually leave them, if you could confidently answer questions related to them in an interview. That goes for anything that isn't directly related to iOS, really. It is good when people have diverse development experiences with other technologies and languages.
Is the "live chat app" on your resume the one you built with angela yu's course? If so that's a very popular course, and they're likely to ask you about it and that conversation will be embarrassing for you.
Where do you live? We hire out of college and are currently looking for an app dev. (SE CT)
No, I have not paid any money for resources to learn. All my learning was done online from free resources
Nice dude. Congrats on all the hard work, I hope things work out for you. What part of the country are you looking for an ios job?
Thanks I appreciate it. I am from NJ/NY area but honestly willing to relocate anywhere in the states for a good opportunity that will help me grow professionally 
Thanks for your input and honesty i will keep all this in mind to improve
&gt; an app dev. (SE CT New Jersey could you give me more info please?
Media company that does WP-based websites for ~ 1k websites looking to take our old tired Ionic framework apps and go native.
“Dependencies” seems a little weird to me. Maybe call it “Frameworks” or “Libraries”? 
Congrats on your progress. Getting a first iOs job is tough. What I did was release two full apps to the App Store. I open sourced one and some libraries. If you put in this level of effort, you will demonstrate your dedication to potential employers. Eventually, one might take a chance on you. 
I'm posting from my phone so I can't give you more code or pointers, but you're on the right track with the Networking class. When it comes to the Service Manager, have you considered having a separate Service Manager for each use case? For example if you have a banking app, you could have an Account Service Manager to deal with accounts, a Payments Service Manager to deal with payments, a Transactions Service Manager for transactions and so on. 
Yup ideally that's what I would do. And all of these would connect back to the networking class. Does that make sense at all? 
Yep. So your networking class can have methods to do post, get, delete, etc as generic functions, then through your service managers you call the appropriate method, url path and any parameters / request body. 
I changed it to 'Frameworks/Libraries'. I think you're right it sounds better thanks
&gt; Your gonna You're* gonna your = something that belongs to you 
"Identicons"?
One thing that stands out for me is that the projects look like popular iOS tutorial projects. That's not a bad thing, but the problem is that a lot of people call themselves programmers and they just "cut and paste" things together without really knowing what the code does or most importantly, how to debug it. If I were doing the code review for these projects, I'd look for something not seen in an online tutorial. IMO, this is more important if you don't have a CS or related degree.
Sure :) What is the problem?
I’ve seen them both used in the same context, so I would say they’re synonymous. I could be wrong though. 
Same thing 
the good news: your resume looks really solid for an entry-level candidate. you could spend a week or 2 working through matt gallow's Effective Objective C book and toss it on to your resume as another language. i would also go through a storyboard tutorial so you can include that as well, even if you dont want to work with storyboards. the bad news: iOS internships and entry-level positions seem extremely hard to come by, especially if you want to target a specific type of field/company/app. i would guess that this means they're extremely competitive when it comes to applying as well. everyone I know who started doing iOS in 2014 or later (including myself) was initially hired into a different software role and then transitioned, or they applied through a large tech company's generic software engineer pipeline and landed in iOS through that. soo my main advice aside from the objective c and storyboard thing is to also apply to lots of internships that arent specifically iOS, because the most important thing is to just get your first real software engineering job. i cant give you good advice for that because i dont know what i'd be looking for in a resume that isnt targeting iOS specifically other stuff that's really minor in comparison: remove github from source control remove skill levels from languages, remove python and vba if you think you would choke on basic/popular questions, like implementing a model or reversing a string
Traditionally the title "engineer" is only applicable to people with a masters degree (or previous iteration) in engineering. You can call yourself doctor without being one if you want but I always call myself developer since I lack that very specific degree. But yes, development is mostly engineering so in a non-academic sense we're engineers. It depends on of you want an academic title or a "well, in a sense" title.
Images which uniquely identify a given seed. You can create default profile images for users with their username for example.
Not to be a dick but it's Auto Layout not auto layout. I believe Apple uses this style for most if not all of their frameworks, eg Core Data, Core Location, etc. 
Based on your experience with various frameworks alone are you sure you want to go for an internship? I suppose it depends where you're applying but I imagine you could get a junior level position in some places. Sorry that was too nice. How about this? The green titles remind me of Android. 
I’m no professional myself but I believe it depends on the company and the team you are working with. Some will choose to use storyboards and some will choose to use programmatic. there are pros and cons to both. Off the top of my head storyboards are great for quick prototyping of an idea. Con of using storyboards is when you are working with source control, it’s pretty hard to see what was changed in the storyboard through code. On the other hand, programmatic approach lets you (and others) to see what was changed a lot more clearly. Of course there are more pros and cons for each but in short, I think both are great for different reasons 
&gt; constraints via blocks 1. I haven't yet heard iOS developers use the term 'block' to refer to anonymous functions. Use the word closure. 2. Kind of an interesting detail to call out. I've _probably_ done this myself. I guess I wonder why you're calling it out. Could start an interesting conversation. 
Honestly I have a huge feeling of imposter syndrome that’s probably holding me back because all of this was learned in a very short period of time 
Thanks for your reply! I think I'll be learning some of programmatic UI after the API section. 
If you understand the software development process in an extent, agile methodologies like scrum, kanban, sprint planning, estimation, release process, you can assist in software architecture, you have at least minor leadership tendencies, and can or do communicate at least with your PO, besides programming then you might be considered as an engineer. If you can mainly deliver a ticket from todo to done, then you are a developer.
Hmmm I think you should have at least BEng or MEng in your name for engineer :p
None of the things you listed have anything to do with being an engineer, those are attributes that denote whether you are junior, senior or a lead.
I'm sorry to hear you hit this problem! I can write the books, but ultimately we're all at the whim of Xcode :)
Well, you are wrong. All engineering levels require some understanding of what I listed. Note that I wrote *tendencies* for example. Anyways, what I described is how *we* distinguish between engineers and developers, your mileage may vary...
Because Xcode sucks 
good post :)
Definitely not. Engineering is open to everyone, regardless of background and qualifications.
I feel ya. I’ve been there myself and have heard very senior devs say they too get it. That said you don’t want that to end up with you selling yourself short. Can’t hurt to go in for a few junior interviews just to see how things go. A role in a financial tech company may even give you a leg up given your background. 
Where?
That's exactly what separates coder and engineers. IMO anyone can code, but not everyone can be/ is a software engineer. This is list is what makes you an engineer. 
At some places it's just a naming convention, at our place it's determined by what I wrote.
You would be better served using a collection view, or possibly a stack view. My vote is for the collection view since you can select the cell directly and won’t have to create outlets for all the buttons. 
I did use stack views, but the buttons are still kind of lumped together, not evenly spread out across the screen. I tried using a collection view before, but had the same problem with layout and some people said that placing a button inside a cell was problematic later on?
I appreciate that you may only be getting to grips with all of the iOS stuff, but nearly all of this information can be found within the docs. Here's info on your three points: **1)** `MKPinAnnotationView` inherits from `MKAnnotationView` meaning that you can access the `coordinate` ***property*** (not function) as so: let pinAnnotationView: MKPinAnnotationView = MKPinAnnotationView() pinAnnotationView.annotation?.coordinate See more [in the docs](https://developer.apple.com/documentation/mapkit/mkpinannotationview) **2)** The thing that goes on top of the pin is called the `detailCalloutAccessoryView` and has both a `title` and `subtitle` property which you should consider using before you go to build your own. Docs on this can be seen [here](https://developer.apple.com/documentation/mapkit/mkannotation/1429522-title). If you do wish to go and create your own callout view, there is no readily available API for this, instead, you will need to subclass `MKAnnotation` or `MKPinAnnotationView` or one of the other annotation subclasses. Have a google for this, there's an abundance of tutorials out there. **3)** Converting between coordinates and place names can be found in the docs under [Converting Between Coordinates and User-Friendly Place Names](https://developer.apple.com/documentation/corelocation/converting_between_coordinates_and_user_friendly_place_names). If you want to learn more about this stuff I suggest that you ***READ THE DOCS*** 
by what you wrote do you mean the code you wrote? isn't that describing a simple software developer? a software _engineer_ has many more responsibilities than coding 😉️
&gt; besides(!!!!!!!!!) programming 
Does that mean it’s actually protected or is it just prejudice? 
I think it’s more like prejudice but it’s really respected by the IT French world. 
I am subscribed to this newsletter and it is great! But I don't understand the "top 10 ios dev links" part. What is that referring to?
Ok thank you that's why I failed with the collection view! Yes I was trying to do that using the interface builder, but I end up using a lot of constants and that doesn't seem like a good idea. Is it preferable to do it in code? Apple labels doing it programatically as 'advanced'. I don't even know where to put the code. I guess I have to use an API. 
Thank you I will probably try using a collection view. Is that last part done in code or using the interface builder? 
I’m a mechanical engineer and I program in iOS. So I’m an iOS Engineer. 
Just a personal opinion, I'd create four groups: View, Model, Controller and ViewModel. So basically I'd change your **UI** group to **View** and **View** to **Controller** just to make it more readable. Other than that, good job!
It's possible that in other countries the term engineer can be applied to anyone solving problems. It's possible anybody helping the sick in a developing country might be considered a doctor too. I think it just has to do with title inflation. People want to be engineers because it's an admirable achievement to get that degree but I won't help normalize diluting the merit. You can take great jobs and make tons of cash without the title.
You can only become a real engineer if you pass your P.Eng (professional engineering exam) after getting a degree in Engineering. It's mandated by the Canadian Council of Professional Engineers. "Software engineering" is tricky (I just think it's a buzzword because it sounds better than Software Developer), but for other fields, I absolutely agree with it. Lives are at stake in most engineering fields and we only want people who know what the fuck they're doing to partake in such fields. 
Thank you for your input. This project is a bit old if I were to re-do it would look a lot different. Especially since I'm currently working as an intern at a pretty big firm. Therefore coding conventions, structure and how I write code has totally changed. I've said goodbye to storyboards for good. Writing everything in code is just marvelous. 
don't you find this a bit redundant? &gt; If you understand the software development process to an extent ... you might be considered as an engineer &gt; software development &gt; software **development** your words, not mine 
I think that’s a very narrow perspective of engineering. Engineering is simply solving problems, the degree to which you have to have education and credentials is proportional to the complexity and safety requirements. 
If engineering is simply (educated) problem solving, then wouldn't pure math, investing, theoretical physics, etc... be engineering?
Your perspective is very alien to me. I don’t see engineering as this big title that applies to only a small set of highly prestigious people. I see it as a discipline that literally everyone takes part in at some point in their lives. I also see that some people just have a gift for solving problems in a specific field and they have the right to call themselves engineers. Otherwise it’s just gatekeeping. 
I find my reasoning in this childish sub futile....
you must not be from the US? Here we throw around engineering with regard to software without qualification required. It’s any programmer.
The author could have looked associated value enums in Swift: enum Value { case Integer(Int64) case Decimal(Double) case Text(String) } where you can do let d = Value.Decimal(3.1415927) let s = Value.Text("How now brown cow")
Those are done in code, but you can also use the IB for this. Ctrl+Drag from the button to the superview, then select center vertically, and center horizontally. 
&gt; I haven't yet heard iOS developers use the term 'block' to refer to anonymous functions. Use the word closure. Let me guess, you don't know Objective-C 
They are mentioned at the end of the article.
Sorry I’m not answering your question, but whilst I remember - what’s the *override func* part mean? I’m new to development for iOS and have seen it everywhere, and I’m at work so can’t go have a search right now ha! Thanks!
Oh so now it's problem solving AND application of said problems of science! So under that definition: investing, applying mathematical models, writing textbooks, and even cooking could fall under that definition. 
Possibly because you have poor reasoning :)
This code is a fragment, badly formatted, and lacks context. When you use `override func` you are inheriting from a `class` and are overriding one of its methods. You can see the call to the `super` method as the first line in that method. It's most likely this method in `UIViewController`: [`didReceiveMemoryWarning()`](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621409-didreceivememorywarning)
Some of the listings for "IOS Engineer" have been more "under the hood" "nuts and bolts" kinds of work. Things like making FFMpeg vs using it. Making a game engine vs using one. However, it's not like a fixed rule. I just did a quick compare on DICE and the results were mixed. Some had "Developer" in the description and "Engineer" in the title. The work listed were both the same when comparing several of them. https://teamtreehouse.com/community/whats-the-difference-between-a-developer-programmer-and-software-engineer
Wtf, I‘d stop using any site that does this regardless if I allow it or not.
It might depend on the part of the country. In Alberta at least, Software Engineering is still an engineering degree and therefore it’s a protected title. I think Ontario May be similar but I’m not sure. 
If only reddit could harness the energy it takes to click off their app spam in order to just use the mobile site.
Yes, this is the same in ON.
That's correct. Here in Sweden we have a more germanic tradition with the title. Engineering is a big deal here and developers like myself cannot use the title if we don't have the correct degree. I personally like it.
Right. That's true of certain industries in the US but not software. You can't just say you're a structural engineer but anybody can say they're a software engineer. It's weird but that's how it is in the US.
You mean building a schema and converting it into Swift using a tool?
Added the site to my adblocker just in case I forget this in the future
Very weird indeed. I'm not going to hold a transatlantic grudge though, it's just a title. I'm working with two developers with Ph Ds right now and one of them loves to call himself Doctor. I guess that if I spent that large a chunk of my life in the books I'd cling to anything it gave me as well but from my perspective it's pretty silly. As if his bugs weren't just as dumb as anyone else's. 
Ah, thanks for the explanation! 
I don't even use an ad blocker. This is just scummy. I hope monero crashes to $0.
 echo '127.0.0.1 coin-hive.com coinhive.com authedmine.com' &gt;&gt; /etc/hosts
I don't get the hate. Invasive ads are much worse in my experience, if this can replace the obnoxious popunder ads, and disabling of content unless ad blocker is turned off, I think we'd be in a better place. 
I really enjoyed hearing from everyone who wrote in and learning what keeps iOS devs from writing unit tests. As someone who *usually* writes tests, it's good to hear others' reasons for not — since I can relate to a lot of them.
The Developer's* Toolbox
Thanks! I really appreciate the detailed response. I went this route (I found it shortly after posting and before I saw your response): http://www.appstack.eu/en/tutorial-xcodes-core-data-stack-template-in-separate-swift-file/ It seemed to work well. 
Look into Oyster Pearl. They plan on replacing website ads with something similar to this. It's pretty amazing what they plan to do. 
Mobile developers are generally booked solid and they have to work very fast. Quite often the clients don't care for tests and maintainability either. Sadly the mobile ecosystem is full of people throwing shit on the wall and seeing what will stick. When something does stick they'll scramble to quickly improve/fix it or rewrite it into something more maintainable.
CPU mining is still profitable, just not with Bitcoin. But the idea here is to replace advertisements with a small amount of mining
That's your choice. You may feel differently one day. I started in electronics, I called myself a 'Technician' (because it was my job title) for most of that career. At that stage I had a BSc in 'Electronic Systems Engineering' but still didn't call myself an engineer. It was only when I went to an engineering conference that I realised that everything I had been doing from the start was using engineering methodologies and that my one true passion is problem solving, I recognised that I had the right to call myself an engineer. If you use your computer science knowledge to solve programming problems, you're an engineer.
Sorry for all the questions, but if I want to use 'didSelectItemAtIndexPath' to send the user to a new ViewController, will all 12 buttons/cells lead the user to the same ViewController? 
Of course it is...just not if you are paying for the resources. 
&gt; Then it's nobody's *toolbox* ^Johnny Tran
Culinary Engineer. I think we found a new buzzword for Chef!
You have to realize that iOS dev is a fairly small niche and one that is especially concentrated in big cities with lots of venture capital(and to a lesser extent bigcos and agencies). Outside those 10 or so cities it gets pretty sparse, especially by comparison to generic business languages like java/c#/php. Remote can be pretty tough to find, especially as a new dev(half of us with 10 years experience would happily take a pay cut to go remote). Starting a business is also quite difficult/risky, though if you're both good and lucky it can be a spectacular win. Most of us just move where the jobs are, especially after we get old enough to have family. Or else we transition from sexylang(swift) to booringlang that has more than one job a month in our area.
Why is coinhive still allowed ? And shame on hackingwithswift
The question was "what keeps you from writing unit tests?" whenever you *don't* write them. This isn't meant to imply that no iOS developers write unit tests, though I could see how you'd get that from the title.
This looks pretty cool: https://app.quicktype.io/
I’m interested in hearing those who disagree with this as well...
Most of the apps I've seen are largely gluing together existing frameworks. The units are these frameworks. The application itself doesn't really have a lot of logic at the unit level. It's like asking why web developers don't use ECC RAM. The question presumes the wrong level of abstraction. That is a useful attribute, and the system may include that, at the appropriate level, but it's not really the right question to ask at the integration level.
It currently supports only UIKit, and Carthage is supported. There is some nice sample that shows how to use FlexLayout inside UICollectionViewCells and UITableViewCells. Also, a view that embedded FlexLayout can simply implement the intrinsicContentSize property, and boom, the view can be used inside any auto layout view, including UIStackViews.
At least they ask...
Great article. Would love a way to subscribe!
Essentially, make everything as auto as possible and make sure your don't leave any dimensions / coordinate positions undefined. 
But the app is great... No lie, you should give it a shot.
\&gt; The application itself doesn't really have a lot of logic at the unit level. I'm not sure I follow here: if an application doesn't have much logic, it sounds like it'd be a pretty trivial app. If that's true, I suppose I wouldn't test it. \&gt; Boeing doesn't stress test every bolt. That's on the suppliers. I think you're suggesting that iOS devs shouldn't test the frameworks, which I agree with. I expect the suppliers — Apple, or the third\-party framework developer — to test their own frameworks. But I'm going to unit test all the logic in \*my\* code to verify that it meets the requirements.
I usually add all the UI elements then add my constraints after. Can you add a screen shot of your constraints and one of the issues being reported?
i've been learning swift by creating a game. last weekend i managed to get a menu working for song selection. when i get a chance i'm gonna work on different sortings. 
It usually used far more CPU and resources than it claims to. 
[removed]
Official reddit app is shite. Reddit is Fun is a million times better
Settings are hidden, where you have to log in to your account on the desktop site To change them, no way of doing it on the app. It's very unclear for a new user how to find a particular subreddit (even if you know it's name). 
What's your solution exactly? Have a list of saved subs (like your subscriptions?) Because that list is on the search tab as well. I almost never need to change my setting that are on only on the site. I imagine most users are also the same. If that's something you need to do the use the web browser. NBD. Your reasoning for why you think the app is bad is not very strong. 
But it's not clear at all that I needed to go to the browser. Nowhere does it say that. It's only googling that I found the answer. That's why the app has poor design. It is difficult at all, but a right pain if you aren't near a desktop/laptop and want access to some features (in my case NSFW subreddits) I'm not saying the search bar should be removed, I'm saying it isn't clear at all. But use whatever you like. I think Reddit is Fun is far superior. 
This has happened to me a couple of times over the years. For me, the problem was a design issue, not having clear enough division of responsibility among the objects involved, having a single object taking care of multiple tasks, that sort of thing. I had to revisit some of my objects and think carefully about the nature of each task before I could really see that I was in fact mashing two or more areas of responsibility together as though they were one. Not saying you have a design issue, but that's what it was for me.
Um, get off my lawn with your new-fangled money-making schemes! How dare you make money from me!!?!?
Right, it absolutely should be better about that.
I think it should be an option: Do you want to see ads, allow us to use your resources to mine crypto, or pay a monthly subscription? Quality content won't be free forever, at least you can have a choice in how to pay. 
you could check out Hydra, allows you to write promises and es8 inspired async/await
Check out [ReactiveSwift](https://github.com/ReactiveCocoa/ReactiveSwift)! Makes it really simple to handle async calls.
The same small, niche app that surprisingly does not exist on the store yet as last month. I'm just polishing some custom segues for some popup windows and then it's just ticking off standard iOS app features - settings, saving and loading, tappy sound effects for buttons, putting the ads in, in app purchase to get rid of them and so on.
Thanks much. I'll be as specific as I can, but I can't guarantee I'll make any sense. So yeah, I have my gremlins. I want to give them some inner states, like happy or hungry. And I want them to announce changes in their state. I suppose I could put `didSet` on all their properties. So I guess my first question is, would you do it that way? Or is that a total hack? Are there better ways? Would you guess that a random Swift developer would probably do it that way? I think your answer to that might eliminate a few questions. Cheers
I’ve used it before and it’s not that it’s bad. But I’m not a diehard reddit user (for example, you getting a downvote for expressing an opinion is a pet peeve of mine with how reddit works). I just like to sweep through my usual websites and see what’s up. I don’t need an app for each one. But Reddit has these speed bumps installed to push their app. Today it didn’t even have the “continue to mobile” option. I had to click it and then cancel. 
Battery life.
Functions are a subset of closures. If you need named parameters, use functions. e.g. let people = ["John", "Mary", "Jane"] let john0 = people.filter { $0 == "John" } func isItJohn(potentialJohn: String) -&gt; Bool { if potentialJohn == "John" { return true } return false } let john1 = people.filter(isItJohn)
Core data models are the opposite of immutable.
Hmm, it’s been a while since I’ve used it but I thought they could be made immutable. Of course that was back in the Objective-C days. In Swift I usually set up my models by hand, using `struct` with `let` and thus have everything naturally be immutable. 
You can try the following: DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(0.5), execute: { // code that iterates over each letter }) Check out Apple’s documents on DispatchQueue for other super useful functions: https://developer.apple.com/documentation/dispatch/dispatchqueue 
Apollo for iOS is the best. Written in Swift too. 
Monero is an important step towards private sovereignless money. Don’t be so quick to judge It’s not Monero’s fault this website is electing to mine it. 
It’s unethical and a cash grab. Having a crypto miner embedded on a website where they use visitors to mine just seems terrible. 
Working on an interesting project with bridging between a WKWebView and native code, some of you might have read the article I wrote on that. In my personal time I’m working on upping my design skills!
I think that is better than selling your personal data to big companies like google. And they ask!
Nice idea!
Rxswift: https://github.com/ReactiveX/RxSwift Observables can easily handle a chain of serial and parallel calls.
This was great! Very helpful and straight to the point. I really like how you gave a practical example.
Good video tutorial here https://youtu.be/YY3bTxgxWss
Ah you seem to believe them that they take no for an answer. There is half the problem. Considering the origin of this software, I don't believe that for a heartbeat.
It's valueless widgets that fools have been duped into thinking have value. Eventually all of them are going to crash and people are going to lose a lot of real money.
Awesome! I am ashamed to say that even though I have worked full time as iOS dev for 2 years, I still didn't knew all the topics you mentioned haha. Keep up the good work! I think you should be able to get an internship with the current knowledge, maybe try submit some app to app store would increase your chances.
I just got a lead iOS developer position with a fortune 100 and have no degree and was asked no questions regarding cs fundamentals. I wouldn’t worry about it. Also I recommend picking up the iOS developer interview book wow did it help.
This has nothing to do with Hacking with Swift.
I assume this is the non-video version? http://kristofk.com/static-keyword-swift/ 
You assume right. I usually write the posts to organize my taughts and then I can make the videos. 
Awesome, I much prefer reading a post to watching a video. Everybody has their own learning style and reading beats listening for me. Not to mention that reading a post tends to take a lot less time than watching a video. Thanks for the content!
As long as you find the content usefull it doesn’t matter! 😀
Truthfully, I'm a fairly seasoned Swift developer so I know the `static` keyword pretty well. However, it's a great introduction for those who don't.
The Go button needs to cause the field to lose first responder status. Such as: view.endEditing(true)
Thanks very much I will get more out put from the debugger and post my findings
you can look into codementor,io They have long term mentors and short term if you just need help on specifics
How can it be exhaustive if it's so much shorter than the Apple documentation it links to? I'm skeptical, but I'll read it... &gt; A quick note that due to some Obj-C shenanigans within classes you can use the class keyword instead of the static keyword. However, it is recommended that in Swift you use the static keyword consistently. ...wait, *what*? What does "some Obj-C shenanigans" mean? (Do you think inheritance is just an Obj-C leftover?) Do you think that class funcs and static funcs are the same thing? Why do you universally discourage the more powerful one? Also, why no mention of enums, or what unqualified names refer to, or how self is bound, or what type of dispatch is used? I'm not sure you really understand Swift type methods. Apple's documentation page is very well written, and I encourage everyone to read it.
Did you test your notification trigger code in foreground first?
Hi staires! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/82qybs/i_open_sourced_my_first_ios_app_github_app_store/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
See this for why `resignFirstResponder` is preferable. https://stackoverflow.com/questions/29882775/resignfirstresponder-vs-endediting-for-keyboard-dismissal
What errors are you seeing?
This is great feedback and there is no need to be insensitive! Now I know what I missed so next time I do something similar it will be better thanks to you!
I'd get cracking on it yourself. You sound motivated and smart enough to begin without the help of another person. Every decent iOS developer out there has 2 things in common. 1. They have ideas for killer apps they can't find time for. 2. They have 10 friends and family members with ideas for killer apps. Just get started and see where the journey takes you.
Thanks. Honestly I came asking this as a last resort because I’ve been trying to solve something very specific regarding Firebase and Spotify iOS SDK and couldn’t find any answers on reddit, stackoverflow, etc
Looks like fun!
And this is the only thing holding me back from continuing the profession of building other functionality of the app out 
It sounds like the OP is trying to do that. But if he is crashing, he might not be accessing the correct field. If ending it across all subviews allows it to work, that isolates the problem. Then there is the fact that he only has two fields. Which on the one hand, means a reference should be readily available. But on the other hand, it's not exactly a bottleneck. 
Yup worked fine
I'd like to create a road-map of my vision first, maybe? I'm planning on rebuilding the backend entirely, and I'm considering doing a complete rebuild of the iOS app since it's kind of a mess, but maybe that isn't necessary. If I'm not rebuilding the iOS app completely, contributors would probably be cool! Just to brain dump: Basically I'd like to add one major feature to the backend, and that's the ability to comment on / discuss releases. Mostly inspired by how much I miss WhatCD and how there was essentially a community of hardcore music fans who could share opinions on new releases in a generally intelligent way--basically I think because of the type of app Numu is, the community would be composed mostly of huge fans of music, I think it would be valuable to let them talk to each other. Obviously once this feature is available on the backend, the iOS app will need a new screen or two for it :) Secondly, I'd like to replace the 'popping out' of the app to play music in Apple Music. It'd be great to turn Numu Tracker into a full front-end for Apple Music, but there's a lot to be done with that idea. Need a whole music playing interface and stuff like that.
They asked normal iOS questions difference between struct and class and how that relates to asynchronous programming etc... some companies swear by asking dumb algorithms questions just find a company that doesn’t 
Also thanks for the design kudos! I try to make my stuff look real nice if I can :)
Thanks for the tip! I’ll look into MVVM-C.
You are welcome! 
Doh. My mistake. Fixed. 
So...not sure what you're looking for. Critique? Attaboy? Job? I'm just going to address general code quality. I read your server code. Lots of raw SQL. Sometimes raw SQL is the best (or only!) way. But it is error prone and takes a long time to write. In general I'd say your server code has about 5-10x more code than it needs because there is no abstraction. No model. No helpers to represent the semantics at a higher level. I think you will benefit from learning Django because it has models that map to the database and simplifies your interface to the database. I have to say the same thing about your ios app. You write too much low level code and could move up a level in abstraction to get things done and have a much smaller more understandable program. You should have a set of models and model provider that abstracts away the underlying storage (looks like you just fetch stuff in from the network - no local storage - no caching) and filtering/access. Since you mentioned adding commenting, as an example - this is my server side Comments handler in PHP for a social networking app I did - both post and get. if(IsGet()) { try { $current_account = Account::CurrentAccount(); $item_ids = explode(',',ValueOrDie('item_id',$_GET)); $comments = Comment::find(['item_id' =&gt; $item_ids]); $account_ids = [$current_account-&gt;id =&gt; $current_account-&gt;id]; foreach($comments as $comment) { $account_ids[$comment-&gt;accountId] = $comment-&gt;accountId; } $accounts = Account::find(['id' =&gt; array_values($account_ids)]); Success(['accounts' =&gt; $accounts, 'comments' =&gt; $comments,'items' =&gt; Item::find(['id' =&gt; $item_ids])]); } catch(Exception $ex) { Fatal($ex); } } if(IsPost()) { try { $current_account = Account::CurrentAccount(); $item_id = ValueOrDie('item_id',$_POST); $text = ValueOrDie('comment',$_POST); $comment = new Comment(); $comment-&gt;accountId = $current_account-&gt;id; $comment-&gt;itemId = $item_id; $comment-&gt;comment = $text; $comment-&gt;save(); $comments = Comment::find(['item_id' =&gt; $item_id], [['id', 'DESC']], 30); $item = Item::find($item_id); $accounts_ids = [$current_account-&gt;id =&gt; $current_account-&gt;id]; foreach($comments as $c) { $account_ids[$c-&gt;id] = $c-&gt;id; } $accounts = Account::find(['id' =&gt; array_values($account_ids)]); Success(['accounts' =&gt; $accounts, 'items' =&gt; [$item], 'comments' =&gt; $comments]); } catch(Exception $ex) { Fatal($ex); } } Its pretty small and it emits JSON. It works because I have a small ActiveRecord library that I wrote in PHP to make this kind of thing easy and to largely abstract away the dealings with the database without sacrificing efficiency. All that query building you have, that's in the Model base class - its generic, and its there once. Not trying to slag you - hoping you take it and improve.
Thank you for the feedback :) You’re correct that the code is a total mess and I appreciate your tips. I admit that my first app is VERY hacky and I built it at a time I had a very basic understanding of OO and no real concept of quality architecture. I am working daily on learning and improving the way I build things out. I personally like writing raw SQL queries and I work with a lot of SQL all day at my real job because I built tools that pull from another program’s database. But I do understand that I should probably be turning all that stuff into views or stored procedures. Some stuff like filtering based on user preferences probably has a better method than generating SQL code in PHP and I just don’t know what it is yet. We’ll see what I come up with in the Django version, I will be avoiding writing any raw SQL in the Django version. I definitely don’t feel like your slogging me!
Actually I do escape all that stuff. Where are you seeing that I'm not escaping user input? There are a couple places where I am pulling data out of the DB and putting it right back in where I don't escape, but...
Very nice UI. Looking forward to checking this out! I've made a similar app (also my first iOS app) that helps you keep track of your physical music collection. https://itunes.apple.com/us/app/mymus/id1163452615?ls=1&amp;mt=8 
Whoa! Nice! I will totally download your app. I have a very small vinyl collection but I use discogs a lot for finding rare albums for my gf... so an app that uses discogs sounds perfect!
Do you have a backend that stores the collection? Or do you store it seamlessly in iCloud or...?
You could post your specific question here?
You need to start out with how do you get the info from Reddit. Is it RSS, OAuth API, ? There's a number of "news readers" out there, I've done one myself using RSS. I'm doing an OAuth API project now. Apple had a pretty good "top app" list app that grabbed the top app info from their site. Just a quick search, looks like it uses an API, I'd check if that Udemy tutorial has networking. I think the RayW Udemy Swift4/iOS11 tutorial had some great networking stuff. She was very complete, IMO. Here's a reddit wrapper that might give some insight. https://github.com/sonsongithub/reddift
Hi jaspar1! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/82snkj/how_can_i_recreate_this_app_with_swift_4_and/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Not sure what you mean by "normal". Do you mean you want an app that doesn't depend on any of Apple's game-related libraries? I am writing an app that has "normal" menus and windows, but also includes angry zombies. Maybe you're talking about that? I actually had to hire a guy to do it for me. But you can have it for free, if that's what you're looking for. I don't know much about how the guy created the project, but we could ask him if you find you have questions that can't be answered. Have a look at my [AgentFlocks](https://github.com/GreatBigBore/AgentFlocks) repo. See if it's anything like what you're talking about. If you want to run it, and not just read code, let me know and I'll give you details. Cheers
Yes thanks! The course teaches about API’s and a slack clone. I guess I could use that part, but still I need a lot more knowledge, :) 
Right so I tried that, but then the app crashes and it jumps to the AppDelegate and by the first line (Class AppDelegate...) it says "Thread 1: SIGABRT" (which, if I understand, means Signal Abort?)
I don't know Spotify well, but I'm guessing you'd get a list for the people to pick from, then you want to have a list of the the most voted for in an array. Does Spotify give you a list of songs and then you write a browser for it so that people can drill down based on category then have a sorted list they can search from? Looks like Spotify has an API where you use an OAuth to connect up and get info from it. How would you restrict the voting to people nearby? I've seen "pop up P2P chat" apps before. What problems are you getting with Spotify? Do they offer a list of categories and songs in each category? Have you been able to connect?
I just did a quick check, I've got that one on my list, but I haven't done it yet. I didn't know they had a slack clone. How do you get the data out of Reddit? Is it RSS feeds or API? I'm working on an OAuth project now and looking to grab data from several sources, I haven't done reddit yet, but I've seen code that clones the reddit browser. In fact, I think someone posted some last year where he did a reddit browser as a "code challenge", I looked at it, but didn't dig too deep. Too many things to do :D
I just reinstalled slack, I haven't used it since my last upgrade. Do you have a group or do you need to send me an invite?
im in ios-developers
Same here. ios-developers.slack.com I have it open now.
I don't use storyboard but sounds like it's something not connected right or deleted outlet. 
That looks right, although you can also check if the URL scheme *can* be opened, like so... if UIApplication.shared.canOpenURL(URL.init(string: "twitter://")!) { UIApplication.shared.open(URL.init(string: "twitter://user?screen_name=inserttwitternamehere")!, options:[:], completionHandler: nil) }
Definitely not enough to deliver an app better than Apollo overnight in my opinion. Check Ray Wenderlich tutorials and courses, there you can find all you need but it will get more than a couple of nights if you’re starting from scratch 
Yeah I’ve picked up a little bit already and have been replicating my introductory python programs with swift as command line apps. 
That's a great practice. Work on terminal apps before you move onto GUI ones. By the time you do something GUI you'll already understand the language, many frameworks, and the toolchain.
You can build pretty much anything from scratch like that. Those templates are just to do some of the busy work of setting up the project for you, providing an app skeleton that might get you started in the right direction.
What I worked on last month. A giant 5+ year old project. Mix of ObjC and Swift. The quality of code is good but I'm living in build time hell. 
Everything is stored locally with Core Data, so you don't need an internet connection to check your collection or wishlist. If you authorize the app thru Discogs you have the option to keep the local collection sync'd with the remote Discogs collection. There is a PHP backend that I use for New Releases and a new feature that's being released (hopefully) this week. 
Thank you so much for responding! I really appreciate it. My app is not even a real app--I'm writing it simply as a means to learn my way around Apple Land and the developer community. I've never worked in data, so I'm having a hard time finding my way at the moment. But I did study an implementation some years ago, a generic mechanism for all of that stuff, transactions, notifications, undo/redo, serialize/save, deserialize/load, all of that data stuff. Core Data resembles what I'm looking for, but everyone hates and fears it (I've learned that much about the Apple developer community). Many of those who are forced to use it grab the CoreStore library from Github to shield themselves from the worst parts. I studied Core Data for two weeks, and I joined the ranks of the fearful. I figured there would be something that everyone else uses. I guess there's not, or you would have told me. That's actually a relief. I've been worried all this time that there really is something, but I'm looking in the wrong place for it. Again, thanks so much for responding. It's been awfully quiet. I'm getting an inferiority complex about it.
If I delete the app and reinstall it, will I lose all my data? I guess that's more my question. At least with core data and local storage iCloud backup saves it.
Yeah, I made the choice to lazily store credentials in there because it's not like their credentials are protecting anything genuinely important. If someone has unfettered access to their iPhone they probably have bigger problems than someone stealing their Numu credentials :) That said, this will be fixed and the future API will feature session tokens and so on.
Yes, you'll lose any saved data if you delete without backing up the device first. If you restore from a backup then all the data is restored with it. I made a decision early on to not mess with user accounts on my end, and try to let Discogs perform that role for me. If you authorize the app with your Discogs account and choose to keep the two in sync, then you can delete the app (or install on a different device) and just re-sync your Discogs account to the MyMus app. So, no data loss. 
I'm sure I'll be in the minority, but I recommend that you seek a hard language, unrelated to Swift. Perhaps C++. Much harder than Swift. It will exercise your mind, and when you learn Swift, you will have two ways of conceptualizing problems instead of just one way. Two sets of conceptual tools instead of one. Just sayin
Check out [Doctrine.](http://www.doctrine-project.org/)
Interesting. Thanks. I'll have to test it to make sure it still works. No complaints yet, mind.
The language you use for iOS is only one part of the whole thing. For many, it's just a control system for calling the APIs. Honestly, I've spent a LOT more time learning all the add ons. Everything from Core Data to OAuth. I'd take something that OO, Kotlin looks good if it's offered. Then do the Swift online. I'll always be a fan of C/C++/C#. I've heard C# is close to Swift. If they teach ObjC, you might want to take that. ObjC is stable as a rock. 
Ok, I agree that it might not be that easy to set up for a project that has been developed for a long time. But as you said, there is always new projects coming where we can use new things we learn :)
That would be a good learning experience, especially if you want to get a iOS job. Storing users’ data is a big code smell, and could greatly hurt your chances in an interview.
Hey, may i get a link to that book? 
This is interesting Kotlin, Swift and C# are being compared to each other. Even Rust has been compared. I would love for these to have have some common base just because of how much easier it is to learn one from the other. I mastered one language in a month because there was only about 2 dozen things were actually new to me.
Thanks for the informative reply. I do use MVC in my application and I'm trying to conform to the pattern as best I can. Though I probably didn't ask my question clearly, I was just wondering if there was another way instead of calling myTableView.reloadData() repeatedly; is it a good way to constantly update the cells in the table?
You might want to look into NSUndoManager for handling undo/redo. https://developer.apple.com/documentation/foundation/undomanager
I've never had a problem, I've done this for many years. You should have a backup of your iPhone and you should understand that if you do things like grab your contacts list and delete it, you're deleting live data. Generally things are very well "sand boxed" so there's not a lot of danger.
Other than interacting with APIs that have live data like contacts or anything like that you're pretty safe. Even if you went downt to old school and used `malloc` all over the place to create memory leaks, at very worst your phone just just reboot. Ultimately never just test in the simulator, you will find different bugs when running on device, and if you can, don't just test on your device. If you're serious about building and releasing an app, you'll need to beta test with different people who have different phones running different versions of iOS with different screen sizes and different amounts of memory and storage free. You'll encounter bugs you've never seen and didn't think existed, and then you can get to work learning how to fix them and becoming a better developer :)
I know!:) I will be learning swift for the next few weeks, and will probably start on this project in May. It doesn’t need to be better than Apollo, My intention is to make something that is convenient and easy to use for myself, and hope that people will like it :) 
Does this require owning multiple iOS devices, or simply releasing it and trying to find the bugs?
Move things into viewDidAppear.
Yeah I mean beta testing with testflight and using something like Crashlytics to find the bugs
You're pretty much safe. 
Pretty much worst case scenario is your phone will crash and reboot. Unless you’re deliberately trying to cause damage, it’s highly unlikely any mistake in coding will cause any issues.
If your looking for iOS development internships, it would be nice to have apps you have created on the App Store to show employers. That would basically be your “portfolio”
Let us know when you get it on the App Store. Good luck 👍
Insightful, thank you. 
it’s a stretch, but NYC 
Are you doing in-app purchases? If not, no problem.
It was meant to be. When you come to programming subs to ask for advice and help, a good practice is to give your actual use case or give more detail than you did. 1. No one's going to steal your idea. Even if someone did, it's all about execution because ideas are meaningless. Think about all the different ride sharing companies there are - same idea, different execution, different levels of success. 2. How can you expect help if we don't know exactly what you're trying to do? It's very possible to not give away your secret sauce/business model while providing more clarity. We don't know what you are trying to do. What are these events? Would an event be something like: "Steve is at Apple's Developer conference on 3/8/2018 at The Apple Campus in Cupertino, California"? or "Steve just uploaded an event from The Apple Campus in Cupertino, California on 3/8/2018"? or would an event be a photo/video with all the data you want to add to it? If an event is similar to the first two options then you could send the text of the label or textfield/textview that a user entered as a string to Firebase. There's plenty options, but without the details that you're holding on to so tightly - no one knows exactly what you're trying to do. 
Well then you could have just asked these questions. I was just asking for help from people who are ready to help, but your initial comment came across as very, I don't know how else to put it but "belittling". If your intent was to help, you could've just asked these questions. User A creates an event with a date, a time, an address and a category --&gt; All users who open the app see a table view with all events. ie "Category 1 Event @ Main Square on June 1st, 2018"
i'd say the biggest issue with that isn't inadvertently damaging your phone but that you only know how your app performs on one type of device.
You starting off the post saying you weren't going to give details came across belittling. If your intent was to get help, you could've left that out instead of assuming that someone here would steal your idea or something. If YOU want help, WE shouldn't have to waste our time typing questions to pick and prod your project in order to help you. If YOU want help, it's not OUR job to ask you extra questions to figure out how to help you. it's YOUR job to provide details, not ours to ask for them so that we can help. Anyway, you can just send those values to Firebase as simple strings. There's a ton of tutorials on doing that. Very simple. 
I’m eventually going to start work on one that does, surely Apple will fix this soon? It seems like such a pain!
Great example !!! Never used it this way. 
You could have said the same about node.js when people started shoving it into everything. Yet here we are.
10 years ago I was into Python and I was using Django to build websites. My friends were looking at me weird: why am I using this obscure language/framework when php is more established and more "standard"? Look who's now considered normal and standard. Anyway, after years of doing this, I really dislike using any dynamic language for any purpose what so ever. Python is nice for small one-shot scripts. But it's a mistake to use it for a serious project. Swift is about the most pleasant language (I know if) that can be used for general purpose applications. I think its performance is more than satisfactory (python is terribly slow). So yea definitely Swift is a great language for server side applications. However, if you're concerned about what other people in the industry will think, well, yea, I don't think it's in high demand _yet_. Not sure if it will be, but why should that matter? Use the best tool for the job, not the tool that other people think you should use.
Please dont get me wrong just a initial doubt that I have. And thanks for reply
Given he's doing this for free, maybe he wants to use this chance to learn how to make a game? Using an existing code base is not going to teach him how to do it himself. Flappy bird is not that complicated. It probably takes less effort to build it than to try to understand and customize an existing game.
TL;DR Swift is fast and awesome. Few people are using it now, but that will probably change the upcoming years.
I am working on a very similar app concept. https://itunes.apple.com/us/app/juke-joint/id1088625062?mt=8 Currently I am adding Spotify and Pandora as additional services. Their web API is fairly straightforward. I was able to get a PHP script together in a couple hours that authenticates with the service and gets an access token and refresh token. I am starting to work on integrating the rest of the API. I am using MySQL on my server...not sure what Firebase brings to the game. I am also adding voting feature to allow party guests to float songs to the top with non-renewable IAP of 'tokens'. 
Swift is pretty new, but I’m seeing some adoptions to its use in server side, take IBM for example. I think Swift will be like JavaScript, it will be everywhere and the demand may be quite high. The problem is that we don’t know when and if it will really happen, I wouldn’t invest time in server side Swift now, I would wait to see how the industry responds to it. For now it fits better in the Apple environment.
That’s it! It’s really well worth the money.
I really hope you are right! 🙏 haha
Not really an error, it'll just freeze up or crash, occasionally i'll get a SIGABRT
Any of the "influenced by" languages on [the Wikipedia page](https://en.wikipedia.org/wiki/Swift_\(programming_language\)).
Yes that is also what I am using Firebase for.
The only problem I'm having with installing testing versions of my app on my iphone is that the iPhone keeps showing me a prompt to sign-in with my Apple ID. The prompt appears once about every few hours and stops after few days when the app is removed from the iPhone. I had the same issue on my previous iPhone as well.
Forgive me if I've used the word "unrelated" improperly. Your recommendations are excellent. I don't know those languages, so none of them came to mind when I advised our young friend. But C++ is hard, and the mindset I have when writing C++ is very different from the mindset I have when writing Swift. It didn't occur to me that other professionals with experience in both languages would feel differently on the matter. I didn't mean to speak beyond my knowledge. I agree that learning one of those other languages would serve him at least as well, perhaps better than C++, for expanding his conceptual toolkit, and far better than learning another Swift-like language. I didn't mean to mislead anyone.
thanks, solved 1 issue but still having issues on iPad. I have 3 devices with the app open iPhone iPhone, and iPad. The tableview on the iPhones reflect the data on Firebase perfectly, the tableview on the iPad does not. I am hitting the breakpoint so therefore the method that pulls data down from firebase is being called but for some reason on iPad the tableview doesn't reflect the data...
Or not. Swift's characteristics (outside of Cocoa interface) fulfills roughly the same niche as C++. If you feel like C++ would be a great choice for your web app, maybe. There's a reason interpreted languages rule the web world. Then there's the whole static language trying to bind to a database problem. You can't write ActiveRecord in swift. It lacks the appropriate level of dynamism (which is why I won't likely ever choose it). Web apps are often built on a shoe string using angel money and speed of feature delivery is more important than being bullet proof. Maybe Swift could make a dent in enterprise Java. Maybe. Although I think Java has better dynamic features, can be compiled prior to deployment, and has way more support. (I avoid using Java too).
In your `catch` block, do `print("Failed", error)`. Swift has a built-in `error` variable that you can use when the code throws an exception. See what `error` has to say about it. As for that top line of code not showing up as code, I think you need to add another blank line above it. Not sure, but I think that's what has worked for me.
Your JSONSerialization call is failing. First, start by printing out the error in your catch block so you know *why* it's failing like `print("Failed error: ", error)` Without seeing what that error is you're just guessing to whats happening. You're casting as `jsonPlayers` what is this type? Also don't use `for i in 0...playerJSONArray.player.count-1` instead you can use `for player in playerJSOnArray` and then use the player variable
Depends on which tutorial you are following. The Server-Side Swift with Vapor tutorial that I just purchased has a lot of inconsistencies with Vapor 3 and the code in the instructions simply do not match what Vapor 3 creates. After wasting many hours on it just for the initial tutorial, it's a waste of 20 dollars. The material created by Vapor just doesn't match what's in the tutorial in any cases. And this is in the FIRST examples. This results in compile errors with no solutions for the new user. Considering that the documentation explicitly states that each exercise is based on the one before it, if you can't get one to compile or auto create the code that is in the tutorial, it's not worth it. Spend your time finding a another tutorial that works.
I'm **not** an expert in this. Can Swift change and get more featuers (or external libraries, frameworks) for this? *Could* that work? *Just curious, not trying to be rude*
I’m sorry to hear about your experience. I personally think Vapor 3 books should not have been released until Vapor 3 itself was released (it’s currently in the release candidate stage). The book authors have committed to continually revising the code during Vapor 3’s development, but there will always be a lag between code release and book update, and in those lags are where people like you have experiences you just described.
This was a good read, and really sharp debugging skills. Props to the author for spending the time to write this up.
Codable solves several problems with database interconnectivity. But Swift web frameworks have been reading from and writing to databases using ORM code since the beginning. Codable just makes it easier to set up.
It's probably a timing issue. To debug this issue a reload on your table view or try moving the calls into viewWillAppear. The symptoms here indicate that the call to Firebase is an async call and it's taking longer on your iPad. As another test, put this at the end of your viewDidLoad. Set a 1 second delay after (use GCD to make an async call on the main thread) to refresh your table view.
I originally had these in viewDidLoad and it was not being called at all (never hit break point). Ive tried putting it in viewWillApper and I just tried putting the reload tableview in DispatchQueue.main.async { }
One big tell has always been 3rd party support. Example: ObjC vs Swift in terms of iOS 3rd party tools. Look at all the stuff on GitHub for iOS... look at how much is ObjC vs Swift. IDK how much support is needed for a language on a server, probably doesn't compare to all the stuff you see for iOS or Web. When Swift went up against ObjC, it had a huge uphill climb and finally made a great product. Going up against what's already out there will be a bit different because they really don't have much reason to change. So ask yourself, why switch to Swift for a server when you have so much out there that already works.
Failed error: Error Domain=NSCocoaErrorDomain Code=3840 "Badly formed array around character 1151." UserInfo={NSDebugDescription=Badly formed array around character 1151.} jsonPlayers is a struct which should be holding an array of jsonPlayer, which is a struct of all the attributes for each player that corresponds to the JSON file data. struct jsonPlayers: Decodable { var player: [jsonPlayer] } struct jsonPlayer: Decodable { var role: String var ascii: String var currentI: Int var currentJ: Int var newI: Int var newJ: Int var hasBall: Int var active: Int }
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/iosprogramming] [Method is getting called, works on iPhone but not on iPad](https://www.reddit.com/r/iOSProgramming/comments/830kwz/method_is_getting_called_works_on_iphone_but_not/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Sounds like the data you're reading from that url isn't legit JSON. Print it out, see what you're up against.
This is good. Good detective work and a good write-up.
Your JSON is incorrect, google for a JSON validator to make sure its correct. Also that isn't how you decode json when using decodable/codeable protocol, you need to create an instance of `JSONDecoder` Have a look at this article https://www.hackingwithswift.com/read/12/4/fixing-project-10-codable
Yeah you were right, one go damn comma missing in my JSON. Weirdly passed the online validity checker. Oh well, thanks!
Yeah just figured it out, switched back to the JSON decoding code I'd used on a previous project, and then when looking at the JSON file noticed I'd missed out **1** comma in amongst it. Weirdly passed the online validator just fine when I put it in earlier. Oh well, all fixed, thanks for the help!
Get back to me when the documentation doesn't say "coming soon" everywhere. I still dislike compiled or static languages for rapid development. Its slower.
Only the one you mentioned. That said, most generic methods in Swift are constrained to protocols anyway, and a lot of the commonly used protocols specify initializers.
You certainly don’t have to like Swift on the server, but is there a specific framework you feel is unfinished, or are you speaking from prejudice alone?
The documentation for fluent is over 50% "coming soon". Hard to tell how it works from that. Typically with an ORM type thing there is (hopefully) a single source of record that drives the schema representations. I like ActiveRecord because the database is pretty much in charge. A good metric to check is "how many places do I have to touch to add a field"? Having looked at the docs, the answer so far is "I cannot tell".
Disable javascript then
Maybe, its this. https://docs.vapor.codes/3.0/fluent/query-builder/
Yes, that's Vapor 3 which is only just entering release candidate stage and (as you have noticed) hasn't had documentation written up yet. Perhaps Google directed you straight to Vapor 3; when you visit https://docs.vapor.codes it defaults to the current stable version of Vapor. Fluent in particular is documented here: https://docs.vapor.codes/2.0/fluent/package/
One wonders whether there's not a better way to do this... It might be more efficient for your zombies to simply ask all zombies what their attributes are when needed.
I get the feeling it's mine, which is strange given that it's fully updated for the release candidate.
I talked to Tanner almost two months before work even started on the book, and we agreed a release date that would be sensible – I even ended up shipping later than that date because of family commitments. While it's true there will always be a lag between development and documentation, as far as I know I've updated everything for the current version of Vapor 3; the latest book update was just one week ago.
Can you not use switches? I don't know what you need, but I my self like to use switches as "radiobuttons".
Hi! I'm one of the authors of [quicktype](https://app.quicktype.io?l=swift). Given a JSON Schema, or just a JSON sample, quicktype can generate immutable Swift models, but also Objective-C models, Rust, Java, JavaScript, etc. We also generate the Codable implementations so you can load the data. Plank does not generate the code to actual marshal your model to and from JSON. You can use our [web app](https://app.quicktype.io?l=swift), or install `quicktype` via npm, brew, or the App Store. Please let me know if you have any questions.
I might be wrong, but [this](https://stackoverflow.com/questions/24927714/file-transfer-between-ios-app-and-non-ios-device-over-bluetooth-3-0) (relatively old) StackOverflow post might clarify something.
Right, I could go with a polling model. Would you say that your alternative suggestion is partly because I'm misusing property observers? Or is it strictly that a polling model is likely to be better than a notification model for my purposes?
Of course, but I'm talking about what mechanism to use for detecting the changes in a zombie.
Not for $20 though? Sounds like an old Vapor 2 Udemy course
That’s what I was afraid of, I appreciate the reply. It was strangely difficult to get a concrete answer to this question by using Google. Hopefully this is on the roadmap for a future Swift version.
No, I'm pretty sure it's mine.
[This article](https://useyourloaf.com/blog/querying-url-schemes-with-canopenurl/) has more info.
Yea, I have been a macOS/iOS applications developer for over a decade, and while I've used Core Data, I don't prefer it. If you use something like SQLite or JSON, what you gain is compatibility with other ecosystems. You can read them from Android phones, on a Windows PC, etc. without needing to manage multiple schemas or data persistence layers.
Yep, you “consult” on writing their app under a 1099. 
Its just a short term job, usually. Usually 1099 income (so you pay your own taxes and health insurance).
Thanks for sharing these. Very interesting to read both sides of the debate in the DefaultConstructible discussion in that second link.
For general purpose yes, but with D you _can_ do things like disable the GC and user custom allocators, so you can for example use some kind of memory arena allocation strategy where allocations and freeing operations are very fast (much faster than typical malloc/free) but requires a but more due diligence. As far as I can tell these kinds of strategies are just not possible in swift. But like I said this is only for when you absolutely want to squeeze every last ounce of performance, which is not going to be the majority of the time.
im learning kitura and im half way in this book and i can say it has potential :) https://www.hackingwithswift.com/store/server-side-swift
How many properties? Property observers don’t seem like a bad idea. 
Please don't make assertions when you don't have enough information. It is entirely possible to write a database query and automatically map the result to a Swift struct. Several projects already exist to do this. Do a github search if you are in doubt. &gt; Swift's characteristics (outside of Cocoa interface) fulfills roughly the same niche as C++. &gt; If you feel like C++ would be a great choice for your web app, maybe. I'm not sure what you are trying to say here. C++'s main difficulty is requiring manual memory management. This is why most people don't use it for server side. Swift has this problem solved, and without a "garbage collector". Performance is increasingly important on the server side. Ruby and Python are much less appealing for server side programming than they were 10 years ago.
Zombies, Draculas, and Oprah total 15 properties. I might add a couple more, probably not many. The thing I'm wondering about is that there could be 50-ish or maybe even more zombies at any given time. This is my first experience with built-in property observers, so I don't know whether that's a lot, or maybe I'm abusing the intent of the tool.
Code might not be too pretty, but I wouldn’t think that’d cause much of an issue in terms of performance. But it’s pretty easy to try it out and see if you run into problems. 
Generally, no. Generally, you’ll sign a non-compete contract that says you won’t go to work for any of their clients. But if you’re upfront with them, and it’s in their interest to hire you for a while, they may not have any problem with you eventually taking a full-time job with one of their clients. 
I was more worried about being mocked by senior Swift developers ;-) I've been looking at the code for a while. I sort of like it. I'll do it, and report back if a black hole opens up.
I have plenty of information. Still wouldn't choose Swift because of development speed. 
Why do you have to encode it at all? It's a default value and it will get set every time you instantiate the object.
Uhm, that's relatively trivial because all internet "API"s can be called using plain old http requests. I _would_ choose Swift because of development speed.
Have you tried something like: ViewController().view.subviewB.background = ViewController().view.subviewA.background ?
Maybe https://itunes.apple.com/us/book/the-swift-programming-language/id1002622538?mt=11 
how long is the duration of time usually before you can work for one of the clients?
Yeah, looking at your post history of the last day or so - we have diametrically opposed views on what is "good" for effective software development. Static languages are fine for low level high performance code. Once your requirements get shifty (because the business of business is necessarily dynamic) - then you need an implementation environment that can keep up. FWIW, I found your complaint about dynamic languages and how you can't tell the type of a variable by looking at it ironic given that this is kind of my biggest complaint about Swift's "type inference" - where I often cannot tell the type of an expression but the typing system is so fine grained that things jump types a lot. Plus it is so festooned with decorations about implementation detail that you can hardly find the intent of the program. Awful language.
&gt; Static languages are fine for low level high performance code. Once your requirements get shifty (because the business of business is necessarily dynamic) - then you need an implementation environment that can keep up. ok, I would argue the only you can keep your sanity with a constantly shifting codebase is to have statically (at compile time) type checked objects.
I find the trick is to not care about the fields. Generally you should have a meta model somewhere that defines your overall data model. It might be your database schema. It might be something like the CoreData model. It might be a set of classes you've defined. It is important to have a meta model. It is even MORE important to have only ONE meta model and drive everything else off of that model. A good metamodel is iterable. You can iterate the entities, you can iterate over the attributes, and you can iterate over the meta attributes (whether a field is readonly, its type, etc...). If you have multiple meta models you experience DRY violations and you can have inconsistencies between two models that are suppose to agree and you get endless headaches. This was probably the source of your frustration. The ideal is to simply be able to add a field to a database table and everything else adapts to that without the need to change code. You work in broad strokes and ignore the lower level details because you can work a level higher with the meta model. ActiveRecord is great that way. Adaptive UI driven off the meta model isn't all that hard to do either. But this means you don't really write the program - you build a language to express the solution of your problem with as little elaboration as possible and then express the solution elegantly. My biggest complaint about 90% of the working programmers out there is they write at too low a level and thus they write about 10x more code than I do to accomplish the same thing. This is why Rails (as an example) rules. It isn't exactly Ruby - its using Ruby's malleability to create a custom programming environment that expresses the solution to writing database web apps succinctly. Rails uses the database schema (which usually predates the existence of the application) as the meta model. A good dynamic language will let you adapt the language to the task and create new constructs that make your solution easier to express. Languages that cannot be adapted or have things that cannot be iterated over, I have no time for those.
&gt; red = UiView().red Unless I'm missing something, this sounds like it will create a new instance of UiView .. which would obviously not work? Do you have reference outlets for the sliders into fields in your view controller?
can you show us the code?
You can create everything with a turing complete language like swift. i created a whole 2D game without any special libraries. (only AVKit/UIKit) but i would not recommend it. 
The dirty way would be a timer with a CGRectIntersection. But there are probably better ways! 
The dirty way would be a timer with a CGRectIntersection. But there are probably better ways! Let me know if you have one :)
I really liked that article!
Get a playground supporting device on the flight!
Given those two options it would be “computer software.” Definitely not IT. 
IBM today is a consulting company, not a product company. They simply don't have any leverage by which to influence the popularity of any technology. They work with every possible technology, because that's how large consulting companies operate. My neighborhood mechanic will gladly work on any kind of car. Just because you can bring them your Yugo, though, is not a sign that the Yugo is becoming any more popular.
 let rect1 = view1.frame let rect2 = view2.frame let yes = rect1.intersects(rect2)
What’s a 1099?
Look up CADisplayLink 
Will do. 
The problem with "IT" is that people think help desk and network support. Programming is VERY different from help desk. The important thing about LinkedIn is that you have connections and you list skills and over time your skills are confirmed. That's where you list all the specific iOS stuff.
[Protocols](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html) are what you're looking for. You create a protocol, have your ViewController conform to the protocol, and create a delegate property on the UIView which you set to be your ViewController. Then when the colors are changed on the UIView, you call a function on the delegate(ViewController) to inform it of the change.
There's a bunch of different ways you could do it. Personally, I would create a recursive function that takes in an array of views and a completion block. Within that function, pop off a view from the array, call animateWithDuration:animations:completion on that view and within the completion block, you would call the recursive function again but without the view you just popped from the array and passing the original completion block to it. func animateViews(views: [UIView], completionHandler: (() -&gt; Void)? ) { var tempViews = views if let lastView = tempViews.popLast() { UIView.animate(withDuration: 0.5, animations: { // logic to determine animations }, completion: { (finished) in self.animateViews(views: tempViews, completionHandler: completionHandler) }) } } Then you can call the function and pass in a completion block to know when it's done. You could use that completion block to perform another set of animations after the first set completes. animateViews(views: views, completion: { // animating views finished, can call second set // of animations from here }) Code is untested, but should be able get you started.
No, that’s fine with app performance i guess. You can also adjust your interval times to the framerate of the screen. 
I really love Swift as a language, but I'm not sure that Swift's ARC is all that suited to the server-side except in niche situations. Go/Java/C# style garbage collection really is just fine on the server if you want good performance without having to think about cycles. Unless I'm misunderstanding something, can anyone explain to me how memory leaks won't be a problem? Won't just one small memory leak build up as requests come in and crash your production server while you sleep?
Is the flashing occurring exactly where your finger is dragging the tableview? 
Yup more or less. It happens (as you can see in the vid) even in other apps, though I've changed the highlight colour so it's more obvious in mine. It doesnt happen when scrolling with the same 'finger technique' with many cells. Another way to reproduce is at the very top or very bottom of a tableview dragging down or up respectively.
Yes it is, but this doesnt occur when scrolling in the centre of tableview's. It seems to affect all UITableViews, also my didSelectRow is not called.
My best guess would be that it's just the cell being briefly selected when your thumb is positioned on the screen to scroll. Maybe this tableview/cell is set up differently than the other tableview/cell your are using. Maybe you could try turning off your cell selection style in the attribute inspector if you haven't tried that yet? Putting this code in your tableview set up would work as well: cell.selectionStyle = .none
A common year starting on a Saturday.
Tax form for contract hire rather than full time employee (they get a W2)
in America....
where does it happen in the system?
Are you turning off `delaysContentTouches`?
Why do you want this information?
Anything I want. Can it be done?
The point is, if you explain your purpose, maybe someone will be able to tell you a better way of doing it than checking frame intersection. http://xyproblem.info/
If two objects collide, I want to end the program. I know how to check for an intersection, but I’m asking how to constantly check for an intersection, as soon as two things touch, end the program. 
You're right, and prior to last week I would've thought that swift server was doomed since apple didn't seem to give a single f- about it, but recently they released [NIO](https://github.com/apple/swift-nio) and now I have hopes.
No, but good idea. 
Open your messages app. Scroll to the very bottom. Now keep swiping up (you should rubber band off the bottom). Notice you see the same issue I have. 
It seems like what matters is if you are on either end of the list. I can reproduce it on the top and bottom of a long list, but not somewhere in the middle.
If you try printing a Playground as a .pdf from Xcode (even the most recent beta), you are correct, the rendered markup does not show up, only the raw code. But curiously... if you save the Playground and open it in Swift Playgrounds on an iPad and then save as .pdf, the rendered markup is preserved. Now go get an iPad :)
I'll try that tomorrow, thanks.
Eh, Node isn't growing anymore. A lot of people have moved on to better things. This can be easily seen in the number of `npm` package downloads: https://npm-stat.com/charts.html?package=npm&amp;from=2012-01-01&amp;to=2018-03-08
&gt; Swift's characteristics (outside of Cocoa interface) fulfills roughly the same niche as C++. Really? Are you comparing Swift to C++? And what about Go? Is Go also fulfilling the same niche as C++? /s
As I understand it (never used it) go is an evolution of C
Haha we've all been there. I appreciate your honesty, though :)
So adding a scrollview, then embedding Vertical Stackview for every UI element?
Like this https://stackoverflow.com/questions/31668970/is-it-possible-for-uistackview-to-scroll/35136217
Pretty much everything is an evolution of C.
My guess is that UIScrollView has an internal content offset speed threshold that alters hit passthrough on the touch recognizers. It's normal behavior and I wouldn't worry about it.
Thank you so much for the resource! I can't get it to work but I'll spend some time in debugging to understand where I am going wrong. Thank you so much! :D
Both Swift and Kotlin are amazing languages and have made big strides in developing for their respective platforms. Great to see them do well and expand to other platforms
I believe you will be happy doing this with UITableView UIScrollView gonna be too much confuse to in upkeep and changing.
That’s what I have it as but I see a lot of professional iOS developers have their profile under IT 
Maybe they come from the world of IT? Don't know. But iOS development certainly doesn't fall under "IT" in any traditional sense.
This is great, thanks! I'm going to try this approach, completion blocks and recursion still confuse me but I'll give it a go!
Exactly!! That’s what I see. Do you confirm the same?
Yeah thanks til 
sadly yes, apple is doomed.... :)
I think you’re right. Meticulous attention to detail is a curse. 
I'm hearing that Swift, Kotlin and C# and even Rust are starting to look similar. This is an awesome move. Even if they aren't exactly the same, it would be great to finally have some common elements between popular language. I've always hated that DOS and Unix command lines would have different commands for the same thing. There's no benefit to having all the languages being so different from each other, esp common usage languages like Swift and C#.
It's not valid JSON. Paste it into this [**validator**](https://jsonlint.com/) and you'll see the problem, I think and hope.
This person knows what’s up. 
One trick with scroll views is that the dimension of the scrollView that you want to scroll (height or width) needs to be larger than the view that it is contained within. Here is an image that may help. https://imgur.com/a/KTjXo
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/rfXlGQa.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
As the other commenter said, generally no. Not only will you have a non-compete for your parent company, but the fortune 500 will likely have some kind of 'non poaching clause' in place, meaning they cant pull the employees they'd like off the consultancy and leave the rest. Or, as you saw, you can review your contract and see if you can get around that barrier by quitting your consultancy and waiting it out. Its good to review your contract with a lawyer if this is your goal. That said, I work for a large company with a good pool of consultancy workers employed by us, and there have been rare times where our company does want someone, they negotiate (i'm guessing aka "pay a large sum"), and we do take a contractor and make them an employee--but its rare. At my company, typically only ever fantastic senior developers. 
Swift 2 move to Swift 3 was a major pain for us. The move to 4 was much nicer.
What you’re talking about is called the architecture of an app. As with most things programming, there’s a lot of them. Apple uses MVC (Model-View-Controller) and you should too, at least in the beginning. MVC in a nutshell: - a model is anything you use to feed data to and from your UI, e.g. classes, structs, databases, online APIs... - a view is any component displayed directly to the user, i.e. UI - a controller mediates between the two Models should be “dumb” and have zero knowledge of what kind of UI they will be used with. Views should be kind of “dumb” — they should be able to manage themselves, their size, and delegate any actual model or controller like responsibilities to some other object. Controllers then fetch data from your model and display it in your views. This is probably not totally accurate, and you should definitely check out [Apple’s docs](https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html), and Stanford’s CS193P videos. And try making something a bit simpler until you “get it”. 
Hopefully going forward the upgrades should be much easier!
You could save yourself a lot of trouble by not bothering with swift, renaming your .cc files to .mm - there. They are now Objective-C++ files where you can intermix C++ and Objective-C. 
What did you find from stepping through the code with the debugger?
I skipped Swift 3 waited for Swift 4. The work I did in Swift 1 and 2 really didn't matter much anyways, so I went from Swift 2 back to ObjC then to Swift 4. I hope the language is pretty settled by now.
I’m saying I have the text field in the UI for the user to input a number, but don’t know how to get that input to a class member variable. Sorry for the confusion 
What you said is true, but IBM can influence the market in more subtle ways. For example, [their FaaS platform](https://console.bluemix.net/openwhisk/) supports Swift, and it is based on the open-source Apache OpenWhisk project. Having large OSS projects support Swift is a win, and increases the availability of server-side Swift. Their Kitura framework is one of the most popular server-side Swift frameworks. Their engineers have contributed work on swift-corelibs-foundation and GCD. At the end of the day, IBM is paying people to write Swift and support Swift in services like Bluemix. That's a win for Swift, no matter what.
Meh, universality also requires universal backwards compatibility. If there's one dominant option then that option will persist for decades (see C, C++, bash, posix, etc) long past the time when it was genuinely the best option. I'd rather have less cross platform compatibility rather than getting locked into old technologies. 
Ok, so you need to look into building a UI on top of your app. There's some learning involved. Look around for tutorials on building an iOS or a MacOS app, there are tons out there; most of them demonstrate how to create the whole app, including the UI. Best of luck with it. 
tl;dr there are downsides to ARC, but there are downsides to the other common approaches too. Memory management could be an issue, but not necessarily any more than (and potentially less than) other languages. As an example, a Ruby app I helped out with a few years ago had some pretty serious performance problems because the GC kept kicking in during JSON serialization. In the end the only viable solution was to completely restructure our MongoDB (ugh...) records to keep the serialization from causing the collector to pause the world. I've also seen JavaScript projects where they implemented retain/release (never mind ARC!) to get deterministic object lifetimes. [Chris Lattner's manifesto](https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782) on Swift's potential future concurrency model highlights Actors as one (likely?) approach. Actors offer the potential of eliminating classes of leaks altogether; if an Actor has no shared mutable state, you can throw away the whole zone of memory once it is done. This same approach could also solve the issue of one stray `!` bringing down the whole server process – basically, if you get a failure or a leak inside an Actor, you can just tear the Actor itself down and leave everything else alone, since there's no shared mutable state.
Yes, it can and it does. You *can* write an ORM in Swift – there are already several out there ([Fluent](https://docs.vapor.codes/2.0/fluent/getting-started/) &amp; [Kuery](https://github.com/IBM-Swift/Swift-Kuery-ORM) are 2 examples). Is it gonna work exactly the same as ActiveRecord? Probably not, but it could in the future when Swift gets more dynamic features, and at the end of the day there's no reason it has to work like any one existing ORM...
//Location Manager var userLocation = CLLocation() func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) { userLocation = locations.last! let camera = GMSCameraPosition.camera(withLatitude: userLocation.coordinate.latitude, longitude: userLocation.coordinate.longitude, zoom: 14); self.googleMapsView.camera = camera //Finally stop updating location otherwise it will come again and again in this delegate self.locationManager.stopUpdatingLocation() } //Button Marker Function @IBAction func markCurrentLocation(_ sender: UIButton) { let center = CLLocationCoordinate2D(latitude: userLocation.coordinate.latitude, longitude: userLocation.coordinate.longitude) let camera = GMSCameraPosition.camera(withLatitude: userLocation.coordinate.latitude, longitude: userLocation.coordinate.longitude, zoom: 14); self.googleMapsView.camera = camera self.googleMapsView.isMyLocationEnabled = true let marker = GMSMarker(position: center) print("Latitude :- \(userLocation.coordinate.latitude)") print("Longitude :-\(userLocation.coordinate.longitude)") marker.map = self.googleMapsView marker.title = "Current Location" googleMapsView.animate(to: camera) //Finally stop updating location otherwise it will come again and again in this delegate self.locationManager.stopUpdatingLocation() }
Thanks. A huge part of the problem was not knowing what questions to ask and where. A couple of beatings from StackOverflow, cryptic answers and impatience from the CoreStore guys, and total silence on a couple of questions I posted here, it was all just too discouraging. I went ahead and started writing my own. Which is better for you, actually. If I had met you two weeks ago and heard you talk about Core Data like that, I would have kept trying, and you'd have never gotten a moment's peace from me asking questions. Cheers
I will be messaging you on [**2018-03-12 05:42:16 UTC**](http://www.wolframalpha.com/input/?i=2018-03-12 05:42:16 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/swift/comments/83bp1n/coming_from_c_trying_to_translate_my_code_to_a/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/swift/comments/83bp1n/coming_from_c_trying_to_translate_my_code_to_a/]%0A%0ARemindMe! 2 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Giving this a go right now^ Thank you for taking the time to reply! :D
&gt; Still crashing every second run. That sounds like a simple alignment issue... &gt; All collection types are affected, when storing types with alignments greater than 16 bytes. ...yup.
C# is miles beyond swift, and has long since left Java in the dust, in my honest opinion. It’s been continually updated and made open source for many years longer than Swift, although Swift can still catch up given some time. Switching from writing C# in vscode or visual studio to XCode is still painful. The intellisense in XCode still takes way too much time to load, is completely out of context, and if you’re lucky, doesn’t crash the entire IDE. As great as the guard statement is, it still feels like curly braces are too frequent (lest we not forget swift 1) and it’s a little too JavaScript-y. Swift has a long road ahead of it before it can hold up to a language like C#, which isn’t a bad thing, I hope it gets there.
No just checked
I haven't done C# in years, I'm just glad the syntax at least looks similar. IMO, it's a huge waste to have so many different languages. I'd rather they all use C#, but that's just me.
With a short list this is everywhere. Which is my problem!
That last part is no big deal. I did one years ago where each data screen had defaults, the user could edit the defaults. It was part of a scrolling data entry screen that handled everything with arrays. Before you dig too deep, I'd figure out the source of the defaults and do you need unique defaults per users or per user and per round or event... IIRC, I ended up with 2 stage defaults, the ones I set at the start and the ones that the user can set that override the system defaults. It was a polling app that had a lot of data entry. You can post the code and ask others to translate it, unless you need to protect the code. I'd probably just learn Swift and start a new project using the game logic. Does is use any game engine?
Good idea!
I tried this idea. I cleared the array and reloaded the tableview and then set a delay on the firebase method. After the time expired the tableview loaded the data and still the iPhone shows different data than iPhone. 
Learn the data structures and the frameworks you will need. There isn't a "translate what I wrote to this new thing" step. It's more involved than that. You didn't even mention what platform the working game was written in. One of the things you are looking for are called outlets that connect to the UI elements. You will need to make properties that will be connected to the UI element in the storyboard. Read up on that. And stop thinking in C++ terms. Find out what the proper Swift equivalents are and use them. That's very important if you plan to move forward.
Trying this out right now, I will let you know how it goes through!
Hope so too, they did say the next one is going to be backwards compatible. In Swift 4 you can already mix targets written in both 4 and 3.2 so it's no longer a all or nothing choice. 
Yeah my goal is to take the logic for the code and the game and translate that to swift, but use swift to code the UI and everything else as a way to learn swift and build a basic app. I will look into the elements and see how those work, I will probably check out basic YouTube tutorials too. 
Ok thank you :) I will check those out
No it’s just going to be a simple printing to the phone screen. I will have to learn a lot of swift to do it, but that’s the goal. 
I actually can't get the first view embed version to work. Is it possible for you to upload the Xcode the project so I can have a better understanding of where I am going wrong?
Most of the things you complain about have nothing to do with the language and all with the IDE. I fail to see what’s JavaScripty in Swift. Type inference is as far away from dynamic typing as it can be.
Thank you so much for your responses, u/flo850 , u/MinimumSalamander, u/aazav , u/dede_exe ! I really appreciate you taking the time to helping me out! After spending a good amount of time researching about this and actually implementing the solution, I found the scrollview/uiview method to be much easier to implement than going the table view route, though I recon it would be really helpful to use table view when the height of the content is unknown. Again, thank you so much for taking out the time to help out! 
Given all the fuck ups npm has had lately, I'd say people are trying to move to alternatives.
Swift has native implementation of nearly everything I want a language to do. The last milestone is concurrency.
This is the same code I have above?
GCD is a framework, not a language feature.
You should use `UIActivityViewController` – [I wrote some example code here](https://www.hackingwithswift.com/example-code/uikit/how-to-share-content-with-uiactivityviewcontroller). As you want to share a URL, just send it a `URL` instance containing wherever the link is.
In your Xcode project: `File &gt; New &gt; Target`. Look for the `Action Extension` and the `Share Extension`. This should start you off.
Second this. Kotlin has been around longer than Swift. That in itself is not a guarantee of maturity but is an indication it has had some time to build a community around itself and get battle-tested. I sincerely hope Kotlin continues to get adopted more widely. You might run into issues finding tutorials in Kotlin but that will improve over time. Learning Kotlin I'd say is a great investment into your developer future. 
The fragmentation of platforms and languages over the last decade is a huge pain in the ass. It was bad enough when iOS and Android decided C++ wasn’t good enough for them, but at least they are tied to a platform difference that requires new code anyway. But I’m not really sure what’s driven the explosion of new languages in recent years, and I’m really skeptical that what they offer is worth the trouble.
Sure there are! Actually, just trying to do that made me back up and learn how to code UI from pure swift code, so it's already a sideways profit :D
I struggled A LOT with scroll views, specially when making UI from code. One thing that I learned and it's essential to make Autolayout + ScrollView work (basically make the scrollview resize automatically based on the content being presented) is that the container view you're using to present the scrolling content should have a **full set of linked constraints** from one border to another in the scrolling axis, so that the view can calculate its own content size *automagically*.
They’re not against the law if they’re not legally binding. They just aren’t enforceable. Large companies sign them with the agencies they hire, and they honor them. So whether it’s legally binding or not is irrelevant. At least as it pertains to the OP’s question.
My experience using Xcode 3 with objective c was much smoother than using it with Swift today. 
Xcode 3 is 10 years old. Safe to say that 80% of that feeling is nostalgia. 
I reformatted the code so that others can read it. It's very hard to read code when it's not formatted. You can cut and paste what I did into yours. The way you format the code is with spaces.
I'm the developer of [LinguaBrowse](https://itunes.apple.com/us/app/linguabrowse/id1281350165?ls=1&amp;mt=8), an iOS app made in Swift, for browsing foreign-language websites. It aids users by providing a phonetic transcriptions for words and a 'tap-to-define' feature, meaning that they don't have to switch out to other apps to get dictionary definitions. It's my first and only app, and is about one year old now! This app performs large-scale manipulation of the webpage DOM, via JavaScript, based on tokenisation performed in the native layer (using CFStringTokenizer, NSLinguisticTagger, and – for Japanese and Korean – a C++-based tokeniser, MeCab), so it's a good example of a high-performance app demonstrating rapid JS &lt;-&gt; Swift communication. I'd be happy to talk about any part of it, and if there is particular interest on any certain part, may be able respond with a dedicated blog post.
&gt; For example, their FaaS platform supports Swift, and it is based on the open-source Apache OpenWhisk project. Yes, this is an example of the company's service nature. They're trying to get in on the ground floor, because new successful languages don't often appear. It's a cheap bet for IBM to place, and if it turns out to be popular on the server, they'll be in a good position to sell services and consulting around it. They're not investing nearly heavily enough to *cause* it to become popular there, though. &gt; At the end of the day, IBM is paying people to write Swift and support Swift in services like Bluemix. That's a win for Swift, no matter what. Technically, sure, and it's also a "win" for Swift when I contribute a 2-line bug fix to some Swift package I found on GitHub, but both have negligible (or "subtle", as you call it) impact on its uptake as a language.
Ok thank you
I would say that IBM's work on Foundation has had a significant impact on the viability of running Swift on Linux
[Start here](https://www.hackingwithswift.com/read/1/overview). Too easy? Skip ahead a few chapters. Stop once you have an original idea and are comfortable starting your own app!
What kind of feature are you looking for?
Is there a record of what the changes were between Swift 1 -&gt; Swift 2 and Swift 2 -&gt; Swift 3? Just general curiosity; I wasn't into Swift when it was still in version 1 and 2.
second this. Hacking with swift is one of the best materials avsilible for people learning the language. 
I agree, I'm learning Javascript first. I want to learn how to make websites and etc. Then I'll move on to apps. 
Interesting distinction. I wonder if there is cause for it to be illegal, I mean, the companies are now limiting the individual's ability to gain employment, that seems like it could be considered an infringement of rights over something that's not legally binding.
There's whole bunch of documentation on it because it's open source. All I remember is that if you moved over during 1 or 2 it was a major deal. You'd think if you're making a new language, you'd keep in mind the businesses depend on it working. When you break people code, it can really screw things up for them. There was a lot of concern about stability as well. I think it was Uber that did a long write up about switching over to Swift. It was a real toss up at the time and I think the would have been much better off if they had simply waited. I'm actually a bit surprised that Apple pulled it off. Clearly a lot of new people didn't want to learn ObjC and Apple knew it. IMO, the main reason Apple was able to pull it off was because of all the new devs coming to iOS.
I second what's already been said (Hacking With Swift is great for beginners, and continues to be a great resource once you no longer consider yourself a "beginner"). Just to offer my two cents, but my go-to project when I'm learning a new language is always Hangman. The rules are simple and almost universally understood, so you can just dive right in and start coding without losing momentum trying to reinvent the wheel with a brand new game or project. For Swift you have multiple ways you can choose to allow the user to pick a letter (26 buttons, one for each letter? A letter picker wheel? A textfield where they just type it in?). You can have the words pulled from a static text file, from an online API, or have one player enter a word and the other guess. For the hangman itself you can use Spritekit and load new images with each wrong guess, use simple stick-figures drawn with ASCII text, 3D with SceneKit, whatever you like. Most importantly though Hangman gives you an opportunity to use almost every Swift (or whatever) language element you've learned. I think it's a great all-around project because it can be as simple or as complex as you like, and you get to just jump in and start coding with minimal pre-planning.
Highly recommend CS193P by Paul Hegarty. The course contains projects to be completed
You could actually correct your error, you know.
I'd guess something like the actor model like erlang, go, scala(? not sure if native) not that that is the only model but have seen it discussed in the context of swift before 
As you’ve probably already read, check out Kotlin. I’ve heard from friends that Kotlin is the ”to-go” language for android development.
I am working on a library that reads and writes M4A file metadata https://github.com/ahyattdev/M4ATools
Still converting Objc project to Swift. I think it will take 3-4 month. And the other hand I'm creating an app from scratch.
One month’s time is correct grammar.
Do you guys have a Discord for Swift-talk only? Or is there already an existing one?
Here's a sneak peek of /r/hackingwithswift using the [top posts](https://np.reddit.com/r/hackingwithswift/top/?sort=top&amp;t=all) of all time! \#1: [All projects are now updated for Swift 2](https://np.reddit.com/r/hackingwithswift/comments/3lqn7n/all_projects_are_now_updated_for_swift_2/) \#2: [All Hacking with Swift books now come with free updates for the life of the book](https://www.hackingwithswift.com/update-policy) | [0 comments](https://np.reddit.com/r/hackingwithswift/comments/5xzsmp/all_hacking_with_swift_books_now_come_with_free/) \#3: [Ask questions and get them answered](https://np.reddit.com/r/hackingwithswift/comments/3b66mt/ask_questions_and_get_them_answered/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Will do. However, you should definitely look into starting a Discord Server, it's a great platform to use since there's a lot of things you can do with Discord. Maybe a hybrid with HackingWithSwift &amp; General Swift help/discussion channels?
One thing you might try is going from C++ to ObjC to Swift. ObjC will compile and run C++ and Swift will run side by side with ObjC. I'm guessing this would be the same as Swift and C++ running in the same app. So you could get the code into the Swift app, then convert over to Swift. Just throwing out ideas.
A fair point. I’ve been programming in C++ since the 90s. It was a decent upgrade from C. But in recent years it’s become a screaming dumpster fire of “me too!” bolted on features. At least the newer languages aren’t suffering from that.
Speaking of "me too!" features, I'm of the opinion that Swift is doing that. The base language has change quite a bit. Some are contradictions, like the "inout" being a more verbose, easier to read, then the _ being opposite of verbose and easy to read. IDK, there's a balance, I've never been a fan of named param and things that can lead to over engineering a language. I mainly want the language to just work. I focus on the features of the product that I'm working on, not the language that the customer NEVER SEES. I've always thought that was strange thing that so many focus on something that the customer never sees.
I wouldn't update UI with an NSTimer, in particular when accuracy is needed such as the case of a stopwatch. Updating UI in intervals should be done with a CADisplayLink as it syncs to the refresh rate of the display (thus handling the discrepancy of draws and timer fires) and isn't blocked by arbitrary execution in it's run loop. Also NSTimer isn't thread safe. It should be invalidated on the same thread on which the timer was installed. UI should of course always be updated on the main thread. Instead of adding more state to the ViewController with a flag you could check the valid property on the NSTimer to determine if it's running or not. Similarly CADisplayLink has the equivalent (albeit inversed) isPaused property.
I was being sarcastic 
I have been working on one of the client projects. It’s interesting because first time building app without IB. Love the reliability. It’s an universal app and it’s super fun working on UI.... 
Thanks for recommending my site! Your advice is spot on :)
Honestly, it's my fault – I run the site, and I'm terrible at marketing. 
Brazil is sunk on corruption and violence, being on the Top 15 of the most violent countries in the world. For that reason, I have moved from there 20 years ago and now I have recently written a book, in Portuguese, called [`De Saco Cheio do Brasil`] (http://sacocheio.com/sacoCheioLivro-iBooks) - ("Fed with Brazil") where I explain how brazilians can emigrate to Portugal legally. The book talks about the legal steps you have to follow in order to get a visa and get rid of Brazil forever. I have converted this book into video lessons and I am now finishing the iOS, macOS and TV version of that book. 😃
Thanks for the suggestion. I utilize Udemy for other videos, but appreciate narrowing down a good instructor. I’ll check out her videos!
A commandment? It's a language feature so obviously the language creators wanted it to be used. Who is laying down these commandments?
Everyone needs access to Brain, but they get it only through Face. You instantiate a Face to talk to Brain. When you return and the Face goes out of scope, its destructor can package up everything you did into a transaction that I can use for undo/redo, plus generate notifications for everyone observing Brain. I am probably just still thinking in C++.
It does sound like you're overcomplicating things. Perhaps you should explain your architecture in more detail and someone might have a way that works better in Swift. So Brain can generate notifications, but other than that no one will be able to access its internals other than Face?
Face is the interface to Brain. I should have just said that, sorry. But the only reason I have the Face class is because I can use its destructor in some really powerful ways. I make all of Brain private, so anyone reading the code gets it loud and clear that you don't write directly to Brain. Instead, you instantiate a Face, which talks to Brain for you. Face tracks everything you say, and its destructor packages all of it for undo/redo. And the destructor also notifies any observers. It's just a trick I picked up years ago for making undo/redo super easy to manage. And I can do it in Swift, no problem. But I was stuck on giving Face access to Brain's internals. You mentioned the language designers. That helped me a lot. I still had the image of Bjarne Stroustrup in my mind. But now it makes sense: they created `fileprivate` for exactly what I'm doing.
I assume both or one of you is an administrator, which means you'll be able to merge a PR regardless if its even been reviewed.
App Development with Swift
You could achieve that using protocols. Create a protocol named Brainable or something that has all the properties you want a brain to have. Then make your brain class conform to that Brainable protocol. 
Well, it was kind of inevitable when you think about what Apple are (probably) doing over the longer term. In my opinion, over the last few years, Apple has been slowly migrating us to a modern framework. (Marzipan.) It doesn’t take long to see that, although great in its day, obj-c and cocoa are looking a little long in the tooth. Lack of type-safety; the archaic syntax for blocks just to make a closure; the mix of c and obj-c in some frameworks, NotificationCenter, etc. It needed complete modernisation. It couldn’t do it all in one go though, that would be far too jarring. Stage 1 - The Compiler: First it had to have a compiler infrastructure (LLVM) that could take all these disparate languages (c, c++, obj-c, obj-c++) and allow for the addition of new language features. It could then add new features to the existing languages (blocks, etc.) to pave the the way for the migration to a new language. Stage 2 - The Language: With LLVM in place Apple could begin the work of introducing a new language (Swift) rich with modern features, usable at high/low level, but that could also interoperate with the old language (obj-c) naturally in order to facilitate the use of legacy frameworks. This isn’t perfect (see OP) but is pretty impressive. Stage 3 - The Framework: With the language in place I think now is the time that we’ll see the introduction of a modern application framework that replaces Cocoa. What this looks like, I don’t know, but from the rumored ‘Marzipan,’ we know it will likely be the same framework across desktop and mobile and will more than likely be designed to be a perfect counterpart to swift. With that in mind, The odd obj-c specifier during the transition is pretty impressive! I think Apple have had this planned out over a long time. In some ways it’s more impressive to me than the transition from PowerPC to x86. 
yes this is basically what protect branch means: it will require a pull request to be approved before it can be merged, and you can optionally say that the reviewer should be one of the owners (as opposed to a contributor which might be added later)
I am writing something that also accesses the dictionary API by tapping on the word. but yours is more sophisticated. 
Don't let him commit to your repo. Require him to have his own fork and issue pull requests from there. This way nothing can get into master unless you allow it.
you can box "values" in an enum to put them in a collection. like: enum TypedParameter { case integer(Parameter&lt;Int&gt;) case double(Parameter&lt;Double&gt; }
Really don't agree with this. Smells like wishful thinking. Neither does [DaringFireball](https://daringfireball.net/2017/12/marzipan) who I think has a much more realistic take on it. iOS apps on Mac are going to be the return of DeskAccessories to the Mac (remember those from MacOS 9 and earlier?). The average iOS program is a tiny one trick pony - which is fine for what it is. But there is no way that paradigm will lead to good desktop apps. For instance, the UXKit poster child Photos is shit compared to the iPhoto app it replaced. Actually, its shit compared to most any Mac app. You can't even drag photos out of it to safari. 
 Swift doesn't support creating an array of protocols that have an associated type, so you'd have to create a new protocol and make everything you want conform to that protocol, then create a class with no generic constraints and just hold an array of that instead. protocol AnyComparable {} extension Int: AnyComparable {} extension Double: AnyComparable {} class Parameter&lt;T: Comparable&gt; where T: AnyComparable { var name: String var minimum: T var value: T var maximum: T init(name: String, minimum: T, value: T, maximum: T) { self.name = name self.minimum = minimum self.value = value self.maximum = maximum } var toAny: AnyParameter { return AnyParameter(name: name, minimum: minimum, value: value, maximum: maximum) } } class AnyParameter { var name: String var minimum: AnyComparable var value: AnyComparable var maximum: AnyComparable init(name: String, minimum: AnyComparable, value: AnyComparable, maximum: AnyComparable) { self.name = name self.minimum = minimum self.value = value self.maximum = maximum } } class Harmony { let steps: Parameter&lt;Int&gt; = Parameter(name: "Harmony Steps", minimum: 0, value: 5, maximum: 12) let age: Parameter&lt;Double&gt; = Parameter(name: "Harmony Age", minimum: 0.0, value: 5.4, maximum: 11.4) var parameters: [AnyParameter] { return [steps.toAny, age.toAny] } }
Thank you so much for this tutorial! I just followed it through and got some idea about using extensions. Will be reading more about it and looking up more tutorials to get the functionality I am looking in for :D
yes, I also provide webview, pdf and epub. I am trying to integrate altogether for students to learn english words and provide save feature for reading/studying again afterwards. I also provide a button to activate a text field to type and check the word immediately. but I use `UILongPressGestureRecognizer` instead of tap to avoid conflict. so, a tap on the word it doesn't pop the dictionary like yours. I need the users to press on the word a while(less than 0.5sec) to activate the word. as my app mainly for students to learn English. therefore, I don't have to use the features of CFStringTokenizer, NSLinguisticTagger, etc. I also think the dictionary's API is under-used and not easy to access.
I see! If you're just working with English, then you won't need to worry too much about non-dictionary form words either: The Oxford English dictionaries can cope with non-dictionary form words, as they have a built-in lemmatiser! Not all the system dictionaries offer this luxury. How do you identify where a word starts and stops? Does the user have to highlight the word themselves, or did you find a way to offer immediate tap-to-define? I'm very interested in how you'll implement tap-to-define on PDFs. Again, is it just down to the user to highlight the word themselves?
yes, you are right. when the users tap on it for a while the webview will select the word. if the press are short enough, the gesture I set will be activated and I can use a bit javascript to find the word and call the dictionary's API. Yours are far difficult than mine.
I have to say, I'd love to see a Swift Discord!! As long as there's a memes channel, though...
CuteBaby can helps you https://itunes.apple.com/us/app/cutebaby-json-model-generator-for-swift/id1262352477?l=zh&amp;ls=1&amp;mt=12
[Ray Wenderlich](https://www.raywenderlich.com/) got plenty of tutorials, from the very beginning (like building and running simple apps) to more advanced concepts (Design Patterns, Metal framework, etc). I still revisit some tutorials just to get some insight in writing better code.
&gt; Also, I think there is this assumption that a unified framework means a unified user experience. Right, it doesn't. But the parts that are user-experience-agnostic are already mostly unified (Foundation), and the other parts that remain in need of unification (like {NS,UI}BezierPath and {NS,UI}Color) have nothing to do with `@objc`. &gt; What will that mean? It will mean no difference between a UIView and an NSView. Hmm, possibly. I'm not convinced. These are still at the user-experience level, and there are some fundamental differences in how they're implemented and used. Even if it's true, what does this have to do with `@objc`, or the compiler? Why would they wait? &gt; What it boils down to is that, as a developer, all the effort I've invested into learning one paradigm is now directly transferrable to the other. It will turn the 100s of thousands of iOS developers into Mac developers over night. Building a Mac app shouldn't be much more difficult than porting my phone app to the iPad. 95% of it is already directly transferable. The parts that aren't are either trivial (like UIColor/NSColor API differences), or they're different because the user experience is fundamentally different (like how dragging works). The issues that are holding back 100,000 iOS developers from being Mac developers are not NSView/UIView. Nobody can become a developer for a different platform "over night", and it's usually not the APIs that are the limiting factor. Electron lets anyone write a single app for every major platform, but it won't help you learn all the different UI conventions, so such apps tend to feel foreign almost everywhere. &gt; Importantly for Apple and the future of the Mac, it will make the decision to support the Mac as an additional platform significantly more attractive due to the fact that 95% of the code written for the mobile paradigm can be directly reused. In their iWork WWDC talk, they said they share over 75% between iOS and OS X, and it's that way (and not 100%) intentionally -- because they want to "target and embrace the strengths of each device". Do you think they're lying, or do you think you know more about building cross-platform iOS/Mac apps than Apple? &gt; Yes, that will lead to some crap – but it will also lead to some great apps that would never have come to the platform otherwise. Apple built the Mac in 1984 with no backwards compatibility specifically to avoid the problem of crappy ports. They've always been perfectly willing to go the extra mile (and make developers go the extra mile) to have a best-of-breed at user experience. They ditched Java. They ditched OpenStep. They've brought a couple apps to Windows (QuickTime, Safari, iTunes) and everyone hates them because they don't match the Windows UI conventions. They haven't even unified their iOS-like OS APIs (watchOS, tvOS) yet. The main complaint I hear about the iOS App Store is that it has great quantity but not quality, and I can't see them eager to make the same mistake on the Mac. If bad iOS/Mac ports were trivial, and expected, then that would be much worse for the Mac. There would be no differentiation. It'd just be a big, heavy, expensive iPad.
Azure? lol
So where is it? The GitHub repo has only a README and a couple images. The "Source Code" download is just a tarfile with a bare executable. It says it uses Stencil templates, so if you're using the Stencil library, you're violating its license by distributing it without its copyright notice.
I don’t think it is sad. When Microsoft came out with .Net they were trying to move from C++ to a more type safe language with C#. With C# you can write unsafe code but you have to specify that the section is unsafe. C# let’s you use non .Net libraries which do not have the .Net type safety. Just like with Swift you have to specify with attributes that you are doing this. As more code was moved to .Net the need to use older unsafe code became less common. This is how you transition from an old code base to a new one.
If you already know every possible type you will store in a Parameter, why not just make separate types for all of them?
You can install it using brew install rahulkatariya/formulae/aarkay I have added Acknowledgements, I hope now its not violating. Thanks :)
I think I'm detecting two different objections here. The first one is a technical one, and the second one is a philosophical one. In terms of the technical: &gt; Even if it's true, what does this have to do with @objc, or the compiler? Why would they wait? And specifically: &gt; The other parts that remain in need of unification (like {NS,UI}BezierPath and {NS,UI}Color) have nothing to do with @objc. Let's put aside the unification of the mobile and desktop frameworks for a moment. I think we can assume from the fact that Apple designed a type-safe language like Swift that it is probably tending away from the dynamic properties of the obj-c runtime. We can assume they will be moving away from designing APIs that promote the use of obj-c runtime features, gradually moving to APIs that are more "swifty". My guess would be that they actually designed Swift with this very idea in mind. I don't think any of this is controversial. However, Cocoa was built specifically with the dynamic properties of obj-c in mind. You only mention UIColor/NSColor, but there's the matter of Cocoa bindings for example – Cocoa bindings specifically leveraged dynamic features of the obj-c runtime that purposefully don't exist in Swift. Apple encouraged their use liberally. I think it's fair to say that it will be a *lot* of effort to modernise all these frameworks. More than a Bezier Curve here and there. For some, the design will be so different as to necessistate a complete rebuild. At that point, if you're Apple, you'd have to ask yourself the question: we maintain four different platforms, three of which are based on iOS, why *wouldn't* we build our next generation of app framework to accomodate all of them? It will be cheaper, faster, smaller and easier to learn. So that brings us to the philosophical objection: Apple shouldn't provide a cross platform app framework because it would encourage sloppy ports. Well, I think that's down to the individual developer. Theoretically, a well designed unified framework shouldn't constrict the possibilities available on the desktop whatsoever. But I don't think an experienced developer would succumb to that temptation. I think an experienced developer would welcome the opportunity to simplify their entry to a new market, welcome the opportunity to reduce the size of their codebase, and welcome the increase in time they have to spend on their non-platform specific portions of code. However, I take your point that in some cases develoeprs may be incentivised to produce a sloppy port. Would it be worse than the Web Apps that you see packaged as a Mac app? Probably on a par in my opinion. Does that warrant abandoning the idea of a unified framework and all the benefits that brings? 
Yes, if you know every possible type this is true. However, if you're making a wrapper type or one that allows for new implementations then you might not know every possible type or might not want to make tons of custom types.
If you store a property using `Date`, that property won't change by itself – if you find it's changing, it means you're probably setting it somewhere. Try using [watchpoints](https://www.hackingwithswift.com/example-code/xcode/what-are-watchpoints) if that happens, because they will tell you what's changing the value.
Compact Size class does not display Split View Controller. https://useyourloaf.com/blog/split-view-controller-display-modes/ 
Best of luck: "Collapsing the Secondary There is one potential problem left. On initial startup in a horizontal compact size class such as the iPhone the split view controller collapses and will by default show the secondary view controller. This does not always make for a good user experience if we are depending on the user first doing something in the master view."
Using the calendar components like you have does nothing, Date() includes the DateTime object. What you need to do is something like this: var keepThisDate: Date? func viewDidLoad() { keepThisDate = Date() } You need to make sure you keep the variable in a scope so that its unmodified. Thats step one. Next if you are navigating to other controllers or you want that date to be stored while the app is in the background, etc. You need to store the date in some sort of persistence. UserDefaults would be a good place to start in that regard. Best of luck.
Ok Thank you very much!
Thanks for your advice :)
&gt; My guess would be that they actually designed Swift with this very idea in mind. You talk like there is a technical strategy and long term plan. There isn't. There wasn't. They're winging it. It shows. I've been a developer floating in and out of Apple's orbit since MacOS 6. They start things, they stop things, they announce big initiatives and drop them without fanfare a couple years later. They rip off their 3rd party developers and use their creativity as free R&amp;D. Copeland, MacroMaker, OpenDoc, WebObjects, Java Bridge, WebObjects ported to Java (killed it), clones, garbage collection (dropped for ARC), EOF, Sherlock ripping off Watson... The point is Apple does not have a long game. They quietly change course whenever is suits them - new guy comes in, remakes the whole thing. Swift is one guy's idea that escaped the lab. That's it and he's gone now. I see a lot of lesser developers like it because its a language with training wheels. Whatever. I have no interest in getting into that. Suffice it to say - I'm not adopting it and likely never will. But lets move past that and think about computers vs consumer devices. They have very different uses. They have different constraints. iPads and iPhones are very different too. So different that a lot of developers just do iPhone - they ignore the iPad and when they don't, they often suck at it. The idea that suddenly there will be a flood of great Mac apps from iPhone developers is pure fantasy. UI design is hard. It is laborious. The thing keeping iOS developers from making Mac apps isn't AppKit (and if it is, they suck as developers because the skills definitely can translate). I think unifying common capabilities is great. We saw that with MapKit and WebKit. But I don't think the ViewController single screen model suits desktop applications. Different events, different interaction models, different design constraints. Its like trying to design a flying submarine - its going to suck at both.
As apposed to Apple's cloud host product?
fuck no.
`markCurrentLocation` is getting run before you get the delegate callback and set `userLocation`, which means you have a default `CLLocation`, which has coordinates 0,0. Google Maps has the ability to track the user location built in, I suggest you use that.
Basically, all the ones that aren't available on Linux. 
I don't see where it's creating an infinite amount. I would expect one copy to destruct on every pass through the loop.
I don't know anything about building MacOS apps (still learning iOS). Is there a way to open it and run it in Xcode and try to debug the issue?
I can imagine that it would be satisfying to "finish" the project by running their sample app. So missing out on that sucks a little. But beyond that, I don't think there's much to be gained by running it. It's probably just their final build, to show you what your finished work should look like. If you've made it to their final, compiled app, then you've done all the hard work.
Unfortunately it's the API that the app interacts with. Fortunately I'm a backend dev, so I guess I can just code my own API to interact with along the way. I can see the JSON in the app contents.
Hmm, the API? Ok, I shouldn't speak beyond my knowledge, but that sounds a little strange. I would think an API would come in some form other than a .app file. Are you reading the 2017 iBook called App Development with Swift?
Hey, have a look [here](https://forums.developer.apple.com/thread/83073). Might just be a simple JSON syntax error.
I tried that fix too. It seems like they were having that problem once the API app was running. I'm having a project even running the app, which is not caused by the JSON file.
 Can you print out the length of the array? I'm not 100% sure what you're doing, looks like you create an empty array of closure type. The closure returns type void. You then enter into a forever look and create a var, you append to the var the zeroth element of the empty array you created above. Then you assign the newly appended array to the first array. I'm not sure what you are trying to do, but you're in a forever look and it's using memory, what did you expect was going to happen? I'm not sure I get the array appending an array of itself then assigning back to itself. Maybe if you can explain the goal of this, someone can help, but I'd fully expect an endless loop to crash.
Where's the source code? I see the same thing you describe, but I don't understand, did the prior playgrounds lead up to the final app? I'm guessing this is a macOS app, where's the text of the chapter, what does it say? Why would they give you a .app and not the source code to make the app. Give us a link to the chapter and tell us about the prior chapters, are they all about getting to that final app? Is it a macOS app?
You have one of the most well written Swift blogs out there. Keep it up. Been a reader for at least 3 years 
The final app is building an iOS app that interacts with a JSON API web server. This macOS app was supposed to, I believe, act as a stand in for the web API. We never got the source code for it, as it wasn't what we were supposed to build, or even what we learned about. It's just a tool to be used as part of the final app.
I think docker should not ever be necessary for Swift server side applications. Just compile it to a single binary with everything statically linked.
The code is hard to understand, but you can't create a var and not use memory. Even if you request the memory to be released, that doesn't mean it will at that time. IDK Swifts memory usage well enough to say that all the memory used is given back. Even if one var is supposed to be released, you're still adding it to an array and don't you still keep a reference to it? Again, it's damn hard to read and understand what you're trying to do. Do you want to get into the goal of this?
Yeah, I put `print()` all over the place. Everything looks totally right. Both arrays never grow beyond one element. In the container example, the structs destructed exactly as you would expect. On the other hand I tried out a couple of things based on your random thought, and found something new. If you call `.append(contentsOf:)` instead of `.append()`, it works. I wonder if there's something going right in the sequence version of `append()` that's going wrong in the single-element version. Thanks for that inspiration!
I think this need of additional `@objc` makes things much maintainable when transitioning from pure Obj C code to Swift + ObjC hybrid (and eventually pure swift). In my current experience, I am creating all swift components as pluggable modules so the other teammates who are powerful in ObjC can use them as external modules and when they are ready, they can start contributing to Swift components. For now, only things that are visible to ObjC are things that are absolutely needed by that part of the app tad. 
Ok, so that would really suck. Do you have a paid Apple developer account? If you do, you're entitled to 2 questions. I've had a paid account for 3 different years and never used my questions. They just expired a few weeks ago. Have you tried SO (Stack Overflow)? IDK what they were trying to teach you, I guess the topics listed? If that's the case then don't worry about it. Pretty much everything listed can be found in other tutorials. I'd finish off the book, then hit the Udemy sales for those $10~20 tutorials. I liked the RayW and AngelaYu tutorials.
[UIActivity]( https://developer.apple.com/documentation/uikit/uiactivity) is the answer to your problem. Examples: - Share from Google Chrome → Read Later (Chromium is open source. [This may be helpful](https://github.com/chromium/chromium/blob/f18e79d901f56154f80eea1e2218544285e62623/ios/chrome/browser/ui/activity_services/reading_list_activity.mm)). - Share from Firefox → Create PDF (Good news: Firefox on iOS is also open source. [this may be a good starting point] (https://github.com/mozilla-mobile/firefox-ios/blob/5c80018d6ba1dca0a5ad7a674c99dee450c9b36b/Client/Frontend/Browser/OpenInHelper.swift)). While share extension is also a perfectly fine and valid way of achieving what you want, it introduces few UX issues IMO: 1. User has to manually enable share extension (even if the content is being shared by your app) 2. The order of Share extension is not determined by host app or container app. 3. The share extension shares completely different context than the container app, so basically it gets little tricky to send messages back to the app once action has been completed. Hope this helped. Feel free to reach out if I can assist further. Cheers.
I've managed to work around it for now. I could still access the JSON of what the API would serve, so I just built a quick CRUD server using that. Not a major issue, but I expected a bit more from Apple's official tutorial book.
I've been doing mobile since 09 and I was amazed at how Apple puts out amazing product like the iPhone and falls so short on other things like Xcode. My 1st product was the iPod 30G and it was very impressive. I still have it and it still works. The whole "it just works" thing was just spot on. So you expect that in the app dev tools... no, it's crap. I've seen worse, but I've been programming for a LONG time on many different platforms and that whole config/setup/keys/compiler flags/build flags/etc... is just BS. Swift was a joke because they released it 1/2 baked then changed a bunch of stuff. It's not unusual. I just went they hours of support from MS to get their API to work and now I can't even get in touch with Google to get a link to their Gmail API. ##### Every part of programming is a PITA
Unrelated but how have you approached the book? Did you do all the labs and assignments? Have you read the entire thing, or did you skip through chapters? I'm up to 4.6 at the moment and I'm grinding through this chapter.
&gt; but I'd fully expect an endless loop to crash. You would be correct in expecting it to run forever, but there's no reason to expect it to crash. 
I think /u/GreatBigBore did a great job with giving us the simplest possible code showing his problem. I don't see anything that's hard to understand about it, it's just a while loop with some array modifications.
Awesome. Any chance of a place on your website linking to all your video conferences please :)
I have a todo list that's several kilometers long – this is somewhere about half way down! :) In the meantime, try this one: https://www.youtube.com/watch?v=OgU8d_E1K14
Wow, very nice.
the json is missing the closing "]" at the end of the array.
Here's an even more condensed version of this problem: var callbacks: [()-&gt;()] = [{}] while true { callbacks = [callbacks[0]] } Memory usage increases steadily. I also didn't get to the bottom of it, but it definitely seems like a bug. 
I'm not sure you understand the point of Docker. It's not just for the web app itself, but the entire environment in runs in. Being able to run the same exact setup locally and hosted in the cloud is a big win.
Your encouragement is greatly appreciated! I don't get to write as much as I'd like, so thanks for sticking with me.
Thank you very much for reading.
Hey, just post the issue on the github page.
Definitely not Spotify’s lol
&gt; I think we can assume from the fact that Apple designed a type-safe language like Swift that it is probably tending away from the dynamic properties of the obj-c runtime. So how do you explain addition of the "dynamic" declaration modifier in Swift 3, or the "@dynamicMemberLookup" attribute in Swift 4? For a company that you claim is moving away from dynamic language features, they're sure putting a lot of effort into adding them to their new programming language. Isn't it *possible* that static features are easier to implement in a compiler (we had Pascal/C before Objective-C, too), and they just hadn't gotten around to it yet, since the language is still brand new? Python is about as dynamic as languages come, but when it was the age that Swift is now, it didn't yet expose a dynamic member lookup interface. You couldn't even subclass built-in types. You can't judge the trajectory of a programming language by its first release. These things take time. &gt; I don't think any of this is controversial. You keep saying variations of this, while contradicting everything I'm saying. What led you to believe that your positions are consensus, despite all evidence to the contrary? &gt; Cocoa bindings specifically leveraged dynamic features of the obj-c runtime that purposefully don't exist in Swift. Apple encouraged their use liberally. Not in a while -- this feature doesn't even exist on iOS, for example. You don't need a new language and compiler for that. Got any other examples? Swift has #selector support already. APIs that returned proxy objects now accept closures. It's been a year or two since I've seen a Cocoa API that didn't fit well with Swift. &gt; I think it's fair to say that it will be a lot of effort to modernise all these frameworks. More than a Bezier Curve here and there. For some, the design will be so different as to necessistate a complete rebuild. I don't. Can you give an example of what you're thinking of? Apple has already shown they'll unify APIs, where it makes, sense on a framework-by-framework basis, like with WebKit. &gt; So that brings us to the philosophical objection: Apple shouldn't provide a cross platform app framework because it would encourage sloppy ports. I'm not sure how this is "philosophical", but that sounds like a way to brush it off as unimportant. Isn't one of the main purposes of an API to make it easy to do things the standard way? Isn't it equally "philosophical" to provide a new programming language? &gt; Well, I think that's down to the individual developer. Theoretically, a well designed unified framework shouldn't constrict the possibilities available on the desktop whatsoever. What features do you find "constricted" on the desktop by the use of AppKit? &gt; But I don't think an experienced developer would succumb to that temptation. There used to be a classic last-ditch argument in language wars, the [Sufficiently Smart Compiler](http://wiki.c2.com/?SufficientlySmartCompiler). ("Sure, my language is 1000 times slower than your language at counting to 10, but a *sufficiently smart compiler* could optimize it to be just as fast!") Now it seems we're into the realm of Sufficiently Experienced Developer. If this were Apple's position, then why is "easy to learn" in big text at the top of their Swift webpage? If "[don't do that then](http://catb.org/jargon/html/D/Don-t-do-that-then-.html)" were their philosophy for dealing with inexperienced programmers, why work on type safety at all? If going for volume over quantity was desirable, why not open the Mac App Store to every possible executable, and not just those that looked and worked exactly like native Mac apps? Your claim just doesn't jive with anything else they do. If they did want to move in that direction, they could take other meaningful steps in that direction now -- or any time in the past 5 years. Instead, all we've got are rumors. &gt; I think an experienced developer would welcome the opportunity to simplify their entry to a new market, welcome the opportunity to reduce the size of their codebase, and welcome the increase in time they have to spend on their non-platform specific portions of code. I've been writing Mac software since 10.1, and you've not yet given me any concrete example of how I'd get to do any of this. (Classic response: "Clearly you're not *sufficiently* experienced, then!") Apple has already shown how the vast majority of their large applications is already shared cross-platform code. You still haven't provided any specific counterexamples. What type of applications have you written where this was a significant issue, and what specific changes to AppKit do you think would have saved you the most time? In my experience, API awkwardness is trivial compared to the task of designing new user interaction (for multi-touch versus mouse-and-keyboard). &gt; Does that warrant abandoning the idea of a unified framework and all the benefits that brings? That's a strange way to phrase it. Ideas are perfectly *free* to abandon -- they incur significant cost to *implement*, especially if you hope to convince a million third-party developers to adopt them. iWork shares 75% of their code across platforms already. How high do you think it's possible to push this, given that the user interfaces are very different between Mac and iOS? And do you think getting a few more percent here is worth a complete replacement of an API that's been working well for years? 
Docker isn't "necessary" for *any* application, but I fail to see what that has to do with Swift.
Wouldn't be possible to edit a range of text directly on the UITextView ?
The developer developer pack is great. I use the pro GitKraken app daily. The free digitalocean credits has got me into learning more about backend development and vapor in particular.
[removed]
&gt; RayW Udemy Swift4 is it this one? https://www.udemy.com/ios-and-swift-for-beginners-200-hands-on-tutorials/
If your school let's you keep your edu address I think you can keep it forever 
In addition, there's the notion that subscripting should always be O(1), instead of the O(n) it would be for `String`. It's trivial to add if you want it, the core team just doesn't want to break the performance guarantee.
The running time of str.index(str.startIndex, offsetBy: n) is O(n), so iterating over characters of string would take O(n^2) instead of O(n).
Strings are a collection of non-equal-size elements, so indexing into them with an integer position would be O(n). Subscripting [is supposed to be O(1)](https://developer.apple.com/documentation/swift/collection/1641358-subscript). &gt; NSString can index with integers and integer ranges. Unless I'm mistaken, these methods simply treat it as a raw array of UTF-16 code units, which is pretty much the worst of all possible string interfaces. It's not good at size, speed, *or* correctness.
Bitbucket give you free private repos.
No problem with me and I’ve been doing it since 2013. But I recommend at least also use the SE in the simulator to make sure your views still look good 
You could try my online tutorial series. It’s free, updated for Swift 4, and teaches using real projects: [Hacking with Swift](https://www.hackingwithswift.com/read/). I’m happy to answer questions if you hit trouble!
I highly recommend /user/twostraws. I rounded out my theoretical understanding AND learned how to use Swift largely from his Hacking tutorials.
&gt; https://www.udemy.com/ios-and-swift-for-beginners-200-hands-on-tutorials/ That's the one.
If you lose your edu address, 2 years. (Each renewal coupon is good for 2 years) If you keep your edu address, for as long as they offer this to educational users. 
Stanford's CS193P course sounds exactly like what you're looking for. It assumes some programming knowledge and focuses on understanding the essential tools/patterns used while building an iOS app. And it's free on [iTunes U](https://itunes.apple.com/us/course/developing-ios-11-apps-with-swift/id1309275316)! 
Ok thank you! I’ll check that out
Well, I've juuuustttt.... No, wait. Need to fix that. Hang on. ... Okay, now I've juuuusttt finished a new app. Well, not really. I have testing ahead of me but releasing this month seems very likely.
Not an SPM package, but I really like what was done with Dispatch in Swift 3. GCD was already so convenient in ObjC and C, and it's even better in Swift. It's a great example of how to provide a Swift wrapper around an existing library. As Swift adoption grows, that's going to be more and more important, since people are going to want nice Swift interfaces on existing platform libraries.
"developer developer"? https://www.youtube.com/watch?v=Vhh_GeBPOhs
Video linked by /u/shiggie: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [Steve Ballmer: Developers](https://youtube.com/watch?v=Vhh_GeBPOhs)|MrWueb007|2008-04-14|0:00:25|3,204+ (95%)|984,626 $quote Uno de los peces gordos de Microsoft, en lo que parece una... --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/shiggie ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=$comment_id\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v2.0.0
Kind of overdoing it a little bit maybe? How about simply having your enum implements the Alamofire.URLRequestConvertible protocol.
I really love your style of writing and blog, well done with that. However, I’m not quite sold on using generics for this. I’ve always followed the rule of thumb of phrasing your class in terms of the generic to see if it makes sense: a Button of Bouncy. Not sure the specialization fits. Also, the number of generic types can quickly grow out of control. 
This is expected behavior. Each iteration through the loop will allocate a new closure that wraps the previous callback value.
For whatever reason Apple defaults the detail VC to be the primary VC for split view controllers on compact width screens. I run a simple switch statement in viewDidAppear to check the traitCollection’s current horizontal size. If it’s compact I force the detail VC to be the master. 
In your project’s build settings, under Swift Compiler — Custom Flags → Other Swift Flags, add the following two flags: -Xfrontend -warn-long-function-bodies=200 -Xfrontend -warn-long-expression-type-checking=200 From this Medium post: https://medium.com/rocket-fuel/optimizing-build-times-in-swift-4-dc493b1cc5f5
Alamofire is already redoing it, unless you need some very specific feature, that is not easily achievable with URLSession 
Thanks! I will give it a try
If you like lectures, this is the way to go. It's amazing. Just make sure to do the assignments too.
Is it? Whenever I access the text view attributed text , like `textView.attributedText` it is a attributed string, not mutable! That’s why I don’t think it is possible ?
Are you talking about UI/UX design or the graphics like icons and game assets like bullets and monsters?
All of it in general.
At least you’re getting paid by the hour, right?
Yup haha
With Swift it's a good idea to provide the types instead of having the compiler infer them. Sometimes the compiler can get hung up on trying to infer the proper type and everything will grind to a halt. That's where the "expression is too complex" error message comes from, the compiler makes a guess that certain expressions will take a long time and it gives up early. Sometimes it doesn't recognize that's the case and so it chips away at it for far too long before failing. It's especially difficult with generics, including generic protocols and containers. The compiler will work hard at figuring out those missing types and slow everything down, sometimes including Xcode's GUI.
I can literally type your exact post title in to google and get the answer on the first response without even clicking on it. 
I was enrolled when I applied for the student account, so the system must not work too well. Also, I don’t think the system you describe actually exists. There are very strict federal laws around academic records. Schools are allowed to disclose enrollment status (as “Directory information”), but they have to clearly inform students that they may do so, and provide the opportunity to opt out. Look up FERPA. What’s the name of the system you’re describing?
There is a site called CartoonSmart for characters and code. I don’t know anything about it. Sites like GrabCAD for 3D assets. There are a lot of sites for icons. I was happily using Unicode symbols in some of my buttons only to read Apple might see it as a copyright issue. Which is odd they make it effortless to incorporate and then say “but don’t”. But it’s not emoji, just the standard Unicode. I’m a long way from needing to solve that issue though. 
I’ve found that you can let the compiler infer if it’s not trying to do infer too much. You can usually just think of it rationally.. “can the compiler infer this easily?” If it can infer the type on the same line, it’s not going to hold anything up. Same with generics.. (just trying to say you shouldn’t shy away from using Swift with the great tools it offers, because it’s constantly getting better) I’ve found the build times are usually related to nil coalescing/turnary operations. We had a ridiculous (13s) build time almost solely from a developer putting in conditional accessibility tags handled by nil coalescing everywhere. The xcode build flag shown above can identify methods that are taking a long time. If you work with offshore development, you probably will see a ridiculous amount of nested if/else’s inside nest if else’s and if it’s ridiculous enough, can be hard on compile times. My suggestion for identifying these up front and keeping everyone honest is use a static analysis tool like swift lint. The default rule sets will catch this stuff, and if you want to create new rules you can.
A good point and I agree to an extent. Though I think I'd make a distinction between "generics", the concept put forth by Musser and codified by Stepanov in, say, the STL and "generics" the Swift language feature. This post makes use of the latter while clearly being incompatible with the former. If we view Swift's generics implementation as a means to get us to the Musser/Stepanov end, then the last part of this post would most charitably be viewed as a "hack" and should probably be Considered Harmful (though all the stuff about modeling stateless strategies as types is still applicable, IMHO). On the other hand, if we think of Swift generics as syntactic sugar allowing the specialization of methods across a range of conforming types without all the boilerplate, the generics tips a the end of the OP might feel like a very natural application of this. Your comment evokes for me the former argument, while I clearly lean towards the latter one, but there's a lot to recommend both and a person could go far following either. So ultimately it might come down to a style thing? 
Turn on the preview build system under your workspace settings. Also and SWIFT_WHOLE_MODULE_OPTIMIZATION: YES to a new User Setting under Build Settings
It was already with all the optimization flags enabled like SWIFT_WHOLE_MODULE_OPTIMIZATION - Yes, Build Active Architecture Only - Yes and Debug Information Format - DWARF
Have you tried the new build system preview?
Oh wow, what's your build log say? It's the last tab on the navigator panel on the left
Peace of mind. Say you don't unit test, and you have a really complex app. When you make a change to any component, you have to worry that there will be unintended side effects that won't show up during testing, but will show up out in the wild. But if you unit test from the beginning, all of your unit tests as a whole represent the gold standard for how your component should behave. No matter what change I make, if the component still passes all the unit tests, then it's behaving exactly as intended. I can make all kinds of changes without ever having to worry about side effects (ok, maybe you can't eliminate worry, but you can reduce it significantly). For me, that's the biggest benefit of unit testing.
Cons are that there is lower visibility for gitlab than GitHub because it is newer. Pros: * Unlimited free private repos * Ability to self host * Much more transparent company * Better integration with CI systems directly in gitlab 
It was weird to me as well. Caught it with a variation of those command line build flags someone mentioned earlier. Haven’t actually checked the Swift 4 github change threads yet.. hopefully they address it. Using those values in a string value like so were particularly the worst: let stringVar = “/(someVar ?? “”) blah blah with /(otherVar ?? “”) blah blah with /(anotherVar ?? “”)” Damn that was hard to type on a phone.. but to fix this was literally just declaring each of those var’s beforehand and putting them in the string the same way was way faster. ¯\_(ツ)_/¯
You dropped this \ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Supernova-Studio/spacebook-exported-code/.../**LoginVC.swift** (master → e0b1ccc)](https://github.com/Supernova-Studio/spacebook-exported-code/blob/e0b1ccc6d8977ef4716140bdc625f50410da15d2/iOS/Spacebook/Classes/Controllers/LoginVC.swift) ---- 
Hey, I’m one of the developers behind Supernova Studio. I know you probably want a response from someone in the community who isn’t biased but here’s my version: Supernova Studio helps you with the conversion of the UI from the design file in Sketch into files and code you can use in your iOS (or Android and React Native) applications. The result will not be a fully working application, at least not yet. You get the configured UI, with colors, images, font size etc. just like they were in the design, without you having to create everything piece by piece for hours and hours. You also get the layout, navigation, localization, animations and the ability to show the working UI to anyone on the Supernova Cloud, from a browser. You will still have to write your model, network and logic code. These features are on our roadmap, but not yet available. You have to make your own decision if that is worth it to you. There's a free trial to help you with the decision. Here's an example output code from our tutorial series: https://github.com/Supernova-Studio/spacebook-exported-code
I see a lot of people complaining about Xcode build time but I never had this problem. Is it my iMac that is super fast or my apps that are super small? Probably my apps... 🤔
You might be more interested in an Xcode Starter Kit. Its a pre-programmed Xcode project and you essentially just set properties in a plist file to change how the code functions. Think of it like a top-layer above the code. All the level design is done within the Scene Editor. So code-wise you really don't need to know anything, what you do need to know is what properties change what, but thats easy. Gravity = -9 , stuff like that. Here's an example... https://cartoonsmart.com/platform-games-tvos-and-ios-starter-kit/ If you ever wanted to change the code, you could, since you've got the Xcode project. 
All your element**s***.
This. Just make custom cells, or lay them out in the storyboard. Use a separate identifier for each cell.
Happy that you got it! Great work! It's such a pain when Apple doesn't give you guides for how to actually use their tools and frameworks, isn't it? I went through the same thing. They provide minimal docs, but not "how to use this" guides for too many of the basics that we all need to know how to use. 
Starting out with scroll views sucks ass, doesn't it?
Where did you get this information? It sounds horribly out of date, at best. &gt; Android relies on a Java-based virtual machine, Not in 5 years. ART uses AOT compilation. &gt; where memory is managed with "garbage collection". This means there's a thing that runs in the background, and can pause the application at anytime, to scan for pointers and reclaim unreachable/unused ones. The "thing" in ART's case is a concurrent mark/sweep collector. It only needs to pause for a few specific cases, like JNI weak globals. I don't think it's conservative, either, so "scan for pointers" doesn't apply. This reads like a criticism of Java applets in 1996. &gt; Swift and Obj-C rely on reference counting, so that memory safety does not require pausing the application. And how do you think this magically occurs? malloc(3) is thread-safe, so it's also got to have an internal locking mechanism across threads. Even if you're using a single thread, there's no latency guarantees. It may have to walk a long free list. It may have to swap pages to disk. It may hit something outside the cache. I'm sure everyone here has seen Mac applications pause. &gt; str[x] is supposed to be O(1); a constant time operation, and you know how it's implemented: add x to the base string (well, after multiplying it by the size of one element). Is it easier to read and write than str.index(str.startIndex, offsetBy: 10)? Yes. But it hides the performance cost. If you're talking about `Swift.String`, there is no "size of one element" to multiply by. That's the problem. It's not the cost of multiplying by 2, or 4 -- that would be super fast, and easy to optimize.
/u/lyinsteve: This is more Udemy spam and should really be deleted.
It's not impossible to learn Swift using a Swift 2.0 course, but it does place a lot of extra mental strain on you – it still has old-style loops, `++` and `--`, tuple splat syntax, and `var` parameters, it's before the Great Renamification of Swift 3.0, and it doesn't benefit from things like `Codable` and multi-line strings in Swift 4.0. So: if you paid money for a course and you really want to follow it, go for it. If not, perhaps you might enjoy my free online Swift course: [Hacking with Swift](https://www.hackingwithswift.com/read). It's fully updated for Swift 4, as is my other free course [Swift in Sixty Seconds](https://www.hackingwithswift.com/sixty).
Thanks!
ZzzZZzzz... ho hey it's an other anti Alamofire shill :) Please tell us more about how you like to write your own code to do response/request serializers and many other common networking tasks by yourself instead of using well established/tested code that already does it. 
Check out PaintCode.
There are a lot of differences between Swift 2 and Swift 4. You'll certainly learn the main syntax but you'll have to unlearn a lot of things once you are ready to move on. There's plenty of great resources out there that teach Swift 3 and 4, I'd stick to them.
i don't recommend it. just looking at examples in swift 3 when learning swift 4 confused me greatly. 
Serious question is Steve Ballmer on cocaine in that video?
Code generators are nothing new, they've been around for many years. I used one that generated native code for reports, so you'd use a report layout tool and have it generate native code for that report. The problem is that the code was very bloated and very hard to make changes to. Generating code from a UI tool is even older than the report tools. They used to have templates that you'd change for whatever language you wanted. The real problems are maintaining the code that comes out and applying things like custom animations and other 3rd party tools. Look at some simple things like a slide out menu. What do you do if you find a really cool slide out menu that you want to use? What happens when you want to change the UI because of some new UI trend. Past that, you have the issue of how you like your code to be written. If you want it done a certain way, how do you change that? These tools have been around for a long time and I can't think of any of them that have become popular. I've had report generators before and just don't use them. Then again, I don't use Sketch, I just look at other apps and write code for what I want it to do. IB was supposed to be the great layout tool, for quick layout, doesn't anyone use it for layouts? It generates the code interactively. You hook up all your connections right there, constraints, etc...
I stopped Swift at 2 because of all the changes. I got tired of all the upgrades and changes so I waited for Swift 4. Why bother with Swift 2? If you got a bunch of books, tutorials for Swift 2, they are near worthless. The number of tutorials out there for Swift 4 make it pretty damn cheap and easy to ignore all the stuff from before. No reason to bother with Swift 2.
Not possible.
Yes yes yes! I think that's part of what I was trying to get at with "You'll be more confident when you refactor" but obviously that's specific _only_ to refactoring. Basically, your explanation and more generic application blows mine out of the water. Thanks for sharing. 😀
You don't want to keep these flags forever, because they also (oh, the irony) causes to build longer. 
https://github.com/JaviSoto/iOS10-Runtime-Headers/tree/master/PrivateFrameworks/BluetoothManager.framework
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [JaviSoto/iOS10-Runtime-Headers/.../**BluetoothManager.framework** (master → 1501f5e)](https://github.com/JaviSoto/iOS10-Runtime-Headers/tree/1501f5e689fda4644df0adbffc50c0f737c4ab96/PrivateFrameworks/BluetoothManager.framework) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dvndjot.)
&gt; Say you don't create unit tests, and you have a really complex app. When you make a change to any component, you have to worry that there will be unintended side effects that won't show up during testing, but will show up out in the wild. That sounds more like integration testing to me.
I was talking more about test-driven development than either unit testing or integration testing in particular. OP asked a question that indicated unfamiliarity with the larger concept, so I discussed that. I'm not aware of any particular advantage to unit tests that can't be said for integration tests. But there's a huge advantage to test-driven development over not-test-driven development. I think OP got the gist of what I was saying.
All over the place. Google "unit test". There are also zillions of frameworks dedicated to unit testing, or, I should say, dedicated to test-driven development, which is what i was talking about in my first post: the advantage of writing a test for every feature of your code *before* you write the real code, then write the real code such that it passes the tests you wrote. If your real code passes all your tests, then you're good. Afterward you can do whatever kind of crazy change you want--rewrite the whole thing in Pascal if you want--with confidence, because as long as your code passes all of those original tests, it's behaving perfectly. It's so much better than not having the pre-written tests; without pre-written tests, you always have to worry whether some trivial change you made in the code will cause some edge-case blowup out in the wild.
To be clear, I tend to use the terms *unit test* and *test-driven development* interchangeably. You won't benefit much from unit tests (or integration tests, or whatever) if you write those tests *after* you write the real code. Always write every test before you write the real code. That's where the peace of mind comes from, not from unit tests in particular.
This would be awesome
&gt; What are the benefits of unit testing? There aren't any. 
I hadn't thought about that, thanks for the heads up!
Time to speculate what it all means...
Makes sense. I don't work with a team, and I am 100% Swift, (or try to be) but working with others in Objc makes sense. 
I wondered the same thing. In Swift 3 the compiler did add it behind the scenes. But in Swift 4 you have to specify it. 
I really hope this is the master plan. If so, totally makes sense. But for a beginner I felt like I was doing everything wrong. Would love a more detailed error message in Xcode. Or at least some better articles about it. :)
Makes sense. I hope they transition a lot of the commonly used Objc code to Swift soon, like Action Target etc. 
Make Interface Builder really powerful visually, not the piece of shit it is today. I want to change all parameters of views without subclassing anything: background color, transparency, round colors, shadows, rotation of elements, transitions between views, animations, WYSIWYG in relation to run-time, a new stuff that works to replace the infamous auto-layout, adjustment of insets of labels and textboxes... make IB a kind of photoshop where we can work visually. Is that to ask too much for the 10th version of an app that has 2.5 stars on the app store?
Typo. SEGUE or SEQUE?
For attributes of views, you can modify them directly but in the identity inspector (3rd from left) via the user defined runtime attributes. 
yes I know but that will not show until you run and that is not visual. I need Photoshop-like interface builder.
I agree with all the benefits, but there’s a slight caveat. You really have to be ready and know how to unit test. I went through a phase where I was unit testing just to learn how. Kind of like a fake it til you make it sort of deal. Until I realized how to do it properly, all those benefits were not realized either. I’ve seen a bunch of codebases where they’re unit testing some of the most useless stuff, usually just to get a coverage percentage to a certain number. The funny thing is, once I learned how to truly unit test effectively, my code was also more stable. Causation or correlation? Yes and YES!
I'm pretty sure it's because you declared your private var as an optional. Switch on the unwrapped value, and I think you're good to go.
I took his code from pastebin and went through the compiler errors. The error is the Q. When you fix that, THEN you get the problem with the optional.
Every time the closure is loaded from the array, it is wrapped in a thunk. It is also wrapped in a thunk before being stored back into the array. So every time you load the closure and store it back, you allocate two new thunks on the heap.
The single-element version allocates closures on the heap, when the callback is loaded from the array and when it is stored respectively. These allocations reference each other.
I'm sorry, but your use of the word "respectively" is throwing me off. Did you mean a different word there? I can't make sense of what you're saying.
Check your project for dependency cycles.
Except for the fact that your example demonstrates documented behavior that is consistent with the behavior of other Swift mechanisms. My example shows that closures are being treated differently than class objects, and that `.append(_:)` behaves differently from `.append(contentsOf:)`. Like I say, I think you're describing what's going on very well, but perhaps missing the larger issue, which is that it should not be happening.
This. You could also say `case .userLocation?`, but that’s annoying unless you really need this logic.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [DavidPhillipOster/LevelsOfPressure/.../**LevTouchView.m** (master → a005e8d)](https://github.com/DavidPhillipOster/LevelsOfPressure/blob/a005e8d1bd7a59d46c914e8680e232e2124f7d8e/Classes/LevTouchView.m) ---- 
That's what I was hoping. Is there an easier way of knowing when the second touch came in, because that commit seems like a hell of a lot of code for such a small thing. Also, I'm coding in Swift and I'm guessing that's objc. Not quite there yet :). 
It makes you wonder if there’s something wrong with his setup. Occasionally Xcode et. al. will get hung up but syntax highlighting and LLDB seem to work pretty well for me. Sure there’s still some warts but my Swift experience has been pretty positive so far. It’s just a fun language to work with and fairly powerful while being safe at the same time. It’s a young language but the changes aren’t that major and they only come every year or so, plus the migrator scripts seem to do a decent job upgrading the code. Maybe my experience is through rose-colored glasses but I far prefer programming in Swift to Objective-C or C++. 
I agree that you have to know how, or it doesn't work. Can you explain what effective unit testing is or looks like for you? What's the difference between that and useless unit testing?
[This guide](https://roadfiresoftware.com/2018/03/how-to-write-unit-tests-in-swift-4-with-xctest/) will get you started with testing in Swift 4. It'll help you get everything set up properly and show you how to write your first tests in Swift. If you want even more depth, you could try [Test-Driven iOS Development with Swift 4](https://www.amazon.com/Test-Driven-iOS-Development-Swift-maintainable/dp/1788475704), [Test-Driven iOS Development](https://www.amazon.com/Test-Driven-iOS-Development-Developers-Library-ebook/dp/B007RNK0W6/ref=sr_1_4?s=books&amp;ie=UTF8&amp;qid=1521034350&amp;sr=1-4&amp;keywords=test-driven+ios+development) (Objective-C), or the seminal book, [Test-Driven Development: By Example](https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530/ref=sr_1_3?s=books&amp;ie=UTF8&amp;qid=1521034370&amp;sr=1-3&amp;keywords=test-driven+development) which uses Java.
Thanks, this is exactly what I was looking for
•: UIView has a property that you must set tot true to get multiple touches. •: touchesBegan() will get called with the new set of touches that are down, and the UIEvent argument has the specific ones that are new this time. I'm only copying touches into my own data structure because I'm not sure that touches are copyable. (I know that they weren't copyable when I started doing iOS programming,) 
Although someone downvoted it, you already have the correct answer on StackOverflow. Apple intends that the root viewController be a UITabBarViewController, and that each tab have, if needed, a UINavigationController, but you can tell the UINavigationController to hide its navbar until you need it. UISearchController needs it, so when you make the UISearchController visible, you also make its UINavigationController visible at the same time. Also, this is one of those things that changed between iOS 9 and iOS 11. In one of those, the UISearchController will go in the navBar in and the other it goes in the header of the UITableView. 
It can be around 100MB
I worked several years by building interfaces programmatically but it stinks not seeing how the thing is becoming. Xcode is a piece of crap in that sense.
I worked around it. I changed my firebase call from observeSingleEvent to observe which solves my problem, but I’m not thrilled that I couldn’t figure out the actual issue 
Isn’t there a way now in Xcode where you can create a “live” preview in Storyboard? By that I mean if you set a color or rounded corner etc programmatically it automatically updates storyboard...
I'm sorry, but yeah, that is way too much to ask for (unfortunately). Replacing autolayout? Autolayout is the result of a year-long effort to try to build a better layout system. They'll have some improvements, but replacing it? No way.
Tip \#13 has been implemented into the Bool Type in Swift now. By the same person.
You should try using `NSOutlineView`, which is a subclass of `NSTableView`. See here: https://developer.apple.com/documentation/appkit/nsoutlineview
that thing is so badly implemented that makes me cry. It is amateur hour big time.
Autolayout is designed by someone that never used a graphics design tool. It is counter intuitive and the error system is designed by a 8 years old intern that was never told the difference between a decent error system and an error system that tells you "something is wrong with some constraint. Verify yourself the ones you don't need". FUCK OFF. If the systems sees something wrong it must tell what it is. It is like saying: error saving the file, go figure out why. Fuck you Xcode team. Your "masterpiece" stinks.
It might be something with the way Ipad shows splitview. Im also curious about your way to set serviceArray var. You first empty it, and then set to something new. Why bother emptying it?
Yeah, it's because you're technically switching on an optional, of which the only cases are `.some(_)` and `.none`. Unwrap it first. As a side note, your data types should start with capital letters (i.e. `DataToSegue` instead of `dataToSegue`)
thanks for the clarification! 
No worries, this was only recently done. [Erica Sadun highlighted it.](http://ericasadun.com/2018/03/09/swift-evolution-and-civility/)
Working through Angela Yu's Udemy course. I just finished the Clima app last night.
I've just worked through it and followed along. I have quite a bit of previous coding experience (I work as a backend webdev, and I have coded a handful of Android apps before). Overall I think it's a good book. A few mistakes, and I wish it would go into more detail, and be a bit longer.
I am publishing my first own app for iOS - Videocado! In few words it is an app that that lets you watch the best, fresh videos in the internet without an end. We group videos by categories and then you can select one and see videos, and then another one, and another one, and another one... You get the idea :) Link for everyone interested: https://itunes.apple.com/us/app/videocado-daily-fresh-videos/id1344214552 
I’ve been dabbling in IOS development and I really like that book! Raywenderlichs books are awesome because they always keep them up to date 👍
I bought the RayW "space viking" book back in 2010. It's not so easy to learn to make games. One thing I would do is look at the options you have and what your goals are. The reason is that once you start learning a tool, it's really a pretty big investment in time. Think of doing a regular iOS app and the choices you have: C#, ObjC, Swift, JS, etc... It's better to just pick on based on what your goals are. Same thing with picking a data storage, you have full stack back end, or a plist, SQLite or Realm... So many choices. Right now, I'm trying to figure out what's best for AR, you have 3 choices right off the start just inside of Xcode. Tell us about your goals, have you looked at Unity?
SceneKit might do the trick. Do check out unity tho.
Do you even understand what Metal is and what is it’s purpose?
Hey yeah i've looked at unity, but I really want to open up my knowledge towards swift programming. I'm an electrical engineering undergrad whos about to complete first year with no substantial side projects. I'm trying to do something interesting which is why I'm interested in making an IOS game as I'm also trying to use swift knowledge to integrate a future arduino project into an app. I know C++, Python, HTML, CSS and dabbled in MySQL but I consistently overwhelm myself when I try to start a huge side project for my resume (mainly because I have no interest in it). My goal is to be employable by doing something I'm genuinely interested in.
I see where you're coming from, and I've also had my share of problems with autolayout. But that specific complaint isn't fair. Usually, you'll have a set of constraints like "this label should have 10pt offset to the top of the parent, 20pt to the bottom of the parent, should be 30pt high and the parent view should be 50pt high". So that's four constraints, and they don't work out. The error message may seem vague, but autolayout cannot possibly know which one is wrong, the best thing it can do is tell you the constraints that conflict - which is exactly what it does. You have to decide which one to change. 
Hey uhh SWIM is wondering if there's a free resource (*cough free pdf cough*) that you know of for that book you're talking about.
Haha I don’t know of any source to get them for free. But if you are serious about learning iOS the website has a ton of free tutorials and I think you can get the first chapter for free 🤔
Supposedly apples ebook about Swift is pretty amazing too! 
I'd be a bit concerned about an EE + programmer. CS/MIS + programmer fits a bit better. The reason for the concern is what they want in the market place. I've got a BS-MIS and have worked as a professional programmer for many years. What they ask for now for iOS is a degree + 3~5 years and several complex published apps. I'd be concerned with EE not being the degree they are looking for to get into a programming type job. You say 1st year, so you have time to change things around. Being an EE with programming talent is great, being a programmer with EE background could be great for embedded systems or something, but I'm not sure Swift is right for that. Lower level stuff is usually asm or C. Mixing web and database is kinda all over the map. You say you want to be employable. They'll look at things like CSS/HTML and pretty much ignore them if you're applying for iOS dev. I'd be concerned about trying to be a "jack of all trades". You need to go deep in a small number of directions. I'd spend some time finding a more precise direction. I've heard some bad things about being a game dev, things like being VERY competitive and really requiring deep, low level skills. The upside is that learning Swift after knowing other languages isn't that hard. I just spent the weekend doing 3 tutorials, two being AR (aug reality games) and AR portals. Even if I never get a dime from it, it was fun and only took a weekend. Dig in, but expect to back out and change directions just so that you've explored more paths.
You’re going to have to instantiate it in code and then set it as the second tab of your initial tab bar controller
Should've clarified I'm actually ECE as of now and will probably specialize down computer engineering. I go to Waterloo so we have 6 coop terms throughout our degrees with a lot of job opportunities from big companies. Pretty much the whole job market is programming, nobody cares about the hardware side. I want good coops so I need good programming side projects. Pretty much everyone in my program including upper years effectively are only after software dev jobs. Very little hardware opportunities.
I always give my viewcontrollers an identifier in the story board and I use that to instantiate them like I posted and push them on manually. I don’t like using segues. Other than segues I love storyboards 
I am in no means good at the language yet, but the iPad app “swift playgrounds” was an amazing start
https://developer.apple.com/documentation/ you can find the list of frameworks here.
I’m following a guide on Udemy which is very easy and usefull. Here is the link: https://www.udemy.com/ios-11-app-development-bootcamp/learn/v4/overview Let me know! 
It’s not so difficult. It’s a single view app with some textfield, a button and a Label. You just have to remember to create a function which checks if all the field are filled
I highly recommend taking a look at [Hacking with Swift](https://www.hackingwithswift.com/) there is some free content that is perfectly suited for beginners, like: [The free tutorials, 39 in total](https://www.hackingwithswift.com/read) (well, free as long as you don't want to have them as a pdf ;) ) or [Swift in sixty seconds](https://www.hackingwithswift.com/sixty) which is a short series of videos that explain basic concepts in swift And the best part is, if you decide to buy some of the more advanced stuff you'll get free updates for future versions of Swift, iOS and co!
I have a udemy swift account! but there are always those hard-to-google-easy-to-ask questions, and no, devslopes (the forum you get access to if you buy the usemy lesson) can't always answer them.
Well those issues that you run into that are "hard to google easy to ask" are great opportunities for you to learn how to debug code effectively. Look into debugging practices and tips/tricks for the environment your working in and learn to debug effectively. It will be a good portion of your job as a developer so learning how to do it well early definitely won't hurt you. 
what small town are you in?
The modern Apple guides in iBooks are pretty good read coming from an Obj-C background. The only area it felt lite on was optionals and boxing. But I had experience elsewhere to help.
[removed]
what's the deal with that website? i have to log in through facebook? there's no account creation apparently. at least 1 typo on that page. all in times new roman so looks sketchy. but seems like they teach good stuff! have you used them before?
Ok, ECE is new to me, just did a quick look up, looks like a CompSci. Yea, hardware isn't the hot market. Ok, so in that case, I'd jump into Swift and run with it for a while, but don't overlook others. Have you considered AR games? I've been looking into that myself just for kicks, just did my 1st portal last weekend and bought the Unity/ARkit portal tutorial. Already have a few ideas for AR in regular (non game) apps.
Lots of good stuff. Strongly disagree about `add(_:...)` as a wrapper for `addSubview(_:)`. Swift's naming conventions exist for a reason. It doesn't make sense to "add" 2 views together, and eschewing labels just to type slightly less doesn't make sense to me.
Most schools just can't keep up with the latest tech. You have Stanford and others that do a great job keeping up, but I see major colleges that don't teach Swift, ObjC or iOS. Programming is really a sit and think kinda thing. One thing you can do is get involved with remote group projects. I've been trying to get some going, but it flopped right out of the door because the problems were right at the start. Get all the tools, Slack, LinkedIn, version control (GitHub), run the tutorials and then start getting involved in group tutorials. Just don't expect everyone to stick with it. People lose interest. One of the best skills any programmer can have is persistence.
Helping fellow developers with hard-to-google-easy-to-ask is half the reason I'm here. The other half is when I have such questions myself. As someone else said, programming is ultimately a solitary activity, so work on learning how to teach yourself. But you're not entirely on your own, don't sweat that. What good is a developer community if we can't help each other out?
Nice video! Might be worth mentioning that if you're going to use a closure to initialise your lazy variable, if you're capturing self, it's a good idea to capture self as [unowned self]. The variable is guaranteed to have exactly the same lifetime as self in the case of a lazy variable and we're now guaranteed to avoid any potential retain cycles. Keep them coming! Nice one!
I learned how to program on IRC. If there’s a will, there’s a way.
Huh really. I am fairly new to swift, only 3 months of development experience so far, didn't know that. So let me confirm again, my design has to be like [this](https://imgur.com/ZIP5Beh), where the search controller will be in view controller blue, and yellow?
Treehouse has an excellent course that’s $25 a month. It’s online and one of the best swift courses for absolute beginners out there.
Find some tutorials, make something, share source code and ask for comments and feedback. Participate in discussion forums such as here on reddit and stack overflow. Ask specific researched questions when you get stuck, and eventually you’ll be able to answer questions from others. Learn best practices. Draw influence from apps that you admire. Code regularly to keep the momentum going. Stay up to date with the OS, Xcode, SDKs, and device specs.
Yes - Each tab has as its root a UINavigationController, and you hide the navbar until you are ready to use it. Some actual code from a working program (unless I made typos retyping this) let searchController = UISearchResultsController(searchResultsController: nil) searchController.delegate = self searchController.searchResultsUpdater = self searchController.dimsBackgroundDuringPresentation = self if #available(iOS 11. *) { navigationItem.searchController = searchController navigationItem.hidesSearchBarWhenScrolling = false } else { tableView.tableHeaderView = searchController.searchBar searchController.searchBar.sizeToFit() // needed for iOS 8 } }
Actually in all my tabs, I have a bar button item set at left, so lets say I change my structure to cater for this search controller, meaning I have to add the bar button item at every tabs, along with the search controller? So ill end up with 5 bar button items, 5 search controller, given that my app has 5 tabs?
Yes. But you can take one a single controller and instantiate from the storyboard multiple times, installing each instance as a tab. You don't have to draw out everything explicitly in the storyboard.
I dont get what you meant. Do you have an example?
&gt; Problem is, in my location there are no classes on swift programming language or objective c. It's a shame you don't have the Internet at your fingertips. /s Treat this as advice to use it.
I'm sorry, no. I don't have an example. Although I've been doing Objective-C for a dozen years, I'm a novice at Swift.
Try Intro to App Development with Swift and App Development with Swift by Apple. Both can be found on iBooks Store
True! Learned something new. Thank you for the explanation, makes sense.
download Xcode, then do File &gt; New Playground. then write some code and see what happens!
Yeah I learned it a while back and was like :o. I just captured everything like Pokemon tbh. It definitely never hurts though if you just like consistency across code. Nobody will ever be like "HEY!" [Also, here's a resource I keep on hand. Sometimes I just flip through it to stay sharp. At the very bottom he goes over the stuff dealing with closures.](https://krakendev.io/blog/weak-and-unowned-references-in-swift) It's also in the official swift docs on Apple's page but I prefer Kraken's page since the Apple page is a little confusing. The Apple page will make *way* more sense after reading Kraken though.
The Foundation HTTP/network strategy is likely going to be important in a mobile app. The main class is `URLSession`, and it is the object which lets you dispatch individual `URLSessionTask`s (which are individual requests).
I swear this isn’t a cop out, but no matter what I say, it can only be understood in one’s core. I spent years reading and trying until I finally KNEW the need for it through touching the hot flame enough times. Main point is that it’s something everyone should keep trying until it clicks. But I will of course attempt to explain useful unit testing. First, if something is obviously a unit, definitely add tests. Things like algorithms and definitive input/output calculations. Don’t forget edge cases like divide by zero, empty string, nil, etc. But the creative unit test coverage comes from experience being burned. It’s mostly subjective and predictive, but you have to identify where a few problem categories occur and focus on them, such as: - code that is delicate - code that may be a source of previously significant bug tickets - any code your mind considers “scary” - code which may be tempting for some future developer to look at and think “pfff you could totally do this a different way. I’m gonna optimize this” but in actuality you tried that already and made a compromise bc of adverse effects - backbone code that affects major parts of your app’s architecture - code that if it were to be refactored (like splitting a method body into two methods) would likely cause some state to get messed up - code that touches global/Singleton state - cleanup code that “has to” get run before an entity gets dealloced - any code that unfortunately has keep two or more different variables in sync with each other Don’t harp about % coverage either. It’s a false canary. If you write your app super lean and testable, you actually end up with a lot more UIKit code, such as the boiler plate lifecycle methods of uiviewcontroller or notificationcenter, and that’s not the kind of code you need to test. Just make sure your hardcore custom logic code is 100% covered and you’ll be super confident with every feature and bug fix you do. It’s a great feeling. The best part is after you get good at writing proper tests, you end up writing better code that makes some tests irrelevant. It becomes a feedback loop of development skill improvement. I was astounded the first time I deleted tests bc I used the Swift type system in a clever way to make sure it was literally impossible to fail that test. Deleted tests, reduced some code, and have a safer/ more stable feature all at the same time? Whaaaaat? 
Sorry, replied to the post instead of this comment. Hopefully you saw it
It’s called Trausella, in Italy