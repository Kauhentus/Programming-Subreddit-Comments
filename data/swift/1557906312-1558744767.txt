make your function a static method to a class. for example: &amp;#x200B; class global { static func sayHello(){ } } and call it without creating an object like this global.sayHello()
I recently finished producing the [100 Days of Swift](https://www.hackingwithswift.com/100), which starts from scratch and works through building iOS apps. It's updated for Swift 5, it has tests and challenges, and more.
Thank for your help. &gt;but for now I think that you have a problem because first you are popping view controller from the navigation controller, How else should I do it? I am basically presenting a View which allows users to buy the pro Version. I want that view to disappear from all the VCs as soon as one buy the pro version. How can I do it? Right now I am sending a notification and then use the code I posted in the function dismissProVC, it works but there is this problem of the black screen sometimes. The code to show the pro VC is the following: let proViewVC:ProViewViewController = ProViewViewController(nibName: "ProViewVC", bundle: nil) proViewVC.modalPresentationStyle = .currentContext self.navigationController?.present(proViewVC, animated: false, completion:nil) proViewVC.cancelButton.isEnabled = false proViewVC.cancelButton.tintColor = .clear
Well, i guess that xibs are good if you have relatively small project to bootstrap in limited (quite) amount of time, or your typing skills are bad, or you are a designer trying to code, whatnot, but i just don’t see how they can be beneficial, especially on the long run. Maybe some engineer that utilizes them a lot would give solid contra arguments, but i have none.
Also, if you are dealing with a lot of similar ui elements, try adopting reusable ui components approach.
Check again friend! Check out Swift Language User Group (San Francisco) http://meetu.ps/c/21wmv/pFQ86/a on Meetup Check out iOS Peer Lab http://meetu.ps/c/2KSfD/pFQ86/a on Meetup Check out San Francisco iOS Meetup http://meetu.ps/c/47Skx/pFQ86/a on Meetup
It’s impossible to read you post.
In addition, simplify your post as much as reasonably possible instead of copy and pasting everything. If you can’t take the time to condense your problem why should anyone take the time to help you solve it?
You're missing a new line character
Look for tutorials involving UIKit Dynamics.
I’m using the unwind segue function but my app still force closes for some reason.
Of course you do.
Read the stack trace.
This exists. You just alt-click on the variable.
Done. Check out v.0.0.2. Thank you.
Done. Checkout v.0.0.2. Thank you.
/u/TheRickiestMorty thank you - just to make sure I understand this: there is no way to unit test a function without putting it into a class? (That seems very Java to me!)
here is an outdated workshop of mine which may help you. it’s not a video and some of the swift is out-of-date but hopefully at least the screenshots help you. https://github.com/riconaranjo/iOS-Workshop/blob/master/README.md
Thank-you! This saved me a lot of grief!
Its a very advanced language suitable for beginners.
I think it’s a great starter language. Python potentially has more beginner resources and is arguably more flexible over multiple platforms. Swift is really only going to be for the Apple ecosystem and server.
it’s good for beginners and there are tons of resources online. python and ruby are also really easy to learn with and similar to swift, and have tons of resources too.
The swift syntax etc is fine but you'll reach a stage where you realise that none of the swift/ios teaching materials seem to want to teach fundamentals such as good object oriented planning/design. Sure they'll tell you what an object/class/struct is and give "here are some I made earlier" when you're doing the paint by numbers projects, but swift still doesn't seem to have the type of in depth material aimed at beginners (to programming/oop and not just ios) that languages like Java/Ruby/Python do. Most swift programs seem to take the easy option of assuming you already learned OOP in another language.
Swift should be really easy to pick up if you're just starting out. There are some advanced concepts that you'll run into eventually if you keep going further on down the rabbit hole, but that's true of any programming language. Just know that Google and Stack Overflow are your friends. If you run into a problem, chances are someone else has as well.
Quad core or six core? I'm thinking of getting the 2018 one with an i3, quad core. Should I?
Hi, I'm interested in trying this. Is it suitable for people who don't have a foundation in another programming language/don't already understand oop design/mvc(not in terms of the syntax for making structs and classes but in terms of guiding the student towards an understanding of how to design their own oop app, if that makes sense...) . I've tried a few other courses and they were ok at teaching swift syntax and some templates for different types of app but not so much at helping the student understand good oop design practices etc.
I will when I get home from work.
If you're just dipping into the whole programming thing, then I'd say get the base model with the quad. It's the cheapest and most affordable. That also means you'll be able to resell it very quickly if you want to move up. Currently I'm using that particular model for a build server. I started with a base model MacBook Air some years ago. When I found really liked iOS development, I sold it and got an MBP.
where did you define "navigationItem"? - i don't see it in your code.
I know this is swift subreddit and there are many recommendations of swift. And I really love this language and think it's amazing. But I don't think it's a great beginner language. It's not as easy as python or js. It's also not as universal. If you want to learn a programming language fast for practical usage and easily, learn python. If you want to have good understanding of programming languages learn C and than C++(with this you will understand Swift better in future).
Controversial question (at least outside of this sub) but I would say yes, it's perfectly fine for a beginner. Is it the best first language? Probably not. Languages like Javascript, Ruby and Python are a little more forgiving and are probably better for an absolute beginner. But if you're interested in making iOS or Mac apps, don't worry about what "the best" language to learn is and just jump in.
I’m trying to cross reference my Udemy classes but it’s a huge pain in the ass.
OOP = “object oriented programming” for those who dont know
Swift and iOS and great for beginners. It was my first language and I think I turned out okay!
Hahah, I've been at this programming thing for a few years now, but never on a Mac. My daily driver is an Ubuntu laptop on which I first got into mobile development (using React Native) and I came to realize how useful a MacOS machine would be for this stuff. I appreciate your input, thanks! I'll still go with the base i3; based on my research, it should be good enough.
I would also suggest Java, since it's also easy to learn and has a similar OOP structure (ex: protocols are Java interfaces) and Java could potentially give a learner some opportunity to work in Android. But there's no harm in starting as Swift.
Yes, but you should learn stuff like https://www.raywenderlich.com/599-object-oriented-programming-in-swift when you want to learn programming. Also be sure to get your algorithms in order before learning any language.
Late 2018 MBP 13”. 16gig/512ssd. Has the Touch Bar that I actually like using (hopefully that won’t trigger too many down votes haha).
I read about objects in js, same thing?
I’m trying to save a crossword puzzle to Core Data. I only have one entity with a transformable for the 2d array which is my best guess for saving , and a string for the title.
I believe so. Not a programmer, just have read alot about swift
All of the courses will teach you WHAT an object/struct/class/inheritance is and show you examples about animal and dog, vehicle and car etc, but training you to actually know how to design your app around classes that interact with each other is another story. With languages like Ruby there are well regarded books like "Practical Object Oriented Design" by Sandi Metz dedicated to the topic, and I have no doubt java and python have similar books due to their widespead use as first languages at universities etc. But swift is a more "figure it out for yourself" kind of situation at the moment, which makes it more of a slog than going with a language that has a lot of teaching material that is genuinely aimed at beginner programmers.
Yes. https://www.apple.com/swift/playgrounds/
Both are good and both are created for different purposes. "Everyone can code" will learn the absolute basics of Swift language and how to use it to create apps. This will also show you the basic functions of XCode and most fundamental libraries which are necessary in iOS programming. "The Swift programming language" is focused only on Swift language. It's great resource if you want to know the language well. It will learn you not only basics but also the advanced parts of it. But it will not show you how to use the tools for practical programming. If you are a beginner I would recommend starting with "Everyone can code".
This. &amp;#x200B; The time you spend learning the restrictions that make Swift safe and secure is paid when you need less time tu dbuild and debug.
Thanks for the link! It helped my understand the getters/setters in Java fully, as well as Swift props. Another question though. If one wanted validation for a property so that it can't be faulty. Could that be done in the didSet routine, or will it be wrong for a short period of time then? This is easily done in a setter method, and it may possible throw an exception if it was set to a illegal value.
While I don't want to put you off, it sounds a bit like you're trying to run before you walk – understanding good design practices is something that takes a year or two to even get started with, and realistically take much longer to master. The course doesn't teach you bad practices, but neither does it go out of its way to teach you about design patterns and architectures.
sorry, I agree it looks terrible, was done on mobile phone.
Any language can be used to learn programming. The challenge is to learn basic programming concepts (data types, variables, control flow, functions, and object oriented programming) before you start trying to understand the features of a programming environment like Swift. as u/UnloadSeg suggested start with [https://www.apple.com/swift/playgrounds/](https://www.apple.com/swift/playgrounds/)
Thanks for the reply, I'm not remotely put off. I've been putting a lot of time into learning swift for a few months and I'm really enjoying it, even if I do sometimes wonder if python or java might have offered more guidance for a beginner. I appreciate what you're saying, but I think I might have inadvertantly made my goals sound more grandiose than I intended. I'm not expecting to make an OOP masterpiece, just talking about that jump from understanding the theory/syntax of structs and classes etc to being able to plan and apply them in an app. But maybe that's also running before I can walk, I don't know :D Maybe I just need to spend more time with a pen and paper or trying to make something. Anyway, I'll check out your course. Thanks for making it available and apologies for rambling :)
Yes, equally suitable for beginners to learn programming as advanced usage. If you have access to an iPad I would definitely recommend taking a look at [Swift Playgrounds](https://www.apple.com/swift/playgrounds/).
The existence of Swift Playgrounds for iPad shows just how beginner-friendly Swift can be.
js has a different approach than probably any other language. You can do OOP to some length in js but it’s definitely not a text book example on the matter.
Has there been any actual research into how much time is needed to "build and debug" Swift programs versus other languages? Lots of languages claim this, and they can't all be right.
Not exactly. Because of this, Apple specifically avoids the term in their Swift documentation: &gt; An instance of a class is traditionally known as an object. However, Swift structures and classes are much closer in functionality than in other languages, and much of this chapter describes functionality that applies to instances of either a class or a structure type. Because of this, the more general term instance is used.
For people who claim that a language as complex Swift is "good for beginners", can you give an example of a current programming language which you think would be *bad* for beginners? Or do you think that all languages are good for beginners?
Since you can only perform this experiment once on yourself, by what metric do you think you "turned out okay"? Does anyone ever say "I tried to learn to program with language X first, and it was a mistake. I turned out all wrong"? Don't they just give up and quit programming? Isn't this just classic survivorship bias?
Yikes
&gt; Also be sure to get your algorithms in order before learning any language. I love it. "It's great for beginners, as long as you're not really a beginner."
Swift is designed to be written with the assistance of an autocompleting interface. If working within the context of XCode and iPad (and interactive tutorial content) is acceptable, Swift is a pretty good option. I think that Swift is paradigmatically quite unique, and won't necessarily help you understand other programming languages. It has plenty of parallels but when combined all together, it functions differently. For a more portable, typical set of lessons with a potentially flatter learning curve, I suggest Ruby.
No. Javascript uses prototypes for inheritance and that's a differen beast though recently sugarcoated with *class* syntax. Also Swifts protocols make OOP in Swift more interesting. And in general there are not many resources about good OOP. I recommend books by Sandy Metz.
Then maybe they need to find better ones, cause the Swift toolchain is completely awful, especially compared to the Objective-C one. Refactoring is practically nonexistent, the debugger constantly loses it's connection, and one can barely work with the UI test suite. Considering these things worked with Objective-C, I call bullshit on your claims.
I define a language “good for beginners” being one that allows people to learn how to code one concept at a time; they shouldn’t have to worry about verbose syntax that just confuses them before they even learned the basics. _context: I learned programming through school via C++ —&gt; C —&gt; Java —&gt; C and on my own time I learned some Java, Ruby, Swift and at work C# then Python._ Looking back, there were things like `malloc` and all the verbose syntax of C/C++ that hinders learning basic programming principles and just confuses you were you’re just starting out. it’s easier to learn how write simple programming statements then learn functions then learning objects and classes, without having to also learn 100 tiny syntax rules or having to understand what `using namespace std` means when all you want is to print one value to see if your code is working. **to summarize:** you can probably learn how to program from most languages, but the better ones for beginners allow you to focus on the coding concepts and not the syntax
With the 100 Days of Swift you'll see it starts with all the basics of Swift, then a little revision, then goes into lots and lots of app building. You will learn some theory, but a *lot* more practice :)
&gt; You’ll see this line appear: @IBOutlet weak var mapView: MKMapView! Why do I so frequently see weak outlets in code posted here? Where did this come from? It's [not Apple's recommendation](https://developer.apple.com/videos/play/wwdc2015/407/?time=1943): "In general you should make your outlet strong, especially if you are connecting an outlet to a subview or to a constraint that's not always going to be retained by the view hierarchy. The only time you really need to make an outlet weak is if you have a custom view that references something back up the view hierarchy and in general that's not recommended." `MKMapView` is never going to point back at your custom VC and make a retain cycle. You're just wasting memory on side tables.
The apple Intro to App Development goes over many of these concepts. and the playgrounds are quite nice. I have been going through it with my 13 year old son.
Fair Point. Anecdotical: I mostly use Swift, Python and JavaScript. For me Python is the easiest to use. But some times in Python I inject defects that strong-typed languages and the use of optionals or enums could catch. In the other hand, Swift seems cumbersome compared with Python, but I think my defects are more logic related.
Would you please include a gif example?
&gt; Could that be done in the didSet routine, or will it be wrong for a short period of time then? Yes, but there's not much you could "do" there. Properties (currently) don't support throwing exceptions from their `get`, `set`, `didSet` or `willSet` blocks. There are three approaches I would take: 1) My most preferred is to make it illegal to construct illegal values. For example, `URL` has failable initializers, which ensure that you cannot make a `URL` value that isn't a valid `URL` (according to the specification, but that doesn't mean you can't make URLs to websites that don't exist, for example). Fundamentally, `URL` doesn't do much that `String` couldn't be made to do. But by wrapping a `String`, limiting the values that could be use to initialize it, `URL` has become a safe wrapper. When your function takes a `URL`, you don't need to do any validation to ensure it's a valid URL. By the mere virtue that someone was able to call your function, having supplied a `URL` value (which you know could only be constructed if it were a legal `URL`), you know that you're dealing with a valid `URL`. 2) For a given type `T`, you make a `TBuilder` class that allows you to set the fields and run whatever validation is necessary. This is nice because it isolates data validation from the rest of the responsibilies of `T`. 3) As a last resort, you could use setter functions that `throw`, but I would quite strongly recommend it.
Sure, C is just primitive and lacking in quality of life and safety features, and C++ and Java are cumbersome and overly-verbose, requiring far too much code to accomplish simple tasks. Perl is just a confusing mess with a dozen ways to accomplish any simple task, each marginally more efficient and much more illegible than the last. Meanwhile, Swift, Python, and TypeScript are all great languages to start with, that let you get up and running with simple programs without having to understand everything out of the gate, are good for short scripting applications, and (if you're using type annotations with Python) scale up to complex systems applications.
I would suggest anything by Paul Hudson. He had a butt load of content. Recently he has done Swift on Sundays where he live streams an app from start to finish and takes questions etc. Check out his website at [HackingWithSwift.com](https://HackingWithSwift.com). He also has Swift in 100 Days which is a 100 day curriculum for learning Swift with 1 hour each day. [https://www.hackingwithswift.com/100](https://www.hackingwithswift.com/100)
Swift has a gentle start and then a cliff face. There are many languages that are worse for beginners, but I would encourage you to look at Python instead.
C/C++ is not a good beginners language, and java is a bit meh. Lisp is...debatable, at best. Swift is deceptive. It starts easy but quickly throws you into the deep end.
Minor nitpick: Python is strongly typed\*, just like Swift. The distinction I think you should be drawing is that Python is *dynamically* typed, whereas Swift is *statically* typed. \*Actually the strong/weak distinction is poor because there's no real definitions for those terms. You can use the comparatively (e.g., Python and Swift both have stronger type systems than Ruby or Javascript), but just saying a language is "strongly-typed" on its own doesn't mean enough. It would be better to focus on type *safety*, and Swift and Python are both relatively safe languages (if you understand that Swift's type system is nominal and Python's is structural).
Are you using Python’s type annotations? Using those will allow your IDE to catch a lot of typing issues, though it isn’t enforced at run time.
You can't "set a value" on a switch that you can add. A switch is either on or off. What you could do is have a class like this class MenuItem { let name: String let price: Double var selected: Bool } Then, you can have an array of `MenuItem`s, and use that array to build your UI, which includes labels for the name and price, and a switch. Then, your switch can be responsible for updating the corresponding `MenuItem`'s `selected` property. And then lastly, you can just go through your array, and add the prices for the items that are selected.
I think I've seen a few papers in the past year or so that are interested in answering questions like this, but I've not read them myself so I don't recall them specifically. That said, this stuff is generally hard to quantify because there are so many variables at play, so we mostly rely on anecdotes provided by people who work at the intersection of PL research and pedagogy such as Shriram Krishnamurthi at Brown. Actually I imagine if anybody's published something like what you're after it might be him or a colleague he's worked with.
JS uses a prototypical inheritance form of OOP, which it got from Self. Lua also features prototypical inheritance.
I'm not aware of one, but if you reply to this comment with your question I can help you out as soon as I see it.
I'd definitely go with the table view option. It's easy to add new rows and delete unwanted ones, and it'll handle the scrolling and layout for you pretty well.
Java, C, C++, C#, Haskell, OCaml, JavaScript, Perl are all languages that come to mind when I think "bad for beginners". (Java is perhaps the least bad among them, but I think it forces OOP, which may cause the novice to think *everything* should be done in OOP, which I don't believe to be the case.) I would rather introduce somebody to programming via Swift (for imperative/static), Python (imperative/dynamic), or Racket (functional/dynamic), though each of these also has some drawbacks.
It’s the frameworks and programming conventions that take time to learn after you learn the syntax.
What stage do you consider the cliff face?
Protocols and generics can get overwhelming quickly, and often come about the same time you are digging into Apple frameworks like UI kit and suddenly have to deal with OO principles like delegation. The frameworks are heavily OOP but the swift interface is sometimes OOP and sometimes utilize more fancy swift language features. The gap between simple playgrounds and all the moving parts of an app is pretty big.
When I connected my outlet to my code, Xcode automatically generated it as weak
Storyboard (as with .nib / .xib) is essentially an injection framework. So if you’re asking if IBOutlets can be used after construction, then no. But you can assign the variables at runtime if you really want to.
Which book by Sandy Metz would you recommend? Her newer one (99 bottles) or her 2012 book on Object Oriented Design?
Thanks for this. I couldnt find these groups on meetup app
I would try and make it easy on yourself at the beginning. Placing the table view under the cursor means you’re going to need to find the position of the cursor and make sure the suggestions table view does not get hidden by the keyboard. One UX solution to simplify this would be to add another accessory view above the keyboard that shows your suggested autocomplete periodic table elements. You could even do something cool like when tapping the periodic table button hide normal keyboard suggestions (with UITextAutocorrectionTypeNo) and then make your custom view replace it. That way it will look like the normal keyboard suggestions are showing your custom periodic values. When the user taps one of the values you can insert your custom text into the text view. Does this make sense?
Is that even possible? I didn't know that Office exposed any API's that Swift could use to do this. I'm not aware of any tutorials for this. Do you know of any ios apps that do this today? If so, try contacting those developers for guidance.
You should start with a sound comp-sci course that grounds you in the fundamentals. You can learn Swift concurrently but I’m a big fan of ground up education when it comes to programming. Except for a few concepts that take sometime to wrap ones head around advanced languages are often “easier” to learn. Python for example could be described as advanced that is often suggested as a starter language. The thing here is that I don’t see being easy as the best way to grasp underlying concepts thus my focus on bottom up education. So in a nut shell being advanced makes many things easier. The other consideration here are your goals. For hobby programming you can focus on one language. If you have any desire at all to develop as a professional you must learn at least a couple of languages.
If somebody can’t understand “using namespace xxx” in a few minutes time they have no business learning programming.
Thanks but you lost me when you add a nav item to map view
Being forgiving isn’t conducive to learning!!!! A compiler that rejects your code regularly is one of the best ways developer the deeper understanding a good programmer needs.
This is why I recommend a comp-sci program. The language isnt as important as the concepts and a bit of understanding computer architecture.
Why not use something as simple as a CSV? It is extremely easy to produce and modify, and you can get good integration with excel by importing it as a data connection.
Ok, thanks for your suggestion. How would I create a custom autocomplete Keyboard Accessory? Is there a class or library for this?
Here’s an example [link](https://medium.com/@thedan84/how-to-set-up-a-keyboard-input-accessory-view-programmatically-4f78f0420351)
Easy to learn, hard to master. In general when you're learning, things are very easy to do with brute-force methods, but there are often MUCH easier, built-in ways to do them. Most languages will have this "feature" for beginners, but the fact that it's built into the foundation rather than "oh yeah, this third party library is what 99% of the industry uses" is a nice plus. &amp;#x200B; I'd say the most useful way to develop swift in a "learn programming" way is to go on something like leetcode, come up with your answers, and then look at the faster and more efficient solutions. Many of the most efficient you won't understand right away, but take a look at all of it. This strategy will help you learn the best ways to do things, but the why might take some digging
Sorry, I probs didn’t explain that well. I know how to make a Keyboard Accessory but unsure how to make the autocomplete feature... I guess it needs to somehow parse the current text on the UITextView?
MacBook air 2010. Would not recommend going this cheap but I bought it for $140
Yes check out the UITextViewDelegate protocol. You can have the custom accessory view implement the delegate of the text view so it can keep track of what is being typed
Thanks but still can't get past building UI out
You can learn many algorithms without ever writing a single line of code. A good example is sorting algorithms, something like a bubble sort can be done with children's alphabet blocks. Another would be some of the algorithms for math such as division.
what do you mean?
Beginner
Disagree strongly with beginning on a dynamically typed language - no boundaries and more inferred behaviour leads to lack of learning and confusion. Java is a good starting language.
Absolutely correct.
I have an autocomplete library that could really help you! https://github.com/nathantannar4/InputBarAccessoryView
If you have a mac you can use Xcode to actually build an app.
Like the other guy said, it's the auto generated code from xcode Can you elaborate on what you said about wasting memory? Weak variables have a memory impact?
Apple makes a big deal about Swift being “protocol oriented programming” more than OOP, and they stress that you should rely on value types and avoid class inheritance in most cases. A few good WWDC session videos on these topics are available now, a couple new ones are added each year.
I am having issues adding the add to button to the view that holds the map kit
I'm just gonna write the app in Flutter/Dart. I mostly use Android so not that familiar with xcode. When I did get it working the app would just force close on me once I unplugged it from my machine so I can get a stack trace/logcat lol
SwiftGen - Heaven on earth combined with twine
How is python similar to Swift?
Try some open source projects on Github and see what the code looks like. Build features/make modifications to them. Theb build your own app, and use those projects when you get stuck
Can you clarify what you mean by “expandable tabs”?
this is just how you woul create a global function into a project. I haven't used Unit Tests in XCode/Swift yet as my projects weren't as big, so I can't really tell if there is an other option for that, sorry.
I enjoyed both. *99 bottles* may be a more methodical, but I'd say *OOD* shows more angles.
Snapkit - an auto layout lib, allows to build interfaces super fast
Swift is not the easiest language out there but it's quite consistent. But it's medium-sized, between C# / C++ on one side and Objective-C on the other. The really hard part about Swift is that you'll probably use it to build iOS applications, which is a very big skill to master since it covers so many API's.
Check out hackingwithswift.com
Interesting...how would I use this in a UITextView?
AppCode, best editor and debugger. Also have neat evaluate expression built in debugger so you don’t need to write down evaluations in console. Editor has live templates where you can make snippet like templates for quickly inserting and editing blocks of code.
IQKeyboardManagerSwift
Should try [anchorage](https://github.com/Rightpoint/Anchorage)
Sourcery for code generation. Especially handy for multilayer protocol conformance support, https://github.com/krzysztofzablocki/Sourcery
In order to learn something practical you have to do something practical. Make an app, any app. It doesn’t have to be fancy or complicated, just think of something you would use yourself and implement it.
Tools: [Carthage](https://github.com/Carthage/Carthage) [CocoaPods](https://github.com/CocoaPods/CocoaPods) SwiftLint as mentioned in the original post. An addition =&gt; Not a tool, but a framework..! [ATGValidator](https://github.com/altayer-digital/ATGValidator) for form validations.
OK interesting, so Swift can bridge structs for free to C where Objective-C is forced to map through NSObjects. The theoretical speed of Swift is the same as C, you just need to write some ugly ass unsafe code to get it.
Xlsx standard is publicly available https://docs.microsoft.com/en-us/openspecs/office_standards/ms-xlsx/2c5dee00-eff2-4b22-92b6-0738acd4475e. There are numerous implementation in different languages.
Here is a link to one of the Stanford ios course lecture videos. You can find them all from this one. I think they are very good. https://www.youtube.com/watch?v=xkpuJejkWUI
Off the top of my head, create a custom inputAccessoryView with buttons that you update the titles on appropriately.
You can do some really clever stuff with sourcery, we currently use it to generate dummies and spies for our unit tests. I've been on again/off again trying to use it for generating mocks, but I haven't been able come up with a syntax I'm happy with yet.
I would never recommend R.Swift. The reason is it will just make your project not consistent and basically make mess of it... &amp;#x200B; My list would be: &amp;#x200B; 1. Swiftlint 2. RxSwift 3. IGListKit
Regarding R.swift. how so?
Xcode, a keyboard, and a genuine Macintosh computer.
How do I go about listening for text in the UITextView and then comparing it to a list of words in a database? Will the view on the inputAccessory just be a UILabel?
Started on a new app at work and tried snapkit. Oh my gosh it’s awesome!!!
The way web dev is going (...not exactly towards speed and efficiency), I'm doubtful that you could continue to browse the web without any hiccups three years from now. Even today with a 2018 MBP it's hard to get full 60 hz at all times. But when it comes to swift development, your 2015 is going to be just fine for another three years. It would really help if you could tell us why there's no option for you to wait 1-2 years instead of 3...
A better compiler that isn’t slow as ass and an IDE that doesn’t take a shit because you typo’d a few lines up and didn’t notice it.
Not my list, but thought y'all might appreciate this if you don't know about it yet: https://github.com/matteocrippa/awesome-swift
&gt; It would really help if you could tell us why there's no option for you to wait 1-2 years instead of 3... Moving. To buy an item after this month, I'd have to pay about 50% extra due to ridiculous taxes. Also probable economic crisis
At my previous work we were using FlowKit (now [Owl](https://github.com/malcommac/Owl)), which IMHO is much better than IGListKit. We tried out both before settling on FlowKit. Since IGListKit is written in OBJ-C, it might be better for absolute maximum performance, but FlowKit is much more Swifty, and much more convenient to use
I’m still using my 2013 pro. I’m waiting for an actual good model from apple before replacing it
[Everything Ive read is that Swift is faster...](https://yalantis.com/blog/is-swift-faster-than-objective-c/)
How can I be sure it's genuine? It says "P-P-P-Powerbook!"
syntax-wise: they don’t have semi-colons and uses operators in the same way — as opposed to other languages like objective-c or lisp. _there are many differences for sure, but visually (just writing simple code) python and ruby are the most similar to swift_
that’s strange, well good luck
Of course Xcode, however third party could be: (feel free to check this [https://github.com/matteocrippa/awesome-swift](https://github.com/matteocrippa/awesome-swift)) \- [https://github.com/realm/realm-cocoa](https://github.com/realm/realm-cocoa) \- [https://github.com/Quick/Nimble](https://github.com/Quick/Nimble) \-[https://github.com/Alamofire/Alamofire](https://github.com/Alamofire/Alamofire) &amp;#x200B; Bonus: SwiftLint
AutocompleteManager is an object that manages the UITextView
Sorry, misworded that, I'll edit. I meant since it's written by Instagram. I'm assuming their optimizations are more aggressive than a single random dev
Use objective C for this part.
Why would you recommend both Carthage and CocoaPods??
I've fallen in love with https://github.com/realm/jazzy as of late.
I have a MBP same as you, i use it for 4 years and i will continue for 4 years
How does it compare to Xcode, pros and cons?
I personally prefer Stevia
For double the packages, of course
You can register an action when keyboard appear. Then add an view just above it like suggestion view. When user type in keyboard, search it in your DB, very easy
The SwinjectStoryboard library took a hit from this limitation, and it was solved by using another hack to inject code into at class loading time: [see this PR](https://github.com/Swinject/SwinjectStoryboard/pull/114/files). Maybe it helps your project too.
Obj c lol
Those are terribly written benchmarks. Sometimes the inner loop has extra function calls, and sometimes it does not. They only test collections of String/NSString, not any other data type. There's no test of polymorphism, or anything even close to being dynamic. You might as well write this in C. This is one of those cases where you can take once glance at the source code and guess that their nice big pretty bar graphs are *probably* not showing what they think they're showing.
- It’s not as pretty. - it doesn’t edit storyboards graphically - it’s more functional, powerful, and customizable
If have to be weak. If not you have got a memory leak
Hate to be rude, but Autolayout really is garbage tier old shit by now. Snapkit is just a nice coat of pain on top of old smelly shit. It was alright in 2015, now the competition in the layouting space makes it a joke. The point is, if you're going to use an opensource library for programmatic layout nowdays, you should use a non auto-layout based one like Facebook/Yoga. It's much more expressive and has far, farrrrr superior performance. There's no bs around "breaking conflicting constraints" and layouts can be written and modified far more easily. There's also a nice fluent API Swift wrapper around Yoga [https://github.com/layoutBox/FlexLayout](https://github.com/layoutBox/FlexLayout) I'm sure there's gonna be people who think Snapkit is the best shit since sliced bread, I used to be one of these people, but you're wasting your time using that shit. Seriously.
This is really good advice. I’m going to make some basic to do apps and the sort to get the hang of those things
I have the 2018 15" model for work and it gets uncomfortably hot for typing without external keyboard. If you don't mind desktop then buy a Mac Mini, otherwise don't really see why you should change.
It's trash don't waste your time.
This series is really good! I have watched the first one and I think it will help a lot!
Okay well pick one of the fifteen different medium articles on the topic. I just grabbed the first one. They almost all say Swift is faster, and the reasons are because its static versus dynamic.
Look into “shouldChangeTextInRange”, or something similar, of the UITextViewDelegate in order to get the text being inputted. The input view should be buttons (perhaps a dynamically updating stackView of buttons) in order to send the appropriate titleText of the button to the selector handling the updating of the textView.
I have come to the conclusion over the years that there are no good "beginner" languages. Every language has something that will screw a beginner up. I'm sure some are worse than others, but I can't even tell you which ones might be worse. I learned C++ as my first programming language. It taught me a lot about memory management and stack vs. heap, references vs. values, etc. You'd miss out on that with Java or Python. On the other hand, everything from "hello, world" to using third-party dependencies was way harder and more archaic to figure out, especially as a programming beginner. Swift is a great language and is easier than C++ in almost every way. On the other hand, a beginner can and likely will get tripped up over retention cycles, value vs. reference types, protocols mixing with generics, etc.
It is not trash, it just have higher learning curve.
As mentioned, biggest downside is lack of storyboard editing, so for that you will need xcode, but for everything else, it is much better. Better debugging, better wiriting/building code, better inspections, built in tools like REST tester and so on, expandable with hundreds of plugins (free).
I have a project that uses both vanilla autolayout (mostly anchor based) and FlexLayout and while the latter is nice, especially for cases where Autolayout is prohibitively slow (like highly complex tableview/collectionview cells), it’s no magic bullet. You lose out on some of the automagic bits of autolayout, which can add pain to supporting the full range of iOS devices, split view, etc.
I haven’t used AppCode, but I’ve used some of its other IntelliJ-based cousins. IntelliJ IDEs are great functionally, but they’re very clearly cross-platform in nature with various little behavioral differences (mainly in its text editor) that can drive you nuts if you’re used to working with Xcode, Sublime, Textmate, etc. Not a deal breaker or anything, but it can take time to adjust to.
You know man opinions are like butthole, everybody has one, some even more. So before saying that your opinion is shit, I’ll try that lib ! (But tomorrow know I’ m tired)
Out of curiosity, what value do your project(s) get out of Alamofire? These days I generally find myself either using plain old URLSession or using URLSession with an API layer like [Seista](https://bustoutsolutions.github.io/siesta/).
Yes! It provides you with a simulator so you can see how your app will look on phone/ iPad/ Apple TV etc! Best of luck!
Very cool ;) thank you!
It expands when you tap it then closes when tapped again
I made a mileage tracker app that does this. If I recall correctly, you need to create an MKPolyline full of individual segments from coordinate to coordinate. It’s been over a year since I worked on that feature, but it’s something like that.
Create MKPolyline from your list of coordinates: https://developer.apple.com/documentation/mapkit/mkpolyline/1452205-init Add created MKPolyline to map view using https://developer.apple.com/documentation/mapkit/mkmapview/1451964-addoverlay
I’d suggest using Firestore instead of RTDB and create a “users” collection, then a document in that collection with the currentUser.uid from Auth() as the key where you store your user’s properties. Reading/writing to Firestore pretty well documented.
My Macbook Pro 2012 runs amazing. I’ve had it for nearly 7 years now! It has 1TB Hard drive, 16GB Ram. Most of the new Macbooks are way too expensive for me, and seem like a downgrade in terms of ram/storage compared to what I have. I’d say your Macbook has at least a few good years ahead :)
They recently added a Sublime Text keymap to IntelliJ IDEA which, while not perfect, is a fantastic addition.
Just something to note that should be obvious is that you may want an actual device to test it on which takes seconds to set up, because features like camera, gyro, etc. won’t work on a simulator.
There's a lot of cool things about xcode! the interface builder and storyboards itself has improved quite a lot, and you can add your own designables, and see how it looks without even running! (i.e a custom gradient). There's a lot to learn, its easy to get discouraged. But have fun with it!
If you build your UI programmatically, you can preview it in XCode's Playground (Single View) instead of having to build your project each time to view it.
Waiting until 2022, simply because Apple is about to dump Intel processors in favor of their own processors and rumors are they will do the switch in 2019 or more probably 2020. Meaning that future OS updates and apps will start to migrate to another processor, as Intel's will be dumped.
Because \`self.GlyphLabel.transform.rotated(by: CGFloat(angle \* 2.0))\` is the exact same transform as \`self.GlyphLabel.transform\`. If you rotate something by 360 degrees, it ends up in the same place as it was originally, and the animation engine doesn't have anything to do. You can think of it this way: the animation engine does the "shortest" animation to reach the target. So if you rotate by 90 degrees, it'll animate it clockwise. If you rotate by 270, it'll animate a counter clockwise rotation by 90 degrees. If you rotate by 360 degrees, there's just nothing to do. To get what you want, you'll need two animations, each for 180 degrees.
What's the access level of your function? Try making it public, if you haven't done so.
Great stuff! Thanks for sharing!
Simulator can be much faster performance than your device too.
That depends on what you are writing your code for. MacOS? iOS? The AppleTV? A framework? A command line tool? Which?
&gt; for var i in 0 ..&lt; 10 { &gt; i += 1 Why are you incrementing _i_ inside the loop? That seems fishy.
Apples App Store doesn't have anything to do with GIT. GIT is a code version control system. The basic idea you state about branching and merging to handle new features and versions is correct from the perspective of GIT or most version control systems. &amp;#x200B; If you're distributing your App (iOS or macOS) through the Apple App Store then you handle updates through it's web interface and Xcode. This doesn't require that you use GIT, although most developers do. You use Xcode to push the built app to the App Store backend. In the web interface you can create an update for your application and tie the new uploaded build to that update. You submit the update for review and then can publish it. Users are notified of the update or the update happens automatically depending on the users settings. &amp;#x200B; You can/aren't supposed to push binary code updates through the app (from what I remember about the App Store guidelines). So if you're expecting to be able to silently push bug fixes or features requiring new code, I don't believe you could do that. It's technically possible, but not often done, and I don't believe it's "legal" in apps delivered through the App Store. If your updates consisted of updated content or something like that then you could do that silently by pulling the updated content from your server.
Literally all of these things can either be simulated or run locally
Thanks for the reply! I assumed they wouldn’t let you do that because there would be no point in them reviewing it if people could just change the code after the fact. Do you think the best way to have data that changes would be to incorporate an API that the app works off of? I am trying to update new games every few weeks to an app. An ever so changing game app.
What do you do on it and what's the cpu?
I know that, but that is not my question. OP was asking a question without giving important details. The purpose of my reply is to get him to ask the question better from the start. We have no idea what he is writing, nor should we assume. He needs to learn to provide specifics or he's wasting the time of the people he is asking for help.
I would imagine that each level could/should be designed as a self contained module. The code that runs the game uses each level module to create the level, think of a map, images, characters, ... All of that stuff is content and can be delivered without an update through the App Store. &amp;#x200B; Take something very simple for an example, a chess game. Now imagine you wanted to be able to deliver new boards often. A board might be described with a name and background image. Your chess app could hit a server and pull a list of board names with background images each day, or each day it's ran. If a new board is available in the list from the server that isn't yet available in the app the app can download the background and add it as an option. This is a very simple explanation from a very high level. A real app would need to worry about things like authenticating the server and handling new/updated content in a much more flexible way. &amp;#x200B; I haven't used it but from what I understand, Firebase could be used in instances like this, rather than rolling out your own entire backend.
i9?
&gt; you think we're hardcore, you should the Russian kids We all should the Russian kids.
Right? The new keyboards are awful imo, and 0 of the devices I use are usb C
I had no idea. Thats really cool!
Did not know this! Thanks for the info!
It's mentioned in the objc.io post, but [Chisel](https://github.com/facebook/chisel) is a must.
That’s a minus.
NICE. Seriously, though, I never spent so much time having to pre-think (compile-time) code. Apple even had a slide at wwdc last year titled “making the compiler happy”. Yikes.
[removed]
Alamofire is also built around URLSession, I personally think that it is mature, easy to understand and went well. However, I like learn about new frameworks and apis, but I still recommending Alamofire today :)
In Soviet Russia kids you.
Also seems kinda useless when using it in breakpoints. I wrote \`v "Selected - \\(selected)"\` and it said "selected" is not found in current frame. I use \`po\` instead, and it gives me the value.
But I tried rotating 180 degrees and it was instantaneous, too. Any idea why? I wanted the label to rotate smoothly like a clock hand.
A fresh, new take on a classic!
Hah, I've been missing them Flawless app spam...
Check out the Ray Wenderlich book titled something like “Advanced Apple Debugging” for the deepest look at lldb you can buy.
might I ask, why is a mac mini not recommended?
I don't see an obvious reason in your code why that wouldn't work.
I'm working on a predator-inspired screensaver for macOS: https://github.com/vpeschenkov/predator.
I just started watching some of “CodeWithChris” videos on YouTube. Haven’t done enough yet to say if it works or not though.
&gt; They were hacking the command line at 5, mastered `vi` at 6 I respect that this is the correct difficulty order
&gt; The theoretical speed of Swift is the same as C, you just need to write some ugly ass unsafe code to get it. Only in some cases. Also, there is nothing theoretical that prevents Swift from being faster than C in some (other) cases.
In your App delegate you need to ‘import Firebase’ and in the ‘didFinishLaunching’ function, you need ‘FirebaseApp.configure()’ Then run your app on either the simulator or your device. Sometimes you need to delete the app from the device and build/run again for it to connect to Firebase for the first time.
Holy moly! Thank you, I checked it out, but still found it difficult to get started with a platformer. Let's see if the video helps! Great job on the engine btw! :)
Xcode still does not autocomplete them AFAIK, but if you type them out enough then they will start to be suggested to you. It’s not yet possible to define your own, but there has been a lot of discussion on the swift forums about adding this to the language. You can see the available attributes [on the Swift language guide website](https://docs.swift.org/swift-book/ReferenceManual/Attributes.html).
Don’t worry man, all of us begin somewhere. I have nowhere near the kind of expertise you’re looking for, noob myself, but I’m sure someone here will help you out.
But I can't even import the file Part1.swift import Foundation func id&lt;T&gt;(_ x: T) -&gt; T { return x; } Part1Tests.swift import XCTest @testable import Part1 // this one errors out: no such module Part1 final class Part1Tests: XCTestCase { func testId() { XCTAssertEqual(id("X"), "X"); } static var allTests = [ ("testId", testId), ] }
Feel free to dm me if you’d like :)
Are you talking about table view cells? I’ve never seen expanding tabs before.
Sorry for being so eager, can we do it now?
Yep :)
I just created a new project with unit tests; I copy pasted your exact code, and the unit tests succeeded. Whatever your problem is, it's not the code, that's for sure. Maybe your test target isn't set up correctly, but I can't really tell from the code of course. Are you trying to import the swift file? You need to import your app's module (by default, its name is just the name of your project).
What's the context? This is completely fine in loadView()
This is amazing, I especially love how it’ll make integration with apples hardware/sensors super easy. Not to mention native support for complicated gesture control and haptics without having to learn Unity. Can’t wait to try it out, I can imagine also doing some cool ML stuff with it.
Thanks for feedback. Context is in viewDidLoad() Will iOS just release the view instance that the viewController came with? Is this acceptable code? (It works, I just don’t think it’s well crafted).
I would use the SKActions that are available like wait, repeat etc. then use a random function to decide the x position for the sprite being spawned.
What is Angelina Jolie like in person?
Ill try it right now, thanks!
I have an open source iOS game Fire in the Sky, that implements this logic. Checkout the repo on my github.com/ajohnson388 if you want an example
np I have an open source iOS game Fire in the Sky, that implements this logic. Checkout the repo on my github.com/ajohnson388 if you want an example
You just need to grab a tutorial and force yourself through every last example no matter how useful or useless it appears at the time. Then do it again with another tutorial. Then pick a project and make it a reality. And rewrite that once it all starts to click and you realize how badly you wrote it.
I've heard she's pretty cool. Her dad I heard was awesome, but they have not really spoke in years.
We use both too. We prefer Carthage, but some packages are only available in CocoaPods.
Have you tried asking the question in the pinned Easy question thread? You might be able to get some help there, hope this helps!
 let count = 10 let range = 5...25 let foo: [Int] = (0..&lt;count).map { _ in .random(in: range) } Seems pretty elegant to me. You could also create a type to do it: struct RandomInt: Sequence, IteratorProtocol { private(set) var count: Int mutating func next() -&gt; Int? { if count == 0 { return nil } else { defer { count -= 1 } return .random(in: range) } } } print(RandomInt(count: 10))
It’s not currently possible to define your own property attributes in swift, but [this swift evolution proposal](https://github.com/apple/swift-evolution/blob/8c3499ec5bc22713b150e2234516af3cb8b16a0b/proposals/0258-property-delegates.md) may allow you to do so in the future. It was recently under review, but was returned to the authors for further revision.
 let count = 10 let range = 5...25 let foo: [Int] = (0..&lt;count).map { _ in .random(in: range) } print(foo) Seems pretty elegant to me. You could also create a type to do it: struct Random: Sequence, IteratorProtocol { private(set) var count: Int mutating func next() -&gt; Int? { guard count &gt; 0 else { return nil } defer { count -= 1 } return .random(in: range) } } let bar = Array(Random(count: 10)) print(bar)
There's no point in making an Array of zeros in the first method if you're just going to ignore the values and throw it away. There's especially no point in calling it `var`, because it never varies (which is probably why your editor is signaling a warning there). return (0..&lt;size).map { _ in Int.random(in: 0..&lt;size) } Making an extra Array first just (temporarily) wastes that much more memory. I don't understand the comment about the guard, either. What's the point of the type system if you're going to deal with invalid arguments by silently converting them to valid ones? Either use a data type which represents exactly what you want (unsigned), or throw, or abort. That's what these features are for. Silently replacing invalid values with valid values practically guarantees that in 6 months, some poor programmer will tear their hair out trying to figure out why something is giving incorrect results, or failing but not anywhere near where it ought to.
I’ll try that, thank you!
Feel free to also DM me if you need help. Answering questions is a great way to learn.
Yep, that's pretty.
I'll admit you've got a couple of good points there.
Yeah its possible as swift is open source, though if you are thinking that same app can be run on ios and android then you can not as Cocoa Touch framework is specifically for ios and wont compile for android. Have a look at this [swift on android](https://blog.readdle.com/why-we-use-swift-for-android-db449feeacaf)
Print error, it’s fixed in the actual book, it’ll be fixed in a future version of the sample.
yeah, it has me baffled, too.
I’m quite new to swift coding and I’ve had a look at a few tutorials - I think I remember seeing a Firebase tutorial on Raywenderlich.com if that helps in anyway. One day I’d like to learn how users can input data to store on an app and firebase too but I’m quite a long way off learning that at the moment 😅
It defaults to weak the first time, then if you click strong it will default to strong in the future.
Doesn’t look like best practices. I would instead give the view a subview and swap that around.
You got zero clue what you're talking about bud
Not knowing where to start can be tough. You may try recreating some portion of an existing app just to answer "How would I do x?" such has recreating the intro screen in the PayPal app or the home page of the facebook app. Do you know how to create and layout a gradient? Do you know how to make a view stick to the bottom of the screen and scroll up with the keyboard? If not, research and code it in your own way.
Cs193p is currently in session, but there was a post here or iosprogramming from someone who was there in person and asked Prof Hegarty about the course and he said it wasn’t being videotaped this term. So probably no update any time soon from the iOS 11 swift 4 course. Unless of course that person was a liar.
https://www.reddit.com/r/iOSProgramming/comments/bd4boy/when_is_the_new_2019_cs193p_standford_course/?st=jv86rgui&amp;sh=50e155ac
Just downloaded Glide and discovered it’s not compatible with my current version of Xcode(8.2.1). For various reasons I’m somewhat stuck on Xcode 8. What is the recommended version to use glide? Thanks
I feel like the obvious choice here (if you don't want to use UInt) is then to return an optional array. If the size is below 0, just return nil. That has the added benefit of being able to use flatMap to get rid of invalid values in the use case you mentioned above
class Stanford { }
If you're interested in cross platform swift dev, check out [Scade](https://www.scade.io/). IIRC it's still in beta but it's worth a look!
Ah, that might be the reason. Where do I find the app's module name? I don't find the project's name in the list to import either.
Ah, that might be the reason. Where do I find the app's module name? I don't find the project's name in the list to import either.
Ah, that might be the reason. I tried "import Part1" Where do I find the app's module name? I don't find the project's name in the list to import either? Not sure if this is relevant but I created my project using swift package generate-xcodeproj Then I deleted the swift file generated under src. Part1.swift is a new file I created.
Ah, that might be the reason. I tried "import Part1" Where do I find the app's module name? I don't find the project's name in the list to import either? Not sure if this is relevant but I created my project using swift package generate-xcodeproj Then I deleted the swift file generated under src. Part1.swift is a new file I created.
This is ok. Some may do this in their \`func loadView()\` subclasses for cleaner view hierarchy. It is not that common though. Its bad practice do mutate \`view\` in anything other than \`loadView()\` &amp;#x200B; If you look at the Apple documentation linked below: &gt;You can override this method in order to create your views manually. If you choose to do so, assign the root view of your view hierarchy to the \`view\` &gt; &gt;property. The views you create should be unique instances and should not be shared with any other view controller object. Your custom implementation of this method should not call super &amp;#x200B; [https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview)
This is ok. Some may do this in their \`func loadView()\` subclasses for cleaner view hierarchy. It is not that common though. Its bad practice do mutate \`view\` in anything other than \`loadView()\` &amp;#x200B; If you look at the Apple documentation linked below: &gt;You can override this method in order to create your views manually. If you choose to do so, assign the root view of your view hierarchy to the \`view\` &gt; &gt;property. The views you create should be unique instances and should not be shared with any other view controller object. Your custom implementation of this method should not call super &amp;#x200B; [https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview)
This is ok. Some may do this in their \`func loadView()\` subclasses for cleaner view hierarchy. It is not that common though. Its bad practice do mutate \`view\` in anything other than \`loadView()\` &amp;#x200B; If you look at the Apple documentation linked below: You can override this method in order to create your views manually. If you choose to do so, assign the root view of your view hierarchy to the \`view\` property. The views you create should be unique instances and should not be shared with any other view controller object. Your custom implementation of this method should not call super &amp;#x200B; [https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview)
This is ok. Some may do this in their \`func loadView()\` subclasses for cleaner view hierarchy. It is not that common though. Its bad practice do mutate \`view\` in anything other than \`loadView()\` &amp;#x200B; If you look at the Apple documentation linked below: You can override this method in order to create your views manually. If you choose to do so, assign the root view of your view hierarchy to the \`view\` property. The views you create should be unique instances and should not be shared with any other view controller object. Your custom implementation of this method should not call super &amp;#x200B; [https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview)
This is ok. Some may do this in their \`func loadView()\` subclasses for cleaner view hierarchy. It is not that common though. Its bad practice do mutate \`view\` in anything other than \`loadView()\` &amp;#x200B; If you look at the Apple documentation linked below: &gt;You can override this method in order to create your views manually. If you choose to do so, assign the root view of your view hierarchy to the \`view\` &gt; &gt;property. The views you create should be unique instances and should not be shared with any other view controller object. Your custom implementation of this method should not call super. &amp;#x200B; [https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview)
This is ok. Some may do this in their \`func loadView()\` subclasses for cleaner view hierarchy. It is not that common though. Its bad practice do mutate \`view\` in anything other than \`loadView()\` &amp;#x200B; If you look at the Apple documentation linked below: &gt;You can override this method in order to create your views manually. If you choose to do so, assign the root view of your view hierarchy to the \`view\` &gt; &gt;property. The views you create should be unique instances and should not be shared with any other view controller object. Your custom implementation of this method should not call super. &amp;#x200B; [https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview)
\`func loadView()\` is the function that instantiates \`var view\`. So in the lifecycle before \`loadView()\` is called, \`view\` is actually nil. If you override \`func loadView()\`, you are expected to set it.
\`func loadView()\` is the function that instantiates \`var view\`. So in the lifecycle before \`loadView()\` is called, \`view\` is actually nil. If you override \`func loadView()\`, you are expected to set it.
This is ok. Some may do this in their \`func loadView()\` subclasses for cleaner view hierarchy. It is not that common though. Its bad practice do mutate \`view\` in anything other than \`loadView()\` &amp;#x200B; If you look at the Apple documentation linked below: &gt;You can override this method in order to create your views manually. If you choose to do so, assign the root view of your view hierarchy to the \`view\` &gt; &gt;property. The views you create should be unique instances and should not be shared with any other view controller object. Your custom implementation of this method should not call super. &amp;#x200B; [https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview)
\`func loadView()\` is the function that instantiates \`var view\`. So in the lifecycle before \`loadView()\` is called, \`view\` is actually nil. If you override \`func loadView()\`, you are expected to set it.
\`func loadView()\` is the function that instantiates \`var view\`. So in the lifecycle before \`loadView()\` is called, \`view\` is actually nil. If you override \`func loadView()\`, you are expected to set it.
\`func loadView()\` is the function that instantiates \`var view\`. So in the lifecycle before \`loadView()\` is called, \`view\` is actually nil. If you override \`func loadView()\`, you are expected to set it.
\`func loadView()\` is the function that instantiates \`var view\`. So in the lifecycle before \`loadView()\` is called, \`view\` is actually nil. If you override \`func loadView()\`, you are expected to set it.
This is ok. Some may do this in their \`func loadView()\` subclasses for cleaner view hierarchy. It is not that common though. Its bad practice do mutate \`view\` in anything other than \`loadView()\` &amp;#x200B; If you look at the Apple documentation linked below: &gt;You can override this method in order to create your views manually. If you choose to do so, assign the root view of your view hierarchy to the \`view\` &gt; &gt;property. The views you create should be unique instances and should not be shared with any other view controller object. Your custom implementation of this method should not call super. &amp;#x200B; [https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview)
This is ok. Some may do this in their \`func loadView()\` subclasses for cleaner view hierarchy. It is not that common though. Its bad practice do mutate \`view\` in anything other than \`loadView()\` &amp;#x200B; If you look at the Apple documentation linked below: &gt;You can override this method in order to create your views manually. If you choose to do so, assign the root view of your view hierarchy to the \`view\` &gt; &gt;property. The views you create should be unique instances and should not be shared with any other view controller object. Your custom implementation of this method should not call super. &amp;#x200B; [https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview)
This is ok. Some may do this in their \`func loadView()\` subclasses for cleaner view hierarchy. It is not that common though. Its bad practice do mutate \`view\` in anything other than \`loadView()\` &amp;#x200B; If you look at the Apple documentation linked below: &gt;You can override this method in order to create your views manually. If you choose to do so, assign the root view of your view hierarchy to the \`view\` &gt; &gt;property. The views you create should be unique instances and should not be shared with any other view controller object. Your custom implementation of this method should not call super. &amp;#x200B; [https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview)
This is ok. Some may do this in their \`func loadView()\` subclasses for cleaner view hierarchy. It is not that common though. Its bad practice do mutate \`view\` in anything other than \`loadView()\` &amp;#x200B; If you look at the Apple documentation linked below: &gt;You can override this method in order to create your views manually. If you choose to do so, assign the root view of your view hierarchy to the \`view\` &gt; &gt;property. The views you create should be unique instances and should not be shared with any other view controller object. Your custom implementation of this method should not call super. &amp;#x200B; [https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview)
\`func loadView()\` is the function that instantiates \`var view\`. So in the lifecycle before \`loadView()\` is called, \`view\` is actually nil. If you override \`func loadView()\`, you are expected to set it.
Ah, that might be the reason. I tried "import Part1" Where do I find the app's module name? I don't find the project's name in the list to import either? Not sure if this is relevant but I created my project using swift package generate-xcodeproj Then I deleted the swift file generated under src. Part1.swift is a new file I created.
Use the firebase documentation on their website. It is simple, concise and has tons of examples.
Use the firebase documentation on their website. It is simple, concise and has tons of examples.
I love that type of reference.
The best way to do this is to have your own server that aggregates all the information and also provides cache support. There are a bunch of platforms that offer database syncing, so it's not that hard to do.
Are you using Firestore or the real-time database? I had more success with Firestore. https://youtu.be/PdLzuwBrmSg
the real-time database. Is Firestore out of beta yet? That video is the first I've really seen of it.
Says the dude with -100 comment karma. Oh well.
It's highly improbable that somebody calls a function that has a size parameter with a negative argument; however, it may happen by accident. As said, I prefer not to "punish" the caller in such situations. I return optionals when the outcome depends on factors that are out of my control. And I throw errors if my code relies on API that's throwing errors itself, or the functionality is critical for the given software system. Having Int and UInt versions sounds like an overkill in this case.
Thanks! :) I believe this video should help. glide's GitHub repo has some beginner guide docs as well, but these are not as easy to follow as this video tutorial. Let me know your thoughts and questions after looking at the video to let me make changes to the tutorial.
Hello, Thanks for your comment :) You just need to install "cocoapods" on your computer, for your terminal to recognize "pod" commands. Open the terminal and just run "sudo gem install cocoapods" You can learn more about cocoapods here: [https://guides.cocoapods.org/using/getting-started.html](https://guides.cocoapods.org/using/getting-started.html) I hope this helps and please let me know if you more questions or feedback about the tutorial.
Hey, glide currently works on Xcode 10, because it is written in Swift 5. The engine is so new that it would be a burden to support older Swift versions. Sorry for the inconvenience and please let me know if you have problems running glide on Xcode 10 as well.
Exactly! There are tons of integrations and features to implement having directly backed by all the Cocoa frameworks. There are lots of opportunities for development tools like level editors as well. Please bring your suggestions and contributions to the GitHub repo whenever you feel like it :)
If the Basketballs are just decorative take a look at particle effects.
I ran into some problems using the Authentication features as my method of adding users to the Realtime Database / Firestore. My solution to this was to create a separate document in Firestore each time a user is created, with the user email as the document ID. &amp;#x200B; If you want to update the values of a specific user, you can query Firestore by a specific email and then update additional values for that document. In this example, when you create the user in Firebase, you can initially set the values of the fields such as *education* and *job* as nil. When you call update data on a specific user, the values of that User object will be updated. &amp;#x200B; [https://paste.ofcode.org/DufDWLbckCv52Cf7iVSNpf](https://paste.ofcode.org/DufDWLbckCv52Cf7iVSNpf) &amp;#x200B; I hope this helps!
I've noticed for Mac that there are no equivalents to an app like Chromacam for Windows (app to take webcam feed and replace green screen with background image and then create a video output device for use in Skype and the likes). The one thing I'm not sure about and have trouble finding information on is how to create a virtual device output. Googling for this usually results in links to Virtual Machines and such so I'm hoping someone can point me in a better direction.
Then you don't know what irony is.
Thanks! That makes sense. I'll try it out.
thanks buddy
What up with the sprites' zPosition when you are running the code on different platforms?
Xcode is your dojo.
Hey! I didn't quite understand the question, can you elaborate a bit?
when you ran the code on macos the character was behind the platform, then on the simulators it was in front of it.
Oh, yeah! I didn’t touch that far in this tutorial. But there is a way to make it consistent. You can either directly set the zPosition of the node of SpriteNodeComponent of your entities, which is not recommended for large projects, or you can setup z position container nodes in your scene and add your entities to a desired container. Another option is to set scene.ignoresSiblingOrder to false, which I observed as a performance enemy in large projects. But that would totally be fine with 2 entities in the tutorial. I’ll cover those topics in another tutorial, but if you are curious you can dig into zPositionContainers property implemented in GlideScene.
Not sure what you mean by: &gt; basic function exchange at this time but you can still swizzle methods using the Objective-C runtime in Swift. **Note:** You don’t necessarily need to do this at `+load` (deprecated) or `+initialize` (preferred).
Check the logs in Console.app. Filter for your bundle ID.
Why are you assuming it’s post-main time? Are you using the dyld environment variable, `DYLD_PRINT_STATISTICS`, to track the pre-main time of your application? If not, add `DYLD_PRINT_STATISTICS=1`, to your project to analyze your app start times and identify which dynamic libraries take a substantial amount of time to load.
&gt; (At this point you should be wondering why I’m force unwrapping. Make sure you handle your optionals properly!) So what does it mean when this call returns nil? The documentation doesn't say. What am I supposed to do in this case? Do I just make everything a no-op, like this, and half my users see a blank screen for some reason? Do I put up an alert that says "Sorry, something went wrong, and I have no idea what, or how you might fix it, but you're not going to see any graphics now"?
Metal is not availabe in the simulator. So in this case creating a MTLDevice always returns nil.
I don't really know the answer to your question, but I do know that the XR is "more" future proof than the 7, for sure. It's 3 generations newer. It might be more expensive, but it'll be cheaper than buying a 7 now and then having to upgrade it a couple of years down the road.
When I saw this was an eleven minute video to explain that, I just thought of how you could write a 1 line function to do this (which is your first snippet), how nothing that can be done this simply could possibly take that long to explain.
It is post main time as it happens while the controller is getting built. That happens after didFinishLaunching.
Thanks for the advise. I used to swizzle the method like `pushViewController(_:animated:)` and `viewWillAppear(animated: Bool)` in the Objective-c's `+load`. And sometimes in some specific condition, the `+initialize` may not be called in contrast with `+load` which will be called always. &amp;#x200B; BTW, I have also found the concise solution [here](https://medium.com/post-mortem/using-nsobjects-load-and-initialize-from-swift-f6f2c6d9aad0)
Thanks for clarifying.
Thanks for your recommendation, and I have also found a concise solution [here](https://medium.com/post-mortem/using-nsobjects-load-and-initialize-from-swift-f6f2c6d9aad0) maybe you would interest
XR also has the benefit of a notched screen, which is pretty important.
You will be fine for at least 3 more years... What is more important is to get at least 64GB space
I think the iPhone 7 will be a supported phone for a while, but even if it didn’t get iOS 13 you could continue making apps that supported iOS 12 and still develop with the 7.
*2 generations newer iPhone 7 -&gt; 2016 iPhone 8/X (same generation) -&gt; 2017 iPhone XS/XR -&gt; 2018
Let us know what you get. Previously, we used to use SIP in my old iOS app, but when the app goes into the background, the entitlements changed 3 years ago to require background silent notifications to keep the app alive. I'm sure there are some backgrounding entitlements you'll need to investigate. It might require background notifications sent from a notification server.
As tubescreamer mentioned, metal is not available in the iOS sim which is why the project is set up as a MacOS application. Unfortunately we are 100% relying on the framework to NOT fail us at runtime. If you have any issues at initialization time (the whole setting up the internal and externals of the communications pipeline), the only thing you can do is try again silently, and then if it fails give some sort of UI feedback. &amp;#x200B; Fortunately this has never been an issue for me (yet). I use a MetalKitView in one of my production applications to process and render camera buffer data to the screen with 0 crashes. If a crash ever occurs it's usually from setting up the camera with the AVFoundation, never the Metal part of it, but even that is exceedingly rare.
Yeah you're right. Forgot 8 and X were the same year.
Who knows?
Yeah - you have access to anything that’s exposed properly. There’s tons of examples - just Google - creating a custom reusable view...
Uh thank you 🙏
I'm on iOS 12.3 and I can't get it to work on my iPad. It's possible my adblockers are stopping a page element from working so I'll experiment a bit and see if I can get it work.
With Xcode you already have an emulator built in
Are you saying that's the only case where this would return nil? Is this documented anywhere? What do I do with this information?
The iPhone 7 is plenty fine. If you want to check the top bar/bottom bar on iPhones with a notch, use the Simulator, it’s pretty great.
There are rumors that the iPhone 6 might be dropped with the next update which is something I highly doubt because we have some at work and have no problem. But even that’s the case, the iPhone 7 is waaaaay faster than the 6. The 7 will have another 4 years (3 if you’re pessimistic)
File a radar regarding documentation on that matter. Those calls shouldn’t return nils from design perspective, they should throw errors
It’s for dev. 64 Gb doesn’t matter one single bit.
True, but guarantee that you can used it or pass it a long after you upgrade in the future.
Might be an issue with Safari, will look into it.
If you want to develop with features only supported by the latest hardware, like augmented reality apps with ARKit. Then the XR is very worth it. Just a standard app, probably fine with a 7
Yep, it's overkill. Even if it wasn't overkill then it should have a transcript you could read in 2 minutes to explain the concept instead of a video that goes all over the place for 11. This is why whenever I see a video or medium post I'm immediately skeptical of their value. So often they're either misleading and/or a complete waste of time. Anyone serious about teaching code will have the code as text instead of images or videos. That way anyone reading along can copy it into a playground and directly see how the code works, manipulate it, play around with it.
It's indeed a bug related to Safari. Will fix it in the next update. Everything works find in Chrome, Firefox, Brave and Edge.
Punish the caller? Your API is a contract, by using the correct types you allow the compiler to inform the caller of the issue immediately rather than crashing at runtime or returning an error they have to then handle (or ignore and crash, as is often the case). I am of the mind that the proliferation of signed types being used for naturally-unsigned activities is a mistake. When we talk of array sizes or doing things a certain amount of times that's pretty much always going to be a positive integer. It should be a `UInt` and not a `Int`. I know that flies in the face of what's in the standard Swift libraries but I believe they are wrong here. Historically, there were issues with signed verses unsigned, overflow and underflow in arithmetic, and so on. Honestly though, Swift is designed around getting rid of historical reasons for doing something a certain way and instead correcting the issue to make the language more logical.
Dude, this is awesome! Thanks so much for making this. All the other screenshot maker tools out there that aren’t free are either super limited with no actual customizability or just straight up don’t even work. I will definitely be saving this site for all of my future screenshots. Thanks again!
There are some things that the simulator can't really emulate though, for example real CPU performance (things might seem fine on simulator but really chug on device) and complex touch inputs (multi touch, hard to do with just a mouse). Although the "function" can be tested in the simulator, I find the "feel" of the app is better represented on a real device.
The notch is here to stay and worth developing around IMO. I’d recommend having one in person.
Ok cool. I don't have any of those so I'll have to wait.
how/why?
It will be good to test/develop apps for 3 years? I feel like 7 won't be able to use the latest iOS by 2021
Btw I currently have iphone 7. You think it will be good to test/develop apps for +3 years? I feel like 7 won't be able to use the latest iOS by 2021
Future devices are all notched so it’s easier to deal with to see if your apps are following the design guidelines
Btw I currently have iphone 7. You think it will be good to test/develop apps for +3 years? I feel like 7 won't be able to use the latest iOS by 2021.
Btw I currently have iphone 7. I feel like 7 won't be able to use the latest iOS by 2021.
Btw I currently have iphone 7. I feel like 7 won't be able to use the latest iOS by 2021.
Oh right. Btw I currently have iphone 7. I feel like 7 won't be able to use the latest iOS by 2021. XR would be good until 2023/24. What do you think?
https://upload.wikimedia.org/wikipedia/en/timeline/0efe2366e5e2956c97540c26b784f605.png
You want to find the maximum value of two arrays and check if the index is the same?
I’m still using an iPhone 6s Plus... so.... lol if you have money to spend why not
i actually don't want the xr because its big, heavy, expensive and useless for me except for testing/making apps. but apple is already slowing down the 7 performance. latest iOS won't be available on 7 in 2-3 years, which will make it harder for you to test/make apps and make money. xr will last you 4-5 years and will be better for your income. that's what i think. what do you guys think?
I am struggling to get data out of a URLSession.shared call. Can someone explain to me how I can do this from a separate file from the view controller? Thanks!
You're going to have to explain it better, have some sample code, a few arrays and what you expect to get as a result.
The iPhone 7 is actually the first phone to support ARkit so OP is totally fine from that perspective.
I actually just bought a used iPhone 7 because for whatever reason my app only crashes on them. Works fine in the emulator.
that's what i gathered and your question is also the solution.
If you look at http://iossupportmatrix.com you will see that the trend is for Apple to support a CPU for at least 5 iOS versions. The iPhone 7 uses the A10. It should be supported until at least iOS 14. IOS 15 comes out in September 2021.
I'm currently taking a Udemy course and it's really helpful. Wasn't free, but we'll worth the ~$13.
great info, thanks
Historically, iOS devices are supported for about five years after its original release. Hence your iPhone 7 should be good until iOS 15, circa 2021. Even after that you might want to keep it around for another year or so for regression testing your apps on older iOS versions.
is there a way to slow down emulator or xr so i can test it for older devices?
Same answer... Yes. Except for Biometrics
hi what are those
TouchID or FaceID. Fingerprint or facial recognition.
ah ok ty
will manual encyrpted backup using itunes include keychain?
I believe so, but it’s been a while since I’ve done that
Well they stated that they currently own an iPhone 7, so they wouldn’t have to buy anything new. They can most definitely get a few years of development on that device, and then decide to buy the latest and greatest (or a used one).
The 5s should be getting dropped by June this year which was released in 2013 I think. I’m pretty sure it’s fine I would guess 2-3 years for sure
Restoring to the same device using iCloud Backup or an *encrypted* iTunes backup restores almost everything, except biometrics as someone else pointed out. It’s also possible that apps can intentionally exclude some data from backups, but I think that’s rare.
Apple is not slowing down older devices. Unless your battery is degrading and your CPU is being capped. If you’re developing mobile apps, surely you understand that you’re resource constrained? As the software you write becomes bigger, more capable, and more complex, then older and less capable devices will have a harder and harder time accommodating your app. Why would you expect iOS to be any different? Why would you expect Apple to break the laws of physics so that old devices can run any version of iOS regardless of when they’re released?
Of course officially they are not but it is common practice across all industries to create a problem so you'd pay more. Obviously you have to find some justification for the problem
I do understand what you’re getting at, but driving sales with new features is not the same as intentionally crippling older devices even if it has that effect. Considering the heat Apple took for the CPU capping issue, even though they were transparent about what it was and why they were doing it, plus it was a net benefit for owners of older devices specifically and all iOS devices in general, I guess I just don’t understand why you think that they would instead spend untold amounts of money, developer time, testing time, QA time, marketing dollars, etc. just to make older devices slower to push people to upgrade when instead they can spend all that making devices and software that stands the rest of time. You’re gonna get at least five years out of your iPhone 7 before they stop updating iOS for it, and who knows how many more usable years after that - I can’t think of another mobile device manufacturer offering that kind of longevity. Consider too, that iOS 12 actually improved performance across the board but more so on older devices despite also having new functionality.
Bruh. Apple and literally any company intentionally does create problems for costumers. That's how free market works. You don't think they can create a cheaper and higher quality phone that can last for a decade? They can. They won't. I'm not saying you're wrong. They are partly true but they are also rationalizations to make people buy shit that they don't need.
Yes
thanks
It’s been ages since I’ve done one without iCloud on. Everyone want ApplePay these days.
This year september they'll drop the 5S and the 6 with iOS 13, next year the 6S with iOS 14, then the 7. Then it's still sort of useful for one year to test the previous version while iOS 15 is the current version. Then it'll take a few versions before WhatsApp and other key apps are not updated anymore. &amp;#x200B; September 2021 it'll no longer run the most current version.
I mean, you’re not completely wrong, though I’d argue what we have is less a free market and more a capitalist system on the way to its ultimate conclusion. They sound like they should be the same, but I don’t think they are. A free market is pro consumer while capitalism is anti consumer. The key difference being the profit motive; a free market is pro consumer because what’s better for the consumer gets bought by the consumer and is therefore more profitable. With capitalism, profit *is* the motive and we end up with companies doing anything they can that’s not completely illegal to take as much money as possible from the consumer while delivering as little as possible. The US telecommunications market is a perfect example. Apple, I feel, does at least try to strike a balance between the two, though when all is said and done, they do have shareholders they have to answer to, so inevitably they will sometimes do things where profit is the sole motive. I don’t believe that older devices slowing down (either as a result of CPU capping or iOS upgrades) is, by itself, indicative of an intentional effort by Apple to force users to upgrade. Rather, aside from the new features and capabilities being motive to upgrade, its more indicative of the cost of progress.
&gt; A free market is pro consumer while capitalism is anti consumer. free market: an economic system in which prices are determined by unrestricted competition between privately owned businesses. https://www.google.com/search?q=free+market whatever you call it humans use each other to profit. that's nature
Tl;dr: keep using the 7 until it dies, then buy whatever the latest model is at that time (I.e. XII) Well, unless I’m missing something, here’s my two cents: You already have an iPhone 7 now, and you’re considering getting a XR for development purposes as you’re worried that the 7 will no long receive software updates by 2021. Other users made fair points about designing around the notch, but I think that is something easily circumvented by using the layout tools and simulator. They’ve also mentioned that performance of the simulator may not match the performance you’ll get on actual devices ... but since you already have a 7 (two CPU generations old), checking performance on the newer devices/CPU seems unnecessary, as they would already be faster than your current device’s CPU. If you wanted to check for maximum compatibility, you’d want an older device—not a newer one. There’s plenty of people using pre-iPhone 7 devices still. Lastly, if you’re fine with the 7 (and prefer it’s form factor), then why not simply keep using it until Apple actually does announce it’s no longer supported? If you want future proof but also maximum compatibility, then keep using the iPhone 7, and in 2021 (or whenever support officially ends) buy whatever the latest generation is in that year (I.e. iPhone XII). That would, in my opinion, give you the longest life (from both the 7, and your future device) for the lowest cost. The only situations I see where buying a XR makes sense are 1: You are developing AR or ML-heavy applications that pre-X devices may not be powerful enough for. 2: You’re developing and need to test the Face ID/True Depth camera system. or 3: You just really want the XR and have the money to spend on it.
&gt; why not simply keep using it until Apple actually does announce it’s no longer supported? I'll move to a region where phone taxes are ridiculous. So I buy a new iPhone soon or god knows when. There's also about a $150 fee to "register" your phone there and you can do it once every 3 years, unless you pay ridiculous taxes for a local phone. Instead of registering with 7 I thought XR would be better. If XR breaks though, then I'm fucked lol
Well, in that case it *may* make sense to buy it now. Personally, when I make purchases like iPhones, MacBooks, cars, etc .. I try to estimate how many years of use I’ll get out of it, and divide the price by that (aka total cost of ownership). My MacBook Pro is an early 2013 version, for example, and I think I paid $2,799 USD for it at the time. It’s 2019 now, so dividing that by 6 shows that I paid ~$466 per year to own it. I could go further still, and include repair cost and resale value, but some aspects (future iPhone prices, devaluation/resale value, etc), we can only guesstimate. If budget is a main concern for you (as it is for me), then the $150 fee for registering the iPhone 7 is still cheaper than the $749(iPhone XR)+$150(fee). By your own estimates the 7 should still be good until 2021 right? Personally I think it may be around until 2022-23 even, but we can only guess. My other argument still stands then, that you could use the 7 until then, and in that year buy whatever the newer model is (and register it accordingly, since it will have been 3 years). Lastly, do you use the iPhone as your daily driver? Would it be an option to use a different/cheaper phone as your daily driver and keep the iPhone (7 or XR) unregistered (as in, no phone number/service package) and just only use it to develop/test your apps? I’m not sure what region you’re moving to, or what their taxes and regulations are. But if I didn’t use my iPhone 7 as my main phone, and only needed it to test apps, I personally would just leave it without a SIM card and use WiFi to test the functionality of my apps. This mostly depends on your specific situation and use case though, but at least it’s another option nonetheless.
Swift and Objective-C and are generally interchangeable when on different files regarding iOS and OS X Development. You can write a class in Swift and then write a Subclass in Objective-C. However if you're developing Swift Linux Apps e.g. a Vapor app -- you can't really use Objective-C as a easily.
legacy = obj c new apps = swift lol
You can, in fact, *not* subclass a Swift class in Obj-C, because you mustn’t include the „ProductName-Swift.h“ in any Obj-C header. The same applies to implementing Swift protocols in Objective C.
I prefer Swift when starting new project since the syntax of Swift is cleaner and less unnecessary code syntax -&gt; Less typing -&gt; Rapid development ;D However, in some situation, during developing [Proxyman.io](https://Proxyman.io), I have to select Objc when dealing with C and C++ codebase since it's easier to deal with it. Majority of awesome system libraries are written in C, for instance, #include &lt;libproc.h&gt; is good one to get the pid and manipulate it in high performance.
if you starting a new project, then definitely swift
There is no emulator. The iOS *Simulator* is essentially the user-mode parts of iOS re-compiled to run on the mac. Apps compiled for the simulator are essentially macOS apps, although linking to alternative system libraries.
in Swift, enum is very powerful and widely used... So you cannot avoid enum in Swift
That was not the point of the article though.
oops.... sorry .... then what was your point, I didnt get that
The point was that it's easy to abuse enums.
I’d say it come down to preference. You say adding computed properties (or functions) to an enum is “fighting the system”. I disagree. The ability to add these is there for a reason.
Another example is the classic "network request" enum. Any situation where adding a new case will require that you update four or more switch statements is probably a bad move (unless you are sure that new cases will not be added.)
Practically, you can use Swift for anything where you would use Objective-C, but there are a few situations you might use Objective-C and a few times you must Objective-C. * If you need to call C code, you might choose to use Objective-C because you may find directly using Objective-C is easier than dealing with Swift's various Unsafe\* APIs. Then, you can use Swift to interoperate with your Objective-C code if the rest of your app is in Swift. * Objective-C can outperform Swift significantly. Not only in terms of compilation speed but in terms of runtime performance. For instance, the book iOS and macOS Performance Tuning ( [https://www.amazon.com/iOS-macOS-Performance-Tuning-Objective-C/dp/0321842847](https://www.amazon.com/iOS-macOS-Performance-Tuning-Objective-C/dp/0321842847) ) gives some concrete examples. Of course, it depends on your code and where the hotspots are, so you need to measure performance. Swift can be faster than Objective-C, but there are situations where idiomatic Objective-C is naturally faster than idiomatic Swift. However, if you ever find yourself in a situation where you think Swift itself is slow, I would watch some of the WWDC talks regarding Swift performance to try to improve your Swift code before even thinking about re-writing it in C or Objective-C. * A very few Apple APIs are still only accessible via Objective-C (e.g. Activity Tracing, XPC, some of the very low level audio frameworks). You'll usually know it when you try to read the headers for the function/method in Xcode (which are more up to date than the online docs) and the auto-generated Swift header doesn't make any sense . However even with the above, Swift is a better choice for new development. Apple has decided Swift is the future and is heavily investing in it. Performance is improving with Swift, the language is generally source code compatible for the last two years at least, and every year, more of the few remaining Objective-C only APIs have a Swift overlay.
Thanks for this! It's right at a time when I'm generating more app screenshots! It would be nice to drag and drop images and it just assign them to the correct device based on the size
I use this pattern all of the time and I have no clue where the self-invented "Any situation where adding a new case will require that you update four or more switch statements is probably a bad move" dogma comes from. If I make it an object I still require four parameters to be passed in every time I create the object. It's because every network request always has some required parameters and some optional stuff (like JSON bodies, headers or GET-parameters) and parametrized enums will allow you to send in any random collection of values to build those requests, which would be quite cumbersome with traditional OO patterns or functions.
I don’t think they’ll get rid of the non-notch phones for at least a little while, so I would keep it around. Couldn’t tell you how futureproof it is though. They seem to be hanging onto older stuff longer these days, especially through this transition to the notch. That’s just my impression so I could be totally wrong. Obviously the XR is a better bet.
&gt; Any situation where adding a new case will require that you update four or more switch statements is probably a bad move Hmmm. This is related to a problem in PL design we call the [expression problem](https://en.wikipedia.org/wiki/Expression_problem), a term first coined by Philip Wadler (who has been a prominent PL researcher over the past thirty years, especially in functional programming). Enums are essentially Swift's expression of (usually) nullary (zero-argument) datatype constructors. In Wadler's writing, I think, it is a *strength* that adding a new constructor (enum case) will require you to update every pattern match (switch statement) that uses that type (enum). It's a strength because this is the static type system ensuring that you've really thought about what you've done — it's a form of safety. Just because you add a new case to your enum and need to update &gt;4 switch statements does not make that addition inherently a bad idea. If you have genuinely discovered the presence of another case in your enum (semantically speaking), then it *should* be added, and all subsequent switch statements *should* be updated. Is it a pain? Sure. But it ensures safety, which is (in my opinion) what's important.
In addition to what other people have said: 1. If you’re distributing a closed source framework, like an analytics library, use ObjC because it’s easily usable from both ObjC and Swift apps. 2. Anything with a C/C++ core, like a cross-platform game. I help maintain a Mac/iOS/Windows computation library and using ObjC++ is much easier for the Apple front ends than Swift.
/u/DonaldPShimona is right. I thought this article was parody. The constraints an enum imposes are a *feature*, not abuse. Don’t use a type that can carry 2^64 different states when there’s only three different states a given thing should be in. As far as updating switch statements... the vast majority of my enums that create 4 or more switch statements create all of them in the enum type in the same source file. They’re usually properties or functions with a return value. Updating switch statements in a single source file is a breeze.
From the Apple docs: &gt; Plane classification is available only on iPhone XS, iPhone XS Max, and iPhone XR. Also, ARKit eats tons of memory, it may be supported but things will mostly drift and float around the world without stable tracking on anything below an X.
&gt; I thought this article was parody. I think even a parody would have been more thoroughly explored.
Hey Jacob, thank you for taking the time to check out the tool! Drag and drop should definitely be doable in the near future. I'm not sure about reordering since in the end you'll just get the image files and you can add them on the App Store as you want. I will however add an option to disable / remove a Screenshot in the future. If you go to the Screenshots tab you can see there is a button for the 12.9" one. I've used this tool for my apps before releasing it to the public and had no issues with the review process.
I guess I agree with the basic premise that enums can be abused, its probably the definition of abuse that's going to be subjective. Without additional context, the table view example is easier to agree with than the theme example since the later is not all that egregious if a theme consists solely of two colors.
Is your "ProViewVC" setup using auto layout?
 static let dark = Theme(background: .black, foreground: .white) static let light = Theme(background: .white, foreground: .black) On Apple's platforms, there's a *lot* more to "dark mode" and "light mode" than simply setting the foreground/background to black/white. The very first paragraph of the NSAppearance documentation suggests to developers: &gt; choose colors and images that adapt automatically to the current appearance. For example, define a color asset whose actual color value changes for light and dark appearances That's why NSAppearance has a vague `name` (struct), and not foreground/background properties. It'd need to have properties for every possible color use, in every possible application, and every other styling decision, too. On macOS, the menubar even changes *size* in dark mode. Are you really going to make a `struct Theme` with 50,000 properties, like `menubarHeight`? Cutting it down to just foreground/background is an example of what we used to call the New Jersey Approach, and it fell out of favor years ago. Yes, it's always possible to make your program implementation simpler, if you throw out the user requirements and instead implement something else whose top priority is simplicity of implementation.
It is funny, conversely this is one of the downside of the compiler-enforced optionals in Swift (and Kotlin): they do NOT force you to handle the empty case. Option in Scala does, in this same way.
Yes
Yes, though with Swift I think this design decision was guided by pragmatism. Adapting all the existing Objective-C code which is full of implicit nullable values requires some working-around, I think. It is unfortunate, though. I wish it weren't the case!
&gt; The whole "optionals make your code safe!" concept works great right up until you have to use any framework ever. The scenario has always existed. Now you just have to decide what to do. You're welcome to ignore that scenario, always force-unwrap the optional, and sometimes crash. You can handle the failure gracefully, and if you can use a fallback, at least message something to the user. Contrast this with Objective-C, where you'll just silently fail. You'll still probably crash, but at a later point in your code, making it significantly harder to find what went wrong.
With the code as is in the screenshot, the character successfully navigates the path and toggles the switch on at the end. However, if I change my final line to character.toggleSwitch(), the switch stays doesn't toggle on. In previous exercises this works. If for example my code says character.jump(), the character jumps. If there were two instances of this type, surely that would be the way to specify which instance toggles? Can someone please explain what the difference is, or whether this is just a bug in this exercise? Thanks in advance.
Thanks for posting it. I like the article, it offered another way of looking at enums.
You should use and If, and ask if it is on an switch to press it, but enclosed within the main code. Otherwise, the program will wait until the first while is not real. And because it's on the switch &amp;&amp; bloqued it won't read outside the while.
Try using an If outside the main code to ask for the switch.
Thanks, I tried that - didn't improve. &amp;#x200B; It's the character. before the toggleSwitch() which it doesn't like. Adding and If outside the main code doesn't help it.
I don’t see the rest of the code but is toggleSwitch() a function of the world rather than the character itself. Jump and turn being part of the character, but toggle switch might not be a function on the character.
The code behind the function is not shown, but there is a similar function called collectGem(), which when I write character.collectGem() it works fine. In both cases the character is either standing on a gem or a switch. I thought you might be right, but shouldn't the same apply to a gem as a switch in this case?
Have you tried using IB and the layout / device views on the builder to make sure it’s laying out as expected when in both modes and different devices... There’s a lot more info needed to really help you - the present / push of the VC shouldn’t effect the layout, so it’s most likely something with your layout or constraints or lack there of - none of which you mentioned.
Hard to say without seeing the character class. But using common sense, if you cal toggleSwitch() and it works that means that there’s a version of that function which isn’t defined on the Character class itself. Which makes me doubt that there would be another implementation of it in your Character. When you use character. you’re accessing functions (or variables) that only the character has. If you look at what defines a character in your game it probably doesn’t have a toggleSwitch() function defined.
That makes sense, thanks for taking the time to answer.
Can you show me your constraints and view hierarchy?
&gt;Have you tried using IB and the layout / device views on the builder to make sure it’s laying out as expected when in both modes and different devices... Yes I am using autolayout in the Xib file and it behaves correctly in the IB. &gt;There’s a lot more info needed to really help you - the present / push of the VC shouldn’t effect the layout, so it’s most likely something with your layout or constraints or lack there of - none of which you mentioned. https://imgur.com/a/qj3Y7ex Here is the video of what's happening, I believe my constraints are correctly set in the Xib file, to me it seems that the main problem is that the ProVC does not fill up the screen when rotating (and also a problem with safe spaces). But shouldn't the viewController automatically fill up the screen if I use the overCurrentContext style while presenting a VC? Which additional constraints do I need?
This is what it looks like on Xcode: https://imgur.com/a/pV95mJ8 The view hierarchy is the following: TabBarViewController -&gt; Navigation Controller -&gt; View -&gt; TableViewController -&gt; ProViewControler (it's where the user can buy the pro version, it is presented modally with the overCurrentContext style). this is a video of what's happening when I rotate it: https://imgur.com/a/qj3Y7ex
The bug for Safari has been fixed, you can now use it without any issues.
I've used a combo of both. I have a `struct ColorTheme` and then an enum of all the possible values, with a computed `var theme: ColorTheme { ... }`, which defines each of them. This is super useful especially when your themes have more than just a bg and fg color, but you also want to have an enum to list them.
Try to call \` self.view.setNeedsDisplay()\` instead of \`self.view.layoutIfNeeded()\` at \`traitCollectionDidChange\`
PM me whenever, we can find a good time! I've been doing iOS since 2012, and software engineering for 10+ years
Do we arrive at the syntax below for creating a Result because of trailing closure rules? I didn't know you could apply those rules to initializers. `Result { try somethingThatThrows() }`
I tried that too, also. layoutSubviews() just in case... It doesn't work :/
This is in reply to both of the negative comments to mine. I want to first make sure we are all talking about the same thing. One the one hand, you could have an enum with 20 cases and 5 computed properties (where each computed property has a `switch self`. This comes out to something in the neighborhood of 200 lines of code. Adding a new case requires updating 6 different places with a total of 11 lines. On the other hand, you could have a struct with 5 constants (`let`) and 20 static constants (one for each case.) This comes out to only 25 lines of code and adding a new case is merely a matter of one additional line. Code that uses either is identical in both cases... And in fact changing from the enum to the struct (or vice-a-versa) requires no change to any code outside of the lines discussed above. Are you really saying that you think the former is better than the latter? Maybe you are thinking about a different use-case?
I found out that the problem is with overCurrentContext, if I use fullScreen everything is fine... I know where exactly is the problem, but still don't know how to fix it
I found out that the problem is with overCurrentContext, if I use fullScreen everything is fine... I know where exactly is the problem, but still don't know how to fix it
I found out that the problem is with overCurrentContext, if I use fullScreen everything is fine... I know where exactly is the problem, but still don't know how to fix it
Not all Macs support Metal either. It would return nil on a 2012 Mac Pro, for example.
In terms of day-to-day stuff, making your app accessible can be a challenge. Especially if you build really custom controls/UI. You need to weigh every design decision against how people with visual or motor impairments might struggle to use it. Say for your app you're gonna build some funky text layout, maybe like the front page of a newspaper. How does someone who is blind navigate from article to article, then go through the text of a particular article? How do they navigate to links inside the text, etc.? It's really important to get it right for your users (and rewarding to get it right in the end), but that doesn't mean it's easy. The most rewarding thing for me is finding the simplest way to solve a complex problem. Breaking something down into its smallest components, then assembling them together to create whatever it is your making.
Try using the hint privided in the app
You're not .... off, if you do it that way with pure structs and enums. But there are better ways to do what you want to do. You can use the enum type as an initializer for the theme struct (and avoid having every property in a computed property). You could always have enums in enums. To the bigger point though, I think that Themeing in general is too nuanced to be reduced to either just a single enum or a single struct. You can say that you're trying to make it easier to compose custom themes in the future but by using an enum only you're (as you're trying to point out) limited to the different cases so you might as well create a struct for it. But by making a struct, if you want a fully customizable one, you'll still need to have tons of properties to fill up and the lines for each property will grow as more properties. Themes are just too broad to work as an example about enum abuse as theming is a crazy rabbit hole.
Great, thx. I'll be able to check it out later tonight.
I think the most difficult thing is simply how tedious and complex it all is. A single wrong character or metadata mistake can ruin an entire app. The most rewarding things is watching other people enjoy something that you created.
Of course beginner’s questions are allowed! I think the problem is switching between global and instance methods. Maybe this analogy will help: Imagine that we’re in school, and the teacher asks us to solve the equation on the board. We write down an equation on our paper and solve it. The teacher gets mad because we haven’t solved the equation on the board. We did the right thing, but we didn’t do the right thing _to the_ right thing. Now take the following code: ``` class Equation { func solve() { // do things } } let chalkboard = Equation() func solve() { chalkboard.solve() } let myPaper = Equation() myPaper.solve() // 1 solve() // 2 ``` 1) the action was performed... but the equation on the board still hasn’t been solved, because we solved the one on our paper instead. 2) now the equation on the board has been solved, because we solved it using the global method that references the appropriate Equation. Remember, this particular Playground already has a Character on the board, so ```let character = Character()``` creates a _new_ character instance (that is different from the one already on the board). So when you tell the new character to `toggleSwitch()` nothing happens, because the character that toggles a switch isn’t on the board. Hope that helps, and happy coding! Side Note: generally, functions that capture global state like that are frowned upon and it’s much better to call the function on the instance, like you were doing. But Playgrounds is trying to remove some of that extra typing, so you can focus on a different lesson. Unfortunately they conflated global functions and instance methods, even naming them the same thing :P PS: if this helps, feel free to PM with other questions about Playgrounds, iOS development, or Swift in general! TLDR; the program doesn’t work when you call `character.toggleSwitch()` because that Character instance is different than the instance used in the global `toggleSwitch()` function. It’s like saying “if my left hand is on the space bar, rightHand.pressDown()”. We still didn’t press the space bar, because the hand that pressed down isn’t the same as the hand that is on the space bar. Be sure to use the global functions in this Playground to operate on the correct Character instance.
Most difficult would have to be fighting swift to work the way you want it to, using code from stack overflow but it doesn't work because the answer was from last week and swift has completed reformatted everything since then. (Exaggerating time but seriously annoying because of how often it happens). Most rewarding for me is getting small quality of life details implemented like little animations or clean transitions, but also completing a complicated feature that is intuitive and easy to use.
When starting out, especially in a new language/environment, the hardest thing to me is the huge number of functions/terms you have to learn before you can do anything reasonable. You spend most of the time just looking through docs trying to find a function that does that thing you want done. Then when you finally get it working and show it to someone more experienced, they point out that the 5-10 lines of code you just spent an hour on can all be replaced by that one function that you didn't know existed. The most rewarding thing to me is the same as @favorited. When you discover that cool way to combine a few functions to do a job that looks like it would be way more complicated.
An infinite loop of.... The most difficult: being patient when trying to debug or figure what went wrong. The most rewarding: solving errors and feeling like you’re invincible. Until something messes up again and you’re back to step one.
You do realise that enums are actually value types? You say "A value type is more appropriate." and point to a struct example.
You're right, updated, thanks.
What is this you’re coding? A tutorial?
Thanks for the detailed reply! Just off to bed now but will absorb it all in the morning. Appreciate the offer to PM with other questions too!
It’s an iOS app from Apple teaching Swift. I’ve some basic coding knowledge with html and php and want to branch out to app development. I stumbled upon this on the App Store. So far, it’s been incredibly informative.
Mind telling me the name? Thanks!
Search for Swift Playground on iPad, not sure if it’s available on other devices
Thanks!
Yes, precisely. [The signature for the initializer in question](https://github.com/apple/swift/blob/swift-5.0-RELEASE/stdlib/public/core/Result.swift#L157) looks like: `public init(catching body: () throws -&gt; Success)` If we wanted to be less sugary about it, we could write: ``` Result&lt;String, Error&gt;(catching: { () throws -&gt; String in return try makeStringOrThrow() }) ```
Difficulties: - Understanding why subscript is not available for String. - Understanding why Swift Set does not have allObjects - Understanding why creating array with predefined size can be so complicated Rewarding: - moved on and make extension for String to support subscript - move on and use NSSet - move on solve the issue by repeating, e.g. [here](https://medium.com/@marcoleong.developer/how-to-create-2d-fixed-size-array-a2d890129dea) Tr;dr: hard to believe some common concepts can be so unnecessary tedious, rewarding to know extension almost always works so the your code can still be elegant.
Most difficult: learning large new codebases. The sheer amount of time and effort that it takes is concerning. You feel like you've contributed nothing for a long time before you get to the point where you're useful. Most rewarding: once you've proved yourself capable you feel incredibly useful, important and valuable. The accomplishment is very fulfilling.
Most Difficult: * **Learning to code well**: Coding is a craft; the more time you put in to learning and practicing, the easier it will be and the better you will become. Sometimes you can get by with hacking stuff together, but that won't always work as you take on bigger and more difficult challenges. I highly recommend reading The Pragmatic Programmer. It is a little dated in some parts, but I run a discussion group at work with engineers of all experience levels (Junior to Principal) and the feedback is constantly that the approaches in the book help them get better every day. * **Sharing a codebase**: The more people that interact with your codebase, the more non-coding issues you're going to have to deal with. Learning to communicate well with others is key to collaborating. You'll see this a lot with Pull Requests. Healthy communication turns PRs into a great teaching / learning opportunity. Unhealthy communication tends to make people defensive about their code and even distrust teammates. Most Rewarding: * **Building something useful**: The biggest reward for me is seeing my code out in the wild doing what it is supposed to. Happy users create such a sense of satisfaction for me, especially when the product is something that meaningfully makes their lives better. * **Elegant code**: I will always value readable code over clever code, but when you can write code that is both, its a really great feeling. * **Getting un-stuck**: Plowing through Stack Overflow questions and documentation is so annoying when you know what you want to do but can't figure out how to do it, but the feeling of figuring it out is extremely gratifying.
I think you've got a boolean logic issue in your while condition. Said differently: You've got a loop and my guess is that you want to say "while I'm not blocked in all directions, make the next move", but `!a &amp;&amp; !b` is not the same as `!(a &amp;&amp; b)`. As written your loop will exit as soon as any direction is blocked. Instead, you probably want to update that line to `while !(isBlocked &amp;&amp; charater.isBlockedLeft &amp;&amp; character.isBlockedRight) {`
Does nobody else experience this occasional bug with Safari where instead of googling it just escapes the string like it’s a URL and fails? Guess not, I’ll go home now.
I bought a really great url called [Swiftier.dev](https://Swiftier.dev) and I'm trying to figure out what to do with it. Right now I think I'm going to do a blog about becoming "swiftier" in general, but I'm still not sure. &amp;#x200B; Also, my network recorder / playback library called Stubby that is used to record and replay network requests.
In this situation I would use thingsCount because it directly correlates to [Thing].count
`numberOfThings` because it improves code readability. Reads like a proper English sentence.
The official style guide would say `numberOfThings`. In fact all of Apple &amp; Swift's APIs follows this as well.
I'm working on the JTAppleCalendarLibrary code examples [located here](https://patchthecode.com/jtapplecalendar-home/). Makes it easier for developers to understand the library. JTAppleCalendar is (what I consider to be) the most comprehensive calendar library on github. Also, we have finally implemented yearView. Give us a star rating if you find this library useful. It helps our reach. Thanks!
I posted a fairly big issue on the tracker a few months back, you closed it as intended functionality... Not gonna be touching this library again, made my own in 2 days after that.
Also still no macOS support
&gt; It is funny, conversely this is one of the downside of the compiler-enforced optionals in Swift (and Kotlin): they do NOT force you to handle the empty case. Option in Scala does, in this same way. AFAIK Swift does require handling the empty case of standard (as opposed to implicitly unwrapped) optionals, if only by forcefully unwrapping them (`!`, which also exists in Scala and is spelled `.get()`).
Difficult: Shit breaks for reasons you do not understand, so you need the drive and patience to either investigate or learn more. Rewarding 1: Coding is like spell casting in Harry Potter. If you say the right words in the right combination, cool shit happens. Rewarding 2: The world is disorganized and chaotic. When I program, I can control and organize my own little corner of the universe. Basically, I have a personality defect and cope by programming.
You really need to look at your goals. There's a LOT of ObjC code out there and some companies won't switch unless and until they have to. There's no real benefit to converting code from ObjC to Swift as ObjC still works and I don't think it's going to stop working. If your goal is to get a job in the industry, then find what the job market is asking for. IMO, it's very hard for a programmer to know only one language. Expect to know several well enough to get the job done. I expect ObjC to lose ground to Swift over time. You don't see many improvements to ObjC, you see changes/improvements to Swift.
Apple's Swift Playgrounds. An excellent app to learn to code developed by Apple themselves.
I’ll look into it thanks! Is it iPad only?!
Your comment is not fair. You made a claim without posting a link to the issue you claim to create. How can i defend if I have no clue if you are even telling the truth? Link to issue please?
You are honestly deluded, you think because people live in different time zones, and use reddit and different hours, that if they dont use it the hour you do, then they are liars? Get over yourself. Here is the link, you can see in the screenshot that there is 48 dates, in a grid that supports 42 dates per month, 6 extra ... [Here](https://github.com/patchthecode/JTAppleCalendar/issues/1027)
Most tutorials/courses do a todo app.
If you’re talking about an iOS app, and you’re new to both Swift and iOS development, then you need to take a step back and learn some things before you try to dive into your own projects. I would suggest going through this book by Paul Hudson. It starts off with a Swift primer and then goes through a series of projects taking you through the basics of iOS app development. It’s freely available to read online here: [Hacking With Swift](https://www.hackingwithswift.com/read) Once you’ve gone through at least the first few projects and can understand what you’re doing, you’ll be much better prepared to tackle your own project. The app you want to build is very straightforward as far as its basic goals. You just need to establish a foundation to start building on as far as your understanding of how to proceed.
Most difficult thing: debugging runtime errors. Most rewarding: no compiling errors!
Quit now. Thank ME later.
You are expressing an opinion as fact - and doing so without any example. Please argue your opinion with example.
I wasn’t aware that it seemed more tedious.
Yep. F'ing lattner. Been debugging a simple sorting algo that the past hour or 2 that I have written multiple times in other languages...sadly it's been a hassle in swift. Basically the swift team seemingly said "What is ++ really useful for? Oh, let's try adding a bunch of software language experiments and see how it all functions together...oh wow...that was a mess...fire lattner!!! (make it look like he quit though...because otherwise it could make swift look like the project was the f'ing mess that it was)"
Perhaps I should say that it seems easier to write certain array sorting algorithms using standard array sorting algo patterns, instead of using some swift standard library functions that I haven't yet memorized every name of. AKA: I like things like "++" and other such simple tools that I can build things with, rather than going for a swift standard library method every time. AND also I like languages that play well TOGETHER in a palette of tools, because I don't ONLY code in swift. Maybe C style languages have some shortcomings and don't have trendy "features", but jumping from one platform to another quickly is much easier when everything has a "++" and other compatible patterns. For instance, if I do a for each loop in swift instead of a c style for loop, I make an iterator anyway to get THE ACTUAL INDEX OF THE ITEM...and I don't want to look up HOW to get the f'ing index using the swift style way in the for each loop.
Not sure what your comments about timezones are about. You were specifically called a liar not because of timezones, but because of misrepresenting facts. I will prove this now based on the link you provided. 1. On **April 3rd** you reported issue. 2. On **April 5th** after extensive debugging I **incorrectly** believed the bug was in my library and made fixes which broke the library. 3. **April 8th** I further continued breaking my library for a fix that was never needed. You were also in discussion with me at that time. 4. **April 8th** I finally realized the bug was in your code. Reverted all the "fixes", and messaged you to contact me by gitter messenger, because messenger in real-time would resolve the issue much faster github. 5. **April 8th** \- you disappeared. 6. **April 17th** \- I am still trying to reach out to you. I set the "**Awaiting user input**" flag and closed the issue until you responded. 7. **April 23rd** \- **15** days later you finally respond. I told you the library had no bug and again give you the gitter-messenger link, because live chat is faster than typing over a period of days. You never responded after that. 8. **April 26th** \- The chat has gone way too long. I posted where the bug in your code was, and summarized the issue for you. Then made a final close on the issue. &amp;#x200B; My description of the events is clearly seen in the [link you have provided](https://github.com/patchthecode/JTAppleCalendar/issues/1027). Now I will leave it to any **reasonable minded redditor** to again look at your quote and compare it with the events to see who the lair is. Again, here is your quote: \&gt; I posted a fairly big issue on the tracker a few months back, you closed it as intended functionality... Not gonna be touching this library again, made my own in 2 days after that.
I would say that 7 may receive updates until 2022 but not including iOS 16. It will probably receive up to iOS 15.3 or something like that. But I’d wait. We both know new iPhones will be released in 3 months and they would give you at least another year worth of updates. Until then, that iPhone 7 will do, for sure. It’s still an amazing device.
learning the API even more so difficult when documentation is not readily accessible in the IDE.
working on this.
&gt; Just know that the longer you wait to respond, is the more any reasonable redditor can conclude that you are a liar You can clearly see in the [first screenshot](https://user-images.githubusercontent.com/2480548/55484243-11422300-5620-11e9-814c-c1cebc3f45d0.png) or the issue, can you please tell me which month of the year has 34 dates in it please?
It seems to me like you find it more tedious to use Swift just because you aren’t familiar with the language and everything that the standard library can do. For example if you are looping through an array and want to get the index of items in the array as well as the item itself, you should use the `enumerated()` function which will give you a tuple if both the index and item. If you try to avoid learning and using the standard library with Swift, then I think you will always find Swift to be a “tedious” language.
You're mixing many different concepts here. You are calling syntactical sugar like "++" a "tool", and I don't understand which "trendy features" you are referring to. &amp;#x200B; We also don't know how well versed you are with the Swift language, did you know about the \`for (index, value) in myList.enumerated()\` syntax? The \`map\`, \`filter\`, \`reduce\` methods on Collections? &amp;#x200B; I would suggest that you start reading the whole Swift documentation of Array to start with, since it seemed like your questions are Array (Collection) centric: [https://developer.apple.com/documentation/swift/array](https://developer.apple.com/documentation/swift/array)
I thought for a moment you were going to have valid complaints but it seems like you're just struggling to understand the things Swift does differently. I don't agree 100% with the way that Swift has evolved either, but if you take a look on the forums you can learn the reasons why they made these changes. You can read why they removed the increment/decrement operators [here](https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md) and why they removed C style for loops [here](https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md). It's inevitable that a language designed \~40 years after C will be different. That doesn't mean it has to be better or worse, just different. Try to keep an open mind and good luck!
I have seen all of this in My years of iOS programming. Simply saying that it only really seems to stick if it's used OFTEN...unlike C style patterns, which are VERY COMMON in the non-swift World. Thanks for reminding about enumerated, I was trying to build the algo with more basic tools and without looking that up in the docs.
Recommend the best (updated) quickref that includes ALL of the most commonly used standard library patterns? Thanks in advance!
&gt;can you please tell me which month of the year has 34 dates in it please? &amp;#x200B; Again, you used the function called **visibleDates()**. This function will show you **visible-dates** on the screen. You can have **any number** of visible dates on the screen. The real question is **why** do you have 34 visible month-dates on the screen? And the answer is the same as I have provided on the [github link](https://github.com/patchthecode/JTAppleCalendar/issues/1027#issuecomment-487177094). By setting the sectionInset to a negative number on all sides (-6), you increase the size of the cell by 6 on all sides. Therefore dates from another month section is showing on the visible screen. Therefore visible dates will give you a greater number. You cannot visibly see those cells because they are only +6 points overlapping. Now unless you address the fact that your comment is a misrepresentation of [our recorded chat](https://github.com/patchthecode/JTAppleCalendar/issues/1027#issuecomment-487177094) history, I have nothing further to add to this sub-thead.
[https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html) and [https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html](https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html)
UNBELIEVABLE. I DO HAVE "VALID COMPLAINTS". I haven't been "struggling to understand the things that swift does differently" since lattner was fired and the codebase stabilized (generally stabilized...hopefully...LOOOOOL). I have known how to use higher order functions and so on in swift for quite a while and have been using optionals since the calendar said about 2014 (when I was in Silicon Valley telling an apple engineer how lame optionals are)...so stop trying to defend swift's flaws by attempting to condescendingly insult THOSE THAT ARE INTELLIGENT ENOUGH TO KNOW WHY swift isn't perfect and instead unwrap this non-optional value: 1ickMy@55!
It is iPad only.
OK, youve made a few mistakes there. I se the sectionInset, which means I made my section wider, nothing to do with cells. &gt; This library can now build any calendar design As long as you dont have negative section insets.
&gt; 1 or 2 pages or so &gt; includes ALL of the most commonly used standard library patterns 🤔
&gt; For example if you are looping through an array and want to get the index of items in the array as well as the item itself, you should use the enumerated() function which will give you a tuple of both the index and item. This may not work if you're working over slices as they don't necessarily start with index 0.
I can identify with the struggles - even creating a simple iOS list app can be daunting. Table view controller events and methods take a bit of getting your head around. &amp;#x200B; For a pretty modest cost Angela Yu has a comprehensive beginner's course on Udemy that covers a lot of concepts and goes into a TODO app (Todoey, or clone of the Clear app which is one of my favourite todo apps) in detail covering tableviews, persistence, core data, realm, and some useful dependencies. Hope this helps.
Lol you’re writing basic sorting functions. I’m sure you’re so experienced. Let us know when you figure out fizzbuzz.
&gt; unwrap this non-optional value: 1ickMy@55! Sorry, that's neither a valid Swift literal nor identifier.
Ok. It seems that you will not address it. So my final word to you is: If you wish to be properly educated on how to use this library and all its functions, you are always welcome to do what other developer do and either [read the documentation](http://patchthecode.com/jtapplecalendar-home/), [create an issue](https://github.com/patchthecode/JTAppleCalendar/issues), [try the example app explaining sectionInsets etc](https://github.com/patchthecode/JTAppleCalendar/archive/master.zip), or contact me on [gitter](https://gitter.im/patchthecode/JTAppleCalendar). Once you know how to properly use the library, you can then join the list of 192+ apps using this lib including: 1. [Capital One Banking](https://www.appsight.io/app/capital-one-mobile) 2. [Paypal Business](https://www.appsight.io/app/paypal-for-business) 3. [TD Bank](https://www.appsight.io/app/td-bank-us) 4. [Aetna Insurance](https://www.appsight.io/app/aetna-health) 5. Numerous Airlines 6. Numerous Medical facilities 7. [Many more](https://www.appsight.io/sdk/jt-apple-calendar) &amp;#x200B; Or you can opt to build it in 2 days (even though strangely you took **15days** to reply that you did). Have a good day sir 🍻.
https://www.raywenderlich.com/4284-your-second-swift-4-ios-11-app
Thanks!
Sorry, I didn't mean to offend you. If you're still having trouble with writing your sorting algorithms maybe you'll find [this GitHub repo](https://github.com/raywenderlich/swift-algorithm-club) helpful. It has a lot of common algorithms implemented in Swift.
Oh, thanks for that. Admittedly didn't know about that before. Looks very useful!
\[This should be required reading for all Swift developers.\]([https://docs.swift.org/swift-book/](https://docs.swift.org/swift-book/)) IMO
You are missing the point of enums in your post. Enums are *mutually exclusive*. Other types are not. It’s more complicated than saying “don’t abuse enums”.
The very last line. You want: databaseRef.child(users).child(user.uid).setValue(...) You’re currently setting the value of the whole ‘users’ node. You want to go one level deeper and create a new node for each user.
I made a list of hard parts of coding for my partner a while back and she just said “nah that’s a list of what’s hard about life”. (the list was stuff like privacy, internationalization, understanding how people interact with what you build, managing complexity)
Again, yes, that is the *standard* answer these days, for what you *should* do. But I've been filing documentation bugs like that for years, and I don't think I've ever seen any movement from Apple on any underspecified nil/error in the docs. What is the practical effect of such advice? Is this simply trying to push the blame, a la "Yeah, it's not Apple(Swift)'s fault -- it's Apple(Frameworks)'s fault!"? Or make me feel good that I'm 'doing the right thing'? Because it really doesn't help me at all. At the end of the day, I still don't know what a nil here means.
Jesus wall of text, can you please format it so it's readable?
It’s often the standard answer because that’s how things work. More radars regarding some issue they see - more likely it will be prioritized on the next development iteration. I’ve never faced any of them returning nil with an untraceable reason. And nil here is “Something went wrong, go figure”. If you want answers on why and when certain method can return nil - ask. I’m more than sure, that some members of community faced that behavior and can share some insights.
You can also just use just the letter \`e\` rather than \`expr\`!
He didn't specify font and page size
Thanks!
Thank you!
Great info. Thanks!
What's the object creation cost in the closure vs defining it in a function? I'm curious. I think the closure makes sense if you are making buttons in a loop, but otherwise I'm not sure what it gets you. You can't move the closure code outside of your View or VC if you were trying to "encapsulate" your code.
Paul Hudson has a few SpriteKit tutorials in his 100 Days of Swift course. There might be some relevant solutions to your problem on [Day 46](https://www.hackingwithswift.com/read/11/5/collision-detection-skphysicscontactdelegate) Good luck.
Also if you're making two buttons that share a lot you would need to duplicate a lot of the code with closures
Components have entity properties. Use a protocol to find the other component on that entity that handles damage or whatever
Also Available as a free ePub on [https://swift.org/documentation/#the-swift-programming-language](https://swift.org/documentation/#the-swift-programming-language)
Most Difficult thing? Naming things.
I'll check this out, thanks!
Yeah, I was thinking of doing this. It doesn't seem like an ideal solution as to do that I need to create a subclass of `SCNNode` that has a reference to it's component (or directly to it's entity) and then use that when the collision is detected on the scene. Not only does this sound like it should be unnecessary, it also moves the logic from the component itself to the `PhysicsWorld`, which seems to go against the whole idea of the ECS architecture. Anyways, I do think this will end up being the solution that I need to use. Thanks :)
You need to updateUser instead of setUser
oh fuck, this is life changing
First of all is Xcode. Case matters! Secondly, _what are you talking about_??? I tried, but failed to see what on earth you could be talking about…
This is the first time I see this `.random(in: range)` syntax, so it's resolving to the `Int.random(in: range` static method by the return type? I don't know this is possible. I learn something new, in addition to you solution! Where can I read about this implicit thing with static method?
You'd probably have some sort of enum and validate this with said registration and show the page accordingly, then you'd probably dismiss the whole nav and show the user the home screen.
There is no xcode specific general way of accomplishing this. You would do the same thing regardless of programming language, at its core. It matters where your users are registering. If they're registering in your app then just show them the appropriate screen after they register (or if the flow is a but more complex, you can do what is below). If they're registering from a website, you can check userDefaults for some value to exist that tells you the post-registration screen has been displayed. If it doesn't exist display the info screen and set the flag. If the value is there then the user has already seen the user info screen and you can just send them to the home screen.
Need more information if you have webservices or not but heres the general gist. 1) user registers 2) user quits app logs out 3) I recommend coredata or realm for db management but you can get away with NSUserExceptions for persistance. Basically app launch you want to read your nsuserdefaults. If the username or password is set to not "" or default values then try the username/password and if success jump to the appropriate screen. Most times this is why there is a launchscreen/splash screen. 4) in your app delegate there is a did finish launching with options... follow this to allow you to jump between screens. https://www.youtube.com/watch?v=1hCwOIgjLBA
Does it matter? Since you’re only interested in finding two indices that are the same and also point to the maximum value; it doesn’t matter if there are more than one pair of indices that can satisfy the requirement... or maybe it does - really up to you to decide what to do if that happens.
seems like it doesn't matter at all because the op deleted his question :P
Not the best but, fetch the whole array of users, append to such array and then write that array to firebase. That way you are not overwriting them.
If this is done, then i wont have to do it. [https://www.zdnet.com/article/iphone-ipad-mac-apps-merging-apple-sdk-will-create-ios-apps-that-work-on-mac/](https://www.zdnet.com/article/iphone-ipad-mac-apps-merging-apple-sdk-will-create-ios-apps-that-work-on-mac/) But yea, i have it in my bucket.
The Swift interpreter can infer types in many situations, not just with static methods: [Swift Language Reference: Type Inference](https://docs.swift.org/swift-book/ReferenceManual/Types.html#ID457) For example: enum Foo { case one, two, three } let bar: [Foo] = [.one, .one, .three, .four]
You need to create your valueHolder object inside your for, right now you are just updating its reference. Also I can’t test this right now but I am pretty sure it’s this
How can you tell if you’re updating a reference or not? I put the valueHolder in the for loop and it worked.
Thanks!🙏🏾 I knew about the `.enumCase` inference. I didn’t know about `.method`. I will go re-read the type inference section.
The language guide's page on [Classes and Structures](https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html) would be a good resource to read on this - particularly the sections titled "Structures and Enumerations Are Value Types" and "Classes Are Reference Types". In general, if you are interacting with an instance of a Class, you're interacting with a reference.
Yeah let hope that this will happen in a good way. A lot more libraries to use in Mac apps.
Lots of ways of doing this, of course, but here are some of the choices I made: 1. Save a UserDefault value after the user has successfully 'completed' the user info page. Nil will indicate that the user has not yet completed that process. 2. In the ViewWillAppear method for the main start page (where they go after registration and user info input), check the UserDefault value and show the user info page if needed (if the UserDefault value is nil) 3. Display the user input page as a modal view controller that appears over the top of the main start page. I chose a form sheet presentation because it sizes automatically to just the right size over a split view on iPad, etc. 4. The user dismisses the user info modal with 'Save' or 'Cancel', which dismisses the modal, leaving the main page now visible. 5. If any info from the user info page is required for display on the main page, pass it back using a delegate protocol. 6. Add an item in the app's 'Settings' view controller that allows the user to show the user info page again, either immediately or at the next launch of the app
Class is a reference type, thus every time you change valueID and holderIndexPath inside the loop you're updating the same object.
viewDidLoad() {}
This is exactly what I do in my apps.
Does it look or act like a Collection (even if you're not actually conforming to that protocol)? If so, then definitely use `count`, because [that's what Swift Collections use](https://developer.apple.com/documentation/swift/collection/3017670-count). For example example: ``` class SearchResultsContainer { let results: [SearchResult] let count: Int } ``` In this case, I'd use `count` (rather than `numberOfResults`) because it's very clear what `count` means in this context. And while it's not actually a Collection, it is similar enough that I'd want it to match.
A couple things to note: 1) You're making an array of references to the same object (class instead of a struct), valueHolder. What happens is when you loop over it again and change what \*feels\* like the current one, you're actually changing all of them. 2) You're using one loop to increment as well as append to an array, and then you use a separate one to print the array's content. &amp;#x200B; To get the output that you want, you could either: 1) Use a struct rather than a class - I believe this would make it so even though you use the same variable name, your array will contain unique objects upon appending (as opposed to references to the same object), or 2) Print immediately after the append line, and without the loop - This would still result in 4 references to the same object (betting that's not what you want), but it would nevertheless get you the output you expected.
To add on, try adding this line right below the `for` loop so that it looks like this: for i in 1...5 { valueHolder = Value() valueHolder.valueID = i - 1 I'd recommend learning about Classes vs. Structs as well, but this is a fix that can help teach you through example
Most tedious for me was in the beginning and just figuring out where to start. There's a huge mess of info out there that it can be stagnating unless you have a mentor or friend to give you a direction at first. &amp;#x200B; Most rewarding to me is just how accessible everything is (ironically). I tell my friends to imagine like you have a garage where you literally have every tool in existence and you can build anything. If you don't have a tool, you can make your own using other tools. And they're freaking free. The communities are great, and the possibilities are endless.
To add on a bonus tip, typically, code like this: for i in 1...5 { valueHolder = Value() valueHolder.valueID = i - 1 Would be written like this: for i in 0..&lt;5 { valueHolder = Value() valueHolder.valueID = i That eliminates having to subtract out 1 from the loop each time.
Is the erh ... user interaction enabled on the overlay?
Not sure what you mean, sorry.
Sorry brain fart. User interaction flag does not exist in app kit nsviews.
An instance of a class is always a refernence. in the for you just update the same item over and over and put it 5 tines in the array and in the end you will
This should be the accepted answer
In my experience, that is totally an implementation detail and will vary based on device and user. I've worked on bug reports where some users were seeing out-of-date content because their device had a really large hard drive, and therefore the OS dedicated more cache space to the HTTP cache (it was still a bug in our server response, but only observable on top-spec machines). Unless otherwise specified, caching by the OS should be considered an optimization and therefore context-specific and unreliable.
Sure you can. let nav = UINavigationController() let root = MySpecialViewController() nav.pushViewController(root, animated: false) In the context of the question, now `root` is the root view controller of the navigation controller.
You can push, and it will become root.
You definitely can. - https://coderwall.com/p/0oadzg/hashbang-swift - https://krakendev.io/blog/scripting-in-swift You should also look at the Swift Package Manager, which you could use to build and run more complex Swift scripts.
letterButton.setTitle("WWW", for: .normal) You set the button title to WWW with this line and never change the title. Thats why :)
Your ‘closeDelegate’ seems to be nil. Check the code where you’re setting that value, that’s where you’ll find the problem.
Delegates should be defined as weak optional vars so they don’t cause a memory leak ex. weak var closeDelegate: ClosingView? You have to set the delegate like sideBarSubView.delegate = closingView before it will work
Call loadLevel() in viewDidLoad()
He does.
Oh yeah sorry. There was a lot of code and I missed that line. But he’s not appending letterButton to the array.
Thank you However I’m still running into issues , it won’t allow me to make it a weak var because I get : 'weak' must not be applied to non-class-bound 'ClosingView'; consider adding a protocol conformance that has a class bound Apparently this is because my protocol need to conform to something like NSObjectProtocol or AnyObject So I did that , and that side is working However I can’t set delegate to CloseView because I get : Cannot assign value of type 'CloseView.Protocol' to type 'CloseView?' Am I misunderstanding something 🗿, because I’ve looked on forms , videos , and everything either crashes or just doesn’t do anything
Did you set translateAutoresizingmask to false? And make sure your constraints are activated?
The protocol should be declared like protocol Blah: class {}
Oh you put class there , ok thank you , im so sorry that im so stupid, however I’m still getting that error: Cannot assign value of type 'CloseView.Protocol' to type 'CloseView?' Is it ok of I DM ScreenShots.
Hi all, I am building a dice rolling app and would like to know a method of choosing how many dice are displayed on the screen. Would a picker be suitable for this?
This is the correct answer. [Paul's code](https://www.hackingwithswift.com/read/8/2/building-a-uikit-user-interface-programmatically) appends the `letterButton` to `letterButtons` after adding it as a subview near the end of the `loadView()` method. ``` // set some values for the width and height of each button let width = 150 let height = 80 // create 20 buttons as a 4x5 grid for row in 0..&lt;4 { for col in 0..&lt;5 { // create a new button and give it a big font size let letterButton = UIButton(type: .system) letterButton.titleLabel?.font = UIFont.systemFont(ofSize: 36) // give the button some temporary text so we can see it on-screen letterButton.setTitle("WWW", for: .normal) // calculate the frame of this button using its column and row let frame = CGRect(x: col * width, y: row * height, width: width, height: height) letterButton.frame = frame // add it to the buttons view buttonsView.addSubview(letterButton) // and also to our letterButtons array letterButtons.append(letterButton) } } ``` When the OP is looping through `letterButtons` in the `loadLevel` method, there are no buttons in the array, so the title isn't set to `letterBits[i]`.
&gt;for i in 0..&lt;letterButtons.count { letterButtons\[i\].setTitle(letterBits\[i\], for: .normal) } I had added this bit to change the titles of the buttons. It's at the end of the code in the post. The code I wrote is supposed to get the groups of letters from the left of the colon that are separated by | and add them to the buttons. HA|UNT|ED: Ghosts in residence LE|PRO|SY: A Biblical skin disease TW|ITT|ER: Short but sweet online chirping OLI|VER: Has a Dickensian twist ELI|ZAB|ETH: Head of state, British style SA|FA|RI: The zoological web POR|TL|AND: Hipster heartland So the buttons are supposed to contain HA, UNT, TW, etc... I tried removing the letterButton.setTitle("WWW", for: .normal), but the buttons don't show up if I do that.
&gt;Is there a step I'm missing other than using the addChild method on the parent view controller and adding the view You need to call the **didMove** function. &gt;This is mac, btw. At least for iOS, not 100% but I'd guess that it also applies to macOS.
It worked! Thank you
I don't think "a single wrong character can ruin the entire app" is an example of tedium *or* complexity.
&gt; But I’ve also seen Swift use numberOf, as it in numberOfRowsInSection when working with tableviews. That's not Swift. That's UIKit.
&gt; but jumping from one platform to another quickly is much easier when everything has a "++" and other compatible patterns. For instance, if I do a for each loop in swift instead of a c style for loop You mention Python in the title of the question as an example of an easier language, but Python has neither a `++` operator, nor C-style for loops. Python uses `+= 1`, just like Swift, and Python loops are Swift-style only. Their version of Swift's `enumerated()` is spelled `enumerate()`. If you're jumping to Python a lot, Swift should be much easier than dealing with those "C style languages".
Thankfully that is possibly the easiest popular language to simply pick up and refresh in an hour or faster and be writing algorithms quickly. I am not a python coder, mainly only used it for studying algos and doing coding tests and similar.
&gt; I strongly believe that the objective of a tester should be to come up with funky scenarios, not to write code. That's why usually the developers implement the test cases created by the testers. (At least for UI testing)
You’re not stupid you just missed something along the way. It happens to everyone from time to time. Did you get your issue worked out?
Container view sounds like the right way to go. Also you may want to sequence your onboarding views into a UIpageviewcontroller. In terms of transitioning between view controllers, look up how to implement segues. Finally you may want to look at introducing a router/interactor+presenter to handle all the transitioning logic... but I’d do this after you get things hooked up and you’re comfortable with the concepts...
How is `trashLyric` being called? Is it being called from the main thread?
Uhhh
Normally I would do a navigation controller and push into the next view. Then disable the back button for the navigation controller. Essentially replacing the view with the new one without having to do container switching as that is not normal practice.
Thank you for your support But no I haven’t, I had some other things to attend that I just finished now and so I stoped working on my app.
The thing I am most confused about is how to use SQLite with the app. I need to fetch data from the database onto the app. And integrate an alarm clock to give a reminder. Thank you for the response.
Thanks a lot. Will look into it.
You could just use straight SQLite for your database needs... it would be more common to go through Core Data, though. Or perhaps Realm, which I see a lot of mention of but have never looked at myself. As far as alarms, well, you can schedule local notifications for specific dates/times as needed. You can also check what scheduled local notifications you already have pending and cancel those that you no longer want, such as if your user wants to change or delete one.
Hopefully this book is more detailed than what my short answer could give you (Haven't read this one, only some others from this author) [https://www.hackingwithswift.com/store/hacking-with-macos](https://www.hackingwithswift.com/store/hacking-with-macos) &amp;#x200B; But if you are not already familiar with iOS programming then I'd start with that as UIKit is basically a simpler version of AppKit with less legacy code and undocumented behaviour and the rest of the stuff is mostly the same.
Ooo, and to keep adding on, you could use an initializer/constructor with those class members as parameters
For anyone interested in following the evolution of this tool you can follow us here: &amp;#x200B; Facebook: [https://facebook.com/appmockup](https://facebook.com/appmockup) Instagram: [https://instagram.com/appmockup](https://instagram.com/appmockup) Twitter: [https://twitter.com/appmockup](https://twitter.com/appmockup) We plan on adding new Android support, new frames, templates and features in the coming weeks.
Oooh
Interesting, the UIViewController docs are clear about needing to call those parent/child methods correctly to link the controller into the responder chain, but there is no didMove and no mention of responder chain stuff for NSViewController.
If you'd like you can post a new snapshot of your code and I'd be happy to look at it and help you get it resolved. I think you probably just need to implement the ClosingView in your class: class SideBarSubView : UIView, ClosingView { init() { closeDelegate = self } func closingView() { /// do stuff here } }
Bit masks. &amp;#x200B; Categories [https://developer.apple.com/documentation/spritekit/skphysicsbody/1519869-categorybitmask](https://developer.apple.com/documentation/spritekit/skphysicsbody/1519869-categorybitmask) &amp;#x200B; Collisions [https://developer.apple.com/documentation/spritekit/skphysicsbody/1520003-collisionbitmask](https://developer.apple.com/documentation/spritekit/skphysicsbody/1520003-collisionbitmask)
The iOS-developers slack is much better than whatever discord with 500 members you have...
Not much chance of it, no. Just roll your [own extension](https://www.hackingwithswift.com/example-code/uicolor/how-to-convert-a-hex-color-to-a-uicolor).
Why? its useful.
I didn't say it wasn't but I don't commune with the forces that include or exclude additions to Swift frameworks. Submit it as a proposal if you want it. I took a quick look around and didn't see it as a proposal so I doubt it will be included any time soon.
The one i use is slightly different but ultimately more or less the same outcome: extension UIColor { public convenience init(hex: UInt32) { self.init(red: CGFloat((hex &amp; 0xFF0000) &gt;&gt; 16) / 255, green: CGFloat((hex &amp; 0x00FF00) &gt;&gt; 8) / 255, blue: CGFloat(hex &amp; 0x0000FF) / 255, alpha: 1) } public convenience init(hex: String) { let scanner = Scanner(string: hex.trimmingCharacters(in: .whitespacesAndNewlines)) if hex.hasPrefix("#") { scanner.scanLocation = 1 } var color: UInt32 = 0 scanner.scanHexInt32(&amp;color) self.init(hex: color) } }
Not really, why would you spend any computing power on converting string to color when you could use color literals? [https://medium.com/@gurdeep060289/color-image-new-literals-in-the-cocoa-town-7ef4f2710194](https://medium.com/@gurdeep060289/color-image-new-literals-in-the-cocoa-town-7ef4f2710194)
As an iOS developer trying to make his own macOS app, I found it is helpful to replace the UI prefix with NS, and google that. The concepts for iOS and macOS are similar enough that changing the prefix and googling that points me in the right direction. As for your question, I’m afraid I can’t answer it.
"**if** difference &lt; 0" &amp;#x200B; is difference ever less than 0?
Yeah, that right there has been a problem. I had that there before making the numbers absolute value when getting the difference, but for some reason removing it causes errors to appear all over the program
Well, I mean, as you of course already know “Hex” is just a integer notation, which is already supported by the language. You can write any integer in your code as a hex value. Additionally, HTML-Colors are just RGB values in hex notation without spaces and a `#` instead of the `0x` prefix. So if we’re only talking about constant colors (e.g. you get from your designers), you can simply use UIColor’s `init(red:green:blue:alpha:)` and just feed in your hex color values (manually separated, of course), so e.g. the whole code for the HTML color `#6699CC` would just look like: UIColor(red: 0x66, green: 0x99, blue: 0xCC, alpha: 1.0) No extension needed at all! But yes, of course this only works for constant colors, and doesn’t work for anything dynamic, like colors you get from the backend or so.
1. Git gud 2. Here is an advertisement for my discord This is like r/restofthefuckingowl, but in reverse.
that's because if difference &lt; 0 then you are declaring "message" twice, once inside of the if block and then right afterwards. change it to &amp;#x200B; if difference &gt; 0 { score += points let message = "You scored \(points) points" } else { let message = "The value of the slider is: \(currentValue)" + "\nThe target value is: \(targetValue)" + "\nThe difference is: \(difference)" } this way message is declared once either way.
I like how swift is unavailable
In the lower left corner, what does it say when you click the “play” button?
Yeah this works, just click the 'other' button and put in the hex value if you don't want to roll an extension.
What about if the values are coming from a server?
I’d imagine that by starting a new game you’d want to clear all previous user progress (which is stored in UserDefaults I assume)? If so, when you press the New Game button, you’d want an action handler to execute a function which clears the current progress. You can remove objects from UserDefaults using the built in removeObjectForKey(KEY) method. After you clear your user’s stored progress, you should use similar logic to what you posted, where it checks if there’s current user progress and continues where they left off, ELSE it executes startGame() when there’s no entry for current progress in UserDefaults. Is that what you were asking?
I have a hard time stack overflowing anything about Swift :,(
yep, will come soon don't worry!
Not repeating others answer.... Here an example: https://www.hackingwithswift.com/example-code/uicolor/how-to-convert-a-hex-color-to-a-uicolor There are others too solutions too. I prefer to use it as separate file, that you can use it in objective c code base and in Swift. I did it in my previous project.
They might not have updated the documentation for the newest Xcode. You can either do as Deeyennay mentions. Or simply try pressing on the blue arrow to the left. That will run the code up to the point of the arrow. Just make sure to press it below the text :)
I mean it really depends on design, but I can’t really imagine your specific table view cell explanation... I could imagine how it would be a view controller that has a table view with numerous table view cells with info if that’s what you meant.
And even better, you can replace the manual iteration and append calls to a simple call to map.
Oh, cool. The dots are still not working, but the code is showing up fine now. Thank you, so much I hope that more problems won't occur in the future.
Yeah, that's probably the reason. The play button fixed the problem for now, I hope I won't encounter anything more. Thank you!
Thank you very much , I have tried this , but the Init isn’t working and I’m confused as to why the other code snippets are in this class , but I have proper screenshots, perhaps it will make what’s going on a lot more easier to see [the screenshots of my code ](https://imgur.com/a/3mxWeU8) Some things are different in the screenshots as I tried to simplify it here on reddit , and sorry if my code is crummy or inefficient.
Thanks for the reply. A quick question can Core Data also store relational database?
So I looked up that book and is almost 2 years old. Playgrounds have changed quite a bit in that time. If you want to get acclimated to simple programming concepts I would recommend [100 Days of Swift by Paul Hudson](https://www.hackingwithswift.com/100). The first 12 days are all about learning fundamental Swift concepts. It's all free and there is a cool community on Twitter who can help if you get stuck.
In your example, `root` is inside a `UINavigationController`, which is what I'm saying.
Core Data is just the data and relationship model, but yes, if you use Core Data in your iOS app, the actual data store will be a relational SQLite database. You would use the Core Data editor in Xcode to define relationships between your various entities, and can then access related objects through properties in your generated classes. You'll also often have references to relationships in your predicates that you define for your fetches.
I wrote out a bit of a long post but I think this might work better: https://pastebin.com/12iuFwiH You want to implement your ClosingView/CloseView protocol on whatever class is going to be handling that call. I'm assuming MainViewController is what's going to be controlling the side bar as well as which subview is displayed so you should implement it there. I kind of just made that assumption but the pastebin link above shows implementing it on either class. Does that clarify anything? Note: I'm away from my desk on a windows machine so I wasn't easily able to check my syntax in the code snippets above.
Not sure what your architecture looks like, but a color coming from a server sounds like a bad idea.
Anytime. Hope it provides what you're after, cheers
Ah sorry I thought you were saying that only the VC contained inside the navigation controller could push things onto the stack.
&gt;removeObjectForKey(KEY) This is exactly what I wanted. Is there a "remove all"?
Great! Keep in mind you might not want to clear all UserDefaults for your app if you decide to store preferences or other data in the future.
Its such a common use case why not add it to UIKit?
Really up to you. Does the user need to log in every time you open the app? If so, then login page makes sense. Otherwise it could just be in the way. Most apps store login info so you open straight to the content. Think about how you want your app to function first.
I feel like they have much bigger stuff to worry about
&gt; UIColor(red: 0x66, green: 0x99, blue: 0xCC, alpha: 1.0) That should look pretty white. Because the expected range of red, green and blue is just 0.0 to 1.0. You would need to use `UIColor(red: CGFloat(0x66)/255, green: CGFloat(0x99)/255, blue: CGFloat(0xCC)/255, alpha: 1.0)`
On page 5 in the introduction chapter they have downloads for both Xcode 9 and Xcode 10. Make sure you are using the correct ones. This is a great book, as are all the Apple learning resources.
You may be right but not every single common use case is added to every library every second. If you feel it’s extremely necessary, you can submit a proposal to the swift evolutionary github. However, as the other guy said, they’ve probably been focusing on other issues that need to be fixed in the language other than a single missing method for hex colors.
In the Swift code (before the window is set to appear), add your first and second view controllers to the window's context view controller by using [`addChild(_:)`](https://developer.apple.com/documentation/appkit/nsviewcontroller/1434501-addchild). Then, link the button to an IBAction function which calls [`transition(from:to:options:completionHandler:)`](https://developer.apple.com/documentation/appkit/nsviewcontroller/1434407-transition). For example: func setUpMyViewControllers() { window.contentViewController.addChild(firstViewController) window.contentViewController.addChild(secondViewController) } @IBAction func userDidPressContinue(sender: NSButton) { window.contentViewController.transition(from: firstViewController, to: secondViewController, options: .slideLeft) } ## Important! You may have to tweak the size of the view controllers' views after adding them to the window. You may do this by [explicitly setting their frames](https://developer.apple.com/documentation/appkit/nsview/1483713-frame) or by [adding constraints](https://developer.apple.com/documentation/appkit/nslayoutconstraint).
No. Make your own.
No.
I want to see someone answer this.
Why? I work at a company that is really forcing it upon us. I understand they want to make code easier to maintain, but I see the results and there’s always trouble. What kind of argument would you give?
Is there a company that bases their entire app on it at an enterprise level? Last I heard Facebook still does a lot of their development native and AirBnB abandoned it.
I don’t know, but when you look it up on youtube, for example, you only find guys singing its praises.
Not that I know of, and I’m at a large company with friends at all the FAANGs.
What does that mean?
&gt;that &gt;[th at; unstressed th uh t] &gt;1. &gt;*(used to indicate a person, thing, idea, state, event, time, remark, etc., as pointed out or present, mentioned before, supposed to be understood, or by way of emphasis):* e.g **That is her mother. After that we saw each other.**
Friendly advice: if you’re at a company that is pushing native devs to use React Native, flip your LinkedIn switch to “open to offers.” The last time I saw a company that did that there was a near-mutiny from half the devs. The new engineering manager backtracked on his idea real quick.
/thread.
Just no, yes it’s nice for small apps or to get an MVP going but you’ll never see any super app using either react native or flutter or anything that isn’t native simply because it’s not as potent as native development.
Funny, the best devs in our company left because of this
I don’t know your company codebase, but I think one main financial argument for/against react would be whether the amount of work it would take to provide a great experience that feels native with react outweighs the cost of writing the app in multiple languages. That all being said, as an iOS developer, I would never want to work on react vs actual Swift/objc. IMO It’s much more fun learning the intricacies unique to each platform, which I can imagine would be difficult with React.
Wait and you’re asking why when you even know the answer??
The technology is interesting, but nowhere near being productive, as an ios dev I've tried it and it was way more problems than solutions, then we told our front-end guy, who already knows react, and he took like 2 months doing what I can in a week on native. Besides, as soon as something new comes up, you're SOL
If you don’t mind me asking, What does SOL mean?
I don’t know the answer, they could be wrong.
Trust me they aren’t, and your company pushing you guys to use react native clearly shows your head of engineering or CTO know nothing about app development. Run.
Shit out of luck.
Thanks 🙏
They aren’t. Run.
Facebook, Apple, Amazon, Netflix, Google. Basically the big tech firms.
I worked on a project with the goal of single code base that runs everywhere. &amp;#x200B; We shipped V1. It worked. &amp;#x200B; People wanted more features, and we shipped a V2. However, V2 showed serious fluidity problems. Scroll and transitions were not smooth. We were unable to fix these issues as we didn't have access to this part of the platform/stack. Our write-once, built everywhere codebase started to spaghetti-ify with hacks to run the various surfaces that we had to support. &amp;#x200B; We launched V3 with native apps. We're fortunate enough to have people who decided the cons of the approach outweigh the benefits.
No
Thanks
Google is pushing for Flutter.
If it were a productive and useful technology, wouldn't you think you would be hearing it from industry experts rather than youtube videos?
React Native is old news, AirBnb has given up on it. Flutter is the real threat.
Can’t argue with that logic
LOL.
This
Discord is probably the highest quality React native app out there right now.
Look, I know that the last thirty years of write-once run-anywhere technologies have consistently produce poor-performing, ugly apps with only lowest-common-denominator features that lag behind on new system features and eventually hit a dead end when the underlying framework gets abandoned, but *this* time will be different, really!
Come back in a couple years and tell us how it went.
Dude, ask your coworkers who jumped ship.
Dude, ask them why they jumped ship.
OMG !! 😅 ITS WORKING, Thank you soo much 😪 It seems that closeDelegate = self in the override init(frame : CGRect ) is what I was missing and where Thank you
Worth keeping in mind you’re going to get pretty biased answers here.
I worked in an agency for a few years and had a number of clients requesting cross-platform technologies like React Native, Cordova, Ionic, etc. We hit some major roadblocks on most of the projects we worked on. Most of the time, it was mainly a matter of increased estimates, but more time meant more money in those situations and our clients definitely didn’t appreciate that. So my advice would be: it’s fine for small CRUD projects that don’t need custom UI elements or animations. As soon as you’d want anything that uses device capabilities or anything “fancy,” you run the risk of running into delays or hard stops. But good luck on your project! Let us know how it goes!
I’ll just leave this here https://twitter.com/poli_J_/status/1130823202966507520
An enum cannot have both an associated value and be "backed by a" raw value, you have to chose either. Read more here https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html It would be helpful to hear a little bit more about your use case. What shall the enum represent? If you find it hard to name it (the name `*Reference` does not say much), it might be an indicator that you should go back to the drawing board and think about what problem your are trying to solve :).
DAW? As in: https://en.m.wikipedia.org/wiki/Digital_audio_workstation?wprov=sfti1 ??
 struct SomeReference { private var userID: String public let users = „users“ public var users/userID = { return „users/„ + userID + „/user“ } }
That’s just a dev doing something stupid. In ReactNative SafeAreaView is supposed to be used when handling iPhone notches. Not whatever this is.
This is how I would do it struct SomeReference { public let users = „users“ public let usersData: String init(userID: String) { self.usersData = „users/\(userID)/usersData“ } }
Well besides Facebook, there are a few big apps that use it: https://facebook.github.io/react-native/showcase
Ah, sorry, my bad, you’re of course right! I typed this on mobile from the back of my mind, and didn’t try it before. For readability, you could maybe factor the divisor out: let f: CGFloat = 1.0 UIColor(red: 0x66/f, green: 0x99/f, blue: 0xCC/f, alpha: f)
React Native Apps break really easily. Upgraded React...? It will break. Upgrade any library...? It will break. Try and use a new version of Xcode...? It will break. If you have a React Native App you will be employed fixing it forever.
No; it’s slow, memory-hungry and delivers a subpar user experience compared to native code. It’s fine for internal tools that need to be quickly rolled out cross-platform (Facebook developed it for an ad-selling app), but not something you want to ship to the public.
HAHAHAHAHAHA! Uh.... no. Not a hope. A year or two back I \*wanted\* to believe in it - how could it fail with the might of Facebook behind it? But then I tried using it in earnest for a real-world app and good \*god\* what a mess. That didn't last long. RN exists so web devs can build plausibly native apps, it isn't designed with native devs in mind at all. Worst thing is that the many things native apps need - navigation springs to mind - usually have multiple competing libraries, each with their own bugs and limitations. RN is overwhelmingly reliant on 3rd party designs and code of dubious quality.
It's not fully react native on Android because of performance. As Discord makes one of the highest quality webapp/RN app, it pretty much shows you how RN's cross platform promise falls apart
I developed an app for a project I was working on and will say, No. If you think it’s going to be maintainable think again. We had to develop some features that weren’t available through react native and ended having to not maintain one or two code based, but three! We had to write the native code for both iOS and Android, and the unifying bridge, which took 7 weeks of additional work.
thanks for the reply! I see. I guess I had it the wrong way. To give context, I’m trying to have a type-safe enum reference for a Firestore Collection Reference. I’m following [kilo loko’s video](https://youtu.be/24ef-Zwz2v8) and tried the enum he makes at 49:25 of the video. He uses the enum string to reference the firestone collections, which I could make work, but don’t know how to go about referencing a deeper collection/reference/collection.
Thanks for the reply! I’ll try this as soon as I get to my computer. Also, this makes me wonder. If an enum can easily be replaced with a struct, what’s the point of using enum? I’m getting myself confused the more I read.
Glad it helped a little bit. I don’t have a Mac at the moment so I’m just going by memory lol, wish I could’ve helped more.
Endtest is spamming up tech subs every day with [multiple accounts](https://www.reddit.com/user/boss_scarbos) and [focused spam posting](https://www.reddit.com/user/dragnea_presedinte) that clearly breaks [reddits self promotion rules](https://www.reddit.com/wiki/selfpromotion.)
Yeah, I chose Xcode 10. Maybe I will try Xcode 9 as well. 🤔
&gt; Flutter is the real threat 😑
Native will always be supported by the native platforms. With RN it really depends on the community
Agreed
It’s not that an enum can easily be replaced by a struct, it’s just that in this example an enum really wasn’t needed. As far as I understand it you should only use an enum for data types that can be in multiple discrete states. Like a Boolean can be either true or false, no in between. A good example for an enum would be country names. You have multiple discrete states that a Variable of type country name could be in, like “England” or “Germany”. Note that these are discrete states, as there is no in between, like “Engmany”. You could just use Strings for this but an enum would make development easier and especially safer, as you can’t use “illegal” country names, just the ones you declared in the definition. I hope this helps and I hope that I’m at least kind of correct lol
This makes a lot of sense. I’ll try to keep it in mind for future projects. Thanks a lot!
Are you storing this data? How often do you update?.. oh, you probably dont have my problem, as youre probably updating if the user moves a certain amout right?
You see i need to update the location regardless of if the user moves or not, but if i update the location too often, then i get a problem. But if I update it too not often, then the map looks like shit.
You can use associated value and computed var on your enum: &amp;#x200B; enum SomeReference { case user(identifier: String) case other &amp;#x200B; var value: String { switch self { case .user(let identifier): return “users/\\(identifier)/userData” case .other: return "other/" } } }
Well that's a rant. How about a deep breath and some code instead?
The locations are stored in memory in a TripBuilder class while the trip is in progress, and updates maybe every 10 meters (don’t remember the exact delta). While the trip is running, one polyline is drawn from the last location to the current location. When the app goes into the background, the map is cleared and doesn’t update. When back in the foreground, I have a function that redraws the map from the locations in memory. When the user saves the trip, I reduce the amount of locations I need to store to core data by a nifty algorithm I came up with (might take 4000 locations down to 400 or so while retaining good resolution), then save those locations as an ordered set of managed Location objects (with lat and lon properties) to Core Data. When a user needs to view a previous trip, a similar algorithm converts from the saved Location objects to CLLocation objects, then draws polylines on the map from one location to the next.
Why do you need to save a location if the user doesn’t move?
Yeah..."some code", when the F'ING IDE gets the F out of the F'ing way!!! Deleted "derived data" and did a clean build. Still the same f'ing error. WHY???!!!! I COMPLETELY HATE that xcode sometimes feels as though it is endless workarounds and errors and bullshit such as "oh, try doing clean and build" or "delete derived data" or other such utter crap that apple SHOULD HAVE ALREADY F'ING SOLVED SO THAT AN IOS PROGRAMMER DOESN'T HAVE TO!!!
I don't know what you're doing but most people don't have these issues.
There should be an xcode troubleshooting employee in every company to support THE PROGRAMMER so that THE PROGRAMMER can F'ING PROGRAM!!!
"Most people" probably don't make custom frameworks. "Most people" simply download trendy frameworks from github or only use the apple frameworks. TRUTH. Don't deny that.
I make custom frameworks all the time, modules are a great way to package up code and separate concerns. It's a pretty common design. And again, most people don't have these issues. Post the code and let's see if we can solve the problem without just ranting about it.
Its essential not sure if i can tell that
Aha okay. Yeah. I think i fixed my problem thought. If theyre driving then i update location every 10 seconds and if walking then 20
My problem with Flutter is.. will it be here in a few years? Google kills stuff all the time.
It's a simple class in a swift file inside the framework. Class is marked public. Init is marked public. There is only a var so far. (marked public) WTF else needs to be added so that xcode will actually listen to those keywords?
"[Because 14 different WORAW technologies is chaotic!!! We need to create a standardized framework](https://xkcd.com/927/)" -Facebook
No.
Do everything listed here: [Import Framework in Swift Project, Xcode](https://stackoverflow.com/a/40990828/887210) It's pretty much how I do it every time and it works perfectly. I just followed the instructions without anything going wrong.
Why is this so down voted? If even half the people were as inquisitive as OP, rather than blind following band wagons, we'd be in a much better place as a society.
I'm posting this on a more visible comment so people can see it easily: --- Do everything listed here: [Import Framework in Swift Project, Xcode](https://stackoverflow.com/a/40990828/887210) It's pretty much how I do it every time and it works perfectly. I just followed the instructions without anything going wrong. Here's the example class I created: public class TestClass { public let foo: Int public init(foo: Int) { self.foo = foo } }
Yeah, basically the same thing. I tried with CLASSNAME.init() now instead of simply assigning the new instance to a var using CLASSNAME() and the NEW F'ING error is: "all 'init' candidates are inaccessible"
You probably have something messed up in your project settings, I'd have to poke around and see what's going on. Does the import statement work correctly? Did you build the framework as release and import the release version?
&gt; I work at a company that is really forcing it upon us. How many technologies can you name that succeeded this way?
You think random people on the internet will give you a better answer than the best developers you know, and have worked with?
The web is headed for a dead end and will get abandoned?
&gt; you can submit a proposal to the swift evolutionary github UIColor isn't part of Swift.
It's a new project. Yes, scheme is set to release. Have seen other issues with xcode using swift with custom frameworks. Really should be a MUCH smoother process and experience.
I don't know what's going on at your end then, I don't have the same issues. Creating and using frameworks has been fairly straightforward and works well in my experience.
Check out this answer https://stackoverflow.com/questions/38162602/checking-if-textfields-are-empty-swift
I haven’t looked at your code, but remember, whatever your putting inside it as a container for content, needs to have their width or height constraint equal to the scroll views height/ width to make it scroll, opposite axis, if you want vertical scroll, fix your width constraints
I was hoping it was going to be straightforward today. Recently xcode had some other weird issue on another project and another framework didn't show in autocomplete. Today these new errors. Maybe should reinstall. Using xcode 9.x.
I'd try clearing out your preferences first, see if something is wonky there. Just move the appropriate ones to the desktop and restart the computer. Strictly speaking you shouldn't have to restart but there may be a process hanging around that you don't catch and it might hang on to old data. Restarting the computer is a good way to ensure that the old processes are killed.
Thank you for this remember, I do have a line where I set the frame of the view to = the scrollView frame ... I reorganized it so i can set the view frame first and then make the scrollView However this isn’t working
You shouldnt really ever use frames, not for like the last 3 years ? unless your playing with layers
You can do a @designable to make it a storyboard property maybe
Uhm ? Well I think i am using layers though , I have subviews Or have I lost the plot on layers
You can't possibly be serious, most of those super apps only use it literally in a screen or two and heck only did it to test or as an experiment, Discord is probably the only good example and even then it isn't fully RN.
Thanks, I am aware of it, I already asked the same question on RN's sub
no layers are a level deeper, with views generally you would use autolayout, this ensures your layouts work across devices and future proofs it.
Like, layer-backed views, or a layer hierarchy? I don't see any layers here (though you pasted a *screenshot* of your source code, instead of the plain text, so it's impossible to search).
I can definitely see why. I mean I don't know the specifics of your company and ReactNative does have a purpose. But I wouldn't stay at a company that switches to it.
Ok ,... so must I Remove the frame in my code there , what then can I use to set the size on the internet everyone is uses frame to change the size
What would you need from my code to know that , I just put the code that I thought was necessary for this scrollView issue
There's a million little weird things going on here: - Assigning to `frame` directly - Defining locals that shadow properties, so it looks like you're assigning `frame` directly in other cases, but aren't - View and controller subclasses that have no apparent behavior or state, and are instantiated inline to call one factory-like method, and then immediately destroyed - Weird capitalization, spacing, and spelling that don't technically cause problems but make it really hard to read My suggestion is to first take half an hour and just clean this up so it's readable.
criosist just told you: &gt; with views generally you would use autolayout
This is a FAQ. With recent versions of Xcode, you need to click the run button in the playground to actually run it.
command+r
your response is a different object that has a businesses array that contains businesses. you are expecting the response to be a single business
Tip: If your properties are named in the same way as the properties in the JSON there's no need to declare the CodingKeys enum and the init(from decoder: Decoder), also if you use the convertFromSnakeCase decoding key strategy in the JSONDecoder you can have properties in camel case like this: zipCode, and it will automatically map to the snake case property in the JSON, in this case zip\_code. This really helps to have less code in your models. &amp;#x200B; About your issue, check if your JSON doesn't have a parent node like "business", where inside the node is the business values, i've had that problem before. &amp;#x200B; In this case you'd have to declare a BusinessResponse struct sort of like this: &amp;#x200B; `struct BusinessResponse: Codable {` `let: business: Business` `}` &amp;#x200B; and then you'd try to convert the Data to that object, and access the business from: businessResponse.business
Hmmm if your not familiar with autolayout then you got an upcoming learning curve :/
Yes
And how?
I guess u can show the camera vc and then have a small vc on the bottom playing a video?
I don’t have access to your code so what I say may or may not apply but I think I understand the issue.. So if the text field is empty and you supply the right text then the button is enabled. That’s the first condition. The second condition is that if the text field already has the string given to it from another view (so no user input on the view with the text field) then it should enable the button, right? So you have a function called “submit” that does one thing: enables the button when there’s text in the text field. So here’s what you’d do, you could create a property observer on your textfield (so a `didSet`) and in that observer, whenever the text field is set, you call “submit” or the name of the function that enables the button whenever the text field has text in it. You could either do that *or* add the “submit” function to viewDidLoad to adjust the state of the text field the moment the view controller loads. Personally, I’d lean towards the property observer or id add a target to the text field (I’m on mobile so I can’t really look this up but it does exist. There are targets you can subscribe to for your text fields that will observe it. Similar to adding targets to UIButtons)
Not necessarily, YouTube is much more accessible than industry experts. Even if they did exist, it's not something you're as likely to run into.
I'd disagree. I think most of us have had issues with Xcode and Swift just not wanting to work. Usually for most of us, it goes away after a bit, but not before getting us out of our flow. Really, the quality of the tools Apple is putting out is just obscenely poor, given the amount of resources they have. There's no excuse.
You're mistakening amateur analysis to industry applications.
It might be helpful to know that in the early prehistory of Swift, enums were called "OneOf", as in "one of these possibilities".
Throwing away Derived Data, compiling the whole project from the ground while making a nice coffee for yourself starting with grinding just the right amount of Kenyan beans for your Chemex brew is just part of the ritual. And once you're back at your desk with your comforting drink and totally relaxed from the zen experience of slowly pouring over hot water over your coffee in a counter clockwise motion it's just a few minutes until your code has compiled again.
Any developer that's familiar with RN will have an opinion on it. The OP is specifically asking for opinions. There's no objective answer to this question.
That doesn’t mean you don’t want a representative sample of the developer community that knows about react native. When you do polls you still try to eliminate bias. I didn’t realize he had asked in more than one subreddit.
‘loadLevel()’ is called immediately when you press the bar button. Maybe it should be called after you click the action in alert?
This is sick.
Where did you get that from?
What do you mean? Isn't it called after I present the alert?
&gt; in a counter clockwise motion Widdershins, gotta use the perfect zen term for that!
I haven’t looked into WatchOS in a long time, but if nothing changed since, WatchConnectivity’s `sendMessageData(_:replyHandler:errorHandler:)` is the only way to send generic data between the two devices. There is no stream concept or similar, so you need to slice your audio data into chunks, and send it over the air using that mechanism. Timing and such you have to do manually. Also, depending on your application, compressing the audio data might make sense instead of sending PCM, so you have a bit more time for each packet
Those screenshots look great! I’ll try your project when I publish my next app.
&gt; Hello fellow developers, i hope everyone is having a productive day. oh, fuck.
This is a great site from Ben Scheirman that goes into every detail of Swift Codable http://swiftjson.guide
Could you rephrase that? I don't understand what you mean
No, it is called right after presenting the alert. It should be called in the action closure, after you set the value of ‘answer’ property.
haha thx!
Awesome to hear, tag us on facebook, instagram or twitter and we'll shout out your app. [https://facebook.com/appmockup](https://facebook.com/appmockup) [https://instagram.com/appmockup](https://instagram.com/appmockup) [https://twitter.com/appmockup](https://twitter.com/appmockup)
My pleasure, hope you find it useful.
If it has to do with time at a given location, you could use the timestamp property of CLLocation and calculate the time between locations. Anywho, good luck!
&gt;provide a great experience that feels native \^ if you can drop this requirement then it might make sense. But management has to be seriously commited to MVP, with engineering being able to veto pretty much anything with "No, you can't have that because you already made that tradeoff to get react native." If that's not \_really\_ the case, then its likely to end up as a write once but it takes twice as long to get it done situation, and a pretty unpleasant dev experience.
At my company we have several people pushing a decade of experience with iOS dev, but none of us is making videos about how great swift is. That's because we have day jobs and kids, and who has time to make fanboy videos about crap you just spent 40+ hours working on this week. And \*if\* any one of us did make such a video I'd expect it to be one of the junior to mid level guys....think 25 year old single dude with too much free time.
Curious to what the general response was there, all in favor of RN i guess?
&gt;real threat It's never a threat. Ever. At best it'll be a really good option, but never "the" option or a replacement.
Thank you for this :)
That was precisely my point with my original comment. You hear the opinions of people on YouTube because they're what's accessible. You don't hear from industry experts, because they're not as accessible.
Thank you.
[Didn't someone else post that just yesterday](https://www.reddit.com/r/swift/comments/bre5lm/best_way_to_learn_swift_and_other_programming/?utm_source=share&amp;utm_medium=ios_app&amp;utm_name=ios_share_flow_optimization&amp;utm_term=control_1)
Their account is 13h old at the time of commenting; it’s likely the same person.
marketing at its finest
&gt; i hope everyone is having a productive day. Fuck
Doing good work btw 😊
Yep we get a ton of posts about the latest discord server. Seems like everyone has their own now.
By reading documentation
too many. i've subscribed to a few and i find them useless as you have to be in the moment to follow a conversation, or even understand wtf is going on. when i post a question if no one saw it the first 30 minutes, i can forget about anyone looking at it. and then people will ask the same thing over and over and over.
By making a list of items you want to get done and then crossing them off when they’re complete.
If this thread was more popular this comment would be gold
RTFM
Lol
I like to think of the end product, what I imagine it will be like, currently struggling to finish my app, but I don’t want to give up on those one!
I am building my first app and honestly it feels daunting, but I've been moving through it. Today though I sat down and wrote an actual requirements list for launch. This helps keep me focused because I kept thinking about other things to add. It helped me plan out the next two updates after too. I also set a deadline for myself. That will help me keep grounded and writing code every day instead of playing around with mockups. Lastly, I don't just leave it up to motivation. I actually have it on my todo list to "log" 10 hours a week (ideally 15.) I write code for a living at my day job (different context) and it's hard to come home and do more code. I take a 2 hour break for dinner/recreation and then if I don't have anything else going on that night I write code for 2-3 hours. If I can achieve this on 3 days and get some work in on one weekend afternoon I have a pretty productive week. I'd say my app is about 25% of the way done right now, and some sessions I don't get a ton of actual code written because it's me learning a new concept but as long as I can tell myself "You did x y and z today" it feels like time well spent.
I think the important thing with programming at all levels is mixing in items on a list that are challenging and items on a list that are easy. Programming is a teeter-totter. It's easy to burn yourself out and it's easy to bore yourself.
Haha yeah you’re going to have to use a protocol and delegate. Well, you don’t have to but it’s such a vital part of programming. I even struggle with it sometimes but if you just sit down and go through a few tutorials and actually learn it, it’ll make problem solving in the future much easier. Here’s a simple YouTube tutorial I found helpful when first learning about delegates : https://m.youtube.com/watch?v=DBWu6TnhLeY
Delegates do seems like your best bet here, why don’t you want to use them? They’re not so bad :) ``` protocol YourDelegate{ func appendToArray(_ item: YourType } ``` Then in ViewController1 ``` class ViewController1: UIViewController, YourDelegate{ func appendToArray(_ item: YourType{ //Append it } } ``` All you need to do now is set your delegate and hook up the action
by making money
💲\_💲
`present(_:, animated:)` returns immediately after setting up the alert to open, not after the alert is dismissed. If it didn’t, and instead it was “synchronous” or “blocking”, then that would be blocking the main thread, which would be bad. Must read the docs to know this behavior (maybe, documentation isn’t what it used to be), or the fact the func/closure parameter is marked “escaping” should be a clue to you that it’s called later and `present` is async. Or just know that this such a call that has an open-ended duration wouldn’t be synchronous because the OS shuts down an app if it blocks the main thread for too long (IIRC).
I recommend Asana for that - used it as a team of 2, and we still use it today.
Thinking of the end product is demotivating for me- mainly because I’m thinking about the gap between what I have and what I want.
Antidepressants. &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; Just kidding, set small goals that you can easily achieve that way you know that you are always making progress
Read. The. Manual
Is this fastlane screenshot as a service?
By having always more than one project on the workbench. That way if I hit a wall and walk away, I don’t just dread going back to the same wall.
Challenging tasks are tough. There's no other way than to keep hammering at the problem really. But breaking it all down into steps (even if small) keeps me focused and organised.
Why exactly do you want to avoid delegates? That's a perfect example of when to use them. &amp;#x200B; I mean you could do it with different techniques; pass the array as an inout parameter to be able to modify it from your ViewController2... or use NotificationCenter... or pass a callback to your ViewController2 to execute when the button is clicked... but they're all less straightforward than using delegation really.
Hey I started learning swift watching videos from his channel! I didn’t know he had a video about protocols. Yes, I guess you’re right... I should let myself learn step by step. Thanks for the link!
protocols and delegates and errors oh my. I just don’t have a lot of good memories around delegates... but I went over some tutorials, delegates seem a little more easier now. your code was very helpful, thanks! So I saw some samples where it sent the entire ViewController as a parameter. For instance in your example it sent ~~~ protocol YourDelegate{ func appendToArray(_ sender: ViewController) } ~~~ and in ViewController2, sends itself ~~~ weak bar delegate: YourDelegate? ... delegate?.appendToArray(self) ~~~ then in ViewController1, when using an item from ViewController2, ~~~ func appendToArray(_ item: ViewController2) { array.append(sender.item) } ~~~ I thought I’d try this so *maybe* I might want to send more items from Viewcontroller1 to Viewcontroller2. Or should I stick to sending 1 parameter at a time?
Org mode checklists!
I just remember spending days trying to figure out an error from using a delegate and have been avoiding them ever since... I guess it’s time to stop whining... Also, thanks for the advice! The more I read about delegates the more I’m convinced this is the right option...
When you instantiate the cell from dequeueResuseableCell, it is a UICollectionViewCell. This class has no knowledge of randomProperty. You must cast it to your custom cell class. The register function just tells the collection view to return a UICollectionViewCell created from your class when you specify an identifier. But it is still returned as a UICollectionViewCell. &amp;#x200B; let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "COUNTERCARD", for: indexPath) guard let customCell = cell as? CounterCard else { // error handling return cell } customCell.randomProperty = "Test"
RxSwift, a modern software need a modern asynchronous interface, PromiseKit are also a great candidate for this
I didn’t understand the concept of delegates and protocols and how they work. Which VC got the delegate, where and how to implement it, how it was called? I’ve watched that video probably 3 times. Maybe more. It takes repetition. Do it enough and you’ll start to understand how it works.
Many things keep me motivated but here a few that happen a different development stages: - beginning: So many new toys to play with! Having so much freedom to experiment it really nice and keep me going when I actually don't really have a working app yet - beginning: Thinking over and over the main idea "will this app do this? Or that? Or should it be targeted toward this audience instead?" again, since nothing is there yet, the mind is free to explore - end: Tester feedback, having tester tryout and give you feedback about bugs, UI, UX and general feelings about monetization is a huge motivator. It makes it clear how to act to reach the final state - end: doing extensive testing myself. I try to put the app in weird states, try to break it, play with it a lot. Usually I find stuff that is not really worth fixing but it feels great to be playing with your creation for a bit The middle part is the hardest for me. The dust has settled on a product and you have to make it, but it's nowhere near ready yet and it seems like it never will. In this case what motivates me is, ~~errr…IDK I just struggle and that where half my projects die~~ showing the app to other people, doing something else for a bit,
protocols and delegates and errors oh my!\I just don’t have a lot of good memories around delegates... but I went over some tutorials, and delegates seem a little bit more easier now. Your code example was very helpful, thanks! ...So I saw some samples where it sent the entire ViewController as a parameter. For instance in your example, the protocol would be: ~~~ protocol YourDelegate{ func appendToArray(_ sender: ViewController) } ~~~ and in ViewController2, it sends self ~~~ weak bar delegate: YourDelegate? ... delegate?.appendToArray(self) ~~~ then in ViewController1, when using an item from ViewController2, ~~~ func appendToArray(_ item: ViewController2) { array.append(sender.item) } ~~~ I thought I’d try this so that *maybe* in the future I might want to send more items from ViewController2 to ViewController1. Or should I stick to sending 1 parameter at a time?
This turned out to be the thing that works for me. I use trello, just moving cards to done and watching my “launch” to do list steadily shrink temporarily helps release the stress and anxiety of me burning through my life savings as I work in this thing 😬
Casey?
This website has no affiliation to fastlane or it's services. You may call it a free screenshot builder.
Someone has to haha, thx!
My pleasure, hope you find it useful!
You're welcome!
A couple of years ago i built an app for cryptocurrency miners to monitor their rigs on different pools. I had to implement 19 different pool API's, a cryptocurrency tracker and a mining calculator for roughly 300 coins. It was daunting to think about, and there were times where it got tough. Staying organized got me through. Before starting the app i knew everything i had to build and laid out all the features in Trello, so i can mark them as completed once they were done. Every completed feature was like a small win every day. Another thing i did was give early access to friends and fellow developers who wanted to test the app. It keeps you highly motivated to hear people give you feedback on your work, it also helps you create a better product. On another project i also asked people who wanted the app to pay a modicum sum if they really want the app, you can call it a small kickstarter. Once you get a good number of people backing you, trust me, you'll be motivated as hell.
&gt;Read. The. Fucking. Manual. FTFY
Yes. Hmm, I might do something like that later, but right now I just want it to work so I can fking move on with this shit lol ive been working on this feature way too far
by discipline
One thing is to have a clear vision and a project that you feel is important. If you don't think the project is important enough then you'll lose focus.
cool, I would like to implement one of these
My two cents/tips. First is trying to make the app functional as quickly as possible and keeping it functional; Seeing your results and being able to show things to others is a great motivator. It also ensures you keep working on useful things as people will ask what that new feature is actually good for. Second, have some kind of to-do list, plan or whatever; It's very easy to do a boat load of work and feel unaccomplished because it doesn't directly show. A visual aid, like a to-do list with a bunch of items crossed of reminds that you have accomplished more than what is directly visible in your app.
It’s not about motivation, that’s temporary. It’s about discipline and holding yourself to your objectives.
One feature at a time
You have to switch between two different states. One state is knowing what you are doing is great an is going to be great. The other state is listening to people and finding out what isn't "great" yet. You know what you know and you learn more from other people. You can't occupy these two states at the same time. Choose to be in one or the other when it makes sense to improve and make the best app possible!
It happens. Move on to another feature if you can and come back with fresh perspective. Or keep banging your head against the wall and Googling; you’ll get it at some point.
It happens. Move on to another feature if you can and come back with fresh perspective. Or keep banging your head against the wall and Googling; you’ll get it at some point.
I think the contribution of e.g. Vapor in the Swift server side work group is interesting as it contributes to making Swift more favorable on other platforms than iOS/Mac
Same
&gt; Would you use some of them for your apps? Nope. Extraneous movement is distracting and slows down the UI. It can be done if it's subtle (by which measure the eighth one is good, actually) but for the most part animation should be there to help to explain the UI, not just to be fancy for the sake of being fancy.
For me - the second is very good, but i would get rid of animations there)) But i really like the style of it and the fact that it has titles under icons, you don't have to guess where this tab leads you but you still have icons to navigate quicker when you become more familiar with the app. Plus i really like the design idea: hollow vector icons that get filled with different color when the corresponding tab is active. Animations are beautiful in gifs, but they become very annoying when overused... especially when animation is so long that it slows you down when you try to navigate as quick as possible.
That did the trick. Thank you!
That makes a lot more sense. Thanks!
I don’t think that’s embedded that looks like a view appearing over the text field and aomensimple calculation to know where the cursor position is and based from there - naturally taking into account left / right margins for sure. I see one pitfall and that is how ADA voiceover would interact with that, lots of manually setting focus, etc. I think apples recommended pattern for this is the accessory bar above the keyboard - just saying.
Yes it’s possible, be sure to select the correct option in iTunes Connect when setting up the IAPs and then it should be basic receipt/subscription validation from there.
Thanks for your help!
you have to use protocols and delegates - there is no other (clean) solution in my opinion also you can declare a global variable (outside / above the class of the ViewController) and access it in another class - but beware to get beaten if you do this - this is really a stinky and dirty solution mostly used by people who hates their company (boss, manager, life whatever) because they are forced to get things done or simply they don't give a ... (seriously - don't do that)
I like to split up a project into functional chunks that are each their own milestone. If the chunk involves something new to me, I first create a separate app with just that functionality. When that is working, I save the app in a separate folder called demo apps and then In incorporate the code into my main app. I also try to write apps that use tech I haven't tried before. Learning for me is the biggest motivator.
- Start small. SUPER small. Start with an MVP. - That cool feature you thought of that would separate your app from the other 500 todo-list apps? Put it on your Trello board and ignore it. - Write a minimum list of requirements. - When you get bored, work on a different part of the project. Bounce between app, backend, design, dev ops when your getting fatigued with one part of the project. We humans need variety. - DESIGN IT ALL FIRST. I’ve started so many projects with incomplete designs and lost motivation because designing for the first time in Xcode with autolayout is not a fun time. - If you’re not feeling motivated some day, open up Xcode and poke around. You’ll get lost in it and 1 hour later you’ll have made some progress. - Starting something is easy, finishing it is hard. Thousands of people have done the hard part so you can too. Good luck 👍
You say "nope" but you also acknowledge that there are reasonable uses for animations that improve UX. A completely vanilla app with no transitions or animations of any kind looks outdated to me.
someone tell me how do i do these animations?
To be precise: By getting paid.
IceCream and Chips? to be honest, modifying or having a neat workstation.
Animations are useful for providing context on the layout of the app. For example, if a View Controller is presented by scrubbing up, it should likewise be dismissable by panning it down. However, animations, per the [Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/animation/), should be used "judiciously", and should not be used "for the sake of using animation". In the case of these tab bars, many are animated for the sake of animating them, and they would cheapen the UI of more focused app as a result. Don't get me wrong, they look beautiful on their own, but when paired with their corresponding view controllers, the user's attention would be drawn to the wrong areas of the app.
Nice demo of a k/v store. thanks
Was vaguely considering that sort of thing. Maybe updating to High Sierra and Xcode 10.
OP all you have to do is in your CounterCard cell class 1. create an optional variable in the class CounterCard 2. in your collectionView(:cellForItemAt) -&gt; UICollectionViewCell function cast the cell as a CounterCard 3. set the cell.&lt;optional variable created in step 1&gt; = to the items\[indexPath.row\] 4. return cell
So far I've had little to no response. 60% no. Here's the link: https://www.reddit.com/r/reactnative/comments/brkpg4/do_you_guys_think_react_native_will_take_over/
Exactly. These animations add nothing
If I do \`if let x = &lt;optional&gt;\` then I am saying do this if there is a some. So what happens if there is none? presumably nothing, which seems pretty innocuous, until you combine it with a bunch of other code. Android had some sample code for camera interactions using Kotlin that was some of the most horrible code I have seen in years, mainly because it was filled to the brim with inline optionals everywhere, leaving you thinking 'how can I reason about what this code will do?' Answer: you can't.
The exact same issue exists in scala using `for` or `map`.
You’re welcome!
Hopefully you get an answer, I have the same question. Good luck.
Well that’s part of the problem there. Apple has made significant improvements in Xcode and the Swift compiler. If you make a post you should mention which version of the that you’re using if it’s not the latest.
Pretty sure all you need is to left align the text inside the textField and it does it automatically, 0 0 0 0 on all sides.
Both on the main thread...?
Dude if you don't want to use delegates you might as well knock iOS development on the head right now. Go learn something else.
You’ll have to override the `draw` method to draw your lines before (=under) the text (I guess `super.draw()` draws the text). Check out this for more info on drawing manually: https://stackoverflow.com/questions/2835448/how-to-draw-a-rounded-rectangle-in-core-graphics-quartz-2d You’ll also need to figure out the location of the word you’re looking for, and this would help you along: https://stackoverflow.com/questions/19417776/how-do-i-locate-the-cgrect-for-a-substring-of-text-in-a-uilabel
Its cause you didn't implement get and set in your class.
You could just use something like 3D Pythagorean distance to do it. More info here: https://math.stackexchange.com/questions/42640/calculate-distance-in-3d-space ARKit handles scaling fairly well, but I would be careful with that, as well as reference distances. Sometimes objects are scaled, or are placed in relation to one another and their world space 3d coordinates can quickly become super confusing.
If you just declare a regular stored property, it has a getter and a setter automatically.
It’s because you don’t actually conform to the protocol. You declared that Account must have a settable property features of type Features, but ProAccount’s features are actually ProFeatures, so attempting to set that to a value of type Features is a compile error. Making features read-only (at least in the protocol) should let you get out of this problem.
it's because the protocol defines itself as needing \`Features\`, not \`ProFeatures\`, and they're not guaranteed to substitute at runtime: every \`ProFeature\` is a \`Feature\` but not every \`Feature\` is a \`ProFeature\` &amp;#x200B; [https://gist.github.com/bppr/29eb34ef1638d97b883c6839fcfb229d](https://gist.github.com/bppr/29eb34ef1638d97b883c6839fcfb229d) &amp;#x200B; A solution is to use \`associatedtype\` to let the protocol define an abstract \`FeatureType\` (or whatever you wanna call it), then use \`typealias\` in your implementations to define that class. It's really hard to tell based on this snippet, but you may be better off not trying to model things this way and instead just use something simpler/more primitive to sidestep this concern altogether.
Coding tests really depend on the company. My experiences are all based on junior interviews. I've had interviews where the assessment was basically talking about the different APIs of Swift. e.g. How does TableView work under the hood, what is so special about enums in Swift, what is swizzling etc... I've had interviews where the interviewer also asked me questions unrelated to iOS: What's the difference between a Java Reference and a C Pointer. As for coding assignment/test, that one company had an online test where I could upload my project within 4 hours after starting it. I had to create a http request to some endpoint they gave me in the test, decode the json and then filter/process the data. The hard part was the processing of the data - I had to come up with an algorithm, figure out edge cases and see if the time complexity is reasonable. So, depending on the company, I'm pretty sure the test will include at least some parts that require algorithmic thinking. If you're not doing that already, it won't hurt to solve some easy questions on https://leetcode.com/. If your interviewer asks you about the time and space complexity of your algorithm (worst case of course), you should definitely know them - If I interviewed someone and they don't know the basics of algorithm analysis, it would raise a red flag for me.
Great thanks!
Another way without using associated types is so define a different variable to store the typed proFeatures and then have a computed variable implementing features return proFeatures as shown in this gist: &amp;#x200B; [https://gist.github.com/Kalvin126/814dd2551a2c43d6ed40a3dc0b0630b0](https://gist.github.com/Kalvin126/814dd2551a2c43d6ed40a3dc0b0630b0)
The problem is that you cannot redeclare `features` because that would potentially allow a type mismatch. What would happen if you downcast an instance of `ProAccount` to to just `Account` and then tried to set `features` to a different type that also conformed to `Features`? class NotProFeatures: Features {} let foo: Account = ProAccount(features: ProFeatures()) foo.features = NotProFeatures() That's why the compiler is complaining. In theory, that situation could be avoided if the property were read-only but Swift still doesn't let you do that. &amp;#x200B; It's possible to work around this by using an associatedtype: protocol Features {} protocol Account { associatedtype T: Features var features: T { get set } } class ProFeatures: Features { } class ProAccount: Account { typealias T = ProFeatures var features: ProFeatures init(features: ProFeatures) { self.features = features } } That constrains the type as expected and it avoids the aforementioned problem by preventing you from downcasting the instance: let foo = ProAccount(features: ProFeatures()) let bar: Account = foo //Error: Protocol 'Account' can only be used as a generic constraint because it has Self or associated type requirements Whether or not that's an issue for you depends on the context. Usually if you're battling the compiler like this, though, that's a sign that a might need a different approach to the problem.
Ah yes you're right
By starting another one that I will not finish
Yeah these seem to work when placing nodes by touch, but when I'm creating nodes via a recognized image they all create on their own respective plane with a position of (x: 0, y: 0, z: 0). I am wondering if there's a way to possibly relate the planes to one another? Otherwise I don't know how I'll quantify where each node is in 3D space. I may just have to have the three images create 3 nodes on the same plane and do it with Pythagorus.
I’ve only used unity’s Apis so I’m not familiar with direct AR kit, but there should be a way to convert from the reference coordinates to the world space. I would look into that first.
Yes, they are both on the main thread.
first of all, you don't need to send a VC as a param in your appendToArray func, just send the array or whatever you need. &amp;#x200B; weak var, not weak bar. If you're doing VC1 -&gt; VC2 logic, you should be passing the data in the prepareForSegue func, VC2 -&gt; VC1 is when you need to use delegates.
what do people use to create these types of demos? after effects?
Hey I would like to have a look if you can share this on github.
It doesn't scroll because it doesn't have to. There is nothing to scroll to. You have 10 items on the screen and 10 items in your array. If adding more items doesn't get it to scroll and only pushes your items in more, then your flow layout needs to be re-considered.
Do you mean right align? Because I think that’s all you need to do, as well, if I understand the question.
left or right align or whatever design he wants to do, but the textField scrolls automatically, there's no hidden science to this, I think his issue is trying to use a UILabel, is all.
Make sure scroll direction is set to horizontal. Then enable alwaysBounceHorizontal if the content is too small
UIKit is closed source, so people outside of Apple can not view the source code. Even within Apple I believe access to the UIKit source is somewhat closely guarded. I can’t speak from experience, but my suspicion is that it’s largely written in objective c, not swift. It’s likely that’s there’s some C in there as well, but that might be more limited to other frameworks that UIKit depends on: CoreFoundation, CoreGraphics, etc.
&gt; You say "nope" but you also acknowledge that there are reasonable uses for animations that improve UX. Yes, but not these ones.
I’m sorry but your question makes absolutely no sense.
Thanks. I'm thinking whether similar frameworks in Android provide source code? That'll be quit nice.
Jesus getting back to a point in a conversation from the inbox here sucks. &amp;#x200B; Which is one of the problems with exceptions, you can always leave them empty too or not catch all types. Algebraic types attempt to lessen this, and even though Optional (and Option) are ADTs, there are ways to short them out.
No
So you think it's not a UIView but just text with a background of sorts? May I ask how do you think the 'block' created where when you backspace it doesn't delete each character but selects the whole block?
I'm having a very frustrating time trying to make my app recognize when I touch a node. For some reason my SKShapeNodes all say their name is "null" even though I did wrote node.name = "name" Currently, I have four shape nodes on screen, and I have tried a couple different ways to determine when the touch hit a particular node. Unfortunately, every time I click the nodes, nothing happens. So for example, inside touchesBegan: let touch:UITouch = touches.first! as UITouch let positionInScene = touch.location(in: self) let nodes = self.nodes(at: positionInScene) for node in nodes { if let name = node.name { if name == "red" { print("Touched") } } } But since nothing was happening, I tried just printing the entire nodes array. And what do you know? They all showed up. It shows that it is SKShapeNode, and the values of their frames, but all of them say name:'(null)' The shape node variables are defined just within the class, outside any functions. Everything about the shape nodes is setup in the didMove function. Any ideas or anything? I can provide more information but I feel like there's just something small that I'm missing and I was hoping maybe someone would notice what it is.
While UIKit is closed source, you can read (most of) the code of many lower level system frameworks. For example, the parts of CoreFoundation written in C: https://github.com/apple/swift-corelibs-foundation/tree/master/CoreFoundation You can also use a tool like Hopper to partially reconstruct the Objective-C or C code after the fact, but it's a very rough approximation.
I may have missed that - I thought you were talking about the autocomplete view that appeared. Just took another look, that’s a really interesting view construct - I would have to think that one out. It sounds something like this though https://forums.developer.apple.com/thread/12905 Or more specifically this https://stackoverflow.com/questions/34014952/how-to-set-uiview-inside-uitextview
All good, I probably didn't explain it well! haha. For context I am creating a science app and the idea is that when someone types a keyword (Example Gold, Phosphorus etc.) it would auto add the definition in the textview. I've been able to work out how to find the keywords and add in text. I am unsure though how to add the text into a view with a background and inside a 'block' so you can't edit the definition. Thanks so much for thinking about it and helping me, I am so appreciative! :)
Yeah.
Don't. Store it in a shared object and simply access it from the other VC.
Wow, really nice, thanks!
Airbnb is mentioned but here’s a link to the details of why they abandoned react native: https://medium.com/airbnb-engineering/react-native-at-airbnb-f95aa460be1c. It’s a good unbiased read.
You should be able to make that second view controller restorable and iOS will restore it as part of restoration automatically.
I'm looking to animate a simple shape node to go from being dark, to bright, then back to dark. I've been trying to play with the SKAction.fadeAlpha but it isn't working very well. It fades one way but not the other. I found a way that makes it work by creating a custom action, and setting the fillColor to the same color but a different alpha. But it doesn't change over the duration, it changes instantly. I think I have to manually setup the transition based on elapsedTime, but I don't really know how to do that. Anyways, that seems kinda complex for such a simple task. Is there an easier way? It can be the alpha, or if it is easier maybe I can just use a bright and darker color to transition between.
i was really hoping someone would answer this because it's got me intrigued.
Thanks for your post. I’m starting my 100 days.
He's probably asking about prototype cells for table /collection view
Not sure what you’re trying to do, because the angle between 3 points will always be 180°, as 3 points are always coplanar. I think you should be looking to calculate the angle between planes?
The corelibs foundation repo is for other platforms IIRC.
I have also uploaded the storyboard screenshot which has all those things enabled
Bounce Horizontally is unchecked?
With the power of the protocols, You don’t really need subclass anymore unless its unavoidable e.g. Subclass UIViewController
1. There is no meaning of ‘distance between planes’ unless they’re parallel. 2. You need 3 different, non-collinear points to define a plane or you need a point on the plane and a normal vector Taking a quick look at ARKit, it looks like you can get the coordinates of the center of the plane, its classification (floor, wall, ...) and its extent (width &amp; height) and you can get the mesh data which has 3d vertex information. I think you have all information you need to describe any detected planes and calculate their relation to each other, distance between points on different planes, etc., but you’ll need vector math and trigonometry.
&gt;He's probably asking about prototype cells for table /collection view yes
How do you think it could be inside the 'block' and not character editable?
Looks like i was doing a silly mistake, thanks for telling and also the func insetAtSection was also keeping it to the centre of the collection view
Not sure about that, sorry
All good, thank you for your advice. Appreciate it! :)
I’m yet to find one. Cocoa is exclusive to Apple systems so I guess we won’t be seeing any Swift based Gui framework for linux anytime sooner.
that sucks.
I know. :/
Swift can interface with C, so you can use almost all of the usual Linux UI libraries (at least the ones which have a C interface).
I only know basic C. and when using C, is full of pitfalls.
Yeah, I know what you mean. But when you’re targeting Linux (depending what you application should do) it’s likely you’ll need also one or another existing Linux library, and then you will again need C, so it wouldn’t be the worst investment.
&gt; know w I am ok with c using in Arduino. just not Linux. try to avoid using C.
[https://github.com/Longhanks/qlift](https://github.com/Longhanks/qlift)
It looks like your trying to make a call to a server, but you're not there yet. You can't send post requests given in a url, you'll need NSURLConnection too. [click here for info on NSURLConnection](https://developer.apple.com/documentation/foundation/nsurlconnection). You can also look at [Alamofire](https://github.com/Alamofire/Alamofire), a very popular library for making requests in swift.
Try CATransaction.
I agree. Additionally, one wouldn't even see those animations for the most part, because fingers aren't transparent...doing a short animation on something that you the user just tapped doesn't make a lot of sense.
The only attributes you should be using are the public ones listed here: https://docs.swift.org/swift-book/ReferenceManual/Attributes.html You should not be using `@inline(__always)`, it's a private attribute for a [reason](https://lists.swift.org/pipermail/swift-users/Week-of-Mon-20170227/004886.html) &gt; So the best practice is basically what Jordan said. Don’t use `@inline(__always)` Anything with a double underscore should be avoided because it's not intended for general use and is reserved for internal use only. The implementation could change without warning and it may have side effects you can't account for.
https://en.wikipedia.org/wiki/Hash_array_mapped_trie for those who are wondering
You might enjoy my Swift on Sundays livestreams: https://www.youtube.com/playlist?list=PLuoeXyslFTuZNAZKB3FAYqiJZKigjC3VG
I'd install any SSH client on that tablet, then simply get a VPS (virtual private server) and install Swift there.
That really isn’t a problem. From my perspective the problem is integrating a high level language with rather low level GUIs such as GNome. I didn’t state that as well as I would like. The point I was after is that it is like mixing oil and water. Swift might fit in better with a more modern GUI. By the way Cocoa is not Swift. Frankly what I’d really like to see withSwift is its own bundled GUI adopted from someplace else. Sort of like how TK has been adopted by Python as a base GUI. Nothing fancy as portability is a must. Light weight and portable for portable utility apps.
I’m pretty sure Swift handles memory management and all the less pleasant parts of working with C for you.
I don't recommend avoiding C, especially in Linux.
WebKit?
This may help: \- AVPlayer &amp; AVPlayerLayer for the Video \- AVCaptureSession &amp; AVCaptureVideoPreviewLayer for the Camera ( AVFoundation needed ) &amp;#x200B; PS: message me for code samples or help \^\^
Yes and no, but mostly no. Swift and C interoperate pretty cleanly, and calling C from Swift is usually no big deal and "just works". Calling one-off C functions from Swift is easy, just works, no cleanup usually, etc. However, in C libraries you have to deal with memory management manually. For e.g., maybe in a UI library there's \`Window \*window\_create()\` and a \`window\_destroy(Window \*window)\`; to free the memory, you'd have to call \`window\_destroy(...)\`. Depending on if you are creating a wrapper in Swift or not, you might need to hook \`window\_destroy\` into the Swift class that is using the C library's \`deinit\` method.
That ain’t for guis.
Don’t use NURLConnection, it’s legacy. Use [NSURLSession](https://developer.apple.com/documentation/foundation/nsurlsession?language=objc)
Oh HAMTs are so cool. Definitely going to take a look at this.
I'm excited to see you recreate Jarvis
That's definitely on the list! Thanks for comment :D (Keep tuned for next week's episode)
Whoops my bad, i meant that one lol
The way I handled something similar to this in objective-c is to have the set of actions/already sequenced actions inherited from a base class, that way each node has access to the action they need and it can be run within their class or managed by a node further up the hierarchy (or it can be modified). If you need to have access to each nodes actions from outside its scope you could make a property nsarray to keep track of the actions used by the node, and then those actions can be accessed by someone else.
Thanks. I just removed them and confirmed no change in performance.
i think the translation of your last name would be Coast, not Cost.
Good luck avoiding C even in a Swift Mac application.
macOS or iOS? I develop iOS apps and I've never had to work with pure C implementations, only Obj-C.
&gt; Sort of like how TK has been adopted by Python as a base GUI. That is one of the stranger "batteries" included with Python. It probably costs more to maintain than anyone ever got out of it. I know of nobody who has ever used Tkinter -- even people writing Tk applications in Python!
There's a changeset called "Remove all expoerimental attributes." [sic], but it doesn't.
What's "PD5"?
It's actually Costa. But call me however you want ;) Cost, Costa, Coast, C, C++
Does every post have to end with "what do *you* think?" nowadays? No, it won't. This is a neat addition, but I assure you that nobody who knows Linux, CMake, and Swift was avoiding using Swift on Linux simply because of lack of CMake support. Swift on Linux still has a million issues, and having to write a Makefile was not anywhere near the biggest one.
Sorry, I forgot to push last commit. Now it's on Github.
It's just initial name (`PesistentDictionaryV5`) at first code writing. Doesn't mean anything serious.
The reason I don’t want to use C
What issues are you facing? I’ve had none since 4.0
Cool video! Subscribed!
It does do a lot more than just enable building. I don't know of very many build systems that enable cross-compilation or allow building for different environments easily. CMake does bring that as well. I am curious though, what sort of issues do you see. What would you say are the top 10 in your millions?
Thank you, heitoor! Keep tuned for the breathtaking next episode next week :)
Can’t watch right now but this sounds cool. Is the Stargate dialing program on your list by any chance?
You betcha! Definitely on my list! Don't forget to check out the video once you can :D Thank you for taking your time to comment!
That’s awesome. Make sure you share that one specifically at r/Stargate, the guys there will appreciate it!
have you seen this: [https://www.objc.io/issues/21-camera-and-photos/camera-capture-on-ios/](https://www.objc.io/issues/21-camera-and-photos/camera-capture-on-ios/) &amp;#x200B; I believe it's a combination of 2 things. &amp;#x200B; 1. setting the .focusPointOfInterest -- this is where to focus 2. currentCameraDevice.setFocusModeLockedWithLensPosition -- this is your DoF
The plural of software is software software = the programs and other operating information used by a computer. Compare with hardware.
Totally forgot about that class. I will give it a shot.
You k is they have an actual app that does that and was created for the show, right? [The ridiculous Not Hotdog app from 'Silicon Valley' is real](https://www.engadget.com/2017/05/15/not-hotdog-app-hbo-silicon-valley/)
Actually not a combination, just &gt; .setFocusModeLocked() does the trick, and is what I was looking for in the first place: a float to adjust from 0.0 to 1.0. Thank you! Apparently their web documentation isn't complete, as that method isn't openly listed. Guess I'll just keep the Xcode window open now. Anyways, much appreciated.
Yes! I created it as a way to show people that they can also learn and create their own apps at home! :) That those things are not only for geniuses and PhDs. I hope you've enjoyed the video!
Thanks for the heads up.
Thanks for the tip! I will surely do that :)
You need to create the GUI in visual basic that can track the ip address from CSI or NCIS or whatever.
42 is an Int. therefore you don't have to specify that myVariable is an Int. if you wrote it like so, 42.0 then it would assume it's a double. it can't infer all types
Softsware.
It is if you host a WebKit view inside your swift app, then use the various IPC functions it comes with to pass data between the UI and your swift code.
It's already on my list!
The compiler checks the value and decides what type it should be.