I've made a library to match words regardless of plurality (e.g. wives =&gt; wife) called [Singularize](https://github.com/AndrewGene/Singularize).
Try to use different xib files for each cell and or headersection and you can customize them as much as you want.
Nope.
Sure, I admit my comment wasn't very informative either. But I'll let others explain the difference (or the documentation), since I think I suffer too much from the curse of knowledge here.
I mean, the website kind of explains that. Looks interesting but maybe not for everyone.
But i need the outline around the header AND row
If you’re getting the pngs from an animation on adobe after effects (or can create it on adobe after effects), you should look into [lottie](https://airbnb.design/lottie/) . You can export an animation to json in after effects, and import the lottie library on iOS/Android, then just load the animation from the json file. Its amazing
That’s not too bad on most modern devices. Complex queries may require you to thread your app, but it’s still quite manageable. I’ve personally had multi-gigabyte FTS databases in production.
Of course I will find out, I just made the comment since the hard part of writing documentation is having some good questions.
:)
Does your application need to be available offline? If so, you need to bundle the database client-side. SQLite is pretty efficient, it's unlikely to be worth your time to switch engines/database formats. If you need to push the database to the cloud (and it's acceptable for your app to require internet access), then you can offload queries to the server machine, but will have a host of other problems to deal with. (Like privacy/authentication, redundancy, resource allocation, etc.)
was literally in the keynote :p
It would definitely be a convenience for my app to be available offline. Based on the comments I'm seeing, it looks like a client-side DB is the way to go here. The DB in question doesn't need to be written to at this point in time. It's a publicly-available and pre-populated lexical database I downloaded. So as far as I can see, I don't have a compelling justification for a server-side DB.
Just give the header a border on the top and on the sides and the cell gets a border on the sides and on the bottom.
Tried that, but the border of the TableView makes the border of the section and cell kind of weird. Is there a way around that? It also looks funky without the tableView border so can’t take that off.
I gave this a shot, Swift is having a hard time with casting ferments as a set. I tried setting it as an NSArray because the dataset contains both strings and doubles but it still isn’t liking it. I’ll keep trying it.
Ideally, I would like to do: `override var contentView: BetterUIView` But unfortunately, you cannot override with a different type.
If only repeaters worked in Lottie 3
Neat!
Thanks for the encouragement. I'm sort of a linux noob, even though I've been using Ubuntu since 7.04. I did install Swift 5.0.1 using the distro, and that's what I'm trying to get running in Atom. I just wish I knew why the steps I'm following aren't getting me the results shown in the tutorial. I'm not trying to give up so early, but three days of following multiple tutorials and failing is certainly frustrating as you can imagine! I've never coded in the terminal, so that's probably why I'm trying to get things running in an IDE where I'm more comfortable. But you are right that there are advantages to learning this way. I imagine it might give me brownie points when I try getting a job. I'd love to know more about coding with the terminal. Is there anything you can link me to get started? Where would you suggest I install Swift if not in my downloads folder?
Call the layoutSubviews() method of the parent view of your stack in an animation block. Something like: UIView.animateWithDuration(0.5, animations: { myStackView.superview.layoutSubviews() })
Why not add it as a subview? Or you can add the view of a view controller as a child view controller. You’ll have to keep in mind it necessary to remove any layout constraints as it goes off screen and add them as it comes on screen each time. Do this in tandem with adding/removing a childviewcontroller
It really should be bundled with xcode
I just saw a bunch of buzzwords thrown at me and gave up since it didn’t really answer the question “why?”
You should never call `layoutSubviews()` directly. Instead, you modify your constraints and then call `layoutIfNeeded()`, which will trigger layout within the animation block.
there’s apple made books for app development in ibooks, download them and use it as your reference.
Well, I’m not endorsing the project over Alamofire by any means (quite the opposite after reading a bit more), but many of those buzzwords are capabilities Alamofire doesn’t have. I agree that the website could do a better job of selling it, though.
You are absolutely right. I should have gone to bed instead of replying :) Thanks for pointing it out!
I'm not aware if we get access that. I've not seen Apple expose that data in HealthKit. I don't know if this changes in iOS 13, we'll have to wait and see.
okay thanks, so heart monitor is for sure allowed access though im assuming?
Yes, you can access that data in HealthKit. If I'm wrong about the ecg/ekg access, hopefully someone can point out the docs for that.
500 MB SQLite is nothing. That's easily managed, even on older devices. Just make sure you keep an eye on slow queries, and make sure you've got appropriate indexes (multi column indexes may be necessary in some cases). My app's database regularly gets up to over 1 GB for many users, and still runs efficiently even on older devices, even though the app is extremely database intensive (lots of reads and writes throughout the day). It's all about keeping an eye on slow queries, and making sure you're indexing appropriately.
Yes, the second I can I am going to drop RxSwift.
If I may ask, are you sure that you _need_ WordNet? (And yes, I'm more than familiar with it--I spent 14+ years doing NLP.) Apple's NLP capabilities are pretty damn good these days, and I find that they're _usually_ good enough for my needs.
Thanks! Since this is for Mac I have an NSView. How would I do the animation in that case?
The problem with the app is you can only search by name, there is no “category” or something similar, so you can’t search an approximate term and get results that match. Hopefully they will update the app with better search capabilities.
Does it need to be SQLite? The entire WordNet data is only 50 MB, or 15 MB compressed. You're paying a lot for a few indexes.
TLDR: any project targeting iOS 13 will probably use it instead of rxswift
&gt; Has anyone developed their own app idea before? No, you're the first.
If you want an animation after you've edited constraints, then you can call `UIView.animate`: ```swift UIView.animate(withDuration: 0.5, animations: view.layoutIfNeeded) ``` If you want an animation without editing any constraints, use `CGAffineTransform`: ```swift UIView.animate(withDuration: 0.5) { myButton.transform = CGAffineTransform(translationX: 20, y: 0) } ``` That moves `myButton` 20 pixels to the right. This scales `myButton` by a factor of 2 in the x and y direction: ```swift UIView.animate(withDuration: 0.5) { myButton.transform = CGAffineTransform(scaleX: 2, y: 2) } ``` Then, when you want to reset all transformations for a view, set the transform to `.identity`: ```swift UIView.animate(withDuration: 0.5) { myButton.transform = .identity } ```
ahaha you are very funny
[https://www.udemy.com/ios-12-app-development-bootcamp/](https://www.udemy.com/ios-12-app-development-bootcamp/) &amp;#x200B; Great course to take if iOS apps are your goal. Angela Yu is a great teacher and has a great track record. You make real apps, walk through X code, create an app portfolio, etc. Started this and felt confident making apps after I finished it. A great starting point! Best of luck, amigo
Let me just say that it is a long road to making good code. I’ve worked in the field for around 5 years and there are still things I need to learn. You can write bad code that still compiles, runs, and does what you generally want it to do. BUT when you want to change it, and you will, if it is brittle/not well designed code it will not be reusable, readable, and very hard to refactor. So I would advise you to also learn software engineering fundamentals while learning Swift. You don’t need to memorize syntax, although, if you code long enough you will start to remember the stuff you use frequently, For code architecture I would research the term “composition over inheritance”. Swift favors compositions with ‘protocols’ and allows default implementations with ‘extensions’. If you can research these topics and understand what I’m talking about in this post you should be well on your way. Of course, as you look into these topics you will run into more questions so learning how to teach yourself these things is going to be very important. Good luck.
I missed it this year, wake up and got really excite from all blog posts out there and jump right into coding lol.
Yes, might be in the future.
you should check out the state of the union, a lot of cool stuff there.
Sure, a lot of interesting sessions this year I just finish some of SwiftUI sessions. Any other recommendations ?
Yes category would be good. I tried weather key that yield no result. I have to search for sun or cloud instead.
ContentView is a subclass of UIView
Watch the SF Symbols session. You can make you own symbol with all the variations.
RXSwift is compatible with older versions of iOS. That will keep it viable for at least a couple more years.
No. + (void)dumpFonts { for (NSString *family in [UIFont familyNames]) { DLog(@"Font Family = %@", family); for (NSString *name in [UIFont fontNamesForFamilyName: family]) { NSLog(@"Font Name = %@", name); } } }
&gt; What is the best way to find a “passion” project that would actually be portfolio worthy To find a passion project, find something that you're passionate about. If it's a problem that needs solving, solve it. If it's about entertaining people, entertain them. You can't have a passion project about something you're not passionate about. Fuck your portfolio... do something you like, make it, make it better, and if it's portfolio worthy at the end then that's great, and if it's not, then you at least learned and had fun.
i was working on an iOS app for poker games to talk to their members, gonna probably buy a mac because i'm sick of using VMware
Every project will start to seem dull or boring at some point. The best thing you can do is get yourself a co-worker. Someone else to help engineer, design, market, project manage, whatever. Make goals and deadlines together, you have a better shot at one of you keeping the other interested during one of your unmotivated periods.
From the readme: `The Hub Framework is being phased out at Spotify, and therefore we will not be maintaining it further.`
My god, it’s like I wrote this post myself! If you find a way to combat this, I would love to know. So many projects started and never finished. I have to say just being on here reading about stuff others are doing does help quite a bit.
This is bull***t. “Build an e-commerce app” yeah.
Super smart. That's awesome.
Don’t start with swift start with java or python to learn the fundamentals come back to swift after
I will add that Robert C. Martin (Uncle Bob) has a lot of good books on software engineering. Most of them written for Java, but a lot of the structure applies to most languages, especially the Object Oriented ones.
Hi. Just a little advice. Perhaps you should not expect to do create your main app idea as the first thing you do. Start with small projects like following tutorials and experimenting with changing them around etc. With small throw away projects you can have fun and experiment. That is probably a better way of learning than merely sticking to a specific idea and always trying to find out “how do I do THIS!”. That is how you get stuck and it sucks. Cheers!
I attempted to make my own app in Swift one summer with a friend from college with almost zero coding experience as well (a tiny bit of html) and you're going to have to accept that it probably going to be very difficult, take discipline, and you're probably going to feel very discouraged, a lot. It is not an intuitive process learning how to write good code, learning to use Xcode, and learning UI/UX from scratch. We ended up abandoning the project because of this. I did however learn a ridiculous amount, and I still code and learn about CS to this day because of that experience. It will be tough but you should absolutely go for it. You're going to have a tsunami of info thrown at you while pursuing your project. Try to think of it all as interesting and useful, because it really is. It will also benefit you in many ways both personally and professionally as you start to learn how software works in general. It is incredible that we invented this stuff and that it builds our world. Utilize all of your resources! Good luck!
Do you happen to know why it is being phased out?
If you own an iPad, start with Swift Playgrounds app. It's an excellent place to start for a noob. If you don't, start with Apple's free Intro to App Development With Swift on the Macbook. https://books.apple.com/us/book/intro-to-app-development-with-swift/id1118575552 Then, dig a little deeper into Swift. For that, Big Nerd Ranch's Swift Programming Guide is *the* book. https://www.amazon.com/Swift-Programming-Ranch-Guide-Guides/dp/0134398017 Then, you can advance to Apple's Swift documentation, Apple's App Development With Swift and Big Nerd Ranch's iOS Programming Guide. Important: There's a lot of code in the books above. Write every single line of it in Xcode. Even if you don't understand a damn thing, just write it and soon, it'll all start to make sense. Also, books and official documentation &gt; video courses. All the best!
There’s a ton of free swift tutorials and you’re timing couldn’t have been better; SwiftUI has just come out which should reduce your learning curve.
The original contributors (from the bottom of the Readme) are all on Twitter - they're probably best positioned to answer why Spotify moved away.
I use loops a lot when i have a set condition. While something is doing this.., do this... and if not THEN do this. You should try making a small game. Thats how i really started getting the gist of it, but a small app would help aswell
A lot of it really depends on who you are and how you think. Coding in many ways is an expression of how you think and organize your thoughts, not much different than if you were to write a novel. As for writing an app from scratch, however you go about it having a good idea of what you want to create is definitely ideal. That said, tinkering with a working app might be a less frustrating way of gaining experience initially rather than trying to only start with a blank slate (new app). &amp;#x200B; Not sure what timeframes we're talking about or your circumstances, but Mac VPS is a thing if you want to try it out for a month before having any Apple hardware. Not sure how it would work with the iOS simulator though.
Why?
i have found the concept of ios development to be harder for new programmers to grasp most courses on swift focus on ios development rather than the language OP should learn programming before getting specialized the best way to do that would be the CS50 course by harvard but literally any intro to programming course should do the trick
Yeah angela yu is the one who you can count on..im going slow though cos I'm lazy
Would be great if you could post your solution for other Mac developers finding this thread — we have to be glad for every one of them still out there.
for (key,value) in dict { print("\\(key) = \\(value)") } // might get you started
Man stop spamming this trash
I have so far, For (student,sport) in dictionary { Print (“\(\student) favorite sport is \(sport)”) But I keep getting “is optional” after every value
Good! If a variable is optional it means it can be nil. It's a great feature of swift that it makes this explicit. One way to overcome this is to say: if let actualSport = sport { print(“(\\student) favorite sport is (actualSport)”) } else { print("\\(student) has no favourite sport") }
in his assignment the else would be, print("\\(student)'s favorite sport is track")
let's not do the assignment for him eh?
All the Combine sessions are great too. I’ve been using RxSwift the last couple years and was excited to see Apple’s take on a declarative framework.
AFAIK, the Hub framework dates from the pre-Swift days and it shows; everything is a dynamically dispatches ObjC object, and configuration data is in JSON, which defers a lot of the evaluation (and potential errors) to runtime. For a long time, Spotify’s codebase was largely ObjC-based, with Swift code being compartmentalised in modules with an ObjC interface. I wouldn’t be surprised if what’s replacing Hub was Swift-only and leaned heavily on the type system to nail everything down at compile time.
Should I wait for a new course, because of SwiftUI and other new stuff?
&gt;Let me just say that it is a long road to making good code. This.
The main difference between Envoy Mobile and Alamofire is that Alamofire is just a small library working on top of iOS network stack. EnvoyMobile is working on top of separate network stack based on C++ core from EnvoyProxy. It allows much more granular and low level control over your app network stack, but only if you need it. Most people don't need it :) But if you need this level of control you won't be able to archive it using iOS network stack.
I asked Sundell about it and he said that they built an in-house solution. The fact that the project was open source was blocking them from moving at a faster pace. Keep in mind that Sundell he left Spotify already when I asked him, but the answer seems to still make sense.
This code will log font names. The OP is regarding SF Symbols names.
I feel like making something like that but with an Android target might be more popular. Wasn’t there some effort already to port swift to android?
Your call. I personally would start as soon as yo get your MacBook. Courses are usually only $10 so it's a great deal. You can also find her older courses on youtube sometimes. Gives you an idea of what it will be like and is free.
You got datum/data backwards. Currently, your code contains `IrregularNoun(singular: "data", plural: "datum")` which is wrong.
Oh you're right. Thanks. I'll fix that now.
It is correct now.
Cool! Incredibly quick :D But there are [even more](https://www.thoughtco.com/irregular-plural-nouns-in-english-1692634) irregular forms, you might need to extend your list.
Thank you for the link. At the bottom of my readme I listed that as one of my objectives. So this will go along way toward that.
What’s the point of making search an extension to that github class rather than just defining it as a member function? Is there some payoff I am not aware of?
Those are all added. A lot were covered by current rules and some of those where simply "unchangables". I might could've made a rule for a plural ending in "a" and then trying to remove the "a" and add "um" for singular as many fell into that category. &amp;#x200B; By having too many rules like that, though, I'm at a greater risk of a false positive.
when will the stable version of the new ios and xcode be release instead of these beta versions
Nope, there is no any difference except visual.
Find a motive and goal before developing your project, that way you'll have something to reach. Make an app about your favorite hobby, band, movie, show, etc. It doesn't matter if you plan to release it or not, just start coding. If you find it dull again just repeat and find a new motive for an app. There's nothing wrong if you end with lots of unfinished projects as long as you have the time and keep getting better at coding. I've overcome this same feeling a few times by starting coding a random app and making it a daily routine. None of those apps are complete in any way.
To add to the others’ comments about the view to call `layoutIfNeeded()` on, it is the outermost parent view whose frame does not change.
Querétaro here
Your return type is a single string not an array of strings. So change ‘-&gt; String’ to ‘-&gt; [String]’
The issue is the return type specified for the function. This says you're returning 1 `String`: func synonyms(for term: String) -&gt; String But this `synonymsDictionary[term]` gives you something like this (if the input is `swift`): ["abrupt", "expeditious", "hasty", "nimble", "quick", "rapid", "speedy", "sudden", "unexpected"] Which is an array of `String`. There's also a possibility that you don't get anything back from `synonymsDictionary[term]`. For example, if the input `term` is `derive` then `synonymsDictionary[term]` would be `nil`. So you need to allow for that. So the output of `func synonyms(for term: String) -&gt; String` isn't `String`, it's either an array of `String` (`[String]`) or `nil`. So this would be correct: func synonyms(for term: String) -&gt; [String]? Which is what that error is telling you: the compiler figured out that you're returning a `[String]?` but when you defined the function you said it would be `String` so it's trying to make it `String` and it can't do that.
Thank you. This worked.
THanks, this worked.
I don't know why you think that. Mobile apps have been far more interesting and interactive than web sites. They do usually have less breadth of information due to the small screens. Other than the smaller screens that are partially covered by keyboards, there are essentially no limitations compared to a web site.
I know what you mean. I think mobile devs are just lazy and maybe a bit stupid too
I think you're confusing "watered down" with focused. Generally apps have had less info because they're delivering the information in a different manner. Think of it as a manual versus a getting started guide. While one might have less info, the guide has a very clear direction and purpose.
Edit: I just noticed i never initalized reviews. But even after I added that it still doesn't decode...
Is it true that your subjective perception of some unknown set of mobile apps has changed from some unknown point in the past? Hmmm… it's hard to say.
Did all the comments in this thread get downvoted by OP, or by someone else? Just opened this thread and all comments were sitting on 0pts..
Not me, just now reading them. Just our wonderful community here.
When the user can't even use 60% of the feature in a bloated app. Would taking them away makes a difference?!
What are u using to decode it? Does it throw any error?
&gt;change my \[String\], array, to a String? &amp;#x200B; Yes, you need to concat all your strings into a single string and format them so it displays nicely on a UITextView. Or add each string individually to the UITextView.
Is [this](https://stackoverflow.com/questions/25827033/how-do-i-convert-a-swift-array-to-a-string) something that I can do?
Yes, that should do.
JSONDecoder errors are pretty self explanatory do { try decode } catch { print(error) }
I know I need to call a key from my dictionary and take the value, which is an array, and change it into a single string. All the examples from the link is for arrays. What syntax would i use for a dictionary because all the syntax in the link is specifically for arrays?
true. my bad.
Websites feel like a watered down version is apps.
You can extract you dictionary value and then apply join to it let swiftStrings = synonymsDictionary["swift"] as! [String] let finalString = swiftStrings.joinWithSeparator("-") // "1-2-3" [Here's](https://www.weheartswift.com/dictionaries/) more info about working with dictionaries
 Error decoding posts from server: The data couldn’t be read because it isn’t in the correct format. I had that already but this is the only clue it gives really so thats why I'm not understanding how to fix it
 func fetchHowtos(completion: @escaping(Error?)-&gt; Void = { _ in }) { let urlPlus = baseURL.appendingPathComponent("posts") print("\(urlPlus)") URLSession.shared.dataTask(with: urlPlus) { (data, _, error) in if let error = error { NSLog("Error retrieving posts: \(error.localizedDescription)") completion(error) return } guard let data = data else { NSLog("No posts data returned from server") completion(NSError()) return } do { let decoder = JSONDecoder() let howtosFromServer = try decoder.decode([Howto].self, from: data) self.howtos = howtosFromServer completion(nil) } catch { NSLog("Error decoding posts from server: \(error.localizedDescription)") return } }.resume() }
Thank you, I'll try it and let you know how it goes.
Good luck 😉
Lol very well done thank you!
I barely touch websites at all. Messenger, Facebook, Instagram, etc I only touch on my phone.
Darn :| Looks like they're all back on neutral/positive karma anyway
This is awesome OP, very concise, thanks! Don't suppose anyone can make a more work-friendly [goshdarnswiftui.com](https://goshdarnswiftui.com) too?
&gt; [W]hat are the current limitations for mobile development? Screen real estate on the mobile device. In many cases, the computation power of a mobile CPU is on par or just below desktop CPUs.
Not sure if this solves all your issues but I wouldn't rely on the user to pick anything. Perhaps they like the default selection and just want to continue to the next screen? In that case, you can just save that value with: let selection = sports[sportList.selectedRow(inComponenet: 0)] // assuming a single component. We can't count on the user ever touching the picker. Does that help at all or am I misunderstanding?
Your method -didSelectRow does not confirm Pickerview Delegate method. Instead of “func pickerView(_pickerView:” try “func pickerView(_ pickerView:”. There has to be space between “_” and “pickerView”
God! That was it. A single space. Thank you so much. Is there a way to tell that the method is not delegated? I need to read up on delegation as it's quite new to me.
Beginning work on my first iOS app, it's my older brother's idea. I'm really excited about it. Soon, I'll begin work on an app I've been thinking about for years but have been scared to learn Swift/iOS development.
A UIViewController is not equivalent to a SwiftUI View but otherwise nice website
True. Updated the question.
Thanks for the answer andredp. This seems to be the most sense.
Nice work!
*Who* should learn SwiftUI? *Why* should they learn it? This is pretty different from the other "fucking___.com" one-page sites like [fuckingblocksyntax.com](http://fuckingblocksyntax.com) in that it's very lengthy and also opinionated. The whole point of the fucking___ websites is that they' were always factual and to-the-point.
Thank you, I was wondering which approach you’d have picked. Do you know if NSAnimation today uses Core Animation under the hood or is it still an entirely separate framework?
You can use `AnyView` to erase the difference between a plain `Text` and a positioned `Text`: var body: some View { let text: AnyView if let position = position { text = AnyView(Text(“Drag me”)) } else { text = AnyView(Text(“Drag me”).position(position)) } return text.gesture(gesture) } However, I wonder if it would be more appropriate to use `offset` instead of `position`: @State var offset: CGSize = .zero var body: some View { Text(“Drag me”) .offset(offset) .gesture(gesture) }
TableViews have separators that load when the view loads. That’s what you are seeing as empty cells being loaded. CollectionViews don’t have that so you don’t see the empty cells.
Jesus, sorry. I formatted that code and it didn't take.
&gt; who has three years of experience of Swift programming who have*
&gt; ALOT A LOT* It's not one word.
Hey, aazav, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Specifically, UITableView with a `plain` style will render the empty “placeholder” rows. A table with a `grouped` style (or a collection view) will not.
Really helpful! Thank you for sharing!
Here you go: Http://freakinswiftui.com
This method is called for each cell in your collection. I wouldn't put a for loop dealing with the model inside this method because the method gets called a lot and will hurt performance. The method should only worry about displaying the collection view cell. &amp;#x200B; &gt;" I am calling collection\_view.reloadData() in response to a notification and only want to add to selected items if the object that I am adding is NOT already there." &amp;#x200B; Can you explain what this means? It seems like you're over complicating something. &amp;#x200B; If you can keep track of selected items and not selected items in your model or a temporary view model this will help you stay organized a lot better. Maybe an array for selected items like so: &amp;#x200B; var selectedItems : \[Item\] { get { return model.filter{ $0.isSelected } } } &amp;#x200B; Then in your cellForItemAt method you can check to see if the item from your model is in the array. &amp;#x200B; if selectedItems.contains(item) { //cell selected state } &amp;#x200B; All this being said... I see that you have the variable name **table\_view\_type**... Are you are trying to change your collection view to a table view depending on if the item is selected? This is how I read your code. What's going on?
You can catch problems like this in the future faster if you use a program like Postman. Setup a few basic web service test calls with it. Whenever you run into any problems with the web service then you just click a button run those test web service calls. You can even set these up to run automatically every hour. This will help you catch problems like this much quicker. Good luck.
It wouldn’t because some of the values in the dictionary are nil. It’s asking me to change the nil value to track. I know how to make it print out what the dictionary states but I can’t just type in track I need to make a statement that has the compiler change it to track if it’s nil.
The compiler keeps saying my value is optional even thought it is not nil? [my code ](https://imgur.com/a/EcHRUfi) I think I have to unwrap it to make it not say optional?
what does "as!" do in the first line of code?
Btw, the book I’m reading is called iOS apprentice. The begging of the book is real good, I understand pretty much all of it, but at a certain point the book just gets too much, Like i feel obligated to know EVERYTHING it’s about. Don’t know if it’s me or the book. I gets really frustrating reading a 1000 page book for about 1 month, so far only managing to read 80 pages I actually understand, and the other 20 (I only read until page 100, if so) just seem confusing
I know probably all of you reading are thinking “another noob trying to be a dev lol, he’s gonna give up that dream when he sees what swift is really about”. But I can garante that’s now my case, I’m not gonna give this up, not even if it takes 5 years for me to master swift, but I’m gonna master it. But like I’ve heard, programming itself is frustrating, and I’m ready for that, what I’m not ready is to get frustrated because I CANT EVEN LEARN THE BASICS, so, once again, sorry for posting this here, but I have no where else to go :/ thank you for reading, and sorry if I expelled anything wrong, English isn’t my native language
as! Is a forced downcast. It means that we are sure that synonymsDictionary\["swift"\] is of type \[String\] and must be treated as such. If the object is of a different type there will be an exception and your app will crash &amp;#x200B; The safe alternative is to use as? \[String\] which is an optional downcasting. This means that the object might not be a \[String\], if this is the case it will just set to nil without an exception. &amp;#x200B; [Here](https://learnappmaking.com/type-casting-swift-how-to/) you can find more info about downcasting,
Welcome to the wonderful world of programming and iOS development! Haha. I have been programming for a little over 10 years in various languages. I recall it being quite a learning curve at the beginning but once it clicks then things go much smoother. As for specifically learning swift and iOS development, I would highly recommend this Udemy course: https://www.udemy.com/share/100YzIA0QYeV9RRXg=/ I only recently started learning iOS development an swift, coming from a background of various other languages, and it has been a very good video course to follow with. It will walk you through all stages of early development and has a lot of in depth explanation for those who are new to programming in general. It sounds like you have a real drive to learn and stick with it - that is the key is sticking with it. It will be tough at first because it is a lot like literally learning a new language, but once the concepts click it will open you up to all kinds of possibilities. Good luck!
The compiler speaks the truth. The dictionary is declared as \[String:String?\] so the value is optional. Here's a way to top your class: **for** (student, sport) **in** studentsFavoriteSports { **let** favoriteSport = sport ?? "Track" print("\\(student)'s favorite sport is \\(favoriteSport)") }
Step 1. Learn how to spell beginner. Step 2. Make sure that the book you are learning from is current to the version of Swift you are using.
[removed]
Ohh okay. That makes more sense. Thanks
Instead of typing the all method, just let auto completion do the job :) Begin to type « didselectrow » and then hit enter. It’s the best way to have the all function typed for you without error
Yassssssss
What kind of API is it? That webpage doesn't say what form their API takes, and you need to register and provide PAYMENT information to get access to the SDK. Can you tell us what it is? If it's a C API, YOU should read APPLE's article [Using Imported C Functions](https://developer.apple.com/documentation/swift/imported_c_and_objective-c_apis/using_imported_c_functions_in_swift). It should tell you EVERYTHING you need to know.
Thank you! 🙏
Those apps have some form of local storage which syncs to CloudKit. If you are only using CloudKit without coreData then you have to wait for those to load. Apps like Facebook that have placeholder rows are creating those rows locally then replacing them once it receives data from the server.
Well to be fair, Apple themselves did say you could essentially eliminate the need for VCs in the "Data Flow Through SwiftUI" talk this year.
Swift is a very difficult language. Pick a subset (if that even is possible?) and don’t constrain yourself to 6 months. Don’t expect to be productive in swift after 6 months, unless you have tons of experience with language paradigms etc.
&gt;NSAnimation Not sure. I've used game engines but I really don't know anything about the Apple frameworks. Just learning as I go.
Thanks!
From their website: &amp;#x200B; &gt;**IQFeed Protocols:** This API is a Microsoft Windows executable interface for the IQ Server Systems. Its' use is limited to launching the executables and using the COM interfaces or TCP/IP socket to request and receive data. It is not a development library and no option is provided for direct connections to our servers or including components of the API into your own developed code. Two types of interfaces are used in the IQFeed API: a socket based interface for streaming data, and COM or TCP/IP based interfaces for lookups and historical data/news retrieval. &amp;#x200B; COM is Microsoft (proprietary, if I'm not mistaken) technology. It's been around for at least 20 years when all there was was C++, and not the modern languages like C#. &amp;#x200B; You might be able to get a clearer idea by digging through some of the official documentation here: [https://docs.microsoft.com/en-us/windows/desktop/com/component-object-model--com--portal](https://docs.microsoft.com/en-us/windows/desktop/com/component-object-model--com--portal) &amp;#x200B; I'm not sure if this is helpful: &gt;To call a COM object from an application written in a programming language other than the one used to write the COM object, you must first translate the object's syntax to your programming language. &amp;#x200B; taken from: [https://docs.microsoft.com/en-us/windows/desktop/com/translating-com-object-syntax-for-programming-languages](https://docs.microsoft.com/en-us/windows/desktop/com/translating-com-object-syntax-for-programming-languages) &amp;#x200B; Having said that, their TCP/IP socket interface would probably be the best bet as it's an open standard that can be used from most, if not all, platforms. Might be worth actually asking the IQFeed people what your options are.
Basically you cannot use regular generics with Protocols so instead you have to use `associated types` when you want to add generic support for them. Since the root Combine building blocks are all protocols, you're seeing a lot of associated types
Thank you for the advice. I use Paw on mac which i think is similar? And you're right once i used that and went down the list making sure each value was the right type is when i finally caught the mistake. Will definitely try that first from now on
TableViews **can** have separators. You can set the `separatorStyle` to `.none` and the separators will be gone.
well, you didn't even tell us what it is that you don't understand. what is the chapter about that confuses you? I don't know this book but if you are learning on a topic and don't understand one thing you should repeat and research that topic until you do, because there is no point in continueing with uncomplete information as you will have problems understanding later topics, especially when its about basics. I'd like to help you, but I don't know how as you didn't share your situation other than that you are stuck. &amp;#x200B; also, make sure you follow an tutorial/book/howto that is for someone with no programming experience, instead as for people with no swift experience.(dont know if that is the case with your book)
Yes thank you, that is a good point. The UI is quite complicated but each collection view is only 13 elements and the for loop will at most only have 13 elements. So I don't think its a big deal. &amp;#x200B; I just need to deal with things this way because of the complexity.
The design for the Bitrise poster for [https://www.hackingwithswift.com/live](https://www.hackingwithswift.com/live) in Bath next month. Only 300 printed, so if you don't attend for the amazing speakers or the great cause that's being supported ([https://appcamp4girls.com/](https://appcamp4girls.com/)), attend to get your hands on one of these beauties.
Start here: https://docs.swift.org/swift-book/ Combine that with some tutorials like Hacking With Swift and complete some easy projects.
wow
u/twostraws https://youtu.be/X2RZlmjLYhk Using timed notifications.
Appreciate the help and information. Will be doing more research and figuring this out!
Not sure but ya I will try to read about it more. They also made a video explaining their services. I’ll be watching that soon. Thank you
I checked out the video - its a good tutorial but from the looks of it - looks more like a tutorial on notification timing. I am trying to create a presentation where users can enter / reference content, and then select how much time the content should be viewed for. Much like an ad, but I would like the function to extend beyond just videos!
I think you might of link your deleted userID with some images you stored in Storage.
Hi mintone, I had the same trouble one year ago, black borders using the Apple Lightning to HDMI adapter. The best fix I found was simply to wait one second between the external screen detection/notification and that screen's window setup code. Let me know how it works for you!
lol are you sure about that? (p.s. but if opening that is a problem at your job then just quit your job)
Basically, if you use protocols, you have to use associatedtype, if you work with concrete types, such as structs, enums and classes, you have to use generics. The difference between generics and associated types is, that associated types are chosen by the implementation, generics are chosen by the caller. For example, for the type Array, the caller can choose, which concrete type the generic Element should be. It has to be specified when creating an array, e.g. `let a: Array&lt;Int&gt; = ...`. For the type String, which implements the Sequence protocol that has an associated type Element, this type Element should always be Character. So the implementation of String specifies the typealias Element = Character. This cannot be changed when creating a value of the type String.
Yes! I get it now! Thank you 🙏
Yeah I thought that might be it too. Any idea how to fix? The Storage folder has many deleted ones. They were deleted because I decided to change the structure of my database.
I had the same problem but I took the nuclear approach. I deleted everything in database and storage. Maybe you can fix it by identity which deleted user is linked to which object. Sorry don’t have an easy solution here.
It’s so beautiful. Looks like it was drawn by Sam Spratt. The robot kind of looks like Thalia too! Great work!
I went through the whole page about type casting and at first I thought that it would be relevant to what I'm doing now with String and \[String\] in my code, but as I finish learning and see the examples, I don't see how I can use it in my code. I put it in anyway to try and extract the text in the array, but i keep on getting errors. &amp;#x200B; [here is the code](https://imgur.com/a/ni24drf)
u/poutchi87 mentioned is the right way to do. Other than that, you can go to UITableViewDelegate and copy paste methods from there. In this case, I tried running your code and set breakpoint at didSelectRow method. It never got called, so I verified if that method was written correctly. &amp;#x200B; If something like this happens check two things: 1. If you have assigned delegate 2. If your method is getting called or not &amp;#x200B; Debug your code, thats the best way to find any issue. Hope this helps.
Is anyone on this sub going to the event? It’s my very first conference, so I’m super excited!
You have to declare finalStrings before your if let block. Currently it is declared inside so it can only be accessed from inside that block. var finalstrings: String = "" if let sameWords = synonymsDictionary[term]{ . . finalStrings = ... } return finalStrings
ok, I'll fix it.
[This](https://imgur.com/a/krvZPi8) is what I got.
Your function is trying to return a string array, change \[String\] to String func synonyms(for term: String) -&gt; String {
Sorry for not mentioning it before, but that is part of the requirement. I have to return an array when passing a string. It is a thesaurus app. The user types in a word and the function looks up the word and returns an array. I have to put the return into a textview field.
Thanks. Nuclear is a hassle, but if it works it won't be that bad.
- Set the number of sections to the number of items to display. - set the number of rows per section to be 1. - set the section header height to be the height you want to separate with. - set the row height to be the height of the rows.
Wow. Interesting. Will report back.
Just deleted all users in Authentication, Database, and Storage. The error is not there but pics still show up inconsistently. Connsol has this: '**get output frames failed, state 8196 9104:455136\]', and downstream: '\[BoringSSL\] nw\_protocol\_boringssl\_get\_output\_frames(1301).' Do you know what the issue might be?**
You are right SwiftUI View is just a protocol, so I might need to update that in note section.
You got it [https://goshdarnswiftui.com/](https://goshdarnswiftui.com/)
What's your app idea?
Oh that makes sense, I assumed that CoreData was involved. That’s really great to know about the placeholder rows! Thank you for your insight!
Huh good to know, that explains why TableViews are so prevalent in iOS apps too. Definitely makes sense! Thank you for your response!
Reddit randomly jitters the vote count on comments for reasons.
I wanted to go, but it'd require cutting another event short, and that's an event I promised to be at before HwS Live was announced. I hope you have a fantastic time!
It kinda looks like a Commodore PET was turned into a robot.
Let’s see, I have a great job with great pay but minor web censorship. Yeah, I should definitely quit. /s
I’ll be there!
Quicktype.io should help
I'd probably go over to some sort of /r/Design forum or something, this has nothing to do with iOS... go learn mobile design.. The only possible thing that I can think may help you is this. [https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/custom-icons/](https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/custom-icons/)
Quitype doesn't work in my case, I keep getting all types of errors with it I don't understand.
I suggest you take the time to understand it, else it will just keep giving you headaches, it isn't that hard :)
Thanks! I'll give that a look! Do most people pay other people to do design work for their apps? Or is it something they just learned as they went?
People do a lot of things, I personally learned to use sketch in case I need something, but I’ve always had designers available to me... most people hire as well and etc, it all depends on the situation :)
Did you use sleep() or Timer? I've tried both without luck so far.
I use Adobe XD for design and live in the Adobe Universe with Photoshop. Gimp is not as sexy as Photoshop but it is a great alternative, definitely. There's a free online editor that's pretty good: [https://pixlr.com/](https://pixlr.com/x/)
Paul, no debate, it's much better than "rather good". I got three of your books for the sole purpose of supporting your generosity to this community. You have helped me grow as an iOS developer in countless ways. Much respect brother.
Thanks I’ll check it out!
Sounds like your downloading it and setting it on the background thread, you should download in the background and make sure your setting the image on the main thread
That's very kind – thank you!
When you going to do your app icon, you can use Sketch. It’s very easy and export all sizes that need Xcode
Thanks! I'll give Sketch a try! I haven't heard of it so hopefully it's easy for me to learn!
It’s very useful when you need to make high fidelity prototypes, and as I say, it allows you to export the icon of your app for both iOS and Android :) You’re welcome!
great work , thank you
Just because I'm curious: what is the marketshare if iOS10? What's the reason you need to support that? I'm going to be doing some startups / websites soon, and I was thinking of hiring for SwiftUI developers (which I know isn't a thing yet but I'm not in a super super rush to market).
Thanks. Where do I change that? Is it in main storyboard?
No that would be in your image downloading code?
this part? : DispatchQueue.main.async{ cell.imageView?.image = UIImage(data: data!) } }).resume() } return cell }
for you
I changed to self.image = UIImage(data: data!) and it is completely stable now. Only issue remaining is I still need to drag up and down for them to appear. Do you know why this is?
Hey everyone, I used SwiftUI to recreate the UI panels that slide up in Maps and Stocks (like [this](https://www.mozzafiller.com/_image_cache/c473202e-29ce-43ba-9afc-2811cddf0252.gif)), thought it might be useful to share. I'm also not that experienced with Swift or iOS development so welcome any feedback on better ways to do this stuff!
This is awesome! So reusable too, could you add a demo to show how you would tweak this to achieve a “simple” card where its ~a half screen card and you can drag to dismiss?
Can you put a UIView with a fixed height at the top of the cell with a clearColor background? This would give you the gap you need.
Hey, hate to be the bearer of bad news but the card view is now the default style for modals. If you create a modal and present it you get the new card view with interactive swiping
Hey thanks for pointing this out. I had seen this new default card modal, but I don't think it gives you a notch to keep the card open halfway on the screen? This is the UI I wanted for my app so the user can see the map and other content at the same time. Let me know if it's possible with the native view though, I'd love to use something built-in if possible. In any case, as you pointed out I learned a lot going through this exercise anyway!
Hey thanks! Yea I'll see if I can add this to the post tomorrow.
The keys of a dictionary have no particular order and you should not rely on it. You can however sort the pairs using .sorted(by: { $0.0 &lt; $1.0 }) the resulting type should be an array.
Looks really cool!
The Cheat Sheet indeed looks really nice. It would be great if you added a note that `Text(...) + Text(...)` is possible if you want to style just a part of a string - I needed quite some time to figure that out.
You’re right - you can’t do what you did in your implementation using the the default modal pop-up. The modal pop-up either goes full screen-ish or is dismissed completely.
I also noticed that you explicitly used `label:` as an argument label in almost every case. I was just wondering because I thought it was SwiftUIish putting the function builder closure after the closing `)` like `Button(action: {}) {...}`. I might however be wrong with that and haven't seen all of the WWDC presentations.
&gt; Is this screen size large enough? To do what?
No, the modal pop-up is not the same thing as what OP implemented. The slide-over card view OP created can be positioned halfway up the screen or full screen, or minimized to the bottom of the screen using swipe gestures. Just like in the Maps app on iOS.
To display all the different UI elements and graphics in a way that isn’t terrible
I understand that I’m force unwrapping a nil value , however I’m confused as to why it’s nil , the entity is there and I saw how to do it like this online and there was no issue Any help please ?
Not enough information. What is getContext()? where did you see it online?
Thank you here is the get context private class func getContext() -&gt; NSManagedObjectContext { let appDelegate = UIApplication.shared.delegate as! AppDelegate return appDelegate.persistentContainer.viewContext } Both links do it the same way https://medium.com/xcblog/core-data-with-swift-4-for-beginners-1fc067cca707 https://www.youtube.com/watch?v=bmvRDoKfEBo&amp;t=287s
Check out icons8.com for free to use images. Check out “Icon Set Creator” on MacAppStore for drag/drop app icons. I use Vectornator on my iPad for simple image creation.
Step debug it! You will quickly find out why it’s being set to nil.
Someone can correct me if I’m wrong but I think it has something to do with the way iOS creates/recycles it’s views.
You probably start debugging with breakpoints as /u/rayascott has suggested. Put on on your 'let context=' line and make sure it isn't nil
Rather than using a group and waiting on it, why not just do the async completion where you currently do the group leave?
Oh ok , I don’t know this type of debugging was a thing , thank you for you help
Thanks. I used that code and it stabilized it but there is still a need to move up and down the first time I login after a new build. The weird thing is now if I logout in a build and sign in with a different user (ie in same build) there is no need to move up and down. SMH.
When you logout and log back in is it the same data just under a different account? If that’s the case then it might be just reading from the cache. Again this is just pure speculation on my part.
It is supposed to be same for all users. Yes, say I login after build, nothing shows up w/o scroll. Then I logout and login(same or different user) and voila there it is. Hmm, yeah probably reading from cache.
I wrote a mandelbrot Apple Watch App [https://github.com/dlorch/MandelbrotWatchApp](https://github.com/dlorch/MandelbrotWatchApp) I learned how to draw on a pixel-canvas and about the mandelbrot set escape time algorithm.
Problem with using PresentationButton is the view presenting doesn't have access to EnvironmentObjects inherited by the parent view.
Is your entity “Languages” or just “Language”
What do you think Playgrounds is?
As the documentation will tell you, dictionaries are unordered. If you want to *print* the keys in order, you'll need to call the `sorted` method on its `keys`, assuming they're `Comparable`.
I'm researching ASO and keywords. Every post recommends using long tail keywords. However, some recommendations say to use the full statement and some say that apple will automatically create long tail statements from the words separates by commas. For example, "find fitness trainers" compared to "find, fitness, trainers" where the second statement would also represent "find fitness trainers" but also every other combination of those three words. Does anyone have any experience with this? I'm just trying to figure out how I should set this up and if there is any benefit to using the statement without commas. &amp;#x200B; Thanks
[Lynda.com](https://Lynda.com) has some great courses and you can often get free access to it through your local public library.
Sounds like a threading issue. Are you fetching the image in a background thread? If so you need to return to the main thread before setting the image in the view. Scrolling probably forces it to refresh.
You can use fatalError for a guard else without needing to return.
\*sigh\* I hate it when something simple like that gets me down a rabbit hole. Thanks for pointing my tired brain to the obvious.
Languages
Alright. Clearly the answer seems to be yea. Thanks for the info.
Could you fix up the indentation on the code examples? They’re currently pretty hard to read.
What’s your backend setup
I’ve been trying to debug it but I’m not getting any information... i used breakpoints ... that tells me what I already know ... entity = nil I did po in the console This is what I get ... but idk what it means ▿ 1 element - 0 : VisualVocab.Languages I’ve tried print(entity) It just prints nil I’ve checked to see if it is spelt the same as in the CoreData Modle “Languages” | “Languages” Lastly I’ve tried to change some of the thing according to some things online ... changing the module in the entity inspector from global to current product model Don’t know if it’s expected that it wouldn’t work , but nothing has I’ve deleted and recreated the app in the simulator just in case ... and I’ve deleted and recreated the Xddatamodelid file and the entity ... don’t know if I should be surprised that neither have worked It’s almost as if doesn’t exist and Entities in CoreData is acting like a smoke screen or something Is there any other debugging tools ... because nothing I’ve seen / found in The Internet is giving me new information
i haven't started anything yet am just trying to have an idea of how to setup things (keep in mind am kind of a beginner) , in terms of authentication am going to use firebase and Core data for everything else. hope that i answered your question.
Hmm ok then I would suggest making a referral code scheme like MyApp-UserID then making 2 purchases, full price and discount price, only put full price IAP visible in your app and if someone tries a code just parse out the userID, check it exists and then show them the discount IAP, after purchase put the userID of the person that bought it on a table under the user that provided the key for future use and see how many refs they have
Hello , I have tried to put a breakpoint there and print the value of context When I do breakpoint I get name : context Type : NSManagedObjectContext Value : None Summary : none And when I print it i get name : context Type : NSManagedObjectContext Value : 0x0000600002eb0f00 Summary : none Do you know what this means
alright will try it, thank you so much.
That is probably what it is but I have it set to main. Do you see it as being not set to background. This is the code segment: ublic override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! ViewControllerTableViewCell let person: Userx = people[indexPath.row] cell.lblName.text = person.Education cell.lblgenre.text = person.WhatIamConsideringBuying if let PhotoPosts = person.PhotoPosts { let url = URL(string: PhotoPosts) cell.imageView?.sd_setImage(with: url) URLSession.shared.dataTask(with: (url)!, completionHandler: {(data, response, error) in if error != nil { print(error as Any) return } DispatchQueue.main.async{ self.immy = UIImage(data: data!) } }).resume() } return cell }
It looks like your downloading the image twice here. You have sd_setImage which from what I remember is SDWebzinahe which is downloading and caching the image, then your using a url session to download it again?
Why not just load the html straight away from the source? Just curious why you are making this intricate parser?
Did you actually store any data their? Seems like you are trying to fetch something thats not there
The parser is complete and took less than a day to make; I have unit tests already ensuring it works so it's all good. It makes it a lot easier to write out the lessons/quizzes/tests (there will be a lot) and it also reduces space. If I have a bunch of html files, majority of them will be repeating the same code. I also wanted to be able for the lessons to be a lot easier to understand when reading the file, which is why I used JSON. It also makes it a lot easier to edit when using JSON as opposed to looking at an HTMl file. At least in my opinion.
Oh you're right. I initially only had the url session but then added SD(I have its pod installed) because the session was not working.
[removed]
Team treehouse is pretty cool, there are videos but lots of exercises after the videos. Think it’s like 25 a month or something
[removed]
[removed]
I’m not fetching though , im saving ... and i can’t save any data Because the entity is equal to nil
Well hope it fixes the issue
I did it with an NSTimer. Sleeping 1s before setting overscan compensation and secondary screen resolution. I'm not aware of the case since one year and I can't try this setup anymore.
Hmm, it looks like you are blocking the main thread to do the network request, which would make scrolling stutter. I can't tell because I don't know what person.Photoposts() does. But I can see that you do set the image back on the main thread so my suggestion is not the problem.
I can’t help you, but I’m fairly certain you can’t predict or influence the behaviour/output of the .random property. It’s not like probabilities; using .random 4 times on an array of 4 numbers does not give each number the probability of 25%.
I’d like to see a live implementation of a more complex UI. Like for example pick Instagram or Facebook’s UI and either implement it live with SwiftUI or if it takes too long, show a preimplemented version and comment on what was taking longer than you’d expect and any pain points you’ve encountered.
Right – so going well beyond lists and stacks. I don't think it would take *that* long to implement live; I tend to practice these things extensively before delivering them, so I know the material inside and out.
I’m going to be at the conference in Toronto. What I’d like to hear about is which UIKit components aren’t supported in SwiftUI and strategies for overcoming these gaps.
OK so we know it's having trouble pulling up the EntityDescription for your Languages entity (just as an aside, keep your entity names singular as "Language", it's widely understood that a table contains multiples of a type so pluralising names is redundant unless one instance does actually represent a multiple, like monthly values for a year all in one summary row - but don't change this yet, unless you also delete the app off the simulator / device or you'll get errors). You could get a reference to the ManagedObjectModel and then print the description to the console, to inspect to see if it's got the correct entity name or if indeed there is even a valid managed object model. If your entity name really is spelt correctly then there is something wrong with the core data stack being built. Add &gt;let model = appDelegate.persistentContainer.managedObjectModel before you get the entity description creation and then make sure you set a breakpoint on the line after it. Then run the app till it pauses on the breakpoint and then right click on the 'model' variable in the debugger's variable list and select 'Print Description of "model". Have a look through the output in the console pane to check that it's list of entities does include a "Languages" entity. Like so: [https://imgur.com/a/9v83Ycz](https://imgur.com/a/9v83Ycz)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/p7bIncg.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20eruoh44)
My biggest struggles writing SwiftUI are when the compiler starts trying to tell me I’ve fucked something up but can only convey it in vague riddles and mysteries; also, when XCode wants to just straight up not let you do some layout that is literally present in the Section five lines of code down from your current Section—but it just gives up on life repeatedly. (This happened to such a comical degree yesterday—it was great; really maximizes productivity)
It was not that I am doing both because the url session wasn't working before anyway. But you identified the right place as the problem. What I was doing wrong was using cell.sd\_setImage(with: url) and not image.sd\_setImage(with: url). Stupid on my part. It works now. Thanks for the help. Really appreciate it.
Yeah, the compiler errors aren't great right now. The Swift team are very keen to hear feedback, though – if you can send them example code where the error message is clearly wrong, it would help a lot.
I wish I could upvote this more than once.
then you should adjust the pool instead, they should share one pool.
Yea I want to see what happens when you have so many customizations that it looks likes the inside of an xib file. Show me something beyond the hello world, something designed by a pixel perfect designer who has no chill
My problem with this stuff is what while I looked at it to experiment and check out the cool new thing, I've stopped investigating it deeply because, working for a massive corp (with all the inherent inefficiencies, changing directions when it comes to product decisions, etc), we realistically can't use SwiftUI for another two years due to the x-2 supported OS rule. I'd love to hear your thoughts about how to go about incorporating SwiftUI sooner or what can realistically be done in these situations for those of us who want to keep learning and bring that new learning to work we do.... or are we just relegated to playing with it on our own time?
Ok I have added let model.... I then put a break point after it and i printed Model and also I tried doing a break point on it This is what i get : Printing description of model: (&lt;NSManagedObjectModel: 0x6000003a9fe0&gt;) isEditable 0, entities { }, fetch request templates { } Language (I made is singular both in the core data file and in the code) is seeming not anywhere And then I also get this :: Printing description of managedObject: (NSManagedObject) managedObject = &lt;variable not available&gt; Printing description of entity: (NSEntityDescription?) entity = &lt;variable not available&gt; Printing description of context: &lt;NSManagedObjectContext: 0x600001ae45a0&gt; Does this mean anything ?? Thanks for you help
[removed]
I think I would create several reusable views that together form the main view.
Actually I FINALLY FIXED IT!!! apparently when I first created the app i ticked core data ... that created a file and then months later I didn’t know about this... So I created it again and the first core data file was left empty through out this crisis ... I was about to do some more debugging by moving my code to a project where it was working ... a new project where the first thing I did was the core data , and that’s when I noticed it Thank you for all you help however , I still learnt a lot because of it
Is there any chance SwiftUI hits production level releases on large apps with an extensive userbase taking into consideration Apple suggests supporting the 2 latests iOS at any give time or is it just getting ready for whats to come?
Can confirm: will help a lot!
Use predicate in core data fetchrequest to filter current user.
Does lyinsteve have a brother that only tells the truth and we can never be sure which one responds to our FB numbers?
Ah, yeah! Truth-tellin’ Greg. Great guy. Sucks at Poker.
So this is what tells you that your model didn't have a Langauges entity description, hence the nil on creation. &gt;entities { } Glad you tracked it down in the end.
Me too , thanks again mate
Would you consider giving a talk on the combine framework? I know whatever you do it will approachable, I appreciate everything you do for the community.
Done, thanks.
After using SwiftUI by myself for a while I stepped on some problems that maybe you can answer. 1. What the best architecture approach for SwiftUi, MVVM, MVC or something else? 2. How would approach paging in lists? Would you add OnAppear on cell, then check what IndexPath we are on and then download more data if needed or use something completely else. 3. How to debug combine chains. Let say I have a data from json, then filter/alter is multiple times. How to debug that, when each filter is mostly written in 1 line. 4. how to debug SwiftUI and visual stuff like. 5. are we going to get native SwiftUi components like collection view in future or we will have to use uikit ones?
Have you already set the table view delegate?
I think I have it set in the extension but I could be wrong. The extension looks like this: &amp;#x200B; extension savedRecipesViewController: UITableViewDelegate, UITableViewDataSource{ func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { if tableView == recipesTableView { return self.recipeNameItem.count } return self.recipeNameItem.count } func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { if tableView == recipesTableView { let cell = tableView.dequeueReusableCell(withIdentifier: "UITableViewCell", for: indexPath) let item = self.recipeNameItem[indexPath.item] cell.textLabel?.text = item return cell } return UITableViewCell() } }
You need to use the statement: tableView.delegate = self Maybe in the viewDidLoad
You need to use the statement: tableView.delegate = self Maybe in the viewDidLoad
I put that in the viewDidLoad and it is still doing the same thing. Here is the full swift document, maybe that would make this easier. &amp;#x200B; import UIKit import CoreData import Foundation class savedRecipesViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() //Table view self.recipesTableView.register(UITableViewCell.self, forCellReuseIdentifier: "UITableViewCell") self.recipesTableView.dataSource = (self as UITableViewDataSource) recipesTableView.delegate = self retrieveData() } @IBOutlet weak var recipesTableView: UITableView! var recipeNameItem: [String] = [] func retrieveData(){ guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {return} let managedContext = appDelegate.persistentContainer.viewContext //start request let recipesRequest = NSFetchRequest&lt;NSFetchRequestResult&gt;(entityName: "Recipes") do{ let recipeResult = try managedContext.fetch(recipesRequest) for data in recipeResult as! [NSManagedObject]{ let recipeName = (data.value(forKey: "recipeName") as! String) recipeNameItem.append(recipeName) let indexPath = IndexPath (row: recipeNameItem.count - 1, section: 0) recipesTableView.beginUpdates() recipesTableView.insertRows(at: [indexPath], with: .automatic) recipesTableView.endUpdates() } } catch{ print("failed") } } let savedRecipeSegue = "savedRecipeSegue" var valueToPass:String! func recipesTableView(tableView: UITableView!, didSelectRowAtIndexPath indexPath: IndexPath) { print("You selected cell #\(indexPath.row)!") // Get Cell Label let indexPath = recipesTableView.indexPathForSelectedRow! let currentCell = recipesTableView.cellForRow(at: indexPath)! as UITableViewCell valueToPass = currentCell.textLabel?.text performSegue(withIdentifier: savedRecipeSegue, sender: self) } func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) { if (segue.identifier == savedRecipeSegue){ let viewController = segue.destination as! recipeViewController viewController.filter = valueToPass } } } extension savedRecipesViewController: UITableViewDelegate, UITableViewDataSource{ func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { if tableView == recipesTableView { return self.recipeNameItem.count } return self.recipeNameItem.count } func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { if tableView == recipesTableView { let cell = tableView.dequeueReusableCell(withIdentifier: "UITableViewCell", for: indexPath) let item = self.recipeNameItem[indexPath.item] cell.textLabel?.text = item return cell } return UITableViewCell() } }
I suggest you to move the `recipesTableView` method inside the UITableViewDelegate extension and change the name in order to follow the delegate: [https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614877-tableview](https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614877-tableview)
Whoa it’s Paul Hudson!! Hello, I’m a big fan. I loved the functional programming talk you gave at dotSwift in 2018! As someone who works in engineering for developer relations at Apple, we don’t get exposed a lot of 3rd party technologies. I’d love to see you dive into how SwiftUI integrateswith larger scale apps using many of those common 3rd party technologies: Unity, Cocoapods, React Native, etc.
&gt;UITableViewDelegate extension So that took me a step in the right direction! It will now perform the segue properly but it doesn't seem to be passing the value to the new viewcontroller properly. I have a var in the next viewcontroller named filter that is used to filter the results from core data. Do you know if there is anything I need to write in the destination viewcontroller to retrieve the value or does my prepareForSegue method look wrong to you? Thanks for all the help.
Put a breakpoint in viewController.filter = [...] to make sure it’s hitting that, and to inspect the actually object you are assigning.
And try to avoid using force downcast.
CollectionView
Add the subview for the subscription details on tap? Will that look smooth?
What I would like to see is how the separation between model and view are handled with SwiftUI, for instance using MVVM-C does it make sense with Swift UI?
Just hire people to write the app. Using UIKit or SwiftUI at this point shouldn't matter. No user is going to care one way or the other.
I’d avoid SwiftUI for now because there will be certain phones that can’t use it. I wouldn’t worry too much about how it’s built as long as the people doing it are comfortable with the technologies they are using. If you need any help building some of these, my company builds apps for start ups at a pretty good price. That being said I don’t do any cross platform so it would be iOS only.
Imo if your goal is to have a native app, it should be written in UIKit right now. SwiftUI is amazing, but like you pointed out definitely isn’t feature complete. For instance when I was talking to engineers at WWDC, they said there’s currently no way to eliminate extra tableview cells at the bottom of a tableview, which is something that’s trivial in UIKit by setting the footer view to an empty uiview. Further, all UIKit views can be made previewable in Xcode11, so even if the code isn’t in SwiftUI, the naturally quicker development cycle that comes with live previews can still be used without having to worry about framework incompleteness or alienating users not on iOS 13+. Basically SwiftUI is great, but for anything more complicated then your basic app/views, I think you’re going to want to (and often find that you don’t have a choice anyways) use UIKit, but ensure the development happens in a way that the jump to SwiftUI in the future won’t be as harsh (making data model objects conform to the combine protocols, as well as your views conform to the UIviewRepresentable protocol).
So after a few hours of debugging it ended up just being that I originally had "func prepareForSegue(...)" and I had to change it to " **override** **func** prepare(for segue...." Thanks for all the help u/jagranadab and u/_SweetnessFollows
Did you link your @IBOutlet to the corresponding view in Interface Builder?
Make sure your `IBOutlet` is connected to your storyboard
Thanks in advance, I’m a noob.... :D
You can find seasoned Swift developers that have written apps in Swift for 5+ years Your best bet with SwiftUI seasoned developer is hoping he can show any skills besides what you’re seeing on YouTube and this sub. Of course there’s some one in 10 million chance you find a SwiftUI total expert but I doubt it.
You should be using the "OR" operator || because your while loop will only run if both conditions are true meaning that when it gets all 3 gems then only one of those conditions is true and the other one is false. That's why it stops
Ah haha. Can’t believe I didn’t catch that either.
This loop runs *while* both the first condition is true *and* the second condition is true. Equivalently, it runs *until* one of the conditions is *not* true.
&gt;**should he not keep going until he has collected 3 gems &amp;&amp; toggled 4 switches** That's where you have it backward. In programming `while` is (roughly speaking) the opposite of "until" in English: So "until he has collected 3 gems &amp;&amp; toggled 4 switches" literally translates to: ``` while !(toggleCounter &gt;= 3 &amp;&amp; gemCounter &gt;= 4) // where ! is the NOT operator, which flips true to false and false to true // &gt;= is the GREATER THAN OR EQUAL TO operator, which is the opposite of &lt;, the LESS THAN operator ``` We can convert that using some boolean laws (links below for more info): ``` while !(toggleCounter &gt;= 3 &amp;&amp; gemCounter &gt;= 4) // Step 1 while (!(toggleCounter &gt;= 3) || !(gemCounter &gt;= 4)) // Step 2 De Morgan's Law while ((toggleCounter &lt; 3) || (gemCounter &lt; 4)) // Step 3 &gt;= is the opposite of &lt; while toggleCounter &lt; 3 || gemCounter &lt; 4 // Step 4 removing extra parenthesis ``` See https://en.wikipedia.org/wiki/De_Morgan%27s_laws for more info on the leap from Step 1 to 2 As you can see, it's better to just phrase the condition in the `while` loop to be instead "what remains true for the loop to execute". In this case, the loop continues (he should keep going) **while** he has less than 3 gems **or** less than 4 switches. I know it's a bit of a mind shift of how we typically think of things going "until" some condition is met (e.g. "keep calling her until she answers").
This👍 The compiler doesnt understand sometimes that *nil* is a valid Opaque return type. this is especially aggravating when it expects *some View* .
Some UIKit interoperability for transitioning?
https://github.com/nettlep/learn-swift
Best Patterns and Practices (as of now of course); where SwiftUI is limited and UIKit still is a better fit; common hurdles teams are going to run into bring it into a current project
I came in from a similar place, here's what I'd recommend: &amp;#x200B; 1. Read the free Swift Language pdf: [https://docs.swift.org/swift-book/index.html](https://docs.swift.org/swift-book/index.html) You'll find the language is like most C++/C#/Java languages with a lot of nice lessons learned (Optionals in types, optional parenthesis, etc.) 2. Use any regular iOS tutorials but just skip past the "learning how to program" parts and get straight to the "how to build apps and UIs in Xcode"
Best practices are tricky. Right now I'm writing – and throwing away! – large amounts of SwiftUI code, which is pretty much how I'm figuring out what works and what doesn't. Ultimately, that's all best practices are: here are things that are known to work well based on previous hard-earned experience. So, as I continue to write more, and continue to refactor my code, I hope to have some ideas how things are starting to fit together.
I'm glad you liked my dotSwift talk! Now that SPM is built right into Cocoapods I don't know how many people are going to stay on Cocoapods or Carthage rather than moving over – I guess time will tell! And despite being outside of Apple, I also focus most of my time on Apple's own frameworks because I know that's what folks want to learn most.
Shh! The first sentence in your last paragraph can get you executed on this sub!
 [https://www.hackingwithswift.com/](https://www.hackingwithswift.com/) The **text** follows the video very closely. As an experienced coder, you might be able to get through this quicker than other courses.
Use UIKit. If you require your devs to use Swift UI, then these devs are going to be learning Swift UI on your dime. Swift UI is brand new and, IMHO, not stable (just look at Swift 1.0) so you shouldn’t be thinking about it for at least another year.
I'm not Paul, but I suggest you look into one of the 3rd party reactive APIs that are available in open source (my personal favorite is RxSwift.)
Yeah I totally get it... especially as early as it is. I can already see a few places where Swift UI can be misused. Hopefully by August, we’ll all have a better idea. 😁
Hey thanks so much for this. I downloaded Vectornator and it was able to do what I need to. I’m not very good at it, but at least I can actually put custom backgrounds and icons now! My app is finally starting to look more like a real app!
First I'd like to dispel this notion that using Flutter would be "getting a cross platform app from the same efforts." That is absolutely false. Sure you can use the same language to develop for both device types and you might even be able to use some small amount of the code for both device types (the model,) but the look and feel of the two is sufficiently different that you will need a different code base (or a whole bunch of hooks/if statements in the code to account for the two different UIs.) &amp;#x200B; As for the SwiftUI vs UIKit question... Do you want it built fast or slow? Do you want a high adoption rate, or do you have a pretty captive audience? If you don't mind it taking more time to build the app, you might be able to get some iOS devs on board for less money per hour if you allow them to build in SwiftUI (because you can find devs who are excited to try out the new tech and are willing to come onboard for less money,) but you probably won't save any money in the long run. And you might end up with a \*worse\* app structurally even though you are using this new UI system precisely because the developers aren't experienced in the best way to write for it. Also, remember that based on past trends, the most up-to-date OS is only available on about 85% of the phones even after a year of being on market. &amp;#x200B; So if you can afford to wait for your app to be used by customers, or you can make your customers upgrade their phones, and you want an excited developer base who are looking forward to using the newest tech, then go with SwiftUI. If you want to get your MVP out into customer hands as soon as possible so you can start iterating based on feedback, then UIKit is a better idea. Lastly, even if you \*do\* insist on SwiftUI at least make sure your developers are knowledgable in one of the reactive frameworks that have been in use for a few years (RxSwift is my favorite and I've been using it since 2015.) That way, they will at least be familiar with the declarative structure of the new UI code and won't have to unlearn as much. And now for the obligatory plug... ([https://www.hanekedesign.com](https://www.hanekedesign.com))
Have you tried adding “use_frameworks” in your profile? https://stackoverflow.com/questions/41210249/why-do-we-use-use-frameworks-in-cocoapods Also, do you need to add an import to your bridging header? If you don’t know what that is, it is a good place to start looking up.
To add to this, the biggest knowledge gap is UIKit. Get familiar with MVC, target actions, delegates, and interface builder (nibs/storyboards if used). Depending on what libraries you will be using you may or may not need to delve into Foundation or other Apple frameworks.
If you want to understand further read up on binary math/binary logic. The ‘and’ and ‘or’ logic are important concepts to understand. And, or, not, and how these things interact are things that span across languages, syntax, and products.
Was in the same boat. Solved a problem for myself first and got a handle on swift and the basics that way. Personally I found Matt Neuburg’s Programming ios12 book (O’reilly) to be just an invaluable resource. Clear background on stuff that is difficult to glean from API docs or internet posts. It’s most useful once you’ve done a few things and have banged your head against a few walls I think - it assumes basic understanding of swift and patterns.
I would be surprised if SwiftUI somehow ends the eternal debate between MVVM, MVC, etc. Heck, it probably won't even end the "do you use storyboards" debate entirely haha.
I'm a first year CS student and I'm familiar with Java, trying to learn swift syntax. Is a dictionary similar to a hash map in Java?
I had an interview question that was straight out of this book (sliding a square around using a pan gesture recognizer).
I‘ve been trying to implement core data without a singleton pattern. I do initiate my data manager in the app delegate, whats the best way to pass it to my contentViewController/rootViewController? Should I use Notifications, since I‘m using Storyboards and don‘t set/create my initial vc programmatically?
I don't mean to be disrespectful towards the OP or author, but I feel like this warrants a warning, since this subreddit is frequented by many newcomers and beginners, who may not yet know the best practices or issues in this article. &amp;#x200B; Although it could be helpful as an example or general idea of what to do, I'd strongly recommend avoiding using the code in this article, as it is full of bad practices, such as force unwraps, optional try?s, and and spacing issues.
Its only beta 2, Apple is probably working hard to make it mature as possible. So it's a bit early to say what's the best approach.
True, if you don't care about older iOS versions then it's too soon to decide yet.
Well, it's not as if they'd be immediately obsolete. People would need to migrate their frameworks over to SPM, and you can be there will be many dead and used dependencies that would never get an update by their creators, and nobody would be inclined to fork and re-upload them as SPM packages (if that's even possible according to their licenses). Eventually though, yeah, SPM should and very likely will win out. It doesn't seem like a coincidence to me that SPM finally hits iOS as Swift 5.1 achieves Module Stability. In order to avoid compatibility issues, I'm willing to bet they're going to require all submitted packages to be compiled with Swift 5.1 or later, to get a much nicer developer experience.
It's a bit weird how SwiftUI requires containers to be generic. Many people will probably struggle with this.
&gt;Interface Builder Yes it's connected but it still doesn't work.
Yes it's connected but it still doesn't work.
Hello, I've made this project mostly for learning SwiftUI, and I also wanted to show that it's possible to build a full featured application using only SwiftUI. No UIKit representable (yet). It demo a lot of SwiftUI stuff, animations, gestures, combine, transition, modals etc... I'll add more and more SwiftUI features as Apple seed new betas. And I plan to release the application in September on the App Store. Any contributions or feedbacks welcomed :)
Paul Hudson and Hackingwithswift is the only resource you need. The best way to learn is also by working on your own projects/apps, skip over the tutorial apps.
It's really nice – good job! 👍
Oh hello there ;)
Firstly, if you're using someone else's API, often that means you're using data owned by someone else. It's a good idea to find out what you are and are not allowed to do with the data you pull back from the API. Perhaps if it's just for private learning purposes, what they don't know won't hurt them. But yes, you'd need to cache/store the channel and video information so you can relate the comments and likes to them. &amp;#x200B; If you're not familiar with Data Modelling now would be a good time to find a quick start guide or short course that will be super enlightening as to how to relate data and store it in a way that avoid's duplication, maintains it's referential integrity and is useful later on for things like running efficient queries.
Too much explicitly unwrapping to my taste.
I noticed that all errors from API is ignored. Do you plan to propagate errors to UI somehow?
Looks interesting, i wonna contribute to it, will check it out in detail next week and see if i can add anything to it :)
Here is a version from WWDC2015 func primesMutating(to n: Int) -&gt; [Int] { var numbers = [Int](2 ..&lt; n) for i in 0 ..&lt; n-2 { // guard let prime = numbers[i] where prime &gt; 0 else { continue } let prime = numbers[i] guard prime &gt; 0 else { continue } for multiple in stride(from: 2 * prime-2, to: n-2, by: prime) { numbers[multiple] = 0 } } return numbers.filter { $0 &gt; 0 } }
You shouldn't (actually, can't) save UI stuff (eg: UIView, UITextRange) into Core Data. What are you trying to achieve here? If you want to have dynamic amount of UIView with differing text range in a view controller, perhaps you can create a TextView entity in Core Data, with attribute of the range (String type maybe?).
Hi Martin! I am a bit confused what an alternative would be to doing this. I am having to save 'timestamps' to the left side of a UITextView(I added a photo above). How could my view know the Height and Position data of the 'stamps' without using a UIView?
when in storyboard open the Assistant Editor to show the code to your Views Class. You can highlight the connected IBOutlets and IBAction during mouseover.
Using an order: Int8? Keep the order, then determine the height by how much text there is (most likely variant on screen size anyway), tada. You know where the top and bottom is inherently. Boom problem solved
So you're saying instead of creating the above struct. Create a struct with the button text and an Int8 for the identifier. Then when the viewDidLoad is called what should I do? Work out the Views then loop over the Arrays of the struct and place in the Views according to their Int8?
Thank you, sir.
how do i download this in my iphone? 🤔
yeah I guess I'll add something to handle offline/online state and display some notification. But that's it.
Clone -&gt; Xcode 11 beta 2 -&gt; build and deploy on your device :)
Looks good!! Can i get a testflight invite ?
let me when you publish this app on app store.. cause i dont have mac so no xcode rip
I’m glad it helped. I’m artistically challenged myself so I understand.
I wouldnt use the int8 as their uuid, id use a string value and use the UUID method for that. But yes each entity would have an Int8 for their row value which would save/determine their place in the list
Okay, I'll look at that now. Would I technically even need an Identifier? Could I just use the Index of the item in the array? How would I then save this struct(String of buttonText) in an array in core data?
You typically dont save arrays in core data. You save a single entity, you would fetch a collection of entities (which would be your array). You honestly want to scrap this struct completely and remake it as a core data entity. Or if i’ve misunderstood you would then want to make this struct a relationship to a parent entity. Either way lose the struct and form it as a core data entity
Okay, thanks so much for your help. I'll recreate it in Core Data. Do you have a link of how I should integrate an ID then(if I do the entity in Core Data I'm guessing then I need it as it won't have an index number)? I'm a bit confused by if you're meaning I should use an Int8 or UDID and how I would implement this.
Matt's a great author and explainer.
The uuid is kinda separate from your whole question and just a thing each entity should have. I usually make them strings. The int8 is simply for keeping the index of your item so you can sort it properly
Yep, how should I create a Int8 for each that keeps going up in value? Is there a recommended way to do this? OR Can I create it so that if I insert a number the rest would update like an index? Excuse my ignorance I am new to all this! :)
Thank you! use_frameworks fixed it. I thought that was not necessary anymore
I think we need to backtrack to the beginning if you want that kind of help. In plain english what are you trying to achieve with your UI?
Yeah, that’s pretty horrible.
Okay. So I have a UITextView that the user would write notes in and a audioRecorder that records audio. On the left hand side I am making a 'timeStamp' which is a button that links to the current time of the audioRecorder so when the user types a new paragraph it creates a timeStamp. It's the same feature as in the 'Noted' app on the AppStore. At the moment I: 1. Split the paragraph into 'components' and create the views next to the 'components' that line up with the position and height of the paragraphs. 2. After this load the buttons into the views based on their index in an array. (It's easy as each paragraph lines up with the index of the button array so it's just a loop that counts through the paragraphs and uses that index to access the specific button element). Paragraph 1 = Element 1 in button array and so on. Now I need to work out how to move this to Core Data. As the indexing nature of array seems to not be available since I need to build it in Core Data. I'm also going to have a problem trying to work out when a paragraph/component is added in between others as that would mess the whole count up and not have it in order.
Basically, I'm trying to work out the best way to compare/add/delete between the live components (paragraphs) and the saved button strings to work out which buttons match which paragraphs.
You recognize you lack experience in an area, so you find others to ask for their advice. That's good. But you're asking about a completely new framework which doesn't work with any released operating system, and which no developer has ever shipped an app using. I'm not sure what great insights you're hoping to get here. "I shipped a cool app using SwiftUI, in the future, and it's going to be great"?
Will update with some thoughts at lunch
Can you include complete source code for a program which demonstrates this problem? You've rejected the obvious answer.
Thank you so much. Would really appreciate that! This has had me stumped for weeks! :)
You can also just call [assert](https://developer.apple.com/documentation/swift/1541112-assert) or [precondition](https://developer.apple.com/documentation/swift/1540960-precondition), depending on whether you want release builds to evaluate the test.
 if thisUser == currentUser { continue }
Very nice! Thanks for sharing
Great work! How would you describe the experience, compared to doing things the UIKit way?
I have a hard time believing that since if it's correctly connected, the view will not be `nil` in `viewDidLoad(_: )`. Right click the `GADBannerView` in your storyboard and remove all connections, and reset it. You might have it referencing an old `IBOutlet`. Another thing to try, is make sure the class type in storyboard is `GADBannerView` as opposed to `UIView`.
Have a look at the [WatchConnectivity](https://developer.apple.com/documentation/watchconnectivity) (mainly `WCSession`). There are several ways you can do this. It's hard to say without more information, but: - Using application context when the watch app isn't reachable to update the current state - sending a message when the watch is reachable (do this how ever many times you want) - transferring over a file, this way is controlled by the system to reduce power consumption and other things.
This is awesome!
[https://imgur.com/4v7j6YA](https://imgur.com/4v7j6YA) [https://imgur.com/hGrQ7NW](https://imgur.com/hGrQ7NW) [https://imgur.com/80l8p3x](https://imgur.com/80l8p3x) I've made all the connections again but always come back to the same problem.
&gt; Get the Mac App (Trial) to send push notification easily with drag n drop certificate and one click push. Trial app for something that can be done in a couple of lines and should be open source... Oh and you have to use your email address, so you will also most likely get some spam emails too.
Error handling would probably complicate that redux thing too much, let's assume that nothing bad happens ever.
You said "Swift Language pdf" but there's no pdf there, just a web page. Is there some way to get this as a pdf?
Sorry; you're correct. I've updated my comment.
You might be missing the point of this..
Did you double check the view class in storyboard?
Thanks. Should continue be in a loop? I know how to define currentUser, but how did you define user? Or should I just make it 'if let'?
Emulating MacOS while trying to learn Xcode and Swift would be a fantastic idea if you suffer from low blood pressure. Buy a MacBook Pro or a Mac mini. I'd look at a mini and pair it with a big screen.
This is more of a data structure question, with no right answer, but every answer could have tradeoffs. 1. A text variable for the users note 2. an index of the note 3. a Timestamp variable 4. A UUID - so you have a unique key for each element, i find this easier than using the managedObjectID The UI would use a tableview or collection view (either one will work), you could use a fetched results controller to make the fetch easy. There is a lot for you to learn here
Id go with a MBP or Mac mini.
Heres my code for doing it with swift on the server. [https://github.com/kylebrowning/swift-nio-apns](https://github.com/kylebrowning/swift-nio-apns)
Nice one!
Emulating for a constant use has never been a good idea. Resources during virtualization arent optimized by any means. &amp;#x200B; If you dont feel like going the apple route, pick a compatible laptop and Hackintosh it.
Two things to consider. 1# Swift is only good for iOS/MacOS development. You will not be able to develop windows/linux apps that integrate with system other than apple's efficiently. You need to consider that first. Swift outside of apple's ecosystem is inefficient and probably not so fan to use. 2# Emulating macOS on non-apple hardware is illegal I think. For swift development you must have an iPhone, iPad or Mac because that is the main target, as is AppStore. Server swift is almost nonexistent. Developing for iOS and/or MacOS means you need to purchase a developer license in case you want to publish your app on the AppStore. When you considered the two points (in short iOS and MacOS is the only platform you can develop for and you need to buy into the ecosystem to be efficient) then you should go ahead and buy your mac. I personally recommend macbook pro. I have the 2018 model and while keyboard requires extra care to make sure nothing gets under the keycaps, the entire machine is more than amazing. I use docker on it to emulate my dev environment (as I am not primarily swift dev) and it is great. Best get the 2019 model directly form apple. I recommend the 15" version because the 13" feels weird but that is just my preference.
You will be unhappy with emulation. Get a Mac Mini.
This. Swift compile times are already slow and a 'hacked' OS X is so annoying. I second a mini or a refurshibed MacBook.
If price is a concern, look into the 2017 non-touchbar MacBook Pro as well. The Mac Mini is cheaper than both and down the line you can expand some elements of the Mac Mini compared to non expandability of the MacBook Pro line.
No
It’s just a damn shame it’s published by O’Reilly. I would love to get a copy, but talk about a purchaser-unfriendly company.
I love the concept, thanks for sharing it with us! Just wondering, were there any challenges involved with having a set amount of api calls per client/minute to the online service?
Why did you decide to use redux instead of vanilla SwiftUI?
There are some great portable displays you can buy from a company called GSYNC on amazon. You could pair it with a Mac Mini when you travel.
Sure, I was thinking that a bigger screen is more useful when learning. When I switch from my 40” 4K to my 15 MBP it’s not as pleasant an experience.
It would be more productive if the people commenting negatively had more specific feedback about what they didn’t like and other ways to tackle the problem.
Do NOT buy the razer thinking it'll be okay for learning swift on. If you're serious about learning it you just have to be an apple computer. There's really no alternative
Absolutely do **not** emulate MacOS on Virtualbox. It is an absolute exercise in pain. I did it for about 4 months in 2018 before just biting the bullet and buying a MBP. So, so, so, so many crashes. The virtual machine, Xcode, the simulator. Tasks that would take me an hour with the MBP were taking me, quite literally ten hours in a simulated environment. It was maddening. You will regret every moment you aren't coding on a MBP, or at WORST a hackintosh.
&gt; Emulating macOS on non-apple hardware is illegal It's not *illegal*, but it is against the EULA. It also usually doesn't go too well. I've done several hackintoshes, as well as virtualized MacOS, and it's always a terrible idea. Real hardware is best.
You should use a UIViewController with two views. A Header view(the one that sticks) and a UITableView. Set the tableview delegate and datasource to your UIViewController. In the UITableView, set the tableview.headerView equal to the view you want to scroll with the tableview. Then all your cells are just regular cells.
A lot of effort.
I’ve been digging through your repo for a week to learn how combine works in practice. Thanks for the work you’ve done.
As Lattner said in a post once, since it's basically a front-end for LLVM, you first have to define what you mean by that. Just the Swift-specific part in Swift? Then you'd need to create a way to call C++ APIs from Swift, for starters.
I bought a MacBook Air to learn Swift. I needed a low cost Mac and didn’t want to buy used/refurbished. I got a good deal on Black Friday and it does the job. If you plan to make a career out of it or build some programs with Swift, like more than just one or two as a hobby, get the MBP.
Just the Swift frontend currently in use? C++ API importing so it can link against libllvm. The whole thing? A *lot* of time and effort rewriting LLVM, Clang and a bunch of other things in Swift.
The easiest way would be to loop through each name and add up each characters ASCII values. let name = "Bruce Banner" var value = 0 for ascii in name.utf8 { value += Int(ascii) } print(value) The hard way would be to save each pair of names to disk and check new names against your database.
Makes sense. Thanks.
Well, first you'd need a Swift compiler to compile the compiler Swift into a compiled compiler.
So if you want to test your matching logic to make sure it is consistent you have to tell us how you are doing your matches.
See https://github.com/apple/swift/blob/2c7b0b22831159396fe0e98e5944e64a483c356e/www/FAQ.rst
A lot of languages compile themselves. It'd be a fair amount of work, but there's definitely an elegance to the idea of it. https://en.wikipedia.org/wiki/Bootstrapping_(compilers)
So I recently bought a Surface Laptop 2 and then decided two months later that I wanted to get into iOS development. So I did the whole Virtual Box VM thing and found a way to get Xcode running onto the virtual machine, but it was so darn slow. So I sold it for $200 less than I bought it and found a deal on a touchbar MBP. It's much faster and I'm much happier. Save yourself the trouble and time and do what you're inevitably going to do and get a Mac. If you already have a monitor, mouse, and keyboard, buy a Mac Mini and go to town on Xcode.
IMO, it's worth it to support Matt.
Then all you gotta do to fix the buggy compiler is write a fixed compiler and get the buggy compiler to compile it. But careful! Don’t allow the buggy compiler to add the bug to the fixed compiler, or else you’ll have to update the compiler to fix the buggy fixed compiler.
I’d rather not spend my dollars with a customer-hostile, money-grabbing company to support a single author.
I am surprised Apple is not publishing this. It is very much the “missing manual” here. Sure you can glean some/most of it (eventually?) from the existing docs or stack overflow, but this book makes it sooo much easier and faster. There is unfortunately no shortage of badly edited or just straight up bad books on this topic.
You could use the existing Swift compiler to compile the new Swift Swift compiler, and then future Swift Swift Compilers could all be compiled with a previously compiled compiler.
you might be able to access it through o'reilly's web portal for free with your local library services. i don't mean actually being at the library, but by verifying with your card #
MBP or even hunt around and try to buy an old Pro tower maybe. I see people on here buying them for a couple hundred from time to time. Won’t run Catalina but it’ll get you over the learning curve enough to decide if you want to pursue macOS programming more seriously. (Or until less constrained MBPs come out.)
hahaha, it's actually one of the most easy things to do with redux, you just forward to your errorState, and your UI just have to display it and pop it once a new one arrive.
It's vanilla SwiftUI, Redux just ease the data flow. For an app of this type, where you need to hold and normalize a lot of data from an API, you end up with some sort or singleton that store your data anyway. I could have made multiple BindableObject which each publish their changes. But Redux sound much more adapted, and Apple was strongly pushing in this direction already.
It's not handled at all for now, I guess I'll have to handle it before releasing my app tho, because I could hit the problem once everyone use my API Key on the App Store. But last time I did an app with TMDB API, I got some pretty nice derogation ;)
You can generate IR for LLVM without needing to use the C++ API. Rust for example is written in rust and is similarly a frontend for LLVM
My day job is on some pretty heavy UIKit codebase; I would say that now that I'm doing SwiftUI for weeks, UIKIt feel sooooooo slow to code with. You can have much more velocity in SwiftUI. It's much faster to iterate because of preview, and also because the code you need to write to achieve things is much less.
I'm pretty sure when dealing with API's, you make requests. You don't need to store anything into a database. I've read the youtube api documentation. I have followed Angela yu's course before. Just use alamofire to make a request to the youtube api and retrieve the videos, comments, likes and dislikes. If you want to add extra functionality to detect if a user already watched a video, you need to store that boolean in a database(Core Data or realm would do). the videos, comments, likes and dislikes are all associated together through json. I think you are thinking about this a bit too hard. Please reach out if you have doubts
First thing you need is a reason to do it.
I don’t suffer from low blood pressure haha, I didn’t consider the Mac mini at all though, it might be a good compromise. Thanks for your message !
I though it was a spec problem but it seems that it is not. I’ve tried to run MacOS on my Windows Laptop and Xcode is extra slow even for a simple « print (a) »..... Thanks for your message !
Isn’t the MacBook Pro 2017 the actual Duo-cores MacBook Pro ? Isn’t it a bit crazy to buy this one in July while 3 month later Apple could announce a refresh of it ? I’m kinda scared of that...
Considering all the answer I will definitively not hahaha thank you for your message !
Thank you for your message ! I think I’m gonna go MBP, you are making hesitate between the 15’’ and 13’’ now... If I had to take a 13’’ MBP would you recommend the Duo-Cores ? Quad-Core with TouchBar or wait until late November ?
At least Apple does make it available for purchase. I bought both his books on iOS from Books
Take whatever you can afford. Don't buy the dual core variant because it is very low performance and I am not sure if the new macbook air wouldn't out perform the dual core pro. Also I strongly recommend, if you can afford it, the 15" variant (because of the screen size). If this will your primary machine and you have no plans for secondary monitor then buying 15" is a MUST basically. Should you wait? Well if you need it NOW then no you probably shouldn't wait. But If it is just a regular upgrade then yes... AND no. MBP was refreshed recently to have the eighth gen processors so I am not sure whether there will be a release in November. There are rumors of complete redesign but they are just rumors so idk. I recommend you get either the i7 or i9 version of 15" MBP with 32GB of RAM because once you buy it I don't think you will be upgrading it soon. Also get apple care.
Do you mean tableview sections? &amp;#x200B; [https://developer.apple.com/documentation/uikit/uitableviewdatasource/1614860-numberofsections](https://developer.apple.com/documentation/uikit/uitableviewdatasource/1614860-numberofsections)
i mean the collapsing search bar and title
I think what OP wants is a scrollable header that begins to stick once it is scrolled halfway. just like section headers in tableviews stick to the top and cells keep on scrolling through. but the section headers are being pushed away when another section header comes along, which is what OP doesn't want to happen.
im sorry, only the search bar i need to collapse
from what it looks like in the iOS Settings the searchbar is a regular cell while the Title is a section header. &amp;#x200B; section headers can stay at top while the cells seem to scroll underneath them. they collapse when the user scrolled through all of the section.
is this applicable for both dynamic and static cell type?
Hello, I am beginner at swift and I was wondering whether using storyboards is better than doing everything programatically(not using storyboards at all) or vice versa. Essentially I am asking which is easiest :). Thank you in advance
the functionality is all inside the sections, so it should always work as long as you have set headers.
The collapsing title is just a standard UINavigationBar with [prefersLargeTitles](https://developer.apple.com/documentation/uikit/uinavigationbar/2908999-preferslargetitles) set to true. The UISearchBar is a subview of the nav bar. Though I’m not certain how to make it collapse in the same way. Take a look at this, it might have the answers or at least get you started: https://stackoverflow.com/questions/5095477/uisearchbar-in-navigationbar
On my mini I see a lot of the spinning beach ball while in Xcode 10. Probably memory related as I only have 4 gigs (I have 16 ready to pop in, just been too lazy to do it). It’s not crashing, just a lot of long pauses
The easiest way to do things are storyboards for sure. Once you work on a larger app they’ll take quite a long time to load but once you get better you can go over to doing everything programmatically. Also using constraints is way easier when using storyboards. I hope this answers your question :)
Really?
thank you, although im not using search bar in navigation.
Hey, there’s an idea. I’ll take a look—thanks!
Think about Storyboards/XIBs, doing UI programatically and the new SwiftUI framework as similar but different tools. There are cases where it's simpler to do it programatically than in Interface Builder and vice versa. There's no silver bullet. :)
If you are going to install it, install it on a APFS container using space sharing and it should be fine. You also can still do swiftUI on Mojave, you just don’t get the fancy live previews
If you believe Chris Lattner, “the combination of C++ interoperability and fine-grained memory ownership support” may be enough to make it possible. He said this on Swift by Sundell #50.
 [Have you really been searching?](https://www.hackingwithswift.com/quick-start/swiftui/how-to-enable-editing-on-a-list-using-editbutton)
Assuming you're using UITextFields to enter your names, and a label to show your scores, then you'd want something like this: ``` func textField1DidChange() { reload() } func textField2DidChange() { reload() } func reload() { let score = getScore(name1: textField1.text, name2: textField2.text) label.text = "\(score)" } func getScore(name1: String, name2: String) -&gt; Int { // your fancy logic in here } ``` From what it sounds like, you're probably not calling your 'reload' function often enough, and calculating scores off old values. Hope this helps, otherwise we'd need to see more code.
Then in which language C/C++ are written?? 🤔
Self-hosting removes a barrier to community participation. This is a sufficient reason all on its own. Rust is a good example in this regard.
Yes it’s a dual core Mac but it has hyperthreading so you still have 4 logical cores. There’s always a new product around the corner.
This is the correct answer. No one is talking about rewriting LLVM in Swift smh
You can install the Xcode beta on Mojave. 10.14.4.
All good. I errors or issues on mbp 2017 with touchbar.
A benefit that can't be gotten by other means.
Probably would also need a computer of some sort and a monitor so they could see what they were typing.
If you want the effect of having the collapsing search bar like in the settings app then you need to put it in the nav bar, like in the setting app.
So, I talked to folks from Apple about this, and the best alternative right now is to put a struct inside the class then add a single `didSet` there. However, this adds an extra layer of indirection: `yourClass.yourStruct.yourValue` rather than just `yourClass.yourValue`. I'm not sure it's any better, TBH.
- *Width* is a size. Width *fraction* is a proportion. - This question isn't about Swift. It's about a framework (which can presumably be used from multiple languages). From some googling, it seems to be about iOS, since NSSplitViewController doesn't have any properties like this. - Can you provide some source code to show what you're seeing? I cannot reproduce this problem.
I want to learn Swift but I don’t want to go through the ‘learning to code’ part of many guides since I do have a background and experience programming. Is there a program or course where I can learn just the language and the Xcode interface? Does Swift playgrounds have something like this?
Shiiiiiiit
Apparently what Lattner and friends consider the "faults" of C++ are completely different than what I consider them to be.
Strange. As a compiler author, I always thought the reason for bootstrapping was to *save* work, not for some disembodied sense of aesthetics. After all, if your new language isn't more efficient or effective at writing real programs than C or C++ or whatever you have lying around, then why are you even writing it?
*Where* are you getting this SIGABRT? Is this the shortest program which demonstrates the problem? What did you try so far?
Looks awesome. Noticed there is a strip of white pixels between cloud and land, can they not just be made transparent?
This really doesn't seem like something that Apple or the Swift team cares about solving. Swift has never been about syntactic abstraction, or cross-cutting concerns. They'll identify a single major problem, and solve it once (in the compiler, hardcoded) for the next Swift version, but they've never really given users the tools to solve these types of issues themselves. Sorry. I wouldn't hold my breath. If you want compile-time macros, there's always GYB.
&gt; or read the documentations which needs more time Doing the job right requires contributors taking the time to *read the documentation*? In order to make the system "Readable"? Who'd have guessed!
If you want to copy everything over (which is not 100% certain) you don’t need to use a for loop. Just do this groupDefaults.register(defaults: userDefaults.dictionaryRepresentation)
I just did this today on my main MacBook Pro 2013. Last fresh install was a year ago, lots of crap and settings in the background - you can imagine. Having said that, I encountered a couple problems with finder switching the windows active and inactive randomly (rendering the GUI unusable) but solved that with deleting a couple .plist files. It seems to be stable enough now. As for Xcode 11, it is slow (8GB RAM). Definitely not as snappy as Xcode 10 on Mojave. Also, pay attention to breaking changes in apps that you use. I just realized that Bitwarden is not supported in the new Safari anymore as an extension. That's the only one I've noticed so far among other smaller bugs with other 3rd party software. **TL;DR** it works. it's okay. Make sure to create a Time Machine backup tho!
You can attach gesture to any SwiftUI view like this: `.gesture(DragGesture().onChanged({ value in` `// Do things` `}).onEnded({ value in` `// Do things` `}))`
It's very buggy. Don't replace your main system. If you have 40 GB or more of free space, create a separate volume on your main drive and use that volume for Catalina. APFS makes this very easy, and Disk Utility will walk you through it. Otherwise, use an external drive (which is what I do). To install Catalina on a separate volume: * Create the separate volume using Disk Utility. * Enrol your Mac in the Catalina Beta. * Go to System Preferences &gt; Software Update, and click Upgrade. This doesn't actually upgrade your Mac, it just downloads the Catalina installer to /Applications. * Once it's finished downloading, the installer will let you choose which volume to use. Select the volume you created in step 1.
I think it would be an interesting challenge to solve - if people are manically clicking around the app really fast, but the data is limited from the provider (due to their rules), how can you best cache data to make the experience seamless. Maybe by initially including in the app its self the data for the top 100 movies/most recent ones etc? https://developers.themoviedb.org/3/getting-started/request-rate-limiting This puzzle makes my inner nerd really curious ;)
I couldn't think of a way to get this to interact with the system drag and drop. I was able to make a UIViewRepresentable that uses a UIHostingController that has a UIDragInteraction. I pass the View body in from SwiftUI and display in the embedded UIHostingController. I did the same for UIDropInteraction. This works great. I assume SwiftUI will gain these features before release. But, I wanted to continue with some work. I'm thinking of posting those classes somewhere but I haven't cleaned them up yet.
a tableview with columns? heading? you mean section header? You need to do a better job explaining what you need if you want some help
Maybe you can use `@dynamicMemberLookup` to get around that?
&gt; GYB GYB?
Could you elaborate?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/iosprogramming] [How to use Core Animation on CoreGraphics drawn using the draw() method?](https://www.reddit.com/r/iOSProgramming/comments/c5ij1a/how_to_use_core_animation_on_coregraphics_drawn/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I know where they can get a stand for $999
I upgraded a spare MBP2013 and couldn’t get past the beach all most of the time.
I looked though your code, since you didn't give a lot of detail I couldn't find any issues. (I didn't build or do cocopods). As a side note, you committed your firebase credentials in your plist to the world. You might want to delete it before it gets abused in the future. &amp;#x200B; If you still need help I can do a screen share with you and you can show me the problem.
Does anything happen if you use UIView.animate?
My understanding is Auth is a singleton. The .auth() portion is you accessing the one instance of the class. And then .signOut() is signing out. Basically it goes Class.Instance.Method
Look into `NSLayoutConstraint.constraints(withVisualFormat:`, and you can also use the various `...anchor` properties in UI objects like this: toolBar.translatesAutoresizingMaskIntoConstraints = false toolBar.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true toolBar.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true toolBar.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true toolBar.heightAnchor.constraint(equalToConstant: 22).isActive = true
&gt; For many reasons you can have hope that Swift will end up being a great "successor to Objective-C" instead of a "C++ replacement": &gt; &gt; The compiler team has expert-level knowledge of Objective-C (the language), having implemented the compiler for it from the ground-up. We probably know its dark corners better than anyone. Yet Objective-C is by default dynamically-typed and its object model is based on message-passing, while C++ is fully statically-typed and based on virtual calls. Also, Objective-C is (apart perhaps from the C part) a fairly simple and regular language, while C++ is a huge complex one. Besides the memory model, and method names being interspersed with parameters, I'm really not sure how they think Swift is closer to Objective-C than C++. I've long been a fan of Objective-C, but not because of its unique memory model. I'd consider that one of the "dark corners" of Objective-C. People who liked Objective-C tend to be Smalltalk fans, so a great successor to Objective-C (an "Objective-C without the C", as Hair Force One strangely claimed Swift would be) would have been something more like a Smalltalk, without the compromises necessary for backwards compatibility with C. Haskell-meets-C++, with Objective-C's memory model and method naming convention, is not something anyone ever asked for.
I miss the MacBook Air form factor. I used one for many years and it's definitely suited for Xcode. I would choose a 2018 MacBook Air + 5K iMac combo over a maxed out MacBook Pro.
This question might be better suited for r/iOSProgramming
You do, but auto completion is going crazy with KeyPath lookups.
Thanks, I posted it there also but I haven’t had anyone share ideas yet. I was just trying to find communities of iOS devs that have had experience releasing apps.
Why not just a 4k monitor with a MacBook Air?
Yes. Only simulators can be slow. But if you test on real devices it’s quick. Xcode and building itself is fast enough for me on the MacBook Air.
I don't have access to the source code atm but I would assume Auth is a singleton and .auth() returns an instance of said class. &gt;How come I can use a method after a method Because Auth.auth() returns an object, and that object has a signOutMethod. You can chain things like this. So if you had this class: &amp;#x200B; `class MyClass {` `[...]` `func getMyOtherClass() -&gt; MyOtherClass {` `return MyOtherClass()` `}` `}` and: `class MyOtherClass {` `[...]` `func sayHello(){` `print("Hello!")` `}` `}` You can just do `let a = MyClass()` `a.getMyOtherClass().sayHello()` Sorry for the formatting, new-reddit truly sucks for almost everything.
Oh I see About your question I tend to just launch and display my app on some ad engines which seems to help. I always ship my app with firebase analytics which gives me a lot of feedback about usage which I analyze to improve my app. I'm a developer and have very little experience in marketing and benchmarking so my experience is pretty amateur.
I might be interested but I am based in Tokyo
You can't use CoreAnimation this way. You use CoreAnimation on properties of CALayers. So in your case, you'd create a CAShapeLayer and assign a CGPathRef to the layer's path property. You can then animate the strokeStart/strokeEnd of the layer to get the effect you want. Note that you have to create your layer hierarchy in viewDidLoad. [https://www.raywenderlich.com/402-calayer-tutorial-for-ios-getting-started](https://www.raywenderlich.com/402-calayer-tutorial-for-ios-getting-started)
Okay, What is the advantage of using a UITableView instead of just adding the views as subviews?
Most likely the land was not masked correctly in photoshop etc. Masking correctly can be a real skill to get done right and not really needed for demoing this code.
Gotcha, thanks for your feedback. What analytics are you optimizing on? Are you setting markers to see if users reach specific screens in your app or what other things are you analyzing?
That’s a good point. I was thinking for those projects where you need a ton of ram to feel productive. But I forgot the MacBook Air has 16gb of ram now. Creative Cloud shouldn’t struggle with that.
Maybe they mean NSTableView
Maybe [additionalSafeAreaInsets](https://developer.apple.com/documentation/uikit/uiviewcontroller/2902284-additionalsafeareainsets) ?
Newbie question, is Vapor a MVC framework for Swift similar to Laravel or CodeIgniter for PHP?
You don’t use tableview correctly. You need to use the tableview data source protocol and fill the methods: -numberofsections: =&gt; indicate the number of section of your table view -numberofrows: =&gt; indicate the number of rows on your table view -rowsforpath =&gt; indicate what the table view should display at indexpath.row
Thanks! I’ll look into that tomorrow. Do you think that should fix that problem?
Definitely :) I use it all the time to take informations from core Data and display it on a table view. It’s important because a table view reuse constantly the same cells when the user scroll the list. You can have some informations on the protocol here: https://developer.apple.com/documentation/uikit/uitableviewdatasource
Great, thanks for the info! Hopefully I can figure it out tomorrow haha.
Feel free to come back if you have new issue :-)
It’s.a framework for backend development
Your for loop is wrong as well as missing tableView datasource methods, you should use the for i; loop and your index paths should be at row i
Same sounds nice for a few extra bucks on the side but the whole US thing might be for taxes and whatnot
Well I am an American citizen so it wouldn’t be a problem.
After playing with SwiftUI for a little while and catching up on my notes from WWDC, I share my thoughts and observations on the new UI framework we can expect to see much more of as we move forward.
Sorry, [Anchor.fm](https://Anchor.fm) takes a while to propagate through the various platforms. I am hoping it will appear there very soon.
The feed has now appeared in Overcast (my personal favorite player) [https://overcast.fm/itunes1467065787/compile-swift](https://overcast.fm/itunes1467065787/compile-swift) Thanks.
Yes
Core Data, that's a name I haven't heard in a long time.
That's right! You can read more about Vapor here [https://vapor.codes/](https://vapor.codes/).
By heading I mean title for the column. Here is a picture of the table view: https://imgur.com/a/tE9SaTV
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/P6oYfT2.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)
Generate Your Boilerplate
I was having the same exact issue. &amp;#x200B; Fixed it by changing the vc to be displayed ModalPresentationStyle to overFullScreen &amp;#x200B; `let vc = UIStoryboard(name: "Register", bundle: nil).instantiateInitialViewController()` `vc?.modalPresentationStyle = .overFullScreen` `sender.present(vc!, animated: true)`
 var \_HelLoW\_ = "wOr\_l-d" var \_HaaaahHhahaha\_hahHHH = "NO\_YOU\_RE\_WRONG" =)
The convention I’ve seen is usually: stored properties before initialisers, then computed properties then methods. The reason is that the type is defined by what it stores. Initialisers can only set those properties which don’t have their own initialiser, so they’re dependent on the properties. Everything else doesn’t need to be in the main definition so is obviously less important.
I'm on a Macbook and it's much better than my previous Macbook Pro. The reason is the Macbook can run flat out at 100% and not get hot, whereas a Macbook Pro gets toasty hot and needs to be on a desk.
You can now have a memory efficient list of non finite views
Firebase analytics is good idea to include! For the first period of a release i'm usually interested in how many users show up, how long are they using the app and of course all the nasty 1.0 bugs (also included with firebase).
Okay! I am guessing you meant 'not' haha. I have been trying to move to a UITableView since your advice. I am having major problems trying to get it to line up. Any chance you would have some more advice? [https://www.reddit.com/r/swift/comments/c5nuub/i\_am\_losing\_my\_mind\_trying\_to\_align\_uitableview/](https://www.reddit.com/r/swift/comments/c5nuub/i_am_losing_my_mind_trying_to_align_uitableview/)
The best convention is to keep your classes small enough that it doesn’t matter where the `init` goes. *Prefer composition to inheritance.*
Let me assume that you don’t want that LITERAL view. I would start with adding views to a UINavigationItem and then placing your view in a UINavigationController.
I tend to go static variables, member variables, computed properties, init, other methods
Thanks for the explanation! So you don’t really find Swift good?
You are fighting autolayout, stop fighting and embrace it. Tableview cell height should be set to automatic. Make your constraints in the cell autosize to the textview. Reference tutorials on auto resizing tableview cells
Thanks. Not literal, but close. None of them would be buttons. Only headings.
Okay, So I still need a new cell for every paragraph(you're not meaning have a single cell are you)? Instead of setting the cell height I need to use 'constraints' on each button?
You need to call reloadData() in order to reload it..
What happened to b29??
Awwww, wait. My textView Paragraphs aren't in a TableView. They're in just a normal UITextView so all the text is selectable like a normal note. I probably didn't make that clear, sorry :(
These guys are kind of cool, do all that work for you. https://www.misterclippingpaths.com/
Do you want a Segmented Control to toggle between them?
Maybe it would be best to describe what **behavior** you want to emulate and then the design of it will be more clear.
It would help if you draw on pencil and paper what you want your UI to look like for me to comment on the exact cell layout
[https://imgur.com/a/8heSIMR](https://imgur.com/a/8heSIMR) Here's a link to what I am wanting. Basically the markers need to line up with the first line of each paragraph. The paragraph is a normal UITextView, so you can edit it like the generic Apple Notes app. Just need to work out how to lineup the markers. This is the same feature that is in the 'Noted' app on the AppStore if you have a phone in front of you...
Re architect it, each row should be a cell, each cell should contain a button and a non scrolling text view. The no scroll will be a key part to the cell auto resizing
I wish I could! haha. The fact that the text is completely selectable and not in different tableViews is a key part of the app unfortunately. I know it can be done because they have achieved it. So frustrating! haha
Why does it being in a tableview affect the texts select-ability?
My understanding is that if the text is all in different cells you can't select all the text at once like you can in a single textView.
I suspected so
Thank you for that idea, that solved my problem. Check my edit in my original post.
No Segmented Control. They are basically just headings for what is to come below. I can add a 'view' and then a bunch of labels on top of that in the page. That works, but upon build there is a slight lag between that and the rest of the stuff getting displayed.
Yes it is absolutely worth it. It is a great opportunity, whether you're interested in app development or other software development areas. You get to study/work with people from all over the world and build your very own apps. Everyone has their own experiences, you can really learn a lot from them and share your knowledge in return. Plus, it's free!
Great!
Its just a soundtrack episode.
is there an age limit to this program?
Hey, looks interesting. &amp;#x200B; Is this work? `var body: some View {` `Button(action: { self.user.likesCandy.toggle() }) { Text("Age: \(user.likesCandy)") }` `}`
I wonder if you could turn that wrapper into a propertyObserver instead. That would be a lot easier to do. That way you could write `@AutoObjectBinding var user: User` It’s a nice util but it handles a very specific. Case. Sometimes you might not want to notify on all property changes.
Definitely going to check them out. I make Hairstyle apps and masking hair is a real pain and takes me anywhere from 10 minutes to 2 hours to get a style right. So times that by 500...
Ohhhhhhhhhhhhh Interesting problem you are trying to solve.... scrap the tableview idea then 😄
Wait, seriously? Do you think I shouldn't use the tableview and should use UIViews?
Umm, well like you said you cannot copy all text views in separate table view cells
Yeah, but should I still try and create custom heights and use a TableView? How do you think they have achieved this?
What? It’s not an MVC framework.
It’s not an MVC framework.
So I have this extension in my code already, is this what you are talking about? &amp;#x200B; extension recipeViewController: UITableViewDelegate, UITableViewDataSource{ func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { if tableView == fermTableView { return self.fermItem.count } else if tableView == hopTableView{ return self.hopItem.count } return self.fermItem.count } func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { if tableView == fermTableView { let cell = tableView.dequeueReusableCell(withIdentifier: "UITableViewCell", for: indexPath) let item = self.fermItem[indexPath.item] cell.textLabel?.text = item return cell } else if tableView == hopTableView { let cell = tableView.dequeueReusableCell(withIdentifier: "UITableViewCell", for: indexPath) let item = self.hopItem[indexPath.item] cell.textLabel?.text = item return cell } return UITableViewCell() } }
The only requirement is a high school diploma or university degree, but I assume you should be 18+.
It says future for web development. Can one use it to create dynamic web pages such as web form and grids etc?
I recommend using an extension like [this one](https://successfulcoder.com/2016/12/17/how-to-calculate-height-of-a-multiline-string-in-swift/) to calculate strings height and returns what you expect.
Okay, what is the difference between this and the code I have above?
Yes and no. But that doesn’t make it MVC. It’s a framework for building applications that serve webpages and APIs. You’ll still need to include css and use the temp laying system leaf to build the forms and grids.
With selectionRects you're depending on a UI element to get the height while the other option uses the String directly. Maybe your UITextView hasn't loaded it's content yet so you end up with an unexpected result.
I'm not sure how to do that. I'll give it a shot. Do you want to try too?
I tried changing the for loop but it still did the same thing. I have data source methods in an extension. Here is the full code for this view controller, maybe that will help. I probably should have posted everything in the beginning. &amp;#x200B; [https://gist.github.com/calebdane/c88024f525dc13ea8b360846008771bb](https://gist.github.com/calebdane/c88024f525dc13ea8b360846008771bb)
I’m able to make the animation only on a 1 dimensional plane by adding physics bodies to blue orbg/old coin nodes and adding a static edge-based floor. How is it done in a two dimensional plane with varying y positions?
Adding a native UISegmentControl might be a lot better in terms of UX and also save you time in terms of saving you code to implement segment controlliness on a UIView with 3 sections, also just a pro tip, use a UIPageViewController for the bottom view, please for the love of god don't use 3 random views lol
It’s illegal to do pro work on a non-pro computer. Tim Cook personally beheads the offenders. 🍎 🔪 🙅‍♀️
So...After watching your code. 2 recommendation: &amp;#x200B; 1) get rid of all of the beginUpdate / insertRows / EndUpdate. I don't know if it has any effect on the code but it can have a potential bad one since you are trying to do the job of the dataSource protocol. &amp;#x200B; so this: let new\_fermItem = "\\(fermAmountValue)" + " " + "\\(fermUnit)" + "." + " " + "\\(fermName)" should be on the cellforrowat: method. like that: `if tableView == fermTableView {` `let cell = tableView.dequeueReusableCell(withIdentifier: "UITableViewCell", for: indexPath)` // Don't know what's in your item here..but you get the idea `let item = self.fermItem[indexPath.item]` `cell.textLabel?.text = "\(fermAmountValue)" + " " + "\(fermUnit)" + "." + " " + "\(fermName)" return cell }` 2) Don't use indexpath.item . It is meant to be used with the CollectionView, not with the table view (tbh I don't know what's in there. But it could be your problem ). Use indexpath.row instead to get the index of your cell
Approximately 2% iOS10 and 5% iOS11. Thats a few hundred thousand users on old versions, so dropping them to make 30 developers lives easier is a hard sell. Burning a few extra developer months to support them makes sense. Generally the bigger the userbase the more incentive there is to support old versions. For a startup I'd do SwiftUI in a heartbeat. Also, SwiftUI wouldn't make our lives as much easier as it will yours. You've got a greenfield SwiftUI project, whereas we have a few hundred thousand lines of UIKit code, some of which is still obj-c that we have to maintain and extend. Even once we can use it, it'll be a while till were writing mostly SwiftUI
( and personnal advice: I strongly recommend you to organize your code :) everything on the viewController is not the better way to read your code :-) It won't stop it from working, but it is way better when you have some class for debugging )
I know, this is my first application and I am just kind of stumbling my way through it trying to get it to work.
We all have to start somewhere :-) Ah last one: Insert the method viewwillappear and make a tableview.reloaddata inside. So the table view know that he should take the data from data source. Let me know if it works ;)
Right... For sure. makes sense! My only problem now that I've realized it: this is more of a social app. I have no doubt my idea is great, but... how do you attract people to a platform that doesn't have anyone they can meet yet? What I'm most likely going to try to do, instead of getting investors involved, is to try to make this happen myself... Make a good app, get people on it, and then ramp up subscribers from there... and do all of that this year. So... I'm thinking that maybe for that reason, I should avoid swiftui there too, because getting people on the platform is super important to me.
&gt; I am the lead developer on the project with 7+ years of full stack iOS engineering experience and the graphic designer is an experienced designer working for a top firm here in NYC. &gt; Ability to meet in person from time to time in NYC would be great &gt; All rates are competitive — you do good work and it is our firm belief that you should be compensated comfortably for that work, I truly mean that. You can't find developers in *New York City*? Competitive pay, riiight.
Stationed in EU, would that be problem for you?
That's a much harder problem than any of the tech, and one I've consistently failed at on personal projects. I certainly wouldn't use a slower dev stack to try to pick up 7% of users. 7% of no users is no users. Your primary challenge is to get from no users to users, so trading 7% of no users to be able to experiment faster is a win.
Two of the other devs are already in NYC. Why limit it to just NYC though? Thanks for stopping by! 😂
Ahh. The main issue here is the timezone difference for me. We’d probably never get to talk and we have weekly client meetings that are non-optional unfortunately. Wish I could make it work, maybe on a future project!
Military?
Nah, I meant I live in EU. 😎
&gt;cell.textLabel?.text = "\\(fermAmountValue)" + " " + "\\(fermUnit)" + "." + " " + "\\(fermName)" I gave that all a try and I am still having the same issue. It is only showing the last item that was put into core data that fits the predicate I outlined. Could it be the way I am calling the retrieveData function?
Your question doesn't make any sense.
Did you participate?
Yes.
Can you show the last version of your code ?
Yes
SwiftUI has a minimum compatibility of iOS13. I’m afraid there’s no other way around it
Well... That's alot for someone who's new to swift. Given the amount of info you want to record and keep track of it will be a large project for someone who is new. Hope you aren't new to programming in general. If you want to collaborate and get some help DM me ill help you. I suggest start here: CoreData: [https://www.raywenderlich.com/7569-getting-started-with-core-data-tutorial](https://www.raywenderlich.com/7569-getting-started-with-core-data-tutorial) for saving all of the info youll track CollectionView: [https://www.raywenderlich.com/9334-uicollectionview-tutorial-getting-started](https://www.raywenderlich.com/9334-uicollectionview-tutorial-getting-started) for displaying info. But you can also use a Table view. There is alot to cover for that type of application. So maybe start there and also start with learning the syntax of the launguage. Good luck!
&gt; community agreed Haha.
Won’t work
What happens if you mark the preview type as only available on iOS 13?
Yes it's possible to add a UITableView to a xib. Can you give more info on your problem?
Yes, SwiftUI supports weak linking, and apps that weakly link SwiftUI can be deployed to devices &lt; iOS 13. In Build Phases &gt; Link Binary with Libraries, make sure SwiftUI.framework is set to Optional. The problem you're seeing with previews is probably an Xcode bug.
Yeah I’ll PM you a link to the github
Missing file: Build error: error: Build input file cannot be found: '/PeopleInSpace-master/astronauts/Subclasses/**PaddingLabel.swift**' &amp;#x200B; Looking forward to trying it though. Extraordinary file organization!
but swiftUI won’t work
It's another person who doesn't really know how to code. I'm running out of time for a hackathon. Please help me parse this JSON to a swift object. The first person to offer a working solution will be venmo'd a small sum of $4. Someone should make a service that allows people to venmo each other for those people who can't really code.
Find some interesting Github repos and contribute fixes or enhancements. You can use that to show potential employers what you can do.
&gt; astronnauts astronauts*
Click on the file and display the Assistant File Inspector (Command Option 1). Uncheck the Target Membership of the file to the `astronauts` target. The app will build and run.
Any repo in mind
What happens if you use the \`sizeToFit\` property of UILabel?
hi mistakenly deleted uilable subclass file. i'll fix it as of today.
i'll fix that thanks.
If you haven’t already, I’d check out the free one from Apple, “The Swift Programming Language.” You can find it in the books app on iOS or MacOS. It’s honestly a pretty good overview and reference for people who already know another language.
Use structs not classes, conform to codable, you’ll get serialization for free if the property names and types all match exactly (case sensitive). Compiler will tell you if anything doesn’t conform. If a property is named / spelled differently then you’ll also need to declare an enumeration of type string + CodingKey Good luck!
My goto books: "Code Complete" - Steve McConnell "Design Patterns" by the "gang of four" (E. Gamma et al.) "Data Structures and Algorithms in Java" - Goodrich and Tamassia Code Complete is a good reference in practical matters of programming, answering questions like whether or not "return early" is good practice. Design patterns are my favourite topic in software. Programming is all about patterns and IMO would be a much more appropriate topic for interviews, since most of what we all do is software construction. They're what make each language fascinating. That last one is a text book from Uni. I do like that it's in Java, I find it a reasonable language for the subject matter of data structures and algorithms.
I actually started that but It wasn't very in depth. At least the version I'm thinking of.
Just added a bunch of corrections for you! It's a good project.
Desire to use SwiftUI and properly support multiple windows is going to cause iOS 13 to be the minimum supported OS for apps far quicker than a new OS from previous years.
Thanks for your suggestions. try accomodate them as soon as possible.
Any repo in mind
Of you mean that you want to add custom settings in the Settings app, then yes you can do that. See here: https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/UserDefaults/Preferences/Preferences.html Note that you don’t just add a table view. There’s a different means to add items and it’s more restrictive. Read the docs for more info.
Yeah it’s more about just the core of the language and not all the libraries you’ll need to know to get much done. The WWDC site has some good info, but it’s mostly in videos recorded from the conference. They are transcribed, though, and cross reference each other. Some have resources associated, but not many.
This is very true - these should be language features, not compiler features.
The problem is that Xcode is injecting some extra code into the app which is not marked with @available attribute. This is what causes the build failure. Hopefully they will fix this, but until then, you need to change the deployment target for Debug configuration, or create another configuration just for previews.
Just add the attribute and a constructor (Xcode will tell you).
Did you make the assets yourself? They are nice!
no all this are royalty free assests from different websites including flaticon, pinintrest.
Doesn't an @EnvironmentObject allow you to accomplish this? [https://bit.ly/2LnpFC6](https://bit.ly/2LnpFC6)
for all colors and gradients credit goes to - https://github.com/iLeafSolutionsPvtLtd/GradientAnimator
I recently started to learn Swift through intro to develop app from Apple on iBook. Now I see that defining function is quite different from JavaScript, less simple which makes me feel like as if I were coding in C. (Not exactly same tho.). During the course, I saw I can omit typing everything when you pass argument. It seems convenient as I don't really have to write parameter every time, just need to remember order of arguments like JavaScript. What makes me curious is that, is there any kind of drawback if I use \_ instead of proper parameter?
If you got a fun idea and need help setting it up, i got some spare time to do some such. (Others are welcome too)
Nope.
Which is a nightmare.
thanks for your opinion, I'm going to consider it!
I guess it depends on how often do you need to debug on iOS &lt; 13. If not often then you can just manually change the deployment target when needed and then reset it afterwards.
Yup. Think of the date as an NSDate and a displayed formatted date. You'll want to be aware of NSLocale, NSDateFormatter, and time zones. I just posted this not too long ago. You might need it. `m/d/yyyy h:mm:ss:zzz a`. Also, make friends with https://nsdateformatter.com.
Then again, if it was that easy then Apple would have wrote it themselves probably.
Checkout https://hackingwithswift.com and https://www.raywenderlich.com. Lots of good swift reference books and videos there.
Sorry, I try to give a better explanation. When I add a UITableView to the XIB, I can‘t really edit static cells like on the Storyboard. I have fixed settings so I don‘t need any dynamic cells and it would be nice to configure and view the table using the Interface Builder.
Which country are you from? I’m from Australia, just applied DUNS number through a local government thing, free of charge but they got my name wrong :( You should try searching the duns number and see if it reflects the name propery
There doesn't seem like a lot on CodeTriage, but you might find something suitable... [https://www.codetriage.com/?language=Swift](https://www.codetriage.com/?language=Swift)
I can’t help you with the price because I don’t know anything about that. But... Wouldn’t it be better to find someone who knows how to code and who would be interested in starting the business with you? That way you don’t have to pay anyone and you have someone with technical knowledge on your side. Or try to learn to code yourself. It might take a bit longer but it’s also going to safe you a lot of money. It’s up to you off course, just thought it might be interesting to consider this.
Yes I have considered this haha! I am constantly on a search for someone to code it and willing to start business with me but it’s not that easy and I don’t think my business idea is for everyone!
Honestly take the estimated price and triple it to even get to half of what your imagination tells you its launch state will be, things will go wrong and if you havent managed an IT project before there are TONS of traps to fall into. Be very careful who you hire!
I'm not convinced if it makes sense to mark every single structure with one field named `value` as @propertyWrapper,.
Excellent, exactly what I was trying to achieve over the last few days. I've seen many tutorials and example code, none cover that particular aspect and it's essential for a real world application where data is not already baked in. You've filled in a vacum AFAIC. How about publishing on github?
You could try on: https://angel.co maybe? If you haven’t already. 😊
That d-u-n-s system seems ridiculous generally. It was very inaccurate.
It's hard to estimate the price, we would need better specification, but I would guess the app alone would be about 10-20k, depending on how big it would be. This is without backend, so for backend, it would be another 10-20k, maybe more, also depends on how many features you want. Then you need users to use it to cover the cost, so some budget for marketing. Don't know what you mean by international, but if it means in multiple languages, then you would need budget for translations. By having backend, you would need to pay monthly fee for servers, depending how big the user base would be. And when you publish an app, you still need updates so the app stays relevant, so this as another spending. So at the end yes, the app alone could be 10k, but everything around it will cost you a lot more.
Thanks for the appreciation! Yeah I'll gladly publish it on github. I'm still doubting about the name `Observable`. I'm not sure if that's the clearest and most accurate name for it. I'm also considering `Reference`. Are you willing to share what you think would be the best name for it?
Dont invest any money you are not expecting to lose
You don't want to crop the pics into a circle, you want to crop them into a square. Then you can put them in views with masks or rounded corners. If an image is 40 pixels tall, and you round the corners 20px, you get a circle btw. I would highly recommend Mark Moeyken's IBDesignables for this purpose. We use it the included classes all over our app. [https://github.com/bigmountainstudio/DesignableX](https://github.com/bigmountainstudio/DesignableX)
Thanks I’ll check it out !
No, looks like view controllers are out. Haven’t seen any mention of them. Your question is a good one. It seems they expect controller logic to be in functions inside views and model-specific logic in the model. The views in SwiftUI are more like controllers than views as the actual views are still rendered by the standard UIKit/AppKit/etc classes.
This
Its still in beta, don't know why people don't get this. Most beta's run to nr 6 - 8. We're in beta 2. that means a lot a progress is yet to be made till September/October.
In my opinion storyboard is easier for beginners when using simple layouts, as you can directly see what you are building and you can focus on your functionality instead of layout. It lets you get a running build fast to start testing your app. &amp;#x200B; programmatically creating the layout might become easier when you are in need of more complex views and constraints possibly even for multiple different devices. &amp;#x200B; also as beginner using storyboard will make it easy to try out different UI elements and how they might interact with each other.
This just seems hackish to me, you're adding another layer and potential clutter to seemingly pretend to avoid writing code in the property accessor methods even though that's exactly what you're doing. The accessor methods aren't called during initialization, but I would call that more an optimization rather than deficiency. If you need to do validation during initialization, there is nothing stopping you from calling any common validation function you need. &amp;#x200B; &gt;Properties can’t be marked as throws From the article, the above quote is the real issue that still should be addressed by Swift and is the root cause for a lot of "interesting" wrapper code being written. I would also argue the "try" keyword abstractly makes sense, but in practice is a superfluous keyword that could (should) be dropped as the compiler doesn't seem to need it and removing it would make for cleaner code.
update github to latest working build with along with improvments as suggested
no.
Swift allows you to use two names for a function parameter, the first is the external name that is used when calling the function, the second is the internal name that is used inside the function. In the example “at” would be the external name and “position” would be the internal name. If you only specify one name then it is used as the internal and external name. The advantage of this is that it allows both the function deceleration as well as the function call to read like English. An example of a common API that uses this is “cell(for row: Int, at indexPath: IndexPath)”
So when using the _, what you are doing is saying that you don’t want an external name, but obviously still want an internal name. There is nothing special about the word “at”, any other non keyword could be used in order to make the function read more like English.
This. For more info about [Argument Labels](https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID166)
I see, so it just makes it more readable. Could you run the same functions without using any external names at all? Including \_? Or is there ever a case where there HAS to be an external name?
When calling a function you have to use the external name assuming one exists, however when declaring function nothing forces you to specify an external name, however it is recommended.
Got it. Thanks so much for the explanation!
Right, I always go the extra mile to make sure my code reads like English. This really helps with it.
Great library, very unique idea. :) Good Luck!
`try` isn't superfluous, it's specifically required to indicated to reader and writes of the code that an error may be thrown from that specific location. I'm not sure how a feature designed to removed the current internal wrapper / external property hack could, itself, be described as hackish.
If you want it, just wrap it using `NSViewConvertible`.
Have you tried using .givenName
I appreciate that it's an example but Trimmed seems extremely misleading. I suggest a Trimming protocol with trim() and trimmed() methods to produce something at least syntactically similar to the convention used for sort() and sorted().
This solved everything! May I ask what’s the actual difference then? Thank you very much!
It's a generic property with implicit specialization via the initializer, but for this purpose I think conforming to RawRepresentable probably makes more sense.
Basically .name is your entire name, .givenName is the name your given at birth, not called first name since in some cultures it’s normal for the family name to come first. Same thing with the family name.
Thank you very much! &lt;3
[https://docs.vapor.codes/3.0/getting-started/structure/#controllers](https://docs.vapor.codes/3.0/getting-started/structure/#controllers) &amp;#x200B; &gt;Vapor supports, but does not enforce the MVC pattern
That doesn't make it an MVC framework.
Upwork?
Could you explain in more detail what you’re trying to achieve?
Yeah I kind of explained it poorly. And I now realized how to do it, get the middle Element index then add or subtract the amount you want either direction. I was overthinking it heh.
It is a reasonable set of APIs. Missing a lot of things, with a lot of bugs, as usual with Apple APIs.
You may need to use AppKit for your toolbar at the moment. You could probably achieve it with selectors, and an extension on `Command`. Look at [this video](https://developer.apple.com/videos/play/wwdc2019/240/) on how they implement keyboard shortcuts using SwiftUI, and you could probably do the same thing with the toolbar if you created it in interface builder.
Thank you !!
&gt;try isn't superfluous, it's specifically required to indicated to reader and writes of the code that an error may be thrown from that specific location. Yes, it is. It doesn't tell the compiler anything that it didn't already know. The compiler already knows whether or not an error can be thrown and whether or not you've appropriately accounted for that fact. The variants "try?" and "try!" do serve a purpose as you're indicating to the compiler you want an alternative behavior from the default behavior. You could argue by forcing one developer to use the "try" keyword makes it easier for another developer to understand unfamiliar code faster, but I'd argue code with less clutter is preferable. &amp;#x200B; &gt;I'm not sure how a feature designed to removed the current internal wrapper / external property hack could, itself, be described as hackish. It's not removing anything, it's just changing how and where it's done. Even the article essentially comes to the same conclusion that it's just another added layer / complication. What I am contending and the article somewhat states is that it's to get around (hackish) other more basic deficiencies. The article mentioning specifically that property accessors cannot throw an error, which I agree with, and the other I would argue is implementing a custom type could be a bit more streamlined.
Work with older version. Should not be the problem
Make it into a hackintosh, this may help https://youtu.be/ZLVvP3WCCI0
Here's my game made with SpriteKit: [https://apps.apple.com/us/app/drawn-down/id1434188115](https://apps.apple.com/us/app/drawn-down/id1434188115) &amp;#x200B; I recently ported it to Unity so I could release on Windows. I love SpriteKit, I much prefer coding to using something like Unity, but I also want cross platform. But Unity is also outstanding. If I was to make an iOS only game I'd use SpriteKit, but if not then Unity.
it is if you was to work on repos and it need 10.2 xcode or using the Swift UI....do you know how to work around that???
Eight years is a long time for a computer.
Very nice work than you!
Linux Mint. Tho I will lament having to disable the discrete GPU when I do this.
Do you trust overseas developers? I have heard such mixed reviews. The other problem with that is I would need someone to constantly be updating the app so having a partner would be the better option. Ideally looking for another recent college grad that would be interested in partnering or helping. I cannot find a platform that can put me in touch with anyone like that. Thoughts?
&gt; Yes, it is. It doesn't tell the compiler anything that it didn't already know. You don't write code for the compiler. You write code to be read by humans. You should familiarize yourself with the original design goals for Swift's error handling.
I’ve been waiting for years to have my Macbook stop updating! I can’t stand it. Every update makes it slower and slower. Lucky. That’s what you are
Your local Swift/iOS developer meetup might be a better alternative
Good work. Will download it today.
Buy a used Mac? You don't have to upgrade all the way to a 2019 MBP. It's almost certainly cheaper to buy, say, a 2015 or 2016 model, even accounting for shorter lifespan of than computer from now until it too can't run the latest software. What *is* your budget for computer upgrades? Something around $1000 every 4 years is probably to be expected.
Check this out: http://dosdude1.com/mojave/
&gt;You don't write code for the compiler. You write code to be read by humans. You write code to perform a task, with the target audience being the compiler that in turn tells the silicon what you want it to do. Code maintainability by others isn't about talking to them like they've never seen code before, its about keeping it clean and organized. This is like the old argument of do you comment code stating what you are doing or why you are doing something. &amp;#x200B; The try keyword isn't annoying on an occasional function call such as: let result = try myFunction( parm1: "Hello", parm2: "Swift" ) &amp;#x200B; However, when doing some more laborious work like coding a decoder it gets downright annoying. let container = try decoder.container(keyedBy: CodingKeys.self) self.accountID = try container.decode(UInt64.self, forKey: .accountID) self.firstName = try container.decode(String.self, forKey: .firstName) self.lastName = try container.decode(String.self, forKey: .lastName) &lt;...&gt; self.field42 = try container.decode(Boolean.self, forKey: .field42) &amp;#x200B; In both cases, it doesn't tell the compiler anything that it doesn't already know and it provides minimal value to any developer looking at that code. &amp;#x200B; &gt;You should familiarize yourself with the original design goals for Swift's error handling. Instead of being cheeky, if there is a point you are wanting to make, perhaps it would be simpler to just make it. &amp;#x200B; &gt;The article, like you, is wrong. That is your, opinion. &amp;#x200B; &gt;And it's a bizarre way to make a case that a feature is too complex by demonstrating a variety of features made simpler use by the feature. Wrappers *are* custom types, Neither I nor the article I believe are stating its "too complex", but rather that it adds complexity and both in our own way are questioning the value in adding the additional layer / complexity.
Apple considers it obsolete. Meaning they won’t service it. Not even the battery. My 2011 was running like a beast up until November when the graphics card finally gave out again and now the replacement program for that is over, so I just got a new system. With max ram and an SSD, those machines can still kick some ass.
Doing that never occurred to me...
Yeah my 2011 still runs great. I had the mainboard replaced when the GPU died (it was one of the batches with bad GPU. Was out of warranty but they replaced it due to the defect. The fixed up some other things while they were at it for free as well.) I really wish Apple would stop being such dicks about upgrading the HDD/Ram ourselves. I don't want a paper thin laptop that I can't do anything with.
It wasn’t bad batches. The entire design of that motherboard was flawed and the replacements had the same defect. Part of the problem was shitty thermal paste on the GPU. It would get too hot and desolder itself. As far as non swappable components, Apple is just ahead of an inevitable curve. You point has logic but computer hardware is changing. The fact that even without those upgrades, our 2011s would still be running decently right now, is indicating that a. Apple makes a quality product (sorry pcmasterrace kids, they’ve proven this to me for 15 years straight.) and b. The rate at which computer performance is multiplying has slowed way down.
The Apple IIe was sold for over a decade. They *ought* to last even longer now, as Moore's curve has flattened out. There are 10 year old processors which are running current macOS just fine, and the cutoff for Mojave was not even based on CPU.
&gt; You don't write code for the compiler. You write code to be read by humans. Please, anyone, show me *one* Swift program that was designed primarily to "to be read by humans". If it exists, I have yet to see it. I know the Abelson quote well, but it was obviously not the primary design goal of Swift. There's huge areas of the language which are completely unlike any other language, and have no purpose except for machine performance. The error-handling system is a great example of this. I don't know if you're referring to anything specific by "the original design goals", as most of us weren't at Apple on the early Swift team, but the Swift manual today specifically compares errors to exceptions, and declares performance to be the main difference: &gt; error handling in Swift does not involve unwinding the call stack, a process that can be computationally expensive Exceptions are strictly more powerful (and conditions more powerful still), but have a higher runtime cost. &gt; to make them simpler to use, not correct for any deficiency in the language (unless the lack of extensibility is actively deficient) In a general purpose programming language, I would say lack of extensibility is absolutely a deficiency, and if there were a trial then I'd submit GYB as Exhibit 1. We're past version 5 and Apple is still adding tiny pieces of extensibility to the language, by means of even more complex syntax, and this extensibility is still not good enough for even writing its own standard library. Every programming language follows one route: 1. built-in compile-time extensibility (like integrated macros) 2. add-on compile-time extensibility (like Sourcery or GYB) 3. run-time extensibility (like metaprogramming in many popular dynamic languages) 4. no extensibility (because the language isn't popular enough for anyone to bother) Apple has been pretty dead set against #3 all along, and they're dragging their heels as hard as they can on #1. People who care (including Apple themselves) seem to be going with #2. I have not seen this approach end well in the past. It reminds me of Ada: another decent enough language that tried to solve every problem with more types.
Thank you. This is very clear.
Edit: &gt; community Haha
Not really, AMD just changed the game recently.
10k USD or another currency? It sounds like it would take about a year to design and develop this app and taking payments will increase costs and security risks. If you are talking about USD seems like this is very cheap considering amount of time it would take to build something good and successful.
Using semaphores to make asynchronous APIs behave like synchronous ones can cause significant performance problems. The kernel needs to be able to notice if there's high-QoS work waiting behind enqueued low-QoS items, because it needs to boost the priority of everything in front of the high-QoS item. Semaphores don't have the concept of an owner, so they can't support this kind of priority inversion avoidance. DispatchSemaphore is kind of like a recursive lock – you might end up adding one to your code if you've painted yourself into a corner and need an escape hatch to make it work. But you really, *really* don't want to intentionally architect your code around this behavior.
Beta, not alpha or earlier. So no, it’s not likely to change much until next release.
This is what I do. I also enforce that deinit (if required) is directly below the initializers. Lots of people want to put them at the bottom for some reason...
So each (decimal) digit is stored as an int. Meaning to store the maximum value an int can normally store, it takes 64 times as much memory, not to mention arithmetic performance. As a next step, consider how you might make it a little more efficient.
&gt;However, when doing some more laborious work like coding a decoder it gets downright annoying. Agreed, but that's not the only repetitive thing about that code. I consider that a flaw of `Codable`, not of the `try` keyword.
I don't disagree with that, its just the first example that I thought of where its more glaring that involved property accessors and a pattern people might be familiar with.
Yes, I chose to represent the number as an array. Mainly because I was under the impression that is how Python represents their long types (please correct if I'm mistaken, I'm not completely sure). I figured it sounded like a good idea, so I gave it a shot. The arithmetic obviously needs work (everything does, it's still in VERY early stages), but it isn't terribly slow. Have you tried running it and trying some basic operations? I obviously don't have everything implemented yet but the addition, subtraction, and multiplication are relatively fast. Power still needs a lot of work (especially since I only have capability to do integer powers). I'm going to be changing the factorial algorithm sometime soon. &amp;#x200B; Again, I'm not claiming that I have this anywhere remotely close to a finished product. I could very well go down a different route, especially if you (or anyone) has any great ideas.
Most big int implementations are internally represented as some sort of list of ints, that’s correct. However, they make use of more than 4 bits in each 64 bit wide integer. Effectively, if the backing array has two ints in it a typical big int could hold a 128 bit signed number with a value of up to 170,141,183,460,469,231,731,687,303,715,884,105,727, yours could hold a a value no larger than 99 with the same amount of memory.
Animations are mostly useless distracting fluff.
Where is the error showing up. Console? Specific line? What point? Do you have a breakpoint?
They’re a massive part of the user experience. Animations aren’t always big and flashy. Subtle animations are the top of the instant feedback to a users actions not just star wipes between Views
The [UserDefaults documentation](https://developer.apple.com/documentation/foundation/userdefaults) says "A default object must be a property list—that is, an instance of (or for collections, a combination of instances of) NSData, NSString, NSNumber, NSDate, NSArray, or NSDictionary." By what means are you converting this struct into one of those types?
And they will last. But that doesn’t mean Apple needs to keep writing software to work with old hardware.
I don’t know if you know how these things go over at Apple but before alpha is just an idea on a paper with a few people assigned to it that are supposed to make it a real thing, Alpha is just making the basis done, which means in this case: porting all ui elements and making it in swift. Beta in this case means just making the thing release ready. So all ui/ns elements are probably going to be added and they are, in beta 2 there were some elements added. We have still months so don’t bitch about it after the beta.
I've been thinking about ObjectWrapper. It has some resemblance to propertyWrapper and ObjectBinding. &amp;#x200B; I've embedded your class in my own application and it works marvelously. I've created a typealias to simplify the syntax a bit, but it still not as clean and simple as $ for object bindings.
Hmm, well ObjectWrapper can be confusing, because you're not wrapping an object. Instead you're turning a value type into an object. So how about Objectify? What type alias did you use?
I am interested. Based in Silicon Valley, and have several apps on the App Store. DM for details.
Jesus christ, no way I'm going to read that. Way to many typealiases.
I faced upon this problem last week and I concluded to create a custom TextField by exploiting UITextField and UIViewRepresentable in order to gain smart focus feature. You can read more about that here: [https://sofapps.it/en/swiftuiframeworkprogramming-6.html](https://sofapps.it/en/swiftuiframeworkprogramming-6.html) &amp;#x200B; Hope could help you! Best.
I would change the internal storage t UInt as youre already storing a boolean for when the Long is negative. That combined with using all 64 bits of an int should win you quite some memory!
To me, it looks like Observalue&lt;Value&gt; has a slot value which makes it a wrapper. Here is the typedef I've used: `typedef UserWrapper as Observable&lt;Value&gt;`
great idea! Thank you!
you need a backend to store the data (firebase), you need an API to access (read/write) that database, your App just needs to send API requests (http/https requests), you may want to include authentification at least for writing access. &amp;#x200B; Might be a bit to much to explain everything in a comment and I might not be the right person to do that, but to get you into the right direction search for (REST-)API, JSON, NSURLSession or a framework like Alamofire. &amp;#x200B; you can test your backend and API calls with a tool like Postman before implementing them in your App. before setting up your own backend you can use some public REST APIs to learn their usage with Postman.
oh I see what you're saying. That's not a bad idea at all. Question: do you think I should switch to a double linked list instead of an array?
The post clearly says to email your resume.
You shouldn’t crop to circles you should just be making the image views circle, as stated in your last post
I also applied for the 2019/2020 program in Napoli and will have the first test soon. I studied business informatics, bachelor and masters but do not have much experience with Swift. Do you remember if knowing the Swift syntax is important of should I be well prepared through University?
Weirdly had the same issue last night. Go to your target, click general, and make sure the product name is there. If it looks greyed out, it’s actually blank. Click the name and fill it back in. This happened to me because I added a script to auto-increment the build version number, which somehow deleted the product name,
Is that script to auto-increment the build version number your own private code or is it open source on the web somewhere? :-)
I couldn't get that method to work, so I moved on. I'll revisit and try it again.
I found it on a medium post by googling, but it didn’t work for my watch target, notification extension, and I didn’t have time or energy to debug so I ended up removing it.
You can use the InfoPlist.strings files to give your app different names in different languages. just put the CFBundleDisplayName = "Your Name Here"; in the InfoPlist.string in each language directory. If the name is in the InfoPlist.strings file, it doesn't need to be in the Info.plist. The same goes for permission strings.
Check out `agvtool next-version`. https://developer.apple.com/library/archive/qa/qa1827/_index.html
It solved the problem thanks
Rather than using compactMap, use a for loop with a var that holds the sum of the lengths of the components seen so far.
Or you could just use Core Data and CloudKit and save yourself the hassle and expense of Firebase.
Thanks! I'll have a look at it.
There’s a few problems with the Apple SwiftUI tutorials. I ran into 2 of them doing the Landmark series. I solved them by going to Stack Overflow. People there are raising questions and posting fixes; it really helped me. Make sure you take a look there, too.
I'll take a stab at it there. What were the 2 problems you ran into?
This. Based on the contextual info, I say use one of these. If for no other reason then learning the concepts for the native frameworks. Then maybe branch out to firestore if you need it.
I also found a bug in GameKit (in procedural texturing by Perlin Ridged Noise) since iOS 10+, but my reddit post is not shown, may be anyone can help me. There is a gist with MacOS Playground Swift code here: [https://gist.github.com/menangen/55f291f2c55fbe8661e7d642a248e895](https://gist.github.com/menangen/55f291f2c55fbe8661e7d642a248e895) &amp;#x200B; And my post is here: [https://www.reddit.com/r/swift/comments/c63oz0/please\_confirm\_gameplaykit\_bug\_in\_procedural/](https://www.reddit.com/r/swift/comments/c63oz0/please_confirm_gameplaykit_bug_in_procedural/)
`UIViewRepresentable` has an associated type `Coordinator`, which is `Void` by default. You can implement a custom class, which implements your delegate and data source protocols. Then in your `UIViewRepresentable` type, you have to override the `makeCoordinator()` method to return an instance of your custom coordinator class. You can pass the `UIViewRepresentable` to the coordinator if you want to update bindings and and state properties. In the methods `makeUIView(context: Context)` and `updateUIView(context: Context)` methods, you can then access the coordinator using `context.coordinator` and set the delegate of the table view to it.
I had the same issue today, seeing the other reply saying it started today, is telling me that either Xcode or Apple is bundling or checking these apps differently
Subscript of string is slow, that's why it's not in the standard library, iterating over the characters is faster. You will crash if the string is invalid or even if it contains decimal or thousands separators. It doesn't support common stuff like starting with "0x" for hexadecimal values.
Thank you so much! It helped a lot!
Thanks a lot!
No, why would you do that? It'll waste an extra 2 words of pointers per word of data, and blow out your cache. This isn't even a situation where you'll ever need to insert or remove elements from the middle.
If you’re going to post about creating UI stuff, please include pictures or even gifs showing what your making.
I actually do know and have known for a long time. Your understanding of software development is not very deep. Porting all UI elements? SwiftUI just uses UIKit under the hood. Making it in Swift? What does that mean? Beta actually means mostly feature complete, but changes do sometimes make it in last minutes when necessary. In any case, my original post is correct.
Firebase or firestore are good options and their documentation is pretty easy to follow along with a lot of great YouTube or blog tutorials. Pretty much you’ll have to install the cocoa pod for it and set up and account. But with firebase the nice thing is that the API is written and makes it pretty easy to integrate in your app. There’s definitely other routes to go about this, but imo firebase is generally a pretty decent place to start. You’ll just probably want to a bit of research on NoSQL database structure before going into it.
Wow, that's some pretty thorough blogging right there.
&gt; add up each characters ASCII values. And then.. &gt; for ascii in name.utf8 Well, UTF-8 is not the same as ASCII. In fact, UTF-8 is a Unicode encoding that is a superset of ASCII.
Not to mention the build process is insane. I have worked on several project that took days just to get the fucker to run on my machine
Yeah i think so as i the build before this one uploaded successfully and it didn't have CFBundleName key in it's info.plist file
Try making a plugin. Cordova is hell, they break the API all the time. Plugins are just piles of hacks because the API sucks and you're mostly on your own to try to integrate with the native code. Anybody betting on cordova for a project is in for a world of pain. The build process is getting more complicated every day
I'd avoid alamofire as its not necessary anymore. Just use URLSESSION
Why in the world would you use Cordova? Try React Native, Flutter or Xamarin.
If you make an iOS app with zero animations, users will complain. It's not a natural experience.
I wasn't saying that I would. I was trying to clarify /u/username_suggestion4 when they said "Most big int implementations are internally represented as some sort of list of ints..." I'm pretty sure they said "list" in the more general sense rather than an actual linked list, but I just wanted to clarify.
Is this because the way I'm indexing it basically makes it start all the way back at the beginning of the String each time? I'll definitely look into adapting it to use String.index instead of my makeshift way. Thank you!
 [https://medium.com/@tonyallevato/strings-characters-and-performance-in-swift-a-deep-dive-b7b5bde58d53](https://medium.com/@tonyallevato/strings-characters-and-performance-in-swift-a-deep-dive-b7b5bde58d53)
&gt; Please, anyone, show me one Swift program that was designed primarily to "to be read by humans". If it exists, I have yet to see it. Almost every single one. You could easily write your program in one giant file with one method, and the compiler would be just as happy. You don't; you break it into files and functions and classes so that other people, including yourself in the future, can read and change it.
I’ll check it out. Thanks.
awesome! Thanks for the link.
But then you have the hassle Core Data...
The basic idea of what you need to do is have a part of your database called Quizzes which all teachers can listen to. Look up listeners in firebase. The basic idea of a listener is that instead of seeing what quizzes are available once a listener will get the data once and will be notified whenever the data changes, you can listen for specific changes(add, remove, changed) or all of them. What this allows you to do is have a teacher creat a quiz and add it to your quizzes collection, any other teacher should have a listener attached to that collection and will get it updated in realtime when a new quiz appears. You just have to handle what happens when they do.
Can’t you use firebase for everything in this app?
You got a downvote from someone, but I honestly thought Cordova died years ago.
What is a hassle and a major waste of time is writing a data access layer to SQLite. Glad those days are over.
It’s actually very easy to wrap a website in Swift. But the App Store has had a long-standing policy of rejecting apps that are simply wrappers for websites. So if this is for something you want to publish, you’d need to add some significant additional functionality that can’t be done just through a browser.
Yes... it would have been a major waste of time for me to write a persistence framework... 😳 https://github.com/SleekDiamond41/CodableData Shameless brag: it requires almost no boilerplate code, generates/updates data tables automatically, handles mutlithreading natively, and has a catchy name. There are still a couple tweaks I want to make and completely rewrite the README, but it all works! 🎉
I mean I personally vastly prefer Swift over other options but doing cross platform may be a sensible business decision.
This is certainly true. Strange for the OP to ask the question in the Swift subreddit, though.
I don’t see how it handles relationships?
It doesn’t 😔 I’m working on a solution for that, but for now it’s just the old-fashioned solution: ``` struct Person { private var addressID: UUID var address: Address? { get { return db.get(Address.self, id: addressID) } set { addressID = newValue.id } } } ``` To be clear this framework is just a proof of concept and a fun side project. Everybody should stick with the established frameworks for data persistence in production apps
Looks like you’re using the first Xcode 11 beta; switch to beta 2 to get an updated version of the SwiftUI framework. The PresentationButton initializer changed in beta 2 and the tutorials were updated to match.
Ahhh such a simple fix, Alright i’ll try that once I get a chance. Thanks for the response.
Good idea, thanks for the feedback!
I'm a bit confused what I would do with the sum of the lengths... Are you able to give me a quick example possibly?
&gt;I can't figure out how to get the MenuBar to talk to the view controller so that the map refreshes. Where exactly are you stuck? Have you gotten to the point where you can detect when the user has clicked on an item in the MenuBar? If not, [then you need to set the viewController as the UICollectionViewDelegate of the MenuBar](https://developer.apple.com/documentation/uikit/uicollectionviewdelegate) Once you have that working, then next figure out how to get the GMSMapView to refresh the markers - I'm not too familiar with that off the top of my head but if you can't figure it out let me know. Hope that helps!
&gt;I wanted to start off by saying that I have no idea if this is the right place for questions like this I almost always find answers to my questions using google, and 95% of the time find the answer on stackoverflow, or if it's for a specific API then on github issues or a more specific forum. I'm not sure how often people answer questions on here, but I'm in the mood to help out! It seems odd to me that there would be a GET request for current download speed, but you could definitely try doing it second or so and seeing how well that works. What are you using to download the files? I'd probably just use URLSessionDownloadDelegate and calculate it myself in the progress update method. [https://developer.apple.com/documentation/foundation/urlsessiondownloaddelegate](https://developer.apple.com/documentation/foundation/urlsessiondownloaddelegate)
As far as I know the only drawback is less code clarity. Often times the most difficult part of working on a project is understanding the code that's already there, so every little thing you can do to make that easier helps. Even if it's a project you wrote from scratch, you'll be surprised at how much of it you'll forget about 6 months later.
Probably just reading Apple's documentation will be best for you: [https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html) That or just looking at a cheatsheet and figuring things out as you go: [https://www.raywenderlich.com/2381-swift-4-cheat-sheet-and-quick-reference](https://www.raywenderlich.com/2381-swift-4-cheat-sheet-and-quick-reference)
Ran into it last night, my client was real a happy about it :/ Good thing it didn’t take too long to fix
Yeah this is my first time posting to this subreddit with questions and it was purely due to not even knowing where to begin on what to search for. The download portion of this app will really be more of a GUI for Transmissions web app. Their API documentation does go into a few different requests to make to get/retrieve that information but I still need to dive a bit deeper into it I’m sure. As far as the URLSessionDowloadDelegate is concerned since the app itself is not doing the downloads I am not thinking that would be the right path to take. Obviously I’m not expecting specific answers for things but even just being pointed in the right direction of things to look at/for is more than enough help :)
Ah, I see, now it makes sense why it'd be a GET call. If the app isn't doing the downloading then I'd imagine that's your only option. Sounds like you're on the right track!
^i will fix the indentation of the code that is currently selected.
Awesome glad to hear my only thought was in the correct direction. Is there usually a limit or threshold I should be aware of on how many/often I can make HTTP requests?
Hey, thanks for the response! So the MenuBar class inherits UIView, UICollectionViewDelegate, UICollectionViewDataSource and UICollectionViewDelegateFlowLayout. This class has a member item like this: lazy var collectionView: UICollectionView = { let layout = UICollectionViewFlowLayout() let cv = UICollectionView(frame: .zero, collectionViewLayout: layout) cv.backgroundColor = UIColor.clear cv.dataSource = self cv.delegate = self return cv { It also contains the function you listed: collectionView(UICollectionView, didSelectItemAt: IndexPath) , where I have it printing out it's index path (0-2) to test that it works, which it does. &amp;#x200B; Now, in the MapViewController class: let menuBar: MenuBar = { let mb = MenuBar() return mb }() private func setupMenuBar() { view.addSubview(menuBar) // some constraints added here } \^ This function is called in ViewDidLoad. Now, in MapViewController class I have also added a GMSMapView setup: func setupMapView() { let camera = GMSCameraPosition.camera(withLatitude: -33.8683, longitude: 151.2086, zoom: 16) let mapView = GMSMapView.map(withFrame: self.view.bounds, camera: camera) // other irrelevant code here view.addSubview(mapView) // some constraints added here } &amp;#x200B; I know how to refresh the markers, I have functions setup that first clear the markers off the map and then draw new ones according to which function is called (drawNearbyBars(), drawNearbyNightClubs(), drawAll()). I'm trying to work out how to call these functions when the selection changes in the MenuBar which will essentially refresh the map. Does this make more sense?
I have. Even too much of Apple's UI has animations that are counterintuitive to a responsive and informative design.
I'm not sure - there used to be a limit on how many simultaneous URLSessions you could have at a time, but I don't even see a limit for that anymore, so probably not. The API may set a limit however, you'll have to check their documentation.
&gt;Hey, thanks for the response! No prob! &amp;#x200B; &gt;I know how to refresh the markers, I have functions setup that first clear the markers off the map and then draw new ones according to which function is called (drawNearbyBars(), drawNearbyNightClubs(), drawAll()). I'm trying to work out how to call these functions when the selection changes in the MenuBar which will essentially refresh the map. &gt; &gt;Does this make more sense? &amp;#x200B; Yeah. So my first suggestion was for you to to make the MapViewController the delegate of the collectionview - that's because I was assuming that your MenuBar WAS a collection view. However, your MenuBar is just a subclass of UIView which contains a collectionView. So essentially your question is - how do I send a message from MenuBar to its parent view. &amp;#x200B; The easiest way to connect those two at this point is to [make a custom protocol.](https://docs.swift.org/swift-book/LanguageGuide/Protocols.html) UICollectionViewDelegate is a good example of a protocol. MenuBar is a View which inherits the UICollectionViewDelegate, which is why it's able to override that didSelectItem method. Basically the way it works, is that collectionView actually holds a reference to your menu bar class, and that gives it the ability to call that didSelectitem method. &amp;#x200B; So you can just do the same thing. Go to the top of the MenuBar class, and declare the protocol above the MenuBar class declaration, like this: protocol MenuBarListener: class { func didSelectMenuOption(option: Int) } class MenuBar: UIView, UICollectionViewDelegate, etc { } You also could put that protocol in a different file if you wanted to, it doesn't make a difference since it's basically in the global scope. I like to keep my protocols in the same file as the class that's using it though. Now, have MenuBar hold an optional reference to an instance of the protocol, like this: &amp;#x200B; class MenuBar: UIView, UICollectionViewDelegate, etc { weak var delegate: MenuBarListener? } Now, in your ViewController, have it inherit from MenuBarListener, just like the way MenuBar inherits from UICollectionViewDelegate, and override that didSelectMenuOption function we declared in the protocol. Don't forget: you also need to assign the ViewController to that delegate variable - so in viewDidLoad assign it like this: menuBar.delegate = self &amp;#x200B; Now, MenuBar has a reference to the viewController, and in that didSelectItemAt method, you can call: delegate?.didSelectMenuOption(indexPath.row) &amp;#x200B; If you REALLY wanted to be dirty you could just make a variable in the MenuBar called var viewController: MapViewController and then make calls to the ViewController that way. The problem with that is it creates what's called a retain cycle - basically MenuBar has a "strong" reference to ViewController, and ViewController has a strong reference to MenuBar - that means that they will both stay in memory forever, even if you want the view controller to die. That's what a memory leak is. That's why we made the MenuBarListener a "weak var" - that's only a "weak" reference, and so if the system wants to kill the view controller for any reason, it'll be able to. &amp;#x200B; Hope that all makes sense! I didn't intend to give a whole lecture but I got a little bit carried away. Let me know if you have any questions.
Take a look at: [https://github.com/realm/SwiftLint](https://github.com/realm/SwiftLint)
It works! Thank you very much, you managed to teach me more in one comment than I've learned in a week of my own research. I really appreciate it!
You're welcome, I'm glad it helped. It was actually pretty fun - feel free to DM me if you need any help in the future.
It depends on the API you are calling. It may require firing off GETs every few seconds, yes. It's not as bad as it sounds because NSURLSession will keep the connection open for a certain period of time, so while there is some overhead, it's not horrible. I would probably update it every few seconds rather than multiple times a second. &amp;#x200B; HTTP 2.0 supports multiplexing, so if the server supports it, your GET request won't have to wait in line for an outstanding download before succeeding. Or you can create two separate connections, one for downloads and one for status.
SwiftFormat is another option too https://github.com/nicklockwood/SwiftFormat
Yes you can.
Here [https://github.com/Jintin/Swimat](https://github.com/Jintin/Swimat) Unfortunately, iOS community is not lucky with the formatting of the code, Swimat is a stable, but can not format lines over than 1-2k in current file. If u interesting about objc - find ZZXCodeFormat, but this is replaces all code when formatting and moves cursor in the end of the file, this is not comfortable. (Came from jetbrains IDE) It surprises me, after about 10 years, no one has written an extension for objc a beautifully formating, like auto-inserted ; @ etc. &amp;#x200B; I wrote my own objc formatter based on Swimat, but by my mistake I deleted all the code, but the plugin (with some bugs I suppose) still remained and I used it. Decompiling doesn't work, and I don't want to write the code again.
There's a comparison of some of the most popular ones on [NSHipster - Swift Code Formatters](https://nshipster.com/swift-format/)
You could create a function for both implementations
You can use the defer statement. https://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_defer-statement
That won’t have the same effect. Defer will run synchronously as the function exits, and he wants to call the completion when the http call finishes.
I meant to put both the first check and the defer onside the request block. This is also why I noted that the completion should be marked as @escaping
I see. I don’t think that will accomplish what the OP wants though, because he’d still need 3 defer statements (1 for the precondition exit, 1 for success block and 1 for failure block)
Why does your HTTP function have two closures? Why not use `Result`? Also, check your data before hand or pass it through to the http method. You don’t really need to call completion in three places if each function has a single responsibility
func request(completion: @escaping ()-&gt;()) { httpRequest { defer { completion() } //do all checks and execute cool stuff } }
 func foo(completion: @escaping() -&gt;()) { request { result in defer { completion() } //Do stuff based on result success or failure } }
Use a promise. ``` func foo() -&gt; Promise&lt;Void&gt; { guard checkSomeThings else { return Promise&lt;Void&gt;(value: ()) } return makeAnHttpRequest() .then( { /* Lets do some stuff on success (automatically routed to the main thread) */ }, { error in /* log error */ } ) } func makeAnHttpRequest() -&gt; Promise&lt;Void&gt; { return Promise(work: { (success, failure) in makeAnHttpRequest(success: { success(()) }, failure: failure) }) } ``` A very simple library can be found here: https://github.com/khanlou/Promise I used it for the above. You can install it using Cocoapods if you want, but it's only two files (and one of those is optional) so you can just drag them into your project if you would rather. A more complex (but more popular) library is here: https://github.com/mxcl/PromiseKit
I see the code as quite clear. The only thing is that completion() should return error and result to actually know why it failed.
Thanks, that's awesome! I got it auto-incrementing too [https://gist.github.com/rayascott/332e69dfa69ec0fe81388abd5e4c4e78](https://gist.github.com/rayascott/332e69dfa69ec0fe81388abd5e4c4e78)
Two other suggestions: 1. If other calls to the HTTP function have similar closures, the function could instead just take the `completion` closure as argument itself and inline the existing two closures in the function implementation. 2. `completion` could be evaluated lazily by building/using a lazy value wrapper. (I don't think the `lazy` keyword works with local variables, though I'm away from my computer to double-check.) But I agree with your point about single responsibility the most, so OP should start there.
These are three pretty distinct cases: one's aborting before doing anything, one's after some I/O failed, and one's after the I/O succeeded *and* some UI updates were made. I'm not sure what `foo` and `completion` mean here but typically when I do something like this the completion is different in each case (and often noting at all in the guard case), so I'd take 2 or 3 completion handlers. Might that feel less "clunky" to you?
I probably should have included this - the completion is an ending of an animation that starts before the call is made. The 3 cases do contain some distinct code, but I need the animation to stop at some point, with the preference being on the longer end of things
The completion is an ending of an animation that starts before the call is made, relying on the calls starting and ending. Sorry if I was too generic in my code (I was referencing the stack overflow rules), Im using a framework (required), and not straight up http calls.
I'm using a shared framework, I don't have any say over the networking calls (there's also a bit more than just straight up http in the background). I can see doing a guard in a parent function, and writing separate functions to handle the success/fail, but off the bat it seems like I'd still have to call completion() in each scenario? Completion in this case, is the end of an animation which should start regardless of case.
If the networking framework you are using has separate completion blocks for success and failure, then you are limited in your software design. I’d suggest wrapping the networking layer in an abstraction layer that allows you to define how the API looks, that way if you ever switch networking layers, it won’t require re-architecting your entire codebase. That way you can control the way the networking calls behave and you won’t have to handle the completion block in multiple places
This is fucking dope. Excellent blog post.
I honestly think your approach is totally fine for the problem you’re trying to solve given the constraints you’re working with. The only thing I’m curious about is that you’re doing main thread dispatch only in the success case. Are you guaranteed to already be on the main thread in the failure callback? Other than that this totally passes my code review.
Have you read the official documentation? [https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID121](https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID121)
Thank you for the quick reply. Going to read up more on data modeling.
Basically, “for A in B { C }” means “take each item from B, and, assigning it to A, do C”; i. e., if you had for item in [“foo”, “bar”, “baz”] { process(item) } would have the same effect as process(“foo”) process(“bar”) process(“baz”)
I’m further in my lessons and this is making more sense. Just finished the lesson in core data and realm. Powerful stuff!
That’s great! Good luck with your projects
Let's say you have a collection of integers in an Array and you want to add and print all of the numbers. You do that with a for in loop: let myArray = [1, 3, 5, 7] var sum = 0 for i in myArray { print( i ) sum += i } This will print 1, 3, 5, and 7 to the console and add up the numbers so sum will equal 16 after the loop. The first time through the loop i will equal 1, the second time it will equal 3, then 5, and finally 7. It's called a "loop" because, well, it loops from the end of the loop back to the beginning.
My experience is that you can assign it to yourself, but there’s no guarantee someone else isn’t working on it. So if you do decide to take up a bug, do it in a reasonable amount of time, and for lack of a better phrase, don’t get too attached—it’s possible someone else will get a fix in before you, even if they aren’t assigned to it. Hope this helps—it’s a lot of fun to contribute to Swift. GOOD LUCK!
are you talking about the use of "for" in a loop, or "for .... in ...." loops? &amp;#x200B; for acts as a conditional, executing a set series of statements until a condition is met. Usually this condition is when the loop hits some kind of counter. Programmers used to have a really hard time with for loops, as off-by-one errors are quite common in programming. I'm going to use non-Swift psuedocode here, but I hope you can follow along. To get rid of this, modern languages created something called "iterators", which are simply a way for the computer to keep track of where you are counting. An example of a for loop is let's say you have an array fruits = \["Apple,"Banana",Cherry"\] Now you want to print out the name of each fruit. There's a few ways to accomplish this: 1.) Write a series of statements that prints each value (arrays typically begin their numbering index at 0): print fruits\[0\] print fruits\[1\] print fruits\[2\] &amp;#x200B; but this is inefficient because your software can only handle a predefined number of fruits, and its' repetitive. &amp;#x200B; So there's a language structure that can do this for you: for(index = 0; index &gt; fruits.length; index++) { print fruits\[index\]; } &amp;#x200B; What this means is you initialize a counter variable, set a condition that is tested at the end of every execution, and then do something at the end of the loop (usually increment the counter, but not always. The loop executes what's below it, in the { }'s, sometimes called a "block". &amp;#x200B; Now you can see where this is prone to bugs. What if the array is empty? what if array numbering starts at 1? &amp;#x200B; So to combat these, iterators provide a way to count "through" a data structure. &amp;#x200B; for fruit in fruits { do stuff } &amp;#x200B; This creates an iterator, fruit, which holds the current data structure of the array you are looping through. At the end of the loop "fruit" is replaced with another data structure, until finally there are no more data structures in fruits (i.e. the pointer reaches the end of the array). Then the loop simply exits.
Sure keep in touch I will brainstorm and you ask well I fig is we can create something good enough to prove we can work on a team and use this as work experience
If the performance is bad on Debug, you need to fix it. You should not need to have a compiler-optimized build for your app to perform reasonably.
How often are you swapping between builds? You should only need to build release once per release. After that it should already be on the device/simulator
That the approach of Android Studio and I hate it. I only use release once before uploading app, to check if i everything works fine.
I am learning SwiftUI and in the process developing tutorials and projects using SwiftUI. You can find my projects on Github: Github.com/MHuq1138/
s/&gt;/&lt;/
No, development is done in debug exclusively. Final QA is release, that’s about it. Rarely switch between the two unless some very specific issue needs to be addressed.
For apps I generally prefer native on both platforms (and have native apps with partners in both stores), but my main LOB product is a reporting / dashboard system that's written in C#. Within that product suite I have a Windows Service that creates dashboard data every few minutes, and uploads to a server for consumption by a couple of different Windows apps (reporting and dashboard). With Xamarin.Android and Xamarin.iOS, (not Forms), I was able to reuse the same .NET libraries from the Service, Server, and Windows apps (these handle activation, authentication, connection and data transfer, user and location management, and about 100 deeply nested classes representing the data for charts, reports, and numerous sort-able / filterable lists). I was able to get the core library functions (with barebones UI) working on both platforms in 10 - 15 hours total, instead of 100+ hours per platform. As a bonus all of that code is already well tested, stable, and widely deployed. I can't say that performance is absolutely as good as native would have been, but I'm not getting any complaints, and it doesn't feel any slower in the areas that are comparable to my other apps. I wouldn't use it everywhere (I'm currently writing new native apps on both platforms), but this was one case where I felt it was worth the effort to give it a shot, and it paid off nicely.
That’s actually interesting to hear; thanks! And something I’ll keep in mind. I’ve had to interact with Microsoft platforms from iOS in the past and it was a struggle to find docs on how to do so without .NET libraries. So I can imagine how Xamarin might make such things much easier.
Add a defer statement: ```swift func foo(completion: () -&amp;gt; Void) { defer { DispatchQueue.main.async { completion() } } guard checkSomeThings else { return } makeAnHttpRequest( success: { // Lets do some stuff on success failure: { error in // log error } ) } ```
Use a UICollectionView with a FlowLayout
Couldn’t you look for the length of the array and then divide by two? That’s essentially the middle. But you’d have to be a little more precise and account for odd/even divisions.
Judging by the rest of the replies here, nobody actually does performance profiling these days? Instruments time profile runs on debug builds of Swift code (note: not referring to system framework code called by Swift code, which is all that matters for some apps) are essentially useless. Even aside from the huge amount of noise, you'll never find stuff like "this array needs to be passed inout to avoid copies" if everything is being retained ten times more than necessary.
It never hurts to ask, but in general people aren't going to object to less work on their plates :)
Oh, originally I was thinking of posting this on stack overflow, and their guidelines stated making everything brief and generic, I ended up leaving it pretty inconsistent lol
Correct, you can just pass variable normally if what your subview need is `var`, if your subview need is @Binding that's when you need $.
`navigationController?.show(TabBarController(), sender: Any?.self)` `TabBarController()` here contain no `viewController`, so it render default black background. p.s. show `TabBarController` under `UINavigationController` might cause some UI glitch.
You shouldn’t need to use an app passcode at all. The standard would be to check to see if the user is signed in and has a valid session. If so, let them use the app normally, otherwise try and renew the session automatically. If that fails for whatever reason, then require them to login again. This is common when using authentication means such as OAuth, which leverage JWTs. With the Firebase SDK, most of this is handled for you. I would recommend reading the [documentation](https://firebase.google.com/docs/auth) for handling authentication with the iOS SDK.
Can anyone help?*
Even though I changed the TabBarController to a different view controller, the screen is still black
Do you have sample project?
You still don’t need two buttons for that. The profile action can be set to release.
I can share it on github
[https://github.com/Zhalyn/Zhalynmyman/tree/master/TestAPP](https://github.com/Zhalyn/Zhalynmyman/tree/master/TestAPP) (I am trying to connect HomeController with ThirdViewController)
That's true :) I suppose I was reacting to the sentiment without considering it in context like that
Youre a cunt
&gt; Instruments time profile runs on debug builds of Swift code That’s not true. The profile scheme uses release mode.
That's "instruments time profile runs which are taken on debug builds are useless" not "instruments runs time profile in debug by default". Sorry about the ambiguous sentence.
If you’re planning to contribute to swift-corelibs-foundation, I have a policy to please only assign yourself the ticket once you have a PR against the repository, or just mention the ticket in your PR and I’ll assign it to you and mark it resolved when I merge it. This helps me see whether there’s pending work in some area past “I intend to work on this at some point”, which is easy to indefinitely postpone.
If I understand you correctly you need to instantiate the TabBarViewController via its UIStoryboard. First of all make sure you have set a Storyboard reference Id in Interface Builder for the view (more important if it isn’t the initial view controller), here I’m assuming the TabBarViewController is the first item in the storyboard and that we can use instantiateInitialViewController(): ```@obj func handleLogin() { If let nc = self.navigationController, let tabBar = UIStoryboard(name: "Main", bundle: nil).instantiateInitialViewController() as? UIViewController { nc.show(tabBar, sender: nil) } }``` A couple of things to note. “Main” would be replaced with the name of the storyboard you wish to load. Conditional checking the tabBar is a UIViewController should be replaced with your custom UIViewController subclass if you create one, then you can access any specific properties within before it is displayed. This is pseudo code as I’m answering on my iPhone so you may need to tweak it but it should start you on the right path if I understood your problem correctly.
This calls the completion closure immediately, when it should be called when the http call completes.
There are plenty of answers for this type of question in this sub, just give it a quick search and u'll find everything u need
Using a passcode is a good idea in some cases e.g. for apps like banking. Its not used in any way to verify you to the auth service, just blocks access to the app without it (and maybe used to confirm some actions within the app)
The passcode flow would be similar to login if you required your uses to login every launch (there should be plenty of tutorials covering that concept): \- When the app becomes active you check to see if the user has authenticated themselves, if not you show a full screen view asking for the passcode (no cancel, dismiss buttons etc) \- If they succeed you move onto whatever the real initial view controller is, if they fail you block access (and probably give an option to authenticate a different way, e.g. by logging back in) \- I would store the passcode in the keychain &amp;#x200B; Something to think about is that you should probably prefer biometric auth as a first choice (touch / face ID) when available. And obviously wouldnt want to block a user with a passcode if they arent logged in or their token has expired and they will need to log back in anyway &amp;#x200B; Like the other commenter said, you should still be able to maintain a session between launches without asking for email / password (firebase probably gives you an auth token and a refresh token, the auth token is short lived but the refresh token can be used to create a new session)
thanks
Here's an idea: Use a browser if you want to visit a website. That's what they were build for.
Split the array in two, take the last entries from array one &amp; the first entries of array two.
Can you please explain exact requirement?
This is rather overengineered, but does what you want: https://gist.github.com/szotp/84b6e48a2c35cab51783a5c0bc4ca2ef#file-main-swift-L17-L29
https://docs.swift.org/swift-book/
But I don't really know anything about programming. Is it going to help me?
That's the first half of the sentence. The rest is about "having the readability and elegance of Smalltalk." They want to "Implement a programming language to replace Objective-C." But with Swift.
[https://exercism.io/](https://exercism.io/)
and that's why you don't write code on a whiteboard.
 func getItems() -&gt; AnyPublisher&lt;[Item], Error&gt; { return .init { subscriber in let urlSession = URLSession(configuration: .default) var components = URLComponents() components.scheme = "https" components.host = "..." components.path = "..." guard let url = components.url else { subscriber.receive(completion: .failure(ServiceError.badRequest)) return } urlSession.dataTaskPublisher(for: URLRequest(url: url)) .mapError { ServiceError.url($0) } .map { $0.data } .decode(type: [Item].self, decoder: JSONDecoder()) .receive(subscriber: subscriber) } }
That makes sense. Quite similar to creating Observable in RxSwift. Thanks!
What do you mean by uniform? Same or similar size?
Yes size and shape
It seems to aim to modify the Swift compiler so that it has an Objective-C syntax. Not sure why they'd want to call it Swift++ though?
Don’t worry , I got it , I just needed a delegate
Look at the image fit options for UIImageView. It's called contentMode.
Thanks
The link was pretty clear the goal was a Smalltalk compatible language. Good or bad it is extremely stupid to call the language Swift++ if the goal is to digest Smalltalk code. Frankly this smacks of somebody trying to make bread by trading off the popularity of Swift. I don’t see any rational reason to call it Swift ++ when it is in actuality Smalltalk. Frankly I hope the project burns in hell.
Yes there are cases in which a passcode makes a lot of sense, like the one you mentioned. I guess I was just trying to highlight that if OP is only trying to prevent the user from having to authenticate manually everytime with a username and password, there are conveniences that the Firebase SDK offers to handle that situation.
Understood, thanks for the help everyone!
PS: I have tried searching online for answers, but I can't seem to pinpoint exactly what the issue/terminology is for this problem. I appreciate a point in the right direction!
I would start with a table view or a uicollectionView.
Won’t that make it Swift—
If you don't know anything at all about programming, maybe you could try the Hacking with Swift website
Objective- Swift? ;)
As an aside, creating a new `URLSession` for every request you make is an anti pattern that Apple explicitly warns against. You should be using the fewest `URLSession`s you can, usually by storing them as singletons to be accessed by your app as it makes requests.
PM me, I can help you.
Well that escalates quickly
Programmers have a tendency to think in extremes. It's important to be mindful of that.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/coned_miro] [Learn iOS Custom View Controller Animation Transition once for all!](https://www.reddit.com/r/coned_miro/comments/c7lc0g/learn_ios_custom_view_controller_animation/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Hmmm... Smalltalk is very dynamic. Swift’s speed comes from giving the LLVM compiler/optimizer strict types. I think you have to choose: more static typing for Swift speed or dynamic typing (and slower message dispatch) for Smalltalk compatibility. I think the closest thing to getting both at once is called “The Apple Objective-C Runtime”.
You're presenting the ThirdViewController modally, which is why it isn't part of the current UINavigationController. There are two options to display a navigation bar &amp;#x200B; 1. Push the ThirdViewController to the existing navigation controller. You can do this by replacing `self.present(newViewController, animated: true, completion: nil)` with `navigationController?.pushViewController(newViewController, animated: true)` 2. Create a new UINavigationController for the ThirdViewController. `let newNavigationController = UINavigationController(rootViewController: newViewController` and then `self.present(newNavigationController, animated: true, completion: nil)`
So sorry for the misleading title and your effort, but by the navigation bar I meant a tab bar that it is in the bottom of the screen.
It is essentially the same approach. The tab bar isn’t showing because you are presenting your newViewController modally. You need to make sure the current view controller is embedded in a UINavigationController and then push the new view controller to it. It cannot be displayed modally if you want to keep the same tab bar controller visible.
How much of your code is in viewcontrollers?
95%
Good luck. SwiftUI is awesome and super fun to program with but it’s missing sooooo many components taken for granted in UIKit. That said you can reuse any view models, data models, networking, etc and just write extensions using the Combine framework and drive the UI that way. It’s pretty painless.
I would not be the first to use the Core Data and iCloud sync. Prior history has not been kind to those that have adopted Apple’s Core Data syncing attempts. Also you may actually need to change your data model given the preconditions for Core Data to iCloud syncing. For example, you cannot have unique indexes. See the documentation for all the data model restrictions. Unfortunately if you have a data model without syncing in mind when initially building, it may take a sizable amount of work to support syncing. It seems that Apple wants folks to use CRDTs and other data structures/algorithms as hinted in the Core Data sync WWDC session (and given that the Notes seems to use them, I wish Apple was more upfront with recommendations or examples). For the Swift UI stuff, it is almost a total rewrite if you want to adopt the framework with Combine. Luckily you can adopt it one scene/view controller at a time if you want. So up to you. Personally, I wouldn’t rewrite anything unless there is a “business need” to do so or if you are swimming in a mess of code and you determine it is easier to rewrite and can drop all users not on the latest OSes.
Gonna rewrite 95% then ;)
That's a bit alarming. It will be largely beneficial to do some refactoring prior to converting to the new Swift.
If 95% of your code is in View Controllers your best bet is probably to rewrite the entire thing. Spend time abstracting your networking/model logic and rewrite your UIs in SwiftUI.
I mean, if you have that big of a codebase, I assume you have a decent user base. Are you willing to drop everyone who doesn't want to upgrade to iOS 13/Catalina right away?
Probably not in a good mood having to go to work! Still I have no idea how the guy gets off calling this Swift++ when it is clearly described as Smalltalk on Swift tooling.
&gt; Are you willing to drop everyone who doesn't want to upgrade to iOS 13/Catalina right away? Yes, no problem there. I really no know one with a shiny new iPhone that does not upgrade the first time they get the Apple "Alert." It's just the Apple crowd AKA The Tribe that wants the newest before anyone else. Those are my people. I've taken the plunge. Hope to have this all ready to go by the time we see the release of SwiftUI.
Yep. That's the direction. Should be fun. :-)
Everything works fine for me in ViewControllers. And IB/Autolayout. However, I'm ready to say goodbye and jump on the SwiftUI juggernaut. I'm ready! :-)
I'm just always drawn to the "New." It may not be the best, bugs galore, it's just a primal thing. Guess I'm the early adopters adopter. Friends will tell me i'm like the first explorer in the new world, blazing a trail, the natives think i'm so crazy, they don't even waste the arrows to shoot me in the back. They'll save them for those behind me. :-)
I don't mean for this to sound so blunt, but if you feel that putting most of your code in view controllers is "working fine" then you need to spend more time learning about architectural and design patterns. Putting nearly all your code in VCs is going to come back to cause lots of issues (and headaches), Someone is going to have to spend a lot of time and money correcting course. SwiftUI is not going to be the panacea you're making it out to be. It has a limited scope of usefulness. It has some nice features, but still is only going to be a small part of any project. If the rest of the project suffers from poor design, it will more than offset the gains made by using SwiftUI, if any.
I believe what he meant was that, view controllers should be lightweight. It should be the mediator between your model (data) and the views. For example, if you had most of your code as a model object, then you can just reuse that code (with some changes maybe) and use it with SwiftUI.
I wish. The app I work on was built in 2011 originally, EVERYTHING written prior to me is done in the VC. It’s awful.
20k+ line VCs. The dream.
😭😭😭 There is large parts of code that haven’t done anything in 4 years. I’ve been slowly deleting it... but god damn
Every year around WWDC I joke that Apple will announce a new language called "Quickly", which is basically Swift with a Smalltalk-like syntax. I guess this is that joke come to life. But I've often wondered how something like that might look. `iAm(_ not: TheBiggestFan, of: SwiftSyntax, to: { beHonest() })`
Think I'm more of a MVVC kind of hacker. Use Core Data where ever possible. Everything just works. SwiftUI just seems a natural progression. I think it's going to take over. Think it's just the tip of the iceberg, i.e., a new paradigm with a new crew of coders at Apple now. Have been plowing through the Paul Hudson videos, have not come across anything yet that I don't think SwiftUI can't replace for me. (with mashing up my current code.) https://www.youtube.com/channel/UCmJi5RdDLgzvkl3Ly0DRMlQ
Dumb name but lovely idea.
No one knows the answer to your question. SwiftUI is only one month old. The more pragmatic approach is to start small and see how it goes. But you should definitely rewrite all of your UI code in SwiftUI, and then let us know how it turns out.
Last updated 2 months ago, yea this is going somewhere :/
&gt; I don’t see any rational reason to call it Swift ++ when it is in actuality Smalltalk. It's targeting the Swift ABI. &gt; Frankly I hope the project burns in hell. Do you also wish evil upon every Java project that has "J" in the name, or Javascript project that has "JS" in the name? That's not very nice.
&gt;Give Award &gt; &gt;share &gt; &gt;report &gt; &gt;Sav I can't run that code, but basically, you should be able to call navigationController?.show(TabBarController(), sender: Any?.self) &amp;#x200B; try let vc = UIViewController() vc.view.backgroundColor = .red navigationController?.show(vc, sender: Any?.self) and you should see red view
trying to speed run swiftUI with only pistol in less than 1hr one life, no saves
That's overly simplistic. The speed of Swift, or any language, comes from a combination of many factors. We figured out how to make Smalltalk run pretty fast decades ago. Objective-C has cached method lookups since forever. [Here's one test](https://it.toolbox.com/blogs/hohlecow/bypassing-objective-cs-message-passing-mechanism-for-speed-052708) that called an Objective-C method 1.4B times, and the overhead beyond a C function call is about 10 seconds. They don't say how fast their CPU was, but on a 2.0 GHz CPU (not uncommon at the time the article was written, or even today), that's slightly less than 2 cycles per method call. That's even better than I'd predict, from reading the source to objc_msgSend! I often write performance-sensitive code, and I don't think there's any code I've written in the past 25 years where 2 cycles per method call mattered. It's true you won't always hit the cache, but if you're using dynamic dispatch on your objects, you won't be able to use static dispatch in Swift, either. And in that case, you *are* using the Objective-C runtime.
You linked the copy on write article on Wikipedia and then you explained what value types are. Only structs with a backing storage are copy on write, like array, string, etc.
Thank you
Plot twist: the other 5% is in the AppDelegate
Gotta make that money on shorty medium.com!
Yep, I just wanted to give an idea of what I meant without posting whole class.
Rewriting an existing and working codebase to a new framework just for the sake of rewriting sounds pretty dumb to me. Also excluding the existing base of people stuck on iOS 12 wouldn't be a smart move for the time being.
&gt; Rewriting an existing and working codebase to a new framework just for the sake of rewriting sounds pretty dumb to me For real. Can’t people wait? I generally would prefer to dive into something when StackOverflow answers will be from people with enough experience in that thing, so I’m giving SwiftUI 2 years at least.
Very good info. You’ve convinced me you’re right— that was a naive assumption. Thanks.
You probably need to authenticate with firebase on the other devices
how do you do that?
Well Apple announced a recommendation template for the create ML app, that should be perfect for what you want, however it doesn’t appear to be in the current beta
Well, just use whatever method you used the first time, there’s a lot of them.
Change the rules of that storage to be public
Weird flex but ok
.. plz no