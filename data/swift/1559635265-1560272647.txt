I agree with you. Wish it was backwards compatible. I work at a company where we still support iOS 9. However in a way it is also a good thing - gives time for framework and tools to mature, resources / tutorials to accumulate/ &amp;#x200B; I will definitely writing my side projects in swiftui now :P
&gt;SnapKit React is just native while Flutter is native native but event though they are not as native as real native tools are :v
Some pretty top developers simply support only the latest version. For instance Overcast does this. I just checked the App Store and it requires the current iOS version: [https://itunes.apple.com/us/app/overcast/id888422857](https://itunes.apple.com/us/app/overcast/id888422857)
Using the unofficial wwdc app you can see the schedule. And play them when they are published. https://www.wwdc.io
 ###Swift Life ####This is a weekly podcast hosted by me (Michael Miles) where I talk about my week working as a Swift/iOS Developer, and ramble on about other things, be they Swifty or not. Hit me up on Twitter if you'd like to chat: https://twitter.com/MilesOfTweets Also, check out my YouTube channel, Step by S... *** Real Podcast URL --&gt; https://anchor.fm/s/a7513a4/podcast/rss Extract more podcast URLs from Apple links via https://votable.net/tools/itunes.php ^powered ^by [^Votable ^Podcasts](https://votable.net/podcasts/)
😭
This won't be a problem. It's the same pattern as in Flutter. You can have a ListWidget with 100.000 elements, it will only create Child-Widgets for whats currently on screen (+ a little cache up and down for fluid scrolling) and you still can scroll with 60fps no problem.
Thanks for the link.
Well, technically even C has a runtime if you use libc. It really depends on what you mean by native. React Native is native in the way that it can use native Views. But these views are driven by javascript and the js bridge creates a lot of performance problems. Flutter is native in the way that it compiles completly to native machine code (no bridge necessary). It does not use native views, it renders everything by itself, however it recreates iOS and Android components nearly perfectly (the goal is a pixel-perfect copy). Flutter will automatically use adapt things like scroll physics to that they feel native to the platform. Yes, there are separtate packages for Cupertino and Material, but you don't necessarily have to distinguish between the platform in the UI code. You can use either Material oder Cupertino or your own branded style for both. Only if you want to be as close to the native widgets as possible, you have to distinguish between platforms.
Hey, knaekce, just a quick heads-up: **completly** is actually spelled **completely**. You can remember it by **ends with -ely**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Haven’t tried it but I believe you would just need to add `@available`. You’d need to maintain SwiftUI and your old code for a while.
But shouldn’t iOS 13 adoption be similar to iOS 12? I mean if 85% of devices are running iOS 13 I personally won’t have a problem with that. The question is what devices will support iOS 13...I believe I read that iPhone 6 and up will. So I may be missing something but it seems like this is not a huge problem. Change my mind ?
You don't inherit from `View`, as `View` is a protocol - you conform to it. Why struct? `View` is just something very different from `UIView`. I think it's better to think of it as a configuration of how the actual UI components are constructed; a `View` isn't really something that's part of the UI hierarchy, it's just a way to tell the API how to set up the UI. If you think about it that way, it makes sense to have that "UI configuration" be a value type. Why declare things using `var`? In the context of a struct, var for properties just means that you can conveniently create a copy of some instance of a struct where that property is changed. What is `some View`? It's new syntax that enables some new uses of generics &amp; protocols. It's needed because the `View` protocol has an associated type. Currently, if you write `let foo: ExampleProtocol = ...` where `ExampleProtocol` has associated types results in a compiler error. It's quite annoying to work around. In the next Swift version, you'll be able to write `let foo: some ExampleProtocol = ...`, and that'll "just work". There's been a lot of discussion about this, you can find some here: https://forums.swift.org/t/improving-the-ui-of-generics/22814
I find it incredibly dated. So many features have been added since the core design was created 10 years ago that it now feels inelegant and esoteric in a lot of ways. For example look at the way constraint-based layouts work with UIView animations: you need to set the constraint values outside of the animation block, and call layoutIfNeeded() inside the block? It makes no intuitive sense.
[https://developer.apple.com/documentation/combine](https://developer.apple.com/documentation/combine) &amp;#x200B; It would appear that the engineers at Apple disagree.
Hey now, that may not be intuitive, but it's damn simple to do compared to what I was doing a few months ago which was manually updating each and every constraint inside the animation block (because I started doing animations before constraints were a thing and never knew the process changed)! 😛
It would appear that Apple engineers believe this sort of functionality should be simplified, and in Foundation, not bloated beyond belief, in a third party lib. I’m looking forward to playing with it, but it does not in any way invalidate my argument. Using reactive libs on iOS or macOS is a mistake. Use the built in tools.
Not quite iPhone 6 and up, it’s 6s and up
My question is: Is this going to kill the XML storyboards? This is my biggest gripe with the current IB. Windows Forms deals with this so nicely, and creates the code describing UI object on the fly. So you can not just edit the UI in the IB but vice versa too. I would love it if this meant that all UI resides programmatically too.
Guess it's just taking them a while to put up the videos, we'll just have to wait and see...
&gt; Why struct? View is just something very different from UIView. I think it's better to think of it as a configuration of how the actual UI components are constructed; a View isn't really something that's part of the UI hierarchy, it's just a way to tell the API how to set up the UI. If you think about it that way, it makes sense to have that "UI configuration" be a value type. I understand this completely. &gt; Why declare things using var? In the context of a struct, var for properties just means that you can conveniently create a copy of some instance of a struct where that property is changed. So ```Greeter(name: "World")``` is just "memberwise initializer" for the struct? &gt; What is some View? It's new syntax that enables some new uses of generics &amp; protocols. It's needed because the View protocol has an associated type. Currently, if you write let foo: ExampleProtocol = ... where ExampleProtocol has associated types results in a compiler error. It's quite annoying to work around. In the next Swift version, you'll be able to write let foo: some ExampleProtocol = ..., and that'll "just work". There's been a lot of discussion about this, you can find some here: https://forums.swift.org/t/improving-the-ui-of-generics/22814 Thank you for your explanation, but this is currently way beyond my limited knowledge to even understand what you just said. :) Also, could the body be defined as this? ``` var body = Text("Hello \(name)") ```
Is there an api you can use? :)
I bought this up at work and got a resounding 'absolutely fucking not', it's just a bit too risky to adopt straight away.
My previous Scrum master, who used to be a web developer: "What's an API?"
I checked it but it doesn't have any video yet, not even the keynote
Yup! A loud "YEEEEES!" were yelled towards the TV... My girlfriend gave me a concerned look and asked me: "Is everything OK?" 😅
They will become available soon.
as someone that has been learning swift for a few months now - will this make help me create UI's quicker? i always felt storyboard was cumbersome.
Angela Yu course?
Did you have previous programming experience?
I believe I will be saving many many hours a week thanks to preview and not as verbose/bloated API
You can check my live markdown notes meanwhile if you want a glimpse over the content. &amp;#x200B; [https://erenkabakci.github.io/WWDC-Recap/](https://erenkabakci.github.io/WWDC-Recap/)
App Development with Swift by Apple https://itunes.apple.com/us/book/app-development-with-swift/id1219117996?mt=11 Hacking with Swift - Beginner courses free, additional paid https://www.hackingwithswift.com/read Ray Wenderlich - Beginner course paid, additional free/paid https://www.raywenderlich.com/category/ios The Swift Programming Language by Apple (language only, no iOS/macOS content) https://itunes.apple.com/ca/book/the-swift-programming-language-swift-3-1/id881256329?mt=11
You'll also need to install macOS 10.15 beta to use it... ([ref](https://developer.apple.com/documentation/xcode_release_notes/xcode_11_beta_release_notes?language=objc))
I'm actually wanting to get into this. I have some *very* limited experience in HTML/CSS. Do you think it's reasonable to jump in with SwiftUI, or should I learn other stuff first?
Yes, of course. You have to do that every year :D
Im new to programming. Ive been remaking this super simple app until what im doing kind of sinks in. Its helping me understand some basic concepts. Just wanted to post here and ask if the code follows all the best practices? Like am i declaring my variable in the best spot? are there more efficient or simpler ways of achieving the same result? Basically the code just creates a button that when pressed adds +1 to a score label. Any input and constructive criticism is appreciated. [https://imgur.com/a/lz4JZqf](https://imgur.com/a/lz4JZqf)
RN uses actual native UI controls while flutter does not. Its basically a scripting layer on top of the native UI code.
I think declarative user interfaces have been around for decades, and if you're picking out a single one you think it looks like, that says more about you than about it. It looks like Flutter because ... it uses curly braces? It's a framework for Swift, and Swift uses curly braces, and both Swift and Dart got [those](https://en.wikipedia.org/wiki/List_of_programming_languages_by_type#Curly-bracket_languages) from BPCL by way of C -- as did half the industry.
I played around with it and I really like it. I usually try to sue Storyboards as much as I can but the limitations are really annoying and it makes it really hard to reuse stuff. The one limitation I ran into was with the List view, I couldn't find a way to easily have a custom background color (the parent's background color is not visible)
Is it only me, but was the link for this video kind of hard to find at first? Also available in the WWDC iOS app btw!
Xcode 11 doesn't need Catalina, but the live preview for SwiftUI does
You know what makes it harder to sell apps? The flood of young people entering the field who care only about "selling apps" and not learning the field and its history and becoming skilled at their craft.
Greatly reduced development time vs. support for 15-20% of the trailing edge of the market. Not a hard decision.
Yea and Facebook looks quite myspace-y. No one cares. Is it good? Is it bad? Thats all devs care to know
"Name a major ..." challenges are always moving goalposts. Someone names one, and the challenger just declares them to be "not major", or come up with some other excuse for why this example shouldn't count. Is [Google](https://itunes.apple.com/us/app/google-fit-activity-tracker/id1433864494?mt=8) not *major*? Or [Apple](https://itunes.apple.com/bm/app/shortcuts/id915249334?mt=8) themselves?
Yeah. It’s pretty good, although not perfect. I’ll probably go through some other free course after I finish to review and solidify some stuff and learn more.
Apple supports X-2. But really, name one app on your phone that only supports iOS 12 (but existed before iOS 12 came out)
The live preview which is broken anyway. (And it wasn't confirmed that it would run on non-Catalina when I wrote this yesterday -- and it's super common for new major Xcode versions to require a OS upgrade)
The live preview on my computer is about on par with Playgrounds (it "works" but the performance is laughable)
&gt; So Greeter(name: "World") is just "memberwise initializer" for the struct? Not OP, but to answer your question, yes. Regarding the last thing you quoted, a protocol with associated types is another abstraction which prevents you from having to subclass and “implement an interface”. If you’re coming from a language like Java, you only have this option if you create an interface, which a bunch of subclasses or implement, or in the swift way of saying things, conform to. If you use associated types, you can use an extension on the protocol itself to provide default functionality, without having to subclass at all. It’s a neat thing the language offers. If you are looking for a job that involves Swift, make sure you understand this concept. You can easily get kerflunked in interviews as I did at first. Here’s a decent article which explains better than me: https://www.natashatherobot.com/swift-what-are-protocols-with-associated-types/
&gt; Apple supports X-2. I *just* linked to a counterexample: Shortcuts 2.0 shipped the same day as iOS 12, and only supports iOS 12. Back before Apple bought them (and it was called Workflow), it supported previous versions of iOS. &gt; But really, name one app on your phone that only supports iOS 12 (but existed before iOS 12 came out) Yep, exactly as predicted, there's the moving goalposts. I'm not going to keep playing this game. You have to set the rules ahead of time, or it's not fair. You made it about you winning, not about discovering truth.
You linked a app that requires iOS 12 only APIs. Well, duh, of course it only works on iOS 12. But are you seeing Apple rewriting "Mail" in SwiftUI and then only supporting it in iOS13+? Hardly. Anyway, you're obviously not a professional. I'm sure the 5 people who bought whatever hobby app you published don't care anyway.
I love how it's *obviously* a pub/sub framework but they couldn't call it "PubSub.framework" because they already made (and deprecated) one with that name. OOPS! Quick, marketing team, come up with a word that means "these guys produce data, and these other guys consume data"!
It's up now!
Gee, if I had a nickel for every time some software publisher tried to make a sale based on "We don't require the latest version of the OS!", I'd still be collecting royalties from WordPerfect. It's an especially strange defense to try when you're talking about the *fastest upgraded OS in history*, with annual releases like clockwork. We can predict to within a couple days when iOS 13 will become the dominant version.
Making your own app
From Apple's data, we know iOS 10 is on [less than 6% of devices](https://developer.apple.com/support/app-store/). According to [this guy](https://david-smith.org/iosversionstats/), it's around 3%. I hope you aren't spending much effort maintaining the code to support that version! It's the rare company who finds it profitable to support the 3% of users at the tail end of the 'laggards'.
You need to be on the Mac OS Catalina version in order to see the preview. I don't recommend upgrading to the beta version though, it can mess up with your current development setup. Just try it out without the live reloading for now, or use the Playgrounds preview.
&gt; Using StackViews and Lists for 99% of the UI instead of constraints is perfectly doable. That's exactly the point. [It's that other part that kills you:](https://www.joelonsoftware.com/2001/03/23/strategy-letter-iv-bloatware-and-the-8020-myth/) &gt; A lot of software developers are seduced by the old “80/20” rule. It seems to make a lot of sense: 80% of the people use 20% of the features. So you convince yourself that you only need to implement 20% of the features, and you can still sell 80% as many copies. &gt; &gt; Unfortunately, it’s never the same 20%. Everybody uses a different set of features. In the last 10 years I have probably heard of dozens of companies who, determined not to learn from each other, tried to release “lite” word processors that only implement 20% of the features. This story is as old as the PC. Most of the time, what happens is that they give their program to a journalist to review, and the journalist reviews it by writing their review using the new word processor, and then the journalist tries to find the “word count” feature which they need because most journalists have precise word count requirements, and it’s not there, because it’s in the “80% that nobody uses,” and the journalist ends up writing a story that attempts to claim simultaneously that lite programs are good, bloat is bad, and I can’t use this damn thing ’cause it won’t count my words. If I had a dollar for every time this has happened I would be very happy. Nobody is arguing about whether you can use SwiftUI for *most* things. They're wondering whether you can use it for *all* things. My Downloads folder is already full of technologies I've tried that are only 99% good enough at making portable applications. &gt; But if they plan anyone to use it seriously, both of those two things will been solved already. That's also a big "if". Even Apple has released technologies which they themselves don't use seriously. Is this a technology Apple is going to use to rewrite half their operating system, or is this a technology Apple is going to use for cool demos and not actually maintain?
My bad, we also support iOS9 too. The cutoff for bad OS is iOS8 and macOS 10.10, so we just need to cut off 2 more macOS versions, iOS9 and 10 work almost as good as 11 and 12. We don't put that much effort into supporting older OSes, some non business critical functions are only available on newer versions.
&gt; Nobody is arguing about whether you can use SwiftUI for most things Actually, I'd say that it's exactly what most people in this thread was doing :D &gt; That's also a big "if". Agreed. But seeing how it's iOS 13+ only, and appears not to be backwards compatible (it's listed as a "known issue" atm.) it also means they expect a maturity period of at least two years. So it's very early to discuss it. But nobody can seriously dismiss getting a updated UI framework with bindings. Bindings are heaven and takes care of 9/10 of the most common problems in iOS software development.
We only do business critical tests on macOS 10.9 and we still get support tickets from subscribers whenever a version specific bug slips through.
Thanks 👍🏻
Then answers to both questions is "yes" :-)
No. Swift was my first programming language and because of Apple’s resources, learning was easier than I expected.
The SwiftUI still doesn’t work for me, even though I’m on Catalina. I’ll have to see the error message when I get home.
Are you on Xcode 11 beta?
Yep. This means that there will be no more of "our team uses storyboards" or "our team uses code only", it's up to the individual developer whether they like using code or IB as it generates the same result. So far this seems very promising.
You can jump right into SwiftUI, learning HTML/CSS first would get you used to the environment of coding. Though Swift, SwiftUI, and Xcode are pretty different when it comes to other languages and text editors, so learning it first without any other influences could be beneficial.
I tried the xcode beta on my 2018 macbook air and if anything it's more performant than storyboards, which is nice considering this is only the beta release and we can hope it will improve.
I'm planning on going through some of those tutorials today. This does not give me hope
It's simple but overly verbose. After working with React for sometime I have embraced the declarative UI approach and am excited it's coming to iOS. Just think about how repetitive most table view data sources are, or how many times you've updated the text of a label when the model is set, this seeks to abstract all of that repetitiveness away. While we don't know how well it will work for more advanced use cases, most of iOS development now is quite verbose and repetitive and this seems like an exceptional solution from my point of view.
Yes, I can write VStack and HStack code, follow along with apples SwiftUI tutorials, but the SwiftUI view says ContentView couldn’t be compiled. I clicked on Diagnostics and there was an error report. I’m saying this all from memory so I don’t exactly remember what the diagnostic said.
I’m confused at your meaning here. If you are making a crack at me I assure you I have the utmost respect for the field and I plan to work as a software developer after college. I am simply trying to help pay for college by doing what I am passionate about.
I am felling like this every time when I am trying to learn animations, drawing, etc.
Try generative!
Question, I read in the tutorial that you need Mac OS 15 beta on top of Xcode 11 beta? Is that right?
It was literally announced yesterday, any answer to this question is purely speculation. With that said, chances are we cannot truly say goodbye to UIKit since there will still be a need to support older versions of apps (SwiftUI is only available on iOS 13).
You can use playground on Xcode 11 beta on Mojave too.
in wwdc when they showed how that huge code sample could be shortened to 5 lines everyone clapped but i just died inside. how do u even begin to learn how to shorten and write code that concise.
and Catalina and ipadOS
Yeah, that's why the apps are so much smaller. It reduces the minimum 10-20mb packaging of the Swift runtime for each app. Still sad :(
Are you using Carthage? I had the same problem in one of my projects. The way I solved it was to go to Xcode &gt; Preferences &gt; Locations and change the command line tools to Xcode 11.0. Then I ran carthage update, reimported the frameworks and everything built for me.
Start coding.
CocoaPods (unfortunately). But all the framework targets have the Swift Version set to "Swift 5"
Great insight. Very helpful.
Stanford’s iOS dev online course is amazing and free.
It's only you. ;-) Just use this link to check for new videos [https://developer.apple.com/videos/wwdc2019/](https://developer.apple.com/videos/wwdc2019/)
[https://stackoverflow.com/a/46690240/6324550](https://stackoverflow.com/a/46690240/6324550)
I've already changed the Pods targets (you can do it by hand as well) to "Swift 5", but as mentioned, I don't see any options for 5.1 anywhere.
Yeah I was hoping that someone had gained more insight into this from one of the dev sessions or from the documentation.
It might be even easier to follow this one, although it's debatable as to whether they'll announce all new videos on this page... [https://developer.apple.com/videos/](https://developer.apple.com/videos/)
I know you compile/submit via Xcode, but do you also usually use it as a text editor and for version control?
And now that I got CocoaPods working again... it obviously doesn't work, similar to setting it by hand. Good job linking the first result on Google that I had already read.
swift 4 will do for learning. there isn't anything mayor to unlearn going into 5.
Same
Yeah, it's used as the text editor for Swift. It is a pretty good text editor too, there's a lot of different attributes that makes it really nice to use.
I'm on Mojave. The live preview doesn't work for first beta, but you can run it like normal
You can watch the sessions streamed using the WWDC app, just FYI. Just watched the intro session to SwiftUI and it's pretty damn powerful. Wish they had some sort of compatibility or bridging between it and UIKit / AppKit though.
FYI, I solved it by specifying the `SWIFT_EXEC = /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc` i.e. explicitly force my CocoaPods framework targets to use the Xcode-beta, as it appears CocoaPods is ignoring the xcode-select version.
If we’re thinking of the same thing you’re thinking of the swift introduction at wwdc 2014. That code was just if statements checking for selectors and if things were nil which can be a one liner with optional chaining. Really a sugar picked example and not that complicated if you’ve ever coded in Swift
Hi JustThatGuy777! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/bwsu7c/the_impossible_snake_game/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Stumped at the moment. It works in the simulator, but not on my phone. I don't get the black screen as you do, just a white screen. Still playing with it.
Nah this years wwdc showcasing swift ui.
There are very, very few differences between Swift 4 and 5 that you will encounter at the entry level. You're free to build as much as you want in it. Don't worry or feel guilty about learning anything outdated. Especially if you're coming from a JS background, you'll have absolutely no problem getting up to speed once you update your machine in the future.
Sorry that’s my fault if I said “black”, I meant BLANK. Did you take at the memory usage while debugging? For me, it stalls at ~18mb when I select a cell, could that mean something?
SwiftUI provides the ability to embed UIKit, AppKit, and WatchKit views. For example I didn’t see NSSearchField in SwiftUI so you’ll have to create that with the wrapper classes. They will add more controls over time. The question is does it use existing UIKits or is it new UI components from scratch?
It's almost guaranteed that there'll be stuff it can't do. But it might not matter to anyone who uses it. Unfortunately it seems like you can't necessary use both UIKit and SwiftUI in the same project (currently a "known issue" in Xcode 11, but not clear if intentional or not)
Yeah, breaks all the time for me... on Catalina.
This means that Swift is going to the right direction as a language. I am pretty excited for this.
Hey man. I just found out that there is a new mojave version out that has updates for Xcode command line tools. Its version 10.14.5. Check if you updated already
How can I learn and practice Swift without a Mac or XCode?
Practice
swiftui is just a user interface framework, it is not a replacement for swift. you can learn swift without touching any of the user interface frameworks. also, there are a lot of other frameworks to learn and keep up with.
Even if you only support the last 2 major iOS versions, you still have like 16 months before you can start using SwiftUI. But even after then, you will still need to understand/support codebases that aren't based on SwiftUI.
The official video streaming links are accessible here. https://developer.apple.com/videos/wwdc2019/ They have listed all sessions but of course the future scheduled videos will not be available until after they have actually run. [Platforms State of the Union 2019](https://developer.apple.com/videos/play/wwdc2019/103/) is available for streaming.
Good on you for coming back and letting us know how you solved it. Thanks!
Just start now. SwiftuUI is just one of many frameworks to learn when creating iOS apps. The only thing that might actually be a problem is I think you need to update to the Mac OS beta to use the new preview features in Xcode.
Doesn’t swiftui literally inherit from view which is part uikit? I’m not sure it’s meant to replace it?
Platforms State of the Union said that you can use it alongside Swift and ObjC in the same project. It's just that that particular view will be ios13+ only.
&gt;Unfortunately it seems like you can't necessary use both UIKit and SwiftUI in the same project This is not true. Their tutorials for SwiftUI online teach how to use a UIKit driven view with SwiftUI.
Gotcha
Well the whole idea is that it's less code because SwiftUI is built from the ground up to allow you to craft UI's entirely in code. Which UIKit was really never intended to do.
It is okay in my opinion, I started learning swift 4 while 4.1 was on the brink of being released. The differences between 4 and 5 are not at the syntax level (as far as I know). Also, your learning curve will be short because of your JS background.
Nope
So I guess you are a happier now? :)
This is correct: it’s pretty easy to use existing UIKit views with SwiftUI, as highlighted in the tutorial 👍🏻
The View in SwiftUI is separate from the UIView in UIKit. It’s still easy to bridge between the two, but they’re not the same thing :)
Don’t wait swift ui is iOS 13+ and there aren’t that many companies that would drop iOS 12 in the next 1-2 years. So you will still be using storyboards, xibs and code generated ui.
i don't see why.
Nah ik its a good thing
There is no such thing as a macOS developer. So many frameworks and technologies are shared that it's very easy to switch between programming for macOS or any other Apple technology. You're an Apple developer. So no.
Yes, I was pleasantly surprised. This goes a long way in making the iPad capable of being a desktop replacement.
/r/therestofthefuckingapp
Correct. Like /u/sneeden says, you can _run_ it on earlier versions, but you won't get the live view, and without the live view, the tutorials aren't terribly helpful.
You can add a copy resources phase to your build.
Swift by sundell blog - https://www.swiftbysundell.com/ Swift docs - https://swift.org/documentation App venture - https://appventure.me/ Raywenderlich - https://www.raywenderlich.com/ YouTube ------------- Let's build that app - https://m.youtube.com/channel/UCuP2vJ6kRutQBfRmdcI92mA
cmd+a then ctrl+i indents your lines correctly. return number is outside of the scope where number is a variable
Nah, you got this. I read through them earlier and they seem decent.
I re-indented but it didn't affect the error. Sorry, I don't understand what "outside the scope" means. I thought the return statement has to be the last line within the function.
What does your code do? Can you explain it ?
* The function starts with the for in loop from 2 to n, where n is the number that I input when the function is called. * the while loop takes the integers in the range, starting with 2, and test to see if the conditions are true or not. * if the conditions are true then the divisibleCounter is incremented by 1. * the reason i'm incrementing it by 1 is because if the number is prime than the divisibleCounter should be 1 and if it is more than 1 than it is divisible by more than 2 numbers and is not prime. * But the problem i'm having is the "endNumber % number == 0" line only test for the number I choose and the current number it the range and doesn't test out all the numbers from the current number to the last number. Sorry, if this is very confusing. I haven't learned anything other than for in, while, if else, and while loop yet.
You can just download xCode 11 beta and it will work.
&gt; It is missing a statement to test the number for divisibility by 1 Well, for one thing, every integer is evenly divisible by 1, so I'm not sure why you think you need one. For another, you do have on inside the condition of your while loop. You can just remove that. For another thing, your manner of determining if a number is prime is somewhat odd and buggy. For example, if `n` were 3, then when `number` is 2, the second test in your while will be false, so the whole while condition will be false, so the while loop will end and you'll never print out that 3 is prime. Honestly, I've never seen anyone test all possible divisors from `2...n` and count how many times a trial division succeeded. You don't need to do that because if you check from `2..n-1` (really just 2...square_root(n) is all you need to check -- and even there, you can be a bit speedier by only checking 2 and then all odd numbers less than the square root of n) and if *any* of those numbers evenly divides `n` then you know `n` is *not* prime.
Thank you all for replying :)
cyberbeni is right. but also, why are you returning a number? if you were to move return number into the for loop, it will just return 2 and end the loop. but after you move it you will be compelled to provide another return outside of the loop which you can do by declaring a variable outside the loop, also why are you using the while loop? there is nothing inside that loop updating the statement it's checking for. i think a simple if statement will do if number % 1 == 0 &amp;&amp; endNumber % number == 0 { print ("\(number) is prime") also your in your condition "number % 1" will always equal 0 because any int divided by 1 will never have a remainder so i would take that out. also the divisibleCounter test is not doing anything except skip at least 1 actual prime number from getting printer you also don't need to cast n to the variable endNumber. you can just use n as it never changes. so in my mind without testing, this is the functional part of your code func printNumbers(upto n: Int) { for number in 2...n { if n % number == 0 { print(number, " is a prime") } } } printNumbers(upto: 10) but that is also wrong because n % number == 0 would not give you prime numbers, it would give you the factors of a number. in the example above would be 2, 5 and 10. not sure if that's actually what you wanted.
Were you obsolete before when you found out that Foundation and Darwin were shared between macOS and iOS?
&gt; I re-indented but it didn't affect the error. Indentation doesn't change errors. It makes errors visible to you. &gt; Sorry, I don't understand what "outside the scope" means. I thought the return statement has to be the last line within the function. No.
had to look up prime definition again, but prime is only divisible by 1 and itself. so there are only two conditions that will make it prime, so if it is divisible by any other number, then it is not prime. try playing around with the logic inside the for in loop. use different combinations. if you were to do it by hand, how would you calculate it. start with that then just refine it.
&gt; test to see if the conditions are true or not Missed the whole point. Yes, that is how a loop works. What does *your* loop do? What exactly are you hoping that `number % 1 == 0` will tell you?
I think you’re referring to the massive-ass UITableViewController they showed a quick glimpse of. For something so commonly used in a **ton** of apps, the code necessary to create a simple UITableView (up until now) has been waaaay overly complicated. I understand that they were coming from the Objective-C template; however, I was surprised to see it brought over into Swift as a near-exact translation. It really didn’t need to be as complex as it has been for all these years (unless you’re creating a table with complex features, appearances and/or purposes). TableViews should be an easy, intro lesson for beginners – not an intermediate, 4-hour teaching seminar. Go look up any of the Objective-C and Swift tutorials for TableViews currently out there and the guides will have far too many steps, with far too many places to go wrong. The comments are filled with errors received by users who got lost in the complexity of it all. This should hopefully make things a lot easier for people to get started. This was the intention of Swift.
in his case, there needs to be a return statement in the last line as the return inside the for-loop is not guaranteed to run.
Good to know, thanks for the info!
Totally for it and the way they've managed to simplify the code is obviously beautiful and good in the long run.
see my answer here &amp;#x200B; [https://www.reddit.com/r/swift/comments/bwusk7/problem\_with\_unresolved\_identifier/](https://www.reddit.com/r/swift/comments/bwusk7/problem_with_unresolved_identifier/)
Well I always like being pleasantly surprised. I got really good news too, we've been waiting for the iPad apps on Mac thang.
r/RestOfTheFuckingOwl
They do require horrible unreadable code.
Oh great! Thank you for the heads up!
Are you talking about the auto generated file that you’re not supposed to fuck with?
Honestly I like the pattern. But I like Redux more.
That’s perfect for a new engineer building a new app. Early adopters will allow me to test with just a few people and workout the kinks before everyone else tries to use my app.
The tutorial is actually really good
yes. you don't need to pay anything tho.
I'm not sure what's wrong with my account then. When I try to download it just takes me to that page then if I click on my account it says please complete payment to complete your account.
It’s still code underneath. That’s the point.
Hey Paul any chance you're looking for work?
If you want to learn swift syntax there are some good swift playground tutorials. Then to apply what your learning find a tutorial on how to make a table view and start there. Then you can get more and more complicated.
Any tips for resources, etc.?
Good to hear that you'll likely be fine with Swift 4. I'm also a JavaScript developer who is looking to learn iOS development. If you have any valuable resources then please share. Thanks and good luck!
None of the sessions are available, yet.
You need a paid account.
Not all sessions make the code available. Generally sessions that make code available will show a link to it at the end of the presentation.
Hey /u/psycho-inked-alien, I wrote that tutorial, so I'm interested to hear where things went from the two circles to the full owl for you. Which section / step(s) do you think jumps too far ahead?
I know this is a day later but looking more into SwiftUI...it looks pretty damn legit As far as complex UIs...I've created a few components that were *way* more complex than just stack views. I've done stuff that basically required me to take over the layout process every step of the way. Now if I'm understanding SwiftUI completely...all I'd have to do is wrap that shit in a `UIViewRepresentable` Same with `UIViewController`. Wrap that in a `UIViewControllerRepresentable` and you're good to go. It even has a coordinator object that is for setup. You can even fully wrap `UIViewControllers` too if you wanted I'd say the only downside as of right now is that you'd need iOS 13 *minimum* to use SwiftUI but damn near everything is there to convert an app over just by using the Representables. Having said that, I *kinda* feel like SwiftUI is the way to go going forward. The only thing that scares me a bit is how people will structure their code. I feel like what's gonna happen for a while is that the Views are going to have a ton of logic that has nothing to do with being a view and it's going to end up like "Massive View Controller" but worse. And the crazy thing is that off the top of my head I think "well if I had a controller to put that logic in then I'd be fine" and that makes me want to use `UIViewControllerRepresentable` and if I just keep using those wrappers then the only benefit of SwiftUI would be the live preview, which honestly may be ideal because you don't need storyboards for it.
&gt; I know this is a day later but No buts needed. It's hilarious how everyone wanted to judge it before we even had 1-2 days to actually try it out :) Great info, thanks!
Two big limitations I'm focusing on: - embedding SwiftUI inside uikit has to be done as a UIViewController - The HStack / VStack thing makes cross-hierarchy constraints/layout impossible. For that you'll need to implement a custom view Might not be right about those but that's my current understanding
Wish I didn't have to wait until the next day to see the videos.
Honestly you could make it a UIView and subview it with UIButtons with images based off of those icons and add a tint to denote the currently selected one. That might be the easiest way to go.
i see. i’ve read somewhere that you can also use stackview. very interesting
yea you defintely could especially with the even padding on all your buttons that wouldnt be a bad idea theyre pretty similar to implement.
I haven't seen feature that aren't possible in swiftui. For paths https://developer.apple.com/tutorials/swiftui/drawing-paths-and-shapes is a good read.
I'm glad to see Combine and I'm not worried about future of RxSwift (I'm a huge fan of it). It has plenty of useful operators (not sure if already implemented in Combine). Most likely RxSwift ground-base will be rewritten using Combine and not some Swift "hacky-code". Maybe the memory managements will be better, no disposeBags?
And you can use RxSwift with iOS 10, 11 and 12 projects. Combine is for iOS 13.0+. It's enough for private projects but useless in commercial products since all customers (wants to support iOS 10+ or iOS 11+)
You just have to learn swift, no other program language is needed for iOS development. Then you need a database. I use google’s Firebase Real-time Database on my Apps. There are a lot of YouTube videos that will teach you how to implement firebase to your Xcode project. Of course you need a lot a patient!! Never give up.. Have fun 💪
It's a song of the future so don't rush it :) Learn UIKit and read news about SwiftUI but don't get too exited about it yet :)
I had to say, the website for SwiftUI tutorial is top notch beautiful. 11/10 as a web tutorial, I'm completely amazed and blown away.
[removed]
i'm downloading it right now and i don't have a paid account
"Apple platform developer" seems like a nice way to put while still making a distinction from Apple's internal engineers.
Super awesome feature... can't imagine how much boilerplate this will save in the future (especially with the UserDefaults case you described).
Beyond a handful of apps you'll have to do ObjC introspection along with runtime library injection. They are a few I can think of: &amp;#x200B; \- Safari \- Xcode: Source Extensions \- Mail: mailbundle \- Photos: with photo extensions &amp;#x200B; you can also do a lot with Applescripts but you can't write UI with that. &amp;#x200B; At the end of the day I have written a few lib injections to extend some apps I use everyday (Fantastical, Things 3) and it works amazing however one potential issue is that with Apple crackdown on security you have to modify sys settings to allow for DYLD\_INSERT\_LIBRARIES
Wow, I was almost certain the `@State` annotation shown with the SwiftUI example code was specifically added to the Swift to support SwiftUI - awesome that there's actually a general mechanism for everyone to use behind that! Does anyone know any details about `@ViewBuilder`? What it does is reasonably obvious, but is there some other more general feature behind that?
Not for the Xcode beta.
Same here. Pretty annoying, but the keynote and state of the union also had delays before being available.
 1. swiftUI 2. UIKIT
Precisely. I was using a UIPickerView recently and had insane levels of logic inside my VC to control and prep the model before handing it over to the View in the delegate call. Are we saying that's all gonna sit in some magic string inside some nested 'stack'. Yuck. If this replaces UIKit completely I might vomit.
informative thanks!
Actually the have been renamed to `Property Wrapper` now: https://forums.swift.org/t/pitch-3-property-wrappers-formerly-known-as-property-delegates/24961/6
&gt; This changes everything! Hasn't been released or tested in prod apps yet. Come on, creating views programmatically isn't a meme when the non-prog option is a fucking "storyboard"
Ppl who are banging on like they won't have to write more than 5 lines of code anymore for their prod tableView obviously have different requirements to implement than I do.
So with this approach, is there still a controller?
When I was making the examples I noticed that I could use @propertyWrapper too, I’ll update the Medium post; thx!
OK question for you as you're a guy who gets it. I'm a person who is comfortable doing tableViews by hand in a ViewController, completely in code. Will I now have all my async calls nested inside that H-Stack/V-Stack? It's like their coupling controller and view. We can't do everything in a react style, and I don't understand why they want to couple view and controller logic.
The SwiftUI Tutorials show some sample code such as the following: &amp;#x200B; HStack(alignment: .top) { Text("Joshua Tree National Park") .font(.subheadline) Spacer() Text("California") .font(.subheadline) } &amp;#x200B; My understanding is that the code within the curly braces is a trailing closure. What I don't understand is how the HStack() obtains the items (Text, Spacer, Text) constructed within the closure, given that the closure doesn't return anything. &amp;#x200B; It seems that this is using @ViewBuilder ([https://developer.apple.com/documentation/swiftui/viewbuilder](https://developer.apple.com/documentation/swiftui/viewbuilder)), but I don't really understand anything about @ViewBuilder. Could someone explain? Thank you!
No. The view code displays information from your model. Elements in your UI are binder to display information form your model. Your asynchronous code could be wherever you like - when it’s triggered and time to update your model, you update it. The elements update because they are binded. Either that, or you can manually declare that your model has been updated by conforming to the protocol they also mentioned in the state of the union keynote - BindableObject, from memory. You provide an array of items for your UI code to display, then the UI will be automatically updated when the models change.
Thanks my friend, yes indeed, that is pretty neat. So we will still have UIViewControllers to write?
Yep, I’d say so. Think of the declarative syntax as being a way to declare the views for your view controller.
Yes.
Yeah they normally take a while unfortunately
Good call, sounds about right.
Why is this tagged as NSFW and Spoiler?
I want swift/swiftUI for android ))
I prefer Swift developer
Well, conform and implement is really the same step.
That only applies if the methods are mandatory. There are delegates you can conform to but they don't have any required methods.
Hi, this a joke refering the [Drawing Paths and Shapes](https://developer.apple.com/tutorials/swiftui/drawing-paths-and-shapes) section where we draw the Badge element. The tutorial are pretty cool for an introduction actually. One think that I would like to be better explained is how state is shared/passed between views (the environment part).
Would be interesting for sure, I wonder if SwiftUI affects this: https://github.com/apple/swift/blob/master/docs/Android.md
Clearly they aren't using the new Mac Pro to do video encoding so we can view it sooner.
:)
I think the hard part is not learning Swift UI, but *unlearning* UIKit/AppKit. I’m reading those tutorials thinks “oh look, a UITableView. A UIScrollView. A UICollectionView” and yet it’s *none of those things. * I understand why the branding of WWDC this year was 🤯
Very cool, hope compilation times will not suffer too much. Also it's interesting that these proposals are not even accepted yet.
Some are up now :)
[They are online now](https://developer.apple.com/videos/) it takes some time until they are available. They are not instantly online
[https://developer.apple.com/documentation/combine](https://developer.apple.com/documentation/combine) is bringing in reactivex coding as well. I really wish they still wrote programming guides :(
I believe that in order to use SwiftUI you need to run Xcode on macOS 10.15. But I haven't confirmed this myself, just read that in the release notes. Will try to get this running on one of my machines this week, so I can update you later.
No, 10.14.5 will work, but you do need 10.15 or even 11 to run “preview”
That's an awesome feature that I can't wait to use. Small side note, did I read incorrectly, or is the `userDefaultsGet()` method not used in the example code? Also, I feel like `Value` should be renamed to `ValueType` in the example because it represents a type of a value, not a concrete value.
Yes, thx for your feedback. Will change it now! :)
THanks, I didn't learn that yet.
Why wouldn't the return inside the for loop run?
Thanks to all the advice so far. Makes great sense. Here I go!
The first WWDC session for it is at 10am tomorrow. I hate that they put it that late in the week
MacOS Catalina is 10.15 even though other ppl should check out 10.14.5
It would return but is not guaranteed to do so in every scenario so xcode will ask for one outside of it or it wont compile
&gt;but also, why are you returning a number? if you were to &gt;move return number into the for loop, it will just return 2 &gt;and end the loop. but after you move it you will be compelled to provide another return outside of the loop which you can do by declaring a variable outside the loop and then updating it with the number you want to return from inside the loop, but this number would still be 2 every time You are right. I don't need to return a value in this problem. I will just take it out. It will solve that error. &gt;also why are you using the while loop? there is nothing inside that loop updating the statement it's checking for. i think a simple if statement will do &amp;#x200B; My intention for the while loop is to test each number in the range to see if it prime. I wanted each number in the range to be tested, for example, if the number is 5, then I wanted the code to run through 5 % 5, 5 % 1, and also, for the while to run through 5 % 4, 5 % 3, and 5 % 2. The reason I have the counter in there is to run the number of time a number would be divisible by other numbers. And since the condition is number % 1 == 0 &amp;&amp; number % number == 0 will always be true, all I would have to do is get one more instance of 2 numbers being divisible by each other to prove that a number is not prime and then I can go onto the next number. But you are right about number % 1 == 0 applying to every number so I will leave that out. The problem I'm having is how to modulus through all the numbers in the range up to the number that is being checked in the while loop. &amp;#x200B; Also, I posted the question twice because I had to problems, one with the unresolved indentifier, which I understand the reason for now, and the other one is help with the code.
Ok, I'll keep that in mind. I just I 'll get the hang of it as I learn about xcode.
Edited as I had posted the name; region link at first. Corrected now to reflect actual code and handle.
You can of it as an UIView, with an imageview and UILabels inside, the UILabels are positioned on top of the image view. Then set the cornerRadius on the imageview and the parent view, and set a shadow on the parent view. I have written a step-by-step tutorial on how to implement the card-like UI here : https://fluffy.es/rounded-corner-shadow/ , hope this can help you.
Thanks, after reading over everyones reply, I understand the error in my reasoning. I'm going to edit the code and see if it works.
Thanks, i'm currently adjusting the code.
&lt;pre&gt;&lt;code&gt; for num in 1..&lt;number { if number % num == 0 { count += 1 } } &lt;/pre&gt;&lt;/code&gt; what's the 1..&lt;number mean or is it a typo of "1...&lt;number"? I got an unresolved operator error in xcode and google didn't turn up anything.
Thanks, the code works. Now I just have to learn what each line is doing. I'm new to coding. I'm going through a precourse program for iOS for a 9 month boot camp program for IOS. Is there a methodology you would recommend for learning algorithms? I thought that I would learn more by trying to figure out the algorithm, write pseudo code and implement that in xcode but I don't even know where to begin sometimes. Would it be better to just google other people's code and learn from them and re-use their code?
It got stuck once for me, but after force quitting and starting again, it worked just fine.
FWIW, proposals are the end of the lifecycle in Swift evolution incubation.
Practice.
it's to exclude the las number in the range, so say number = 5, then 1..&lt;number would be numbers 1, 2, 3 and 4. you don't need to iterate over the last number because it would always = 0.
thanks
I personally find it very difficult to motivate me to read these whole proposals. I try scrolling through them to find a concise “this becomes this” code example, but I usually can’t figure out what is changing. Can anyone explain these two in simple terms?
I believe the issue is that you are using a top-level object when there is none in the JSON, it's an array instead. let downloadedCountries = try decoder.decode(Country.self, from: data) should be: let downloadedCountries = try decoder.decode([Country].self, from: data)
15% of users is a pretty big amount. And that 85% is after a year.
for myself, i find that solving a problem on my own without looking at other people's solution is the way to learn. When you look at someone else's code as a beginner, you are tasking yourself not only to understanding the language, but also their way of thinking, which might not be the only or the best solution to begin with. So my advice is try to solve the problem on your own as much as you can. it might feel slow and frustrating, but that process is what will get you thinking like a programmer. after you find a solution that works or kinda work, then take a look at how other people solved the same issue and you'll discover brand new ideas.
Thanks for sharing your thoughts! &amp;#x200B; In my mind, there was a divide between macOS and iOS developers. If you have been doing development for macOS, employers won't take you because you don't have iOS in there; even though most of the frameworks are shared. Of course, there will be AppKit vs UIKit differences. This will still probably play some role with Project Catalyst, but throwing SwiftUI to the mix seems like a universal platform is upcoming to the Apple Developer ecosystem.
How much time would you recommend that I spend trying to solve it on my own before turning to others for help if i'm really stuck. I was stuck on that prime question for 2 days, working around 8 hours per day.
Nope, management will OK dropping 20% of our user base on the 12th of never :/
This ends up being correct. For some reason I thought I could use a wrapper type object.
If you want to be an iOS developer, you'll need to know the other stuff. Several metric tons of apps are currently using UIKit, and they're not going away anytime soon.
that's hard. 2 days is not unreasonable for starting out and ofcourse you'll get faster as you go. i'd say when you ran out of ideas to try. when i'm stuck on a problem, i usually go to a different problem and keep the other one in the back on my mind. many times a solution reveals itself as i'm trying to work something else out. i say, do what it feels right. if you are engaged and your brain is churning, i would keep going. it's like solving a puzzle. if you are just hating it and have no idea to try, then look it up. do always look up and ask questions about syntax tho. in this case, you had the right ideas and your thinking process was right. things like why is "number" undefined? is something someone else can point out quick without giving you all the answers.
probably for attention, as it was the only reason i clicked on it.
That makes sense, can't turn a big ship like that on a dime. Thanks!
Thanks for the very useful advice. I think you just saved me at least days if not weeks off of my learning just by pointing out the syntax issue. I will keep your advisement in mind and I try to work through as much myself as time permits. Btw, how long have you been programming?
Thanks for the writeup. One point of confusion. In the third paragraph, the last line has `(where String: P and Int: P)`. Should that be `T` instead of `P`.
That would be fantastic! I really hope this is what they plan to do.
This guy does it for a living, I highly recommend checking it out https://www.whatsnewinswift.com/?from=5.0&amp;to=5.1
Absolute beginners. If you know anything about coding in any language, it is slooooow.
about a year for swift. JS for about 5 years.
I highly doubt apple will do it as part of SwiftUI. However there will be another library that will support all platforms.
Nice! This might be a stupid question, but are you a programmer?
If you want to make iOS apps, yes learn swift
Maybe this is a dumb question but is there any order for videos to watch? I'm browsing Apple website and I'm bloated with videos but I don't know which one depends on what. Where do I start?
I'm a designer. I do programming jobs on the side when I have time, but mostly tools for offices to use inhouse, not commercial apps.
&gt; I should probably buy another Mac, because my iMac late 2013 takes about 15 minutes to compile a simple program? Fix (or upgrade) your Mac, first.
They tried that with OpenStep before, and it never went anywhere. Apple has never cared about offering development tools for other platforms. The most likely scenario I see is some random people on the internet starting an open-source project to support Windows and Linux. Seeing all the Darwin/Linux troubles and incompatibilities with Swift itself so far (and the fact that there still isn't real Windows support), though, I wouldn't hold my breath.
I hate that their replacement for Guides is WWDC sessions.
And what do you think I should do? Put an SSD where to load Mac OS?
I’m trying swiftUI and I can’t get simple UI to work as constraints would do in a blink of an eye. Currently there is no way of even styling the table view, or remove the separator or the 8px insets. I’m trying to do an “instagram” like, with square images with a text on top, and I have talked to 3 Apple engineers in wwdc in the labs, and they were not able to do it as well. How would you do square? It’s strange to be moving away from constraints. It looks a lot like Android development 7 years ago, with just linear layouts and absolute layout. Even Android added constraint layout, because it’s a lot more powerful. Also, api is very buggy and a lot of the simple stuff don’t work yet
I agree with my husband.
I really love Rx in C# (and ReactiveUI). That's pretty exciting to see Apple embracing this.
This is a good start, but I still don't understand. What *is* the type of `animal1`, then? How do we know it's a class instance? That came out of nowhere. As a user, if I can't see what "some T" refers to, how do I have any way of knowing if one "some T" is the same type as another "some T"? In this case, for example, if all I know from the interface is that two values are `some Animal`, what reason do I have for believing that a `Dog` method might be valid on them? Do I have access to all properties and methods on every subclass? What if it happens at runtime that it isn't actually of that type? Is this all for performance? Don't existentials serve essentially the same purpose?
We started using RxSwift at work and it’s awesome. I’m glad to see Apple adopting it. Kind of shows where the future is heading and that maybe it’s not just a fad.
an ssd on an imac will make a world of difference.
I had to reinstall the Xcode command line tools. Enter this line in the terminal to install it. ``` xcode-select --install ```
Not really, Start with State of the Union, then move to any intro vids. It's broken down by category.
Must be satisfying work. Can I ask you some more questions regarding my assignment? I'm trying to work through it by myself as much as possible but I'm having trouble identifying where I'm having difficulty in. I seem to understand what the instructions are, but when it comes to the terminologies, i'm a little confused.
https://developer.apple.com/tutorials/swiftui/
I very much doubt that. They want people to develop native apps for their platform, not the others.
[removed]
[removed]
Yeah that's right. I was inconsistent in my use of T/P but in the old revision that would be T... lemme push an edit.
wow that worked like a charm. thank you!
But who and where are these late adopters? Does apple share that info? Because if say two thirds of those late adopters are outside the «first world “ to be honest I don’t care about them.
You can use a wrapper if the top level of the JSON is an object or if you do a custom decoding in your Swift `Codable` type: struct FooGroup { let group: [Foo] } // Custom decoder to handle array extension FooGroup: Decodable { init(from decoder: Decoder) throws { var container = try decoder.unkeyedContainer() print("test") var items = [Foo]() while !container.isAtEnd { items.append(try container.decode(Foo.self)) } self.group = items } } struct Foo: Decodable { let name: String } let bar = """ [{"name":"Afghanistan"},{"name":"Åland Islands"},{"name":"Albania"},{"name":"Algeria"},{"name":"American Samoa"},{"name":"Andorra"},{"name":"Angola"},{"name":"Anguilla"},{"name":"Antarctica"},{"name":"Antigua and Barbuda"},{"name":"Argentina"}] """ import Foundation if let data = bar.data(using: .utf8), let decoded = try? JSONDecoder().decode(FooGroup.self, from: data) { print(decoded) } // FooGroup(group: [Foo(name: "Afghanistan"), Foo(name: "Åland Islands"), Foo(name: "Albania"), Foo(name: "Algeria"), Foo(name: "American Samoa"), Foo(name: "Andorra"), Foo(name: "Angola"), Foo(name: "Anguilla"), Foo(name: "Antarctica"), Foo(name: "Antigua and Barbuda"), Foo(name: "Argentina")])
When you ask what is the type of `animal1` what I am thinking you're asking is this: func f() -&gt; some T { /* ... */ } let value: /* What goes here? */ = f() For `/* What goes here? */` you'll have to let the Swift compiler deduct the type in that situation because every `some T` is different. What you can do is combine this with implicit associatedtypes: ```swift protocol Q {} protocol P { associatedtype OpaqueTypeInstance: Q func getValue() -&gt; OpaqueTypeInstance } struct Foo: P { func getValue() -&gt; some Q { /* ... */ } } let result: Foo.OpaqueTypeInstance = Foo().getValue() ``` For the next question, you can't use a dog method on animal1 and animal2 but the way `some T` returns are made is they ensure that whatever the return type is, they'll be the same specializations always. There's nothing _too_ new semantic-wise with these. I could write all the functions are returning Dog, etc. but with opaque return types I: 1. don't have to write out long names of specialized types 2. can properly interact with objects cast to generic protocols
The Swift core team has said that the property delegates proposal will eventually be accepted, it has just been returned for revisions a couple of times. At this point it's just about a few final details.
Have you accepted the developer agreement on your Apple developer account on the developer website? This has caused some problems with the preview not working. &amp;#x200B; Also check the additional Xcode components are installed.
While I believe you are right, it might slowly became problematic to keep devs loyal to only one platform when cross platform solutions are popping everywhere. And while these weren't really successful they are getting better and better all the time. Just look at flutter I don't think it's as good as native programming also dart isn't and probably will never be on par with swift but it's still a quite nice cross platform solution which is now also going into web development.
Will it replace UIKit? as a swift developer and like UIkit and Swift 4 should I left it and learn SwiftUI ? or it doesn't matter what I'm working with ?
If you're new to development on Apple platforms, learn the existing frameworks first. i.e UIKit / AppKit. SwiftUI is brand new and still in flux (and likely will be for several years to come, just like any framework). If you have a solid understanding of how app development is done currently, picking up SwiftUI won't be a problem.
I didn't see anything about SwiftUI having APIs for it in my searching just now, but I would imagine it's in the works. Even still, SwiftUI is designed to be compatible with UIKit, so I would imagine that this is going to be the way to use drag and drop until they release pure SwiftUI APIs for drag and drop. https://developer.apple.com/tutorials/swiftui/interfacing-with-uikit
sure.
Yeah it’s not a good replacement. I actually didn’t realize they had stopped until I went to read the uiviewcontroller programming guide and saw it was deprecated with no new version.
Now's a great time to learn Swift. Swift 5 brings a lot of great enhancements to the language and Apple has announced tons of great tools this year at WWDC that are aiming to make Apple platforms development even more fun and accessible to more people.
Ok, thank you for the tip!
Dropping 3% of our users base is a hard sell and 6% is a non-starter.
Yes, I saw the conference, SwiftUI is one of the reasons that made me thinking about learn Swift.
Do I understand correctly that some T produces a type erased version of T?
I think Apple's [SwiftUI tutorial](https://developer.apple.com/tutorials/swiftui/) is really good _but_ only if you are already good with Swift concepts etc. If you are completely new to programming I recommend starting with just a regular Swift tutorial (no iOS) and then start to do some tutorials online for simple iOS projects and see how Swift works with iOS. Once you are comfortable with that, then is when I would suggest to learn SwiftUI.
Just want to point out, the included examples show how you can implement these today. You can already create enums and structs as “property delegates” in order to implement custom lazy behaviors etc. What is “forthcoming” are the annotations that auto-synthesize these for you. If you already understand the pattern, nothing is stopping you. The feature is merely a convenience.
When did Swift become open-source?
Will it replace UIKit? as a swift developer and like UIkit and Swift 4 should I left it and learn SwiftUI ? or it doesn't matter what I'm working with ?
I haven't been able to look at this much, been busy. One thing that you do need to change in your ViewController.swift is when you transition from ViewController to SecondScreen, do not use present(). You are using a navigation controller, so you should use it correctly. Change the line self.present(SecondScreen, animated: true, completion: nil) to navigationController?.pushViewController(SecondScreen, animated: true) This pushed the new view on the stack properly and also gives you a back button on the new view controller.
Thanks! SwiftUI looks pretty awesome
I just had an idea for my own app and started doing tutorials on youtube building simple practice apps. Whenever something in the tutorial was applicable to my app i used it and it helped me learn alot.
Hey, futureappguru, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Wow, thought I set up this way already! Thanks!
Thanks, that got me part of the way and I think I figured out the rest. For the record: after that it still finds nil for the file. So I changed the filename access to *Bundle.main.url(forResource: "myfile", withExtension: "csv")* Instead of using FileManager.
I just tried running it again and for some reason, it threw me errors every time I clicked a cell after I started my screen recorder (definitely not related to the S.R): "OpenDocument[1034:216164] Could not signal service com.apple.WebKit.Networking: 113: Could not find specified service" Will research this, apparently it's not uncommon...
Is it just me or does SwiftUI syntax seem ALOT less readable? Yes overall it seems to make everything a lot easier and more seamless. Also I have no experience with Flutter. Maybe it'll just take some time to adapt...
That's true about basically all features lol (see: guard). There's usually some way you can still do the same thing, just the feature makes it easier and more logical.
https://developer.apple.com/videos/play/wwdc2019/402/ Watch at 14:14. Swift creating a Docker image and Swift NIO for building services. Think of server side Swift.
Have you ever worked with react? It’s kinda similar to that. Declarative frameworks in general take a little while to get used to
cool
I am having the same problem with the beta.xip. Will try some alternative approaches and report back if I have any luck.
True. (see: Int(1)) :p I’m all in favor, just saying, if someone happens along here and was interested in how to solve “immutable lazy var” in a really nifty way, the proposal both introduces and demonstrates how to make a “property delegate” from scratch.
Yeah that’s true. It’s a problem I’ve had in that past that I’ve shamefully solved by making the variables mutable... thank god these are just my own side projects and not actual industry code
I'm really not big on the syntax though. @functionBuilder struct HTMLBuilder { All of these annotations are making things ugly fast: func body(@HTMLBuilder makeChildren: () -&gt; [HTML]) -&gt; HTMLNode { return HTMLNode(tag: "body", attributes: [:], children: makeChildren()) } Then there's this gem: &gt; Therefore, we are proposing a model where the need for a function builder transformation can be inferred from type context, which is somewhat more “magical” than Swift generally prefers but also allows very lightweight-feeling DSLs, with the hope that the guidelines we've laid out in this proposal will help to limit abuse. Yeah, just say no. I'd rather have things be a bit more declarative and heavier weight than this type of "magic". The same goes for property delegates: &gt; @Lazy var foo = 1738 &gt; &gt; translates to: &gt; &gt; var $foo: Lazy&lt;Int&gt; = Lazy&lt;Int&gt;(initialValue: 1738) &gt; var foo: Int { &gt; get { return $foo.value } &gt; set { $foo.value = newValue } &gt; } Honestly, I'd rather use the translation and be explicit than use custom annotations like that.
If the code block creating a stack view and two labels with UIKit is difficult for the author should read, I don’t care what he thinks about building UIs.
You can run El Capitan on it with a patcher available on online. I'm on mobile, but if you google "running El Capitan old macs" you'll surely find it.
Why?
I am completely new to Swift and just wanted to try and program a simple calculator to calculate ABV. I am running into issues getting information from some text fields. It's probably an easy fix, I am just super confused. Code: import UIKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view. } @IBOutlet weak var originalGravity: UITextField! @IBOutlet weak var finalGravity: UITextField! @IBAction func Calculation(sender: AnyObject){ var Constant = Double(131.25) var OG: Double = Double(originalGravity.text)! var FG: Double = Double(finalGravity.text)! } } When I am trying to initialize the variables for my OG and FG in the calculation IBAction, I am getting an error that says " Expression type '@lvalue String?' is ambiguous without more context " on both of them. Please help.
I talked with the engineers today during a lab and they said that it is possible. They have gestures and using GeometryReader and DrawingGroup you can position/draw whatever.
i highly recommend Apple’s book on iBooks AP swift and do lots of tutorials with ray wanderleigh theres loads of free content plus they sell books. i also recommend looking on github and going thru the data structures and algorithms to get used to syntax and logic
One of the weirdest things to me is the syntax for the label part of Toggles. The fact that the label part is not just a view to the left of the Toggle in an HStack is throwing me off
Shoot, sorry for providing a subjective opinion on the relative verbosity of UIKit code on my personal blog— that definitely discredits me summarizing a language feature spec. Next time I'll be sure to call you up to get your approval when I say writing iOS apps in C with ObjC's messaging API is an error-prone.
Honestly I'm totally convinced reactive programming is the future. Really excited to see iOS development moving in that direction
it's a good point you bring up with how swift is taking an weird path when trying to achieve the conciseness of a dynamic language but still trying to maintain it's explicit, safe nature. I do like the proposal which makes interacting with dynamic objects a lot more natural but kinda disappointed to see such liberal use of annotations with significant semantics.
Might be interesting but what I think a lot of programmers generally prefer to stick to a specific niche they are interested in. I do language dev so for that there's already things such as the r/ProgrammingLanguages subreddit and discord and for ios theres r/swift and also r/iOSProgramming. So I don't know if you're app proposal is for IRL meetups etc. but as far as like an online community goes I think things like subreddits, IRC, etc will probably appeal to more programmers versus a generic overly broad community.
It's possible to learn swift on windows but if your goal is iOS development it's gonna be hard to get anywhere without Xcode. SwiftUI is a library for swift so you'll need a solid grasp of the latter before learning swiftui or even uikit for that matter.
Use Terminal. For example: xip -x \~/Desktop/Xcode\_11\_Beta.xip
Paul Hudson’s SpriteKit videos are excellent: https://youtu.be/TJfh8wXbfEw
Yea, not sure how I feel. Feels like Apple's UI Framework leads are designing the language and not the language designers.
Hacking with Swift without a doubt an amazing book. I’m currently going through it and after trying a lot of tutorials, this one takes the cake. Paul Hudson makes SURE that you know your shit by enforcing challenges and challenge projects. You learn a significant amount within the first 2 projects and it’s a ton of fun. He’s also on reddit and sometimes makes posts on here too! Also, he’s a doing a WWDC sale right now where you can buy each book for half the original price. I think it’s going for $20 right now. Would recommend to anyone in an instant
So is this new SwiftUI thing going to be able to replace normal swift coding like you do with UIKit? Or is this strictly for making the look and UI of your apps easier, while still needing to do all the normal coding?
Jut noticed your user name. Thank you for the hacking with swift courses! I feel so overwhelmed with how it seems like every tutorial video has someone that just seems like this stuff is child’s play, and I’m always wondering “how in the world did they know to use this and that” Hoping it’ll start to click haha
Nice! How’s it doin?
Chris Lattner, the creator of Swift, has left Apple a two years ago. Yet, it's a little early to say Swift has lost its direction. It's been going solid so far.
You’ll want to look up optionals and forced unwrapping to figure out your fatal error problem.
I know you said free, but for only $10 you can buy a pretty extensive class on Udemy. I think she’s a great teacher. I’m about 1/3 through and it’s great! Link below: https://www.udemy.com/ios-12-app-development-bootcamp/
Great write up. Please do more 👍🏾👍🏾. As I was watching the keynote, when I saw the SwiftUI code, i was baffled; it looked so strange. Was wondering is that Swift?! Would love to read more about the magic behind this.
I (who has three years of experience of Swift programming) really enjoyed the video, and learnt from it! You just got a new subscriber. 😊 SwiftUI is new for all of us, so don’t be scared of posting beginner stuff on here. I can’t to use this “in the real world”. I would love to see a tutorial where you use (and change) the state as well. Maybe having a list of tourist attractions, where this map view controller (what was the new name again?) is shown based on the attraction you tap. And bonus point for building iPad and Mac apps. (Man, I cant wait for the new OSes to be released publicly!)
Seems to be my understanding as well, thank you!
Thank you!! Did you get the vibe that it’s sorta a next year thing?
I'm going to buy MacBook but not now because, I need buy a new phone becouse my current is half dead. Newest macbook air would be enough or should I invest in MacBook pro from like 2015/2016?
Hi going to buy macbook but not now because, i need buy a new phone becouse my current is half dead. newest macbook air would be enough or should i invest in macbook pro from like 2015/2016?, I'm dad.
My MacBook is from 2012 and 10.15 works fine it (maybe a bit slow in some places) so while I'd always say get newer model if you can afford it, slightly older model is fine.
You can do this with Vision API and Core ML. Try https://developer.apple.com/documentation/vision
This is great! Thanks OP!
Out of interest, why would you be limiting your app to iOS 13 only ?
Rock on.
If you're having problems downloading Xcode 11 Beta with your Apple dev account, you can go to [https://xcodereleases.com/](https://xcodereleases.com/) and download it from there.
The syntax on SwiftUI kinda reminds me of Dart in Flutter, kinda
The magic is detailed in [the associated SEP](https://github.com/apple/swift-evolution/blob/9992cf3c11c2d5e0ea20bee98657d93902d5b174/proposals/XXXX-function-builders.md). :)
I can't even go back to OSX Mojave. This sucks.
I really liked your post! Keep it up and thanks for the preview! My main doubt about swiftui is the capacity to handle most complex ui layouts like your own collection layouts and that kind of stuff... but its amazing to see apple moving from mvc and using more advanced mecanisms like reactive behaviours.
Terminal and the command "*xcode-select --install*" can save you a ton of headaches. This should let you know if your command line tools are up to date.
I believe it will yes.
Great post— interesting to see examples on how SwiftUI, Combine, and all the other new features play well together. Also regarding your GitHub example code, I made a GitHub client a few years back and it's amazing to see how much shorter implementations are with the new SwiftUI features.
I had similar questions at first but after looking through APIs honestly I'm much more confident large-scale apps would be able to be shifted. A lot of people compare SwiftUI to the Reactive explosion in the JS world, and while they are very different I think the way reactive paradigms have held up to complex apps in the JS world is a testament to the same in the iOS realm.
I tried this course but I didn’t take away much from it. It was a good course to introduce you to iOS development but I didn’t really learn much copy and pasting. Everyone has a different way of learning I guess haha
That was my first thought too!
It’s my own app that’s a year in the making, but not released yet. Taking my time to make it perfect and that’s probably going to take longer than September to accomplish. I’m fine with rolling out to a smaller user base in the beginning and use the next year to iterate on it with my initial user base.
How does a function builder know what to add to the children? Is it just any like whose return value is ignored?
What tools do I need to learn in Swift to implement security measures for a banking app?
Thanks! How could I make it so that when you slide it brings up other cards? Like a slider but with the cards?
You mean like a table view containing the cards? I have implemented it in this repository: https://github.com/fluffyes/AppStoreCard
Yes, but is there a way I can do it horizontally?
You can use a collection view and set its scrolling direction to horizontal, the code should be similar
Okay, thanks!
I'm guessing in their frustration they are saying that by updating it spoiled xcode and it's not safe to do this at work because they can no longer work
If you're going to ask for help on reddit at least learn how to paste code.
Depends on how you wanna go about it. The best way is to use a service like Firebase to host your database that you can then update. That way every time a user is using your app you fetch the info. If you’re concerned about data limits you can make firebase reply with a json and all you need to do is add an etag to the request.
Are you on macOS Catalina? It’s needed for canvas.
Man, try using the search function, its the foundation of any good programmer.
You need the macOS beta as well - Mac OS Catalina
SwiftUI is coming up, what would future be regarding RxSwift? should I continue learning it? 🤔
Great Post. Do you guys think that even in real-world apps with complex business logic we'll be able to just go with injecting our decodable models/API Services directly to the Swift UI Views? I was wondering if some existing design patterns like MVVM would continue to be relevant, specially since with Swift UI we have this reactive binding which works really well in MVVM. But i haven't wrap my head around how it would work with Swift UI yet. Any thoughts?
I'm so freaking excited to start working with SwiftUI. I have an older Macbook Air (2014, yikes) that otherwise works really well for development. Well, fairly well. Is it worth it to install the Catalina beta so I can work with SwiftUI with the latest XCode Beta? Since I can't release any apps using SwiftUI just yet I feel like why bother at this time, but I really want to start playing around with it.
Maintaining separate codebases for separate Apple platforms is less productive, not "hardcore." You can either fret about it or up your game and adapt.
I'm loving it! I'm just thinking of some of the "old timers" who hack MAKE files and live their lives at the command line, what they think of this "new stuff." :-)
The compiler applies a transform to your function body, where the result of every expression with a return type is passed to builder. So if your closure looks like this: var view: some View { View1() View2() } The compiler sees it like this: var view: some View { builder in let v1 = builder.buildExpression(View1()) let v2 = builder.buildExpression(View2()) return builder.buildBlock(v1, v2) }
Great job, thank you!
&gt; I'm just thinking of some of the "old timers" who hack MAKE files and live their lives at the command line, what they think of this "new stuff." I'm thinking they could care less since they weren't doing UI programming anyway. And let's not act like make is all that far removed from SwiftUI. They're both declarative DSLs that allow you to build a product. SwiftUI builds UIs, make builds executables/libraries.
I‘ve been working on that at WWDC for a bit now and it doesn‘t quite work out of the box, at least for me. You can set the viewModel as EnvironmentObject of the view and call didChange on a PassthroughSubject whenever the viewModel has updated data. But to be honest, I don‘t feel like this is particularly nice because in the end I have to manually send the notification about an update (which feels like a plain observer pattern I can do without combine and swiftUI). However that is what Apple Engineers recommended to me in a lab. Also, this is only covering the one-way binding from the viewModel to the view, it does not yet cover the reverse track. I thought I had a solution (it compiles and looks like it makes sense), but it keeps crashing. It gets even more complicated, when your host application would like to do MVVM-C. From what you see, the new SwiftUI View object is living in a UIHostingController container, which is a UIViewController and therefore the bridge to UIKit. Now if I did not want to use NavigationButtons in my view since I want to extract my navigation logic into the coordinator, I will need to be able to push multiple UIHostingControllers into a single UINavigationController. That, however, crashes for no apparent reason. I honestly have mixed feelings about the whole SwiftUI topic. It crashes a lot without telling you why if you try to do something that is not as simplistic as Apple‘s samples. Also, the documentation even in the header files is almost non-existent. UIHostingController has a stunning 0 lines of documentation. But most importantly, SwiftUI changes the paradigm from MVC to just MV. Had a talk with an Apple Engineer about that yesterday and he confirmed. Logic goes into the view. States go into the view. The view is inside the view. Everything is in the view. UIViewController was alread pain in terms of unit testing considering its lifecycle and events. But with the SwiftUI view they‘ve added another layer on top of that, which makes it even worse and I‘ve not seen unit tests mentioned anywhere in the entire documentation of SwiftUI. Its like they haven’t even wasted a thought about it. I like the concept in general, but I would have wished for something that is just declarative UI creations, without any logic.
Thanks for the detailed and informative comment. I'm holding out until the GM in September before commenting negatively on SwiftUI. It will undoubtedly receive a number of bug fixes before it's ready to drive a production app, and the documentation might even change slightly until then. I am curious in how one would implement MVVM-C with RxSwift using SwiftUI and Combine instead.
That's what you'd think about interface builder but there's a lot more involved. The easy stuff will be easy but the hard stuff may be more complex.
It seems like a use it as soon as you can target iOS13 kind of thing. It mixes well with UIKit/AppKit so it should be pretty easy to slowly move to it if you have a large code base.
Try https://developer.apple.com/videos/all-videos/ and then filter based on WWDC 2019. Should get you the latest and greatest.
We don’t have collection views for now. But we have UIHostingView, so that is how we can wrap SwiftUI inside UIKit.
Wait you're married??? Since when!
I tried to paste from Xcode and the formatting is lost. What's the best way to paste from Xcode without losing the indentations. I read through the formatting section to see how I can format a code block, and it instructs to add 4 spaces but that doesn't seem to work. Can you also advice on that?
That's right you dumb slut, you weren't invited, go drown in a sea of liquor after your 8th divorce, people like you never change and Paul and I felt compelled to exclude you from the ceremony because *we just knew* you'd make it a big scene. Tldr- eat shit and die
sorry who are you? this sub is for coding, not kink shaming. if you wanna get "schwifty" this isnt the correct sub.
http://lmgtfy.com/?q=how+to+paste+code+in+reddit
This is my assignment: &amp;#x200B; */\** *Rewrite the above function so that it's two functions. One called \`printPrimes(upTo n: Int)\` and the other called \`isPrime(\_ x: Int) -&gt; Bool\`. \`isPrime()\` should return true if the passed in number is prime, false otherwise. \`printPrimes()\` should do the same thing as before, but should call \`isPrime()\` to check if each number is prime.* *\*/* &amp;#x200B; *My problem is that I can't figure out the logical sequence of the answer. From the question, it seems like I have to leave printPrime() as is from the previous problem. I pasted the code from the previous problem, which you helped me in. I'm suppose to add another fucntion called isPrime that is suppose to take the output of printPrime, which is the counter == 0, and print out true if it is 0 and print out false if it is != 0. My problem is that I don't see how I can link them.* (I pasted this code from xcode and it wipes out all the formatting which makes the code very confusing to follow. What's the best way to cut and paste code so that the indentation is retained.) func printPrimes(upTo n: Int) { for number in 1...n { var count = 0 for num in 1..&lt;number { if number % num == 0 { count += 1 } } if count == 1 { print(" \(number) is prime.") } } } printPrimes(upTo: 100)
Exactly. And most likely, Swift 5.1 will also be available on iOS 11 / iOS 12 (So far Swift core haven't had platform version limitations), which means we can build some insanely powerful code for our existing apps.
Thanks, it worked. The formatting was retained.
Excellent
Our UI on iOS and macOS is vastly different and the platform independent part of the business logic is already shared.
I was wondering the same thing. What do we do if we want to make something that’s a little more customized than a list setup? It’s a breeze and a dream to make most of the basic stuff, but is it possible to handle specific gestures, query an object’s frame, etc? The declarative syntax is so nice, but sometimes I’m not sure how to do things I normally would do.
Thanks for the response. That is really interesting and i share of the same mixed feelings you have. It does seem that single responsibility will be impossible with SwiftUI, i hope there's a way so solve those issues. Since it's a completely new framework and there's a lot of magic happening behind it i'm confident that once we understand it better we'll be able to use it in different ways
it's very similar but it better then flutter
As an English major who hated storyboards and decided to learn to do UI in code, I'm excited about SwiftUI.
The canvas is only available on the Catalina beta
Have you installed the Catalina beta? That is a requirement.
Hi, I am new to swift, I wanna build a simple audio player that plays a live radio stream from the internet. &amp;#x200B; Can you kindly guide me where to start? &amp;#x200B; Thanks
I am playing around with Swift and trying to create a social media platform(I am new to Swift). I used the prebuilt Firebase UI system to help create and manage users. The problem I am running into is that the prebuilt UI registers users with an email. I want users to have an unique username. I have an editprofile view controller where users can insert their information and another view controller for users to set their username. I am try to code it so once the user sets their username it will be there forever even if they quit, delete or sign out of the app. I also want the username to be displayed on their profile and on the home feed like Twitter and Instagram. Any help would be appreciated.
what you need to do is refactor(split) the solution i helped you with into 2 functions. isPrime would be the innermost for loop because that's where you check if it's prime. so take that part out and write is as a function but instead of printing "is prime" have it return a bool - not print out true or false then you keep the outer loop as is, but instead of writing another loop inside of the for loop, you call isPrime() and pass in each iterated number. check the return bool and if it's true(prime) print "is prime", else continue by the way. my solution wasn't completely right as it skipped 1 as a prime number. i edited it, so take a look at my change to format code on reddit, first start a codeblock in a blank line, and then paste your code in. or edit your existing post by typing in the indents
Have you bothered to try searching before you posted this question?
Great post, thanks!
&gt; I'm loving it! I'm just thinking of some of the "old timers" who hack MAKE files and live their lives at the command line, what they think of this "new stuff." NIBs started as a binary serialization format, then became XIB but with a horribly verbose and redundant schema, and then a much more concise schema, and now finally we can write user interfaces in a few lines of source code. Apple even advertises that it's now "Diffable". Those "OLD TIMERS" who "HACK MAKE FILES and LIVE THEIR LIVES at the COMMAND LINE" (??) are the very people responsible for driving the development of a user interface definition language that doesn't totally shit on your version control system. You're welcome. &gt; Like what's driving it? In the end, everything kind of looks like Javascript. Everything has the structure of Algol, the aesthetics of C, and now finally some of the features of Lisp. "Everything looks like Javascript" only because Javascript looks like a mishmash of all the winners of 50+ years of programming language evolution. But of course, these days everybody just wants to be a "hardcore coder" and not a student of their field, so nobody bothers to learn the history of anything they're using. So, yeah, sure, it's just like Javascript. \*shudder\* &gt; And was designed by linguists, not hardcore coders. I'm not sure what this even means. Many of the best programmers throughout history have been linguists. It's insulting to imply that linguistics is somehow incompatible with computer programming. That lexer you're using didn't come out of the PC demoscene.
It’s made for AI to be able to understand. Yes, double your salary. Day 1. :-) Once AI can figure it out, we’re all out of work, but that is still a few years out. That’s the “shareholders” plan. Replace coders with algorithms, cut those cost to $0. And stocks will soar. It’s all planned out. :-)
You sound a little like a conspiracy theorist, tbh. This just seems, with only a short time playing around, like a big win for developers by taking something which, in my experience, was horrible and replacing it with something altogether less horrible.
Have you had any success with clicking the Mac checkbox and building something that doesn't generate a black window?
http://osxdaily.com/2019/06/04/macos-catalina-compatibile-macs-list/ TLDR: It will run on yours
Awesome. Thanks! Looked the other day and hadn’t seen anything yet
Your concerns about crashing sound like "beta probs" and I would expect them to be fixed in the future. On the move away from MVC, I think the thing that makes this more reasonable is that views can now be so much smaller. There's also nothing stopping us from putting logic in a non-view class. I'm going to have to look into it more to see how things work in practice, but I remain hopeful
Yes, and Google was not ready to handle SwiftUI as a term. Most results are Swift + UIKit related, and the only SwiftUI resource I could find was Apple’s documentation page as of yesterday.
As in search this subreddit, you're like the 5th post today with this question..
Darn it that’s why. I guess it wasn’t prominent in the doc, and Apple didn’t bother to prompt this when I was switching to Editor + Canvas. (but it’s beta 1 so quite understandable) Thanks.
Thanks! That explained everything
Lol no... I usually search reddit by querying “Keywords Reddit”
Download the wwdc app. There’s already over 50 videos on it from this week.
Yes, yes. This will do.
ABI Stability is huge. Expect to see Swift a lot more now that it has achieved that.
Im gonna try and rewrite my dnd app with swift ui. We probably wont start using it at work in quite some time but I wanna be ready when we do.
An argument parser and reviving my tool to import libraries into swift scripts
I have been trying to create a script that plays one of two .mp3 files &amp; scrubs to a timestamp based on the time of day. I am currently having trouble getting swift to select the files to play. [I was trying to use this but I cannot figure out how to have it select my file.](https://www.hackingwithswift.com/example-code/media/how-to-play-sounds-using-avaudioplayer) ` import Foundation import AVFoundation var beforeNoon: AVAudioPlayer? var afterNoon: AVAudioPlayer? let path = Bundle.main.path(forResource: "12am_12pm.mp3", ofType:nil)! let url = URL(fileURLWithPath: path) do { beforeNoon = try AVAudioPlayer(contentsOf: url) beforeNoon?.play() } catch { // couldn't load file :( } // grab time let date = Date() let calendar = Calendar.current // set hour &amp; minute variables let hour = calendar.component(.hour, from: date) let minute = calendar.component(.minute, from: date) print(hour) print(minute) // if &lt;12h select track am, otherwise select track pm (set variable) if hour &lt; 12 { // select 12am_12pm.mp3 print("Before Noon") } //if = select track a else { // select 12pm_12am.mp3 // subtract 12 from hour &amp; set varible let scrubHour = hour - 12 print("Past Noon") } // convert hour &amp; minute to seconds //play file at seek time // airplay audio // watch airplay to end // if ended then set volume to 25% &amp; pause `
i started making my first game about a year ago. i started out in unity and then moved on to scenekit. i found myself making more progress in scenekit than unity and the compiled game was a fraction of the size of the unity version even tho it didn't include any textures and all assets were code generated. i'm also liking swift a lot more than c# and swift is more useful to a mac user like myself than c# (imo). also being able to integrate all native frameworks available to mac os into my game is great.
I agree swift is awesome. It should be more widely available.
Thanks so much for your help. I was able to complete the 2nd part. Here's the code: (I tried to paste in the code after using 4 spaces and this is what it looks like. It works for post , but I guess not replies.) func printNumbers(upTo n: Int) { for number in 1...n { if isPrime(number) == true { print(number, "is prime.") } } } func isPrime(_ x: Int) -&gt; Bool { var count = 0 for num in 1..&lt;x { if x % num == 0 { count += 1 } } if count &lt;= 1 { return true } return false } printNumbers(upTo: 10)
one thing about unity i wish scenekit had - actually Metal and Xcode, is a shader editor/builder. metal shaders is not a thing i'm interested in learning, i rather have a high level interface for them.
that looks good. one little refinement. isPrime() is already a boolean, so no need to make a comparison to true which creates another boolean. so all you need is if isPrime(number) {
Are you using the CBOR data format in practice somewhere and if so why you choose it over JSON or Protocol-buffers? Congrats on your first lib! Hope it will attract a lot of GitHub stargazers!
I've been doing some reading lately about FIDO2 authentication and some of its message components are encoded in CBOR. So in practice if I decide to work with FIDO2 in Swift this library will come in handy. :)
I get it now! That's the sign of an experience coder and a newbie, lol.
Can "ObjC introspection along with runtime library injection" be used on iOS? This seems like it's only applicable on macOS
I don't think this is it at all. I've seen a bunch of people I know, coders, saying that now we're all gonna be out of a job because any designer can now build an app. I know most—if not all—of them are just joking and exaggerating, but I definitely don't think this is at all the direction SwiftUI is taking us. Instead, it's making the most menial and least interesting (and, in a way, least important) part of coding—that is, pure front-end—easier and quicker to do. This means that coders can do what they do best, which is actual code, logic, etc. This means that, for instance, I who am a coder with some sense of design but almost no patience for auto-layout and that kind of stuff, can build the apps that I would like to build with less focus on the parts that I suck most at doing (and have the least passion about, which meant they were the parts I was most likely to drop a project at), and more focus on the stuff that was really at the core of the app. inb4: I do not mean any disrespect towards designers, and when I say front-end development is the most menial and sometimes less important part of a project it is not trying to undermine the importance of design, UI and UX. I know how important and difficult those things are, and I know that they can make or break an app as much as the app's actual functionalities. However, they are the most "empty" parts of programming, specially in the cases that were exemplified in the keynote, table views, and simpler UI and lists, etc. These are all things that can be a real headache to implement today, while also not having that much of the logic of the project, and thus being very mindless work that's more about getting things to show up in a certain place, or look a certain way. It's almost HTML/CSS.
Nice! I’ll have a read at the code and provide feedback :) Thanks for this lib
Yeah, also new MacOS will support UIKit framework, so old iPad apps will be runnable on mac
I’m starting to warm up to SwiftUI. Just absorbing it all. :-)
You can use UIHostingViewController to wrap SwiftUI into UIKit and you can use UIViewControllerRepresentable to wrap UIKit into SwiftUI.
Not yet)
I think it’s really awesome. As a 100% coder who loves programming, I’ super excited to try it out and get a few of my projects that I stopped because of UI to actually take off. Maybe now I’ll put something on the appstore.
I’m glad it’s not just me.
Sorry if this is a stupid question, but does that give you access to all the properties we’re used to, and allow you to control it the same way as you would in an MVC setup? I’m still wrapping my head around getting and setting properties using the new syntax.
RemindMe! 3 days
Yep. Strong enough for dev work
I will be messaging you on [**2019-06-09 22:57:51 UTC**](http://www.wolframalpha.com/input/?i=2019-06-09 22:57:51 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/swift/comments/bxn0dw/macmini_egpu_good_entry_machine/eq8akwp/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/swift/comments/bxn0dw/macmini_egpu_good_entry_machine/eq8akwp/]%0A%0ARemindMe! 3 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! eq8am0i) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Thanks man!
Yeah, it will give you all access to properties of UIView/UIViewController. There is special tutorial about that https://developer.apple.com/tutorials/swiftui/interfacing-with-uikit
SwiftUI is Component-Oriented framework, just build a lot of small views around your data. UI = f(state)
I’ll check it out! Thanks!
It can be two way binding, I my example we use state for 2 way binding. Same with @BindingObject.
It respects to Single responsibility by building small views according to small piece of data. You are just building a lot of small components rendering your model.
That came with the Swift 5.0 release that is already available to production applications.
I see the opposite. Coders no longer need to outsource menial UI. I'm excited for it.
I've been developing at work using Xamarin, and have toyed around in my personal time with Flutter, but I've thought about diving into a native language. That said, is there really much reason anymore to bother with objective-c, or could I just go straight into Swift without any reservation?
In loving it. Just the initial, what the heck is going on! I’m a convert. :-)
I just got an eGPU with a Vega 56. The geek bench scores are 2x a MacBook Pro with an internal 580. I love it so far.
This is a really neat article - I was a little scared looking at the example code for SwiftUI since so much of it looked foreign, even though I've been keeping up with modern Swift. Happy to see most of the new features are not just 'magic' that Apple conveniently built for themselves.
Swift. Obj c ofc is still in a lot of legacy code bases but the future is here. Swift being the language to write for all apple devices will finally kill objc once and for all
If you're just getting started and are looking to design basic apps and stuff. No there is no point. If you're looking to get into a firm somewhere then yes obj-c is most likely going to be a requirement.
Not sure if this one is helpful. I generally skip the videos these days and go straight to the api diff’s on the developer site. If there’s anything I want to know more about I see whether there’s any wwdc sessions for it.
Oh well if you want to do extensions on iOS, beyond what Apple explicitly specified for App Extensions you'll need to jailbreak.
So I understand the `some` keyword, but I’m still confused why it’s needed here? If I understand correctly it will add confusion when the user wants to return different types in an if-statement (the article points to Groups to solve this). And what’s wrong with type erasure here? Wouldn’t it be enough for SwiftUI to know that it returns a View?
&gt; standard library or 3rd-party modules Swift Package Manager?
Swift can in theory run on Windows (to my knowledge there's no official support but there is a open source community effort) but it's pretty difficult to compile so I wouldn't say it's very feasible for that. Also you'll probably have to write some C++ bindings/C-interop within your swift (you \_could\_ try to use Swift's Objective-C++ interfacing to talk to Qt and V8. If you get this to work that'll probably solve most of your problems. I once integrated CPython with my iOS app this way works beautiful). That said if you are able to compile and bundle the Swift for windows you should be smooth sailing from there but that in itself is a feat.
At this point in time it will be quite hard I think. I have this discussion from time to time with colleagues since we would love to share Swift code. We keep coming back to two main issues at the moment: 1. Swift runs on a few platforms, but only Linux and Apple OSes are really supported. So going to Windows for example will be quite a hassle working with experimental stuff that will break. 2. If you get it running you want to talk from/to your Swift codebase to the other language. This will be a not so nice experience. Since most language don’t have any (good) interop at the moment and eve. If you have it the types you use will be restricted and need to be written in both languages. (For example if Swift returns an enumeration with associated values how will you represent that in JavaScript?) All in all this makes that while we would love to have this we never really did a (hobby) project with it. Even if you have a lot of very complex business logic it’s worth thinking about it en then you’d probably also be willing to use another language where other people fixed more interop issues for you. Like C, Java or so.
I have the 2018 Mac mini i7 with 32gb ram and egpu (RX580). It’s a beast. I also have a 2018 15inch mbp and the Mac mini is much more preferable work environment as long as I am at my desk. My Mac mini has several server jobs it runs constantly, a Windows VM running just about 24/7, and doubles as the Xcode and video editing station. I’ve never had a problem with it or felt like I was limited by it. It’s a really under rated machine imo.
Get at least 16 GB of RAM and an SSD. Quad core and you're good.
How does that name work out for you, gotten anything good? :D
Hi there, I'm completely new to Swift after taking Computer Science for 2 years in HS learning Java. I was wondering if any of you guys here have any advice that could possibly help me in learning Swift, as I want to create an application and hopefully upload it to the App Store. I've been following Code With Chris' tutorial videos on YouTube, and it seems to be helping. Are there any other resource(s) that you would recommend to me? And if any of you have taken Chris' complete iOS course, how was it? Thank you ahead of time for all the help.
Not really, most of them impossible. And the others are things that won’t take off, like an app to chat while you’re on the toilet.
The main reason is, the views that you make in SwiftUI inherit the `View` _protocol_. And because of some Swift quirks you cannot return/declare a field of `View` (`let x: View` would be invalid because `View` is a protocol that uses self). (self-promotion fyi) To understand why this limitation exists [I wrote a quick read about it](https://blog.vihan.org/opaque-types-in-swift/#example).
Totally agree with the emphasis on extensibility— makes it a much more complete and flexible language but imo also makes it a lot easier to program when in a framework you can understand \_how\_ things work rather than being told 'just go with it, Swift magically does it'. Rather than wonder why your app isn't re-rendering, knowing that state management isn't magic you can think oh wait it's actually because I forgot a @State attribute or something like that.
Oh I see, AND you get the option to specify if you want, now I get it.
Do you have any source reference to this? Would love to read more about the implementation details. Currently, the SwiftUI syntax is still kind of magical to me. Was there a specific WWDC session tackling these kinds of things? Thank you!
After today’s talks, add RxSwift too to the lost of obsolete trailblazers
I’m starting a new app for my WooCommerce store. Hope to make it generic enough to be able to use for other people’s stores
Pardon my ignorance, but what’s IB?
https://wwdc.io Use this macOS app to search for sessions by keyword or just browse by year, topic, etc. Mark sessions as Favorites for later reference. Download sessions for later viewing, or just stream the directly. Also, go to this site to search through session transcripts for hits on your search terms: https://asciiwwdc.com. This one doesn’t cover WWDC 2019 sessions yet, but it should soon.
Another significant difference: Kotlin originated on the JVM (though has non-JVM implementations now), and thus its data model is very Java-like, with data being passed by reference. Swift leans more towards value types (outside of classes, which are reference types), with the compiler doing some clever copy-on-write optimisations to keep it efficient.
Yeh I can see designers building Core Data models, hooking tableviews up to NSFetchedResultsController, making data calls using NSURLSession, handling notifications. Give me a break.
Not really much. Most of the changes are more optional. For example, switching your interface code to the new SwiftUI framework. I will say that if your app offers a log in with Facebook/google button you NEED to include log in with Apple now. So there is that small thing.
Can this be used on older versions of iOS or will it require a deployment target of iOS 13? I'm assuming it won't be backwards compatible which means a lot of apps won't be able to implement it for a while unless they want to exclude a decent chunk of users.
You can’t use SwiftUI on anything below iOS 13.
TableViews (and CollectionViews) are all gone now. It’s all lists and stacks.
I would add that you could include swift5.1 changes to the list. But that is not a needed change, more an improvment.
What about register with email/password. Is that still allowed?
Correct me if I’m misunderstanding but I think you’re exempt if your app is built on Facebook or Google (for example if your app is a tool for Google Sheets) and offers only one or the other for signup/login. Where the requirement kicks in is if you’re offering multiple sign on options already.
Try recentScoresArray[1]
Label.text = yourdouble.description
Hey! I PM’d you that idea in confidence!
```One of the other areas where it can helpful is when the protocol has associatedtype or Self requirements. Normally, when you return such a protocol, the compiler will emit an error which many of us might have seen countless times:``` Right this bit me so many times going a bit deeper with generics. You'll end up with [url=https://www.google.com/url?sa=i&amp;rct=j&amp;q=&amp;esrc=s&amp;source=images&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwiciuvF09fiAhWmk4sKHereClkQMwhmKAAwAA&amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDroste_effect&amp;psig=AOvVaw1_fqF1c98zZ_ZMN7buoMbZ&amp;ust=1560006588987428&amp;ictx=3&amp;uact=3]Droste[/url] generics sometimes, just because you can't simply do that.
Most of the changes don't affect current apps because most of the stuff requires iOS 13 and it's not reasonable to require it. Most of the stuff will take a while to trickle down to current apps - its apps that are about to be started that will have the most "changes" made.
Thank you! Saved me a bunch of time and frustration.
Thanks for responding.
That seems logical. I’d imagine you are correct but I haven’t yet done enough research in the docs to confirm that.
Thank you for being polite. :p
Yea, but it's not really an extra feature, like adding touch feedback when available. Implementing it twice makes no sense, since the UIKit version will still need to be solid and would work on all devices anyway. Why maintain two versions for a long time? Just transition piecemeal when the time comes that it's supported on all versions you support.
This is exactly the reason why pretty much any company that has an app that supports &lt;iOS 13 won’t be using SwiftUI for a couple of years.
They're superficially and aesthetically similar. Internally, they don't seem much alike -- and this article doesn't do a good job of showing the differences. Their runtimes are *completely different*, yet the article barely mentions the JVM or Objective-C. &gt; Many experts feel that ... Yow. I haven't heard this many weasel-words since the last International Ferret Congress.
Just to make it clear, this isn’t the problem that OP is having. It is (as was answered by someone else) the fact that they are using parentheses rather than braces to index the array. This could also be a valuable addition, though, I don’t know what the recommendation and defined pattern is.
&gt; Cons: ... Load time of Storyboard directly proportional to Size of Storyboard. Isn't the load time of any GUI, built with any technology, directly proportional to its size? But the constants are so small I've not see any where it was really noticeable.
I would definitely recommend looking into some simple open source projects to give you an idea of project structure, organization techniques and design patterns such as MVC and MVVM in Swift
[https://gist.github.com/RoRoGadget/6c0e741e616bafd8a19b8b8c12436f46#file-touchinput-swift-L43](https://gist.github.com/RoRoGadget/6c0e741e616bafd8a19b8b8c12436f46#file-touchinput-swift-L43) Instead of an Alert you should be able to use the [Modal](https://developer.apple.com/documentation/swiftui/modal) struct.
sum is declared inside your if closure and not available outside of it.
When I [put it inside the if loop it gives me this error.](https://imgur.com/a/rti5Izi)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/qd8Byvk.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20eqa8777)
&gt;Swift Package Manager I'm not talking about the tool per se, I was emphasizing those two to say not putting any UI code (like SwiftUI) or apple-device-specific (like the hardware frameworks), into the business logic, so that it could be fully separated.
Module stability is bigger. Hello, binary frameworks!
I can imagine it would be more than a year in the future before I'd be at a the stage of trying to create a windows version, but given the trajectory of adoption outside the Apple universe, it isn't looking good.
yes, because when you put a return inside the if statement, it is not guaranteed that the return will be reached, so you still need a return outside the if statement. you can define sum as a var outside the if, modify it inside the if, and then return it in the last line. there are other things wrong in you code, but i think you can figure them out. post here if you get stuck
There is no closure there, that's just the normal scope syntax.
Ok, thanks. I'll work on it.
Thank you. I guess I'll have to just wait to see how (or if) this changes over time.
My MBP 2011 core i7 is having issues running Xcode, it stutters, nothing else on the computer has an issue running. What’s a good Mac VM online that isn’t too expensive and maybe has a free trial to test?
Yes.
People have been saying this since GTK+ and QT were new. It didn’t happen then, an d it’s not happening now or in the foreseeable future.
I got it to work. Thanks! &amp;#x200B; var counter = 2 func fibonacci(_ x:Int ) -&gt; Int { var a = 1 var b = 1 var sum = 0 while counter &lt; x { sum = a + b a = b b = sum counter += 1 } print(sum) return sum } fibonacci(8)
Need? No. But if you want to make a good app then you will need a server that updates the database of recipees and your clients just need to keep that database in sync, so your searches will be instant and also work offline with the last synced data.
Could you use a ZStack and @State for show/hide?
edited my post
Here's a neat way to do this as a `Sequence`: /// A Fibonacci Sequence that is its own iterator struct Fibonacci: Sequence, IteratorProtocol { // can't be mutated externally private(set) var last: Int = 0 private(set) var current: Int = 1 private var overflow: Bool = false private var secondOverflow: Bool = false // return the current value then calculate the next mutating func next() -&gt; Int? { // make sure we didn't overflow the time before last // necessary because we are calculating ahead guard !secondOverflow else { return nil } // make sure we didn't overflow last time guard !overflow else { secondOverflow = true return last } // calculate the next value defer { let previousLast = last last = current // check for overflow (current, overflow) = previousLast.addingReportingOverflow(current) } return last } // convienience function to get the first amount of values static func first(_ amount: Int, last: Int = 0, current: Int = 1) -&gt; [Int] { var sequence = Fibonacci() return (0..&lt;amount).compactMap { _ in sequence.next() } } } print(Fibonacci.first(6)) // [1, 1, 2, 3, 5, 8]
Thank, I have gotten to that part of Swift where I understand the code yet, but I'll definitely look at it once I get there.
I tried my best to comment it up to help you understand. Feel free to ask any questions you may have.
I will. I just know what the various commands mean yet, eg. guard. I think that will come up in a few days.
It's understandable to call it a closure since they look so similar and they act so similar. There are some subtle differences between the two though and it's useful to keep the concepts separate.
Sure, it's a process. A `guard` statement is very similar to an `if` statement. They both test for "truth". The difference is an `if` statement has both a "do now" section and an "else" section: if something { // do something } else { // do something else } A `guard` statement only has the "else" section and that section must terminate the current scope. So it must return, throw an error, break a loop, continue a loop, or similar. If the guard is true then it just goes onto the next statement without doing what is in the "else". guard something else { // do something else return // or break or continue or… } // do something The main purpose of `guard` is to test for things that are going to exit your current scope and then exit them. Like if something is producing an error or you're done with your calculation. It separates out your exit sections from your main code sections and doesn't nest a ton of scopes: func foo() { if someThing { if anotherThing {} else { return } } else { return } // do more } vs func foo() { guard someThing else { return } guard anotherThing else { return } // do more } It cleans up your code.
Wait, what? (Got this error many times while developing with SwiftUI) [https://imgur.com/a/UMRUafA](https://imgur.com/a/UMRUafA)
The [objc.io](https://www.objc.io) stuff is great. I also like the [Point Free](https://www.pointfree.co) stuff, but that's a bit less general.
So you're saying you want your Application to Programmatically Interface with another program?
Mkay. So it sounds like i should try to find some cooking/recipe based API. The few that I saw when looking for a few minutes yesterday seemed to be pretty specific databases. Like “vegan recipes” or “keto”, etc. The recipes I’d like to populate my app with would be quite different. A list of traditional breakfasts from the UK could pull up just as likely as a list of Indonesian breakfast foods. That’s why I curious if there was some way to load in say, a picture and title on to a list view, showing results of the randomized search. Then the user could select which one and it would show them or maybe easier? Take them to the recipe online?
What dependency manager do you use?
CocoaPods
I've heard about [objc.io](https://objc.io). I was wondering if their content was truly seen as valuable. Gotta make sure before I spend there. Thanks for that feedback!
The syntax seems very hard to get, not to mention memorise.
I'm not sure if I understand how I can use ZStack in this case, can you explain?
Thanks for the feedback. I mostly just want to get more experience with iOS, and wasn't sure I wanted to bother learning obj-c. I like using Flutter in my personal time, and use Xamarin for iOS development at work, but thought Swift might give me a little more insight into the native side of things. Are companies making moves toward Swift now that it's stable, or is the corporate world still mostly staying with obj-c?
You can make your own swift package. Like to have the same code on for server and client, as an example.
Obj-c will always have its place. It will be a very long time before it's phased out. That being said, swift is exploding and I wouldn't learn a very hard language like obj-c when swift is so insanely awesome. Look up things like hacking with swift to see just how powerful it is.
Yea, it’s such a bummer :/
I heard Carthage is easier on the build times as the dependencies are built only one time and not with every build of your project. As for your question, maybe you can look for some mac mini? I know they used to provide good value for money, especially if you can find a good refurbished one.
CocoaPods just downloads the code, switch to Carthage. Carthage either downloads the prebuilt binary if available or builds the frameworks for you which will only needed to be rebuilt when you update it's version or update Xcode.
Re Carthage: that’s correct. With cocoa pods even if nothing changes in the frameworks, every so often it will rebuild all the libraries again. With Carthage; you build the frameworks outside of Xcode from the command line. So unless you’re updating them or adding new ones there is never a reason to rebuild them. I’ve saved as much as 5 minutes on build times doing it this way.
How does one get an unwind segue to work when you're unwinding from a tab bar view controller presented modally?
Seems like a regular optional bubbling function to me... Rx operators will have quite a bit of IDE auto complete support.
Not keen on the new Mac Pro with its £999 stand?
Hey, don’t worry about it, I shouldn’t assume people know the lingo in a different industry. It’s Investment Banking
Does this still provide a basic intro? I’m not knowledgeable enough to start playing around in github
I’ll have to check this out, it sounds good. Thanks for the recommendation
I’ll still look into it. Appreciate you taking the time. And hey, not a bad investment if it costs the same as chipotle
Interesting. This is something I'll definitely have to dive into more. Since we are already planning on purchasing a new computer (adding on to the team) do you have any thoughts on which direction to head? &amp;#x200B; Thanks!
Nope, already have a cheese grater, no need for a second...
Awesome. Definitely something I'll have to dig into a little more. &amp;#x200B; Thanks!
I highly suggest the new Mac Mini for development. I recently purchased a new spec’d out Mac mini and have had no issues with build times since I got it. Before, I was working on a standard 2018 MacBook Pro 15” and did notice some slow compile/build times. I also typically use Cocoapods on my projects
Oh god no, the React cancer's finally spread to Apple...
I’ll probably read that article later, but that’s a classic clickbait title. People will still be using storyboards five years from now. Maybe even ten. And that’s OK.
Wow, that’s awesome! I feel so bad for not knowing that already. 🙏
Storyboards of any complexity are always slow to load on my computer, but I know that’s probably at least 90% because I’m still running on a 6 year old MBA. Even though I’ve moved away from storyboards for new development recently, it’s really way past time for me to upgrade the hardware. Storyboards certainly aren’t the only thing slow for me these days. And, honestly, most companies continuing development on storyboarded apps aren’t going to invest time (and therefore money... although often time is the more important aspect) in switching everything over, whether it be to pure UIKit code or SwiftUI.
The button component is fine. The problem is actually the line after. The presentation thing. If you try removing that it should build again. So try figure out what the problem is with the presentation :)
Try it first
Very promising (see what I did there? :P ) In all seriousness it's a neat approach. I wonder what the best practice for implementing my own publisher would be for something like fetching rows from a database (that come out as JSON). Perhaps a future will work dispatched on some queue. The inclusion of the encode/decode publishers are nice in that regard.
What error message? That's a pretty big part of figuring out what is happening.
Log in with Apple, and probably Dark Mode. If you have an iPad app, Catalyst support. Beyond that, just about everything big requires iOS 13 at a minimum, so probably won't see much use for a couple years.
Storyboards/XIBs can represent a hitch times if you're loading a bunch at once. The constants really aren't small, and decent chunks of the stalling happen on the main thread. VC/Views in code are a heap faster.
React? I think you mean Reactive. They're not remotely the same thing.
The best part is no more disposebag. Most useless lines of boilerplate ever.
Why not just get an iMac?
I’d totally recommend this session to anyone interested in learning SwiftUI.
I wish I could add infinite upvotes on your comment.
The very reason I said “fuck this” when I looked at RxSwift. We did not get ARC to go back to having to release and keep track of shit.
## Guys, I decided to challenge myself and write the first chat App in SwiftUI. What do you think? [https://medium.com/@halavins/how-to-build-a-chat-app-or-messenger-in-swiftui-for-ios-swift-b46dbe5cc0ab](https://medium.com/@halavins/how-to-build-a-chat-app-or-messenger-in-swiftui-for-ios-swift-b46dbe5cc0ab)
It is likely more work than you imagine. On the other hand I’d love to see this on Linux. Hopefully somebody with deep pockets can fiNance the porting.
very good introduction. really usefull
Think Apple says “conform to”, not inherit. Still trying to figure out the difference, linguistically.
I have a dual dell 27” graphic/color monitor setup already as well keyboard and mouse etc.
Android will be getting a similar tech called Jetpack Compose: https://developer.android.com/jetpack/compose
Its an full optional framework that never will be mandatory. (Statement from a combine developer)
There’s a session on data management in combine or something like that. I need to rewatch it cause it was a lot to take in but they said don’t beat yourself up on making it overly best practice cause there’s no “practice” yet. They want to see how the community fares.
&gt;I have the 2018 Mac mini i7 with 32gb ram and egpu (RX580). It’s a beast. I also have a 2018 15inch mbp and the Mac mini is much more preferable work environment as long as I am at my desk. My Mac mini has several server jobs it runs constantly, a Windows VM running just about 24/7, and doubles as the Xcode and video editing station. I’ve never had a problem with it or felt like I was limited by it. It’s a really under rated machine imo. Does your mac mini heat up often?
Question: In the *SwiftUI Essentials* video from WWDC 19 they talked about, and used, a View called "Form". Does that actually exist? Section exists and Group is there but the compiler says it doesn't know anything about "Form"
The short answer is yes. The long answer is that it's a lot of work and it might not produce great Android apps because of the many platform differences. Also remember that SwiftUI is only the UI - in order to make a cross-platform app you'd need file i/o, networking, location services, notifications, etc, etc. Plus you'd need some kind of bridge between Swift and Java objects and Swift assumes referenced counted objects where Java assumes garbage collected ones. Not impossible but far from trivial.
Don't know why you got downvoted. It can be very difficult to read. And I think reactive programming in general is hard to get when you're starting out. It is one of those things you have to play around with a bit. Start off with simple examples. If you're not familiar with functional programming in swift (e.g. filter, map, reduce, etc.), I'd start off there, then work your way up to Combine. It took a long time for things to barely click for me, but man it feels so much cleaner than the traditional state management options (e.g. KVO/notifications/manual setters and getters).
Is it already safe to use Catalina Beta and Xcode Beta on my Mac at home? Can’t wait to learn this SwiftUI, but am scared of crashes or so.
If you don't want to upgrade to Catalina just yet you can always [download the Xcode beta](https://developer.apple.com/download/) and play around with SwiftUI on a Playground. Here's a tutorial on [setting up the Playground](https://www.youtube.com/watch?v=VSvz62fGyYM). It's somewhat buggy but it should be good enough to get a taste of SwiftUI.
Install macos to a separate APFS volume and you can dual boot.
That’s a good idea. Thanks!
Great notes, thanks for sharing. Disappointed Apple stopped writing the detailed release note guides like before because while I'd love to watch all of the WWDC videos, there's not enough waking hours to watch all the 1.5-hour long sessions :P
Awesome! I had no idea it just works in playgrounds.
Watching videos. 😛 I just released a half-rewritten version of my app with a change to the monetisation strategy. I'll see how that goes and work on the other half. After some consideration, though, I will not be rewriting in SwiftUI. My time is tight enough and Apple will give us a few years to transition over, I'm sure. But it does look like I've already got another rewrite booked in a year or two...
CLLocationManagerDelegate have multiple methodes which are called on certain actions. The most common one is when you want to update users current location and you need to get current coordinates or user changed location authorization. For instance if you want to see all methods this delegate provides, type to your extension "fun locationManager".
I was just wondering why I had to do locationManager.delegate. :) Can I not access the delegate protocol without that? I thought all you needed was to put it after the : in the class declaration or use the extend keyword. See where I'm confused? Sorry that I wasn't more clear.
Putting that string and your model types into a playground decodes successfully, so I'd double check that the data you get back from the server matches that format (e.g. try checking the response status code, or converting the response data to a string and logging that)
Hi everyone! I'm trying to understand a thing with private properties and initializers. Can someone please tell me the differences between (1) and (2) in the image below? ([https://imgur.com/AUCgEek](https://imgur.com/AUCgEek)) Is the initializer required in (1) because I have two other properties that has to be initialized, other than the private one that already has a value? Is (2) valid because it already has a value and it doesn't need its own initializer? Would it require an initializer if it was something like this? struct Contributor { private var name: String } let paul = Contributor() Thank you all for the help!
say you have the following code in View Controller : class ViewController { override func viewDidLoad() { locationManager.delegate = self } } the **locationManager.delegate = self** will assign the "ViewController" (self) as the location manager delegate. So for example, calling **locationManager.delegate.viewDidLoad()** is the same of calling **ViewController.viewDidLoad()**. The delegate variable is useful as location manager dont need to know what exact class/type of the delegate (AViewController, BViewController etc), as long as the delegate implement certain method like eg: ** func locationManager(CLLocationManager, didUpdateLocations: [CLLocation]) ** , when the location manager has successfully retrieved location, it will pass these locations data to the delegate by calling **delegate.locationManager(locationManager, didUpdateLocations: locations)**, which turns into **ViewController.locationManager(locationManager, didUpdateLocations: locations)** . Hence you need to implement this method in your view controller in order to retrieve the location. You don't necessarily need to use the **extension** , you can just put the **didUpdateLocations** method inside your ViewController class bracket. The **extension** bracket is to make it tidier.
Isn't the cost of an eGPU cage rather expensive?
I just did that and on converting the response data to string it printed out :- **"&lt;!DOCTYPE html&gt;&lt;html lang=\\"en\\"&gt;&lt;head&gt;..., and response status code is 200**
Catalina's been crashing all for me (looks like USB driver problems). I'd wait for the public beta.
So that is HTML rather than JSON. A lot of servers can return either depending on the type of client, my guess is that Postman is automatically requesting JSON &amp;#x200B; Try adding `request.addValue("application/json", forHTTPHeaderField: "Accept")` before making the request
still prints the same thing. The request looks like this :- var request = URLRequest(url: url!) request.httpMethod = "GET" request.addValue("application/json", forHTTPHeaderField: "Accept") request.addValue("Token bcd2baba8a939bc2344d676ead", forHTTPHeaderField: "Authorization")
hmm without knowing the server i'm not sure what else to try, but its not an issue with your JSON decoding and its the request that needs updating. Can you export the request from postman to try to recreate it exactly? (it might be adding some headers you are missing)
It’s works in a Playground? Sweet. I tried to muck with SwiftUI a few days ago but Apple’s tutorial said the visual stuff only worked on 10.15; so this is a good workaround to know!
I dontlike SwiftUI, its a rip off of React and you get less control. The problem they want to solve with this framework could easily be fixed with data bindings.
SwiftUI would be difficult if you want feature for feature parity. However, the functionBuilder attribute that allows you to make DSLs like SwiftUI will be available on Linux. You could likely model a DSL very similar with some other widget set. It would require some work.
Yes it does. The casing is noticeably warm most of the time.
So react is the only framework that should ever have this ability? You are aware the react uses concepts from other frameworks too? That every framework has built upon the best parts of others?
I don’t see why not. Here’s someone mapping it to html/css as a learning exercise https://github.com/zhuowei/marina
Form is indeed different. There appears to be some classes and functionality missing in the first beta, if you ask me...
Keen in mind that the first value is at 0, not 1 :)
It has bindings....
To be fair, SwiftUI does have some dependencies against simple Combine primitives. If you want to define a new bindable object type, you have to create a publisher for changes (`didChange`) that SwiftUI can hook into. https://developer.apple.com/documentation/swiftui/bindableobject
Considering a lack of a proper UICollectionView equivalent in the framework I'm hoping that the first beta doesn't have all the standard views implemented yet, and that we'll get the whole deal at least by the time v1 comes around.
A swiftUI app as my first personal iOS app.
[removed]
Did you ever figure this out? I'm running into the same thing.
Most views in SwiftUI will fill the screen by default so if you give a view a `.padding(20)` that should give it 20 points of space on each side. Or you can something like `.padding(leading: 20, trailing: 20)`
I don’t think this will fix my issue because for some reason it doesn’t want to fill the full width even when it has padding. I talked to another developer and he pointed me to a video explaining padding a little bit more. It’s supposed to fix my issue. I will watch it later today and will report back
When I’m debugging these type of issues I break open Insomnia REST client (or Postman), and mock up the request there.
I agree, they are being lazy :)
There's a million possible settings, and we can't guess which one might be relevant to your project. Can you please make an [example](https://stackoverflow.com/help/minimal-reproducible-example)? Is "don't use CocoaPods" an option?
Talked with the guys at the WWDC labs, they said they don’t have a collection view in SwiftUI yet, but if that’s something that we want, we should file a radar ASAP.
That is an option...I’m just trying to hold off on that one for a bit yet...but I’m getting there.
Im not sure what this has to do with the swift language :/
Fair point
Have you tried overriding navigationItem.titleView with your custom textField?
Hello! I have a question. I have basic Swift knowledge, just like types, conditions, collections. I've watched WWDC 2019 and was excited by new SwiftUI function. Should I wait for new courses or should continue to learn to code on iOS 12? Thanks
That would work with UIKit, but not with SwiftUI. Only the leading and trailing views take a \`View\` type while title only takes \`Text\`
You can try setting .frame(minWidth: 0, maxWidth: .infinity) and then add horizontal padding with .padding([.horizontal], 20) on your View object.
If you have a HStack in a ScrollView is that functionality equivalent to a collection view? Or does that not recycle views? What about a List?
thanks for advice, I used to think that Rx stuff was really not welcomed in most teams. It will be very interesting to look how it will be received in iOS world.
In all seriousness, I'd like to know what's your take on Rx programming. I'm afraid I will not understand what given code does in 5 minutes after I'll write it.
Recycling views should be an implementation detail of the framework in a declarative system.
Exactly
Exactly. I guess what we’re missing is `Grid` or something like that
SwiftUI is still Swift. Swift is the programming language. So, learn Swift :)
Swift is a language, SwiftUI is a framework written in Swift. To compare, its like asking if you should learn Objective-C or UIKit.
&gt;Reply &gt; &gt;Give Award &gt; &gt;share &gt; &gt;report ok will do thank you!
That makes sense ill start out with swift thanks!
Hey, swift noob here. I come from a web background and been developing apps via react native. But I would love learn swift better and really want to develop for apple watch but having some trouble understanding how to work with data. Just jumped into SwiftUI but I am a bit unsure how to do fetch requests. Finding a lot of different answers. I would love to just write a simple function that fetches from a url and returns the value so the UI can render from the object. Do I create a class with a function or can I create a new file with a function and import it to my view? Or am I way off and need to do a lot more reading...
Or UI?... 🤦‍♂️
Reading the standard library source code is an interesting, if somewhat odd, way to learn low level Swift details.
I think it will make it will definitely make it easier to write code generation tools; think Sketch -&gt; Native UI
Related? [https://www.reddit.com/r/iOSProgramming/comments/bxo8ag/swiftui\_manually\_dismiss\_modal\_view/](https://www.reddit.com/r/iOSProgramming/comments/bxo8ag/swiftui_manually_dismiss_modal_view/)
It sure has the potential. The framework itself is similar to Flutter and React Native which are both cross platform and developed in the open.
NavigationView { Text("SwiftUI") .navigationBarTitle(Text("Welcome")) } Check out [hacking with swift](https://www.hackingwithswift.com/quick-start/swiftui)
I actually looked at this before posting and it didn’t seem to relate necessarily to my issue. My issue is that after dismissing a modally presented view, the PresentationButton used to initially present that modal view no longer works to present it for subsequent taps.
No, TextField, not Text. I want to mimic the ever common UISearchBar in the NavigationTitle
As a replacement for the title or under it like a UISearchController?
Either.
Except Apple’s and Google’s pride will never let this happen.
What’s the difference between this video and the tutorials for SwiftUI on Apple’s dev page?
Holy shit. This is the guy that made the MCPE launcher I used to use years ago.
I faced the same issue. Showed it at the labs and the Apple engineers noted that as a bug. So hopefully being fixed soon.
Yeah a [WebRender](https://github.com/servo/webrender) backend would be nice :)
Good to know that they acknowledged it’s a bug. Was really frustrating trying to learn SwiftUI and encountering unexpected behavior like this. It is beta after all so will probably be a while before all the bugs are worked out.
&gt; witts end wit's* end ---- Have you linked the framework into your project? Into your target? If it's not linked, the header won't be found. Look at the target app's build settings for the path of the header in the framework. Can you look inside the framework to see its payload too. Are you importing the header into an Objective-C file or a Swift file? For example, we import a KIF into an Objective-C file like so: #import &lt;KIF/KIF.h&gt; And into a Swift file it is: import KIF
I’m also linking other objective c library thru pods. Like AwsS3. I also did a lot of ObjectiveC in previous jobs...but that was YEARS ago. What is getting me is how it compiles fine on one laptop and not at all on the other. Something about the search paths is not working and it doesn’t make sense to me at the moment.
wits’ end* Why correct someone incorrectly? Sheesh.
I've tried this and it works well but it does not recycle views. However I should mention that I tried it with 500 labels in an hstack and I didn't see any performance hickups. Maybe it's because of the new simulator improvements, maybe it's because of the swift UI performance improvements. Who knows. But recycling is still important imo and plus, flow layout would be hard to implement with hstacks and vstacks without it getting complicated.
What FILE are you trying to import into?
Interesting. You are correct. Thank you. I learned something. https://grammarist.com/spelling/at-wits-end/ I'll update my correction.
The import is in the project Bridging-header.h. I’m using the library in the ApplicationDelegage. Just a one liner to initialize and done.
Flutter is a Google project. However, it makes much more sense for Google to support something like this since they create so many iOS apps themselves. Apple only has a couple of Android apps so for them cross platform doesn't make much sense. In general apps are better on iOS anyway so it's a competitive advantage for them not to support cross-platform.
Google went with Dart instead of Swift, why?
Title isn’t helpful; this is actually a compilation of online SwiftUI resources. Looks like something that quite a few folks may find valuable.
It was probably inspired by the awesome ios and similar repositories.
I’m not an expert of Swift but I believe that the declarative syntax that SwiftUI uses is new and didn’t exist at the time flutter was being developed. Flutter is heavily orientated around that declarative syntax so Dart, at the time at least, was the better choice. Also, Swift is heavily associated with Apple and Java/Kotlin with google. It’s possible the Flutter devs wanted to choose a more platform agnostic language to no scare off those who might be more biased toward one platform/language or the other.
https://patrickbalestra.com/blog/2019/06/07/wwdc-2019-the-things-you-may-have-missed.html Is this why you’re looking for?
I’ve done this with work computers to get away from antivirus crapware.
Supernova Studio can do this really well
Because of JIT and AOT with the same language!
A class is a specification for a (usually) complete object with data, behaviors, invariants, etc. When a type inherits from a class, it gains all of the implementation for that class including it’s data members as well as it’s behaviors. A protocol is a list of requirements that could be implemented by any arbitrary type. These requirements can include methods, properties (read only or mutable), initializers, as well as documented semantics for those requirements that must be met by conformers to the protocol, but which can’t actually be enforced by the compiler. When a type declares a conformance to a protocol, it is promising to the compiler that it implements all of the requirements in a way that satisfies the semantics of the protocol. And the compiler in turn ensures that the type implemented all of the requirements, although it must take it on faith that the implementation has the correct semantics.
Swift while associated with apple, it’s 100% open sourced. From my experience with Google, it sounds more like another pissing contest.
Think that's it. thanks :-)
Pretty much. SwiftUI isn’t replacing view controllers. As long as there are view controllers there will be storyboards
Yep
Great resource!!! Thanks Did anyone notice this: “Starting next spring, it will be an App Store requirement for apps to adopt to different screen sizes (such as supporting Multitasking on the iPad).”
I would be very excited if that's the direction SwiftUI takes.
It first needs to be open source for that. I don't think it's ever going to happen unless developers do something about it. SwiftUI is built on UIKit UIKit is one of the prized possessions of Apple. So, I doubt they will ever make it open source on their own.
Flutter started as an experiment from the chrome team, called Sky, so it originally used with JavaScript, they decided to moved on from JS and looked at a lot of languages before going with Dart, seems that Swift was ruled out at the time because it wasn't opensourced. &amp;#x200B; Swift was opensource December 3, 2015. There was a Flutter presentation on April 2015 at the Dart conference, back then it was an experiment from the chrome team called Sky.
Not on an iPad Air, myself, but when it hasn’t worked for me usually just closing out and reopening works. If that doesn’t work, you might try deleting the playground from your playgrounds folder (in the files app) and then just redownload that particular playground. If that all fails, might be worth checking[this article out](https://support.apple.com/en-us/HT201398) . Hope that helps.
I’ve done a bit in Swift Playgrounds, and seeing that error message I would definitely delete the app and reinstall. It should sync your progress through iCloud if you have that turned on in the settings app.
Swift wasn't open sourced when initial work on Flutter (back then Sky) started.
I think there are a couple of different reasons: - Flutter evolved from Sky, which is rumored to be the evolved version of a Google project where all apps were based on web technologies. They wanted to see how much perform they could gain by breaking HTML compatibility, and it eventually evolved into Flutter. (This itself isn't a reason but see below.) - Dart as a language is a clean slate that Google can control the implementation of. This sounds weird but it makes sense: for features like hot reload, there needs to be support on the runtime end. Dart, being originally a highly dynamic language, is easier to manipulate in that regard than Swift, which has always been natively AoT-compiled. - Dart can be both JIT-ted, AoT compiled to native code, and compiled to JS. This makes it a pretty easy portable target; e.g. you can share business logic between the web and mobile apps pretty easily.
I don’t think it would be retro compatible. But maybe I’m wrong
It’s iOS 13+ only, you won’t see it in any commercial apps until probably iOS15
So sad 😕
I think thats good, its gonna be quite a while before you can do everything you can do with UIKit, so it will allow it to mature a bit and for people to release guides and content around it.
I see Thanks for the info
&gt; SwiftUI is built on UIKit No, Swift UI *uses* UIKit when you build it for iOS or iPad OS. It uses AppKit when you use it on the Mac.
I don't care about Windows or Android, but if Apple made a modern replacement for WebObjects that included SwiftUI for the user experience and Combine for the access model, I'd be all over that.
Watch the 'Integrating SwiftUI" talk from WWDC.
I have. It wan’t good. The first part was poorly made by an extremely nervous presenter. The second part was based around AppKit, which I never use, and it made it difficult for me to follow, too much new stuff, what is what.
Yes iOS13+, so basically I will use it for production atleast 2 years later. Let's when iOS 15 is there
What makes you say that? I developed apps for clients in Swift 1.0. Of course everything is not perfect in the beginning but their software has very good quality in the beginning compared to other companies software.
Combine is currently located in the System (iOS, macOS) Frameworks. Instead, it should be integrated to the Swift language and be made open-source. It does not make sense to gate this functionality only on the Apple devices. Plus, the documentation could be enhanced with the support of the community.
Because commercial apps usually support current iOS + previous 2 versions, no big company gonna only support the very current OS
You can't even open Xcode for SwiftUI in macOS 10.14
Would it then be possible to also write a Vue-like framework that completely works with SwiftUI?
I heard the swiftui tutorials are made in vuejs
This is a pretty common name for language library list repos, like awesome-react or awesome-go
What's the difference? Both are never gonna be open sourced.
I dont like React and I prefer having as much control as possible. Its fully subjective, you done have to raise your blood pressure.
&gt; dontlike SwiftUI, its a rip off of React and you get less control. Is irrelevant to the discussion and I pointed out why. If you didn't wish to discuss your opinion, then why did you share it on a discussion forum?
Yes, you can. Live previews just don't work.
I don't think we're talking about the same thing. I'm asking, would it someday be possible to write a dynamic web-app in SwiftUI that works basically the same as a react/angular/vue web-app works today. With the only difference that it's 100% written in SwiftUI.
One concrete argument against it I got against the React way of generating layout is that it needs to run all the layout code every single time there is a state update. On small scale layouts it shouldnt be a problem but on larger layouts it *could* get laggy when running all the layout code compared to manipulating the UIKit view directly. One thing i like with SwiftUI however is that its got a standard way to do dependency injection which in UIKit requires a strict discipline to pass a dependency to a UIView by using a Factory or something.
Back to work on the [JTAppleCalendar](https://github.com/patchthecode/JTAppleCalendar) project
No, neither UIKit nor AppKit will be open-sourced, but if SwiftUI is open-sourced then the abstraction layer required for it to work with two different frameworks could be used to add a third framework: something that renders views for the web.
Isn’t api just data...
There is a tutorial for this behavior in SwiftUI apple docs.
I mean the different frameworks like Speech, mapKit, etc...
Oh ok. Well frameworks usually contains a lot of classes structured to work with one another. It’s always not that easy to work with someone else’s code but your best bet is to know what frame work you need, let’s say map kit, and in map kit u want to get the user cords, you search the documentation for cords. Rinse and repeat.
"absolutely fucking useless" here. I'm sorry you felt you deserved a more helpful title. Here's the thing: I've been working in tech for nearly 25 years and I have some bad news for you. There will always be a time when you might not know a resource exists. That will never change. But there's no justification for hurling abuse at someone well-intentioned, who's gone out of their way to help others simply because you aren't aware of a convention, or in your opinion has written something you find to be unhelpful. Also, we have all been at some stage in our careers, newcomers. I felt that way this week just watching some of the WWDC videos and I've been writing for iOS for 10 years. Your situation isn't any different than mine, and everyone else's , it's just how you choose to treat others that differs. &amp;#x200B; You also don't need to be a polyglot to be aware of [Awesome Awesome](https://github.com/sindresorhus/awesome). People starting out programming can also learn a huge amount from one Awesome language list. Be thankful and grateful. Grateful you're learning now. When I was a teen, I never learnt to program in C because, guess what? There weren't any books on it in the local library. No internet, no nothing. Still didn't hurl abuse at the librarians though.
There’s definitely still a lot of functionality to come in later betas; so it really wouldn’t be surprising if it weren’t possible yet.
I think you need to add “Presentations” to your =View with the .presentation() modifier but I can not get a Modal presentation to work at the moment. It only allows me to attach Alerts. The idea is that you have a state variable that is true/false depending on whether the view is displayed or not. Then the presentation is bound to that variable and you toggle it to present/dismiss the modal views. I cannot find a working example though. If anybody else can, please post a link here.
Decide what u want to learn and then google the docs, guides and tutorials for the api u r interested in.
you need to add a navigation controller in each of these tab.
Yeah, at this point I think it's something that will be included later on.
watch some projects of lets build that app, and follow along; if u don’t understand something goole it. after some you know enaugh to strt ur own :)
I think it would be a joke, if there would not be a method for this 😄
This unfortunately doesn't work with navigation views, but it would make sense if they used a different version of the same modifier to enable views that were pushed onto the navigation stack by a NavigationButton to be popped off again somehow.
I've only managed to find examples of how you can push a view onto the navigation stack of NavigationView with a NavigationButton, but I can't find any examples of reversing that push action (apart from manually tapping the back button). Which part of the docs did you have in mind?
Shower thought: depending on your situation, you could make a ZStack and use a state variable to determine which view should be presented. I don’t think the functionality is necessarily missing. I think it can be approached differently.
There was no system requirements for using Swift 1.0, since the libraries shipped with the app, not the operating system.
SwiftUI definitely depends on the DSL editions brought in Swift 5. As others have mentioned, SwiftUI requires iOS 13
One is a video, the other is a tutorial. Choose what works best for you.
Cool! I see you really like TensorFlow based on your github history. May I ask what the inspiration for your github avatar is? I like those colors. :)
This is more of a /r/iOSProgramming question. I’m pretty sure Apple does not provide an API for getting this information. It would be a pretty big privacy concern.
I cross posted this when I didn't get a quick response here: &amp;#x200B; [https://stackoverflow.com/questions/56515815/decoding-json-from-api-swift-5](https://stackoverflow.com/questions/56515815/decoding-json-from-api-swift-5) &amp;#x200B; Answer is there: &amp;#x200B; The most significant rule is: **The name of the struct member must match the JSON key unless you map keys with** **CodingKeys** To conform to the naming convention I added the *snake\_case* conversion
Try using a PresentationButton.
It actually gives me a feel of as if image is being generated by GAN (my favorite networks) with transpose convolution (usually creates checkerboard artifacts) during training. Although nowadays I always prefer using upsample -&gt; convolution ops ([Odena et. al., 2016](https://distill.pub/2016/deconv-checkerboard)) in sequence instead of transpose convolution to eliminate artifacts but since it looks beautiful in purple shades so this image is as my GitHub avatar.
I learn best by doing, so I might try to make a dedicated learner app that does something very simple for a specific framework. If you do this for every framework, you’ll have a wide breadth of knowledge. You can and will gain a deeper understanding as actual requirements arise, but a cursory knowledge of most of the frameworks is really valuable conversationally, which may just land you a job. It is also valuable to have depth of knowledge, but for me I find this hard to do without having actual tasks. Nothing beats creating a real app for this. If you learn by doing, like I do, you may want to loosely define a project based curriculum for yourself. Maybe start making a real app, and at the same time, learn a new framework every week (MapKitLearner/SpeechLearner). This fits in pretty nicely with all the tutorial material out there as well. BTW, if you do this, don’t be afraid to abandon or rewrite your “real” app as you go along. It’s bound to be pretty terrible code, and that becomes a real drag to maintain.
I have also written a companion [article](https://link.medium.com/uDxNuWuQnX) on Medium. Please do check it to follow along the Swift code. I hope you’ll enjoy reading 📖 it.
I was more addressing the fear of being an early adopter
Thats no universal truth. Depends on the company... Depends on the app, Depends on the target audience of the app.
No Apple does not provide access to this information, and is making it so even it does not have access to that type of information. Move on to another concept.
Well it is as it’s industry standard really, only caveat is probably b2b apps that are intended for 1 device
I have a physical firetruck toy. I'd like to be able to "scan" this toy somehow with my iPhone and then convert that "scan" to a .scn file so I can use it with ARKit. Is there a way to do that? I've spent all morning on this so far! I thought this was the answer: [https://developer.apple.com/documentation/arkit/scanning\_and\_detecting\_3d\_objects](https://developer.apple.com/documentation/arkit/scanning_and_detecting_3d_objects) ... but it only lets me "detect" that model, not recreate it for Xcode. Please help?
Sorry, I should have pasted the code and alway a screenshot that contained the error message. But I was able to correct the error with some help.I just needed to put the return in the inner loop.
I’ve been using Catalina since the first day of WWDC and the only thing I’ve noticed is that video playback would cause some browsers to crash randomly. Haven’t had it happen lately though
As long as you don’t depend on 32 bit apps for anything it’s been decent for me. Music app and others are a bit slow but that’s to be expected.
Having said that, either install to a external hard drive or create an APFS partition and install there. BACK UP BACK UP BACK UP!
If you have enough HD space, just create a new APFS volume with shared storage and install it on that. You don’t lose your Mojave install and it works great, running that setup on my 2013 MacBook Pro. Here’s the instructions from Apple https://support.apple.com/en-us/HT208891
This might seem like an incredibly useless answer: But the best answer anyone on the internet can give you is, it depends. In reality the question you are asking is "How do I learn?", the topic you are trying to learn comes secondary to that. And how could you expect strangers on the internet to tell you how to learn? We can certainly give you pointers, as others have, but in the end learning style is individual. So I would say, try different ways. For some it works to just read the documentation, others preview watching videos, others again are best with experimenting with something and figuring out how it works, and yet others take best to individual mentorship (Be it online or in person). But in the end, it's up to you to figure out how you learn best.
Starting with some updates on an old iPad app to make the Flexible to prepare for new Apple rules in Spring 2020 &amp;#x200B; Continue to work on my mobile travel diary: [https://www.youtube.com/channel/UCK1zKCoLY61Xb9UgGyjGarQ](https://www.youtube.com/channel/UCK1zKCoLY61Xb9UgGyjGarQ)
Yeah I saw them do it during the WWDC session.
How about you start small, I myself got started with the curricula provided by Apple (on iBooks). That should at least get you started. For further learning I would recommend an online course, there are a ton of cheap ones out there that guide you through everything you need to know and if you don’t want to pay for it there are also a lot of free youtube tutorials, you just need to know what to look for.
I’ve had a few system crashes and I keep getting randomly kicked out to the lock screen. It’s bearable. Xcode has been quite stable. Hasn’t crashed on me, but I do see issues with missing syntax highlighting now &amp; again. The new Preview feature has been very impressive with no issues, although it doesn’t seem like it supports landscape mode yet. The new Music app is a bit of a nightmare. Your downloaded Apple Music content isn’t automatically moved across to the new app, so I’ve had to re-download music. Sometimes playlists won’t appear in the sidebar. The Apple Music browse tab doesn’t always load. Some Artists content isn’t accessible on the Apple Music store. The News app crashes constantly. It’ll crash 4 or 5 times in a row and then it’ll settle down. The system does slow down quite a lot, and often you can’t get the Force Quit pop up to appear. There is also sometimes a massive lag with the volume buttons on my MacBook Air. 10-15 seconds before the volume level responds to key presses.
I plan on it. The issue, that others have pointed out, is that currently there's no officially supported way to incorporate said code into a non-Apple application.
YouTube has a bunch of videos. Udemy courses etc.
Start here: https://github.com/vsouza/awesome-ios And spend lots of time with the sample code in the documentation of Xcode, watch wwdc videos instead of Netflix. Be curious, read lots of code and start by trying to understand at a high level what’s happening then work to the point you understand each line of code. Apply what you learn to a project as you go. Get comfortable with the idea of being terrible Until your not. It’s 100% to suck at something hard in the pursuit of excellence. Another great thing to do is support OSS projects as a non cider by submitting great documentation (learn markdown) If you get some PR’s accepted try to connect with some of the more senior devs and ask if they’ll spend an hour per week with you doing code review.
I find it hard not to support the iPhone 6 family at least. I currently have clients with iPhone 6’s.
In the ContentView_Previews struct you add an colorScheme environment modifier to your ContentView and set it to dark.
You need to read some stuff, I'll guess you already have a Mac device to download some stuff and follow through. [https://books.apple.com/gb/author/apple-education/id939801385#see-all/books](https://books.apple.com/gb/author/apple-education/id939801385#see-all/books) books: a) Learn to code 1, 2, and 3. b) Intro to App Development with Swift. Good luck and don't give up.
thanks it’s nice, i’ll take a look
I wouldn't, not on the first beta at least. I've done as others have said, that is to add a second volume next to your current one and install Catalina there. If your system uses APFS it's super simple to do and it will still allow you access to your files on your current volume. You can also easily boot back into your current OS by restarting and holding the option key.
That’s what “awesome” repos are actually.
6s is fine its the original 6/+
This is a good answer.
I don’t know what FMDB is, but SwiftUI is for UI features, and databases aren’t that.
Just checking… you’re not using a UIScrollView with SwiftUI components are you?
No, I am using ScrollView component
Good to know. I think they have a normal 6. That is getting pretty old though.
Where?
I'm planning to investigate the new SwiftUI stuff by re-writing my CodeNotes app. The problem becomes a question of do I also install the macOS and iOS Beta's to really go to work on it.
That is very nice. Thanks for sharing it. Are you able to delete the trial volume and reclaim space back, once Catalina is released?
Yep, just get the data off it you want and delete the volume and all your space comes back
Can you post your code?
Should say, Catalina and xCode 11 takes about 30 GB
Tomorrow, it’s midnight here now.
Yes sorry. I was trying to say that they at least seem to like vuejs. I've created front end in vuejs and just recently got into swift. I'm very happy with the timing of SwiftUI. It would be very easy to output vuejs from swift but the real problem is customization. The customizations really need to be in js and css. I can't really think of good way to solve that problem.
you can on iOS playground with UIHostingController
I updated to Catalina, wanted to start messing around with Swift UI and the like....And it deleted everything in my iCloud drive. :/ -- It's not that it deleted everything, it left all of the folders there, but the files inside of them were gone. Luckly I keep a backup of my iCloud drive on a removable hard drive, and all the source code that was in there was in GIT. I wish I had done the APFS volume suggestion above, and not signed in with my iCloud Drive. I filed a bunch of bug reports, so hopefully it will be resolved or at least looked into. But just a cation for some people!
Do you even know what swiftui is?
I’m very confused rn
I actually left IB a few months ago to pursue a career in CS. I’m still learning, but I feel like I’m close to employable. Feel free to PM me if you have any questions.
There’s a [post](https://forums.swift.org/t/grdb-3-combine-swiftui/25487) over on the GRDB forum about GRDB and Combine + SwiftUI. It’s early, but the results sound positive.
Happy cake day!
I have been having keyboard issues. It somehow keeps doubling the string I was typing lilike so
Thanks. 😃
You need to set padding to be 0. So far the only way of doing this I’ve found is by setting each side like this: .padding(.leading, 0) .padding(.trailing, 0) Im sure there’s a better way, but the SwiftUI documentation isn’t the easiest to navigate, and Xcode 11 autocomplete doesn’t work for me
What about a @State variable for toggling your view and passing a binding to the view itself to connect your button to?
Gonna try to dig through SourceKit and implement swift interoperability with a few other langs. Also take a stab at getting the ability for seamless Python interop with swift given the new dynamic features
SwiftUI and Combine frontend are unfortunately closed source so they can't be compiled for iOS &lt;13 unfortunately but given Apple's quick and wide adoption I think I'd still write most of my apps in SwiftUI. Perhaps we'll see custom backends for SwiftUI-like DSLs which are backward compatible with older iOS versions
Make sure your include path is correct CocoaPods. If all else fails you can hardwire it to the Pod's root dir
Sorry but I'm not sure how to implement what you've described. Could you post some code that illustrates how this would work?
Is this only available on Spotify or something? I can’t find it with Overcast.
I kinda have to agree you are jumping into the deep end with lead boots. I’d strongly suggest getting enrolled in some sort of computer science program and concurrently learning Swift via SIMPLE APP BUILDING. That is start with a few simple apps in MacOS, iPadOS and iPhone OS. Learn how to construct a variety of Apps with stock controls and features. Eventually you will get to the point where you can learn about machine learning and other AI techniques. The idea with respect to a comp-sci program is to make sure you are learning widely applicable concepts and hopefully end up with a deeper understanding of what is happening between your ode and the processor. Because honestly what you are proposing to do will require wearing many hats. It isn’t impossible but you have a lot to learn.
Sorry for the wait. Short of rewriting from the begging to troubleshoot it further, the only thing I could do to get it to work was to load the content from a string, rather than an URLRequest(). guard let url = fileToLoad else { return } let contents = try! String(contentsOf: url, encoding: .utf8) print(contents) webView.loadHTMLString(contents, baseURL: nil) Hope that makes sense and helps.
If it is your only machine do nothing stupid, wait for car latter in the release cycle.
You're overthinking this one by a long shot. All you need is a single tableview with a single reusable cell prototype. The cell contains a UILabel and a UITextView. The label is constrained to the contentView's top and leading anchors and to the text view's leading anchor. The textView is constrained to the contentView's top, trailing, and bottom anchors. Use *UITableViewAutomaticDimension* for your row height.
Bear in mind that the first OS versions that can use it aren't even available for the public yet.
If you’re not going to release it until September/October and you only want to support iOS 13.
do it. It's going to become the standard, you might as well start now and be ahead of most.
It depends. SwiftUI will only work on iOS 13 and macOS 10.15. So older devices or people who don't update iOS/macOS often will be unable to use it unless you offer a version of your app that doesn't use it. That said, SwiftUI, to me, has a lot of pluses going for it. And it should be easier to maintain later on. It's always easier to start using something from day one than two years later switching over to using it. Rewriting code using an old framework to a newer one takes a lot of work and planning.
One addition to this is to make sure you use the right color names: [https://www.hackingwithswift.com/example-code/uicolor/how-to-use-semantic-colors-to-help-your-ios-app-adapt-to-dark-mode](https://www.hackingwithswift.com/example-code/uicolor/how-to-use-semantic-colors-to-help-your-ios-app-adapt-to-dark-mode)
I am currently a Computer Science major at Georgia Tech, but I just finished my freshman year so I don’t have any coding experience or real background in computational theory, unfortunately. I am also enrolled in an online ML class. I thought about using a learning algorithm for prediction, but it may suffice to compensate with a whole bunch of if-statements.
Does SwiftUI only work on iOS 13?
The only thing is that it needs to act as a single UITextView where the user can edit and select the whole text. I got this screenshot from the ‘Noted’ iOS App and it has this feature if you want to see a useable demo of what I’m wanting...
You didn't state that the text needed to be editable in the original post. At any rate the basic setup is the same, use a UITextView instead of the right label and set its scrollEnabled property to false. This will cause the text view to resize itself to the best size for the text that still satisfies its constraints.
Yes.
No. You can't ship with beta software. Apple doesn't allow uploading to the App Store (ITC) when any beta product has been part of the development/deployment toolchain.
Even in the past? Like if i make an app and wait for the official release it wont be allowed?
why arent you on apple podcasts
Do not recommend. Quite a few issues
Raywenderlich.com is also a good source to have a look at as well
It will be allowed, but you will have to compile your app with the final release of Xcode 11, as submitting with a beta version will result in an automatic rejection. So you won't be able to submit it to the App Store before September to even be in early.
https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html#//apple_ref/doc/uid/TP40015214-CH2-SW1
There’s an XKCD for that: https://xkcd.com/1425/
It’s a known issue https://developer.apple.com/documentation/ios_ipados_release_notes/ios_ipados_13_beta_release_notes
Ah okay. We wouldn’t be done for a long time so I think that’s doable
Cool! [It's actually pretty similar to an eyeshadow palette I have.](https://blushtribe.com/collections/eyeshadow-palettes/products/thehasina2)
Nice. 😀
Start here. Do this tutorial. [https://www.youtube.com/watch?v=wbxbe35Bbn4&amp;t=854s](https://www.youtube.com/watch?v=wbxbe35Bbn4&amp;t=854s) &amp;#x200B; Then do every tutorial you can on youtube using SwiftUI. And watch every video from WWD on SwiftUI. &amp;#x200B; SwiftUI just blows everything away. It is the future. Life is short. It's radical, it a total shift in the way Apple is approaching programming. Some get it, but many don't see what's coming. &amp;#x200B; Source: Futurist
I’d certainly go with SwiftUI if you know the schedules will not collide! As others have pointed out you can’t ship beta software. There are other reasons to go with SwiftUI with a relaxed schedule. For one SwiftUI isn't stable yet so you will be learning as you go and possibly back tracking as the implementation changes. Beyond that the new tech in SwiftUI is the future but it is new tech so the learning curve will be longer and well accepted answers to sticking points harder to come by. A relaxed schedule gives you time to adjust your code as SwiftUI best practices gel.
Sorry, my bad. With that though how would I be able to select the text of multiple paragraphs. In that app the functionality allows to select multiple paragraphs as if it’s a single textView?
You'll need to search for the locations where you want to insert your time labels using the UITextInput API which will enable you to get the x and y coordinates of, for example, the paragraph breaks. This no longer seems like a good use for UITableView.
You'll need to search for the locations where you want to insert your time labels using the UITextInput API which will enable you to get the x and y coordinates of, for example, the paragraph breaks. This no longer seems like a good use for UITableView.
I am having trouble unzipping the Xcode 11 beta as well. Keeps saying it can not be expand because the volume does not have enough space. Please help
Released an update for my Safari extension [Accelerate](https://itunes.apple.com/us/app/accelerate-for-safari/id1459809092?mt=12). Also experimenting with SwiftUI for use in a new iOS project!
One thing I couldn’t figure out is how to get this to work using just SwiftUI. There is no systemBackground for Color, just for UIColor. Is there something I missed?
Okay, my only concern is somehow having to recalculate this every time this ViewController is opened (as their would be a lot of labels and the position might change dependant on how many lines fit the width of the device). What do you think about this?
Try it and see.
Okay will do. Just out of curiosity do you think that’s how they’ve achieved it in the ‘Noted’ app?
I currently regard it as a useless, horrible fad. My principal objection, other than the weird cultish devotion it inspires, is that Rx code is incredibly ugly and tends to obfuscate what it is actually doing. I find it monstrously hard to parse and debug, and I don't see that it adds any real benefit over older methods. I could be wrong and being grossly unfair but thats where I am now. Perhaps it is useful and practical in server computing but I don't think it is healthy in the forever resource-constrained world of clients. If anyone of, say, John Carmack or Chris Lattner's programming prowess ever opines otherwise then I would reevaluate.
I found out it’s a known bug with SwiftUI. The scroll view sizing is broken in the first beta
Swift playground could be a solution to write piece of code on the go
I’d second that. You can write quite complicated business logic and integrate it into UI within Xcode later.
I just started looking at this at your suggestion, and it does seem like SwiftUI will be a great entry point. Only problem is that, in order to have full functionality now, you need to install beta MacOS and beta Xcode and I think, in order to get the former, you need to join the Apple Developers Program. Which makes your suggestion a little premature, maybe. I'm in the same boat as OP, took a look at this at your suggestion, but will probably hold off a bit until full release. But thanks.
You can have one computer always running at home and access it via ssh through ipad. Then you can easily code!
Swift playgrounds is really powerful on iPad, you might want to look into that
Yeah, I think after Spotify bought Anchor all the podcasts hosted there got locked into Spotify.
Use teamviewer to tap into your home machine from your iPad
I think I'd simply get a 12" MacBook.
There is no perfect solution. In the same boat last year and did a lot of traveling. Swift playgrounds, Pythonista 3, and Continuous are great for writing prototype code. I use MS One Note because the company uses MS 365 for getting down notes. LucidChart is a great Visio replacement on the run. All of these have flaws and hoops to get around. The only real programming environment I have found is a remote server, but if you are on plane w/o wifi, you are stuck.
You don’t need the latest OS. Just the last release. It’s just $99. You have to join the developers program. That’s a bare boat minimum to get going as a developer.
Just with a quick glance through the project I can't see any view models. Look into the MVVM pattern, where all logic is placed in view models that will make calls back to the view when they need to update.
It’s because they use Swift language features that require new runtime capabilities only available in the new OSs.
Library’s what?
It really depends on what you are doing. If you just want to write swift and don’t need to build anything using apple libraries you can setup visual studio code on your windows machine. This is a decent amount of work for limited mileage however and you’ll need to work with the Linux subsystem. An easier out of the box option would’ve to jot down ideas in playgrounds and integrate them back into your projects when you are off the plane.
Because they rely on changes made in other system frameworks. It reduces your and Apple’s maintenance burden as well, even if it means you can’t use the frameworks until your users upgrade. You have guaranteed (correct or not) behavior. SwiftUI has dependencies on specific UIKit behavior. If UIKit were to change in a system update and you somehow shipped with SwiftUI as a framework, then your app could be broken (versus you having to get a version of SwiftUI which is compatible with all your dependencies and compatible with all versions of UIKit that you need to support). The matrix of combinations gets increasingly difficult to manage versus you just have an if clause with an OS version. This is more relevant for system frameworks where there are interdependencies versus you having a stand-alone 3rd party framework (which is not usually a dependency for any of your other dependencies). It is just like the advantages and disadvantages of having the Swift standard library now being shipped with the OS. Memory, speed, etc. are better for your apps (even if your app didn’t use Swift, other apps are using less memory since they are reusing the same standard library in memory). You get code performance and security changes for “free” without having to maintain your app. Disadvantage is now new standard library features will probably only be made available in newer OSes. Like you won’t be able to use Swift 5.1 features in iOS 12.2 deployed apps.
I know I'm kind of late to answer, but I'll give you my 2 cents. To get a complete, you'll need to learn to code. The good news is, one of the best ways to learn in my opinion is simply by having small projects and learning as you go. You should spend about a 3-4 days before getting started learning the very basics (I'd say 10 hours in total or something). You can find plenty of tutorials online. While you follow those tutorials, make sure you understand every single little detail. If you end up copying and pasting stuff and thinking "That works, I have no idea why, but let's move on to the next step" you're not doing it right :). Once you know the basics, get started on your app. Be prepared for it to be very slow. Just research your way into making progress, google everything (stackoverflow will be your best friend, but make sure you understand everything you use from there). You can also ask friends who have more knowledge than you, or simply ask reddit... Set yourself small goals (and by small, I mean tiny). You'll see, eventually it'll all start coming together. Before you start, you should also have a clear plan of what you want your app to do. Your own work can get very confusing even to you if you don't structure it :) &amp;#x200B; This probably isn't the fastest way to learn, but it's definitely the most interesting. It does require some perseverance though. Personally I started like that 2-3 years ago and I'm slowly getting to a level where I can do basically anything if I put my mind to it. I know far too many people who tried to learn everything from template projects online and tutorials for projects that weren't their own, and very quickly get bored. &amp;#x200B; Anyways, if you ever feel like you're stuck, can't find resources, or even still don't know where to start, shoot me a pm :) I know how daunting it can feel to get started
I just loaded Catalina and Xcode 11 on my 12” MacBook and it’s a great lightweight way of using SwiftUI on the go.
I'm going to finally start working on that app that I've been playing around with.
Tell your company that you need a Mac to do your job.
Use a UICollectionView, there are plenty of examples out there to create a 'grid' layout.
You could try a collectionview in each cell. Maybe something like [this](https://ashfurrow.com/blog/putting-a-uicollectionview-in-a-uitableviewcell-in-swift/)?
Something like if imageView.image == nil { //add taplistener with action here } Would work
By adding UITapGestureRecognizer. Before setting up photo, turn off userInteractionEnable
ya ok but you gotta code from the terminal. that's fine for writing libraries, but not for app development
Are you allowed to install your own software on your Windows laptop? Whilst not totally legitimate, there are documented ways of running macOS on VMware Workstation that you could explore...
I'd love to help you, but I am having trouble reading your code. Please learn about Reddit code formatting. Or using pastebin is a good option. Also, could you include a little more of the class for context?
I’d say go for it. It’ll be standard anyway and you’ll only regret it if you don’t grab the head start. Will make your job easier upon release of iOS 13 and 2-3 years from now everyone will use it anyway.
Can it? Sure I don’t ever hear or see people try using Swift “for systems programming”. Meaning I don’t see many servers, networking systems (drivers, net stacks, etc) in swift. I would think the lack of people doing that would lead to a la kick of libraries and a not great ecosystem of support for “low-level” programming. ML is a similar story, but apple is invested in the local ML feels for iOS. Having said that, it doesn’t matter and Swift is probably good enough for what you are doing. Jump in the water is fine.
Im using a 2012 macbook air and it works fine for what im making
Thanks for your response! I’ve edited the post to reflect your suggestions. Hopefully this looks better?
&gt; NSAttributedString | No equivalent (use Text) I didn't have time to dig too deep in SwiftUI yet, but is there a way to replicate what an Attributed String does? The Text view is good but it seems to be lacking advanced styling options. Well *multiple* advanced styles
You can replicate by using Text, there's no direct component for that
Much better, thanks. &amp;#x200B; The approach I'd take to accomplish what you are wanting is to add a configuration function to your UITableViewCell subclass that passes in your index to the cell and sets up your target-action so that you don't have to try and dig through the view hierarchy to find a label. Something along these lines: `func configure(with index: Int, editingChangedTarget: Any?, action: Selector) {}` Then, I'd probably have the cell itself listen for changes (i.e. conform it to UITextFieldDelegate and implement the methods) and then just setup a delegate on your cell. So when the cell receives the \`textFieldDidChange\` call, it just makes a call to your custom delegate (which you will probably want to make your view controller). &amp;#x200B; So in your cell: protocol TextChangedDelegate: class { /* define your method */ } ... class SampleItem: UITableViewCell, UITextFieldDelegate { var index: Int // Passed in using your configuration function // etc ... weak var delegate: TextChangedDelegate? // more etc... @objc func textFieldDidChange(_ textField: UITextField) { delegate?.textChanged(for: index) } } That's the general overall approach I'd take, if I understand your ask properly. I've left out some details, but that should hopefully give you a jumping off point.
Wow, awesome. thanks :-)
It’s worth noting that Swift is a first class citizen for the Metal API. So if your code needs to be GPU accelerated, as long as it will only ever run on a Mac, that might work really well for you. However, Swift can have performance problems. [Here’s](https://youtu.be/aSuRyLBrXgI) a really interesting talk about writing userspace drivers in modern languages, including Swift. It’s a really interesting talk and it’s worth watching the whole thing. But I would look at 32:50, where they start to talk about the performance problems it had. TLDR; it’s Swift’s specific approach to garbage collection that causes the problem. All that being said, it did still work, and honestly, the performance could be much worse. The driver does work. It’s also possible you could also structure your code to be careful of the GC, but I don’t really know. Additionally, you could write your simulation in Swift, profile it, then rewrite the really performance intensive parts in another language like c/c++/obj-c/rust
Try Swift Playgrounds. There was a session about it at wwdc last week you could also take a look at.
- "As low level as C", for what? That's not the lowest level language on your computer. Your operating system couldn't have been written in just C, nor could your firmware, and probably not even your graphics card drivers. In which aspect do you need that level of control, and why not more? - What does "scientific computing" mean to you? I know people for whom an old 4-bit HP calculator is sufficient, and others who don't consider it real scientific computing until it's running on a million POWER cores. We've been doing science hundreds of years longer than we had electronic computers at all. These things you're asking are meaningless buzzwords that companies put on their webpages to brag about how cool their system is. They're popular in advertising precisely because they can mean almost anything the reader wants to believe they mean.
Thanks. This made it easier to figure out why my gradients weren't working.
Drivers are special. For real-time programming, even [the C standard library](http://www.rossbencina.com/code/real-time-audio-programming-101-time-waits-for-nothing) might be too high-level to be usable. It's simply not designed for performance guarantees. Latency is a very different beast than throughput.
That's a good idea:) didn't think the MacBook is powerful enough
Have a look at [Date](https://developer.apple.com/documentation/foundation/date), [Date Components](https://developer.apple.com/documentation/foundation/datecomponents) and [Calendar](https://developer.apple.com/documentation/foundation/calendar).
This looks pretty cool: SwiftUI Fetching JSON and Image Data with BindableObject Fetching JSON data and rendering it into a list is now changing with SwiftUI. The pattern you must follow now is to create state variables through a Bindable object and observe it through your view widgets. To load image data, we do the same thing through different state objects. &amp;#x200B; [https://www.youtube.com/watch?v=xT4wGOc2jd4](https://www.youtube.com/watch?v=xT4wGOc2jd4)
Can you explain when I need to bind a `@State` object and when I don't (i.e. access it with `$`)? Apple don't use it for a local `@State` `bool`, but you seem to use it in your examples - and I'm having trouble working out when it's necessary! Thanks
But "[Apps deploying back to earlier OS releases will have a copy of the Swift runtime embedded inside them.](https://swift.org/blog/abi-stability-and-apple/)" I understand they don't allow this with arbitrary newer versions of the runtime, but they specifically called out the Swift 5 runtime as the one they would support in this way.
Would be awesome of you‘d add a Playground which showcases your code But cool and useful anyway :)
**let** formatter = DateFormatter() formatter.dateFormat = "MM/dd/yyyy HH:mm" **let** somedatetime = formatter.date(from: "05/18/2019 00:00") **let** days = Calendar.current.dateComponents(\[.day,.hour,.minute,.second\],from: Date(), to: somedatetime!).day! **let** hours = Calendar.current.dateComponents(\[.day,.hour,.minute,.second\],from: Date(), to: somedatetime!).hour! **let** minut = Calendar.current.dateComponents(\[.day,.hour,.minute,.second\],from: Date(), to: somedatetime!).minute! **let** secon = Calendar.current.dateComponents(\[.day,.hour,.minute,.second\],from: Date(), to: somedatetime!).second! timerLabel.text = ("\\(days) days, \\(hours) hours, \\(minut) minutes, \\(secon) seconds")
It's open source so if you can do this that would be awesome or anybody else can pickup.
You’d need to still have some call on the Bindable object to actually fetch the data though.
&gt; Like you won’t be able to use Swift 5.1 features in iOS 12.2 deployed apps. This just raises further questions! Why didn't they design a runtime that was sufficiently powerful for anticipated language features? I don't have to upgrade my CPU every time there's a new version of C++. I don't have to upgrade my JS runtime every time there's a new release of Typescript. Kotlin still compiles its code for a 2006-era JVM. It's not like there are any brand new modes of computation that we suddenly discovered we need to support.
Thank you. That's currently going way over my head. I'll resume googling based on what you've said and hopefully it will start to make sense :)
How does the date formatter example work? I see the `dateFormatter` getting created, but nothings appears to consume it.
Awesome! Should also note `SecureField` as the equivalent of a `UITextField` password entry.
You can run Screen Sharing, though.
Use a `Binding&lt;_&gt;` when you want two-way updates that are tied to the value of the `@State` property. When you create a toggle as `Toggle(isOn: $isShowing)`, you are tying the state of the UI directly to the value of the `isShowing` property. When the switch changes, so will `isShowing`, and vice versa.
yep, missed that one
Didn‘t update yet since I wasn‘t sure how fine it runs
There was a typo, fixed it.
This is great! How do I get the timer to show up on a label?
That's great! Thanks for leading me to that post. I've been using FMDb, but maybe I'll go the GRDb route now.
you should read the link by kenada314 about GRDB. It really does look promising.
Um, yes. Do you know what a database is? Do you know databases are used to populate **U**ser **I**nterfaces?
as well you might be!
No, what is it? I just like to parrot the latest in jargon in hopes of reaping some sweet internet karma to make me feel good. Can you enlighten me, "nicky"?
 override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. runTimer() } func runTimer(){ isTimerRunning = true timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector:(#selector(ViewController.updateTimer)), userInfo: nil, repeats: true) } @objc func updateTimer(){ if isTimerRunning == true{ if timerLabel != nil{ let formatter = DateFormatter() formatter.dateFormat = "MM/dd/yyyy HH:mm" let somedatetime = formatter.date(from: "05/18/2019 00:00") let days = Calendar.current.dateComponents([.day,.hour,.minute,.second],from: Date(), to: somedatetime!).day! let hours = Calendar.current.dateComponents([.day,.hour,.minute,.second],from: Date(), to: somedatetime!).hour! let minut = Calendar.current.dateComponents([.day,.hour,.minute,.second],from: Date(), to: somedatetime!).minute! let secon = Calendar.current.dateComponents([.day,.hour,.minute,.second],from: Date(), to: somedatetime!).second! timerLabel.text = ("\(days) days, \(hours) hours, \(minut) minutes, \(secon) seconds") } } }
I’m sorry, I’m still confused?. Could you send me a screenshot of how it should look please?
I would have to second this and frankly I hate small screens for development work. But if you want to use XCode and Swift it is a good choice for on the go. The other option is a much cheaper laptop running Linux. Linux in many ways is an ideal platform for general development. The amount of Swift development you can do is limited but far exceeds what is available on Windows. That limitation really revolves around Apples SDK so maybe not a huge loss.
Xcode and the Swift compiler in general aren’t that terribly resource intensive. The horror stories you read here are usually the result of large projects with overzealous use of frameworks often with sloppy cross-dependencies.
Well it depends upon your development style and the breadth of the project. For me the big limitation is the small screen. Modern IDEs really benefit from large screens in my opinion. Given that there are very light weight solutions on Linux that might be a better choice for compact on the go development.
thank you, I am in the same camp.
https://imgur.com/a/aQTfs6y
Ive never done any swift/obj-c dev, but how would theming work?
Theming means?
with the mac? i'm not sure how that works. but all the times i've done it (e.g. headless rpi setup with vcn) it was pretty ok with mouse and keyboard, but i imagine it'd be horrible with an ipad. honestly i just wouldn't use the ipad for programming, not because it's not a cool idea (it's great!) but because it would be annoying as hell to edit and compile. until Apple makes an Xcode app for ipados (maybe coming in the future with the new hybrid apps?), it probably won't be worth it unless you're writing on-the-go scripts (like for penetration testing i guess). btw until development is a smooth experience on the ipad, i won't ever consider it to be able to replace my pc. it needs a terminal too!
Im sorry I deleted my question before I saw your reply. My original question was "how would theming work?" I mean, if I created an app using swift ui where I decided on some style attributes like this `.foregroundColor(.red)` is it possible for me to change/override that somehow like css does in html?
Swift 5.1 _is_ the runtime that is sufficiently powerful enough for anticipated language features. TypeScript and Kotlin were both designed with the constraint of having to run on a pre-existing runtime, so of course they work on that runtime. Swift was designed the other way around, language first then a runtime to support that language.
I’m sorry I’m even more confused now! Do you have a tutorial I could follow? I’m really sorry but don’t understand some of It and I know I am missing some stuff but don’t know what.
how much coding experience do you have? Not to be harsh, but this is basics 101. I could upload a working app to git and you could just download it, but kind of defeats the purpose of learning.
Just a few of downloads so far, nothing amazing. It was more of a tool for learning and personal use, no big expectations.
I know python but have almost 0 experience in swift. I just got confused because I say somethings I have never seen before and didn’t understand them. Sorry for wasting your time. Could you give me the git so I can see what it is meant to be and what I am missing.
Here is the full view controller code. Drop a label onto the storyboard and tie it to the view controller. Change someDatetime to the date you want it to end import UIKit class ViewController: UIViewController { @IBOutlet weak var timerLabel: UILabel! let formatter = DateFormatter() var timer = Timer() var isTimerRunning = false override func viewDidLoad() { super.viewDidLoad() runTimer() } @objc func updateTimer(){ if isTimerRunning == true{ if timerLabel != nil{ let formatter = DateFormatter() formatter.dateFormat = "MM/dd/yyyy HH:mm" let somedatetime = formatter.date(from: "05/18/2019 00:00") let days = Calendar.current.dateComponents([.day,.hour,.minute,.second],from: Date(), to: somedatetime!).day! let hours = Calendar.current.dateComponents([.day,.hour,.minute,.second],from: Date(), to: somedatetime!).hour! let minut = Calendar.current.dateComponents([.day,.hour,.minute,.second],from: Date(), to: somedatetime!).minute! let secon = Calendar.current.dateComponents([.day,.hour,.minute,.second],from: Date(), to: somedatetime!).second! timerLabel.text = ("\(days) days, \(hours) hours, \(minut) minutes, \(secon) seconds") } } } func runTimer(){ isTimerRunning = true timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector:(#selector(ViewController.updateTimer)), userInfo: nil, repeats: true) } }
I should have been a bit clearer when mentioning Swift 5.1 features as I was referring to the Swift 5.1 standard library features which is like the Java standard library features being upgraded over time and requiring JVM upgrades (even though the JVM runtime and the Java standard library could in theory be separated and I believe was attempted a few times). There are some new APIs on Collections for instance which you cannot call in iOS 12.2. &amp;#x200B; There's a difference between 1) compiling compatible code which can be run on a minimum version of an environment versus 2) an environment which has all the dependencies your compiled code expects. &amp;#x200B; So yes, code compiled using a Swift 5.1 compiler can run on iOS 12.2 as long as it does not have a dependency which is not available in iOS 12.2. &amp;#x200B; With Swift 5.0 ABI and 5.1 module stability, you are supposedly guaranteed that compiled Swift code (on Apple's platforms anyway) is compatible. Newer compilers will generate compatible code so a Swift 5.0 and say a future 10.x compiler will be able to generate binaries (whether executable or library) which can correctly invoke each other. (We'll see when/if features like native coroutine/async syntax and any more memory ownership rules are implemented. In theory, the ABI was designed with all of these future language features in mind.) &amp;#x200B; So the "runtime" (or at least the real runtime not the runtime plus standard library) is compatible. The problem is all these dependencies beyond the pure runtime of the language. (BTW, I believe Swift's and Go's real runtime without the standard library is relatively large compared to say Rust's runtime due to ARC for Swift and the garbage collector for Go; this will become even more evident if people use Swift for WebAssembly versus say Rust). &amp;#x200B; As an aside, the JVM went through a few major adjustments IIRC. Java was shipped to the world in the mid-1990s. While it's impressive that you can compile code to a 2006 JVM from 2019, you're also missing the first roughly 10 years of public existence where there were big changes being made for better or worse. Swift only has 5 years under public scrutiny.
I have to write a simple app to ask the user for a word or words and then determine if it is a palindrome and then return true or false. Per the instructions, I need to create label field, a text field, and a button. I already wrote the function in another file called Palindrome.swift (per the instructions) but now I have to connect the text field to the function so that when the user enters a word and press the button, it will call the function that is in another file and return either true or false. I haven't learn how to do this yet so I googled but the results are quite confusing. Which section of the Swift language guide teaches this or is there something else that does for beginners? &amp;#x200B; [This is the assignment in case my writing is confusing.](https://github.com/LambdaSchool/SwiftStrings)
How much space do you have? You need at least 24gb (7.2gb for the .xip + 16.61gb for xcode 11 beta), then unzip using apples "archive utility". My problem was that I underestimated Xcodes size and was short a few mb's.
I wiped sooo many things last night on my internal hard drive which then had 8gb free after Xcode was downloaded, then I even wiped my external 2 TB hard drive and plugged it in my MacBook and downloaded the Xcode 11 beta into the external hard drive and tried to launch and still got the same error. Thank you for getting back to me
Great job! thanks
Hey! Any Swift enthusiast here in Mexico City?
thanks. In structure/form, how would the tap listener with action code look like?
Swift doesn’t use garbage collection, but automatic reference counting, which are real calls to retain and release, except they are automatically inserted into your code at compile time through static analysis of the lifetime of your types. This is usually much more performant than garbage collection, and it is certainly more predictable and therefore consistent than garbage collection. However, in tight loops and some other scenarios you might end up with very excessive release and retains, causing memory to be allocated and freed, instead of reusing the same memory over and over. It is usually possible to overcome by manually optimizing code in such as way as to “trick” the compiler to reduce the memory management, but it often requires understanding how ARC works at an implementation level, and then exploiting that through implicit control. Another method is to bypass ARC altogether by putting your objects in Unmanaged memory and passing those around.
Nice work. I’ve just downloaded Xcode 11 this is going to help so much with first dive into framework
I have a pet project that has less than 5k LOC. The compile time is all right on my 15” MBP 2018. I would not recommend a 12” Macbook. 13” MBP doesn’t cost that much more, but is noticeably more performant.
The beta of Xcode is available even on macOS Mojave.
Part of the issue is that Combine's integration with Foundation isn't part of this first beta, so not all of the integration points are there yet. So only people who build their own integrations can really do much here. Within the next month, as we get newer builds, I expect to see more integrations popping up.
If your question is "How do I learn Swift?", those apparently go right in r/swift as new posts every morning.
Not sure if you have seen it yet, but I found the [Modern Swift API Design](https://developer.apple.com/wwdc19/415) talk at WWDC very helpful. They talk about property wrappers and they indirectly answered a handful of SwiftUI questions I had.
But there is a "Easy question" thread at the top of r/swift. What is that for because for beginners there really isn't any easy questions.
Check out the last few minutes of this video: https://developer.apple.com/videos/play/wwdc2019/401/ They talk about the sweet new tutorial experience that you may like.
Look up Code With Chris on Youtube if you're looking for a visual tutorial to start off with. Make sure you find the 2019 edition of his Swift For Beginners playlist as there is an older set of tutorials from 2016/2017.
Nice! Tiny gripe: Should be "UIKit" instead of "UIKIT"...
UITextView — No equivalent (use Text) Isn’t Text just a label? How do I create an editable multiline text box out of labels? Or anything for that matter... I have an idea for an app to work on while I learn SwiftUI but I need something like a UITextView.
This is amazing! But I have a question. Do you know how to get NavigationView to work with a Tabbed view? I had this working in my app previously with UIKit and am trying to replicate it in SwiftUI.
I use Jump occasionally to share my minis screen. There is some scrolling to do, especially since I’m on a 9.7” screen but it works. You can even push the app to the same iPad for testing as long as you are on the same network. I would probably do it more often if I had one of the bigger iPads.
If you google “iOS Charts framework” you’ll find one. I thinks it’s just called Charts. I’ve used it on one of my apps
I've tried using that but I don't understand all the documentation cause it's for android.
Seeing as how the name of the function has "naive" in it, I don't believe it's supposed to be a proper implementation.
Because they wanted a reason to force people to move to iOS 13. That's it; there is no technical reason. This is normal, though. Just about all new features Apple shows off at WWDC end up requiring the newest version of iOS.
I get that but it was labeled as an algorithm that takes O (log n) time which I don’t think is valid
Was that specific algorithm labeled as O(log n)? Or was an algorithm that they built to labeled that way? Because that one is not.
It was an algorithm they built. I think this one takes O(n) time. Please correct me if I’m wrong
It's wrong. Very wrong. You are not going to get log of n if what you are searching for is at the last index.
Technically it’s O(log n) but only because it’s listened to be half of n unless it’s immediately false.
It’ll be half of n if it’s the last or n/2-1 index.
Sure, let's say it's an array of 32 numbers. With a proper binary search, how long do you think it will take for proper binary search to find an answer vs what you posted?
Ok so how do I pull Text to the top of the view? Everything is in the middle.
No, this is not valid binary search. More like intermediate point before substitution of proper algo
1/2*n still counts as O(n), unless you prove that 1/2 is not a constant but fits under log or other function with any large n, which is impossible
It doesn't say "native".
Ahh, I misread. Now I know why it was implemented that way.
I didn’t post anything. And I also didn’t say it was similar to a proper binary search.
I have yet to sort it out. Just trying it out for few days
Follow this tutorial https://developer.apple.com/tutorials/swiftui/, you will learn a lot of things
thanks
Did you need to pay $100 to get to use SwiftUI?
Awesome! Thanks!
I see that the [View protocol](https://developer.apple.com/documentation/swiftui/view) has an [onDrag](https://developer.apple.com/documentation/swiftui/view/3289004-ondrag) method that "Activates the view as the source of a drag and drop operation." But, onDrag is only available on MacOS. :(
Thank you so much for the heads up - I'm hoping to get MVVM into my next practice app!
Dang. Good research. UICollectionView into the next decade it is, then.
[Here is the Charts iOS repo](https://github.com/danielgindi/Charts) on Github. I only did a tutorial for it so I don't have any experience using it beyond that.
I think I found a solution; just make a function somewhere else: func makeNavigationButton(to landmark: Landmark) -&gt; some View { let detail = LandmarkDetail(landmark: landmark) let button = NavigationButton(destination: detail) { CategoryItem(landmark: landmark) } return button } and in the body: ScrollView(showsHorizontalIndicator: false) { HStack(alignment: .top, spacing: 0) { ForEach(self.items.identified(by: \.name)) { landmark in self.makeNavigationButton(to: landmark) } } } or: ScrollView(showsHorizontalIndicator: false) { HStack(alignment: .top, spacing: 0) { ForEach(self.items.identified(by: \.name)) { self.makeNavigationButton(to: $0) } } }
Learn iOS 12 along with new Swift UI. It seems that Swift UI won't be dramatically new. You need to have basic knowledge of iOS because it will allow you to understand Swift UI deeply as well as resolve problems related to new SDK faster.
Same. I have the same issue. Over 30GB free space. I tried downloading it again and again, restarting, cleared the purgeable storage space, everything I could think of.. Nothing helped. I ran out of ideas really. I kept my Mojave though, didnt update it
There is no in built framework to do this, however if you search the app stores theres a few apps that can help
O(N) does not mean a single pass, it just mean linear time. Double the size, double the time. You could loop through ten times and it would still be O(n)
Other than coding a but in Swift every day until you get more comfortable, not really. You may want to start with the App Development with Swift and The Swift Programming Language books from Apple. They’re free and a pretty decent intro and reference, respectively.
Don't have an exact timestamp, but I am sure I saw them demoning buttons in the navigation bar in one of the WWDC talks, and just used the regular "Button" object for that purpose.
Thanks heaps!
Yeah, I saw the "Button" object as a kind of placeholder too. Didn't know if I was just bad at code or if this wasn't working in beta yet. Seems like we have to wait a bit yet.
 guard let test = optionalVariable else { displayAlert() return } // test can now be used
Okay, this is sort of what I had thought. I had started looking through the Hacking with Swift tutorials and I like the language. I think I was mostly interested in answering this question: would I be limited really if I only learned Swift and not obj-c; limited more so in building apps and less so in getting a job at a firm? It sounds like, from the replies that I've read, the answer is that I wouldn't be limited and I'd be fine if I wanted to go that direction. Swift does seem like a cool language, definitely. I'd be much more interested in trying to dig into the native side if I could use Swift and wasn't required to dig into Obj-C - since Obj-C is such a radically different language to most of the higher level languages out there currently.
Disclaimer, I'm still learning SwiftUI like a lot of people here, but here's what I'm seeing: NavigationButton is used within the List itself, wrapping whatever content you want inside of it. It's the equivalent of a UITableViewCell. If you want a button in the nav bar, use PresentationButton. The "[Composing Complex Interfaces](https://developer.apple.com/tutorials/swiftui/composing-complex-interfaces)" SwiftUI tutorial has a good example of it. Easy to goof up though. When I was going through it trying to type in all the code, I goofed the bracket balancing somewhere and just ended up copy-pasting that block into Xcode :D
You can even do it on Mojave ... U just dont have the live reload feature and cant test it on device.... Its supposedly able to work with playgrounds... just search google for that ... u should find some kind of information on that....
Their demos aren’t all functional in the beta that’s available to us. Afraid that this will get me downvoted, but feel free to check out my post history.
This is the case where you use the concept of unwrapping optionals. You can use any one of the available ways to unwrap an optional. Or you can just do the nil check &amp;#x200B; `if optionalVar == nil{` `//show alert` `}` &amp;#x200B; make sure you perform this check before you access the optionalVar
#yolo
I’m gonna start on my new Objc-C app for taking notes while... Psych, it’s SwiftUI month!
Use the `guard-else` construction.
Obviously anything that’s said this early should be taken with a grain of salt, things change. But I watched the video this morning, and I recall they specifically made a big deal out of this “Look it’s just a button, but in a different context, so it behaves the way you’d expect a button in the navigation bar to”.
Anyone know how to set background colour of view using swiftui example needed Thanks
I find guard-let-else to be more idiomatic. That being said, literally the first time I’ve seen .none, that’s neat.
.none is definitely not the standard way, it’s unusually enough to stand out imo (still correct but not standard)
we use guard to stop executing the rest of the function if unwrap fails. This is not ideal in all cases. Again, how to unwrap depends on the usecase
A sample swiftui app. I really excited about
Same here, and not sure how this is different from an \`if let\` or \`if x == nil\`
Just addressing the one part of your question on toolset: in my experience, learning how to learn new things is the most valuable skill you can get besides actually “coding.” This means languages, frameworks, domains, whatever. If your trying to get better at “coding”, sticking with your comfortable language (Swift is fine) is good so you can focus on new coding concepts. This is different from learning to learn and should be treated differently. When you want to practice learning (the skill necessary to get a diverse toolset), practice picking up simple but entirely new things. You’ll learn how to navigate uncharted territory which will make getting a diverse toolset more feasible. How to balance practicing those things is a per-person thing, depends on what you like and where your skills are currently. IMO your starting language isn’t the biggest deal as long as you practice both of those things. You’ll find one(s) that resonate with you and you’ll use those for practicing new concepts (Java and JavaScript are mine).
return displayAlert() .. will also work since displayAlert() returns Void might save you a line.
Three main ways: &amp;#x200B; **guard else:** guard let validVar = optionalVar else { print("optionalVar was found to be nil. Exiting.") showAlert() return // Return is required with a guard statement, so sometimes it's not what you want if you don't mean to quit the function altogether. } // here you can use validVar in your code instead of optionalVar. This is in the scope of the guard statement. I believe it's an immutable value. **if let:** if let validVar = optionalVar { // now you can use validVar inside this if statement. It's an immutable let constant. } else { print("optionalVar was found to be nil.") showAlert() } **if \_\_\_ != nil:** if optionalVar != nil { // use optionalVar! here. (The `!` is ok because it's checked inside here.) I believe the original is mutable here since there was no initializing a new let constant like the other two examples. } else { print("optionalVar was found to be nil.") showAlert() }
Instead of refactoring to another function, it may be helpful to actually refactor to a whole new View. Apple actually recommends to use views liberally, as they are very lightweight. And you can then write var body: some View { let foo = ... return bar } In the top level of the getter of body you can use variables as you wish, you only have to keep in mind that you then have to make the return statement explicit.
ForEach requires you to return a view. Once you add more than one statement to the closure, you don’t get the implicit return. Try adding an explicit “return” before your NavigationButton
I don’t think these answers are wheat you mean. No there is no way that I know of
SwiftUI and Combine will lead to much more rapid development for seasoned developers. As long as it’s ok to cut off old versions, it would be the logical choice.
Considering both of these are huge languages, it’s very likely you’ll find some “Swift for Python programmers” books or blog posts that can give you a sense of direction without having to start you off from 0
Damn, you just changed my life.