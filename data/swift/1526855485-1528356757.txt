SwiftPM’s feature list compared to NPM/Bundler/Cargo (Or really any other language that is anywhere near Swift’s popularity) is actually depressing. It only speaks XCTest, it only does runtime dependencies (no dev-only deps) and feels like it gets in the way as often as it solves an actual problem. With WebAssembly on the horizon Swift might miss a huge opportunity.
&gt; impact on one's ability to learn programming? Of course you can learn anything after Python. That's not the question. The real question is: if Python is your first language, will it set you on the wrong track? I think the answer is yes it will. And indeed, those beginning to learn programming _should_ learn assembly. University students usually learn assembly programming within the first or second year, along with Pascal and/or C. &gt; yet everyone who has been programming for 10 years now started on a system which was far slower than Python on a modern PC. Hm? That's not what the issue is. The issue the kind of mentality that gives no concerns for performance. It's not uncommon, specially among new programmers, and I suspect it has a lot to do with people learning programming via Python/Ruby/Javascript. 
Yep, inference is a piece of cake compared to training. CoreML (Apple) and ML Kit (Google) facilitate the on-device inference. ML Kit appears to take a step toward helping with server-side training as well. From what Google announced at IO this year, there’s little downside to using ML Kit other than being tied to Firebase. ML Kit comes with a handful of pre-trained models for common on-device activities and the ability to use TensorFlow Lite to build a custom model. I expect Apple to announce further ML capabilities at WWDC in a couple weeks. Hopefully, they’ll provide some canned models like what Google is doing.
Core Data is an Objective-C library, isn't it?
&gt; Swift would be amazing if Apple could branch out Amazing at what? &gt;Apple has allowed Swift libraries to get really buggy and outdated (Core Data, anyone?!??) CoreData isn't written in Swift. In fact, you can't write CoreData in pure Swift. CoreDate relies on the Objective C runtime. &gt;imagine if Apple started putting their weight behind Vapor? They already pretty much killed a vibrant WebObjects community by porting it from Objective C to Java for "portability and safety" reasons. Turns out people don't value "safer" code on the web. They value agility.
For a visual cue, you can try textfield.isEnabled=false. I'm pretty sure it grays out the input. 
It's much easier to help you if you post the text of the code and not an image. Also, post more of the context so we can understand how the methods relate to the class.
To be fair though, Swift is an open platform available for non-Apple OSes if they want to use it. It's just that others have little incentive to adopt it for their own uses.
This will be better formatted if you put 4 spaces in front of your code and an extra line between your code and any explanation.
Yeah but Haskell also doesn’t have corporate support. Objective-C should’ve had better tooling, which should have led into better initial tooling for Swift. I think Apple just neglected to focus on that part of things is all.
import Darwin enum Suit: String { case club, diamond, heart, spade static let all: [Suit] = [.club, .diamond, .heart, .spade] } enum Rank: String { case ace, two, three, four, five, six, seven case eight, nine, ten, jack, queen, king static let all: [Rank] = [ .ace, .two, .three, .four, .five, .six, .seven, .eight, .nine, .ten, .jack, .queen, .king] } struct Card { let rank: Rank let suit: Suit } extension Card: CustomStringConvertible { var description: String { return "\(rank) of \(suit)s" } } // shuffle methods from // https://stackoverflow.com/q/24026510/887210 extension MutableCollection { /// Shuffle the elements of `self` in-place. mutating func shuffle() { for i in indices.dropLast() { let diff = distance(from: i, to: endIndex) let j = index(i, offsetBy: numericCast(arc4random_uniform(numericCast(diff)))) swapAt(i, j) } } } extension Collection { /// Return a copy of `self` with its elements shuffled func shuffled() -&gt; [Element] { var list = Array(self) list.shuffle() return list } } var deck: [Card] = [] for suit in Suit.all { for rank in Rank.all { deck.append(Card(rank: rank, suit: suit)) } } deck.shuffle() let hand = deck[..&lt;5] print(hand) // [nine of hearts, eight of diamonds, jack of hearts, two of clubs, four of clubs]
&gt; but it’s latest release its* latest release it's = it is
Imagine a day when you can use some native compiled language across a whole bunch of different platforms. Might as well be Swift. One thing that's odd about these charts is that the #3 language is more popular than the numbers 5 thru 10 combined. The distribution of the languages is like everything past a certain point drops very, very quickly. I was blow away that the first few dominate the whole field, but glad to see that one of the languages that I know and use is building a future. It sucks to be in a future\-less language, I've been there before.
I suggest peeking at rust, if you want an all-purpose, natively compiled and (most importantly) save language. 
I picked Python as my next language because it's the choice one for AI and works with backend servers. I'm thinking that Swift, Kotlin, Python should be the last languages that I'll have to learn.
Learning new languages gets easier and easier (the more you have learned already), it's worth the investment of time, because you learn about completely new concept for solving problems with respect to each language 
But: * I already have a whole codebase in Swift that I want to reuse * I don't know Obj-C * I don't have much experience with manual memory management * compile time doesn't hugely matter as mostly I'll just be hot-reloading JS
I've learned over 12 languages so far, it's really an issue of doing projects more than learning more tools that do about the same thing. Example: I was comfortable with Objective C and doing complex project with it. I stopped and spent time with Swift and now feeling pretty comfortable with it. Learning Swift hasn't developed any better projects or more projects, it's just a different way of doing what I was already doing. What I need is more projects of any language, be it C#, Swift or ObjC.
Fine points, but nitpick: ObjC hasn’t required manual memory management in something like 10 years.
Good bot
You really need to take some time to format you code so that others can read it. You're asking other to take the time to fix your problems for you, you should take some time to have well formatted code, meaningful var names and maybe some comments. Anyways, index out if range... so I'd step thru the code with the debugger and find which line \(assuming there's more than one line of code, hard to tell :D\) is causing the error. Do you know which line is causing the error? Did you check the array to see if the index is inside of the range of the array?
Just wondering what value a shuffle would have. If you access the cards using random, then what difference would it make if they were shuffled or not? With a physical deck, your shuffle is the random when you deal from the top, but in a computer program, you get the same effect when you just use random to select.
Sorry about the formatting but yeah I made sure all of the index’s were in range and the line where the error occurs changes every time I run the program 
Thanks for the help
Well an array goes from 0~51 so that makes 52 numbers for the deck... I think 
A shuffle is simpler, code-wise and conceptually, than a random pick. With a random pick you have to modify the size of the random pick each time and you risk one-off errors. You can do stuff like use the size of the array to control the size of the random selection but you might also run into aliasing issues since every pick is now a different size. Yes, `arc4random_uniform` does a decent job at avoiding those kind of issues but no random number generator is perfect. Unless you're seriously concerned with the speed of shuffling an array of 52 items I would just shuffle the whole thing and simplify the code overall. After all, if this is a blackjack program you're probably going to want most of the cards anyways so why not shuffle them all the same and keep the random pick as even as possible? The time saved vs doing a random pick is likely to be small, especially compared to other aspects of the program. The shuffle algorithm is well-understood and tested. With it all the "random(52), random (51), random(50)" becomes a single "shuffle". Much easier to understand at a glance and simple code is much easier to debug and work with.
If you put 4 spaces in front of your code it will be better formatted than doing an ordered list like you have here.
Ohh my bad, went i went to upload it on my computer, it looked nothing like this. It was indented, sorry mate. Will look into it
No problem, I mention it just so that people can understand the code better and help you easier.
If you properly indent your code, your less likely to have this problem. 
I am not sure what you mean. I am trying to go onto reddit page at college and safari can’t find it:( Can i send you a pic instead??
I copied my code from Xcode to the text when posting and it was indented then so not sure why it has changed??
Somehow you have line numbers in front of the code and it gets formatted as an ordered list. Even if each line starts with "1. " then it will get numbered as an ordered list.
Ohh right, thanks. Will remove them now and try and format correctly
I normally will do my protocols and interfaces, stubbing out methods in a way that they will fail when used. Write some unit tests. Then I'll fill in simple implementations and test them. Once this is done I can go back and refine what I already have. Maybe I'll profile the project and see what it spends a lot of time doing if the project has portions that need performance. If you have properly split your methods into simple implementations with single responsibilities then you should already be most of the way on the path to a good project. If any of them get overly-complicated then that's a sign that you may need to split it up into several simpler methods.
In my opinion and experience: Absolutely No. There is nothing about this I think is a good idea. It sounds to me as bad an idea as going backpacking for weeks and only fixing your course and your equipment once you’ve reached your destination. I’d like to know how one can have a development process that allows this to work out. I’m interested to hear about that. I try my best to always keep the code as neat and complete as possible. Especially the parts where various parts of the system interact. In more isolated parts you can be more relaxed. Before adding new features or doing major restructuring I always try to make sure everything is as clean as possible. Keep naming correct etc. No hidden complexities or known bugs etc. I add features in very small incremental steps, often with a lot of refactoring in between to keep chances small and comprehensible and meaningful. I make sure that everything stays clean and working as its own thing before changing or adding anything. If you try to build new shitty stuff on top of shitty foundations the complexity of the whole thing can easily grow exponentially and things can easily get out of hand. And you need to go back or tidy things up to get it into a comprehensible state. I have never seen any app or framework that ended up great based on shitty code added to shitty code and then “fixed” later. Of course one can improve shitty code, but only in incremental clean steps anyway. In my experience you end up with a great end result only when your project “hygiene” is great all around. As soon as you realize there are problems somewhere in the process or on the team etc. you need to address it and fix it before the problem grows. When you are working with products that are deliberately constructed you need to always keep tidying, cleaning and adjusting.
which line is it crashing on? have you set an exception break point? it might help debug if you know which index it’s not ok with. and are you sure that ‘deck’ array has 52 values?
The first one initializes an array with objects of type bar. The second one equals an array filled with one initialized bar object. You probably have to also add the type of the array for example: var foo: [bar] = [bar()]
tl;dr It depends on whether `bar` denotes a value or a type. ### bar is a Type Then the first form ``` var foo = [bar]() ``` constructs an empty array of type `bar`. While the second form ``` var foo = [bar()] ``` Constructs an array with a single element of type `bar`. ### bar is a Value Then both forms ``` var foo = [bar]() var foo = [bar()] ``` are invalid because they violates the phase distinction: `[bar]` the array literal and `bar` the variable reference are already both values - you can't apply them to an initializer. 
The first is correct, the second is probably different from what you are expecting. In the first, you are declaring an empty array of Bar types. In the second you are creating an array of size one with one empty Bar instance. Both will give you an Array of Bar types, but one is empty and the other has one item in it. 
Many thanks. I learned something today. Not only that I just realized why I was having some weird problems in the first app I wrote. 
Yep, you have to declare one of them `weak` so that a retain cycle can't occur. It doesn't matter if they are `Optional` or not. Although you could manually set one or the other to `nil` and the cycle would be broken. I don't recommend that kind of manual resource management unless you have a very good reason for it.
You must have an unfinished line of course somewhere else in the class, because you're not using Wodzilla as a type, that error doesn't make sense with the code you posted.
I've written code I intended to be demo code that ended up shipping. Another reason to do it right the first time. 
That should do it.
Holy balls, thank you! Thank you for explaining for invert does as there is no discussion for it on Apple.
Actually, I made a mistake reading your code. This will not cause a retain cycle because you have references to a `RSSItem` instance but no references back from the `RSSItem` instance to the other objects. When either the `ListViewController` instance or the `MainViewController `instance are deinitialized you'll still have a reference to the RSSItem instance. When all of the references go away then the `RSSItem` instance will be deinitialized.
When you say "make sure everything works..." this is either you not knowing how to work with a framework/API or test code... in that case, I make a test bed to prove what the code does. Generally companies will have version control for the shipping code, then have test bed code where they play with things so that they can prove it works. Once it's proven, it goes into the project. For a new one, I always like to have all the smaller things proven before I use them. After I know everything will work, I make the real program. The main reason for this is that you know more about what the classes should look like. Take a database app where you don't know all the fields in a table... you have to go back and redo things over and over again. If you know all or most of what you'll need at the start, you don't have those problems.
In addition to that textbook Apple actually released a course on Swift that’s designed for high school and colleges to use. It’s called ‘App Development with Swift.’ There is also ‘Intro to App Development with Swift’ if the class will be aimed at younger students. 
When your app launches, the `images` array probably starts empty. When the user picks an image, you’re adding it to the array in memory, but you aren’t storing it to persistent storage which means every time the app launches, you’re getting a clean slate. You probably need to add two things: 1. After the user chooses an image from the image picker, you’ll need to write it to disk. 2. When the application opens, you’ll need to read the files from disk again to populate the `images` array. Check out NSFileManager for basics on reading and writing files to the file system.
Just wondering what parts of a language can you use? Not all languages offer the same string/array handling. I've seen some challenges that are simple 1 line answers where in other languages it's 10 lines... Are you allowed to use anything that the language offers?
I believe it's *anything* for whatever specific version you're on. Some challenges are on Swift 3.1, others are on 4.
I've updated the code sample to use a \`\`RSSItem in the list controller, hoping to cause a retain cycle.
Int has an optional initialiser that takes a string as a parameter, so you could flatMap over each character in the string, re-convert back each character to a string type and then call reduce to sum them all. (https://imgur.com/a/0XZgy6J)[Spoiler]
Not sure about the main question but you mentioned you don't know how to convert CLLocation into points on the screen. You can do that using the `convert` methods on MKMapView.
Nice code. Thank god we're getting an enum enumerator in one of the next Swift releases.
[UIProgressView](https://developer.apple.com/documentation/uikit/uiprogressview). It’s a pretty nifty UI element. Protip: if you want it to have a different height (default is 2) just set a height constraint on it. 
There is no retain cycle. You have two “pointers” to an instance of an RSSItem, one in the List and one in the Main. When Main gets deinitialized, it will first deinit its List, which will in turn deinit its own RSSItem pointer. Then Main is free to deinit itself, which will cause its RSSItem to deinit. You could cause a retain cycle by having Main point to List and vice versa. But RSSItem is a simple “dummy” class so to speak. Play around with your code in Instruments’ Leaks inspector. 
Thanks!
Ohh it hasn’t come out right with all the numbers. I will send you my code in morning(i’m UK) since it has been edited. It is to do with the ‘swifteracc.posttweet(....media: .....)’
Ohhh okay. Thanks a load for searching it but i’m not looking to post images, and without putting ‘media’ in expression, it gives error of no media!!? Will try passing nil but i don’t think that worked, will look into it tomorrow:))
Nil won't work, as it's not an optional in the function you're using. If you just want to post a tweet without an image, use this function: `postTweet(status: String, inReplyToStatusID: String? = nil, coordinate: (lat: Double, long: Double)? = nil, placeID: Double? = nil, displayCoordinates: Bool? = nil, trimUser: Bool? = nil, mediaIDs: [String] = [], attachmentURL: URL? = nil, tweetMode: TweetMode = TweetMode.default, success: SuccessHandler? = nil, failure: FailureHandler? = nil)`
Ohh thanks, will definitely try that when i can!!:) I have just been looking to have a twitter bot which tweets to the apps account, not to users or anything, simply so other can see its activity!! Thank you for your help, much appreciated:) I am just a noob:( 
We all have to start somewhere, good luck with it. Let me know if you have anymore questions
It’s is crashing after the first line of pick a card then remove it from the deck and yes deck does have 52 but the error moves around a bunch it the dealing process 
&gt; It’s pretty sad when an obscure and hard to learn language like Haskell has better tooling. funny, I was thinking the exact same thing.
Most job interviewers are very happy when you use all the tools available, unless they specifically tell you not to use a certain tool.
True. I would love to have a Linux version of Playgrounds, though. Having IHaskell in a Jupyter notebook is pretty nice. Very slick. 
It looks like the JSONDecoder isn't finding the `id` key in either `Project` or `User`. Do you know what the JSON you are getting is supposed to look like? If any key is only in the JSON some of the times, then it should be an optional.
Not for any job unfortunately... just for general learning for now. Don’t think I possess enough knowledge to “hold my own”.
No, you’re fine. Example: The Reddit app
This is true. In the real world, it's about getting things done. Hand crafting a look to extract digits from a string and adding them up might prove that you have the brains to figure that problem out and even optimize it... but that would be foolish in the real world. I talked with a hiring person at Google for the YouTube iOS app. I pointed out that I've worked professionally for many years and have never, ever done anything like those tests. More over, iOS is about knowing the APIs and 3rd party stuff, not trees and sorts. He agreed, but said it's used to filter people out. He said if you can hand craft a few of those things on the fly, you can figure out a complex API.
1) Make it very clear that you don’t allow NSFW content. 2) have a report button in each post for other users to report NSFW contents. 3) Be able to ban users based on device UUID 4) Not recommended: have an endpoint which turn all these features off once the app is approved, but you have to turn it back on every time you update the app
Exactly. I think part of the problem is that they have automated systems for doing the tests that they do now and filtering thru 100's of people is a real PITA. I can't imagine a larger company and how many people they have to filter thru, yet it's such an important part of the process. They need skilled people, yet so many have a suck hiring process.
Here's the thing... I see Reddit app is rated at 17\+... while Instagram is rated at 12\+. I wonder if the rating impacts app download.
I created a free music streaming service [https://itunes.apple.com/us/app/song\-squad\-unlimited\-music/id1367500948?ls=1&amp;mt=8](https://itunes.apple.com/us/app/song-squad-unlimited-music/id1367500948?ls=1&amp;mt=8)
It’s only really for parents that utilize parental controls. I have apps that rely silly on UGC and it hasn’t had a negative impact.
You have to clarify that you’re calling init() on the super object, not on yourself. 
But why the dot? Would super init() not be more preferable, similar to override?
You are inheriting this method but also overriding it. To be able to inherit its functionality you have to call it explicitly otherwise you’ll be ignoring what it does. 
Because override is a keyword or label. super is an actual variable, like self, that represents the other object.
What is a use case for super in other cases? Is it not implied when you use a method or variable from the super class?
When you init in a sub class is that an implied override? 
Nothing is implied in Swift. You’re overriding it in the declaration: `override init() {...}`
Calling the super implementation versus the overridden implementation is one of the other uses.
Ohh, then why do I have to call super.init in a plain subclass init with no override keyword? If i take it out Xcode fusses and says it was not called on all paths
You can have more than one init. But also, sometimes we write things out for clarity. For example, chained unwrapping is required notation but doesn’t change behavior. x?.y vs x.y where x is optional
If you just called Init() from within your Init() method, it would recurse into the same method over and over until your app crashed. You want to call the version of Init() as implemented in the parent class. It will do the same to its parent class, and so on. This is done regularly for overridden functionality. Call the parent method and then do some extra stuff. Sometimes you don't call the parent method at all, but for Init it's required. 
This is the type of proposal that will take immense willpower to push forward. I'm glad to see Chris behind it, because I don't think that an outsider could do drive it.
How would it be preferable exactly? It's the same number of characters.
If it's a vertical slider, shouldn't you be setting it's height equal to the height of the view? Anyhow, you can do it like this: `textSlider.widthAnchor.constraint(equalTo: textView.heightAnchor, multiplier: 0.8)` Also, about the nil error. I believe it's because you're calling `configureSlider()` when textSlider is set, and inside that function, you're using `textView`. If the slider has been initialized before the `textview` has, it will crash because the `textview` will be nil. Try calling `configureSlider()` inside `viewDidLoad()` and see if it works. 
Thank you mate!! Yeahh i will, you don’t seem like no noob!!:)
Sounds to me like these difficult challenges are precisely what you should focus on. Just keep using Google &amp; Stack Overflow until you solve them. If it’s not hard, you’re not really learning anything new.
https://github.com/raywenderlich/swift-algorithm-club/ This is a neat resource.
Its very hard, but im defiantly determined. I will keep using those!
Thanks! Im gonna look over all of these!
All app growth is inorganic anyways. I recommend you get someone at a college to promote your app for you(large numbers of Internet savvy forgiving users) instead of relying on app stores. 
`bar` could be a function/closure, too, then the last example would work. Eg. `let bar: ()-&gt;Int = { 42 }`.
As far as for the iOS app goes without any backend stuff you absolutely can build it in swift 100%. You could now even build the backend in swift but that will require more knowledge about backend systems. You sound like a beginner, maybe you want to go ahead and try to replica these apps. This help you get to know the apple frameworks and how to build complex ui‘s. It is not so hard as it sounds, these people are also just devs who learned it the same way. You can even look on YouTube, a channel called let’s build that app has some videos where they copy a app such as YouTube or the Facebook messenger. 
Games generally make limited use of system APIs. Granted for places where they it makes sense like interacting with the app store, in app purchases, notifications, etc they use system APIs, but for things like graphics and gameplay they use either a gaming framework (aka an engine) or custom write one. In that type of situation you will largely use whatever the framework is designed for. For one of the major frameworks, Unity, that is C#. There is no inherit reason that I know of that you couldn't write a gaming engine such that it uses Swift but the language is also new enough that I don't think any of the major gaming frameworks use it as a first class language. An app like tinder or snapshat could theoretically be written in 90% swift. In apps like that though there are generally weird little edge cases where you end up dropping down to something lower. Maybe Obj-C, C, or C++. Hard to say for sure without actually being involved in the actual project. *Disclaimer: I'm a fledgling swift user, non-video game developer, and noob to iOS development in general. That said I'm an experienced software engineer. This is written from my general knowledge of the field and not specific knowledge of the platform.*
I thought when uploading an app it had to be written in Swift. Confusing 😂
If you look at the other comment I think he has it right. Again it depends on the type of game you want to develop but for high graphic games you will need to learn unity or unreal engine for example to develop those. Swift will be good for simple games but not for games with high end graphics. So I would suggest you look into these engines and especially C++ if you want to focus on mobile game development.
I'm a big fan of the Ketchapp style stuff at the moment. 
&gt; snapshat I don’t know if it’s a typo, but I love it. 
It was a typo, but thanks anyways :-|
To be honest I’m not into mobile games so I don’t know of what you are speaking. Unfortunately, I’m also not too much into mobile game development, however you might want to search the web for some SpriteKit or metal tutorials and see if these libraries fit your needs and if so there should be nothing in your way in developing mobile games in swift.
Shitty code never, maybe you can say code without over engineering or without optimize the app, but with the experience you will able to write code more or less optimized without notice it, you should try to write as simple as possible and also try (when possible) to split your code in classes/methods using the single responsibility pattern, this will give you a nice testable, because if you are prototyping maybe you would skip the test, and later on if the code will be shipped you could then write test for each important part of the code.
Another tip could be, you write your code in one place i.e. in one method and when you know that it works as expected you could start splitting it, this is for cases where you really don’t know how to proceed, like doing something that you never do it.
Pardon syntax errors Class foo: bar (){ Init{ { } Xcode tells me i need super.init right below the normal init 
a variable name is not the same as the “name”’property on a node You have a var named “topLabel” You do not have a node with name “topLabel” Best advice, learn what force unwrapping is and why you absolutely don’t need to do it here. 
Why are you doing both var topLabel = SKLabelNode() and topLabel = self.childNode(withName: "topLabel") as! SKLabelNode You're creating an `SKLabelNode`, throwing out out, then trying to load another one, failing, and ignoring the failure while you try to cast it to a SKLabelNode. Do you ever set a child node with the name "topLabel"? I don't see that happening anywhere in your code. Are you setting it externally? If so, you should properly test for it before you attempt to use it. You're obtaining it with [`childNode(withName:)`](https://developer.apple.com/documentation/spritekit/sknode/1483060-childnode) which returns a `SKNode?`. Your code should look like: var topLabel: SKLabelNode? var bottomLabel: SKLabelNode? override func didMove(to view: SKView) { guard topLabel = self.childNode(withName: "topLabel") as? SKLabelNode else { return } guard bottomLabel = self.childNode(withName: "bottomLabel") as? SKLabelNode else { return } // ... startGame() } Now the rest of your code can properly check to see if those `SKNode` instances were properly loaded and handle them if they weren't. Even better might be to simply throw an error or crash gracefully if it doesn't make sense for your game to continue if they didn't load properly.
They did answer. If you force unwrap a node, you better be sure it exists. You only force unwrap when you are so sure that it may as well crash if you are wrong.
One thing we used to do back in college was to try to figure out how something was done. We'd take a commercial app and try to figure out how they did something and try to dupe in on our own. It's really a great way to learn things.
What are you goals here? I ask because those code fights aren't very real world. Real world is MUCH more debugging and calling APIs. Although learning is learning, and debugging is about looking at code and understanding what it does and what the author intended it to do, so it helps, but it's not quite the same skill set. My understanding of these code wars is that you aren't looking at existing code, you're writing code from zero, that's a different \(still important\) skill, just different. From zero means you have to know the options the language has open to you and how they work so you can find the best options. Not exactly what you'd be doing day to day as an iOS dev.
As Bill3d answered, you are force unwrapping in topLabel = self.childNode(withName: "topLabel") as! SKLabelNode bottomLabel = self.childNode(withName: "bottomLabel") as! SKLabelNode ball = self.childNode(withName: "ball") as! SKSpriteNode enemy = self.childNode(withName: "enemy") as! SKSpriteNode main = self.childNode(withName: "main") as! SKSpriteNode Change all these to `as?` instead of `as!` To see which one is coming back nil to debug
1. Yes, there are answers in your original thread, maybe you could read them and respond to them there. 2. Don't expect any help if you are so impatient that you think it helps to repost the same question within an hour after not getting the answer you want.
It can be written in Objective-C.
&gt;Apple has a knack for designing something great but only going about 80&amp;#37; of the way. Apple Server is a prime example. I was so very naive to think i could use profile manager at my company to manage even 50 macs. 
You can just use `reduce` when you combine it with the null-coalescing operator, `??`.
That would make since. I learn better by thinking up my idea, finding some documentation to cut up and then forming it to suit my needs. Rinse repeat until i have a thing that works. I am determined to try and teach myself SOME coding language. 
I'm pretty biased as the author, but you may want to checkout Classic Computer Science Problems in Swift, which is a book for intermediate Swift programmers who want to expand their knowledge of computer science/algorithms in a hands\-on tutorial like fashion. I also recommend checking out Swift Algorithms Club as another commenter mentioned. If you want to buy the book, you can use promo code kopec40 for 40&amp;#37; off: [https://www.manning.com/books/classic\-computer\-science\-problems\-in\-swift](https://www.manning.com/books/classic-computer-science-problems-in-swift)
&gt; is super a keyword [Yes.](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html)
&gt; You can nowadays even develop iOS apps in JavaScript. That's a strange way to phrase it. That was the original development environment for it, before it was even called "iOS"!
What does Bar look like? (Notice you should capitalize class names)
It's a lot more efficient because both `flatMap` and `reduce` are essentially loops. They iterate through the entire array and return a result. If you use both of them then you iterate through the array twice. By only using `reduce` you only iterate through it once. Not only that, but `reduce` updates a single value each time and `flatMap` produces an entirely new array. As far as readability, you are using a closure either way - either for the `flatMap` or the `reduce`. They end up being roughly the same amount of readability. Honestly, in the end the gain in efficiency is probably small and not worth worrying about unless you're performing the operation on very large strings or in a tight loop. It's more about the principle of keeping the code as simple as possible and avoiding unnecessary operations. I do admit that `reduce(0, +)` is pretty in its simplicity. By the way, did you try your code on the example? It doesn't work because you're taking each individual digit and summing them together rather than treating a run of digits as a single integer.
You are right but for a long time apps written in objc and swift performed better and JavaScript was out of consideration for the most part but now with different frameworks such as ionic or react native JavaScript now again became a popular choice for iOS apps. And even for desktop apps, with electron. 
Thoughts: - There goes any chance I had of ever learning *all* of Swift (and I've been programming for decades, and know dozens of languages). They're adding a ton of complexity here -- and continue to add it faster than I can become good at everything they added before. I really don't know how they can claim with a straight face that this is a good language for beginners. - Also, I suspect, there goes any chance of the compiler performance or crashing situation improving. It's already probably the most complex language I've ever used, and this is a huge increment. I doubt there's ever going to be an independent implementation. - Is it expected that people will memorize the `@compilerEvaluable` subset, or just try things and see if it works? The Swift way seems to be the latter (e.g., when is an expression too complex), which makes me sad. - Paul Graham continues to be right about programming language development consisting of taking an idea from Lisp and throwing it at C. - Is it worth it, to be able to check alignment at compile-time? I'm not seeing a benefit consummate with the cost. It seems to be mostly pushed by TensorFlow, but that's only mentioned briefly and I'm not entirely clear on how or why they need it. Apple engineers have already pushed back on areas where Swift is simply not a good match (e.g., protobufs with Codable), yet in this case they seem willing to drastically change the language to meet entirely new requirements. - A hygienic macro system? Holy shit. They really should have called the language "Kitchen Sink".
What are you trying to achieve and what is „Not working“? (i am ob mobile so i cannot test your code at the moment) 
I tested your code now. It is working as expected. So what is the problem? 
I'm aware they're both loops. But given that I imagine the compiler will likely optimise the code, the efficiency difference is probably negligible. It is still O(n) complexity where n is the number of characters in the string. And given that we're operating at such a high-level, I value readability over these optimisations generally. Regarding not matching the test case, I misread the requirement there :) 
If you’re using constraints, change the frame will have no affect. 
The project response has a `project` key that contains the full object. Your model is just looking for `id` at the root when it’s actually nested under `project`
It's not _quite_ as bad as Scala yet, at least. :-)
There isn't a default vertical slider, so I have to add a UISlider and then transform it to vertical programatically. So in autolayout, I can't figure out how to drag from the slider width (which when vertical is its height) to the view height. Thanks for the explaining that. I added configureSlider() to viewDidLoad but am still getting the same error on the same line.
Geez, how about focusing on making a compiler that doesn't crash first, before adding a whole metalanguage to it.
Apps yes- these can be fully written in Swift. Frontends, at least: backends *can* be done in Swift but it's not super popular. Games no, these are almost always written in C#/C++.
I learned the hard way by initially trying to create my own unique complex app. I think a more efficient way to learn Swift and iOS is to learn various concepts first from smaller/simpler projects first. I never ended up finishing one of my earlier complex projects because of how inefficient my code was due to my lack of knowledge in Swift and iOS in general. 
Absolute best swift tutorial in my opinion is the Stanford iOS development class, it is online
Code first, refactor later. Also don’t push yourself too hard, because some concepts takes time to interiorize.
Almost all user applications are written in either Swift or Objective-C. There's not really much you can't do in Swift. The server-side stuff would likely be done in another language -- Python, Ruby, Java, JavaScript, whatever -- but that's par for the course. If you're writing a game, you're really better off using Unity (C#) or Unreal Engine (C++) to write your game because they're purpose-built for it. You'll also have the benefit of being able to ship to other platforms. 
Great work! How does this work on top of a navigation bar?
Another example is the tumblr app. In the settings, they specifically have an option for “safe viewing”
Unity would be a better choice for that, because it's more dedicated to games, it's going to have more resources available, and it's easier to deploy to other platforms which, being a game, you'd want to do.
Are you getting error? And if so, what are they saying
Mobile games are written with a custom game engine mostly, or run off of unity, so C# for the most part. I know for a fact some popular apps are still running off of Obj-C. Another example of an app not running off of Swift is called Restocks, it is coded with React, a JavaScript based language created by Facebook. Swift CAN be used for a backend, but generally developers used a more fluid backend language to load data, etc.
&gt; I highly doubt the compiler will fuse the loops You'd be surprised what optimisations can be made, which is why it's important to profile for bottlenecks first than sacrifice readability for zero reduction in time complexity. Looking at the disassembly, reduce is optimised out in the first scenario, but the machine code output is slightly longer. I'm still on the side of option 1 for readability :) but as you said, that's totally subjective. But technically it is: .flatMap { Int(String($0)) } .reduce(0, +) vs .reduce(0) { $0 + (Int(String($1)) ?? 0) }
Absolutely, profiling is the first step to any optimization. Ahh, right. I forgot to convert the `Character` into a `String`. That's because in my code I'm going directly into a `String` through `components(separatedBy)`: func sumOfIntegersInString(_ string: String) -&gt; Int { return string .components(separatedBy: CharacterSet.decimalDigits.inverted) .reduce(0) { $0 + (Int($1) ?? 0) } } 
You can: - block user - block UUID https://developer.apple.com/documentation/foundation/uuid - block IP (not a good idea)
If they unistall the app and reinstall it they get a different UUID 
You can store it in keychain and only generate a new one when there's none in keychain. I'm sure there's ways around this too but it should stop most
Where are you calling the alert from? Are you in a ViewControler Class file ? if so this should work &gt;let alert = UIAlertController(title: "Alert", message: "Message", preferredStyle: &gt;UIAlertControllerStyle.alert) &gt;alert.addAction(UIAlertAction(title: "OK", style: .default, handler: { action in &gt; switch action.style{ &gt; case .default: &gt; print("default") &gt; &gt; case .cancel: &gt; print("cancel") &gt; &gt; case .destructive: &gt; print("destructive") &gt; &gt; &gt;}})) &gt;self.present(alert, animated: true, completion: nil) 
I'm still getting the error "Value of type 'ViewController' has no member 'present'" and yes, I am in a view controller class.
sounds like your missing an import statement of some kind did you include UI Kit ? Can you post the whole VC ? 
Yea that's what I'm thinking.. i've imported UIKit and Foundation. is there an easy way to convert text to code blocks on reddit other than doing 4 spaces before each line? 
I want to move a image up in Y direction after the new view was loaded, so normally I would use viewDidAppear function for this. But when I use it nothing happens. If put the same code in the viewDidLoad function the image is at the target position, but of course I don't see the animation. This means for me the animation code is fine, but something with the viewDidAppear function is not working...
There are Debian packages for Swift (amd64 and armhf) at https://packagecloud.io/swift-arm As an IDE you could use VSCode with the [Swift Development Environment extension](https://github.com/vknabel/vscode-swift-development-environment). VSCode runs on Linux, Mac and Windows (probably everywhere Node/Electron runs).
I tried formatting the code above... I screwed it up :) I Don't know how to format it for code on here 
When I say goal, I was thinking of things like get a job as an iOS dev or start a business as an iOS dev or make a lot of apps, pass an iOS job interview, pass a class in college... Something along those lines.
Oh my apologies. I would like to get a job.
Thank you, Swift is now in AUR, and I use sublime text with a bunch of extensions.
Very smart idea about using the keychain, thanks for the input.
&gt; So sadly i find it hard to follow any written books or overly long guides. (Sorry Twostraws) No need to apologize – everyone learns differently! I feel like it's worth adding a small note of caution: saying "I find it hard to follow any written books" then "i have found that i am hitting roadblocks on everything i do" shortly after should sound some alarm bells :) However, I'm glad you're doing _something_ – too many folks just buy books and never read them, or idly sit through YouTube videos while reading Twitter on their phone. You might find my [Swift Knowledge Base](https://www.hackingwithswift.com/example-code) useful, because it has almost 600 fast answers to common Swift problems and questions. No long projects, just answers to common questions, all updated for Swift 4.1. Getting to the question you asked, I'd recommend getting one simple app finished first, because it's nice to be able to point to something on GitHub or the App Store and say "I made that." Plus you'll learn a lot along the way about things like app architecture, design patterns, user interfaces, and such – all things you can then use when you make other apps.
What I did years ago was to go to the job boards and collected a list of all the common things that were being asked for. I ended up with a list of about 12 things that included Core Data, RESTful/networking, etc... Then I made an app that used all of these things. What is most commonly looked for is depth of knowledge in the things they use. Things like depth of knowledge of the language is important too, but some companies don't get into advanced Swift as much as they get into getting the product done. A lot of iOS apps are simply about getting the idea on the market as quickly as you can, then move on to the next. Swift has a lot of things geared towards long term development where you're crafting code that's intended to be used for 10\+ years. The view of some companies isn't about 10 year life of the code, it's more about getting on the market with a viable product. Having said that, many use these test to gain insight into your skills.
There is no "super object". `init` is being called on `self`, but with the superclass's implementation, not self.class's. See my comment https://www.reddit.com/r/swift/comments/8l70mh/quick_superinit_question/dzeucik
Looks good to me. Are you sure your iboutlet is connected properly? Do you see the changes from viewdidload applied?
When I started iOS, it was probably my 4th platform and I approached it the same way I did the others. I make a bunch of small programs in order to understand how various things work, then I work towards larger, more complex programs. There's a good reason for this. Let's say that you know how to store data to a plist and you then jump into a pretty complex app and you use plist to store your data... Your project would have been better off with Core Data or Realm, but you've now spent a bunch of time with plist trying to make it work. Same with TableView vs CollectionView, and the use of a StackView. Some say there's little reason to ever use a TableView over a CollectionView. Some use StackView to handle UI changes, etc... Digging into these things before you get into a large project is a good thing. If you're looking for a job and you show up with a large project, someone might say "why didn't you use X" ... It makes it look like you've wasted time using the wrong tool. Real world example: I was looking for a data entry screen that would handle more field that would fit on the screen. I started making a UIScrollView and then routines to handle when the keyboard would cover the text field and other problems. I then trashed the whole thing and used a UITableView to handle all these issues. It worked great. Point: Learn about the tools iOS gives to you, then decide which of those tools are best for a given job... Don't take the snow shoes to the beach or the deck shoes to the snow...
Great, thanks! I will give that a try.
thanks for your help I'll post the code either tonite or tmrw! i thought maybe i had to add the alert as a subview but that clearly didn't work. if i can't get a solution i'll post code.
the network request should be on a background thread and the activity monitor updates should be on the main thread that's correct. Code should look like background thread{ make the call, in the completion handler main thread{ update UI}}. Normally xcode will tell you in the debugger if there is an issue there. Did you try using 'viewWillAppear' instead? or hook into the appdelegate didEnterForeground and. But generally anything in the viewDidLoad runs on the main thread . Sometimes with animated spinner libraries ive noticed they have trouble disappearing \(particulaly MBProgressHUD\). 
This is very helpful, thank you
This is a terrific tutorial. I always wanted to dive in Mapbox SDK, this is perfect and keep them coming!
&gt; continue to add it faster than I can become good at everything they added before. Why do you need to be good at everything in the language? &gt; I really don't know how they can claim with a straight face that this is a good language for beginners. They claim it's a good beginner language because of their concept of "progressive disclosure". It doesn't mean the language doesn't have complex or domain specific features, just that you can learn them as it becomes necessary. &gt; Is it worth it, to be able to check alignment at compile-time? I think if you read the comments and in part of the gist it's pretty clear that they want this feature to do things related to TensorFlow, and this was just something they thought might be useful that could be used to lay the groundwork for those, without having to complicate the proposal with how TensorFlow graph program extraction works. Maybe that's not the right way to approach it ¯\_(ツ)_/¯ &gt; Apple engineers have already pushed back on areas where Swift is simply not a good match (e.g., protobufs with Codable) There was push back on Codable with Protobufs because it doesn't make sense. Protobuf objects aren't something that can be represented by an abstract Codable type because they require information about the memory layout, not just key-value structure that can be interpreted by the swift type information. Even if you built the ability for your Codable type to specify this information what would you gain? &gt; yet in this case they seem willing to drastically change the language to meet entirely new requirements. What in the language is being drastically changed? 
You dropped this \ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
good bot
Thank you, ssrobbi, for voting on LimbRetrieval-Bot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
Well thanks! 😁 Mapbox SDK is amazing. Their team is even more amazing - super fun people to work with and down to earth. I plan on recording more tutorials soon. 
Mapbox looks fantastic but it’s expensive 😔
Yes sadly it is.
Honestly don’t know anything about it. Looks cool tho upon first glance.
Take a look at www.contentful.com - I haven’t tried them yet but have seen them blog about stuff and it seems like a good service and company. It sounds like exactly what you want.
Hm. Like i said i tested your code and everything is working as expected. You missing something else i think. Are you using constraints? 
Screw these posts
Just going through this enlighten me to explore more with protocol oriented programming. Since in java interfaces can be highly helpful. Ive used them in java but not swift. Just the required for example the table view and nsobject protocols. Great post!! 
Fun fact: [Java's 'interface' is a direct rip-off of Obj-C's 'protocol'](https://cs.gmu.edu/~sean/stuff/java-objc.html). So Java and Swift share a parent when it comes to protocols. Unlike Java, it's not idiomatic to return protocols as the interface for everything. Many Java libraries will have methods which return an interface that, in reality, represents one single class. There's no corresponding "always return an interface" idiom in Objective-C or Swift.
Neat writeup! Also check out this page: https://sourcemaking.com/design_patterns
It's going (and needs) to get bigger. Eventually, we'll have - a first-class story about atomics and concurrency (including, most likely, async/await) - an opt-in borrow checker (already in the works) - supported ability to export Swift functions in a C-compatible ABI - some amount of C++ interop - variadic generics - probably (as you point out) a hygienic macro system (though some on the core team have expressed concerns) - enhanced pattern matching to support things like regular expressions Obviously none of those are foregone conclusions (except maybe concurrency) and would likely need community support. But the writing is on the wall. This is not Objective-C; it's not a small superset of an outdated abstract machine. &gt; I really don't know how they can claim with a straight face that this is a good language for beginners. This is, IMO, a total false equivalence. Compare Swift to Rust. You can't write Rust until you grok the borrow checker and exclusive memory access. They're building that ability into Swift, but you opt-into it. It's there for power users, but newcomers can write 100% memory safe programs without worrying. It's so much easier to start in a Swift playground than to hand-wave `public static void main(String[] args) { System.out.println("Hello, world"); }` 
I sometimes do a similar thing, where if I'm working on someting that needs to be split into different classes, protocols, structs, etc. I just get on with it in the one file, try and flesh out each section so that it works in the minimal way, and then I split everything up into different files, groups, etc.
I was speaking more about REPL’s and the like. Haskell is currently the last language you want to be using for audio and video, IMO, since as you say, the things that you’re looking for haven’t been created yet. I was about to take on a complete rewrite of QLCplus (lighting software) and I wanted to do it in Haskell until I realized just how inadequate the UX/GUI aspect of the software would be at first.
[removed]
Looks good, the only thing I noticed is that swiping in a direction where no tiles can move towards is still counted as a valid move, i.e. it still spawns a new tile. In the original 2048 game you'd have to swipe to another direction to progress, making it much harder.
Ya, I’ve been going back and forth on that
Other fun fact. Cocoa the framework built from Objective-C used to have Java implementations which really kickstarted modern (enterprise) web development WebObjects. Highly regarded but without much popular awareness.
there's always room for improvement...
Too many lines to try formatting it all.. I removed some of the unnecessary functions etc... but included the one where I'm having trouble... its inside collectionView(didSelectItemAt), i create the alert controller, the actions, text field, but whenever i try to type present( auto complete just pulls up a few of my variables that have the word 'present' in it, and I get an error anytime i try to type out present(. Thanks for your thoughts! I feel like I'm doing everything right, very confused :P import UIKit import Foundation class CalendarView: UIView, UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout, MonthViewDelegate, UITableViewDelegate, UITableViewDataSource { // MARK:- Variables .... let monthView: MonthView = { let monthView = MonthView() monthView.translatesAutoresizingMaskIntoConstraints = false return monthView }() let weekdaysView: WeekdaysView = { let weekdaysView = WeekdaysView() weekdaysView.translatesAutoresizingMaskIntoConstraints = false return weekdaysView }() let myCollectionView: UICollectionView = { let layout = UICollectionViewFlowLayout() layout.sectionInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0) let myCV = UICollectionView(frame: CGRect.zero, collectionViewLayout: layout) myCV.showsHorizontalScrollIndicator = false myCV.translatesAutoresizingMaskIntoConstraints = false myCV.backgroundColor = UIColor.clear myCV.allowsMultipleSelection = false return myCV }() let tableView: UITableView = { let tableView = UITableView() tableView.translatesAutoresizingMaskIntoConstraints = false return tableView }() // MARK:- Inits override init(frame: CGRect) { super.init(frame: frame) initializeViews() } func initializeViews() { .... monthView.delegate = self myCollectionView.delegate = self myCollectionView.dataSource = self myCollectionView.register(DateCVCell.self, forCellWithReuseIdentifier: "Cell") setupViews() } func setupViews() { addSubview(monthView) monthView.topAnchor.constraint(equalTo: topAnchor).isActive = true monthView.leftAnchor.constraint(equalTo: leftAnchor).isActive = true monthView.rightAnchor.constraint(equalTo: rightAnchor).isActive = true monthView.heightAnchor.constraint(equalToConstant: 35).isActive = true addSubview(weekdaysView) weekdaysView.topAnchor.constraint(equalTo: monthView.bottomAnchor).isActive = true weekdaysView.leftAnchor.constraint(equalTo: leftAnchor).isActive = true weekdaysView.rightAnchor.constraint(equalTo: rightAnchor).isActive = true weekdaysView.heightAnchor.constraint(equalToConstant: 35).isActive = true addSubview(myCollectionView) myCollectionView.topAnchor.constraint(equalTo: weekdaysView.bottomAnchor).isActive = true myCollectionView.leftAnchor.constraint(equalTo: leftAnchor).isActive = true myCollectionView.rightAnchor.constraint(equalTo: rightAnchor).isActive = true myCollectionView.heightAnchor.constraint(equalToConstant: 365).isActive = true addSubview(tableView) tableView.topAnchor.constraint(equalTo: myCollectionView.bottomAnchor, constant: 10).isActive = true tableView.leftAnchor.constraint(equalTo: leftAnchor, constant: 20).isActive = true tableView.rightAnchor.constraint(equalTo: rightAnchor, constant: -20).isActive = true tableView.bottomAnchor.constraint(equalTo: bottomAnchor).isActive = true tableView.delegate = self tableView.dataSource = self } required init?(coder aDecoder: NSCoder) { fatalError("init(coder:) has not been implemented") } } // MARK:- CollectionView Delegate/DataSource methods extension CalendarView { ..... func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) { let cell = collectionView.cellForItem(at: indexPath) var textField = UITextField() cell?.backgroundColor = UIColor.red let label = cell?.subviews[1] as! UILabel label.textColor = UIColor.white let newDay = Day() if let tempLabel = label.text { if let tempDate = Int(tempLabel) { newDay.dayNumber = tempDate } } newDay.month = currentMonthReal let alertVC = UIAlertController(title: "Create New Event", message: "", preferredStyle: .alert) let addEventAction = UIAlertAction(title: "OK", style: .default) { (action) in if let tempText = textField.text { let newEvent = CalendarEvent() newEvent.eventName = tempText newDay.events.append(newEvent) } } alertVC.addTextField { (alertTextField) in textField = alertTextField } alertVC.addAction(addEventAction) // self.view.present(alertVC, animated: true, completion: nil) // addSubview(ViewController(alertVC)) // alertVC.present(alertVC, animated: true, completion: nil) days.append(newDay) tableView.reloadData() } ..... } // MARK:- Tableview Delegate/DataSource Methods extension CalendarView { func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { // return events.count return 1 } func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let cell = UITableViewCell() cell.textLabel?.textColor = UIColor.black // cell.textLabel?.text = events[indexPath.row].eventLocation cell.textLabel?.text = "test" return cell } } // MARK:- Date &amp; String Extensions extension Date { var weekday: Int { return Calendar.current.component(.weekday, from: self) } var firstDayOfTheMonth: Date { return Calendar.current.date(from: Calendar.current.dateComponents([.year, .month], from: self))! } } extension String { static var dateFormatter: DateFormatter = { let formatter = DateFormatter() formatter.dateFormat = "yyyy-MM-dd" return formatter }() var date: Date? { return String.dateFormatter.date(from: self) } } 
I have a couple lines commented out where I was trying different things to present it, to no avail.
So I could be wrong, but I don't think you can present an AlertView from a UIView without getting a reference to the containing UIViewController (see this question https://stackoverflow.com/questions/37731376/unable-to-present-alertcontroller-from-a-uiview-in-swift ) 
[Check it out on Github!](https://github.com/scribd/Weaver)
[https://github.com/scribd/Weaver](https://github.com/scribd/Weaver)
Today I had the interview. Basically I had to write an app which was downloading data from the server and presenting it in the UITableView. Quite simple but I used MVVM and Dependency Injection and wrote couple of unit tests. I could use CocoaPods, ask questions and use the internet and documentation. It’s a good idea to describe what you are doing as someone mentioned here. Before the interview I though it will be tough but it turned out to be the best interview I had 🙂 imo it’s much better than demo apps for recruitment process.
Don't use Playground, it's a very bugged feature. Try to make a simple app and use it as a playground while learning.
It is very buggy... and with Apple's standard, I don't understand why - thanks!
Yet another unit test article I don't agree with. We test private methods. You can't always fully test functionality via public APIs. You can do this in Obj-C via dynamic introspection, although sometimes we just share a private header between the unit test code and the class implementation. I'm not sure how easy this is to do in Swift - I suspect you can use Mirror, but haven't tried it. In C++ we sometimes used friend classes. 
What are your macbook specs? 
The Java came later. WebObjects was written originally in Objective C. I was a WebObjects developer starting in 1997 and continuing until 2001. WebObjects was a revolutionary approach to developing web applications and pioneered the "typical" web framework architecture popularized by Rails, Laravel, etc.... EnterpriseObjectFramework was pretty much the second ORM I had ever seen (the first was an in-house implementation in VisualWorks Smalltalk - a gig that really changed the way I view software development) and it was game changing and elegant the way it used NSFault to fault in data as it was required. I learned a lot of incredible dynamic programming techniques from both Smalltalk and later Objective C working with WebObjects. Once NeXT was acquired by Apple, they decided to 1) abandon enterprise as a target market and 2) port WebObjects to Java to eliminate the expense of supporting WO (and Objective C) on all the different OS's it ran on (SunOS, Solaris, HP-UX, AIX, Windows....). The problem is Java is a more rigid language and so things like swizzling/faulting (changing the class of an object at runtime) aren't possible in the same way and so the magic just kind of evaporated in the port. All the experienced WO developers simply moved into other niches developing for the Mac, later the iPhone. That's what I did. WebObjects is now irrelevant outside of Apple. I spoke with one of the people who worked on the original WebObjects and who also worked on the port. He told me that, while it was possible to reproduce the essence of WO in Java, if they had started in Java they would never have arrived at WO. Languages shape notions about what is possible. They had to really stretch to make some things work in Java. I think Swift is going to do the same thing to Apple's stack that porting WO to Java did to WO. Its going to ultimately render it inflexible and possibly kill it. To make things even more worrisome - the same person is in charge of Swift adoption who was in charge of Java WebObjects adoption. History repeats? I watched the introduction to POP talk pointed to by this link. My impression is 1) all the "problems" with OOP are portrayed like the "problems" in a Ronco commercial. They're contrived as shit. 2) Objective C's method categories and protocols do roughly the same thing. The key difference is Swift's bridging mechanism adds protocol extension to things like C structs which is a nice unifying mechanism that could have been added to Objective C. Finally, I am working on a large Swift project right now for a customer and I have to say that scattering protocol extensions around like that makes a code base REALLY FUCKING HARD to navigate and understand. I feel like I'm working way harder to understand this app than I ever did to understand an equivalent Objective C program. Like C++ hard (which I find exhausting to work in beyond a certain size). 
Swift is a touring-complete language. Anything that can be programmed with any other language, can be programmed with Swift. But it’s not the language, you’ll need to know how programming works abstractly before making games like Clash of Klans.
Turn off the auto run feature by holding down on the run button and choosing manual, then restart Xcode. It will be much more stable. Just run it whenever you have completed writing some code.
Obj\-C and Swift protocols are different than Java interfaces in that protocols can have implementations whereas interfaces cannot.
* MacBook Pro (13-inch, Early 2011) * Processor - 2.3 GHz Intel Core i5 * Memory - 4 GB 1333 MHz DDR3
I think I read something about this as well... I'll give it a try - thanks!
I've heard of a "job/training" scam where they are trying to sell you training that looks like a job. So you end up signing into a school where you owe them an amount of money that you pay back when you get a "real" job. These aren't new, I've seen things like "hiring plumbers" and you think it's a company offering a job, but it's a company offering training for a job. They could be offering interviews with other companies after the training and them maybe you owe them 20K over the next year from the pay at the job they help you get. The scam part is if they don't tell you what they are offering. IF it's a school offering training and job searches after the training, that's one thing... if it's a paying job from day one, that's another thing. The real issue is when do you get paid. Even that could be wrapped up in a scam as they could pay you out of your tuition loan. So they loan you 20k, they pay you 10K and you owe 20 or 30K \(plus interest\) once you sign on and you use the next job to pay them back. It should be a problem to get to the offer and have a look at the contract. I'd also see what KIND of company they are licensed to run as and be ready to have the contract looked at as soon as you get an offer.
I always get recruiter emails like this and always avoid them. Always research every company before you do anything
I've programmed in swift on a very similar computer with no issues whatsoever, other than the playgrounds bug I mentioned. Turn off the auto run and restart Xcode, you should be fine after that.
&gt;It’s obvious how incredibly fast the field of mobile\-app development is growing. Join Mobile Consulting Solutions and we’ll help you continuously develop your skills and confidence as you grow your mobile\-app client base. And how many exciting new jobs are constantly being generated. [http://mobileconsultingsolutions.com/careers/](http://mobileconsultingsolutions.com/careers/) It's a training bootcamp. What kind of interview did you have? I bet they pawn that off as "checking to see if you qualify for their training..." or some crap like that. ***Where were they offering jobs and was it marked as an ad?***
yep, they were on the right track... the SO post suggested UIApplication.sharedApplication().keyWindow?.rootViewController?.presentedViewController?.presentViewController(alert, animated: true, completion: nil) but this was what worked after I fiddled around with it for a bit! UIApplication.shared.keyWindow?.rootViewController?.present(alertVC, animated: true, completion: nil)
&gt; Whatever you do, don’t change private methods to public just so you can test them. Why not? If you want to test at this level, then they're part of your interface contract, and so they should be public. What alleged harm can come from this?
&gt; A recruiter Yup, sounds fishy!
The point the author is making is that you probably should restructure your code if you have to test your private methods. He’s actually right but doesn’t do a great job at conveying nor convincing with examples. This article should be 10 pages, and trying to explain it with 1 does nothing but spark controversy. 
I'd consider upgrading your RAM to 8 or 16 GB you'll notice a big difference. It's really simple to do on the older models too. 
Probably a legit company. But 3.1 out of 5 on glassdoor is real crap. I wouldn’t buy a product or eat at a place that had reviews like that, so i definitely would pass on a job with marks that low. 
 func saveImageDocumentDirectory(){ let fileManager = NSFileManager.defaultManager() //Error below in Paths let paths = (NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)[0] as NSString).stringByAppendingPathComponent() //Error below in setting the image constant let image = UIImage(imageView.image) print(paths) let imageData = UIImageJPEGRepresentation(image!, 0.5) fileManager.createFileAtPath(paths as String, contents: imageData, attributes: nil) } override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell { let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ImageView", for: indexPath) if let imageView = cell.viewWithTag(1000) as? UIImageView { imageView.image = images[indexPath.item] } return cell } @objc func importPicture() { let picker = UIImagePickerController() picker.allowsEditing = true picker.delegate = self present(picker, animated: true) } func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) { guard let image = info[UIImagePickerControllerEditedImage] as? UIImage else { return } dismiss(animated: true) images.insert(image, at: 0) collectionView?.reloadData() } Your code is damn hard to read when everything is on the same line. The formatting can be tricky.
they told me they will pay minimum wage for about a month of training and also pay for housing during that time. then after the training they help market me to their clients and once i land a job at a client mobile consulting solutions obviously takes a big cut of my salary. im not sure if i will go through with this
Happy to help :) 
Making private methods public invites developers to call them, which you may not want except for testing. Once other programmers are calling those methods throughout your code, you have to maintain them. As a private method, it may not do proper parameter validation or set up. We've worked around this issue in various ugly ways, including something like: #if TESTING #define private_ public #else #define private_ private #endif Then we can just use `private_` for methods that are private but public-for-testing. As I mentioned before, I prefer a special private header file when needed. That way everyone understands that those methods aren't to be used except in testing. Our network class, for example, has private calls to change servers, use non-encrypted connections, force invalid data into results, etc, things the shipping app should never do. 
i usually take online courses that teaches building an app from gound up. that is real world learning and practical too if you want a job in the future. you can do those challenges later when youve built apps using those courses. a lot of times those code challenges for a beginner you are just googling a lot and copy and paste with minimal explanations how and why. although some links they provide explanation but all you want to do is finish the challenge and just skip over the discussion if theres any. in youtube there are many free tutorials.
The author is too terse here, but I think the advice is generally sound: don't test private methods. They literally don't matter. At least, they don't in well designed software (to my opinion, obviously). You only ever need to verify that your public code (the actual callable code) works because that's the code that matters. If there's a need to verify internal behavior, then you need to solve a different problem. You've likely introduced behavior that violates some basic principle (most commonly the single-responsibility rule). That code should be reconsidered and refactored so that it *is* testable. On the other hand, I've worked with individuals that feel the need to write a regression test each time they sneeze, so corporate environment may be a factor in testing enthusiasm.
Thanks for the edit
there are a lot of free things online for that but the thing is they dont provide much info or explanation about certain things in which at most times you need to understand them fully. i suggest take online courses. think of it as an investment in your knowledge. there are a lot of ebooks or video tutorials that can satisfy your need. examples are hackingwithswift, objc.io or letsbuildthatapp.
yeah in a way. i make sure my methods works and then come back later to refactor using extensions and on the way do fixes. not sure if this is the ideal design pattern though🤣
yeah in a way. i make sure my methods works and then come back later to refactor using extensions and on the way do fixes. not sure if this is the ideal design pattern though🤣
Stellar addition thank you. My experiments with WebObjects were confined to the OSX public betas and 10.0 release which was right at the time the Obj-C api was deprecated IIRC but couldn’t pinpoint the year 2000 or 2001 and never really did anything at the time. Perl over CGI was the mainstream and PHP 3 i think was getting big (and hireable) so that was the direction I personally went. I remember the MVC stuff from Cocoa/WO and then of course Rails aped the style on Ruby and thr rest was history. Thank you much for your comment!
You could just use vim / atom and the command line tools.
Protocols with both default implementations and inheritance has been the worst part of multiple Swift projects I've worked on too. Sharing behavior through POP seems to be worse a solution than OOP inheritance. Love Swift protocols but default implementations through protocols seems to be an antipattern.
Have you created an issue on github? The team seems to be active in responding. 
In Swift you should better use FileManager instead of NSFileManager
First of all, lets separate out GUI code from non-GUI code. If you're a backend engineer then writing a console application should be fairly straightforward for you. Split the work into interfaces, design types and methods around those interfaces, glue all the code together, compile it, and go. GUI work is not too far off from this, it just adds another layer on top of those interfaces. You design the GUI separately, using one of the common design patterns like [MVC](https://en.wikipedia.org/wiki/Model–view–controller), [MVVM](https://en.wikipedia.org/wiki/Model–view–viewmodel), [MVP](https://en.wikipedia.org/wiki/Model–view–presenter), Viper, and more. There's a decent breakdown of all of them here: [MVP vs MVC vs MVVM vs VIPER. What is Better For iOS Development?](https://themindstudios.com/blog/mvp-vs-mvc-vs-mvvm-vs-viper/) So you pick an architectural design, figure out the interfaces, code up each part, and link them together. Your GUI elements can either be done in Interface Builder or generated in code.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) - Previous text "MVC" [Here is link number 2](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter) - Previous text "MVP" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
It's not so easy to figure out the problem without knowing the types of errors you're getting. However, what I like to do with a new language is to walk thru with the debugger and get to know the syntax and things like that. I wasn't new to programming or iOS when I got into Swift, so I didn't need to know much past the syntax and offerings of Swift. TBH, Swift has a lot too it and it started out as "really simple" and is now a bit more than simple. You have a background in programming so I'd start with the basics of Swift and keep things simple. Don't get involved in extensions, enum, etc... just do the basic Swift stuff and make that work. One of the problems with "knowing Swift" is that you can learn a LOT of stuff and some of that you may never use. There's a lot of stuff in Swift that are to make things easier to read, less code, etc... I'd stay away from that until you are good with the basics. I then dig into the APIs and start doing more complex tutorials. Give us some idea of the kinds of errors you're getting and we can help you get past those. Also, the types of tutorials make a big difference. I get sick of watching other people type, I wish they would make the tutorials NOT about typing and just highlight the code and explain what it does. I found the "set" of tutorials from Udemy to be pretty good. Angela Yu and Ray W have some from late last year on Swift 4 that are really good. They always go on sale for around $10. I'd run thru those.
My whole journey to iOS development started with a lot of trial and error + google searches + StackOverflow and so on. If you’re into tutorials I really and highly recommend you to watch Simon Allardice tutorials, I’ve learnt everything from him. He previously worked at lynda.com now I belongs to LinkedIn , and currently he is at Pluralsight, you should check in out; he teaches like no other.
I remember a friend of mine got this and he declined after we discussed it. Basically they send you to a training camp all expenses paid. However they will try to find work for you and you take what they give you, then you pay them for the training. If you decide you don’t want to work with them or they are not able to find you work then you pay for everything. I would stay away from this.
Honestly, I'm coming around to this way of thinking. People doing obviously unsafe things and then wondering why their code is blowing up. Then they post badly-formatted code in an impatient manner and don't respond to people trying to help. I enjoy helping people but these type of posts make it harder and harder to care anymore.
You should read the docs so you know what you're doing. You'll see that the code you're trying to compile isn't quite up to date (it's for an older swift version and requires fixing). So how do you fix it? Let's take `let paths = (NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)[0] as NSString).stringByAppendingPathComponent()` as an example. It does not compile. So let's look up the parts. First, `NSSearchPathForDirectoriesInDomains`. Google it, you'll find https://developer.apple.com/documentation/foundation/1414224-nssearchpathfordirectoriesindoma. It still takes three arguments, so at least that part is correct. Let's look at the first one parameter, `_ directory: FileManager.SearchPathDirectory`. Note that the last part is a link. When you click it, you get more infos on it. Your original code uses `.DocumentDirectory` (short hand for `SearchPathDirectory.DocumentDirectory`. Is that in the list? No, but `documentDirectory` (lowercase!) is. So it looks like you have to use the lower-case version. Do the same thing for `UserDomainMask` - look up the docs (it's also lower-case now, like all enums). Look up `stringByAppendingPathComponent` (just google it). You'll see that it's called `appendingPathComponent` now, and it takes an argument: the path component that you want to append. So fix that as well. That should be all for this line, try to figure out the other problems yourself.
I love the advice in these few rules thanks! Can you point to a very simple example on github or somewhere? I hear/read similar advice a lot and it makes sense to me, but I think it would sink in better if I could see an example? 
One thing I've found very useful, especially when having problems, is to bust work down into the smallest possible components and use/craft/test those components in a Playground. 
Fruit is an array of Fruit object. In this case you should wrap it in another struct: struct FruitList: Codable { let fruit: [Fruit] } and in the Alamofire request: try JSONDecoder().decode(FruitList.self, from: result!) 
That was perfect, thank you! Was this due to a mismatch of the json to my model? I haven't used it much so the "fruit" : \[ {"type":"apple" etc... threw me off a little
Exactly. The decoder was expecting an array to parse, and got a dictionary instead.
&gt; which you may not want Weasel words, supporting an architecture argument. &gt; Once other programmers are calling those methods throughout your code, you have to maintain them. Once unit test code starts calling those methods, you have to maintain them, too. That's the whole point of unit tests! &gt; Then we can just use private_ for methods that are private but public-for-testing. I don't see how this is even considered a valid test. You're literally changing the semantics of the program. &gt; Our network class, for example, has private calls to change servers, use non-encrypted connections, force invalid data into results, etc, things the shipping app should never do. All of these sound like perfect jobs for dependency injection.
In my case yes. Since I already had a programming background I started Simon Allardice’s courses and just learnt the basics from there. What really helped me as well was reading the Apple’s Swift Programming book, but it misses the whole UI tweeks, which you find on those courses. There’s also a great YouTuber : Brian Voong with the channel Let’s Build That App; he also has paid courses which are outstanding for a 50€ price. Check him out as well. 
I agree with you. One of the whole points of breaking a public method down into several private methods is so you can test the parts individually before integrating them into the whole. Unfortunately, Swift does not (yet) have a good way to test private methods.
This is my first post I’ve seen that is 5% upvoted. Lol. 
Bot is pointless in an app like Apollo that expands links at the bottom of a comment by default
That's nice to hear! Thanks for your support!
Check this blog https://appventure.me/2017/12/10/patterns-for-working-with-associated-types/ It really helped me when I was working with generics and protocols. I really liked the solution of hide behind a non generic protocol. It was a perfect pattern to solve my problem.
Are you talking about an app or a game? You have to be more precise in what you’re looking for. Saying “I want object A to touch object B - please help me” will not get you further. Provide more information for the specific case then people may help you. 
It depends, you can either submit it throughout an account they provide you the credentials; you can send them the source code and let them do their job; you can work on a GitHub repo provided by them and perform the work there. 
It would be way better, as I’ve said, that you edit your question and provide the specific info
I Ediktes the question too... maybe you have to reload 
Use a game engine/framework. If you’re new to Swift/iOS I’d suggest SpriteKit as you won’t need to dabble with dependencies and you can probably find some intuitive playgrounds.
Doesn’t SpriteKit have collision detection built-in? If so, you should be using that.
You posted a question that didn't get much attention. You posted a second question not too long after complaining about not getting attention. People tried to help and asked you for more information but you never replied. Instead you've deleted that question. Now you're asking a very vague question with little information. Yeah, no thanks. Go search the web for an answer.
First of all: their. Second: let them add you to their Apple dev team and iTunes Connect with the proper access rights so you'll be able to upload the app from within Xcode and make them pull the trigger (aka publish). Dealing with the certificates is not that hard once you've been added.
It's called sideloading. There is a tutorial on [9to5 Mac](https://9to5mac.com/2016/03/27/how-to-create-free-apple-developer-account-sideload-apps/).
Thanks for the input man. I will definitely check those out, to get some more confidence with these things. And then all I have to do Is lock myself in a room the whole weekend and poop an app. What is pissing me off is that, if I had to make an app for an employer, I would have finished it already by now.
Anyone can create a free developer account. You can build an app from Xcode onto your phone just by plugging your phone into your Mac and running the project on your connected device. If you have the free developer account, it will only work for a week and then you’ll need to build it on your phone again for it to work.
Yeah, maybe you need that extra boost, but go by me, if you can afford 1 month of PluralSight (it will be enough), check out Simon’s courses. Programming is amazing and depressing , at he same time! It’s weird.
You can install it on a iPhone as if it's a simulator(just choose it in the device selection). However, the app will only work for up to a week without a paid developer account. 
I would start by learning Swift, without getting into any UI-related stuff until after this year's WWDC has passed (June 9th). Apple's Swift book is pretty good. The reason I would wait for the WWDC is that there are rumors that a unified UI platform will be announced, which may make what you learn obsolete.
The only weird thing is that in iOS 11 I cannot find the trust developer account thing. Everything else worked so far. Account is created and the xCode team is adjusted to my account. When I chose the destination iPhone nothing happens, I thought maybe a window for the approval pops up...
Have a look around Settings &gt; General &gt; Profiles and Settings &gt; Developer. I remember having to manually navigate to somewhere on my iPhone and trust the developer account a long time ago.
Having a shared instance instead of static methods signals that it has an internal state and calling those methods change it's internal state while having static methods signal that they only change global states or they are stateless. In terms of naming, "XYHelper" signals that it has no internal state and uses global functions while "XYManager" signals that it has internal state and you need to instantiate it or use it's shared instance. Also instead of helpers, a lot of people usually use extensions now. So instead of having a LocalizedFormatterHelper, you extend Double with secondsToLocalizedString and metersToLocalizedString calculated properties. But using helpers are still fine if you like grouping stuff that way. The main goal is to be on the same standpoint within your developement team instead of everyone doing it how they feel like.
From a practical standpoint, if you don't change anything, it doesn't matter. A class with only static members is essentially a namespace. Either way, you're basically dealing with global variables, for better or worse. When it might matter in the future is if you decide to support multiple Core Data contexts. Granted, this is not a common scenario, but you might want separate datastores for different types of data, or you might want to implement some of the functionality in a separate framework with its own Core Data stack. You might also want to do some core data processing on a background thread using a child context. Anyway, all that's a long way of saying that you might want more than one instance of `CoreDataHelper`, so in that case you would want to have it as neither a singleton nor a namespace, but as a full-fledged instantiatable class. Then you can just make one of them if you only want one, or make multiple if that is the case. Making it a "real" class also encourages good practices such as dependency injection and makes it easier to mock the class for testing purposes. 
First of all, I appreciate your grammatical expertise. Secondly, thanks for the advice.
I'll look into they options further, thank you!
Check a tutorial (youtube, any search engine) abou collision masks from sksprite objects. (SpriteKit)
I can’t answer your specific question about Linkedin but in my personal experience I’ve had much more luck with Indeed.com rather than trying to get jobs on linkedin.
Thank you so much! So for now it'll do fine. I'll try dependency injection soon.
Gotcha ya.Thank you so much now I'm not that confused :D
Honestly they find me
I’m in a similar boat as well, but as a first-year undergrad at university looking for an internship. Hopefully I can find some useful responses here
7 days :\(
They're going to have to learn to to this or have you do this every time it's needed. From the sounds of it, you need to do this for them to insure it's done right. Setup an account and probably a private Git for version control, then have both you and them on the account. You go into the account and do what's needed. Any time they need something changed, they just give you a call.
i got my first ios job via a fellowship program at a major tech company. places that have internships, apprenticeships, fellowships etc. also have the infrastructure to cultivate their junior talent. and that’s really the environment you want. you’ll thrive and learn so much more than you could’ve taught yourself. if you’re set on going the linkedin route, google search some recruiting agencies in your area. then cross reference to linkedin. best of luck, ios isn’t the easy road! 
there is uidynamickit and uicollisionkit, if you don’t want to use spritekit. sometimes sprite kit is overkill if you’re not building a proper game. i’ve used these in objective-c but i think they are the same in swift. not to be as savage as others, but you should really do a google search before a post. you’ll get less spice from other users. google is your best friend in programming. 
Recruiters finding you isn't an option that's automatically enabled on LInkedIn. You have to go into your settings (I think it's under privacy since it deals with your name being in search) and **manually turn on the ability for recruiters to find you.** A few recruiters will still find you here and there with the setting off but the moment I turned it on I got flooded with so many opportunities I just never got around to following back. They'll find you in search and have all your info so you may even get shit in the mail too
I have the setting turned on but only a few recruiters contact me every week. Maybe something is wrong with my profile. Also I heard people with experience get flooded by recruiters. I have professional experience in finance but not iOS so I’m wondering if this is affecting why I’m not getting contacted by many iOS opportunities by recruiters 
[Indeed.com](https://Indeed.com) is great for this.
Wow this is some good info. 
Good bot.
After landing a junior job recently in the UK here’s my experience: - LinkedIn works to a degree. It’s an avenue for opportunities, but should never be your only avenue. - Put your CV on job boards and take the calls you get from recruiters - Present your non-tech experience from a tech angle - Be clear about the tech projects you built, link to Github projects, but be prepared for people to not look at your portfolio and only use your CV. Polish that CV like your live depends on it and test it with friends, bosses, and contractors. - Don’t trust all recruiters, but aim to build bonds with some of them. I’m saying that because there’s a lot of cowboys out there and you just need to make some good, reliable contacts and stick with them - At the same time treat recruiters with respect and appreciation. The end up doing a lot of work for you and they’re not as bad as most tech people make them out to be - Talk to recruiters about your ethics and preferences, that way you won’t be pushed into rubbish roles or companies that you won’t enjoy working for - Job hunting is very much a full time gig so if you’re career-changing I’d recommend the seemingly risky option of quitting (for a reason) and focus on projects and the job hunt. You’ll get a job by searching part-time, but it may take longer and it will be more tiring - Quitting for a reason: finding a course you’re going, a local tech for good project you’re helping to upgrade, or building an idea you’ve had for some time. The financials I usually consider for this period is usually between 6-12month of bare minimum expenses. It’s possible to get a job within a month, but it’s an intense slog, so estimate at around 6months instead.
You don't even need to have a class for it. Swift can have global scope variables and functions.
This is a limitation that needs to be fixed: https://bugs.swift.org/browse/SR-4758
In my experience LinkedIn is straight up Dudu. As far as job boards go- I’ve had good luck with dice.com
Just wanted to say a personal thank you to those who sent tips, Firebase worked a charm!
Yes that's a major case. You need to specify your ios skillset and knowledge on linkedin. How would they otherwise know about them?
Man, 3,5ghz is pretty fast. Would be better if you had more cores to utilise. But you’ve got two fast cores so it will compensate quite well. 16gb of ram really is becoming the minimum. So you’re good there. This is enough to run anything with! 
Thank you! I'm glad it was useful :)
What would you do instead?
I'm thinking maybe an array of structs. IDK how it's been done in language that didn't have the features of Swift, but it seems hard to say that's readable code. You know the element count and values, so making and array of 52 elements, each element is has a value and suit.
Well, this is struct for putting into array. Some cards are non-numeric. How do you deal with sorting if all you have is value?
Stop looking on LinkedIn. It's a complete cesspit. Like said elsewhere, indeed.com is a good place to start. 
Good stuff!
Thank you, Xerxes249, for voting on FatFingerHelperBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
If you want to unit test your “Database” class, but don’t want to be reading/writing test data to your underlying Realm database, then you’ll want a way of mocking the Realm database so that it can be thrown away/start fresh in between each unit test. I suggest taking a look at this article, which does something similar with URLSession (where you don’t want your unit tests actually hitting the network). http://masilotti.com/testing-nsurlsession-input/
I’m not really following what you’re asking. Some code would help. Can you set up the problem you’re trying to solve?
Hey mate, yeah i know i havnt explained it greatly. I dont have the code on my computer atm. But its something like Instantiateviewcontroller( withIdentifier: "\array.item" ) as! NewVCClass Where NewVCClass is the class of the view controller i want to switch to. The name of the class is the same as the string in array.item at that indexPath selection. So i want to be able to say 'as! array.item' but this obviously doesnt work as it recognises array.item as a string not a class
You can create another array of classes in the same order as the array of strings. Or you can ]convert a string to a class](https://stackoverflow.com/questions/40373030/how-to-create-instance-of-a-class-from-a-string-in-swift-3). As for whether this is a good design, I’ll let someone more familiar with Swift and UI code answer that.
Thanks! Ill have a look into those options. This project is probably not good design in general im just trying it as a proof of concept though so im not too fussed haha
No, closures are also reference types.
&gt; How you're probably doing it without Constrictor I'm curious, do people write code like this? Even without any of my own extensions, this looks hard to read, and error prone. It's just a long series of statements, with a lot of redundancy. let redView = UIView() redView.backgroundColor = .red let blueView = UIView() blueView.backgroundColor = .blue let greenView = UIView() greenView.backgroundColor = .green view.subviews = [redView, blueView] redView.subviews = [greenView] for v in [redView, blueView, greenView] { v.translatesAutoresizingMaskIntoConstraints = false } NSLayoutConstraint.activate([ redView.topAnchor.constraint(equalTo: view.topAnchor), redView.bottomAnchor.constraint(equalTo: view.bottomAnchor), redView.leadingAnchor.constraint(equalTo: view.leadingAnchor), redView.trailingAnchor.constraint(equalTo: view.trailingAnchor), blueView.centerXAnchor.constraint(equalTo: view.centerXAnchor), blueView.centerYAnchor.constraint(equalTo: view.centerYAnchor), blueView.widthAnchor.constraint(equalToConstant: 75.0), blueView.heightAnchor.constraint(equalToConstant: 100.0), greenView.widthAnchor.constraint(equalTo: blueView.widthAnchor), greenView.heightAnchor.constraint(equalTo: blueView.heightAnchor), greenView.centerYAnchor.constraint(equalTo: blueView.centerYAnchor), greenView.trailingAnchor.constraint(equalTo: blueView.leadingAnchor, constant: 50.0), ]) 
How do you intend to use this `as! NewVCClass` var from Swift code, though, if the class is not known until run-time? 
&gt; Is this just about showing what could be done Yes.
The example in GitHub is pretty much a basic one with the main goal of showing how "bad" and verbose anchors and NSLayoutConstraints are overall. There are one million ways of doing it in a better way, Constrictor is my attempt to become one of them. Still I didn't fully understand your question. You mean you like to write constraints with anchors? or not? In the end I didn't understand your opinion about Apple's way and Constrictor
For the most part it’s just understanding all the parts of a method call and the naming conventions. That often gets you the information you need. Sometimes additional information is necessary and you might have to dig a bit for it. Either looking at related types, seeing if there’s some older Objective-C documentation, or searching the web for other people using the same stuff you’re interested in. There’s always these forums and StackOverflow too, you just have to understand how to search for/ask a question in a way that will get you the best results. That takes some expertise on its own. 
Thank you! :)
That’s a whole new type of way of doing it and it’s using an external library. Also I’m not a fan of those visual operators. Still it’s a great framework but Constrictor doesnt aim to be framework, with a lot of layers and overengineering, instead it’s just a micro framework with a simple layer of abstraction.
Constraints are all Y=mX+b under the hood. view1.constrict(.leading, to: view2, attribute: .trailing, constant: 50) view1 .m_leading |=| view2 .m_trailing + 50 I've personally never seen much point adding english to it, but I guess a lot of people prefer that.
Yeah, I’ve yet to use of one those without any kind of verbose, but they never really got me interested. Still Mortar seems to be cool, might take a look at it later!
Value types: - `struct` - `enum` - tuple Reference types: - `class` - function, closure
Function is also by reference? Is there a way to print the address of a variable?
Functions and closures are essentially equivalent. Think of closures as anonymous functions that are defined in a slightly different way. Behind the scenes they are both a block of code and you hold a reference to them. Yes, you can get the address of anything with a bit of trickery. func address(_ valuePointer: UnsafeRawPointer) -&gt; Int { return Int(bitPattern: valuePointer) } func address(_ referencedObject: AnyObject) -&gt; Int { return unsafeBitCast(referencedObject, to: Int.self) } Usage: var anInt = 5 let anIntAddress = address(&amp;anInt) class MyClass {} var aClass = MyClass() let aClassAddress = address(aClass) 
Apple does have all kinds of documentation -- API references, programming guides, introduction videos, etc -- but not every piece of functionality is covered by every type of documentation. Can you give an example of what you're looking for? The organization (and search features) of Apple's 'new' documentation webpages isn't very good, either. If you want a video tutorial for creating table views, for example, it's going to be a lot quicker to just google for "wwdc nstableview", than to try to dig through developer.apple.com.
I just need it for seeing it with my on eyes that it’s reference type. But can you please explain why it’s error prone? Also, if it wasn’t dangerous, what practical usage address has?
Depending on how the memory is managed a raw address can become invalid at any time. It can point to uninitialized memory, stale memory, a completely different object, or even the middle of some other structure. You use a raw address at your own peril, you've gone off the rails and nearly anything can happen with it. Now, in certain situations raw memory can be used for good too. You might allocate a chunk and manage it yourself, saving the overhead of the usual memory management. You might pre-allocate a large chunk to use and re-use over and over in order to save the overhead of creating new objects or to avoid fragmenting memory. However, these are very advanced situations that require quite a bit of discipline and knowledge to get right. Many experienced programmers create huge bugs by making a tiny mistake when implementing manual memory management. I'd avoid it unless you *really* know what you are doing and can *absolutely* justify that such management is necessary. Manual memory management is why C is so powerful and yet so easy to shoot yourself in the foot. There's very little to no protection built into the language and people have created massive, show-stopping bugs because of it. Swift is designed to be inherently much safer so that you can program and not worry much about memory management or crashes. If you follow the best practices and avoid using things like forced unwrapping or unsafe pointers then you'll probably have very few runtime crashes.
Thank you :)
Personally, I don't like Apple's documentation at all. I don't use it unless I can't find anything else. My 1st place is Google which usually gets me to SO \(StackOverflow\). However, over time, one of the best things is to have a bunch of stub programs that you can go back to and see how things work. I try to make a test bed of all kinds of stuff so that once I learn it, I can just jump over and see how it works and I always have great notes in there. This is important because tutorials take way too long and might be outdated, but sometimes there are the best choice. I can't even remember the last time I used Apple's docs.
The class will be known prior to runtime. But i was hoping i wouldnt need to use a switch var with heaps of cases to instantiate and switch to whatever viewcontroller is selected by the user. ie. by making each class the same name as the label on the selection so i can just declare the selected label as what the class
Rather than using identifiers to tie together interface objects you can subclass `UILabel` and add a generator method for the appropriate `UIViewController` subclass. Then you set the `UILabel` subclass in Interface Builder (or however you build your views), get the selected subclass from the collection view, and call the generator method on it to get the `UIViewController` subclass you need. This is much better than using a system of identifiers and strings because you are using concrete types. Identifiers and strings can be very fragile and result in a lot of hard-to-find bugs. 
Programming guides and wwdc videos are their strengths. Try to search through those every time you’re using a new framework. The raw api docs are kinda meh.
That’s too bad that 16 is now the minimum when it’s the max attainable on Apple MacBook Pro line. Perhaps the keynote on the 4th will introduce a base increase from 8 GB to 16 GB ram for MacBook Pro line with upgrade available to 32. Almost sounds like overkill but, then again, remember fussing over upgrading from 128 mb to 256 mb just 15 years ago. Now minimum is becoming 16 GBs which is some 64 times what it used to be. I know that growth rate like won’t maintain but it does emphasize the stress consumers place on ran, or at least a correlation that’s been made between smooth functionality and more ram. Wouldn’t mind increases from 2100 MHz to 2400, though the differnece would be negligible. That said, if any hardware’s changing in the new MacBook Pro line it’s probably from dual to quad cores in the 13” line, which would probably have a more noticeable/significant difference, especially on the cheaper models.
&gt; Apple does have all kinds of documentation It's not the kinds or quantity of documentation that's an issue, it's the level. Apple docs are either a 10,000ft overview that implicitly assume you're entirely new to the API, or extremely terse descriptions of methods that implicitly assume you know exactly what you're doing, but have just forgotten the precise parameters. There's almost nothing in between that actually *explains how to do stuff*. Reading Apple's docs on their own feels like learning how to draw an owl: https://cdn-images-1.medium.com/max/800/1*ps1LThoFav5Joqyd1mPAyg.jpeg
You can use https://developer.apple.com/documentation/avfoundation/avaudiopcmbuffer , but you need to manage the audio engine &amp; aufio sesseion yourself, which is quite painful. Have a look at AufioKit (http://audiokit.io) as well. It’s a big framework with a lot of capabilities, but it takes away a lot of the painful management.
I previously worked with Matlab `play` function that only needed the array of samples and the sampling frequency, I was looking for something similar. As I see it's going to be a bit painful, thanks!
Yea ++ to check out AudioKit. The contributors have done an incredible job with that library. 
Do you have docker installed? Also I would also recommend checking out Vapor in place of Perfect
Again, can you give a *specific example*? I'm not seeing this at all. The [guides](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/TableView/Introduction/Introduction.html#//apple_ref/doc/uid/10000026i-CH1-SW1) have step-by-step instructions that show how to use their classes. The [videos](https://developer.apple.com/videos/play/wwdc2011/120/) also walk you through the basics, to creating a working program. OP lamented the lack of "tutorials", but these look exactly like tutorials to me -- in both text and video format. I'm trying to understand what is non-tutorial-y about them. You're both only speaking in the vaguest terms, which don't match what I see on Apple's developer webpage.
Yea. This seems like it could be solved with basically just a \d*
Can you show some code? I'm not understanding how you intend to use this, even if you could automatically cast it.
 enum ParserError: Error { case intParsingFailed(str: String) case rangeNil } class Parser { public static func parse(_ str: String) throws -&gt; [Int] { let regex = try! Parser.regex() let matches = regex.matches(in: str, options: [], range: NSRange(location: 0, length: str.count)) var output = [Int]() for match in matches { guard let range = Range(match.range(withName: "amount"), in: str) else { throw ParserError.rangeNil } let stringAmount = str[range] guard let amount = Int(stringAmount) else { throw ParserError.intParsingFailed(str: String(stringAmount)) } output.append(amount) } return output } } extension Parser { private static let pattern2 = "^---\n(.*?\n)((---)|(\\.\\.\\.))" private static let pattern3 = "^(?&lt;level&gt;[#]+) (?&lt;content&gt;.*)" private static let pattern4 = "(?:^|\\b| )\\$(?&lt;amount&gt;[0-9]+)\\b" private static let pattern = "(?&lt;![a-zA-Z0-9])\\$(?&lt;amount&gt;[0-9]+)\\b" private static var _regex: NSRegularExpression! private static func regex() throws -&gt; NSRegularExpression { if _regex == nil { _regex = try NSRegularExpression(pattern: pattern, options: []) } return _regex } }
&gt; Again, can you give a specific example Sure. Let's take drag-and-drop. There *is* a guide on drag-and-drop, but it hasn't been updated in 6 years. No Swift code and the pasteboard methods (for one thing) have changed since then. The guide leaves plenty of stuff, such as drag masks, entirely unexplained. The [current document](https://developer.apple.com/documentation/appkit/drag_and_drop) is a joke. Where's the step-by-step explanation of how to make something draggable? Or create a useable drop target? Perhaps somewhere in the sparse API docs there's enough information to eventually figure out how to determine what's being dragged over your window/view. But why isn't that spelled out precisely with example code? You can't make an app that supports drag-and-drop without knowing how to inspect the object(s) being dragged onto it, so drag-and-drop documentation that doesn't explain that properly is by definition bad. Look at the [Qt drag-and-drop docs](https://doc.qt.io/qt-5/dnd.html). They're a *dream* in comparison. *Everything* you need to know to get your app to accept dragged objects is *right there*. But not with Apple's docs. *Never* with Apple's docs. Their APIs are more complicated, yet their docs are far less detailed. The people who write them are—by all appearances—simply not capable of putting themselves in the position of a new-to-Apple coder well enough to provide the information said coder needs to successfully make real use of Apple's APIs. Instead, you have to go and read stuff by people who *can* explain things properly, like Ray Wenderlich. But Apple makes that a crapshoot by constantly changing the APIs, invalidating many tutorials or StackOverflow posts (and, of course, Apple's own docs) within a year or so. And when Apple deprecates something, mostly they just mark it as "deprecated" and don't bother to mention what you're supposed to use instead. Like [here](https://developer.apple.com/documentation/appkit/nsdraggingsource#topics). The `nameOfPromisedFilesDropped` is deprecated (and with it, the entire Dragging Options section). So what am I supposed to use instead now? That should be mentioned *right there*. If you just need to remind yourself of a class's methods or a method's parameters, Apple's docs are fine. If you actually want to learn how to do something, well, good luck figuring it out from Apple's docs. 
Is it a better framework than Perfect? Only similar thing I ever used was ASP.NET for short time so I’m not an expert
Stumbled upon this topic while searching for an answer. I can see that there isn't one. I have tried every possible way to resolve the issue when it happens \(and it happens *constantly and continually*\). At* bes*t the error will be resolved and then the playground simply take*s minut*es to run the simplest code imaginable. It's cost me so much time while I'm actually trying t*o lea*rn Swift and shouldn't be messing around with Xcode bugs that Apple's had more than enough time to resolve. Not the best introduction to developing for the platform. Apple's Xcode development team should be ashamed of themselves.
You can absolutely have two tableviews in one controller. It would probably be best if you set the data source in code. This is why the Datasource methods give you a tableview for you to reference if need to distinguish between which one is which.
In my opinion It’s bad practice to manage 2 tableviews in one controller. I suggest having 2 containers in one controller that map to separate are tableviewcontrollers. 
Don’t do this. 
I think you may be looking for a [UISplitViewController](https://developer.apple.com/documentation/uikit/uisplitviewcontroller). Take a look at XCode's "Master-Detail Application" project preset to see if that's what you are aiming for.
Yes, view controller containment. Similar to what master detail view controllers do. 
I highly recommend something lower level, such as C++. Yes, its far more difficult, but you learn a lot more. And most importantly, you understand why higher level languages such as python and swift work like they do. Start with the fundamentals.
Ehh...I understand what you mean, but starting with a low-level language is overall significantly harder... It's easier to focus on fundamentals if you don't have to deal with things like segfaults IMO. 
How is C\+\+ a lower level language? Both C\+\+ and Swift let you get down to the level of C and complete manual memory management. C\+\+ does not provide access to hardware or anything else lower level than Swift. Especially if OP wants to get into iOS development, C\+\+ is far from the right language to learn first in my opinion.
I would agree with this. 
It depends on what you want to do with your programming. If you want to get into iOS dev \(like you've said\), definitely start with Swift. If instead you want to get into the academic side like Natural Language Processing, go with Python because that is popular in academic circles. If instead you want to make web apps, start with javascript. My only advice beyond that is to not to stick only to that first language. Get somewhat comfortable with it and then explore some other languages. It will help cement the universal principles of programming in your skillset making you much more effective in whatever language you choose to use.
Thanks for the response! yeah I definitely want to get comfortable on more than one language so starting on swift might be my best bet as of now it seems to be the one I like the most and want to use and then take what I'll learn to get a wider understanding by exploring other languages 
In all the data source methods, including cellForRow... you need to use the table view that’s passed in. Y guess us you’re dequeueing from the wrong table (ie method is being called from table 1 but you’re dequeuing from table 2)
Absolutely, that was just an example of an interest that would make Python a great choice. It definitely isn't the only one.
Swift is definitely better for the iOS world, but IMO Python is more generally applicable, and /u/oYYY posted [an excellent comment related to this on another post](https://www.reddit.com/r/swift/comments/8kg1bf/comment/dz7f34v): &gt; I would argue that Python is an easier and more useful language to learn for school. Swift is more or less isolated to iOS development, while Python is a ubiquitous scripting language. &gt; &gt; - If you become an analysis, you can use python combine the data of your queries. &gt; - If you become a programmer, you can use python to automate parts of job. &gt; - If you become a web developer, you can use python to scrape websites. &gt; - If you become a mobile developer, you can use python to validate and deploy your code &gt; - If you become a backend developer, you can use python anywhere you don't want to use BASH. &gt; &gt; I think, long-term, Python will be more useful for your career.
Focus on the project, not the language. Decide on something you want to build, then find out what the best tools are for building that kind of thing. If you want to make an iOS app, Swift will be the best choice. If you want to build something else, it'll be a different language. Once you've learnt one language, it's much easier to learn a second. Once you've learnt two languages, the third is again much easier. Eventually, picking up a new language is doable in a few days, and getting proficient in it can take only a few months. Always pick the right language for the project, and focus on building projects, not learning languages. The language learning will come naturally from that process. Learn what you need to learn in order to build the project. 
Indeed, I just wanted to make sure it was clear to anyone stumbling across the comment. 
I gotta agree with you. C++ is barely lower level than Swift. Yes, you can do unsafe things more easily in C++ but there's some seriously high-level concepts in the core libraries and language. Swift can also drop down into low-level code just like C++ can but it's a bit harder to do by accident. C is a much better example of a low-level language. You can do high-level things with it but out-of-the-box it's fundamentally close to the metal. I'm of two minds on this. On one hand, it's great to learn low-level concepts and ways of doing things. You'll end up a much programmer in the end. On the other hand it's much more difficult to get up to speed and accomplish anything major. It can be so frustrating that you'll give up early and not move on to more fun stuff. I love Swift, it's a great language. Easy to learn, very safe, has an amazing community around it. On the other hand Python is also a great language and it's much more widespread. The problem with Python is that it's not great for GUI (windows, buttons, graphics, user interfaces) stuff. It can be done but Python is used a lot more for system utilities, text manipulation, server-side applications. If you want to quickly get to GUI programs I'd go with either Swift or Java, depending on if you want to program for iOS (Swift) or Android (Java).
Ahhh. I see, I thought the numberStyle was applying the formatter after when you converted it to a string. It looks like you either have to make two instances one with none, and one with currency and format it after you convert it. Thank you!
If you're trying to output a number as a currency string, then you need to use `formatter.string(from: 22)`
I’m pretty sure you can tag table views. Then check what tag in the method. Which is pretty standard practice 
Some test input: $1.00 - $10,000 $0.99 - $1 99 cents - 1 dollar ROW 1: $1 - $10000 ROW 2: &amp;@0x¥¥*•zz What's reasonably expected for each and what actually happens?
Yep. Another case is that a closure that captures itself for recursive calls will necessarily leek.
Watch a tutorial on YouTube and you'll be just fine. 
I was trying to see if i could find a way to not use the switch variable at all and just declare the class as the label of the selected indexpath.row However ive decided to just use the switch var and have a seperate case for each possible selection from the collrctionview. Thanks for your help though
Hey, bald\_manc\_twat, just a quick heads-up: **seperate** is actually spelled **separate**. You can remember it by **-par- in the middle**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
anything is possible
I don’t think so, at least there wasn’t when I looked into it about ~1 year. I seem to remember reading that there are some internal performance implications that make this not feasible yet.
This. Use containers. Have container VC ‘s manage its own table views and the parent can coordinate the containers if needed
Define “useful”...
There's zero chance that we can evaluate your app without seeing it. You suggest it's "very useful", if that's the case, and if Apple agrees with you, then there should be no problem.
I’m using own var with casting to generic.
[Leek?](https://m.imgur.com/gallery/RpcZGE7)
Honestly, as someone who was in a similar position to yours (prior experience with Obj-C), what helped me the most was simply starting to write Swift code. Taking some portion of Objective-C code that you've written and rewriting it in Swift could be a good starting point. From then on, you should have a solid foundation to explore the language's more specific features.
Hah good to know! Do you have any place where I can track this? I seem to get the need for this every month or so and redoing research always takes time and I never know whether I just missed it or not..
I think you mean wrapping the classes. Good idea! I shied away from it due to constant necessity to update boilerplate. Maybe I'll do that.
Paging u/twostraws
Consider also that I'd like to teach others Swift, for example spread the knowledge across the team. It's not very efficient to just tell them "go write some Swift" without an intro course. Also it's not very efficient to say "hey, forget all the past years and pretend you know nothing" like existing courses tend to do. Like @john_alan says, I would be really grateful if someone would tell me right of the bat that Array/Dictionary is a value type, and things like that.
I've used this website with moderate success porting small parts of various programs, it's pretty ugly code, but it gives a rough conversion which you can smooth out [https://objectivec2swift.com/#/home](https://objectivec2swift.com/#/home)
I believe the best practice would be don't rewrite. There is absolutely no reason to rewrite and existing app from Obj\-C to Swift. That said if I had to chose from your list I would opt for "big bang", starting a brand new app taking anything I learnt from the old version to make UI/feature improvements. 
I have done both "new code in Swift" and "big bang" approaches. NCiS actually works quite well; it was a lot less hassle than I was expecting. If the existing Objective-C code base is good, I would seriously consider it. You can then move over old code piecemeal. One issue I ran into is that an Objective-C class can not extend a Swift one, so it will be necessary to move over entire hierarchies at one time. On the other hand, if the Objective-C code is suboptimal, the "big bang" approach may be preferable. However, this really is a pretty challenging option. I have recently been 'big bang'ing all my personal projects, while modernizing library usage and such. The projects are big and involved, but it has been slow and tedious and frustratingly bug riddled. Although, I'm not attempting to just translate code; I'm combining it with major refactoring. So, perhaps a straight translation job would be a lot more straightforward. But, if the Objective-C code is good and you are just doing straight translation, what's the point?
I see your point, yet I have concerns about this. I have a limited experience with mix-and-match projects and it was not a very nice environment. First there's certain "impedance mismatch", because objc doesn't support value types like structs, smart enums, and a few more things, so that you kind of have to limit yourself to a particular Swift subset to be compatible, or spend time to write compatibility wrappers (not just bridging headers). Restricting the Swift features might be an OK solution though, knowing that it is "temporary" until migration is done. And secondly, flipping between 2 languages brings additional cognitive load. Yes, it varies from person to person, but I know that at least for me and some of my fellows it is significant. Adding nullability annotations to objc first where possible is a good idea. I believe that the rest of "Modern Objective-C" is already in place. 
I had a similar question last year, and was introduced to /u/twostraws work. Because you already know Cocoa, you'll go through his lessons pretty quickly, so it's not quite a Rosetta Stone, but close.
I see two main ways to do this. First is to make a new project and keep working on it while doing whatever is needed to the other project. Second is to start writing universal routines in Swift one by one. They both work together, so you can go thru one by one and start writing routines from ObjC to Swift one by one. Personally, I'd pick the first one. Start from zero and take advantage of everything that you know about the program and Swift to make it much better than what you had before. You know all the work arounds, hacks, etc... that you did before, make the new program account for all those things.
I just did it myself. I stopped Swift @ version 2 because of all the damn changes. Jumped in about 8 months ago, upgraded everything and bought a few tutorials from Udemy. Got the Ray W and Angela Yu Swift 4 tutorials. Not only did they cover Swift pretty well, they covered some other things I needed to dig into anyways. They don't do "this is what's different in Swift 4", they just dig straight in. IMO, knowing ObjC is a help because of the APIs and the tools. It's not a big deal, a week or so of the tutorials goes a long way.
They also have an Xcode extension that can convert files at a time. It’s free in the Mac App Store
Example: Order class has next var Order+CoreDataProperties.swift: var items: NSOrderedSet? In Order+CoreDataClass.swift I'm wrapped it like this: var orderItems: [OrderItem] { if let items = self.items?.array as? [OrderItem] { return items } else { return [] } }
The thing is that you cease development in Objective-C entirely, except for critical bug fixes that will (hopefully) be rare. Therefore you don't need to worry about value types in Objective-C at all. Your Swift code will consume existing Objective-C interfaces just fine and new Swift code can use all the Swifty goodness. Most of the issues in Swift and Objective-C comparability are using Swift interfaces from Objective-C, not the other way around. You shouldn't need much in the way of compatibility wrappers. When you use the Objective-C interfaces it's through the headers, annotations, and everything else that makes up modern Objective-C. Those are fairly-well automatically translated into Swift so you aren't using two languages. You're using Swift, the Objective-C code is a black box you access through the interfaces.
Thanks! /u/battlmonstr: give me a couple of hours and I'll see what I can do :)
That's for converting old Swift syntax to current Swift syntax.
The first two: extension String { func getCharCount() -&gt; [Character:Int] { let pairs = self.map { ($0, 1) }.lazy return [Character:Int](pairs, uniquingKeysWith: +) } } func getDelta(_ array1: Array&lt;Int&gt;, _ array2: Array&lt;Int&gt;) -&gt; Int { return zip(array1, array2).reduce(0) { $0 + abs($1.0 - $1.1) } } The last example I'll have to think about for a bit.
I should have specified that they are compatible from Objective-C to Swift, not the other way around. Swift code can pretty easily use Objective-C. Objective-C has some difficulties using all of Swift's features, such as structs.
True
Number 1: I've no idea what you're actually trying to do, but learn to use standard library functionality let ALPHABET = "abcdefghijklmnopqrstuvwxyz" func getCharCount(_ myString: String) -&gt; Array&lt;Int&gt; { let counts = Dictionary(grouping: myString, by: {$0}) return ALPHABET.map({counts[$0]?.count ?? 0}) } func getDelta(_ array1: Array&lt;Int&gt;, _ array2: Array&lt;Int&gt;) -&gt; Int { return zip(array1, array2).lazy .map({(v1, v2) in return abs(v1 - v2)}) .reduce(0, +) } func numberNeeded(_ firstString: String, _ secondString: String) -&gt; Int { let charCount1 = getCharCount(firstString) let charCount2 = getCharCount(secondString) return getDelta(charCount1, charCount2) } print(numberNeeded("hello", "billion")) Number 2: Learn to use standard library collections, this problem is suitable to using a set unless you have very specific performance concerns which preclude it. let common = Set(s1).intersection(s2) let excluded = s2.filter({!common.contains($0)}) print("Final String is '\(excluded)' Common Characters are: \(common)") &gt; Mainly concerned about the string handling and arrays. Handling strings as arrays is mostly improper.
Second bit: let firstCount = first.characterCount let secondCount = second.characterCount let notCommon = firstCount.merging(secondCount) { abs( $0 - $1) }.filter { $0.1 != 0 } let commonKeys = Set(firstCount.keys).intersection(secondCount.keys) let common = firstCount.merging(secondCount, uniquingKeysWith: min).filter { commonKeys.contains($0.0) } print("not common:", notCommon) print("common:", common) // not common: ["b": 1, "e": 1, "i": 2, "h": 1, "n": 1] // common: ["o": 1, "l": 2] 
Thanks. Yeah, I toyed with the idea of keeping all the signatures the same as the original but they really didn't match the task at hand. I used `[Character: Int]` mostly to keep the counts of matches correct rather than a simple boolean matched. Otherwise I would have done as you had and simply used `Set`.
Remind me in 4 hours
Oh, cool, that would be something to check out.
Yeah, no, unfortunately. I'm jealous for Android devs who have automatic Java to Kotlin conversion.
I don't get what you are saying? Remind you of what? 
The "SDK" approach is basically what I'm advocating. Freeze the Objective-C development where you can and convert the existing code into a framework or "SDK" that you can call into from Swift. As time goes on you can rewrite some of the old Objective-C code into Swift in order to have a more maintainable and unified codebase. Just make sure to have a solid roadmap for the conversion. Without a good plan and the discipline to keep it on schedule your conversion can have a very long tail and you'll probably end up supporting very old bits of Objective-C code for quite some time.
Team Treehouse or buy Big Nerd Ranch’s latest book on Swift. I personally went to school for computer science and learned Swift through mentors but I find those online courses easy to follow.
It may not be worth it overall, but there are plenty of reasons to rewrite an Obj-C app in Swift. I've ported a few medium-sized apps to Swift, and in every single one, I found bugs that were hidden by Obj-C, which Swift forced me to address. 
&gt; Also I was trying to find a "Rosetta Stone" from Objective-C to Swift, but didn't find anything. Eh, they're different kinds of languages, and Swift has much more syntax, so most of the interesting or idiomatic things you do in Swift wouldn't be useful as mere translations of Objective-C, anyway. It'd be like an assembly language programmer asking how to do `MOV` in Objective-C ... *it depends*. But it's not even the right question. Stop looking for shortcuts and just read Apple's book. Everyone I know who avoided it ends up writing awkward "&lt;their previous favorite language&gt; in Swift syntax" and wondering why things don't work like they expect.
If an app is working then just write new code in Swift. Otherwise re implementing it is the better way. I wouldn’t recommend re implementing your code in Swift. That’s just waste of time and money. 
I'm beginning to understand how this code runs. But now my question is why wouldn't I use in and conditional code for this? I ran the following code and successfully completed the puzzle: while !isBlocked &amp;&amp; !isOnGem { while{ } moveForward() if isOnGem { collectGem() turnLeft() } } ( The blank while loop is there simply because swift playgrounds doesn't let me erase it, so just pretend it's not there! :-) So now I guess the greater question becomes when do I use nested while loops and when do I use conditional code? 
If you propose to write a completely new app in Swift, you need to have arguments ready for why you chose ‘swift’ in particular. What does swift offer that Microsoft c# Xamarin does not offer? What if managements suggests you write the app in Xamarin? Since you’re re-writing the app anyway wouldn’t it be better to have it on both platforms and share a Codebase, while also leveraging the Microsoft suite of products? Anything in swift you can do with Microsoft C# Xamarin. Then you just plug in the Android UI if your company ever decides to do an Android app 
It's hard to know what to recommend, because you haven't really said what you mean by "don't seem that practical." You might want to try my free video series, [Swift in Sixty Seconds](https://www.hackingwithswift.com/sixty) – it teaches the fundamentals of Swift in videos that last one minute or less.
Useful to you may not be useful to all users (in Apples eyes). I suggest you read the submission guidelines for back up. Otherwise you never know if you don't submit and try.
It's a good question. My primary argument is the same as [this comment](https://www.reddit.com/r/swift/comments/8mh2fs/how_to_migrate_an_app_from_objectivec_to_swift/dznlck7/) . My concern is that anything but Swift has a much smaller experts pool in the long run. I'm sure that fast forward 5 years we still have Swift around. But yes, that would probably be also under consideration if we didn't have a native Android app already.
That's awesome, thanks.
You want to spend 6 months of developer time/salary so that, at some point in the future you won't have to pay more for an Objective-C dev? How much more do you expect these devs to cost that 6 months of absolutely zero progress is considered a decent trade off?
I've read it twice \(once for Swift 1 and once for Swift 3\). After just that I was exactly as you describe, i.e. I was writing objc\-ish code in Swift. I feel that it is a bit shallow and incomplete. It doesn't cover much of the standard libarary \(which also evolved over time and was partly even undocumented at the time of Swift 3\). Swift was a moving target, but now it should be settled more or less, isn't it? You are right in that yes, they are different, but if you are just ignoring silently to mention the differences, all sorts of misconceptions arise. If you are vocal about them, you can smash misconceptions and past cliches on the ground \(knowing that your background is objc\), and that's a good starting base IMO.
On mobile now so just a condensed answer: revisit your architecture and make better separations. For example you could put all your model code in one new subproject. Use this opportunity to clean up your boundaries and write unit or integration tests. Next move all of your business logic out of your view / viewcontroller or model layers. Take every decision in one subproject. I often coordinate with several Event enums and EventHandlers. It’s easy to fake those events during testing. Any call to Model or ViewController layers should be through easily mockable protocols. Now what’s left is your VC / V layer. It will receive precise commands from your business layer like `show(loggedInUser: User)` now through those protocols I made you make before. I would keep working “dumb” UI code in Objective-C as Objective-C gels better with XIBs IMHO in terms of optionals in IBOutlets etcetera. The must important part to Swiftize is Model and “Business” which is all decisiontaking. VC’s should look kilt ghost towns especially when you start using Routing with Swift enums.
Really cool. I suggest to add there a few more examples demonstrating: `@protocol`, `@property` getter/setter, a "weak" property (that introduces optionals a bit), and example of blocks with strong/weak dance (`weakSelf/strongSelf`), maybe how `NSError` maps `throw`, and maybe a few basic string examples (I remember the Range type was completely unintuitive). Good stuff, thanks.
Not sure why you linked to macOS documentation. The iOS documentation is fairly exhaustive. https://developer.apple.com/ios/drag-and-drop/
RemindMe! 12 hours Not sure your version works so.. 
I will be messaging you on [**2018-05-28 09:12:36 UTC**](http://www.wolframalpha.com/input/?i=2018-05-28 09:12:36 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/swift/comments/8miudq/best_way_to_learn_swift_for_someone_who_is/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/swift/comments/8miudq/best_way_to_learn_swift_for_someone_who_is/]%0A%0ARemindMe! 12 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
I don't pay salary, I'm a programmer :\) But if I was a boss, then you're absolutely right, it is not viable to do it in one go like that. That's why I hope to do it over a 2 years period, and even that would require negotiations. Moreover, doing it on a side as a new project \(as @KarlJay001 suggested\) is problematic, because it basically drains manpower from the main project, and you even don't get "checkpoints" with new stuff along the way, so it is super risky too. Speaking about the future I would say that even right now at the moment the cost of an Objective\-C developer is already higher \(all else being equal\), and it takes much longer time to find them \(i.e. they are rare\). In 5 years they will be scarce. Probably if that happens, the app just dies and is overtaken/rewritten by some React zealots, but I prefer not to think about that scenario, and plan to give it a sustainable future now with Swift :\)
This is golden words, and probably a great architecture. The problem is that it increases the scope a lot, I'd say by a factor of 1.5\-2. I was in this situation before: i.e. rewriting the code and refactoring it at the same time, because I always want my code be better, more modular, more logical, consistent etc. :\) Also as mentioned earlier, with Swift it is not straightforward to do calls into Swift, because not all of Swift is supported in objc. If you rewrite the "core" \(Model and “Business"\) in Swift, and especially with all good idioms and techniques, you have to write wrappers from time to time, because you have to call into the "core". This increases the scope even more.
That's a good argument. To me another good argument is that this process boosts motivation, because people feel that they are working with modern technology, they feel that they improve their skills for the future. It should have some "back-coupling" effect on the business.
I have been working on a some kind of drinking, and travel app using Foursquare API this month, it has just been released on Appstore. I'd be happy if you can take a look and let me know what you think about it since I'm still in early days of my development adventure. https://itunes.apple.com/us/app/happy-little-boozer/id1383178543?ls=1&amp;mt=8 
Yes, this is a solid approach, thanks.
Hey i played your game and I really liked it! It was really creative! 
[Swift Type Compatibility](https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-ID53) &gt; When you create a Swift class that descends from an Objective-C class, the class and its members—properties, methods, subscripts, and initializers—that are compatible with Objective-C are automatically available from Objective-C. This excludes Swift-only features, such as those listed here: &gt; &gt; - Generics &gt; - Tuples &gt; - Enumerations defined in Swift without Int raw value type &gt; - Structures defined in Swift &gt; - Top-level functions defined in Swift &gt; - Global variables defined in Swift &gt; - Typealiases defined in Swift &gt; - Swift-style variadics &gt; - Nested types &gt; - Curried functions
Pay money for the BNR Swift, and the BNR iOS or Cocoa books. Commit to it. Do all the exercises. Write every line of code in the book. Refactor the code in the book to make it better. Once you’ve done this, you’re in a great position to start building some portfolio projects, which is where the actual hard work and learning come in. This will be scary at first but it just takes time.
Not sure about the wrappers you're talking about. You either have a testable application or you don't. Leave out the wrappers if you don't care. Perhaps you're talking about bridging NSObject to structs and back. But declaring everything NSObject wouldn't make my architecture fail. Switch to structs later when you factored out your business layer. A well designed Objective-C compatible API for your Model project would still be a well designed Objective-C. It's no use to go obsessive over Swift-all-the-things.
I was about to upvote your quip, but you posted a link to an imgur album containing only 1 photo. I'm afraid we can't be friends :\(
LOL First that link said $10, second I tip my hat to you for the following statement on that site: “This course only just launched, so I'm writing this here because I hate empty spaces” - The author. Mad respect.
I am very new to Swift and I can't speak to any of the deeper-level stuff... but i just remember from doing C++ back in the early 2000's (took a 15 yr break from programming), the whole pre-existing methods in Swift/Xcode thing kinda blows my mind. I assume that's one of the reasons why they call it Swift.
IMO I think a lot of times it’s a case of “go with what you know”. If you’re an app dev agency, but a client asks to roll a basic back end for their app, it makes sense to use a language you’re competent and confident with. Similarly, if you’re an iOS dev on your own, and you want some server side stuff, then go with Vapor if you don’t have time/want to learn another language/framework. 
like if i type out "didSelectRowAt" it autofills a function for me. i don't remember being able to do that in c++ back in the day. maybe depends on the IDE tho.
It’s not more ideal than JavaScript or Python, but it is a hell of a lot faster. If that means ideal to you, then perhaps it is more ideal of a language. It’s support of older programming paradigms, as well as newer ones, makes it really easy to learn, and highly versatile. Right now Python and JavaScript have the advantage of being platform agnostic. Swift, not so much. 
That's 100% the IDE (and the compiler behind the scenes which can be queried for such methods). Autocomplete has very little to do with the language.
I mean, I think you started offering sample chapters because of me, and now this? I've only bought two products, but you'll be first on the list next time I need something.
Lots of (potential) reasons - safety, it’s one of the few major languages that tries to address null ability and typing at compile time. Resolving most major crashes. - faster than interpolated languishes like Python and JavaScript - more readable than popular compiled languages: C++, ObjC, C#, Java - open sourced but still has a major company backing it - powerful value types: blocks, enigma, struct and functions are all first class citizens - many tools for functional programming - native support to import C &amp; ObjC code - upcoming features: Dynamic lookup and Dynamic calling will expand its ability to bridge to other languages like it currently does with C &amp; ObjC. Aka import python and JavaScript code directly into swift - has many unique features to turn protocols into a seriously power house; far more than just composition. e.g. Default extensions, protocol inheritance, where conditions, protocol composition - protocol programming is more scalable than object oriented programming and could make it a serious competitor to Java &amp; C# as the next big enterprise language. - can still do object oriented programming which other protocol/interface &amp; value type focused languages like Go can’t do. - since it has many of the modern features and constantly adding more. Swift allows you to pick the best tool for the job. Instead of shoe horning the “language’s” choice. 
&gt;it makes sense to use a language you’re competent and confident with. I don't agree with this. This line of thinking is what has lead to so many awful cross platform tools over the decades, and all of them eventually fail \(or live on too long, resulting in years of suffering for poorly considered projects\). Learning a new language should be trivially easy for a competent programmer. Projects should be built with the tools that best match the project. If the team chooses familiarity over project best fit, they're not doing their jobs properly, and that will hurt the project. 
The biggest advantage is it compiles to optimized native code (I say optimized because it uses llvm backend). It's also statically typed, and overall a pleasant language to work in. Javascript and Python are the opposite: dynamically typed and interpreted. 
As a developer and a manager of an iOS team I'd say you should strongly consider the migration but you need to have a team that is dedicated to the effort and you **need a plan**. My team has done both the hybrid approach and the full conversion plan and we're currently in the process of migrating an SDK to full swift. Our approach was a bit different as we had to keep releasing SDK version. The decision to convert is not universal so you need to consider: 1. The caliber of the team \(senior vs junior devs\), working with fewer and stronger devs is always best but it's not always the case. 2. How much new development is planned and what's the timing of that effort, can you afford the downtime? 3. How many of your dependencies are swift friendly? 4. How many unit tests, UI tests or manual tests do you have to validate things are working? The advantages of migrating to Swift to name a few are: 1. Modern code base for new developers joining the job market / company / project. 2. New patterns, practices and dependencies are all centered around Swift, even Apple's newer examples are Swift so support of Swift will be greater that Obj\-C long term. 3. Type and null safety, Obj\-c is nice if you like a lose language but it will bit you. You will often find bugs you didn't know about if you migrate to Swift \(like someone mentioned\). 4. Investment from Apple and the Community is greater than Obj\-C will be from here on out. Sure, Obj\-c might get some nice features, but that is usually in the bucket of "will this API work better with swift" \(i.e. Nullability and Generics\). 5. Lastly, your devs will be happy and your retention will increase. Like I said, my team is currently going through this with an SDK project \(this is where my comment adds value and compelled me to post\). When we talked the possibilities of doing this we had an App that was nearly all swift, we had added nullability and generics to most of the public interface and we had nearly 700\+ unit tests and 50 some integration tests. Our SDK has iOS, tvOS, watchOS and macOS targets along with Unit and Functional test targets. Below is a glimpse of our approach. 1. Clean up the public interface, delete what's considered dead code and reduce the surface area. We all have dead code in the app and it's better to cut ties with it is then convert it. If you need the code you can always get it from source control again. 2. Created a shared branch for team of 4 to work in. We also used a google sheet to track what's been done and by whom. 3. We started by converting all our objective\-c in our test targets first to get a feel for how much work it would be. We ended up using a tool called [Swiftify](http://swiftify.com) (no, I do not work for them and they are not paying me to say this) to convert some areas of tests. 4. The 4 person team then divided up to "fix" the converted code and integrate it into the project. Once there were happy with the swift code they would delete the objective-c code and mark the Google Sheet they were done, then they would push to the branch. 5. Since I paid for (expensed) an unlimited plan of [Swiftify](http://swiftify.com) I would then convert more stuff and send to the team in Slack. 6. And repeat all in the test target until we had the test target compiling and running back to 100%. No tests were lost in the process. This resulted in a mostly objective-c SDK with swift tests supporting it. Once this was done we raised a PR to master and integrated the changes. 7. We took a similar "divide and conquer" approach with the public interface and internals of the SDK. We just completed about 50% of the interface and are now integrating it into the app. [Swiftify](http://swiftify.com) is decent and will get you about 80% complete with working code. It will get you far enough that modifying the last 20% is pretty easy if you know the code base well enough. It's not a perfect tool like the Android (Java to Kotlin) devs have but then again what that have is not perfect either and the style of you code is highly dependent on your teams preferences. Anyways, I hope this provides some insight for you and gives you a practical idea of how it can be done. Again, the decision is your's and your team.
I completely agree, but I guess my answer was from a business POV where you might have client deadlines/financial blockers preventing you from learning or picking up a new tech at that time. 
I would rather those teams just not take on the job. If they're not competent enough to either already have the appropriate skills or to skill up fast enough on them, then they shouldn't be taking on the project. Of course that's never what happens. But I wish it was. 
From what little I studied of SSS \(Server Side Swift\), they touted that it was type safe and fast. A true OO well designed system can be very nice to maintain as it grows. This could make it a natural choice for an iOS dev that wants to get into full stack. As time goes on, some languages that are strong, start to become weak. Look at ObjC in iOS 5 years ago, now ObjC is a "good to know to get a job in iOS" because more and more are using Swift. SSS could be a thing and the more people that know it, the better the chances of it moving to other areas.
&gt;The Swift Programming Language is 500 pages long. And 99&amp;#37; of that is near enough to identical to any other programming language. Learning a new programming language doesn't mean starting from scratch. For each new language, you will be reusing almost all of the concepts you already know, just with different syntax. The only part that takes more time is getting used to each language's idioms. Learning a new programming language can be done in days, and it takes only a few months to get proficient in it. Over the past few years i've picked up Python, Swift, TypeScript, all of which took me only a matter of days. After a few months with each I was writing idiomatic code. The only languages that took me a long time to learn were my first one or two. By the third language it was obvious how programming languages worked, and all I had to do was figure out where the new one wanted the punctuation to go. The only people who I expect to struggle with picking up new programming languages are devs who only know one or two languages, thus have limited exposure to the range of potential syntax styles, common patterns, language features, etc. And those devs should most certainly not be in charge of making project architectural decisions. They should be mentored by senior devs, who will also be carrying the bulk of the project's workload. &gt;If programmers only used tools that were already popular, no new tools would ever get written or used. You are building a product for a customer, not joining a new political movement. Your job is to get the job done, not to help birth a new movement. Support fringe developments in your spare time, not on the job. &gt;I hope everyone realizes all of the problems inherent with a *popular* choice over a *right* choice With programming languages, it is almost always true. The popular language, regardless of how ugly or unpleasant, will be the most widely supported, have the broadest range of third party libraries suitable to the platform, be the most transferable to similar projects, etc, etc. Popular absolutely is the right choice for programming languages. Server side web development is a perfect example of this. PHP was fucking awful, but it was the right choice, due to the reasons stated above. JavaScript is similarly awful, but is now the right choice, due to the reasons stated above. \(Thankfully TypeScript makes up for many of JavaScript's weaknesses\). &gt;Why stop there? Because I'm paid to get the job done, not to play philosophical games. Do what needs to be done to get the job done fast and done well, and don't do anything else. Anything else is wasting time, and time is money. 
Swift Playgrounds on the iPad is free and nifty.
Good tips on BNR and other sites, so I'll just point out this: skip straight to Swift 4 and make sure when you find a tutorial that you try to find a version for Swift 4. IMO, the classic ToDo list tutorial is a great place to start. Having a PDF seems to work better than a video, videos are hard to follow unless they have all the code, but still kinda hard to search a video for keywords. I personally liked the Udemy RayW set.
It sounds weird. Try to cmd+K when the keyboard should be visible
Sorry but as I understand it, Foundation, which is crossplatform, does all of this except GUI? Granted I wouldn't called the Objective\-C\-based APIs ELEGANT but... they exist.
It’s only $10 if you want the download edition – you can get all the text and videos online for free. Just scroll down!
That's true, code may not be perfect when you're not proficient with a new language you're using. However, depending on a project it's not only about get job done right now. Often times it's also about how much it's gonna cost you to maintain a project. Let's be honest, it's much easier to find a backend dev who writes in Python than Swift. If you pick up a technology that you're comfortable with, but it's not something popular for this specific use case then it's gonna cost you more to maintain it in future.
I know, I just liked the comment :)
&gt;If you pick up a technology that you're comfortable with, but it's not something popular for this specific use case then it's gonna cost you more to maintain it in future. Exactly. The cost of that non popular language choice will have long term repercussions. I believe though that the cost is also upfront, not just longer term. The assumption is that a familiar language will reduce development times. But that is almost never true when the familiar language is being used outside of its domain. React Native is a perfect example. Web devs think they can start doing mobile immediately, without learning mobile platforms, simply by using React Native. They will be able to develop quickly, comfortably, and cross platform, without incurring any time cost. They will not. Their shortcut will not only be more expensive in the long term, but will be more expensive immediately. It will not only harm their project's timeline, it will also harm their project's longer term maintainability and quality. It will cost them more time to build the project than they would have spent learning the mobile platforms natively and building it natively. So their first assumption goes out the window. And it will leave them with a more difficult to maintain project, with exponentially greater complexity and fault rate. So that familiar language not only didn't allow them to deliver the project sooner, it left them worse off in the long term. These kinds of shortcut decisions, that seem intuitively appealing, are project disasters.
You mentioned &gt; - [...] Aka import python and JavaScript code directly into swift How is this going to work? I can not imagine a way we could achive this. Would you mind explaining this?
["fast"](https://flyingfrogblog.blogspot.co.uk/2017/12/does-reference-counting-really-use-less.html?m=1)
Thanks! I haven't announced anything yet, but I suspect you'll be hearing some news in about, ooh, four days :)
That was an interesting read. I wonder if there are any resources for learning how to read that call stack. 
That's not a call stack, that's the raw assembly of the compiled code.
I imagine that you'll run it through a virtual machine that will interpret and execute it for you. That's pretty much the usual way of doing it. It could also precompile the interpreted language into a lower-level representation and store that for later execution.
Try out [Swift for Windows](https://swiftforwindows.github.io/). I have used upto version 1.8 \(the current as per the site is 1.9\) and found it usable and helpful to work on Swift code which I would later use on macOS. **Note**: This will not allow you to do native iOS/macOS development.
Cool read
See also: [Cross\-module inlining and specialization](https://github.com/apple/swift-evolution/blob/master/proposals/0193-cross-module-inlining-and-specialization.md). `@inlinable` and `@usableFromInline`, coming in Swift 4.2. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apple/swift-evolution/.../**0193-cross-module-inlining-and-specialization.md** (master → 577b515)](https://github.com/apple/swift-evolution/blob/577b515e619aef98ae910031e5eab2f9f7ad64a9/proposals/0193-cross-module-inlining-and-specialization.md) ---- 
Works great, thank you very much!
Glad to help.
\&gt; JavaScript is similarly awful, but is now the right choice, due to the reasons stated above. And how did javascript get to be "the right choice" then? Because people said "hey, we already know js frontend...maybe it would be nice to write the front end and backend in the same language"....which is exactly the same sentiment OP was expressing \("I think a lot of times it’s a case of 'go with what you know'"\). But how did js backend, node express, etc, get so many adapters? Because people were willing to try new things. Rails was 5 years old when node came along in 2009, a much more established framework. Express came out in 2010. PHP was even older, and other frameworks even older than that. Yet\-\-people still said "PHP sucks, we don't want rails..so we're going to try a new approach". And look how it turned out\-\-it still sucks, but it sucks a whole lot less than PHP. So it was still an improvement. So, if everyone abided by this statement: \&gt;Popular absolutely is the right choice for programming languages. Then, we would have made significantly less progress than we have the last 10 years. In this theoretical world, we'd still be coding PHP because "that's what's popular". I am very, very glad that obviously a lot disagreed with this statement and were open to trying new things, because as bad as JS is, it's not as horrible as its predecessor.
@thisischemistry these are some excellent links. Two quick notes on them: 1. First one showcases how you can use apple's Javascript Virtual Machine to do it (JSContext) however that is really built in ObjC taking advantage of its run-time environment. The goal to have Swift's own mechanism instead of relying upon its ancestor. 2. Definitely check out the second one as the first iteration of this feature for Python.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apple/swift-evolution/.../**0195-dynamic-member-lookup.md** (master → 577b515)](https://github.com/apple/swift-evolution/blob/577b515e619aef98ae910031e5eab2f9f7ad64a9/proposals/0195-dynamic-member-lookup.md) ---- 
Windows isn't a supported platform for Swift yet. You can run it under Linux, under Windows, but you're not going to have nearly as pleasant a time as running it natively.
&gt; faster than interpolated languages like Python and JavaScript Heh.
I bought the [Glyphish icon set](http://glyphish.com/) for my own use, but if you're just playing around you could just use [Icons8](https://icons8.com/).
Thanks! :) Using icons8 already
And there are billions of resources for it
I'll look into this, thanks!
 &gt;Wait for cross-module inlining annotations. Or just don't explicitly inline at all. 99% of the time, the compiler will know more about what to inline than you do. IMO this would only be useful if benchmarks show a visible performance improvement. 
I don't think `@inline(__always)` ruins debug info.
Even if you do not experience ill effects locally, the point is that these attributes are built for the standard library and the standard library only. Their use outside of that domain is unlikely to have a positive impact.
&gt; In programming, function inlining is a compiler optimization technique that removes the overhead of calling certain methods by directly replacing calls to them with the method's contents, basically pretending that the method never existed in first place. This provides a great performance boost. Fundamentally it's not really that bit which provides great performance boosts, it's that inlining allows "cross-function" optimisations: generally speaking the compiler optimises functions individually, but after you've inlined a function inside another the compiler can optimise that as a unit, and can propagate requirements and assumptions out of functions to unlock further optimisations. And thus [Inlining is the most important compiler optimisation pass [because] it enables most other optimisation opportunities.](https://ghc.haskell.org/trac/ghc/wiki/Inlining). It's also a balancing act because inlining everything means lots of duplications and functions which don't fit in caches anymore, cratering your performances.
Check out Ray Wenderlich, I'm also new to Swift and it's massively helped me. 
I use font Awesome (no backgrounds). It has a wide range of options plus there's a library that help bring the icons in UIImage, modify colors, background etc. https://github.com/Vaberer/Font-Awesome-Swift
I search icons here freepik.com
&gt;Or just don't explicitly inline at all. The cross module annotations have legitimate uses, and offer signitifant performance boosts for binary modules. They make it possible to inline methods from binary modules, which isn't otherwise possible. From the proposal: &gt;The `@inlinable` attribute exports the body of a function as part of a module's interface, making it available to the optimizer when referenced from other modules. Think for example of a for loop which calls a method in a third party library on every iteration. With this new annotation, the compiler has available a binary chunk that it can inline into your for loop. But without it, every iteration of the loop will have to jump to the other module.
Thanks. You're right that I should have used examples and written more to explain better.
If I'm interpreting this correctly, the compiler still ultimately decides, and this just makes it possible cross-module, right?
I believe so, yeah. If it thinks it’s not a good idea to inline, it won’t. The annotation just makes it possible where previously it wasn’t. 
You should use a generic types. For example, an Answer&lt;T&gt; where T is a string, string array, int etc. Then your controller subclasses can define their initializers to take the appropriate QuestionViewModel&lt;T&gt; such as QuestionViewModel&lt;String&gt;, QuestionViewModel&lt;Int&gt;, etc. That should clean it up a bit FYI You only really need ``` struct QuestionViewModel&lt;T&gt; { var id: String var answer: T? } ```
post this on stackoverflow! there you can get real help
I'll post a potentially unpopular opinion: Swift is not that great of a language \(yet?\). I've used it in two iOS apps and on a small backend project, back when its Linux support was very incomplete. I would not use it outside of iOS \(It's way nicer to work with than ObjC\- I'll give it that\). There are fundamental things that Swift does that are wrong, IMO. It conflates type definition, reference/copy semantics, and heap/stack allocations. Those things should be orthogonal, and the fact that they aren't in Swift makes it hard to write good, reusable code. Swift also lacks any type of namespacing. Even Java has this with packages. If you don't want to go through the ceremony of making a Framework, the closest thing you have is to create a class with a private init\(\) and all static methods. This is like 90's C\+\+/Java style "namespacing." Swift generics and protocols don't mix well, which means you have either copy\+paste code or horrible spaghetti code with redundant protocol definitions and/or ugly runtime casts where the compiler *should* know more than it does. The standard library is also weirdly lacking in basic stuff: there's no stack data structure, for example. There are certain languages that just go with certain domains: Javascript for web frontend, Python for data science (although Julia is pretty cool...), Swift for iOS. Frankly, Kotlin and Rust are both better languages than Swift. Kotlin will be easier to learn, since it's garbage collected- plus you get access to the whole Java ecosystem.
&gt;Learning a new language should be trivially easy for a competent programmer. Tell that to Haskell and Rust. But, frankly, just learning some syntax and doing a "hello, world" over the weekend doesn't count as learning a language anyway. I refuse to believe anyone can "learn" a language in a few days and not write utter garbage for at least a few weeks. That includes easy languages like JavaScript \(maybe moreso, actually\).
Believe what you want, it doesn't change reality. Ideally, you should be productive on the first day, and definitely should be carrying your workload within a week. If it takes you longer than that, either you're still fairly fresh to the job and have a lot of basic learning to do in general, or there's something wrong. &gt;just learning some syntax and doing a "hello, world" over the weekend doesn't count as learning a language anyway This isn't academia. This is building things. You don't need to know every part of a language to get things done.
&gt; This isn't academia. This is building things. You don't need to know every part of a language to get things done. Correct. You can't build stuff, but that does not mean you've learned a language. If you write a bunch of garbage that future-you or a coworker have to suffer through later, that's just not what I'd call "learning a language". I'm talking about how long it takes to write decent code. All languages have subtle differences- even languages that look superficially similar: Java vs. C++, Rust vs. Swift vs. Go, OCaml vs. Haskell, Clojure vs. Common Lisp, etc.
I don't care what you call it. This is a waste of time. Exactly the sort of philosophical meandering that I've been arguing against. Get busy, get it done, stop fussing about with semantics. &gt;I'm talking about how long it takes to write decent code. And that's what I've saying. You should be writing decent code on the first day, and should be carrying your workload within a week. And by about three months you should be writing idiomatic code and have a solid grasp of the majority of the language. Writing good, maintainable code absolutely does not require indepth knowledge of a language. The requirements for good code are the same in all languages. Good programming techniques are language agnostic. If I look back at the Swift code I wrote when I first started using it, I can see plenty of syntax that I would write more a different way now. But there is nothing wrong with the code. It is readable, maintainable, well optimised, and it does what it's supposed to do. I didn't need to know jack shit about the finer details of the language to get good results in the first week or month. I just needed to know what I had to build, and get busy building it. Honestly, the waffle that goes on around programming. It's unbearable sometimes. Programmers have such grossly inflated ideas about their own profession. 
Reference 
Array is struct. Whatever is Element, array will be passing by value. 
This is probably why most apps with resizing have control points on the edges as well as the corners, so you can resize a single dimension or both at once. The way I'd probably do it it by keeping track of \`isResizingLeft/Right/Up/Down\` as separate variables, but allow of the possibility of two of them to be true at a time. So if the user drags on the right edge, \`isResizingRight\` will be true and only resize on the side. If the user drags from a corner, \`isResizingRight\` and \`isResizingDown\` would both be true so you would update both dimensions.
You want to know how to write good code quickly in a new language? Grab a task off the list, and start doing it. Immediately. Learn the part of the language you need for that task, and nothing else. Do not divert. By the end of the week you will have learnt all the essential parts of the language required for getting work done. And you will have learnt it *while getting work done*. Don't waste a single second reading books or philosophical manifestos about the language's mission and vision. Shut that shit down. 
&gt; Then how about you go to work instead of posting on Reddit? It's 22:24, and I'm in bed. I finished work hours ago. &gt; Are you seriously surprised that someone on a programming language subreddit is interested in picking apart programming languages I replied to this thread because someone was asking about the appropriateness of Swift to tasks outside of iOS. That is a valid and sensible question for working professionals. I skip the waffle in this sub, and keep my distance from the more pretentious programming subs. But this thread was a respectable, non waffle question.
Obviously the person who commented was wrong, as evinced by the fact that they deleted their comment so quickly. `Array` is a value type, see my other comment. You can only hold a single type in an `Array`. However, that type can be a composite type that holds several different types. The semantics of how the composite type is held depends on if it’s a value type or a reference type. 
Darn, it was already answered. Well either way, I made some quick code to demonstrate why the arrays are value types regardless of the elements inside. https://pastebin.com/rvaz9skY
&gt;but how in the fscking world do you actually *choose* a language for your project if you don't sit an think about how the language works, what the pros and cons are? I've already explained that elsewhere in this thread, repeatedly. You can read my other comments in this thread for answers to that. &gt;Besides that, how do you know what part of the language you need for a task? Usually, the most basic parts of the language. Programming is massively overblown in the eyes of young programmers. In reality you are just a glorified construction worker, hammering digital nails into digital wood. Grab the digital tools, and build that shit. And stop kidding yourself that you're painting the fucking Sistine Chapel. &gt;If you do that you'll never learn how to use Swift Protocols Protocols are a common pattern to a long list of languages. As I've said elsewhere in this thread, if you've already got a few languages under your belt, you will come in already prepared with knowledge of common programming language features. Swift protocols don't need learning if you've already used that language feature in other languages. Again, as I've said elsewhere in this thread, all you need to learn is where the language wants you to put the punctuation. 
Im having this same bug with UINavigationController. It shows up in one view controller but not the next. Ive deleted the connection like 5 times and still didly squat. Im prolly just going to delete the viewcontroller and recreate it. Xcode 9.3 seems to be extremely buggy. Im getting random crashes, IBDesignables not updating, Disappearing views, etc. Apples software is going to shit.
&gt; You should be writing decent code on the first day, and should be carrying your workload within a week I don't believe you. I don't think that you could write good Lua code or Haskell code or ocaml or C++ after one day of writing with it. You could probably write basic code that gets things done, but if you think the good Haskell looks like good C looks like good Lua, well... it doesn't. If you think good coroutine based code looks like futures and promises, it doesn't. Only a complete disrespect for the thought put into language design, or a language design career worth envying could possibly lead one to think that whatever the differences are between languages, they are trivial.
Im running high Sierra in workstation on my windows laptop. Its great but make sure you backup your vms harddrive cause its a bitch and a half if u lose al your stuff and need to reinstall.
Please read my other replies in this thread. I've explained several times. 
IBDesignables have always been an issue for me. It updates whenever it wants and I just dropped it. I use a class and update it programatically. For me, I notice that if I work for awhile without restarting Xcode, my Xcode theme is not working correctly. My methods and properties are not being colored until I restart it. It's annoying but Xcode has always been buggy. Now this thing with that tabbar, I've been struggling with it for days. It's beyond frustrating when you don't know how to fix it.
Have you checked on the viewcontrollers properties if "hides tabbar on push" is selected? Ive never had bugs with xcode before 9.3 but even now it keeps on thinking im not conforming to delegates even though I am. It itself implements the methods and then just stops working. It doesnt let me build my project. it really is frustrating. 
I would stop that habit, you're unnecessarily making your classes much more heavy than they need to be. Your class type's definition could be as simple as this: class CustomObject { let name: String init(_ name: String = "Default") { self.name = name } func doSomething() { print("I'm doing something") } } No need for `NSObject`, `String`, or `override init`. KVO can be useful but I wouldn't worry about it in a class unless I absolutely know I'm going to need it down the road, there are lots of alternatives and it's heavy-handed to bake it into everything I do.
Lets see if I understand. If I have an array of 3 objects, and I pass it to a function, and then somewhere else add a new object (4th element), the array inside the function I passed to previously still has only 3 elements? And if update one of the element’s properties inside that function, it’s by ref so the change can be seen outside as well?
Yes. The last question: yes, if they are objects (reference types). 
Thanks mate
Nope. I love swift, but there is nothing that makes it uniquely suited to most areas outside Apple's walled garden. That's not to say that swift is a bad choice in many of those areas, but rather that there are other competitors which are also quite good and in many cases "better" for some practical definitions of better.
A bit too late for me, but don't forget about copy on write. when passing value types where if you pass an array it won't get copied unless you start writing to it so it's super EFFICIENT even with an array with millions of elements
First off, I'm assuming you're working serially. If you pass something into a function then the entire function executes before anything else can be done. Thus, if you add a new object AFTER you execute the function then it won't be available to the function since it's already finished execution. Secondly, when you pass in a parameter and it's passed by reference you can modify it and the changes will be seen outside the function. When you pass in a parameter and it's passed in by value it's constant by default (a `let` constant) and can't be modified. You can add `inout` to the parameter in order to see changes outside but then what happens is it's copied into the function, changed, and copied back out. It's still a value type, not a reference type. // class is a value type class ValueType { var value: Int init(_ value: Int) { self.value = value } } // Bar is passed in by reference func foo(_ value: ValueType) { // modification in here can be seen outside value.value = 10 } let bar = ValueType(1) print(bar.value) // 1 foo(bar) print(bar.value) // 10 If you try the same thing with a value type you'll get an error: func foo(_ value: [Int]) { value.append(10) // Error: Cannot use mutating member on immutable value: 'value' is a 'let' constant } With `inout`: func foo(_ value: inout [Int]) { value.append(10) } var bar2 = [1] print(bar2) // [1] foo(&amp;bar2) print(bar2) // [1, 10] 
An excellent point.
Yup, pull a Nike, and just do it. At my workplace we all skimmed the swift book on the day it was released and read some blog posts for the next year. When swift 2 came out we all just stopped creating any new obj-c files. All new files were swift. It knocked maybe 10 percent off our productivity for a month or two but it was a pretty gentile transition. Make sure you know about guard let, if let, the ?? operator, and to avoid trailing !s in production code, and you'll be fine.
Thanks for the reminder:)
No, I don't think you've explained anything, you've made several dubious assertions regarding universality of software design. I really doubt that what you think is good maintainable code is what I would consider good maintainable code. I think you are talking about competent code, which when isolated in modules has a valuable place in many software systems. If this is the case, then I too could write competent code in a new language, but would never feign to believe that an expert with many years of experience in that language would call it good or especially maintainable, or anything beyond competent, if even that.
Thanks, this is pretty useful. I'll keep what you said in mind. Anything else about my code that you would change?
What if you make an array that can hold `Any`?
Great, well thanks for your help.
It can hold anything. That's what `Any` means.
Hi steve-u! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/8n1jie/camma_free_iphone_has_launched_add_notes_to_real/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
I would create a UIView subclass that adds 8 invisible UIViews inside of it using autolayouts. Four corners and four sides. Make them finger-sized meaning at least 30px wide and high. The corners are 30 x 30. So top and bottom row same height, left and right row same width 30px. Make the top/bottom and left/right space &gt;= 0 so they can never be crunched together. Depending on the place where you tap and hold you drag an edge or corner.
Missed that they have descriptions as well, so here's the one for this lab: Generics are one of the most powerful features of Swift, enabling you to write flexible, reusable components while maintaining static type information. Learn about the design of Swift's generics, including how to generalize protocols, leverage protocol inheritance to express the varying capabilities of related types, build composable generic components with conditional conformances, and reason about the interaction between class inheritance and generics.
Great point. CoW is very powerful. Internally, `Array` has a reference to a `struct` that contains all the values. A new copy of that `Array` will maintain a reference to that `struct`. The first time you call a mutating method on the new `Array` it copies the `struct` over from the original and mutates that copy. So, as long as you're passing around `Array` and not mutating them you're being extremely memory- and processor-efficient. There's a great note on it in [Writing High-Performance Swift Code](https://github.com/apple/swift/blob/master/docs/OptimizationTips.rst): [Advice: Use copy-on-write semantics for large values](https://github.com/apple/swift/blob/master/docs/OptimizationTips.rst#advice-use-copy-on-write-semantics-for-large-values)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apple/swift/.../**OptimizationTips.rst** (master → ed5d321)](https://github.com/apple/swift/blob/ed5d32113c4a0fe9a5a3658e63deba12e7fae8f9/docs/OptimizationTips.rst) * [apple/swift/.../**OptimizationTips.rst#advice-use-copy-on-write-semantics-for-large-values** (master → ed5d321)](https://github.com/apple/swift/blob/ed5d32113c4a0fe9a5a3658e63deba12e7fae8f9/docs/OptimizationTips.rst#advice-use-copy-on-write-semantics-for-large-values) ---- 
I have tried that. Certainly not it. Never really caused any issues with delegates for me, unless I have messed it up, which happened today and it took me 15 min to realise it was a typo that caused it. 
You might want to check out these [docs](https://developer.apple.com/documentation/corelocation/converting_between_coordinates_and_user_friendly_place_names). Basically there's a class called CLGeocoder which helps you converting between coordinates and addresses. 
If you don’t need custom behavior here is a good library to build forms: https://github.com/xmartlabs/Eureka
I'm trying to understand your situation, so I'm going to try and recap; Basically when you select a cell from the hamburger menu, and you present a new view controller, the tab bar is suddenly not showing ? If this is the case, that is the expected behavior. The UITabBarController will be responsible for showing only the embedded VCs. If you present a new view controller, it will cover up the whole screen and showing on top of the UITabBar.
i always let the IDEs auto complete fill in the method/variable name so that i dont make a mistake for that reason. Have you tried deleting the derived folder? 
Have you submitted any apps for review on the app store by any chance?
Yes i have. Ive completed 2 and Im working my third. If they do have some way of knowing im not running official specs then they arent doing anything in retaliation.
Hackintosh are tough to deal with not working drivers and such. Its better to virtualize. And plus do you really want to have to turn ur computer on and off again just to transfer data?
All right. That's what I was afraid of if I wanted to start learning Swift to make my own app that Apple will find out and ban you or something like that. 
You might want to try using a protocol specification/conformance design. protocol AnswerProtocol { public associatedtype AnswerType public var value:AnswerType public var identifier:String } class StringAnswer : AnswerProtocol { public typealias AnswerType = String public var value:AnswerType public var identifier:String init(identifier id:String, value v:StringAnswer.AnswerType) { self.identifier = id self.value = v } } struct DoubleAnswer : AnswerProtocol { public typealias AnswerType = Double public var value:AnswerType public var identifier:String init(identifier id:String, value v:StringAnswer.AnswerType) { self.identifier = id self.value = v } struct BoolAnswer : AnswerProtocol { public typealias AnswerType = Bool public var value:AnswerType public var identifier:String init(identifier id:String, value v:StringAnswer.AnswerType) { self.identifier = id self.value = v } /// and so on... } Then you can branch on the object type, or `AnswerType` in a `where` clause, if needed for type-specific action... I've often found this sort of design useful. 
I found this one. https://theswiftdev.com/2017/10/27/how-to-launch-a-macos-app-at-login/
Have you already gone through the tutorials at [Ray Wenderlich’s Site](raywenderlich.com) ? They have a lot of tutorials that deal with games. 
&gt; but would never feign to believe that an expert with many years of experience in that language would call it good or especially maintainable, or anything beyond competent, if even that. Well, I'm just glad that there are many programmers more competent than you. As I have repeatedly said, the point of the job is to do the job. Code doesn't have to be beautiful or poetic to be readable, maintainable, and well optimised. If you take too long getting it done, and write unmaintainable or unreadable code in the process, that's on you. Improve your game. 
It might seem too much to ask but can you provide any code for this? 
Are there any possible libraries dedicated to my matter using CGContext, Core Graphics, and draw()? I don’t have much experience in any of them.
I have actually come up with a solution which works totally fine now, thanks for the hints man.
I have come up with a solution. Totally used your advice, thank you.
Yes it works now, just the way you said it would. It needed a few more configurations with the whole math thing but it works beautifully thanks to you.
You got that right. I tried to present the new view controller \(from that hamburger menu\) modally and if I set the "Presentation" of the Segue to be "Current Context" and this is the only case that I do get the Tabbar to show. The problem is that the home tabbar item is selected as if it's part of the tabbar view controllers and when switching back and forth between the tabs, the home still shows that view controller instead of the home view controller \(that's part of the UITabbar\) and I'm not sure how to solve this problem 🤷🏻‍♀️
For methods and properties, auto completion always! But for customID names like Segue's ID or cell's ID I put those in a struct and get it from there. It's so easy to type something wrong and spent a lot of time only to find out that you made a typo
The annoying part is that to get type erasure, OP would have to use a class for QuestionViewModel...
I think you are a liar or are grossly overestimating your own skills. I don't think you write good and maintainable code. Do you have a GitHub where I can see your brilliance? Otherwise lets agree to disagree.
&gt;Do you have a GitHub where I can see your brilliance? [https://github.com/sobri909](https://github.com/sobri909) I started programming in 1984, by learning from library books. I started programming professionally full time around the turn of the century. &gt; I think you are a liar or are grossly overestimating your own skills I think you take programming languages far more seriously than you should. And I think you probably achieve far less than you should while on the clock, largely due to your grossly inflated ideas about what programming is and programming languages are. Get rid of the pretentiousness and the lofty ideas. Throw that shit out. And start accepting that maybe you don't attack programming tasks as directly as you should, and instead spend more time on unimportant tangents that you don't have the experience to recognise as unimportant. Everything that you're absolutely certain about, I was also absolutely convinced of too, some decades ago. Then experience taught me that I was full of shit, and just wasting everyone's time. Which is what I see the vast majority of young programmers doing today. It's just a shame we're all so cocksure confident about how correct our bullshit is at the time. So many wasted hours and days and months and years.
It's not weird, it's just the shortcut for "Toggle Software Keyboard".
Yeah I know Xcode should allow you to use hard coded string like in android.
Agreed. This is insanely difficult when it should be insanely simple
You might want to reconsider the architecture of your views then, but some solutions I can see are that instead of presenting the new view modally, you can push it to the navigation controller stack, and hiding the tabbar if it confuses the user as to where in the app he is at the moment. Another thing I sometimes do is that I change the viewControllers the NavigationController holds when the user selects an option on the side menu. When you present a new view modally, or any other way, if you want it gone you will need to dismiss it, there's no other way around that. Same goes for the selected tab, just cause there's a new view controller on top of the tab bar, that doesn't mean the selected tab index changes or deactivates. 
I'm going to experiment with this. I really like that it's very generic. I want to make it conform to Codable, but will experiment with this hopefully this week.
Awesome! Glad you found a solution.
Test
Yes, you understand correctly. If you want to adjust this behavior you should try out labeled statements – you can [read more here](https://www.hackingwithswift.com/example-code/language/how-to-break-out-of-multiple-loop-levels-using-labeled-statements) or [watch a video](https://www.hackingwithswift.com/sixty/4/5/exiting-multiple-loops) if you prefer.
Hey good job and congratulations! I often struggle to ship my ideas because I cannot do graphics design.. How did you go about getting the images ready?
Im an intermediate programmer and you just taught me something too, Thanks and have an upvote.
Oh, I misunderstood. I thought you meant to say that pressing Cmd+K is weird.
There is no setting to do what you want as it's not a problem most apps have. Off the top of my head, I'd guess that the easiest way to do it is make a subclass of UITextField that overrides intrinsicContentSize and calculates the size of the largest allowable text.
Isn't there a priority for each constraint? IDK, Autolayout is not my friend, but I remember a priority, I just haven't used it.
Hmm, actually, I just noticed that Twitter is doing exactly what I'm trying to do. They have 4 View Controllers in the Tabbar. The user taps on a button \(located on Navigation bar on Home tab bar\), a sidebar menu shows up and from there, they can click on the profile and it leads to the profile page \(home icon is still selected, you're **right** about that!\) BUT if you click on home tabbar item it goes to Home instead. That's EXACTLY what I'm trying to do here. How is that done? 🧐
My two guesses are: a) the view is dismissing in the viewWillDisappear when the user will navigate to any other view. b) The UITabBarController has it's own custom Controller class, and using tabBarController(_:didSelect:) you can dismiss the view as well.
No, that's not the approach. UITabBarControllers have a method you can override as well delegate methods that help you check when the user selects a tab. [check this stackoverflow see if it helps with what I'm trying to explain](https://stackoverflow.com/questions/33837475/detect-when-a-tab-bar-item-is-pressed)
I suppose I'm missing something fundamental to get all of these errors, and this is a plain single view app that I added this button to. 
Set a height constraint for your text field to be greater than or equal to a pre-defined value.
I'll check that out tomorrow morning and respond. It's 12am here and my eyes are bloody red 😅 PS: Thank you very much for your help! 🙇🏻‍♀️
Yeah, no prob! Also if you dont mind you can put the code on github or something, so that I can be of better help. But thats up to you of course, if you want to put your code for the public. 
I'm not sure exactly what calculation you're trying to do, but `Calendar`'s `enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)` method is probably a good place to start. It can be tricky to get working, but should let you enumerate pretty much an interval between two dates, including days.
 import Foundation let week = stride(from: -7, to: 0, by: 1).compactMap { Calendar.current.date(byAdding: .day, value: -$0, to: Date()) } print(week) // [2018-06-07 00:21:10 +0000, 2018-06-06 00:21:10 +0000, 2018-06-05 00:21:10 +0000, 2018-06-04 00:21:10 +0000, 2018-06-03 00:21:10 +0000, 2018-06-02 00:21:10 +0000, 2018-06-01 00:21:10 +0000]
Good stuff, thank you! I didn't even think about using the stride method. I had something similar in a while loop, but stride is much simpler! 
What in the world are you taking about?
I took out `stride` because it wasn't necessary, I had it in there when I was counting backwards but I changed it to go forwards.
I want to have two headers separated in the middle.
It’s an app I’m doing, I want make it unique feature.
You still don't make any sense. Headers for what? In a tableView? In some other view? What middle??
Collectionview buddy
How my friend 
This kind of information is necessary if you want any kind of help, we can't read your mind you know.
Oh sorry.. 
Whenever I follow MVC, I implement a Model Controller to initialize model objects and perform functions, such as when you want to create a user account or something. So for example, you have an Account object you want to create, which has a username, email and password. Within a ModelController\(so in this case AccountController\), you will want to initialize that object, and create a function such as: func createAccount(username: String, password: String, email: String, completion: @escaping ((Account) -&gt; Void) { let account = Account(username: username, password: password, email: email) // SAVE IN COREDATA STACK OR PERFORM A NETWORK CALL THEN HANDLE THE ERROR AND COMPLETION // } You never want to initialize model objects in a ViewController, always use some sort of delegate as a messenger between both.
The Hackintosh method is eventually going to come back to bite you. As you say you are interested in more than Swift - you are interested in iOS development, I think it makes most sense to dive into learning the Apple ecosystem. A Mac mini can be had on ebay for as low as $50.
So, this is how I set up my projects. You had a lot of questions and felt it might be best to just lay out exactly how I do it. You can use this or go with something else :\) Let me know if you have any questions! Initialize inside your View Controller var dogs = [Dog]() var dogInteractor = DogInteractor(dataStore: DogDataStore()) Then load your data from an interactor: override func viewDidLoad() { loadData() } func loadData() { dogInteractor.getDogs(success: { results in self.dogs = results self.tableView.reloadData() }, failure: { error in print(error.description) }) } Interactor: class DogInteractor { var dataStore: DogDataStoreInterface init(dataStore: DogDataStoreInterface) { self.dataStore = dataStore } func getDogs(success: @escaping (_ dogs: [Dog]) -&gt; (), failure: @escaping (_ error: APIError) -&gt; ()) { dataStore.getDogs(success: { dogs in //logic success(dogs) }, failure: failure) } } DataStore \(I wrote it out as if I were using an API but you can easily change this to pull from local JSON: class DogDataStore: DogDataStoreInterface { func getDogs(success: @escaping (_ dogs: [Dog]) -&gt; (), failure: @escaping (_ error: APIError) -&gt; ()) { manager.request(DogAPI.getDogs()).validate() .responseString { response in switch response.result { case .success: // Convert the string response to JSON if let responseString = response.result.value { if let dataFromString = responseString.data(using: String.Encoding.utf8, allowLossyConversion: false) { let json = JSON(data: dataFromString) let responseData = json["response"] var dogs = [Dog]() for item in responseData.arrayValue { let dog = Dog(json: item) dogs.append(dog) } success(dogs) } else { failure(APIError.custom(error: "Unable to process JSON for dogs")) } } case .failure: failure(self.generateAPIError(response.response)) } } } } Interface is just a protocol. DogAPI: enum DogAPI: URLRequestConvertible { static let baseURLString = "https://yoururl.com" // API Methods case getDogs() // Set Request Type var method: String { switch self { case .getDogs: return "GET" } } // MARK: URLRequestConvertible // Create URL public func asURLRequest() throws -&gt; URLRequest { let result: (path: String, parameters: Parameters) = { switch self { case .getDogs(): return ("dogs/", [String: AnyObject]()) } }() let url = try IMCAPI.baseURLString.asURL() var urlRequest = URLRequest(url: url.appendingPathComponent(result.path)) urlRequest.setValue("application/json", forHTTPHeaderField: "Content-Type") urlRequest.setValue("application/json;v=1", forHTTPHeaderField: "Accept") return try URLEncoding.default.encode(urlRequest, with: result.parameters) } }
What you want to do is called reverse geocoding. CocoaCasts has a pretty good tutorial that I used several weeks ago and is worth a look. [https://cocoacasts.com/reverse\-geocoding\-with\-clgeocoder](https://cocoacasts.com/reverse-geocoding-with-clgeocoder) The Ray Wenderlich site also has a very good MapKit and CoreLocation tutorial of which there is a video dedicated to geocoding. [https://videos.raywenderlich.com/courses/17\-mapkit\-and\-core\-location/lessons/4](https://videos.raywenderlich.com/courses/17-mapkit-and-core-location/lessons/4)
Then get a mac mini that is supported. A brand new mac mini is only $500. A supported mac mini is ~$250. VMWare Workstation is $250. My humble opinion, is that if you have decided to have a career as an iOS developer (or any sort off application developer for that matter) - you probably shouldn't start that career off by figuring out the cheapest and illegal ways to jumpstart your career. 
Sure. In viewForHeaderInSection just return a view that you can build as you want
Nice to know the language you use is in demand.
To add to this answer, check out Lesson 4.3: Model View Controller of the [App Development with Swift](https://itunes.apple.com/ph/book/app-development-with-swift/id1219117996?mt=11) by Apple. It's a free book on iBooks, so there's no reason for you not to look at it. It gives an adequate discussion on the design pattern and how to use it on your projects.
He says Flappy Bird is in Swift, but Flappy Bird was in 2013. Now sure about this.
There is an awesome resource called “The swift programming language” that contains all this crazy shit... https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html
It's a YouTube video, I wouldn't count it as a good source of anything.
I don't have sound on my main computer, so I have to load the video on a device to listen to it. Once I did that, I wanted to delete it. He didn't really justify his views. I didn't delete it because it's pretty harmless, just not very useful, but I think it's still fairly accurate. However, I did see a number of others that were supported and had nearly the same ranking.
Why would you even have to start a timer? Just save the time of the first gesture, then when a second gesture occurs check the current time against the saved time. If the difference in time is less than a certain amount, do one thing. If it's more then do another.
So is he saying a JavaScript programmer makes more money than C# / Java / Swift programmers?? Something wrong about that picture. 
I really hope so. The former BuddyBuild CEO, Dennis, is a really sharp leader. I’m sure they’ve been working hard to integrate!
I bumped into him at WWDC 2016, extremely nice guy too. I happened to stumble into BB early on, and was a huge fan for my personal projects, I was sad to see it go. 
Get the book on app architecture from objc.io. It’s advanced but will give you a lot of best-practices perspective
All the more reason to hope for integration this year!
Whatever they do with it, hopefully it's cross platform, otherwise it's pretty much dead for anyone not just building Apple apps. Like the stupid Xcode bots, this new service will fail if it doesn't support the complex workflows developers need.
as nice as that would be I don't know of anything else that Apple has introduced that is "cross platform" :( 
I'm curious about this. I've been learning more about CI/CD and the tooling for it. 
Properties cannot be dependent on each other. It is not a simple variable in this case. Warning tries to tell you that it uses “self.playerImage” syntax to initialize a property, and at the moment of initializing (when all properties are calculated) there is no self.
Thank you :) 
Im beginner too. You can use lazy var syntax in properties that depend on others, so that they are calculated later. But it complicates the code and is not pretty. I suggest you read/google about initializers in swift to find proper solutioon.
Wouldn't hold your breath. TestFlight used to be cross platform.
If you put 4 spaces in front of your code when you post here then it will be formatted as code and be a lot easier to read.
Didnt know that thanks
Sounds like a new version of XCode Server should come with it as well?
CI/CD is awesome and once you've started using it you'll never go back... even if your a sole developer... Checkout FastLane its an incredibly powerful tool!
I found now, that the "lenders" array is being updated even though I thought it didn't. But the problem lies where the tableview I populate with the data from "lenders" is not being updated correctly in the first place which lead me to believe that the comparison wasn't working, but it is. Because when I run through the "lenders" array it has got Objects in it. Which now leads me to believe that the order in which the tableview is updated is wrong...
They sent me a message that all android projects have to off the platform by today.
This is my variables and onviewdidload method @IBOutlet weak var myTableView: UITableView! var lenders = [LenderData]() var lendersTemp = [LenderData]() override func viewDidLoad() { super.viewDidLoad() self.myTableView.rowHeight = 90 myTableView.delegate = self myTableView.dataSource = self downloadJSON { self.myTableView.reloadData() } }
My downloadJSON method func downloadJSON(completed: @escaping () -&gt; ()) { let url = URL(string: "https://api.kivaws.org/v1/loans/newest.json") let task = URLSession.shared.dataTask(with: url!) { (data, response, error) in if error != nil { print("JSON not downloaded") } else { if let content = data { do { let myJSONData = try JSONSerialization.jsonObject(with: content, options: JSONSerialization.ReadingOptions.mutableContainers) as AnyObject var imageID:Int = -1 var country:String = "N/A" var longLatPair:String = "0.000000 0.000000" var town:String = "N/A" if let loans = myJSONData["loans"] as? NSArray { for i in 0...loans.count-1 { if let lender = loans[i] as? NSDictionary { if let imageData = lender["image"] as? NSDictionary { imageID = imageData["id"] as! Int } if let countryData = lender["location"] as? NSDictionary { country = countryData["country"] as! String town = countryData["town"] as! String if let geo = countryData["geo"] as? NSDictionary { longLatPair = geo["pairs"] as! String } } let newLender = LenderData(id: lender["id"]! as! Int, name: lender["name"]! as! String, image_id: imageID, activity: lender["activity"]! as! String, use: lender["use"]! as! String, loan_amount: lender["loan_amount"]! as! Int, funded_amount: lender["funded_amount"]! as! Int, country: country, town: town, geo_pairs: longLatPair ) self.lendersTemp.append(newLender) } } } DispatchQueue.main.async { completed() } for tempLender in self.lendersTemp { if !self.lenders.contains(where: {$0.id == tempLender.id}) { self.lenders.append(tempLender) } } } catch { print("Error occured \(error)") } } } } task.resume() }
Hey, incrediblepony, just a quick heads-up: **occured** is actually spelled **occurred**. You can remember it by **two cs, two rs**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
&gt; App Development with Swift I have the book, but haven't read that section yet. I'll check it out.
So if I understand correctly, you're saying I should go with case (a) for question 2 and wrap my model method inside a controller method for question 3? With regards to using a model controller, I've read about using them before, and in particular, using them in conjunction with a protocol-delegate pair as another layer of abstraction to maintain the separation between model controllers and view controllers. I could see it be appropriate at that point to make the delegate assignments in my AppDelegate in that case (as in questions 4 and 5). Would you agree with this, or am I reading into it too far? Additionally, extending from your comment about initializing the model within the model controller, would it likewise be best for me to initialize my view within my view controller rather than my AppDelegate, perhaps in the init() for my view controller?
Glad to have helped! If you liked that, I have lots of books you might also enjoy. Even better, they are half price for WWDC: https://www.hackingwithswift.com/offers/wwdc18-50
Awesome! It’s such a big area, I don’t think anyone knows everything. I have a range of books you might find useful, and they are even on sale right now thanks to WWDC: https://www.hackingwithswift.com/offers/wwdc18-50
I would be glad if I did a simple job : test and publish easily an app without needing me at each step Hey you uploaded a build ? Why don't you wait half an hour before doing anything and then set a few field a then wait for half a day
Definitely. It’s nice to integrate with GitHub to double check your work in a PR. Then all you have to do is merge and wait for the dev build to finish. You can either keep working on something or grab a coffee, or if your done for the day just pack up. Bitrise is another solid CI solution for iOS/Android.
What you’re looking for is called [Mesh Parametrization](https://en.wikipedia.org/wiki/Mesh_parameterization). [This resource](https://en.wikipedia.org/wiki/Mesh_parameterization) was recommended in an SO answer. The algorithms will remain the same regardless of the platform, so that shouldn’t be an issue. If you want a pre-baked solution, I’m afraid you’re out od luck, unless you want to pay about 150€ for something like [this](https://www.rizom-lab.com/) or [this](https://www.instantuv.org/). 
Dam youre hacking with swift? Your tutorials are amazing. Short, concise and to the point.
Okay, you are updating on the main thread\(DispatchQueue.main.async does that\) thats good. One thing I noticed, you call the complete\(\) before you add any Lenders objects from lendersTemp to lenders, could that be a clue? 
I am indeed! I’m glad you like the tutorials :)
it sure as hell was a clue! :D thank you! Seing now as the function call is asynchronus (sp?) the completed method (e.g. the datareload of the tableview) is called BEFORE the actual algorithm had finished populating the lenders array, which is used for the tableviews data. Thank you! :)
They killed Android support when they purchased it
I personally always follow the pattern I previously replied. It allows my code to be more organized, and I always implement a delegate/protocol for my models to communicate with my view, thus creating a Model Controller. If you want to initialize a view, you can do it in your AppDelegate, you would just have to have some sort of notification to tell your view controller to display such view. If you do it in your view controller, it wouldn’t matter either, unless you’re worried about specific memory allocation, which I don’t think would be a big deal since you’re not having a ton of processes running.
Glad I could help. Now onto my own problems :\-\)
I was gonna say they already ruined TestFlight. Thankfully we still have Microsoft's HockeyApp.
Isn’t the time to tap super fast and it doesn’t account for the draw back and forward push of your finger when you’re changing gestures. So a tap could take .1 seconds but a second tap will take .13 just as an example 
I'm amazed the Microsoft has managed to keep HockeyApp functional and growing in a good direction. We started using it years ago for internal distribution before switching to hosted. They really seem committed to multi-platform.
There's not much that's "cross platform" with Windows, but if you're talking about *nix platforms, Swift, WebKit, and LLVM come to mind.
Oh I see you’re saying just comparing the distance between the timestamps could trigger a new command for even the same gesture. Could you register a time stamp of a swipe and a long press though? 
Sure, they all are subclasses of [`UIGestureRecognizer `](https://developer.apple.com/documentation/uikit/uigesturerecognizer) so do [`addGestureRecognizer(_:)`](https://developer.apple.com/documentation/uikit/uiview/1622496-addgesturerecognizer) and get their timestamp when they fire.
My friend is a very good graphic designer, so he gave me a hand there. A few more advanced pieces of arts, I asked for permission from a few public pieces of art.
use the spinny wheel thingy looks like a roladex. "Picker" tool
Definitely check out CloudKit. You can use swift or objective-c APIs from a device, and web services from your website. On the web service side, you can either create raw http requests, or CKJS wraps the http requests with a more convenient API. In CloudKit, there’s the notion of a record (where you should store metadata). Records can have an asset field. Assets are blob data where you could save a file.
What are you using to pass around the sharing URLs?
Bullshit! New animojis!! *How do you like that devs!!*
I'm not excited about visual studio app center though. When they shutdown HockeyApp, I won't be migrating to that
Checkout UISegmentedControl or UIPickerView. For just 2 options the SegmentedControl would be more appropriate.
You can use below library to create calendar in your application. [https://github.com/WenchaoD/FSCalendar](https://github.com/WenchaoD/FSCalendar)
why would anyone use this when you can just use core animation?
Sigh.... the only other wwdc I have gotten into was 2016 — “new bigger emojis!!!” #TooReal
I'm not quite understanding why I'd use this over the built-in SpriteKit animations. They don't seem to be much better than SpriteKit and I have to have a dependance on an external framework.
You'll have to be much more descriptive about what you're asking. Include some code, if you can (no pictures of code, use text please). Saying "access the iphone time &amp; date parts" doesn't tell us much of anything that we can figure out.
That hardware should be fine to start with, just watch out for a playgrounds bug where auto-run can stall the entire playground. When you first open a playground hold down the play button at the bottom left and select manual, then press the play button after you have your code entered. I wouldn't go much older than that, a 2012 is just on this side of good. Anything older you run the chance of it becoming obsolete pretty soon.
I just want to find something to start with, if it lags a bit sometimes is just fine. I just want to get a grasp and see if I can start creating something. If it turns out I actually like it I will probably buy something newer in the future. Thanks! Any tips on guides, instructions or sites to follow besides Overflow?
Well, Apple's official documentation is pretty good although sometimes it can use a bit of an update. Still, learn to read the type and method signatures and there's enough information in them to get most of the way. I haven't really kept up with any particular guide, I'm a long-term C, C++, and Objective-C developer and I've followed Swift from the start so I haven't needed much. I'll just do a web search once in a while if I'm looking for answers, as well as reading stuff here and on StackOverflow.
Hello, Thank you for your response What we think is it is just matter of personal choice what an individual wants to use for a feature. For those who find difficult to use SpriteKit can do animation easily using this framework and we are just showing a way how they can do it.
Please do PM me if you need pointers on getting set up! (He, pointers) I actively develop both C and Swift! Love em both.
Try this [https://stackoverflow.com/a/27495478/796314](https://stackoverflow.com/a/27495478/796314)
Thanks alot! I'm trying to get a hold of the person that wanted to sell me the Macbook Pro this morning. Hopefully this pans out well. :) 
Hey, pencilkiller, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Universal means your application is supported \(run\) for iPad and iPhone both. And only specific to iPhone or iPad means can run your application on only specific iPhone or iPad with minimum target whichever you mention.
1. I'm using a 2011 MacBook Pro and iPhone 6. No problems. I'm using 16gb Ram. 2. Many people have run into trouble with the current butterfly switch keyboards \(keys sticking and breaking and the touch bar seems to be a gimmick\), so you might actually be better off with something older imo. Apple also sell refurbished Macs and I think the 2015 was the last one with a decent keyboard. Another thing to weigh up is Apple obsoletes there hardware. I have a feeling 2010 got axed last year.
So, I've gotten another offer. The first Macbook Pro from 2012 is rougly 350 dollars and now I got an offer for a Macbook Air 13" 2015 for 700 dollars, does it offer anything extra that the older one doesn't?
I’ve been working through the Intro to App Development With Swift book and it’s related playgrounds on a Mid-2012 13in Retina MacBook Pro and it’s been fine for now. If I actually were to get serious and work on larger projects I’d probably want an upgrade, but for learning it’s a decent machine. 
You'll probably find specs for all of them online somewhere. I think the air might have a lower cap on expandable ram. At some point in the last few years Apple started soldering on the Ram so it couldn't be easily swapped out. So I'd pay close attention to that too. You'll probably want the 16gb at some point regardless I'd imagine.
Cheers. To explain further, what I’m wondering is: do I have to switch to Universal to resolve this? And why does Xcode offer an option to select iPhone only if the App store won’t accept it, if you see what I mean?
Universal means the target will run on the iPad and iPhone instead of just one.
Is there no option but to build for universal then? What I don’t understand why you can build for iPhone only but be rejected for not supporting iPad.
**Universal** means that you have added an iPad interface to your app, and that the app detects when it is on an iPad and uses that interface. **iPhone** means you CAN run an iPhone app on an iPad, it just runs in letterbox mode: black bars so the app thinks its running on a iPhone. You can be rejected if your app actively prevents itself from running on an iPad when it otherwise could, if only in letterbox mode.
Isn’t SpriteKit mostly for games? Pop is for you user interface. 
Im using a mid 2012 pro and not hitting any limits other than AR which requires the phone \(iPhone X\). Maybe things run smoother on the phone than on the simulator. But it's minor for the purpose of programming. 
You can mix SpriteKit and your user interface. Not to mention there's other options for animating the UI: [https://www.raywenderlich.com/173544/ios-animation-tutorial-getting-started-3](https://www.raywenderlich.com/173544/ios-animation-tutorial-getting-started-3) I'm not saying that the Pop Framework is a bad thing to use, just that I'd love to see a good breakdown of why you'd use it over the already-existing native solutions.
Just my guess, did you test your app on an iPad Simulator? Do some part of your UI get cropped in an iPhone 4s resolution ratio? (320x480)
Great app I discovered here last year. I really wish Apple would do something official on the Mac, but this app really is great.
Its looks like your application is not working on iPad due to which it got rejected Solution: https://stackoverflow.com/questions/41730125/iphone-only-app-rejected-for-not-running-on-ipad
From my experience, just simply reset the root view controller do the trick. No need to present anything else. appDelegate.window.rootViewController = tabbarCtrl
No, I didn't. I guess I'll try setting it up for iPad thanks.
Thanks I'll give that a go.
i need to get the app to read from a file pre packaged and pick a ip. then parse it to let serverAddress = 
Thanks for the nice reply, could you just check the "this resource" link, it seems to be the same Wikipedia article as the Mash Parametrizaton? :\) 
I found the solution to my issue. I think that when I updated Xcode it caused my Xcode\-select to point to the wrong location. I fixed it the issue by following this [suggestion](https://stackoverflow.com/a/47244249/9768031) on stack overflow
My bad, fixed it
I have the mid 2012 MBP. It'll work with Xcode just fine. We have some iPhone 6es at work, and they work ok too. 
The Air will be lighter and more portable, but it probably won't be as powerful.
That totally works...I thought I had tried that. Thank you so much! I still would like to animate the transition if possible, but that seems to have been the problem. Is there any way I can do a popover transition while also shifting the rootviewcontroller?
So if you google iOS app lifecycle you’ll find a bunch of great posts explaining what gets called where and why. Alternatively, I’ve never done this, but you could always override all the lifecycle methods in your Controller, just call super in them, and then add a breakpoint for each one in Xcode. Run and play around, and you’ll see what gets called where.
https://developer.apple.com/documentation/uikit/uicollectionviewdelegateflowlayout subclass UICollectionViewDelegateFlowLayout, and there's a sizeForItemAt: method that returns a CGSize docs for that method: https://developer.apple.com/documentation/uikit/uicollectionviewdelegateflowlayout/1617708-collectionview
Size for item at does not affect header.
It only affect the cell for item at. Pls reply.
Hey, I'm trying to figure out how to create a chat UI in an existing app of mine. Could you kindly help me get started with MessageKit? I'm not sure I'm doing the setup process correctly, and there is not a single tutorial online.
What's your price range. Depending on the memory/storage specs, the 2010 Mac mini might be ok.
Just a word of caution: if you plan on upgrading the OS, make sure the mac has a flash drive, not a solid-state hard drive. The new filesystem update really kills performance of older macs.
You can use ui view.transition to do animation on uiwindow.
Don’t forget to check the [Apple refurbished site](https://www.apple.com/shop/browse/home/specialdeals/mac/mac_mini) 
I’m using a newer Air for work loving it more than my than my older Pro. Never would have considered an air before because I didn’t think it’d be able to keep up.
I do know someone who would use an Air when out and about for coding. He had a Mac Pro at home, though.
This question has been posted a bunch of times in the last week. Look at the other posts.
FYI, we have machines from 2013 in our office that we use for professional development.
No more than 500$ Canadian. I've seen some 2010 Mac mini's for about 300$ on kijiji. 
Make sure to make sure the computer has 16 GB of RAM and an SSD. Your Mac needs 16 GB of RAM. It can live without an SSD, but it makes a huge difference. Look at old cheese grater Mac Pros from 2010 to 2012 for a better value. You can live with a HD in one of these. Everyone wants a Mac Mini, so they cost more.
Swift is changing rapidly, so you need a Mac that runs High Sierra, since current Xcode requires at least Sierra, and new versions are likely in the next 9 months.
Am I horribly misunderstanding this or are you looking for a label and setting the text property to the ‘progress’?
I’m not quite sure how to explain it. Basically I want a combo box or similar that I can send a new line to on a button click. So if a user clicks a button labeled blue it’ll add ‘blue’ to a list. If they click a button labeled red it’ll add ‘red’ underneath blue in the list. Basically like the ‘print’ function but the output is shown in the app.
There's 2 mac Mini's, both were being used as servers, both from 2010: The first says 120GB SSD for the primary drive and a 500GB HDD for the secondary drive. For 300$ The second says 2.66 GHz intel Core 2 Duo. 8 GB 1067 MHz DDR3. Nvidia Geforce 320M Graphics Processing Unit. 250GB SSD Main Hard Drive. 500GB SATA Second Internal Hard Drive. Gigabit Ethernet, HDMI, Thunderbolt, FireWire 800, 4 X USB 3, SDXC Card Slot. Fresh Install OS X El Capitan MS Office 2016. for 450$ There's also an iMac from 2009 refurbished with MacOS High Sierra 10.13.4 20inch screen, 2ghz core 2 duo processor, 4g of ram, 160gb HDD and NVIDIA GeForce 9400M graphics with 128 MB of memory for 200$ And another iMac from 2011 refurbished with MacOS High Sierra 10.13.2 21.5" Late 2011 3.1GHz Intel Core i3 4GB 1333MHz DDR3 AMD Radeon HD 6750M 256MB for 420$ Not sure which to get... leaning towards the cheaper iMac since it has the newer OS installed and would be enough to get me started, I could always sell it and buy a newer one in the future when I was more confident in my abilities. 
&gt; Mini's Minis. No apostrophe on a plural. The Core 2 Duo processor means it's a no go, no deal, keep looking. You need an i5 or an i7. Look at Mac Pros from that time as I mentioned. They have Xeon multicore processors. 
You are asking about a week early as i expect interesting Things at WWDC. In any event my personal opinions are just that. As such id be real careful about the older Minis. In my opinion unless you get an upgradable quad core Mini you shouldn't bother. You need at least 8 GB of RAM ideally more. You might be able to find an iMac that is a better value. Personally I hate iMac so let's skip those That leaves laptops but finding one to fit your budget and that performs well will be a problem. Again going too old is a problem As for apps realize that producing a profitable App is hit or mis. There are plenty of unsuccessful apps on the store. Oh about WWDC , you will get an idea about were the developer tools are going an a for hardwware requirements tO support XCODE Plus meany of are hoping to see new Macs debut. 
I have a late 2013 15 inch MacBook Pro that is used at work for Swift. It’s pretty good
15.0 inch = 38.1 centimetres ^(I'm a bot. Downvote to 0 to delete this comment.) ^| ^[Info](https://np.reddit.com/user/Bot_Metric/comments/8lt7af/i_am_a_bot/) ^| ^[PM](https://np.reddit.com/message/compose?to=Ttime5) ^| ^[Stats](https://np.reddit.com/message/compose?to=Bot_Metric&amp;subject=stats&amp;message=Send%20this%20message%20to%20get%20some%20stats!) ^| ^[Remove_from_this_subreddit](https://np.reddit.com/message/compose?to=Bot_Metric&amp;subject=Blacklist%20this%20subreddit&amp;message=swift) ^(^Beta) ^| ^[Support_me](https://np.reddit.com/user/Bot_Metric/comments/8lt9lf/donate/) ^|
Great links on animations! I learned quite some from these link, thanks!
You need: 16GB RAM, SSD/Flash and a CPU that is fully supported by High Sierra, meaning it should be 64Bit based. meets most machines after 2013. You should be able to get an older MacBook Pro dating back to 2013 or an iMac for less than 500$. Minis are an option as well but they can be hard to get and can actually be more expensive. 
Stanford itunes course is a good answer to most of your questions
Typo: 50%
You add the value to an array and use that array as the data source of combo box.
Many people have found the book I write for my company to be helpful for exactly the questions you asked. The book is “iOS Programming: The Big Nerd Ranch Guide.” The book builds up your iOS (and Swift) knowledge by working through a few projects from the ground up. Each of these projects/exercises are generally 3-5 chapters. I think you’d find those projects to be very useful. The app lifecycle is covered in the chapter on “Saving and Loading Data.” Hope that helps! Let me know if you have any questions about it. 
Since other tabs views have not been loaded, you should be setting the navigation title in the view controller’s init method. If you are using storyboards, this is `init(coder:)` in Swift and `initWithCoder:` in Objective-C. 
Personally, I learn by having a practical objective and finding means to reach it. My advice would be: Find a simple "problem" or goal that can be solved with a simple App, in like 3-5 screens at most. It can be anything: taking note of monthly expenses, searching github users and showing their repositories, pulling weather data for some city, etc. Then work on the solution in small steps, always asking for each feature you do: * What feature you're building? * What's the minimum you need to make it work? * Where will it be located in the App, which screen? * How will you show it happening in the App? * What UI elements do you need? Then, search for tutorials on the specific things you need to learn to make it work and build them. When you're done with the basics, ask where can you improve your code, how can you make things work independently, what should can you add to improve the project. But always: **Make it work first. Improve later.** 
Personally, I learn by having a practical objective and finding means to reach it. My advice would be: Find a simple "problem" or goal that can be solved with a simple App, in like 3-5 screens at most. It can be anything: taking note of monthly expenses, searching github users and showing their repositories, pulling weather data for some city, etc. Then work on the solution in small steps, always asking for each feature you do: - What feature you're building? - What's the minimum you need to make it work? - Where will it be located in the App, which screen? - How will you show it happening in the App? - What UI elements do you need? Then, search for tutorials on the specific things you need to learn to make it work and build them. When you're done with the basics, ask where can you improve your code, how can you make things work independently, what should can you add to improve the project. But always: **Make it work first. Improve later.**
As said before your going to need 16GB RAM, SSD optional, and an i5/i7 CPU. You you might want to look into buying one without the 16GB of ram and upgrading it yourself. it’s extremely easy on MacBook Pros.
iOS will do this automatically. You will need to provide 1x, 2x, and 3x formats. You can use generators to get these formats or you can provide them by take your image and scaling it manually and saving each version. You can read more about it [here](https://developer.apple.com/ios/human-interface-guidelines/icons-and-images/image-size-and-resolution/)
If you really want to specify images per device resolution then you'd need to go with putting those images into your *.xcassets and specify that rather than using a launch screen storyboard. In storyboards, you're only able to customize the usual layout breakpoints, i.e. horizontally compact and so on.
Have to try that! Thank you very much for the tips!
Wow...i ordered your book month’s ago and still have to start reading it. Never expected to see the author here! Gonna have to post you a review after i finish it 😂 Been busy with the basic Swift course on Treehouse.
“But always: **Make it work first. Improve later.**” I think i should seriously improve this aspect. I spend way too much time trying to solve even the most stupid bug when the app isnt even finished yet. This happens very often and i tend to get bored after a while and in many cases even stop and develop something else... Thank you very much, this may sound like a nobrainer for someone but its almost a “must follow tip” to me.
Hey there, definitely did not expect to ever run into you. Your book and the BNR Swift book \(please extend my thanks to Mathias and Gallagher\) were what took me from some basic ad hoc scripting knowledge in Python / Julia / Bash to landing my first programming gig, which was in native iOS development. Easily I can do the math that shows these two books were the highest returning investment in my life \(much better than my Philosophy degree...\). I even bought both the paperback and kindle versions. Many, many thanks for the effort you put into the BNR iOS book \-\- I would definitely be somewhere else in my life without it. Can I make two suggestions, take them as you will: 1. Focus more on programmatic layout. IB is great, quick, and simple for beginners, but being the person who could do programmatic layout fluently was a huge selling point for many of my interviews. For the record, I practiced programmatic layout by re\-working the examples in your book, and referring back to the one chapter on it frequently \(plus a bunch of stack\). 2. Include a section on coding style, standards. I understand that having a bunch of ui setup code in viewDidLoad is simple for beginners, but by the end they should really be encapsulating that. Maybe these would be better topics for an Advanced iOS book. I would buy that on launch day.
I use a late 2013 maxed out MacBook Pro as a personal computer that I also do my side projects on and it is 90% as good as my late maxed out 2015 MBP work machine. 
Thanks a lot!
So you're saying that I might get a computer just in time for the OS to become obsolete? Maybe I should just learn java and android app programming, since I won't need to buy new hardware, then if one of my apps becomes successful enough on android to justify making an apple version I could buy a mac and learn swift. 
We love hearing stories like this, so thank you! Both of your suggestions are great. Programmatic layout is a bit tricky – storyboards are what we use on our consulting projects, and it’s what Apple recommends and pushes, so we try to emphasize that. But I agree that there could be a better balance between the two. There are some changes in the book that haven’t been published yet that bridge this gap a bit, and I’ll be working on iOS 12 and general book updated after WWDC. I’ll definitely keep this in mind as I’m doing so. We teach at a lot of big companies (one example I can discuss is us teaching quite a few hundred engineers at Facebook when they were moving to native development a number of years ago) and programmatic layout is definitely a recurring theme at those large organizations. Good idea on number 2 as well. We try to sprinkle that info across the book, and I’ll keep an eye at areas where we can add more as I work on this upcoming edition. Once again, thank you for your incredibly kind words. Stories like this make all the effort worth while. 
Awesome! I'll be on the lookout for the new editions. I've started mentoring / teaching a few friends, and your texts are what I push. Definitely keep some IB in there, you are 100% correct in it being Apple's focus (Has been since NextStep iirc? I seem to remember a Next keynote where Jobs demos it). It's also a fairly good solve for the massive viewcontroller problem. There's just a lot of info out there on it already, and it's fairly easy for a beginner to grasp, whereas programmatic layout seems to take longer to stick. As you mention programmatic is also the only way to do layout at these large orgs afaik to avoid merge conflicts, though that's second hand knowledge for me, in a prod environment I've never touched IB / XIBs. Even just having one or two of the last few projects being all programmatic, with solid view / controller separation, would go a long long way on my two points. And to be clear, these are the two concerns I have with most iOS teaching materials -- y'alls books are already 10x better than other similar resources I've seen Again, thanks for all your effort here. It does a lot of good for the world.
I think you have to set the minimum font scale
Make sure your line break mode is set to “word wrap” not character wrap. You can also set number of lines to 1 or whatever you want
Hi Wh0ba! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/8o4w7b/getting_a_string_out_of_an_url/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
It doesn't open with Xcode version 9.2
The short answer is that you can do some work with gesture recognizers and hit testing to see if it's hitting something you want to not have scroll. You'll want to watch some of the advanced scrollview vids from past WWDCs which are really good: [http://asciiwwdc.com/search?q=uiscrollview](http://asciiwwdc.com/search?q=uiscrollview) Specifically, I believe they cover a case like this in this one from 2014: [https://developer.apple.com/videos/play/wwdc2014/235/](https://developer.apple.com/videos/play/wwdc2014/235/)
It is, and I set it to 3. Basically what I have is I Can Respect That as the label. The T in Repect gets placed on the third line with “That”. So the lines are “I Can” “Respec” and “t That”
I’ve tried different font scales and sizes. It never seems to auto scale when I build for different devices. 
You have what set to 3? Setting the break mode to word wrap doesn’t give you an option to set a number. It sounds like you’re talking about number of lines. That’s not the same thing. In IB you’ll have 2 different options. 1 for number of lines, and one for break mode.
Not powerful enough to dev on. Look for a suitable iMac. They’re probably cheaper. 
Thank you, I’ll try and figure out a way like you mentioned. I have already developed a rather idiotic way to enable and disable scrolling by a segmented view, but a solution this legit could be a lot better.
Don’t buy something dinky, you’ll regret that. Swift takes a lot of CPU to compile, specially larger binaries, even on new and powerful computers it’s slow.
Push Notifications won’t work, but local notifications will. I’m working on an app for fun right now and am using notifications to alert users of a certain thing. They work fine for me, but like I said, that’s local notifications.
IOS is really strict on background tasks as far as I'm aware. When the app is moved to foreground, you have a 30 second hard limit (at best, depending on OS settings) to perform background tasks and then the OS just cuts the process. I'm not aware of a way to start background tasks like what you're describing, although perhaps there's a way to listen for something and execute a task next time the app is brought to front, or maybe call the server to make a push notif. Apple has some great docs on what the OS can and can't do, have you taken a look at that?
I’m writing an app for fun which uses UITableViews and CoreData to manage items. So, as far as I can see, yes you’re doing it correctly. As for the saveContext() function, I *think* it’s because you’re setting your patients array to [Patients]\(). You’re not creating a new array, you’re creating an array referencing your patient object in your CoreData database. Therefore, when you modify patients, you’re actually modifying [Patients]\(), or that’s how I understand it anyway. So when you save the context, you’re actually saving the changes you made to [Patients]\() through your patients array? I’m honestly not sure but it make sense to me. There is a possibility I’m super confused and making stuff up as I go, but oh well 🤷🏻‍♂️ ___ Disclaimer: I am new to swift development, and app development in general. While I may or may not have the right answer, I would assume what I say is wrong until someone corrects me or tells me otherwise. 
You can do limited things in the background like fetching data waking up from scheduled notifications• or silent push notifications. Or location. This allows for a bit of abuse for other purposes but you have to keep it within boundaries. • not sure, you should check on that
Is this Swift? I believe textfields have a `.text` property, not a `.stringValue`? Either way... if you're trying to concatenate `oneNickNameTextBox.stringValue` and `oneUsernameTextBox.stringValue` separated with a newline, you can do one of 2 things. ``` test = "\(oneNickNameTextBox.stringValue)\n\(oneUsernameTextBox.stringValue)" ``` or ``` text = [oneNickNameTextBox.stringValue, oneUsernameTextBox.stringValue].joined(separator: "\n") ``` The second is particularly good if you plan on adding more strings to be separated by the "\n".
Um, i'm fairly new to coding but I'm pretty sure it's swift. Maybe Cocoa? I see the AppDelegate.swift and ViewController.swift and i'm in xcode so Im not really sure. But anyways, the first option worked well for me so thank you!
not exactly! These thoughts do apply to Android development also! You can easily buy an old PC that would suck for Android Development. in the case of the Mac Mini you have to watch out for the lack of upgrade ability and raw performance. Raw performance is a personal thing but if you are anything like me the more responsive the system the better. Beyond all of that it is never a good idea to buy Apple hardware a week before a big event as you don't know if hardware updates will happen or not. If they do happen you generally win if you wish to buy new or used as new hardware drives down the price of old hardware (especially if it is one of the better updates). It is a question of shopping smart. As for OS support making hardware obsolete, I'm not sure what Apples current policy is. But it is generally a bad idea on any platform being behind hardware wise. Actually on Windows I believe the situation is worse for Visual Studio users. As for Android There is little money to be made there unless you get lucky with an ad supported piece of software.
Well you can skip any even number and any multiple of a found prime for the beginning.
That's basically what the Sieve of Eratosthenes does, so that's covered. 
A slight optimization which uses the fact that you only need to test up to the square root of any number to find primes. In theory it should speed things up quite a bit, in actuality I only saw about a 10% improvement to 22ms. I also changed the range of the `Array` from 2...max to 0...max and set the first two to false from the start. This allows me to not have to offset the indices by 2 to get the actual value. import Darwin // largest prime to check let max = 2000000 // holds all values from 0...max // true values are prime // non-primes will be marked false later var primes = [Bool](repeating: true, count: max + 1) primes[0] = false primes[1] = false var sum = 0 // calculate the highest prime to test let highest = primes.index(primes.startIndex, offsetBy: Int(Double(max).squareRoot())) // visit every prime up to the highest to test for primeIndex in primes[...highest].indices where primes[primeIndex] == true { // add in the tested primes sum += primeIndex // check to see if there are any // multiples of the prime left in the array // start at the square let maxTest = primeIndex * primeIndex guard maxTest &lt; max else { continue } // visit each multiple and mark it as not prime for index in stride(from: primes.index(primes.startIndex, offsetBy: maxTest), to: primes.endIndex, by: primeIndex) { primes[index] = false } } // add in the rest of the found primes sum += primes[highest...].indices .reduce(0) { $0 + (primes[$1] ? $1 : 0) } print(sum) 
Then I’m guessing it’s either a constraints issue or content hugging priority. Try setting the horizontal resistance to 1000, hugging to 200. Are you using anchor constraints?
What do you mean by "recopile"?
i meant store! sorry hehe
Simplified answer - classes usually encapsulate data and the means with which that data is accessed and changed. The data is private and can only be accessed by the functions provided by the class; this allows the programmer to better control what actions can be performed on the data and what values the data can contain. For more and better information just [search.](https://duckduckgo.com/?q=object-oriented+programming)
Your example isn't exactly object-oriented anyway. All the information that you have on your movies are the name and the release year. Not terribly useful. What if you wanted a bunch of things? class Movie { var name: String var studio: String var releaseYear: Int var boxOfficeGross: Int var director: String var actors: [String] var awards: [String] func download(from: URL) { ... } func rate(stars: Double) { ... } var description: String { return "\(name), released in \(releaseYear)" } } This is still not "great Swift", but it's a better representation. You're welcome to try to put all of these attributes in their own little arrays/dictionaries, but you'll soon have trouble organizing your code. Even if you want to stick to top-level functions, it's way easier to keep related data together. Compare: var movies: [String: Movie] = [...] func print(movieNamed name: String) { print(movies[name]?.description ?? "&lt;missing movie&gt;") } versus: var movieYears: [String: Int] var movieStudios: [String: String] // (4 more dictionaries) func print(movieNamed name: String) { guard let releaseYear = movieYears[name] else { print("&lt;missing movie&gt;") return } guard let studio = movieStudios[name] else { print("&lt;missing movie&gt;") return } print("\(name), released in \(releaseYear) by \(studio)") } The most obvious use case for a class or a struct is to keep related things together. This has several practical benefits that I can call out off the top of my head: * When you need to look up a record, all of the information is in one place already. You don't need to bother to check that every dictionary is consistent, for instance: the movie is either there or not, it can't be in the `movieYears` dictionary but not in the `movieStudios` dictionary. * The language supports niceties that assume that your data is grouped together in objects. I didn't do it here to avoid unneeded complexity, but by declaring `Movie` as `class Movie: CustomStringConvertible`, it becomes possible to pass a `Movie` object directly to `print` or to create a `String` from it. Swift's most powerful features are all about using classes and structs, and you will miss out on literally all of them if you stay away from objects. * When you type `variable.` in the IDE, it can get you a contextual list of everything that you can do with the variable. If you only use free functions, your only context is "everything". This makes it more difficult to discover things about your code... or to remember how to use it. People also figured out a bunch of patterns that use objects to simplify development, but that's not fundamental.
Thanks, that example actually worked for me!!!
What are anchor constraints?
Within the playground it should be clear what the result should be the comments within the playground usually explain what should happen. I love those tutorials btw amazingly helpful to me!
Try ContiguousArray instead of the regular Array.
Xcode 
I use a 2012 Mac bought it refurb still works well enough for development. Granted it has 16gb ram, 256gb space. 
It's pretty straightforward. This part allows inference you have pointed to: `A where A: Managed` Swift's static type analysis will check if your explicit type `Mood` conform to `Managed` protocol, where `Managed` in it's turn has conditional extension if `Self: NSManagedObject`.
Seeing as you have resolved your issue, If you want speed and animations then I suggest using deep diff library. https://github.com/onmyway133/DeepDiff
First you declare an extension for NSManagedObjectContext. This means that any NSManagedObjectContext or a subclass will have this method. In the method itself, after the method's name and before the method's arguments (no arguments in this example) you declare that you're going to be using a generic object A (that's the &lt;A part). You then declare that this object will be a NSManagedObject or a subclass (that's the : NSManagedObject&gt; part). This function will return an object A with the characteristics you declared before (this is the -&gt; A part). Furthermore, this A object will conform to the Managed protocol (this is the where A: Managed). When you use the method you declare that the mood variable will be an instance of Mood, so the compiler knows that the inserObject method should return an instance of Mood. This infers the type of A that the method's implementation uses. If the Mood object is not an NSManagedObject or does not conform to the protocol Managed you would get a compiler error. Also you can't use type inference by typing let mood = context.insertObject() without declaring the type because the type cannot be inferred.
It's a generic method declaration. What sets `A` real type is the part `&lt;A: NSManagedObject&gt;` it says that the borrowed type will be `NSManagedObject` or one of its subclasses. The `A where A: Managed` part say that the method will return an instance of type `A` but only if `A` is of type `Managed` which may be a protocol or a subclass of `NSManagedObject` in this case. We have no knowledge in this code snippet of what `Managed` really is.
I would use google’s glgeocoder it is more accurate than clgeocoder from apple. Granted you are ok with the increase in the size of your app and limit the number of api requests you can make. I use both, if clgeoder fails then I try glgeocoder as a back up to cut on the usage.
Thank fucking god. Now if we can only get the grid back in the storyboard. Gee, this only took what, 8 years?
Any chance the iOS book will be updated for Swift 5 and iOS 12? I have the last version written, for Swift 3 and iOS 10 
Yes. We’re beginning to plan the update this week during WWDC. 
Awesome! Will be an instant buy for me. Same for the Swift book if that’s also updated! 
I believe it is generally considered not good style to have a generic parameter which is only used as a return type. Especially in this case - you would basically always bind the newly-unseres object to a named variable, which will need an explicit type so that inference can work, just like in your example. A better way would be: func insertObject&lt;A: NSManagedObject.Type&gt;(ofType: A.Type) -&gt; A { // ... } let newNote = context.insertObject(ofType: Note.self)
- Quit xcode - run "pod update" - Reopen .xcworkspace It worked for me.
Indeed this version is cleaner to understand, and to use. I’ll try this one :) thanks ! 
I'll give it a try. However, when you're storing value types in `Array` it should back the structure with a contiguous block of memory rather than an `NSArray`. Thus the performance of an `Array&lt;Bool&gt;` should be similar to an `ContiguousArray&lt;Bool&gt;`. [Documentation](https://developer.apple.com/documentation/swift/contiguousarray): &gt;The ContiguousArray type is a specialized array that always stores its elements in a contiguous region of memory. This contrasts with Array, which can store its elements in either a contiguous region of memory or an NSArray instance if its Element type is a class or @objc protocol. &gt; ... &gt; If the array’s Element type is a struct or enumeration, Array and ContiguousArray should have similar efficiency.
So the &lt;A: Type&gt; part is just here to tell « hey there will be a type here that will be A, no matter from where it comes to the function » And the compiler only knows that this function should return something of the type of the variable declared. I think I get it ;) This syntax isn’t very clear, but very cool to use ahah. Thanks !
I'd go further and say that this entire method should be refactored to be an extension on the type `Managed` rather than `NSManagedObjectContext`: extension Managed { static func create(in context: NSManagedObjectContext) -&gt; Self { guard let obj = NSEntityDescription .insertNewObject(forEntityName: Self.entityName, into: context) as? Self else { fatalError("Wrong object type") } return obj } } Use it like: let mood = Mood.create(in: context) This avoids the need to have a parameter which is strictly there to specify the generic type. It's also a bit cleaner and can be overridden in `Managed` subclasses in case you need to add some custom logic for just that class.
Yes, the &lt;A&gt; (event without a type restriction) will inform the compiler that we are using more than one type of object at some place in the implementation. You can restrict the type by requiring it to be of some type of object or its subclasses or require it to conform to some protocol. As /u/kawag mentioned this is not the best way to do this and it's kind of confusing. We generally include an ofType type: A.Type as a parameter in generic methods to make the code more readable. Basically what generics allow you to do is to write one piece of code that can be applied to multiple types. Usually those types will have some common characteristics (e.g have the same parent class or conform to some protocol) but you can also use it with completely different types which you check on runtime. For example you can have something like func foo&lt;A&gt;(ofType type: A.Type) { if type == String.self { print("Foo") } else { print("Bar") } } foo(ofType: String.self) &gt;&gt;Foo foo(ofType: Int.self) &gt;&gt;Bar but usually there are better ways to do something like that.
I would go even further and refactor it entirely. Instead, I'd make the method an extension on `Managed` and avoid the need for specifying the type entirely: extension Managed { static func create(in context: NSManagedObjectContext) -&gt; Self { func createGeneric&lt;T&gt;(in context: NSManagedObjectContext) -&gt; T where T: Managed { guard let obj = NSEntityDescription .insertNewObject(forEntityName: self.entityName, into: context) as? T else { fatalError("Wrong object type") } return obj } return createGeneric(in: context) } } Use it like: let mood = Mood.create(in: context) The trick here is the internal generic function and the outer static function that returns `Self`. When the internal function is called it automatically gets called with `T` as the exact type needed, since that type is always `Self`. No generics are exposed so no need to worry about specifying type.
&gt; NEVER but a Mac Mini NEVER buy a Mac Mini 
 let N = 2000001 var primes = [Bool](repeating: true, count: N) primes[0] = false primes[1] = false for index in stride(from: 4, to: N, by: 2) { primes[index] = false } var sum = 2 for p in 3 ..&lt; N where primes[p] { sum += p guard Int64(p) * Int64(p) &lt; N else { continue } for i in stride(from: p * p, to: N, by: 2 * p) { primes[i] = false } } print (sum) 
Ew obj c?
Just want to say I enjoy this!
OP, can I ask which book you are reading? I've learned a lot of things about Swift, but my CoreData knowledge is pretty much back in the Obj-C days. I've noticed the difference between NSNumber and Swift numbers. Also NSFetchedResultsControllers expect to be generic. 
This one : Core Data: Updated for Swift 4 https://www.amazon.fr/dp/1979724970?ref=yo_pop_ma_swf Very interesting indeed, with a lot of different case covered :) Enjoy ! 
Thanks much
Posting link for [.com](https://www.amazon.com/Core-Data-Updated-Swift-4/dp/1979724970/ref=sr_1_1?ie=UTF8&amp;qid=1528124233&amp;sr=8-1&amp;keywords=Core+Data%3A+Updated+for+Swift+4&amp;dpID=31QLNm1cHdL&amp;preST=_SY291_BO1,204,203,200_QL40_&amp;dpSrc=srch)
I’ve been finding that sometimes Xcode decides to be a turd and just hang and not run the code. Nothing to the console or the side bar. Restarting Xcode will fix this. 
Thanks for the suggestions. I already implemented your first trick: [updated code](https://www.reddit.com/r/swift/comments/8oc03p/project_euler_summation_of_primes/e02crpk/) I also tested out your second optimization and went from approximately 22ms to 21 ms. It's actually the first step in implementing [wheel factorization](https://en.wikipedia.org/wiki/Wheel_factorization), something that I am implementing and testing. Your example uses a wheel for the multiples of 2 but you can add in other prime wheels to speed things up, generally at least 2, 3, and 5.
You should figure out which language you're coding in before asking questions.
Hmm, did you accidentally sent me a wrong link to the code? Because I don't see how it is similar to my first trick. Your code uses "2*p", whereas my code uses "p*p" (p squared).
Your code: guard Int64(p) * Int64(p) &lt; N else { continue } My code: let maxTest = primeIndex * primeIndex guard maxTest &lt; max else { continue } 
Ah, sorry. I was looking to the wrong code (in the thread description instead of in the comments).
I wish there was versioning of the comments, then I could just update the main one and people could look at the history to see the progress. I guess I could have posted the code at something like GitHub for that, oh well. Take a look at my comment above yours, I added some things.
DARK MODE XCODE. FINALLY. ABOUT DAMN TIME.
Hi, I am currently a newbie on iOS development thus I maybe not totally be ready for a real job but I am still interested on practicing what I learned so far. I dont care about the financial part. P.s: I am from Kosovo Thanks in advance.
If the million of recruiter emails I’ve gotten are right, wayfair is hiring a iOS dev as well. 
I really hate it when they tout "People Upgrading Quickly" - like do them a choice? if you don't update you are nagged twice per day. they only way to stop the nagging is to update or use up all the memory in the device so that the update doesn't fit. Apple is dishonest about a lot of things but this one personally pisses me off. 
You could do something like this. var currentExpandedSection: Int? func collapse(section: Int, tableView: UITableView) { var sectionsToReload = Set([section]) if let oldSection = currentExpandedSection { sectionsToReload.insert(oldSection) } currentExpandedSection = section tableView.reloadSections(Array(sectionsToReload), with: .automatic) } func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { if let s = currentExpandedSection, s == section { return 0 } else { return // number of rows } }
Thank you for your help. In the line tableView.reloadSections(Array(sectionsToReload), with: .automatic) It's coming up with the error 'Cannot convert value of type 'Array&lt;Int&gt;' to expected argument type 'IndexSet' ' Am I being stupid? is 11 hours today of programming getting to me?
How is that dishonest? The claim is people upgrade to the latest iOS quickly, which is true. It also makes life far easier for developers when this is the case. 
In what?
is dishonest in the implication that their users do it to be on the latest iOS like tim says in his presentation. 
fallenwarrior beat me to it you can use tableView.reloadSections or tableview.reloadRows\(at:\) the key here is to calculate all the index paths you will need from the datasource and pass them in use numberOfRowsInSection with the delegate to help it recalculate. You will need to call reloadData\(\) at some point too
use your datasource to recalculate all of the indexpaths you are planning on inserting. for instance if you have 5 rows in each section and 3 sections, you want to reload section 2 and close section 1 section one you'd pass in \[IndexPath\(1,0\) ,IndexPath\(1,1\), IndexPath\(1,2\), IndexPath\(1,3\), IndexPath\(1,4\)\]. hope that helps and yeah take a break lol. 
Are you only including 100% remote? My company is looking for mid/sr but we do 1 day/wk onsite around Philadelphia.
Sounds like you’ve never used an Android phone before. I would have loved to be nagged for updates... if we ever got any. 
You could push .gitignore onto github then everyone will have it. 
Go install fast lane for uploading to the App Store and test flight. 
Well I’m no expert on this subject but I feel your pain so I will try to help. The problem is caused by that fact that you’re trying to share a single account which is officially only supposed to be used by a single person on a single machine. I’m guessing that each time one person in your team “fixes” their code signing issues they are also essentially invalidating everyone else’s. This is caused by the signing certificate being tied to a private key which is only stored on the machine that sets up the signing cert. My recommendation is that you spend the time to setup fastlane. Specifically ‘fastlane match’. Fastlane is an awesome set of tools that can do all sorts of cool stuff for an iOS project but most specifically it will help you securely share your certificates and profiles between all the devs in your team using a separate git repository. You are already using git right? I’d like to tell you there is a silver bullet and that you just need to do X. Unfortunately code signing has always been, and will always be, a pain in the ass but tools like fastlane provide just enough lube to make it bearable. God speed. 
Investing some time to understand code signing will save you time and headaches in the future, see https://developer.apple.com/support/code-signing/ (The apple developer website has a ton of guides on similar topics). Sometimes you just need to stop for a moment and really understand the problem at a deeper level. When you’ve done this you’ll have an easier time identifying what your team is doing wrong and how to prevent future problems.
That should have all been gitignored. That's the mistake here. GitHub has a pretty good gitignore template for Xcode: https://github.com/github/gitignore/blob/master/Global/Xcode.gitignore
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [github/gitignore/.../**Xcode.gitignore** (master → 90f149d)](https://github.com/github/gitignore/blob/90f149de451a5433aebd94d02d11b0e28843a1af/Global/Xcode.gitignore) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e04s4tv.)
I have no idea why I need to switch ids, it just seems to work. I imagine by doing this it rebuilds all of the automatic provisioning/code signing that indiscriminate github use is making a mess of. Thanks for the tip, I will look into fast lane.
Thank you for the tips! I guess we were just confused by the language, Xcode asks for a "Team" id, and from what I can tell the bundle id \(and thus version/build\) are attached to this id. Is there another way to synchronize the bundle id / version / build and/or make a "team" of contributors to an Xcode project? I will definitely be looking into fastlane, it seems like a great tool to simplify this moving forward. I worry about the project a few months from now when I move on to other things, I am the only team member with a "computer science" background, but I had literally never used Xcode/Swift before this project started and had some pretty insane deadlines. We have reached some milestones and I am getting a chance to kind of clean up / improve our project management and this is something I really want to hash out. Thanks for the tip, again! I feel bad for even coming to a forum to ask such a question. I feel like Swift/Xcode is kind of difficult to research though. The differences between Swift 3 and Swift 4 for example are just insane, they are like different languages. Trying to find information that applies to the latest versions of Swift and Xcode has been harrowing for a person whose background is in C/C\+\+
Yes! This is definitely going to happen, duh! Is there a kind of standard .gitignore for Swift 4 template floating around that you might recommend?
1000 times this, thank you!
Thanks I'll look into it
I think it would be nice if you can practice your skills on an open source projects. The Jobs I list are from real companies which want to hire iOS devs (mostly full time)
I include both remote and onsite Jobs. Please what's the name of your company so I can include it in the Job Board?
Mmmmm, I wound up dumping it on GitHub. Feel free to take a look, reuse some of it if you find it helpful, and ask questions if it doesn't make sense: [https://github.com/ryanmcgrath/cloudkit-sane-sharing](https://github.com/ryanmcgrath/cloudkit-sane-sharing)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/iosprogramming] [I want to play around with ARkit but without storyboards, is this possible and if so are their any online resources I could read to help me](https://www.reddit.com/r/iOSProgramming/comments/8oo2lp/i_want_to_play_around_with_arkit_but_without/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Just create a SpriteKit or SceneKit based AR project. Check out [CartoonSmart.com](https://CartoonSmart.com) video lessons on both
My Xcode management is a bit rusty, but I think you should be able to share your signing certificate with your colleagues. At least, I have done so when I want to develop from different machines. As seen here: https://help.apple.com/xcode/mac/current/#/dev3a05256b8 Any reason you guys are sharing Apple ids though? You should all be able to be on the same team, and I don’t believe developer program membership is required (you just won’t be able to deploy to the App Store). 
I've updated my answer.
Who cares what the motivation is to upgrade. Clearly it doesn’t exist for Android. 
seconded this is what i did.
Holy moley are you working harder than needed for something simple. XCode signing isn't actually that complex, but it's quite unforgiving (as it should be, it's meant to protect). As others have pointed out fastlane is great stuff. But I feel it's getting ahead of things a bit. I know I'm late in the game but let me ask a few questions: 1. What do you use as source control and does it provide pull requests? 2. If you are using something like github, can you set it up so you have to approve all PRs? Your current system is just frustrating you, and always stop issues asap. This way you can make others fix their mistakes themselves. 3 .gitignore, as suggested, grab the standard github one for iOS.:) 4. Make sure to remove the files gitignore would ignore before checking it in. If they are already there they stay in the repo. If any of this sounds weird, please message me and I'll help. This will fuck you up if it gets wrong. Git is great, but it's also very poweruser. 5. Do not share the wrong XCode settings, some should stay private. Gitignore to the rescue! 6. If you aren't publishing this, letting XCode handle the signing 100%. Why do it the hard way? 7. Do everyone have their own Apple developer account? If not, everyone must. You be the agent and you can give everyone the right access. You will have the main keys etc. These will be needed for CI and publishing and such. 8. Very seriously consider CI and pushing to TestFlight and have the app installed on real devices from there. Are you wasting your time loading the app on others devices? 9. You need to know what files can and can not be merged. Cowboy coding with iOS you will shoot yourself in the foot with a tactical nuke. Do you and your team know? If not, message me:) I think that's it. A lot of this is second nature to me and I've developed habits over the years to be both productive and avoid issues:) Been a professional full time mobile developer since '99:) Let the know if there's something else. And remember, if it seems impossibly hard, you are probably going in the wrong direction.
first of all /r/spritekit the child node position is relative to the parent node's position, so it will maintain the position offset when you set the parent node's position. if you want to move them separately, you have to set their position, not the parent node's.
It's a dev conference, the implication is not that the users did choose to update but that, as a dev, you can target the latest update and use the newest API because everyone is already here.
You can use [gitignore.io](https://www.gitignore.io) to generate any `.gitignore` you might need.
They are still using storyboards in this tutorial are they not? I want to delete main.storyboard and fiddle with Arkit without it 
They also talked about new features to Stocks. Slow day for WWDC. 
What does that have to do with Swift?
So the shuffle array would shuffle a deck of cards? The random CGPoint could be good for some games.
I have years of Unix scripting experience. Most of the Swift information I have found explains how to code in Swift. My challenge is how to use Xcode to sew code and resources together into an app. I found the source code for a simple iOS app on Github. I downloaded the repository and started poking around. It's been an excellent learning method. It's nice to see how someone else has built their app. Thank you Louis D'hauwe for sharing your work! Textor iOS App: [https://itunes.apple.com/ca/app/textor/id1330406995?mt=8](https://itunes.apple.com/ca/app/textor/id1330406995?mt=8) Louis' Github Repository: [https://github.com/louisdh/textor](https://github.com/louisdh/textor) Louis' Website: [https://silverfox.be](https://silverfox.be) Good luck.
I sure hope so, because that's exactly what I'm doing. Here's why: 1. I think Apple platforms will continue to do very well over the next 5\-10 years. 2. Swift presents a fresh opportunity for beginners. It seems to be maturing as a solid language. It's not so new as to be in constant flux, but it's new enough to likely have a long life ahead of it. 3. While alternatives to Swift, like React Native or Ionic, are compelling for some use cases \- I believe current and future Apple platforms will present plenty of opportunity for native Swift development \(watchOS, iOS, and possibly future AR hardware\). Whether you want to build your own projects OR simply want a career as a programmer, I think it's a great time to dive in.
I fully intend to learn Apple platforms no matter what, My worries stem from the timing. I don't want to invest time and effort into learning the current way to design an iOS/MacOS app if that process changes in the future once the shared API is implemented in 2019. But from the looks of it, part of the iOS API is coming to Mac, so nothing at all should change on the iOS side \(I think? I'm not familiar with Apple's dev stuff\)
Github was just bought by Microsoft, so it will get worse for all none Microsoft clients. Might want to look at moving.
Do it the same way you would any Storyboard-less project. Initialize your VC in AppDelegate, make it the rootVC, make it key and visible. Done. Don't trick yourself into thinking an ARSCNView is anything more than a UIView subclass. Present the view like any other view. I can give you a more specific implementation if you want it.
My guess is that it will be buggy as early betas always are. You won’t be able to ship apps using it. Swift 4.2 beta methods are subject to renaming at any time with new Xcode versions. You can start using it but I wouldn’t rely on it heavily. 
Oh, I didn’t realize what sub this was. My b
For tutorials? I don't see much disadvantage, but I also don't see much advantage right now. Is there a feature in Xcode you *just* follow the instructions, such as "Press the third icon to open the Object Library." It's okay if that's the case, there's a *LOT* to learn. But if so, changes to the interface may not fit with what your tutorial told you to do. If you have the time to look for the command to open the Object library window (instead of pane), you'll be fine. But you'll also be distracted from what the tutorial was trying to teach you. On the other hand, the tutorial won't mention features that were not in the prior versions of Xcode (like comment folding, or multi-line editing) so you may actually be told to edit something in a way that hides the new features from you. I know there's a desire to play with the new release of Xcode, but I'd say do that after you get done with the tutorials completely. If you don't quite make it, maybe the tutorials will be updated with Xcode 10 instructions later. It's not impossible, but I'd recommend against anything but just "toying" with the new interface for now.
You start at the beginning. 
Apple has an Intro to Programming With Swift that explains the basic programming concepts and builds as you work through it. I’ve been working through it even though I have decent scripting experience in PowerShell and a little Python just to make sure I’m solid and I think even if you knew nothing about coding at all, you could learn from this. 
Absolutely not. Use the release version of Xcode, it's tough enough learning new things without having to battle the tools. There's not likely to be huge differences between Xcode 9 and 10 anyways, certainly nothing that will take a lot of effort to learn when Xcode 10 is fully released.
Yes
FYI, you can not release apps to the store that are made with *any* tool in the dev chain that is made with a beta tool. No one tells you this until you try. Now you know. 
....k.... I’ll switch when/if Microsoft decides to implode Github with poor decision making rather then just ensure it’s continued support for migrating back and forth between vs
I’m all for them taking a year off adding new features and fixing bugs and working on code quality. 
I can certainly relate to the concern around timing and possibly re\-learning due to future changes. The advice I've received, and am seeing come true in a variety of ways, is that it's always better to start and adapt than to postpone starting. But perhaps more to your point, I do believe now is one of the very best times to start. Swift is becoming more mature and, judging from what I've seen over the last six months and from the first few WWDC sessions, the development processes and mental models are quite mature as well. Most of the changes from generation to generation, both for Swift and Xcode, seem to involve just simplifying things rather than changing things very dramatically. In other words, instead of learning one way and then later having to learn a completely different approach \- many changes involve just shortening or simplifying the existing steps. So if you focus on learning Swift and iOS development now, chances are you'll either have learned, or be that much closer to learning, what you need to know in preparation for the changes coming to macOS development next year. So you'll be able to take advantage of them right away. TL;DR \- Yes, start learning Swift/iOS today to be ready for macOS development next year.
Yep and pretty easily especially with [CaseIterable](https://developer.apple.com/documentation/swift/caseiterable): enum Suit : String, CaseIterable { case clubs, hearts, diamonds, spades } enum Rank : String, CaseIterable { case two, three, four, five, six, seven, eight, nine, ten, jack, queen, king, ace } struct PlayingCard : CustomStringConvertible { let suit: Suit let rank: Rank public static let all: [PlayingCard] = { // create a playing card for each suit and rank return Suit.allCases.flatMap{ (suit) -&gt; [PlayingCard] in return Rank.allCases.map({ (rank) -&gt; PlayingCard in return PlayingCard(suit: suit, rank: rank) }) } }() } let shuffled = PlayingCard.all.shuffled() There isn’t CGPoint.random in Swift 4.2 however there is one in RandomKit. To make one in Swift 4.2, would be fairly easy: extension CGPoint { static func randomIn(xRange: Range&lt;CGFloat&gt;, yRange: Range&lt;CGFloat&gt;) -&gt; CGPoint { return CGPoint(x: CGFloat.random(in: xRange), y: CGFloat.random(in: yRange)) } static func randomIn(xRange: ClosedRange&lt;CGFloat&gt;, yRange: ClosedRange&lt;CGFloat&gt;) -&gt; CGPoint { return CGPoint(x: CGFloat.random(in: xRange), y: CGFloat.random(in: yRange)) } } If you really want to get fancy, you could create a static func to take in a CGRect rather than a Range.
Good to know. Thanks
Makes sense. There are a few little tools/benefits I'd love to take advantage now, but they are far from life changing... so I'll hold off. Thanks
Ahh, thank you for the reply.
Thanks
RemindMe! 2 hours
I will be messaging you on [**2018-06-05 21:44:38 UTC**](http://www.wolframalpha.com/input/?i=2018-06-05 21:44:38 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/swift/comments/8otop5/swift_42_release/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/swift/comments/8otop5/swift_42_release/]%0A%0ARemindMe! 2 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
It definitely won’t be included in an Xcode 9.x release, but you could install the tool chain once Swift 4.2 has been stabilised: https://swift.org/download/#snapshots
From the same perspective, is it possible to explicit a little more the Generic type when using a Class or Struct with Generic? When I do this for example : class SomeClass&lt;A: SomeProtocol&gt;: NSObject { } //Used like this : let myInstance&lt;typeCompliantToSomeProtocol&gt; = SomeClass() Is it possible to explicit an initializer ? Like this for example : let myInstance = SomeClass(of type: typeCompliantTosomProtocol) 
Why not create an app of your own? You surely have a hobby or an area of interest outside of programming. It probably involves some repeating tasks that could be made easier by an app. Build that app and upload it to the App Store. The last step will teach you a ton of things that you just don't learn if you stop just before publishing. 
Have a look at the [Swift Language Youtube channel](https://www.youtube.com/user/TheSwiftLanguage) with 400+ video tutorials and courses on Swift.
There are literally hundreds of books and thousands of tutorials out there for total beginners. All it takes is a Google “iOS programming for beginners” and viola! Result #2 (for me, anyway) is a complete guide that’s free. I’m not going hand hold you through this because learning to use search tools and pick relevant results is the first, most important thing you should learn ... you’ll be doing more of that than actual programming, at least at the beginning, so get used to it now.
That is exactly the reason I ask here I wanted to know community's consensus on the best source or method of learning Going through hundreds of courses to try and understand which one offers fullest and most useful knowledge is very time consuming
Best is subjective. Different people learn better using different resources. You don’t need to go through every course, and you don’t need the “fullest knowledge”, especially as a beginner. Just pick one and get started.
IMHO two of the best resources for beginners and experiences devs are [bignerdranch.com](https://bignerdranch.com) and [raywenderlich.com](https://raywenderlich.com). Both have books geared toward the beginner that should help you. [https://www.bignerdranch.com/books/swift\-programming/](https://www.bignerdranch.com/books/swift-programming/) [https://store.raywenderlich.com/products/swift\-apprentice](https://store.raywenderlich.com/products/swift-apprentice)
Alright, I just made a simple [ARViewController](https://gist.github.com/moyerr/8cd4c70ef5f88d5072cfa2f0a7f0390b) you can start with! Don't forget to add a camera usage description to your info.plist
iOS has been in a state of flux since day one and that is a good thing. But, as a dev, it means that you need to be adaptive and expect constant iteration. So go ahead and learn what is available now, but know that it may and likely will change next year. That is the state of anything in this industry. When it stops changing it is probably dead and time to leave for something new. And, if I were you, I would go with iOS first and wait to see what happens with macOS next year.
You could adjust the frame of the image view that’s holding the image, or create a new image view with the desired frame you want, and add it to the main view.
they're guides are misleading, outdated, and terrible IMHO.
I'm currently learning iOS programming following Udemy 
In terms of online guides, yeah they're not great. The API documentation is often good, but it kind of assumes you already mostly know what you're doing anyway, which is annoying. In terms of books - "Cocoa Programming for OS X: The Big Nerd Ranch Guide" is a good introduction to Cocoa programming specifically. The 5th edition is all Swift, and has a sizeable "getting to know Swift" section. It does not assume any Objective-C experience. Some of the syntax is probably a little out of date by now, with Swift updating every 6 months or something. But Xcode is good at picking up old syntax and telling you (e.g.) "hey this method doesn't exist anymore, it's now called this." If you want to dive deeper into Swift itself, I can't recommend any books because I haven't read any of them, but some of Apple's Swift-specific WWDC videos are good. Again they sort of assume a minimum level of knowledge though.
I wrote a whole book on how to build apps for macOS using Swift. It's all updated for High Sierra (and soon Mojave), and all written for Swift 4.1 (soon 4.2). Even better, it's on half-price sale right during this WWDC week, and comes with free Swift updates for life: https://www.hackingwithswift.com/offers/wwdc18-50 
Check out Reddit’s API
Definitely not. It won't be anywhere near stable enough.
Mods, is there a reason my link is shadow banned?
What are you confused about? That’s a function call inside a function call. 
A [`Bundle`](https://developer.apple.com/documentation/foundation/bundle) is a group of resources for an application. Calling a type like `Bundle(...)` means that you are calling an `init` method: a method that creates and initializes an instance of that type. In this case you are calling [init(for:)`](https://developer.apple.com/documentation/foundation/bundle/1417717-init), which gives you the `Bundle` object that contains the specified `class`. The function [`type(of:)`](https://developer.apple.com/documentation/swift/2885064-type) returns the `class` type for a given instance of a `class. The specifier `self` refers to the current type that the code is running inside of. If the code is part of the `String` type then the type returned would be `String.Type`. When you use `let bundle = ` that assigns whatever comes after the `=` to the variable `bundle` as a constant. So you're finding the `Bundle` that contains the class of `self` and assigning it to a constant variable.
Definitely post some code so we can see how you're doing this. Please post it as text and not as images.
Wow, this looks good. If I were to buy and go through beginning to end, could I expect to be pretty familiar with iOS app development? 
Normally code uses Bundle.main, but if the code is going into a framework you use the other syntax to load resources. See https://useyourloaf.com/blog/loading-resources-from-a-framework/
Thank you 😊 
This is perfect. Exactly what I was looking for. 
First things to check, set a breakpoint in the completion block of the request on your view controller. If you are using a delegate to populate the data with a func you can make sure it’s a) assigned in the view controller, and b) that is it being called. Where ever this data is coming back make sure you are doing two things: 1) update the content, 2) calling your tableciew.reloadData() on the main que. if you still have trouble message me and I can try and help you when I’m not working.
No; it's not an iOS book. If you read it from beginning to end you could expect to be pretty familiar with macOS development.
Great to know! I always open the book and read a few chapters and put it away due to life issues. I think it's time I stop making excuses and just put my head down and learn.
This looks great, exactly what I’m looking for. Very impressed with the lifetime swift updates. Just bought the “PowerPack” It seems like there’s so much for iOS out their and so little for Mac so this has made my day b
I just created a course for those with an iOS background. Not sure you do but if so, here's a coupon for 5 people to get it for free https://www.udemy.com/macos-for-ios-developers-high-sierra-swift-xcode/?couponCode=REDDITAB492
I tested it in Objective-C last year and it was a disaster for more than 4 devices within one group. This is with Apple's own sample code. I'm talking random disconnects, ghost device sessions, it was a disaster. Testing was conducted using 8 iPads using Apple's multipeer sample code. This SDK (and source) clearly was never tested under its targeted supported amount of devices. It was unusable.
Hi Paul, thanks for your reply. I actually already bought Hacking with Swift, got half way through and realized I really wanted to learn to develop for MacOS, so then bought Hacking With MacOS too. I'm about half way through now and it's awesome \- thanks very much! Really appreciate the constant updates too \- much appreciated as things can change so quickly!
Thanks for your reply. I'm actually working through Cocoa Programming for OS X too \- although it's slightly out of date, between that and Hacking with MacOS I feel like I'm learning a lot of the core concepts. Great suggestion \- thanks. I'll check out the WWDC videos too!
Awesome thanks \- I know a little iOS too so I'll check it out! Much appreciated
That's a shame \- I was hoping someone would point out a link to a whole new world of Swift guidelines! Thanks for your reply, I'll check those resources out.
And his iOS book is free!
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/iosprogramming] [How do you separate your models from your view controllers?](https://www.reddit.com/r/iOSProgramming/comments/8oyl7h/how_do_you_separate_your_models_from_your_view/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I tend to stick with the known good version of things. I'm on 9.2, not the latest, but I haven't had much problem with it. Don't forget to make sure your tutorials and answers are good for Swift 4. There's a lot of Swift 2\~3 answers and tutorials out there and there's little reason, at this point to bother with anything \&lt; Swift 4.
Apple has been known for NOT making upgrades easy as pie. I skipped from Swift 2 to Swift 4 because of all the changes. TBH, it's a real pain to go back and rework a program just because a newer version of the language came out. I jumped back in at Swift 4 because it looked like it had changed quite a bit and would slow down. Apple does get some flack when it upgrades things and causes a lot of re\-writes, so I don't think there's be as much as before.
There is a runtime cost to safely unwrapping optionals. If you’re absolutely sure, you can force unwrap, but be careful with force unwrapping values received from system APIs - those could fail unexpectedly.
In your example you have a slight misunderstanding of how to use a class with generic. When you use a generic in a class what it means is that in the implementation of the class you can treat A as any other normal type. A will have the characteristics that you conform it to (ex conforms to SomeProtocol). When you initialize the class you inform the compiler that in this instance the A will be of type X (ex Int). So this line let myInstance&lt;typeCompliantToSomeProtocol&gt; = SomeClass() doesn't make sense. Instead you would say let myInstance = SomeClass&lt;typeCompliantToSomeProtocol&gt;() Then, in the implementation of the class, every time you used A as a type in would by typeCompliantToSomeProtocol. You can see this in this example class Foo&lt;A: Comparable&gt;: NSObject { func bar(a: A, b: A) -&gt; A { return max(a, b) } } let f = Foo&lt;Int&gt;() f.bar(a: 1, b: 2) // returns 2 let b = Foo&lt;Double&gt;() b.bar(a: 6.2, b: 7.9) // returns 7.9 The most common struct with generic type we use all the time is Array, we just don't see the syntax because of the shortened form. When you type ```let foo = [1, 2]``` you actually saying ```let foo = Array&lt;Int&gt;(arrayLiteral: 1, 2)``` and then, any methods on foo know that the generic type is Int. For example foo.first returns an (optional) Int. You can see how you would go about implementing something like this bellow struct MyArray&lt;T: Hashable&gt; { init(myArrayLiteral: T...) { // do stuff } var first: T? { // do stuff return nil } } let b = MyArray&lt;Int&gt;(myArrayLiteral: 1, 2, 3) let c = b.first // c is optional Int Note that init(arrayLiteral:) is actually the method you need to implement in order to conform to the ExpressibleByArrayLiteral protocol which is what makes Array be initialized with the short form []
Thanks twostraws I've bought almost everything you've put out (save for a few)!
If you are completely sure that the value will be set before use you can either initialize them with `var num = 0` or use `Int!` as type. His argument that he knows that the variable will be set at the point of usage might be valid for the code right now, but it might be changed and crash in the future.
I bought your books, Paul, and I have to say they're about the best guide to getting things rolling out there. Very comprehensive with lots of free updates and other information. I heartily recommend your books to anyone interested in getting into Swift or other languages that you write about.
Aww missed it. Oh well, thanks for sharing it in any case.
I'd expect the standard iOS stuff, Swift, Xcode and then APIs. So things like lifecycle, data types (reference, value) Version control, debugging,... Swift, optionals, protocols, model (MVC, MVVM, ...) APIs: core data, networking, ... There's a lot of sample questions. Strings in swift seems to be a more complex one. I really wonder why someone hasn't made an 'iOS job quiz' app for this. They might ask for code challenge, so know the strings, arrays, things like that.
I'm quite familiar and comfortable with most of those except Core data, still can't get my head around this for some reason. 
Check out ```NSFetchedResultsController``` for an example. For example sorting can be changed by modfying ```fetchedResultsController.fetchRequest.sortDescriptors```. Even if you don't use CoreData you can use similiar approach.
It's a very low cost and you really should not worry about it unless you're doing extremely high-performance code. Write your code first, profile it, find the trouble spots, then optimize them. Don't avoid safely unwrapping `Optional` unless you absolutely have to.
Oh yeah, absolutely. Just answering OP’s question, they might not have been aware there is a runtime cost at all. It is much like ARC though, its performance impact should be ignored for the most part, until it actually becomes a problem. 
Optionals are slower. Other people start using your code and don’t understand the rituals required to not crash your code. There are usually ways around dealing with optionals in code unless you deal with legacy stuff like some libraries or parts of the UI (storyboards for example). You just need to stop writing Java in Swift.
You safely unwrap `Optional` because it's safe. Don't assume that you know for certain that a value is set properly, what if someone else comes along and modifies the code without knowing it's properly set at that point? Forcing the `Optional` leads to bugs, that's one of the main reasons we have it in the first place - to avoid using data that's unset. There are a very few good instances to force-unwrap or to use a force-unwrapped `Optional`. One is during instantiation of an object, you can be pretty sure the object won't be used before it's initialized so you can use a force-unwrapped `Optional` as a placeholder so long as by the end of initialization the variable is set properly. Checking if a variable is `nil` is not a bad thing, sometimes all you care about is if the variable is valid or not. But it usually leads to actually using the variable, in that case you don't incur much cost to actually unwrap the variable vs checking for `nil`.
Exactly, use the tools that make life easier and when you need to go off the rails for performance reasons then do it.
I agree that avoiding nil is a good thing. I use the very nice [Result](https://github.com/antitypical/Result) and [Bright Futures](https://github.com/Thomvis/BrightFutures/) frameworks. Using Result means you can avoid both nil and throwing exceptions.
You're really going to have to back up some of these statements with examples. Rituals? The only "ritual" should be don't assume something is set when it might not be set, that goes for accessing an `Array` without checking the bounds as well as using an `Optional` without safely unwrapping it. Writing Java in Swift? Show us what you mean and why it's a bad practice.
Along with iOS specific stuff, don’t forget some CS fundamentals like Singletons/Nested Loops/ generics &amp; one example of a question was from my Internship interview I was asked about Time Complexity (Big O Notation) &amp; A very easy data complexity question over a for loop
If you know about the exact company that you are applying to, you can look at what they use. I applied a while back and was given a challenge of making a connect 4 game from ground zero. I've done maybe 4 games in my life and I've been a programmer for many years. You never know what they are going to ask, but in the case of the connect 4 game, I knew how to work with arrays, strings, etc... very well. I had two hours to get it done, and I made it. It was ObjC and used arrays for the game board and the selection, then just make a turn based system to loop around that. Core Data can be considered important as it seems pretty common. Here's my take: if you're in a tech hub like Silicon Valley, NY, Seattle, etc... and you're applying to a company that produces an external app, you should expect they are looking for someone that can really prove they are worth the investment. If you are looking at a non\-tech hub job for an internal app (mobile enterprise app for their employees) you can expect things to be more relaxed. This is just my opinion, and it's based on the end product going out to compete in the open market vs being used by sales staff inside of a company. The list of stuff just goes on and on, auto layout, instruments, connecting to a data server, unit testing, UI test automation. One guy was given the "write a reddit front end" as a test. We exchanged code. He wrote an iOS app that connected to Reddit and listed the messages in a browser with nesting. IIRC, it had to account for everything like NSFW and other flags. This was the test of his knowledge and I think it was a several hour or 1 day test. I've tossed around the idea of making an app for all this because there's just so much to cover. Things like: Q. how do you mark a function that modifies something in a struct? Why is it marked this way? There's just so many things they can get into.
Nice idea there. I would maybe give it a go making an app. If you have more ideas. PM me. 
I will look into time complexity. I last done that in 2 years ago in my uni second year 
&gt; Rituals? The only "ritual" should be don't assume something is set when it might not be set, that goes for unsafely using an Array without checking the bounds as well as using an Optional without safely unwrapping it. The example is too trivial but indeed could be done better let foo = Foo() foo.num = 1 // This is a ritual. You should know about it or read the class to understand you have to do it. foo.addOne() Better: let foo = Foo(1) // And num is a let value always set through init foo.addOne() Other example, very common: override func prepareForSegue(segue: UIStoryboardSegue!, sender: AnyObject!) { if let someVC = sender.viewController as? SomeVC { someVC.requiredValue = somethingInThisVC } } Then: func something() { textField.text = requiredValue!.name // Will kill your app if you forget it } Instead you can opt for: * All code VC's and V's that simply can't exist without requiredValue * .XIBs with an init that helps you set the requiredValue immediately * A helper class that guides this process instead of repeating the logic from every screen that segues into this one If you have any examples where you can't evade using optionals that are not optional at all I can give more practical solutions. But if you keep the V and VC layers as lean as possible especially from state and logic you are usually able do everything without optionals except for things that are really optional.
Man all this would be a nightmare. I’m hoping for a more relaxed Swift and iOS technical questions. The company is a finance one. Their app enables users send money to other countries. It looks fairly simple as I use it often aswell. I could basically list all the things they used to build their UI. So maybe I would call it an enterprise app. I haven’t gotten it testing and intruments yet so that would be a total bummer. 
Well if he does why is it returning an optional? He is applying knowledge of something that is outside of reach for the code at that point. There you only know that it is unsure if a value is set. If at some point of time you want to make clear that a certain value is set then don’t make the caller return an optional. 
Ahh, then we are in agreement. The method `addOne()`, by not properly checking the `Optional`, can lead to crashes if you don't understand the "ritual". Got ya, I wasn't sure what you meant without the examples.
Why not just make sure your data model is a `class` (for reference semantics) and inject it into your view controllers? For TableViews, specifically, I would do something like the following (I create my views programmatically, but for storyboards/XIB you can just have my `DataAccess` protocol use `{ get set }` and inject it that way): protocol DataAccess { var data: DataModel { get } } final class FooTableView: UITableView { private var viewModel: FooTableViewModel! init(_ data: DataModel) { super.init(frame: .zero, style: .plain) self.viewModel = FooTableViewModel(data) self.dataSource = self.viewModel self.delegate = self.viewModel self.register([...]) self.rowHeight = [...] // if you have cells of all same height } [...] } extension FooTableView: DataAccess { var data = { viewModel.data } } final class FooTableViewModel: NSObject { // required for UITableViewDataSource private let filteredData: FilterProxy var data = { filteredData.raw } init(_ data: DataModel) { filteredData = FilterProxy(data) } } extension FooTableViewModel: UITableViewDataSource { [...] } extension FooTableViewModel: UITableViewDelegate { [...] } Here you give the data to the view when it's created, its "view model" can modify the data as needed, and you can even get it back out if you need it. Plus it's nice and testable with the View staying away from the logic.
If their app is on the app store and competes with others, the UI/UX is more of an issue. Mobile enterprise is more for apps that are used inside of a company. Think of a sales staff that uses an iOS app to find inventory and record sales at Target or Fry's. The end users are employees and so they don't have to make it look awesome, it just has to work. Smaller companies tend to focus on what they actually use rather than on generic tests. If they don't use Core Data, then they probably won't even ask about it. What city is this in and is it a tech hub?
It’s in London, I’m also from London aswell. The UI/UX is actually very good I must say. They have testing as part of the requirements but I just applied anyway since it was junior. My first call was with their internal recruiter like 3 weeks ago. She asked me about testing and told her I hadn’t done any yet, so this is a call from probably the hiring manager and other developers. 
Are you good with Autolayout? I just watched a few videos on Autolayout and learned a few tricks. Do you know how to get the app to display different colors based on the layout size? One of the tutorials had this neat trick where they could id the size based on colors so you just look at the color and see what it's being read as. That made it easier to have one UI for all the different devices. I forget the name off hand, but it's like you can include or exclude sizes for a given layout, then you go back and make the UI for the next layout. Kinda like having subsets of layouts. Kinda hard to explain, but looked like a great way to make an app work across different devices. I'll poke around and see if I can find it. I'm not the best with autolayout, so I've been pushing myself. You have a few days, I'll see if I can come up with a few things between now and then, it'll be good for me as well.
Thanks man. I must say I’m quite good and very comfortable with Autolayout but only use it im storyboards. Haven’t learned programmatic view yet. Just started seeing the storyboard problems with so many merge conflicts when working with other people. But I fairly good with Autolayout. Cheers
You don't use conditional binding or safe unwrapping because of aesthetics, you use it to prevent crashes caused by handling variables with an invalid state. 
I remember hating optionals and thinking the whole concept was stupid and now I love them and utilize them. It was sudden. Like a switch flipped in my brain. I rarely, if ever, force unwrap. If a variable can be safety force unwrapped then I likely didn't make it an optional to start with. I don't just arbitrarily make everything an optional. 
Make sure to set the table view datasource and call the `reloadData` on the table after populating the array. 
Thank you for your support – I'm glad they are so useful! 
Thank you! :)
It's not returning an optional, it's returning a non-optional but computing that value using an optional field, which it just assumes is set by that point.
funny how everyone came in and downvoted this post. I did list some useful resources there and I completely disagree with another poster's opinion on the API docs. They are not good compared to other languages, flat out. It could be because swift is in it's infancy. Either way, trying to save you the headache of dissecting the 7 year old obj\-c examples from apple only to find out they don't work as expected. [https://swift.org](https://swift.org) is useful and *does* define guidelines (This is Apple's swift book). Also, if you are inside of xcode and alt\-click on a line of code from the swift base, it will take you inside of the swift the sources where you can view some comments and get a better sense of the functionality your are looking for. One thing I worth mentioning is github. You can find out a ton of good information by just looking at other people's swift code inside libraries, gists, and projects.
If you’re willing to spend a little, buy pro Swift from Paul Hudson it’s on sale now. It teaches advanced Swift concepts. 
I bought it. Will go through it. Thanks 
IDK if this helps or not, but optionals are a type. I saw a tutorial video this and they are simply a type like a struct that eval the data and force a crash. The good looking part shouldn't even be much of an issue at all, it should be about knowing when data will be filled vs nil and how to handle it.
learn what ARC is and how it'd different than MRR
I know and understand ARC but no idea about MRR 
know the difference and how to use such functions as map, filter, reduce, flatmap, compactmap
Completely.
Not entirely. The higher level concepts and syntax are somewhat similar. You just have to get used to the C++ way of doing things. Learn pointers, and some of the most common features of C++ and you’re set. Don’t stress about using every feature available. Just use a subset that fits your needs and go with that.
I bought the video bundle. It really depends on your preferred method of learning. I do enjoy the videos...have only had time to watch a few of them so far. But very nice to have the dialogue.
Fuck man I’m transferring 
C\+\+ is a lot more complicated in regards to the use of pointers. Swift is fairly high level and the syntax is forgiving. C\+\+ is more strict on syntax and requires a little more finesse when solving problems.
Does that mean you have 4 years to "learn" C++? Or you have to use C++ for 4 years? After doing this for some time now, I've come to realize that you'll only be as "fucked" as you are lazy. C++ has more resources online than just about any other language, so if you need to learn it, hit up the Google box. I'd recommend [cpluscplus.com](http://www.cplusplus.com/) As for answering your actual question, they are quite similar, but look very different. For example, in Swift you could write: &gt; var my_dict : [String : String] = ["key1": "val1", "key2": "val2"] But in C++, the same thing would be: &gt; map&lt;string, string&gt; my_dict = {{"key1", "val1"}, {"key2", "val2"}}; You should also get very comfortable with pass-by-reference vs. pass-by-value in C++. 
Can you tell me what the app architecture book is good for?
Not.
I’ve been doing swift on my own for three years and I’m going to college and they want me to do c++ 
Swift is actually becoming more and more like C++ in every release. The generics are similar concepts. The lack of dynamic dispatch is similar to C++, although Swift supports Obj-C objects with dynamic dispatch too. Having said that, the syntax is completely different - C++ is far worse. In C++ you can shoot yourself 100 different ways without realizing it - read "Effective C++" by Scott Meyers after reading whatever C++ textbook you're using. C++'s standard library is good for algorithms, but really bad for strings (no unicode!), networking requests, serializing data structures, threads, etc. C++ is a superset of C, so there's all sorts of fun and dangerous low-level stuff you can do. C++ doesn't have a simple memory management system like reference counting (Obj-C &amp; Swift) or garbage collection (Java). Having said all that, C++ is good for doing data processing, especially audio and video. It's good for low-level file i/o or kernel work (using a subset of C++). If you're writing a cross-platform game, C++ runs on all major platforms. 
Fuck this shit I’m dropping out. Or at least transferring. C++ is ugly asf and the syntax is unnecessary.
I agree, but it is used by just about every computer system in the world in one way or another. The Linux kernel is in C. The macOS and iOS kernels are in C and a lightweight version of C++. The Windows kernel is C/C++. The Unity game engine is C++, although apps generally use C#. SQLite is written in C. For higher level programming, I agree C++ should generally be avoided. C#, Swift, and Java usually make more sense. 
I'm about to be going through the same thing, although my interview is next week. If you know for sure they're using Swift, make sure you know different ways to unwrap options (guard, if), weak vs. strong vs owned. I'd also go through the [Language Guide](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html). Most of those topics will be covered and you can find more specific examples from tutorials. Some other commons things I'd say would be GCD / Threading and a general understanding of what frameworks they have to offer. Good luck!
They are likely going to ask about view controller life cycle, how do you use git, what do you comment and why, how do you do a tableview, how do you use a segue. 
Thanks man. I do understand most of the stuff. All that you said. The Stanford course is best. I have gotten to understand all that so I would say I’m fairly comfortable explaining what those are. I’m just hoping I don’t caught off guard like Algorithms coz I haven’t done any those since 2nd year. Good luck to you too man 
This will be a dream. I do use all that everyday when coding. I’m just brushing up making sure I don’t leave any stone unturned. Cheers 
http://raywenderlich.com
I strongly suggest the video course of Stanford University (just search on YouTube “iOS swift Stanford”). The teacher is Paul Hegarthy and I think he’s the best. When you find something difficulties, obviously there’s stackoverflow, and there are also a lot of Medium’s post that speak about Swift. Good luck with this new adventure
Which course are you following? The one given by Angela Yu?
You must be a masochist. And not a whole lot of people are going to want to pull in everything including the kitchen sink to enable that...
And you'll probably have to learn a handful of other languages if you plan on having a career in software/computers. Don't worry about it and just pick up a C\+\+ book
Word of advice for a developer - the more languages you’re familiar with, the better. A great developer isn’t constrained by the language - they can learn it as needed. C++ is very good to know. For example, I’ve always had C++ as a component in iOS projects, due to shared frameworks. So you wonder if you’re screwed - you’re not. In fact you are lucky to learn a language that will remain relevant. As a general side note, although there’s lots of differences, you’ll be way ahead of someone who hasn’t coded at all due to many concepts directly translating between basically any language. 
No offense, but that’s pretty stupid and short-sighted. You go to college to learn, not coast through on knowledge you already have. If I were to hire an iOS developer that knew swift or another that knew swift and C++, with all else the same, the C++ knowledge would be a clear winner. 
Wow this kind of gave me hope. Thanks.
Oh, this is for college - you're not fucked at all! You are the opposite of fucked. I graduated from a C++ heavy university and picked up Swift shortly after - I doubt you'll have any trouble keeping up with the courses, as they are designed for people with much less experience than you have. Besides, most of the focus will be on fairly universal programming concepts, not language-specific coding. Absorb as much as you can, and good luck to you.
If you have an iPad, the Playgrounds app is pretty fun for learning some of the basics. It’s designed to teach CS concepts, so it’s basic at first, but it’s also just adorable. Later modules include various robotics goodies, e.g., Lego Mindstorms: https://devimages-cdn.apple.com/swift-playgrounds/subscriptions/index.html#gallery
Although I personally prefer Swift most of the time, even just having learned C++ makes you a better developer. There’s concepts such as pointers which you barely need to know in many modern languages, but which are still good to be familiar with. Also of course not being afraid of a different syntax. Remember - us iOS developers had used Objective-C/C++ exclusively. All of a sudden Apple release Swift. We had to learn it to move forward with our careers. Java/Android developers we placed in a similar situation with Kotlin. Although learning languages aren’t necessarily required, not having the ability to will leave you behind when new technologies come out. Many years ago I was hired for a job that was supposed to be mostly C/C++. However it turns out I had to almost exclusively do Perl, a language I had never used before. Although I didn’t become a Perl god, I did the job as required. Since you’re college aged, I’d even recommend checking out additional languages for run. For example Kotlin/Java for android development. Even if you’re primarily interested in iOS it wouldn’t hurt to broaden your horizons. Who knows how the developer market will look like in 4-6 years?
I’m scared I’m moving backwards ! ;((
I can assure you, you're not. Learning C++ is moving forward. It might not be as approachable as Swift, but it's still one of the most widely used languages and due to its specific strengths, it's unlikely to ever go away. If you're looking at knowledge for a career, Swift certainly has lots of possibilities, but it's also constrained to, mostly, Apple development (it's cross-platform but honestly usage outside of Apple development is limited still). According to this: https://www.benfrederickson.com/ranking-programming-languages-by-github-users/ it's the 4th most popuilar langauge by GitHub users, only behind JavaScript, Python and Java. 
what do I have to change that fieldDefault isn't nil anymore? thank you very much :)
You get the error because the conditional check only works if value returns nil.
I believe Swift 4.2 will be release **along with** Xcode 10
(=ಠ ل͟ ಠ=)
lets build that app
I’m confused by the description of it on your site then: “This is my best-selling course, teaching you both iOS and Swift development using 39 complete projects. Over 1600 pages plus bonus content!” 
Yes. It's really good. Before taking that one I did the basic swift overview from Apple and the food tracker example app. The food tracker is well done (some hiccups here and there but everything went smooth after google search) Angela course is excellent. I recommend it.
Wow thank you so much for that video course!
That is a great website, thank you
So you’ve separated the data source and delegate implementation to a new class, but what does `DataAccess` provide?
Is Core Data worth using even if you don’t persist data to disk? I’m trying to write a program that displays data retrieved from an online API as a personal exercise.
Check out Angela Yu’s udemy class on swift 4 and iOS 11, completely comprehensive. Also, u/twostraws has some great books that he has published at https://www.hackingwithswift.com you will not be disappointed with either resource (use both). also check out the swift notes at developer.apple.com. these are completely comprehensive.
Does it have to be run as a task? App Kit has a class for interacting with running applications, `NSRunningApplication`. You should be able to just do something like: NSRunningApplication.runningApplications(withBundleIdentifier: "com.valvesoftware.steam").map { $0.terminate() } 
Swift has given us a type system that can make sure that our code is always forced to handle cases where a variable might be `nil` instead of making a mistake by forgetting to do so. Your colleague is suggesting that you ignore that incredibly useful tool and instead rely on humans reading the code and thinking about it to make sure that it's correct. In the absolute best case scenario, it's a higher effort way of doing the same thing the compiler could be doing for you automatically. But humans make mistakes, so you're not in that scenario. You're in the scenario where needless crashes occur. *"It's okay, I know for sure I'm right and haven't made a mistake, so I don't need checks to make sure"* is not an attitude that results in robust, high-quality code. Aside from the *direct* issues, there's also the indirect issues. In good code, `!` is unusual and sticks out. It's a warning sign that says *"Hey, this code is dangerous, pay close attention!"* It can also be picked up by lint rules. If you are writing code that has `!` all over the place, you're training yourself to ignore this warning sign and you're making it difficult to use those sorts of lint rules. 
&gt; they are simply a type like a struct They are an enum with two cases, `.Some`, with an associated value, and `.None`.
&gt; NSRunningApplication.runningApplications(withBundleIdentifier: "com.valvesoftware.steam").map { &gt; $0.terminate() &gt; } hm, that doesnt seem to exactly work. Initially I get 'result of call to map is unused' and it doesn't quit. I'll continue looking into NSRunningApplication and see if I can resolve it. Thanks for the assistance !
Ignore the return value to get rid of the warning and turn off the sandbox in the entitlements file.
Not sure if that's intended to be a contradiction or not, are they a type or not a type? This discussion was held a number of weeks ago and the resolve was that they are a data type. Being an enum is not a contradiction to being a type.
Just offering a bit more information. You can define types with classes, structs, enums, or protocols. So if you have, say, a class called `Foo`, then `Foo` is a type because it's a class, and `Foo?` is a type because it's an enum. To be specific, it's an enum with two cases, `.some(Foo) (which is the non-nil case), and `.none` (which is when it is `nil`). All of the functionality in optionals comes out of how enums work, the only thing special about optionals is a bit of extra syntax support.
Thank you for sharing this. I’ve registered and am very excited for this. Thank you for your work. 
You are force unwrapping something that you just checked in the if clause as nil. Maybe you meant !=
The Stanford course is also on iTunes U, if that’s better for you. I think it takes advantage of a lot of that app’s features. 
Signed up! Can't wait. 
If they know it's going to be set, then that num should be lazy init. 
&gt;Other people start using your code and don’t understand the rituals required to not crash your code. Anyone who doesn't know how to handle Optional type has no business being a Swift developer. 
Being a former Apple Employee can you tell us where the new Mac Mini is? Sorry had to ask that. Actually it is great to hear that you have a free program here but the IOS market is saturated with training opportunities. I'd rather see something similar offered for people that want to develop on the Mac.
😅
Swift - the new BASIC. Great. Another generation lost.
Jazzed! (and registered!)
Amazing! 
I don’t see why not. You can download anything you want as a file, and instantiate a storyboard from any file (right?)
If you think you want to do it, don’t wait. When it comes to learning a language, you’re always going to be trying to catch an infinitely long moving train. The only difference is how far away the engine is when you finally jump on. 
Awesome. Thanks for putting it up! And nice use of the public dB to pass around the shares.
`Date`(https://developer.apple.com/documentation/foundation/date): &gt; A specific point in time, independent of any calendar or time zone. By doing `Date()` you capture the time and date of the moment that object is created. You them choose how to deal with that date through things like `Calendar` and `DateFormatter`. For example, if I wanted to create an array of `Date` objects, each 15 minutes later than the current one and all in UTC: import Foundation var calendar = Calendar(identifier: .gregorian) if let gmt = TimeZone(identifier: "UTC") { calendar.timeZone = gmt let dates = (0...5).compactMap { calendar.date(byAdding: .minute, value: $0 * 15, to: Date()) } print(dates) } // [2018-06-07 02:25:01 +0000, 2018-06-07 02:40:01 +0000, 2018-06-07 02:55:01 +0000, 2018-06-07 03:10:01 +0000, 2018-06-07 03:25:01 +0000, 2018-06-07 03:40:01 +0000] 
I love the Mac, and have done even more Mac development in my career than iOS development. I am including a small unit on macOS development in our (full time) iOS development course. I’d love it if someday we could do something more in depth on the Mac!
... So, about a year ago (maybe two, idk, it's been a time warp) you and I were on a phone call together for something fairly random, and I couldn't shake the fact your name sounded super familiar but I couldn't place you. We worked together at Apple. And I feel really dumb now. This is really cool, and I wish you the best! :) 
Maybe as a learning experience. Otherwise you can just create your equivalent of NSFetchedResultsController.
That's written next to Hacking with Swift, my iOS book. We were talking about Hacking with macOS, my macOS book.
Sign in, it’ll be a great opportunity to see what I’ve learned
the sites signup process is irritating