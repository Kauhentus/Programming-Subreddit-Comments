I did exactly this over the summer. I turned a messy project with Parse code scattered across 20+ files into one with Firebase code in exactly one file. It took about 6 weeks, but knowing that a future switch to, say, a proprietary (Vapor!) backend API would only involve rewriting one file—so worth it. 
Okay to piggy back off of this, you can install an app called light blue. In light blue, you should connect to the device, and then the characteristic you want. Then turn on listen for notifications. If you say art seeing data, then your service sends unsolicited notifications. If not, then it may mean you have to send it a command to put it in some output mode. https://i.imgur.com/d5XdHgd.jpg
Thanks for the tip, that’s a cool app. I set it to listen for notifications but was not seeing anything. I’m guessing it needs a command to start output of data, but I haven’t had any luck finding what to send. I’ve tried looking at some similar apps that have their source code on Github like this one (https://github.com/amund7/ScanMyTesla/tree/master/App2) but I’m not familiar with most of these languages. Appreciate the help though, I’ll keep looking around. 
If it’s not sending unsolicited notifications, then the command is going to be service specific unfortunately. You could try 0x01? Lol maybe just a guess because I don’t know the product. Unfortunately I couldn’t get the example source you posted to load. 
you should maybe go on Stackoverflow for this. But know one thing, you need to call super.viewWillAppear() and viewWillDisappear in your override. Also, instead of creating you model in the viewController that is using it, create it in the parent or in another class holding models and pass it to the view controller. Last point: viewWillAppear can be called multiple times, only viewDidLoad is called only once. Therefore, you can be instantiating many models and disposeBag when it's actually not necessary.
Looks like the other app you posted is sending these values on connection sendCommand("ATWS"); // faster than ATZ sendCommand("ATSP0", "OK"); // set protocol auto sendCommand("ATH1", "OK"); // headers on sendCommand("ATE0", "OK"); // echo off sendCommand("ATS0", "OK"); // spaces off (for speed and buffer lenght) sendCommand("ATCAF0", "OK"); // CAN formatting off
Thanks @mime3329. Yes, what i showed you is the sample solution, we already tried `viewDidLoad` , so it means it will not duplicate any models and disposeBag. The Idea of not creating a model inside the view controller can work. but it depends if you will use that model always or depending on the requirements. but for some cases you dont need to make some usecase/model a singleton specially if you will just use it one time on that certain screen. maybe im avoiding unused model. Ill will try posting to stackoverflow, just checking it out here if somebody encounter this kind of issue :) &amp;#x200B;
Just saw that as well after I posted! Did a google search for ELM327 (type of device I have) commands and found this [PDF](https://www.elmelectronics.com/wp-content/uploads/2017/01/ELM327DS.pdf). It looks like "ATMA" is what I need to send to the bluetooth device to put it in a bus monitoring mode which should show me all the data. Problem is, I need to figure out how to do that. ;) Definitely a step in the right direction though. I'm definitely jumping in the deep end with all of this but I'm hoping to learn quite a bit along the way. Appreciate the help!
As mentioned on the issue, in GitHub, I am too against this. It's like my argument against using Hungarian notation - commonly found in older, Java based programs and Android applications. We use it at my place of work as it was not my decision - although I fought against it and subsequently lost. &amp;#x200B; It would be great if Swiftlint could have a rule for not requiring self; however I doubt that's a trivial thing to add. 
That makes no sense. If anything, not having to rely on explicit self means you understand scoping more. 
+1 here. This is how I would do it. That way you don’t need to pass your counter between view controllers and you keep your separation of concerns. It also makes it easier to remove the logic if you ever need to by just not assigning the delegate to your nav controller. 
 let arr = [[1,2,3],[4,5,6],[7,8,9]] let first = arr.map { $0[0] }
Yep. You could do something like this: array.compactMap { $0.first } 
Swift doesn't actually have 2D arrays. (Most languages don't.) It only has arrays-of-arrays. So there's nothing to "access", because it's not actually a thing -- any more than "the property named 'bar' of each struct Foo in an array-of-Foo" would be. You can extract anything from an array-of-T with a .map call, which may or may not be what you're looking for. I'm not sure what you're nesting here -- you're only iterating over the outer array.
"Should be" is very different from "is". Are you writing a program in the language as it exists today, or the language as you think it should have been designed?
&gt; yes, requiring explicit self is a form of Hungarian notion [sic] No, it isn't. It's not part of the identifier, and it doesn't indicate data type, nor intended use. It provides none of the advantages of Hungarian Notation at all.
I just started reading about the $ notation in Swift. That looks pretty insane, i'll have to get practicing on that! Thanks for the reply!
Interesting to hear about the naming of array-of-arrays; I think I got the term 2d array from a lecturer at Uni when I was learning C. It kinda makes sense to me, as I can format an array of arrays to look like this; let bigSquare = [ [3,0,0,7,0,4,0,9,0], [0,2,8,6,0,0,0,7,0], [0,0,0,0,0,0,0,1,2], [0,9,0,0,5,0,0,4,7], [0,5,6,1,0,0,9,0,0], [1,0,4,0,3,0,0,5,6], [5,0,2,4,0,8,7,0,1], [7,3,1,2,0,0,0,0,0], [4,0,0,3,0,0,2,6,0] ] I can appreciate that calling it an 'n'-D array falls apart when you go more than 3 arrays deep, as it becomes pretty much impossible for people to conceptualise it at that point. My code to get a 'column' of numbers is; func getColumn(at columnIndex: Int, of game: [[Cell]]) -&gt; [Cell] { var tempArray: [Cell] = [] for row in 0..&lt;(game.count) { tempArray.insert(game[row][columnIndex], at: row) } return tempArray } I'll try it out with the .map call, that looks pretty much like what I'm after!
It makes perfect sense. Using something isn’t the same as relying on it.
Not to sound like an elitest prick butttttttt (yeah yeah, the irony doesn't escape me), "Easier for Swift noobs to understand :)" for something as fundamental as `self.` is a bad reason. You need to set some minimum bar for assumed knowledge in your code base, (obviously, you're not going to add comments to explain what `Int` is, and how it's different from `String`) and this seems far too low. "- Enforce consistency across the code" Consistency needs to have a purpose. Usually the purpose is to improve readability. You could, "for consistency" also insist that you always use full closure syntax because it's occasionally necessary. Hell, you could even also mandate type annotations everywhere, just because they're necessary to disambiguate some expressions or speed up some compilations. Which would you prefer? let a = 0, b = 0, c = 0 let f1: (Int, Int) -&gt; Int = {[a, b, c] (d: Int, e: Int) -&gt; Int in return a + b + c + d + e } let f2 = { a + b + c + $0 + $1 }
We are not talking about closure syntax here. No need to take arguments for one proposal and apply them to something else.
Requiring or not requiring explicit self will not solve the closure issue. The compiler will not stop you from causing a retain cycle either way. This class of bug can be prevented with its own solutions and is not directly related to requiring explicit self, this probably made obvious by the fact that memory leaks from strong self in closures are common iOS issue and something usually asked by most interviewers. As you see, not requiring explicit self is not solving this problem...
Your point was that not using self means you don’t understand scoping, not that you rely on it or whatever you’re trying to imply. 
Have you considered just using Codable?
IDK why you're being so downvoted. I don't agree with your statements, but they seem like valid complaints. I do have to hold your feet to the fitre for this statement, though: "optionals solved a problem I ever had in over 30 years of programming" I ***VERY*** highly doubt that. You're telling me, that you've never had to use any of these nasty tricks? 1. Use a dummy value like `-1`, `""`, `NULL` (which later bites you in the ass when you realize you actually want to be able to differentiate `-1` that means "invalid" vs `-1` that was parsed from `"-1"`. int parseInt(char *s) { if (stringEncodesInt(s)) return -1; return doTheParsing(s); } ... char *s = "-1"; int i = parseInt(s); if (i == -1) { // ... then s was "-1"? or was s "abcNotAnIntFooBarBaz"? // Gotta adda a `s == "-1"` // But what if this was parseDouble? Are you going to check for "-1", "-1.", "-1.0", "-1.00", ... 2. Throw an exception, (for what are usually totally unexceptional cases), which require so much boilerplate to catch. Also, you might forget to check for the exception entirely. int parseInt(char *s) { if (stringEncodesInt(s)) throw NotAnIntException; return doTheParsing(s); } ... try { parseInt(s); catch(const std::exception&amp; e) { // this is a stupid amount of boiler plate for something so basic and common } 3. Use a reference boolean "out" parameter, which takes an extra declaration. This technique is also shitty, because there's no compiler enforcement to ensure you didn't forget to check the bool flag. int parseInt(char *s, bool *succeeded) { if (stringEncodesInt(s)) { *succeeded = false; return -1; } else { *succeeded = true; return doTheParsing(s); } } bool parseSucceeded; int i = parseInt(s, &amp;parseSucceeded) if (parseSucceeded) use(i); 4. Return a success/failure boolean, and return the real result with an out parameter. This is what C# uses. Checking the flag is made easier, because you can use the function call directly as an `if` statement's predicate. But there's no compiler enforcement to ensure that you do. int numericResult; if (int.TryParse(input, out numericResult)) Console.WriteLine(numericResult); else Console.WriteLine("Could not parse input"); And again, it requires an extra declaration. This was such a pain in the ass, that Microsoft had to introduce a new language syntax, [`out` parameters](https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#out-variables) in C# 7, just to mitigate this. if (int.TryParse(input, out int result)) Console.WriteLine(result); else Console.WriteLine("Could not parse input"); All these are crappy solution, but the languages don't offer you any better choices. Compare it with: if let aReliablyRealInt = Int(str) { print(str) } else { print("str did not encode an Int") } No extra declarations. Compiler enforced so you can't forget to check the "nil" case, no overlapping with the domain of real values. Perfect.
I have, but I'm under the impression that it's structure based. The reason I like SwiftyJSON is it lets me experiment features across the browser and iOS without finalizing anything.
You miss my point entirely. It's an illustration how an Ill-considered pursuit of consistency hurts the whole reason why we were trying to be consistent in the first place: for readibility.
Challenge Make a Multiline String
Yes... one of the main points is that explicit self is more readable. This was also the main point of the Swift Evolution proposal which was eventually rejected. Having a linter in general for or against explicit self usage is good for consistency. No need to start getting offensive by calling something ill-considered. It was actually very well considered by the core Swift team.
So your just passing JSON around your app?
For the new features yes. The older features are on Realm so they're structured. I enjoy the JSON way for rapid development so I don't have to track everything, because of the constant changes.
hmmm this sounds very backwards :/ passing JSON around is the opposite of rapid development IMO, you would make view models and just alter the way they are parsed into, that way no views or data ever change, just the source.
Opinions aside, here is a JSONDecoder version which shouldnt give you any problems and you can still just pass it around as a dictionary. do { let decoder = JSONDecoder() let model = try decoder.decode([AnyHashable: Any].self, from: data) } catch { print(error) } 
That's the problem. All the views are changing not just the data. If I had a static layout each time I wouldn't have a problem with structured data, but since everything is changing it becomes more of a headache.
SwiftyJSON converts the JSON back into dictionary :D, but I do appreciate the alternative.
You mean it converts the dictionary back to JSON? if so do { let encoder = JSONEncoder() let data = try encoder.encode(dictionary) } catch { print(error) }
Firstly, you shouldn’t be storing credential in User Defaults. Try using Keychain for that. Ideally, you will want to implement that function in ViewWillAppear instead of ViewDidLoad. 
So for this you’ll need to send that as hex data. Take your string “ATMA” and turn it into a Data object with utf8 string encoding, then that should be sufficient to send to the device over core Bluetooth. 
By definition a noob is a newbie / beginner / not super experienced
Google with site:swift.org
&gt; You can’t reference elements of a dictionary by index. Sure you can. It's just that Dictionary indices aren't human friendly. let d = ["a": 10, "b": 100, "c": 1000, "salami": -1] let di = d.indices for i in di { print("d[\(i)]: \(d[i])") } Prints: d[Index(_value: Swift.DictionaryIndexRepresentation&lt;Swift.String, Swift.Int&gt;._native(Swift._NativeDictionaryIndex&lt;Swift.String, Swift.Int&gt;(offset: 4)))]: (key: "a", value: 10) d[Index(_value: Swift.DictionaryIndexRepresentation&lt;Swift.String, Swift.Int&gt;._native(Swift._NativeDictionaryIndex&lt;Swift.String, Swift.Int&gt;(offset: 5)))]: (key: "b", value: 100) d[Index(_value: Swift.DictionaryIndexRepresentation&lt;Swift.String, Swift.Int&gt;._native(Swift._NativeDictionaryIndex&lt;Swift.String, Swift.Int&gt;(offset: 6)))]: (key: "salami", value: -1) d[Index(_value: Swift.DictionaryIndexRepresentation&lt;Swift.String, Swift.Int&gt;._native(Swift._NativeDictionaryIndex&lt;Swift.String, Swift.Int&gt;(offset: 7)))]: (key: "c", value: 1000)
MIT licensed. Unbelievable.
Seriously. That's why guard let was invented.
What a delightfully toxic post.
This!!!
Hey, do you see that as positive or negative? I’m genuinely interested 🤔
The Touch Bar does away with the physical ESC key so a lot of developers instead map ESC to the CAPS LOCK key. Because of that people are less tended to scream at each other. I finally found out what the real reason behind the Touch Bar is. Tim is such a nice guy. &amp;#x200B; Apple: making the internet a friendlier place since Open Transport
&gt; I do have to hold your feet to the fitre for this statement, though: "optionals solved a problem I ever had in over 30 years of programming" OK. I'll say it again. "optionals solved a problem I ever had in over 30 years of programming"
fitre* 
Dude. It's just "guard let", not "guard if let". If you're going to bitch about something, at least know what you're bitching about.
Very positive! Amazingly easy to use in any project. 
Assuming it is done well, I think this will be a great boon to software on the mac. All the iOS developers will have a much easier time developing apps for the mac.
Yeah, was doing that. But filtering out forum results was a hassle. LOL...use google to search apple...hope apple sees that reply. 
It's nothing fancy. The parameters of a closure are just numbered up from 0. It's handy because often times the purpose of the closure parameter is totally obvious, so you would otherwise end up write short arbitrary variable names that don't add much value to readability, like `{ a in a. first }`
It doesn't indicate type or use, but _does_ indicate scope, just like when we used to prepend `its` or `m_` on member variables in C++ to indicate scope. It's `Hungarian` only in the sense that it is being prepended to the variable name that the complier doesn't need but might come in handy for a human who isn't familiar with the code base.
The MIT is probably the most open license there is.
Just fix the overrelease bug like I suggested: https://github.com/WeTransfer/WeScan/issues/116#issuecomment-459043863 A lot of the stuff is not prepared for customizing. For example fixing the orientation should happen when capture session manager takes the picture, not when the cropVC gets it. But the base capture session handling and edge detection is pretty useful (besides the bug I mentioned) Also for some reason, using the last quad from the video stream is misaligned, should try to detect it on the captured image too.
Your a poes
Well, not quite. It does require license and copyright notice.
As /u/mmattj pointed out, the Allocations instrument is usually your best friend for sorting out where exactly your memory leak is occurring. Having used MVVVM/RxSwift for the better part of four years now, in my experience when a memory leak occurs, 9 times out of 10 it's due to a strong reference to `self` in a subscription closure. Especially in the case of UI bindings to `Driver`s, where the subscriptions never terminate, a strong reference to `self` will always exist and will never be deallocated. I notice in your view model code snippet that you're using an `unowned` reference to `self` in your closures, which is a good thing. If your view model is being retained but there aren't any retain cycles present in your view model code, I'd traverse up its ownership hierarchy and see if its view controller introduces a retain cycle, and so on.
Flair tutorials
OK. Use site:docs.swift.org instead.
/r/mentorsec
It's not lacking the feature because it's hard to conceptualize -- many features are hard to conceptualize! It's lacking the feature because there's nothing in the language that supports it. It's literally just an emergent property of nesting arrays in arrays. I could write `[[1,2], [3]]` in Swift. It's perfectly valid syntax. It's meaningless to ask how many "columns" it has, though. This is a case where we're forced to confront the reality that it's not a 2D array, but an array-of-arrays. In contrast, if I write `#2A((1 2) (3))` in Lisp, I get an error. Multidimensional arrays are a built-in type, and it validates them at read-time, and it has invariants to ensure that 'jagged edges' can never occur. I can call ARRAY-DIMENSIONS on any array and get a concrete answer as to the size of it along every dimension. C programmers like to give everything a name, especially when their language doesn't really support it. It's part of their schtick. They have a nice syntax for integer array literals, and they call it a string type. :-)
every 10 minutes, spam to discord. clicker Beware
Where are you getting your definition of "Hungarian"? Simonyi never wrote about anything you're talking about. C++ has a perfectly analogous feature, yet Hungarian Notation never proposed to use it. [None of these pros or cons apply](https://en.wikipedia.org/wiki/Hungarian_notation#Advantages). If you want to indicate member scope, then prepend `m_` to it -- and get all the benefits of actual Hungarian. Using `self.x` rather than `x` is perfectly useless, because it adds *opt-in* redundancy with no means of getting future maintainers to stay consistent.
Which point are you trying to make here: that each person should try the other way for a while and see if they like it, or that your eventual preference is the correct one? There's people here saying they tried the other way, and still hate it, yet you are ignoring their experience and judgment and substituting your own.
It is
You could just *ask* the user to poke their eyes with a fork, and then uninstall your app. It'd save both parties a lot of wasted time.
What a helpful comment! /s
Most people I know prefer Carthage because it's more WYSIWYG and it doesn't screw up your project file and provides the ability to prebuild your dependencies, so you don't have to build them every time you need to clean the build folder.
Thank you :) Will use it now.
Thank you. I am storing only the token in User Defaults. You think thats not a good way? 
Sharing user defaults data between the app and the today extension requires you to set up an app group. [This tutorial](https://medium.com/@JoyceMatos/today-extensions-in-ios-10-and-swift-3-f7dc316d9df9) is a little out of date (iOS 10/Swift 3) but does cover the concept of creating an app group in XCode and reading/writing user defaults from/to the app group you set up.
Oh god yes I'm so stupid! Thanks for sharing this moment with me
Sometimes it's a relief when the solution is something stupidly simple that you overlooked, rather than a trip down a rabbit-hole of esoteric details.
Definitely. I just find joy in thinking that my stupid-mistake Reddit posts might become another resource for someone else in the future.
My point was understanding scoping means understanding why explicit self is useful. It’s not a crutch, it’s a means of reducing ambiguity in a language that 
The person I was replying to was assuming that I prefer it because I am used to seeing it in my obj-c, which was not a correct assumption. So my response was directly to that person, hence me replying to them.
I think that’s good; it allows the original author to receive attribution.
I didn’t say it was bad, but it does make it a bit less open than, say, the Unlicense. Thus, it is not quite the most open license.
👍 
Hey, I’m not actually the author of WeScan, I just use it a lot myself and have contributed major features. The team is working on fixing these issues, but they’ve got lots of projects and work at WeTransfer so they can’t dedicate all their time to this. Please file an issue if you encounter an unreported bug!
Why is one question mark not enough???
For anyone interested just found where I read it, it’s in a book called Advanced Swift by objc.io [Unowned References](https://imgur.com/gallery/N6D0VE5) 
How are you parsing your data? Are you getting it remotely or are you writing out all the data yourself?
Yeah, i think this is cause of memory leak the strong reference to `self` it didn't deallocated properly. sorry for amateur question. I'm new to swift closures meta, I'm not that familiar, but yes we did tried adding `unonwed` on all `self` . I think i need to note/study this retain cycle. Thanks! I'll check this link. [https://medium.com/mackmobile/avoiding-retain-cycles-in-swift-7b08d50fe3ef](https://medium.com/mackmobile/avoiding-retain-cycles-in-swift-7b08d50fe3ef)
That panel was moved to a different location in recent version of Xcode. If you look in the upper right hand corner of Xcode you'll see 7 buttons (1 stand-alone, and 2 segmented controls(with 3 segments each)). The last 3 will display/hide the panels, the middle 3 control the type of view, and the first one is what you're looking for. If your typing on code the button will look like " { } ", but if you are on the storyboard it will look like a square inside of a circle.
"Guard let" and "if let" got combined into one bit of angry. All that Swift promised it would be ended up just as quirky as the old conventions it claimed it was made to fix.
Thank you!
\&gt; I am looking to implement core data into my app which will have relatively few elements to be saved Are you sure you need CoreData? There's a steep learning curve and if you're just storing a little bit of data you might be better off with a simpler format/API, like JSON or UserDefaults. 
My tips is you must read the official documentation ,and then buy the book from Raywenderlinch website[Ray](https://www.raywenderlinch.com) by the way you can visit [Objc](https://www.objc.io)There are a book about CoreData ...
Raywenderlich has always been an amazing source. Glass to see they’re doing this.
Yes - not a fan of the new location. Not sure what the thinking on that move was, but it’s a pain to have to open the popover again and again...
I would also take a look at alternatives to CoreData. It is quite a beast to master and can be a pain to maintain as your implementation grows. Libraries like Realm are really well thought through and a lot simpler to use. Otherwise there are some pretty decent SQLlite projects.
That's a very good point! I had some issues with CocoaPods when I scaffolded the project, I have to switch back to the old building. I will take a look at Carthage, thanks!
Yep, anything that isn't user preference-related shouldn't be stored in User Defaults. It's not optimised to be performant or secure. Sure, your current implementation works but it's definitely not the most ideal. 
I guess I don't need it but part of the reason I'm making the app is to learn and isn't know core data pretty important for swift programming? I may be wrong, that's just an impression I got.
Would you say core data is important to know as an iOS developer? Because I am also using this app as means for learning too.
It used to be super important to know as it was the most mature of the data storage frameworks on iOS but in my opinion newer frameworks have surpassed it and are a lot simpler to understand and maintain. Out of the approx 20 apps I have been involved in, some super complex and some simple, I have used CoreData about 4-5 times. One project I worked on, I ended up ditching it for simple JSON files. If you want to learn it, then I think it’s good that you are planning to do it in a project of your own. To get started is relatively simple but it has quite a bit of legacy and can get very complicated when you start delving into multithreading, complex modelling etc. I would suggest working through a few tutorials online and then trying to solve your issues using the Apple docs and reading other’s code on Github. A book can be useful, but I have also found it takes too long to work through a book and nothing beats trying everything for yourself and just gaining experience when faced with hard problems. 
Had anyone worked with Server side swift frameworks in production? I mean it's nice to use the same language for iOS and backend (and it's a great language), but if the framework isn't as performant or easy to use as alternatives, it's not that great of a trade off.
Check out https://www.serversideswift.info/videos for some examples of companies using Swift in production in the backend
All goes to apple
IMO, terrible guide, literally adding views and constraining them in cellForItem is the last thing you wanna be doing....
Programmatic \&amp;amp; in pure code. I find this amazing \&amp;amp; inspiring!
So you mean I can’t purchahe stuff like videos / photos via Apple pay?
not if the photos/videos dont come on a physical drive. If its access to digital videos/photos, you must use In-App Purchase.
Add the whole viewcontroller code so we can see more
No, he should actually ask here, I'm sick of questions like "how do I set a button title".
Actually don't do any of these. There are like a trillion tutorials on core data for free on youtube where you'll learn CRUD operations. It'll take you one afternoon at most.
Ok so you're suggesting he explores something like FMDB that is like a million times harder to implement than core data. I hate core data with a passion, but it's the simplest implementation for noobs. 
[removed]
you have "youtube" misspelled there on the phone image...
&gt; terrible guide it's blogspam...
My main question on this would be: Which APIs are available? UIKit or AppKit? I assume neither, but often those have things like CGPoint and UIColor which I use frequently outside of a building-a-UI context. CoreLocation, I use a lot in my work. Core Data? There's a lot of frameworks which can be used in ways that don't have a direct relationship to displaying UI on a screen. I assume that none of this is possible with server-side Swift, which would mean that it's limited in comparison to a language such as Python which has an extensive amount of open-source libraries you can use.
I have written a cheatsheet (with quickstart, fetching, insert ,delete) for core data here : https://nspredicate.xyz/coredata , and also a quick guide on querying data using nspredicate here (https://nspredicate.xyz) . It's not comprehensive but should be able to get you off the ground on starting Core Data, hope this helps!
Core Data sucks. Most Core Data tutorials suck worse (why do you want me to rebuild the stack again?). I have been trying to come to grips with Core Data for over a year now. Every time I start a new project, I give it another go and fail. My latest project, I gave up trying to understand it and just used snippets of code that do the job. It works. Actually, I never got relationships to work, I will give them another go next project.
Yes!!! Been waiting for this since SPM was released. Hopefully we can stop using Cocoapods sooner rather than later. 
Eh. until there's built in Xcode support I don't see it being that useful. It's still essentially the same as Carthage, except barely any frameworks support it. 
Personally I’d go with Realm or SQLite instead. They’re less quirky and you can share data with Android apps too. 
Apple is not involved in the actual processing of Apple Pay transactions. For in-person transactions they’re literally not involved at all, and for app/web transactions they’re just part of an extra validation loop to authenticate the app before the transaction goes down the normal payment chain. You have to set up an account with a payment processor who accepts Apple Pay (and other cards) such as Stripe. The transaction then starts with a request from your app sent to (in our example) Stripe, which includes the customer’s payment information. Stripe sends it over the payment network (Visa, et al.) to the customer’s bank who approves it and sends the money to Stripe to send to you. 
Just open the keyboard, theres a bunch of characters in there. Any textfield or textview will open the keyboard.
If you are trying to show me how to let the player type in their character name, that is not what I am looking for, sorry. I am trying to make a character selection screen where the player can click on one of a few characters to play the game with.
niceeee!!!
No, I am making fun of your incredibly broad question with literally 0 input from yourself, expecting other people to basically provide working code for you.
Generally yes, but there may be exceptions. Very rare exceptions. 
Swift doesn't have a concept of "textField" or "View Controller". I suggest StackOverflow or /r/iosprogramming.
To offer a counter point to this, I recently implemented a simple expense-tracking app and am very happy with how easy Core Data was to set up and use, considering how much power it offers.
FYI: There is a shortcut for the popover (CMD+shift+L). There's also some way that I can't remember where you can turn it into a floating panel that's permanently visible. I forget how though :(
MBP 2017 is definitely good in this case 
Thank you. I saw some MBP but they are from 2013 or 2014. Is there a minimum year I need to watch out for? 
Get some pro model. As much as you can allow. The non pro models will have a hard time while working on big projects in different environments. 
Super cool thanks, was looking at the air so glad to hear this advice
Yeah, but then it just annoying - shortcut is fine, but we used to go bottom right scroll, select drag ... now it’s just annoying really
Go for the 15 inch one. Preferably the 2015 model.
Thanks! 
I would suggest 2015. Definitely skip 2016. I own a non touch bar 2017 and i love it. I started programming mobile apps in 2014 on an Air and im so happy with how the pro does it a million times better. The Air was pretty much choked most of the time when i worked. 
UserDefaults or CoreData? I need to capture a logged in user, which from my understanding UserDefaults does in a pretty light weight fashion. But, I also need to keep some persistent data, which is why I'm thinking CoreData. I'm no stranger to db architecture so coreData doesn't really scare me off, but want to make sure it's not overkill for what I'm doing. (It's an event driven check in app, not too data heavy) My question: Do I use a combination of UserDefaults and CoreData or go strictly with CoreData?
Udemy.com has some really nice courses. 
Nice article. I wish the SPM team would create a status entry like sourcekit-lsp (https://github.com/apple/sourcekit-lsp#status). I read the article, have looked at the github projects PRs, and still have no idea what it is capable of.
the Angela Yu course is the best one on Udemy
Great looks super helpful. Thanks!
Yea I agree with the books vs experience comment. Honestly though, 25% is a pretty high percentage in this context, so looking at your experience I would say it's important to know.
https://www.hackingwithswift.com/100 
https://www.hackingwithswift.com/100
[Imgur album](https://imgur.com/a/XNfZzj5) with the same graphic for other programming languages - for comparison! | If you want more information on how these were created, it can be found [here](https://www.globalapptesting.com/blog/picking-apart-stackoverflow-what-bugs-developers-the-most)
I second Angela's course. I'm doing it now, it's great so far.
Yeah, fuck Strings
##r/DataArt --------------------------------------------- ^(For mobile and non-RES users) ^| [^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| ^(-1 to Remove) ^| [^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/9wy10w/ignore_list/)
I third Angela's course
Hold down the Option key when clicking the Library button to keep the panel visible all the time.
I’m doing Angela’s course - posted about this yesterday with no response lol. I’m still confused so I guess for me it takes a while to click 
\- MacbookPro \- 15 inch but 13 is also enough \- 16Gb of ram (this is really important)
2012 unibody MBPs with ssd upgrade are still not shabby computers and you can get them for really cheap now. 
Hah, I did some coding in objc today, playing with the bit dated sphero ios sdk. SourceKit is like on coke with objc, amazing how used to we got to the sluggishness with swift. Anyhow, I'd say a proper iOS dev should be proficient in both languages. Then if you are writing your own apps it's up to you what you fancy. 99.9% of our clients have/want swift code nowadays, but I also still truly love the wild west feeling of objc that Ken somewhat pictured.
Before I saw it I was all, "betcha it's strings."
If you have an iPad, the Swift Playgrounds app is a great dip into the waters of programming. You'll then get a better grasp of the Swift Programming Language book.
I guess, 2015 is minimum year, you'll use this notebook for 2-3 years with no regrets 
What's scary in that entire album is the 3-4 languages I use most, with the single exception of Objective-C, all have giant "STRINGS" in the cloud. Are there no frameworks/libraries that can help with strings? Objective-C "strings" was the same size as "uitableview" which still kinda scares me. :)
I’m surprised that segues aren’t at the top of the list, they were the only challenging concept when I was learning basics.
Protocols!!!
Strings are just inherently difficult. It's not a matter of frameworks or the lack thereof.
75% of the string questions have to do with getting a substring or character at a int index
Yeah, true. I'm just old enough to remember everything being ANSI 0-127. Strings got reeeeeeeeeeeal complicated.
As much RAM as you can afford 4 cores better than 2 core At least 256gb storage but 512 better 
Already attached the 2 link for the View Model and ViewController of Contact List Screen . This line of code bothers me. because this is the solution that we got. but i find it ugly on the architecture because it will reinitialize everything. even you just open 1 screen and return back to the previous screen. ^(override func viewWillAppear(\_ animated: Bool) {) ^(disposeBag = DisposeBag()) ^(viewModel = ContactsListViewModel()) ^(setupObservers()) ^(viewModel.loadContacts()) ^(}) ^(override func viewWillDisappear(\_ animated: Bool) {) ^(viewModel = nil) ^(disposeBag = nil) ^(}) I'm not that active solving this issue right because it seems working right now. Its like a First Aid since i'm not that familiar with swift architecture and retain cycle meta.
OK. I mean, I don’t think Swift’s goal was ever to teach people a new way to think about coding, was it?
All of the hacking with swift books are amazing resources, I believe there's some free online resources on that for beginners [Here](https://www.hackingwithswift.com/read)
I have found these two book from Apple to be super helpful for getting started. [App Development with Swift](https://itunes.apple.com/us/book/app-development-with-swift/id1219117996?mt=11) [The Swift Programming Language](https://itunes.apple.com/us/book/the-swift-programming-language-swift-4-2/id881256329?mt=11)
Intro to App Development with Swift: https://itunes.apple.com/us/book/intro-to-app-development-with-swift/id1118575552?mt=11 I went through the majority of its big brother (App Development with Swift) and found it very thorough.
Swift the language has no innate UI/UX, you might want to specify iOS programming and then start learning the UIKit. But lets rewind that a little, as a Designer you should learn the Xcode's Storyboard, thats all you really need to begin. You can place buttons and views, link things up, and drop in images.
I am relatively new to compiled languages, Ive used a lot of powershell, python etc. When it came to Swift, I can only think to myself.. "Why so much syntax for one small function?". Segues are on top on my list!
Depending on the license of the other dependency, it may be OK to include it as part of your binary distribution. If you’re not sure, refer the distribution question to the project owner.
If you use a CAShapeLayer, you can animate the path that it draws. 
I’m surprised it’s not autolayout or constraints
Yes I can distribute it as binary. However how can I include binary framework as a dependency of our framework in podspec
I meant that, if the dependency’s license allows, bundle it as part of your framework. That is combine both as a single distribution. Of course, without knowing the details of your code, and the third party code, I don’t know about the technical feasibility or legalities of your particular situation. Just giving some advice on some previous cases I’ve had to solve.
I am afraid I can't that...Third party framework I refer to is a compiled framework( vendored) so I can't just copy Classes and add it in the project like I could with open source projec. Is there a way to achieve that with compiled framework?
Sorry, if the third party dependency is a binary only distribution, and it is not exposed with Cocoapods or another build system, then there is no trivial means to include it in your framework. Your best solution may be to give your client thorough documentation on how to integrate that dependency in to their Xcode project. In that documentation, be sure to include all the licensing details so that there are no surprises for your client’s lawyers to figure out. However, at this point, you may want to pause and review whether you should actually use this dependency. Is the usage license clearly stated? Are the technical usage instructions clearly stated? If the answer is no to either question, you may want to find an alternate course. 
It is 100 percent that I need this framework... It is framework of our partners which provide additional solution. I might be really tired( have been working 2 straights days without any sleep) but what I refered to saying compiled is the fact that it is a file which ends like a third-party.framework. so it is actually a dynamic framework ( icon is the same as dynamic frameworks of mine). It is just a release version and not a debug version
At this point, I recommend reaching out to the vendors of this framework. If their intent was to have a usable framework for clients, they should have instructions to support your situation. If they did not intend this framework for re-use, then you might be in a problematic situation. The license of this third party might be putting a constraint on you project that is not legally satisfiable. It’s always OK to raise these sorts of problems back to your boss or client. Better to sort it out up front than incur liabilities later.
Additionally, GET SOME SLEEP!!! No job is worth sleep deprivation. Coding tired is basically the same as creating new bugs. I have threatened my reports with getting fired for working more than eight hours in a day. I never want my team working at anything less than their best.
I remember Stanford posted a videos from course lectures about iOS development on YouTube. While I watched these several years ago, they seem to have updated the lectures to cover ground on Swift and newer iOS versions: https://www.youtube.com/playlist?list=PL3d_SFOiG7_8ofjyKzX6Nl1wZehbdiZC_
How about the cpu? Have i5 and i7 huge difference to each other in this case?
You don't need to understand ObjC, it's enough if you understand how selectors and messege send works and what the objc runtime provides you (swizzling, associated object, etc.)
Typically, Mac apps store their settings with (NS)UserDefaults. Settings stored with it get persisted to plist files in the user’s Preferences folder. One possibility would be to hook up UserDefaults to your app’s preferences window and use the settings stored in it when your app is launched normally and keep the CLI parameters as overrides. For more info on UserDefaults, just google around, there’s tons of stiff written about it
Unless you have to support legacy apps written in objc.
Legacy? Or successful? 🤔
any? both? :) I enjoy working with both languages. I am super happy and fotunate to work with iOS app development. It's truly a paid hobby even with all its quirks and challenges.
Right? I must Google these like twice a day. 
CleverError is totally right, I just add an example that I am using in my App where CAShapeLayer and found some helpful code snippets on the following links. 1. [https://www.raywenderlich.com/449-how-to-implement-a-circular-image-loader-animation-with-cashapelayer](https://www.raywenderlich.com/449-how-to-implement-a-circular-image-loader-animation-with-cashapelayer) 2. [https://blog.thefuntasty.com/swift-stroke-animations-e1b864917255](https://blog.thefuntasty.com/swift-stroke-animations-e1b864917255) 3. [https://collectiveidea.com/blog/archives/2017/12/04/cabasicanimation-for-animating-strokes-plus-a-bonus-gratuitous-ui-interaction](https://collectiveidea.com/blog/archives/2017/12/04/cabasicanimation-for-animating-strokes-plus-a-bonus-gratuitous-ui-interaction)
Hi sbulla1! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/avbolf/first_social_app/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
error :(
true that!
you're my hero, I'm going to try this later
Just came across to this heightForRowAt method in a project I am maintaining. Hate to see such a code written and pushed to production by so called Senior developers. Yes presumably this method used to work differently, nevertheless no developer should leave a code block without refactoring
Wow that makes sense
Call it a lucky guess, but I think they wanted to `return 44` /s
Not a pro at best practices or anything so besides the redundancy, can you share what’s wrong with this so I can be a better developer? Thanks for any clarity, tips, pros/cons. Best regards,
I think it is missing a switch statement. &amp;#x200B;
Prefer the use of `guard` statements to avoid indentation and follow the [golden path](https://github.com/raywenderlich/swift-style-guide/blob/master/README.markdown#golden-path) 
Too many nested ifs, and in this case they all return the same thing. Even if it has been refactored and the values used to not all be 44, the second else for the if header.text bit is totally unneeded, just return the other value outside of the if statement. Looks like the developer is also setting heights based on some header text equality which is horrible if you ever localize your app, you should be using the index path/section to figure out which cell is being updated, and then based on your data model update appropriately. 
Beside this unnecessary branches: this should be refactored out. Haven't seen a project that's actually returning this kind of stuff in a view controller (I'm assuming that's in side a view controller).
That looks really messy and inconsistent to me, but hopefully isn’t too hard to refactor ;) 
No no, the Swifty way to do this is with an enum and some switch statements 
When you need more time to make a coffee between builds 👌 ...oh my optimizer let me just give ya more exercises 
I don’t know what bothers me more, the redundancy, the lack of switch a statement or the lack of using a variable 👀
Good programmer should have done this 
uhm.. hmm.. uh what?
i guess you haven't seen many projects then 😉️
Well how else am I supposed to know what each 44 does if the logic of the code didn't tell me?
I bet if you look at the commit history at some point the heights were different values. Then they got changed and no one bothered to go in and re-factor the code.
So, always return 44. Got it. { return 44 } Problem solved. 
Absolutely
Swift Playgrounds is as good as it gets, I'm afraid. Apple doesn't allow third-party iOS apps to compile native code, including Swift.
This guy swifts
This has to be fake! 
return meaningOfLife + 2
 return 44
Well, that's unexpectedly explicit
Oh I don’t know .., return UITableViewAutomaticDimension
Would this work in ARKit. I haven’t found any links that will allow CAShapeLayer to be used and placed. Thank you guys for the links. I will check them out
Whoa, whoa. Gotta save some of those fancy optimizations for the compiler. 
Above junior level knowledge (like REST API, MVC, MVVM etc....) : He should know when and how to use a particular paradigm/pattern. &amp;#x200B; He should be able to write an app with overall architecture in mind (meaing create a robust base at the beginning so that its easy to add new fetures in the future). He must to be fluent in RxSwift/RxCocoa and use Routers/Coordinators. The senior is rarely usig (or better, not overusing) Storyboard or using it just for base UI design and the rest of UI elements is separated into code or XIBs. Except CoreData and Firebase the senior knows and uses Realm, PromiseKit... There are certainly many more characteristics of an iOS swift Expert but I (as a junior or mid level dev) would highlight: the senior developer should be independent and be able to teach his junior colleagues and help them grow. Help them to getting better developers.
Thank you a ton for the reply! Very, very, very much appreciated. &amp;#x200B; I'm trying to do this as organized as possible and as mentioned think I can handle everything except the "building teams and players". I'm on my 6th or 7th core data tutorial right now warming up. The structs above are exactly my direction but it will involve the need for core data use. I basically want to build several "contact" lists with separate contact lists being teams and the contacts being players. &amp;#x200B; Once the Teams (contact lists) are created I can load them in the 2nd part to manipulate them with court position etc. for close to real time stat editing during a game. Its buttons/labels/+/- drag and drop stuff I can handle. Basically I would be editing results of a game and save it with the personal stats. &amp;#x200B; The 3rd part would be a simple results page of breaking the stats down. I'm talking basic high school sports so I'm not sure if I need to go all out with SQlite etc. &amp;#x200B; I have been using this tutorial [https://www.youtube.com/watch?v=2hNT-MGtZUA&amp;t=587s](https://www.youtube.com/watch?v=2hNT-MGtZUA&amp;t=587s) as a foundation &amp;#x200B; It is in the direction I need although I will be using a ipad for more screen space. &amp;#x200B; &amp;#x200B;
I’m aware of that, but the editor with proper indentation, snippets would be sufficient. 
Interestingly, you can also compare parenthesized comma separated lists of values in C, C++, and Objective-C, but although all the items in the lists are evaluated only the last elements take part in the comparison (and you can compare booleans in C and Objective-C) In C and Objective-C: ("blue", -1) &lt; ("purple", 1) // Evaluates to true ("blue", false) &lt; ("purple", true) // also evaluates to true. So: Don't let your Swift reflexes lead you astray when writing in other languages.
Why would these languages do anything other than left-to-right lexicographic comparison?
In those languages, comma separated lists evaluate each item in turn, and return as a value just the last element. So, for example (1,000,003) == 3 // Evaluates to true
Because there are no tuples in those languages. What you are seeing is a rather disliked construct called the comma operator, which evaluates all expressions and returns the result of the last one (discarding the rest).
Why don't you get the updated version of your dependencies?
Yeah, it's called boxing. You can also use inout function parameters. But whenever inout is the answer, the question is most likely wrong. Why do you want to "pass value type by reference"?
Requiring knowledge about specific framework is always a red flag.
If you have a function that takes an UnsafeMutablePointer as a parameter, then passing a value type preceded by an &amp; will pass it in as a reference. You almost certainly don't want to be doing this.
[Here's a post](https://reddit.com/r/swift/comments/aolf6y/using_structs_for_models_but_you_need_model/eg1t5zz/) I made a bit ago: ---- Sure you can reference a struct, just wrap it: class Reference&lt;Value&gt; { let value: Value init(_ value: Value) { self.value = value } } Now you can hold references to the class that wraps the struct and pass them around: struct Foo { let bar: Int } let firstReference = Reference(Foo(bar: 5)) let secondReference = firstReference 
So would you say it’s more about understanding the base language and design patterns? Not frameworks?
You're overconstraining what he said. &gt; Over other languages, Swift doesn’t help me with what’s actually hard about writing code: thinking through exactly what I want to happen. Once I know that, writing the code is mostly a matter of idioms, conventions, tooling, and richness and availability of good libraries. It doesn't help him think about problems in new ways. It doesn't help him solve them. Surely a programming language ought to be good for at least *one* of these.
Swift Developer = someone who develops the swift standard library iOS Developer = someone who develops mobile apps using Apple frameworks Having some basic knowledge about the features of the ObjectiveC runtime is a must. Being able to compare different (most of the time provided by apple) solutions to specific problems is also a must. (Like delegate, notification, kvo is all better than the others in certain cases) Know about symbolic breakpoints. Know how to use at least some of the debug utilities, like lldb, memory graph, visual debugger. Being able to use queues properly. Being able to identify/solve rare crashes with unclear descriptions. Being able to separate code while writing it instead of writing code first and possibly introducing bugs during separating it.
This guy gets it. ITT: people who have never learned or used Lisp, Hypertalk, Prolog, Smalltalk, Erlang, Haskell, Forth, or APL claiming that they understand what programming is about. Yeah, we get it, you know 7 minor variations on the theme that is C++. You sound pretty advanced! I'm sure you understand these topics better than the former *Principal Engineer of iPhone Software at Apple*.
Okay okay sorry *iOS developer using mostly Swift. Yeah that doesn’t necessarily seem advanced to me. I am strong with polymorphism and making protocol delegate methods. I’m pretty good with debugging, breakpoints, lldb expressions, and injecting expressions into breakpoints. I am taking a Data Structures and Algorithms class; I can implement anything from Queues to AVLs. Also familiar with GCD and DispatchQueues. This all feels like intermediate stuff, is it not? I wouldn’t know. I’ve never been employed as an iOS dev, just a college student.
Of course, (1,000,010) == 8 // also true 
Yes, it's generally better to understand the idea than to know how to use one implementation of that idea.
I'd like to be able to bet that at one point the return values were all different, but I have doubts 😑
When / why would you ever want to use this?
I assume it’s a placeholder for some future functionality, so they did it this way to allow for “easier” implementation down the road?
Well yeah, most of being an expert developer is about knowing ALL the basic stuff. But the the tip of the iceberg is being able to apply them on your own without anyone telling you what solution you should choose for a specific problem. From my experience with past/current coworkers(and their past/current code), if you have a complex screen and you can properly split up the control functions into a view controller and couple other controller classes and also split up the view into multiple reusable subviews, you are an expert. Same for problems that don't appear directly on the screen. Like how to manage an OAuth token refreshing. (I've seen at least 2 or 3 github repos for this but none of them handled the situation when multiple calls needed to use the token when it was expired)
r/programminghorror
💔
My attitude toward wild west has really changed. At one point it felt empowering. But now, with multiple huge decade old obj-c repos and a ton of devs, half of whom I've never actually met, hacking away at those codebases, I want zero wild west. Now, I want maximal ability to express and enforce requirements in the type system. Swift if far better in that regard than obj-c, even if it brings nothing new and exciting to the table as compared to other "good" languages. 
true, I think it's just nostalgia on my side, I opt for Swift like all the time now.
The whole point of Swift differentiating between value types and reference types is to make the semantics of the two explicit and help greatly reduce a category of bugs related to misuse and misunderstanding of reference types. If you want to pass by reference, you should be using a `class` instead of a `struct`. 
Would be nice to have some code to look at so that we can actually help.
Why would you use Alamofire instead of URLSession? I’m a beginner and I want to make simple apps, yet all of the tutorials seem to use Alamofire. If you can get JSON data with URLSession, why would you add another step unnecessarily? Also, where can I find some places to learn more about URLSession? I have had a hard time finding resources for that. Thanks!
&gt; UITableViewAutomaticDimension True, `-1.0` is the best height value. 
Xcode 10.1 supports ships with the Swift 4.2 compiler, which supports 4.2, 4, and 3 language modes. These are the only possible versions of SWIFT_LANGUAGE you can set in that version of Xcode. So what's your problem again?
Pfft: ‘return indexPath.row%2 == 0 ? 44 : 44’
Right and wrong are just words. What you return is all that matters. And brother, never bet against returning 44
Guard isn't what you would want to use here. Guard is for checking preconditions, not as an alternative to the if statement. 
I guess you could use it to sort by several keys in decreasing importance. e.g. if you were sorting employees employees.sorted(by: { ($0.company, $0.department, $0.title, $0.lastName, $0.firstName) &gt; ($1.company, $1.department, $1.title, $1.lastName, $1.firstName) }
Nice, hadn't thought of that.
I’m just messing with the storyboard I didn’t think code was needed for layout on the storyboard 
I expect to see three unit tests to get complete path coverage!
I also started with swift as my first coding language. I consider myself an intermediate developer and have never worked professionally as a developer. I have found the best way to learn is to just do random projects. I started out with simple applications and then as I learned more I started more complex ones. If you are having trouble on a project don’t feel ashamed to use Google but always try to understand the solutions you find. Another important thing to keep in my mind is you never really stop learning when it comes to programming. 
I know this is a *very* niche tutorial, but it’s a problem I run into frequently and thought some others may like my fix. FWIW, I have reported it to Apple
Preconditions like checking if a text label has a specific value? (Per the code OP posted) obviously in this case, any `if` or `guard` is unwarranted since it always returns the same value
Preconditions that would cause the method to not be able to do it's job. Checking whether a text label has a specific value, and then doing one thing if it does, and another if it doesn't, isn't in that arena. 
Valid point, but, my point is to diminish code indentation and preferring `guard` statements help with that since they force you to do early returns. This is an opinionated subject, and the golden path (linked in my original comment) described by the coding style guidelines of raywenderlich, fits my personal preference. You're free to achieve code readability in your preferred way
I seem to post this every few days haha But Intro to App Development with Swift is a great book for total noobs. you can then progress to App Development with Swift which will take you quite far. They are written by Apple and is a great resource for free. 
I'd be more inclined to believe they actually had three separate values at one point but as the app evolved they swapped out all the values for 44 over time without seeing what the result was. I've seen that sort of thing in my own code...
I don’t get this😖
Heathen! It's `UITableView.automaticDimension` now! 😜
Hell, if you don't write code like this, then you're wasting all the time and effort that went into that compiler optimization.
Lol just return 44. If all cases return 44 😂. #Fake Code
&gt; I'm sure you understand these topics better than the former Principal Engineer of iPhone Software at Apple. That's a nonsensical argument, because you can reverse it easily: Bertrand Serlet collaborated on the early design of Swift and green-lit the project, and he is the former *Senior Vice President of Software Engineering at Apple*. Just because someone has a very impressive resumé doesn't mean their opinion is universal truth.
Unfortunately my daily dinosaur (errr I mean objective C) is showing...
The Carthage package downloaded the Swift 4.0.3 version. I also had to download this project from another machine as I was unable to download it at that point of time. It seems that the project uses some 'out-dated' dependencies.
[https://www.raywenderlich.com/](https://www.raywenderlich.com/) &amp;#x200B;
WHO DID THIS????
Just to add on to this. https://www.hackingwithswift.com
Honest question, is using enums wrong?
I would say any set of criteria that exclude Chris Lattner from "advanced/expert Swift developer" status is fundamentally flawed.
So ... what *is* the error?
No it’s actually the swift way. I’m not smart enough to explain but I’m sure it’s to with the fact that enums are first class types meaning that they adopt many features traditionally supported only by classes. 
No it’s actually the swift way. I’m not smart enough to explain but I’m sure it’s to with the fact that enums are first class types meaning that they adopt many features traditionally supported only by classes. 
What are differences between structs and classes? 
Chris Lattner is so cool. I wish I had a career like his! He’s made so many influential things!
For entry level candidates I usually ask a few questions just to be sure they actually have a working knowledge of the programming languages needed for the job. It still surprises me how often people claim technical skills on their resumes they don’t actually have. For our iOS work, we use Swift, so I usually start with some simple syntax questions to gauge a basic level of competence with the language. For anyone who has read the language spec, they are easy. A couple examples: What’s the difference between try, try? and try! What is the default character storage for strings? What are some of the special features of enum that you don’t find in other languages? Then, I usually ask to see the candidate implement a simple function based on an equation I provide. Often, I use the Fibonacci sequence for this. 
I tried to changing it to Swift 4.0, but when I tried to get the dependencies from Carthage, I got an error message when Carthage was compiling the said dependencies.
 heading.text == "Menu Categories " ? indexPath.row == 0 ? 44 : 44 : 44
` heading.text == "Menu Categories " ? indexPath.row == 0 ? 44 : 44 : 44 `
Simple answer: anyone coding Swift for the last 5 years.
Some very simple tips for your next post: - explain what it is you want, I’m not going to look up an app and tell you exactly how to build it. - explain what you’ve tried. If you haven’t tried anything and basically just come here asking “how to build a complete app”, I will not devote any time to helping you. Not trying to be rude, but if you add these things to your post someone might help you.
The NS prefix comes from the days of **N**eXT**S**tep (there's also a claim that it stands for Next-Sun, but there seems to only be one source for the latter). The use of the 2 letter prefix was a solution to the lack of namespaces in objective-c (you could even register your own 2 letter prefix with Apple back in the day - probably still can, although it's kind of a waste of time) The String in swift is new, and different to NSString (which still remains in obejctive-c), the new String is native to swift. I don't know Apple's plans, but it's unlikely they will create a swift specific version of NSManagedObject (but if they do, it shouldn't impact your use of NSManagedObject)
Ashamed to say although I have worked 3 years+ as iOS dev I am not confident in answering some of the example questions you asked 😅.
1. Bitmoji is a very popular app. So, I assume I'm sure a majority of people here would at least recognize it and what it does. 2. Don't be rude. You need to look from a beginner perspective with 3 months of iOS. What do you expect me to say? I tried googling the words "how to make a Bitmoji clone" OR "custom emoji avatar maker iOS swift", Nothing comes up for me. I even tried looking up through GitHub. Nothing. I can fumble though Apple docs for another wasted week or ask a question here and try to get help.
Obviously UIKit and AppKit aren’t available since they’re not open-sourced. You get Foundation and then whatever the frameworks provide. Core Data doesn’t make sense in a web framework as it simply doesn’t scale, but each of the web frameworks have ORMs for interacting with a database. I agree, the main problem at the moment with server-side Swift is it’s immaturity, it doesn’t have the ecosystem of Python or NodeJS - yet. Having said that, there are packages out there that cover 98% of server-side requirements. The [Swift Server Working Group’s](https://swift.org/server/) focus is fostering an ecosystem of packages built on NIO that will help grow the ecosystem. Swift is playing catch up with the main players as it started years later, but it’s getting there.
This code will fail. There is an extra space at the end of your String :(
Cant say I’m nostalgic for Objc, but yea, definitely miss the days when SourceKit was super-fast, and I never had to open a project to discover a monolithic storyboard...
&gt; Surely a programming language ought to be good for at least one of these. No, not really. I mean, the first is completely dependent on what languages you've been exposed to beforehand, the second is a purely subjective assessment of how much a language maps to the way you've come to think about code, and both are dependent how good you are at picking up on new concepts. I mean, just look at how many people here have trouble picking up on and employing Optionals. There is no one language that will be good for at least one of those two things for all people.
As someone pointed out there, you need to convert the result into octal to match the standard display of permissions as numbers. Or you could just check the appropriate bits. `String(511, radix: 2)` returns `111111111"` 
Oof have 4😭 started with Swift 2
Read a lot of code, write a lot of code. Find some open source projects and try contributing to them -- there are a couple that have been advertising here for help. If you have a bit of cash, maybe buy a month or two of access to the Swift Talk videos from [objc.io](https://talk.objc.io), but not before you get comfortable with writing some things in Swift.
Assuming you're a CS major, and assuming you've learned enough to write a complete program - you shouldn't apply to internships. Spend some time and write a few programs as a portfolio and apply to full positions. There's a high enough demand for devs that you should be able to get a job if you're halfway competent. 'Internship' positions will really just be unpaid dev positions in shitty companies looking for free labor - which is actually illegal in the US, but companies do it all of the time anyway. Spending a few months writing a few programs + 1 or 2 years being paid will get you further financially and professionally than spending your time as an unpaid dev at shitty company or being a 'real' intern fetching coffee. If you've got a working knowledge of swift, you've got a leg up on most devs. Swift is only 4 or 5 yrs old so not a lot of people are proficient in it yet. Keep an eye out on this sub - notice most of the tutorials here are either lofty philosophical rants or really basic tutorials. The overall knowledge base is pretty low. If you're applying as an intern to a known company - ie: Apple, Microsoft, etc, then that may be worth the time - however, if you've got the skills, credentials, and portfolio to get a legit internship at one of those places, you've probably got the skills to land a well-paid position anywhere else. I'd really only recommend the internship route if you've got some big confidence issues and doubt your skills and want an environment where no-one is going to flip when you demonstrate incompetence. That said - alot of workplaces are grotesquely disorganized, have codebases that are cobbled together messes of gibberish code, or are clueless startups following trends. Getting an internship at one of these places will only give you confidence by informing you of how clueless you were in regards to your over-expectation of professionalism in the real world. If you go the internship route, be picky.
Hey, SirWeeble, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
iCloudKit
You have to make sure all of your dependencies are compiles with the same version of the compiler. 
Most structs / classes that have dropped the « NS » prefix in their Swift implementation (NSString, NSURLSession, NSPredicate and such) are either part of the Swift Standard Library (String, Array, Int...) or Foundation framework, whereas NSManagedObject is part of the Core Data framework. I think they had to move away from the « NextStep » references for all the things in the Standard Library since Swift is multiplatform, and they’re trying to do the same for Foundation. Not sure if they’ll do the same for the other Cocoa Frameworks. In the case of the Core Data framework, I always found a bit weird that its classes are prefixed with NS, whereas most frameworks prefix their classes with the initials of their names (UIKit / UIViewController, User Notifications / UNNotification, CloudKit / CKRecord and such). 
You have to try, I actually never worked with ARKit, only Sprite- and UIKit so far. Planning to work with ARKit in the near future, hence can tell later ;)
Looks great, can't wait to play around with it!
Damn this is great! Also great README too
Thank you!!
❤️
Nicely done! I like the README. Just wondering, does the width change based on content or is it a fixed size?
The width is currently constant, but of course the height is dynamic!
i actually like the UI prefix. good point.
Oh no now my code won’t return the correct value
Not protocol and extension, use protocol extension.
Very nice.
Love the name 
Thank you, im currently doing 100 days with swift and Angelas Udemy course. Hopefully it’ll work out 
This looks awesome! Can't wait to use it!
Thank you!!
Nice work, gonna replace all the info alerts with this! :D
😍
Looks awesome. One note is that the docs show that we can provide different **styles** but the parameter is shown as **state**. I haven't had a chance to look at the actual code, so perhaps the docs are just wrong, but personally I think that style makes more sense vs state.
Good catch! I'll update the API in an upcoming version 💪
Use protocol extensions: \`\`\` protocol Animal { func eat() } extension Animal { func eat() { print("Animal.eat") } } protocol Bird: Animal {} extension Bird { func eat() { print("Bird.eat") } } struct AnyAnimal: Animal {} struct AnyBird: Bird {} struct Eagle: Bird { func eat() { print("Eagle.eat") } } AnyAnimal().eat() // Animal.eat AnyBird().eat() // Bird.eat Eagle().eat() // Eagle.eat \`\`\`
Even screenshots would be helpful. 
I'm very new to Swift (coding in general), this looks superb. I'm yet to learn about including frameworks and cocoa pods, but when I do, this will be used. Great Work
Storyboards are whole other can of worms. FWIW, despite having huge legacy apps, we've managed to arrange things so most new dev is in smaller self contained modules shared between those legacy apps and all UI is in code. With that setup, xcode performance is generally pretty decent. Well, other than it crashing a 2 or 3 times a day :|
I have published two libraries written in Swift. One is a logging library, [JSLogger](https://github.com/jsloop42/JSLogger) with uses the new os_log on both iOS and macOS if available. Another one is a CSV parser library, [JSCSVParser](https://github.com/jsloop42/JSCSVParser) that parses large amount of CSV efficiently. Have a look at it!
Sorry about that. It just returns nil, as in it can’t get the image data (and consequently can’t write it)
This is sick bro! Great contribution. Any info on maximum text length/lines? Is it dynamically adjusting based on content?
Had the same Q, good thinking and great contribution!
Swift is like a Nissan Leaf. It won't expand your perspective about new ways of transportation like one of those quadcopter style hover bikes would have, but let me tell you it's a massive upgrade over a 20 year old moped. It's got heat, seatbelts, airbags, doesn't fall over or break down and keeps the snow and rain out, and can haul several people plus groceries. It's not the first car ever made, or even the first electric car, but it's a solid daily driver that I can actually use today. I mean just look at optionals. They were new and scary(even though haskell had them since the stone age), but every time I have to go back and touch obj-c code I groan because I don't know if anything there actually exists. The nill problem (and the optional solution) have existed for ages, swift just gives nice, ergonomic tools for dealing with it in a daily driver language.
very good! Thanks
Very nice, Im gonna start using it ;)
Took a quick glance at it so sorry if my following question was answered already: *Does it allow you to hook a function to it which gets called whenever the user taps on the view?*
Not yet. Coming soon for sure! I’ll update you when that’s released!
Sweet! Other than that I think it’s a great little framework. Aesthetically pleasing, flexible, and easy to use. I’ll be consider integrating it into my project in a couple of weeks after experimenting with it and making sure it’s stable. Thanks for sharing the framework!
Hello its_Lucifer, I hope you have a wonderful day!
Thank you! Appreciate it :)
Very nice i will give it a try. Thanks.
Nice work. Sad it's iOS 11 and higher only.
Thank you! It actually _might_ work on earlier OSs, I just haven’t checked.
There are probably even better ways, but something like: let alphabet = Array("ABCDEFGHIJKLMNOPQRSTUVWXYZ") let eightRandChars = (0..&lt;8).compactMap { _ in alphabet.randomElement() } is at least cleaner.
I *loaf* this post.
👏🏼👏🏼👏🏼
FINALLY!!! Thank you, kind sir! will definitely use this later!
Use [init(repeating:count:)](https://developer.apple.com/documentation/swift/array/1641692-init) to generate an array.
&gt; I am reading Swift does not have dynamic dispatch. It very much does. You must have misread (or read something wrong). Swift has class hierarchies and virtual methods and virtual protocol dispatch like all other OO languages.
Yes, using `inout` (although that’s not guaranteed to pass by reference, by it generally will).
This is terrible advice. It’s also just flat out wrong. Most internships are paid very well for CS unless you go to some tiny startup. And also they provide incredibly valuable experience and contacts. You are a sophomore, so now is definitely the time to be applying to internships and getting practice interviewing. At the same time though, make sure you have some personal projects you do in your spare time, as they will help you get an interview and get your foot in the door. SirWeeble is clearly way to far removed from college to know how it works these days.
This is fantastic. Great work!
Yes, it’s non-blocking (e.g. that’s why you process the response in the completion block, and not inline, in a second instruction.). In your code there’s a bug though related to cell recycling (if the cell gets recycled before the image gets downloaded you’ll update the image on the wrong cell).
You have to be careful with this. Say you do: `let alphabet = Array("ABCDEFGHIJKLMNOPQRSTUVWXYZ")` `let eightRands = Array(repeating: alphabet.randomElement(), count: 8)` You're going to get back an array with 8 copies of the same random character. it doesn't call random element for each slot, it calls it once and makes `count` copies of the result.
How can I fix the recycled bug and retain cycle? For the retain cycle can I do a weak unowned self kind of thing? 
Good job! I hate writing these!
Whoops, I see. Thanks for the correction.
Which of course leads to doing something like: `let repeatRands = Array(repeating: alphabet.randomElement, count: 8).map { $0() }` which does work. Not sure I'd do it that way, but it does work.
There's a login to the site so we can't see it, post the test here.
Yes, it is asynchronous. You could just use [kingfisher](https://github.com/onevcat/Kingfisher) instead if you don't want to worry about creating a new class and such. &amp;#x200B; Make sure to use a fixed image size, or call .setNeedsLayout() in the completion block: cell.imageView?.kf.setImage(with: url)
I hate to say this - but seriously look at almost any example you can google ... that’s exactly what a tableview does.
Interesting, thanks.
I tried compiling those dependencies on Swift 4.2.1 using Carthage, but I was unable to compile. So, what I want to know is it possible to use the official Swift 4.0.3 compiler (from Apple and not from swift.org) on Xcode 10.1
AlamofireImage also contains the af_setImage method if you want to just set the image into your imageview that way
&gt; I always found a bit weird that its classes are prefixed with NS Core Data uses NS because it's one of the 3 frameworks included in Cocoa. Cocoa = Foundation + AppKit + Core Data. AppKit and Foundation also both use the NS prefix.
``` let a = Character("A").unicodeScalars.first!.value let z = Character("Z").unicodeScalars.first!.value let result = String((0..&lt;8).map { _ in Character.init(UnicodeScalar.init((a..&lt;z).randomElement()!)!) }) print(result) ```
As someone who's built something very similar for my company, I appreciate the elegance of `LoafManager`, so nice work!. One improvement I suggest is to (optionally) present these in their own window so that they persist during navigation.
Ouu good call, I hadn’t thought of that. Thanks for your feedback!
Looks so nice! Good job. I needed this
Busy reading Pro Swift by Paul Hudson. Great book to get a better understanding of Swift. Also came to the (rather late) realisation that PlayGrounds is amazing for trying out code samples and experimenting. The ideas stick more, when you actually \_do\_ it rather than just \_read\_ it. 
oof. why ios 11+ for something so simple? 
Thank you!
Nice ❤️❤️
Yep, strong/weak dance to break the retain cycle. For the recycling issue, you need to match some sort of identifier, to check it’s the same when image download finishes (e.g. if cell.tag == the_tag_its_been_triggered_for). Another way is to store some sort if view model on the cell itself and match against that, but the tag thing should do it for most of the cases.
I have added screenshots 
They have a good eBook on the subject too, if you don't mind paying a bit.
Super sick, and very beautiful UI. Can't wait to play around with it as well!
Please make it ios 10+...
You don't have to post it in both iOSProgramming and swift.
92% of devices are on 11 and 12. That's one good reason to not bother. Have you tried running it on 10?
 extension Bird { var birdEatCount: Int func eat() { print("Bird Eat") } } How do you use variables ? XCode tells me Extensions cannot contain stored properties
They go into your struct, extensions can only contain computed properties
I read it while reading about why Swift does not have Abstract classes. Now i sure hope I can create the same kind of class model like in C# and Java. I am starting to like Swift. But the lack of abstract classes is a real bugger.
What's a good way to keep track of useful frameworks that I might need later? 
I am not getting it. what was a clean and easy to understand model become a convoluted mess of structs and protocols.. It was a 3 classes model of **Eagle** isA **Bird** isA **Animal** How can you hope teaching this model with Swift to students?
You used to work with class and inheritance. With struct, you use value types and composition. A struct can’t inherit anything, but can implement protocol. If your Bird protocol defines a var, your concrete implementation must implement it.
You used to work with class and inheritance. With struct, you use value types and composition. A struct can’t inherit anything, but can implement protocol. If your Bird protocol defines a var, your concrete implementation must implement it.
It is not a retain cycle... As soon as the image is downloaded or fails self will be released and it will dealloc if its retain count is 0 at that point. The cell reuse issue can easily be solved by storing the networking object as weak and then just calling cancel on it before this downloadImageFromURL 
Right, Swift doesn't have abstract classes/functions. But it certainly has virtual functions and dynamic dispatch.
Personally I prefer Kitura but both are good frameworks. Ray Wenderlich just released a comparison between the two: https://www.raywenderlich.com/1323930-vapor-vs-kitura-choosing-a-server-side-swift-framework
Click Star on Github.
It's the bread and butter of every iOS project.
I am using a MBP from 2014, it’s fine. Only issue is if I open a huge Storyboard, which is bad practice anyway. 
The point of the HackerRank challenges, especially with tests to stress performance, is to get you to think about ways hone your code. So what’s the point of asking Reddit for the solution? Just call it done at whatever % pass level you got to if you don’t want to fight with it. Or you can even look at the solutions posted on HR by other people; the site will let you do that. You should keep in mind, though, that to pass all HackerRank perf stress tests, you’ll often have to write code that you would never want to write for real production implementations.
By default I want a class hierarchies. I have been using them for 15 years. Basic OO Design As much I started to like Swift, the lack of clean abstract classes is a glaring black spot on Swift nose. You say I used to work with class and inheritance like its a bad thing. Every major languages use that and for good reasons.
Sure but it seems silly to up the ios target due to just a toast... usually i do that for new features. Some close friends and family still use ios 10. 
The cocoapod is ios 11+. So i cant even install it. So i couldnt try running it
Lmaooo
 let alphabet = Array("abcedfghijklmnopqrstuvwxyz") let randoms = Array(alphabet.shuffled().prefix(8)) guarantees no duplicates, which may or may not be what the requirement is
&gt;My point is, after two days I failed to optimize it to do the job on a huge string in a reasonable time, for the sake of optimization. Now i'm curious about what can be done to make it faster, I don't care about getting more starts. 
You’re right, I thought the « core » frameworks of Cocoa were Foundation and AppKit, but Core Data is indeed part of it too. That makes more sense now. Thanks for the input, please have my upvote :)
I’ve never even seen it. I used Ray’s book and some YouTube videos.
Fair enough. On HackerRank they’ll let you view and participate in post-challenge discussions, as well as view solutions other people got to work at 100% pass rates (or less, if you choose). I think you might have to unlock them with Hackos, but those are useless if you don’t spend them, right? I doubt you’ll get any good/valid discussion here simply because I know what it’s like trying to get those last, timing out, tests to pass. Just a bunch of trial and error, trying to figure out exactly what it will take to get there and feeling sure it’s not possible. But then looking at the stats for previous solutions and seeing that yes, there actually are some people who got to 100% using the same language you’re using. (And noticing that far more people didn’t make it to 100%.)
Let's use an example: protocol Animal { mutating func eat() var eatCount: Int {get set} } extension Animal { mutating func eat() { eatCount += 1 print("Animal Eat")} } protocol Bird: Animal {} extension Bird { mutating func eat() { eatCount += 1 print("Bird Eat")} } struct Eagle: Bird { var eatCount: Int = 0 mutating func eat() { eatCount += 1 print("Eagle Eat") } } The base protocol is `Animal`, it declares a method `eat()` and a property `eatCount`. All objects that adhere to this protocol will have this method and property. There is a default implementation for `eat()` in an extension to `Animal`, it's called if the implementing object does not implement the method itself. The `Bird` protocol inherits from the `Animal` protocol. Since it doesn't declare anything new its declaration can be empty. There is an extension to `Bird` that provides its own default implementation of `eat()`. The `struct` `Eagle` adheres to `Bird`, since `Bird` inherits from `Animal` then `Eagle` also adheres to `Bird`. `Eagle` is a `Bird` and is a `Animal. `Eagle` has a definition for the property `eatCount` and an implementation of `eat()`. This is where the actual storage is defined. So the modeling is pretty much the same as in other languages, just using `protocol` as the way of modeling the hierarchy. 
Seems like they want repeating characters though. 
Who is talking on Swift’s topics about bios (left down corner)?
Where's the retain cycle?
I also use KingFisher.
It's two different schools of thought. Inheritance vs composition. Not having abstract classes is a language design decision, not a Swift shortcoming. This is the video start started selling me on composition: [https://developer.apple.com/videos/play/wwdc2015/408/](https://developer.apple.com/videos/play/wwdc2015/408/) I very rarely am finding myself writing subclasses in Swift nowadays and I actively try not to
Ok, my bad. There’s no retain cycle since self is not keeping the block alive so the block goes away whenever the network singleton releases it. However, I’d still do the weak/strong dance to allow self to get deallocated when it goes off screen (if it’s a view controller, for instance) rather than wait for the network response (small edge case though)
Right right :)
It’s more random trivia than anything 😄 Especially since it came so much later than the others, it’s kind of strange.
Some general career advice: adapt. Swift isn't wrong because it doesn't match functionality to the language you are most used to. And that language won't be wrong if it doesn't provide a useful tool that Swift offers. They are just different. Everybody single person at every single office of every single tech company hates people who say things like &gt; Swift way of dealing with this kind of modeling class hierarchies seems totally counter intuitive. Just adapt. It works fine.
The requirement was apparently not to use any of the letters I, O, R, U, or W.
I think this highly depends on if you want to expose that api to your sdk users or not. As a rule of thumb you shouldn’t force your users to use a particular library (RxSwift, PromiseKit, etc). But if you need it for internal use then I think it’s perfectly fine to use any instruments you need. P.S. highly recommend to choose RxSwift over PromiseKit. 
&gt; What is the default character storage for strings? This, of course, changed just a couple months ago, so it's probably better to ask "How might you find out the default character storage for strings today? And in what cases would it matter at all?"
What have you tried? Did you run a profiler or debugger on your program? &gt; My hunch is .first() and .last() have access time larger than O(1), but I'm not sure. Based on the documentation overview of Substring, I don't see any way `.last()` *could* be implemented in O(1). Without giving a complete answer, I'll say: - You seem to be using Strings as Arrays. These are very different data structures. - The function is very long and full of redundancy and never-taken branches. I'm having trouble following what it's trying to do, and it would be difficult to extend. - It starts with 15 lines of vars! Many of these are only initialized once and never changed. Most of them are used far away from where they're declared, and many in a different scope. - You've re-implemented half of the standard library in here, inline. When you need to map a set of characters to integers, and then perform the same operations across all keys/values many times, you shouldn't start by reaching for named tuples. It's not surprising that performance of this function is bad. It's not written in a way to make performance easy to reason about. For example, you wasted 18 lines on `charsToCheck`. On line 16, it's a var assigned the empty string. On lines 49-60, it's built up from `geneLetteresToBeRemoved` (sic). On lines 147-151 in the main loop, it's re-checked for emptiness. It never changes, though that's not obvious from the declaration. It's also perfectly redundant with the test on lines 45-47. This one var isn't causing your performance problems, but it's needlessly adding the mountain of code that you have to climb to find your actual problem. (Adding this made your function 11% longer, for no benefit.) Nobody can easily make sense of a 200-line function with 15 vars. Make your function readable, and I bet this will also fix your performance problems, and if not it will at least make them much more obvious.
What about training a model to identify something a user doesn't know what something is? Say for example, those gumballs that fall off our trees every day. The model will know it has a hybrid name and an area it came from. And so on. &amp;#x200B; CoreML with images of the unknown can help us, humans I mean, to learn new things without searching through a search engine calle Google. 
Framework would be public, integrated via CocoaPods... I would like to use RxSwift, however I would force clients to also install RxSwift if they would run pod install.. If only I could somehow take RxSwift classes use them, compile our framework without forcing clients to use RxSwift.. It could be done in Android
Hi everyone thank you all for the suggestions really helped me grasp how to go about this! Thanks! 
You can offer a subspec that includes RxSwift integration, while keeping the default spec simple.
But that would create code dublicate and even more maitainance.. I then still will need to provide difficult asynchronous programming without RxSwift to support versions without RxSwift... I wonder in general how frequently used is RxSwift across developers and apps in general? I thought that popularity decreased however I can't find alternatives. In Android we have kotlin couroutines in iOS there are no alternatives like that. 
What duplication? You base library would offer simple completion handlers or whatever, the Rx subspec would build on those. It would be completely separate. Or just ship the simple version and see what users ask for.
1) make your own programming book (by way of taking good notes on what you learn). Make it so anything you’ve already learned you can look up in &lt; 5 seconds when you need to review it. There’s a ton of tiny details in the Swift standard library and Apple Foundation Framework; it will frustrate you if you cannot quickly find the way to do something you’ve done before. 2) avoid third party frameworks, libraries, cocoapods, etc. If you can do it with native stuff use that. When one is trying to learn cocoapods are a hindrance, not a help. The exception is when you want to tackle a project or area of programming not covered by the native frameworks. 3) when you start making your own projects independently of any learning book or program: - any new APIs you learn should be learned independently of the project, and only for what you need. Trying to add multiple APIs to your repertoire in one go is usually overwhelming. If each new type can be learned in a Playground or small project first, and you note your findings (see #1), the project is more likely to be successful. - Swiftdoc.org: when you get to the point you’re learning about generics, familiarize yourself with Swift’s protocols in the standard library. The protocol inheritance graph is super-useful. - when doing sample problems with text input, avoid retyping the text or formatting it in anyway. Make parsing the text part of solving the problem.
Hey Lucifer, you can hook a function to a tap by specifying the completion handler. See https://github.com/schmidyy/Loaf#other
Awesome! Thank you :)
Yep, by simply removing dead code, fixing inappropriate data structures, and using standard library functions where possible, the same basic algorithm here is about 60% shorter. That's short enough that it fits on one screen. Fixing the string/array issue also gets it to run in a fraction of a second for inputs in the 100,000 range.
I personally use the template for UI and then take out most boilerplate functions and add in whatever i need. 
Your a poes
That answer would put you straight to the top of my shortlist for an iOS hire, possibly at a senior level. For a junior level, any answer that shows some understanding of Unicode vs ASCII would get past an initial screening on that question. The substance of the questions is fairly immaterial. The key thing for me is to get a demonstration of some level of understanding. The depth and detail of the answers gives me a rapid way to gauge language expertise. But a failure to get any level of correctness is an easy way to spot applicants who put a skill on their résumés without any real experience in that skill. To really dig in, I generally crank up the difficulty of the questions until the candidate gets stumped. I never expect a candidate to answer all my questions correctly, but it can be really informative as a means to explore the strengths the candidate can bring to my team.
I've simplified it to this [https://pastebin.com/ASpQQWtY](https://pastebin.com/ASpQQWtY) but yet the same results
1. Start by naming your classes with a capital letter. 2. Wrap your UI elements in a View and add it to your controller 3. Create a model that holds the data for displaying the correct UI (View) 4. Let the controller be the glue between the Model &lt;&gt; Controller &lt;&gt; View. 
Has anybody here created a Swift Package Manager for Linux? If so, what did you create and why? I do believe Swift can be used for ALMOST ANYTHING, even if you don't a Mac. Why should any of us care to devote time to something that may or may not matter? I like to hear others' success stories. The future may rely on it. 
The apple one works on Linux, without really any issues. I was just using it yesterday.
That's a great start. It now fits on one screen! So what happened when you profiled it? I ran it with a string length n=100,000, and over 99% of the time was spent in one stdlib call. When I googled it, the Apple documentation page for it says "Complexity: O(n)".
What do you mean "created" one? You mean compiled it? It's part of Swift itself these days.
Working on a project involving String Codable and Decodable. 
Why would you want to teach Swift to students? - "You’re unlikely to run into anybody that says that Swift is a simple language. Swift is a complicated language." -- Chris Lattner - "I think Swift is more complex than C++ for sure." -- Slava Pestov This is exactly the opposite of what I'd want to try teaching students. There are good, simple, and consistent languages which are great for teaching concepts of computer science and software engineering. Swift really isn't one of them.
Vapor 3.0 is easily the best framework for Swift backend right now with a very active Discord channel if you have issues/questions. 
Also another thing to point out is to have your protocol (delegates) conformance in an extension (they can be in the same file at bottom). But it allows for clear separation of methods that deal with different things for a view controller. 
Lots of object-oriented (and multi-paradigm) languages lack abstract classes, e.g., Objective-C, Ruby, Python, Perl, Lisp (CLOS), Smalltalk, Io, and Javascript. I've never heard the term "glaring black spot on the nose" but lack of this particular feature doesn't seem to have hurt any of those. Abstract classes mostly only exist in languages that descend from the Simula branch of the programming language family tree, like C++, Java, and C#. If you want that feature, you should stick to languages in that family. P.S. Are we bragging about how long we've been doing object oriented programming? I've been doing it for a lot longer than 15 years, and most of it in languages without abstract classes.
MVC is an architectural pattern, not a certification. You don't need to "technically satisfy" anything. It's for your benefit. You also can't just sprinkle it over a small piece of code. I don't know how one would take a small class without context and "refactor it to satisfy MVC", any more than you could take "2+2" and make it "functional".
Apple has an astounding number of examples for this. I'd start here: https://developer.apple.com/library/archive/documentation/General/Conceptual/CocoaEncyclopedia/Model-View-Controller/Model-View-Controller.html
&gt; Most structs / classes that have dropped the « NS » prefix in their Swift implementation (NSString, NSURLSession, NSPredicate and such) Wait, is there a `Predicate` value type now?
Nice quotes but I honestly think that Swift is a pretty simple language. Yes, there are places where it can get complicated but you can teach a simple subset of Swift and still get most tasks done. Once they have the basics down you then move onto protocol-oriented programming, generics, functional paradigms, and other more complicated topics.
A good tip is to read about multiple design patterns like MVC, MVP and MVVM to understand what benefits they provide. In iOS development MVC is not to hard to conform to which you will realize
Have a look at OperationQueue. It will take some work but I think it is what you need. To “chain” requests you can use https://developer.apple.com/documentation/foundation/operation/1412859-adddependency functionality.
This is a simple but really useful thing to do. Keeping conformances separate like this helps with keeping a class manageable. 
Breaking down a class into MVC is pretty easy. Your data? That's the model. Your UI? That's the view. Your logic that surrounds the two and binds them together? That's the controller.
I added Loaf to my project and noticed that it causes a retain cycle on the UIViewController that present it causing it to not deallocate. I'll open a PR with a fix.
Oh wow, good catch. Thank you!!
Do you want a PR or just tell you which line to change. It's a quick one.
A PR would be great! Is it with the UIViewControllerTransitioningDelegate? I had to keep a strong reference to it in the view controller, otherwise it would get deinitialized immediately after presenting (meaning the dismissal animation could not be specified) Thanks again!
https://stackoverflow.com/questions/39157254/assets-warning-the-image-set-name-xxx-is-used-by-multiple-image-sets Seems like you’ll have to rename the offending imageSets?
 Hi, You could do something like this: `let queue = OperationQueue()` `let operationWithYourRequest1 = YourClassOperation(init: someObjectForRequest1)` `let operationWithYourRequest2 = YourClassOperation(init: someObjectForRequest2)` `let operationWithYourRequest3 = YourClassOperation(init: someObjectForRequest3)` `let doneRequest3Operation = Operation()` `operationWithYourRequest3.addOperation(operationWithYourRequest2)` `doneRequest3Operation.addOperation(operationWithYourRequest3)` `doneRequest3Operation.completionBlock = {` `// request3 is done!` `}` This will solve the problem of waiting for requests. And don’t forget to add all operations to queue! &amp;#x200B;
MVC (and other architectural patterns) is a heuristic to make more maintainable code. But it’s not the end. Achieving the label of MVC doesn’t necessarily make code good. Programming is sorting. You have a room full of shit. There’s clothing everywhere, dirty dishes on the night stand, a tipped over box of DVDs spilling onto the floor, and a random assortment of miscellaneous knick-knacks you’ve collected over the years. Imagine those are parts of your application- most of the crap is necessary, but it doesn’t need to be *looked at* or stepped over. You don’t want to have to re-sort the DVDs when you trip over them to open the blinds, and you don’t want to sleep with week-old pasta. Clean your room so it’s useable again. Even if you throw the mess into the closet, you use the closet less than the room. If you can put the mess in a box in the closet, even better. The goal is to have the mess impact the smallest area. MVC is essentially saying put your shoes in the closet, not the pantry.
thanks mate
No, it’s actual “sender” var with you call Loaf.init. That needs to be weak.
Oh wow, I’m surprised I didn’t catch that. Thank you!
Here is the screenshot of Instruments: [https://i.imgur.com/n5EQmYU.png](https://i.imgur.com/n5EQmYU.png) It seems the culprit is `.index(after:)` Am I right?
If your listening to a .keyDown/.keyUp NSEvent with a custom handler, in that handler you can return nil for the event to stop it propagating. I have an example of this in one of my projects, the exact keyDown function can be found [here](https://github.com/lukakerr/OpenQuickly/blob/master/OpenQuickly/OpenQuicklyViewController.swift#L108-L142)
Who's working with SPMs? 
The Stanford iOS course does a great job explaining and using MVC for iOS development. 
Thank you for replying! In your project, it looks like it is a local monitor: NSEvent.addLocalMonitorForEvents(matching: .keyDown, handler: keyDown) In my code I have used a global monitor which requires the handler to be Void: NSEvent.addGlobalMonitorForEvents(matching: .keyDown, handler: self.handler) Do you know of a solution for this?
I just worked through a similar problem not too long ago. In a comment, you mentioned you use `NSEvent.addGlobalMonitorForEvents`. Reading the documentation for it, you find the following: &gt; Events are delivered asynchronously to your app and you can only observe the event; you cannot modify or otherwise prevent the event from being delivered to its original target application. This results in the keypress still being delivered. To implement a blocking event monitor, I wound up using the Carbon Event Manager API. While most of Carbon has been deprecated, the event manager API is still usable. Carbon has a `RegisterEventHotKey` function that listens for a hotkey (key + modifiers) globally, and does indeed block that key event. Once registered, you then use the `InstallEventHandler` function to handle the keypress. Carbon is very low level and there's no Apple documentation on it, but you've got hotkey support built it. After I already started using Carbon in my project, I found out about Quartz Event Services and `CGEventTap`. I didn't dig too much into it, but it seems to do similar things to Carbon (minus the hotkey monitor), as it can block events, and listen for all types of key presses. I believe that Quartz Event Services has a full Swift wrapper, whereas Carbon is just calling C functions directly in Swift. If this suits your needs, I think it'd be way better. My suggestion is to first look at `CGEvents`, and then use Carbon as a last resort. ---- *if you end up needing it, here is the latest documentation from apple on the Carbon Event API... from 2006* http://mirror.informatimago.com/next/developer.apple.com/documentation/Carbon/Reference/Carbon_Event_Manager_Ref/Carbon_Event_Manager_Ref.pdf) 
Ah yep you're right, It looks like it might [not be possible](https://stackoverflow.com/questions/48135509/how-to-mark-the-nsevent-as-handled) for a global NSEvent
Can you post everything that shows up in console below this error? 
Thank you so much /u/__UNNGH__ ! I think Quartz Event Services is exactly what I need. I am reading into its documentation right now.
That's the thing: it doesn't post anything in console. It shows error on line 36 in SwitchCell.swift. The error reads: Thread 1: EXC_BAD_ACCESS (code=1, address=0x1) XCode freezes the app, shows call stack and drops me into lldb console.
Hi! Your code: NSLog("isOn: %@", switchControl.isOn) The problem is %@ - it is for object. Fix: NSLog("isOn: %i", switchControl.isOn), cuz switchControl.isOn - is Bool. Better to use "print" or "debugPrint"!
Ah brings me back to the yee ol C days, means your accessing memory you don’t own, i.e. in swift probably something uninitialized. Most likely i’d say your switch doesn’t exist yet, swift lazy loads the view after the first reference to it (but not at a reference to something on it). So you probably gotta figure out if the view is actually loaded (probably should be doing this kind of stuff in the viewDidLoad)
Thanks. This solves it. Is there a format string for `Bool` to use with NSLog? Just curious.
So it dropped you in to the console, but there is nothing printed there? Nothing to read? You can enter in the command `bt` to see the backtrace, which should give you some more information. First thing i usually guess when i see this related to a xib/storyboard is that there is an improperly hooked up outlet/action. Hard to give info though, without more details from you. 
I googled the error and had a vague guess it might be something like this. However, this happens well after the switch is initialized and displayed. I added repro steps to OP. I though maybe the switch gets released before my code gets to it but it's not the case as well as the view is still in use and on the display.
No, it impossible to get TRUE ot FALSE using string format. You can use NSLog(switchControl.isOn ? @"TRUE" : @"FALSE") or %d or %i and **0** is FALSE, **1** is TRUE. &amp;#x200B;
You need to call `tableView.reloadData()` after `self.repositories = [myResponse]`.
I think you forgot to push your code to your repo.
Get the results and then segue into the tableview?
What? I literally have no idea where you got that. Are you just ignoring the panel that says "**Heaviest Stack Trace**", and going down the main thread call list to the 13th item, for some reason, which takes 0.0% of the run time -- 31 milliseconds out of almost 53 seconds?
You have to call DispatchQueue.main.async when got response and in this block you should put weakSelf.tableView.reloadData Fix: `override func viewDidLoad() {` `super.viewDidLoad()` `let reposURL = "https://api.github.com/search/repositories?q=learn+swift+language:swift&amp;sort=stars&amp;order=desc"` `Alamofire.request(reposURL, method: .get).responseJSON {` `response in` `if response.result.isSuccess {` `do{` `let myResponse = try JSONDecoder().decode(Repository.self, from: response.data!)` `self.repositories = [myResponse]` `DispatchQueue.main.async { [weak weakSelf = self] in` `weakSelf.tableView.reloadData()` `}` `}` `catch{` `}` `}` `}` `}` &amp;#x200B;
So whats the difference between DispatchQueue.main.async { [weak weakSelf = self] in weakSelf?.tableView.reloadData() } And DispatchQueue.main.async{ self.tableView.reloadData() }
weak to prevent retain cycles. If self could be nil - \[weak self\] or \[weak weakSelf = self\] &amp;#x200B;
MVC in iOS begins with not doing any layout code in your ViewController and it also shouldn’t know how or where to fetch the data from. dooHickeyRepository.dooHickeys { result in switch result { // either handle the error or a Model tailored for this view here
https://www.raywenderlich.com
Man, what a swift answer! (Pun unintended.) I love Reddit for things like this :D. Thanks for this, it looks good! :)
I found it extremely helpful, especially when I was just starting in iOS. I would usually start with a tutorial then supplement what I learned with more details from the apple docs. Hope it helps!
Sure does :)
Often happens when an outlet from your Storyboard isn’t connected to the .swift file, e.g. the variable was renamed in code (so use Xcode’s Refactor command rather than just typing the new name).
more spam...
Questions like this get quite a negative response, I suspect primarily because this sub has become frustrated with how often they get asked. The question itself is based on a completely flawed premise, that there's some special sauce that makes one kind of app vs another. There isn't. You just have to learn programming and computer science. There will be some details to learn that are specific to one field of development vs another, but the key to picking those up is to simply have a solid grasp of the foundational CS. Im sure this will make sense to you, in other contexts. Imagine asking a writing subreddit "hey guys, I haven't really written much, does anyone have a guide on how to write Harry potter books?" it's a very niche request (who the hell writes tutorial on writing Harry potter books, specifically?) and misses the point: you just need to learn to write.
you should really do add cells in a batch up date rather than just a reload 
[AppCode ](https://www.appcoda.com) [NSHipsters](https://nshipster.com) [“Things I wish I knew as a swift beginner”](https://github.com/Fried-Chicken/things-I-wish-I-knew-as-a-swift-beginner) [iOS Developer Roadmap](https://github.com/BohdanOrlov/iOS-Developer-Roadmap) 
Why do you prefer Kitura? 
No there's not. I have absolutely no idea why I wrote that, I must have had some other thing in mind but I can't remember what. So sorry about that.
It’s fine. I prefer separate folders because it’s easier updating a bunch of images at once. Assets might be better if you have multiple resolutions of the images, especially with app thinning. 
Do you need multiple sizes? If yes then absolutely use assets.
I could be wrong, but I thought putting stuff in assets allowed for an extra layer of fancy compression / binary slimming.
I think it's just for the "app thinning" technology and different resolution scale. Unless I'm wrong. 
You can also use `switchControl.isOn.description` \-- that is an String that can be printed or used with `%@`
\[ tableView \] in tableView.reloadData() should work too
just say no to udemy ;)
How do you load the images? With Image(named: )? Then you end up with annoying optionals. Placing them in an .xcassets file will allow for image literals.
Look, xcassets have many advantages. All UI resources are in one place. You can see the parameters of resources. You do not have to remember naming conventions. You can use xcassets without code. Apple advices to use it. My advice - if it is not a framework - always use xcassets. &amp;#x200B;
Why would you not use them in a framework too? You still get a lot of those benefits...
Here you go [https://i.imgur.com/aFKotNy.png](https://i.imgur.com/aFKotNy.png)
Wow! This is pretty great! 
Thank you so much!
Here’s a tip, if you are doing swift use ‘print’ instead of ‘NSLog’. You can then use String interpolation which is much more handy than the awkward formatting and they would not crash on something like this. 
I’ve used express before so it felt familiar and the OpenAPI (swagger) that gets auto generated with Codable routes makes it easy to do quick testing. 
Pretty cool dude! I have a question about this line: points.enumerated().lazy Here: for (index, point) in points.enumerated().lazy { switch index { case 0: path.move(to: point) case points.count-1: path.addLine(to: point) path.close() default: path.addLine(to: point) } } Since we're iterating over the whole list anyway what's the benefit of the lazy? 
Thanks for your comment. You absolutely right! 'Lazy' is not necessary here. Added automatically.
I see. I enjoyed your code though, it's very clear
I believe Alamofire works on the main thread unless a thread is specified. 
Agreed - just write a extension for UIImage that first searches the current bundle and then searches the main if that’s the concern.
Hey, I feel your pain! I’ve been learning Swift now for around six months and many evenings I feel exactly the same way, especially balancing a full time job, and my son and wife around learning such a technical skill! I therefore make sure I find an hour or two before bed every single night, even if it’s just to watch a few YouTube videos on a particular subject matter, or just to tinker with some code. My advice would be to start working on something. An app that has a particular interest to you. I choose to do a Lord of the Rings Quiz app, as I love the films, and knew I wouldn’t need to think too much about the content of the app, and could therefore focus on the functionality instead. I found that by the time I got through a lot of the available resources I was struggling, and someone said just start making an app. It won’t be pretty, it won’t go to plan, it’ll take a long time, but you’ll learn so much more by actually putting your code into practice. After six months, I’ve now had an app on the App Store for 2 months, and make a small (very small) amount on ads, but this is all taught me some hugely valuable lessons on the process, and I find it hugely enjoyable now! Hope this helps, one thing I’ve found is the developer community is so supportive, and so that has helped hugely as well. Oh, speaking of which, listen to some Swift podcasts! I would recommend Fireside Swift and Swift Over Coffee! Integrate yourself as much as possible with the language. 
Thankful for people like you. This means so much to me!! I just subscribed to BOTH of your recommendations, and will be listening to them. Thank you!! 
It might be easier to make a delegate for this and hook up to your interested objects that way. 1. Create a protocol that has the updates that you want. protocol FileChangedDelegate: AnyObject { func fileDidChange(file: File) } 2. Add a delegate to your file class class File { //... weak var changeDelegate: FileChangedDelegate? // Add a didSet block to all the variables you're interested in hearing about updates var: Var { didSet { changeDelegate?. fileDidChange(file: self) } } } 3. Make your controller conform to the new delegate, just like with a tableview data source or delegate. extension YourViewController: FileChangedDelegate { func fileDidUpdate(file: File) { // Update your view controller here } } 
No problem! One thing I would mention, they will talk about things in their podcasts that will completely go over your head (still don’t always understand what they’re talking about all the time!) but it’s just good to get involved as much as possible. Also, check out Sean Allen on YouTube, how videos are great, and also inspirational as he came from a completely non-developer background to become an iOS Developer! 
One reason to not use xcassets is when you need to localize images because they contain text or you want to adapt images for cultures like Indian people in your onboarding screens when the user’s language is Hindi. I’m also not sure if you can use PDF assets when not using xcassets, but I might be wrong. My advice: stick to xcassets and take out everything you need to internationalize. 
Release early and release often. Being paid while learning is motivation enough 
When you start learning programming, wondering how you’re ever going to learn everything is completely normal. Overwhelm is completely normal. It’s also completely logical - you will never learn everything about programming. That’s impossible. When you read a programming book, or watch a tutorial, you aren’t going to remember everything. That’s not how the brain works. You’ve just taken some information in, and the brain now needs to decide whether that information is to be stored in short term memory. Putting your attention on something is what determines this. But once it’s in short term memory, the brain won’t automatically select it for storage in *long term* memory. It needs more signal that it’s important. The signal is repetition. Writing code again and again. Getting it wrong, fixing it. Doing it again. Putting into practice what you’ve learned is the single most important thing to do. I’ve been a full time iOS Developer for 9 years, and I’m still learning stuff all the time. Every professional programmer in the world has to look stuff up that they’ve forgotten ever single day of their lives. So give yourself a break! May I ask why you think it should have taken you 4 weeks to learn? Who told you that?
For me, I can get the URL of the file by calling Bundle.main. Then you can call Image(named url:)
This is why I love reddit. Individuals like yourself, willing to share REAL experiences and tips. Thank you tremendously! I’m paying for something called udacity and the first session (2, total of 7 months) ends in april. There is a guideline that recommends completing each project by a certain time (class starter jan 22, first app due feb 24). 
This is why I love reddit. Individuals like yourself, willing to share REAL experiences and tips. Thank you tremendously! I’m paying for something called udacity and the first session (2, total of 7 months) ends in april. There is a guideline that recommends completing each project by a certain time (class starter jan 22, first app due feb 24). 
Using assets will give you an auto complete image literal. I don't see any advantage to manually typing a name, and separately instantiate the image. 
What should I put in my YourClassOperation , if am simply making a request with URLSession? Should I now create separate class YourClassOperation just for this network request?
This is awesome man!
Many thanks, my friend!
Thank you so much!
That is possibly the most useless title I've seen here all year.
Are you learning Swift, or learning how to program + Swift + application development? Learning 3 or more things at once is much harder than learning 1 thing at a time. Of the hundreds of successful programmers I've met and worked with in my life, precisely zero of them started with Swift, or by writing applications. If my first exposure to programming were Swift and applications, I'd definitely have given up. You gotta walk before you can run.
Well, the way that this program is set up.. they teach you the swift language first. I just finished reading/practicing strings, and now I am reading about collection types. After this it is object oriented programming and straight into ios app development, before finishing off with UIKit fundamentals. If that helps.. 
Angela Yu on Udemy - Good place to start if you have no previous experience programming. 
[removed]
That's [one possible optimization](https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID545). The compiler may choose to use that as an implementation strategy, but only if it matches the semantics of copy-in-copy-out. I tried a couple simple cases just now to see what it would do, and it differs between Debug and Release modes. When you give it enough information to be able to do so safely and efficiently, it often just inlines the whole thing -- so there's actually no "passing" being done at all! 
The swift Playbrounds App for iPad.
What's the project gonna be like?
Excellent work - I know a friend working with scanned invoices that would find this very helpful!
&gt;Excellent work - I know a friend working with scanned invoices that would find this very helpful! Thank you for your praise! I'll be very happy if this work helps your friend.
Writing an article why Swift if the worst language I worked with :P
This is awesome, have any reading materials about CoreImage stuff? Looks like you used it pretty extensively here!
You’re welcome, I remember that overwhelmed feeling very well and how much it got me down. It’s enough to make anyone procrastinate, but everyone who set out to learn programming (except perhaps people who start as kids) have felt it. Ah I see, I thought you meant someone advised you that you could learn iOS development in 4 weeks. So you mean you’ve been stuck on a particular topic that the course recommended should take 4 weeks? Which topic is it? It’s normal that some topics you’ll fly through, and some you’ll get stuck on. Just remember that your goal *isn’t* remembering everything - it’s just to *understand*. If you feel you understand what you’re being taught then you’re on the right track. Remembering the fundamentals comes later when you’re putting them into practice. Until then, you’ll always be looking them up either online or in a reference book - and that’s completely fine. One good exercise is to make a list of all the stuff you now know about programming that you didn’t know before. It’ll be a longer list than you think. Give yourself some credit for it, instead of beating yourself up!
You can do with CGEventTaps, but you’d need to get the user to whitelist your App for accessibility access. I made something to apply modifier keys across keyboards doing this.
If it's not your first programming language (or you feel confident) and only want to grasp the grammar of the language, I recommend Apple's swift guide. 
Exactly!!! It’s CIImage plus Filter. It does main work. Thanks for your interest!
No, not necessarily.. Right now, I’m learning about the building blocks of swift. So all of the words and symbols and commands that come together to make the code do different sorts of things.. there’s just so MUCH to learn! I can only handle a little bit at a time, but the feeling I get when I understand what I’m learning is wonderful. I’m struggling to learn how to put strings of code together and make them do different things. I’m constantly having to go back and find exactly what I need from multiple resources. So having to do that makes me feel like I make little progress, less than I should be making. BUT, after what you said, I feel better about just understanding what I need to. I think I’ll screenshot everything you have said and save it for later, and maybe someday credit the person who helped me get where I want to be. 
Hey thanks for sharing your good advice. Would you mind telling how you started getting into learning Swift over those six months? I code a course from Udemy and have been going through the basics on Swift Playground on the iPad. It just seems so daunting when I pull up a YouTuber and they’re blasting away at code and I’m just like... understanding the basics of if and loops lol 
[https://www.objc.io/](https://www.objc.io/) Has books and some of those have videos included. [https://talk.objc.io/](https://talk.objc.io/) Has videos, but behind a subscription wall.
**I’m constantly having to go back and find exactly what I need from multiple resources.** That’s exactly what you should be doing. It sounds like you’re on the right track to me. Keep at it. You can do it!
Please ask in /r/iOSProgramming — this subreddit is dedicated to the Swift *language*, so not necessarily Apple's frameworks — so you'll get more relevant eyes on your question than here.
Just hack it so that whatever VC you're interested in testing is launched first.
alright, thx.
To my knowledge, arkit gives precise distances. time is easily fetched. can't you upload that data at say 10-sec intervals and do a &lt; b with distances, but take into account who was there first timewise and make an arbitrary choice of who gets the spot? you switch on some edge cases etc. you would still have to synchronize via a server. since Bluetooth is not reliably usable at more than 10 m for backward compatibility between cars. GPS isn't that precise either but might be usable server-side. you would still need to sync car data and do the 'who was first' on the server? I might be wrong, but just sharing thoughts. 
why do i bother. don't downvote, explain why i was wrong instead.
Hacking with swift is amazing, I think I prefer it over Angela Yu’s course on Udemy because it goes faster. If you prefer to learn using videos then Angela’s course is good too. I personally prefer reading. I went through both btw 
Interestingly, when I run your code, I get different results in Instruments (maybe a Swift 4.x vs Swift 5 difference?). I *do* see the heaviest path being in String.index(after:), and… Looks like you've found a (known) missing optimization in Swift.String! Here's the implementation from the Swift 5 standard library: public func index(after i: Index) -&gt; Index { _precondition(i &lt; endIndex, "String index is out of bounds") // TODO: known-ASCII fast path, single-scalar-grapheme fast path, etc. let stride = _characterStride(startingAt: i) let nextOffset = i._encodedOffset &amp;+ stride let nextStride = _characterStride( startingAt: Index(_encodedOffset: nextOffset)) return Index( encodedOffset: nextOffset, characterStride: nextStride) } Note the TODO, which would definitely apply to your input String. This seems relatively easy to fix, I might take a shot at it if I have some time tomorrow.
I just add a button temporarily on my main screen and run the codes from there. Makes it easier instead of going through all the screen. Like i’ll also make sure when i click the button that it will also add all the necessary details for what i need it to do
Test driven development would mitigate most of this issue. You would only be left needing to find a solution for UI code.
I think I would remove it, but it depends on your intent. Take Pokemon Go for example: 1) Launch Screen is white with their logo. 2) Next is a loading screen that gives their app time to set up. It has a progress bar at the bottom to let users know the app is busy. 3) Finally, the game opens up. I would only include step two as your splash screen if you need it or it smooths out the app launch. Otherwise the launch screen is probably sufficient. Don't take my word as gospel though. First and foremost, go with your heart!
Probably depends on the kind of app but splash screens are a bit 1990s. Like websites with title pages. There is the required launch screen. This is the app loading and doing its required launch stuff. Apple wants you to basically hide the fact it’s using up time. It’s not meant to be used as a “splash” screen. Although it tends to be used that way. Generally, you want the user to feel like they are able to use your app quickly without dealing with any fluff. 
That makes sense, I have deleted it. Unrelated question, what’s easier saving data via a service like Firebase or CoreData? I’m a complete newbie. Basically my app is for tracking miles between fueling up, oil changes, tire rotation etc. It will display a popup or notification when the user is within X amount of miles of their next oil change tire rotation etc. 
What do you want to "test"? Is it a new part of a screen, is it some business logic? 
What you need to do here is create a link between the ARKit world positions (which aren’t geographic in nature) to the user’s geographical position! This isn’t trivial to do, but luckily there is a great 3rd party library that does a lot of the work for you (or can show you how do do it if you dig into the code!). https://github.com/ProjectDent/ARKit-CoreLocation
Try this out: &amp;#x200B; [https://www.youtube.com/watch?v=drDjvBLNXho](https://www.youtube.com/watch?v=drDjvBLNXho)
Don’t hold your breath on async/await. But if you’re making an SDK for someone else, I would say don’t use any dependencies if possible. Exposing them can be pretty annoying for your users and if they use different versions of the same dependency there can be conflicts. One way to get around this is to copy the library’s source into your SDK and prefix all of the symbols. This can be annoying to maintain though. 
[Apple's design guidelines recommend that you do not do this:](https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/launch-screen/) &gt; **Don’t advertise.** The launch screen isn’t a branding opportunity. Don’t design an entry experience that looks like a splash screen or an "About" window. Don’t include logos or other branding elements unless they’re a static part of your app’s first screen.
Also your example you gave with requests depending on other requests can be solved with NSOperations. 
Uhg, I'm tired of hearing about TDD, who is the source of this buzz-word?? 
Well it's a buzzword, sure, but one with substance. Running your application and manually testing is really shitty. It wastes your time, it's boring to repeatedly do the same things (clearly, since you're wrote this post). So why are you walking through these steps manually? If there's anything computers are good at, it's doing simple repetitive steps with consistency and correctness. Take advantage of that. As an added bonus, when you write tests, you're not just testing stuff now, but perpetually into the future. I reckon that's an even bigger deal. You have a future safety net to allow you to refactor, tweak and play with your code, with the ease of mind that knowing your tests would catch NY unintended breaking changes.
Kent Beck. It is a buzz words nowadays but I think it's a good thing, since there are so many developers on the market and so little projects with quality code. TDD can solve many problems and help you write better code. As in this example, help you with testing.
Right now I use a combination of unit tests and embedding my code in a library and running it in a playground. Sometimes I use command line arguments so that I can launch right into the flow I'm working on.
What’s your experience level with swift and iOS? With programming in general? I ask because if you are new and trying to get going with Swift and app development, this approach is probably the wrong one. It’s too much syntax and theory without context and I think you’ll quickly lose interest. If experienced and trying to learn more fundamentals and specifics, what I am saying doesn’t apply and I apologize. I’m a web developer (mostly front, lots of back too) that has been wanting to get into app development for years. I never know where to start. I usually end up in Apple’s Swift or iOS documentation. I felt like I needed to learn Swift before I could begin. It all seems so daunting. I recently bought [iOS Apprentice](https://store.raywenderlich.com/products/ios-apprentice) and am working my way through it. I’ve finished an app and halfway through a 2nd (from the book). I think this is the way to go for learning. They just get you going. They explain some things and tell you to ignore others until later. It moves fast and I don’t understand all that I’ve done so far but you cover a lot and start seeing how things work very quickly. I’m moving quickly and I’m starting to understand the flow of things and it’s starting to click. It. Ow seems exciting and feasible to see myself doing in the future. I’ve got app ideas and I’m looking forward to doing more. 
Did you actually read the error msg? It says exactly what’s the problem and how to fix it. 
Ah! Thanks for the comment, I was going mad about it, haha!
It doesn't crash on an iPhone X, or a simulated iPhone 6s plus. It only occurs on the iPad 12.9. Trying to figure out why it only crashes on one device. 
For these sorts of view controllers, iPads present them differently because they don’t need to take up the full screen. Therefore they present them as popovers. Google “present popover view controller on iPad”, follow the error message you received and you’ll get this fixed in no time.
It will crash on all iPads. The viewcontroller you’re presenting has a pop up style on iPads. Those require a source point or rectangle to know where to pop from. Just use the triggering button frame as the source rect and you’ll get good. 
I'm fine with Unit testing for Regression- but TDD has you write the test before the code that it tests. When I'm writing a piece of new code, I'm going to keep manually testing with the debugger and profiler until it is correct, and then \*MAYBE\* write a test so I won't have to test that particular feature each time. &amp;#x200B; &amp;#x200B;
Do you mean you’ve actually deleted the splash screen file? Because don’t do that, you still need it: you just need to make it a general outline of your main UI (no text or images etc, normally just background colour and navigation/tab bar! Is it just gonna be for one car? Honestly I wouldn’t bother with either, just save it in UserDefaults if so!
 activityController.sourceRect = ... 
Try look into unit test, "XCTest" , usually I write multiple test case for a function after finish writing the code for the function and test if the output is correct. I used to spent a lot of time navigating multiple screen to test if the label text shown is correct at work, and found this really ineffective, I would advise to break down functions into small isolated chunk and test them individually. I have written a post on how to get started on unit testing here : https://fluffy.es/start-unit-testing/ , hope this helps on getting you started on writing test!
Thanks. I'll take a look at this
Successful apps like snapchat break all of apples design guidelines though. Just keep in mind they're not laws.
Run it on the iPad simulator - you will see it I’m sure.
I would not show a launch screen for 2-3 seconds just to show your logo. That makes the app launch slower for no reason and app launch time is a big factor for app engagement. What might make sense though (this depends on your app though) is to have the launch screen and have the default behaviour be to have it immediately show the login or main screen. I like this setip for cases where you might p.e. Want to update data after an app update. You can then show the launch screen (with an activity indicator) and then when the work is done show the main screen with already updated data.
Splashing feels bad, but if you have to do long init; then a splash screen with a spinner is way better than hung ui. Reticule some splines, m’kay. As an app user I feel that splashing is just annoying. I feel like seconds are being stolen from me. As a brand developer - it’s just weird to advertise the very product you are already opening. Brand building on excellence is better at initial phases of business development. 
Heaps of apps break this guideline though. Especially in games, where you can sometimes see multiple splash screens. I probably wouldn’t go for 3 seconds though, as personally I’d hate waiting that amount of time every time the opened fresh. 
Impl the shake gesture. When triggered then show a developer window, from where set the initial view controller and reset settings.
No problem at all, I can’t stress enough that I’m still a beginner, but am more than happy to share my process from day one to now! Firstly, I started with Swift Playgrounds as well! I’m 31 with zero previous programming experience, and I’m pretty sure the app is aimed at kids, but it did such a great job at getting me to think like a programmer, and to problem solve in a way that is required (even though at times I wanted to throw ‘Byte’ out of the window!). Anyway, once I’d finally managed to get through the first two courses on the app (I didn’t explore the third much as I think that’s more focused on creating games, which I don’t want to learn (yet), I was wondering ‘what next’ - mainly because although I can’t recommend Swift Playgrounds enough, you’re still left thinking “well how do I make an app?!” Therefore I started next with Apple’s books on the book store called ‘Intro to App Development with Swift’ which are part of the ‘Everyone Can Code’ collection. Make sure you start with the ‘Intro’ version, and not the standard ‘App Development with Swift’. Again, these books are amazing resources as they explain the basic concepts, but also come along with downloads you can use which give you some Xcode Playgrounds to play with, along with some ‘tests’ at the end of each chapter to test what you’ve learned. Please note, by this point you’ll need to be doing all of this on a Mac and not an iPad. I’m not ashamed in admitting that I went through some of these chapters and Playgrounds multiple times 🤣 and again, I soing these often as possible really helped. Even if you only have an hour, just do it, if I left it a few days, and have to go back over the thing I was doing the few days before as I would have already forgotten the thing I was doing the few days before hand! These books are also really good as they also start explaining how to use Xcode, some basics in user experience and user interface, as well as some concepts such as Model, View, Controller (MVC). So some nights I’d find myself learning Swift, the others it would be Xcode and constraints etc, so it mixes it up for you which is nice! After all that, it sort of goes back to my original comment which was I knew the basics, ‘what next’? And everything I read online said the same thing which was: you don’t learn to ride a bike by reading about it, you learn by doing it. You doubt it heavily as you’ll think you’re not ready to start an app, but just give it a go! There are so many good resources online such as GitHub, Stackoverflow, and YouTube, and I’ve learned so much by actually doing it. Yes, code I wrote 2 months ago is awful when I look at it now, but that’s good because it means I’m learning and getting better! By doing my own app I’ve learned so much, and I would encourage anyone to do the same (set yourself zero expectations as then there’s no pressure!). One thing I’ve learned along the way as well is that Developer’s use Google. I always thought I was ‘cheating’ by Googling a problem, but no one can be expected to remember absolutely everything, so long as you understand what you then take from the different resources you then find, as there’s never a one solution fits all approach. Anyway, sorry for a huge essay there, if you’re reading this - congrats as I’ve gone on a lot above! But the developer community has been so helpful to me, and if I can start to contribute in anyway to other fellow potential Swift Developers, then I wanted to make sure I could help! Any more questions, feel free to let me know - and shameless plug, but feel free to download my first app on the App Store, it’s called ‘LotR Quiz’ and it’s free! 
Also depends on the type of application you making ? Does it require it or can be just simple enough for user to login in? 
I saw that and wish I could but I don’t have an iPad... fat rip.
I’ll look into it! I have Java experience but that’s not exactly the most helpful for this, is it. Unless I’m wrong? Thank you though!!
I was thinking of making a cute collection game... kind of common/typical but I have an idea I like and feel like it’d be a good start for app development.
I searched it up and it seems like a really good resource! I’ll probably read more of it after getting a general grasp on Xcode and its workings. Thank you!
Haven’t seen it before but now that I searched it up it looks super helpful! With a super small amount of time to learn the basics, which one do you think would be most helpful to start?
None. I have 0 experience. I am learning via udacity and the way they advertise their program, makes it seem like it’s a good start for beginning learners too 😩. This is actually my second go at it because the first time around I was dealing with a lot of new things in my life and couldn’t dedicate as much focus to educating myself, and they have changed the program since then. I recall reading a statement about not enough people actually finishing the nanodegree. [ios app developer nanodegree](https://in.udacity.com/course/beginning-ios-app-development-nanodegree--nd006) 
Use the storyboard and set your new screen as the first to be displayed
I have just run this, and it compiles and runs just fine: ``` struct Obligations { let i: Int = 1 } protocol OrganizationType {} extension OrganizationType { var obligations:[Obligations] { return [Obligations()] } } protocol CompanyType {} extension CompanyType { var obligations:[Obligations] { return [Obligations(), Obligations()] } } struct Apple:CompanyType, OrganizationType {} print(Apple().obligations) ``` However there is ambiguity there. If you want to be explicit about which implementation of `obligations` will be used, it's possible to specify by casting to the specific protocol you want. For example: ``` print( (Apple() as OrganizationType).obligations ) ``` will print one obligation, while: ``` print( (Apple() as CompanyType).obligations ) ``` will print 2.
If your app has as a ridiculously long start-up, and you can't engineer it down below 2 seconds, a splash screen with a spinner is acceptable. With GHz CPUs and 100Mb networks, you shouldn't need it. It's a sign your engineering sucks. Stealing several seconds from your customer's life because you want the egoboo of your crappy logo in their face is not acceptable. Do not do that.
&gt;struct Obligations { let i: Int = 1 } protocol OrganizationType {} extension OrganizationType { var obligations:\[Obligations\] { return \[Obligations()\] } } protocol CompanyType {} extension CompanyType { var obligations:\[Obligations\] { return \[Obligations(), Obligations()\] } } struct Apple:CompanyType, OrganizationType {} print(Apple().obligations) Dear pragmojo, &amp;#x200B; Thank you for your consideration. I have pasted your code into a playground and it gives the Ambiguous use of 'obligations'-error. Do you perhaps have a suggestion on how to combine the obligations from the CompanyType and the OrganizationType? My goal, taking your example, is to have the final 'obligations' be a total of three obligations (one for organization, and one for company). &amp;#x200B; I hope the above is sufficiently clear now.
Apple's design guidelines do recommend this but the original guideline dates from the days when their was a single device size. Now your first screen is liable to look different on different devices. This would also technically require that you use different launch screens for different markets – the icons in your navigation bar, for instance, should be flipped in Israel and China. &amp;#x200B; For this reason Apple's apps tend to display a blank page rather than any meaningful UI elements (ala the App Store). Essentially everyone else uses it as a welcome screen. Because it's a tenth of the effort and makes the marketing and branding departments happy. Plus Apple doesn't really need to remind anyone who they are...
Create a developer portal within the app for non-release builds. You launch the application with the portal screen and the screen holds a list of button that navigate to your point of interest. This could be launching the app as normal or starting at a new screen. The biggest benefit is you won't need to remove hacks for release builds because you check if the portal should be launched at compile time (based on build type) and anyone doing beta testing will have access too.
&gt; Apple's design guidelines do recommend this but the original guideline dates from the days when their was a single device size. Now your first screen is liable to look different on different devices. This would also technically require that you use different launch screens for different markets – the icons in your navigation bar, for instance, should be flipped in Israel and China. I think a launch storyboard can do all of that. 
I created a new view and controller called splashScreen those are deleted and launch screen will still remain At first to get it up and running I think I will do one car. 
Basically you need to declare a static property `var foo: bar!` in the view controller you’re passing it to. Then get the view controller you’re presenting in the prepare for segue method. Check the identifier for the segue and if it’s the one of presenting the other view than you can change the value (segue has a value for the viewconttoller thst will be presented)
Put a break point at that step and see what emojis is at that point. You shouldn’t have to self.emojis[] but perhaps the explicit self is turned in.
Doing it in this order is why you've got that big *MAYBE*. To be fair, I often don't do 100% pure TDD, but the key is to just do the tests as early as you can so that you'll get the most benefit form them. Test first/early helps you get the functionality right, and helps you avoid all that annoying tapping around the app and debugger work. If I can't write tests first, I'll often rough out the happy path just to the point that I'm reasonably confident I'm on the right track and have a decent idea what the interface changes will look like. Then I'll start writing tests and making them pass. Then a quick and uneventfully pass through the feature in the app to catch any UI issues. Even this not quite TDD approach drastically cuts down the amount of time I have to spend tapping around in the app, setting up test cases and stepping through them with the debugger. The times I get sloppy and don't test early/first, the feature takes just as long to get working, and then I have to go back and write tests, and maybe even refactor some parts to make them testable, and then fix the bugs I missed in my manual testing.
Ugh, there are multiple problems with that code. I'd recommend Pau Hudson's book: Pro Swift.
Wouldn't it even better to avoid text altogether? Render it using normal textfields. If there's one thing that's least pleasant when blown up beyond it original resolution, it's large grainy text.
Thank you all for your help! It seems that I was supposed to write the override func prepare (for segue: ) part of my code in the EmojiTableViewController, not the AddEditEmojiTableViewController.
This is what you want: https://nshipster.com/optionset/
I made an updated version of atari's Asteroids, im looking for some feed back on the game because the game doesnt feel quite right yet. I will add the link to this comment please let me know if there is anything apparant to you that should be changed. Feel free to leave comments on the app store or on this comment, thanks! [Asteroids 5400](https://itunes.apple.com/ca/app/asteroids-5400/id1453454637?mt=8)
Storyboards and segues invlove a lot of force casting, I'd recommend using XIBs and writing the navigation code. As for accessing array in another VC: you shouldn't do that. If you want shared access then make a ModelController class that handles access to that array and pass that between the VCs.
I did a class on udemy that Devslopes puts on, it is a really solid course that starts simple and builds up as you make your way through the course.
You've seen some shit, haven't you?
To understand MVC, switch to MVVM do TDD. I'm not joking. MVVM is just MVC where the V observes the C(now renamed VM). Critically, the C doesn't have a reference to the V and the C doesn't import UIKit. The recommendation to do TDD is because it'll keep you honest about what goes in the C and what goes in the V(really ay unit testing, but the earlier you write the tests the better/easier it is). You should be unit all testing business logic, that logic should all go in the C, and that C should *not* use anything from UIKit. This makes it abundantly clear that a UIViewController is part of the View layer. It's not the C in MVC, so you'll have to write real Controllers/ViewModels that do *not* inherit from UIViewController. You can learn all this without MVVM+TDD, but that combination makes it a lot harder to cheat and write an ModelView, MassiveViewController, etc (which are *super* common in the wild, especially in beginner tutorials)
Thank you for the time considering the above. I am well aware the code is suboptimal. The reason why it is coded this way is to be able to better follow the structure of the law. However, I am seriously interested in what improvements you think Pro Swift would give me. Would you please provide me with some examples?
It explains how extending protocols behaves in different situations.
Splash screens are great. They give me something to look at while I'm fumbling around for the next floppy disk to insert.
I take it as a sign that my users will probably also be annoyed by having "to navigate through several screens to reach a point where they can actually" do what they're trying to do. Even the most complex apps I use are only a couple clicks from startup to any particular feature. Does your application really have more inherent and irreducible complexity than Xcode, Garage Band, Safari, or Numbers? Somehow, I'm skeptical.
One straightforward approach is to simply name them: protocol Group { } protocol Organization: Group { var orgObligations: [Obligation] { get } } protocol Company: Group { var comObligations: [Obligation] { get } } extension Group { var allObligations: [Obligation] { return orgObligations + comObligations } } If there's going to be arbitrary levels of abstract groupings and obligation associations, you'll probably eventually want a more sophisticated data model than a static class hierarchy can provide. A database (relational, CoreData, etc.) can help here. They're great at this. Just make a join table between groups and obligations, with a type column.
My video course [iOS development with Swift in Motion](https://www.manning.com/livevideo/ios-development-with-swift-lv?a_aid=InteractiveCoconut&amp;a_bid=12814a0c) takes you through the basics of Swift through to building an iOS app. It's built for people who already have some experience programming, like you do with Java, so doesn't waste time covering the basics (what's a variable etc), and cuts straight to whats new and exciting about Swift. It's been getting some [good reviews](http://iosdevelopmentwithswift.com/the-video-course/) too. Whatever you end up going with, good luck with it! And good luck with the school project!
I’m not familiar with Java but would assume Angela Yu is still a good place to start. You can always skip lessons as needed.
What? I'm asking about the ease of quickly testing new code. Read other comments on this post. They are useful. Imagine yourself navigating through login screens, redownloading, caching images, checking network calls, etc, for example, just to see if anew UI animation implementation work or not.
To get basic programming stuff go w swift first, easier to wrap your head around when you don’t have to thimk about pointers, allocating etc. Then if you really need objc or want to see the other side of ios development check objc. Btw, isn’t marzipan soon be?
&gt; Btw, isn’t marzipan soon be? ¿Que? BTW I'm not an iOS developer. I've always written stuff for the desktop (be it scripts or small AppleScript-wrapped apps). iOS is too sandboxed for me and I'd like to give the full potential of a desktop OS to a handicapped user than an iPad, etc. Thanks!
You're better off focusing your efforts on Swift. Modern macOS and iOS development is heavily Swift centric. The only reason I would tell anyone to learn Objective-C too is if they plan on doing any sort of Apple toolchain type development or if you plan to get a macOS / iOS developer gig for a bigger company. Those companies likely still have large portions of their codebase in Objective C (mine included) and you'll want to at least have a familiarity with it so you can maintain that. If you are just working on personal projects or contract gigs, Swift is the way to go. Good luck!
Yeah I'm just looking to do my own personal thing. I have no interest in programming for a company, etc. Thank you!
Use rxswift, even if your users have to learn it, that only means rxswift community gets bigger. If they don’t want to learn they can always be something else rather than programmers.
They don't need to learn RxSwift. It will just be used in our own framework code. We don't require to call our methods in framework with only RxSwift
Marzipan should allow apps to be ran on iPhone, iPad, Macs. I’d do swift. I think you have a mental wall thinking some “senior devs” should allow you to program. And I mean this in the most kindest way. Go off reddit now, look for a mac app tutorial and make your first app in like 11 minutes. If you need that “approval” here it is : i proclaim you junior developer. :) go get it chief
Even better, but beware, rxswift has some of it’s drawbacks too.
Even better, but beware, rxswift has some of it’s drawbacks too.
Doesn't answer your question, but I feel the need to share my $0.02 I'd much rather have you force me to import Rx, than have your time encumbered trying to write your own knockoff of it. The less time you spent reinventing the wheel, the more bugs you can fix, and the more features and requests you can fulfill.
As others have said, I'd go with Swift over Obj-C++ unless there's a solid reason to have C++ code within the app, like sharing it with Android or Windows. I maintain a very old C++ codebase and I really wouldn't recommend it unless you need low level buffer or system access like audio/video/image manipulation, AI, or network i/o. 
hah, I'm not listed... :) while only I'm seem to care about the rampant blogspam...
True, but the guideline also makes sense from a UX perspective. The user knows what app they launched, and providing a placeholder that looks like the app will decrease perceived launch time.
Nobody likes C++
I feel like learning Objective-C gets in the way of learning iOS/MacOS development. The Swift syntax is friendlier. With that said, you should at least learn to read/interpret ObjC. Side note because other people brought it up: Marzipan is codename for Apple’s process to allow iOS apps to run on MacOS. Shouldn’t affect you if you don’t do iOS. But making iOS UIs are a lot easier than on MacOS, so that’s why a lot of developers are excited. 
100% agree with you, just pointing out others have broken guidelines before and been successful, although I suspect the vast majority of apps that break the guidelines have failed.
&gt; Should I start with a course with C++? I know Objective-C is still relevant with modern MacOS apps, but how important is it? It's a lot more relevant than C++.
Fair. Even the people who like it don’t like it, so they keep making more syntax. 
Looks like CMark didn’t get built, which is bizarre because it’s the *first* thing build-script does. If you want a run-down on a more refined workflow than the README, see [our talk](https://youtu.be/oGJKsp-pZPk) or one of many scattered forum posts. I [wrote about some extra tricks](https://forums.swift.org/t/need-a-workflow-advice/12536/14?u=codafi).
Bizarre indeed. Any advice for fixing that particular error?
Nothing comes to mind, and I ran an informal lab last WWDC to diagnose build-script errors... CMake is just like this, I’ve resigned myself to its oddities. I would say try running your build command again with `—reconfigure`. If that fails, nuke your build folder and try a different configuration. I use an Xcode-DebugAssert (`-x - d`) and Ninja-ReleaseAssert (`-R`) build.
Ah, I was at dub dub too! If only I met you there to help me haha! Thanks for the tips. When you say nuke the build folder, you meant delete all contents right? That won’t break anything?
Just learn Swift. You’ll be fine. Since you’re not working on legacy code (per your post) the only objective C you will run into is going to be in old tutorials. Apple has mostly rewritten things for Swift syntax in their docs. Go for it. 
Thanks for the advice!
Enroll in a comp-sci program at a local college. The language is gas important as learning the basic concepts. That being said a college program built around C++ is a smart choice in my opinion. Honestly you don’t need to do 4 years but I’d most certainly consider it. If you want to write quality apps I really believe that it is important to learn the basics first. Equally important is to learn good habits that the self taught often have problems with. As far as Mac or IOS programs go learn Swift. You can do that in parallel with the formal program. Realize that there is more to programming Apples devices than Swift, you seem to know this to some extent but Swift is a programming language that is independent of Apples SDKs. 
I am working on an app with multiple view controllers in a navigation controller. I have binary buttons (i.e., not selected or selected) a number of places in the app and I need the selections to persist throughout the app lifecycle. I’m finding that button selections for the second view controller in the navigation stack will persist if I go to the third VC and then back to the second one. However, if I go from the second VC to the first and then back to the second, the selections disappear. Is there a way to stop this?
Wow okay. Nuking the build folder cleared 123.06GB from my disk. Good to know. 
It’s always kosher to remove the build directory in LLVM-style projects like Swift because we never support in-tree builds. You won’t break anything.
Hey did you see EDIT 2? Thoughts?
Did you run `utils/update-checkout`?
I did not. I will delete build folder, run it, and repeat. Thanks.
If this works, could you pop over to bugs.swift.org and file an enhancement to detect missing dependencies and early-exit the build?
Refer this link https://www.raywenderlich.com/1073-model-view-controller-mvc-in-ios-a-modern-approach
I can try? But I don’t fully understand what’s happening, so I can’t guarantee I’ll know what to report.
You may be confused because even the premise of your question isn't straightforward. iOS development has an extended heritage going back to 1980s desktop development, and that heritage is more apparent in today's dominant app architectures than what you see in web development. iOS doesn't really have MVC anywhere either, the iOS&lt;-NextStep heritage is in MVVC or Model View ViewController with a ton of [delegation](https://en.wikipedia.org/wiki/Delegation_(object-oriented_programming)#Overview) thrown in [(the Wiki on that pattern](https://en.wikipedia.org/wiki/Delegation_(object-oriented_programming)#Overview) mentions NextStep 1st). Thankfully, Swift has provided a fertile ground for iOS community members to experiment w/ Reactive Programming, Functional Programming, [MVVM](https://medium.com/@IanKeen/mvvm-a-non-reactive-introduction-5a1f33402a32) and other paradigms that are eroding NextStep MVVC's stranglehold on app architecture. That said, if you'd like to get a clear picture of a canonical Apple MVC app, look no further than any of their [CoreData examples](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/nsfetchedresultscontroller.html). The tight relationship between [NSFetchedResultsController](https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller) (the Controller), NSManagedObject (the Model), UITableViewController (the ViewController) &amp; UITableViewCell or UITableViewController::view (the View, depending on what your perspective is). Apple's developer site has plenty of old Core Data projects to play around with, download away and tweak the code to get a feel for that approach.
Unless your goal is to be an overall seasoned macOS|iOS|tvOS|watchOS expert, with a deep understanding of not only today's surface landscape but the underlying WHYs and HOWs... then you're more than good with focusing on Swift almost entirely. I've programmed for iOS since the pre-AppStore jailbreak/hacker iPhoneOS communities. I intellectually enjoy my experience and knowledge around Objective-C++, NextStep history and so on; But sometimes I wish I could erase some of the old paradigms in my head and reboot fresh from a modern functional-reactive Swift perspective.
The short answer: if you should have one Single instance of it, e.g. a shared HTTP Client, because you would like to keep track if a shared list of outgoing requests in order to handle auth tokens expirying and re-auth and retry - aka Singleton pattern, make it a (final) class. If you need to have clousures referring to self, make it a (final) class so that you can do `weak self` and avoid retain cycles. Otherwise always default to structs. And whenever you notice the need for `weak self`, change to (final) class.
What do you have in mind that you want to build? Usually your model is the smallest piece you can break your project into. Like legos. Building a journal? "Entry" could be your model. The entire journal is built of entries. Building a pokedex? "Pokemon" are the model. The pokedex is filled with pokemon. A solar system? "Planet" And so forth. Just try to break your project into a bunch of little legos. Those are your model. Then make a controller to manage and keep track of all of your little legos.
Here is an EXTREMELY custom, non industry standard variant of MVVM that I call Single Line Controller: https://medium.com/@sajjon/single-line-controller-fbe474857787 Just wanted to show that vanimla Massive View Controller and standard MVVM is not the only way to go. You also have VIPER 
The model is the "brains" of your app. If you ported an app from iOS to Mac, in theory you could share the same model layer. If it doesn't involve displaying content on screen (the view) or interpreting user input (the controller) it's probably the model. Your networking code sits behind your model. Your database sits somewhere in your model. Anything non-visual, non-interaction, probably belongs in the model.
In my experience -x is… pretty fragile. I've managed to badger it into working enough to get a project just so I can use shift-cmd-O and stuff, but tbh my main workflow at this point is building from the command line and using git grep to find stuff.
VIPER is just a fancy name for MVC + Coordinator.
Not really. VIPER is greatly more overengineered.
Or maybe MVC just isn't clear enough that M and V need a separate C which are called I and P in VIPER.
In a single REST API call the request and response data is your model, your network manager is your ModelController, your UIViewController subclass is your ViewController, your UIView subclass is your View.
In UIKit the View (UIView) and the supposed Controller (UIViewController) are overlapping. The controller is tightly coupled with the view, giving it a bunch of responsibilities that belong with the view in "real" MVC. A good thing to keep in mind regardless of the resource you use to learn about the pattern.
Hi, Kitura should work fine with Swift 5. Can you say what problems you're having?
If you're diving deep into iOS you'll eventually have to understand *some* Objective C just because of the ObjC legacy of the platform. But I'd always recommend just learning Swift first and primarily and just learn Objective C stuff when you find out you need to.
In terms of initialising for a class, can this be done: class thePerson { var clothes: String = "" var shoes: String = "" } Because this is what everyone seems to suggest but it seems a lot longer: class Person { var eyeColour: String var hairColour: String init(eyeColour: String, hairColour: String) { self.eyeColour = eyeColour self.hairColour = hairColour } } &amp;#x200B;
He thinks that deprecated means removed.
Why do people post stuff in both subreddits???
Lots of wrong answers here. Model represents the data you need to recreate the state of your app. For example if you're writing a tic tac toe game, the model would consist of: \- an array to represent the 3x3 board with Xs and Os \- a boolean to indicate if the next player is X or O. &amp;#x200B;
•Get the date •use date formatter to turn date into string •save into core data as string •when loading your persistent store, pull from consistent store as string •use date formatter to turn back into date •??? •profit 
I've been doing research on retainment cycles and this comment helped a ton thanks!
Why not use the native \`Date\` type in Core Data, rather than converting to/from \`String\`?
I don't entirely follow this bit: &gt; With Date() and DateFormatter() I can't seem to find the .date method and I don't know how to save these into CoreData. I'm not sure what you mean by `.date` method? In case it isn't clear, when you call `Date()`, the `Date()` object that gets returned is the current date, at the point when you call that initialiser (there's no `now` or similar, just `Date()`). If you haven't already, on your Core Data model, add a property to model the creation date, and ensure it has the type `Date`. Now, wherever you save your core data object, previously doing something like `coreDataObject.createdDate = datePicker.date`, do `coreDataObject.createdDate = Date()` instead. That sets the current date/time as the created date. Later, when you want to display the created date, pass the `coreDataObject.date` object you retrieve from CoreData to your `DateFormatter`, and you should get the date at which you created the object.
I misread the post (half asleep) and thought he said he was having issues with storing his dates.
I updated my previous comment after realizing I completely misread your post. 
Hi asbing! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/axknbo/it_inserts_just_before_beginning_of_codes_not_at/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Thank you so much for your answer! I will tinker around with your solution and definitely let you know if it worked. The issue is with storing the created date for an item and then re-using it every time I want to go back to my Item and check when it was created.
Make sure you are converting your date back into a normal date after using the date formatter, otherwise it isn’t going to work. 
I applaud you for this attitude of embracing changes. 
Many thanks for taking time to respond and the explanation! What I meant in that sentence was that UIDatePicker seems to have a method called .date that makes it easy for me to save that into Core Data. I will use your advice as well and post later if it worked! 
I have the same issue with picker... Have you found any solution?
Thanks - I think we've fixed all the deprecation warnings too. Let me know if you're still seeing any!
RemindMe! 6 hours 
I will be messaging you on [**2019-03-05 19:18:06 UTC**](http://www.wolframalpha.com/input/?i=2019-03-05 19:18:06 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/swift/comments/axg9mc/mvc_design_pattern/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/swift/comments/axg9mc/mvc_design_pattern/]%0A%0ARemindMe! 6 hours ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Thank you for the reply! Much appreciated.
How I do it, suppose you have a dateCreated property in core data: Override willSave method of your managed object and then see if dateCreated is nil. If it is, set the property to Date(). There is a method to set properties without triggering the observer, I don't remember the name now and I'm not on my Mac to check.
I have the same question, I have seen videos on a youtube page called Code with Chris which looks like a great start. I'm sort of confused though because he also sells courses on his website. Maybe the courses that you pay for go more in depth
Swift, then you’ll learn Objective-C to read an old tutorial. But honestly, it shouldn’t matter what language you learn, the hard part is making a usable app people want. That’s a completely different set of challenges.
UIViewController is *not* the controller in MVC. It's the view layer, which is why it's tightly coupled to the view. It is profoundly unfortunate that they used Controller in the name. If some Apple(or probably NeXT) engineer back in the day had named it UIViewManager there would be a whole lot less confusion and an entire generation of iOS programmers wouldn't be writing ModelView architecture and thinking they were ModelViewController. Look at UIViewController's methods/properties and try to find one that doesn't have view, present, display, margin, screen or some other View related keyword in it. Basically everything in UIKit is View layer. Apple didn't give us a Controller layer because that's the part you're supposed to write yourself...the business logic, which they haven't the faintest clue about and can't really help you with all that much. The only thing your controller needs to inherit from is NSObject. The V and C should be moderately coupled, and by switching to MVP or MVVM(both slight variations of MVC that add an interace between he V and C) they should be completely decoupled to the point that the Controller(aka Presenter/ViewModel) doesn't know about UIViews or import UIKit at all.
You said this, but it needs to be restated: the M, V, and C are only classes in the most trivial situations. MVC is an architectural pattern, which MVVM is not.
Just store it in Unix time and convert on displaying.
actually, converting to/storing as an NSTimeInterval is a better approach (use timeIntervalSinceReferenceDate:). it’s more space efficient than NSString, easier to sort, &amp; it’s not prone to locale-related perturbances. 
This might not be the best thread to ask on, but I've installed Swift on my Linux box three times now, and every time I restart my PC and try and compile a Swift program I get "Command 'swift' not found". Any fixes besides following Apple's install instructions again?
You know, that's a good point. If you subscribe to both then you probably saw this on the other subreddit first. I'll delete this post.
Rather than reading about MVC in general, I would suggest something more Apple / iOS specific, like the [App Architecture](https://www.objc.io/books/app-architecture/) book, which details MVC in addition to other architectures.
Note that this isn't technically accepted yet, but it's so far along, as well as authored by Chris Lattner and other big Swift contributors. It's also very well-thought-out and doesn't affect ABI compatibility
There is a lot of debate [in the review thread](https://forums.swift.org/t/se-0243-codepoint-and-character-literals/21188) over whether this is the right direction or not. This could very well be accepted, but it's by no means a sure thing.
 $ mkdir /Users/myusername/swift-source/build/Xcode-RelWithDebInfoAssert/cmark-macosx-x86_64/ $ cd /Users/myusername/swift-source/build/Xcode-RelWithDebInfoAssert/cmark-macosx-x86_64/ $ cmake -G Ninja -DCMAKE_BUILD_TYPE=Release /Users/myusername/swift-source/cmark $ ninja
Amateur here- what's the benefit of a character literal over a single character string literal?
Oh certainly; as with all syntactic changes, there's lots of debate. Though, from my experience watching these, they don't stop it from being implemented if it's already gotten this far; the most they'll do is tweak how it works before it's merged
I did try to answer those in my head and still failed myself hahaah
The [Motivation and Proposed Solution sections of the linked proposal](https://github.com/apple/swift-evolution/blob/master/proposals/0243-codepoint-and-character-literals.md#motivation) go over that thoroughly. In summary, it allows for compile-time assurance that what you put in these quotes is actually a single character, it provides a more natural creation of character variables, and lets you have compiler-checked conversion to integer types, among other advantages.
Please don’t downvote me but I honestly don’t have any idea about this. Could you enlighten me?
Makes sense. I had a look through the document but got caught up in the technical detail. Thanks for the clarification.
Might have better luck on r/iOSProgramming.
https://developer.apple.com/documentation/uikit/uiview/1622504-convertrect
https://stackoverflow.com/a/12498289
So I guess having protocols declared as a nested type and nested types within protocol declarations might not be making it to the 5.1 release... ☹️ I guess I can settle for character literals, but I'm still dreaming of the day when the "try" keyword isn't superfluously required anymore. 
What’s your reuse identifier? A global var?
You're missing this delegate: func numberOfSections(in tableView: UITableView) -&gt; Int { return 1 } Make sure the identifier is attached to the table view cell.
If it’s a fixed list of settings then it may be better to do a static table view instead of dynamic with reused cells. May be easier too
Did you set the datasource???
Better amateur question: What was the justification for NOT having this? single quotes were not used by anything else
I'm pretty sure this method returns 1 by default when the table view delegate doesn't implement it so that shouldn't be the problem 
If you're not using a custom cell and you haven't set the cells style to something other than basic then try setting cell.textLabel.text instead of descriptionLabel. I think descriptionLabel is only visible when the cell has a style that includes more than one label like "subtitle"
Did you srsly post a photo of your screen..
i’m srsly too tired at this point to take a screen shot tbh
I think the identifier is the problem. Pointed out the delegate because it's missing. Not sure if it returns 1 by default, but I've always seen it included in the code delegates.
Another possibility is are you including tableview.delegate = self and tableview.dataSource = self in the viewdidload?
&gt; I'm wanting to add a drop down menu pop up to a cell and I need the position of the cell relative to the Table View. Why do you need that? Why isn't adding the control to the cell sufficient? &gt; I've tried .bounds and .frame (not really sure what the difference is). You can literally google "frame bounds" and the first hit tells you the answer. 
I have to use both of those options in different projects, haven’t had any problems. It’s your choice really but automatic works if that’s what you are asking. 
No, I'll update here if the leak is fixed. Thankfully it's a small leak
You are trying to access the error variable or trying to call the error method of an NSError object. Export the crash log from "Xcode-Window-Devices and Simulators-Device logs" if the error happens on device. (Simulator doesn't generate the crash log where it supposed to do, only the folder for it. Unless I'm blind)
So I try to help and I get a down vote. Nice ! haters gonna hate?
You can also check out fastlane.tools. They offer great support for profile handling and much more. 
According to [Apple](https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/ControllerObject.html#//apple_ref/doc/uid/TP40008195-CH11-SW1) it is and I was saying it isn't a pure Controller because of the View part.
Updating the time zone on the Mac works fine. But personally I’d consider writing some unit tests for the function. 
&gt;haters gonna hate? Whatever you need to tell yourself to deflect the meaninglessness of your answer. 
They wanted to make extra super quintuple mega sure that they were absolutely used for the right thing. For instance, [some argued](https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md#prior-art) that, like PHP, single quotes should mean raw strings (aka "here's a string where nothing needs to be escaped and standard interpolation doesn't work"), but we decided on the Rust-like `#"hash-double-quote"#` syntax for that. A few argued that single quotes should be multi-line strings, but we decided on `"""triple-quote"""` syntax for that. Fewer still said that it should be like JavaScript, where it's the same as a double-quote string, only used so you don't have to escape double-quotes when you're dealing with a string that had a lot of those (this, obviously, didn't take traction, and can be done with raw strings now). On top of all that, we have been successfully using double quotes for character literals for quite some time. So, after 5 years, we finally settled on a justified set of reasons for using these precious single quotes, and that is as character literals.
My requests look like the following and I put a breakpoint on the "if response.result.value" line and they has shown me what is wrong with my class/struct definitions. On a side note, I was using [https://app.quicktype.io](https://app.quicktype.io) to create my decodable class definitions and quickly found there was a specific value which was not marked optional that needed to be. &amp;#x200B; Alamofire.request(URL, method: .post, parameters: body, encoding: JSONEncoding.default, headers: HEADER ).responseRoute { (response) in if response.result.value != nil { &amp;#x200B; &amp;#x200B;
The reason that you are getting that error specifically is that you are declaring the utf8Text variable as part of an `if let`, so the actual variable is only valid inside the scope of that where you already have the print statement. However, there are a few things you will need to change as well in order to get this working. First of all, you should be passing the `Data` object into the `JSONDecoder` instead of the JSON string. Also, decoding JSON can throw, so it will need to be surrounded with a do catch. Also, I would recommend changing the `company_name` variable to camel case as it is more of a swift standard and use keyDecodingStrategy to read from snake case JSON. do { let decoder = JSONDecoder() decoder.keyDecodingStrategy = .convertFromSnakeCase let bizList = try decoder.decode(Bso.self, from: data) dump(bizList) } catch { print(error) } 
Post some code. But the answer here is that you should be [mocking](https://en.wikipedia.org/wiki/Mock_object) the date rather than relying on the system time to test your code. That way you can change it to whatever you want when you want to test.
I feel this article mixes the concept of dependency inversion and reversion which can be combined but are not the same thing. Injection in itself does not enforce abstraction.
Agree. If you have the training data you can update these models pretty easily -&gt; https://docs.metismachine.io/docs/image-classification
We need more info. Are you testing the framework with an in-house sample app? Are your public classes available before release? Swift version? Is the customers app in objc and do you support objc? Please provide more info. 
It is live with cocoa pods... Yes we have many public classes. 4.2 Swift. Yes we support objc c
It would help if you posted the error you're getting in the console. If your IBOutlet is set up correctly you should be able to get the value in the textfield outside of viewDidLoad. If you're trying to put those values in that initializer the error might be happening due to the text fields text property being optional. To get around that check out this operator that lets you provide a default value when working with optional values: https://www.hackingwithswift.com/example-code/language/what-is-the-nil-coalescing-operator
When I try and use: let idd = idText.text inside the viewDidLoad(), it works fine but I can't call it from outside that function because I get the error 'Use of unresolved identifier'. When I use that line of code outside the viewDidLoad, I get the errors: Cannot use instance member 'idText' within property initializer; property initializers run before 'self' is available and when for the line where I assign that variables, I get the error: Cannot use instance member 'idd' within property initializer I tried shuffling code around for a few hours now but can't figure this out 
Sounds like you might not be grasping the concept of scope. Look around the internet for “understanding scope in code”. It doesn’t have to specifically be about Swift - the concept is universal. But I found this: https://andybargh.com/lifetime-scope-and-namespaces-in-swift/ I haven’t read it, but scroll down and see if it explains it for you.
In case you want to use the framework in Obj-C you will have have to mark all methods you want to offer @objc public including the classes. &amp;#x200B; It might be useful to mention which framework you are working on :) then we could have a look (even though the code is not available, often you can see quite a lot of problems in the framework itself)
it would be good to show us exactly how you are trying to call it from outside. we can't know what you are doing wrong if we don't know how you are doing it. 
Touchup means you stopped pressing it. #1 is pretty much what you are looking for: https://medium.com/@nathangitter/building-fluid-interfaces-ios-swift-9732bb934bf5
Thank you! I’m still a complete beginner and exchange things pretty easily. That’s a nice read! 
\+1 to this. Everything I seem to find is too "surface" level or gets into GUI stuff way too quickly without allowing you to master the underlying code first.
There's a bunch of setters on the UIButton class for setting colors, texts, etc for a control state.
Sorry for the lack of info, I've added the code to hopefully make things clearer 
There are multiple plugins that give functionality for Android and iOS that Flutter doesn't provide out of the box. I've learned Flutter and I'm not conversationally fluent in Java or Kotlin nor Swift, so I don't think it's really necessary. But problems [do arise](https://github.com/flutter/flutter/wiki/Postmortem:-AndroidX-plugin-migration), and you **do** have to edit Gradle files, which was a small problem for me not knowing Android development.
Are you declaring your IBOutlets outside of any function, but inside the ViewController? If not, you’ll have a scope issue 
The IBOutlets are in the view controller class but outside of any functions
`.touchDown` is the first event you're looking for
Updated the post with code. 
It sounds like the OP is trying to change the color of another view, not the button itself.
Oops. haha good catch
I’m not certain, but (now seeing the full code) it might be this. If a variable of outlet is outside of a function, they are all declared at the same time. Thus, idText is technically undefined at time of accessing its .text. Either move your use of it into a function called by viewDidLoad or add “lazy” to the front of answer’s declaration so it isn’t run until needed
Lol I got a notification on my phone for this
I would recommend either Intro to App Development with Swift or App Development with Swift. Both are free and produced by Apple.
Hey there moyerr! Thank you for the help. Do you suggest to create the IBAction again as a Touchdown Inside or is there a way to access directly to that property?
Yep, that's exactly what you wanna do
Come here and help me ma bud! 
Please leave 5 star reviews if you don't mind and send me a message if you have any suggestions. thx
https://github.com/toddkramer/CodableKeychain
Awesome, Swift is an incredibly versatile tool, I like how you pointed that out so well 
Looks like you have no constraints. So the size of the view matches the size in the storyboard.
Thanks for your feedback ☺️
Is it possible to implement ios keychain without 3rd party implementation? I'd like to keep it as native as much as possible.
Yes, you can also look at the code of the library I linked, it's pretty lightweight.
Really like both approaches, and appreciate that you went into calling out compatibility with flowcontroller / coordinator patterns as well as testability. You might want to mention that this won't work with storyboards out of the box (I suppose you could make your properties implicitly unwrapped and keep storyboard instantiation as an implementation detail for the VC factory in that approach) +1 for not advocating to not "just use a framework" for DI
Yeah that’s really tidy. I like it. 
Sorry, next time I’ll put a ‘Me again’ at he beginning 😂 it helped me a lot though.
Post the exact error they gave you, off the top of my head I can possibly think they can’t edit the text field because they can’t even see it on iPad, build for iPad or the smallest iPhone and check any design issues
On YouTube, Paul Hudson and Sean Allen may be of interest. I'd post my whole list but I don't have all day. That said, I think Paul is one of the better teachers. I personally found that the Udemy course from Angela (London App Brewery) has been the most useful. She does more explaining than most of the others, so that may be your style. You can find some of her older videos on YouTube. Xamarin knowledge will serve you well. Many of the function calls are the same as UIKIt or AppKit.
In option A, you declare the NSFetchedResultsController in the viewDidLoad() method ; it will do its job, but it only lives long enough to perform the fetch and is deallocated by the time the end of the viewDidLoad() method is reached, since it only lives inside the scope of this method. In option B, it is declared as an instance variable of your UIViewController, hence it will have the same lifespan as your controller, since your controller holds a strong reference to the NSFetchedResultsController. Hope that’s clear enough :)
They got me for app completeness.... Asked for steps to reproduce and they didn’t tell me. Did get a call scheledued. Weird thing is that is the same binary + ads as the one they already approved. 
Thanks. Heres what I settled on: guard let data = response.data else {return} do{ let decoder = JSONDecoder() decoder.keyDecodingStrategy = .convertFromSnakeCase let bizList = try decoder.decode(Array&lt;Bso&gt;.self, from: data) print(bizList[0].companyName) print(bizList[0].zip) var i = 0 for whatevs in bizList { if bizList[i].zip != nil { print(bizList[i].zip!) self.bizZips.append(bizList[i].zip!) } i = i + 1 } }catch{print(error)} print(self.bizZips) needed to adjust the Array&lt;Bso&gt;.self
But I don't think didSet block is available for lazy variables, the reason why I use lazy variables is that I want to initialize the class without initializing all the variables within since sometimes not all the variables are necessary, so loading these unnecessary variables can take a lot of time.
So I want to get into coding but I don’t know were to start. I don’t have a pc (I know I’ll need one later) but I just want to lean the basics, thanks
You need a mac, not PC
Ok, thanks I wish it was possible to create apps on a iPad 😂
Ok thanks 👍
Great place to start and test the waters! If you get tired of the beginner playgrounds, I think you can download some from online. If you want to continue with Swift, you’ll need a Mac (technically you could use ubuntu, but compiling Swift is a bit advanced).
Thanks a ton it will probably take me a long long time to lean so I’ll have plenty of time to save for a mac.
Sorry if I offended you. And have a good day.
Swift is not restricted just to macOS. I have no idea on the state of support on Windows, but on Linux, Swift is gaining a dedicated user base as a server-side language. That stated, as a starting point, the iOS Playgrounds app is a really good starting point. Have fun with it.
Windows support is not official, so I would not count on that. Swift on Linux is server side, so it might be not why he wants. 
Good observation. I just think it’s helpful to recognise that Swift is more than just the “Apple language”. For a beginner, that’s not always obvious. After learning the basics, there is a wide breadth of applications that can be built with Swift.
my take: as always when leaning a new skill, how much time you have on hand is not the factor here, but consistency and the will to get it done and learn with that said: 5hrs/week should not be a problem and you should never stop learning in life :)
I’d go with Hacking With Swift 
From my experience swift as a very easy learning curve at the start, but as soon as you’ll want to get into some advanced stuff you might want to switch to another language. After the basics you could try C for example to get an understanding of how the memory works on a lower level. Swift is a lovely language but you won't be able to do much with it besides iOS apps. So it's good to diversify eventually
Using third-party code doesn't make an app non-native.
Typically you would only store highly-sensitive information like the password in the keychain. You *can* store more, but it's not really an effective way of managing data. Use Core Data or some other persistence approach to save the rest of the data.
Depends on how those five hours are allocated. 5 x 1 hour sessions is going to be significantly more difficult than 2 x 2.5 hour sessions because an hour isn't really enough time to refresh your memory from last time and move forward meaningfully.
Take it from a current college kid who’s being bombarded with homework and midterms, don’t ever stop learning what you’re interested in. I have a huge passion for iOS and I barely get to touch my books/tutorials during the week because of school. At least you don’t have homework so I don’t see why you can’t develop your own apps. 
I think it is. Dont limit yourself before you try. 
Sounds like you need to test on an actual device. If you don't want to buy an iPad then find a friend and get them to test builds via TestFlight.
Let's assume that you change the time of the machine where your test is run. Now, let's also assume that the testing framework you're using is logging all outputs to a file. Which timestamp will that file have? The consequences are pretty much endless. For a simple solution, I'd go with something like this: ``` func runDate(today: Date = Date()) { ... ``` and remove the line with `let today = Date()`. Now you can call you function a) without any parameters to use the current date or b) with an explicit date.
Hey, I was in your position 6 months ago and 2 months ago I submitted my first app to the App Store which now makes me a small amount of money, but have learned the entirety of app development as a hobby. I manage my learning with the commitments of a full time job, a 3 year old son, a pregnant wife, a house to maintain etc. If you want to learn, you find the time. I regularly do my learning between the hours of 10pm through to 12:00am most nights, and love it! Give it a go! 
You’ve got nothing to lose by spending a couple of hours giving it a go and seeing if you enjoy it. Some people think they will like programming but when they give it a go, it doesn’t really grab them. Other don’t really think they will like it, but when they are exposed to it they realize they love it. If you enjoy the learning, you’d be surprised what you can do with a few hours here and there.
 just dropped tablet support for the time being. submitted as iphone only app.
Have you posted this to r/iOSProgramming?
Nope. Wanted to post it here first. 
It's really pretty! I would say though that I agree with the other commenter, this subreddit should be about swift the language, not about iOS development :D 
There are somany factors here that no one can offer a definitive answer. Personally I would want some separation from work in a hobby pursuit. If you are developing apps at work, iOS development might not give you the release that a good hobby should. I say might because everybody is different here. There is the concept of a hobby farm. If you are not familiar it is an owner of farm land that works his farm as a secondary occupation often significantly different than his day job. This is still a businesss and money is made but that isn’t the primary goal for most hobby farmers. In any event the success or failure here is a function of a willingness to dedicate the time to the lifestyle. Why I’m he tangent with hobby farms? It is the idea that people often want or need balance in their life. Spending 8 hours a day behind a desk simply isn’t good for anybody if that time can’t be balanced by other activity. So you have to consider if this hobby will provide the type of distraction you need. By the way it isn’t just physical as there is also mental considerations. Frankly I’d give it a whirl. Programming can be a lot of fun if it isn’t part of your day job. The real trick here though is to avoid jumping directly into iOS programming. Instead look for a quality course or book that covers the first few semesters of what would be a computer science program. The goal here is to get the required background information and maybe more importantly learn good habits. After that look into avenues to learn Swift and iOS programming. I’d go so far as to look for a local college to cover the comp-sci stuff. 5 hours a week would be tight for part time classes but there is a certain level of advantage with a college program, one of those being feedback. Another advantage is an instructor and classmate to bounce stuff off. Now don’t get me wrong many people simply start learning Ssift as their first language from a variety of online resources and then go at it. That can work but it can also lead to a lot of crappy code and not really understanding the computing hardware. Going this route demands a greater need on one to learn the proper way to do things, plus you need to be smart enough to filter out the crap that is the vast majority of online programming web sites. There are enough really bad programming web sites that you can easily fall into a pit of nonsense. 
&gt; Should I even try learning as a hobby? : /
Trying to get an objective c library to work with swift. Apparently, a bridge too far for me. 
There are a lot of people (me, haha) who buy a guitar and every now and then go ahead and plunk at it. There are a lot of people who buy a project car and every now and then buy and install parts on, but it still doesn't run. There are a lot of people who code for fun and maybe never create a final project. There is absolutely nothing wrong with any of these things. Spend your recreation time doing things you think are fun. If you think coding is fun (like I do) then take a few minutes and give it a go. Code in your free time and see what happens.
I've been learning Python and Swift for the past 3 months while having a full time job and family. I'm doing it purely as a hobby and interest. I just dedicate an hour or so a night before bed to learn. On the weekends I typically work on projects if we don't have anything planned. Granted it's probably taking me longer to learn than most, but I'm not in any hurry. Even if I don't make anything out of it, in the end I'll know more about programming than I did when I started.
&gt; Swift on Linux is server side Swift can write any type of program, and it has good support for calling any C libraries. I don't know why it would be restricted to server programs on Linux, any more than it is on the Mac.
I have been doing the Angela Yu class on Udemy and there are still some parts I wish she would explain more. She does more surface level explanations but maybe that is on me for not heading to Apple documentation for more detail.
This isn't alternative, just custom subclass.
Nice, this reminds me of Material Design a bit. 
Wow! Thanks! I will definitely leave a good review.
[Actually tho](https://i.imgur.com/aOryuYZ.jpg)
That's an implementation detail. For all intents and purposes, this is a separate control with a separate experience. Note that a popover is a subclass of a window, and it's also an alternative to a window. You see the same thing all over Cocoa
You should have a ModelController instead of storing some variables in AppDelegate and writing your logic in the VC. VCs are for connecting different ModelControllers with their corresponding View. AppDelegate is for forwarding UIApplication events for their respective controllers.
Yeah, the main difference is that this one is an animated switcher, but the idea of the fab-like notch is definitely kinda screaming "material". 
And that ain't bad! In fact it's a great, long-standing tradition for designers to build off the work of other designers, just like software developers, building architects, mathematicians, et al build on the works of the past
Okay, I got this wrong. I expected something alternative to tab bar, not a custom tab-bar-like ui, my bad.
Are you planning to add more charts ? 
Absolutely, we are extracting our bar chart component from our private library components to include it into Sejima framework
Thx ;)
Please don't spam. Nobody who is interested in iOS Programming is reading r/Swift without also reading r/iOSProgramming. There are however a lot of people who read both.
Ah, shit, I already did that. Very good point, I'll keep it in mind. Thanks - and sorry, again. 
Have you checked that your constraints are based on safe area and not on superview ?
Oh yeah I'm not saying it's bad, I love Material 😆 
had to add : &amp;#x200B; DispatchQueue.main.async { self.myTableView.reloadData() } after print(self.itemsToLoad) 
I don't read r/iOSProgramming. Only interested in Swift-specific development and applications. 
By Cocoa, do you mean Mac or iOS? There's way more material for iOS than Mac. The chances of you finding an hour long, in-depth video tutorial on Mac development are slim.
Does my phone have to be jail broken for this to work?
This is where people like Paul Hudson come in. To me, they are complementary.
What do you recommend from him? Would the Hacking With Swift book be a good start to avoid the GUI and get comfortable with Swift? &amp;#x200B;
I actually have everything. I'm a *very* experienced programmer, so for me personally, I love his Sunday live broadcasts where he makes an app live and in person and talks about design choices. I have all of his books. Currently, I'm working through Testing Swift, Pro Swift, Swift Design Patterns, and Dive Into SpriteKit. You may find [100 Days of Swift](https://www.hackingwithswift.com/100/) helpful. Best of all, it's free. It starts at the beginning, but gets harder pretty quickly. Swift has nuances that are different than C-like languages, and some of those have been gotchas for me. Paul is good at explaining them and why they're there. Anyhow, [his YouTube stream is a firehose of knowledge](https://www.youtube.com/paulhudson).
yeah, that's not true
So I guess you are not interested in this UIKit based library then, right?
Because you are not interested in iOS Programming?
because I'm not an iOS developer, I just enjoy programming languages, and Swift is a nice language. I don't mind seeing iOS related things, as long as they're in Swift, but I really couldn't care less about iOS stuff done in Objective C.
I'm not sure you will be able to do what you want with compiler directives, but as I was just thinking about your problem a little bit, perhaps you could come up with a solution using Swift's conditional conformance: https://www.swiftbysundell.com/posts/conditional-conformances-in-swift
&gt;It works on the simulator. &amp;#x200B; Spoken like a true developer :-) &amp;#x200B;
Cant you simply make whatever is inside the Delegate optional? . func doThisCode(\_ num: Int?) { if num { do this} else { don't }}
I think the idea is that the explicit delegate conformance is optional, not the method or functionality. For example, Swift/AppKit upgrades often make old informal protocol methods into new explicit protocols. With the old version, the protocol doesn't exist yet. With the new version, the protocol is required. The method itself is exactly the same in both cases.
I mean yeah I get his point, I don’t think I’ve ever tried or needed to do something like this, I’ll stick around to see the answers, good to learn something new
Could you fake the protocol if it doesn't exist? #if canImport(optionalFramework) // nothing: real OptionalDelegate is used #else protocol OptionalDelegate { } // dummy #endif class ViewController: UIViewController, OptionalDelegate { ... } 
Update 2: Due to my mistake, the device date change logic runs as expected. 
The port to Windows is not done, but it is up and running. &amp;#x200B; [https://forums.swift.org/t/swift-win32-programming/20686](https://forums.swift.org/t/swift-win32-programming/20686) &amp;#x200B;
&gt;https://forums.swift.org/t/swift-win32-programming/20686 For "Hello, world" app, yes. 
Not sure if it'll work, but perhaps you could try this: ``` class ViewController: UIViewController { ... } #if canImport(optionalFramework) extension ViewController: OptionalDelegate { ... } #endif ```
hey, thanks im gonna try doing that tonight or tomorrow.. sorry i couldn't reply soon the past 2 weeks have been a pain in the butt, no power and not internet. now I have internet but still no power. anyway I really appreciate for the insight.
Well, you have to start somewhere, and it seems to be basically one person doing the port.
I also want to say thanks to those guys who offer their time and answers for this communities. The swift subreddit is awesome!
It can be done, but the second one is more robust. When you initialize the first type, you know they're always empty strings but why? Why would a person ever have empty shoes or clothes? You're probably going to change that value immediately, so you should just use the second one which gives you more control, is better defined, and more maintainable.
Might want to look into a singleton AppState class which you call from everywhere in your code?
Alamofire is way more plug and play and has less boilerplate associated with it. I frequently use Alamofire + SwiftyJSON, but with the newer versions of Swift you may want to look into Codable.
Thank you!
It works well :)
I'd spend a lot more time fine tuning your UI. Visually, it is well, lacking and can be improved. Thanks for the effort putting this together though. It's no small feat.
Thanks for you feedback. Not sure to understand why you would spend lot more time. Can you be more precise?
oh and next time if you have hate to throw at people, keep it for yourself. read my response again, understand it, create a new account and come write a new comment. That's what you should do. and don't forget to meditate while doing some Yoga before that.
More information are needed. &amp;#x200B; What is your operation system / distribution ? How did you install it?
You're welcome.
Try this for local authentication https://www.hackingwithswift.com/read/28/4/touch-to-activate-touch-id-face-id-and-localauthentication
Heard that it’s limited to 5 different users? I’ll take a look when I get back, thank you.
Not sure about that. Do share what you discover. Cheers
I'll tag on my thanks as well. I'm new to this and this community is invaluable to my development.
I have an App for which there is this feature where I need to place buttons(which has 3 lines of titles of different font) horizontally in UITableViewCell. The number of buttons varies (can go up to 50). Tapping a button should do some action. Very challenging problem. Please do let me know if any of you have a solution in mind. 
Building a chatbot for our company's app :)
We have updated the README file to reflect the component with a quick design to give a better look at the available components so far
To clarify: Each button has 3 lines of text? 30+ buttons in a single cell? 
You should have a look to a StackView which is dedicated to place components in vertical or horizontal axis. Once your you setup the layout of your stackviews you can add / remove subviews
I had to do some work with digital signal processing and had similar issues as it was difficult to access and modify the audio buffers and playback without an unreasonable delay (was just a few milliseconds, but quite noticeable). I ended up using AudioKit. It's a decent library although it does have some quirks. Incase you end up going with it, beware that there's an oddity with the in and out buffers. They appear to be separate buffers, but under the hood they're both pointing to the same array.
Thanks for your guidance. I will take a look at the offerings by Paul.
I'm a little confused by your post; is your ans variable supposed to be of type Person or Answers? I'm assuming it's Answers for now. Just create the Answers instance in prepare(for:sender:) (i.e. prepareForSegue) method the way you wanted to originally using the text field text as the values for the parameters. Then set your destination controller's property to the ans var you created. 
Actually I figured it out! I'm on Elementary OS, which is based on Ubuntu 18.04. I just followed the instructions on the Swift website, and then I had to edit the bash file. Thanks for the reply tho!
You can create your own instance of URLSession, for example, let session = URLSession(configuration: .default). 
Well, I will give a try. This thing cannot be so difficult to do and I suppose that a lot of apps handle that but I can't find a working example.
So my example is incorrect for background requests. You'll need to create a background URLSession. On the documentation you provided, they give an example: private lazy var urlSession: URLSession = { let config = URLSessionConfiguration.background(withIdentifier: "MySession") config.isDiscretionary = true config.sessionSendsLaunchEvents = true return URLSession(configuration: config, delegate: self, delegateQueue: nil) }() I think you also need to enable the capability in Xcode. 
So my example is incorrect for background requests. You'll need to create a background URLSession. On the documentation you provided, they give an example: private lazy var urlSession: URLSession = { let config = URLSessionConfiguration.background(withIdentifier: "MySession") config.isDiscretionary = true config.sessionSendsLaunchEvents = true return URLSession(configuration: config, delegate: self, delegateQueue: nil) }() I think you also need to enable the capability in Xcode. 
You could potentially use Azure Face Api or something similar. https://docs.microsoft.com/en-us/azure/cognitive-services/face/overview#person-identification You can use the tag feature to tag people in azure face api. If you are using for college you can reach out to MS and they can give you some free credit for running api. 
The doc I provide is about downloading. All I need is to send a simple json data once the app is running in background. I dunno how to convert that example to send my json data. &amp;#x200B;
Grid of buttons of varying size in a single cell
Wow, it even had Taylor Swift participation!
Suggest you read up on creating a custom tableview cell. Out of curiosity, what is your reasoning for doing this? I mean in terms of the app functionality. 
Can you upload a mock up or sketch of what you are after? It would really answer so many questions and would help people give you better suggestions
My App is an Islamic App to read Quran. Functionality is that Each Arabic sentence is in a cell and each word in an Arabic sentence to be in a Button (each button has 3 line text, first line of text is in Arabic, 2nd is its English transliteration and the third is its English translation). On selecting that button it plays an audio of that word
I think you might actually need to perform a [URLSessionUploadTask](https://developer.apple.com/documentation/foundation/urlsessionuploadtask)
You can use UICollectionView
Thanks for your suggestion. One doubt: does it automatically adjust to display a cell if it does not fit in a row or do we have to manually adjust it?
[mock up](http://imgur.com/OCzKeKc) 
It would be great if you implement it this weekend! :P
The implementation sounds messy. Sounds cleaner to use views and UITouch. 
After the fetch is called I will run this into a function: let session = URLSession(configuration: sessionConfig, delegate: self, delegateQueue: OperationQueue.main) _ = session.uploadTask(with: url, from: data) As all the routine is running inside the AppDelegate once I simulate background fetch I get the error in the beginning of the class AppDelegate: UIResponder, UIApplicationDelegate, error is: libc++abi.dylib: terminating with uncaught exception of type NSException And I don´t know how to solve it. 
If a cell does not fit in the bounds of the collectionview it’ll wrap to the next row automatically if you use the uicollectionviewflowlayout. 
Also interested in this! Really don’t know how it works yet, but releasing a ‘beta’ version could do the trick and using TestFlight to allow only a few selected people to use it? But waiting for others comment would be best!
TestFlight is the way to go
Does a TestFlight app only last for 60days?
I developed an app for my wife at her job and put it up on the App Store. Anyone can download it, but no-one does because it's so specialized. I assume the same would happen with you. Is there sensitive information in the app and that's why you're afraid to post it up publicly? 
Yes, TestFlight apps will stop after something like 30-60 days. I'd have to look up for the exact timeframe. 
There is a couple of locations and other things that would be better if they were not public, I was debating on making an initial page that required a specific password to access the rest of the app. However I was hoping there would be a better solution than an initial password.
Ok. It looks to me like what you really want is to layout each button as an element in a separate collection view cell. To do that, you would have to create a custom collection view layout. That’s a rather complex topic, but is not impossible. There are plenty of tutorials for it. Good luck! 
Publish it with some code blocking the entrance.
How can a memory leak cause a crash, apart from exhausting memory and causing the process to be killed by the OS? The article teases this at the start, but then never mentions it again. I tried looking up `swift_unknownRetain` and the only mentions I found were an old compiler bug (long since fixed), and access to a dangling unowned reference. That's a use-after-free, which is exactly the *opposite* of a memory leak.
Was this recent? You got through the App Store review process? 
Instead of posting abstract questions every few hours, could you just post a sample project which demonstrates the actual problem you have? You've gotten several different suggestions from different possible interpretations of your vaguely worded questions, and that's just a waste of time.
If you are leaking very bad or just leaking entire assets this can happen quickly. So you will end up with out of memory crashes. 
No have not done this yet, just open brainstorming.
I would like to not have to get people to redownlod ideally. 
Yes, I will indeed will create it :)
sorry to piggy back. does test fly require the 100 dollar fee?
Exclusive = either password protect the app or dont have it on the app store Your question seems to be... how can i have an app available in app store only for people i know without a password? You cant bro lol The only thing i can think of that would somewhat get around this is to create a branch io deep link that already includes the password of your app. So people can only open the app using the link (once the password is verified, the app should not restrict access anymore). But yeah the link itself can become publicly available somehow too. So the next step would be to make the “password” like a dynamic token or something like that so the same link does not work twice If you go the enterprise route, the disadvantages are that your app wont be available on the app store and ppl wont get the automatic updates. But you can prob make like an alert or something on your app telling the user to update. To distribute the enterprise app you would prob need to have the app archive hosted online so people can access it through a link or something. 
Sure as long as you meet the review process requirements they'll put anything up.
Testflight will shut down the app after the timeframe though
You could always just install the app directly on the persons phone. All you need to do is hook the phone up to your Mac and then install it through Xcode. That way you don't have to use the App Store at all.
TestFlight apps expire after 90 days. Every time you push a new build it resets back to 90 more days. So one solution could be just increasing the build number every 90 days and sending a update. 
Yes, I believe that was the first sentence I wrote. Are you agreeing that the article's first paragraph (and screenshot) is simply wrong?
Suggestion? Learn Objective-C. You'll need it sooner or later, anyway, and it's far simpler than Swift. It's easy to convert Objective-C to Swift. There's even some webpages that do it automatically.
I believe his second paragraph is wrong. [His crash seems more like he was accessing an unowned (instead of weak) variable](https://stackoverflow.com/questions/24177973/why-self-is-deallocated-when-calling-unowned-self) (probably self) after self was deallocated. Thats not a leak. That is accessing invalid memory. His second paragraph seems to back this up. A leak is when you lose track of allocated memory (not the system although the system can have its own leaks). If you allocate memory and then release it and then later try to access that same memory location you will usually crash or worse get data that is corrupt and the app continues to run. Anyways he goes on in the rest of the article to actually discuss retain cycles which are leaks.
Yes
Its 90 days.
You can't. Your best bet would be using something like an Enterprise account, or using something like TestFlight or HockeyApp to distribute it. 
Very good points! A memory leak alone was not the root cause of the crash referenced in the article, I see how the article can be a bit confusing in that respect. The point that I was trying to drive home was the bit about *unintended and non-obvious consequences*. The crash referenced was indirectly caused by a non-obvious retain cycle that was keeping multiple instances of a view controller around much longer than it should have been. The actual crash was directly caused by attempting to access an unowned reference to the view controller.
Thanks for clarifying. 
Thanks for the feedback, I updated the first paragraph to hopefully clarify this better!
Last time we applied for enterprise App Store you needed to prove your company employed over a certain amount of people (500 at the time we did in 2012) and you need to provide your company info like EIN and all that. Probably not feasible for someone wanting to build for friends and family. 
You could use Ad Hoc distribution. You need a normal developer account and you will need to register each persons device In your developer account. You will also need to change/update your app’s provisioning profile to work with new devices and republish the app with that profile for it to work with those new devices. IIRCn the profile will last for a year before expiring. If it’s just friends and family and under 100 devices (the ad hoc limit) this is definitely your best bet. It’s more of a manual process than TestFlight but it lasts longer than 90 days and it’s the right way to go about doing something like this. You can setup a webpage they can visit and install the app over the air as well. The hardest part will be giving them the instructions to get their device ID to provide to you. Some people are suggesting enterprise which Apple doesn’t give out easily (we had to prove the number of employees in our organization was over 500 along with providing other business info like EIN). That was in 2012 so things may be different now but even if you do get approved, you will be immediately violating their terms as you are only allowed to distribute enterprise signed apps to employees and contractors of the business (not friends and family). 
I don't provide the most in-depth answers, but I always try if I can. I also appreciate the answers from everyone else. I've learned a lot here and I hope it continues that way!
O yeah that makes sense. Got confused with the requirements
Could always use HockeyApp to distribute it. 
Weekend warrior here. No projects for me this month. Taking the time to watch Lynda.com lessons on Swift. I have really enjoyed the more advanced lessons like functional programming, closures, unit testing etc. 
Got a new job this month but I’m carrying developing a podcast app in my free time. Any feedback is appreciated https://itunes.apple.com/gb/app/capsule-podcast-app/id1401363092?mt=8
It turns out it's a lot harder than it looks because there's *one* two-byte ASCII grapheme cluster: CRLF I'm on vacation at the moment but the unfinished patch is at https://github.com/apple/swift/pull/23095
A friend and I just released our app Monarch Trips. It’s a travel planning app that lets you organize places into day plans, and collaboratively plan with friends. We built it from the ground up using Swift, MapKit and CloudKit. This is our first time releasing an app so we would love to know what you all think! https://itunes.apple.com/us/app/monarch-trips/id1454473627?ls=1&amp;mt=8
As a relatively new iOS developer, I think this is going to be really useful for me. Thank you. I just tried pod installing though and I got an error. Here's a screenshot of my pod file and terminal: [https://imgur.com/a/OlVTHuj](https://imgur.com/a/OlVTHuj) 
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/9QigS8G.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20ei47b5i) 
Install the app directly on their devices from Xcode (I believe this is referred to as sideloading). There may be a way to do it with the app store but I assume Apple doesn't really want you to and I wouldn't attempt that route. 
I’m just dicking around implementing various concepts that I came up with in Photoshop. It’s serves the purpose of helping me learn Swift while also giving me new objects to stick in apps if they pan out.
Just create custom provisioning profiles that include the UDIDs of their devices. You can install archived IPAs signed with distro certs and profile using Apple's Configurator 2.
And Enterprise costs a bunch and you need a DUNS number.
No. You can.
Configurator. Thank me later.
I am learning server swift vapor framework. 
Thank you, audiokit looks like its worth a try.
100 days of swift! This has really resonated with me. Things are actually staying in my head. [Hundred Days of Swift](https://www.hackingwithswift.com/100) Paul from Hacking with Swift really does an amazing job! 
What about using Diawi ? I used it for something similar and it worked great. It hosts your app and you have to give the link to people your trust. 
Sorry the image is not very clear, but I just tried installing it with Cocoapods and it worked 
Working on setting up a lot of analytics and preparations for A/B testing for HiLo. Another thing I’ve been working on for the app is a very simple way for us to show a message to our users. I decided to build a custom backend for this, and that is the first step of our journey away from Firebase! 
I’ve been using https://github.com/seanhenry/MockGenerator personally (he also has an xcode extension, see the readme). Did you know about his mockgenerator? Do you have an AppCode extension? 
Yeah it makes sense ,if you wanna learn core technologies ,you must dive deeply ,no tutorials can give you all ,or the authors will be you, good luck to you !!!
I am assuming that you are building something custom that won't be of much use to anyone. Also if you submit then you aren't telling others. Submit it to the App Store and put a $50 price tag and I assure you no one would get it. Then send a promo code for each family member/friend whom you would like to have the app. But this will still require a $99 developer membership fee (which applies yearly). Once downloaded, they can keep it on their phone, but if they need to redownload it after the year is over, they will be able to do so only if you keep renewing the annual $99 fee.
 @dnkoutso I am sorry it won't go smoothly with repository.. Basically, you still need a token to access our framework(it is verification framework). We will however, share our podspec and it should be clear: `s.default_subspec = 'mainSDK' s.subspec 'mainSDK' do |mainSDK| mainSDK.vendored_frameworks = 'mainSDK.framework'' mainSDK.source_files = "mainSDK.framework/Headers/*.h" end s.subspec 'additionalSDK' do |additionalSDK| additionalSDK.source_files = "additionalSDK.framework/Headers/*.h" additionalSDK.vendored_frameworks =['additionalSDK.framework', 'mainSDK.framework' end Now, in our mainSDK we include additionalSDK with **#if canImport(additionalSDK)** We then provide code related to additionalSDK in between those compiler flags &amp;#x200B; However, after including additionalSDK, our **#if canImport(additionalSDK)** always returns **false...** and we can't reference any code related to additionalSDK &amp;#x200B;
Thanks man, looks great. It saves time and enforces the good practice to define protocol files before writing concrete implementation. 
I’ve been working hard on my new weekly blog about Swift and iOS - I’d love to hear if you have any feedback or suggestions! https://schiavo.me
Oh my, I’m trying to learn Swift (I’m mostly developing in PHP) by writing a script that will go though a pdf file and recognise each element one by one. Though it’s hard as I have no previous experience with iOS development 
That’s great mate, I’ve looked through docs and I feel like there lots of potential here
No, I don't. I don't know AppCode to be honest. :) That means no extension for AppCode.
I wish the Xcode version was fully open source. 
You need to mock, not to mocks.
I’d say take a look at Core Data, just learned using it myself as well. Good luck!
Hey all, Im a beginner here and I had a quick question. I've gone through almost all the materials regarding Swift by Apple, as well as some third party ones to, like Mimo, and I think I am ready to start making my app. Its not a complicated or difficult app, my New Years resolution this year was to learn a new skill and making an app was the one I picked. I wanted to make an app to remind me to drink water via notifications, as well as log how much water I drank that day. Simple! Only problem is, where do I begin? Where shall I start? I open Xcode and I just stare at it, not knowing how to begin this task. Help?
Easiest would be to store the Int right on the Hard Drive. &amp;#x200B; When the app is closed: Int -&gt; Data -&gt; Save Data to File App launches Read File -&gt; Data -&gt; Int
If you just want to store some kind if primitive data such as an Int, it is totally okay to store this in UserDefaults. &amp;#x200B; So, instead of assigning an Int variable somewhere in your code to store your count, you should just do this : &amp;#x200B; // Retrieve your count when the app launches. var savedCounter = UserDefaults.standard.integer(forKey: "Lift1Used") // Increment it and store it in UserDefaults when you tap on your button. savedCounter += 1 UserDefaults.standard.set(savedCounter, forKey: "Lift1Used") I used some temporary variable for clarity, but you absolutely can do something like UserDefaults.standard.set(UserDefaults.standard.integer(forKey: "Lift1Used"), forKey: "Lift1Used") when you tap on your button.
I'm a fervent Core Data user, but I think this might be way overkill if he just wants to persist a few Integer values between launches ;)
userDefault with no doubt. It’s what you need for what you want
Thanks
I wasnt sure what else to suggest? Persistant data?
UserDefaults is what you want unless you start storing more data or branching into more of a database structure then I’d suggest Realm over CoreData. CoreData can be a pain to work with. u/RazardValeth I’m a little lost on where you’re incrementing/decrementing the value in your second code snippet though, you’re just retrieving the value and putting it back in as it’s written.
I'll be continuing my 100 Days of Swift program – I posted day 37 a few hours ago, and there will continue to be one a day for all of March and April. You can follow the tutorials on your own schedule, so start when you're ready: https://www.hackingwithswift.com/100 I'm also continuing to run my [Swift on Sundays livestreams on YouTube](https://www.youtube.com/paulhudson) – every week we build a new app from scratch, and tomorrow I'll be building both a Vapor back-end and the iOS app to talk to it. A couple of days ago I posted a new test onto my site, where you need to rearrange the lines to make code work: http://hackingwithswift.com/test/rearrange-the-lines/ There's more to come! It's another busy month :)
You're right about my 2nd snippet, I forgot to increment the value. I just edited it, thanks. I agree on your first statement, UserDefaults should only be seen as some kind of persistent \[String : Any?\] dictionary. For anything more complicated than that, I strongly advise using Core Data.
No problem, I was a little confused what you were trying to do there at first, just wanted to make sure OP didn’t get lost too since they don’t know the syntax.
UserDefaults is definitely the way to go for this particular case :)
I’m working on an app for friends and family that allows us to plan trips to our families cabins and share media using Firestore. I also recently released an Atari Asteroids game called Asteroids 5400, is love some feed back on it if anyone has the time to try it out.
I’m working on an app for friends and family that allows us to plan trips to our families cabins and share media using Firestore. I also recently released an Atari Asteroids game called Asteroids 5400, is love some feed back on it if anyone has the time to try it out. [Asteroids 5400](https://itunes.apple.com/ca/app/asteroids-5400/id1453454637?mt=8) 
You’re really having trouble with the “Minimal, Complete, and Verifiable” concept.
This sounds exactly like what I need ! I am not sure how to apply it though, I made few changes and now I have mainly 4 buttons (serviceUp,serviceDown and otherUp,otherDown) and it shows how many times I took each lift, on my way up and down.. and total of each lift. I've created counters for each, and once I click a button it adds to correspondent up or down, and total. Here is the code (image?) https://imgur.com/a/sJger1p Now I am not sure where can I put the UserDefaults, I understand that I have to include it in the buttons (so each button saves the 2 results it is affecting), but how can I recall that value, since I started with setting values to zero. I am lost here :( 
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/CLNXKlF.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20ei5t13v) 
Thats what i meant userdefault. Been alittle but since i used it. :) agreed thats prob best
Ok, I will try to provide some sample project, which would imitate our problem :)
After one month of finishing, we have tried to create optional frameworks in this manner.. \`Still no success. We think it is impossible to do that with #if canImport or maybe we do something wrong... We still can't access code of **optional framework** from **the main framework**. Here is our detailed problem, please help if you know how... We could contribute to you also :) [https://stackoverflow.com/questions/55077857/if-canimport-does-not-find-frameworks-with-cocoapods](https://stackoverflow.com/questions/55077857/if-canimport-does-not-find-frameworks-with-cocoapods)
Hey, &amp;#x200B; So from what I see, you need to keep track of 4 counters in your app : the number of times you took the Service Lift up, the number of times you took it down, and then the number of times you took the Other lift up and down as well. The other two "total" counters can be calculated with the 4 counters I just listed. &amp;#x200B; You should start by writing a new method, which will be responsible for fetching the number of times you took each lift and update your counters labels according to these values. private func updateCountersLabels() { // Fetch persistent counters from UserDefaults. let serviceLiftUpCount = UserDefaults.standard.integer(forKey: "ServiceLiftUp") let serviceLiftDownCount = UserDefaults.standard.integer(forKey: "ServiceLiftDown") let otherLiftUpCount = UserDefaults.standard.integer(forKey: "OtherLiftUp") let otherLiftDownCount = UserDefaults.standard.integer(forKey: "OtherLiftDown") // Update UILabels texts. // You got a typo in your 'upScoureService' UILabel name by the way :) upScoreService.text = String(serviceLiftUpCount) downScoreService.text = String(serviceLiftDownCount) upScoreOther.text = String(otherLiftUpCount) downScoreOther.text = String(otherLiftDownCount) totalScoreService.text = String(serviceLiftUpCount + serviceLiftDownCount) totalScoreOther.text = String(otherLiftUpCount + otherLiftDownCount) } So, this method basically fetches the saved counters from UserDefaults, and updates your UILabels accordingly. Since all these counters will be stored in UserDefaults, you don't need them in variables within your UIViewController anymore ; get rid of all your Int instance variables, such as "counterUpOther" and all. &amp;#x200B; Now, we will want to set actual values in the UserDefaults when you tap on a button. This is a way that can be done ; not the most efficient, but it's the more readable I can come up with : @IBAction func otherUp(_ sender: Any) { // Fetch the existing counter for this lift in UserDefaults. var otherLiftUpCount = UserDefaults.standard.integer(forKey: "OtherLiftUp") // Increment it. otherLiftUpCount += 1 // And store the value we just incremented back in UserDefaults UserDefaults.standard.set(otherLiftUpCount, forKey: "OtherLiftUp") // Finally, call this method to update the numbers displayed in your UILabels. updateCountersLabels() } I just rewrote one of the 4 IBAction methods that exist in your code ; you should do it for each one on the same model, by paying attention to the UserDefaults key (in this case, it's "OtherLiftUp" ; you'll want to change it in the other methods). &amp;#x200B; This should be enough to get the same behaviour as your current app. There's one thing missing though ; all these counter labels will still display "0" at app launch. To fix it, just add the following line : &amp;#x200B; override func viewDidLoad() { super.viewDidLoad() updateCountersLabels() } That way, you're telling your UIViewController to call "updateCountersLabels()" when it is created, and this method will be responsible from fetching the values we previously stored in UserDefaults and update your UILabels texts. &amp;#x200B; Hope this is helpful enough !
Thank you! Now I will have my proof that the building lift is shit! 
Wow, gold ? Thank you very much !
Agreed. I love Core Data and think it should be the first thing considered for any iOS or macOS app if a database is needed. Cross platform? Sure, look at other options. In this case any sort of database is using a sledgehammer. UserDefaults seems perfect, at least for now. At most, saving to a disk file in JSON, perhaps, if the requirements start to grow a little. If it grows a lot? Like being able to track trends, etc. Core Data. Assuming it stays on Apple platforms, naturally.
It worked on the simulator. When I open the storyboard in the ipad pro configuration, the skview was overlapping the textfields. I think I got it corrected. Im terrible at backend, but even worse at front end crap. I can hack the backend to work. Front end...gives me headaches. 
UserDefaults 
Guys I have a simple do catch question in this code below, &amp;#x200B; ///////////////// do { try // error occured code print(1) } catch { print("error!") } /////////////////// When the error occurs, does the catch block get to be executed first than the subsequent code line which is "print(1)" ? &amp;#x200B;
Hey, poream3387, just a quick heads-up: **occured** is actually spelled **occurred**. You can remember it by **two cs, two rs**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Points for the name, if nothing else. 
The print(1) will not happen if an error is thrown
I've been working on about five programs for a corporate event. All are related and using the same source info CSV files. All are little and rather specific to the event. 
[removed]
Remember that objects in Swift are pass-by-reference, so passing an object *is* passing a reference. There's a bunch of possible ways of structuring things, but the classic MVC model would have a controller object that your view layer references.
If your game data is an object, you’re already passing it by reference. If you have `let obj = MyObject()` where `MyObject` is a class, the value of `obj` is not the contents of the `MyObject`, but rather a pointer (a number that refers to a location in memory) to an instance of `MyObject`. This means that let foo = MyObject(number: 1) let bar = foo bar.number = 2 print(foo.number) will print `2`, since when you assign `foo` to `bar` you’re not copying the object, but rather just passing the address of where the `MyObject` lives. This means that passing objects between view controllers is super efficient. If the view controllers are working on the same data, it’s best to pass the same object around, as it can just simply be modified by each view controller. If the other view controller needs to work on a copy of the data, then you’ll want to copy the object.
Add a 3rd party dependancy to a project, just so you can complete this super basic tutorial, that you could do in half the time without it!
That is true. The point of this tutorial is to help beginners visualize and understand constraints. I struggled, in the beginning, to understand Apple’s syntax and PureLayout is what gave me a confidence boost in writing UI components in code and it even made me understand Apple’s syntax.