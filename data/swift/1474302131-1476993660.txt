I'm not sure what you mean by the first paragraph. React Native apps don't have to run in every web browser. Just the one you embed in the app, right?
Of all cross platform options you focus on react native? Seems like it should be way down the list after C# stuff and Qt for example.
Shhh! Stop steering people away from "write once deploy anywhere" technologies. I got my job because of PhoneGap and Xamarin. The products made with Phone Gap and Xamarin ended up being so buggy and so impossible to maintain that they hired me to rewrite several core apps in native Objective-C and iOS SDK ;) 
IM not sure I understand your point?
Why is that?
React Native does have the React model for state and props, though, which is pretty darn awesome.
Oops I see how it could be ambiguous. My point was that people buying into the hype of write once, deploy anywhere technologies landed me a job because the hype failed to deliver good software and companies were looking for people to re-write software in native code. 
One good thing does not a good development environment make. 
Show me a complete tutorial series that teaches someone from beginning to end how to develop full applications in React, like Big Nerd Ranch, iTunes CS193, Hacking with Swift, that includes necessary topics like custom table cells, parsing JSON objects, etc. I spent hours trying to just find a basic UITableView implementation in React Native. Swift is best because of documentation plain and simple. 
newbie here trying to learn too. I have an ongoing project that ports between iOS and OSX. https://github.com/codeRomeo/RockPaperScissorsOSX 
I really miss Objective-C too. Swift is a much better language in almost every way, but the tools are just really lacking. Xcode was *great* at Objective-C, still is. Crazy fast compile times, great refactoring, auto completion and syntax highlighting have no problems. If Xcode could handle swift as well as it does Objective-C I'd be sold. These 3 minute incremental builds are killing me. I feel like there's very few production large scale apps written in swift, and it's mostly a bunch of toy projects, otherwise we'd be hearing a lot more complaints like the ones you're brining up. EDIT: Also, to answer the question, my 25,000 line swift project took about 7 hours to convert to swift 3. Roughly 3900 lines of code needed to be updated.
I'm building something similar. I just want away to check my calorie deficit as a Watch complication and iOS widget. As my first app, learning HealthKit has been interesting.
Thx for suggestion, I'll try tonight.
It would take only a few hours for me to write a tutorial that teaches custom table cells, parsing JSON, creating a table view, etc, all in React Native. Do I *want* to? No. Writing Hacking with Swift is more than enough work for me!
Yeah "Value of optional 'SKView?' not unwrapped; did you mean to use '!' or '?'?
Yea, it's very different. The way UI objects are constructed is totally different. macOS is very heavily KVO/KVC dependent and there's a tool called bindings which uses KVO/KVC to simplify model/view connections. There are tons of other differences as well. Nothing works the same between Cocoa and Cocoa Touch. The concepts are similar, but they all are connected differently. The Big Nerd Ranch book for OS X is a really good reference. It's how I learned macOS programming after knowing iOS.
Actually I like bundling parts together with Storyboard on macOS. It has it's downsides too but somehow it makes my projects feel tidy. Edit: for example, all my Preferences ViewControllers are typically in one storyboard
People say "closer to web development" as if that's a good thing, but every time I've had to do web development with any platform (including React) it seemed like a complete disaster to me. I looked at many languages and environments for my project, and it was not at all inevitable that it would end up being Swift, but React (any variety) definitely did not make the shortlist. - Simplicity: one runtime for my whole application. It's possible to break an architecture up into lots of little technologies that talk to each other, but that's more work for me. (I've never seen an application so trivial that you didn't need to make FFI calls to a lower level, eventually.) Maybe it's a good deal if you're a giant company with 30 programmers (front-end team, back-end team, build team, tools team, etc), but right now I'm just me. I find autolayout easier to use than flexbox, 99% of the time. If I did want to break up my application across runtimes, the other one wouldn't be Javascript! - Performance: I'm skeptical that NodeJS will ever match ObjC/Swift in performance, and that matters to me and my use case. The way react-native interacts with GCD seems pretty confusing, and even if it's possible to match the performance of Swift, I'm not sure I'm smart enough to do it. - Mac: [React Native doesn't support OS X](https://github.com/facebook/react-native/issues/247). There is a [react-native-macos](https://github.com/ptmt/react-native-macos), but it's only version 0.32. I've lived through a dozen generations of computer hardware, and using non-native platforms has always been bad (performance, user experience, or both). It will be cool if React Native finally solves this, but I'm not going to hold my breath. Remember, Java was one of the four officially supported runtimes on early versions of OS X -- you could just as well ask us all why we're not using Java (and in fact, the JVM did make my shortlist). - Support: there's over 10x as many questions/answers on StackOverflow for Swift as React Native. The tags don't correspond exactly, and SO isn't a perfect barometer of support, but any way I try to cut it, there's always a lot more support for using the native platform, on whatever platform you're using. Native platforms also just get used a lot more. It looks like NSPopover in React Native simply didn't work right at all before May, for example. That would never happen with the native library. What other secret bombs are hiding in React Native, that I'd be the first to discover? - Fundamentals: Swift doesn't have my favorite Unicode support, but by any measure Javascript is much worse. Swift doesn't have a proper numeric tower, but Javascript has only one numeric type at all. ICU doesn't support unbounded lookbehind, but Javascript's regex doesn't support lookbehind at all. Swift is not my favorite language, but for pretty much everything I dislike in Swift, Javascript is worse. What's the upside of React Native? Maybe I can ship a Windows or Android app more easily. Well, I don't use those platforms myself. And if I wanted to sell my software, from everything I've read, those users are much less likely to pay for software, anyway. Until I'm shipping and successful on a *first* platform, that's not a benefit to me -- that's paying a cross-platform tax on the hopes that someday it'll pay off. I think cross-platform is highly overrated: Instagram didn't port to a second platform until they'd done a $50M funding round. Even Excel was Mac-only for its first couple years. Cross-platform is never free, and I'm not going to do it poorly just to exist on more platforms. Design and UI are fundamental to my software's value. Right now I'm optimistic that people will get Swift working well on Windows and Android much sooner than React Native will ever become a good platform for building Mac apps.
I am building an app using autolayout. My layout is kinda complex. 3 rows of labels and 2 columns with different places. Not to mention that the space between each row is different. Then I added an image that has border and tired to fit them all as I wanted. That's when I realized autolayout is pain in the ass "especially" if you want it to look the same for other devices. So I used this solutin: 1. Design your layout using iphone 5 simulator. 2. select the constraint you want to change then ctrl + drag to xcode and give it a name 3. Use this https://github.com/dennisweissmann/DeviceKit to help you identify the device. Code will be like this: if device == .iPhone6Plus || device == .iPhone6sPlus || device == .iPhone7 || device == .iPhone7Plus { top.constant = CGFloat(30) bottom.constant = CGFloat(120) } 
Also, this: if device == .simulator(.iPhone6s) || device == .simulator(.iPhone6Plus) { top.constant = CGFloat(10) 
Pull to refresh doesn't render properly in the sim on iOS 10 AND you are not using a UITableViewController subclass. I have this same issue. It will usually show up if I leave the PTR screen and come back... sometimes. At this point I am just calling it a bug and pushing forward, already spent too much time trying to work around it.. I have plenty of devices to test on and as long as it works there im fine.
There are a lot of differences, but the newer Apple frameworks are better at cross-platform support. I'm currently working on an application that runs on OS X, iOS, and tvOS. All the UI work is being done in SpriteKit and is pretty much exactly the same for each build target.
FWIW, most large Mac apps I'm aware of don't use Bindings. It's appealing, but difficult to debug when things go wrong.
I think I found the problem(s). Turns out besides histedit.h, there are several source/headers needs to change due to the fact that some header are not compatible across linux and bsd, for example get line() . I think someone is making a patch and summited a pull request. Meanwhile I'll just wait.
This question is overly broad. Just what in the hell are you enquiring about&gt;?
Still hacking my way through https://github.com/seanoshea/FuzzyMatchingSwift
Cocoa has accumulated 20 years of cruft and is accordingly harder to program. For example, there's CALayer as well, but it's optional and it's not easy to mix it with regular NSViews. There's also no guidance system like UINavigationController that does most of the program flow for you, you've got to build that yourself.
The people who make Sketch, a good app for making UIs, puts out a great line of videos on the topic: https://www.sketchapp.com/learn/ 
macOS isn't nearly as view controller-centered as iOS. In fact, NSViewController did practically nothing until just recently. Furthermore NSWindowController, which you might suspect would act as a substitute for view controllers in a window-oriented desktop UI, don't really play a central role either. Instead, traditionally most controllers in macOS projects are just direct NSObject subclasses, leaving navigation and presentation logic up to the developer. View lifecycle methods (-viewDidLoad, -viewWillAppear, etc) are in views themselves.
What did you think about how the advice of this video applied to Swift? I think many of the things the speaker says are funny, but he says things break down easily into binary states when they don't always do that.
No sorry:(
His comments about growing a language with the room for change as the needs change. When swift first came out, it was quite simple, and I really liked it for that. As it started gathering more and more language features, I fearer that it would turn into the next C++ (which I used to be an expert in). Listening to this talk made me realize that for a language to be better, it *needed* to do more things, lest you end up re-inventing the wheel, so to speak, on every project. 
Hello, i have already read the BNR IOS PROGRAMMING book and i fully recommended it to you, first of all this book teach you more about iOS programming than swift, for example what is a view controller, memory, table views and a lot of useful resources. Independently of whats language you are working on (swift or obj c) Continue reading the book and try to make the transition from swift 2.2 to swift 3 by yourself if you get stuck try the BNR forum or google your problem, if you get stuck it is probably that somebody else also, and have already post something on a forum or stack overflow. This will help you learn more, practice and read more about swift 
How do i do that? 
I think they are looking for a resource to learn how to draw in code as part of an application. 
I feel like Swift has a better future than React Native oh, and also because i'm not interested in developing for android and not interested in writing javascript
Turned if off after the intro... I fear even then, it was already too late. 
I believe /u/twostraws may be planning exactly this. Not 100% certain though
Which Xcode version you used for this project? If Xcode 7 - check size constraints for various device size classes. Seem's you have several size classes, but edit only one. Try to google about "size classes missing constraints". Or reset all storyboards to Any-Any size class and check disabled or duplicated constraints, after cleanup, start correction in over size classes. Also check this https://developer.apple.com/videos/play/wwdc2016/222/
“OS X Human Interface Guidelines” by Apple Inc. https://itun.es/ru/Mu2D3.l
There's no good book for learning how to make custom UI. You'll have to learn by yourself: First you need to understand how the cell and the control instances work together. Then you'll dive into gnu step source-code to see by yourself how it's (barely) made nowadays on macOS. Bindings can also bother you a little bit. I've written a piece of code that can propagate value through bindings but I need to modernise it and make it Swift 3.0 compatible. I'll post the updated gist as an answer to this post.
Thank you for the help, a few follow up questions: First, when you say, "check size constraints for various device size classes" is that a check box or check to see if I am editing different sized size classes? Second, everything I've read says that wC hR should work for all iPhones, but obviously that's not the case. (I realize this might be due to me not knowing how have it check for various device classes). Third, if the above doesn't work is there a simple way to switch my storyboard over to Any-Any? I am hesitant to remake all my labels and buttons due to me being kinda rusty and might not connect them all properly. Thanks for the help.
CurrentOp isn't set to the op button you've pressed. It's always = like you originally set it. And btw, you really shouldn't explicitly unwrap (use !) like that. Use "guard let ...". 
Still trying to figure out what the ! And let means so ill try it later Also how do i bind my currentOp to the op? Do I do it the same way I did it with the button?
Assuming you're doing the Stanford course, just get it from the title of the button. Look at what you did for numbers. 
You see this line? sender.titleLabel!.text! titleLabel and text are optionals, which means that they may exist or not exist (equal to nil). The use of the exclamation point is to say, "I know that sender has a titleLabel property, so let's unwrap it (!) and use it," and you're also saying, "I know that the titleLabel has text, so let's unwrap it (!) and use it." This is forcing access to the property whether there is actually a value in it or not. If it was nil, your app would crash.
I chose Swift because I'm an old C++ programmer who wanted to test drive Apple's new language. Mostly I love it. There are decades when I would have killed for an elegant solution like optional chaining. Scratching my geek itch aside, native iOS apps are prettier and more responsive than React Native apps. They are more likely to conform to all the form factors and orientations of iOS devices. They look and feel comfortable in a way that React Native apps just don't. Most React Native apps look like web apps trying to shove themselves into an iOS device. There's too much scrolling, too much going on on the screen, and they interact with the user in a way that an iOS user doesn't expect. If you have little Xes in the corners of your modals, you're doing it wrong from an iOS perspective. An iOS app should do one job, a job you can hold easily in your mind, and it should do it elegantly. It shouldn't just be a rewrap of a web site that was designed for the desktop. It shouldn't be a labyrinth that is difficult to navigate on your phone. The Facebook apps are the perfect example of this. Their apps ought to be things of beauty and joy. React Native is their dog food, and they have enough money to take it to the limit if they wanted to. 
iPod / iPhone should work basically the same way. iPad as well. If you want easy flexibility with design you can use storyboards and size classes. The biggest difference between iPhone / iPad / iPod will be certain apis you can use. So if for instance, if you plan on having a button in the app which places calls it won't work on iPad or iPod. There are other limitations too, but I'm out of time!
Market cap isn't size. It's value. There are two typical measures for company size, and Walmart dwarfs Apple in both revenue and number of employees. If investors decided this afternoon that a particular stock was horribly overvalued, and started trading it at half its previous value, we'd say that company lost half its market value, but we wouldn't say it shrank by half.
Yep.
when swift was new, it didn't have as many as C++, there are also non-keyword things, behaviors, in C++ like initializer lists and multiple inheritance that add to the language complexity.
you can use optional unwrapping for these scenarios. Since the camera is not available in the simulator, I built a way for the image picker controller to just return a static image instead of initializing the camera.
Yep. Great point. You'll definitely need to think about how the fallbacks in these scenarios will work. Similar with 3D Touch. 
You should learn more about optionals and unwrapping.
that's very very awesome. isn't it great being able to work on fun projects at work and even greater to be able to release them. 
i have a sad theory that Swift is just a marketing tool :( and gets more real with every realese i can't send post request with parameters for example, it just spawns a wall of system logs that lead to libnetwork.dlib... i can lose a client over this shit
You must not have tried very hard. Swift Playgrounds were available in XCode long before the app.
I assume OP means the iOS app that *teaches* Swift.
Yeah, Good point!
This is exactly what I needed! Don't know why I didn't think to look there. Thanks!
He shoots and he misses
Can't you just replace the "http" with "https"?
You can only emulate your own apps ¯\\_(ツ)_/¯
I mainly was referring to the new game released on the newer ipads. Or is what you're referring to the same thing? Because if it is, I'm definitely going to check it out :D
All good points. Saw the suggestion to allow arbitrary loads by disabling App Transport Security - pretty decent approach that I use myself. However, I'd like to mention that this method may not work well in the future since Apple is requiring all apps to connect securely through HTTPS connections by the end of this year (enabling App Transport Security will be mandatory). https://www.google.com/amp/s/techcrunch.com/2016/06/14/apple-will-require-https-connections-for-ios-apps-by-the-end-of-2016/amp/?client=safari
Yeah, it was officially released last week i think... pretty recently. Seriously, if you are genuinely interested in it, the Xcode playgrounds are a great way to learn the language (I did it this way myself using exactly the links I provided). I personally think the ipad app was designed as a part of a school initiative thing, its easier to get a school a bunch of ipads than it is a bunch of mac computers. Having never used the ipad app, i can't possibly imagine it being more effective, just slightly more interesting for the game-y aspect of it.
I had this same issue, there's an extra `import` call below the others that's causing the error. Check the line the error refers to and look right above it!
Did anyone already mention the fact that it's a little optimistic to assume every url you translate from http to https will work and produce the expected result?
From what I can see, your for loop should be 'for i in 0..&lt;numSegments' and the CGSize init should be CGSize(width: height:). That may not be all but it's a start
What /u/nanothread59 said. To elaborate a bit: Swift 3.0 removed the increment operator since operators in swift don't return a value like they do in C++, and the nuances of ++i and i++. See [this link](https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md) for more details. Basically think of your classic C for loop as being deprecated as well now. See [this post as well](https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md) for more info. Instead you should all the swift alternatives listed in the that post. 
Nil = 0, error right? Also how do I add the currentOp to the buttons? I still can't figure out the error
nil is the absence of a value. It's not necessarily an error, it's just nothing there. To illustrate the difference, consider looking up someone's age in a spreadsheet: * if the person is in the spreadsheet, they definitely have an age, and you can look it up. The age might be 0 (if they were just born today), but it's definitely some number. This is not nil. * if the person is not in the spreadsheet, then you get nothing. Nothing went wrong, there wasn't an error, you just didn't find anything. This is nil. * if the spreadsheet program crashes, then you get an error. Things that can produce errors are marked as "throws" in Swift, and you have to "try" to do them, then recover if there was an error. So, successfully producing something, vs successfully producing nothing, vs failing to produce something. Using "!" in Swift lets you tell Swift that you really believe whatever it is will always have some value (maybe 0! but definitely some value), and it should stop bothering you about checking for nothing (and crash instead if you were wrong). Using "if let", or "guard let", or "??" or "?." lets you gracefully handle getting nothing, in cases where it's a possible result.
Awesome, thank you very much, I'll try to fix the error in 30~ minutes I'll see if removing the ! and replacing it with ? helps. If not.. I'll see what I can do with currentOp
FWIW I think you need to add 'currentOp = something' in your program. Right now you only have currentOp = "=", so it only ever gets set to "=".
What is currentOp2? Why not just currentOp = "+"?
Ok, so it's currently at currentOp = "=" and when I press +, -, * or / it won't change the variable, it won't go past the first case. I added currentOp = currentOp2 at the first case (which was "-") and it finally started minus'ing. So when I press the buttons it won't change currentOp's value to their text.. :/. Any ideas? Do you want newer code to look at?
Like... you can't see the current character at an index? What's the point of an index?!
Doesn't `string[index]` do exactly that?
I've fixed it. Just spent hours trying to work it out and it turns out i defined movingGround as a variable and then literally three lines down defined it as a constant.
You can use a String index to get the character at the location of that index. Here's a very basic example: var str = "Hello, playground" let lastChar = str[str.endIndex.predecessor()] Note that you can't access the last index directly as it will be out of range. You can now loop backwards over the string: var foundSpace = false var currentIndex = str.endIndex while !foundSpace &amp;&amp; currentIndex != str.startIndex { currentIndex = currentIndex.predecessor() foundSpace = str[currentIndex] == " " } You'll now have the last index where a space is found
 extension String { func lastIndex(of character: Character) -&gt; Index? { for index in characters.indices.reversed() { if self[index] == character { return index } } return nil } } let string = "This is a test string!" if let spaceIndex = string.lastIndex(of: " ") { string[string.startIndex ..&lt; spaceIndex] // "This is a test" }
Okay so currentOp = btnPlus.text(or btnMinus) and I do this in a function which is btnPress and then I write the function's name in the switch function? I use currentOp in setting what action the calculator will be doing, +, -, / or nothing (=) the standard value is "=" i.e. only show answer.
predecessor isn't in Swift 3, but I'll try to use index(before: ), I guess... Thanks for replying.
Up until 3 months ago I was still supporting iOS 6. A lot of these non Apple frameworks routinely drop support for older OS releases. The main reasons for me have already been covered but being able to compile and run 6 year old objC code is pretty compelling. If you have a large, mission critical app, you would be crazy to use anything but native tools IMO.
It's a gem? That's dumb why not make it a cocoapod..
currentOp is just a middleman. You're actually using the button text to control which operation gets executed. Something like switch sender?.text { } might be more direct. Backing up further, the approach I would use for something like this is to have a separate function for each button, and remove the switch statement and currentOp entirely.
If you are looking for how to make a picture scrollable https://youtu.be/ppNZoEOr0zs?t=1h1m56s if you want to just make a UIView scrollable: https://www.youtube.com/results?search_query=scrollview
You can either make it a global, or a static variable of one of your types. There are use cases for both ways.
ok, just saw this lol nvm
Two different sub views of main view property. SceneKit view is above the AVCaptureVideoPreviewLayer. Make the SceneKit view background clear!
Thank you!
My project I guess was too big for the migration assistant. It just sat spinning endlessly for 3 hours. I've ended up making a new project and have been bringing in files and unit tests one by one. It's working well enough I guess and it's forcing me to look at all the code and think about method signatures and such. It's about as much fun as getting a tooth pulled though.
Decodable seems a lot better than this.
Do you mind telling us why? There may be a better way than implementing a global or static variable.
Seems like this is a web app framework, if anyone else was wondering exactly what was meant by "server-side Swift". Edit: Did I say something wrong?
Great article to help you with your decision when it comes to when to use Xibs, Story Board or Programmatic app design. https://www.toptal.com/ios/ios-user-interfaces-storyboards-vs-nibs-vs-custom-code
Typically not a good idea, but there are reasons why you should. If it's just a string or something you could do this: struct Constants { static let permamentString = "Hello, how are you?" } So you can always call it as Constants.permanentString But aside from things like that, you would want to handle your variable via the objects that use it and not make it just some global variable. 
For someone that has recently just found out about both of these, what are the main differences? And is server-side Swift a practical option yet for bigger projects?
Yes, you can, I will advice CodeWithChris video tutorials, he explain how to make 4 different apps to absolute beginners and teaches swift and Xcode in the process. I think the first 15 lessons are on youtube for free.
No, it's impractical. Your language knowledge doesn't matter - fronted and backend too different architectures. So let's say you have minimal team of two guys, both know swift one develop backend (btw only on ubuntu) second on iOS (there is no over mobile platform which have swift support). After a half a year you cannot swap these guys otherwise you'll have terrible code on both sides.
Can anyone ELI5 the Any/AnyObject thing? A really smart Swift programmer thatI know was all excited about this appearing in the latest Swift 3.0 betas, but couldn't really articulate (so I could understand it) why it's so awesome. Something to do with objc-bridging?
Do you specifically mean [SE-0116](https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md)? The swift-evolution proposals are quite readable.
Swift 3 just got released, and with it, much better support for multi-platform Swift code... but I still probably wouldn't try to sell a potential customer on using server-side Swift yet. I think it needs a little more time in the wild with the community kicking out some contributions to make it really attractive. But Perfect and Vapor are a nice start! Also, I think the Package Manager needs some more time before it's really useful. Sadly, it's built kinda coupled to XCode, and that has complicated their test-building and test-dependency process to a point where (at least, last I checked) they had disabled the fetching of test dependencies altogether. It's a decent package manager, but... it's not a very useful build tool. At least not yet. There are lots of devs who would jump at the chance to work in a language like Swift that nicely finds the middle ground between a systems language and a scripting language, with next-to-zero-cost interop with jillions of mature C libraries. But right now the official tooling support just isn't as plug-and-play on Linux as some of the competitors. For that reason I don't think it will really pull market-share away from the popular non-enterprise web backend languages for another 6-12 months. I hope it does. LLVM is already a big deal and Swift is sort of purpose-built with LLVM in mind -- which bodes well for its chances of success in the future. And with WebAssembly and all the other "compilers are cool again" movement going on in software atm, LLVM probably isn't going anywhere.
If you're working in pure Objective-C, since the compiler doesn't care and foolishly trusts that you know what you're doing, the annotations are mostly just documentation. If you're consuming Objective-C from Swift, they're more than that. And I'd be interested in seeing your code bases if you strongly insist that you don't have the problems that optionals solve.
Watching this. Thanks for making this tutorial 
Swift seems perfect for this kind of thing. Very interested in the future of this project.
Thanks for the reply. So are delegates a necessity or is it just optional? Let's say for UITextFields for example, would changing a label represent the users input in the UITextField REQUIRE the use of delegates?
Would that be a problem? You just make an NSObject subclass that conforms to the UITextFieldDelegate protocol, and implements the `textFieldDidEndEditing(_:)` instance method; then you drag an NSObject into the XIB's objects, set its class to your custom class, then right click on the UITextField, and drag from the "delegate" field to the delegate object instance in the XIB to set it. You're not going to get very far in iOS/macOS programming fighting against the paradigms we've been using since the 1980s.
Maybe I worded my questions wrong, but it's less about how to use delegates and more about the advantages of using them. In what cases are delegates needed and how are they beneficial?
Oh, okay. A delegate is a lighter, simpler alternative to subclassing, like I said. You would implement an existing delegate protocol in a custom class when you need to customize the behaviour of an instance of a delegating class, which is a lot of classes in iOS/macOS development. They're beneficial because they reduce what you need to know about how a class works in order to customize its behaviour, usually by giving you a list of methods you can implement any way you like, as long as they take the right parameters and return the appropriate value.
Wow, you can cut the self righteous pedantry with a knife. I like a compiler that trusts that I know what I'm doing because I'm not an idiot and I do know what I'm doing. Maybe you need the training wheels. I don't really know you and you don't really know me. I've been doing NextStep/Cocoa since 1997. One might think I kind of know what I'm doing by now. The Objective C compiler has been characterized in years past as a "very polite" compiler. It offers suggestions but doesn't get in your way. At least it used to. Now it nags about adding nullable annotations on code I wrote ten years ago. The code has been working flawlessly all this time. So I would like it very much if the compiler would STFU about bullshit I don't care to add just because some other language thinks it wants it for bridging. &gt;And I'd be interested in seeing your code bases There's an awful lot of it. 19 years of it. Most of it still works fine (some changes for arc in the older libs are probably required). FWIW, I've been reading the Swift code base on github lately. Color me unimpressed so far. Long way to go to reach production quality. And the compiler takes so damn long I don't know how you get anything done. It seems to take about 10x as long after hitting 'run' for a Swift program to start up as an Objective C one. Swift, as a name, seems to be a cruel irony.
Thanks, so basically you're just getting the stuff you want instead of making it a subclass.
Thanks for your time, this helped me a lot!
Still, why? The way it's written: - it requires yet another package manager - it requires it to be installed as root (!!) - it hardcodes the location of the Ruby binary in your Xcode project file - it ignores the Xcode project structure and rewrites all `Dir.glob["**/*.swift"]` files (e.g., including all Carthage-installed source, which is almost certainly not what you want) - there's an "uninstall" but it doesn't do the opposite of "install" If you just want to run a couple regular expressions on some text, Swift itself is perfectly adequate, and guaranteed to already be installed on the system of anybody who wants to run this, and doesn't require extra package managers or "sudo" or any of this mess. Even if the code generation route was a good one, this is not a great implementation of it.
Thanks
Hmm.. I know it might not be this as it isn't swift 3 related, but did you make sure the very first sort descriptor in the fetch results controller is the same as the attribute used to separate the sections?
I'm about halfway through installing xcode and stumbled across this post. Looking forward to working through this, thanks!
Thank you, I had watched some videos of this guy, I will watch the rest (:
A delegate is merely a way for a class reference the requirements it has. These requirements are listed in a protocol. This abstracts the data and operations required. This is also often done as dependency injection, where a class takes a reference to a protocol on construction. The reason you just don't "reference the other class" is that it couples you to that other class. Instead, it is desirable to couple yourself to a protocol that can then be implemented in any manner by the client. 
Global variables exist as well.
Nobody will be able to help you with a question like that with basically no information at all.
Also check out IBM's open source project Kitura for comparison. https://github.com/IBM-Swift/Kitura
I'm not sure why you're getting downvoted.
I'm supposed to be [writing my new Swift book](https://www.hackingwithswift.com/store/swift-coding-challenges) right now, so I'm a bit short on time. However, I can give you a specific example where this change was great – this is adapted from my [Pro Swift](https://www.hackingwithswift.com/store/pro-swift) videos. Here's an example of a generic struct that wrapped `NSCountedSet` in Swift 2.2: import Foundation struct CustomCountedSet&lt;T: AnyObject&gt; { let internalSet = NSCountedSet() mutating func addObject(obj: T) { internalSet.addObject(obj) } mutating func removeObject(obj: T) { internalSet.removeObject(obj) } func countForObject(obj: T) -&gt; Int { return internalSet.countForObject(obj) } } Notice that I restricted the `CustomCountedSet` struct so that it works only with objects. This is required, because `NSCountedSet` follows other Objective-C containers and can store only objects. Now, you might think that this causes a problem: if we can store only objects, then we can't make our `CustomCountedSet` work with value types like Swift strings and integers. But this is where bridging comes in: yes, we need to make the `CustomCountedSet` store an object type, but if we then provide a bridged value type Swift will automatically convert it to work. So, to store strings we need to make a `CustomCountedSet&lt;NSString&gt;`, and to store numbers we need to use `CustomCountedSet&lt;NSNumber&gt;`. Once that's been created, you can go ahead and use normal Swift strings, integers, doubles and so on, and Swift will do the rest of the work for you: var countedSet = CustomCountedSet&lt;NSString&gt;() countedSet.addObject("Hello") countedSet.addObject("Hello") countedSet.countForObject("Hello") var countedSet2 = CustomCountedSet&lt;NSNumber&gt;() countedSet2.addObject(5) countedSet2.countForObject(5) So, that's Swift 2.2. In Swift 3, `Any` effectively bridges structs as well as objects, which means that same code is now simpler. First, the new type: struct CustomCountedSet&lt;T: Any&gt; { let internalSet = NSCountedSet() mutating func add(_ obj: T) { internalSet.add(obj) } mutating func remove(_ obj: T) { internalSet.remove(obj) } func count(for obj: T) -&gt; Int { return internalSet.count(for: obj) } } And now the code for using it: var countedSet = CustomCountedSet&lt;String&gt;() countedSet.add("Hello") countedSet.add("Hello") countedSet.count(for: "Hello") var countedSet2 = CustomCountedSet&lt;Int&gt;() countedSet2.add(5) countedSet2.count(for: 5) So, that Objective-C container used `id` to mean "any object", but Swift 3 helpfully bridges it further to "any object or struct", which means it now handles Swift types like strings and integers. I hope that helps a little!
And every team is full of members who have all been coding since 1997. You're right. Everyone on every team has 19 years of NextStep/Cocoa experience definitely knows better than the compiler (and for that matter, the other devs on the project). That might be true... ...or... there might be some projects with interns who weren't even born until after your NextStep/Cocoa experience started. If you don't want to use Swift, you do not have to. If you don't want to add the nullability annotations, you also do not have to. If you're getting warnings from the compiler, it's because you have started adding the annotations somewhere (indicating that you do wish to use the file from Swift). Once you start adding the annotations to a file, the compiler will warn you to add them to all the necessary places (you can also bookend sections of your file with `NS_ASSUME_NONNULL_BEGIN` and `NS_ASSUME_NONNULL_END` to make large sections as non-null).
Try directly targeting the master branch when getting the library, that solved it for me. Although i'm using carthage. In cocoa pods it would look something like this: `pod 'Alamofire', :git =&gt; 'https://github.com/Alamofire/Alamofire.git', :branch =&gt; 'master'`
You may need to clear your DerivedData. I had to do something similar when trying to use SwiftyJSON. http://stackoverflow.com/questions/18933321/deleting-contents-from-xcode-derived-data-folder
Can you try creating a dummy project and configure it to get alamofire, if it works there, maybe you have some cache problems with the original project?
If that doesn't work either can I just create a new project and lower the target build to swift 2.3 or whatever? 
So when you're making a delegate/datasource, you create an object completely dedicated to that task? Who holds the reference to it? The view controller or the object using the delegate?
What does it say in your Podfile.lock?
Storyboards are okay for simple things but some people (including myself) avoid them whenever possible. I try to build all my UIs exclusively in code, for a number of reasons such as: easy reuse of components(just copy paste the code or factor out a subclass), easy to see changes in commit diffs, better for collaboration (if 2 people on your team edit the same story board and get a merge conflict, good luck), easier to configure views and debug issues because in storyboards you will be poking around in countless menus checking and unchecking little boxes for view settings. It used to be easier to use Autolayout with storyboards than code but even that is no longer a reason. Layout anchors are great and if you need to support an earlier version of iOS, just use one of the mature frameworks such as Cartography.
Just finished updating a legacy app that was going to get killed by Apple's new policy where apps that are too old will get culled. It was working fine still, but it needed some new "retina" graphics, so I took the opportunity to port the entire project over to Swift. Went like a dream, actually. I was able to code up the entire game in a fraction of the time it took me originally, between being able to lay out screens in the .sks editor instead of in code, and the speed at which I can now function in Swift. Then, it's back to work on my solitaire deckbuilder game. Just got the roughs back from my artist for the deck of cards, and they're fantastic. I am so jazzed. I can't wait to get some proper artwork into my game. At my day job, we're really close to shipping a bunch of educational learning modules, aimed at college-level students, that use SpriteKit scenes to model lab activities that would be very difficult to give as real-life experiences in the classroom. And we're also working on some educational math games. Ported all of these projects over to Swift 3 yesterday, and it went really smoothly. 
It *is* a type system, and not a particularly simple one. There's a limit to how simple you can make the documentation, and I don't think it's possible to make changes involving the root of the type hierarchy and *not* have far-reaching implications. :-)
So If hit use legacy swift it will no longer be a swift 3.0 app? Or does Xcode just think I am using legacy when its actually 3.0?
I usually bake my delegate objects into the XIB, but the view controller can own it if you like. I'm not 100% sure, but I think delegating classes define delegate instance properties as weak. Edit: I just dug into the docs, and NSWindow defines its delegate instance property as unowned/unsafe, so yeah, you need *something* to own your delegate, and the view controller is acceptable for that -- it can *own* a delegate, it just shouldn't *be* one.
Well, My friends and I have decided to create an app. One of the them is an experienced back-end programmer, the other is an experienced JS programmer and I have some experience in Python an C. Our goal is to pick subjects we would like to learn the most and achieve our objectives. I wanted to learn Swift so here I am!
Because the settings is not set by cocoapods, Xcode assume that the code is not 3.0 and prompt you to upgrade. The master branch of Alamofire is Swift 3 compatible. Did you tried to update cocoapods to 1.1.x?
I assume it is the final line of code in your snippet which is causing the warning? (ie the `self.present(vc, ...`). So, what is self, is that the view controller? and at that moment, where is self.view? Is it in the window hierarchy? If not, there's your trouble. If you want to see if it is in the hierarchy, you should set a break on that line, and do a po self.view when it breaks. See what the parent view of self.view is. what is that commented out line, `//let vc = self`? If that were not commented out, and the following line _were_ commented out, then that would very likely cause that error message; is there any chance that is what happened. I think debugging and printing some stuff is the best bet. OTOH, why not just make a segue in the storyboard and UIKit do all the instantiating and presenting when the cell is selected? The cheapest, easiest to document, easiest to debug line of code is the one that isn't there (Steve Jobs used to say something along those lines).
One of my favorite YouTubers has a huge selection of videos where he utilizes constraints, check out his channel, Lets build That App
Yeah, I just recently discovered his channel and liking it! I sub to Archetapp too! 
Try self.navigationController.present() instead of self.present()
I'm sorry, I'm not clear on the question's meaning. Passing data back from what to what?
The second view controller to the first, or anything along the lines of that
That's one use case for delegates - set the receiving view controller as the delegate for the sending one, using a delegate protocol designed for the purpose. Basically, the first VC is saying to the second "I am the one to whom you delegate responsibility for handling this data". There are other ways to handle the same process - the two VC's might share a model object, or use some shared notification queue, but delegation is convenient and lightweight.
If you are familiar with git and GitHub, this is a good place to start. https://github.com/raywenderlich/swift-algorithm-club
Would I add a UITableView in the stack view or just programmatically add a custom UIView to the stack by necessity? Would I embed it in a UIScrollView? 
...what. What exactly are you talking about? How is swift not OOP? Don't you know that POP and OOP are both patterns, with little to nothing to do with algorithms. Don't you know that you can fake OOP in C but it's far inferior and far more annoying? What does any of this have to do with math? What math? Like set theory? Are you just an elaborate troll? This is so weird. 
&gt;I disagree. Actually the techniques he'll learn are algorithms and data structures. The syntax of any language is a minor part when it comes to programming. Ok, let's assume that you're right and the syntax and language are a minor part of it. Then why not stick to Swift, which is the language he's interested in? By your own admission, learning in C doesn't really help. &gt;And without a background in mathematics, he won't be able to understand the math behind computers and programming. It depends on what level of work he intends to do. There are very few jobs where Big O actually matters. Learning the basics of data structures doesn't require much math at all. &gt;FYI: Swift isn't really OOP, it is POP or protocol oriented. Swift is a hybrid of OOP and Functional programming. Apple used the term Protocol Oriented Programming to highlight protocols at WWDC 2015. POP is really just an extension of good interface based programming techniques. &gt;More than that, you can do OOP in C. Sure, if you're a masochist, but that doesn't make C an Object Oriented language. If it were, then why does C++ exist? &gt;Source: I have a BS and MS in Computer Science, 7 years in IT and 5 years of iOS development. Let's not start comparing degrees and work experience. I'll win. And those things shouldn't matter anyway. We can make our points without trotting out paper. But we can go there if you really want to. EDIT: I removed the name of the person I was replying to from my post. He deleted his post and there's no reason to call him out.
You can just reference the other class. The idea is that the more references your app has the worse it is. Think of a diagram representing your objects with arms with arrows pointing from owner to ownee. If you hold a reference back to the other class, you have two arms between the two objects. If you use a delegate, you are just using the one way path to set the delegate and then the delegate?.someFunction() call does not depend whatsoever on another reference. It's not a huge issue early on when you are first using delegates as the connections aren't burdensome since your project that you are learning on is probably small. But when you are working on something with a dozen VCs and another dozen model classes, you want as few references between them as possible to help maintain sanity. 
I don't mean to be harsh here, but 'XCode' isn't confused. The problem you are having is at runtime, Xcode isn't involved in the runtime of your code. I think the most accurate way to describe what happened is that you used Xcode to both create a segue and write some code in Swift which contained calls to UIKit methods. Then, at runtime, the code was executed, the data about the segue was acted upon by UIKit resulting in calls to UIKit methods containing parameters derived from that data, _and_ the Swift code you wrote which called UIKit methods were executed, and this combination shook, and did not stir, a deadly cocktail of data changes such that code in UIKit, which exists just for such a situation, detected that there was an inconsistency in that data, and managed to print the warning message, in spite of reeling from this deadly cocktail (I have a mental image of James Bond in Casino Royale, after having been drugged, reeling around the casino a bit, stumbling to his car, calling MI5, getting medical advice but passing out, but then Vesper arriving just in time to hook up the wires and press the button to restart his heart). 
I've written a few things you might find useful here: http://dscoder.com/DerivingMap/index.html. The hash table playground in particular.
Hi Hawk_Irontusk and dontforgetpassword, What do you guys think I should focus on? While I agree that focusing on C won't be worthwhile (I think there are far more practical and valuable uses of my time), I'm not so sure if math would be as much of a waste. I have come across coding challenges that rely on some area in Math that I haven't yet learned. Personally, I don't mind if I have to consume material that is in Java, Javascript, pseudocode, but I will likely practice and solve problems in Swift. How did you guys start learning how to identify problems and how best to approach solving them? Thanks for the input thus far. Didn't mean to start a riot, haha!
Will checkout, thank you!
trying to create a random color gradient function. I don't really know what to use to create the gradient.
In the realm of generics, conditional conformance and existentials are pretty much guaranteed to be implemented but have not been yet.
Look at the [UIColor initializers](https://developer.apple.com/reference/uikit/uicolor/1621931-init). To create a random color you need to initialize a UIColor with random inputs :).
There's http://www.apple.com/swift/playgrounds/, but I think it's aimed more towards kids.
Swift Jesus posted this a few months ago: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html
Short entirely English version: A thing where you're not sure exactly what it is, but you know enough about it to know some of the things it can do. ObjC analogy version: they're like id&lt;SomeProtocol&gt; in Objective-C, but generalized to support Swift protocols' additional features like associated types and structs/enums Somewhat longer version with samples: Dictionary looks like this, right: Dictionary&lt;Key:Hashable, Value&gt;. So if you do this: var dict = ["Test" : "Test"] dict[5] = "Test5" it'll fail to compile, even though both String and Int are Hashable, and you can use either one as a Dictionary key as long as you don't mix them. So what if we DO want mixed keys like that? We don't want to say "this is a *specific* thing that's Hashable" (which is what &lt;Key:Hashable&gt; means), we want to say "this is *anything* that conforms to Hashable". The standard library calls this type AnyHashable, and AnyHashable is a "Hashable Existential". Similarly, AnyCollection, AnySequence, etc... What Swift doesn't have yet (it's been proposed, and seems likely to be accepted in some form or another) is arbitrary existentials. Each of the Any* types mentioned earlier had to be written separately, which is a pain in the butt. So what's being proposed is Any&lt;…&gt;, where … accepts the full suite of things you can put in function declarations for generic arguments, so you can do Any&lt;Hashable&gt;, but you can ALSO do things like Any&lt;Collection where Iterator.Element == Int&gt; to declare a variable that's "any collection of ints". It's gonna be really nice.
One of those concepts that's really simple and intuitive once you understand it, but getting there in the first place can be very challenging. 
I didn't mean 100% replacing it, I meant some projects that might have used Java may now be using Swift.
&gt;The current (it could change before the ABI is locked down) storage format for existentials in Swift is … interesting. What do you mean by this? I thought existentials weren't a part of the language yet. &gt;That's one of the things that makes them super useful. Where else? The only time I've founded type-erased wrappers to be useful is when "can only be used as a generic constraint" has came up. Lastly, what becomes of the type declaration? Swift's strict typing requires that it knows the type(s) that the existential will be over. Is the Any&lt;x,y,z&gt; syntax what will end up being used? How will the subtype be declared? From my example, Any&lt;NumberHolder&gt; doesn't declare that it's over a Double anywhere. So I guess a rather superficial question, but that notation seems to be clumsy as I don't see how to pull out the associatedtype without some extra and cumbersome angle brackets. Also, thanks!
You could get around the `nil` hack with an `Index` enum that can be initialized with an `Int` literal. Swift 3 (matrix functionality not included): struct Matrix { enum Index: ExpressibleByIntegerLiteral { case all case one(Int) init(integerLiteral value: Int) { self = .one(value) } } subscript(row: Index, column: Index) -&gt; [Int] { get { // more code here return [] } } } let matrix = Matrix() matrix[.all, 0] You could add an `ExpressibleByIntegerLiteral` to make the creation of a `Matrix` very clean as well.
non crashing debugger?
If your data fits on 1 screen, you'd only need the stackview If you've got a lot of data, I'd stick with a TableView to make it scrollable and build it as you described in the OP
Did you tried to add autoplay=1 on the YouTube video URL?
rest/of/url?autoplay=1 If there's another parameter already in the url then add it using an ampersand: rest/of/url?something=else&amp;autoplay=1
Take a look at SpriteKit.
&gt; Code generation is an anti-pattern. Don't do it. I agree that code generation for JSON isn't a really good idea because of edge cases. setValuesForKeysInDictionary: / Reflection based solutions have the same problem IMO. But code generation itself can be really useful for resources. [R.swift](https://github.com/mac-cain13/R.swift) [SwiftGen](https://github.com/AliSoftware/SwiftGen) 
http://lmgtfy.com/?q=how+to+save+data+ios+swift =)
You have several options but the easiest is NSUserDefaults 
What have you tried?
have you developed driver for oracle or sqlserver ?
This was exactly it, thank you very much! I just haven't been in enough closure code for that to pop out at me.
I have been wondering the same thing. I started learning swift with Big Nerd Ranch's swift programming book. I'm half way into it but am itching to begin Hacking with Swift. I've held off for the same reason of not knowing if I need to know the basics of the language before beginning HWS. 
Thanks for your responses guys! I am going through hacking with swift and wanted to find something to practice with while on the go! Thanks
You don't need to know anything about Swift before you start reading Hacking with Swift. If you prefer to learn the language in isolation, start with [the introduction](https://www.hackingwithswift.com/read/0/overview) – it teaches you a lot of Swift without touching iOS. However, all the concepts you learn are also taught in the projects, starting from #1, so if you skip the introduction you will still get taught Swift. If you're broadly new to programming, start with the introduction. If you've learned some other language previously (anything, really – Python, PHP, C, etc) you ought to be OK to move straight to [project 1](https://www.hackingwithswift.com/read/1/overview). If you're finding Swift tricky, you might want to consider buying [the Hacking with Swift e-book](https://www.hackingwithswift.com/store/hacking-with-swift) – it comes with a guide book that adds revision notes and further explanation to help make sure the key points sink in. I come by here regularly, and of course mentioning my user name as you did helps draw my attention, so feel free to ask questions and I'll do my best to help!
Outside of [Swifty](https://appsto.re/gb/HPb10.i) that has already been mentioned another more extreme idea I have would be to set up a Virtual Ubuntu Linux Server on a service like [DigitalOcean](https://www.digitalocean.com/) or [Linode](https://www.linode.com/), install swift on said machine, and then SSH in with an app like [Prompt](https://appsto.re/gb/PTVR2.i) and use Vim or another text editor that works through the terminal to write swift and run it. I found this to be helpful when I learned the the [Elixir](http://elixir-lang.org/) language on my iPad, but doing it on a phone would probably be a bit more difficult. 
I'm working on a book that might interest you: [Swift Coding Challenges](https://www.hackingwithswift.com/store/swift-coding-challenges). It's due out next week, and includes a variety of common problems, algorithms, and interview questions, all graded by difficulty, as well as providing solutions and explanations of how they work.
"A few years" is definitely an over estimate. A few of the frameworks hit 1.0 or 2.0 and are already being used in production. Tooling is great on OSX and deploying on Linux is a breeze. Unless you're talking about the language in general (which should be mostly stable now anyway), there's nothing seriously preventing you from using it today.
I just quoted the OP.
Well perhaps things are actually better server side than for iPhone. I'd just assumed the inverse. Off the top of my head, I'm talking about things like xcode crashing 20 to 100 times a day and having to fall back to printf debugging because variable inspection and "po" at the console are way too crashy to actually use half the time. I'm talking about running into a particularly perplexing compiler error and thinking "wow is this a compiler bug? No that's stupid it's never a compiler bug" ....and then looking it up and sure enough it is a compiler bug. First time in almost 2 decades(and second time as well) Or apps built with the command line tools being un-submitable to the appstore unless you unzip them, copy in some swift librairies from teh guts of your xcode install, and then rezip the app. Wat? Or when you hit build and run....and then wait a few min and hit it again because the run part **literally never** works the the first time. Or when running unit tests occasionally doesn't actually run them and just reports success. Basically swift the language is pretty good, and promises to get better. But the tooling(mostly xcode), at least when used on a ~100kLOC mixed obj-c/swift app has been ~~a raging $%^&amp;*^$^%~~.....rather frustrating. It's tolerable. It's even worth the trouble to be able to use a language that's markedly better than obj-c, but it definitely feels pretty immature. If you're not running into this sort of thing server side then \o/ ....and maybe I ought to switch to the API team ;)
Yeah, in my experience coding for backend has been a lot less painful than coding for iOS. It made me realize that 99% of my headaches came from UIKit ;) I've got a startup and we're doing full-stack Swift dev. Backend uses a variety of packages, but the webserver itself is Kitura. Hosting an Angular app as well as an API for a (Swift) mobile app. It's B2B software, and we don't have millions of clients or anything so I can't really say how it handles massive loads.
Interesting stuff. Ironic that the backend experience is so much smother than the primary use case that Apple directly supports. However, I guess it's not terribly surprising, considering it's greenfield vs legacy. Thanks for the info.
There's aren't that many. Lanyard probably has them. Indie dev stock just happened Cocoaconf is quite good Wwdc Altconf (during wwdc) uikonf Ul
Xcode 8 is clearly still like Xcode 8 Alpha, they just had to release it with the release of macOS 10.12. Hopefully things will be more stable in 8.1 or 8.2.
Xcode 8 + Swift is a pretty bad combo right now. Well, any Xcode really, but his one is pretty bad even compared to 6. Also goodness are storyboards slow. 
Have you tried deleting derived data? Although I've no experience with Swift 2.3/3.0, the symptoms you describe are the kinds of things that happen with stale derived data.
Interesting, but seems like a lot of work for low reward unless Google is going to throw their weight behind it.
&gt; SO here's my question, does anyone know how I can manually write code to work with my Hue lights? ^ Pretty broad question - if you don't know how to look at one of the existing libraries and convert it to Swift 3, then you shouldn't use Swift 3 just yet.
Same here on a clean Sierra/Xcode install. SourceKit crashes all the time, especially during build and I keep getting errors, as if I am trying to compile my 2.3 code with 3.0, but actually it builds and runs successfully. I didn't have much time to try the betas, but if it was like this and stayed like this in the GM it is ridiculous! This reminds me of the times when the first builds of the largely rewritten Xcode 4.0 came out...
anyone use protocol buffers in their apps? just curios to know why you'd prefer this over json?
it does it asynchronously so you have to use the delegate method locationManager:didUpdateLocations: you can hold on to latest location with a variable in the view controller or make a singleton that holds it so you can grab it whenever you want
Exactly as /u/Lucky_Chuck says. Ensure the view conforms to **CLLocationManagerDelegste** then implement : func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) { }
Just tried with the 8.1 beta and cleared DerivedData - exact same issues. SourceKit (Autocompletion/code coloring) dies during build and it keeps showing Swift 3.0 errors in the Swift 2.3 project, but builds fine...
I don't want to come off as rude when I ask this..but I've been seeing your name thrown around a lot. At first I thought I was just seeing things but OP even referenced your name. Is there a specific reason for it? Have you written some Swift books? Once again, not trying to sound rude or anything. I'm asking because if you're a valuable resource then it'd be foolish of me to not jot down your name in my notes
Super crap. Sorry I downloaded that dog. Back on Xcode 7. I mean - really where to start? I grabbed Xcode 8 because I stupidly built a complicated xib for a table cell directly atop the contentview. I decided I wanted to kick it into view one level down so I could swap it with another view. Xcode 7 drops all your constraints when you do "embed in view". Miserable POS. Xcode 8 does not drop all your constraints - so yay. But I'm constantly being asked to update to Swift 2.3 or 3 and all my pods - they don't like the 2.3 update. So nothing builds and it won't build 2.2 and I've got a deadline so... Back to XCode 7 only my xibs have been saved in special new Xcode 8 format. FUCK! Back to XCode 8 where I find the "save in XCode 7 format" switch and resave all my xibs. Back to Xcode 7 where they now open up BUT all my constraints have been dicked with to add offset constants everywhere (I don't use offset constants much - mostly I use proportional layout). And my views now look like ass. A couple hours going through removing all the damn offset constants and my views look like they did. I lost 2 days to this shit. Fuck Xcode 8 and a POX on any fool who wrote an important app in Swift because the amount of work required to bring this app to v3 is VERY HIGH and NOT GOING TO HAPPEN BEFORE I HAVE TO SHIP. I hate early adopters.
My name's Paul, and I wrote [Hacking with Swift](https://www.hackingwithswift.com). It's a (very) large, free Swift 3 / iOS tutorial series. I also wrote [the Swift Knowledge Base](https://www.hackingwithswift.com/example-code) which includes just shy of 300 tips and code samples for Swift 3, plus a variety of books and video courses: * [Pro Swift](https://www.hackingwithswift.com/store/pro-swift) * [Practical iOS 10](https://www.hackingwithswift.com/store/practical-ios10) * [Swift Coding Challenges](https://www.hackingwithswift.com/store/swift-coding-challenges) * [Objective-C for Swift Developers](https://www.hackingwithswift.com/store/objective-c-for-swift-developers) * [Beyond Code](https://www.hackingwithswift.com/store/beyond-code) It's not at all rude to ask; I do try and come by here several times a day!
And the compiler could maybe build at least half as fast as the Objective C one. Also, for a language called "Swift" playgrounds are insanely weak. How weak? let timeInterval:NSTimeInterval = (5*24*60*60)+(7*60*60)+(60*15) /* Expression too complex to be solved in a reasonable time */ You gotta be kidding me. I had to do the math to generate the constant using Alfred and put that in instead. OK, one might ask just YTF I was doing this so I'll tell you. I need to implement a countdown to event widget that says something like "X days, Y hours and Z minutes to go!" So I thought I would verify my math for busting a time interval into days, hours and minutes. So my lil test playground looks like let countdown = NSDate(timeIntervalSinceNow: timeInterval) let timeLeftToGo = countdown.timeIntervalSinceNow let daysToGo = Int(timeLeftToGo / (60*60*24)) let hoursToGo = Int((timeLeftToGo/3600) % 24) let minutesToGo = Int(timeLeftToGo % 3600)/60 and if I get back 5 days, 7 hours, 15 minutes I didn't screw up. You people have more patience than I do for this shit.
search nsuserdefaults its simple and perfect for what your trying to accomplish.
Have you considered using NSDateComponentsFormatter? As a bonus, it'll do correct date and time math, which that constant formula will not.
I think this is one of those cases where those involved are thinking long-term, kind of like people writing web frameworks in Swift. This isn't going to be a viable option this year, and probably not even a good one next year. This is for people who see Swift as the next big systems/application language, on all platforms. Apple is already committing to having Swift run well on everything from wristwatches to workstations, on ARM and x86, 32-bit and 64-bit, so 95% of the work is already done for us. You'll notice there's almost no source code in this PR -- it's mostly just some `#if`s, and some build scripts. And now it's on `apple:master`. I'm not even a mobile developer, and I think this is a pretty big deal. When's the last time any language could compile for every major mobile platform? (The only other one I can think of offhand is C#, via Xamarin. That was such a major project they started a company around it.) Already Swift builds on all major desktop platforms, too, and it's (publicly) barely 2 years old. Love it or hate it, this is a language that's got legs. I see this PR not so much "We want to attract Android developers to Swift" as "We can put Swift anywhere we want -- Android? Sure, here's a build script". Think concept car, not daily driver.
I had to make sure I added "don't mean to be rude" because idk. This is reddit and some would read that as "so who the hell are you?" I just don't want to insult anyone And you wrote all of Hacking with Swift? Thank you man. I just put up an iMessage app for review. You'd be surprised the amount of resources that aren't out there for that stuff yet. Your "what's new in iOS 10" article and Apple's Ice Cream example were enough to help me piece it all of it together to understand how iMessage apps work. Thank you for that :)
Yeah I had bug out majorly when I had I was trying to translate an in App JSON file. I had forgotten a try in the JSONSerialization and had an error statement that I was using as Swift 3, forgot I was coding for Swift 2.3. Anyways long story short that file looked corrupted. It wouldn't let me scroll down on the file. I couldn't edit anything. I was not able to get rid of the error by closing Xcode completely and re opening it. The only way that I got rid of it was by cmd A and cmd / to comment everything. Then I proceeded to add the corrections in and finally everything was behaving properly again. I thought my computer had a virus, that is how bad it looked. Imagine code super imposed on it self 3 times over. 
Is `someID` optional or IUO? You're possibly getting "Optional(foo)" printed instead of the "foo" you want. Like teddim says, print it out. Also, I get the trick to teddim's username now. Thanks, autocorrect.
Xcode has always been a bit glitchy for me for the last few years... but Xcode 8 takes it to a whole new level. Some of the issues I've encountered updating a project to Swift 3: - The console is now flooded with irrelevant messages. (Yes, I've seen that Twitter post that suggests editing the scheme but that turns off important messages too and is not recommended). Even worse... - *print* is no longer working for me at all. None of my print statements are logged to the console. I haven't seen this reported elsewhere so I'm guessing it's just my lucky install. - Inconsistent build errors and compiler warnings. I'll build and encounter 2 syntax errors, fix them, and then get 2 more in a completely different file. - Code completion is barely working. - Jumping to definitions doesn't work all the time. Probably a bunch of other things I'm forgetting too. I used to love Xcode, but since about version 5 it's becoming a hot mess that is impossible to ignore. I'm convinced the Xcode and iTunes teams are competing for who can make the most bloated piece of garbage on the platform.
You're trying to paint an image on an area of the screen outside a window? You could create a borderless window with a full-sized content area and an NSImageView filling it, and put it where you want it. 
Hmm, creating a new view controller for each image? I have updated my original post to be more clear. I currently have multiple variables being monitored and want to display possibly 10-15 images depending what the variables contain on various parts of the screen. Would creating a new view controller with an image view be suitable for this? I guess this is more of a problem of "design" as much as it is syntax.
Examples of what you're trying to do? Not really, I can't see why you're doing it in the first place, applications shouldn't spray stuff all over like that, but the NSWindow class documentation and related NSWindowDelegate and NSImageView documentation should be a good start.
That was it. I was getting "Optional(foo)" printed. Not sure why it worked before.
Swift 3 changed how IUOs work, and possibly some other stuff related to string interpolation of optionals. I don't recall all the specifics now. When in doubt, print it out. (Or set a breakpoint and look at it in the debugger...)
Great article
Then why should anyone update to Swift 3?
Are you looking for conferences that are specifically focusing on Swift, or more general iOS dev conferences that have tech talks, along with business talks, and other adjacent discussions? I had a list of some of the more popular ones on my old blog, and haven't gotten around to updating one for my new site. At this point there seem to be more and more each year. Off the top of my head there is Swift Summit which is in San Francisco this fall. There is NSNorth which is in Toronto late Spring (its a mix of talks and a great conference). There is 360 iDev in Denver (I believe) which just past a few months ago. There is try!Swift which had a Spring conference in Tokyo and Fall session in NYC. There is Release Notes in mid fall in Indianapolis (which is primarily focused on the business of indie development). There was NSSpain in Logrono, Spain which wrapped up a week a half ago (primarily tech talks with some adjacent talks). There is Ull Conference in Killarney, Ireland the 1st and 2nd of November (less tech and more feels and inspiration). There is also CocoaConf which does a number of smaller conferences around the US and then one flagship conference at Yosemite. There is also going to be a new conference organized by Andy Barggh in Melbourne, (or possibly Sydney), Australia for the start of 2017. There are still more and once I put together a better list on my site I will post the link. But it is easy to lose track of all the conferences that are popping up, and harder to know if they are going to be any good or not.
I'm glad the site is useful to you! If you liked *that*, you'd *love* Practical iOS 10 :) 
Why not just a function?
Xcode 7 isn't the stablest of software releases ever, either. :/ 
Subclass to a UILabel that has the appearance you're after. Then set the text accordingly.
Its not about Mobile Application, but Web/Server side application, which will have connection to the database and provide API for others
I'm glad it's not just me, Xcode 8 + Swift 3 is a rough ride right now, even when you're trying to be forgiving. They clearly released because they 'had to' and not because it was ready.
There are cases where it doesn't work. class Foo&lt;T: AnyObject&gt; {} protocol Bar: AnyObject {} let f = Foo&lt;Bar&gt;() This produces the following error: &gt; error: using 'Bar' as a concrete type conforming to protocol 'AnyObject' is not supported I don't know whether or not this is something that existentials resolves. 
Same experience here
This is just custom init, right? I don't see a reason this would warrant its own type. This looks like a perfect case for a convenience init.
Exactly, because structs get default initializers with all the fields. Pro tip: if you want to create you own initializer for the struct, do it in an extension: that way you will still have a default initializer and the new one. If you define your initializers in the struct definition itself, you loose the default one.
I too thought the same and asked this question to clearify. Let me know if your doubt gets clarified.
I'm of the opinion that having a diploma establishes that you've studied a topic, so it does give you some credibility, but our arguments should stand on their own. If we need to pull out our diplomas to get our points across then we're not doing a good job of making our points.
If you're really trying to build a business I wouldn't recommend it, but if you're just trying to do something fun on the side or learn something new I think it's a great fit. If you find bugs or need a package that doesn't exist, it's a good opportunity to make your GitHub look better :)
It's a book that contains seven projects that explore new features in iOS 10, plus six more technique chapters that discuss specific technologies. Each of the projects are real apps that do useful things while also introducing the new iOS features. So, the first project for example builds a memories app that lets you import photos and attach audio recordings. It uses the new speech transcription APIs to convert your voice to text, then uses the new Core Spotlight integration APIs to let you index your content in the system and search for it in the app. The technique projects cover smaller, specific things. For example, the new Measurement API for measuring lengths, weights, etc; or the new warp geometry system in SpriteKit.
Those returns will exit your current scope; that is, the function in which they are contained.
The first reason that comes to mind is that JSON is serialized into `[String: AnyObject]` ?
`JSONSerialization.jsonObject(with:options:)` returns `Any` now
I'm trying to think that you're doing a positive criticism. I have seen tutorials using both, I have used both myself. I was trying to understand and maybe thinking out loud if I should use both or not. As from a very decent tutorial maker on youtube I've seen using only code and disregarding UI Builder every time. 
`Any` allows value types such as structs, whereas `AnyObject` does not. They have different behaviours, so in theory I can imagine someone specifically disallowing value types for some code because they expect references. Here's a trivial example that won't compile: func checkThingsAreEqual(a: Any, b: Any) -&gt; Bool { return a === b } Whereas this will compile: func checkThingsAreEqual(a: AnyObject, b: AnyObject) -&gt; Bool { return a === b } It's also possible the function in question passes its values to other functions and expects those values to be modified in-place rather than as copies, which again would require a reference type (or boxing). Note: This is all theoretical and off the top of my head; I'm a big fan of switching to `Any` if possible!
That's a good point about expecting `===` to work on references. Still, it seems like *mostly* a historical accident at this point. I'm not sure I've ever actually needed to make that particular distinction, while there's other common distinctions of type I really wish I could make that aren't supported by the language yet. I'd kill for an `AnyNumber`.
Do i get that email for the discounts immediately? Because I just got Pro Swift and only received the email that contains the book + resources in it
Just a simple game I wrote to try out the language, It ended up being a console program mostly because I wrote it on linux, and there's not much libraries available there :(
 Swift 3 is independent of iOS version. An iPhone with iOS 7 can run apps built in Swift 3 without a problem.
I tried Swift on Linux with 2.2, and it wasn't much fun. However, hopefully things have improved a long way now – I might try it again! If this was your first attempt, I think you did a great job :)
The upcoming `Arithmetic` protocol is probably what you're looking for.
Thanks! In swift v3 I believe there's more libraries available, so it is improving.
They are to me, 99% of the time. I think it's a problem that, to Swift, they're not. In lots of other languages (including many which Swift plundered for ideas), they're not. When I learned the Pythagorean Theorem in school, I didn't have to learn it once for little numbers, and then again for medium-sized numbers, and a third time for big numbers. I learned it once, and I can use it for any numbers. Junk like `hypot`/`hypotl`/`hypotf` was a necessary hack because of the way C works, but by any other metric, it's not good design. Think about characters. In C, if you wanted something like "append string A and string B", you had to know the encoding of each. If they were both `char`, you used `strcat(A, B)`. If they were both `wchar_t`, you used `wcscat(A, B)`. (If they were not the same, well, tough!) In Swift, once I've got a String, I don't generally need to worry about how it's stored in memory. I can write the behavior that I want, like `A + B`, and the runtime makes it happen. I can peek under the covers when I want more control, but 99% of the time, I don't. Here's the analogy: Bad old days of C: string.h has 2 versions of everything: `str-` functions and `wcs-` functions. Good new days of Swift: unified set of string methods for one String class -- worry about storage in memory only when you need to Bad old days of C: math.h has 3 versions of everything: `-f`, `-d`, and (no suffix) functions Good new days of Swift: ...still have to think about this crap 
I create a convenience initializer in an extension that takes a list of arguments that customize it as I choose. 
Thanks for linking it, I was on mobile. :)
That doesn't mean you should. Global functions return objects in neither the Swift standard library nor UIKit.
Hey, I really appreciate these uploads. They're great. Thank you!
Your welcome! I like doing these as time permits. Feel free to share these videos. Having people enjoy them and learn motivates me to make more. :-) 
Any time you hold on to other objects where you don't need to resolve the relationship with specific protocols/types. E.g. An observable holds on to its observers. In my implementation I don't need an Observer protocol but I need reference semantics, so I'm using AnyObject. 
Fixed :-) https://bugs.swift.org/browse/SR-2661 From Swift engineer: &gt; The problem stems from the fact that a closure body can either be a series of statements, or a single expression. If it is a single expression, its type must match the return type. The fatalError() call triggers the expression path, leading to a type mismatch. We already have a special case where if the closure return type is () but the expression type is something else, we treat the closure as a statement, not an expression. Similarly, if the expression type is Never, we should treat the closure body as a statement.
nice! 
Comparable is for things which have an order, which doesn't seem at all related to the question here
eugh javascript
Would you recommend the Obj-C book? I'm really interested in it but I'm on the fence because I don't know much about the language and where it stands nowadays.
Interesting. Why does `Any` need 3 words of storage? The Objective-C has had tagged pointers for a couple years now, and x64 only uses 48 bits of address space (and ARM even less), anyway.
Zero impact on my calculations.
There is an unpublished rate limit that Apple will enforce. I don't know what would trigger the limit, but I'm sure it's there to prevent this type of usage.
You might look at https://cloud.google.com/speech/ 
Really nice work man keep up the good work..
That book is terrible, I wouldn't recommend it to anyone.
Fair enough. I saw some code samples, but I haven't read it.
Concerning Swift 3, Apple's free language guide is really well done and comprehensive. Here is the link to the PDF version in iBooks along with a link to the HTML version. **PDF:** https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11 **Web:** https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309
THIS^^^^
Take a look at the iBook store. Apple released a complete beginner guide from scratch to your first functional app. I'm working with it and it is really well done. If you have experience in programming the start is a bit boring, but it's always the same. :D You can find it under the terms "Everyone can Code" and "App Development with Swift".
From the looks of it UILabel still isn't themeable via [appearance proxy](http://stackoverflow.com/a/11839198) unless something has changed since I last looked. 
Hello! I'm the author of Hacking with Swift – thanks for recommending it! It's fully updated for Swift and iOS 10, and folks can [read the free version online](https://www.hackingwithswift.com/read/) if they don't want the bonus content included with [the download edition](https://www.hackingwithswift.com/store/hacking-with-swift). My other books are also updated for Swift 3: * [Pro Swift](https://www.hackingwithswift.com/store/pro-swift) * [Practical iOS 10](https://www.hackingwithswift.com/store/practical-ios10) * [Swift Coding Challenges](https://www.hackingwithswift.com/store/swift-coding-challenges) (released this week) * [Objective-C for Swift Developers](https://www.hackingwithswift.com/store/objective-c-for-swift-developers) * [Beyond Code](https://www.hackingwithswift.com/store/beyond-code)
Swift has some limited applications outside the Apple ecosystem, but if you're serious about making apps with it then right now you're limited to macOS, iOS, tvOS, and watchOS.
(Since the question has been answered) (I know it's not your code) This is horrible use of guard. You should keep guard to the starting point of your function so you can guard early. It makes things much clearer when reading through functions.
Thanks for the reply. As my project has a lot of external libraries, should I upgrade to Swift 3? or should I check with every library if they support swift 3?
&gt; For an observer system that I designed myself, I'd make an Observer (class-only) protocol. Yes; and I was *going* to reply that in order to make this class only protocol, you'd need to constrain over `AnyObject`, proving it's usefulness. But then I caught myself; you don't: protocol Observable { associatedtype ObserverType : Observer ... } protocol Observer : class { } So yes, I agree with you that `AnyObject` looks redundant in all but a few corner legacy cases. &gt; They don't even really have a concept of **value** types Sure you didn't mean *reference* types?
Also he can develop server side applications on linux using swift 
No problem! While I have you I just want to say thank you so much! A few months ago I knew no Swift at all and then 6 weeks after starting your tutorials I had [my app](https://itunes.apple.com/us/app/healthy-paws-dog-park-tracking/id1135987695?ls=1&amp;mt=8) in the app store! (It's not finished yet, I'm adding features one at a time then will resign and then it will be finished and I'll start marketing and blah blah blah...) But yea, that would have never happened without your book! Thanks! :)
While these `guard`s are pretty ugly, I see nothing wrong with using `guard` somewhere else than at the start of a function.
Every dependency you have must a Swift 3 version before you can migrate.
Worked out easier than I expected. One of the Libs isn't converted yet, but that was a suprisingly streamlined process.
OP asked for iOS 10 and Swift 3. Hegarty's class (online at least) is iOS 9 and Swift 2. While it's still an excellent resource, OP would also need to find resources on the differences between iOS 9/10 and Swift 2/3.
I just tried this today and I got absolutely nowhere. It works for some games for video recording, but I haven't been able to get a single game to work with streaming. When I attempt to use it in Playgrounds, it just freezes up. Very frustrating that a "Pro" device can't access basic functionality.
I'm assuming it's so you can take a constant and manipulate it.
You would need to use 'number!', not 'number', inside the if statement. if let x = y { ... } is equivalent to if y != nil { let x = y! ... } Since most readers of Swift are quickly trained to look at exclamation points as "this is a dangerous operation, double check it", it makes sense to provide guaranteed-safe alternatives to it, such as 'if let', '??', and "?."
[removed]
The first half of this is wrong. An `if` statement defines a scope. Take this code for example: func foo() { let a = 2 if a &lt; 3 { let a = "hello" print(a) return } print(a) } The body of the `if` is clearly a different scope, otherwise I would not be allowed to declare a variable with the same name as the scope that contains this `if`, yet the `return` exits more than just the scope we're in with this `if`. It exits the entire function.
**as**ync Still bothering me.
No - You can learn to code on it but you will quickly need a development machine to move beyond videos and light code practice like playgrounds
Perfect is not very swift like. It's coding style seem like it's pretty old/outdated l. Use vapor if you like it the "swifty" way. Also vapor is really great. My personal first choice 
Second for Vapor. It starts you out with sane defaults and is pretty easy to pick up. I like it a lot. It's lacking some documentation, but that's being fixed on the regular.
And can make your code look much cleaner. Handy when dealing with json, without the use of a third party library. 
I haven't looked into anything seriously yet, but Kitura is backed by IBM and seems pretty mature. I know they're using it to sell their own ***AaS product, but IIRC you can run it on your own boxes without issue. EDIT: rereading the question it looks like you're specifically looking to decide between those two frameworks, so this isn't quite relevant, but I'd still love to hear anyone's thoughts on Kitura if they have any. 
With these frameworks, do you use their web server or can you deploy it to apache or something? I don't like the idea of exposing some random server to the internet, when apache is fairly well proven. 
Top level functions, embedded functions, *and closures* are a special kind of scope, function scope perhaps it's called, and return always exits that kind of scope. And also, there is nothing wrong with these guard statements, they're clearly an early exit and the haters here are talking out of their butts.
If by function you also mean closures. If you call those things anonymous functions instead of closures then your statement makes sense.
Yes, I did look into Kitura along with the two mentioned above. However, I found their documentation lacking (probably because I referred to Vapor documentation before Kitura) However, many here are siding with Vapor and I will probably stick to it. My only headache now is ORM for PostgreSQL (with GIS support)
I suspect you're referring to their old version.
Nice how you don't answer the OPs questions. You could hard code use of the other class, but what instance do you call? So you need your instance of A to refer to instance of B and B back to A. You can do this, but it locks B into being used only with A. Also it's makes your code harder to reason about, makes it spaghetti instead a hierarchy. The delegate is like the reference from B back to A, but it lets B not have to know anything about A, keeps A in charge of that relationship. An example of the win you get from this is that you can substitute A with a test version of A, or reuse B with a Z instead of an A.
I know that Perfect has a FastCGI connector, so I presume you can use that with Apache
I filed an [issue](https://bugs.swift.org/browse/SR-2771).
I am also using vapor right now for a small school project. It is pretty easy to get started with and even though there isn't much documentation their slack team is super nice and helpful. 
Perfect has been very useful for me, very low overhead, very easy to setup, and a very active developer community. They also have many different API's designed for the Swift Package Manager and very well documented documentation. Would recommend.
Similar questions are asked here on a weekly basis, please use the search function.
Idk man, but smarter Swift people than me that I follow on Twitter have lamented about Swift 3 inconsistencies between Linux/macOS. 
Calendar isn't fully implemented yet for Linux. If you look at the [Foundation repo](https://github.com/apple/swift-corelibs-foundation) you'll see a lot of classes/methods that are still `NSUnimplemented`.
To state the obvious, this is clearly a time zone issue. The Ubuntu output would be accurate for GMT. The macOS output is accurate for CEST. What's the output of `Calendar.current.timeZone` in each environment?
This
The problem with that is that I have no idea what a naked "3.0" means, even if I wrote it myself. I've used various APIs that measured timings in seconds, milliseconds, nanoseconds, and ticks. I can't remember which one GCD uses, much less a third-party wrapper -- and I last wrote GCD code 20 ago! [*] NSEC_PER_SEC was stupidly verbose but at least I could tell what it meant without checking the reference manual. And really, `(when: .now() + .seconds(3))` isn't *that* verbose, and there's not going to be anything after it on that line except `{`, anyway. There's places I wish Swift would let me be more concise, but I don't think this is one of them. [*] Seconds, but you probably guessed minutes, right? :-)
This is a pretty out-dated attitude. The first version of Perfect was written before Swift open-sourced, so that's pretty understandable. The latest versions are just as "swiftly" as any of the other frameworks.
I'm not sure why you need to decide between one or the other. You should play with both. Vapor is easy to use, but so is Perfect (and Kitura for that matter). You should get to know all of them for different reasons - they all have active communities and constant improvements happening - and you really just need working knowledge in Swift to use any of them.
Sorry, within my class I want to be able to create an NSWindow (copy the function I am using and put it inside of my class) but I cannot currently access NSWindow inside of my class.
In my class I do not inherit from anything, when I create a variable such as. var window: NSWindow? I do not get auto complete and "Undeclared type of NSWindow" is the error, which is why I am wondering if my class should inherit from something or if there is another way to access NSWindow. 
No problem. Keep on coding! 👍🏻
Good point, it exits only the innermost function block, which may be a closure.
Yes, what you are suggesting is probably the right approach. However, with three apps in production and being the only developer for both server and iOS, makes it really hard to play around and make a decision :) I might just go with Vapor to begin with (for test environment) of one app and then perfect for another. Should help me evaluate both.
Both are great books, and I end up referencing them a lot. I have a hard time learning through books though. If you can I would suggest using teamtreehouse.com
Im currently using sololearn. Its an iphone app. I cant honestly say how good it is since i am relatively new to this, but i like it.
yeah I was thinking about making 2d game
Swift Foundation is a very important project with some very smart people working on it. That said, it's nowhere close to "ready" yet. It's way too early in the game for that. 
I too agree as I took this route and now I'm creating games. 
Go with SpriteKit, which is Apple's own 2D framework. I recommend Ray Wenderlich's iOS games by tutorials in Swift. 
See that's what sucks about the iPad Pros and Apple trying to market them as laptop replacements: they are not and probably never will be because they don't run a desktop OS like Mac OS Sierra while the Surface does, which runs Windows. So no, you can't run Xcode on an iPad. You need a Mac. 
&gt;100% SWIFT 3 &gt;Don't waste time with out of date tutorials – here you can learn smart, powerful, and expressive Swift the way it was meant to be written. Sold! I've been learning iOS development over the past month, and it's amazing how many tutorials are so out of date that you can't use them, even fundamentally.
ok thanks for the tips, i really appreciate it :)
Thanks, I'll check to see if this is the problem
I'll post a picture later but I checked at least 10 times and I'm new to swift but I've done other coding so I'm pretty sure I know where I need braces
If you're still unable to solve the problem, zip up your project and email it to me: paul@hackingwithswift.com. 
&gt; The only thing it doesn't have is playgrounds. **and** Interface Builder. Or is there a way to use Xcode Interface Builder with appCode ?
Sorry, stopped reading your post after about 20 sentences that didn't answer the OP's question.
Back in the day (~2002) I was a barely-competent amateur java programmer and started learning Cocoa + ObjC programming. I'd say it took me around 2 weeks to be able to bang out a simple app and feel slightly comfortable. Real fluency obviously took much longer, but I bet you could get up to speed enough in a month or so for what you're describing. Swift is (significantly!) more complex than ObjC, but also a good bit friendlier in several ways. I'll hazard a guess that bluetooth is probably the trickiest part.
I just setup a site in Vapor (playing around) on Digital Ocean, and had very little to know problems. It's core libraries look pretty fleshed out which is important for Swift at the moment due to it's lack of libraries for Linux at the moment. Their docs are pretty good, and if you need to dig into their source (which lets be honest, we always need to) their code is pretty damn good. I would go vapor. FYI I haven't tried any of the other libraries but this worked pretty much out of the box so far.
You should just register for the notification didBecomeActive: on your VC, then on receipt of it you can check your CV and reload it ? Link in case you havent registered for notifications http://stackoverflow.com/questions/24049020/nsnotificationcenter-addobserver-in-swift remember to change the name to the notification you need.
Do you use push notifications? 
OK, do a quick up to date on the syntax, then learn each of the things individually, endpoints is relatively easy ~1-2 day, Bluetooth I havent done since iOS6 but if its still as aids as it was then 1 week, maps can be a little difficult but if its just showing 1 location ~1 day multiple ~1-2 and if you want routing 1 week to wrap it all up.
Yeah, if you click on that file it opens Xcode to so you can use that. That's one of the reasons you have to have Xcode installed also. So I guess technically you're right, you can't use the interface builder INSIDE of AppCode, You ACTUALLY USE Xcode for it.
Why not use Unity for game development? I am currently taking this course - https://www.udemy.com/unitycourse/. Currently its $24. 
because I want to also be able to write iphone applications as well. Not just limiting myself to games.
In that case try tutorials from /u/twostraws - hackingWithSwift - https://www.hackingwithswift.com/. 
I've found a fork repo that has basic swift support. Will post asap
Right, this right here. strongSelf is the convention that so many employ. Using the back ticks is ambiguous at best.
Udemy has some pretty decent tutorials. Not free, but often on sale for $15. While it hasn't given me a total understanding, it's given me a good kickstart. 
I had problems with collectionviews not finished being loaded and trying to access a cell yesterday. Apparently you must call collectionView.layoutIfNeeded() after collectionView.reloadData() to make sure it's views are layed out first. 
Wow I've never heard of this, but I'll try it out and let you know! (Thanks for bringing it up!) Yeah, after trying a bunch of things, I was thinking it *must* be something like that, that it wasn't loaded, because the error is so commonplace. I'm new to coding, but that Found Nil While Unwrapping error is usually something I can handle. And then I started to think, maybe I need to explicitly set the rootView (?? but I don't know much about the rootView, other than *what* it is), because if the collectionView isn't in the rootView, it would make sense that it *wasn't* loaded when the didBecomeActive method is called. (?)
Not sure if it's still relevant but a few years ago Cocos2D had a liquid simulation effect. 
Tell us what you want to do: is it important that it's physically accurate - a true fluid simulation - or are you just looking for a visual effect for a game? It's polite to include these kinds of details in your opening question, so we don't have to ask.
google is your friend var stringWithoutVowel = (str.componentsSeparatedByCharactersInSet(NSCharacterSet.characterSetWithCharactersInString("aeiou")) as NSArray).componentsJoinedByString("")
You could read the string's characters into an array and then filter the vowels out of that? I don't want to presume to post code if you're just looking for suggestions, but I'm sure you could also google the two main concepts in my idea (reading the string into an array and then filtering). 
Hey Sanjeet, months ago I made a useful resources with a list of different resources - https://github.com/miwand/Useful-Resources. This is the one I used for swift 2.2 - https://github.com/antiguab/BAFluidView. I tested it back then and it worked fine for me. Good luck
For in loops? for letters in String { if letters == "a" || "e" || "I" || "o" || "u" { letters.remove() } Its something like that :D (im rusty)
I'd love to see this implemented. Just before reading the proposal I thought that something like `[guard self]` would be nice. Funny that this exact idea is mentioned there.
Although you're getting good, acceptable answers, also consider [NSRegularExpression](https://developer.apple.com/reference/foundation/nsregularexpression). Maybe overkill for your particular need, but regular expressions have awesome power in general, and it's worth your time to learn how they work and use them. 
I can't believe people are still asking the same questions every fucking day... just scroll down a bit and you'll find your answer 
I've converted a huge app project from 2 -&gt; 3 recently and while it was a pain, now that Ive done it I haven't had any major issues. Whats broken in Xcode 8? I use it 8 hours a day monday-friday and the only thing I've noticed is that swift compile times take longer now and then. (sometimes its fast, sometimes slow....) and the syntax highlighting goes in and out briefly.
I have noticed that the storyboard/ Interface builder is super glitchy. The segment strings sometimes disappear till I click on them.
Filter is fun. let myString = "Some string with vowels" let novowles = String(myString.characters.filter({!"aAeEiIoOuU".contains(String($0))})) 
Thanks for the link! Its good to know and hopefully they will fix it soon. It really is a time killer. I will say thought that at this point Im glad I've finished my 2-&gt;3 conversion. It was not fun. Another note is that I don't use Storyboard, so Im I don't know if there are any problems there. For me storyboard/IB was always finicky. One of the reasons I moved away from it.
Maybe, but he wants an app probably to share it to others.
It doesn't crash on you? You don't get any memory leaks? Does your auto complete work reliably?
Thought I was the only one suffering with Xcode 8, as I find no-one complaining on google or Stack Overflow, I recently had to make a new storyboard because all my views randomly decided to be 1000x1000 and all the constraints got messed up.... :/
and yes, my git also bugged so I couldn't go back
Great! All of my books are updated for Swift 3, so just dive in wherever suits you – enjoy! :)
I actually had to do this for a homework assignment a few weeks ago. I passed it a string and a character array of what I wanted to remove. func removeCharacters(_ charactersToRemove : [Character], myString : String) -&gt; String { let results = String(myString.characters.filter{!charactersToRemove.contains($0)}) return results } this allowed me to do vowels, digits, consonants or a group of characters entered by my professor.
&gt; I keep getting Swift 3 errors on my 2.3 project, but it builds fine. Whew! I was afraid I was just imagining that.
If you're comparing Swift 3 vs 2.3 solely in Xcode 8 (ignoring Xcode 7 Swift 2.2), Swift 3 is likely to have better support. For example, I cannot run even `lldb p` or `lldb e` in a breakpoint on a UI test target. It throws an error saying that it cannot be debugged. Swift 3 works fine.
Hard to give a great answer without actually solving the problem, but this seems to be a close SO answer. http://stackoverflow.com/questions/17398058/is-it-possible-to-add-uitableview-within-a-uitableviewcell
Fx, i've made a image with a picture of a box, i've made so the picture is the right size in any device, but i want label inside of the picture box so its stays inside the box in all sizes instead of ending up outside the box because it moves when the picture gets bigger, how do i add constraints
For me, stack views are randomly becoming 10,000 x 10,000. This is somehow happening randomly, and whenever it does IB complains it's not a supported size 😐
what you want to be looking at is either a UIPageViewController, or a UIScrollView that has paging enabled. both of these options would replace your plain UIViewController that you segue to when the image is tapped.
Only issues I've really had is SourceKit having an issue finding some of my classes and showing 30 errors out of nowhere, but everything always compiles without issue so haven't put much thought into it. I was having the same issues with the beta releases and kept hoping it would be fixed by GM and final release. Oh well.
Try to do a layoutIfNeeded in viewDidLoad.
I think an extension on `String` would make this even better. :)
I just learned about all of this today on Teamtreehouse! 
You're awesome! I was searching StackOverflow for a good 2 days in a row and found no good answer, just tried this project and worked. :D Thanks man!
Alright, try this: import PlaygroundSupport import UIKit class GradientView: UIView { var topColor: UIColor = UIColor.white var bottomColor: UIColor = UIColor.black override class var layerClass: AnyClass { return CAGradientLayer.self } override func layoutSubviews() { (layer as! CAGradientLayer).colors = [topColor.cgColor, bottomColor.cgColor] } } let vw = GradientView(frame: CGRect(x: 0, y: 0, width: 128, height: 128)) PlaygroundPage.current.liveView = vw Make sure you enable the assistant editor to see the output – go to View &gt; Assistant Editor &gt; Show Assistant Editor:
Not sure what you mean. If you actually mean the source code of a whole app (thats presumably open source), than that would usually contain an `.xcproj` (Xcode Project) or `.xcworkspace` (Xcode Workspace) file. You just open that file with Xcode (prefer the workspace over the project if available) and you're done. If, on the other hand, you mean import of 3rd Party dependencies, then have a look at [CocoaPods](https://cocoapods.org), [Carthage](https://github.com/Carthage/Carthage) or [Swift Package Manager](https://swift.org/package-manager/) 
Selecting multiple lines and commenting in bulk in 8 doesn't work for me. What version you running?
Version 8.0 (8A218a)
Yes.
Updated the example with a custom struct.
Have a look over here https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreData/index.html?utm_source=iosstash.io
Hi! I'm about to start learning how to code and I'd appreciate any lessons on how to integrate and work with databases in MacOS. Thanks!
It doesn't seem like your data is large. I would suggest sticking with NSUserDefaults, but I would learn more about CoreData on the side.
&gt; Also would be interested in best practices Good point. There's many areas of AppKit that are just bad news, either because they haven't been updated in 10 years and are probably going to be deprecated soon, or because their implementations are a buggy mess, or whatever. Experience teaches us what to avoid, but Apple documentation never will (up until the moment it's actually deprecated). It would be great to have a list of "yeah, just don't use these classes/methods, ever, and you'll be much happier". NSHipster is good at this. They've got some great articles that gently direct people away from troublesome APIs.
Did you make sure to set the delegate of your `imagePickerController`? imagePickerController.delegate = self Try setting a breakpoint in there and see if you break in that function.
Agree^ thanks for posting!
Paul! I really appreciate all the efforts you put into teaching the community of Swift / iOS developers, your work has greatly improved my understanding of iOS development and programming as a whole. I think including a section on "if you are coming from iOS..." would be super beneficial, 1. To understand the main differences between macOS and iOS frameworks, tools, and best practices. And 2. Linking together the similar aspects of both shows readers how to approach macOS development from a established viewpoint. Cheers! 
Is this true for all numeric types then?
A chapter on working with OpenGL ES 3 from Swift will be nice. 
All you're wanting to do is sort some numbers and limit the number of results let scores = [10, 100, 5, 6, 6, 1, 1000, 56, 60, 12, 3245, 23, 34, 13] let topTenScores = scores.sorted(by: &gt;).prefix(10) something like that would do the trick, and not fail if you had less than 10 scores. But really you shouldn't be storing anything other than settings in `UserDefaults`. I'd recommend looking at CoreData, Realm, sqlite, or if you don't mind having the entire dataset in memory every time NSKeyedArchiver could do the job. If you were using a "real database" you'd be able to write a query for all scores sorted by highest first and limited to a max number, and not have to keep all scores in memory to get results. This would scale much better!
Thanks for the response! Yes I did set it as the delegate in this IBAction function that comes after the Func in the OP: // Mark: Actions @IBAction func selectImageFromPhotoLibrary(_ sender: UITapGestureRecognizer) { // Hide the keyboard. nameTextField.resignFirstResponder() // UIImagePickerController is a view controller that lets a user pick media from their photo library. let imagePickerController = UIImagePickerController() // Only allow photos to be picked, not taken. imagePickerController.sourceType = .photoLibrary // Make sure ViewController is notified when the user picks an image. imagePickerController.delegate = self present(imagePickerController, animated: true, completion: nil) } @IBAction func setDefaultLabelText(_ sender: UIButton) { meal.text = "Default Text" } 
What is the value of selectedImage? photoImageView?
I think you need to use this method for Swift 3 vs 2 func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) { print("Picked image") } 
This is great news. Think about all the people coming from the web/Windows dev and not interested in mobile. Try not assuming people know iOS :-) Good luck with the task!
Will do – thank you!
No wonder it is so slow. Swift wins for most ironically named language. 
Hi there, I was wondering if this book covers background services, installers (packaging), IPC? Thank you.
It's still being written, which is why I'm keen to hear suggestions! It's definitely going to cover placing an app in the menu bar rather than running it as a regular foreground window, but I realise that's not the same thing as a background services. Installers: I hadn't planned to; I was imagining most readers would want to use MAS. IPC: I'll have to see what's possible working inside the macOS sandbox.
Thank you, I'd really love to see those topics covered in your book. BTW I think MAS parts are already widely covered by many people, and I agree these are little bit more advanced topics maybe and maybe you are not targetting those people but don't you think there are more than enough novice material on the market already? I'm not saying that you shouldn't cover those novice parts but maybe at least start there but go into some of these more advanced parts too? Thank you
There is *some* novice material out there, but a) little if anything for Swift 3 / Sierra, and b) others adopt a less practical approach than me. Hacking with Swift, Pro Swift, Practical iOS 10, etc, all focus on making useful, interesting things while teaching concepts, and I'm trying to apply this same approach to macOS.
Big Nerd Ranch has a [blogpost on that](https://www.bignerdranch.com/blog/hannibal-selector/)
I’d love to see Core Data in there, somewhere!
More questions regarding #selector. * I found that I don't need to put class name inside #selector(), but I have seen many posts putting class name in it. Is it a bad practice to not put class name in #selector()? * Even if the selector function takes in an argument, I found I can write `#selector(method)` instead of `#selector(method(_:))`. Is it a bad practice to not write `(_:)`?
Hi, thanks for your books. What about stock monitoring app? Source data (a bit outdated) available for free, but I had better idea. To cover different aspects of macOS programming 1. Create macOS desktop application - just for starting 2. Add retrieving external data for stock prices - http networking, json/csv data parsing and representation 3. Add persistence to keep data locally - working with core data (maybe sqlite) 4. Add periodical data retrieval - working with background workers (maybe as separate sync daemon) 5. Add history of price changes for stock and display it in document representaion- working with document-based apps 6. Draw graph for stock price changes - drawing 2d primitives 7. Add triggers for stock's (when price reach desired limit show notifications) - cover desktop notifications. 8. Add small menu to control application trough menu bar widget. 9. Add today extension 10. Add sync internal data to iCloud - working with cloud service 11. Create headless service to generate random data for this app. 12. Contact any investment company or maybe just person who can provide introduction video to stock trading. 13. Handling podcasts for stock trading. Actually 12-13 instead of stock trading can be replaced to video about macOs programming and podcasts about swift. 
Those aren't the values. You can examine the values by setting a breakpoint in code and looking at the variable list. 
I agree with a couple other posters here that you could use NSUserDefaults, but it really is for preferences and settings as opposed to actual user data. I also agree that CoreData (or some other database-y kind of thing) is a powerful data management solution. But, databases are a big hammer, and if it is just a few scores and things, and especially if they are all going to be read into memory at once and dealt with, then don't forget the possibility of storing data in Plain Old Files - maybe using your own format or JSON or XML. Or, as has also been mentioned, doing keyed archiving (however, Foundation archiving is geared toward Objective-C objects, so may be very hard or impossible to use with Swift objects or Swift structs). Most important thing: ensure your storage decisions are private to a small part of your code (usually one class or one module at most), and that the rest of the app in no way depends upon how the data are stored. Because making a decision to store it one way and then having to change that decision, either because requirements change or it was a bad decision, is a way of life in software dev, and rather than trying to get it perfect, it is best to get it good and , more importantly, make sure that if it needs changing, the ripple effect is minimal.
Do you think the data is stored in memory uncompressed, which could result in ~1MB of memory usage depending on the image dimensions?
Just to put this in perspective, with 4 bytes per pixel (RGB plus alpha), a 512 by 512 pixel image would be 1 MB uncompressed.
Oh yeah.. Right! Thanks! So should I be worried about this issue as I have a carousel and it has 40 images. If yes, what option do I have to resolve this?
Thank you! 
I've already pre-ordered the course, and am eagerly looking forward to its release at the end of the month ! My preference would be to not include too much about iOS and the differences between that and macOS in the main body of the course. Not everyone buying a course on macOS will have an interest in iOS development, or a background in it, so it would be confusing. A separate section, eg an appendix on iOS/differences would be fine though. Also, I'm actually currently part way through reading the Big Nerd Ranch Cocoa/Swift book. (It's 18 months old now, so prehistoric in Swift terms at it uses Swift 1.) I had a couple of items of feedback based on learning OSX development through that which you might choose to incorporate into your course. One of the things I am liking about that book is the focus on xibs instead of Storyboards - they seem much simpler to deal with than Storyboards. On the negative side, one thing in that book that I am finding a little confusing is the use of KVO/KVC to do stuff, which seems a tad magical, even though elsewhere in the book they recommend against using bindings due to them being hard to debug. So, I would vote to make stuff as explicit as possible in code, rather than much poking around and ensuring you click the right 10 things in Interface Builder.
This didn't have any effect, thanks though!
You cannot update the height of a UIView independent of it's frame. What you need to do is create a new CGRect and set the button frame when you create it (if you're creating it programmatically) or after the view has been loaded into memory. button.frame = CGRect(x: x, y: y, width: button.frame.size.width, height: newHeight)
If you are using interface builder, create your height constraint like normal, then in your code create the NSConstraint with an IBOutlet attribute. Go back to interface builder and attach the property to the constraint. Once done, in your swift code you can now update the constant and multiplier properties of the constraint, which resizes the button. You can also do this in code, which is what I do anymore (yes, I create most of my ui programmatically, it has been way less trouble that way).
&gt; Is it a bad practice to not put class name in #selector()? Nope; in Swift 3 that's the default suggestion in fact. &gt; Is it a bad practice to not write (_:)? Now this I'm unaware of. I usually use the arguments (really I just go with the given autocomplete suggestion, which adds the argument). 
There are lots of ways to learn, and everyone learns differently. Maybe try a different set of tutorials?
As /u/twostraws mentioned everyone learns differently. Even when I knew programming I went back to try out different tutorials to see what I can get out of them. If you can find a place that would accept you as an intern that would be the best place to learn because you are around senior devs, who will feed you all the important info. I started out with the book from simon NG on swift, then moved to ray wenderlich book for swift, then moved to Mark - Price/ Devslopes Udemy course (really recommend this one), I have yet to try out twoStraws - hackingWithSwift course, but have heard a lot of great things about it, so try that too. Basically we have so many different places that we can learn, try each one and stick with the one that is teaching you the best at your current stage and then if you want go to the next one. 
That's some logic you got there.
&gt; `[pronounView, answerWellView, answerConjugationView].forEach {self.mainContainerView.addSubview($0)}` I'm pretty sure you can take this one step further and pass `self.mainContainerView.addSubview` as a variable. The result would look like this: &gt; `[pronounView, answerWellView, answerConjugationView].forEach(self.mainContainerView.addSubview)` (You might also be able to omit the reference to `self`, depending on the scope you're calling from) It's a little bit more expressive that way.
The best way to learn a new programming language in a USEFUL way, is to start building a simple program, and slowly/patiently add more functionality and complexity over time. The key is to not get overwhelmed, or discouraged. Googling your way through each little problem is not cheating. Don't use trial and error if you can help it, or you're going to lose interest real quick. I started learning swift 3 last weekend, by building a simple OSX app.(Which is now posted on github) Now I need to find a new idea, and start building another one. :)
Doesn't look related to Pokemon?
Mostly figuring out on my own.
Absolutely! It's in the language for a reason, but it always depends on context. I use nested functions to show that a certain function is only ever meant to be used within another one, and would never be useful elsewhere. This is especially useful if you are writing in a functional style and you have a function that returns another function. 
I just did this yesterday, not sure if this is considered the best way though: let height = UIScreen.main.bounds.height &gt; someNumber ? 44 : 32 button.frame = CGRect(x: button.frame.origin.x, y: button.frame.origin.y, height: height, width: button.frame.width)
Damn, medium priority JIRA that's been open since April?!
ok thanks :)
You can solve the problem by converting to non optionals. guard let reading1Actual = reading1, let reading2Actual = reading2, let reading3Actual = reading3 else { print("missing reading error") return } let averageReading = (reading1Actual + reading2Actual + reading3Actual) / 3 
Thats guys! 
Doh, wait a pain. I just bought your book by the way. I can't wait to dive in. I've had too many false starts with learning Swift and I love the fact that you book has so many projects. Projects is what makes programming languages stick for me. 
If this tickles your fancy, you should look into HOM (Higher Order Messaging). Here's a [paper](http://www.metaobject.com/papers/Higher_Order_Messaging_OOPSLA_2005.pdf) from 2005 that outlines the concept. There's a library that implements it for Objective C that's been around since then. Nothing really new here.
Cool. I didn't know this existed. I'm taking a data mining and a machine learning class now, which are using WEKA and Python respectively. I prefer swift to Python by a wide margin, but I prefer python's IDE (with the variable explorer) and data manipulation (though I'd rather use R for both) to xcode. I'm hoping to use ML on a large dataset that I will have to preprocess down to the relevant features (like 20k down to 500ish). I have the dataset in mind but don't know enough about ML yet to determine specifics. Do you think there's any chance to do this in swift? I'll explore your library this week. Thanks for posting!
Are there any good resources for people who can program already. I have about 10 years professional programming experience in other languages including ObjectiveC and to be honest I don't have the attention for books like Beginning iPhone development.
I have experience coding with python and java so i think i can pick up swift by reading apple's book. My final goal is to learn how to make IOS applications so would this course be right for me ?
https://www.hackingwithswift.com
Thanks for your support! Let me know if you have any questions :)
Cool. It wasn't a criticism of your video just to be clear, I know I'm not the target audience. Since your here though. I have about 3 years of iOS experience about 5 years ago and then took a boring government job which I've just quit and moved countries. I'd like to get back into mobile development and kind of in a self-training mode as I'm looking. Do you have any advice, I'm a competent programmer in general but rusty in iOS and my knowledge is a bit stale. Is there anything you could recommend I study up on besides swift in general, new features, things that might look good in my portfolio? Sorry to sidetrack you but it would be a huge help and you clearly know what you're doing.
Thanks. I didn't realize this. I've made a couple of updates to illustrate this. Passing the function as an argument is definitely better.
Thanks I will 
It sounds perfect for you. But as the other poster recommended, make sure to do the Swift reading. Maybe even give yourself a week or two head start on it.
Just start making a project and keep learning as you go. Helps to review the basics to make sure you understand everything 
This is still a shit analysis as the algorithms are O(n^2) and not something I would do if I was serious about performance. (You could argue O(n) rather than n^2 as the set of vowels is small and constant - but the cost of looking up a vowel is proportional to the number of 'vowels' and if the set of characters to test becomes large, this algorithm will really begin to be shit). NSCharacterSet is a *bit vector*. For every unicode code point (about 30k of them) there is a bit set or not set indicating membership in the set. "OMG" you say - "that sounds incredibly space inefficient". It isn't. The entire unicode space can be represented in under 4k. Yet lookups are O(1) rather than O(n). 
There is no best way to learn anything, since everyone learns differently. You can do several things to boost your skills. Read blogs, make your own project, read books on iOS and swift development, take courses on Swift and iOS development, read books on design patterns such as Gang of Four, do tests on hackerRank or join the algorithm club for swift, listen to podcasts, join hackathons individually or find a team, go to meetups and talk to other devs, etc. Make use of as many resources as you can get your hands on. 
Check out the Paintcode + Sketch. It does a lot of what you're looking for. It won't be a full solution, but will do a lot.
How about using [applicationWillTerminate](https://developer.apple.com/reference/uikit/uiapplicationdelegate/1623111-applicationwillterminate)?
How would you inject the same object into several classes? Use a singleton when assigning the variable?
A range is essentially a set of numbers (sort of) defined by its upper and lower bounds; the two range operators return ranges that either do or do not include the larger of the two numbers given: 1…5 returns a range that has 1, 2, 3, 4, and 5, while 1..&lt;5 returns a range that has 1, 2, 3, and 4.
You can look at any of the open source code that exists for DI. This isn't a new thing....
If `reading1` is `Float?`, then wouldn't `reading1!` simply be `Float` instead of `Float!`?
I thought this was an interesting analysis... until I saw that you did the performance tests under a debug configuration. Under a release configuration, the primitive solution is about as fast as any of the unsafe solutions.
"&gt;" means greater than so if 4 &gt; 1 means If 4 is greater than 1 "&lt;" means less than so if 1 &lt; 4 means if 1 is less than 4 Think of it as the wider end of the &lt; (which ever end its at &gt; ) has to be the bigger number for the if loop to engage or to define a range in a for loop
It's an instance method, not a class method.
Regarding your third question, I may be wrong but I'm pretty sure... &gt; for (kind, numbers) in interestingNumbers { ...refers to the key, value pairs that exist in a dictionary. interestingNumbers is a dictionary. Each value in a dictionary has a unique key, which is a value such as a String or Int used to identify the value the dictionary stores. In this case, the dictionary with the key "Prime" contains an array of prime numbers. So, '(kind, numbers)' refers to the kind, which is 'Prime' in the first example, and the numbers, which are '2, 3, 5' and so on. Edit: Amended claim that dictionary keys are always strings 
It's important to have goals. Your long term goal is to be a good developer, but you need to have very short term goals that help in that pursuit. Apart from getting an app into the App Store, I recommend checking out [Github's trending Swift projects](https://github.com/trending/swift) and finding one to contribute to.
thank you, I actually took a course at Udemy and really love Swift language. thank you for your advice again it helps me a lot 
good point I've to set some short term goals, thank you a lot
You right, we all familiar with home task's, and always imagenate "what bout app for &lt;task explanation&gt;", but monitoring home equipment hardly depends on external hardware. But if you can resolve this issue - it will be bestseller. Good luck.
code. make mistakes. fix them. repeat.
You can't read an algorithm and do a runtime cost estimate from reading it?
I'm maintaining a fairly large Mac app written in Swift. Decided to hang on 2.3 for a while. Many 3rd party frameworks haven't been ported to Swift 3 properly yet. And I'm not going to convert other people's code (because this is a recipe for disaster). I would start the conversion partially but Swift 3 can't load Swift 2.3 modules (at least that's what the compiler tells me). So ... 
&gt; it adds Xcode placeholders Same for me. As soon as I saw that I decided to wait... :)
Swift arrays are _very_ efficient, so I'm not taking your word for it, no. Unless we're adding a lot more characters to the set.
I would highly recommend it, you'll get an amazing performance boost.
You absolutely *can* assume something is *generally* faster as data size increases based on big O notation. Sure if your "character set" is exactly one element long then your search is going to be constant time. The cost of testing a bit (which requires a little math to find the byte and do the bit mask on it) is possibly slower than your trivial single character set. Like the fastest sort is BubbleSort if your list is already sorted. If. But it isn't *generally* the fastest sort. Its pretty much the slowest sort for anything but that one trivial case. As the set of characters grows, your code will suck more and more by comparison. That's the point of big O notation and I definitely can assume something is generally faster or slower using it. That's the point. 
i plan on every 2 yrs, but I'm a cheap SOB so I usually stretch to 3yrs.
In the time since Apple changed from "Powerbooks" to "Macbooks", I've bought 2 of them. Unless you have Logan's Mac, computers don't just start crashing a lot because they're 4 years old. I'm typing this on a Mac from 2009 that (apart from Apple declaring it "vintage", and in a few months "obsolete") doing just fine. Have you run a memory test? A disk test?
Hence why I said &gt;Unless we're adding a lot more characters to the set. I'm just saying that if we're only interested in vowels, then the only way to know whether `CharacterSet` is faster than `Array` is by benchmarking. I agree with the rest of your analysis.
I used to get new computers every 3 years, when they are deprecated, however… I currently develop on a 2011 (!) Mac Book Air! This thing has only 4 Gigs of RAM but thanks to the SSD that's barely noticeable. My main app takes about 30 seconds to build (10.000 LOC + a few pods) which is totally fine by me. All other use is perfectly fine too, it's not slow at all (on Sierra). I find this totally amazing… My other computer is a 2009 iMac, btw. and with the addition of an SSD it's perfectly fine too. The only drawback is that both machines are missing BTLE, so I miss out on a lot of iOS/Mac OS conectivity features (Airdrop, etc.). Also Safari freezes the old iMac every couple of days… So, I am waiting for the new Mac Books and iMacs to drop and will get maxed out versions of both of them. If they come in the same month, this will be kind of an expensive order :) If those machines hold up as well as my current ones, I will probably keep them longer than 3 years too. 
I know but in my country they are really expensive 😔
I just bought one of those for about €260. It was connected to a monitor and keyboard it's whole life for physically like new. I love it.
You need 16GB of RAM and an SSD. 
I'm in the same boat. The Stanford course is pretty good, as is [Hacking with Swift](https://www.hackingwithswift.com/).
Singletons are bad. Every time you use a singleton, god kills a kitten.
It's almost always about keeping different parts of classes in different files. Inheritance, composition, extensions, etc. Extensions can make for more confusing code because Foo has a method and it's not in Foo.m/swift. But, it can be helpful you don't want Foo to know how to display itself in the GUI, but you don't want it to depend on UIKit because it's also used in your command line tool.
haha, awesome. You made my day too :)
So to be clear, duplicate spaces don't count? Only remove duplicate non-whitespace characters? Assuming yes, here: import Foundation func removeRepeats(input: String) -&gt; String { var output = input var chars = Set&lt;Character&gt;() var repeatedChars = Set&lt;Character&gt;() let whitespace = NSCharacterSet.whitespacesAndNewlines for c in input.characters { if whitespace.contains(UnicodeScalar(String(c))!) { continue } let lower_c = Character(String(c).lowercased()) if chars.contains(lower_c) { repeatedChars.insert(c) } else { chars.insert(lower_c) } } var i = 0 while i &lt; output.characters.count { let index_i = output.index(output.startIndex, offsetBy: i) if repeatedChars.contains(output[index_i]) { output.remove(at: index_i) } else { i += 1 } } return output } I actually liked Swift until I set out to solve this problem. Congratulations, you made me come to strongly dislike it.
Still running my Early 2011 MacBook Pro 15", 8gigs and an SSD. I'm considering updating during the next rev because I'm more mobile than I was 5 years ago and carrying my MacBook and a work computer is starting to kill my back on travel. 
cheers.
thank you very much.
I feel you.
There should be a few years left in a 2.9Ghz, 8GB machine yet! It's no slouch, but the HDD is letting the side down. It can't be said enough: an SSD will change your world.
You are in a maze of swifty passages, all alike.
Unix epoch for the win. break the time into seconds since January 1 1970 (with timeIntervalSince1970) and then add the seconds to it. If you need the date as text just convert it back into and NSDate object. This would allow you to send/receive date information to other systems (i.e. webserver) w/o losing accuracy. also: [relevant](https://www.youtube.com/watch?v=-5wpm-gesOY) 
I would make each of those classes accept the depended-upon object as one of their `init` parameters. This does not require a framework and, generally, I do not see any unique value in the 'dependency injection' concept: every example I've seen just seems to be obfuscation around what should really go into the initializer; out of what? I can only imagine some vague, misplaced notion that the initializer should be 'kept clean'? It's not sacred! It's where the dependencies for the existence of your object are meant to go. I understand that DI also mandates abstraction of your objects dependencies (in Swift, as protocols) so that specific implementations may be substituted without breaking functionality but this just seems like good, loosely coupled design to me - again, no framework required. If I'm missing some key advantage of DI, please do enlighten.
I was literally just wondering this. I saw someone use an extension while implementing a queue and tacked the append and dequeue function in there which still doesn't make sense to me. I was told that if a class has a private variable the extension would still have access to it but Xcode wasn't having that shit.
Yes, you are extending the class. What I was getting at is if you had something like: class MyClass { var someValue : Int = 0 public var hashValue : Int { return someValue } static func == (lhs: MyClass, rhs: MyClass) -&gt; Bool { return lhs.someValue == rhs.someValue } } Then after that all you would have to do is: extensions MyClass:Hashable{} since the functions for Hashable are already in MyClass you are just telling the compiler that it's hashable. I know it's a longer way around to get to the same thing. 
My example is not 'extending the class' as you put it, it is *declaring conformance to a protocol*. If I write: class MyClassA : MyClassB { ... } ...then, yes, I could be said to *extend* class `MyClassB` in OO terms. This is unrelated to Swifts **extension** feature though, and should probably be deliberately referred to as just 'sub-classing' when dealing with Swift to avoid this very confusion. The meaning and terminology used depend on whether the first item after the colon is a class or a protocol. That said, I think I understand you now; yes, you could implement all the requirements of `Hashable` or another protocol in a class body, and separately register its conformance to the protocol with an empty extension. I think I didn't get your meaning at first because this would be a fairly non-sensical thing to choose to do; but it can be a useful effect when you have a protocol which your class coincidentally implements a part of.
I hope the private vars cant be used in extensions is a bug cos I love that stuff :(
Interesting! I love when someone explains the WHY behind something (the fraction piece). So, instead of Double, what would you suggest here?
Right now this seems to work: extension Double { var AM: DateComponents { let hours = Int(self % 12) let minutes = lround(self % 1 * 100) guard Int(self) &lt; 13, minutes &lt; 60 else { fatalError("Please use a correct time format. Hours should be less than 13 and minutes less than 60.") } return DateComponents(hour: hours, minute: minutes) } var PM: DateComponents { var components = self.AM components.hour! += 12 return components } } func %(lhs: Double, rhs: Double) -&gt; Double { return lhs.truncatingRemainder(dividingBy: rhs) } print(12.45.PM)
If you talking about cross-platform widget engine - better check QT. If you need "highly customized design" - you need to implement custom UI controls based on existing primitives (UIview/UIContol), as previously mentioned Paintcode your best friend, to work with this widget's from Xcode, check this article http://useyourloaf.com/blog/ib-designable-custom-views-in-interface-builder/ 
1st way between Container and CollectionVC insert NavigationController and hide navigation bar. 2nd way set all segues from ContainerVC and declare protocol to handle action from child VC's. UPD: Check this approach https://spin.atomicobject.com/2015/10/13/switching-child-view-controllers-ios-auto-layout/
Swiftly, the rainbow appears to become solid and, I venture, walkable (I think the giveaway was the stairs and bannister).
You need to read [What Every Computer Scientist Should Know About Floating-Point Arithmetic](https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html).
No, that's a String literal (double quotes), which is being passed through StringLiteralConvertible because you're assigning it to a slot of type Character. (How would you pass it to a func, for example?) A character literal would be like C's `'a'`, or Lisp's `#\a`.
I'd use Apple's built in functionality to avoid edge cases: let df = DateFormatter() df.dateFormat = "HH:mm" let d = df.date(from: "6:59")! let comp = Calendar.current.dateComponents([.hour,.minute,.second], from: d) print(comp) 
I had a mid-2009 MacBook Pro that I just replaced this past Spring. I had put in an SSD and it was still a great running machine. The only reason I had to get a new one was because the connection between the charging port and battery had rotted away due to water damage. I used that MacBook in the field, on beaches, travelled with it, used it every single day. And I will do the same with my new MacBook and replace it once something like that happens again or it no longer gets OS updates. Unless your using software that is truly pushing the limits of your machine you can probably keep a MacBook until it officially becomes obsolete.
Kinda offtopic but here's another interesting solution that works, using some basic properties of exponentiation and logarithms. func add(a: Int, b: Int) -&gt; Int { let k = 1.000000001 let a = Double(a) let b = Double(b) let result = log(pow(k, a) * pow(k, b)) / log(k) return Int(round(result)) } this is based on the fact that. (k ^ a) * (k ^ b) = k ^ (a + b) &lt;-&gt; log((k ^ a) * (k ^ b)) = log(k ^ (a + b)) -&gt; log(k ^ (a + b)) = a + b log((k ^ a) * (k ^ b)) = a + b &amp;nbsp; log is base k. a ^ b - is a to the power of b. (not to be confused with bitwise xor operator) k is chosen as a small number to avoid overflow. 
You don't have a local variable called "author" in the init. You just need to choose a name and set self.author to a string in the override. 
That or provide a new designated initializer that takes the author as a parameter, e.g., init(author: String, pages: Int) { self.author = author super.init(pages: pages) // ... } 
To people who have updated their software already: is the type inference in Swift 3 any faster?
Author of the article is an awesome dude. He showed me around tumblr HQ when I was an annoying 16 year old. His blog kicks ass as well
No, not sure where you're getting that idea from. Overriding and delegates are two very distinct concepts. All a delegate is, is something that conforms to a protocol. In this case the UITableViewDataSource + UITableViewDelegate protocols. Overriding occurs when a superclass (UITableViewController) has implemented a function, and you want to override the functionality of it in your subclass.
The function in the init is legal but it's probably not what OP wants to do.
I'm pretty sure he wants something like this: http://stackoverflow.com/a/33219079
Book should probably be a protocol too
Much nicer. Although it would probably be better to extend string with a characterCount() -&gt; dict function too. Question though: Why does reduce become quadratic? isn't it still just one iteration through the array? Also, I may not be understanding quadratic properly.
The first line is just declaring that for the scope of this function, you can type E instead of Iterator.Element to describe the type of elements contained in the collection. The function declaration line includes the &lt;K: Hashable&gt; to say that this function is valid when the type that is given for the key, which we will refer to as K, must conform to the Hashable protocol. The compiler knows this from the argument you pass into this function, which is a closure that takes an element from the collection and returns some value. In this case, it would be the brand of that hero's comics, so the closure would look like { $0.brand}* The key = handler(item) like is where the closure that was passed in is used. handler is the local name of that closure, it is called giving the item, and it is returned a value to use as a key and stored to a variable named key. *More formally, {variableName in; return variableName.brand}
author hasn't initalized yet.
They remain as Ints until you pass them into Objective-C.
Add an IBAction to "touch up inside" and "touch up outside" which resets the sliders value. Something like: @IBAction func reset(_ sender: UISlider) { sender.value = 0.5 }
I think there are books with just plain pages in it, so it's fine as a class. 
Ah, missed that, thanks. In that case, the property can be declared with a default value rather than assigning a value in the init.
Try deleting your DerivedData. I've seen issues in a storyboard hang around in Xcode 8 even after you've resolved them. The only fix I found was to resolve the issue which it sounds like you have, and delete DerivedData. 
Didn't change anything before doing the same trick I tried last time. Deleted the first label in both stack views and remade them again, no error now, see if it stays this way. Had to delete the same (first) labels last time too.
&gt; I wish I could use more generics in my Swift code. I'll be trying to write more posts about generics since it's a really powerful Swift feature I'm also updating my post to add more details about what's happening in the `groupBy` method ! Thanks for the feedback! 
Mixed-mode math with numbers doesn't bridge to Objective-C, it just necessitates many, many casts. Swift, ideally, should auto-extend integer/float values, but I definitely don't want it auto-truncating values without my explicitly knowing.
Not these ones. I have other stack views that aren't inside scroll view and stack views that are inside a scroll view.
Ugh. There's many things I like about Swift, but "moar generics (for the sake of generics)" isn't one of them. I wish I were smart enough to use generics. I've watched [this video](https://www.youtube.com/watch?v=XWoNjiSPqI8) twice and I still don't understand half of it. I'm sure there's some clever machinations going on in Swift's type system, if I had a PhD in optimizing compilers like Chris, but I only have a wimpy bachelor's degree in computer science (and it's been a decade since I last wrote a compiler) so it's mostly a mystery to me. In all my years using Objective-C, I'd gotten roughly zero type errors. That's just not a problem I ever had. (Or look at any Ruby or Python program. Those guys don't seem too bothered by it, either.) I still get compile-time type errors in Swift a lot, though. The type system in Swift seems to be aimed at making me to more work up-front for the same result. The language spec doesn't even describe how type inference is *supposed* to work, so it's just TIAS. In this particular case, there's a "pretty straightforward" (it is!) implementation at the top that most of us could get correct the first time, and then at the bottom there's a generic-laden version that's about 3 times as long, which some people here have trouble even reading, despite being about the simplest possible generic function. This is progress? Everybody likes to rant about API stability or ABI stability, but I'll consider Swift mature when I can write a non-trivial program and not have to visit bugs.swift.org every hour to see what type inference rules are working in this version.
I'm not sure how I should react to this "back in my day comment" without sounding as a Swift fanboy. I've been writing Swift pretty much since 1.0 and I can say the experience has not been as bad as it's been for you. To me generics are amazing the same way templates are amazing in C++ or generics in Java. I also do think it makes the code cleaner and safer. I admit that the extension wasn't as clear as I should have been, that's why I've added some comments about what's happening, hopefuly it should make things more understandable.
Why does the article start by claiming this is what singletons look like? class var sharedInstance: WatchlistManager { struct Static { static let instance = WatchlistManager() } return Static.instance } Nobody writes singletons in Swift that way. That looks like a pretty brain-dead translation of an Obj-C singleton. Swift singletons are just written like static let sharedInstance = WatchlistManager()
NSDate represents an absolute moment in time, independent of time zones or anything like that. It's really just a wrapper around a Double. To interpret an NSDate in a particular time zone and print it as a human-readable string, you would want to use NSDateFormatter, and set its time zone. The components of the date/time system in Cocoa are: * Date: an absolute point in time, with no reference to how humans interpret or describe that moment in time * DateComponents: quantities of various date/time units, e.g. 2 days, and 5 hours * Locale: a language/culture/region * Calendar: interprets and manipulates Dates and DateComponents according the human laws applicable in a given Locale and calendaring system * DateFormatter: converts Dates to and from human-readable form (e.g. 2:12PM January 21st, 2012, PST) * DateComponentsFormatter: converts quantities of time (e.g. 5 hours) to locale-correct human-readable form * DateIntervalFormatter: converts ranges of time (e.g. 2PM to 6PM) to locale-correct human-readable form So if you're printing things, and not using one of the formatters, then your results will be limited at best (I believe Date will make a UTC DateFormatter behind the scenes for debugDescription). If you're calculating things (say, "add 3 days to this date"), and not using Calendar, you'll get incorrect results in some cases.
I was thinking he must have a specific case for this, but yeah, I never write them like that. 
Just an idea without actual coding... How about first using arc4random_uniform(100) to get a random number from 0 to 99, then mapping this to your actual output between 0 to 5. Modify the mapping function to control the output distribution as you like. 
That's... wrong. That's just completely incorrect usage of singletons. class Thing { static var shared = Thing() } That's all you need...
Pretty much. Let's say here is our output distribution of 0 to 5. 0: 30% 1: 25% 2: 20% 3: 15% 4: 7% 5: 3% Something like let randNum = arc4random_uniform(100); var output: Int switch randNum { case 0..&lt;30: output = 0 case 30..&lt;55: output = 1 case 55..&lt;75: output = 2 // so on and so forth } Note: I'm here to learn how to write swift, so I may have syntax errors. Edit: Fixed distribution to what you originally said. Obviously if you want something more interesting there are lots of other ways to do this weighted random generator.
Got it to work :)
&gt; A personal beef I have with it is the public sharedInstance property. I heavily dislike this because it leaks what should be internal implemetation details to the outside world. It literally screams ‘I’m a singleton!’. What I have done to mitigate this is introduce a second class, a factory class, which is responsible for creating the singleton instance. And a Factory class does *not* scream "I'm a singleton!"?
You can change `var output` to a `let`, since it will be assigned a value exactly once (and the compiler can verify this).
This is the way I've done it before, but I used variables for the values let zeroChance = 50 let oneChance = 35 + zeroChance let twoChance = 15 + oneChance let totalChance = zeroChance + oneChance + twoChance var output: Int var randomNum = Int(arc4random_uniform(UInt32(totalChance))) switch randomNum { case 0..&lt;zeroChance: output = 0 case zeroChance..&lt;oneChance: output = 1 case oneChance..&lt;twoChance: output =2 //you get the idea } More or less the same thing, but the variables allow the numbers to be changed easier, and you can avoid the math for finding values in the switch statement.
&gt; ...even if you were to do something like `var string = T; string.append(...)`, a copy is made each time. This is because the implementation of reduce also holds a reference to the buffer where the string is stored I think you may be mistaken. Xcode performance measurements show `appending` to be an order of magnitude slower than `append` in a `reduce` closure.
You can use GameplayKit for randomness control. Just scroll down to using randomness. I've read before you can favor results or skew it. [Documentation](https://developer.apple.com/library/content/documentation/General/Conceptual/GameplayKit_Guide/RandomSources.html) 
Of course you are correct, that's how you write a Swift singleton. Our singletons look like the examples included in the article though, for unknown reasons. Perhaps the author of them weren't so experienced in swift? How you write a singleton is not the point of this article though, both ways result in the same drawback: lack of testability. Edit: I've updated the article to address your comment. Thanks for pointing it out!
Prior to Swift 1.2, classes could not have stored type properties, only computed type properties. This was a common workaround to that limitation.
Yes, as pointed out earlier that's a much simpler way of creating a Swift singleton. Our singletons look like the examples included in the article though, for unknown reasons. Perhaps the author of them weren't so experienced in Swift? How you write a singleton is not the point of this article though, both ways result in the same drawback: lack of testability.
Thanks a lot for this detailed response mate, I never considered this and it's a very logical solution towards this issue. I was just wondering this section and how I could apply it: "then call a function that changes the color after that period of time. It changes an parameter to whatever the next color should be, and updates the texture based on that parameter. Then it issues another wait." Would you recommend having seperate functions for each colour, or how would you change the colour under 1 function? Sorry, I will keep the subreddit's in mind next time if a similar issue pops up, but thank you a lot for your response! 
And my guess is that this is the exact reason why our singletons look like this. Thanks for pointing it out! :)
There isn't, as far as I know, making `UIViewController`s a case where initialiser 'injection' can't be used.
Ah, I'm guessing that you want to map the cuisines you get from the database to an enum (i.e. if you get ten cuisines, you get ten cases in `Cuisine`). Unfortunately, you can't do that. Enum cases are strongly typed (you can't change them at runtime). Swift expects the cases to be fixed. While I would have probably modelled `Restaurant` and `Cuisine` like you did, it doesn't seem to fit your use-case. The best I can suggest is making the `cuisine` property in `Restaurant` a `String`, and then store the cuisines as an array of `String`s. You can still match those.
``` enum Cuisine: String { case Chinese = "chinese" case Italian = "italian" case Thai = "thai" case Inidian = "indian" case Spanish = "spanish" } ``` Then use: ``` let results = restaurants.filter { Cuisine(rawValue: $0.cuisine) == cuisine } ``` Granted it's better to parse the rawValue into the enum during the creation of your `Restaurant` model... Also, conceptually speaking it's possible for restaurants to cover multiple themes. Maybe you should be considering; `let results = restaurants.filter { cuisines.contains(Cuisine(rawValue: $0.cuisine)) }`
Check out AudioKit. It's an API full of fun audio related stuff.
Have you ever written a Swift Factory class that *didn't* return a singleton? Why? I know when I have to call a Factory, instead of a normal init, that the only reason somebody would add this extra level of inconvenience (uh, I mean indirection) is because they're sharing memory.
"Small task" is very relative. You're talking about network communication. Some people specialize in that. Im not sure about bonjour, I've never used it. Dropbox does not seem to be what you want, as you've said you want it to copy directly to your home network 
I prefer defining how to map from a range to another number in one place, that way it's easier to use in multiple places if needed. let mapping = [ 0: 0..&lt;30, 1: 30..&lt;55, 2: 55..&lt;75, 3: 75..&lt;90, 4: 90..&lt;97, 5: 97..&lt;100, ] let random = Int(arc4random_uniform(100)) let (value, _) = mapping.first { $1 ~= random }! print(value)
At first I thought it was some new framework/library for cross platform UI
Neat!
Making a dashboard app using Charts pod and Elastic (querying data directly from elastic, creating queries in the app)
Finishing my freeRADIUS client (administration for WPA2 enterprise wifi systems) for iPhone. Still looking for an easy adaption to out-of-the-box systems.
Okay so I think I've fixed it but now it won't let me include author in my instance so I can't change the author only the pages. What am I doing wrong? [My Code](https://imgur.com/gallery/8QpfR) 
Still working on my solitaire deckbuilder *Pharaoh* in my spare time. It's coming along. Artwork from my artist is starting to roll in, and it's so much better than my "programmer art", it's just silly. For my day job, I'm working on a SpriteKit based kids' app that features some cool interactive comic panel functionality. This week, I wrote a nifty engine that lets me define separate .sks files for individual comic panels, and then make .sks files to define the panel layout on the page. It automatically inserts the individual comic panels in the layout and handles the "tap to activate the next panel" functionality, sticking a border around them, clipping them to the border with SKCropNodes, etc. It works really well. The end result will be something similar to our web game [Treadsylvania](http://treadsylvania.com), but with a much easier development effort (and fewer classic movie monsters, sadly). 
Solved my own question had to update my sections of index path with the count of the new array. !
Can you post your solution so if somebody is googling this they can know? 
URL is a struct, so is passed by value. NSURL is an Objective-C class. In general, prefer the new struct versions of things unless you need to subclass for some reason.
It's more that references to Thing.shared in business logic are bad practise, if you're injecting your Thing instance into everything that needs it it's a legit way to have a single instance of something, and still have testable code.
Swift 3 is compatible with iOS 8 and later
An easier way to do this would be to use the contains method on the string like so: self.retailers.filter { $0.Name.contains(lower) }
Subscribed! Smart kid :)
I love your books, do you think you'll ever write a book on server side swift?
[Working with Cocoa Frameworks](https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/WorkingWithCocoaDataTypes.html)
I actually tried that method however it wasn't working it kept adding unrelated items to the array. I am not sure why. 
There are a couple ways. &amp;nbsp; [Apple's tutorial](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html) is very simple and can get you up to speed. There is also a book available on iBooks titled "The Swift Programming Language" that is pretty much the same thing. &amp;nbsp; Lynda.com has some tutorials on Swift as well, but that website has a rather expensive subscription fee. Additionally, their tutorials address Swift 2 still; most content has not been updated to Swift 3. &amp;nbsp; After you have done either (preferably the former), the best way to continue learning Swift is to just dive right in and code something. The [iOS app tutorial](https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html) is a very good place to start.
Why would you even... ?
making some major changes to my lightsaber app http://bluesaberapp.com and working on the app for my startup.
&gt; However, the real problem here is that you probably don't understand constraints well enough to work efficiently with them. Bingo. I hated constraints the first time I tried to use them. Took the time to actually learn how they work and learn some of the quirks and grew to love them. If OP is struggling with a "simple login form" I'll guarantee you they have no idea how to use constraints.
And something like a login form should be a cinch to develop with UIStackView, and not worry about coding all the constraints by hand... (though you do have to be able to target iOS 9 and greater) To be fair, I've been programming with Auto Layout since it came out, and I'm still discovering things I hadn't realised before.
No, Apple won't approve it. They say that an app has to have some functionality, at least more than just receiving push notifications. You probably need to build a mobile app that provides an interface to whatever data you're pushing.
You can change the author by assigning directly to the property after you create the object. Change: let myBook = Novel(pages:50) print(myBook.description()) To: var myBook = Novel(pages:50) myBook.author = "Alexandre Dumas" print(myBook.description()) Now you'll see the new author appear in the description.
Isn't this missing a trailing ) let tapGesture = UITapGestureRecognizer(target: self, action: #selector(imgTapped) should be let tapGesture = UITapGestureRecognizer(target: self, action: #selector(imgTapped))
Do it programmatically.
This is semi-accurate. The app will have to have some functionality... but look at apps like Prowl who's sole function is to relay Growl notifications from you Mac to your phone. The in app functionality is just listing received notifications.
try designer for uwp and android. you wont feel the same way.
Tried that. As far as I understand the IBAction goes into the cell custom class. In that case I can't make the action change the data arrray the tableview feeds from. Or can I?
How are you finding the GameKit integration with SpriteKit? Currently, I'm handling all my SpriteKit activity by subclassing SpriteKit classes, but I'm interested in the component model that GameKit provides, since the .sks editor supports exposing properties through it.
Autolayout essentially consists of a list of declarations. I don't see why I'd need tests for it, any more than I'd need tests for constraints that were added via IB.
NSURL conforms to lots of useful protocols, like NSPasteboardReading, NSPasteboardWriting, and QLPreviewItem. If you want to pass supplementary data along a path that uses one of these, it *seems* like the easiest way would be to simply subclass NSURL and add a new field. In any other programming language, when I need to pass a standard object with just one extra custom field, I subclass. NSURL is the only case I can think of, on any platform, where this approach doesn't work.
That might work, thanks! But how can I getthe row number in which the image being tapped? I need it in imgTapped function so I can change the data array.
Why not use text messaging with a shortened link? Also, there is the ability for Android phones to do browser notifications, but it is limited to Android only and Chrome browser for now, I think. What is the purpose of the website? There could be more reasons to have app functionality...
This, I still have everything relative to the screen (constrained) but without using the GUI. And if they change the GUI, I don't need to change anything. I think it helps learn all that's under the hood. Plus it's ultimately much less repetitive.
I usually use the center (or the origin if you keep the view inside the cell) of the touched view. UIView has methods to convert CGPoints between different views of the same hierarchy. So your `20,20` center of the tapped imageView becomes `35, 180` of the tableView. You then ask the tableView for the indexPath at that point func imgTapped(sender: UITapGestureRecognizer) { guard let tappedView = sender.view else { return } let touchPointInTableView = self.tableView.convert(tappedView.center, from: tappedView) guard let indexPath = self.tableView.indexPathForRow(at: touchPointInTableView) else { return } print("Selected item at indexPath \(indexPath)") }
Why not just pass in the uiimage as an argument to the selector and your function? Or the index itself? 
Why not e-mails? A lot of people are used to receiving notifications via e-mail. 
Seems like it might just work out. Thanks for the tip.
I have built lots of services recently that use text and it definitely isn't out of date. The likelihood of having text access has got to be close to 100% today. It is the 'bot' revolution without specific clients. Text messages through Twilio are $.0075 per text so pretty cheap: https://www.twilio.com/sms/pricing What is the business model for the site to capture value? 
Good point. Over 50% of email is read on mobile phones today. There is usually a notification strategy already in place for someone's email as well. 
Emails are not instant.
Thanks. I'll take a look at that text service. It's for a specific niche which requires the purchase to be made quite quickly, so if I can't figure something out, that will probably be a good option
This looks better than SnapKit to me. Anyone know cons of Mortar compared to Snapkit or PureLayout?
The question to ask yourself isn't "Does the world need another Meme app?". No, my friend. The question is "Doesn't the world need another Meme app?". Best of luck!
I love how that SO question was closed. SO is infuriating sometimes.
What am I looking at 
Read and you will find clarity.
[Actual article link](https://medium.com/@nathanborror/using-swift-and-grpc-5e8af5b97b9c#.2ft6hsovt)
Yes, it would! I got you covered: https://www.reddit.com/r/swift/comments/56dri3/linux_ubuntu_benchmarks_for_server_side_swift_vs/
Is that possible now? Because as far as I know the target-action mechanism only allows zero, one or two arguments. One argument is always the object that invoked target-action, with two arguments the first is the object and the second a UIEvent. Can you provide a code example? How would I set up a `UITapGestureRecognizer` that calls an action with the indexPath? 
The assets folder in your app tells you what uses what image and size. In general, 1x is non-retina, 2x is retina and 3x is 6+. Apple's guide is pretty thorough if you just google iPhone icon guide or something like that. 
Seems to be GitHub bluecocoa/class-dump 
Thank you, thank you, thank you!
Very interesting, does perfect have any socket.io equivalent?
The Swift IRC chat on StackOverflow would be helpful.
Replace T with Any
I think this benchmark is useless. The application has no IO and it doesn't show e.g. how the application behaves with increasing load over long time. Let's see when techempower starts to test Swift.
Been messing around with VaporMySQL for the past week. It was a little more difficult than expected as the recent release brought about some major changes and most resources still reference old code. FINALLY got it to work where I can add entries to two tables, create many to many relationships between them, and get a list of linked objects. All of this has been done on localhost and tested with program called 'Rested'. I have also partially tested app interaction with the server within a playground and everything seems functional so far. 
the discussion on /r/programming also mentions that its using an outdated version of node so would be missing some performance improvements (and as you said, not even doing anything which would test those improvements)
What are you trying to achieve with that code?
Apple has a forum at https://forums.developer.apple.com/community/xcode/swift
When the time comes, would love a tester! Especially on the actual game play itself. Still a few months away from that, but getting closer every day. If you want to follow the game's development, check out my twitter feed ([@FluffyRaccoonHQ](https://twitter.com/fluffyraccoonhq)). Once the game is far enough along, I'll definitely be looking for feedback and testers. :) 
&gt; Is there a way to 'dynamically' call the test function? Currently, not cleanly, although you can (unsafely, bit-for-bit) cast the function to one taking an array as that's what variadic functions desugar to: unsafeBitCast(test, to: (([Int]) -&gt; Void).self)([1, 2, 3]) You may want to wrap that into a proper, safer generic function: func call&lt;T, U&gt;(_ fn: (T...) -&gt; U, with: [T]) -&gt; U { return unsafeBitCast(fn, to: (([T]) -&gt; U).self)(with) } then you can just call `call(test, with: [1, 2, 3, 4])`
Nobody seems to start coding for techempower since.
I've been working on a mood tracking app for the past month. It's coming along really well and should be finished by the end of the year (at the latest)
I'm willing to bet *the usual amount* that they recently upgraded to Swift 3 and this is an implicitly unwrapped optional and this is because of [SE-0054](https://github.com/apple/swift-evolution/blob/9cf2685293108ea3efcbebb7ee6a8618b83d4a90/proposals/0054-abolish-iuo.md).
Both - Zewo, for example, implemented a bunch of performance optimizations between 0.13 and 0.14 which nearly doubled raw performance (and even more so in these pure io benchmarks). Interestingly enough, the bottleneck in the benchmarks was the use of arc4random, which is blocking while the rest of the application uses coroutines and as such is non-blocking. Disclosure: on the core team of Zewo
I'm new to swift and literally just figured out how to fix this problem for an app I'm making, Optional(yesterday)!
Maybe I wasn't really clear. :) I meant that something like this: (0 ..&lt; 10_000).reduce("") { string, number in var str = string str.append(String(number)) return str } takes quadratic time, while this: (0 ..&lt; 10_000).map { String($0) }.joined() only takes linear time.
Same thing nearly happened to me [here](https://imgur.com/gallery/KNZkD) it was already submitted to be reviewed when I noticed. 
Alright, I think I got it. I was thinking too much. Which I wasn't sure was even possible. But it doesn't need anything special. It's just simply the address of the folder as a URL. So "file://pcName/Volumes/foldername/filename". 
no. still error. i made a protocol conforming Pro.
 class Sub1: Base {} class Sub2: Base {} func foo&lt;T: Base, U: Base&gt;(_ left: T, _ right: U){ print(left.str) print(right.str) } let sub1: Base = Sub1("what") let sub2: Base = Sub2("Carl") foo(sub1,sub2) // ok so, why would it work?
In that case what would account for the ~10x performance difference between a `reduce` using `appending` vs one using `append`?
This is a super annoying thing about migrating to swift 3. 
I haven't seen your code that uses `append`, so I'm not sure. Can you post it?
Please explain how this content is "mindless".
What are we not good enough for you? Whatever I don't care I didn't want to help you anyways.
Even so, `testReduceAppend` is faster than `testMap`.
Thanks so much, lifesaver! Even though I'm on Xcode 7 it seemed to work
You are welcome
Bonus point for simplicity in the form of: 1. Grab libmysqlclient 2. Drop it somewhere 3. Embed it somewhere else 4. Call mysql.connect(yadda, yadda) from your beautiful swift program Or something like that
I if you had even some other basic information in the App, even information regarding the website - for example a list of the updates you're pushing out, then it would not be rejected by Apple.
I remember seeing some similar results by someone using techempower benchmarks and found them here: https://speakerdeck.com/terhechte/nsspain-2016-developing-app-backends-with-swift-on-the-server Pretty much the same (Perfect even beats out Scala and Java in some edge cases - all the major Swift frameworks perform well). But no posted code, so who knows.
Interesting. Not very scientific though.
I know generic function will be defined while complie time, but I think it can be complied as foo(_ left: Pro, _ right: Pro) according to the type I pass to. Polymorphism in c++ is virtual table, right? So, passing a protocol type, complier should know there is a virtual table of the types conforming to this protocol. So this generic function should be able to be complied to foo(_ left: Pro, _ right: Pro). Do you know what I mean?
&gt;Now, if I convert the NSRange to a string for printing and type in 22222, each time I tap the button I see this: The key is that it's "SHOULD." It's saying "we are at location 1 with a length of 0, should we change this to `string`? Same thing for the rest. &gt;If I start hitting the delete key, I will sometimes get a 1 to start appearing like this: When you hit the delete key, it's asking whether it should change the character at index 3 of length 1 with the string `string` which is going to be empty. When it comes up with a length of two, the only thing I can think of is that you are looking at a character which is two unicode scalars long. Not sure. Haven't touched that API since ObjC to be honest. 
this worked perfectly! thank you!
You really shouldnt connect to an external SQL server from a production app. That should be done via an API. If you only need the data to be locally available I recommend you to take a look at Sqlite. Works on both OSX and iOS. Look for a Swift wrapper around the C-API.
Thanks so much! This was very helpful. I use this all the time for input validation (well did in Objective-C, now I'm learning it in Swift) and NSRange has always been one of those mystery pieces that I would get to work just fine (I think), but I never knew what was going on under the hood. 
To clarify some important points, these libraries are not meant for use in iOS on mobile apps, only in Mac apps for enterprise applications and server side stuff, for mobile apps use apis that connect via http. Thanks again for all the help.
Yeah, it seems to be working fine. Ive ran a simple hello word program in the cmd and that works okay. I was just thinking some of the libraries might not be available to me. Ill have a look at that on iBooks. Do you know of any decent video tutorials? Im struggling to find a series thats on 3.0. They all seem to be mostly on 2.2.
*Most* 2.2 content should work with 3.0. I think you'll be able to spot when you write something that needs to change for 3.0. So 2.2 content *should* be fine
The ability to create apps for the enterprise with components on the server, data layer, middleware, desktop and mobile devices in one language has such a huge potential that right now it is the perfect time for being a Swift developer.
Apparently MySqlSwiftNative is the only one that connects directly with the server using sockets in Swift. Really cool. https://github.com/mcorega/MySqlSwiftNative 
&gt; en****se energise?
Swift is great, but the language needs to stabilize and honor backwards compatibility to be ready for wide-spread enterprise use. Hopefully, Swift 3 will really deliver on this. 
Sign me up. Do you have a project going on pr something in mind?
I do! I also msged you so that we can chat privately 
Good! Pm me so we can chat
This might not answer your question since I think you want macOS client-side- but on the server-side, we use Vapor's MySQL client. https://github.com/vapor/mysql. And numerous other database libraries, too. We have an example TodoList that uses Kitura and MySQL: https://github.com/IBM-Swift/todolist-mysql
Check the Swift wiki in the About section.
I'm making a puzzle game for iOS and tvOS called Asymmetric. Here is a [Screenshot](https://twitter.com/asymmetricapp/status/779626458025168896) (: 
Will do!
Sure! Pm me the info for it. Don't I need an invite?
How does the compiler know the concrete type? You cannot create an instance of Pro, it is an abstract type, so it can't be passed to a generic function. Generics give you compile time polymorphism. The exact types (class, struct, enum) are known to the compiler. If you want runtime polymorphism, you don't need generics at all.
Apple wrote 2 (3) books about it. -&gt; iBook Store // I can highly recommend the App 'Mimo (Swifty)', too.
Doing volunteer work for code for America. Currently working on a pet adoption app and a tree ordering app for the people of Orlando. There is a ton of work if you want to get your name on an app that will help people and animals. https://github.com/cforlando
Pm me :)
My 3 goto sources: hackingWithSwift.com /u/twoStraws Udemy - look for stuff from Mark Price (Devslopes) and also from Nick Walter. You can usually find a coupon for Udemy to pick courses up for $10 - $25. Both these guys have great courses and support communities. 
If I have enough that this is useful, I would consider that a great indicator that I have too many. Sometimes it's a good thing when a language makes something hard.
All of these use nsjsonserialization under the hood for parsing the json - you're testing the performance of mappers rather than parsers, which is pretty negligible. If mapping ever became a serious performance bottleneck, I would be very worried about using json anyway. That said, nice job getting this all together :)
It has nothing to do with the operator, it's all how it's written in the documentation. It's incredibly misleading especially coming from Objective-C where you wouldn't do things like that, instead you would have something like: switch ([date1 compare: date2]) { case NSOrderedAscending: NSLog("Date1 is greater than Date2"); break; case NSOrderedDescending: NSLog("Date1 is less than Date2"); break; case NSOrderedSame: NSLog("Dates are the same") break; }
Yeah but seriously, the &lt; operator appears in every programming language, it is even taught as like one of the first things in every maths class. I knew I was gonna get downvoted for this but nonetheless it it truly amazing how someone cannot know that.
Glad you're enjoying it!
Why not use CAEmitterLayer for this ? Spritekit / SceneKit particle systems are also an options.
hackingwithswift.com
Sent!
Fair enough :)
Good catch! I keep mixing up the language (saying parser when I mean mapper). And thanks for taking the time to check it out!
Sign me up!
Alright pm me how you would like to chat. (Skype slack whatsapp texting)
iOS Apprentice is good if you want to get hands on experience building four apps. Swift Apprentice is good if you want to learn the ins and outs of Swift (though as you mentioned, you could just as easily go to Apple's Swift book available for free). I guess it comes down to what your goal is.
This is a good example of integrating with the swift parser. Though I think sadly without semantic editing support, plugins are limited to code analysis and generation. If you have ever worked with language extensions on IDE's like appCode, Android Studio or the like, it is like night and day. Here's challenge for you - link the AST to the source code text. If you can do that, you can build much more powerful extensions.
https://docs.fabric.io/apple/twitter/log-in-with-twitter.html
This just says to me that the swift compiler makes no attempt to detect naming collisions in protocols, it just reports errors about their requirements not being fulfilled, and in this case you can only have one "num" in your conforming type, so you will get an error for whichever protocol you didn't conform to, you would have the same problem if you had no inheritance relationship in the protocol and then tried to conform to both protocols. Swift has no way to distinguish between the two - it is just a missing feature in the language. 
just trying to increment levelScore, then assign the new value to totalScore 
IIRC Freddy doesn't, BNR built their own parsing engine. https://github.com/bignerdranch/Freddy/wiki/JSONParser
Ahh nice catch. That makes it freddy vs foundation, then (which they have already benchmarked, actually). 
Remember that cells are reused as you scroll, so if you're scrolling fast enough you'll end up with cells that have been reused for a new piece of data loading in images for your old data. There are a few ways of handling this. I've taken your example (messily converted it to swift 3 so I can debug :p) and added a quick and dirty solution to your problem. I've also made some placeholder classes for things not included in your code. The important parts are commented with `// **` protocol ObjectCellDelegate: class { } class ObjectCell: UITableViewCell { var objectImage: UIImageView! var titleLabel: UILabel! var publisherLabel: UILabel! var objectURL: UILabel! var imageURL: String? weak var ObjectCellDelegate: ObjectCellDelegate? } class Object { var title: String! var publisher: String! var sourceURL: String! var imageURL: String? } class ViewController: UIViewController, ObjectCellDelegate { var tableView: UITableView! var objects = [Object]() func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: IndexPath) -&gt; UITableViewCell { let cell = tableView.dequeueReusableCell(withIdentifier: "ObjectCell", for: indexPath) as! ObjectCell cell.objectImage.image = nil let object = objects[indexPath.row] if cell.ObjectCellDelegate == nil { cell.ObjectCellDelegate = self } // set the title and publisher label data cell.titleLabel.text = object.title cell.publisherLabel.text = object.publisher cell.objectURL.text = object.sourceURL asyncLoadObjectImage(object: object, cell: cell, imageView: cell.objectImage) return cell } //Async image load method // ** Updated method signature to accept the cell so we can do some comparison later func asyncLoadObjectImage(object: Object, cell: ObjectCell, imageView: UIImageView) { // ** Here we mark what image we were loading for this cell cell.imageURL = object.imageURL let downloadQueue = DispatchQueue(label: "processDownload") downloadQueue.async { let data = try? Data(contentsOf: URL(string: object.imageURL!)!) var image: UIImage? if data != nil { image = UIImage(data: data!) } DispatchQueue.main.async { [weak cell] in // ** Here we check to make sure this cell still represents the same data as // ** when we queued this operation by comparing it's current image url to the original object's image url if cell?.imageURL == object.imageURL { imageView.image = image } } } } } A more complete solution to this problem would be to make an image view subclass / worker class / some kind of wrapper so we could use this functionality on any image view with any URL. But this should be enough to illustrate the basic problem and solution. EDIT: to /u/xaksis's point, you'll also want to either have a placeholder image when you dequeue your cells or nil out the image view's image in your cell's `prepareForReuse` method that will get called every time that a cell is reused.
Very helpful blog article. Goes enough into depth for most people to understand and still keeps it useful!
haha it's to support a social impact project. we are a nonprofit organization and looking for people who want to help change the world. We were optimistic that Redditers are people who care about making a difference.
That's right! But that was from back when people we making the pyramids of doom. In my tests, Freddy consistently scores twice as long as any of the JSONSerialization mappers. We're still talking in hundredths of a second, so I'm not sure that matter much. In discussing it with a colleague it basically becomes an argument of which is cleaner/easier to read.
Except that string.index(_:offsetBy:) is so incredibly slow for large strings. Try extracting substrings from a large string using an array of regex matches. If anyone has a fast way to do that in Swift I'm all ears.
I know the difference. I did not think too much of the Swift Apprentice book. So I was wondering how good iOS apprentice would be - considering it is from the same "organization"
Well your initial question was confusing. I never tried their swift apprentice but I did do their iOS apprentice and it's really good. 
It pretty much can't be done because of the variable-length nature of characters -- you simply don't know how far from the start a given index is until you look at every character. If you want quick behavior, you can make an Array&lt;Uint8&gt; and store ASCII in it. Now, I wonder if for String constants, if Swift provides caching of indices so that they can be recomputed instantly, and computing an index of the string is only computationally intensive the first time.
So glad to see that Swift 3 made indices the responsibility of the string in question. More verbose, but much more sensible than having indices manage their own offsets (by remembering which string they belong to).
That's a naive thing to say. Many languages depend on unicode support.
What are you trying to do?
I am trying to use the voice command feature without having to press the voice icon constantly. I want to speak the command and convert the data into text. 
Haha with this load of bull right here: "Don't miss your chance to be a part of something special and be able to display this on your resume for future employers." On top of that this: "We are looking for experienced developers who practice clean code." If you want developers don't put conditions and don't try to sell us with the it will look good on your resume crap. If you are an experience developer none of this crap matters, so instead why don't you look for new devs to help you out. This shit infuriates me that you are asking for free help and yet you put conditions on who gets to join. Redditors do care about people and do want to make a difference. However you are depriving young students of opportunities. An experienced developer does not need this in their portfolio to make it look good. TLDR: As a non profit you should be asking new grads to help you out not only go for established devs. PS: Ask for people's Github and check their swift code from there.
I do not believe there is a special setting for this. When you lift your arm the watch face should appear. Say "hey Siri" and then your command. 
It's just bytes. That's why you have to use .utf8 / .utf16 / .unicodeScalars / .characters to look at individual parts of a string. Those are all various ways of looking at those bytes in a way that is *vaguely* aware of character boundaries.
You should cache the images, Kingfisher does exactly that for you: [link](https://cocoapods.org/pods/Kingfisher) 
Downloaded and follows the instructions but nothing happened. Was not added to Xcode. Using Xcode 8.0 from App Store on macOS Sierra.
A few things... there's a serious lack of Swift 3.0/macOS development resources. With so many possible components and directions, it's hard to say which direction to head. However, instead of 30 separate small apps, I would consider including at least a few larger apps that include different layers of the various macOS APIs. For instance, instead of just a CoreData example, how about one that has a CoreData store and implements a custom data visualization view that draws on the data model? It also would be nice to see a few examples of some utility applications. For instance, how about an app that monitors a given folder for .json files and upon detecting them, parses through them and inserts the normalized data into a sqlite (or Postgres or whatever) database? Other possibilities: how to implement a table view that allows the rows to be dragged to reorder them? A rudimentary Twitter/Slack client, a simple drawing app, etc. 
When an infix operator is overloaded the 2 parameters are almost universally the left and right objects on either side of the operator. So Apple has just streamlined the definition using the underscore to abstract away the left and right because they are considered standard enough to not be explicitly written out. You just need to remember that it's an overloaded operator and that you don't call it like a function and in that light, this is a super clean function stub :) From the Swift docs, they talk about overloading operators about 3/4 of the way down the page. Here's the link if you're further curious: https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/AdvancedOperators.html#//apple_ref/doc/uid/TP40014097-CH27-ID28
Treating every string as UTF8 will render it impossible to, say, reverse a string of foreign characters (in a way a human would expect).
There are no packages to begin with. You start with $0.00 and as you need additional resources such as file space, security roles, business logic execution time, etc, you buy them and pay only for what you're using. Is that really that confusing? ))
Unless you're making the app open source, I don't think this post is very relevant to this subreddit.
No, most of the operating system frameworks are still written in Objective-C, and they still work with Swift 3. An unnamed framework is giving "strange behavior" -- this is too vague for anyone to debug for you.
When as the last time you needed backwards text?
I did not specify the framework because this is more of a general question I was hoping to get some feedback on. If the answer you provided, which is no, applies to all frameworks then it covers my use case. Thanks.
Yeah, this is just SO MUCH BETTER than seeing 'nil' in the string. I'm finding optionals induce additional cognitive load while programming (they make my head tired) while producing software that is no more (and possibly less) reliable than just having no-op nils. I consider them to be a failed concept and no better at all than, say, C++ where you have to test your pointers before using them (which just adds clutter to the code I think).
Yeah Swift 3 was suppose to be backwards compatible, but they could not deliver that in this update. They have promised to deliver this in Swift 4.0 and versions onward. You have to realize Swift is still a fairly new language. Should you have written it in Objective C, maybe but like you said Objective C is ugly as hell. I do agree that if it continues on people would lose interest in the language and will only pick it up once it is fully stable and mature. 
wow this is cool, is it much to ask to have a tutorial or a video where you explain the process of how you did it ? or what can be done?
I really hope this will be fine going forward.
I'm a newbie swift developer who has received help from the community, and seeing one of our own actually finish an app can be encouraging for other members of the community. Also, it is the norm in iOSProgramming to post "check out my app" style posts, probably for the same reason. It also opens me up to community members as someone who knows how to do the various things my app does and maybe they can talk to me about it. Or if they beta test my app, I will test theirs, and there is a networking opportunity in there which is also part of this sub. I also mention that I will be open sourcing it in the future.
I believe I have the other ways working, but I would really like to get some practice using cocoapods. Any tips for a first timer setting up Kingfisher? The more ways I can learn to tackle situations, the better.
There are a few websites out there that will generate Swift source code from an API request but they tend not to be very "Swifty". Also, they often make every property optional. I was frustrated with this so I made my own library that sits inline in your code wherever you parse json data. JSONSuggest does quite a few things... 1) parse json data and generate the models necessary to deserialize it with only **ONE LINE OF CODE** 2) generate multiple model files or one single Models.swift file 3) add json de/serialization to the model so that you can easily convert json to model and vice versa Please consider looking it over. I hope it saves you a lot of time (it has me so far). I will be adding unit tests and (possibly) a cocoapod in the future. This tool is meant to be used during development so I'm still not convinced that a cocoapod is really necessary. P.S. It also give you some cool stats about how much time it thinks it has saved you.
I'll let you read the Github for this one mostly. It spells out why I made this library in lieu of simply using NSNotificationCenter. I hope you will find this library useful. I'm really interested to gather feedback for this one. I will be making an example project shortly.
That page says it has been updated to Swift version 3. Are you using Swift version 3? In order for us to know if you are running it on the wrong Xcode version we kinda sorta hafta know like what version of xcode you are running. Please copy and paste the exact error messages, I'm afraid 'destination error' is too vague and 'i get so many code errors' is not something anyone can address other than with sympathy, and I do extend my sympathy, but sympathy is not going to sort your problems - only some concrete information (the action you perform, and the exact response from the compiler) is going to get your problem solved.
The Swift compiler still has some significant bugs. Even worse, the 2-&gt;3 migration tool in some cases generates bad code, or changes the names of methods to different methods that do completely different things (!). It's possible something in his program got changed in an unexpected way, or got updated to an expression which should be invalid but instead hits a corner case where the Swift compiler mistakenly allows it, and generates bad object code.
thank you so much for the explanation!
I agree with you. However, there's also a downside to the current model. If you have two indices that belong to a string, there's no very elegant way to iterate over the range formed by those two indices. `someStartIndex ..&lt; someEndIndex` is no longer a sequence in the new model, it's only a range. The most straight-forward way to do this is probably something like for index in string[someStartIndex ..&lt; someEndIndex].characters.indices { /* ... */ }
Yikes
I'd love to join as well! (Already submitted a request)
I provide this as constructive criticism, not as a remark on the quality of the project. I say that because I have respect for anyone that opens their code for scrutiny and I have an appreciation of the problem at hand. I also realize that I'm a 15 year Cocoa veteran, so I may have some bias. &gt; Easier to understand syntax This is highly debatable. I don't particular find the syntax more understandable. In the first example (`speak("General", command:"Log", message:json)`), I can't readily read that and get an understanding of what is actually going on. What is that first parameter? Why is `command` a string? What is `message` a `[String:AnyObject]?` as indicated in the comment? In comparison, `NSNotificationCenter` provides three methods of increasing complexity that are relatively succinct in their goals and rather unambiguous in their design. Also, the design of `speakTo` feels questionable. In the example (`speakTo("LoginViewController", messageType: "General", command: "DoSomething", message: nil)`), the first parameter is a string. Why not a class? Strings are potentially faulty due to typos and lack of compiler-provided type safety. Furthermore, is there a large use case for the *sender* to limit where messages go? Generally, for notification systems, the *receiver* is registering the callback and should provide that functionality. This feels mis-designed. &gt; Can send messages to one instance, an certain type of object, or all objects I don't understand why we'd want to send to *one* instance. If that's the case, why not perform a method call? Again, the "type" of objects has a poorly implemented API, in my opinion. The type is knowable, so we should use it instead of a string. I also don't know why the sender is making that determination. &gt; When listening for messages, you will always know the source of the message (who "said" it) That's usually available from NSNotification. At least for good senders. How is this an improvement? &gt; Unlike NSNotificationCenter, forgetting to remove observers will not cause an entire object from deallocating (my biggest complaint with NSNotificationCenter) But there's an implicit cycle here. The observers *should* clean up after themselves. Besides, this is a block-based syntax. Retain cycles might happen accidentally and you're still screwed.
Swift 3 was never supposed to be source compatible. Quiet the opposite, the idea was to introduce as much source breaking changes for the betterment of the language once and for all and have much less breakage in 4 and probably non beyond that. Stable ABI was supposed to be for 3, but did not make it. That would have allowed for linking against libraries built with other versions of Swift than the compiler.
Thanks. That's the best constructive criticism I've received on Reddit. I agree that using strings in lieu of classes is bad practice. However, I couldn't figure out how to use a class that wasn't instantiated yet. ClassName.self? I decided to be able to send in an instance of a class would be better but I couldn't give up the strings because I didn't want to lose that functionality. Any help would be greatly appreciated. I probably need to make the first argument print the argument name. That would be clearer. You can use this just like NSNotificationCenter, in that, the message can go everywhere. However, the ability to send the message to one or a group of listeners has been very beneficial to me when dealing with web sockets. There is often times when a server fires an event and I want finer control over "who" receives the data. I didn't like the all (NSNotificationCenter) or just one (delegates) that I was stuck with before. Thoughts? 
Just a thought: I want the framerate (FPS) to be easier for people to read/understand but I hear that calculating fractions from a decimal answer is not easy nor ideal. I would love some notes on that. other thoughts: ISO is has a ceil() applied to get an actual usable ISO number and Fstop is set to round to hundredths place to allow for more attainable F stop settings.
Depends if the app developer utilizes Siri commands. 
https://github.com/Alamofire/AlamofireImage
Plist is essentially an XML file. This is pretty much exactly what they were created for. 
Why not use JSON instead of plist? It is easier to write can be easily duplicated for multiple lines. You could possibly even automate the creation of each ship if you wanted.
Wouldn't you be defining the schema in those cases, allowing you to enforce the consistency you want? Plus, JSON and XML both have ways of storing collections... And iirc, .plist files utilize XML beneath the surface. Edit: [.plist uses XML confirmed.](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/PropertyLists/UnderstandXMLPlist/UnderstandXMLPlist.html)
Yes, you can do that. There is no solution for what to build first. Personally, I prefer using some mock data initially if don't know what the data model will look like right away. But if you already know what the app will look like there's nothing wrong with building the Api first. However you might find out if you sketch the app just on paper and draw the flow of all requests, that you will need more endpoints than you actually thought of in the first place. That's how it is for me sometimes.
It's just that, AFAIK, if you use that range to get the substring directly, it's O(1). If you need to get the CharacterView indices, you can use the `firstMatch` method in string. Hopefully the following helps: import Foundation let text = "The rain is Spain falls mainly on the plain" let pattern = "[\\w][\\w]?ain" do { let substrings: [String] let regex = try! NSRegularExpression(pattern: pattern, options: [.caseInsensitive]) let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) substrings = matches.map { match in let start = text.utf16.index(text.utf16.startIndex, offsetBy: match.range.location) let end = text.utf16.index(start, offsetBy: match.range.length) return String(text.utf16[start ..&lt; end])! } } do { var substrings = [String]() var searchRange = text.startIndex ..&lt; text.endIndex while let range = text.range(of: pattern, options: .regularExpression, range: searchRange) { searchRange = range.upperBound ..&lt; searchRange.upperBound substrings.append(text[range]) } } I'm relatively sure that all the subscript operations here are O(1), as well as the UTF16 indices being calculated.
Thanks
Of course.
what do you mean? you mean the characteristic's UUID?
Thanks for your reply! I could really do with a more experienced opinion. I am using the latest public version of XCode, not any paid developer beta. The destination error is no big deal, what it is is that XCode is trying to build for a device connected to my mac. But i wanted to build it for the simulator and didnt want to connect any device for now. The thing was i was unable to choose a simulator untill i assigned my developer account(not paid) to the project. I am hoping this is not the cause of my issues. --- I can't give you the response from the compiler without giving you a wall of text. There are about 190 syntax errors. It feels to me like i have the wrong version of swift, but it is absolutely up to date, i checked. If it is the latest version of XCode, it should be able to compile old code right? If it code for a newer, unreleased version of XCode, does that mean i need a paid account to explore the demo?
I downloaded the project from the link you gave in your original post, loaded it into Xcode Version 8.0 (8A218a), chose DemoBots (iOS), simulator iPhone 7 Plus (which was the default when I first loaded the project). I compiled/ran it and it compiled successfully and ran, I could interact with it and stuff. I didn't do anything other than that; in particular I didn't fiddle with certificates or change _any_ build settings. I do have a paid developer account, but I don't think that has anything to do with any problems you are having because I didn't change the certificate settings from whatever they were in the project as downloaded from Apple. So, that's proof that it works with the latest released version of Xcode. I would suggest you download a clean copy of the project and put it in another directory and try that. Also, check your Xcode version against the one I am using (which is the latest _released_ version). Use the same scheme/target/simulator as I did. If all of that doesn't work, I'm not sure what that means...possibly a bad Xcode install (highly unlikely but it is possible). Maybe you could try downloading another Apple project which uses Swift 3 and see if you can build it. If you reach dead ends, then really the only way anyone can help is by knowing the _exact_ error you are getting. You don't have to paste EVERY error; in fact, I'm very much against that. You should just post the _first_ error (just make sure that if it is a multi-line error, you post all lines ;-)). Many times solving one error clears up a bunch of others, so it is best to work through them methodically, one at a time, from first to last.
Personally, I would wait for a newer tutorial on Swift 3 to come out as the update from 2 to 3 came with some HUGE changes. I have developed multiple apps with Swift and since the update, I have been working very hard to fix all the errors. 
That title is incredibly misleading. There absolutely is a backend involved.
I really enjoy using Vapor, but it's not ready for production environments quite yet. Give it a few months, give it a few dozen test projects and we'll have ironed out a many of the bugs. It's remarkably capable, though, for its age.
https://github.com/brightdigit/speculid I'm working on my first open source mac app. It builds image assets for Xcode projects from other graphic files (svg, jpeg, png, etc...). Typically rather than exporting them in illustrator or photoshop and including every graphic file size in source control, I run scripts to render them as a build phase in Xcode. I migrated that over to swift mac app which reads the specs from the `contents.json` file as well as a two line `json` file which assigns the graphic to the Image Set. I would love any feedback other developers may have.
Good question. Both offer different implementations of a FFNN. I have added logic for multiple hidden layers that can be accessed with little code.
I don't think filter() has changed. It's just that Foundation types are no longer bridged, so you're not getting Array functionality automatically.
i see the problem. My XCode is version 7 but it the mac app store refuses to update my XCode to version 8. it always show everything as up to date. i went to XCode's app page and instead of "update" it says "get" i am not sure if the code will run. but at least something that can be fixed. Do you have any idea why XCode would not update?
Can you see how this is less than helpful? 1\. "Possible but not easy" doesn't really give me any clue what to do, or how it should work. - Carthage builds from any shared scheme, but SPM documentation says nothing about this. Do I need to fork each of my dependencies and add a Package.swift file myself? - It says "By convention, a package includes any source files located in the Sources/ directory", but it doesn't mention if there's any way to override this. Do I need to re-structure the source tree of each of my dependencies, too? - How can I pick a branch? I can't find any documentation for PackageDescription beyond "majorVersion" so I looked in [the sources](https://github.com/apple/swift-package-manager/tree/master/Sources/PackageDescription) but I don't see anything. More forking? Is this what you mean by "it's not an easily transition" [sic]? Do I basically need to fork each of my dependencies and maintain the Swift-packaged versions of everything myself? 2\. You linked to the same gitignore I mentioned in my first paragraph, but it doesn't mention what's added in the first place. Can I use submodules? Or is the idea that since I have to fork everything anyway that there's no point? If there are truly "tons of tutorials online" that discussed these things, I would love to see even just one, because so far I have found zero.
It's great if it works for you, but the reasons don't seem very compelling to me. - It's easier for you, because you wrote it. :-) I don't love NSNotificationCenter's API but it's (slowly) improving and it's very well documented. I don't really get why this is easier. It seems to throw "pub" and "sub" in the same place (into all your classes, via extension), even though they're very different. - Hmm, interesting. It's true NSNC isn't really designed for that, but I've never needed to do that. The whole point of notifications, I thought, is that you send them off into the ether, and it's up to the listeners to decide what's relevant. Can you give an example of when this would be useful? - It is slightly annoying that NSN doesn't have as much info as I'd like, but I always just add things like this to the `userdata`. - So remember to remove your listeners when you're done. ;-) I recognize this is kind of like saying "remember to release" when ARC was new. It feels different to me, but I'm not sure I can explain why. 
Plists can be in any of three formats: XML, JSON, or binary. The system calls to read plist files will work with any of them. Use the command line plutil (part of the Apple developer tools) to convert between the three. 
The way I'm looking at it is pretty much as you described. I'm going to just learn the basics and get a sound understanding of the language and then I can read documentation and what not to figure out what's new. 
If I get this I just go to Xcode and hit download rather than doing a check for updates.
I emailed Bogdan and got my Dash 2 licence within hours. I hadn't even noticed I hadn't upgraded because v2 was so good to begin with.
You could always add your own function import Foundation extension NSMutableArray { func filter(_ block: @escaping (Any) -&gt; Bool) { let predicate = NSPredicate { object, bindings in return block(object) } filter(using: predicate) } } let x = NSMutableArray(array: [1, 2, 3, 4]) // Filter all values less than or equal to 2 x.filter { object in guard let object = object as? Int else { return false } return object &gt; 2 } print(x) // prints (3, 4)
You can verify this by looking at the stack in the [debugger](http://i.imgur.com/0EWotp0.png) 
[removed]
You mean a value type? Also, `Array` isn't a class but a struct, as classes are reference types per definition. :)
You could still cast the array to a Swift `Array`. I think this might be an O(1) operation, but someone else would have to confirm that.
See [SE-0072](https://github.com/apple/swift-evolution/blob/9cf2685293108ea3efcbebb7ee6a8618b83d4a90/proposals/0072-eliminate-implicit-bridging-conversions.md).
You were probably using `Array` before. You just didn't realize it, because Swift 2 implicitly bridged Objective-C and Swift types.
Yeah its missing some key documentation. You might find the [SwiftPM slack](http://swift-package-manager.herokuapp.com) helpful. The answers to your questions... &gt;Carthage builds from any shared scheme, but SPM documentation says nothing about this. Do I need to fork each of my dependencies and add a Package.swift file myself? Yes. The swift package manager is not tied to Xcode _at all_, since it is not available on Linux. All your dependencies need to have a package.swift and a sources folder. They must follow semver (major.minor.bug ie 1.3.2) for their tags. &gt;It says "By convention, a package includes any source files located in the Sources/ directory", but it doesn't mention if there's any way to override this. Do I need to re-structure the source tree of each of my dependencies, too? No way to overwrite this - all your sources must be in a folder named `Sources`. You can either have all your swift files directly in `Sources/`, or have multiple targets inside the `Sources` directory like `Sources/Utils`, `Sources/App` (where the targets can import each other). An example of a complicated package.swift can be found [here](https://github.com/Zewo/Zewo/blob/master/Package.swift). &gt;How can I pick a branch? I can't find any documentation for PackageDescription beyond "majorVersion" so I looked in the sources[1] but I don't see anything. More forking? Support for branches has been on their radar for a very long time now (&gt;6 months), but it is yet to be implemented. The library can tag a commit on a different branch (achieving the same thing), but otherwise you need to fork. &gt;Is this what you mean by "it's not an easily transition" [sic]? It _can_ be an easy transition, depending on how your project is set up. If you just have a `ProjectName/*.swift` and an Xcode project, all you need to do is move all the sources to `Sources` and add a package.swift. If you have dependencies which all support SwiftPM, add those to the package.swift. If not, then it starts to turn into a lot of work. &gt; Do I basically need to fork each of my dependencies and maintain the Swift-packaged versions of everything myself? That's an option. Alternatively, submit pr's updating the package layout and wait for them to get merged. On the bright side, since both Carthage and Cocoapods can build alongside SwiftPM, its very likely to get merged. &gt;2. You linked to the same gitignore I mentioned in my first paragraph, but it doesn't mention what's added in the first place. Can I use submodules? Or is the idea that since I have to fork everything anyway that there's no point? That's the `gitignore` file that is generated by `swift package init`. You don't have to follow their convention, but it is part of the ideology of the package manager that you do. Both the Packages and Xcode project are managed/generated by the package manager, so it is their intention that you do not modify either. Hope that helped :)
Workflow's great, and I love how much is possible with it. That said, there's still a few limitations which need to be solved: * Detecting and launching any app, not just those with URL schemes. * UI scripting. * Security - global URL schemes are a security issue, since any app could potentially make use of it, without being given explicit permission. The user would have to explicitly run a script to make use of an extension point. Also, while I trust Workflow, they're still a third party with potential access to everything Workflow handles. * Global availability, not just from apps with action buttons. Control Center services menu would be ideal. Currently, launching a workflow is a long process - tap action button (load), tap Workflow (load), tap service (load). * Programming language support - for more complicated logic this is still pretty vital, and Apple seems to place restrictions on this for App Store apps.
try `let d = rawPointer.assumingMemoryBound( to: UInt8.self )`
I'm on my mobile but look into using a delegate to do a callback of events in your view controller. 
You have 3 tasks, I suggest tackling them separately. Press button, do something Presumably you have a custom UITableViewCell subclass? If not, make one. On you button, make the cell subclass the target and connect it to an action in the cell subclass. When the user presses the button, you should now run the action in the cell. However, you probably want to execute a function in the view controller. So, make the view controller a delegate of the cell. Be sure to set the delegate when you create the cell. Then in the action for the button, execute a method in the delegate. So, now you are executing a method in the view controller, what should it do. Rearrange the array. Not much I can add here, rearrange the array in the way that you want it to be arranged. Get the table view to recognise the rearranged array. When the rearranging is finished, tell the tableview to `reloadData`. edited to fix formatting
What's the difference here?
Behavior is undefined if the original type of the bytes is not what you're reading them as, unless they're uninitialized (all zeros) or are already bound to that type. That said, since UInt8 is essentially the base type, it doesn't really matter in this case (but its best to be consistent anyway).
I figured out what it's doing. Supposed I have the following regex ":\\\d\\d\\\sam" to be replaced with "A.M."; This will match ":34 am" and change it to "A.M." What I figured using lookahead/lookbehind, etc. means that it will match but not replace it. Supposed I have the following regex "(?!(:\\\d\\\d\\\s))am" to be replaced with "A.M." This will match ":34 am" but it will change it to ":34 A.M." So basically not replacing the match inside the group. It doesn't make much sense from what I read on a Stack overflow question as someone said it will find a match only if the grouping following by the ?! Is not found... which contradicts my regex, which works right. But I also have another regex example in my code where I use ?! But it actually ignores the search inside the grouping. Which is confusing because I have 2 regex doing the opposite even though they both use ?!. I did run into something weird. Using the regex I mentioned in the body of my post, it will match ":34am" despite the fact no space being in between the digit and "a".
Thanks so much, how would I make the view controller a delegate, I was trying that but I couldn't get it to work.
thx. I'll look into this
Here's a playground that demos this pattern: //: Playground - noun: a place where people can play import UIKit import PlaygroundSupport PlaygroundPage.current.needsIndefiniteExecution = true protocol MyTableViewCellDelegate: class { func buttonPressed(in cell: MyTableViewCell) } class MyTableViewCell: UITableViewCell { // MARK: - Properties weak var delegate: MyTableViewCellDelegate? static var reusableIdentifier: String { return String(describing: self) } // MARK: - Init required init?(coder aDecoder: NSCoder) { super.init(coder: aDecoder) embedButton() } override init(style: UITableViewCellStyle, reuseIdentifier: String?) { super.init(style: style, reuseIdentifier: reuseIdentifier) embedButton() } // MARK: - Instance Methods func embedButton() { let button = UIButton(type: .roundedRect) button.setTitle("Press Me", for: .normal) button.addTarget(self, action: #selector(buttonPressed(_:)), for: .touchUpInside) button.translatesAutoresizingMaskIntoConstraints = false contentView.addSubview(button) button.centerXAnchor.constraint(equalTo: contentView.centerXAnchor).isActive = true button.centerYAnchor.constraint(equalTo: contentView.centerYAnchor).isActive = true } func buttonPressed(_ sender: UIButton) { delegate?.buttonPressed(in: self) } } class MyTableViewController: UITableViewController { // MARK: Overrides override func viewDidLoad() { super.viewDidLoad() setupTableView() } override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return 10 } override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print("Cell selected at index path \(indexPath.section), \(indexPath.row).") tableView.deselectRow(at: indexPath, animated: true) } override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let cell = tableView.dequeueReusableCell(withIdentifier: MyTableViewCell.reusableIdentifier, for: indexPath) as! MyTableViewCell cell.delegate = self return cell } // MARK: - Instance Methods func setupTableView() { tableView.register(MyTableViewCell.self, forCellReuseIdentifier: MyTableViewCell.reusableIdentifier) } } extension MyTableViewController: MyTableViewCellDelegate { func buttonPressed(in cell: MyTableViewCell) { if let indexPath = tableView.indexPath(for: cell) { print("Cell button pressed at index path \(indexPath.section), \(indexPath.row).") } } } let controller = MyTableViewController(style: .plain) controller.view.frame = CGRect(x: 0.0, y: 0.0, width: 320.0, height: 480.0) PlaygroundPage.current.liveView = controller.view 
Okay cool. I've only really used sockets in networking classes but I'm open to learning new ideas. I'll check those and REST out. Thanks for the input.
The two best looking libraries I've seen are [Starscream](https://github.com/daltoniam/starscream) and [SocketRocket](https://github.com/facebook/SocketRocket).
How does one go about creating a REST server?
Can you use another syncing and cloud storage provide than iCloud? Dropbox and Google Drive are my preferred ones.
That's the one I was looking at cause it comes up first when you do a google search. I just can't seem to get it installed correctly. I've downloaded the zip and put the source folder in my project, but when I try to follow examples, I get errors. The first being that there is "No such module 'SocketIO'" on the first import statement. Am I missing a step?
Totally, I was just curious if there was any knowledge floating around for iCloud Drive.
I love to hear someone is open to new things! I don't know how much experience you have with Python (I don't have much) but Flask and Django are two of the most common backend/http frameworks out there. You can also try building it from scratch, but using those frameworks often saves a lot of work. 
Yep, that would definitely work but Playgrounds is setup to automatically save to iCloud Drive and I'm trying my hardest to like iCloud Drive since I already pay for space for device backups. Google Drive, for me, is far and away easier to use on iOS than Apple's own cloud sync option. Kinda silly.
Have you tried adding it to your project via CocoaPods or Carthage? There are instructions in the Readme on their GitHub page
I'll check them out this weekend! Quick question though, would those be things that run on my app, client side? Or something the server uses? Or both?
Cmd + Shift + K
It's XCode's fault, not Swift's. I had a problem with Alamofire's request function wanting me to use the version with only a URL in it.
Curious how your get upvotes and I do not for saying the same thing.
Hi everyone, at my company we're starting to build a next generation open-source e-commerce platform, and we believe it makes a lot of sense to use Swift as the main programming language given its popularity, performance, and functional spirit. We know that this won't be an easy road given that using Swift in the server is new, but that makes the quest even more interesting for us, and we think that strong initiatives like this one can benefit the overall Swift community. We'd love to get some feedback about this idea, and we're very welcoming to anyone who’s interested in helping.
You're example is not Swift, as far as I can see. You cannot check for nil by doing if (something). Also, you're using Swift like it's ObjC. The swifty way is to have an optional and do something?.doSomething. No if at all. 
&gt; if(something) {something.doSomething} This isn't even valid Swift code. Don't you want optional chaining?
Maybe you're just not doing it right?
[removed]
Bwhahaha nope, only because of lack of inspiration, not experience though.
Source? I want to see this.
That's why I'm here 
I'm using 2.3 (legacy thing - no time to update) and actually I believe from what I've been able to find it is actually if(something != nil) which is actually even more annoying to type. And actually, it ends up being if(something != nil) { something!.doSomething() } Ultimately this "feature" is going to result in the same kind of code that "added safety" that checked exceptions added to Java. By which I mean code like: try { thing.mightThrowX() } catch(X x) {} Brilliant.
The *required* keyword indicates that it's an initialiser that subclasses have to implement. As to how your class can have 2 inits, they're just different ways of initialising an object to a known and consistent state. Lots of classes have multiple inits. For example, the String class. Each of the following operations involve calling a different init: * let a = "1" * let b = String(2) * let c = String(3.1) 
Unfortunately there is no way to catch a `fatalError` (which gets called when unwrapping a nil optional). If you force unwrap a variable, your server crashes. No buts. This applies to Perfect, Kitura, and Vapor, which use a thread pool on a single process. Zewo is a _little_ bit different (one process per core, i.e. 8 processes for an 8 core machine), but the end result is the same: you need to use another program to monitor your application and restart it if it crashes. In the future this will be built into Zewo, and likely the other server-side players as well. This can all be avoided, of course, by writing idiomatic Swift that handles errors gracefully rather than crashing the application. Disclosure: Member of Zewo core team.
What does "cleaning" do?
Yup. That's it.
Sorry for the late response. For class information, you can use Swift's built-in `type(of:)` function for instances or `ClassName.self` for classes (Swift 3 and later, I think). That said, it may be worth registering instances directly and communicating with them rather than broadcasting to any listeners that match a class. Again, I think the receiver should be determining whether they care about a message more than the sender. In retrospect, It'd be safer to avoid strings altogether. Something similar to [C# delegates](https://msdn.microsoft.com/en-us/library/ms173171.aspx) might be safer and nicer to the caller.
this makes it frustrating for developers who might be completely new to swift, because there is no way for them to tell if their code is wrong or its just xcode acting up. 
Just a question that I came across while doing a simple tutorial. Why are some things like the webView and progressView properties that are initialized in viewDidLoad while things like spacer and refresh are declared and initialized in the viewDidLoad() method? If that's the case, then why aren't webView and progressView just declared in the viewDidLoad()?
When `viewDidLoad` finishes executing, the local variables go out of scope, and any objects which aren't referenced somewhere else are dropped. If you want your object to actually stick around after `viewDidLoad` returns, you need to store it in a property. The important line here is: toolbarItems = [progressButton, spacer, refresh] The property `toolbarItems` now references the objects assigned to the variables `progressButton`, `spacer`, and `refresh`, so the objects aren't dropped when those variables go out of scope.
Here's one I found a while back https://twitter.com/jalsnipe/status/701778754503385090
progressView is never used outside of viewDidLoad though so why is that a property?
So true!
`loadView` is called the first time the `UIViewController`'s `view` property is accessed. It is specifically for customization of that classes `view` and nothing else. In this case, you are changing `view` from the default `UIView` to a `WKWebView`. `viewDidLoad` is for more general setup not directly tied to `view`.
ive had tons of problems that required something like restarting xcode. i constantly clean as a result of this
I've made my own `Date` class before and had to use the full `Foundation.Date` to not get them confused.
I had this exact same problem and then I found a Date struct I created in one of my several Swift files after lots of investigation
Project Navigator in Fullscreen mode (not sure if this has been remedied with 8.1). IB Media library in Utilities (top insets). I wouldn't be surprised if there is more.
This. WatchDog works wonders. I never have issues like these anymore
The *shell* function works for me when running from the command-line as a script, when I pass it a simple *echo* command. Are you sure that the directory that you're trying to cd to exists, and that it's reachable from within your app? It looks to me like it might be a security problem. There may be some sandboxing happening.
I spent several years doing just ObjC on the daily, and about two years ago, right after Swift was announced, shifted roles to something else. I'd say I was more than comfortable with ObjC at the time and definitely knew my way around. I've recently picked up a side project that I'm doing in Swift (at Version 3), and after I got used to some of its quirks compared to ObjC, I think I'm definitely more productive now than I was. Not having to manage header files is huge, I'm really starting to dig Optionals over the nil checks I used to, and just generally am enjoying writing it more. They even finally figured out the whole alignment thing with commas that Xcode would do with colons. Obviously you can disagree, but I think Swift is pretty solid. 
Ensures compiling from clean state on next run. 
At some point are you passing a nil string to the Todo init causing it to save as nil in the TodoController's todo variable? Put a breakpoint in the Todo init and see if it is saved before the rewind is called. Also you could add a didSet break or print to the todo var in the TodoController.
Still no introspection. For instance, you can't write something like this: A class that can build a SQLite table that matches its properties definitions and provides persistence for any property type. Why? Because the runtime is still half baked. Also NSProxy is still impossible to write and I use that quite a lot. /* Property Introspection Value types are store directly. These types are listed below. Object types that are also stored as values include NSString, NSURL, NSUUID, NSData, and NSDate. These are stored as TEXT in the database. It is probably best to just store NSURL and NSUUID as NSString in your data object because that's how they are going to come back. NSDate is handled as a special case. */ static NSString * const CharTypeEncoding = @"c"; static NSString * const IntTypeEncoding = @"i"; static NSString * const ShortTypeEncoding = @"s"; static NSString * const LongTypeEncoding = @"l"; static NSString * const LongLongTypeEncoding = @"q"; static NSString * const UnsignedCharTypeEncoding = @"C"; static NSString * const UnsignedIntTypeEncoding = @"I"; static NSString * const UnsignedShortTypeEncoding = @"S"; static NSString * const UnsignedLongTypeEncoding = @"L"; static NSString * const UnsignedLongLongTypeEncoding = @"Q"; static NSString * const FloatTypeEncoding = @"f"; static NSString * const DoubleTypeEncoding = @"d"; static NSString * const BoolTypeEncoding = @"B"; static NSString * const StructTypeEncoding = @"{"; @interface IPPropertyDefinition : NSObject -initWithName:(NSString*)name property:(objc_property_t)property; @property (strong, nonatomic) NSString* name; @property (readonly, getter=isReadOnly) BOOL readOnly; @property (readonly, getter=isCopy) BOOL copy; @property (readonly, getter=isRetained) BOOL retained; @property (readonly, getter=isNonAtomic) BOOL nonAtomic; @property (readonly) NSString* getterName; @property (readonly) NSString* setterName; @property (readonly, getter=isDynamic) BOOL dynamic; @property (readonly, getter=isWeak) BOOL weak; @property (strong, nonatomic) NSString* type; @property (readonly) BOOL isStruct; @property (strong, nonatomic) NSArray* attributes; -(NSString*) getPropertyType:(objc_property_t) property; /* R The property is read-only (readonly). C The property is a copy of the value last assigned (copy). &amp; The property is a reference to the value last assigned (retain). N The property is non-atomic (nonatomic). G&lt;name&gt; The property defines a custom getter selector name. The name follows the G (for example, GcustomGetter,). S&lt;name&gt; The property defines a custom setter selector name. The name follows the S (for example, ScustomSetter:,). D The property is dynamic (@dynamic). W The property is a weak reference (__weak). P The property can be garbage collected */ @end @implementation IPPropertyDefinition -initWithName:(NSString*)name property:(objc_property_t)property { if(self = [super init]) { self.name = name; self.type = [self getPropertyType:property]; NSString* attributes = [NSString stringWithUTF8String:property_getAttributes(property)]; self.attributes = [attributes componentsSeparatedByString:@","]; } return self; } -(NSString*) getPropertyType:(objc_property_t) property; { const char *attributes = property_getAttributes(property); char buffer[1 + strlen(attributes)]; strcpy(buffer, attributes); char *state = buffer, *attribute; while ((attribute = strsep(&amp;state, ",")) != NULL) { if(attribute[0] == 'T' &amp;&amp; attribute[1] == '^' &amp;&amp; attribute[2] != '@') { return [NSString stringWithFormat: @"%c*",attribute[2]]; } if(attribute[0] == 'T' &amp;&amp; attribute[1] == '{') { return StructTypeEncoding; } if (attribute[0] == 'T' &amp;&amp; attribute[1] != '@') { return [[NSString alloc] initWithBytes:attribute + 1 length:strlen(attribute) - 1 encoding:NSASCIIStringEncoding]; } if (attribute[0] == 'T' &amp;&amp; attribute[1] == '@' &amp;&amp; strlen(attribute) == 2) { return @"id"; //id type } else if (attribute[0] == 'T' &amp;&amp; attribute[1] == '@') { return [[NSString alloc] initWithBytes:attribute + 3 length:strlen(attribute) - 4 encoding:NSASCIIStringEncoding]; } } return @""; } -(BOOL)isReadOnly { return [self.attributes indexOfObject:@"R"] != NSNotFound; } -(BOOL)isCopy { return [self.attributes indexOfObject:@"C"] != NSNotFound; } -(BOOL)isRetained { return [self.attributes indexOfObject:@"&amp;"] != NSNotFound; } -(BOOL)isNonAtomic { return [self.attributes indexOfObject:@"N"] != NSNotFound; } -(NSString*)getterName { NSString* getter = [self.attributes detect:^BOOL(NSString* s) { return [s hasPrefix:@"G"]; }]; if(getter) { return [getter substringFromIndex:1]; } return [self.attributes[0] substringFromIndex:1]; } -(NSString*)setterName { NSString* setter = [self.attributes detect:^BOOL(NSString* s) { return [s hasPrefix:@"S"]; }]; if(setter) { return [setter substringFromIndex:1]; } return [@"set" stringByAppendingString:[[self.attributes[0] substringFromIndex:1]capitalizedString]]; } -(BOOL)isDynamic { return [self.attributes indexOfObject:@"D"] != NSNotFound; } -(BOOL)isWeak { return [self.attributes indexOfObject:@"W"] != NSNotFound; } -(BOOL)isStrong { return !self.isWeak; } -(BOOL)isGarbageCollected { return [self.attributes indexOfObject:@"P"] != NSNotFound; } -(NSString*)fieldName { return [self.attributes.lastObject substringFromIndex:1]; } -(BOOL)isStruct { return [self.attributes.lastObject hasPrefix:@"{"]; } @end 
I used to do C++ and I was really really good at it. But it left me exhausted and drained at the end of the day because I was juggling all this type information in my head and trying to keep everything type compatible. The cognitive load was huge. Then I got a gig doing Smalltalk and I just went nuts. I built so many things so fast in Smalltalk that I simply would never have gotten done ever in C++. I went from Smalltalk to Java and felt the same cognitive load come back. Java is a terribly unproductive language. Then Objective C and it all got easy again. Swift feels like going back to C++ or Java. Even more annoyingly, type inference is a double edged sword. I understand removing repetition. But in a lot of cases now, you can't even tell what is likely to be stored in a given variable because they've also removed the type name from the selector - something that is very useful when you can have variables that can store any type. This is right off the swift-evolution github. They want to change: let content = listItemView.text.stringByTrimmingCharactersInSet( NSCharacterSet.whitespaceAndNewlineCharacterSet()) which tells what content is going to be: *string* and whats going to happen *ByTrimmingCharacters* and the characters are provided how? *InSet* I name my methods in every other language I write in using this style of naming because it is self documenting. Even in Java I would write thing.stringByTrimmingCharactersInSet(aCharacterSet). Its good naming. Swift proposes this: let content = listItemView.text.trimming(.whitespaceAndNewlines) The return type is unexpressed. The action is cryptic. This is a bad naming style. Its extra bad because type inference, while intended to eliminated redundant naming of types, eliminates even a single naming of type. This is a bad direction.
This is a strange approach to deleting files. At best, you've got a race condition, and a no-op test that only works for some filenames. Do you have a file/folder called "/Users/Chris/Documents/College Someotherword"?
Yes the folder does exist. 
Have you looked at Syncano yet? (super similar to Parse) https://syncano.io It may be the solution you're looking for, where you definitely don't need to hire any backend guy to develop the API. It's kinda like build your backend with building blocks, plus complexity if you need it. _Developer at Syncano_
Learning perfect framework :)
Making an app to view, search, and chat about CocoaPods! Going to be posting to Test Flight this weekend :)
That's your problem. Process (or env(1)) isn't going to re-parse your args. You can't just slam strings in there.
Subreddit policy suggestion: don't take a photograph of your computer, if you want a code review. This is just painful to look at.
Can you add me? tarvomaesepp@gmail.com. Seems awesome :)
Some of them I could stand to get rid of, but the nature of the app doesn't allow too much. AWS, Facebook, AlamoFire, XWebView, MBProgressHUD, and a few others are there to stay. 
Certainly. Will add when I launch this weekend! 
MBProgressBar I could do, I'm also using RazzleDazzle and that can go...AlamoFire would take quite a while at this point. I have it reasonably wrapped up, but there are a lot of web request, that would be a hard sell to rewrite since it is working very well. Plus, that is already good with Swift 3, so upgrading that is easy.
In my experience, the longer you wait, the *easier* it becomes. If you've got libraries that don't support Swift 3 yet (and with 20, that's almost a certainty!), it's going to be a lot of work to replace / patch / work around that. As these libraries upgrade to support Swift 3, upgrading your app will get easier. I *wish* I could just drop libraries that don't support Swift 3, but that's not practical. I added these libraries in the first place because (a) I need the functionality they offer, and (b) they were the best ones available. Those facts haven't changed.
&gt; Crashes in a statically typed programming language are very rare. That sounds exactly backwards from my experience. I'd be curious where you got this tidbit. Crashing any of my Objective-C apps is basically impossible -- even sending a message to nil is a no-op. In Ruby or Python or on the JVM, crashes are extremely rare, and indicate a bug in the runtime (which tends to get fixed immediately). At the application level, they've got exceptions, which are caught by the request handler. C and C++ programs tend to be easy to crash, much to the chagrin of the entire software industry. Even Swift is easy to crash: one misplaced "!" can bring down your entire process. The only real answer I've heard (e.g., about 2 inches above this comment) is some variation of "so don't write bugs" -- which is not helpful, and evidence to me that they are in fact easier to crash. Yes, I always *try* to write good code. I'd rather walk on a balance beam over pillows than over lava, too, and not because I'm bad at walking. Dynamic languages have the whole environment available at runtime, which is why they tend to be slower, but also means they're designed to deal with any kind of error at any time. Static languages put half the language in the compiler, only, so if you happen to hit one of those kinds of errors at runtime, the functionality simply doesn't exist to deal with them. Dereferencing a null pointer, for example, is basically catastrophic in most static languages (including Swift), because it's been compiled down to "blindly follow this memory address", while in a dynamic language it's just another catchable exception, because the runtime interprets it as "here's a reference (maybe), so figure out what it is and what we should do with it".
Two things this week, tooling related: - [Vim plugin for those awful times when you're editing/merging pbxproj files](https://github.com/cfdrake/vim-pbxproj) - [Swift library for loading in files via the XDG Base Directory standard](https://github.com/cfdrake/SwiftXDG)
I'm sure there's probably a better way to do it, maybe with formatting, but you can simply loop through the characters like this: let originalString = "xxxooxxxxoooooooxxooxxxoxoxxxxxo" var noRepeats = "" var lastChar: Character = "\0" for char in originalString.characters { if char != lastChar { noRepeats.append(char) } lastChar = char } edit: fix code formatting
How would I go about executing the commands properly? 
The problem with this API is that you have to know a bit about how Objective-C works for it to make any sense. A [selector](https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Selector.html) is a value that names a particular Objective-C method. A lot of Cocoa APIs use a combination of a target and a selector to call a method upon (technically, "send a message to") a particular object*. In Objective-C, a selector is conceptually just a string containing the method name, and as such could be constructed out of a string. Selectors name methods without any regard to the object the method is called upon. Because they are an Objective-C construct, selectors are **not** equivalent to or interchangeable with Swift's function values (your first example). However, Swift added a way to take a function value and convert it into a selector, which is what the weird "#selector()" syntax does. You'll only ever need to work with selectors in the context of Objective-C (mostly Cocoa and Foundation) APIs. As for the method parameters, here's a brief explanation. If a parameter only has one name (like "action"), that name is used both inside the definition of the method as a variable name, as well as the label when you call that method. func foo(x: Int) { print(x) } foo(x: 123) If a parameter has two names (like "for controlEvents"), the first one is the label you use for that parameter when you call the method, and the second one is what's used inside the definition of the method. func foo(with x: Int) { print(x) } foo(with: 123) If a parameter has an underscore and then a name (like "_ target"), you don't use any label for that parameter when you call the method, and the name is what's used internally: func foo(_ x: Int) { print(x) } foo(123) ----- * You can think of the selector as the message, and the target as the thing to send the message to. For example, in your example you are telling the API to send the message "myFunctionToCall" (selector) to the Objective-C object "self" (your target) whenever your button is tapped, which is a fancy way of saying "call the method named myFunctionToCall on self when the user taps the button".
Been trying to do some swift scripting for MacOS. Can't find much on the networking API. 
Those would be server side. On your app you would use URLSession to communicate with the server. Note: Not Swift 3 you would use NSURLSession - in case you have trouble finding documentation.
"socket.io" might not be what you're looking for. It's primarily intended for websockets in a browser, and may require a special server-side component. I can't speak for the Swift client (I've never used it), but I would speculate that it's just mimicking their front-end web component. I don't know if it will work with plain-old TCP sockets.
Ok, that's what I was thinking.
URLSession is mostly implemented, but I wouldn't use it yet. You can get it to work but you'll still get errors for random requests. Right now your only choice is a third-party HTTP client - IBM has one, Vapor has one, and so do several other people.
this a lot , hopefully this will help . xoxo 
Not even a week ago. https://www.reddit.com/r/swift/comments/55q5hx/what_is_the_best_way_to_delete_repetitive/ Looks like someone is a bit late on their homework. 
Swift itself doesn't have any support for databases. They're not a language feature. People have built frameworks for them though. I would look into Core Data, which is Apple's own offering for managed object databases in Swift. If you want to move outside of Apple platforms, you can explore Realm, which is really easy to use, or you can search for database bindings on Google. Searching something like "MySQL Swift binding" or something similar will turn up plenty of results. Good luck!
Database support isn't the responsibility of the language itself. The language includes things like the capability to define functions and variables. I don't think I know of any languages that have database features built in. If you have to write import to use database features, they're not a language feature. Databases are almost always included in frameworks or libraries that you import.
(this is going to be a bit of a splitting hairs kind of explanation, so hang on...) Very few _languages_ actually include database support. If Swift was to support MySQL, then someone using Postgres or Sqlite would say, 'hey, what about...?' Then once Swift supported all the SQLy style databases, someone would say, yes but what about MongoDB or Cassandra or etc. And suddenly there's an explosion of hundreds of methods the Swift developers need to keep up to date and bug-free. OTOH, some standard libraries which come with languages have database support. I'm not sure, but I think this might be the case with PHP, maybe Ruby and Python? Here again, I'm assuming the Swift developers would want to have the standard library small-ish and highly general and useful to _everyone_ using Swift. Also, there's the problem that sometimes a whole set of APIs works well for a while, but then time marches on and new techniques are invented and the APIs starts to feel pretty olde-fashioned. Maybe Apple would wish to dump the current APIs and create new ones. Oh dear, this would not go over well with people who have code which depends on those APIs. Just look how many keyboards are being pounded by people moaning about the pain of upgrading to Swift 3, and they were warned in advance that it would be this way! So once we're outside the language/stdlib, we are in the realm of separate libs to support databases. Here again, I doubt Apple would be likely to think it was proper to provide a lib for MySQL, because Apple are not the experts in MySQL. The best-placed people to implement MySQL database support are probably MySQL or groups of heavily invested MySQL fans. I'm sure that as Swift matures, there will come to be 'standard' community-supplied packages for these kinds of things (just as there will be for logging or statistics or plotting, etc). And if Swift is like other languages, those packages will eventually be supplanted by other, better packages. Ultimately, I like it this way, even though it does mean that when one first starts with Swift (and the same is, I'm sure, true of other newish languages like Rust or Go), the community-supplied packages are thin on the ground, but given time, I think the problem will disappear. edited to clarify that standard packages will be community-supplied.
;-) Or, maybe there's a newly-discovered infestation of repetitious letters invading the interwebs of which we had all been previously unaware, and the time to eliminate them and achieve singularity is NOW!
Where are you initalise the document? It looks like that the saveDocument function is called before you have initalized it so it is still nil. Edit: did look over the book code, and sees that document are init in metadataReceived that are called some notification, I can nothing about notification, so good luck :) But if it is that line that give that error, then it can also be that the mycontent is not set.
Readline? How does that work?
I hope, it will adopt Go runtime. Or Golang 2 will adopt Swift syntax and features. Edit: guys, you are all really too serious :-)
https://developer.apple.com/reference/swift/1641199-readline
Oh man.. Just spent a few hours trying to figure out a similar problem.. Culprit: Swift 3 uses Error, not NSError. :/
Proper reflection so I can easily build mocks for unit testing. Having to do that manually in 2016 is crazy. 
What? Why?
Can you be more specific about "improved generics"?
Note: I don't think your numbers match mine, so this is a bit of guess! &gt; No way. You can't compromise whatsoever on type safety. It just opens up the door to continuously pushing the line towards non-type-safe. Is that referring to "Removing required `as` typecasting"? AFAICS, this wouldn't in any way weaken type safety. You can't use `as` to do potentially unsafe typecasts (cf `as?` and `as!`). It was also something that worked better in Swift 2.2. &gt; Why? I think it would lead to more confusion if you allow that. ESPECIALLY for readers of the code. Is that referring to "Ability to ignore closure parameters if you don't use them"? I don't think it's any more confusing than using shorthand syntax, where also don't need to (in fact can't!) list the arguments coming in.
The "generics manifesto" that the Swift core team sent out is a great read on the subject: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160229/011666.html
That is tough off the top, typically I try to do something only to find out Swift doesn't like it, then I implement it a different way. But there are a lot of places where I've had to use Any or AnyObject and a generic would have been better.
Take a look at how I'm calling it in my [comment](https://www.reddit.com/r/swift/comments/57o35j/using_c_files_as_functions_in_a_swift_project/d8tjazz): let line = readLine(strippingNewline: true) After this call, `line` will be a `String?` that has the contents of the keyboard input with the trailing newline omitted.
It's a global function, just use it. let userInput = readLine()
I want Swift 4 to remain focused on these three things: * **Fix the [bugs](https://bugs.swift.org)!**: the number of compiler crashes and misleading error messages throughout Swift *and* Xcode is awful. Get these in order before adding too many other features. There are 1,321 open bugs in the tracker at time of writing this. Some will be duplicates or the result of misunderstanding, but most won't. * **Implement the majority of the [Swift Generics manifesto](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160229/011666.html)**: This seems to be the most needed, missing set of features in the language. Several times during real-world, business-led development, limitations with Swifts Generics have forced me to do uncomfortable casting or a painful data-model redesign, which would not have been necessary with C# or Java. * **Integrate the [Swift Package Manager](https://swift.org/package-manager/) with Xcode**: Both the package manager and Xcode have their own working solutions for dependency management. ~~They know nothing of each other.~~ Yet Xcode knows nothing of the Package Manager. This seems wrong. I strongly disagree with some others' calls for implicit type-casting. Strictness is our friend.
I tried replacing mycontent.text with just a string and get the same error. document.fileContent = "blah blah blah" produces same error. Yes, the metaData/NSMetadataQuery stuff is completely new to me.
No more fucking syntax changes.
I don't think proper reflection will be tackled for Swift 4.
I'd like to see swift 3 running easily in windows and non-ubuntu Linux before swift 4, please. 
I'll give that a try. Thanks.
Woah it worked! Thanks! Sorry for the bother ¯\_( ͡°﹏ ͡°)_/¯
I don't know if I'm being a buzzkill but I think some of your wishes are going to be flatly denied. We know most of the big changes that are planned for Swift 4: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html I frankly doubt we're going to see everything on that list get implemented, let alone more features. **(1)** I think String works better than the credit you give it. The different String Views are the right approach (BidirectionCollections, not RandomAccessCollections). The only major problem I see is that index manipulation is really cumbersome (indexes changed late in the Swift 3 process and I don't think the Standard Library was able to really smooth things out afterwards). Range manipulations, as you discussed, are kind of terrible due to lack of help in forming the indexes required. For example, Swift already has a `substring` function like this: let substr = str.substring(to: str.index(str.startIndex, offsetBy: 2)) but it should really add the vastly less cumbersome: let substr = str.substring(2) to do exactly the same thing. **(2)** Since Swift implemented Google's protocol buffers (https://github.com/apple/swift-protobuf) I think this is the serialization approach they're looking towards. It might be possible to implement a strictly value-typed NSCoding on top of Protocol Buffers. The idea of fully serializing interconnected object graphs (as in NSCoding) has been largely frowned upon in the last decade or so – I'm personally not sure NSCoding is the best way forward (although I'll plead ignorance about what *is* the best way forward). **(3)** I'm sure you know that async/await like behavior will be part of the Concurrency changes *post* Swift 4. **(4)** I don't use NSAttributedString much so I don't know. **(5)** This casting is part of "Swift has no implicit type conversion". This change in Swift 3 is because Swift 2 *had* implicit type conversion for these bridged types and it caused a huge list of bugs when the conversion was ambiguous or unexpected. The only issue I see is that these values should be `String` types to start with (this would fall under API overlay fixes). **(6)** I love your optimism that the Swift type checker will improve so much that it won't need this help. The Swift type checker is in dire need of complete re-writing but this is not planned in the next year, either. **(7)** This is dependent on a structural Either type (https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001450.html) and probably won't happen any time soon. **(8)** I don't think I could really fit a pony into my apartment. Instead, I'd like the improvements to the memory ownership model that Chris Lattner discusses here: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025701.html
AHHHHHHHHHHRRRRRRRRGGGGGGGGGGG!!!!!!! I mean, found the problem. Needed to log into icloud on the !$%# simulator. The file still isn't showing up but this is better. Edit: It is saving to the app's Icloud Drive which is only seen by the app. I haven't figured out how to save the file to THE iCloud Drive yet. But any device I run the app on will share this file.
I would kill for a bug-fix-only release. Remember when they announced that OS X 10.6 would have "zero new features", and they had to pause for a while to let all the applause finally die down before they could continue speaking?
Alright finally got that too. Credit to: [Aaron Wright](http://stackoverflow.com/questions/25203697/exposing-an-apps-ubiquitous-container-to-icloud-drive-in-ios-8) had to add this to the info.plist and not really sure if there is a way to do it without this. &lt;key&gt;NSUbiquitousContainers&lt;/key&gt; &lt;dict&gt; &lt;key&gt;iCloud.yourBundleIdentifier&lt;/key&gt; &lt;dict&gt; &lt;key&gt;NSUbiquitousContainerIsDocumentScopePublic&lt;/key&gt; &lt;true/&gt; &lt;key&gt;NSUbiquitousContainerSupportedFolderLevels&lt;/key&gt; &lt;string&gt;One&lt;/string&gt; &lt;key&gt;NSUbiquitousContainerName&lt;/key&gt; &lt;string&gt;IdentityDisplayNameFromYourGeneralSettings&lt;/string&gt; &lt;/dict&gt; &lt;/dict&gt; 
Ability to catch exceptions. Until all of Cocoa is rewritten in pure Swift, we're still going to have to catch exceptions, and right now that means writing a little stub in Objective-C, because *it* can still @catch. Or we have to use a library like "SwiftTryCatch" -- and good luck finding the right fork that supports your operating system, works with your package manager, and runs under your version of Swift. Ugh. Why is this so hard? They promote Swift as "safer" because it's type-safe, but then turn around and basically say "tough luck" if an exception is ever thrown. Crash!
&gt; Essentially, how do companies like Facebook use the same data on both their apps and website or how would I be able to access my current MySQL databases with Swift. I highly doubt that Facebook's iOS app makes any MySQL database calls directly. It's basically just a webview.
I just want unfettered access to pointers without having to go through all the Unsafe bs
Unless you're using really shitty Objective-C libraries, you don't need to catch exceptions, as they nearly always indicate an error so bad you'd want to crash. 
I don't know enough about Swift to make a wish yet but better documentation from Apple is my big wish list. I really wish they'd have (dare I say it), documentation like Microsofts. Microsoft really upped their documentation game and there's tons of code snippets and examples on every page. With Apple you have to dig through many outdated user guides, guess at what components and what pieces you need to get something working (Mapkit anyone?), and also deal with a good portion of it's documentation still being in Objective-C. 
If you want it today, there is [this](https://www.jetbrains.com/objc/).
&gt; Open sourced Cocoa/Cocoa Touch... I can dream... I think the closest you'll get from Apple is them providing the Swift version of Foundation. Another source would be to use GNUstep, but it currently doesn't integrate with Swift (to my knowledge).
Erlang style pattern matching, and Erlang style microprocesses, process linking and message passing. Leave the old C memory model and process model behind! A tiny example of what would be nice to be able to do that's possible in Erlang and other functional languages, as I imagine it could be implemented in a Swift-like syntax: func factorial(n: UInt) where n == 0 -&gt; UInt { return 1 } func factorial(n: UInt) where n &gt; 0 -&gt; UInt { return n * factorial(n - 1) } Also, way more type inference - I shouldn't have to declare the types of parameters on functions, it should be able to infer compatible types based on my usage of them. func count(x) { return x.count } The count function above accepts any value that has a count property and returns whatever type that implementation of count happens to return. I guess you'd synthesize a generic HasCountProperty&lt;T&gt; protocol and automatically make all types with a count property conform to it. The function would be something like: protocol HasCountProperty { associatedtype T var count: T } func count&lt;T&gt;(x: HasCountProperty) -&gt; T where T == HasCountProperty.T { return x.count } With some type inference I'd like to simplify factorial above to: func factorial(0) { return 1 } func factorial(n) { return n - 1 } 
By looking at date of this job (May 6) I claim it's not final Swift 3.0 (which has been released on September 13). It's just built with Release settings. I'll look at their Slack channel. I didn't notice they have one :). Thanks!
Facebook does have different posting rules, and has long taken a dislike to writing text on the user's behalf. If you try using Twitter instead, does all the content appear? If so, it might be Facebook's rules being enforced.
It is standalone; what makes you think it isn't standalone?
Everything I've read stated Kitura was the slowest of the 4. Vapor is the most swifty and Perfect I believe was the fastest followed by Vapor as a close second. 
They need to remake attributed string entirely like they did with CGContext. That thing is not "swiftly" at all, it's atrocious.
Everything but the URL appears when I post to Twitter. I also noticed the translucency of the window is back when posting to Twitter.
That it be released in 2 years rather than one. 
That's Facebook policy. They want their content user generated, so it's not allowed to prepopulate the text anymore. Funny enough, though, if you delete the Facebook app from your phone, it'll work. 
Thanks guys! /u/TwoStraws I'm really enjoying your book so far. It's much easier to get started with Swift building small projects vs reading some of the other books I've tried out there that bog everything down in the millions of options for each feature. *Cough* Big Nerd Ranch Swift Book (which is really just Apples guide reworded) *cough*
Well, I'm using Foundation. I can certainly appreciate that from some points of view it could be considered a "really shitty library", but I'm writing a Mac application, so I don't have a whole lot of choice in the matter. I'm sure there are some exceptions that are so bad that crashing is essentially the best option, but I haven't run into any of them yet (except maybe fatalError -- is that implemented as an exception?). Exceptions were catchable in Objective-C, and every other language that has them, for good reason. My goal is to write "programs that *never* crash", not just to write "programs which never crash unless Foundation throws an exception". Whether a Foundation method chooses to report errors by throwing an exception (versus NSError, or nil, or an enum, or ...) seems to be pretty much random, and is not often documented. My users can't know what part of Foundation I'm using to implement a feature, or whether it throws exceptions, and I'm sure even if they did, they wouldn't care. They just want it to not crash. If you *haven't* run into any easy-to-recover-from exceptions from Foundation, I can only guess that either you're not using the same parts of Foundation as me, or you're not testing as thoroughly. I fuzz-test every feature I add, because I don't want weird user input to be able to crash my app. I'm not alone here. The "SwiftTryCatch" library I found was forked by "Egghead Games", who say in the README that they got tired of their apps crashing for recoverable reasons, too. Right now, it's a lot easier to never-crash with Objective-C than with (pure) Swift. I wish that weren't the case, because Swift has a lot of other good things going for it. As an alternative, I would gladly accept "rewrite all Foundation and AppKit methods that throw exceptions to return NSError instead".
I'm glad to hear my approach is working well for you! Make sure you take a break now and then and make sure what you've learned has sunk in a little :) If you have the Hacking with Swift guide book, I highly recommend doing the app challenges!
Nice video! I was writing some asynchronous unit tests in Swift last week. A couple things I learned: * the dispatch semaphore solution blocks the main thread, while `waitForExpectations` does not. I found this out the hard way while trying to write one of my tests. My function needed to call the completionBlock on the main thread, but it was being deadlocked by the waiting semaphore. * the `waitForExpectations` technique also works in the `setup` and `tearDown` steps, too. This is helpful in cases where your setup process requires asynchronous APIs.
It's not the best practice to be actually using your, or a 3rd party's, API in your unit test code. You should be using the same practice in the video, but also use dependency injection to simulate success and error responses from your API locally.
&gt; dependency injection for network calls Ok, I got it. This example could have used non-networking code, just felt it's easier to comprehend if I bring up a real asynchronous example. For testing error conditions and payload processing, mocking the network will usually do it; however, when you build a real network layer, you may want to test other features, too, which do require real connectivity. In such cases, I write some unit tests early on, then switch to integration tests.
If it was a beta, it wouldn't be '3.0'. Also, this is a programming language, not pre-release modable game, an expectation of stability is perfectly reasonable. Stop making excuses for Apple.
I *think* you don't use the CGVectorMake function, you instead call the initializer normally, as CGVector() with whatever parameters it needs.
You're not putting in the argument labels. The code should be CGVector(dx: 0, dy: 0) It's right there in Apple's docs: https://developer.apple.com/reference/coregraphics/cgvector
makes me wonder if there is a sync function or something similar to force the print function to complete
My point was that exceptions in Objective-C were only supposed to be used to indicate unrecoverable errors, and by and large, Foundation follows that rule. So catching them doesn't really give you much. Even Apple recommends you crash rather than try to recover from something like an unknown key exception from a storyboard or whatever, as they nearly always indicate a fundamental error in your app that you can fix, rather than trying to deal with at runtime. So it's not nearly as much of an issue as you seem to think it is. If you're dealing with exceptions all of the time, you're doing it wrong.
Nice article, but I'm a bit disappointed by the force unwraps. Those are definitely not necessary. Here's my approach. Warning: I describe all intermediate steps, so it is a bit long. :) First of all, note that `sequence(state:next:)` lends itself pretty well for the Fibonacci sequence. A simple example: let fibonacci = sequence(state: (0, 1)) { (state: inout (Int, Int)) -&gt; Int in state = (state.1, state.0 + state.1) return state.0 } for number in fibonacci { print(number) // 1, 1, 2, 3, 5, ... } Of course, this solution isn't ideal: - It's not safe at all - it crashes if you don't break out of the sequence in time, due to integer overflow - It isn't generic - It starts at 1, not at 0 - It generates one number less than it can (the last number it generates is 4660046610375530309, even though the next one still fits in the `Int` type) To address the safety issue, we can introduce a `safelyAdd` method to the `Integer` protocol: extension Integer { // you can also use a custom operator for this, such as +? static func safelyAdd(_ left: Self, _ right: Self) -&gt; Self? { let (sum, overflow) = addWithOverflow(left, right) return overflow ? nil : sum } } Now we have a fibonacci sequence that won't crash on overflow: let fibonacci = sequence(state: (0, 1)) { (state: inout (Int, Int)) -&gt; Int? in guard let sum = Int.safelyAdd(state.0, state.1) else { return nil } state = (state.1, sum) return state.0 } // safely terminates for number in fibonacci { print(number) } To make this generic, we need to wrap it in a function: func fibonacci&lt;T: Integer&gt;() -&gt; UnfoldSequence&lt;T, (T, T)&gt; { return sequence(state: (0, 1)) { (state: inout (T, T)) -&gt; T? in guard let sum = T.safelyAdd(state.0, state.1) else { return nil } state = (state.1, sum) return state.0 } } // works! for number: UInt8 in fibonacci() { print(number) // 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144 } Not bad, but we didn't yet address the last two problems that I mentioned earlier: It doesn't start at `0`, and it doesn't generate `233`, even though it fits in `UInt8`. We need some smart use of optionals to fix this. Also, the `UnfoldSequence&lt;T, (T, T)&gt;` return type isn't very nice, but we can fix this with a `typealias`. typealias FibonacciSequence&lt;T&gt; = UnfoldSequence&lt;T, (T, T?)?&gt; func fibonacci&lt;T: Integer&gt;() -&gt; FibonacciSequence&lt;T&gt; { return sequence(state: (0, 1)) { (pair: inout (T, T?)?) -&gt; T? in guard let (low, high) = pair else { return nil } pair = high.map { high in (high, .safelyAdd(low, high)) } return low } } for number: UInt8 in fibonacci() { print(number) // 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233 } Was all this worth it? Probably not. But it was fun! Adding the option to start with two custom start values rather than `0` and `1` is left as an exercise to the reader. :)
I sent a DM
Swift has an operator for adding without overflow. Off the top of my head, it's &amp;+. if you need to know if it overflowed you still need addWithOverflow.
Either way, the team chose the solution that fixes the case that nobody in the history of programming has ever used (a range up to 9,223,372,036,865,775,807) vs the solution that fixes a type that is used every single day by every single Swift developer(Closed ranges).
No bother at all, if you don't seek information then you live in ignorance and waste time doing useless crap. Asking if there's an easier way is working smarter instead of harder. If you have any other questions then feel free to ask me directly, ask here, or try [Stack Overflow - Swift](http://stackoverflow.com/questions/tagged/swift). I contribute to Stack Overflow whenever I can, [profile](http://stackoverflow.com/users/887210/colgraff)
&gt;And changing the SYNTAX of the LANGUAGE itself any further is BULLSHIT. Nobody forces you to use Swift. You can always use Objective-C if you want stability. Personally, I'm glad they are willing to make breaking changes if it genuinely improves the language. It would be a shame to have to use a faulty language for decades, just because we weren't willing to change it while we still could.
New tutorials are always welcome. Props to you if you're the creator!
I wasn't sure what he meant, either. That comment was not clear at all. After reading it a few times, and the responses below, it seems that he's only concerned with the *network access*, because it introduces an external runtime (test-time) dependency. (Clearly, you wouldn't want to try testing something programmatically without using *any* programming interface!)
What did I just read 
That worked! Thanks a bunch! Edit: The pod file installed correctly as far as I know. But when I import SocketIO, I get an error at the import statement saying there is no such module :(
"Hey I'd like to see PHPBB ported to swift!" Something like that.
Make sure you're opening the Workspace created by the Pod now and not the original project. Also do a clean build (Option Key - Build) and try again.
Ok, but I'm answering the last part of your question: "would you use it or install it in your enterprise?" The answer is: maybe. I don't care about the language, I only use things if they are actually useful. Also right now I would probably have more trust in something written with Ruby on Rails, because the community is so large, and the codebase has been vetted by lots of security experts. But I don't know, if you're just looking for some practice, then make a simple Twitter clone. Actually if you wanted to build something useful, contribute to a Swift framework or library that copies some stuff from Ruby on Rails. Libraries for things like authentication, permissions, pagination, file uploads, image processing, etc.
With the way you reply I'd never let you use any of my apps.
This is exactly what I was looking for. Thank you so much 
I use Firebase to do this. Look up Firebase GeoFire. 
How about an app where users can find their current location and save it along with a time stamp and description/photo so they can remember cool places they have visited. You could have a map display pins of all the saved places. 
I saw this option before, but I had a difficult time understanding how to accomplish this
I'm in the same boat. My app currently queries all locations from Firebase and I filter to the mile radius on the device. This is not a good option for scalability so I am exploring using GeoFire but haven't made much headway yet. 
If you happen to find something that satisfies this problem please let me know!
Swift on the Server. Front end would be HTML/JS/CSS like all web stuff. I've been playing with Perfect, Kitura and Vapor and I want to put my skills to the test while building something useful. They're awesome server-side frameworks. 
A Twitter clone is a good idea, Slack would be interesting too, perhaps a ticketing system. By building Swift tools for the enterprise we push the ecosystem further and increase the possibilities for monetization.
Are you aware of [swift-corelibs-foundation](https://github.com/apple/swift-corelibs-foundation)? The majority of Apple's familiar **Foundation** already has an Open-Source, Linux-targeted implementation in [swift-corelibs-foundation](https://github.com/apple/swift-corelibs-foundation) and this is included in Swift's core Linux release, making Swift a wholly useful 'standalone' language. Even without Foundation, calling Swift 'just an interface for Objective-C libraries' is a bit like calling C 'just an interface for POSIX libraries' (both being somewhat true in practice but also slightly off-base).
Isn't that Google Maps? Are you trying to make MapKit act like Google Maps? I'm not sure what you're asking here.
I'd like to know how to create an IBAction that mimics the location button found in yes [Google Maps].
Just give your view controller a var zoomed boolean. Connect an ib action that first checks zoomed then either zooms in or zooms out?
The link is broken.
I notice you are calling `audioPlayer.pause()` in the audio player is playing. Does that line execute under the right circumstances? If not, why not? If it does, why doesn't it pause? is the audioPlayer nil? The debugger is probably the best way to answer those questions. Set some breakpoints at strategic locations and see if you reach them when you expect to. If you don't reach them, set other breakpoints and figure out why you are not reaching them. If you do reach them, print some variables to discover why the code is not doing what you think it should. It is very likely this is a logic error in the code or an error in your understanding of how the audioPlayer works. The audioPlayer being broken would be the next (very unlikely) cause; Swift being at fault would be a very very unlikely cause.
I would try to dissuade you from having a GUI app run, stop and otherwise control a command line program. It is always messy because the app will get out of sync with the command line program. That technique is normally only done as a last resort; for example, if there is an existing command line program for which you have not got the source and you just must run it from an app. Since you ask about a good way to organise the code, what I would do is have a library which does all of the simulation stuff and provides a nice API, but does not deal directly with user input or display; the API needs to provide all the functions and callbacks to do that. Then, I would build a command line program which deals with user input and display and calls the library. And I would build a GUI app which deals with user input and display and calls the library. This is the technique used by, for example, curl and libxml2 (xml parser from, I think?, GNU). They both have well-known command line interfaces, but underneath, those command line tools call libraries and those libraries expose APIs which can be called from any other apps, no matter what user interface those apps provide. Have a project for each one (the library, the GUI app and the command line app). Whether the library is a static library or framework depends on what ends up going into the library. It would be easy enough to take a guess that it should be a framework and change it later. You could also make a workspace to gather the 3 projects into one Xcode window to make it easy to work with. 
I would construct an index path using the section you are given and using 0 for the row.
Don't mess with the contentView. I guess you are putting your content in the contentView. You should create a new view called something like CardView. Make the CardView the subview of contentView, then put your content in the CardView. Make the card view look like a card (roundy corners, spectacular colour, bg image, what have you) then position that inside the contentView to achieve the visual effect you wish to achieve - for example, if the cards should have some margin around them, use constraints between the card view and the content view to achieve that margin.
Listen to this guy. Nailed it on the head.
You could use MongoDB with geospatial queries
I'm working on what I believe to be the best Calendar Swift library for iOS. https://github.com/patchthecode/JTAppleCalendar
Never understood why people insist on never showing more than one day of data at a time. Does everyone who designs these things have that many meetings? Calvetica is the only app that does this right afaik...
ok that sounds like a good idea i will try that!
There's more to life than meetings. I don't have any "meetings" but there's lots of events I want to track across many days. Rehearsals, tech week, opening night...
I use to praise BaaS for their easy and quick implementations to get you up and off the ground for beta testing (and I still think they're great!). But I've found that once you built up a reasonably generic backend scaffolding, it's very easy to plug and play with new projects. So I have a Node-based backend scaffolding that I use on all my new projects and build out any features I may need! 
I've been working on a tv guide application. you can see it in action here: https://youtu.be/h161yAv2ZdE
What i have developed is a calendar library. With the library, you can build an app like Fantastical very easily.
Nice app, but it might be easier to just sent IBM an email to tell them to fix their page. :-)
[CocoaControls](https://www.cocoacontrols.com/) reworked in swift perhaps
Why 3 different ways to accomplish the same thing?
Make an open source UI component, that looks visually pleasing. Perhaps a color picker that works with iPhone+iPad.
I don't know exactly what your algorithm is doing here. To me, "cleaner" would include comments. :-) I think if you're using while-loops and subscripting to process strings, in Swift, 98% of the time that means you're doing something wrong. Use higher-level constructs. Walking a string backwards, especially, seems like something that has great potential to be slow. I've got tens of thousands of lines of Swift code in my project, and it does a fair amount of low-level string processing, and it never uses `.successor()` or `.predecessor()`. Note that your C version is only dealing with bytes (ASCII stored in octets), so it's unlikely that an idiomatic Swift implementation will ever be as fast. It will also work for non-ASCII characters, though, and that comes at a cost. 
You can zoom it in and out.
Oh. Didn't know that. Still. 9 hours is max. Pretty damn far from 24
One 'work around' I thought of is using `defer`. I'm not saying this is a good way, but I just can't think of a better way. It's dumb cause as far as I can tell I can call `c` inside `b` func a() { defer { b() } func b() { c() } func c() { } }
Thanks! I appreciate the detailed response. So I just put the simulation code into a library, which I can then import and use? I like that idea.
Can't you do the lobby stuff through game center?
I've been seeing a lot of "server side swift isn't production ready", what's the reason behind this? What is it missing before it can be considered production ready? 
There are four powerful contenders in the server arena, Perfect, Kitura, Vapor and Zewo. I am rooting for all but I'd like to say that Vapor is the simplest of all and that's a strength point. Swift on the server is here to stay and ready to take the enterprise by storm.
Array(someString.utf8) gets the same result although I have no idea if it's faster/slower/same.
I did that and it is not functioning properly as I had hoped. Here is the method that the button is invoking: https://ghostbin.com/paste/gwjcf
Excellent!
That menu toggle on the website doesn't work on my phone
Is not so easy, but not too hard. Start here https://www.raywenderlich.com/125071/nstask-tutorial-os-x To cancel command-line utility, just send to stdin ^C (interrupt process), or send SIGKILL to their process. Here some quick samples http://stackoverflow.com/questions/412562/execute-a-terminal-command-from-a-cocoa-app Also google about POSIX signals, stdin stdout stderr.
I'm on my phone, and can't write a proper solution right now, but I think there are a couple of things that are likely to help. String index lookup is expensive, and will likely be cheaper to do once for the whole string, by putting the characters in an Array. If you know you're dealing with ascii, the UTF16 view will be the fastest to operate on. By making the functions generic on RandomAccessCollections of Comparables, you can make the swift a bit more attractive, IMO.
UI library bindings?
It's just come out and it's called Monster Maker! It's a cute sticker app for Halloween. You can use over 160 different parts to create your own monster stickers, and there are a bunch of animated monster emoji too. iTunes Link: [Monster Maker](https://itunes.apple.com/gb/app/monster-maker-create-your/id1159124902?mt=8)
i am sorry. I didnt mean to sound obnoxious. I am just trying to make this library the best there ever is.
It really depends on the project. For simple projects and for a 'Proof of Concept', you can often get away with a BaaS. I've found in practice that for anything of medium to high complexity, their models are too simple to manage my requirements.
Read the SceneKit docs. 
Mmh, I guess I misunderstood how it worked. I'll have to look into this.
Welcome to the club! [Apple is looking into it](https://forums.developer.apple.com/message/178157)
Good to know! Don't suppose they're also looking into properties of navigationBar suddenly being unanimatable? 
&gt; With the C code it's easier to tell what's going on. Do you think so? I've been writing C since the 1980's, and I'd still put a comment on the C version of `findDescendingFromLast`. Maybe it's obvious to you, but it's not obvious to me. I've found bugs in simpler string functions than that. For example, the problem statement says that these are always lower-case ASCII letters, with length &lt;= 100. Those are tremendously important things for a reader to know, especially if you're looking to improve performance. That means you can make a `UTF8View` from it, and know it'll always fit in 1 or 2 cache lines, and you can index into it in O(1) time. Right now, you're asking the system to walk a sequence of extended grapheme clusters in reverse, which is pretty much the slowest thing you can do to a string.
"Things" in Swift can be objects (defined by classes), or values (defined by structs, enums, or tuples). Objects are distinguished from values by having a meaningful concept of identity: two objects with exactly the same values are nonetheless distinct, and when you pass one to a function you're passing a reference to *that* object, not just its value.
In objective-c if you wanted to store the integer 1 in your array you had to make it an NSNumber. In swift you can just put the integer in the array if you want. NSArray *arr = @[ @(1) ]; vs let arr:[Int] = [1] 
Ok I'm lost, I where do we find the Swift-Lite? This looks very interesting, but I can't find the actual product on the page linked. Sounds like a great idea, esp for some IoT projects I've been working on.
The Swift backend frameworks are very new and are subject to breaking changes in the near future. There is also poor integration with external services and almost non existent plugin ecosystem. Compare that to mature frameworks like Django or RoR were you have a library for everything you need. Also Swift is still changing and the support for Linux systems is still being developed. I would say that when Swift achieves stability and maturity then server side Swift has the potential to really take off. 
Insert, replace, and remove are all O(n) for arrays, also. Most of the time, when someone says "Strings are slow in Swift", they've been converting `String.Index`s into `Int`s, or converting slices of `CharacterView`s to `String`s, which are all O(n) operations. As an example, take a look at [this](https://github.com/tyrone-sudeium/JSONCore) library, which parses JSON (quickly) using *views* into `String`s, and without converting to an array of characters.
Yeah, I think trying to use strings directly is a big mistake. It seems like the consensus here is to use a view designed for random access of the chars.
Vapour run on Kitura http server thru provider is possible and better performance. I am still waiting for it to overtake Go frameworks, anyone use Iris web framework which looks so much simple and less time to deploy?
"Microsoft love" has surpassed "military intelligence" as oxymorons go.
func ratingButtonTapped(_ button: UIButton) { or IIRC changing _ to button in the selector works too
It depends on what you want to do. If you only want to learn backend programming then Swift may be right for you. In 1-2 years when backend Swift is ready for prime time, you will be an expert in it :) If you want to create production systems right now, then probably use something else.
Thank you, it compiles now, but does not print "button pressed" in the console. I had to keep the selector call as ratingButtonTapped(_:)) and change the declaration to include the label. I tried changing the selector call from _: to button: and it works too, but still isn't producing the expected behavior. I just got a course on Udemy for iOS 10/Swift 3 by Rob Percival that was on sale, so I'm not going to keep on with the Apple one since the language update breaks things. I appreciate your help!
Thanks! Both those work...funny, I had tried changing _ to button in the selector, and it compiled, but wouldn't print so I assumed that wasn't the right thing to do. However, when I add _ to the declaration, it does the something, so something else is going wrong with this tutorial.
I'm recently having a problem that if I have hardware keyboard connected in the Simulator for XCode, often it just stops printing to the output, so it's getting annoying to debug UI elements that require typing a lot. So there are definetly a lot of bugs left in. Try chaging some UI element when pressing the button with the version that doesn't print the message and see if that works. There is also a bug with Navigation Controller and Scroll View that you have to disable "automaticallyAdjustsScrollViewInsets" for the scroll view to start at the top instead of like a navigation bar heigth away from the bottom of the actual navigation bar.
Much better solution, thanks a lot. 
How do you compile a regex in Swift? I'm only familiar with initializing NSRegularExpression, which I assume is what you're asking? Unless there are Swift specific compilers out there like re2c in which case that would be awesome.
Weird. I do have a USB logitech plugged in, unplugging it did not resolve the issue. I do have a lot of peripherals hooked in though, so maybe I'll do some more hardware/software debugging. Changing the print call to `button.backgroundColor = UIColor.blue` doesn't have an effect either. I'm trying to connect my iphone to run it on there (which I've done in the past), but it's not working. smh
The NSRegularExpression constructor does the compilation / lookup table creation. This can be heavy if done over and over, I have seen an example of this in backend code causing massive server load.
`String.CharacterView` is a `BiDirectionalCollection`, so appending something definitely doesn't require traversing over all the characters. However, in the worst-case scenario, the entire content would need to be copied to a different location in memory, but that's no different for `Array`.
I haven't seen this on a MacBook Pro. It lags a little when showing alerts or errors though and that can get a little annoying. 
FWIW, if you're writing code like this, you might want to use an iterator or a scanner as they are tools better fit for the job.
The most current syntax is asyncAfter(deadline: .now() + 3.0) , simplistic enough for me.
Exactly the sort of answers I was after, diving into research on this and dependency injection now, thanks guys!
Can you make a shape/line/trail/pattern in the Xcode Playground?
Swift 4 will fix everything.. jk jk. You should check out BuildTimeAnalyzer, I use it to optimise compile time on projects. Type inference is specifically very slow (it is indeed exponential with nesting) so you might consider rewriting slow methods or at least helping compiler with type inference (i.e. by specifying types) Link: https://github.com/RobertGummesson/BuildTimeAnalyzer-for-Xcode
The pattern: while !input.isEmpty { let c = input.characters.popFirst() } Is an O(*n^2*) way of doing: for c in input { ... Really, when parsing, you shouldn't mutate the string you're parsing. It's a much better option to keep a view into the string, and manipulate that.
Yup
I guess there is the argument that we have new and old in the world of backends. Given that I'm coming in from a front end developer and haven't done back end, it would give me a good start to go with Swift. One concern is that if I get a job or client that wants a backend would they feel ok about going with Swift. Given that IBM has backed this, I could see that it would have strong support. There's also the fact that I'm not a fan of scripting languages so Swift has an advantage there.
Knowing nothing about auth0, you're creating the credentials provider in a different why than the tutorial you've provided. Regardless, it seems that identityProviderManager expects an object and you're assigning a string to it hence the error. 
In my app, I load the data in the background and store it in CoreData. Then when the view opens, I do a fetch request to pull the data to display
In my opinion, Swift is very well positioned to fill a crucial gap in Data Science. Right now many data scientists prefer Python for scratchpad experimenting, and I've spent a lot of my career converting slow, error prone Python prototypes into production worthy java. I think Swift has a lot of the good of both python(like playgrounds, interpreted mode, easy to read) and java (fast, type safe) as well as being very lightweight since it was designed for cpu/battery/ram limited devices so it should scale incredibly well on virtual machines (eg. cloud) for map reduce / distributed jobs.
That's a great point. The whole server demo was done on one machine in an Xcode and other window. IDK if it was a playground or what, but it looked really nice for running tests.
Xcode. If you've got a Mac, you can download it for free with a developer account.
Why not follow the convention of adding things to /Library/Logs like other programs do? Then it's viewable with Console. There's plenty of logging libraries on github. [Here's one](https://github.com/IBM-Swift/HeliumLogger) and[ here's one that lets you log to arbitrary file locations or cloud.](https://github.com/SwiftyBeaver/SwiftyBeaver)
Using Metal / CUDA in playground for data science is going to blow people's minds. Orders of magnitude faster than Python, and hopefully even easier/more intuitive.
I wanted to learn how to create graphics in swift playgrounds also, so after some searching I found some examples at the [Apple Developer Site](https://developer.apple.com/swift/resources/), specificall take a look at Crustacean.playground. I had some problems getting it to work initially, there are some old APIs used that haven't been updated and it took some trial and error to get it to work. Give it a go and see if it works for you. Since I was also interested in using Metal I tried playgrounds for that, but that doesn't sound like what you want.
&gt; Why not follow the convention of adding things to /Library/Logs like other programs do? because I wasn't aware of that. Thanks! yes, I am *that* new to the apple ecosystem. 
Code obfuscators used to be a big thing, but i think most people figured out that if you are worried about people reverse engineering your code there is something wrong with your security/business model. It's basically an unsolvable problem, like DRM, where you just get in an escalation war and it's the end user that ultimately suffers.
Swift comes with core data, every mac comes with sqlite easily accesible from Swift, and you are one sudo away from installing mysql, postgres or any database of your choice, which may be overkill for logging but that's up to the coder. Text files are a breeze to handle in Swift too, csv, json, xml or plain. As /u/Phearlez said, Helium is a beautiful login module.