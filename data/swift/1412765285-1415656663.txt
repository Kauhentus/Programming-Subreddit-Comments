Hi, thanks for spending the time going through the exercises! How you choose to handle optional types is a matter of taste, and differs depending on what your purpose is. In this use case, we are loading our own configuration file, so we EXPECT it to work. So I'd personally let the app crash if anything doesn't work out. That is: 1. If we can't load the JSON files, crash. 2. If we can't parse the JSON files, crash. 3. If the parsed JSON data can't be converted to [String], crash. If you are handling user input or API, you'd probably want to be more lenient. So I would do something like: quotes = loadJSON("positiveQuotes") as [String] 
See my reply in http://www.reddit.com/r/swift/comments/2ikeqo/4_apps_in_4_weeks_learn_swift/cl3nm9t maybe it'd help to explain the optional type a bit.
He was doing a funny. I said I don't know what "!" does, and you used "!" when you said awesome! 
Well you've already committed and pushed some of the files. Just do that for all the files.
Aren't brand new languages fun?
I hope Xcode gets its shit together. I like the IDE, I hate that it crashes if you so much look at it funny.
Background looks like an object that is defined outside your loop. So when your calling 'addChild' you attempting to add the same object to as a child to the parent. You cant do this. Try creating a new background object inside the loop for the 3 you need.
So I would create something like this: let background2 = SKSpriteNode(imagedNamed "background2") Is that correct? 
That sounds unpleasant to deal with. Could it be a build setting that differs between the debug and release configurations? I haven't really settled on a good approach to continuous integration for iOS yet, everything out there leaves a lot of room for improvement. 
Unless you're doing something unusual with frameworks, when an application is compiled, the source files are read in and combined into a single executable file. Different classes and methods aren't stored in different directories. As jasper points out, you can use the Objective-C runtime API to get some of the information you need, but you won't be able to use this to distinguish between things stored in separate locations in your source code. What are you trying to achieve?
Aaand here it is: https://appsto.re/se/i5kn3.i 12 hours in review. A new record low for me. 
Same problem for me but I'm running 6.0.1
In the long run your code may end up being a little cleaner by having a separate method for each button press. If you'd rather have one method, I'd recommend **against** using tags and rather create outlets to all the buttons. That way you can compare sender to the button outlets instead of tags. Tags seem like a nice fast solution with less code, but if sender == self.multiplyButton {... makes a lot more sense when you're maintaining the app down the road than if sender.tag == 11 {... If you're still set on tags without outlets at least make some constants so that it makes more sense to the reader let MultiplyButtonTag = 11 ... if sender.tag == MultiplyButtonTag {... Through that doesn't solve the problem of having the magic number 11 as the tag value in Interface Builder :)
I suggest learning Python, playing with Swift, and forgetting Obj-C. Swift is not mature enough yet to learn on it, but python is good for learning', and Obj-C is just crazy.
No idea, really. Perhaps your build isn't clean. option-shift-command-K to fully clean the output directories and rebuild, see if it helps. One suggestion, though. Instead of assigning the new SKPhysicsBody instance to the optional property alien.physicsBody, assign it to a local variable, set it up, then assign it once to the alien.physicsBody. This will allow you to entirely eliminate that long series of optional chains and all the associated complexity and overhead associated with it. I wouldn't expect that to fix your problem normally, but, with Swift in such infancy... it's plausible you're hitting a compiler related problem associated with optimizing out optional access costs. But still, the suggestion is more about best practices than the issue at hand.
I trust you've filed radars with Apple on these bugs... because, it's not likely they're trolling /r/swift for this info. That said, I haven't seen these particular problems. You're not getting messed up by some third party software intercepting text editing behaviors, are you?
no I haven't file these as radars as I wanted to poll you guys first and see if you were experiencing the same issues. Primarily because, as you alluded to, I do have a couple of plug-ins installed that may be the culprit.
I would suggest an alternate to checking each button (0 - 9). Assuming you are going to be adding the number clicked to the end of an existing total value, it might be easier to do something more like: func buttonClicked(sender: UIButton) { totalLabel.text! += sender.titleForState(.Normal)! } So say you had an existing value of '12345' and then you clicked '6'. A local string variable, or a label text value could have '6' appended to the end. Of course, you can still check for each specific button by either: if sender == oneButton { ... } or switch sender { case oneButton: ... break default: break }
Yes, I should say that most of my recent problems have been with Swift + Spritekit projects.
The error isn't really on the third line of the addAlien() method. Its really on line 211 in Game.swift: let duration = Int(arc4random()) % Int(rangeDuration) + Int(minDuration) arc4random() returns a UInt32 value which are you attempting to turn into a signed Int. On architectures with 32-bit native words this is guaranteed to cause an overflow at some point when the random value returned is greater than 2,147,483,647 (or something like that). Change the code to something like this: let duration = arc4random() % UInt32(rangeDuration) + UInt32(minDuration) And you won't cause the overflow.
Interface builder still routinely crashes for me, even on nibs that were created with the current build of xcode.
put var ans: Int inside of the func ack. The two loops are kind of nonsensical - would be like "for i in i ... 6", what is i? Here's a tweakup: func ack(o: Int, p:Int) -&gt; Int { var ans: Int if o == 0 { ans = (p + 1) } else if (p == 0) { ans = ack(o-1, 1) } else { ans = ack(o-1, ack(o,p-1)) } return ans } var startValueO = 0 var startValueP = 0 for startValueO in 0...6 { for startValueP in 0...6 { println("Ackermann of (\(startValueO),\(startValueP)) is \(ack(startValueO, startValueP))") } } 
If the maintainers of that project haven't already added one, you'll need to add a bridging header. Extensive walkthrough here: http://stackoverflow.com/questions/24002369/how-to-call-objective-c-code-from-swift
Anyone know where the thumbnail image is from? Can't seem to find it on the page or anywhere else.
You are a genius! I can't thank you enough!!!!!! It will now run on the iPhone 4. The *only* problem I am still encountering is that sometimes it hits 100% CPU, normally it is at 70%... the 100% CPU causes a crash. Do you have any idea how I would fix this :(?
Ok, so let's say I've created the .swift file, and I want to run it, and I place it in a workspace. The option to run is grayed out, so what you're saying is I need to give xcode a target, so is there a way to do that without creating a project? What I want to do is create a simple single file script I can run at the console and input data to. Just a test, nothing sophisticated.
Wow. I can't believe I missed that! I'll pay more attention to the ()s from now on. I think this was actually very useful, as I should read lines of code more proactively. 
Here was my implementation: // Ackerman's function in Swift import Cocoa func ack(m: Int, n: Int) -&gt; Int { var answer: Int = 0 if ( m == 0) { answer = n + 1 } else if (n == 0) { answer = ack(m - 1, 1) } else { answer = ack(m - 1, ack(m,n - 1)) } return answer } println(ack(3,4))
you f-ed up where you didn't get a mac. ;)
From the sidebar wiki: [If you want to try running your code, you can use swiftstub](http://swiftstub.com/)
I kno, noticed as soon as I posted it but it was so late 
:(
I bought it and just tried it out in my building's elevator. Down: http://i.imgur.com/9Hsfjre.png And back up: http://i.imgur.com/ybl98GC.png Very cool. :)
So when you are trying to use introspection to iterate over the contents of a directory, it's because you want to iterate over your entire framework's API but not system APIs or the code in your showcase application? There's a few different ways you can do this. When you iterate over classes using the Objective-C runtime API, Swift classes show up prefixed with the name of the module they are in, separated by a dot. If you can isolate your framework to a module, you can skip everything that isn't in that module based on the prefix. Depending on the nature of your framework, making the classes you want to iterate over conform to a specific protocol or inherit from a specific superclass makes it easy to isolate them. I've done this for a couple of frameworks myself and it works well for things like plugins, but it won't be suitable for more general-purpose APIs. Another option is to have a top-level object that describes your API, and interrogate that. This could be useful for real users of your framework as well. Otherwise, you could always hard-code the class list. 
&gt; What I want to do is create a simple single file script I can run at the console and input data to. Then just open a terminal prompt an run the command `swift foo.swift`, where `foo.swift` is the file you want to run. 
I only want to iterate over my custom API's. Specifically i need to iterate over protocols that defines the methods. All the protocols extends from a SuperProtocol. I'm doing my first tests with Objective-C Runtime Reference and the protocol_copyMethodDescriptionList method but i'm not getting anything clear... Do you have any example of introspecting protocols in swift? The hardcoded method, is the very last, last option because the API is very dynamic and changes every day...
Make a `UIButton` subclass called `NumberInputButton`. Make it IBDesignable, add a property called `numericValue: Int` or something. Create your buttons in IB, set their numeric value. From there, it's easy: func numberButtonPressed(button: NumberInputButton) { println(button.numericValue) // the button's value } You could make the numericValue property set the button's label automatically, too, so you don't have to set the buttons value twice. I wouldn't abuse the tag though, that seems wrong. 
Your class is a NSViewController, how would it make sense that that the pop up buttons's class is `ViewController`? You're trying to replace the AppDelegate with some other class, not the UIPopUpButton itself. That that doesn't make any sense should be clear. The basic approach here is simple: look for some textfield that says `AppDelegate`. Replace that with `ViewController`. The AppDelegate/your ViewController are the Xib's "owners". On the left side of the IB, you have that compressed view of the objects in your XIB. Expand it. The top one represents the xib's owner, there you need to specify your controller. That's where you find that textfield mentioned above ;-)
You can edit stuff. Not the title, but the contents.
Computing Ackermann's function until ack(6, 6)? You're extremely optimistic in your computer's performance :-D Also, why y'all use on this `ans` or `result` variable? I'd just write func ack(o: Int, p: Int) -&gt; Int { if o == 0 { return p + 1 } else if p == 0 { return ack(o-1, 1) } else { return ack(o-1, ack(o, p-1) } }
Workaround that helped me: right-click the variable you want to see, select the print description option.
super.init(imageNamed: @"...")
I'm digging for obtaining the argument list and the return values, but I see some strange things... - The first parameter of every method is not showed... - The object objc_method_description has a "types" field but seems difficult to read, i I print directly i get the address memory, and if I convert to String i get: v16@0:8 - There isn't a method to obtain the return type of a method in the "Working with Protocols" section. There is one in "Working with methods": method_getReturnType(_:_:_:), but i need a Method object. Do you know how can I obtain this?
You create a view controller and just call a function on it. You don't show it or anything like that, what are you expecting to happen? You have two controllers: One that's created automatically (you can configure a "main interface" in the project info), so that's probably why anything's shown at all, and a second one in the AppDelegate, that's not shown, that you call the method on. There's a difference between a class and an instance of a class, maybe look into that.
My understanding is that back in AppDelegate class, I had created an instance of the ViewController class, I called the instance viewcontroller and then I called the method in my class with view controller.listupdate(). My understanding is that then the method in the class I created should wipe the drop down clean and then insert 1 entry that reads "Hello". Does that make sense?
Ah, yes. You're absolutely right about what happens in the long run and implementing more elegant solutions. From my understanding, you believe that I tagged the arithmetic buttons as well, I didn't, actually! I just tagged the 0-9 buttons, the multiply, add, divide, and subtract buttons are all separated and invoke their own functions. :-)
Yep, that's what happens. It also happens that your view controller is not displayed anywhere, so you won't see anything happen. View controllers aren't displayed when you create them, that's an extra thing. And it also happens that there is a second view controller created for you that is actually visible. Those two are two different instances of that view controller class.
For some reason I can't find this option after right-click (?!)
Okay, I see what you mean. Now, the other view controller, is that one that is automatically launched by AppDelegate when the program is launched? I can't seem to find any reference to another view controller in my program. Then how would I move my new view controller to the front? The only documentation I can find online is for directed at iOS development and isn't clear to me. P.S. Thank you so much for all of the help, I appreciate it!
Maybe someone else can visualize this better than me, but could you post some code snippets so I better know what you're doing?
But that would be the easy way :) So it looks like, in conclusion, the only way to build and run anything in Xcode is under a project. I just know that, even though I only have one .swift file now, it will expand into multiple classes, and I'm trying to get a grasp on the bare minimums projects use without having to rely on templates with a bunch of empty classes. I know I'm doing it the hard way, just trying to learn it and retain it.
Replacing `super.init()` with `super.init(coder: aDecoder)` should do the job.
I replaced that part as advised, but I'm still getting the same error when I'm trying to make an instance of it. What should I pass as a parameter for the `coder`? 
When it comes to theming UI elements these days you may be better off looking into the [appearance proxy](http://nshipster.com/uiappearance/). With that you can just do something like MyLabel.appearance().backgroundColor = UIColor.yellowColor() MyLabel.appearance().font = UIFont(name: "HelveticaNeue-Light", size: 14) MyLabel.appearance().textColor = UIColor.grayColor() and all instances of the MyLabel class will take on those attributes.
I was a bit unclear; it's not the variable in the code, but in the debugger (where it lists the variables that are currently in scope). There's a menu entry "Print description of [...]".
In general, you can show a view controller's view by adding it to some other view (or a window). I obviously don't know what you're trying to accomplish in the end, but it might not be necessary that you create the view controller yourself in the AppDelegate. For example, you could call the `listupdate` function in your view controller's `awakeFromNib` or `viewWillLoad` or `viewDidLoad` methods (look at the documentation, there are several methods you can override that will be called at the correct times of the controller's life cycle). 
&gt; I just know that, even though I only have one .swift file now, it will expand into multiple classes, and I'm trying to get a grasp on the bare minimums projects use without having to rely on templates with a bunch of empty classes. Create a project from the OS X command-line tool project template. It consists of two files – the project file, and a Swift file. There are zero classes and only two lines of code in the entire thing. 
super.init(imageNamed: "...") without the "@". Anyway the initialisers in swift has some new behaviour and deserves a look: https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html http://ashfurrow.com/blog/swift-initializers
The goal eventually is to have the popup window display a list of available serial ports on my computer. Any port can then be selected in order to send commands to a sketch running on an Arduino microcontroller. I have already come up with the code to handle the serial communication, I just can't figure out these views. I'm trying to consolidate all of the serial management functions into one class so that I can update the list of available ports at any time for example. I went and did a little poking around. I tried the awakeFromNib function in my ViewController class and it created an override function but this didn't seem to change anything. Is there anything else I could try? Or a simple example you may know of for a working solution? I appreciate all of the help, I've learnt a great deal already!
If your class/struct/enum conforms to the Printable category, it uses the property var description: String. 
Implement the Printable protocol: https://developer.apple.com/library/ios/documentation/General/Reference/SwiftStandardLibraryReference/Printable.html
If you are using a class that does not inherent from any other class than you have to write your own print function. -(void)print{ //print the value or description here with NSLog() } if you inherent from NSObject then you can use -(NSString *)description. It will print the contents of the object. You can override it to print what you want also. You can check it out here https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/Reference/Reference.html#jumpTo_12 In one line you use NSLog([myObject description]);
Thank you. I was way over thinking it, and went with your advice on making a function within the class.
That sounds very brittle, both violating the controller's encapsulation by having another class set its title and parsing the title to pull out the page number. Instead of assigning the controller's title from an outside class, why not just have a variable for the page in your controller? then in that variable's didSet put the code to set the title.
Oops. Of course no @.
Thank you! I supose that is not possible use NSMethodSignature directlly in Swift, right? Thats a pitty!! Because in my project in can't use ObjC :(
what about difference. handling nils, Arrays type casting and types. It's really interesting to see core difference of those 2 languages
I've found this to be extremely enjoyable, especially compared to Udemy courses and regular tutorials. I wish I knew how to modify this, though, since having a button to load an image from the Camera Roll would be very much a great way to improve on this Apple swift blog tutorial. 
Thank you all this helped me a lot 
I'm not sure I'm a huge fan of some of these - IMHO, it's preferable to use "real" initialisers. For example, I think `UIColor(red: 1, green: 1, blue: 1)` is better than `let color = "rgb(255, 255, 255)"`. What happens if I write `let color: UIColor = "This is not a color"`?
As far as I can tell, the only issue is that the Swift compiler is barred from referring to `NSMethodSignature`'s interface. There's all kinds of different ways of getting around that with Objective-C, but I'm not sure it's possible with Swift. What's the reason you can't use Objective-C at all? 
Aha, found it. Thank you! It helps a lot (until they fix tool-tip help :( ) I really hope that they will start working more on debugger. It is quite paint to work in swift now. Sometime when I use step out/step into I found that lines are evaluated in some weird order. Don't know if this is only me...
This would be useful for reading in colors from a file or something, not a replacement for in-code colors.
I did not write any of the title setting or either of the controllers code. This was a apple generated single page project. They set the title to a variable that belongs to the controller I am extracting the page from. So I am not breaking any encapsulation myself.
Hey, I'm actually not following any particular tutorials per se, I decided that iOS was the most popular "tutorial platform" based on some searches, and thought iOS was the best choice in case I ever encountered some issues. I do have some saved links for your pleasure, though. Here's a Pastebin: :) http://pastebin.com/ee1igAhW Keep in mind that Swift is still under NDA, so the internet may look a bit sparse for a while. 
This is a great solution and answers the question I asked. I do realize now that my question was indeed poorly worded, I'd like to figure out a solution that avoids explicitely typing the values anywhere. The best solution would be taking the UIButton's text label and and converting the String into a Double or something like that, I believe.
But that thing makes UIColor string literal convertible, you can only use it with string literals. You can't load a string from a file and use that (unless, I guess, you call UIColor(stringLiteral: ...) explicitly, which doesn't make too much sense. Make the whole thing an initializer, eg. `UIColor(cssString: ...)`, and I'm right with you.
I can post the calculator source here once I'm done, if you want to. :-)
The memory address will always change on a recompile, that's normal. 
Why wouldn't it? When you instantiate an object, the operating system allocates memory for it. Where that object resides in memory will depend on what chunk of memory the operating system gave to you. 
&gt; what chunk of memory the operating system gave to you. Sure I guess I'm comparing it to a running Application - whereby the object will occupy the same memory space for it's runtime. I guess the run time in this Stub is just an instant effectively.
&gt; I guess I'm comparing it to a running Application - whereby the object will occupy the same memory space for it's runtime. Sure, but you're talking about a single object in a single run there. If you run an application a second time, it instantiates an object again, and that object gets a new address when that happens. Try simply printing the object repeatedly. You'll get the same memory location each time. It's when you run the application more than once you get new addresses. 
You can do the waiting and movement all with a sequence of SKActions. for example var waitAction = SKAction.waitForDuration(1.0) var moveAction = SKAction.moveTo(CGPoint(x: 10.0, y: 10.0), duration: 1.0) var sequence = SKAction.sequence([waitAction, moveAction]) myNode.runAction(sequence)
While this is technically correct (in Objective-C), the more canonically SpriteKit way would be to use an SKAction.
You're right! Brainfart!
is anyone else having trouble setting this up? am i doing something wrong here? im trying to run the example project and im getting all kinds of errors
I'm generally not very impressed with the quality of the apple templates, they tend to do stuff like this and ignore separation of concerns. I'd change it to the way I described.
The only native library I'm aware of is [swift-bigint](https://github.com/ibiwan/swift-bigint), and that doesn't do division or modulus and obviously doesn't support floating point. Personally I'd be very wary of any pure Swift library for this sort of thing since the language is so new and thus there is no way the library could be battle tested. Your best bet, imo, would be to take an existing C library, of which there are many, and make a simple Swift wrapper for it. If your numbers are 38 digits or less, or you can afford to lose some precision, then [NSDecimalNumber](https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSDecimalNumber_Class/index.html) might also be an option.
titleForState() was exactly what I was looking for. My calculator is finished. Thank you. :-)
Thank you, I will try this later tonight when I can. It looks promising.
There are some nice ObjC wrapped bigint implementations out there too.
Format your code by prepending four spaces to each line. Better yet, push it to BitBucket or GitHub. 
self. refers to that instance of an object in use. so for example, self.currentCard is this.currentCard, not that.currentCard. Or in other words, not new.currentCard, but THE.currentCard. If you want to subtract 1, (i.e, -1), and you use self.currentCard, it subtracts 1 from the value of that card, as opposed to creating a new instance of the currentCard. 
Good luck! They just updated all their videos too!
What is going wrong? Are you getting a crash? 
This did end up working for me. Thanks I had been trying to use something like var moveAction = SKAction.moveByX(CGPoint(x: 10.0, y: 10.0), duration: 1.0)
Thanks a bunch for the pastebin! And yes please post it when you're done! 
The flash cards will go from right to left, but they won't flip from front: to the back:
I'm glad you enjoyed the links! I'll clean up the source and send it to you once I'm done.
I'm having a hard time understanding the flow of your app, here. What specific background mode are you trying to use? Also, why set up the NSTimer in AppDelegate if the only necessary input lies within one of your View Controllers? You may want to set up the timer inside the view controller instead.
Background processing doesn't work that way. In general, your NSTimer won't be called when your app is in background. 
How to create a alarm clock then? Any way to set a function to be called on a specific time?
trying to use applicationWillResignActive to set up a timer so it will run a function on a set time, such as a alarm clock
I do this: UILocalNotification *notification = [[UILocalNotification alloc] init]; [notification setFireDate:[note when]]; [notification setTimeZone:[NSTimeZone defaultTimeZone]]; [notification setAlertBody:[note message]]; [notification setSoundName:[self chimeName]]; [notification setUserInfo:@{kUniqueIDKey : @([note uniqueID])}]; [[UIApplication sharedApplication] scheduleLocalNotification:notification]; 
I don't think iOS will let you do that, only Android
This. Because of the way iOS is sandboxed when your app is in the background, for most intents and purposes it's "gone". Until it is resumed. I think there's maybe 5 minutes that you can have a task running in the background but after that your cut off. 
So the idea here is that any NSTimer will get sandboxed when your app falls to the background, so if you're looking to make an alarm app you set up a notification with a fire date?
You don't really need a custom segue for this. You could just give the controller you want to show an identifier on the storyboard, then from the controller that would normally present the segue do something like this: var controller = self.storyboard.instantiateViewControllerWithIdentifier("myIdentifier") as UIViewController self.navigationController.pushViewController(controller, animated: false) 
You could try turning your XPS into a hackintosh (/r/hackintosh) or do a google search of how to do it. It can be a bit tricky to get going at first. But beware, I have read a couple of stories of people getting their apps pulled that were coded on hackintosh's. A Mac Mini might be your best bet. Apple is likely to update the Mac Mini next week at their Mac/iPad keynote and those are the cheapest Macs you can get. But yes, you do need OSX to run Xcode, which is what you use to develop iOS apps.
Hey! I had the same problem, but only for a month before I got my new Mac as my laptop was quite old. I was able to find this site: http://swiftstub.com/ (it's also linked under the Swift Wiki section with the title Unofficial Swift Online Compiler). It's like an online version of Xcode's new Playground feature. The person who made it works at Apple. You can test out code and stuff on it just like a Playground. Of course it won't have any other functionality of Xcode, and not all features of Playground, but its good for testing and learning. If you still want Xcode you could always install Mac OS X on your dell. (someone else posted a comment regarding that). But performance would be bad if your hardware is not suited for it.
Thank you for this answer. I actually want to learn some programming/coding , anything actually. I learned a little bit of java from the youtube videos and soon forgot it all. I want to master in computer science. when I bought my dell the plan was to sell it for a mac after a few as they were very similarly priced but the price of my computer fell almost by $700 in two months and selling was out of question. These days I am learning linux and I am hoping that learning swift will also help me in scripting. Right now I want to be able to code just as much so I can write an app for myself. I dont know how much programming this is but this is my goal. Thank you again for your answer.
Will look into it. Thank you.
If you're specifically interested in iOS development, I'd recommend Code School's iOS courses: https://www.codeschool.com/paths/ios The courses don't require a local development environment, just a modern browser. I believe the first ObjC course is free, so you can try it out… They don't have a Swift course yet, but figuring out the basics of Objective C and Cocoa development will definitely help you out later on. EDIT: to clarify, you'll still need a Mac eventually to develop real apps for real devices. 
wow this sounds amazing. I will check it out right away and sign up. thank you.
I'm pretty skeptical about "people think ObjC is hard" as a reason to change things, especially things as superficial as syntax. Defining away classes of bugs: useful Improving performance: useful Allowing different algorithms (for example, TCO enables recursive algorithms): useful Dramatic reductions in code size: useful Saving a bit of typing: eh Superficially looking like another language: not interesting
You're discussing features of Swift that largely has failed to materialize.
The only feature (that failed to materialise) I see is "improving performance". Which of the other features are you talking about specifically?
In trying to eliminate certain types of bugs, the design give rise to new types of bugs. The added complexity with initializers is an example. TCO is still broken as far as I know (unless they fixed the issues in 1.1 beta 3) Savings in code is largely eaten up by added complexity with optionals and missing macros. In addition, there are functionality impossible in Swift, and certain types of code are simply enormously cumbersome. (e.g. rumtime dynamic code snd dynamic structures) That does not mean that the issues are unfixable, it's just that unlike the time of 1.0 beta 1, it's bow clear that fixing most holes are very far off.
&gt; I needed it for my finance class as the excel in apple doesn't have the full functionality. You're mixing up two different things here, the hardware and the software. You can run Windows on a Mac, either by dual booting or by using a virtual machine. If you run Windows, then you can run the Windows version of Excel. The easiest way for you to work with software that requires Windows and software that requires OS X is to get a Mac and run the Windows software with virtualisation software like VirtualBox, VMWare, or Parallels. 
Another not popular option will be Remote Desktop to a mac, I believe some websites offers that for a few dollars a month. There might even be a free trial
&gt; Add everything related to Core Data stack, Core Data Saving support to AppDelegate: No, create your own class and put the data management in there. I know the Apple templates dump it all in the application delegate, but that's not what the application delegate is for, it's for responding to application-level events. The Apple templates are just designed to get you up and running as quickly as possible, they aren't there to demonstrate good application architecture. 
I'm actually rather surprised nobody has mentioned this yet--you can virtualize it. Any modern machine comes with the virtual machine extensions that make running a "guest" operating system fast and comfortable. Now, Mac OS X does have some properties that make it more than just 'click click boom' to get it set up on a VM. That's hardly an issue though: you can easily find pre-setup files that are ready to be loaded into a copy of VirtualBox or VMWare and booted. Examples: https://www.youtube.com/watch?v=Nod7cpxzxLc https://www.youtube.com/watch?v=ZVpp9RcSPMc
I would think so, you can capture some data from the M7 motion chip. That would require a 5S or newer.
It's not hard, it's just annoying, verbose, obtuse, obnoxious, unnecessary beyond developing for Apple. Swift is far more enjoyable to write. As I heard from another programmer "they took the worst of C and the worst of SmallTalk and created Objective-C."
I wasn't talking about Swift. I was talking about what I focus on (and what I believe others should focus on) when comparing languages. Kinda fed up with "it lets me type less therefore it's better". That said, I think Swift is a clearly unfinished but solid attempt at a lot of meaningful improvements. Guaranteed TCO isn't one of them though.
My best advice is to learn swift because you need it, not just because you've been swept away by the language. There are plenty of other languages to learn that will teach you more about programming than swift.
I did actually thought of that. I run linux on vm ware right now. But a lot of people told me that you cannot run Os X on vmware. But this video is awesome. Thank you.
Is your project and/or derived space on a non-spotlight filesystem?
Read the documentation for CoreMotion.
The article is more of a reaction against the pro-Swift posts (by beginner -&gt; middling programmers) that seem to assume that it was only though writing a language with an entirely different philosophy (compared to ObjC) could one get simpler syntax. Also, a syntax update would be useful for any further discussions on how to improve an imagined ObjC 3.0 with actual features. ObjC 2.0 didn't exactly clean up the language.
My friend runs OS X in a VM pretty smoothly, also mostly for xcode
This is far from a new idea. This "ObjC 3.0" style syntax had been suggested many times. In particular around 2004/2005 when ObjC 2 turned out to be merely a very mild set of syntactic sugar additions, the discussion forums were full of people making exactly these types of suggestions. Let's assume you could make this syntax work (it would be incompatible with Objective-C++ but let's ignore that). This type of syntax change would make it a little nicer to use Objective-C but the problem is that you're breaking syntactic compatibility for no real semantic gain, just a mild syntax improvement. Even on the syntax level, you wouldn't get Swift's lack of headers without breaking C compatibility too. So you're stuck with changes that offer none of Swift's semantic and higher-level structural improvements. There would be no safety advantages. The language still has nil object references, still has pointers, still has uninitialized ivars, doesn't prevent invalid downcasts or reinterpret casts. Objective-C's duck typing and highly abusable message send system are fun to play with but it's prone to abuse and makes the entire objc_msgSend system very fragile (e.g. the Position-Independent-Executable changes in iOS 5 that break objc_msgSend on earlier versions of iOS). The previous paragraph contains *all* of the most common Objective-C crash bugs. You might think "this never happens in my code". That's fine because code *shouldn't* crash. But the reality is that when you do get a crash in Objective-C, it's 90% likely to be due to one of these – which Swift either fixes or improves detection of the source of the issue (rather than segfaulting on the follow on effects). ObjC 3 would offer no language improvements. Can't use generics, can't extend structs, can't add methods to any data type, can't use higher order functions over non-object types. Sure, you don't *need* these things but lots of people like them. Swift does not make them mandatory and you can ignore them entirely. But they're nice to have if you're that type of programmer. ObjC 3 would offer no possibility for efficiency improvements. Can't optimise method calls to functions, can't elide methods, can't use closure elision, method elision copy elision. Sure, Swift is still getting its act together on this front but the possibility for performance approaching C++ rather than Java is a possibility for Swift but impossible for Objective-C (unless you forgo method calls altogether).
negative.
No problem. I figured this out not too long ago and was confused as well since I come from an android dev background. Good luck!
Hmm...it seems you might be overthinking this calculator a teeny bit. What if you treated those buttons like a very limited 'keyboard', and then appended each button's title to a text field? Then when the user taps the equals button, you evaluate the string using an [NSExpression](http://nshipster.com/nsexpression/) func didTapEquals() { let expressionString = self.textField.text let expression = NSExpression(format: expressionString) let value = expression.evaluateWithObject(nil, context: nil) println(value) }
You can dual boot on a Mac or run parallells so if you need the Windows version of Excel it isn't really a problem. The only reason to have a Windows only PC is that they are cheaper relative to the amount of CPU, memory and hardrive you get. One option might be to get a second hand mac mini. They are not that expensive and you can use your existing mouse, keyboard and PC screen.
Hey, I had the same problem. I eventually noticed that if images were to large they would not load &amp; cause the today widget to freeze. Try resizing your images a smaller size and see if they load as test. You can also try compressing the images as an alternative or together with the resize method. I wrote the following code to resize them as needed: func resizeImage(newWidth: CGFloat, newHeight: CGFloat, fsImg: UIImage) -&gt; UIImage { let rect = CGRectMake(0, 0, newWidth, newHeight) var newSize = CGSizeMake(newWidth, newHeight) UIGraphicsBeginImageContextWithOptions(newSize, false, 1.0) fsImg.drawInRect(rect) var resizedImg: UIImage = UIGraphicsGetImageFromCurrentImageContext() UIGraphicsEndImageContext() return resizedImg }
Hey! You seem to be pretty close to making it work. This code does the trick: @IBAction func loadPhoto(sender: AnyObject) { let ImagePickerC = UIImagePickerController() ImagePickerC.delegate = self ImagePickerC.sourceType = UIImagePickerControllerSourceType.PhotoLibrary ImagePickerC.allowsEditing = true self.presentViewController(ImagePickerC, animated: true, completion: nil) } func imagePickerController(picker: UIImagePickerController!, didFinishPickingMediaWithInfo info: NSDictionary!) { self.dismissViewControllerAnimated(true, completion: nil) println(info) //I do this just to have a look at what all info there is, since I'm pretty new to iOS dev too, and the more you know the better let selectedImage = info[UIImagePickerControllerOriginalImage] as UIImage photoImageView.image = selectedImage } You can compare your original code with this to figure out the few differences to making it work. Let me know if you need any help though.
For your specific example // Define JSON string var JSONString = "{\"code\":\"USD\",\"name\":\"US Dollar\",\"rate\":376.71}" // Get NSData using string if let JSONData = JSONString.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false) { // Parse JSONData into JSON object var parsingError: NSError? if let JSONObject = NSJSONSerialization.JSONObjectWithData(JSONData, options: nil, error: &amp;parsingError) as? [String: AnyObject] { // If the parsing was successful grab the rate object var rateObject: AnyObject? = JSONObject["rate"] // Make sure the rate object is the expected type if let rate = rateObject as? Float { println("rate is \(rate)") } } else { // There was an error parsing the JSON data println("Error parsing JSON: \(parsingError)") } } However parsing JSON the vanilla way can lead to a ton of unwrapping and checking. Check out libraries such as [this one](https://github.com/SwiftyJSON/SwiftyJSON) which can makes things *much* easier Using that library we can shorten this to // Define JSON string var JSONString = "{\"code\":\"USD\",\"name\":\"US Dollar\",\"rate\":376.71}" // Get NSData using string if let JSONData = JSONString.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false) { var JSONObject = JSON(data: JSONData) var rate = JSONObject["rate"] println("rate is \(rate.numberValue)") }
Ah awesome thanks!
well, from what i can see (just looking at this briefly), the viewcontroller is dismissed first, and then the photoImageView is updated.. which makes way more sense than first updating the photoImageView and then dismissing the viewcontroller. i wonder how this'll work on my phone, just compiling it.. the loadPhoto i'm gonna have to really compare with what I posted.! Well, it works perfectly! Now I just gotta find out how to change an image to "Aspect Fill" after loading it. but I suppose I should be able to figure that one out. Thank you so much for your help! :) 
You're probably forgetting either the ! or the ? operator when accessing the dictionary. This is necessary because the Swift compiler cannot be sure at compile time whether your dictionary truly contains an item with the specified key, so a lookup yields a nullable type by default. var dict = [String: [UIColor]]() dict["primary"] = [ UIColor.redColor(), UIColor.greenColor(), UIColor.blueColor()] var primaryCount = dict["primary"]!.count Change dict["primary"]!.count to dict["primary"]?.count if you're not 100% that the dictionary contains the specified key. 
 // Create Dictionary var myDictionary = [String: [MyClass]]() // Add entry of array with three instances of MyClass for key example myDictionary["example"] = [MyClass(), MyClass(), MyClass()] // ... Later // myDictionary["some-key"] returns an optional, so we need to make sure that there's non nil result if let example = myDictionary["example"] { println("there are \(example.count) items for the key \"example\"") } I image you did something like var example = myDictionary["example"] println("\(example.count)") But that can't be done because example is of type [(MyClass)]? which means that it needs to be unwrapped before it can be used
I have a 30x30 pix image and not sure why the size will be problem. I will still try this. Thanks for your help. Would be great if you can share what code you have used for displaying the image
Check this out : http://stackoverflow.com/questions/26219488/repeating-a-background-image-in-swift 
For me it was definitely the odd syntax. I think Apple could have done 4 things to make obj-c more palatable for devs. 1 - adopt dot notation syntax for both methods and properties 2 - implement better language constructs i.e. static typing, generics, etc 3 - do away with header files/interface sections and use public, private, internal keywords 4 - [make property declarations more straight-forward.](http://stackoverflow.com/questions/11478038/reason-to-use-ivars-vs-properties-in-objective-c) The whole ivar-synthesize thing is a bit confusing. In other languages I can understand property syntax/declarations in about 30 seconds but I'm still confused as to how they work with obj-c (granted my only experience with obj-c is a few intro tutorials) But as someone coming from a .Net background these 4 changes would've gone an extremely long way in making obj-c easier for me to learn and use.
I think you've found a bug, file a radar! You could also declare your property as var cityPlaceMark: CLPlacemark? then set it like CLGeocoder().reverseGeocodeLocation(manager.location, completionHandler: { (placemarks, error) -&gt; Void in self.cityPlaceMark = placemarks.first as? CLPlacemark }) which debatably looks a little nicer!
I hate when beginning articles on programming mention inheritance. Generally speaking, composition is far more maintainable than inheritance. In modern code, achieving flat inheritance hierarchies with lots of protocols and composition is more common than large type trees. Inheritance is one of 3 ways to achieve polymorphism, protocols and command interfaces being the other. Inheritance makes it very easy to break something lower down in the hierarchy when you change anything in the base classes. It breaks encapsulation. Pulling the different parts out into a bunch of immutable policy objects, then constructing your inherited classes out of these component parts is a much more robust system than plain inheritance. Just using protocols is most of the time the simple, easy and all you need solution. Swift doesn't currently allow for partially implemented protocols, so policy objects (objects that implement part of the protocol) are a best practice, farming out most if not all of protocol compliance to policy objects kept in your class.
Assuming you're using the default provided CoreData template from Xcode, change the line var managedObjectContext = NSManagedObjectContext() to var managedObjectContext = NSManagedObjectContext(concurrencyType: .MainQueueConcurrencyType) Then try func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool { self.saveLoginData("test one") println("\(self.loadLoginData())") self.saveLoginData("test two") println("\(self.loadLoginData())") // Override point for customization after application launch. return true } // returns accessToken string from first LoginData entity if exists func loadLoginData() -&gt; String? { var accessToken: String? self.managedObjectContext!.performBlockAndWait { () -&gt; Void in // Request LoginData entities var request = NSFetchRequest(entityName: "LoginData") // Perform fetch var loginData = self.managedObjectContext!.executeFetchRequest(request, error: nil) // Cast the results as the proper type if let results = loginData as? [LoginData] { // If there was a result we'll capture the access token. Otherwise it will remain nil var data = results.first accessToken = data?.accessToken } } return accessToken } func saveLoginData(token: String) { self.managedObjectContext!.performBlockAndWait { () -&gt; Void in // Lookup existing LoginData entity to update var request = NSFetchRequest(entityName: "LoginData") var loginData = self.managedObjectContext!.executeFetchRequest(request, error: nil) // Case results as correct type if let results = loginData as? [LoginData] { // If there was an existing entity, update it's value with the new token if let data = results.first { data.accessToken = token } else { // If there wasn't an existing entity, create a new one and set it's token var data = NSEntityDescription.insertNewObjectForEntityForName("LoginData", inManagedObjectContext: self.managedObjectContext!) as LoginData data.accessToken = token } } // save changes self.managedObjectContext!.save(nil) } } Which will work in the way you're trying to do things. That being said, the keychain would be a much better place to store access tokens, and this is also a sort of janky way to use CoreData. I'd recommend looking into the keychain for this problem, and reading up more on CoreData and looking at more examples of good core data setups like [this](http://robots.thoughtbot.com/core-data) article has.
Learn Objective C. The entire suite of Libraries that Swift relies on are written in Obj-C and C. Many things you might want to do will be very frustrating if you don't have a decent foundation in these languages. If you've already learned swift, then learning Obj-C is basically just learning the syntax, which, while odd, is not terribly complex. Swift was specifically built to play nicely and follow the same paradigms as Obj-C, so it shouldn't be difficult.
In objective c your property for cityPlaceMark would have been "initialized" to nil when the view controller was created. This makes it easy to check and see if you have one, and act accordingly in your code. In swift, if you just make the property var cityPlaceMark: CLPlacemark your view controller is going to need to set it's value during it's init. This doesn't make a lot of sense because you likely don't know the users location at that time. In addition, the user could have denied location access, meaning that you'd never know it. So you need a way for it to be a CLPlacemark value OR nil. This is accomplish by optionals in swift. So by declaring your property as var cityPlaceMark: CLPlacemark? you're saying that it's value could be a place mark OR nil. Which works similar to how it would have in Objective C. What you've done is initialized the cityPlaceMark property to a "blank" CLPlacemark. This works, but how do you determine if this place mark is your "placeholder" one or the "real" one from the location manager? Using an optional property allows you to have an nil place mark while you're still asking for it (and KNOW that you still don't have it). I'm not the best at explaining these kinds of things, so check out what apple says about optionals [here](https://developer.apple.com/library/prerelease/mac/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html) and hopefully that'll help a little! 
I tried that...........the background repeats three times then goes to the grey background and then loops that over and over. 
Thanks, I'll read up. Can you recommend a good article on using keychains? (I'm going to google regardless)
Check out [this](https://developer.apple.com/library/ios/samplecode/generickeychain/Introduction/Intro.html#//apple_ref/doc/uid/DTS40007797-Intro-DontLinkElementID_2) example from Apple! The keychain API is somewhat cumbersome, so you'll see most people (including Apple in that example) make some sort of wrapper around it. Search around on github and such to find a nice wrapper if that suits you. Here's [another article](http://matthewpalmer.net/blog/2014/06/21/example-ios-keychain-swift-save-query/) that has some good pointers on using the keychain with swift. 
So linking this function to the buttons would put it in a string that can be evaluated as a value? I dont understand NSExpression or anything of that sort. Especially &gt; let value = expression.evaluateWithObject(nil, context: nil) I guess thats what I'll start reading. Thanks 
There's a follow up now: https://swiftopinions.wordpress.com/2014/10/13/objc-3-0-beyond-a-new-syntax/
I don't really get this. What keeps Swift from being your ObjC 3.0? I read this stuff and think to myself "so... like swift?". Swift's backwards compatibility also works exactly like the author's idea of ObjC 3.0 - different class suffixes, but you can import either one in the other. 
No problem! NSExpression is a fairly flexible expression parser. So when you create an NSExpression from a string, it can evaluate that string.
Thanks, this is what I was doing wrong. 
 * For better or for worse, Swift has an entirely different runtime model than ObjC * Swift features cannot cross back into C/ObjC/C++ * Several of the features are missing from Swift and are unlikely to surface anytime soon. * Some features are dynamic and difficult to work with from a static lang like Swift But the main point of this thought experiment is to list features that could almost trivially been implemented on top of Clang, and consequently mean magnitudes less work and less bugs. The only thing not possible is the strongly enforced typing.
 var firstPlaceMark = CLPlacemark() is making firstPlacemark be of type CLPlacemark, which basically means that this property will *always* have a CLPlacemark value, never nil. using var firstPlaceMark: CLPlacemark! is making firstPlacemark be of type CLPlacemark! which means that firstPlaceMark could have a CLPlacemark in it, or it could have nil. This works fine for your situation, but makes it easier to accidentally call a method on nil. If you declared it this way and ran self.firstPlacemark.location and self.firstPlacemark was nil, the application would crash. The compiler would give you no warning of this potential crash because by declaring the property as CLPlacemark you're forcing an unwrapping of it's value. You'd have to remember to check against nil every time before you use it yourself. By declaring it as CLPlacemark? you're allowing the variable to be nil or a CLPlacemark, just like with CLPlacemark!, but now the compiler can prevent you from accidentally calling a method on nil. In Objective C sending messages to nil is fine, but that's not the case in swift. If you ran self.firstPlacemark.location with it declared this way your application wouldn't compile. You'd have to either do if let placemark = self.firstPlacemark { placemark.location // only happens if self.firstPlacemark isn't nil. placemark is of type CLPlacemark instead of CLPlacemark? } or do self.firstPlacemark?.location // only calls .location if self.placemark isn't nil. This is called optional chaining So in short, if you want something to sometimes be nil and sometimes contain a value, use SomeClass?. That's the safe way to do it. Hope that helps!
Got it. Looks like I should be using ? more, and a lot less ! Thanks!
Hey have you tried "Hello World!" ??? hehe
- Swift uses the ObjC runtime? - Neither can your proposed language - I see tons of stuff that cannot possibly be directly compatible with C, for example. The @ in front of NSString literals has a purpose - it differentiates them from C strings. How could the compiler decide which to use when you just use quotation marks for both? Unless ObjC 3.0 also is "only" able to call C stuff, like Swift. But then, Swift has what you want. (Unless I misunderstand what you mean with "cross back"). - Maybe there's a few features missing in Swift, but not too many. - Swift isn't dynamic, that's a legit difference. Finally, what you call "trivially" to implement are pretty major changes that really don't seem that trivial. I'd argue that Swift really shouldn't be that much harder to do than ObjC 3.0. Maybe even easier if ObjC 3.0 actually has more features than Swift.
If you desperately want this, implement it yourself. Clang is open source. Apple are never going to do this. They've made their language trajectory clear. Continually posting about "Objective-C 3.0" to a subreddit clearly labelled "Swift" appears childish and petulant.
I missed the "all" bit, though you can still close "all" apps there, just not through a single gesture/button. For most apps, as I recall, iOS just saves application state to disk and restores it when an application is relaunched. As for apps actually using resources, that is another matter, and IIRC the OS provides a mechanism to control that aspect of apps.
 * Swift uses the ObjC runtime (partially) but has a different runtime *model* - most dispatch is static or virtual dispatch. * Obviously we'd need a new type of.m files, just like we have .mm for ObjC++. Eero already shows how this can be done. Traditional .h files can be mixed with ObjC3.0 specific either using pragma or a new header file type. * I would say that there are lots of features missing. In fact, I'd go so far as to say that among the features we *do* have, many of them are broken as well. There is no real timeframe in which we will see fixes surface, not even something as basic as avoiding full project compilation on any change to a Swift file (or header imported by Swift). Swift is difficult because: a) offers a new runtime model b) has very strict handling of optionals etc which has to be bridged by the runtime c) reified generics that has to work correctly d) attempts to bridge and seamlessly merge structs and objects in its model, so that generics can handle both e) introduces a different ARC model, which needs bridging to ObjC f) dependent on correct type inference. A tiny change can propagate chained re-evaluation across the project, simple implementations are notoriously inefficient etc. etc. 
So part of the problem I'm running into is that this is in a struct so there's no managedObjectContext. If I get it from t he app delegate like so: var appDel: AppDelegate = (UIApplication.sharedApplication().delegate as AppDelegate) var context: NSManagedObjectContext = appDel.managedObjectContext! it seems to just not work.
Swift is not beta This is a policy object http://en.m.wikipedia.org/wiki/Policy_pattern#undefined
https://developer.apple.com/library/ios/documentation/MessageUI/Reference/MFMessageComposeViewController_class/ It has full swift documentation. Basically, you just set up the message, set the delegate and present the view controller modally. Found this with a quick Google: https://github.com/hectorlr/Reddit-Scan-Swift/blob/master/Reddit%20Scan%20Swift/Views/ShareCard.swift I'm on my phone or I'd write up a quick snippet, but it seems pretty straight-forward. Unless you dig into private APIs, you cannot programmatically send it without user intervention.
An important thing to keep in mind when learning swift is that it's basically just a change in syntax when it comes to UIKit stuff. I suggest you at least learn the basic Objective-C syntax so that you can easily convert the Obj-C code samples to Swift. import MessageUI.MFMessageComposeViewController // or just // import MessageUI class ViewController: UIViewController, MFMessageComposeViewControllerDelegate { // prepend this function with @IBAction if you want to call it from a Storyboard. func launchMessageComposeViewController() { if MFMessageComposeViewController.canSendText() { let messageVC = MFMessageComposeViewController() messageVC.messageComposeDelegate = self messageVC.recipients = ["1111111111", "2222222222"] messageVC.body = "hello phone" self.presentViewController(messageVC, animated: true, completion: nil) } else { println("User hasn't setup Messages.app") } } // this function will be called after the user presses the cancel button or sends the text func messageComposeViewController(controller: MFMessageComposeViewController!, didFinishWithResult result: MessageComposeResult) { self.dismissViewControllerAnimated(true, completion: nil) } } P.S. You can see Swift/Obj-C documentation here: https://developer.apple.com/library/ios/Documentation/MessageUI/Reference/MFMessageComposeViewController_class/index.html 
Objects in Swift are instantiated like this: var someClassInstance: SomeClass = SomeClass() There is no other way (of course, the initializer can have parameters.) Though in some cases there will be class/static methods that return instances or other methods that create new instances, ultimately, the SomeClass() idiom is reached (or bridging to some other library is done, which of course is outside the scope of Swift syntax.) So anyway, in your example it would probably look something like: emailField.addEmailVerification(MyAppEmailVerification()) As a side note, what decade are you finding code from where "new" is still in use? It has been the wrong way (in almost every case) to go about object initialization in Obj-C for a long time.
 emailField.addEmailVerification(MyAppEmailVerification()) Since `[NSObject new]` is short for `[[NSObject allow] init]` and you don't need to call `alloc` in Swift, you just initialize it.
Hi, It look like nice addition, but I am not able to compile it in latest GM of xCode 6. I am having issues with RegEx class (enum in your code). Am I missing something, or Apple changed something again :)
While you make a fine argument for the general case, the fact is most of Apple's libraries make heavy use of inheritance. For example, there are no UIView or UIViewController protocols. They are concrete classes. If you want to use Cocoa or Cocoa Touch, you're going to need to understand how inheritance works. I think it's entirely appropriate for it to be discussed in an intro guide for those trying to get into programming through Swift.
Understand how it works most certainly. Understand to use it rarely: also should come across.
Geez, it's a joke ladies, lighten up. - points? Come on.
You can use the [MFMessageComposeViewController](https://developer.apple.com/library/ios/documentation/MessageUI/Reference/MFMessageComposeViewController_class/index.html) to initiate a text message. The UIViewController assigned to the view you want the message to initiate from should import MessageUI and conform to the MFMessageComposeViewControllerDelegate protocol. That means it implements the messageComposeViewController function which fires after your user acts on the sms modal screen. import UIKit import MessageUI class OnLocationViewController: UIViewController, MFMessageComposeViewControllerDelegate { @IBAction func sendText(sender: UIButton) { if (MFMessageComposeViewController.canSendText()) { let controller = MFMessageComposeViewController(); controller.body = "Text Message Body Here"; controller.recipients = ["(415) 555-4387"] controller.messageComposeDelegate = self; self.presentViewController(controller, animated: true, completion: nil); } } func messageComposeViewController(controller: MFMessageComposeViewController!, didFinishWithResult result: MessageComposeResult) { ... handle sms screen actions } }
Please post some code
shoot me a DM and i'll help get you started
it's our organization thumbnail on github
Added one
What I did first: // theView.backgroundColor = UIColor.blackColor() // theLabel.textColor = UIColor.whiteColor() second: if theView.backgroundColor == UIColor.blackColor() { theView.backgroundColor = UIColor.whiteColor() } else { theView.backgroundColor = UIColor.blackColor() } if theLabel.textColor == UIColor.whiteColor() { theLabel.textColor = UIColor.blackColor() } else { theLabel.textColor = UIColor.whiteColor() } i will now attempt to cycle through colors. one sec
Ok first attempt to scroll through label colors: index++ theLabel.textColor = arrayOfColors[index] error after last array count. must loop second: for index = 0; index &lt;= arrayOfColors.count; index++ { } theLabel.textColor = arrayOfColors[index] nope didn't work. trying something else
I figured it out. I fucking figured it out and it feels fantastic. to cycle through arrays for label index++ theLabel.textColor = arrayOfColors[index] if index == arrayOfColors.count - 1 { index = -1 } on to the view background
Try https://developer.apple.com/Library/ios/documentation/Cocoa/Conceptual/DatesAndTimes/Articles/dtDates.html
You need to position the images in the scrollview. The scrollview doesn't lay out images for you. The way it is now, all images have origin (0,0) and overlap, that's why you only see the last one. You can't scroll the thing because you didn't set the content size, like /u/javawag said.
very nice dude, congrats on solving it for yourself. :) I would probably update the index after looking up the colour from the array... theLabel.textColor = arrayOfColors[index] theView.backgroundColor = arrayForView[index] index = (index + 1) % arrayOfColors.count The '%' is a modulo function. It gives the remainder of a division. Congrats again.
If I understand it correctly, the dispatch related stuff is only true if you don't subclass NSObject. So you get the choice, if you want, you can have the same message passing and swizzling and what not in Swift. For the things that make Swift difficult: those are good points, but most of them add significant value, too. Optionals are nice, working with value types in ObjC was terrible, type inference is obviously totally nice. About the missing/broken features: The language itself is fine for the most part I think. It has all of the features listed in the article, except 11 and 6 (and Swift does higher order functions fine, just differently). The stuff that sucks are the tools imho (Xcode, the compiler), and those can fortunately be fixed. It would be way more problematic if there were lots of issues with the language itself.
Ahh yes, I also meant to mention this!
Regarding dispatch - the only things 100% compatible with dynamic dispatch right now is things that are visible to the ObjC runtime - i.e. no Swift generics, not structs, not enums. This is a very severe limitation in practice. All of the additions to Swift are features that in theory are nice, but for Swift turns out to have problems in practice. The Optionals are a great example. This is not to say that the feature in itself is bad. The idea works nicely in Java to Haskell. However for Swift we constantly run into the need for either nesting or the unsafe automatic unwrap. Other features have similar weaknesses. And higher order messaging is quite different from higher order functions.
I've done a little more work in this area, and I've realised that `NSClassFromString` doesn't stop you from accessing `NSMethodSignature` either. So this works without needing to drop to Objective-C: if let NSMethodSignature : AnyClass! = NSClassFromString("NSMethodSignature") { if let signature = NSMethodSignature.signatureWithObjCTypes(methodInfo.types) { // signature is an instance of NSMethodSignature containing the information you need. } } 
`xcrun` runs development tools. It's just an abstraction to make accessing the developer tools path-independent. It doesn't do anything particular itself. You can usually get information on command-line utilities with the command `man xcrun` or similar. 
For anyone interested, we have a subreddit set up for discussion of problems at /r/exercism There's also a reddit team, if you're interested in that.
I believe Mac apps will be available to build when the new OS is launched, unless you have a paid developer account 
You need the Xcode 6.1 beta/GM candidate to develop OS X apps. I wouldn't sweat it though, it's gonna be released quite soon (maybe on Thursday at that Apple event).
correction... open up the `.xcworkspace`
Just a minor tip for SwiftyJSON: You can unwrap the JSON value when var rate is declared. In my opinion it's better to have the raw value than to have to remember to unwrap every time. Refactored snippet: var JSONObject = JSON(data: JSONData) var rate = JSONObject["rate"].intValue // AFAIK intValue will return an Int OR a Float println("rate is \(rate)")
Try deleting the ModuleCache folder in DerivedData as well. 
Thx a ton bro that worked great!!
A static method can be used to call a function on a class without having to create an instance of that class. You only have to use the class name to gain access to the method (as long as the method is not marked private it will be accessible). An instance method can only be accessed through a created instance of that class. Same rules apply for scope. Once you have created an instance of the class the method is available as long as it is not marked private. class Car { //using "class func" keywords makes a static function. //Methods scope is internal by default so it is visible to all other classes in the //project class func honkTheHorn() { println("Beep Beep") } } class Driver { //driveCar() is an instance method func driveCar() { //static class being called Car.honkTheHorn() } } //here we must first create an instance of driver before we can call driveCar() var driver = Driver() driver.driveCar() Hope that helps
Not a lot of info here to be able to help. I wrote a tutorial on how to get corelocation working with swift http://sledgedev.com/corelocation-ios-8-and-swift/ maybe it will help. Usually EXC_BAD_ACCESS occurs when the object your are referencing has been released from memory causing you to use a pointer that isn't there
That's because text fields contain text, not numbers. The plus operator concatenates strings when used with string arguments. You need to convert the strings to numbers first. If you want integers, for example, you can write `someString.toInt()`. Note that that returns an optional: The string might not contain an integer, so the whole thing could fail. You could write the code like this (it's a little unwieldy, but unfortunately, when dealing with multiple optionals, Swift is that way): if let first = self.firstNumber.toInt() { if let second = self.secondNumber.toInt() { self.answerLabel.text = first + second } else { self.answerLabel.text = "Error: second number invalid." } } else { self.answerLabel.text = "Error: first number invalid." } If you just want any textfields that can't be converted to a number be interpreted as 0, it's a little easier: let first = self.firstNumber.toInt() ?? 0 let second = self.secondNumber.toInt() ?? 0 self.answerLabel.text = first + second If you have troubles understanding the `if let` and `??`, look into optionals.
If the timer is a local variable in that method: you can't, there's no way to access the timer from outside. If you want to access the timer, put it in a property of that class, and use that to access it.
Sure. Just post them here.
[This is a great guide] (http://www.raywenderlich.com/76436/use-uiscrollview-scroll-zoom-content-swift) which really helped me. There's a full example project available for download. And it's written in swift! Make sure you set the content size of the scroll view to be (scroll view width) * (number of pages). And you'll need to set the frame of each image with different values for x to ensure they are separated, rather than just adding them all at the same spot.
We need tags such as 'question', 'feedback', 'bug', etc, I am not certain on the categorization although I believe it can help organize things.
Learn obj-c, then learn swift. Believe me, you'll be happy you did. If you already know obj-c, swift should be extremely intuitive .
Don't forget that along with the swift standard libraries you get all the cocoa stuff. NSJSONSerialization, NSXMLParser, and the *tons* of Objective-C libraries and parsers are available to use in swift as well. There's also a lot of pure swift libraries coming out these days as well too. Check out [trending swift repos](https://github.com/trending?l=swift) on github and you'll find cool things like [SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON) and [AlamoFire](https://github.com/Alamofire/Alamofire).
I get 'UITextField' does not have a member named 'toInt' on this line: if let first = self.firstNumber.toInt() { edit: this is my code with your code added: http://pastebin.com/3CSGMRD0
&gt; put it in a property of that class, and use that to access it. What does this mean?
now i'm really curious because from what I've been told, they both have steep learning curves. so why would i learn something i'd never use? 
awesome!! i will post some questions tomorrow when I've exhausted every resource i can find.
A couple of suggestions: - You're not using a subclass of an NSManaagedObject - That would be more desirable than working with a plain old NSManagedObject - You name an Entity with a plural - Users password? Or User Password? An instance of an object has those attributes. A password belongs to a single user.
I disagree. I personally don't like obj c, where as I really like swift. Swift is a modern language, where obj c is quirky and outdated. /personal opinion 
Because you Will definitely use Objective-C ;-p 1. most Apple frameworks need objective-C or some other c knowledge 2. Swift is basically Objective-C without message passing (a shame) with a different syntax 3. Some things are simply not possible in Swift
I don't know about everyone else, but I'm a but lost as to what exactly you mean. What are you streaming, from where to where? What do you mean by "capture?" What do you mean by ignoring what's on top?
I got 8 years of Swift experience.
First you have to delete the two `var` declarations in the beginning, since you're declaring them in the `let` statements. Second, you need to add `.text` in order to access the text/string property of the UITextField objects. And since they're optional, unwrap using `.text!`: if let first = self.firstNumber.text!.toInt() { if let second = self.secondNumber.text!.toInt() { Edit: You'll probably run into type issue with setting the answerLabel to the result, since it expects a string but you're giving it an Int. Easily fix this using string interpolation: `self.answerLabel.text = "\(first + second)"` 
Sorry for that, I hope i make the question a bit more understandable. 
Swift is entirely dependent on libraries based in Objective-C to accomplish just about anything of value. The two core libraries, Cocoa (OS X) and Cocoa Touch (iOS) are still written entirely in Obj-C (with some pure C). They use Obj-C/C paradigms and conventions. The vast majority of examples to learn these libraries will be in Obj-C. Very, very few existing code bases have been ported to Swift yet. If you want to learn to develop for Apple devices, then, at least for now, knowing Obj-C will be hugely helpful to you. These libraries also constitute the bulk of the learning curve when it comes to iOS/OS X programming, so understanding them in one language will make the move to the other language much easier. There's also the fact that Swift is still a very new language: there are still bugs and things that don't work quite right, the compiler can give vague or misleading errors, Xcode is more unstable, etc.
Since the two declarations are in if statements, the !s aren't necessary right? Oh and another way to convert to string is to use String(), e.g. String(first + second) It'd look cleaner in this case imo.
Regardless of whether you like it, Obj-c code is extremely useful and commonly used so if you want to make great apps using a lot of the well known frameworks, objc is your best bet right now . I am also not a fan of it due to its unfortunate aging.
Selectors are just a method name. They don't keep any context information about objects or types. So for example take the following selector: Selector("doSomething") This could be used to call a method on any object that has a method named doSomething. So how do we actually get the Selector to its destination? This is where the target argument comes into play. A common convention in Cocoa is Target-Action. This involves invoking an action on the specified target. The selector in this situation is acting as the action. So what you would actually do is let X = myClass() NSTimer(fireDate: when, interval: 0, target: X, selector: Selector("method"), userInfo: nil, repeats: false) Hope this helps.
didn't swift just come out the beginning of this year?
Use the twitch API? I'm new at this. I do know the twitch API is able to do 50% of this
These are properties: https://developer.apple.com/library/ios/documentation/swift/conceptual/swift_programming_language/Properties.html You just assign your timer to a property (`self.timerPropertyOrWhatever = yourTimer`). Then you can later access the timer via `yourClassWithTheTimerProperty.timerPropertyOrWhatever`. :-P
Try http://www.spritekitlessons.com , lots of Swift tutorials all with SpriteKit. 
You don't have to track the current value as variables necessarily. Your view controller is supposed to be part of the transition to page 2 (I"m assuming you are using a segue) and can then set the current value of the picker view components into your second view controller.
Thanks for the read!
We have tags, albeit 'feedback' and 'bug' are missing in place of 'Help!". I'm not sure how users implement them into their posts prior to posting but I think some have figured it out. Would you be able to take a look? As far as I know it's turned on for users use, but perhaps I am wrong. I added them a couple weeks back and have tried to stay on top of tagging when online.
You are going to need to download the source code from git hub and add the files to your project. Once added to your project you will need to create a Bridgining-Header if your project doesn't have one, and then you will be able to add the extensivecell import to this bridging-header and use the class in your swift file.
maybe we could have a pinned FAQ post. I just posted a question on how to keep source kit from crashing and got some great feedback and I'm sure that in a weeks time someone else will probably have the same question. So I'm thinking it would be beneficial to others to be able to find common questions like that easily. If anything it would help to avoid the "which-should-I-learn-first-objc-or-swift" questions - lol
Just have some `enum` or other value associated with the view that you want to drag onto the photo. When the view is released within the bounds of the photo, check that value, and apply the filter to the photo.
I'm not sure if this is causing your problem or not but from looking at your code there is no reason for currentTemp to be an optional since it always gets initialized. Try changing it to: var currentTemp : Int! if there is a chance that the json will not have a value then you can use: currentTemp = json["currently"]["temperature"].int ?? 0 that way you ensure currentTemp always has a value.
Look up [NSNotificationCenter](https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSNotificationCenter_Class/). TL;DR // In your UIViewController subclass // In init method [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(applicationWillResignActive:) name:UIApplicationWillResignActiveNotification object:nil]; // In dealloc [[NSNotificationCenter defaultCenter] removeObserver:self]; // Somewhere in your class - (void) applicationWillResignActive:(NSNotification *)notification { // Code to run when application resigns active } Also just to note, don't abuse NSNotificationCenter for everything. It's good for truly global events like the keyboard appear / application resigning active, but not for things that could be localized to one work flow. Delegation / blocks / etc are cleaner solutions for most of these situations! 
Probably can create a wiki page for that. edit: http://www.reddit.com/r/swift/wiki/faqs Now just need to acquire common questions...
I don't see anything related to tagging when creating a thread.
What about after creating your post? Does the link entitled 'flair' pop up on mouseover? That's how I've been doing it.
It's the last thing you said. OP's using the current temp before the download task finishes. OP, you can't expect the download to be instant! Try the following: Put a `print("A")` in front of the `self.currentTemp = ...` line. Put a `print("B")` in front of the `label.text = ...` line. When you run the program, it will print "B" before printing "A". Should be pretty obvious why that can't work.
You can improve your code in a few ways. Here: http://pastebin.com/5ss75VjW I've explained all my edits with comments (I'd recommend pasting it in Xcode and then reading it else it'll be confusing without the syntax highlighting). You'll also understand why you were getting that error (hopefully my explaining is understandable haha) If you want to do more reading on Array and NSArray or just about anything else in Swift, I'd recommend Apple's [The Swift Programming Language iBook](https://itunes.apple.com/us/book/swift-programming-language/id881256329). It contains a wealth of information on the language. It's a great reference guide and I certainly find myself opening it up multiple times a day. edit: what beders said is correct. On the load of the second page, just read off the pickerView rows itself instead of the variables. I've added some comments regarding that
I can't believe that exists, let alone has thousands of reviews..
Try it out! It is actually pretty addicting... Anyway the only reason I use that game as an example is because it seems to be very simple and possibly a good way to try and help me learn swift? Of course I am not sure if this is the case and just a hunch. 
Ya, I like the WWDC videos but they are such a pain to reference for a specific piece of info.
UIPopoverController / UISplitViewController and friends now work on the iPhone as well as iPad as of iOS 8!
For this kind of game I don't think you need any of the game technologies you listed. That game doesn't need any fancy animations, collision detection, 3d graphics, sprites, etc. I'd just start off with a single view application and use `UIImageView`s for the images. Look around for some information on interface builder and UIKit. This project seems like a good idea to start off, it's quite simple. (If you're completely new to Swift, you might do something even easier first, maybe something without any GUI at all). 
Thank you for taking the time to look through and comment my code. I really appreciate the feedback. I've downloaded the book and I skim through it before I want to do anything to try and understand what it is that I want to do and pick up the syntax. I'll need to look up some information about the loading of the pickerViews rows on the second page. Again I appreciate your help (and I'm sure my students will too!)
Must admit that covariance and contravariance typically make my head hurt. That being said, your code doesn't work in C# either.
Weird. It's also similiar to the first lesson in the bitfountain course... Edit: The guy above me deleted his comment, but he said it was similar to the nerd ranch course.
It's almost as if these basic tools you learn along the way. You can create fire with them. In the analogy, that 2 sticks can be used as simple tools to create things. However, they can also create something "magic" like fire. Magic, as in wow this is actually very innovative and/or catchy, fun, entertaining, etc.
Swift has invariant generic types (Optional&lt;T&gt; != Optional&lt;U&gt; where U ⊆ T and vice versa). I would get around it by making a common protocol for each object and parametrizing the Collection by it. That said, this shouldn't work in most languages without variance annotations (á la Scala). Certainly C# and Java should rebuke you for trying just like Swift.
To get information from one view to another, there are two ways which are best in your case. [Using Segues](http://pastebin.com/QaUdcU1H) [Using globally declared variables](http://pastebin.com/MXcd2JUM) If you have any questions/require help with code let me know.
Thanks for the info. I realize swift has invariant generic types like other languages. I have tested this exact thing is both scala and java. It works, but only if you leave off the type definition for the Collection in the Array or List. Java just treats it as though Collection is not generic. List&lt;Collection&gt;... or List&lt;Collection&lt;?&gt;&gt; in Java or Array[Collection] in Scala allow what I need. I understand you aran't able to do any child specific behavior on the objects retrieved, but it will allow mixed storage. The difference is Swift does not appear to have any concept of referring to Any Collection the way that Java and Scala do. So you need to go all the way to storing in an Array&lt;Any&gt; or Array&lt;AnyObject&gt; which then requires a cast even to work with it at all. 
 Cocoa Lumberjack is starting to incorporate Swift support. If it hasn't been merged yet, check the pull requests. I've been meaning to check out [Swell](http://www.reddit.com/r/swift/comments/2cq6la/swell_swift_logging_utility/). 
If you don't know how to program don't pick a huge project (for non-programmers this is a huge undertaking) for your first attempt. You'll most likely fail, and that's pretty discouraging. If you're trying a new language write something you understand well enough that you could easily write it in a language that you already know.
Don't understand. May be some example 
Wish I knew the answer to that one.. Great question.
Your options are probably to wait or to live with having to translate from Obj-C. This is the bargain you have to make for the time being if you want to write swift.
I know its not what you want to hear, but you are doing yourself a disservice by avoiding Objective-C. Take some time to focus solely on Objective-C, and then move to Swift when you have covered some of the core frameworks.
Check out the pdf tutorials for sale at http://www.raywenderlich.com/. I bought their book on IOS games in Swift and it's pretty good so far, although I kind of wish I started out with their IOS Apprentice book. Their books come in both Obj-C and Swift.
[I bought this book](http://shop.oreilly.com/product/0636920034285.do) and absolutely love it! It's very well written and extremely informative. Its available now thru O'Reilly's early access program. 
I had actually come across his site a while back, but his Swift stuff wasn't ready at the time. Looks like he's got a lot now.
That's the same book I was looking at! Cool, thanks for the recommendation.
I want to make sure that two users who are friends on facebook do not interact. Example(ish): Lets say Tinder used the facebook sdk so that users would not see their facebook friends to be paired up with. Solely just interacting with non-facebook friends. 
For video creation I would recommend checking out the AVFoundation framework. AVFoundation does actually already have the ability to record from any display connected to your computer via AVCaptureScreenInput. As far as I know this is for capturing the entire screen, and I am unaware if you can limit the capture to just one window. However it would probably be pretty easy to crop the capture to the size of the window that you are attempting to capture. The other way you could capture just one window is with the CGWindowListCreateImage and feed the CGImageRef directly into AVFoundation with timing information.
Is there a tutorial? I'm fairly decent in C++ but know no git, and setting myself up on this was so confusing :)
It's a joke referring to job applications that requires ridiculous to impossible experience
I wouldn't recommend using a UIToolbar for this. I've found that UIToolbar is fairly restrictive. The easiest thing to do (if you are familiar with AutoLayout) would be to: * Create a UIView. This will be your toolbar's superview, so give it the constraints you need. We will call it toolbarView. * Add a UIScrollView as the subview of toolbarView. Constrain the UIScrollView to have an equal width and height to the toolbarView. Let's call that scrollView. * Add your buttons as subviews of contentView, and define constraints on your buttons so that they give the scrollView an **intrinsic content size**, which means that the constraints on your buttons will define the scrollable content size. Make sure that your buttons don't get their sizing relative to the size of scrollView. If the intrinsic content size ends up larger than the toolbarView, then scrollView will be scrollable automatically. Note: If you add these views programmatically, you have to set "translatesAutoresizingMaskIntoConstraints * Alternatively, you could add a UIToolbar as a subview of the UIScrollView. Give the UIToolbar a fixed size, and that will be the scrollable content of scrollView. See this [article](https://developer.apple.com/library/ios/technotes/tn2154/_index.html) for more information.
A simple google search provides the answer to this in the first result.. http://stackoverflow.com/questions/20311839/change-copyright-top-comment-header-on-all-new-files-in-xcode-5 All locations are the same in Xcode 6. Find the template(s) you want and modify them to your liking. any update of your SDK will wipe the changes here so keep your template(s) backed up somewhere else unless you don't mind doing the changes again after an update.
Are there any preview chapters for this book? I'd like to pre-order a physical copy, but I want to read a little bit before. Currently following the udemy course for Swift/iOS8 and this seems like a nice follow-up.
Cool Swell kind of looks like what I was looking for. Thanks!
&gt; any update of your SDK will wipe the changes here so keep your template(s) backed up somewhere else unless you don't mind doing the changes again after an update. This only happens if you edit the templates in-place. If you follow the advice of the accepted answer, you'll be copying them into your own directory, which isn't overwritten. 
&gt; arr[1...2] This is a slice, not an array. So firstly you won't be calling your `join()` method on it, and secondly you'll be calling `Slice`s `join()` method. You can make an array out of a slice with the following code: &gt; Array(arr[1...2]) Also, please don't post code as a screenshot. It's the least helpful way of sharing code possible short of faxing it to us. Push it to GitHub or similar. 
I'm sorry for the inconvenience, I'll be sure to post the code to something like GitHub or Pastebin in the future. Nevertheless, I'm grateful for your help. Thanks. I didn't realise that by slicing of part of an array I would get something called a "Slice" I was expecting... well a shorter array.
True
He's got a lot of really nice examples on that github page, and if you take the time to read through them all you can probably learn a good bit of stuff. Here's a simple example of calling an API and parsing it's JSON response Alamofire.request(.GET, "http://ip.jsontest.com").responseJSON { (request, response, result, error) -&gt; Void in var result: AnyObject? = (result as? [String: AnyObject])?["ip"] if let ip = result as? String { println("Your IP Address is \(ip)") } }
The problem is that you'd like to define the extension on Sequence, with is the most general type for list-like things, not array - a slice of an array is not an array, but a sequence, as /u/Legolas-the-elf said. However, you can't do that - it's not possible to extend protocols with functionality. One way around this is to create a top-level function join, that take a list of elements. A very similar one already exists, but it also takes a separator. You can achieve what you want by writing join("", test) No need for your own function.
DispatchGroup looks extremely not thread-safe. Why not use an actual dispatch_group_t?
From what I can tell the only option for being able to read the book before the print version is released is to order the early release e-book.
Damn right.
They wrote the language..
Well...what did you expect? They made it clear it was the way forward when they announced it. They also said they would support Objective-C for a long time. Whenever I start a new personal project I use Swift, for work project I still stick around with Objective-C 
It looks like Apple agrees with you, 6.1 is still not available to the public.
 Is there progress on the Linux side?
Nice, thanks for sharing. I'm by no means a GCD expert, but for my latest project, I took an even simpler approach after realizing all my GCD code was running stuff asynchronously (sometimes after a delay), either on the main UI thread, or on a high priority background thread: https://gist.github.com/anonymous/ef9e017f6015573d2818
it should work on Mavericks fine. You won't be able to run anything that uses 10.10 SDK features, of course.
He actually just released two more on lynda: Swift Programming First Look, and Swift Essentials. I've been going through those, and he totally helped me understand more than the ebook or most online tutorials so far. 
check out silver http://www.remobjects.com/elements/silver/
http://www.remobjects.com/elements/silver/
I knew some of those words. 
Well e.g. MS has created a lot of different languages e.g. F#. I don't get the sense that they push everything just because they created it. Apple also made Java, Python and Ruby first class on the platform but they never seemed to push those as hard as Swift. Well I gues they seemed quite serious about Java but nobody really wanted to use it for Cocoa development. That seems very different for Swift.
Whenever I'm playing around with Swift in Playground, I feel like this is a great language. But, not so much when developing an actual app with Swift. For example, most of the existing Cocoa frameworks return either id or instancetype, which when translated to Swift becomes AnyObject. That brings some unnecessary typecasting in the code. Apple needs to rewrites Cocoa in pure Swift to actually make iOS development real fun.
There are multiple pages (if you are on mobile)
Thank you. Your motivation kept me going. I'm not 100% sure exactly what you mean... :/ but I'm sure one day I will... 
Even if you are not.
Yes I was running it on mavericks. I just updated to Yosemite and all I had to do was download the 10.10 SDK (very quick)
That's cool then. I was afraid that only beta would be supported. Thanks.
Yep! It's a giant Yosemite review, 3 pages (21, 22 &amp; 23) are dedicated to Swift.
Cool - hope someone does this for Linux soon! (If not Apple.) I just want to start using Swift anywhere I've been using Perl for the last 15 years.
I read through all of Siracusa's OS X reviews (they start with OS X 10.0 *betas*) a few months ago. At times it felt like a journey through history, because they are so detailed and well written.
probably because tl;dr ?
is there a way to do this in interface builder or do i have to do this progmatically? 
You have at tab bar controller inside of a navigation controller. You want a navigation controller inside a tab bar controller.
Looking at the requirements in the AppStore would have answered your question... But getting other people to do things for you is more fun
AFAIK there's no way to do it with the interface builder. Here's a great tutorial to do it programatically: http://www.raywenderlich.com/76436/use-uiscrollview-scroll-zoom-content-swift
Your goals are to reduce the number of things that you have to keep in your head at any given moment, and to rely as little as possible on your own ability to consistently do things right. If you make a thing immutable ('let' in swift), you never have to think about what happens if it changes, or what other parts of the code you'll effect if you change it. If you split complex functions into several smaller functions that only interact by passing arguments or getting return values, then you limit the amount of code you need to consider when hunting for a bug, and you can test each small piece separately. If you understand what things must be true in your code (aka invariants, for example "a person's age must be greater than 0"), and either provide no function that can cause them to be untrue, or check and crash immediately when they're untrue, then you don't have to debug issues caused by incorrect assumptions. If you remove possibilities (for example, Swift removes the possibility of things being nil unless you specifically ask for it back), then you don't need to reason about as many combinations of possibilities. If you put the code for doing different things in different places, you reduce the amount of code you have to look at when something goes wrong. The same is true for putting code that does the same thing in the same place. 
Make a new target, a framework, and put your code declared with public so it is visible from the users of the framework. Put import myFramework in the playground and you're good to go.
NSOperation (and the NSOperationQueue that runs operations) is an older asynchronous queuing system than dispatch_*, but was rewritten to use it after it came out. It adds some additional features like being able to set up dependencies between operations, but also requires more memory and cpu (significantly in some extreme cases) than dispatch does. It's also missing a few features that were added to dispatch later like barrier blocks. Note that asynchronous and concurrent programming is a *very* large and complex topic. Simple cases of it may be easy to do with either NSOperationQueue or dispatch_async, but there are many subtle things that can go wrong.
I have an additional question: Does dispatch_async represent the same behaviour as the async keyword in C#?
I always have a tough time with optionals and forced optional unwrapping. More often than not I find myself setting up and optional property or variable and then forgetting which (? Or !) to use later. I just know that if I put in a bang and it is nil, my battleship is sunk. 
It sounds like you may want to look into delegation. If you set a delegate of your target view controller, you can access methods and properties in that view controller (or another object) that conform to a protocol you can put together. Check out the Swift chapter on delegates and protocols (not sure of the actual chapter name, but it is similar). Ray Wenderlich has some good tutorials as well. 
Generics might look the same as in Java, but actually aren't. A careful reading of the Swift documentation about that topic is in order. However, most time is wasted by trying to understand those horrible compiler error messages. 
My biggest issue so far is just getting the syntax down. After that it'd be knowing and remembering what new features to use to make my design better (like getting a good understanding of optionals, closures, String manipulation, etc...). I still have headaches just converting Obj-C code to Swift. I think I'll redo a smaller Obj-C project of mine just to get that down. For example, converting between these two (identical) lines isn't so easy for me yet and takes multiple tries to get it right: let regex = NSRegularExpression(pattern:pattern, options:.CaseInsensitive, error:&amp;error) NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:pattern options:NSRegularExpressionCaseInsensitive error:&amp;error]; Overall I'd say Swift is definitely turning out to be easier than learning Obj-C was, but I'd still probably rank Swift as more difficult than other languages in a (somewhat) similar category (like Java, Javascript, C#). Edit: I mainly like learning stuff by going head first, just starting getting serious with Swift (after reading the book), and wrote this tidbit yesterday: https://github.com/RighteousRaichu/Swift-Infix-Calculator/blob/master/InfixCalculator.swift
Related, but not the same. C#'s async/await hides a lot more implicit behavior than dispatch_async does.
Hi there. I've started making a job board for Swift developers. I'm looking for any feedback you can provide. Although it's still very much in beta, I thought I would publish it now in the spirit of 'release early and release often'. Expect bugs and missing features! The reason I made this is because searching for things like 'swift jobs' leads to a lot of false positives. And I also believe that most job boards don't offer good value for the service they provide. The plan is to charge $1/day/post. Voluntary job posts will be free. The textareas use markdown for markup. I've gone for an uncluttered minimalist style. What do you like about it? What don't you like about it? What would you like to see added/removed? Is this something you would see yourself using? Thanks in advance :)
Had the same doubts, sharing what i found so far. Didn't find anything related to naming conventions, seems to soon yet, so im using the same as objc (UIImage+Utils for example) About collide, founded this answer in stackoverflow: http://stackoverflow.com/a/25577129/955845 The answer for 3 its not related with swift solely, its about extensions itself: http://stackoverflow.com/a/7599167/955845 and don't know anything yet about 4… hope it helps .-)
This is the answer. You've got a reference to your new view controller, so use that. viewController.property = "whatever". Make sure you're casting it as the proper subclass, though. 
Looks like 6.1 is out now. The main developer page still says "Coming soon", but if you pick the "Additional tools" option and log in, you get offered a release of 6.1.
Oh okay cool. And congratulations on the baby! :)
Thanks for the feedback - I think, I'll add all 3 features soon
Could somebody post patch notes ?
Also getting 6.0.1 here.
Link worked for me - 3:40 pm EST 
The link was 6.0.1, but on the Mac App Store it's 6.1. Not sure why the online version was behind. Looks like it's fixed now.
Funny enough, I saw the update available in the App store (in the Updates) pane, but when I went to the Xcode page in the App store while I had it downloading, it was showing 6.0.1. I started taking screenshots of the difference, and then flipping back and forth 6.0.1 was replaced with 6.1. 
Since you are at this, why not make it great to such level that everyone may find it useful. Right now it just displays a view on another view. Basic: - Blocking/non-blocking masks - Custom progress animations (everyone wants these) - Handling multiple overlays at once (pop one/dismiss all) Advanced: - Handling multiple overlays using queues (e.g. chain of 2 or more concurrent service calls where all need to present overlay but you only need 1 which would remain for the duration of the longest call in order to avoid dismissing and adding new overlays) - Even more awesome custom animations (can learn/improve on CA/CG frameworks at the same time) Not saying it's perfect, but have a look at SVProgressHUD (https://github.com/TransitApp/SVProgressHUD) for some ideas. Also, a bit off-topic but I'd like to suggest reading "Clean Code: A Handbook of Agile Software Craftsmanship", by Robert C. Martin
https://en.wikipedia.org/wiki/Eventual_consistency
Wait, that works? Is that documented or posted somewhere or did you just figure this out? 
more bugs and more crashes is my guess
I've done this for a couple of months now, works fine but can be unstable when loaded with much code.
Thanks for the info. I've also noticed that if you load a playground with more than 50 lines of code, it runs into issues. I've filed radars on it caching results and having problems even with code that's commented out.
Thank you! It is our first and it hasn't been the easiest of pregnancies. We are just counting down the days now!
I started reading the Segues tutorial but I am having a small issue when I get to "The Second Scene". When I open the assistant editor to create outlets and actions the assistant editor opens the UIViewController.h file and not the FooTwoViewController.swift file. When I manually switched to the swift file, I wasn't able to make the action or outlets connect. I also noticed on the left Project Navigator my FooTwoViewController.swift has an "A" label rather than an "M" label. (edited: typos)
* [CommandLine: A pure Swift library for creating command-line interfaces](https://github.com/jatoben/CommandLine) * [Swift at the Command Line](http://ericasadun.com/2014/06/12/swift-at-the-command-line/) * [Swift: Command-line basics](http://ericasadun.com/2014/08/29/swift-command-line-basics/) 
Read [Sun's OOP overview](http://docs.oracle.com/javase/tutorial/java/concepts/index.html). It uses Java for examples, but the concepts are good. What they call *interfaces* are called *protocols* in Swift. Next, read [this article on OOP and Swift](http://www.weheartswift.com/object-oriented-programming-swift/) and try the exercises. Then search for OOP and read some more. You can also try the CS department at your school. They might have some resources. If you have questions, post them or PM me. I'd be willing to spend a little time on Skype or screen sharing with something like TeamViewer to answer questions.
dependency injection. just set the property on the view controller, or introduce a setter/configuration method. 
UIViewController.h? Why do you have a header file, swift doesn't need those. If your selected language was swift then it should say .swift . And why have you added a UIViewController header file in the first place? I don't think it says to add that. I think it's opening UIViewController.h instead of FooTwoViewController because you might've chosen UIViewController as the custom class for the view controller (second one that you added), instead of FooTwoViewController. To fix this, select the view controller so that it is highlighted with blue outlines, go to identity inspector in the right Utilities pane, and in custom class select FooTwoViewController. Also, when you added the FooTwoViewController file by going to File&gt;New&gt;File, you're sure that you chose the Coca Touch Class file and then in the "Subclass of: " option you chose UIViewController ? Just asking in case. If you did that correctly then FooTwoViewController should come up under the custom class dropdown menu. It should look something like this: http://imgur.com/2iym5V2 (see the Navigator pane on the left too, just need those files for now) As for the A and M labels, they appear because you've probably enabled Git. I've never used Git so I don't know much about it, however the answers here explain the labels well: http://stackoverflow.com/questions/7267390/xcode-letters-beside-files-in-project-navigator http://stackoverflow.com/questions/8046541/icon-after-file-names-in-xcode
When I created the new FooTwoViewController I made it a subclass of the UIViewController like the tutorial said. I never added the UIViewController.h, in fact this doesn't show up in my Project navigator. Going through the changing custom class to FooTwoViewController fixed the issue. Should I not have chose UIViewController as the subclass? I'll have another look over the tutorial, but I thought it said to do this. 
You definitely should've chosen UIViewController. That's what I was confirming. So that's good. And I realise now that because you hadn't chosen FooTwoViewController as the custom class, the UIViewController class was chosen, which is default choice for any added view controller, and it was showing the UIViewController.h file. That's a build file for the swift language which makes things easier for us. So yeah it wasn't you who added any header file, just didn't change the custom class, my bad.
Haha your app looks cool. Objective-C I'm guessing?
The general idea is to go for the highest level solution that accomplishes what you need. You have been a bit generic with your description, but I think it's worth starting with NSOperation and move to dyspatch_async only in case operations are too limited for what you need. Objc.io has a good issue on concurrent programming and the different options available: http://www.objc.io/issue-2/
Ahh excellent. Seems to be coming along. The transition for the Segue is a very easy implementation. I'm now getting to the point where I'll be sending data back and forth. I'll update you when I get there.
Yep, this one is still in ObjC.
How simple (or complex) is the game? 
I'd agree. I dont really see the point to be honest. ObjC doesn't have optionals, C# doesn't have optionals etc etc. It just makes the code slightly unreadable IMHO,
I still use the first one because a) All class properties are required to be initialized before init is finished, and b) Because classes are meant to encapsulate their properties and expose functions to modify them, it makes sense to put all of their properties in one place so people unfamiliar with your code can understand your class hierarchy.
Generally speaking, coding styles should promote consistency. I don't think you can tie properties and methods together often enough to use this style consistently. For instance, what happens when a property is used by several methods? Put that at the top? Pick one method arbitrarily? 
You could declare it before the first that uses it, but yes, in the end it would get inconsistent pretty quickly. After all they are still globals.
&gt; the compiler should be able to do it like every other language can 1. not every language does that 2. implicity lossy conversions are sources of error "The compiler" could easily do it, but I'm guessing it was an explicit and reasoned decision to not allow implicit numerical conversions. It certainly was in Rust (which refuses to perform implicit conversions even between signed integers of different sizes)
But what are you doing with that counter? If you want to evaluate it anywhere, it's going to have to live in some method other than the one that's doing the incrementing. In that case, we're back to having a property used in multiple methods. If, however, it's only used in that one method, what good is the property, as it's not used for anything?
Maybe I'm misunderstanding you, but 6.1 has been available on the Mac dev centre for ages now. Clearly labelled as well.
If you haven't heard of it already,I'd recommend [The Programmers Bible](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882). The one and only book you'll ever need for writing consistently clean code.
Check out [Ray Wenderlich](http://www.raywenderlich.com/), theres an introduction to Swift video series on there. There's a whole buttload of written and video tutorials at all levels as well. Ray is what I'm using to get started with Swift (as well as some paid for material). I've been self teaching for the past 3 weeks by going through tutorials and building my own idea in tandem and I'm getting there. This is my first delve into OOC as well and I'm loving how it makes other common coding languages readable even if you don't know the actual syntax you're looking at. Anyway yea good luck, check out Ray.
Uh yeah, 6.1 BETA was available the entire time between when 6.0 went gold and when this version appeared on the app store. There were several seeds of its release candidate. That's what you could download on the dev center. 6.1 was available as a beta because it supported Swift on Yosemite before Yosemite was officially released.
Hi, congratulations on your Apps being approved. Im trying to solve a problem and could use your offering for help. Question : how to count in how many arrays there are two or more previously found values. I created a dictionary with keys and values. First section searches loop for a number "a" this works OK. Second section searches loop for a number "b" this works OK. Third section tries to find the pair " a, b" this doesn't work. Although the example shown might seem dumb,I have tried many ways and can't get it to work. Note that i will need to change values to look for, as add other variables c,d,e,.... Thanks. //created a dictionary with (key, values) let numberSeries = [ "20022016": [07,14,36,47,50,02,05], "13022016": [16,07,32,36,41,07,09], "27022016": [14,18,19,31,36,04,05], ] // SearchForNumberAInNumberSeries // search for a number // works OK var a = 07 //number to look for var anumberAppearedCount = 0 var n1 = a for (kind, numbers) in numberSeries { for number in numbers[0...4] { if number == n1 { anumberAppearedCount++ } } } // SearchForNumberBinNumberSeries // search for another number // works OK var b = 36 // number to look for var n2 = b var bnumberAppearedCount = 0 for (kind, numbers) in numberSeries { for number in numbers[0...4] { if number == n2 { bnumberAppearedCount++ } } } // SearchForPairAB // search for pair // Doesn't Work. var ab = [a,b] // pair to look for var abPairAppearedCount = 0 for (kind, numbers) in numberSeries { for number in numbers[0...4] { if number == ab { //err: Cannot invoke '==' with argument listof type Int, @Value [Int] // tried many diff. things, can't get it to work. abPairAppearedCount++ } } } Thanks for your help, appreciated. Francisco.
Congrats on the approved apps! It's unfortunate that I can't try out any of them because I'm still on iOS 7. Big mistake buying a 16gb iPhone :( What resources other than reddit did you use while developing your apps?
If you had to sum up the advantages/"greatness" of Swift in one sentence, what would it be? Also, In a sentence, what would you say to devs just starting to learn Swift.
Ha! I can understand. I should say that we don't follow the book to an absolute 'T' but it's a much used resource for us. Plus, we have our own internal standards and practices that we most certainly point out in code reviews. So even if someone commits crap code, it's cleaned up fairly well by the time it's released.
I see the problem you're having and am researching for a solution. Unfortunately I haven't run into this issue so I don't have a solution for you right away. I am researching these sources: [one](http://stackoverflow.com/questions/24638964/swift-beta-3-nsdictionary-does-not-conform-to-protocol-equatable), [two](http://natecook.com/blog/page2/), [three](https://teamtreehouse.com/forum/swift-while-loop-check-int-values), [four](http://nshipster.com/swift-operators/) It seems as though it should be an easy solution, but may require an extension built to handle the conversion for comparison use. 
Yes, sorry for the iOS 8 requirement and thank you for the support. As far as resources used, I will list some that have helped me greatly: [Map stuff](http://hugowetterberg.github.io/development/2012/03/15/ios-mapview-basics/) [NSUserDefault work](http://www.accella.net/nsuserdefaults-some-pretty-good-practices/) [Game leaderboard stuff](http://www.appcoda.com/ios-game-kit-framework/) [Honestly this helped me so much with the games, Julio is such a smart dude and makes it seem so easy](http://avionicsdev.esy.es/article.php?id=11&amp;page=1) [And you can't forget Ray's site, truly a special resource for all areas](http://www.raywenderlich.com/63229/make-game-like-mega-jump-spritekit-part-12)
Swift is clean, accessible, and a blast to work with. If you're just beginning to learn Swift, then I'd advise you to allow yourself to be absorbed completely by the language, learn to roll with the waves so you end up safely on shore.
Thank you anyway, I will check out the sites you mention. 
First of all: Indent your code properly! It's much easier to read and reason about code if its structure is plain to see. Your first two tests: &gt; &gt; var a = 07 //number to look for &gt; var n1 = a &gt; if number == n1 { …and: &gt; var b = 36 // number to look for &gt; var n2 = b &gt; if number == n2 { …are different to your third test. &gt; var ab = [a,b] // pair to look for &gt; if number == ab { Think about what you are doing there. In the first two, you are looping over the series and comparing each individual number to another predetermined number. In the third, you are looping over the series and comparing each individual number to an array. It makes no sense to compare a number to an array. To do what you want, you have to check whether each of the predetermined numbers is present in the list. One way of doing this is to loop over the array of predetermined numbers and check each one, keeping a tally of how many numbers you find: for (kind, numbers) in numberSeries { var foundCount = 0 for predeterminedNumber in ab { for number in numbers[0...4] { if number == predeterminedNumber { ++foundCount } } } if foundCount == ab.count { abPairAppearedCount++ } } There's lots of ways you can simplify this logic, for instance you can cast Swift arrays as `NSArray` to take advantage of `containsObject:`, or you can use `filter` to find the matches and count the results. Also, you seem to be mixed up about variables in some way – for instance, why declare `b` then immediately assign it to `n2` then only use `n2`? There's no need for that. Just use `b`. Don't forget about the difference between `let` and `var`. When you know a variable isn't going to change value, use `let`. It's more efficient and can help you spot mistakes in your code. Most importantly though, you're essentially doing the same sort of thing three times. You can think of checking a single number as checking an array with only one number in it. And you can write a function that takes an array of predetermined numbers as an argument so you can cut your code down to at least a third of its size. 
I'm just starting out myself, but it seems to be you're trying to compare a single INT ("number") with an array of INT ("ab") with your test condition "if number == ab". That's what the error is telling you. var ab is an array of 2 INTs, but your for-in loop just marches through the numbers in the dictionary one by one. So you're trying to match a single INT to an array of 2 INTs. This may not be the most elegant solution, but what you can do is do another for-in loop where you try to match the number from the first for-in loop with each number from your var ab. I can't shake the feeling though that pattern-matching with using a switch-case is a better option here. You could also extend the functionality of "==" to work with a single INT and an array of INT, but there may be better ways to handle this than overloading ==. Then again like I said, I'm just starting out myself. All I've done is write a stupid simple iOS version of hangman as a test of my skills. Take my analysis with a grain of salt.
a ball 'traveling forward' at a diagonal. a tap switches the diagonal it travels on... I was thinking making it on an array like a Tetris screen but with more empty block spaces.. edge = death.. and thats all I want to accomplish right now. Going to try again tonight after I'm done reading all this material you nice people of reedit gave, and probably be posting again when I run into trouble.
On the road now and can't really understand the game, feel free to PM me though. 
Off topic, but why can't you upgrade to iOS 8? I'm running it on a 16GB iPhone 5 w/ out any problems. Updated to 8.1 last night as a matter of fact.
That has to be, by far, the most cringeworthy introduction to a new language project I have ever read. Yes, let's all whine our hardest about a company that has always made proprietary products (even while participating in Open Source projects) for making another proprietary product. I can't expect much more from a group that is very excited to fall on their face and waste some enormous amount of time and money [on a project](https://ind.ie/) to, in part, reproduce [diaspora](http://c.ztj.io/YA5Y)'s utter failure to be something anyone besides the neckbeards care about. Just like identi.ca v Twitter, it takes more than high horse idealism to make something appealing to people. Swift as a language and platform is still extremely amorphous and that's frustrating enough. What special Hell is necessary to host a language that will, by necessity of design, always be steps behind what it seeks to clone? Surely the people involved can find a better use of their time. 
How are your downloads? Did you do any marketing?
I'm not sure about your device, but I have 12.8GB of actual storage. According to my usage tab, Spotify and Photos are the main killers. On top of that, there are a bunch of other smaller apps that leave me with ~2GB of free space available. I haven't checked in a while, but IIRC it says I need ~5GB of free space to update even though it doesn't actually take up that much space. I've just been too lazy to clear up the things I don't use.
Haha I was holding off commenting on that. I wish them success but you do raise some good points. The chief maintainer of GNUstep (who's projects aim is a Cocoa implementation) seems to be leading this. There is very little point in using GNUstep outside a few niches simply because Cocoa is so incredibly vast and moving so fast it's impossible from them to catch up. Arguably chasing Swift at this point might be an easier target...
If you connect it to your computer and update through iTunes, it doesn't require nearly as much space for the swap. 
I soft-launched these apps because I wanted to identify any issues before they were fully manifested, seeing as how this was the first time I've had any app accepted and was unfamiliar with supporting real user hardware. As far as marketing, I plan for some in the future, but potentially starting with my future releases. Even with no links though, something interesting happened with Digit Ball, as it reached 500 downloads in only a couple of days and has over 200 people on the leaderboards all without a single link to the download. Paul had a similar thing happen, but it was more around 150 - 200 downloads and with less activity. This is basically the first time I'm outing these apps.
&gt; Third section tries to find the pair " a, b" I assume you mean to say that you want to know whether an array contains a subarray [a, b]? That's basically the substring problem; there's a ton of algorithms for this problem... Examples: - Array checked: [1,1,2,5], pair: [1,2], results in: true (aka. abPairAppearedCount == 1) - Array checked: [1,1,2,5], pair: [1,5], results in: false (aka. abPairAppearedCount == 0) /u/Legolas-the-elf's notes on your `if number == ab` line are correct. However, keep in mind that /u/Legolas-the-elf implemented something different than what I described above: his code (is intended to I guess) checks whether a and b are contained anywhere in the array. The implementation is incorrect though; with `numberSeries = ["x": [1, 1]]` and `ab = [1, 2]`, it will result in `abPairAppearedCount == 1`, which is wrong (`foundCount` will be incremented twice for matching 1 twice). If you could clarify on what you're trying to achieve (i.e. check if two elements are anywhere in an array or check whether an array contains a certain subarray), I could take a stab at it. 
Good catch!
With Xcode closed, try going to ~/Library/Developer/Xcode/DerivedData and deleting all the folders inside, then reopen xcode.
This is awesome, wow.
Sounds cool. I'd happily use swift without the obj-c interop as a nicer c++ 
I've not done this course, but I did do the iOS7 Course that bitfountain had and thought it was excellent. I can only say that they produce excellent materials for learning, and will look to definitely purchase this course before it goes up.
Could be premature, since Apple may open source the compiler yet.
How long did it take you to code each app? Did you design them all yourself? If so, what tools/software did you use to design and how long did it take?
Each app took about 20 days each give or take. When I start a project I just can't stop myself from finishing it! Yup I designed them all myself and did all the artwork and music. I used Sketch 3 to create the assets. I'd say the designing took about 3-4 days of the 20 days for each. Throw in another day or 2 with the icon as well. Thanks so much for checking out my work!
I've never done this course, and $89 isn't really too bad, but I'd recommend Treehouse. I'm soon to do Swift courses there, and I have no doubts that I'll learn a lot. They're trustworthy in creating good learning content I'd say, and most importantly, they've got a 2 week free trial period. I would recommend using those 2 weeks of free trial to try out the Swift course, and if you feel it's working for you, sign up. If it's not, no loss for you. As I'm not sure about the rules here, I'll say this: if you're going to sign up, consider using my referral code for 50% off your first month, or if you go the free trial route *then* continue with a subscription, consider PMing me so a referral can be arranged. Simply requires you or myself to email support. PM me for the referral code if you'd like. Good luck with Swift.
&gt; Since Swift's first beta release I've been using it to develop applications and games. I had been learning Objective-C over the past 2-3 years, but it wasn't until Swift came along that everything clicked. Did you have any other coding experience before this? What other languages are you familiar with? My experience is mostly with Perl. (Not counting Basic, VisualBasic and writing "Hello World" in C 20 years ago.) I'm looking at trying to learn Swift to put together a couple of apps... and I'm wondering what the learning curve is going to be like. edit: Also... congrats!
Try it for yourself. https://www.youtube.com/watch?v=DtaBa6G5a_E&amp;list=PLMRqhzcHGw1Z0S7hpE30r2lwnovSHMntI&amp;index=1
Hey, congrats on releasing your apps! What API are you using for Burrito Buddies?
Thanks for the support. This is my first foray into a real development language other than Objective-C. Before, I was mainly focused on web design and development. I run a couple blogs and build websites for local businesses - using html, css, and php - but I figured it was time to step up my game. It should be a fairly smooth transition coming from something like Perl, good luck with your apps!
I prefer the first one, but in order to stay in line I usually just follow the conventions of whatever code base I happen to be inside. Rarely are things so atrocious that I make the problem worse by not staying consistent with what the code base has already decided upon doing.
I'M DOING THIS COURSE NOW. SO FAR I'VE LEARNED A LOT. STARTED WITH almost zero experience. Sorry bout caps
In combination with enums that have associated values, this actually caused the one breaking change between Swift 1.0 and 1.1 that I stumbled upon. `SomeEnum.fromRaw(someRawValue)` changed to `SomeEnum(rawValue: someRawValue`.
[Here's the code](https://bitbucket.org/CallumNZ/stickyheaderviews/src/50e719dd91898403bdc8244753fdf9c3db291c3c?at=master). Any ideas on why cellForItemAtIndexPath isn't being called? Been stuck on this for a week :( The cells show up fine when I don't use a custom UICollectionViewFlowLayout.
lucky! You mentioned in another comment that it doesn't cover the fundamentals before getting ahead with building apps. But while building all those apps do you learn those fundamentals from their explanations? And do you think you can call yourself an expert at Swift after this course? If not then what level would you categorise someone after this course. Also, how long did it take you to complete it? Thanks!
Bonjour. I do not know much about parsing but maybe this will help - https://github.com/tid-kijyun/Swift-HTML-Parser
I am doing that UDemy course. Paid $29 so I can't complain too much. Its a rather light overview, probably geared more for someone with no experience. Rob doesn't really get into any of the Nuts&amp;Bolts of Swift. This is probably better: https://www.youtube.com/channel/UCml4lCH0xdl6Jm91RiPPIig
Cool! Good luck with your sales, thanks for sharing.
&gt; I guess what I'm saying is if I have to package everything as an optional and then unwrap to check its value then I don't save much That's right, but in the long term what *should* happen is as APIs become Swift-native (or non-native APIs get Swift wrappers): * values which just happen to be pointers will stop being optionals * values which are optional because that was idiomatic will also stop being optionals (with the API being reworked to more idiomadic Swift) * leaving only values which are *actually* optional as optionals So unless Swift fails to gain brainshare and "native" APIs, the number of optionals lying around should greatly diminish over time, because most values are *not optional*.
haha thanks for that. I needed to realize it I guess. I just wanted to learn in the fastest way possible, but these are truly for complete noobs. I've written a couple of apps in vb.net for a local business to manage their stuff, and also done Lua scripting (for gaming) for quite a while. That was really fun. I left Lua around 6 months back when I started creating the business management system, and after that I hadn't done any coding for 3-4 months because of exams and well, enjoying life. I just moved onto iOS development and learned the basics of it all, Swift, Obj C, Xcode. I guess these courses will just tell me what I already know and then teach me how to code some famous apps. The good thing is that at Udemy you can look at what all content the course has, and the other site has given it too in the description. So I'm just going to look up what I don't know from that stuff and find free resources to learn on that, or try my best to convert Obj C code to Swift. I just wasn't sure on free content for specific learning because Swift is still pretty new and a lot of the free stuff is just a repetition of each other from someone else's perspective. For stuff like Lua or vb.net, which have been around for years now, it is easy to find just about anything for free. I got into iOS development for 1. I like programming and learning Obj C/Swift (and C some day) is a step up in the field. 2. I have some ideas that I'd like to share through apps Plus I've been saving up to buy Sketch 3 for some time now, since I want to design for my apps, and so I was really hesitating on signing up for any of these courses, and you just gave me more reason not to. Thanks haha ;) Although I will probably be buying this web dev course from the same guy whose iOS course is linked above: https://www.udemy.com/complete-web-developer-course/?couponCode=49 Since it's on discount for $150 less, and apart from IT classes in school, I have zero knowledge of HTML and web dev. I want to learn enough to be able to create a good website for my apps the way I like it, and not go too in-depth with web dev while trying to master Swift and C, it'll be too much. So I guess being a complete noob will fit for this course and my objectives.
Sweet. Thanks for the info. I did come across a comment on the course's page that mentioned something of this sort, the guy was disappointed that Rob doesn't cover the fundamentals before getting ahead with building real apps. It's not my style of learning. You're lucky you got that discount though. I do know of the coupon code (49) that brings the price down to $49 for now. But yeah, it's still not worth it for me at least.
ha, what a suprisingly open eyed reply. I know swift is super trendy, we're experimenting with it too. But none of our clients request swift code, nor they want legacy code rewritten in swift. So for many more years you'll need obj-c for at least legacy support. I know it's easier on your vb.net eyes, but sadly the foundation of Apple app developement is still obj-c. by the way, anything over $20 by these self-proclamed "tutors" is a ripoff: https://stacksocial.com/sales/learn-swift-programming-by-examples as I said before stay with the cheap ones untl you realize they're reading you the free content off the web. http://www.skilledup.com/learn/programming/6-best-free-swift-tutorials-programming-new-language/
Is this seriously the best name they could come up with? It's been used many times for different products and just adds to the confusion.
lol. sure
You seem very knowledgable about the learning scene for SWIFT. For $100-$150 what do you think are some of the most valuable resources for someone who wants to learn to program in SWIFT? I have very minimal programming experience but I was able to get through a little bit of the SWIFT book Apple put out at launch. 
A lot of the stuff is very similar but there are also a lot of differences and often even things that work similarly on iOS and OS X differ in details (e.g. storyboards). While it's easy to transfer knowledge between the two, I would not try to learn OS X development with iOS tutorials, ultimately it will be an uphill struggle.
Thank you. This is what I was afraid of. I will stick to OSX only tutorials for now since I'm still a beginner.
Are you specifically looking for Swift tutorials for Mac? If developing for OS X is your primary goal you might have a better chance to find something useful if you ignore Swift for now. Objective-C is still a first class citizen on Apples platforms. You won't miss anything if you stick with it for the next year or two. If you can spare $30 you could also get a book like [Learn Cocoa on the Mac!](http://www.apress.com/apple-mac/cocoa/9781430245421). At least for me learning from these was much easier than following those step-by-step tutorials that usually just show you what you have to type. I guess if you want to learn OS X development in Swift you are pretty much on your own. 
Shark. Jumped.
What a dick response. If you don't know what's up, can't help or don't have anything helpful to say don't reply surely?
You can also hide the stored property behind a computed property as such: class Wingus: NSObject { var next: Wingus? var yolo: Bool { get { return _yolo } set(value) { _yolo = yolo } } var _yolo: Bool = true { didSet { println("zoop") next?.yolo = self.yolo } } } let a = Wingus() a.next = Wingus() a.next?.next = Wingus() a.yolo = false Which is also produce the expected number of "zoop"s. Or, you can refer to the Wingus's via a protocol: protocol Yolo { var next: Yolo? {get set} var yolo: Bool {get set} } class Wingus: NSObject, Yolo { var next: Yolo? var yolo: Bool = true { didSet { println("zoop") next?.yolo = self.yolo } } } let a = Wingus() a.next = Wingus() a.next?.next = Wingus() a.yolo = false Which also produces three "zoops". After poking through the sil, it appears in the original (buggy) case Swift is allowing for direct access to the properties of `next`. It uses the class_method getter for next (on self), the returned optional is checked, then unwrapped. At this point, a direct reference to `next.yolo` is used to for assignment as opposed to going through a class_method setter: %34 = unchecked_take_enum_data_addr %20#1 : $*Optional&lt;Wingus&gt;, #Optional.Some!enumelt.1 // user: %35 %35 = load %34 : $*Wingus // user: %37 %36 = ref_element_addr %1 : $Wingus, #Wingus.yolo // user: %38 %37 = ref_element_addr %35 : $Wingus, #Wingus.yolo // user: %38 copy_addr %36 to %37 : $*Bool %20 is the optional Wingus returned from `next?`, and %1 is self. Moving the actual assignment out of this context via the methods described above cause the use of the class_method setter and getter for yolo and you get the expected output. The sil output from any of these methods looks more like this where the use of accessors is more clear: %21 = load %20 : $*Wingus // users: %22, %27, %30, %31 strong_retain %21 : $Wingus // id: %22 %23 = class_method [volatile] %0 : $Wingus, #Wingus.yolo!getter.1.foreign : Wingus -&gt; () -&gt; Bool , $@cc(objc_method) @thin (Wingus) -&gt; ObjCBool // user: %24 %24 = apply %23(%0) : $@cc(objc_method) @thin (Wingus) -&gt; ObjCBool // user: %26 %25 = function_ref @_TF10ObjectiveC22_convertObjCBoolToBoolFVS_8ObjCBoolSb : $@thin (ObjCBool) -&gt; Bool // user: %26 %26 = apply %25(%24) : $@thin (ObjCBool) -&gt; Bool // user: %29 %27 = class_method [volatile] %21 : $Wingus, #Wingus.yolo!setter.1.foreign : Wingus -&gt; (Bool) -&gt; () , $@cc(objc_method) @thin (ObjCBool, Wingus) -&gt; () // user: %30 %28 = function_ref @_TF10ObjectiveC22_convertBoolToObjCBoolFSbVS_8ObjCBool : $@thin (Bool) -&gt; ObjCBool // user: %29 %29 = apply %28(%26) : $@thin (Bool) -&gt; ObjCBool // user: %30 %30 = apply %27(%29, %21) : $@cc(objc_method) @thin (ObjCBool, Wingus) -&gt; () Bug? I would look into filing a radar.
Pretty sure Swift for OS X wasn't released until Xcode 6.1, out... (last) Thursday? So give it a few weeks or so ;)
“Swift Development with Cocoa" in early release form O'Reilly covers both Mac and iOS development, it might be what you are looking for. 
I'm having this issue as well. If you go to preferences -&gt; Downloads and try to manually download the 10.10 documentation you get the same error.
If IDE's were cars then XCode is a Honda Civic and AppCode is a Bentley. Hands down the best IDE you will ever use for iOS development is [AppCode by JetBrains](https://www.jetbrains.com/objc/). Unfortunately you're going to have to wait a while until they implement support for Swift. Their Swift support is currently at an absolute minimum. In other words you can do Swift development but there is no auto-completion or anything like that but they are actively working on it and trust me it'll be kick ass once it drops. JetBrains always brings the noise with their IDE's. If I ever had to do Obj-C development then I wouldn't consider using anything but AppCode. There are a few youtube vids out there that you can watch on it. 
Definitely need to have Swift support. Going to keep JetBrains' homepage in my bookmarks and wait for Swift support. 
For now Xcode is the best editor for Swift because it is the *only* editor with automatic completitions and full syntax highlighting for Swift. My preferred text editor of choice is [TextMate](http://macromates.com) and you can optionally install a Swift bundle for it, but this only adds syntax highlighting. EDIT: Evidently you just added the rant about Xcode. Whilst Swift doesn't have full refactoring support (and to be fair it is a brand new language and Apple has done an incredible amount of work already improving Swift since the summer) you can still use edit in scope (CMD + Control + E) to edit all of the references to a variable/identifier in a file, which greatly improves things.
I only wish Apple would release a printed version of the Swift Programming Guide. I don't have an iPad and I can't stand reading this for a long time on a MacBook Pro, so inconvenient.
Swift playgrounds now run in sandboxes, so they can't access any arbitrary files. I believe they have to be in the same bundle as the playground or they in a shared playground data directory.
Don't know if you've tried [the usual steps to resolve source kit crashes](http://www.reddit.com/r/swift/comments/2j8onk/anyone_got_any_tips_on_how_to_keep_sourcekit_from/) but thought I'd point them out just in case. Hang in there bro we've all been there!
Thanks for the suggestion. I find Objective-C syntax to be challenging compared to Swift, so that's why I wanted to start there. I figured it was the way things were heading anyway. I guess I just need to bite the bullet and learn Objective-C too!
True, will keep that in mind. Thanks!
Thank you! Going to pick that up this afternoon.
I agree - I find I can focus much better with printed vs. on iPad. I'm sure there's some reason for that, but I can't put a finger on it.
Hmm.. but even when I put contentsOfFile: "MainController.swift" (or another file in the project) it doesn't work 
Relax, this is why reddit has downvotes.
Then learn just enough ObjC to be able to read the framework APIs. Be able to translate that subset into the corresponding Swift subset. Learn the rest of Swift.
You mean you focused on iOS first to help you understand everything first or are you referring to a course in particular?
I started out trying to build a mac app, floundered and ran through some iOS tutorials for a couple of days. Then I built a reasonably complicated original app for iOS in a week and then started on the Mac app with the lessons I'd learned. It gives you a good foundation in how to use Xcode too, not just Objective-C, this was actually quite a blocker for me. I can already program in a bunch of languages, it was the tooling getting in my way a lot of the time. Cocoa tutorials tended to use outdated versions of Xcode and I hit some point where a button or entire concept didn't exist in the latest version. 
I am in the exact same scenario. Incredibly frustrating how ios tutorials are an order of magnitude more prevalent than os x. I searched amazon and it looks like there are some books coming but not till 2015. I don't understand why apple couldn't have had some publishers working with them as they developed swift so books could immediately be available. All the swift tutorials are really basic and just going over syntax and general programming constructs. All that stuff is really easy, I want material on using xcode with swift to actually build apps, it's all the storyboards and connecting .xib files to viewcontrollers, and core data and whatnot that is causing me all the trouble.
Ah right thanks for the coursera link. Going practical without learning the fundamentals is not my style too, picked it up from school chemistry teacher's lessons haha. By the time you come back to the Udemy course, most of its content will probably be available for free on the internet (or maybe it already is), just need to look. But yeah since you got it for a good price you have it all in one place. 
I disagree 100% that learning Swift first is half-ass. Your premise is flawed. It's important to be able to decipher Objective-C, but learning it any more deeply than that is a waste of time.
True Well not all their content might be off the web, I mean they could've figured out some of the stuff through their own methods and written it in their way, there's always more than two ways to get the same output when coding. And sometimes premium courses could have the best method of coding/explaining to get that output. But yeah, learning one way and having your own knowledge, can be good to come up with your own good way. And thanks for that 6 best tutorials link, I hadn't come across the bottom three resources before. As for the learn swift by examples course, there's a link in the comments to it's Udemy page, so I'm just going to have a look at their content and look up what all I don't know.
We can compare e-Penises if you want to, but I'll win. Just because you're afraid that your Objective-C knowledge will soon become obsolete isn't a reason to encourage others to make mistakes. Swift is the future. Don't fight it, embrace it. It'll make the transition much easier.
I'm not mad at all. Seriously. I respect that you want to keep using Obj-C. If it works for you, go for it. I just don't think that a new iOS developer needs it as much as you say they do. We can disagree and be civil about it.
If you just want to learn Swift to build your own apps then as suggested by Hawk take about a day to learn enough obj-c to read it (and honestly if your time is limited just skip it altogether). As someone with a C# background my suggestion would be that if you can afford Xamarin then do this: spend the next month or so going thru the many Swift tutorials that are now out to learn the foundational basics of making iOS apps and then run into the arms of Xamarin and never look back. I say that cause A- your a newbie to programming and B - Swift support in XCode is buggy as hell and being a newbie you're going to be ready to pull your hair out. So if you plan on getting a job which might require you to support older obj-c apps then yeah learn it and learn it well otherwise I really wouldn't worry about it. EDIT In case you are un-aware Xamarin allows you to write native iOS apps using C#.
Someone was looking for a Skype group before, so maybe you could create a mindshare skype group?
I feel like this would be a great idea.
I don't have enough time to look through all of the code, but I'd double check that your custom layout actually creates the layout attributes you expect. If your layout doesn't generate any layout attributes that are visible (for whatever reason), there's no need for the collection view to call `cellForItemAtIndexPath`.
I know, I know but sadly you don't publicly wear down votes around to show people how you communicate. Also, sorry OP I have no idea it seems legit though if it's coming from Xcode itself. Of all the applications I would of thought the Apple app could manage decent update reliability. 
Huh, I'm definitely going to check out Xamarin. 
Wait, I thought that the plan for Swift was to eventually open source it? Was that never officially said, then?
Xamarin.Forms will rock your world - basically allows one C# source code base that runs on both iOS and Android - [here is a video explaining it](https://www.youtube.com/watch?v=1d_AA-e1HFo) EDIT - posted wrong link
Thank you for the reply. Swift it is I guess.
You should look into WebKit. Specifically, check out the WWDC video called, "Introducing Modern Webkit API" on [this](https://developer.apple.com/videos/wwdc/2014/) page.
haha, may this be your biggest problem in life, also please tell others what to do ;)
Real time chats are great for general discussions and collaboration, they are not a very sustainable format for question and answer, especially if you want access to knowledgable people. Especially with Swift, because it is so young, those most knowledgable are going to the be ones that have their heads down using it every day, not necessarily hanging out in chats. [Stack Overflow](http://stackoverflow.com/questions/tagged/swift) is amazing for a question and answer format. If you take the time to formulate quality questions, you will find you will learn way more and possibly come up with the solution while formulating your question. Also, your questions stay as a permanent record for others to find and benefit from (see the fact that the top result for almost every programming related question is a SO post). Finally, SO even has a real time chat feature if it becomes necessary.
&gt;There is a large, very vocal "You gotta know Objective-C to write Swift" crowd here in /r/swift[1] , but in this case (and in most cases, to be honest) they're dead wrong. You're not even close to ready for a professional job developing iOS apps, and by the time you are lack of Objective-C won't be an issue. This seems like a red herring argument to me. People advocate for Obj-C here mainly because Swift is still in its infancy. This is reflected in almost every facet of the language. The IDE is still buggy and crash prone. Unlike other languages there are no real alternatives yet to Xcode. The compiler is buggy, and will still sometimes segfault on seemingly valid code. Other times the compiler will provide a confusing or misleading error. Resources for the language, while definitely improving, are still scarce. Many libraries have and will continue to have compatibility issues. Apple's libraries are all still based in Obj-C and as such can be difficult to use idiomatically in Swift. All these things will be fixed with time, but for someone new to programming I, personally, wouldn't recommend Swift yet. Even as a veteran programmer, the things I mentioned have caused serious hits to my productivity over the past month.
The points you mention do come up in the discussions, but they're normally not the main thrust of the objection to Swift. There seems to be a sort of hidden macho mentality around Objective-C. Like this strange "Yeah, people say it's hard, but I'm a real programmer, so it was easy for me! I did it, and you should too! And if you don't you're half-assing it!". Just read the other reply to my post... that's pretty much what his argument boils down to. He literally said that if you don't learn Objective-C first, you're doing it half-assed. I say bullshit to that. As to the issues you bring up, to be honest, I haven't seen them. Sure, playgrounds crash from time to time, and sometimes I have to clean and rebuild, but it's not so often that it gets in the way of my productivity, especially since the GM release. And before you ask, yes I've been working with Swift full time since the early betas. While we're on that topic, for the kind of code a new programmer is going to write, swift is solid. The times I've seen issues it's been around bridging to Objective-C code which isn't likely to come up too early or too often for a newbie. I appreciate your well reasoned, level-headed response. Thanks!
Fair enough, that other post is evidence that your presentation of the argument was not a total red herring. I agree with you that if you are dead set on learning swift, all you really need is a couple days experience with Obj-C. &gt; As to the issues you bring up, to be honest, I haven't seen them. Consider yourself lucky, then =) Just in the past day or so, for example, here's [a comment](http://www.reddit.com/r/swift/comments/2jsz8x/xcode_61_released/clfst16) and [a post](http://www.reddit.com/r/swift/comments/2k0qnz/any_preferred_swift_editors/) complaining about Xcode issues. Also consider that you have existing experience that may alleviate these things for you. For example, [this post](http://www.reddit.com/r/swift/comments/2jywyk/swift_classtype_does_not_have_member_named/) about a compiler error. To an experienced dev, this might seem simple, but to a novice that error message can be confusing and there aren't many places to turn for help with an error like that. &gt; While we're on that topic, for the kind of code a new programmer is going to write, swift is solid. This is a good point. A total newbie isn't going to try to do crazy things with generics that make the compiler segfault. Also agree with you that things are getting better. I'm totally looking forward to 6-12 months from now when I can tell people that Swift is a great place to get started.
It is overrated. Each time new version rolls out you are going to have bad times. Also Xamarin will never match native apps in look and feel. 
Time learning language is miniscule comparing to learning APIs
Yeah, I was speaking hyperbolically, but I do think it's going to happen faster than the hard core Objective-C apologists are willing to admit.
&gt;I'm totally looking forward to 6-12 months from now when I can tell people that Swift is a great place to get started. I really love the language. It's very well designed and it just feels comfortable and familiar even though it's new. Things just kind of work the way I expect them to. It's clear to me that the language design team took great care in crafting the syntax and for me, it makes a lot of sense. I'm still hoping that they add better support for regular expressions, but I'm not holding my breath.
Is there a way to do this in story board?
How can anyone help when there is no code posted?
If you don't want to use an image for the gradient, I don't think that's possible. It's not that much code to create a gradient though, look for `CAGradientLayer`.
alright thnks
&gt; Where I usually select the iOS device I want it is curently showing a settings circle icon with the title of my project. Immediately to the right of that it has selected "My Mac" Did you create a Mac project by accident? Or did you change the build setting that specifies which base SDK to use? 
Just checked it's iOS. One sec....
That is actually really awesome. Does it work with xcode 6? If it's not with Swift support yet I hope it is soon! Thanks a bunch!
I FIGURED IT OUT!!!! I had renamed the Xcode project file from the Finder. I renamed it to what it was originally. Everything's back to normal... Now I wonder how I can rename the entire project... hmmmm.... EDIT: Here's to an hour well spent
precisely
I disagree. IDE is more than just an editor. Only thing App Code has is pretty capable editor (and yes I love it), but everything else is subpar and not comparable to Xcode. Interface Designer is broken and unfinished, Asset catalogs nonexistent, integration with other essential tools (debuggers, profilers, static analysers, ...) is flaky at best. so no it is not a real alternative to Xcode.
Definitely agree. At this point the language is also desperately unstable (both in the sense that tools are not up to scratch and that it's changing). Some people view the language with very rose-tinted glasses here, but their opinions should not be taken seriously.
Jeesuz "Objective-C apologists"?
Yes. In case you arent familiar, an apologist is just a person who defends a position in a debate or discussion. Why do you have a problem with that word?
Ok, now I know you're trolling. Good one!
The issue is that its constantly updated, so the printed version won't be valid for too long.
It may not be pretty (according to some), but the syntax is drop dead simple. [EDIT] Anyone who thinks the syntax isn't simple doesn't know the meaning of the word syntax.
Devices are case sensitive for file names as the simulator is not. Check the error message you're getting but I'd bet money it's an issue with the filename's case
nope. Storyboards are pretty lame.
Thanks, it does work with Xcode swift. I think you can use it in swift, and just call the import. Its a pretty awesome library, and goes beyond just the background, helping you make color schemes for your entire app. 
I agree, but this is a tiny framework, and it really is more than just a background layer. While that is all OP asked for, it helps you set up your color schemes across your entire project.
STACK20-NF3G2P you can use this code on stacksocial till tomorrow to get 20% off on anything.
It seems so far lol. Wish I could a glow effect easily. Sketch and Photoshop have spoiled me! Haha 
Check this video out, I explain it here. https://vimeo.com/106033917
It seems like you almost have to go the delegate route since you are using the instantiateViewControllerWithIdentifier() method (unless there is some way to pass in args to that method that I am not aware of). EDIT You could also make closure properties on the view controller and populate them after the call to instantiateViewControllerWithIdentifier()
I don't think you are spoiled by Photoshop. I master Photoshop myself and I think interface builder should copy a lot of things from Photoshop. My point is: if you put the word "interface" on something, in this case "interface builder" this something has to work with graphics (layers, blur, glow, blend mode, etc). IB sucks infinity squared plus 23. I will not even mention autolayout because I don't want to ruin your day. :D
Here's soma Apple sample code to get you started: https://developer.apple.com/library/ios/samplecode/sc1249/Listings/ReadMe_txt.html
Did you start the Mac app with Swift or Obj-C? Do you have a functional beta to share?
What non-Mac, non-iOS platforms does Swift run on?
I want some of the stuff the OP is smoking... really good stuff.
"AEST" the locale of the simulator and the locale of the device differ, so the "AEST" is not a legal timezone. You need to set the locale of the NSDateFormatter()
niice. Where'd you find it? I doubt I'll be using it cause I don't see anything I'd like to purchase on there, at least not today. But it'd be great to know where to get those in the future.
they have an ios app and you also get newsletters when you register.
These guys have a pipe dream https://ind.ie/phoenix/
With the new Xcode features `@IBDesignable` and `@IBInspectable` you can create such a view yourself. Something like this should work: import UIKit @IBDesignable public class GradientView: UIView { @IBInspectable public var topColor: UIColor? { didSet { configureView() } } @IBInspectable public var bottomColor: UIColor? { didSet { configureView() } } override public class func layerClass() -&gt; AnyClass { return CAGradientLayer.self } public override init() { super.init() // calls initWithFrame } public required init(coder aDecoder: NSCoder) { super.init(coder: aDecoder) configureView() } override init(frame: CGRect) { super.init(frame: frame) configureView() } public override func tintColorDidChange() { super.tintColorDidChange() configureView() } func configureView() { let layer = self.layer as CAGradientLayer let locations = [ 0.0, 1.0 ] layer.locations = locations var color1 = topColor ?? self.tintColor as UIColor var color2 = bottomColor ?? UIColor.blackColor() as UIColor let colors: Array &lt;AnyObject&gt; = [ color1.CGColor, color2.CGColor ] layer.colors = colors } } Pretty straight forward, the trick is to make the UIView a `@IBDesignable`, which will render it in Xocde. By making the UIColors `@IBInspectable` one can set them in Xcodes attribute inspector. Once you have that class in your project you can add Views to your storyboard and give them the class GradientView. [How it looks in Xcode](http://i.imgur.com/AWXVX9B.png)
Thanks a lot!
Yes, I had the filename case sensitivity issue before. But I don't think this is it now, because the code was working with this image in Xcode 6. It started crashing in 6.1. I updated my iPad to 8.1, but this didn't help. Also, for file name issue, if let image =... should solve that, no?
when I upgraded Xcode from 6 to 6.1 I saw compilation errors in the delegate, but all had a fix-it suggestions. I fixed them and it compiled. Still it crashes on a real device though :( If it is not too complicated, maybe you can try to create a new project in 6.1?
I answered this earlier for someone else. You've set a breakpoint in Xcode. Just disable/delete it http://www.reddit.com/r/swift/comments/2iw58b/im_a_scrub_help_me_with_this_basic_app/cl7brvv
People had been preparing tutorials for publishing since it was made available to developers at the start of June. There are already comprehensive paid classes for Swift and have been since the NDA was lifted last month. A better reason for avoiding Swift right now is that the language itself is still relatively immature.
Yes, I wrote a test runner in Swift that used the command-line app at first to run itself. That was cool, except for when they changed the build rules so that Swift runtime/stdlib gets bundled with your app and didn't do it for CLI apps :| Currently re-working things to get the build to work proper again.
Thanks! but what is the function ? because i can't call the function even in objective-c because it is void WindowListApplierFunction(const void inputDictionary, void *context); instead of the usual -(void) WindowListApplierFunction(const void inputDictionary, void *context);
This seems to be an older Objective-C or Objective-C mixed with Carbon. I agree that this doesn't look much like modern Obj-C. It should work the same as the usual though. func(arg1, arg2) should do it.
This is pretty awesome. So I have to use all that code just to get a gradient option for a view? Wish that gradient option was always available there in storyboard! Haha
Hm. Interesting. Yes, autolayout is tough. Trying to get the hang of it.
I've come across the Treehouse courses before but didn't know how good they were. Someone else also recommended it to me, and since it's available for free I'll definitely be checking it out. Thanks!
it is not tough, it is bad designed and half cooked.
You can't create segues between views, only view controllers. 
I need to translate this into Swift CLRegion *region = [[CLRegion alloc] initCircularRegionWithCenter:[location coordinate] radius:200.0 identifier:[[NSUUID UUID] UUIDString]]; 
Yes, I have a geofence app originally developed for 6.1 that I'm trying to update. It pretty much is a map with a + button that when pressed it geofences the user location. This is the code I used. But if it's not the best approach, please let me know // Asynchronous Update - (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations { // if there are locations &amp; + button pressed if (locations &amp;&amp; [locations count] &amp;&amp; !_didStartMonitoringRegion) { // Update Variable _didStartMonitoringRegion = YES; // Fetch Current Location CLLocation *location = [locations objectAtIndex:0]; // Initialize Region to Monitor CLRegion *region = [[CLRegion alloc] initCircularRegionWithCenter:[location coordinate] radius:200.0 identifier:[[NSUUID UUID] UUIDString]]; // Find the center of the region CLLocationCoordinate2D center = [region center]; // Print out the coordinates &amp; updated icon coordinateslabel.text = [NSString stringWithFormat:@"( %.1f , %.1f )", center.latitude, center.longitude]; UIImage* iconON = [UIImage imageNamed: @"icon-on.png"]; [Icon setImage:iconON]; // Zoom Level MKCoordinateSpan altitude = {latitudeDelta: 0.01, longitudeDelta: 0.01}; MKCoordinateRegion zoomlevel = {center, altitude}; //[mapView setRegion:zoomlevel]; // Circle MKCircle *circle = [MKCircle circleWithCenterCoordinate:center radius:150.0]; [mapView addOverlay:circle]; [mapView addOverlay:[MKCircle circleWithCenterCoordinate:center radius:150.0]]; // Start Monitoring Region [self.locationManager startMonitoringForRegion:region]; [self.locationManager stopUpdatingLocation]; // Update the Array [self.geofence addObject:region]; // Check the Array if ([self.geofence count] &gt; 1) { coordinateslabel.text = @"( Array &gt; 1 )"; } else if ([self.geofence count] == 0) { coordinateslabel.text = @"( Empty Array )"; } } }
I tried but i get the error: &gt;(inout T, inout context: T) -&gt; ()' is not convertible to '@lvalue inout $T11 &gt;When my code is: func WindowListApplierFunction&lt;T&gt;(inout inputDictionary:T,inout context:T) and this is how call it At here -&gt; is the line where WindowListApplierFunction is been called and where the error appears. func updateWindowList() { // Ask the window server for the list of windows. var windowList:CFArrayRef = CGWindowListCopyWindowInfo(listOptions, CGWindowID(0)).takeUnretainedValue(); // Copy the returned list, further pruned, to another list. This also adds some bookkeeping // information to the list as well as var prunedWindowList:NSMutableArray = NSMutableArray(array: windowList); var data:WindowListApplierData = WindowListApplierData(outputArray: prunedWindowList, order: 0); //println(data); here -&gt; CFArrayApplyFunction(windowList, CFRangeMake(0, ?&gt;CFArrayGetCount(windowList)), &amp;WindowListApplierFunction, &amp;data); // Set the new window list //arrayController.content = prunedWindowList; }
How does that answer get upvotes?
My usual approach in this cases to just google the class I need documentation for. For your CLRegion problem, that gives me this page: https://developer.apple.com/LIBRARY/ios/documentation/CoreLocation/Reference/CLRegion_class/index.html That, in turn, tells me that I need to instantiate a specific subclass - CLCircularRegion sounds just right. That leads me to the page https://developer.apple.com/LIBRARY/ios/documentation/CoreLocation/Reference/CLCircularRegion_class/index.html#//apple_ref/swift/cl/CLCircularRegion. That class has a constructor that looks promising! From here, it's just using the information (I'm translating the other stuff directly as it's pretty easy; if you don't agree, looking up the class references for NSUUID and CLLocation gives you the info you need): let region = CLCircularRegion(center: location.coordinate, radius: 200, identifier: NSUUID().UUIDString) Edit: maybe you need more basic information on how to read that documentation? To understand it, you pretty much only need to know the Swift syntax for methods, properties, constructors, and basic OOP knowledge, like inheritance and the like. You can learn the first part with the Swift book; not quite sure where to send you to acquire the OOP knowledge...
I honestly don't mean this to be rude or insulting or anything, but I don't understand why people request tutorials for things in Swift. It's exactly the same as doing it in Objective-C (and there are surely dozens of tutorials in Objective-C). Swift is a different language, but the APIs are the same. And if you're new to the platform, and you only know Swift, then you're making a mistake. You have to learn Objective-C to be interoperable/to understand other people's code. You _at least_ have to learn it enough to be able to read it and convert it to equivalent Swift.
sorry, I often use the term "view" as nickname if you will for "view controller". Nevertheless, the issue persists.
That's a really bad nickname. Views and view controllers are completely different things. Sounds like an Xcode bug. 
Why? It's deprecated, so why "update" it to Swift, when it's an outdated library? What's the new way? CLCircularRegion. Did I tell you anything you didn't know before? This is more information than I knew 1 minutes ago. I googled "CLRegion", and clicked twice, so I assume I'm just telling you what you took at least that amount of effort before asking everyone else. But, your presented information doesn't indicate that.
Just a bump I have the same issues
I don't think any of the framework specific docs or tuts will re-teach the language. SpriteKit isn't really a GUI framework, but a 2D game framework...
Can you provide a link to those tutorials? 
Not at all. The amount of syntax that ObjC brings over C is miniscule. It amounts to @protocol/@interface/@implementation/@property + a few more. Then on top of that the message syntax [ ... ]. Of course if you don't know C to begin with, it's a different matter.
Well, how else should you describe really opinionated people who haven't got enough experience with the language yet are extremely vocal and sure of their opinions? Have you written over 15k LOC of Swift on a commercial grade app? If not, you have less experience in the language than me.
'void WindowListApplierFunction' is a C-Style function. To rewrite in Swift you would replace: "void WindowListApplierFunction(const void inputDictionary, void *context); void WindowListApplierFunction(const void *inputDictionary, void *context) { stuff ... } with: func WindowListApplierFunction(inputDictionary: UnsafePointer&lt;Void&gt;, inout context: UnsafeMutablePointer&lt;Void&gt;) { stuff... } It could then be called: WindowListApplierFunction(inputDictionary, &amp;context)
I'm stuck with this line CLRegion *region = [[CLRegion alloc] initCircularRegionWithCenter:[location coordinate] radius:200.0 identifier:[[NSUUID UUID] UUIDString]]; I need the swift syntax for it
&gt; CLCircularRegion Thanks for the info. I did a lot of googling but working late hours into my project I guess doesn't help much. 
Yes, I understand that. You started this discussion saying that you were having difficulty finding things in the developer library. I've pointed out how to find the relevant documentation. Have you actually read the introduction to Swift? If you understand what the code is currently doing, and you understand Swift syntax, then where are you struggling? What have you tried so far? 
http://lmgtfy.com/?q=spritekit+tutorials The first website is good, you can look around there. It has a collection of the places you can learn SpriteKit from, plus books and other stuff. There's other good stuff in the search as well as you look beyond the first link. Enjoy!
No, it's not an attack at all. 'Apologist' has no negative connotation. I could have said "Objective-C advocates' or 'Objective-C supporters' and it would have meant the same thing. I'm not trying to be a jerk here, but I think that maybe you don't understand what the word means.
It's the message syntax that trips up most people. It's odd for someone without exposure to another message based language like Smalltalk. I think that for a person with just about any language with C-like syntax, Swift will be much more comfortable.
Try this. http://www.raywenderlich.com/74438/swift-tutorial-a-quick-start It a 3-part swift tutorial, and uses swift to build a simple application. 
Well, I've done a bit of Java (not a gigantic amount). It's not the concepts i'm having trouble with but how they all connect. How to connect the code to the interface and where to put the code in Xcode really is what I'm so confused with. I can't find any tutorials about where to put code and implement it to get some output that I can test!
That seems like way more what i'm missing! I thought it was an all encompassing... Swift = language and how to put the crap together (frameworks and UIKit!)! Thanks Finn the Human!
Learn storyboard. Then learn how to connect objects to the ViewController using the assistant editor. Bitfountain has a good free mini course on this if I'm not mistaken.
Like I said. You want to start learning Storyboard. That's how you make apps really. Check out bitfountain. Their mini ios8 course is exactly that. If you want something free I'm sure there's good tutorials on YouTube. Their course is just more organized I'd say. So that you work on one app and keep adding stuff to it and learning from it. Then next lesson you start a new app. Implement everything you previously learned, but this time we learn even more.
No problem! This is a great place to start: https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOS/
I have a very basic understanding of Objective-C. I think it's helped a lot with Swift since there's so many more tutorials available in Objective-C than in Swift.
I'm working through the bitfountain.io swift + iOS 8 dev course and I'm very pleased with it so far. It's a paid course and the regular price is $499 but it's been on sale through various places since ~August for $89. [You can get it on StackSocial](https://stacksocial.com/sales/the-complete-ios-8-developers-course-w-swift-pre-release) at that price. If you register a new StackSocial account they'll send you a 10% off coupon which lower the price to ~$80. There may even be 15% off coupons out there. The course goes through the entire swift language and has you build 14 apps from the ground up. The full course isn't complete yet (which is why it's still on sale/presale), but the full course should be available any day. If you start now, the full course will probably be available by the time you work your way through the available material. The videos are well done and the course creator is very responsive both on the forums and in the comment section for each video lesson if you have questions / comments. There are free resources, but they're not as structured. You'll mostly have to piece together bits and pieces yourself. The bitfountain course will help you work your way through the entire thing in a very smooth way. That's my 2¢ (actually $80.10).
create var circle2 and do the same stuff as circle to get circle2 into the scene, and then change whatever details you want to be different, such as circle2.strokeColor = differentColor. That should work right¿
Can't wait for this language to get even better down the road! Thanks for the advice!
It's from CLCircularRegion class reference. The thing you have to know to understand this is that constructors (actually, "initialisers" in Swift), are declared as `init(parameters) {...}`. This is similar to php's `function __construct` things. The first section in the docs that lists methods of a class usually lists the initialisers (they all start with init). However, the init is not explicitly called; `SomeClass(x)` will call the init on SomeClass that takes an x. So in that class reference, the first initialiser listed looks like this: `init(center:radius:identifier:)`. You can click that, and it unfolds and gives you more information about parameter types, etc. So now we know that we need a center that is a CLLocationCoordinate2D, a radius that is a CLLocationCoordinate2D (that turns out to be, when you click it, a Double), and an identifier that's just a string. You used parameters of these types in your original code, so I used those (translated from ObjC of course).
The one on the iBooks store is always current. iBooks will even download the latest versions as they become available.
That is one very knowledgable cup of tea. It speaks the truth *sip*
Look into arrays. You could do it like this: let jan = [3, 4, 2, 6, 4] let notax = jan.reduce(0, +) Also, please format your code by adding four spaces at the start of the code lines.
You're the one assuming that in order to advocate learning ObjC before learning Swift you have to be an "Objective-C apologist" i.e. trying to "defend" Objective-C.
You're avoiding the point. The SYNTAX is simple. It is not much you have to learn, whereas Swift has a lot of nuances both in syntax and runtime. Claim: ObjC is the easier language to learn in terms of syntax Reason: It has very little syntax, therefore learning the details of the syntax is simple. Claim: Swift has a more difficult syntax than ObjC Reason: The amount of syntactic constructs are much higher larger than ObjC Your anecdotal argument that "message syntax trips up most people" has absolutely no relevance, unless your argument somehow is to claim that understanding that [foo bar:1 baz:@"foo"] is takes so long to understand that it surpasses learning the syntax foo.bar(1, baz:"foo") **PLUS** **all** additional syntactic constructs in Swift.
This will probably get me downvotes, but... Why not focus on beginner ObjectiveC tutorials first? Aaron Hillegass has some excellent books that will get you productive quickly. Then, once you're starting to "get" how everything works and build some familiarity with the Cocoa frameworks, port your knowledge over to Swift.
If you have a point, then make it. I'm not doing to write a dissertation on Swift projects because you think you're clever. Make your point and move on.
I need a something more concrete than just "The amount of syntactic constructs are much higher larger than ObjC". I don't know what you mean by that. Please show me an example.
Not a bad idea, considering there are tons more tutorials out there for objective C! I'm gonna work through Apple's dev page and see if that gives me somewhere to go, and if I get stuck again.. I think I probably will go back and check out some objective C. It wouldn't hurt to know a bit of that language too!
apologist: "a person who makes a defense in speech or writing of a belief, idea, etc."
Literally, the next page after declaring variables and adding them comes arrays. Click 'next page' and it explains loops. jasamer's solution is more "functional", which is an alternate (most would say better) way to do it, but loops is a more basic construct.
Properly using Swift requires an understanding beyond that of C/C++/Java the following constructs (a sample): * Optional syntax, including forced unwrapping, if-let etc. * Implicit rules in the special init construct. * Lazy, mutable, immutable variables and properties. * Specialized get, set, didSet, willSet constructs including implicit behaviour (such as when a change in didSet/willSet will actually override the set). * Type inference behaviour in blocks/closures and auto return esp when combined with optionals. * Type inference due to return types. * Generics w associated types. * Type casting syntax including the actual behaviour (which differs from C/C++/Java/ObjC). * Optional chaining. * Raw-enum vs Union-enum syntax and behaviour. * Overflow operators. Do you want me to go on?
Exactly. There is no negative connotation. I don't know why you have a problem with the word, unless you just want to argue with me. What exactly is your objection? People in this thread who think that you should learn Objective-C before (or instead of) Swift are Objective-C apologists by definition. Where is the breakdown in communication between you and me?
I'm not going to go fishing for the answer you're looking for. If you have a point, please make it.
I'm not going to go through your list point by point, because I think there's a major theme here. It seems to me that you're biased by your familiarity with Objective-C. Here are a few examples: Optionals are a trade off between dealing with and understand null values and setting rules for dealing with nil values. I don't think that things like optional binding and unwrapping are any more difficult than littering code with nil checks. Property observers are dead simple. Is anyone really struggling with the concept? Many (myself included) do argue that type inference makes Swift an easier language to deal with. I don't think I've ever heard anyone say that Swift's closures aren't a huge improvement over Objective-C's block notation. Add to that things like not having to deal with alloc/init crazyness and just using clear init methods and you have a cleaner language with cleaner code. Look, you and I disagree. Let's let this die, ok? We're not going to make any progress in converting the other person and at this point it's just become a pissing contest. Agree to move on? 
No, I'm not biased with my familiarity with Objective-C. Do you know what syntax means? Is the ObjC syntax simpler than Swift's syntax or not? It is it very clearly is. It's that bloody simple. Of course, there are other things to consider, but since we're talking about **syntax**, the relevant thing is **syntax** it's nothing else that you want to insert into the discussion. I am not discussing what language is the easiest to master, nor which language is the easiest to get started in, or which language is the most mature, or which language has the best support for some particular type of programming. I'm just saying that the ObjC syntax is significantly simpler than Swift. That's an objective truth. You can enumerate the number of constructs necessary to form ObjC, and compare that to Swift. Case closed.
&gt; I'm just saying that the ObjC syntax is significantly simpler than Swift. That's an objective truth. You can enumerate the number of constructs necessary to form ObjC, and compare that to Swift. Case closed. Bullshit. Case closed. I'm done with you.
**You're** making the assumption that people who tell others to learn ObjC first, does so because they feel that "ObjC is better than Swift" or "ObjC is more important than Swift". And that is wrong. There are perfectly legitimate reasons why one would suggest ObjC first that has nothing to do with the relative merits of one language over the other: * C/ObjC&lt;-&gt;Swift bridging is at this point not mature enough to prevent issues from occasionally occurring. Workarounds and debugging requires an understanding how the Cocoa code works, which isn't possible without a solid grasp of how it's used from ObjC. As a random example, consider the libraries that throws NSException. * Most library code is still written in ObjC/C and may rely on things that do not seamlessly carry into Swift - such as C macros. Without knowing C/ObjC there is no way to integrate them. * Example code is mainly in C/ObjC - without understanding those, it's not simple to translate code samples into Swift. ObjC in itself is not a difficult language if C is well known. The main effort lies in learning the Cocoa/CocoaTouch frameworks. These are identical in Swift/ObjC (except some methods are missing in Swift), so no real loss is occurred by learning the ObjC side.
Wow that makes sooo much sense! Thanks for teaching me how to read their documentation. I feel I can actually tackle it on my own. Final question.... init!(center center: CLLocationCoordinate2D, radius radius: CLLocationDistance, identifier identifier: String!) Why does **init** and **identifier: String** has **!** ? Isn't that used with optionals?
Take a look at the grammar for ObjC. Now compare the grammar for Swift. ObjC wins that way too.
That's actually a pretty good question. Here's what's going on most likely (I'm pretty certain but not 100%): First of all, `init?(...` means that the initialiser is "failable", i.e. it returns an optional that may be nil. For example, look at the initialiser of NSURL that takes a string: The string might not be a valid url, in that case the initialiser would return nil. So that feature is pretty handy to indicate whether initialisation worked; it was introduced in Swift 1.1. Similarly to that, the `init!(...)` means that the initialiser returns a automatically unwrapped optional. (I assume you know the basics about those). The obvious question is: why would you ever return an automatically unwrapped optional form an initialiser - surely it either is a straight up optional (if it can fail), or just not an option (otherwise)? And it's true, you would never do this in any new Swift code you write. However, this class isn't a new class, it was written in Objective C, and that Swift version was generated automatically. Objective C doesn't have the notion of optionals; every singe initialiser could in theory return nil, but most of them don't. Any initialiser that was originally defined in Objective C returns a forced unwrapped optional when accessed from Swift*. This way, it makes your life easier: you can just use the result directly, but if you know that the initialiser might actually return nil, you can still check it. (If there were no "!", you wouldn't be able to check whether it's nil, because it's not an optional). A similar argument applies for the String parameter: Swift can't know whether that parameter is allowed to be nil. Probably it's not. But to allow for either case, it's also declared as a automatically unwrapped optional, so you could pass nil if that makes sense in that case. It's not a standard optional ("?"), because that implies that nil actually is a valid value for that parameter - but that's unknown for Objective C methods. \* It's not quite true, actually. Apple auditioned the more important frameworks and added that information manually. When Apple gets around to update the init for CLCircularRegion, they will most likely remove both exclamation points - the initialiser can't fail, and the documentation says that you have to supply an identifier, so that wouldn't be an optional). However, the automatically generated Swift version of the class can't know that without a human telling it. Finally, you might ask, why is there no exclamation point next to the `center: CLLocationCoordinate2D` and `radius: CLLocationDistance`? That is because those, in Objective C, are structs/primitive types that always have a value, i.e. those can't be nil.
It never worked this way for me throughout the beta cycle of Swift. Instead, I would need to delete the local copy of the book and manually download it fresh from the cloud before I would see the changes. But maybe that's because I was too impatient to get it right away?
Wrote this blog post a few days ago, and would like some suggestions/comments on alternative methods to do this.
Have you ever stopped to consider the idea that maybe you misunderstood my comment in the first place?
Okej thanks for the feedback. I have started to read the "swift book" in bookstore. I'll try to start bulding and come back to you guys if i have any more questions, thanks :D 
I'm still waiting for a single example of lessons learned from Swift at 15k LOC that you can't see at 1000. Is this relevant? Well, obviously writing code breeds a certain familiarity, but also, issues not obvious for a smaller project may appear in a larger. Compare writing 1000 lines of Ruby and 10000 lines. The need for organisation and navigation becomes much greater. Naive includes doesn't cut it, and lack of types in method signatures makes greater demands on documenting proper use etc. Similarly, 15k LOC of Swift will reveal issues that doesn't occur unless you're at that magnitude. With experience this is obvious, and your claim as to "LOC being meaningless" becomes a simple attempt at an ad hominem. Granted, my blanket statement of "their opinions should not be taken seriously", could be interpreted similarly, except for the fact that I actually qualified that statement with "people who view the language with rose-tinted glasses". This is a general statement I stand by and it's not restricted to Swift. Any advocate of a language who zealously defends it by ignoring its weakness should not have their opinions taken seriously. In my opinion there aren't any perfect programming languages, because a programming language is fundamentally about trade-offs. Consequently, anyone who would defend a language without acknowledging its weaknesses, is simply unwilling to admit the mandatory trade-off that has been made. The honest approach would be "I like this language, and these-and-these are the trade offs, but for me personally in the work I do, they are not very important". This is both honest and constructive as you do not know what constraints and requirements someone else has. By acknowledging the weaknesses, you allow the other party to make their own judgement whether the particular trade-offs are acceptable or not. **Withholding** those trade-offs on the other hand is intentionally misleading and may cause lots of grief. Consequently I find it very irresponsible to do so.
So you have no idea what you are talking about. No, it does NOT work great. Singletons are NOT designed for that. You *WILL* run into crazy issues abusing singletons like that. Pass data between **_OBJECTS_** (Not just View Controllers) directly. View controller or not. This is seriously mediocre post and I highly recommend you redact your entire blog. This is detrimental to the community. In fact, please don't write blog posts until you are proficient in the skill.
I'll definitely look into that. Thank you for replying!
Just explicitly pass your User instances between view controllers using properties. Seriously.
I'm learning swift from the very basics as well. The language itself isn't that hard for me to learn, but just like you are experiencing, it's way more than just the language. I bought the udemy course for ios8/swift and it's helped me quite a lot. I only had experience with HTML/CSS and a very tiny bit of Javascript/PHP before I started learning swift. I think the course does everything really good. Of course it starts of with the basics of swift, playing a bit in playground and stuff, but it after a while it goes way further. Storyboard, autolayout, connecting elements to code, using libraries and stuff it all gets explained. Bought the course for 29$ 2 weeks ago, it's up to 49 again now I believe. Definitely recommend it. 
I do agree with what you are saying here, and I'll take self-criticism for it. I don't want to be the source of bad advices and will un-publish the post until I find the best way to do this. Totally understandable. So basically the consensus is to pass objects when needed. So for example. Say my app is layed out like this: LoginViewController &gt; HomeViewController &gt; DetailViewController. I get my user object in the LVC, I would then pass it to the HVC and then pass to DVC? 
Thanks for explaining and clearing it up for me. You make solid points and I'll definitely give this a try.
I do it all the time, and yes, it's fine in the right circumstances. If you have a singular data resource that you deal with throughout your application, it's often the best solution. Are you going to tell Apple off for providing `[NSFileManager defaultManager]`? Do you instantiate one file manager at the start of your application and pass it around from view controller to view controller? Or do you recognise that you only have to deal with one file system, and it's okay to centralise this data management in a single, globally available resource? 
This code does nothing: &gt; override func didReceiveMemoryWarning() { &gt; super.didReceiveMemoryWarning() &gt; } Apple put that boilerplate in their templates because they expect you to put cleanup code in that method to discard non-essential objects when memory is low. If all you're going to do is leave it empty and call the superclass implementation, there's no point in having it and you may as well delete it altogether. If the method isn't there, the superclass method gets used, so the code doesn't actually do anything that wouldn't happen anyway. 
Relax, there's nothing intrinsically bad about what you're doing. You just have to know when it's appropriate to use this approach and when it isn't. If you have a particular piece of information in one view controller and you need another view controller to have that information, then this isn't the best approach. But if you have a singular data resource that you'll be using throughout your application, this is a convenient way of working with it. 
Temper, temper.
&gt;Oh, so you never intended to dismiss them as zealots unable to form an unbiased opinion about Swift vs ObjC? Really? &gt;You never tried to cash in on the negative connotations the word acquired in popular usage? Holy shit, can you read? How many times do I have to say it. **THERE IS NO NEGATIVE CONNOTATION** You really do have trouble comprehending English, don't you?
Original meaning no, but popular usage has muddied the waters, are you sure you are unaware of this?
Which is what I have, in my use case anyway. Generally I only need access to the userId and an API token in every view, so in my case having something centralised as you said is preferred. 
That's simply not true. You're clearly not a native English speaker.
This article uses an example right near the start that demonstrates a very serious potential bug: &gt; var myInt = 10 &gt; var ptr = UnsafeMutablePointer&lt;Int&gt;.initialize(&amp;myInt) &gt; ptr(20) &gt; myInt // this is now 20 You should *never* do this. Local variables in Swift are not guaranteed to have an address – except temporarily when you need an r-value reference to them (i.e. at the point of the "&amp;myInt"). This means that by the time you call "ptr(20)", the pointer may already be invalid. The only correct way to do this is using a withUnsafeMutablePointer block: var myInt = 10 withUnsafeMutablePointer(&amp;myInt, {ptr in ptr.memory = 20 }) println(myInt) // this is now 20 In this case, the closure scope causes the "myInt" value to be pinned to a memory address for the duration so you can guarantee that it's still valid when you set the value. It's otherwise a good article. The other examples are all valid (since they either use buffers allocated elsewhere or allocate their own memory). 
The only solution that worked was to create a new project and copy the code. Now I have to do all the layouting again...
Just tested in my swift project - yep, it looks like Pop now works on Swift just like any other Obj-C library; I installed through cocoapods with bridging headers.
a less heavy handed approach would be to simply make a user property on the appDelegate class. That way it is accessible throughout the app. As Legolas pointed out singletons definitely have their place in a developers tool belt but using it in the context of your article is akin to using a chainsaw to trim your fingernails. But hey don't sweat it, we've all been there. You live and learn and now you're that much better of a developer.
pretty cool withUnsafeMutablePointer i didn't read through the article myself. I skimmed over it but thought i'd share it here for those interested. where is this documented that local variables aren't guaranteed to have an address? ooc
 I'm just starting as well! What are you trying to build with Swift?
Apple dev jckarter here in the forums: https://devforums.apple.com/message/1000619
have you tried one site called: google.com? https://www.youtube.com/watch?v=3IDfgATVqHw
Thanks, I'll be sure to never visit this sub reddit again. May you encounter like minded people the rest of your days. 
&gt; iBooks will even download the latest versions as they become available. Perhaps that's what's supposed to happen, but it doesn't always work. I got the first update of the Swift ebook automatically updated in iBooks, but for all later versions, I had to delete the old book and re-download from the iBook store.
Recommend to read the article: https://medium.com/@stigi/swift-cocoapods-da09d8ba6dd2 You can mix objc code and swift code.
It's Swift, not JAVA... You can make your own `Random` class if you want. Swift won't embed such a class because it relies on C APIs linked to the kernel. 
Swift has functional features too, so there can be top-level functions. There's no point in putting the random method into a "Random" class. They obviously wanted to use a pretty descriptive name for that function; that doesn't change when you put the method in a class (e.g. `Arc4Random.nextUniform(...)` or whatever wouldn't be a big improvement). But the primary thing that makes your code very verbose isn't the random function anyway, it's that Swift doesn't implicitly convert pretty much anything, which is why you need all of those casts. If there were implicit casts, you could write `array[arc4random_uniform(array.count)]`, which isn't so bad. If you need a random function that returns an Int very frequently, I'd just define one. Aka. func random(maximum: Int) -&gt; Int { return Int(arc4random_uniform(UInt32(maximum))) } Then you can do `array[random(array.count)]`. 
The problem here is that getPointInGrid, as a member function, can only be called once initialization of member variables is complete. Your object is incompletely initialized when you're calling it because position hasn't been assigned. Inserting the dummy value assignment rectifies that situation. I'd suggest fixing this by either making the dummy value part of the variable declaration, or making getPointInGrid a non-member function (the current definition doesn't appear to depend on the instance).
Thanks. That worked. I moved that function out of the class and made it a static context. Probably something I would have done eventually since it doesn't really need to be a member function of that class.
usually stuff like that happens if you have previously linked your outlet to a variable in your class but then removed that variable and then linked your outlet to a new variable. Now what you have in IB is an outlet that is connected to a non-existent outlet in code and to another existent outlet. Then upon awakeFromNib of your NIB file, the runtime will call the setOUTLET: method of your view controller where OUTLET is the name of the previous outlet that you had chosen but have now removed. that setter method obviously doesn't exist now since you've removed the variable associated with it and your code crashes. go into your storyboard/XIB file and check the connections from your outlet to your code and make sure that the outlet is connected to the right outlet in code. hope this heps
You answered our own question, learn ObjC and use that to read docs! I would give you a real answer but documentation out there is a better source than summarizing in a reddit comment. Apple offers some good core data docs although I do believe knowing objC is somewhat required, depending on whether or not they have recently updated that stuff.
There's nothing new in the Swift standard library for dealing with regex, it's basically NSRegularExpression all the way. However, [Mattt Thompson has had some fun abusing operator overloads and literal convertibles for more Swifty regex handling.](http://nshipster.com/swift-literal-convertible/)
Learn obj-c and convert relevant code. Google 'objective-c reference guide' and you should be able to learn the key parts of the language in an hour or less. Generally it is best to delve into something like this using guides/docs/examples and there is no better way to do that than learning from current resources.
Do you need any further clarification?
any way to choose multiple pictures in an imagePicker for example 2-5 pictures and have them resized to 5 uiimage views?? 
Have you checkout this project https://github.com/ankurp/Dollar.swift#string-example-usage You can do regex as following using the library: "Dollar" =~ "oll" =&gt; true let proj = "Dollar and Cent" proj["^.+[^and Cent]"] =&gt; {Some: "Dollar"}
Uh oh, one of these guys...
I'm sorry, but the internets just called and told me you're wrong: https://encrypted.google.com/search?q=apologist+negative+connotation+popular+usage
So you want to possibly set them later? That is, not in the constructor.
Why don't you want to set them as optionals? Any reason? Perhaps you could set a default value which would make them non-optional.
In your ignorance you failed to read the OP's post or to contribute in a useful manner. 
exactly - or pass something in via a convenience init method...
If I keep those properties as optionals, and if they're public, I have to use ?/! every time I use them. I'm sure this is more an issue of me not knowing the best practice on how to do swift and dependency injection, but I don't see anything on the web for it... That's why I'm asking... :)
You can have them as implicitly unwrapped optionals. If they may/may not be there, you should probably use the ?/! though, you're circumventing the point of optionals because of its inconvenience. Also, if a dependency, shouldn't it be there?
this! implicitly unwrapped optionals var myString: String? if let yourString = myString{ // this is similar to saying if (myString.length &gt; 0){ ... } except that in this block yourString is equal to myString ONLY if myString has a value }
just because somebody tries to do something special doesn't mean he is "one of those guys". Get out of that Apple mentality, you. SNAP OUT OF IT...
Every example of implementing Cocoa classes with @IBOutlets are examples of dependency injection. The correct way is to use optionals. Learn to love them. Quick tip: for the optionals that are not really optional for your class, use ! instead of ? when declaring them so your class will break ASAP if you/someone forgot to provide that dependency. Use ? for the rest and proper unwrapping technique as appropriate.
I wonder if they'll ever implement a Haskell style deriving system. This is perfect for that. Perhaps if we get macros. 
It probably just came down to one stupid programming mistake - but it's a little ironic that the app that Apple proudly proclaimed to be the first swift app they built, crashes when trying to perform its sole purpose.
Yes, Metal only works with recent iOS devices and not in the simulator.
I'd like to get iOS &lt;-&gt; Android communication to work; for some reason I thought that's what OP does (because he mentioned sample code for both, but I realise now that he probably does something different). When I look for the thing I want, I find discouraging stuff like this: http://stackoverflow.com/questions/18884705/transfer-data-between-ios-and-android-via-bluetooth I'm not quite convinced that answer is 100% correct though, it's just really hard to do. Eg, it might be possible to implement an Apple-compatible TCP/IP stack for bluetooth on Android, or get one of the other bluetooth protocols to work, or figure out some hacks with the more recently introduced bluetooth features... I'm not aware of a single zero-config way of allowing an iOS and Android device to create a direct connection (the MultipeerConnectivity Stuff is closed source, WifiDirect not supported on iOS, and Bluetooth is also weird on iOS, and I haven't done a lot of research in the new bluetooth stuff, but so far, using it for that purpose sounds like a hack at best)... It would be nice to have that.
Outlets are one of the few areas where `!` is the best solution for now. The real problem is that `loadView` works in practice like a second initialiser, with the view controller not properly initialised until once it has run. So outlets are like non-optional properties that should be given a bit of leeway in their initialisation just as non-optional properties are allowed to remain uninitialised until an initialiser has finished running. It's difficult to figure out how best to accomplish this at a language level though. Using implicitly unwrapped properties is not ideal at all. 
&gt; If I keep those properties as optionals, and if they're public, I have to use ?/! every time I use them. Yes, which is a good thing. You don't know whether you have a value there or not. So you need to either: * Test for a value explicitly (e.g. `if foo == nil` or `if let`) so you can handle the cases where you don't have a value. * Tell the compiler you are ignoring the cases where you don't have a value (`?`). * Tell the compiler you definitely have a value and you don't mind if your application blows up otherwise (`!`). All the optionals are doing is ensuring that you have handled the case where there isn't a value. That's the entire purpose of their existence. You should learn to use them effectively, not try to avoid them. Swift is not Objective-C with a funny syntax. Don't try to write Objective-C in other languages. 
Not as far as I'm aware. I think Apple's approach is that most developers should write for the higher level APIs like SpriteKit/SceneKit, and those frameworks will use the best low-level system available at the time. Metal is more for engine developers trying to get the best performance out of mobile as possible. Remember, the concept behind Metal is to get as close to the hardware as possible. This is much easier to accomplish on iOS devices because the hardware is so tightly controlled. However once you start thinking about OS X, you realise that people might be putting third-party graphics cards into their Mac Pros etc., so you end up needing more abstraction again. 
Yeah you're right in that context. The easiest way in this day and age is to use wifi to communicate instead of bluetooth. It's faster and most people with a smartphone are always connected to wifi or cellular.
No, it's not ideal outside the scope of what is implemented for Cocoa, just the best choice for what we have. As for solutions, it would be easy to require an initializer that represented the dependencies instead of annotated properties, but, that isn't quite as slick. Still, I don't think Apple will break Swift's rules just for Cocoa DI. My guess is it will not change from what it is at all, in fact. So, may as well get used to it.
I'll venture to disagree. I feel that being a "blank slate" and learning the framework from scratch via Swift will likely result in better code. I could learn Chinese by converting English sentences word-by-word and still express myself. Or I could learn it natively/naturally and be more fluent. I've run into several situations where I'm trying to do something with swift and only find Obj-C examples that work when converted. But most of the time I've found a more elegant solution by thinking in Swift. 
It is not what you have. It's what you've decided you have. Singletons are the simplest design pattern, and end up being the most abused, as you are advising people to do here.
It's hard to think of a more obvious solution than this.
Even developing against OpenGL will inevitably lead you into compatibility issues in Simulator vs. device. Really, if you're doing 3D hardware accelerated work in your app, you need to be testing it on real devices.
I already said that in popular use it has accumulated negative connotations. I certainly have seen evidence of that in common use, but even so, context matters. And it does not matter whether you use "defender" or "apologist" and it's still not neutral **in the context**. What is ridiculous is your idea that people are trying to defend ObjC "against" Swift if they argue that ObjC is worthwhile learning for a fresh iOS dev who wants to learn Swift. As you've amply demonstrated elsewhere, your response to counter arguments is typically verbal abuse, ad hominem or strawman arguments. Not very helpful.
As people already said, the proper way (in Swift) would be to use optionals. Force unwrapped optionals is also possible, but is - in general - not recommended.
The truth is, your opinion means literally nothing to me. I don't care one bit about you, or your beliefs. I've tried to explain to you what the word means, but you don't seem capable of understanding. Yet, you continue trying to argue with me. I'm not sure why. It's not productive for me, and probably not productive for you either. In any case, I'm going to be the adult here and tell you that there's no point in continuing this conversation. You have a belief and you're not interested in hearing what I have to say. And, conversely, I have a belief and I'm no longer interested in hearing what you have to say. So, that's it. I'm finished feeding you. I'm going to reply to every one of your future messages in this thread with a link back to this message, and nothing more. I didn't bother reading what you wrote here, and I'm not going to read what you write in the future. I, quite frankly, don't care. So please, don't waste your time.
Hey there, noticed you were getting downvotes on some of your recent posts and couldn't figure out why. Had a look through your history and I think probably someone from the clashofclans subreddit was trashing your karma. The butthurt is strong with that forum apparently. Anyway, the point (and I do have one) of this fortnight old reply is to talk about some stuff which you've probably already figured out, if so I apologise and ask only that you be gentle. ------ Okay, so the point of a for loop is to do everything inside the loop multiple times. E.g. if you were setting the colour of a control in a loop, it would set the colour multiple times, and then only the last one in the loop would 'stick' (it's possible you might see the colour flicker a little, but unlikely, modern cpus are too darn fast ;-) You could have said something like for 0 to the valueIwant, and that'd get you there, but it would kind of suck a lot. Why repeat something N/2 times when doing it once works fine? Okay so you figured out a way to do it only once. Well done! Now let's talk about a more general solution using the modulus operator. If you want a value to fit into a particular range (say 0...23 because you have 23 elements in the array) then you can just modulus by the size you want. so if index == arrayofcolours.count - 1 { index-- } (note also use of decrement operator) becomes something like index = index % arrayofcolours.count (forgive typos etc im on mobileh) Note also you'd need to shift that from after you use it, to just after you incremented index. Now another way to cycle through colours is to use HSV; hue, saturation and luminosity or something like that. If you want a candy colour scheme for instance you can figure out an S and V that give you that, and then change the hue. Conceptually hue is a colour wheel/circle, with red at 0° (or 360°, they're the same thing), so if you wanted 12 different colours you could just track the last value you used for hue, whack on an additional 30°, (I'm not sure if you need to take the modulus of 360 here - it might actually be implemented as floats from 0 to 1.0 or ints from 0 to 255), and then make a new colour with that new hue. So you might say well that's nice, or I could just make an array of 12 colours, and use a for loop to instatiate them in my init function and/or constructor of choice. And I'd agree. However, what if you wanted to cycle through every possible colour, but also wanted each change to be a noticeable bump? Instead of adding thirty degrees onto the circle you could add 29 degrees. ----- Just some ideas to think about, hope it helps
Awesome! I look forward to learning more about this language. 
Come on folks. Please get along. 
This is good info thank you. 
Excellent! Very helpful, that solved it.
I like this thread. Why? Because it's a good example of the kind of help this subreddit can offer.
Most likely, you have some reference cycle in your game view controller. Unfortunately, Objective C and Swift don't use "proper" garbage collection, only automatic reference counting (ARC). The basic idea is that each object in your application has a retain count; for every strong reference to an object, that reference count is increased. The object is deallocated when the reference count becomes zero (i.e. no other objects have a strong reference to it). Any "normal" property creates a strong reference; if it should be weak, you need to add the `weak` attribute. A common pitfall that causes reference cycles occurs when using closures. Consider this class: class A { var closure: (() -&gt; ())? = nil init() { self.closure = { print(self) } } } The closure captures any variables used within it, including the self; this is also a strong reference. So in this case, the closure holds a reference to the instance of class A that created it, and A has a strong reference to the closure - this class, once instantiated, will never be deallocated, because there will always be a strong reference to the object and the closure. Because you're using GameKit, I suspect you're using some kind of closure for the action stuff that you can do with GameKit; you probably reference self in those, so that might be where your reference cycle is coming from. To fix this, use `[unowned self]` in the closure. This tells the closure that it should not capture a strong reference to self. In the example above, this would be `self.closure = { [unowned self] in print(self) }`. This way, when there are no more references to A from "outside", it's retain count will become zero, the object will be deallocated, and then the closure is deallocated, too (since the only reference to the closure is from within A).
arc4random_uniform is a C stdlib function, so talking about why it isn't a class method is irrelevant – it isn't possible in C. As for its long name: C already has functions named rand, random and arc4random so none of those names are available. I think if there were a true Swift function for random numbers it would look something like this: protocol RangeRandomizable { class func random(#min: Self, max: Self) -&gt; Self } func random&lt;T: RangeRandomizable&gt;(min: T, max: T) -&gt; T { return T.random(min: min, max: max) } and then you'd need extensions for each basic type that can be randomised over a range.
awesome, that probably means there is a lot of (initial) interest in Swift, which is probably good. let's have a look at these numbers a year from now.
Which circle is correct in all three?
the big circle since it has the coordinates from the pin (or user's current location) then I need to draw the small circle 300 meters to the left of the center, the radius of the main circle is 300 meters, basically I want the circle to be drawn on the edge of the main circle
300m is just an arbitrary number for geofence 
Yes, the number of meters per point on the map changes as you change latitude. The math behind these projections can be cumbersome, however, [MapKit provides functions to compute this.](https://developer.apple.com/library/ios/documentation/MapKit/Reference/MapKitFunctionsReference/index.html#//apple_ref/doc/uid/TP40008209) I would think that `MKMetersPerMapPointAtLatitude` or `MKPointsPerMeterAtLatitude` will allow you to accurately derive the coordinates necessary to draw the smaller circle in the correct location consistently. 
OMG thank you
From what I just googled, you should do something like (I typed this up in a playground, so yeah... UIView.animateWithDuration(5, delay: 6, options: UIViewAnimationOptions.CurveEaseIn, animations:... You could use whatever curve options you want If you look at this [link](http://airspeedvelocity.net/2014/09/15/changes-to-the-swift-standard-library-in-1-1-beta-2/) it appears that (in the 4th bullet) there were some changes in swift 1.1. It seems like you could also create one with UIViewAnimationOptions(rawValue: someValue)
Usually, the Facebook or Twitter SDK terms will spell out what you can and can't use. And the rule of thumb is generally 'if a regular user can't tell which is your app and which is theirs, you're infringing.'
Same stuff with OSX dev with swift.
What I meant was the 300 looks like it might be based getting to the major road from the centre point, and not your radius. Do you have examples where it doesn't land on a road. 
RTFM: https://developer.apple.com/library/ios/DOCUMENTATION/UIKit/Reference/UIGestureRecognizer_Class/index.html#//apple_ref/occ/cl/UIGestureRecognizer This has complete examples. Tap is just a subclass of gesture recognizer, they all work exactly the same for setup purposes.
one step closer to freedom :-)
Finally :)
I'm blown away. I had a very annoying issue in my project that caused the swift compiler to crash when I tried to build with the release configuration. No useful error message, just that the swift compiler exited. I was ignoring the problem since debug builds are fine for now, and was hoping that Xcode would give me a useful error message at some point... no luck so far. So I gave AppCode a shot, and incredibly, it gave me a useful error message! I declared a class inside a top level function; Swift seems to have problems with that. No problem, I just moved the class outside, and boom - the project compiles now with release settings! Not only in AppCode, in Xcode too! Thank you for posting this and thank you AppCode, this would have been sooo painful to figure out otherwise. Unfortunately, SourceKit is still crashing constantly and syntax completion completely broken in Xcode when using my project. Would be pretty sweet if there were some way to figure out what Xcode's fucking problem is... any ideas?
1) Apple isn't even remotely close to being the "largest company in the world." 2) JetBrains only makes development tools. They aren't burdened whatsoever with the requirement of doing the truly hard work of producing platforms for developers to target. But, even if they were, their realm of focus is miniscule compared to Apple. And why be so impressed? Because, one little aspect of their tool is slightly better? Overall, the feature set is only a small portion of Xcode's. Don't get me wrong, I use and pay for JetBrains products (not AppCode), but, they are hardly some amazing company. Their IDE IntelliJ IDEA is awfully slow and chock full of annoying bugs despite being very near to shipping the 14th major version and this IDE targets a very stable platform that has major changes maybe once every two years usually less often. I think, given the great challenge of producing a quality IDE, that Apple is doing just fine, on par with most other companies. Really, only Microsoft is impressive in this area and even there we have provisions that make it possible (slow changes, far narrower target environments, limited functionality, etc.) But, VS is pretty high quality for a first party offering.
'largest company in the world" was a figure of speech (btw they are the 19th largest to be specific). I can provide a rebuttal to almost every point you made but honestly I just don't feel like it. The fact remains that a company of Apple's size and resources should be able to produce an editor on par with AppCodes. There is no excuse anyone can provide to combat that statement. I think its safe to say that XCode is the most buggiest IDE that any of us have ever used or seen on the market.
Yeah of course. My standard first routine is: - Delete module cache - Delete project.xcworkspace and xcuserdata from the project in question - Delete the com.apple.dt.Xcode cache - Reboot/Restart Xcode I've started to dig around in my code for the cause, and I'm just feeling massively trolled. For example, I have a class that causes a SourceKit crash. I try some stuff, the crash goes away. I revert to the original version, the crash is STILL gone! WTF Xcode? At Xcode's current state, it makes no sense to look for problems with the code whatsoever, because Xcode just behaves completely non-deterministic. There's no way of knowing whether there's actually a bug in the code, and there's also no way of knowing whether changing code fixes anything. The crashes/functioning syntax completion just come and go as they please it seems. Is there some other magic cache that Xcode uses that I'm missing?
Aha XCode the 'buggiest' IDE? No way.. It lacks customization in some sense, and perhaps it doesn't have 'the best' interface, but bugs are not an issue. Sourcekit crashes were happening for awhile but I haven't seen that in ages, considering swift is so new I don't find it surprising that there are issues related to that. (I have been using XCode 6 since beta 1) . I also believe XCode could use better indicators of how to fix certain issues, although the only IDE I have used that does that properly is Visual Studio 2010+
1) Depends on the metric - Apple is the biggest in terms of market capitalisation. But revenue is probably the better metric; "not even remotely close" seems a bit much And yeah, I was kinda impressed that it was able to identify that problem.
yeah my "buggiest IDE ever" comment is definitely an highly opinionated one so I'll concede on that but it is without a doubt very buggy in its current state (in the Swift context that is). And a quick google search reveals that previous obj-c only versions were very buggy also. http://devcodehack.com/xcode-sucks-and-heres-why/ http://www.touch-code-magazine.com/xcode-4-an-honest-opinion/ And I also agree with you on it not having the best interface design. Shuffling the panels around often makes me feel like I'm playing 3 card monty with the IDE.
To be fair if you search up "[insert name of IDE] sucks" then you can see that everyone complains about their IDE! I remember hating eclipse years back..I don't miss that thing. It would tell me that my code was crashing on a certain line and it would turn out that the line was totally unrelated to the problem, ultimate frustration.
Great description. Though I'm going to nitpick and disagree that it Is unfortunate that we use ARC instead of Garbage Collection. To me Garbage Collection seems the poorer option if one were to choose. It requires more memory in the long run and it seems dangerous to me to have less control over an objects lifecycle. Thoughts?
 
That's not a lot of information, but I'll try to give you some ideas. The fade in part can probably be accomplished pretty easily by animating the alpha of an image view containing an image of a rainbow. "change the rainbows's colours" doesn't say a whole lot - change in what way? If your rainbow can be drawn using a linear gradient (i.e. it's not curved), you can go with a CAGradientLayer; that supports animating any colours you want. Another possible approach could be adjusting the hue of a rainbow image - you could try the CIHueAdjust filter.
It has nothing to do with roads. It just so happens that it looks like it lands on one.
If I just wanted to use an ImageView then I would've done that. I don't want to use any images, just code. I guess I should've mentioned that in my post. Jasamer gave me a pretty good lead, so yeah I'll be able to do it.
Thanks for the info!
I think it's the opposite; it's more dangerous if we as developers need to take care of object's life cycles, because we make mistakes, but a garbage collector doesn't. In some cases, manual control of an object's life cycle is needed, but most garbage collected environments allow this (e.g. Disposable in C#). I think that in most applications, garbage collection is a benefit. It just takes away a burden imposed on the developer - in Swift and Objective C you always have to be aware of where strong references are, and manually declare weak ones, and deal with the possible problems of weak references (e.g. a delegate "disappearing"). It can be especially tricky for new programmers. Closures make the whole thing especially annoying, because it's so easy to miss reference cycles. The only major disadvantage of garbage collection is when you have a ton of small objects in a program that needs high performance; in that case, garbage collection can have a noticeable performance impact. But that's mostly a problem in Java, because it doesn't have value types. Small objects are usually candidates for value types. E.g., consider an array of points - in java, each point would be a full, garbage collected object. In Swift, you would use a value type for that (like CGPoint); because value types aren't referenced but copied, a whole lot of memory management problems just go away; garbage collection doesn't need to waste time on those. Considering how fast hardware develops, loosing a few percent of performance in exchange for simplifying life for developers and eliminating a lot of memory leaks is a pretty good trade imho. If you really stumble across a problem that needs an efficient implementation, and it can't be done because garbage collection is too slow, do it in C I say.
Well, you can use the same image, but it will probably be pixelated :-P Ie. if you have an image that's displayed in a 100x100 points UIImageView, the non-retina version needs 100x100px, the retina version 200x200px, and the iPhone+ version 300x300px if you don't want your stuff to look bad. Also, this is completely unrelated to Swift.
Here is a good reference: you know those circular loading indicators that you see in apps? There is tons of open source code related to that (go to GitHub) which would be a great starting point. You'll understand how to draw circular objects to the screen, which you could modify to have it look like a rainbow and go from there.
Definitely the buggiest IDE I've ever used as well. It is especially bad when using Swift. 
Already made my rainbows, and yeah I used circular objects to do it. I might also try doing it by bending a rectangle into a curve.
Ah ok. The API mentions this. &gt; Discussion &gt; The distance between map points decreases as the latitude approaches the poles. This relationship parallels the relationship between longitudinal coordinates at different latitudes. Maybe compute the two points instead, then draw your circle from that. 
THank you for your reply. What is the ideal image size for each device,like iphone 5, iphone 6, ipad air, etc..? 
** if you have an image that's displayed in a 100x100 points UIImageView, the non-retina version needs 100x100px, the retina version 200x200px, and the iPhone+ version 300x300px if you don't want your stuff to look bad.** Thanks,I was just wondering what is the best way to approach it in swift, if I wanted to make something for iphone 5, iphone 6+ and all the iPads. **Also, this is completely unrelated to Swift.** My apologies. I was following online tutorials about swift and that was the question that I had. Why wouldn't this be Swift related?
This isn't Swift related because your code should be 100% agnostic of your scaled image assets. In your case, I would look into [Xcode Asset Catalogs](https://developer.apple.com/library/ios/recipes/xcode_help-image_catalog-1.0/Recipe.html), as they produce you with a great container to put 1x, 2x, 3x and vector assets.
Register keyboard notifications and move the view up based on the kbFrame.height. A better method would be to have that registration screen be inside a scroll view, then set the contentInset using the kbFrame.height. There are tons of ways to do this. The official Facebook app for instance chooses to Animate the individual text fields.
put your user interface in a UITableViewController and it will handle all of that for you...
this seems like an awesome solution. My class is now of type UIViewController. how do i embed this to make it into a UITableViewController? step-by-step would be much appreciated
You will need to rethink your UI a bit. So if you have labels and text fields, you can embed them in cells and place the cells inside the table view. The table view will then handle rotations, keyboard up and down animations and etc for you. EDIT: if you want to do it manually, you can use this example code: https://github.com/vandadnp/iOS-8-Swift-Programming-Cookbook/tree/master/chapter-notification/Listening%20and%20Reacting%20to%20Keyboard%20Notifications
Oh wow, great information! thank you very much. another question. what does it mean when it has an underscore like this? func MKMapPointForCoordinate(_ coordinate: CLLocationCoordinate2D) -&gt; MKMapPoint
In the time before Storyboards, It was a lot harder to do something like this. NavControllers solved that problems - you could throw independently made views together and get all the benefits of a free hierarchy manager and common UI presenter gratis. Even if you were to just drag a bar over independent views, you lose the benefits of the controller aspect, which are really useful. Being able to pop arbitrarily through the stack, replace it altogether, etc, can't be done if you manually manage the views. If you were going to use a bar in the way you're describing, use a UIToolbar instead of a UINavigationBar. Toolbars are meant to hold individual controls specific to the view it's on, but NavBars are just the element of the NavController where the back button and title live. 
See [this](https://developer.apple.com/library/IOs/documentation/UIKit/Reference/UISlider_Class/index.html#//apple_ref/doc/uid/TP40006798-CH3-SW4) document, specifically the "Customizing the Slider's Appearance" (hit "more" at the end of the first paragraph") From that: &gt;In addition to customizing the track images, you can also customize the appearance of the thumb itself. Like the track images, you can assign different thumb images to each control state of the slider. I recall something about UISliders not allowing custom thumb images post iOS 7, but the property for thumbImage is still there and says available in iOS 2.0 and later
Having used Android IDEs, I won't say Xcode is the buggiest IDE ever either but I gotta say its not far behind. Also SourceKit *does* crash still at least 5-10 times a day and I've been using Xcode 6 since beta 1 too. I thought I'd get rid of this when I move on to Yosemite but no. Its really annoying. 
/u/shooky1 is right. I experience the SourceKit crash on almost hourly basis! Here's a neat little Xcode [plugin](https://github.com/kattrali/deriveddata-exterminator) that helps you to clear module cache, derived data in just one click.
&gt;What is the ideal image size for each device,like iphone 5, iphone 6, ipad air, etc..? This depends on the size that the image needs to fill in the control/image view/whatever Let's say it is for a UIImageView that has height and width of 40x40 (points). The images should (I hope I am not screwing this up) be 40x40, 80x80, and 120x120 (pixels) for 1x, 2x, and 3x respectively.
&gt; on almost hourly basis If only. It crashes constantly for me. Like once every 10 seconds. I've gotten used to not seeing what I type, because Xcode won't update the text when I type while SourceKit is crashing (i.e. a second or two before the "SourceKit crashed" thing appears). Thanks for the plugin, I'll see if it helps. 
You are all so lucky, I want Xcode to work for me, too :-( Xcdoe 6 is definitely the most buggy IDE I've ever used, at least by one order of magnitude. Yesterday I tried to find my problems by creating a new project and moving over the stuff from the old project and checking file by file, but it's hopeless. SourceKit crashes randomly and syntax completion also completely arbitrarily stops working (and it's extremely slow as is). Sometimes it's fixed by just waiting, sometimes I have to delete the derived data, sometimes I make some changes to the code and it magically starts working, it's just weird.
My latest favorite way is to modify an existing constraint on the bottom of the view that everything is laid out relative to and just change its absolute value based on the keyboard size. But yeah, it's almost like Apple intentionally fails to design for this extremely common case just to tease out the weakest wills from the developer pool.
Oh and don't forget the special case detection for a floating keyboard if targeting the iPad...
You can tell if multiple keys are down by keeping track of which ones have not sent keyUp. You can tell if they went down at the same time by looking at the timestamps on the events.
Could you elaborate more, i don't really get it. For the example above, why don't we just set a button handler for the "+" say that change to the second view when clicked. And the same applied for the "Cancel" button in the second view.
A navigation controller manages a stack of view controllers. A navigation bar is just a user interface element. There shouldn't be any need for that second navigation controller in your screenshot. You should be able to create a push segue directly between the Players view controller and the Player Details view controller. 
My comment was mostly for historical perspective, but it still has advantages. Let me try again. Imagine each of your views are index cards. When you use a navcontroller, it's like having someone holding your cards for the user and managing the order they go in, how they each move between each other, etc. He even writes the name of the view on top for you, and when you move to the second card, writes a little note on the back of it so when the user wants to go back, he knows which card to show next. This is the "stack" or hierarchy, depending on which word you like. Also, as of iOS 7, it takes care of sorting out where the status bar goes and all that transparency that's harder than it needs to be on it's own. If you use a NavBar, you're on your own for that. Storyboards make it manageable, but what happens when you want to drop a new view in? Now you have to write your segues **and** the code to determine which segue was tripped, and potentially move it to a new view controller. Yuck. In your sample image, the navcontroller would be useful in going between Add Player and player detail, since that is a fork in the flow, especially since it looks like it goes down a few more screens. You could do it with Segues, sure, and again, my comment was for the historical perspective - we didn't used to have such tools to make hopping around so easy. What you *don't* want to do is nest navcontrollers - if you present the add player flow modally, that's different, but nested like yours can corrupt the hierarchy (and you don't want to debug that nightmare). 
Google also realized the Android development experience in Eclipse was awful and decided to do something about it and introduced Android Studio. I've gone thru a few tutorials using Android Studio and I have to say its shaping up to be a pretty damn good IDE. I can only hope that Apple will invest some of that $186 billion in cash reserve in providing a more well designed and less crash prone IDE for iOS/Mac development. How awesome would it be if at WWDC 2015 they were to announce a new IDE. EDIT - grammar
From one of my projects: https://github.com/ShamylZakariya/Squizit/blob/master/Squizit/Extensions/UIImage_sizing.swift It doesn't take into account the interpolation quality, but it should give you an idea how to approach the problem.
A brand new IDE means we have to go through a whole alpha, beta cycles all over again. I wish they invest some more resources and improve Xcode because admittedly Xcode has come a long way.
Your argument boils down to "because the word apologist originally has a neutral meaning, it is always neutral". When I point out that even when substituting the word "apologist" for "defender" the sentence is just as disparaging you keep repeating the same statement about apologist. When I further demonstrate that apologists has gained negative connotations recently (mainly in politics), you wave that away with the same "original meaning" argument. (Following that reasoning, it would be ok to use "negro" as it does not originally have negative connotations) It is clear that you try to use disparaging statements about people who you do not agree with, belittling them at best, verbally abusing them at worst. And all this in an attempt to "win" an argument even when you run out of actual counter arguments.
Here comes the criticism: var beeper: Beeper { return cache(Beeper()) // initialized once per application launch } So that's an "easy" way to write a singleton. Problem is, usually when you have a singleton, you want to make it impossible to instantiate the singleton multiple times. The cache function obviously can't do that (you can write `Beeper()` somewhere else and get a second instance). Most of all, just try to avoid singletons unless there are some very strong arguments for using it. var bapper: Bapper { return cache(self, Bapper()) // initialized once per instance } So this is the same as `lazy var bapper = Bapper()`. Longer and has an unneeded dependency. Am I missing something? var bupper1: Bupper { return cache("hello world", Bupper()) // initialized once per unique string } Pretty similar to the lazy var; "hello world" would probably just be part of the property name in some way I guess. If you want to map strings to instances of an object, use a dictionary. var bupper2: Bupper { return cache("hello world") // NB: will be nil if you don't call `bupper1` first } I can't really think of an application of this? Why have two separate properties that return the same object? I guess you could do this as `var bupper2: Bupper { get { return bupper1 } }`, but that will just create the bupper1 and not crash if bupper1 wasn't called first... Looks a lot like dictionary that force-unwraps entries when you access them.
Thanks so much!
Basically, you need to add an annotation for your black dot, and return some MKMapView for that. Because MKMapView is a subclass of UIView, you can register a UIPanGestureRecognizer with it (which basically registers drag gestures). Then you can handle the events the gesture recognizer triggers and move your annotation around. Probably, you don't want to draw the black dot as part of the map overlay. Instead, set the annotation's image to the black dot or implement the annotation view's drawRect method. Edit: as for horizontally only / maximum and minimum, yeah, do that in code.
Unfortunately this worked for all of zero seconds :/ Any other advice?
http://www.reddit.com/r/swift/comments/2k11ii/should_i_learn_objective_c_before_learning_swift/clmeujo
Fantastic - thanks for the help.
Thanks. So when would you use a navigation bar instead of a navigation controller? Or pretty much in 90% of instances you're better off using the controller.. and the bar is still just in for legacy purposes?
&gt; So when would you use a navigation bar instead of a navigation controller? When you want a navigation bar. &gt; Or pretty much in 90% of instances you're better off using the controller.. and the bar is still just in for legacy purposes? No. They are entirely different things. One is a controller that manages view controllers. One is something that appears on screen. If you need to manage view controllers, use a navigation controller. If you jut want a navigation bar, then use a navigation bar. 
Glad to help. It's not really that you have to add it in, but we used to use them differently. View Controllers are pushed or popped from the stack. So your action in one view would instantiate a new VC, set any variables it would need for render, then call the NavController to push the new VC on the stack. Want to go all the way back? Pop to root. All programmatically of course - us old timers didn't use IB unless we had to, let alone storyboards. Now if you'll excuse me, I have to go stroke my gray neckbeard. 
In code make sure that you call the following to hide the window: window.orderOut(sender) The difference between orderOut and close is orderOut just stops displaying the window, close releases the window making it unable to be shown again. Since you are loading a window from a xib file, you will also want to ensure that 'Release when Closed' is not checked in the windows inspector inside interface builder.
Does window.makeKeyAndOrderFront(nil) work for displaying the window again?
This thread has been linked to from elsewhere on reddit. - [/r/mistyfront] [/r/Swift surpassed Clojure and Latex to become the 14th most popular programming language sub-reddit! (/r/swift)](http://np.reddit.com/r/mistyfront/comments/2kv27f/rswift_surpassed_clojure_and_latex_to_become_the/) *^If ^you ^follow ^any ^of ^the ^above ^links, ^respect ^the ^rules ^of ^reddit ^and ^don't ^vote ^or ^comment. ^Questions? ^Abuse? [^Message ^me ^here.](http://www.reddit.com/message/compose?to=%2Fr%2Fmeta_bot_mailbag)* 
The "!" suffix is reserved in optional unwrapping. E.g.: var value: Int? = 10 //just for demo, otherwise use implicitly unwrapped optionals var unwrapped = value! So what the compiler thinks when you write this: 1!=1 is that it tries to unwrap the value of the left hand side "1" as an optional value which of course is invalid in this context. But this: 1 != 1 != is an operator on its own...
exactly, actually that message is pretty descriptive I think! Maybe my brain is corrupted by the cryptic messages that Swift has thrown at me for a few months now but that message is essentially telling you that you have an "Int" value (your value of 1 on the left hand side) but you are using the "!" operand on it which is reserved for "optional type", or "Int?".
You're right. It does make sense. I still wish it could be more helpful, though. Maybe the compiler could use some heuristics to guess what the programmer was trying to do (e.g. "Did you mean...?").
Oh I couldn't agree with you more. Don't get me wrong, the compiler throws up rubbish pretty much to the console as it stands right now but hopefully they will improve it in the future.
I've just finished the swift track on Treehouse. Thought it was pretty good, although it ramped up in difficulty a little too quickly. Ive also been following the course on iphonedev.tv. Has also been pretty good.
Which course on Udemy did you buy?
It sounds like it would be added to the views individually, but you may also want to look into [UISearchDisplayController's](https://developer.apple.com/LIBRARY/IOS/documentation/UIKit/Reference/UISearchDisplayController_Class/index.html#//apple_ref/occ/instp/UISearchDisplayController/displaysSearchBarInNavigationBar) "displaysSearchBarInNavigationBar" property
The first error message is fine, the second one is rubbish though. How is there an argument missing? What the hell is "parameter #2" supposed to be? 
Spend a day and learn the basics of Obj-C so you can translate code. It's really not a complex language, it just has some weird syntax. If you already know C, then it will be even easier. Your existing Swift knowledge will help as well. You don't need to be an expert, just learn enough so that you can read Obj-C code and understand what is happening. Rudimentary Obj-C knowledge is going to be a useful skill for a swift developer for the forseeable future, so it will not be wasted time.
You could try deleting the xcuserdata in your .xcodeproj folder or deleting the com.apple.dt.Xcode file from ~/Library/Caches. After that I'm all out of ideas, sorry =/
I get the problem with the optional unwrapping, but literal. '1' is not a legal variable name, so the next token after that shouldn't be attached to it. How is "1!" a legal (optional or otherwise) type? It looks like a parser weakness (bug seems too strong to me). Although, easy to workaround, and possibly hard to implement, that I doubt if it's high priority. 
It's an interesting point at the start that Objective-C was C and Smalltalk munged together. So if you want to take that and subtract the C, why not just save yourself the bother and make Smalltalk good and a first class (sic) language on the platform?
This seems like what you are looking for: [link](http://mathewsanders.com/animated-transitions-in-swift/)
learn to whitespace!
It sounds like you are saying you just need to pass data in between view controllers if that is the case then just do a google search using keywords "swift prepareforsegue" and you should find plenty of examples showing you how to accomplish this. Btw, [here is a link to a similar question](https://www.reddit.com/r/swift/comments/2esc3f/what_is_the_best_way_to_share_data_between/) with a code example. Hope that helps!
Yes, pass data is what I meant. thank you
I haven't taken a look at your full code yet but I assume you're downloading the USD prices, parsing, then updating your UI. My first instinct is that you're not updating your UI on the main thread. Something that should always be done. I assume `USD` is your text field? If so, wrap it to ensure it runs on the main thread. dispatch_async(dispatch_get_main_queue(), { USD.text = price }) or NSOperationQueue.mainQueue().addOperationWithBlock { USD.text = price }
This looks like an excellent resource. I'm going through the Swift iOS track in Treehouse and this seems like a sweet next step. Have you gotten around to building apps in the course? Is the iOS 7 developer course that is included worth it and is it in Objective C? Does it teach you Objective C if it is?
Once you start adding to Smalltalk all the innovations from the last 30 years and fix up the deficiencies, is it really Smalltalk anymore?
The keyboard has to be manually dismissed by calling resignFirstResponder() on the UITextField. The keyboard won't automatically dismiss itself. You should look into UITextFieldDelegate and specifically the [textFieldShouldReturn(_:)](https://developer.apple.com/Library/ios/documentation/UIKit/Reference/UITextFieldDelegate_Protocol/index.html#//apple_ref/occ/intfm/UITextFieldDelegate/textFieldShouldReturn:) method. If you place resignFirstResponder() here, then the keyboard will dismiss when enter/return is pressed.
@shooky1 Say if I have a random number generator function in viewcontrollerone and I need viewcontrollertwo to generate random number, can I call this: (in viewcontrollertwo): var rand = viewcontrollerone.randomnumbergenerator
yes you could do that but a better approach would be to do the following: add a new swift class file to your project and name it Helpers. place the following code into the file: struct Helpers { static func randomNumberGenerator() -&gt; Int { //code to generate random number goes here } } This way the function is available to whomever needs it across the entire app. You would use it like this. var myRandomNumber = Helpers.randomNumberGenerator() On a side note, consider changing the name of the function to something a bit more concise like "getRandom()". RandomNumberGenerator sounds more like a class name or property name than it does a method name. But that's just my preference if it works for you leave it as is.
I'm about halfway through the swift course and I've built a few of the apps. They're very simple so far but we're definitely ramping up in difficulty &amp; complexity quickly. Getting closer to that instagram clone and looking forward to doing something really meaningful (some of the early apps are shoe size converters and dog to human age converters with image swaps and things along those lines to get you familiar with how everything works - important for beginners, though). I'm currently working on a slot machine game. I'm pretty certain they're still releasing and updating material for the swift course as well. The iOS 7 is also a ground up beginners course and does teach you ObjC. 
I don't always like extra spaces in my code. They sometimes detract attention from more important spaces. For example: if(stuff!=0) { doSomething(); } Seems better than: if(stuff != 0) { doSomething(); } Although for more complex expressions, spaces would be helpful: if( stuff+(moreStuff-1)*2 != otherStuff*moreStuff ) { doSomething(); } 
If you can't make it: Fake it! Place down a textfield and adjust its alpha or whatever you desire. Place another on top with no border, background colour = uicolor.clearColor and any other property to make everything except it's text look invisible. Might not be super elegant, but it may save time. No reason for the down votes, this fits the op's case and uses the tools Apple provides...
Take a look at Apple's example of making windows with custom shapes https://developer.apple.com/library/mac/samplecode/RoundTransparentWindow/Introduction/Intro.html
Ashumansit'shardtoparsestuffthatdoesn'thavespaces,codeisnodifferent.
I t ' s e q u a l l y h a r d i f y o u p u t s p a c e s e v e r y w h e r e . 
 T h o s e a r e u n d i f f e r e n t a t i e d s p a c e s . As in all things, the right amount is important.
I agree, and Swift is making me choose a style that's sub-optimal for me.
Click on the Text Field and go to Attributes Inspector&gt;View&gt;Background, choose "clear color". If you want to do it programmatically, textField.backgroundColor = UIColor.clearColor() Also, this has some good answers if you want to do it by setting its alpha http://stackoverflow.com/questions/11168347/background-transparancy-of-a-textfield
```xcrun -sdk macosx swiftc my.swift```
Yes! Ever since I installed 6.1 I've been getting so many SourceKitService crashes. Hopefully the EAP is less annoying than XCode.
Paul Solt teaches a Swift class on Skillshare. Also TeamTreehouse.com has a Swift course. 
The Ray Wenderlich are fantastic and free! Check it out: http://www.raywenderlich.com/74438/swift-tutorial-a-quick-start
Their [programming tasks page](http://rosettacode.org/wiki/Category:Programming_Tasks) shows all 758 programming tasks.
Referral link, I see. Well played.
Don't hate the player hate the game. :)
Thanks :) I actually want to do an AMA on my experience but I have an awful track record of doing any kind of self-promo on Reddit. Would you be interested in that / how do you think I should go about that? Ya for making apps, you need a mac that can run at least the operating system Mavericks. If cash is tight, go with a new or used Mac mini. If you go more dough, a macbook pro, and if you money is falling out of the sky, get a retina! 4GB of ram is ok for development but if you can afford 8 or 16, definitely do that.
It won't make a difference to the compiled product, no. But one of the biggest issues in iOS programming is view controllers getting too big. So the last thing you probably want to do is have more than one view controller in the same file. In general, project management is much easier if each file has one and only one class in it, the class name being in harmony with the file name. There can perhaps be exceptions; but you're guaranteed not to go wrong by just following that rule until the time that you have very good, justified reasons for doing anything else.
It really is. I like how people are downvoting it though. It's fine, type the address into google, God forbid someone get a free month for showing you something you didn't know about.
Oh okay, thanks for the info!
Nah, no custom shader necessary. (1) set the categoryBitMask of your SKLightNode (2) set shadowCastBitMask on the SKSpriteNode that shoudl cast a shadow (3) set the shadowedBitMask on the SKSpriteNode you want the shadow to fall on It was not very performant for me though, but maybe I had to many objects..
Of course you could. But using the Adafruit Neopixels would kick ass. ;)
are you leading from a table to another? if so a disclosure indicator is the standard. if not then you just need to use a clear button title 
There is an iPhone simulator in XCode.
You can only put the binary on your actual phone once you have a Dev program subscription.
Are you running this clock in your magic mirror, some of the time?
Well, I think this is more object oriented programming than swift, but any class should be created as it's own separate file. If you want to create a new object from that class, you would make a new object of it in the area of code that you need it. So if you have a view controller that requires access to a user object, and you need it when the user moves to a particular view, putting it in the override for didMoveToView makes sense.
1. Format your code properly. 2. No one can help you if you don't post the error.
Where did you get the idea to use a .class file? Swift uses .swift files, for whatever Swift code they contain (classes or other stuff). And yes, usually you declare new classes in their own file.
http://imgur.com/Q6IhvtL here are the errors
NSViewController is part of AppKit, not Cocoa. Add "import AppKit" under your Cocoa import and you should be fine.
If this is your sticking point, I strongly recommend you work on smaller, non-game projects to sharpen your teeth. Learn how to use Swift, how to build applications, and so on. You're just going to frustrate yourself into giving up this way.
Thank you that seems to have solved my problem!
&gt; Can you test an app without downloading it on your phone? Not really. You can run your application in the simulator that comes with Xcode, but it's not there for testing purposes, it's for development purposes. You should really be testing in real devices. Furthermore, the iOS simulator doesn't include support for Core Motion. You need a device with an M7 processor to use Core Motion. &gt; can you download the app to your phone without paying for the dev subscription? I think you can do it if you jailbreak your phone, but I wouldn't recommend it. 
&gt; I'm pretty sure the mapView does have my location. Not instantaneously. The map view is loaded along with the rest of the view hierarchy and `viewDidLoad` is called immediately after that, where you take the current location from the map view to make your region. But at this point, the map view is still trying to figure out where you are. There are lots of parts of iOS where the system doesn't have all of the information available at once. You can't just go charging forward right away, this is an asynchronous operation. If you want to use the user's location, then you'll need to wait until the map view has figured this out itself. There are several delegate methods intended for this purpose, so implement the one most appropriate for your needs and set the region there. 
You're going to have a hard time finding Swift libraries for as new as it still is. I haven't switched over yet from ObjC, but my understanding is that you should be able to use ObjC libraries interchangeably with Swift, and a quick search revealed this: https://github.com/robbiehanson/XMPPFramework Give that a go. You may have to look up "bridging headers." 
Thanks I'll take a look
A google search turned up this: http://stackoverflow.com/questions/3740528/play-sound-on-iphone-even-in-silent-mode Seems pretty straight forward.
Please make this a watch face for the Apple Watch when it comes out. I think people (read:'I') would really enjoy this one.
That would be a fun idea! :)
I will, As soon as the WatchKit is available.
you need to do 2 things. First you need to give the segue between the login screen and your main screen an identifier (i.e. a name). To do this highlight the segue and then go into the attributes inspector and in the identifier field type in "ShowMainSegue". Second, in your if statement you need to place the following line of code: performSegueWithIdentifier("ShowMainSegue", sender: self) You should be good to go after that. Just fyi there are some really good (and free) tutorials on youtube and Udemy that will introduce these basic aspects of iOS/Mac programming to you. Just search around for them and they will pop up. 
dude, pastebin.
Thank you that has got me somewhere but now wen I run the code I get weird text and numbers in my console 
ANY OF YOU GUYS KNOW WHAT THIS MEANS? 2014-11-03 19:06:46.464 reddit[2947:120743] [&lt;NSViewController 0x6080000c6dd0&gt; valueForUndefinedKey:]: this class is not key value coding-compliant for the key promptlabel. 2014-11-03 19:06:46.469 reddit[2947:120743] ( 0 CoreFoundation 0x00007fff8978c64c __exceptionPreprocess + 172 1 libobjc.A.dylib 0x00007fff8e5526de objc_exception_throw + 43 2 CoreFoundation 0x00007fff8978c1e9 -[NSException raise] + 9 3 Foundation 0x00007fff94e945ed -[NSObject(NSKeyValueCoding) valueForUndefinedKey:] + 226 4 Foundation 0x00007fff94db1e68 -[NSObject(NSKeyValueCoding) valueForKey:] + 385 5 Foundation 0x00007fff94dca8e3 -[NSObject(NSKeyValueCoding) valueForKeyPath:] + 324 6 Foundation 0x00007fff94dca8af -[NSObject(NSKeyValueCoding) valueForKeyPath:] + 272 7 AppKit 0x00007fff8d3e4a0f -[NSBinder valueForBinding:resolveMarkersToPlaceholders:] + 164 8 AppKit 0x00007fff8d582db9 -[NSEditableBinder hiddenState] + 73 9 AppKit 0x00007fff8d582d67 -[NSEditableBinder _hiddenStateWithMode:] + 74 10 AppKit 0x00007fff8d3ea7fd -[NSEditableBinder _setStatesImmediatelyInObject:mode:triggerRedisplay:] + 553 11 AppKit 0x00007fff8d3ea5cd -[NSEditableBinder _observeValueForKeyPath:ofObject:context:] + 119 12 AppKit 0x00007fff8d3db893 -[NSObject(NSKeyValueBindingCreation) bind:toObject:withKeyPath:options:] + 758 13 AppKit 0x00007fff8d82b006 -[NSIBObjectData nibInstantiateWithOwner:options:topLevelObjects:] + 1065 14 AppKit 0x00007fff8d8aa1c2 -[NSNib _instantiateNibWithExternalNameTable:options:] + 677 15 AppKit 0x00007fff8d8aa2d6 -[NSNib _instantiateWithOwner:options:topLevelObjects:] + 143 16 AppKit 0x00007fff8d4dccd7 -[NSViewController loadView] + 272 17 AppKit 0x00007fff8d746cb7 -[NSViewController _loadViewIfRequired] + 75 18 AppKit 0x00007fff8d417eb1 -[NSViewController view] + 30 19 AppKit 0x00007fff8daf2210 -[NSViewControllerPopoverTransition animatePresentationOfViewController:fromViewController:] + 265 20 AppKit 0x00007fff8d747e6f -[NSViewController presentViewController:asPopoverRelativeToRect:ofView:preferredEdge:behavior:] + 169 21 AppKit 0x00007fff8da99069 -[NSStoryboardPopoverSegue perform] + 402 22 AppKit 0x00007fff8d748275 -[NSViewController performSegueWithIdentifier:sender:] + 256 23 reddit 0x0000000100002e0c _TFC6reddit14ViewController7button1fS0_FPSs9AnyObject_T_ + 1436 24 reddit 0x00000001000031e6 _TToFC6reddit14ViewController7button1fS0_FPSs9AnyObject_T_ + 54 25 libsystem_trace.dylib 0x00007fff94847cd7 _os_activity_initiate + 75 26 AppKit 0x00007fff8d5285e7 -[NSApplication sendAction:to:from:] + 410 27 AppKit 0x00007fff8d528410 -[NSControl sendAction:to:] + 86 28 AppKit 0x00007fff8d6fcdaf __26-[NSCell _sendActionFrom:]_block_invoke + 131 29 libsystem_trace.dylib 0x00007fff94847cd7 _os_activity_initiate + 75 30 AppKit 0x00007fff8d570f2c -[NSCell _sendActionFrom:] + 144 31 AppKit 0x00007fff8d6e3ab2 -[NSButtonCell _sendActionFrom:] + 39 32 libsystem_trace.dylib 0x00007fff94847cd7 _os_activity_initiate + 75 33 AppKit 0x00007fff8d58ba66 -[NSCell trackMouse:inRect:ofView:untilMouseUp:] + 2731 34 AppKit 0x00007fff8d58acc1 -[NSButtonCell trackMouse:inRect:ofView:untilMouseUp:] + 491 35 AppKit 0x00007fff8d58a289 -[NSControl mouseDown:] + 714 36 AppKit 0x00007fff8da83fef -[NSWindow _reallySendEvent:] + 12827 37 AppKit 0x00007fff8d50e65c -[NSWindow sendEvent:] + 368 38 AppKit 0x00007fff8d4c01e6 -[NSApplication sendEvent:] + 2238 39 AppKit 0x00007fff8d34cfe8 -[NSApplication run] + 711 40 AppKit 0x00007fff8d338424 NSApplicationMain + 1832 41 reddit 0x0000000100004d22 top_level_code + 34 42 reddit 0x0000000100004d5a main + 42 43 libdyld.dylib 0x00007fff941c55c9 start + 1 44 ??? 0x0000000000000003 0x0 + 3 )
1) go into your storyboard 2) bring up the Identity Inspector panel (hint: its the icon to the left of the attributes icon); you should see the Class field 3) click on the title bar for each view controller in your storyboard and ensure that the correct view controller class name displays within the class field (i.e. according to the code you pasted earlier, ViewController should show for your login view controller. It should not say UIViewController). Don't know for sure if that will fix your issue but that's usually the problem when you see: "this class is not key value coding-compliant for the key"
http://swiftstub.com/ 
func singleTapOnMap(map: RMMapView!, at point: CGPoint) { } You should probably read the Swift Programming Language Guide first.
Ha you posted as I was updating. Yea just got to that solution. What was tripping me up was "at" being placed by itself like that. If it just takes two params *map* and *point* I didn't see a reason for the at. Thanks for the response!
It sounds like you have not set up the AutoLayout constraints correctly. There are two ways to go about setting up layout constraints. The first is to use the 'Editor' menu item. The first four submenu items are related to auto layout. The other way to set up layout constraints is to use the Align and Pin buttons in the lower right area of the interface builder view. I would recommend checking out https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/Introduction/Introduction.html for a bit more understanding of how to use AutoLayout! 
You can only access it inside the 'case' statement. The idea is that the switch unpacks the enum into its possibilities, allowing access to each one. I suspect what you want is something like this: var serverResponse:String switch success { case​ ​let​ .​Result​(​sunrise​, ​sunset​): serverResponse = ... } though there's probably a more compact way to do this using the pattern match operator (~=)
If the UI created by the code is good enough, why change to storyboards? If you want to make changes, it might be a good idea to switch though. Also, most of the time, you don't need multiple storyboards. A storyboard is intended to contain multiple controllers. Maybe you want to have separate xibs for other controllers/views? Might make sense, but I don't know anything about your app, so I can't possibly make a good decision. But probably, you can just use a single storyboard. The interface builder gives you some access to default colors. Programmatically, there's `UIColor.darkTextColor()` for example, even though there are quite few such constants. Also, Swift is not an acronym, so don't capitalise it.
`ADBannerView?` is an optional containing a `ADBannerView`, not an `ADBannerView`. Read about optionals.
but since his problem specifically states that only the background should be translucent, there is no need for this solution, you should only consider those kind of solution when there is absolutely no other way or time(=/) for an advanced solution. i guess thats why ppl downvoted it.
Apple needs to open source the swift compiler asap.
So, I wrote this as a little test: typealias ThrowSignature = (NSError)-&gt;() func try( block : (ThrowSignature)-&gt;() ) -&gt; NSError? { let envBuffer = UnsafeMutablePointer&lt;Int32&gt;(malloc(UInt(sizeof(jmp_buf)))) var exception : NSError? = nil let exceptionOccurred = setjmp(envBuffer) if exceptionOccurred==0 { block( { result in exception = result longjmp(envBuffer, 1) } ) } free(envBuffer) return exception } And now we have what looks almost like native support for exception handling! Simple usage: try { throw in println("hello") throw(NSError()) println("world") } Usage for catching the exception value: if let exception = (try { throw in println("hello") throw(NSError(domain:"oops", code:1, userInfo:nil)) println("world") }) { println("exception: \(exception)") } **However:** *you probably shouldn't use this construct.* It's dangerous. Why? Because setjmp/longjmp don't destruct objects properly. For example, if we add this class to our code to check what's going on: class CleanupTest { deinit { println("cleanup occurred safely.") } } Then use it to test if cleanup happens, it only works if no exception is thrown: try { throw in let n = CleanupTest() } // we see "cleanup occurred safely." try { throw in let n = CleanupTest() throw(NSError()) } // no cleanup! It's probably not just that the destructors aren't getting called, most likely the objects themselves are leaking. This Is Bad. Basically, the Swift runtime isn't longjmp()-safe (which isn't surprising or "wrong" — longjmp() is a low-level hack that's incompatible with most things...) 
Ordinarily, when you inherit from a superclass and somebody calls a method present in your superclass on an instance of your subclass, that superclass method is executed. But when you override a method, then your method gets called instead. If all you are doing is adding functionality rather than replacing it, then you need to call the superclass method first so that it does its part as well. Think about it this way: you have a superclass that sets up Google Analytics for a view controller. It provides a `viewDidAppear()` method that tells Google Analytics to register a viewing of that view controller. Now you create a subclass that inherits from it, and you override `viewDidAppear()`. This *replaces* the functionality of the superclass' method, so Google Analytics won't be notified of the viewing. So you call `super.viewDidAppear()` at the start of your method to make sure that you aren't breaking any functionality. &gt; what difference would it make if I put it after some other code in the function and not first? This would break things if your method depends in some way on what the superclass method does. 
So, what's happening is that you're: &gt; overriding a function which means that there was a function there already, and now you've replaced it with your own version of that function. super.functionName is just referring to the original version of the function. When you call super.functionName(parameters), you're just calling that version. Like any other function call. So, do you want the original to be run, *as well as* your version? Or do you just want your version to completely replace it? It's common to put the super call at the top of your replacement function, so that, in effect, your new code is added to the end of whatever would've been run if you hadn't overridden it — extending the original function, instead of replacing it completely. If you put your own code *before* the super call, well, that code just runs before the original code, instead of after. And of course you can put some of your code before and some after if you want. (Note: This is almost always true, but in the case of constructors, there are some limitations on what you can do before calling the super constructor. Why? Because otherwise the class isn't fully constructed yet.) As for when it's necessary to call the function, that's something no-one can really answer for you in a general way, because it depends on which function you're overriding. If the original you're replacing contained code that is essential, then you must call it. It's part of the API spec. Apple's documentation will usually tell you if you need to make sure to call the supermethod when you override. Otherwise, it's up to you whether you want that original behaviour or not. 
It doesn't apply to variables in the current version of Swift. If you have a struct or an enum, then you can use the `static` keyword to signify that a property or method applies to the type rather than instances of the type. 
I finally got it thanks to another tutorial and your explanation. Thanks!
Could you be kind enough to link the tutorial? Thank you!
Ah great explaining! Totally understand it now, and also read through the Inheritance chapter in Apple's docs. Also just found out that the default implementation of viewDidLoad in UIViewController is empty (which I probably should've realised earlier but oh well). So if your subclass inherits directly from UIViewController, then super.viewDidLoad does nothing, therefore it does not matter when you call it. You probably already knew that but I just wanted to share my new-found knowledge ;o Thank you!
Hi souhoh, not sure indeed. How should I implement everything in that case? Something like: request.addValue("mypassword", forHTTPHeaderField: "password") would do the job, or what? Thanks a lot!
you need to find that out from your API documentations. Look up "Basic HTTP auth NSURLConnection" in Google and you get this: http://stackoverflow.com/questions/1973325/nsurlconnection-and-basic-http-authentication-in-ios Look up the answer and implement your headers like that and see if that gets you anywhere. I'll be guessing without knowing your API documentations so read those up first and good luck.
For colors, use UIColor. In swift, common colors are accessed like: UIColor.blueColor() or something like that. For a list of available colors, see the [UIColor class reference](https://developer.apple.com/Library/ios/documentation/UIKit/Reference/UIColor_Class/index.html) You can also use things like init(red red: CGFloat, green green: CGFloat, blue blue: CGFloat, alpha alpha: CGFloat)
More of a personal preference, but i find their API (and others) more cumbersome to use. They have chainable methods, but it seems like more of an afterthought where as SwiftClient is completely chainable. I prefer something like `client.post(url).send(body)` rather than `AlamoFire.request(.POST, url, parameters: body)`. Another thing that Swiftclient provides, is setting up Client objects with defaults (like baseUrl or errorHandlers). This does not seem to be something that AlamoFire provides at all. Obviously AlamoFire is going to have more features (some of which I plan on adding) but for simple uses like hitting a REST endpoint and retrieving JSON data, I find SwiftClient to be more intuitive and simple. 
Thanks for the response, was just wondering as I am sure you were probably already aware of Alamofire before embarking on this.
This actually helped when I updated to 6.1: http://stackoverflow.com/questions/25133039/xcode-6-isnt-autocompleting-in-swift
this helped alot thanks 
Looks great. Ideas 1. remove the tailing semicolons 2. make as many ivars readonly as possible, eg. Request.url 3. fix inconsistent spaces before start curleyes, eg. public func set(headers: [String:String]) -&gt; Request{ 4. make Response.body readonly
Thanks for the feedback! I made a few things read-write in order for middleware to be able to modify them (baseUrl directly modifies the URL, and the body can be modified with a custom req.data parsing transformer). I might look into another way of doing this. Thanks for the style tips, I'll look into cleaning it up a bit! Most of these are JS habits that are sneaking into my Swift code.
Checkout my nRF8001-Swift library i built to communicate with an Arduino using Adafruit's nRF8001 BLE module: https://github.com/MichMich/nRF8001-Swift The library is targeted to be used specifically with the Adafruit device, but I'm sure I will be easy to get it up and running with other Bluetooth (UART) devices. If you have any questions, feel free to contact me by twitter: @michmich
Yeah, absolutely, Thanks for the feedback, maybe i'll add a section in the docs for some practical examples that show the power of things like middleware.
Hey Nick, Roll Tide Roll (I'm from Anniston). I had bought your course primarily because I saw it covered certificates, provisioning, itunes connect, etc - it saved me from going crazy trying to figure it all out. Did you find working with Udemy to be an easy process? Was it easy as just recording your videos and submiting it to them?
I've already went through that discussion. The point is that is everything about implementing a HTTP request in objective-c, not Swift. I'd rather prefer to avoid all the reverse engineering process to translate the code into Swift. Can you give me some pointer to achieve the same thing in Swift?
[The Parse Documentation](https://parse.com/docs/ios_guide#top/iOS) has everything you need to learn how to setup a Parse Database. You can switch the language between Obj-C and Swift by clicking on the bottom right corner of the code example boxes. Its what I used and i'm learning plenty from just reading the doc. And googling stuff will help as more and more people are asking about it.
That's weird... Just tried it on my phone and it didn't do that... Sorry about that..
Not to change the topic but are there reasons why you'd use Parse over CloudKit? Assuming you're only developing iOS/OSX right now of course.. 
my app is heavily reliant upon Facebook integration, and since FB owns Parse, i feel like it would make more sense to combine the two, especially since I plan on sending fb invites through the app, which I believe is made easier with Parse's push requests. 
Superior documentation, CloudKit is still very new
one of the biggest reasons would be that parse databases are cross platform while cloud kit is restricted to iOS devices only. EDIT - DOH!! Just noticed your caveat on the end of your question that you were only targeting iOS
No file download or upload?
Open-source or license it.
It's been there since the very first developer preview. I've been trying to use class variable since then on every new release :/
A bit more information: I started this when I noticed that there wasn't a good way to represent `OSType`s using the syntax I was familiar with on C, meaning that having `OSType testType = 'test';` wouldn't fly under Swift. And then it snowballed from there. 
I bought the udemy course you linked with a 75% off code. I requested a refund after going 25% through because I felt it was just OK. It comes down to personal learning styles, but for me I need "assignments." Percival just walks you through the code and that is not how I learn. I should also mention that I have previous programming experience so felt the course was aimed at a total beginner. What has worked for me is the Big Nerd Ranch iOS 7 book and, to an extent, the Stanford course. Both of these options have extensive "think for yourself" work that forces you to learn the concepts. Video is tougher for me to sit through so I would rank Stanford just below the book, but that is very subjective. I wish BNR would come out with a Swift based iOS 8 book sooner rather than later.
Fantastic. I've always found the Alamofire API needlessly cumbersome.
I get you. this is more about the APIs though, not language. You aren't trying to achieve something that is different from Objc to Swift, but rather you are mirroring the APIs to use them in Swift so your output won't be __so__ different from ObjC code. hence why i pointed you to that article. So you basically have a few options: 1. Use AFNetworking (if there is one for Swift, look it up) 2. Use NSURLSession 3. Use NSURLConnection That'd be my preference thought. All are thoroughly documented. Put that together with the documentation of your APIs and you will be up and running in no time.
I know what you mean regarding the Udemy course. I did end up enrolling in a similar one since it was on discount for $29 from $199, but I encountered the exact same frustrations you stated. I did half the course and then left it, probably gonna request a refund. I didn't realise Stanford had a course on Swift, definitely going to check that out! I did come across BNR at one point, but since I already had the Apple Swift Series iBooks and the BNR one is for iOS 7, I wasn't keen on that. Books are great but after a while they just get boring to read on and on (talking from my experience of the 1000 page Apple Swift iBook). I read a quarter or so of that and then left it. I refer to it very frequently though whenever I want to learn about something/come across errors. So yeah, thanks for sharing your thoughts!
I really like this. An example app using the client would be great, because I'm having a hard time understanding how to use the .onError method. 
Pay attention to the warnings indicated by the yellow triangle int the notification bar. What you see in interface builder may not be what happens at run time. As /u/Legolas-the-elf mentions, it's because you haven't set sufficient constraints.
Coming from the Python world your API looks much cleaner than the Alamofire version. I think the decisions made with the Alamofire API were to make it look more functional, but the chaining with Alamofire turns out kind of ugly. Anyway it's great to see other options. Will definitely try to work this into future projects instead of Alamofire.
Take a look at this http://stackoverflow.com/questions/20794187/uiimagepickercontroller-editing-view-circle-overlay-edited
If the REST api you are using IS using basic authentication you should be able to use SwiftClient pretty easily. https://github.com/theadam/SwiftClient#basic-access-authentication
Oops sorry for the confusion. Stanford has the CS193p course which is iOS development. Their winter quarter has not started yet so the latest version is not out. It will definitely be iOS 8 but no word on if they will use Swift or Objective-C. 
Yeah I realised.
It appears that you are using an optional as though it was a boolean. Either completion or stillImageOutput is an optional and you have to unwrap it unless you're checking if it's nil. Please read the documentation on optionals. If you want any real help, you should paste your code to a suitable location like gist.github.com or any decent pastebin in its entirety and share that with us.
It appears that we need a boilerplate response: Hi &lt;insert name here&gt;, It looks like you've started using a programming language that was only announced 5 months ago and is still in active development at a language, standard library, API and toolchain level. You appear to have confused the message that "Swift will be safer than Objective-C" with the idea that Swift – in rapid, active development – might be easier to program in, right now, than Objective-C (or some other simpler language). Swift has months to go before bugs, error messages and other toolchain issues are resolved to the point where Swift will overtake Objective-C in simplicity for general programming. Swift will never be simpler than simplicity-over-performance languages like Python. Additionally, Swift has never made the promise of avoiding crashes entirely. Swift is not Java or Rust (which offer complete memory safety through different approaches). Swift uses the C/Objective-C memory model and is heavily reliant on libraries from those languages for nearly all tasks. For this reason, Swift will always be able to crash if you misuse C functions, C pointers or any library that involves these concepts (i.e. almost everything in Cocoa) because C and Objective-C will crash if you misuse these things. This will slowly improve over time as the number of C functions and C pointers in common usage decreases in favor of actual Swift structs but it will never go away as long as C is accessible from Swift. Using a programming language in active development is not for novice programmers and will always be filled with inexplicable compiler messages, weird compiler crashes, toolchain glitches, difficult to debug errors, crashes that should really just be error codes and difficulty interfacing with existing code. This is all just "the way it is" with programming languages – they take years to settle down.
Definitely gonna be a while before there's a repository of example code to learn from. I'm debating whether learning the essentials of Objective-C and learning to convert the major statements into Swift code would make things easier.
Apple writes highly misleading things about Swift, though. Xcode is not beta, and Apple advertises it for production use. Also, Apple's claim isn't that Swift "will be safer", but that it "is safe". "Using a programming language in active development is not for novice programmers" - Apple directly contradicts you: "Swift is easy to learn and use — even if you’ve never coded before." I agree with your general sentiment though, it's completely expected that a new programming language has issues five months after introduction. The annoying thing is Apple's false advertisement, though.
Do you mean endless runner in the way flalppy bird is an endless run? Because there is Flappy Swift out there which could help you look at some code to get started. 
Sorry, I was comparing it to other languages that had version 1.0 **stable** releases. Silly me. My mistake. So basically, I should either use and learn Objective-C, because it is more stable and has better support or will I have similar problems based on the fact that Swift is accessing Objective-C libraries and is crashing? Or ignore iOS development until Swift is version 2.0 or 3.0 or 4.0, when they finally have a stable compiler version? I have programmed with multiple languages, all high level granted, and if I had any of these problems, I would have switched immediately. Well, okay, I have had Python act weird, but I expect that is part of the concurrency territory. PHP also has some silly language nuances that can be annoying or enduring depending on how much you've cried previously. I haven't done enough Java to really get too annoyed, but it has for the most part acted according to the internal expectations set upon both the Oracle JVM and Dalvik VM. Go has rarely failed my expectations, nor have I experience any unexplained issues. Again, not a language I have much experience with, but it has for a version 1.0+ language matched expectations with how it would run. Swift is sold as a higher level, garbage collected language and with any language, the expectation is that it works. As a programmer I need to be able to reason about the code and it must meet the expectations that code developed to specifications of the language works. I can't use a language that with two similar pieces of code, one works and the other breaks. The only reason, I'm still using Swift is because I don't want to spend another month rewriting the code to Objective-C, because the code works, even if it isn't pretty. I'm not so sure about Swift. I think it needed to bake for a bit longer before they opened the oven. It could make people sick, depending on if any one eats the more raw parts.
Yeah some superficial similarities which seem to be common in new languages (1) all have closures, (2) type is put at the end like good old pascal, (3) type inference, (4) general attempt at cutting down on typing by simplifying the syntax. if, switch and for statements in Go and Swift also lack the parentesis. Of course the most stupid comment I remember reading from a number of people was that Swift was "just like JavaScript" because they had the "var" keyword for declaring variables. But that was kind of all. Semantically and syntax wise they are completely different. I'd say Swift is closest to Kotlin, but obviously share a lot with Rust, Scala and C#.
Swift is a baby language still, it's very exciting though, but treat it like a baby. Don't listen so much to what Apple says right now. Today on the train I had to restart Xcode about 30 times (thank God I have SSD) so that it would index my Swift code and that Swift wouldn't throw garbage errors. Please be patient, it's all good. If it's not fun for you to use it, don't use it. It's supposed to all be fun after all, remember? :-) Take it easy and don't get pissed off.
He's referring to bitfountain
&gt; It's supposed to all be fun after all, remember? :-) Wut? It's supposed to be a programming language that can be used to solve problems. If it's fun that's a nice bonus, but that's certainly not the purpose of pretty much any programming language. 
Careful: Swift is not garbage collected. If you think that it is, you're most likely leaking memory all over the place.
I understand that trying to work with a new language (both new to you, and new overall) can be frustrating, but you're not really making fair comparisons. Language | First released to public ---|--- Java | 1995 (19 years ago) Python | 1991 (23 years ago) PHP | 1995 (19 years ago) Go | 2009 (5 years ago) Swift | June 2014 (0.5 years ago) "1.0 GM" badge or not, Swift is still a baby compared to the rest. Even Go has had 10 times as much public use, testing and fixing. Did you use any of those other languages, when *they* were brand-new 1.0 releases, to create multithreaded, database-backed UI applications running on mobile phones? Now, I do think Apple has jumped the gun a little bit on labelling Swift "1.0". I don't think it's inaccurate as regards the language specification itself (which is probably what they mean), but I have run into issues with the toolchain, especially Xcode integration. I've definitely seen Xcode run into "ghost errors" that it insists are there, but vanish if you do a Clean/Rebuild/Run cycle. However, if you're running into... &gt; EXC_BAD_ACCESS errors ...there's a good chance you've misunderstood something about the Cocoa APIs. Swift is much safer than Objective-C, but it's not magic, and since Cocoa is still Objective-C code, you can cause EXC_BAD_ACCESS errors if you pass invalid data to the APIs. Since you didn't post any example code, I can't help you with specific reasons why you might have encountered this, but possible causes include: - passing in a nil value where something else is expected (which Swift tries to prevent, but there are situations where you can do this) - destroying an object while something has an unsafe unowned reference to it — usually as the delegate of a view or system service. Sometimes this is OK, other times it isn't — this inconsistency is because the unsafe parts of the API were created before autonilling weak references were a thing. To be on the safe side, nil out your delegates &amp; data sources. Note that Swift is *not* a garbage-collected language, and that (indirectly) is the cause of the second case there. &gt; Things working in previous version stops working in later versions. Apple explicitly warned everybody that this would happen, when they announced the language. They said "we're planning to retain binary compatibility, but not guaranteeing source compatibility". If this is unacceptable to you, use another language until this one settles down. The upside is that it gives them the freedom to correct problems, instead of having to throw up their hands and say "we know this is bad, but we can't do anything about it because we promised not to change anything". &gt; not being able to get Entities to work in test cases I stopped using CoreData a few years ago, so I haven't tried it in Swift and can't comment on what the issue is. &gt; Extensions in other modules don't work in your module. Modules are compiled separately and linked as libraries, so yes, that won't work. &gt; Nightmare coding Sorry you feel that way. I suspect your problem isn't with Swift though, but with Cocoa. Cocoa is a fantastic API, brilliantly designed in many ways, but it is also *old school*. Bits of it date back to the 1980s where, as NeXTStep, it was running on a 25**M**hz system with 8**M**b of ram (I have *desktop wallpapers* bigger than that). That it's still a powerful, competitive system today running on phones and tablets is amazing, and it's evolved a lot, bringing features like ARC which take away 99% of the pain of memory management. That final 1% is annoying sometimes, but it allows ARC to run dramatically faster than Garbage Collection and is why iPhones can outperform Android devices that have 2x the memory and 2x the cores. Apple continue to refine and improve Cocoa, but it's still fundamentally Cocoa-y. They like it that way. (Mostly, so do I.) If you're planning to develop iOS apps (other than games using Unity or some other cross-platform gamedev environment) you'll need to learn Cocoa, whichever language you learn it in. 
&gt; EXC_BAD_ACCESS errors The only time I see developers struggle with these is when they are over-using force unwrapping or implicitly unwrapped optionals. Ignore your instinct to write Objective-C in Swift syntax. If you have an optional and need a concrete value, then deal with this properly, don't stick an exclamation mark in and hope for the best. &gt; I thought the entire point of Swift was so that I wasn't bought back to school being humbled around every corner. No, that's not the point at all. Swift is a new language, and you do actually have to spend time learning it. &gt; After so many unexplained errors needing work arounds, I really don't feel comfortable working with Swift any more. &gt; I feel like I'm walking on egg shells in a cage with a lion and at any moment it could wake up and I'll be dead. It sounds like when you find a problem, you aren't getting to the bottom of what is happening. Yes, the problems will pile up and it will be a shitty experience if you do things that way. Don't do it that way. When you find a problem, don't move on until you understand what is happening. 
The Swift book is available for free through iBooks. There's also a good list of resources (along with a link to the book) at https://developer.apple.com/swift/resources/
Awesome :)
I second Apple's Swift book thru iBooks is an excellent read. [Here is an online course]( https://www.udemy.com/ios-8-and-swift-how-to-make-a-freaking-iphone-app/?couponCode=redditr) offered by fellow redditor /u/nickchuck. Its a steal at $29 and the section on certificates and provisions alone is worth the price of admission. Also [this is an excellent book](http://shop.oreilly.com/product/0636920034285.do) on learning the Cocoa framework using Swift.
Yeah me too! Menubar apps seem to be quite popular and I can definitely imagine these being useful. It's pretty poorly documented though!
Solving problems __is__ fun, unless you don't want to solve them, in which case you need to choose a different path in life, not programming.
Make your way to our Wiki in the navbar. :)
the variables are within the function call: func captureImage(completion:((image: UIImage?, error: NSError?) -&gt; Void)?) { }
how do I include plain text in reddit comments for code?
&gt; It sounds like when you find a problem, you aren't getting to the bottom of what is happening. Yes, the problems will pile up and it will be a shitty experience if you do things that way. Don't do it that way. When you find a problem, don't move on until you understand what is happening. Fair enough. I did do this as much as possible, because I don't want to get in a situation where after 5 or 10 years doing Swift code, some guy says, "Why did you do it that way instead of this way?" and the code is much better. It reflects poorly on my code when I have to do workarounds or do workarounds. It is a novice mistake certainly. I did spend as much time attempting to figure out the problem, including checking the documentation, checking StackOverflow, writing test cases and experimenting with the code to figure out what I was doing wrong. The problem is that at some point, I have to conclude that perhaps it is not my mistake. It is a fuzzy determination. Until I show the code to someone more experienced, my confidence is not 100%. Someone intimate with both Objective-C and Swift will probably be like, "You the dumb. Do it this way." I don't like saying, "Well I've been programming for so long that I normally know when it is my code," because that is ridiculous and embarrassing statement. I will repeat that code should be consistent, either it always breaks with a use case or it always succeeds. I'm not seeing that and that is why I hold my position. It is partly for the reason that I won't do C++, because you have to be very intimate with the language to understand where you as the programmer made a mistake and how to fix it.
I'm sorry, I don't understand what you are trying to say. Can you state it with more detail? if you are asking how you format code in reddit comments, then you prefix the code with four (4) spaces.
I made one in Swift. I will probably add a blog entry telling a bit about it later, but for now you can pick up the source here: https://github.com/yuppielabel/YPDrawSignatureView.git
Very well stated. 
Thank you Greg, I'll definitely take a look
&gt; NSPredicate(format: "id = %d &amp;&amp; sub_id = %d &amp;&amp; name = %@", id, subID, name)! This is exactly what I mean by using force unwrapping inappropriately. This is a failable initialiser. It can and will return `nil` if it doesn't like something you pass into it. By returning an optional, the compiler is using the type system to prompt you to handle this situation. But instead, you're ignoring the problem and telling it to crash instead. Don't write code like this if you don't like picking your way through `EXC_BAD_ACCESS` all day long. The compiler specifically told you that you might not have a value there, and you overrode it and are now feeling the consequences. Look up the format specifiers. `%d` is a 32-bit signed integer. The `id` you are passing into it is a 64 bit unsigned integer. 
Cool. Do you find much use for algebraic data types in your code? For example, to do domain modelling? E.g., you might have some types that model a build in Travis (I'm repurposing some names you've already used here): enum TaskID { case TaskID(Int) // Maybe a task ID from Travis. } enum Duration { case S(Int) } enum BuildStatus { case Running(TaskID) case Passed(Duration) // The duration of the build (in seconds?). case Failed(String) // Error message(s?) from the failure. case Unknown } // Build number, start date/time, status. enum Build { case Build(String, NSDate, BuildStatus) } By doing something like the above, you would make it impossible for a passing build to contain (even an optional) error message; and impossible for a running build to contain a duration to complete the build; and so on. Of course, I'm not saying this is the best possible way to model the domain; but it might be interesting to explore.
I enjoyed the course at [Lynda.com](http://www.lynda.com/Swift-tutorials/Swift-Essential-Training/180105-2.html). The instructor does a great job presenting information in a well-structured manner, but this is just language basics. The course doesn't cover iOS or OS X application development.
&gt; What you're basically saying is that if I don't think dealing with Xcode's issues is fun, I shouldn't be a programmer... seriously? No, not really. If you believe Xcode isn't for you, stop using it and move to something else. Moaning won't fix anything. Everybody knows that the tools provided for Swift are VERY unstable. However, you may want to check AppCode. I believe the latest beta of AppCode has Swift support but I would approach that with caution because it is even more basic than Xcode for Swift. Good luck and "have fun" :-)
Hmm, that's pretty interesting. I hadn't considered anything like that. I feel my swift can definitely be improved a lot so appreciate this!
This is great advice, thanx a lot, it totally worked!! Hopefully Apple can fix whatever is causing the problem. It really sucks that we, the developers, have to go through this, but it is a new programming language that we are working with. This, coupled with a new release of Xcode, can really cause a few (very noticeable) hiccups.
I made a flappy bird clone a while back to get started with Sprite Kit in Swift. It was pretty messy but I was able to structure it up a bit. Here's my entire code for creating, placing, moving and then removing the pipes (I've commented a lot of the code): All of this code goes in the GameScene.swift file Declare these variables outside of any function //Textures for the pipes var PipeUpTexture = SKTexture() var PipeDownTexture = SKTexture() //Action for moving and removing the pipes var PipesMoveAndRemove = SKAction() //The gap between the top and bottom pipes let pipeGap = 150.0 This goes in the didMoveToView function //Pipes //Create PipeUpTexture = SKTexture(imageNamed: "Pipe1") //I'm grabbing my own Pipe1.png and Pipe2.ping textures here, you can insert whatever you have PipeDownTexture = SKTexture(imageNamed: "Pipe2") //Movement let DistanceToMove = CGFloat(self.frame.size.width + 2.0 * PipeUpTexture.size().width) //distance for the pipe to move from it creation position to off-screen on the left let MovePipes = SKAction.moveByX(-DistanceToMove, y: 0.0, duration: NSTimeInterval(0.01 * DistanceToMove)) //move the pipes until they go off-screen let RemovePipes = SKAction.removeFromParent() //delete the node after it goes off-screen PipesMoveAndRemove = SKAction.sequence([MovePipes, RemovePipes]) //Spawn let spawn = SKAction.runBlock({() in self.spawnPipes()}) let delay = SKAction.waitForDuration(NSTimeInterval(2.0)) //spawn the pipe pairs 2 seconds apart so they aren't too close to each other let spawnThenDelay = SKAction.sequence([spawn, delay]) let spawnThenDelayForever = SKAction.repeatActionForever(spawnThenDelay) self.runAction(spawnThenDelayForever) } New function for spawning the pipes func spawnPipes() { let PipePair = SKNode() //create a node that will hold both the pipes PipePair.position = CGPointMake(self.frame.size.width + PipeUpTexture.size().width * 2, 0) //position it PipePair.zPosition = -10 //This is just so that it looks realistic and stays in the front of the background skyline image I have let height = UInt32(self.frame.size.height / 4) let y = arc4random() % height + height //arc4random so that the top and bottom pipes aren't always the same distance from the top and bottom of the screen, so not a straight flying course. //Top pipe (facing down) let pipeDown = SKSpriteNode(texture: PipeDownTexture) pipeDown.setScale(1.1) //setting the scale according to the size of my texture image, you can change it according to how big/small your original pipe image is pipeDown.position = CGPointMake(0.0, CGFloat(y) + pipeDown.size.height + CGFloat(pipeGap)) pipeDown.physicsBody = SKPhysicsBody(rectangleOfSize: pipeDown.size) //create a physics body for it pipeDown.physicsBody?.dynamic = false //don't want it to be moving PipePair.addChild(pipeDown) //add this pipe to the pipe pair //Bottom pipe (facing up) let pipeUp = SKSpriteNode(texture: PipeUpTexture) pipeUp.setScale(1.1) pipeUp.position = CGPointMake(0.0, CGFloat(y)) pipeUp.physicsBody = SKPhysicsBody(rectangleOfSize: pipeUp.size) pipeUp.physicsBody?.dynamic = false PipePair.addChild(pipeUp) PipePair.runAction(PipesMoveAndRemove) self.addChild(PipePair) } if you want any other code/explaining let me know. edit: I did use a youtube tutorial to put me on the right track, although I can't find it right now. But the guy who made it said he made some mistakes and didn't follow up on his first part of the tutorial, so I wouldn't count on it anyway.
In [RepoParser.swift](https://github.com/jurre/TravisToday/blob/master/Today/RepoParser.swift) there is a deeply nested set of if-left statements. Do you know if there are any pretty alternatives for that construction? Fun project though. Beats parsing stringly typed networking protocols in Objective-C, *shiver*.
I'm pretty sure not "everybody knows", so that's one thing moaning fixes: it makes people know Xcode is unstable ;-) I actually tried AppCode, it actually helped quite a bit with finding problems, because the compiler has better error messages.
Try Skip Wilson's videos. https://www.youtube.com/user/SkipCasts
I copied your example code and pasted it into a shebang script, just to test it out: #!/usr/bin/xcrun swift import AppKit typealias SubIDType = Int8 func predicateForSearch(main id: UInt64, #subID: SubIDType, #name: String) -&gt; NSPredicate { return NSPredicate(format: "id = %d &amp;&amp; sub_id = %d &amp;&amp; name = %@", id, subID, name)! // EXC_BAD_ACCESS(code=1,...) } let predicate = predicateForSearch(main: 1, subID: 1, name: "something") println(predicate) It worked fine, and gave the output I'd expect: id == 1 AND sub_id == 1 AND name == "something" However, /u/Legolas-the-elf is correct in pointing out that your use of "!" at the end of NSPredicate() is unsafe. NSPredicate() is not guaranteed to always return a valid result, and when you put "!" there to force-unwrap the result, you're saying, "I don't care if this is valid or not. All that protection Swift provides from EXC_BAD_ACCESS? Throw that away! Treat it as having succeeded, whether it did or not!". You can't turn off protection, then complain that the language isn't protecting you. I'm guessing that in your actual application, you're calling it with some other arguments aren't compatible with NSPredicate(). It sounds to me like you've skimmed some tutorials and jumped into writing an app before you've understood the fundamentals of the language. You shouldn't be trying to use Swift for production code if you don't understand things like Optionals, failable initialisers, and what the various unwrapping operators do. You feel like you're walking on eggshells because you've been dropping eggs on the floor, take the time to clean them up. Don't try to make real apps in Swift yet. Use a language you're more comfortable with for real work. Use Swift for experimenting and learning. Build up from simple things, and if something doesn't work, take the time to understand why, instead of charging through changing things at random, or trying to find the quickest band-aid to make the error-message go away. When you run into a wall, try making the smallest possible shell script or project that reproduces the problem in isolation. If that actually runs fine, then the problem probably isn't where you thought it was. Otherwise, now you have your problem pinned down "under laboratory conditions". It'll be easier for you to post questions about it and get helpful answers. If it turns out that there really really is a bug in the language (it *probably* isn't that, but it can happen occasionally) you'll have a simple repro case to send to Apple. Apple's not always the fastest about fixing bugs, but Chris Lattner's team seems to be pretty responsive, and then it gets fixed and then we all benefit. The Swift section of the Apple developer forums can be useful too. 
I dont know why but my pipes aren't repeating every 2 seconds.
1\. The reason I'm using "!" is that I want it to fail. It has to fail and the issue has to be fixed upstream from the predicate function. Whenever forced unwrap fails it is not EXC_BAD_ACCESS, because it gives EXC_BAD_ACCESS regardless of whether it is forced unwrapped or not. 2\. I have already stated that I've tried many other alternatives and they all give the same error. Both with and without the force unwrap character. 3\. The problem is with CoreData, so I believe it will have something to do with the CoreData parts. The test cases I have for this reproduce the error all day long. I can imgur the test case and result, if you want verification. 4\. %d is not an issue with UInt64, because there currently are no overflows. Checking the String and NSPredicate format characters, I didn't find anything matching the type for long long. The documentation suggests I should be able to use '%@' with any object, but that doesn't appear to be true. I only get results when I use "%d". I guess Double should fit UInt64, but I'm not sure what errors would happen with that type. The String format identifier documentation does suggest that the reason is that %@ uses description or locale description function. 5\. One thing I haven't tried is "%c", which sounds extremely incorrect and one of the other integer format identifier. 6\. The other thing I haven't tried is changing the Schema to some larger integer type and correcting the typealias. 7\. I'm not sure what you are asking. I've read the language guide about 3 times now. I've read parts of the language specification and I've read the online documentation for all of the APIs I'm using. Certainly I've skimped the Objective-C guides, going back and reading the entire thing hasn't really helped. This isn't something I just spent 10 minutes attempting to fix and gave up on. I spent several days. It was working with Xcode 6.0 and then it stopped with Xcode 6.1, then it gave the EXC_BAD_ACCESS, when "%s" was switched to "%@". I have stepped through the code and every variable has a value. The problem isn't "id" and it isn't "name". Everything I've researched on EXC_BAD_ACCESS suggests that it isn't something you can simply point at and get it working. Furthermore, it is something I've already worked around. I'll go back to it when I get the chance. Right now I'm continuing my journey of learning Swift. I know you are trying to help or at least point out mistakes and I appreciate that. If I could give you the source code, I would, and you can run the test cases yourself. I can't and I am probably going to have to reduce the problem or fix it with attempts from above.
The whole game is just a rip off of http://www.raywenderlich.com/84434/sprite-kit-swift-tutorial-beginners, with only different images for the characters. Taking their tutorials and turning them into his youtube money. Not nice.
Awesome video. Really helped clarify Swift Optionals a lot. I like the three unwrapping methods also. 
Good video. However, I would disagree with recommending the use of implicitly unwrapped optionals as return types in your library. They're normally only used in situations where they *need* to be `nil` for some exceptional reason - like when loading a view from a NIB, and connecting its outlets immediately after instantiation. (They *are* temporarily nil, but will be connected soon.) Rather, you should always use explicit optionals if you *might* not return a value, but if you will, *don't* use the bang. This will prevent you (as the library author) from accidentally failing to return a non-nil value when your method signature promises that you won't. It also saves callers from having to explicitly check the value against `nil`, and ensures that they're using optional binding if you might not give them a value back.
@TelyX This tutorial (linked above) is a remake of my original https://www.youtube.com/watch?v=eQ15rvwSFt8 from June 23rd 2014.. that article is from October 1st 2014 (after I made mine). But even after looking through that tutorial it bears no resemblance to either my original or remake. Except that they both contain characters that collide with each other, which I guess you copied from Super Mario Bros? Not the same math. But none of this even matters because the original idea for this game came from back in 2009 when I wrote a Flash game. I even gave it the a similar name: grab the grapes. http://web.archive.org/web/20110505065401/http://jacobschatz.com/games/game2.html So no I didn't copy anyone's anything, I've got too many great ideas for that. 
http://www.github.com
I took Eliot's iOS 7 course. It took me a while and I struggled through it but I learned so much that way. I had prior knowledge of OOP before entering the confusing world of Obj-C. Now that I'm using Swift, and the languages are scalable, things are not only convenient but I am a much better debugger as well as I know the Xcode environment much more thoroughly. No disrespect OP just stating there's a lot of competition out there that's much ..much more affordable. Edit - one month is short, especially for a language in its early stages. 
If you google Skip Wilson swift tutorials and go to the one about classes, it explains it very well. The largest difference is that static ones can be called like a function without an instance of it needed. You can directly call the class 
You can't get the map coordinates from the gesture recogniser, only it's pixel coordinates. I'm pretty sure that the map view offers methods to convert pixel coordinates to map coordinates, though.
You mean like in C++? Well, Swift has this in "struct". Instead of a class, create a struct and you will get a free initializer for all your non-optional variables and you don't even have to write any code. Just try this for yourself: struct Person{ var firstName: String var lastName: String var sex: Int } And then try to initialize it: let you = Person(firstName: ... and you will see that you will get a free initializer. 
I did that my pipes are going from top to bottom and when it does that nothing follows it . It doesn't repeat for some reason. This is what i have. override func didMoveToView(view: SKView) { doAction() } func createRectangle() { let moveToBottom = SKAction.moveByX(0, y: -150 - self.frame.size.height , duration: 3.0) let removeTheNode = SKAction.removeFromParent() let moveAndRemoveBackground = SKAction.sequence([moveToBottom, removeTheNode]) let repeatAction =SKAction.repeatActionForever(moveAndRemoveBackground) sprite.xScale = 1 sprite.yScale = 1 sprite.position = CGPoint(x:0,y:0) sprite.runAction(repeatAction) } func doAction() { let generateRectangles = SKAction.sequence([SKAction.runBlock(self.createRectangle), SKAction.waitForDuration(NSTimeInterval(3.0))]) let endlessAction = SKAction.repeatActionForever(generateRectangles) runAction(endlessAction) } 
Kotlin is very similar to Swift (it's practically the JVM version of swift, I kid you not), and indeed this feature exists. I'm more for the use case for a simple data class without methods, but not with a value type (ie. struct)
Thanks so much this helps a lot!
About the "existing docs" - Apple's docs work very well with Swift, you don't need to be able to read ObjC. I recommend you check the documentation again. It seems it pretty much explains everything. It event gives you a link to a page explaining the delegate/data source concepts in case you have troubles with that. Cocoa is pretty well done in general, you just need to understand some concepts (e.g. delegation). Also, the documentation for NSOutlineViewDataSource explains it's purpose pretty well, I think. [Delegates and Datasources](https://developer.apple.com/library/mac/Documentation/General/Conceptual/CocoaEncyclopedia/DelegatesandDataSources/DelegatesandDataSources.html#//apple_ref/doc/uid/TP40010810-CH11) (granted, the sample code is Obj-C, but the introduction part should tell you what you need) [NSOutlineView docs](https://developer.apple.com/library/mac/Documentation/Cocoa/Reference/ApplicationKit/Classes/NSOutlineView_Class/index.html) [NSOutlineViewDataSource docs](https://developer.apple.com/library/mac/Documentation/Cocoa/Reference/ApplicationKit/Protocols/NSOutlineViewDataSource_Protocol/index.html#//apple_ref/occ/intf/NSOutlineViewDataSource)
Yeah, like the other poster said, the structs do this. I wish classes did too. Especially since Swift structs can't be imported into Objective C.
If you could include a little about your project and the size of the job that might help. Also, budget if you have it. I know several designers, but would need to know more deets before recommending one. 
You might check out cofoundersllab.com. Not 100% sure on that URL. But, google that if you'd like. Good place to seek help. Or, local user groups. I don't know anyone who works on no budget, so can't help you there. Good luck!
Thanks!
alrighto genius. It does bear more than just the collision resemblance, like the enemies moving across from right to left, doesn't matter. Good work.
ah right
How about a J.D.? What are you expecting of the UI designer? Why didn't it work out? Is this a FOSS project? Maybe a good UI guy will just appear. 
Haven't finished more than chapter 1 yet, stay tuned! I'd love to get some feedback. :) And I've just noticed I could have used the enumerate() function instead of this old-fashioned looping. 
Greatly appreciate your efforts here, and the fact that you open-sourced it! Will be an interesting read.
I'd be interested in helping you with the project. 
Try using pastebin or something for your code man it will make it easier for someone to help you
Great post! It's simply ridiculous how many bugs there are with 3rd party keyboards. I wouldn't consider it worth it to use one right now unless it offers features that you absolutely need.
Now you're just spamming.
Document based = YES, since you want to edit files Core data = NO, since you don't want to store the files in a database
Break your line down and check your data. Is timelineData nil or empty? Does the object at indexPath.row really exist? Is the object at that index really a PFObject? Also, be careful with casting. Casting doesn't actually change an object's type. You're supposed to use it when you know that an object has a certain type, but the compiler doesn't. For example, the following will bite you in the ass: let array : NSArray = self.timelineData.reverseObjectEnumerator().allObjects self.timelineData = [array] as NSMutableArray! You're telling the compiler: Take this array, it's type is NSMutableArray, take my word for it! But you're lying the compiler straight in the face, array is definitely not really a mutable array. When you call `loadTimelineData` a second time, your code will crash, because you told the compiler that `timelimeData` is a NSMutableArray, but it isn't, and so the `removeAllObjects()` line can't possibly work. Fixing that may actually also fix the bug you wrote about in the OP. Also, if you can, don't use NSMutableArray, use Swift's array. Those are type safe and stuff. 
Hopefully they'll add some sort of functionality resembling this.
sure! reduce() takes an enumerable structure / class and an initial value (in this case an empty string, iterates over each element of said structure / class and calls the passed function object (in this case the closure) and returns the concatenated result. You could also write it a bit more descriptive: return reduce(self, "", { (initialVariable: String, characterFromSelf: Character) -&gt; String in return String(characterFromSelf) + initialVariable }) initialVariable will be overwritten with the new value from the closure with every iteration. This will basically reverse the string by placing every character at the start of the new string, so the last character will be the first and the first the last. Apple's Swift Library Reference might be useful: https://developer.apple.com/library/ios/documentation/General/Reference/SwiftStandardLibraryReference/Array.html - there's some more examples for their algorithm functions.
Oh yeah, I forgot to even mention the visual format language in the article. I found it hugely problematic for my keyboard because I had to give names to all these anonymous keys and spacer views, as well as to sort of combine multiple smaller VFL strings into one. I think VFL works great when you have a small number of unique elements, so you can just write it all out at once; not so much when things are getting generated dynamically.
I can only assume that you missed my post explaining my position. Here is a link: http://www.reddit.com/r/swift/comments/2k11ii/should_i_learn_objective_c_before_learning_swift/clmeujo
To be fair, to build AutoLayout constraints you should be using something like Masonry (https://github.com/Masonry). Full power without having to struggle with VFL or the verbose NSLayoutConstraint() initializers...
they are called initialization lists in C++ http://www.cprogramming.com/tutorial/initialization-lists-c++.html
I'm learning from: http://www.raywenderlich.com/tutorials and to be honest, it's all I need for now.
@drewag actually did a pretty good job, and he's got a point - explaining object oriented programming is not the purpose of StackOverflow. A short explanation is that a class is like a blueprint for an actual object - when you write a class "GameScene", the class itself isn't a "GameScene" yet, it's just a blueprint for one. To get a "GameScene", you need to create an instance of that class. You can create as many instances of the "GameScene" as you want. If you want to use the same GameScene in multiple locations in your code, you need to create the GameScene somewhere (using the "GameScene" class as the "blueprint"), and then pass the actual GameScene (not its blueprint) to the other objects that should use it. If you don't pass the instance around, the classes that should use the game scene have no way of accessing it - they have access to the blueprint of a GameScene (the "GameScene" class), but not the concrete game scene you want them to work with. Creating a new game scene obviously doesn't help, you don't want a new one, you want that original game scene. What you're doing in the line `let gameScene = GameScene.self` is that you're storing the blueprint for `GameScene`s in the gameScene property. You don't want the blueprint, you want a concrete instance. I have no idea if that helps even a little bit... but that's the conceptual thing you are having troubles with. As @drewag said, look into object oriented programming, my short introduction is pretty crappy I'm afraid :-P
&gt; Well, this is a forum, where people help other people. Instead of showing off, how about next time, admit you can't really help. I'm not inclined to help people who act like this towards people who help them. That person gave you good advice, but you threw it back in his face because he wasn't willing to be your personal programming tutor. 
As far as I know, to build anything for iOS or OSX (whether it's in Swift or Objective-C), you'll need a mac. I don't think there's a way around that.
There is no native way of doing it, but you could try running mac OS X through a virtual machine and install Xcode that way. Of course, you would have to have access to and mac in order to download a copy of Yosemite and make a bootable USB.
RTFM. "Snapshotter objects do not capture the visual representations of any overlays or annotations that your app creates. If you want those items to appear in the final snapshot, you must draw them on the resulting snapshot image." Here's some sample code (Obj-C, sorry) of how you can draw on top of an UIImage: http://www.cocoanetics.com/2010/07/drawing-on-uiimages/ If you use a MKMapView to draw your annotation, you might be able to reuse the drawRect: method to draw your stuff.
I'm running a mac in a VM, but the host is also a mac. That simplifies things a lot. I tried VirtualBox, but it was too slow (I got tired of waiting to see my keystrokes appear on the screen. I didn't dare run the simulator.) As boy-o-boy said, you'll need to Yosemite somewhere. There are plenty of guides to install it onto a VM.
You need OS X. Ways you can get that: Buy a Mac, set up a Hackintosh, use a VM, or rent a Mac server (e.g. http://www.macincloud.com, I haven't tried their stuff though, so I can't vouch for it).
Can you help me get a proper guide to have a VM with the OS?
**Swift was designed exclusively for Apple platforms and is only available on said platforms.** If you really want to code in Swift in a reasonable fashion, try SwiftStub, an online interpreter, or Phoenix, an open source implementation of Swift. --- Resources: * SwiftStub: http://swiftstub.com/ * Phoenix Programming Language: https://ind.ie/phoenix/ Both options are viable since you don't get to try native Mac OSX development anyways. Happy coding! :)
I will look into this. Thanks.
Which more or less says that you're unwilling to continue a debate and will simply spam with that link. Yeah, because that's really a meaningful way to discuss things.
I acknowledge that the choice of implicitly unwrapped return values has been made in a surprising number of UIKIT (NS) libraries; I don't recommend implicitly unwrapped return values ever. They cause errors, especially as people naively compare them without the '?' operator.
Put that stuff into your app's view controller. It has it's own file that is created automatically, I think it's called YourAppNameViewController.swift.
Stack Overflow is probably a better place to ask questions like this: http://stackoverflow.com/questions/26605796/change-font-in-navigation-bar-in-swift
Have you read the documentation? UINavigationBar class reference -&gt; Customising the Bar Appearance -&gt; `titleTextAttributes`: "You can specify the font, text color, text shadow color, and text shadow offset for the title in the text attributes dictionary". Look at the UIFont documentation if you don't know how to create a font. Also, if you want that all navigation bars look the same, use the `UINavigationBar.appearance` proxy to set any appearance properties.
Have you sent this to Apple's current keyboard Czar or Craig Federighi yet? Definitely something they should read. This article captured the pain and struggle that I went through the past few months - and probably what the swiftkey/swype/fleksy/minuum/touchpal iOS team suffered from too.
Here's what I had ended up using: - (void)addHAlignedConstraintsWithFormat:(NSString*)format { [self.inputView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:format options:NSLayoutFormatAlignAllTop | NSLayoutFormatAlignAllBottom metrics:nil views:self.viewDictionary]]; } - (void) addConstraintsWithFormat:(NSString*)format { [self.inputView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:format options:0 metrics:nil views:self.viewDictionary]]; } - (void)setupConstraints { [self addHAlignedConstraintsWithFormat:@"H:|-(6)-[ArrowLeft(==heading)]-(5)-[image]-(&lt;=5)-[link(==image)]-(5)-[ArrowRight(==ArrowLeft)]-(6)-|"]; [self addHAlignedConstraintsWithFormat:@"H:|-(6)-[heading]-(5)-[hyphen(==heading)]-(5)-[asterisk(==heading)]-(&lt;=5)-[blockquote(==heading)]-(5)-[bulleted(==heading)]-(5)-[numbered(==heading)]-(6)-|"]; [self addHAlignedConstraintsWithFormat:@"H:|-(&lt;=2)-[leftSpacer][addition(==heading)]-(5)-[deletion(==heading)]-(5)-[substitution(==heading)]-(5)-[comment(==heading)]-(5)-[highlight(==heading)]-(5)-[rightSpacer(==leftSpacer)]|"]; [self addHAlignedConstraintsWithFormat:@"H:|-(6)-[tab(==heading)]-(5)-[globe(==heading)]-(&lt;=5)-[space]-(5)-[deletekey(==heading)]-(5)-[returnkey(==heading)]-(6)-|"]; [self addConstraintsWithFormat:@"V:|-(&lt;=12,&gt;=4)-[ArrowLeft(&gt;=32)]-(&lt;=16,&gt;=6)-[heading(==ArrowLeft)]-(&lt;=16,&gt;=6)-[addition(==ArrowLeft)]-(&lt;=16,&gt;=6@100)-[tab(==ArrowLeft)]-(4)-|"]; [self addConstraintsWithFormat:@"H:[ArrowLeft]-(5)-[IMAGE(==image)]-(&lt;=6)-[LINK(==link)]-(5)-[ArrowRight]"]; [self addConstraintsWithFormat:@"V:[image]-(3)-[IMAGE]"]; [self addConstraintsWithFormat:@"V:[link]-(3)-[LINK]"]; [self addConstraintsWithFormat:@"V:[heading]-(5)-[CRITIC]"]; [self addConstraintsWithFormat:@"H:|-(36)-[HLineLeft]-(4)-[CRITIC]-(4)-[HLineRight(==HLineLeft)]-(&gt;=5@250,&lt;=38@250)-|"]; [self addConstraintsWithFormat:@"V:[heading]-(9)-[HLineLeft(1)]"]; [self addConstraintsWithFormat:@"V:[heading]-(9)-[HLineRight(1)]"]; } This worked for both vertical and horizontal layouts, but we were focusing on phone at first, we were eventually just going to ditch Autolayout and do a fixed one for each device, as it would be pretty much impossible to write logic that would handle every set of sizes and look right. 
If your app is meant for phones in portrait mode only, then use compact regular. It depends on the devices your app will run and wether it supports landscape mode also.
There are something called "Hackintosh". It's a slightly (or sometimes less slightly) buggy hacked version of OS X allowing it to be installed on PC's. I haven't used it myself so I can't help you, and it is against Apples terms and conditions so install it only with "educational purposes".
Are we talking todo list type of thing? Someone types something in a text field and it gets put in a new cell in the table view? Your table view will most likely be backed by an array or perhaps a fetch controller. Set up your view controller to be the delegate of the text field. Implement didEndEditing and append the text to the array. Call tableView.reloadData() and you should be set. TableViews also have cool built-in animations if you want to get fancy.
The navigation bar has a titleView property. Have a look here: https://developer.apple.com/library/ios/documentation/uikit/reference/UINavigationItem_Class/index.html#//apple_ref/occ/instp/UINavigationItem/titleView So if you want to change that, you have to do this: 1. Create label with the font that you want. 2. Place your text in it 3. Assign your label as the titleView property of your navigation item. If you want to do it in a more advanced way: 1. Subclass UINavigationController 2. Set your titleView in your subclass 3. Replace the system nav bar with your nav bar I would personally do the latter. Good luck.
This question is asked way too much. Sell your Windows box and buy a second hand Mac. You'll have a better computer and be able to write Obj-C add Swift to your heart's content. 
http://www.hackintosh.com or buy a cheap mac mini
Thanks so much!
But try extra hard to make sure it works in landscape as well.
You don't need a fancy mac to run xCode and program swift. You can likely go for the cheapest Mac Mini and reuse your PC mouse, keyboard and monitor.
You should set the delegate of your text field to be your view controller (most likely) and then in [the textFieldShouldReturn](https://developer.apple.com/Library/ios/documentation/UIKit/Reference/UITextFieldDelegate_Protocol/index.html) method, you could do something like this func textFieldShouldReturn(_ textField: UITextField) -&gt; Bool { array.append(textField.text) self.tableview.reloadData() } disclaimer: i am a bit forgetful on my swift syntax as I have only used it a bit and I am not checking this at all
Looks pretty legit, I can't spot any mistakes. I think you need to add `textField.resignFirstResponder()` if you want the keyboard to disappear, though.
oh shit, and yeah you need to return true, as that method expects a bool return type
Haha, seems like I'm not a very good compiler myself, missed that completely :-D
Not really. First off, you need to add four spaces at the beginning of a line for reddit to interpret it and format it as code. Second, the syntax seems to be off. you should just be appending textField.text. The String from the syntax is just the parameter type and shouldn't be in the function call. Also, due to how you typed it out, I can't tell why the function starts on the same line as the declaration of your text field, but it definitely shouldn't 
I'm on my phone right now, but you should look into passing data between scenes (I.e. Your score variable) using the scene's userData. Edit: see this link for how to pass data between scenes via your new SKScene's (this would be your game over scene) userData dictionary property: http://stackoverflow.com/a/18924419
Holy shit dude, you're repeating yourself... Here's a simple example, maybe this helps (it doesn't matter if your classes are in different files or not). This is what you have, simplified a bit (B is the game scene class, C is the game over thing's class, A is the class that creates the instances of both classes). class A { init() { let instanceOfB = B() instanceOfB.foo = 1 let instanceOfC = C() } } class B { var foo = 1 } class C { func bar() { // You want to access instanceOfB's foo variable here. To do that, you need a reference to that instance of B. } } Possible solution: class A { init() { let instanceOfB = B() instanceOfB.foo = 1 let instanceOfC = C() instanceOfC.instanceOfB = instanceOfB instanceOfC.bar() } } class B { var foo = 1 } class C { var instanceOfB: B? = nil func bar() { println(instanceOfB?.foo) } } Now C has access to the specific instance of B that was created in A. The code should print `Some(1)` if I didn't make a mistake. The important part is that you need to understand why putting `var instanceOfB = B()` into class C can't work - that creates a new instance of class B. An instance where foo was never modified and is 0. I called the variables `instanceOf...` to make clear that those contain instances of the class, not the class itself or something. In real code, you wouldn't do that, e.g. `instanceOfB` would be just `gameScene`, but what that actually means is `anInstanceOfTheClassGameScene`. 
There are several mentioned on [Apple's website promoting Swift](http://www.apple.com/swift/?utm_campaign=iOS_Dev_Weekly_Issue_168&amp;utm_medium=email&amp;utm_source=iOS%2BDev%2BWeekly)
Most existing projects will only be incorporating Swift in addition to the existing Objective-C code base, since the Swift compiler can process both in the same file. I know Apple's own WWDC app was completely written in Swift, but it'll be a while until we see all new apps. 
Thanks!
I did the "possible solution", but the score is still showing nil. And you say "hy putting var instanceOfB = B() into class C can't work ", yet in the solution that's what's being done. How is that?
Cocoa frameworks - The classes that Apple provides for creation of Mac and iOS apps. Includes examples like Quartz. CoreAnimation, etc Quartz - Apple provides this framework to edit images in a complex manner. Very useful from my own personal use, a big learning curve however. Metal - Works in combination with OpenGL to provide low level graphics control OpenGL- Low level graphics control Rather than use OpenGL/metal, small scale developers use higher level graphics frameworks such as scenekit or spritekit which are both Apple-made examples.
If the Apple developer resource doesn't contain any documents on the API, it's probably not ready for third party use. 