The compiler converts every program from the text format to an internal representation called an Abstract Syntax Tree, usually shortened to AST. That tree contains a bunch of data structures that describe each interesting bit of the program's structure. Type inference happens when an implicitly typed element of the AST - like a variable declaration that isn't given an explicit type - links up to something else in the tree that \*does\* have an explicit type, like a literal value (the 42 in this case is a literal because it means, literally, 42 in the program). The literal has a known type, and that type is applied to the untyped variable, so the compiler knows that variable probably is an Integer type. The same thing happens with any other variable that is connected, through the AST, to something that has declared a type. Function return values, class or struct members, class and struct instances, etc.
Swift on Linux has been perfectly fine for almost 2 years at that point, this is just 2015 level bs. Actually use it on Linux in real life before talking shit because some people actually do nowadays.
But a name or at least last name does not have translation. For names I believe there are equivalents. Anyway this looks like an awesome thing to heard or watch. Good luck!
I don't watch videos about programing but good luck on it.
When a function parameter has 2 names, the first is the name when you use the function, the second one is for inside the function. "\_" is special because it means no name. &amp;#x200B; So `func someFunc(a b: String)` you call `somefunc(a: "parameter")` and use `b` inside the funciton to access the input parameter. And `func someFunc(_ b: String)` you call `somefunc("parameter")` and use `b` inside the funciton to access the input parameter.
"\_" means no label, so when you call out your function you just write (Any) instead of (somelabel: Any). when you don't specify a label, then the name is also used for the label like this (sender, sender: Any).
the other 2 options here are (both mainly useful for generic values in my experience) `someFunc(a _: Type)` when you don’t want to use the value in the function and even `someFunc(_ _: Type)` where it’s not named at call site and not used in the function
I can also recommend [corecursive](https://corecursive.com) and the back catalog of [Functional Geekery](https://www.functionalgeekery.com).
In swift, you can use parameter labels before the parameters in a function declaration. The purpose of the parameter label is to give more readability when calling a function. For example in Collections you have a method to append elements from other collection. func append(contentsOf other: Collection) So you can call it like this. append(contentsOf: [1,2]) which gives you nice readability. And you can use the parameter name “other” inside your func body. _ means no label. By default parameter name is the label for it. But if you use_ there will be no label for the parameter.
Do you mind posting a quick example for this? I just got into generics and I’m intrigued, and also interested in how it works with no parameter name.
I’m on mobile but when i’m using generics what i do sometimes is a include the generic type as the first argument `func foo&lt;A: Constraint&gt;(_ _: A.Type = A.self)` Often when you call a function the compiler is smart enough to work out what A is, but when it’s not you can give it a hint by calling like `foo(String.self)` But since this is mainly a hint to the compiler and i don’t plan on using it i remove the name from within the function (if you want to do something on the type you can reference A directly anyway)
Thanks so much!! Just ran into this case the other day actually and couldn’t figure it out!
I'd go for one of the packages. There's a good chance that they're looking to see how you handle those in the context of associated patterns, architecture, unit testing etc.
It’s what I assumed too. It’s way overkill for such simple projects, but it’s probably what they want.
I do similar coding tasks for my candidates and would expect you to use RxSwift or a similar library.
In my opinion it's best to just create your own demo project where you choose what you use. Make sure to include a good readme for it, explaining what's the demo project about and how you made the harder decisions. Even if they want something extra, you will probably be allowed to add it to your existing project instead of having to build up a new project every time.
100% agree with this. I would actually score someone negatively if they tried to roll their own “framework”. Basic reasoning being: do they try to always roll their own? Are they not familiar with common tools? Just using closures or did set call backs are one thing if being used correctly but if the expectation is reactive then they’re probably looking for RxSwift and high likely hood looking to see an MVVM architecture.
Is it possible/advisable to have a timer in my navigation controller?
Thanks!
If they ask for Rx it's usually cause it's integrated into the projects you will be working on. It's best to show them you have knowledge with it. The coding challenge is not about the project it's about how you normally aproach a big project even if you have to start small. Think about it how would you create the arhitecture for a highly scalable project which is something any company wants
Use RxSwift. It doesn't matter if you think it's overkill for a small project. They want to know if you're comfortable with that method of programming so they can determine if you're a good fit to manage a production app.
As the other peeps already mentioned, show that you’re familiar with one of the big reactive frameworks and you know how to use it. That’s probably what they’re looking for. You could still mention your concerns in a readme or just tell them after finishing the test task, if there will be a discussion anyway.
I don’t think RxSwift is overkill for anything. Whenever candidates say things like this to me it makes me dislike them fwiw. It’s a tool that’s extremely vetted, and doesn’t add to the app size or anything. It’s a matter of being able to maintain and easily build or not. Project size doesn’t matter IMO
You will only find them second hand, but I’ve seen some of them, including Apple employee shirts up on r/appleswap
These interviews are just as much about the process than the result. Ask them questions. Show your reasoning. Think out loud. If they ask you about reactive programming, let them know that you understand that “reactive” is a general pattern, and that it is implemented by a few common frameworks. Mention some. Tell them that you think using a framework for such a small project probably is overkill, but that you’re happy to use one, or to employ some of the common patterns in your own code, if they want you to. Don’t be afraid to tell them that you mainly have experience with X, but that you’re aware of Y, and although you prefer one, you think you could fairly quickly learn to work with another. Focus on the patterns, not the implementation.
the left side is known as an extron and the right an intron, this means the external label and internal label. This is kept mainly for legacy reasons for interop with obj c and arent considered swifty. If you declare only one label it counts as the intron and extron.
The time I went we got a free jacket and some pins, any t-shirts or other swag you had to buy. I’m pretty sure they only sell the WWDC stuff at the event. I’m going to guess eBay is your best bet.
You can use JavaScriptCore by itself. You don’t have to use a web view at all.
Yep, but it's postMessage and I have to register every call... so is there any library for just exposing existing Swift objects to Javascript?
A request like that doesn’t come out if the blue, if they’re looking for reactive experience they likely already use a framework. Take this opportunity to ask questions as to what they use, and use that in your demo code. If they claim to not use one, show your experience and talk about some pros/cons of they ones you’re familiar with.
&gt; What's the best thing I can do in these cases? Skip the interview, and don't work for that company. If they're intending you to use reactive programming in Swift, they're going to lead you down the wrong path in terms of technologies, and damage your future career.
&gt; It’s way overkill for such simple projects You're right. And that's why you should sidestep those companies, and dodge a bullet. Don't work for them.
Reactive programming makes sense in some cases. One of the interviews was for an uber competitor and it 100% made sense for them.
&gt; Reactive programming makes sense in some cases. No it doesn't. If they're building apps that way, they've gone down the wrong path. They've added unnecessary complexity to the project, with benefits that could have been easily achieved with much simpler solutions. Reactive programming on iOS or macOS is a no go. It's the kind of bad code smell that should send you running from the project.
Not that this helps you as an interviewee per se, but if the interviewer expects a certain result without specify what that result is the fault is mostly on them. If you have the opportunity to do so, clarify with them directly regarding any preferences or expectations for the implementation. That's just a part of gathering requirements for a project and demonstrating communication skills.
Skip forward to page 128 to read about "ARGUMENT LABELS", if you like. Or disregard it and keep going. They wrote the book in that order for a reason, after all. A book can't teach everything at the same time.
Not sure this is wise advice. Rx is pretty good way of doing apps. Some companies use it. I've worked for a couple. If they're looking for devs they're gonna want to make sure they can work with that tech.
&gt; Rx is pretty good way of doing apps. It is absolutely not. &gt; Some companies use it. And those teams are led by misguided developers. &gt; If they're looking for devs they're gonna want to make sure they can work with that tech. The wise thing to do is to avoid those companies and those projects, because they will lead junior and intermediate developers down misguided technological paths, and teach bad habits that will need to be unlearnt.
I don't get the downvotes here. Rx is a valid approach to app development. Devs should at least have a decent idea of how it works. Why limit your opportunities?
Your motivation depends on the results you get. To be honest, if I get the results I intent to get, that gives me motivation to continue working on the project. The result goals are small and achievable between coffee breaks..
&gt; It is absolutely not. Your opinion. &gt; The wise thing to do is to avoid those companies and those projects, because they will lead junior and intermediate developers down misguided technological paths, and teach bad habits that will need to be unlearnt. Why? I've worked on Rx projects. I've worked on plain old MVC. I've also work on clean arch and VIPER architectures. It's just another string on the bow. Why limit yourself?
I completely disagree. It's just a different style of programming. I seriously doubt you have ever worked on a complex event-driven application.
&gt; Your opinion. Yes. And I've been around long enough to know when I'm right. &gt; Why? I've worked on ... I haven't just worked on those, I've built all of those frameworks and architectures, on a bunch of different platforms over the decades. Reactive programming is absolutely unnecessary complexity on iOS and macOS projects. The benefits are massively outweighed by the complexity costs, and can be achieved better with considerably less complex architectural alternatives.
You don’t *need* RxSwift and Apple provides all the fundamentals to do things without the bloated, weird syntax and paradigms that RxSwift uses. Use delegates and protocols, you’ll get the same effect and not have to worry about breaking changes or tying your app to a bad Facebook library. I worked (very) briefly for a company that was migrating over to RxSwift and it was a PITA to work with, which was the main reason my stint was so brief there. It’s a clutch for web developers that got so familiar with a react way of doing things that they can’t think about problems any other way. It’s not pretty to look at or code in and is totally unnecessary.
&gt; I seriously doubt you have ever worked on a complex event-driven application. I've been doing this job since before the turn of the century. I've build applications on more languages and platforms in more decades than I care to remember. You're welcome to disagree. But you are wrong.
The best developers I've met in this field know a ton about reactive programming with also solid understanding of Apple frameworks. These are people who have been in the field since the early days of iOS programming, some of them have been programming for 30+ years. Don't listen to anyone who says reactive programmers who use Swift are "misled". There are many ways to develop an app. People get way too defensive over things they do not understand and do not *even want* to understand. It's an option for developing apps that has benefits and drawbacks. RxSwift isn't easy, but a lot of the times it's worth it.
Oof. This guy's advice is terrible. Reactive is perfectly valid. This guys opinion clearly originates from some particular bad experience with reactive programming. Maybe he got rejected from a job that used it or couldn't learn it well enough for a job he had.
Thank you for revealing that you are stuck in the past and do not want to understand that there are different ways of developing apps than 30 years ago.
Again, this is all opinion. No approach is perfect. The more you work with the more you learn. Some really innovative products have been built using Rx. Pretty much any Android app you care to mention for example. It's just a tool. It might not be perfect, nobody said it was, but it works and it has benefits.
Perhaps you'd like to look me up on Github, before you make such statements.
As a person with a lot of experience, do you see future in swift/iOS? My friends with 6-8 years experience in iOS development seem to think it’s going downhill and we should jump ship soon to other technologies since the amount of jobs is shrinking.
More opinion. Some really great stuff has been done with Rx. Don't get me wrong, it wouldn't be my first choice, but it's out there and why not know how it works?
I don't need to. I am not interested in further interacting with close-minded people like you. The only reason I commented is because you're giving biased advice based on your hatred. Good day sir.
&gt; Some really innovative products have been built using Rx. Pretty much any Android app you care to mention for example. Android is another kettle of fish. There is unavoidable complexity on that platform, and different problems to solve. I have been specific that reactive programming is an absolute no on iOS and macOS projects. &gt; The more you work with the more you learn. And I've been working a very long time, and dealt with all of these technologies plenty of times in the past. I can tell you that what you will eventually learn (if you're not a fool) is that reactive programming on iOS and macOS is grossly unnecessary complexity for minimal benefits that could have been achieved in much more simple ways.
&gt; I am not interested in further interacting with close-minded people like you. For someone closed minded, I'm quite busy inventing new stuff. You really should do your research before attacking people.
Good for you, but stop giving out biased info.
I don't know where your friend is getting that idea. Perhaps they could elaborate? iOS is the one of the biggest computing platforms in history, and Swift is the language of iOS's future.
It’s a trick question. The general properties of good code are that it should be robust, declarative, performant, easy to test and easy to maintain/modify. You generally can’t get everything right, from everyone else’s perspective. I try to achieve this in my production code using what what comes with swift out of the box. Some people use Rx. I personally don’t like how Rx “takes over” your code and how difficult it is to remove it from your project in the future. Plus I find it a lot less readable in general. But this could very well be because I’m not smart enough to understand it. On the other hand you will end up impressing people by using RxSwift. Most interviewers think it’s an “advanced programming style” and will grade you as a “senior”. Whether you want to work with them in the future is up to you.
It's not biased, it's correct. The things that comes from extensive experience are wisdom and understanding. The wisdom and understanding to know when a technology is overly complex for the platform it is being used on, and provides slim benefits for such high costs. And that those slim benefits can be achieved easily with the use of much simpler technologies. Reactive programming on iOS and macOS is objectively a bad idea. That's not bias, that's the reality of it.
Again, I completely disagree.
Your loss. You can either listen to the advice of more experienced engineers, or you can keep getting it wrong until you figure it out on your own. That's up to you.
You're by far the most condescending person I've ever met on this subreddit. You're not better because you have more years of experience. I don't care how much expertise you have, I don't respect anyone who isn't open-minded and forces what they like on others.
Maybe you don’t quite get it, RxSwift itself has strong opinions. They overload operators, wrap all their stuff in obscure completion handlers and require you to code in unconventional and sometimes anti-swift ways. I know how it works, I’ve read a lot of the source code and it’s pretty ugly. Good code is something that anybody who is seasoned in the language can read, pick up and contribute to. RxSwift doesn’t tick those boxes and for that reason, I’m out.
&gt; I don't respect anyone who isn't open-minded ... How do you think I got the experience I have? How do you think I know the things I do? By trying things. Trying everything. Experimenting. Learning by doing. I've done all of this shit. I've done it all, many times. To be close minded I'd have to be saying on to it without ever having tried. But I have tried. I've even built most of it. I'm not telling you "don't use this technology that I've never tried", I'm telling you "I've tried, and built, all of these things, and I'm telling you what is and is not a good idea based on that experience". Yes I'm condescending. I've got no interest in being kind and gentle in the face of bad ideas. I'm calling out bad ideas bluntly, and directly, because that's what I do. But make no mistake, they are bad ideas, and I am correct. Anyway, you've had enough of my time. Goodbye.
&gt; This guys opinion clearly originates from ... No. I've been doing this job for decades, and programming in general since before the internet existed. My advice is based on decades of experience, and having built and tried all of the technologies in question, on multiple platforms.
I absolutely get it. I've read the source too. Like I said, it's not perfect, but some pretty smart people are using it. I don't understand the closed mindedness. Use it you have to, if you don't, use something else. It does zero harm whatsoever to know how it works. You'll never know when you might need it.
Could you explain what makes iOS particularly unsuited for reactive programming? You're making a pretty bold claim without giving your reasoning.
Thanks for proving that while you might be a competent professional, you're a trash human. The poster child for rockstar developer of this sub.
iOS is suited for MVVM and MVC. That’s the way it’s been designed under the hood, and the paradigm that should be followed. Reactive programming is just a trend, and software has been written well for decades without it. It’s popular on the web and people thought it would be good to migrate to swift. Problem is swift from the get go was designed to inherently NOT be a reactive language.
I had the same experience with a large bank institution. Was given less than 5 hrs to write the app. I chose MVVM, and didn’t have time for a readme. I passed the tests but during the interview I faltered when asked a ton of Linux system admin questions which have no relevance to iOS development.
Many people here addressed what it does already, but a small addition from my end: „_“ is what you’d call a wild card. It is essentially a black hole for data. If for example you have a function that returns an int and you call it without assigning the result to a variable, Xcode would tell you that you’re not using the result of said function. If func foo() -&gt; int would be called like this: foo() Your get a warning from Xcode. To mute that warning you could do: _ = foo() This would take the result of foo and purposefully take it and throw it into the black hole. Essentially it is telling Xcode that you’re not planning to do anything with the value. So: _ is not just for avoiding labels in function parameters! :)
Right, so crusty and stuck in your ways.
I've only run into this once where I hadn't done any reactive programming before and so I just did the interview regularly without trying to learn it on the fly. A few months later a new job I started was creating an iOS app with a heavy emphasis on RxSwift. Man is it confusing. I've basically learned enough to keep up with the parts of the codebase which are written in RxSwift and have chosen to do standard non reactive programming wherever I could argue that the complexity wasn't worth it. This actually happens quite frequently, simple things like table views get overly complicated when you start making datasources, bind to tables. Some other tasks like tapping on a button or reacting to a gesture recognizer are interchangeable. RxSwift has a lot of cool little shortcuts for these things, I prefer clear technically sound code that any iOS Engineer can read and understand.
That's a pretty creative idea for a youtube channel! Great idea
Hey! [Crusty](https://www.bignerdranch.com/assets/img/blog/2017/01/crusty.jpg) is cool! 😆
Amazing! Thank you for your kind words, Vrezhg! :D
https://imgur.com/gallery/ItctCo2 How do you get that xyz thingy in my object?
Thank you I will try it :D
I can assure you that's not the case.
TIL avoidable complexity is new and hip
Take it from someone who wrote a damn book on Swift and got into the industry... The sad reality is that the majority of real jobs in the field have people who are tech illiterate on both the client and studio side. As much as I would LOVE for people to get with it a bit and make beautiful code...that's just not how it works. I've watched devs with the right mindset about the foundation of a project come and go because as much as we want things to work right by the architecture, we don't sign the paychecks. In many cases the ones with the funds barely know how to log into Facebook let alone know that Reactive programming with Swift is like trying to smash a nail in with the handle end of a hammer.
What you seem to be implying is that if you were approached by a company who used RX tomorrow and they offered to double your salary you'd decline because of Rx. Bullshit. Quit discouraging people. You're no Chris Latner.
Have you already figured out how to pull in the podcast data you need?
The trend I've been seeing is a move away from native device code (ie: Swift/Obj-C for iOS and Java for Android). The rise of Unity, Unreal or deploy-to-both-at-once code began even back say 4-5 years ago with native code only needed for tools / APIs that go with these IDEs &amp; C#/C++. I'm not talking about game dev btw, this has been for non-game corporate apps. The most recent trend gets worse...the "can it not be an app?" trend. Major companies dont want apps anymore and want people to just "go right to it" via the web (or laughablybe told that devices dont automatically run their custom "app" natively). Ignoring the glaring caveat that everything is "an app" (like the OS and web browsers) there's been a push to make all that runs on apps work on web browsers. Despite the progress with webAssembly and the so far empty promise of 5G; relying on web solutions with the very slow architecture with Javascript is still very foolhardy but it's the demand from so many in the marketing field. Native apps and code will always be ahead of web based solutions but I'm finding myself as a dev doing far more time in JS than in Swift, Obj-C, C++, Java and C#. Only machine learning seems to at least keep things in native code since the models need python and fast code to train in.
How is it “correct”? Are you going to provide any sort of proof or evidence or data that your view on reactive programming is correct? Or are you just going to continue down your toxic arrogant path of “I know better than you”? I really hope I never have to work with somebody like you, and I feel bad for the folks that do.
This is so patronising. You assume that op can't think for himself. OP, if you like the product, if the company culture seems like a good fit and the money is right, go for it. I'd be inclined to assume that you're smart enough to be able to work out the pros and cons of any particular approach to app development. I wouldn't be inclined to listen to dogma if I were you.
Thanks for putting up a transcript, it makes the content a lot easier to review. One thing I'd do is post the code as text too instead of images, that way people can cut-and-paste into their own playground to follow along. Or maybe even have all the code as a git project they can download.
didSet is a reactive pattern literally designed into Swift. I get you might have bad experiences with reactive as an architectural pattern, many of us have, but you’re being extremely dismissive here when it’s not always warranted.
There’s actually a series doing this exact thing on nsscreencast.com. It’s not free but if you are a beginner then it’s a worthwhile investment.
Once you get 'rx' you'll never want to go back. You will also be able to contribute to other platforms since the concept is the same.
Nonsense. MVVM and Rx work like hand and glove. And the best projects I've worked on used neither MVVM or MVC.
I see it’s benefits. But I’d rather develop a better understanding of native good old iOS dev, and pick up these technologies on a need base. Not something I’d focus all my attention on. There are some places where I might include RX in a project but generally for continuity probably would avoid it
Not sure if it will work or not but have you tried using a container view?
Not yet, what are your thoughts?
If you’re using storyboard, try embedding a container view in the text view then connect the container view to the view controller you want to use for the live view controller
I am needing the containers to be able to be added and deleted when a button is clicked... not just a single container. Sorry, probs didn’t explain that well
I'm not saying you can't use it, but its just bad practice to mix paradigms. If you can write clean code in a team and others work on it just fine, do what's best for your team obviously. In most situations it doesn't make sense, and let's not forget RxSwift adds a lot of bloat to a binary. More and more abstraction (and more clock cycles) is not always a great trade for the extra syntactic sugar that's provided.
A few thoughts: * Pull the RSS XML file using [NSURLSession](https://developer.apple.com/documentation/foundation/urlsession). * Parse the XML with [XMLParser](https://developer.apple.com/documentation/foundation/xmlparser). * Play audio with [AVAudioPlayer](https://developer.apple.com/documentation/avfoundation/avaudioplayer). Of course there's a lot more to do to make a practical Podcast app but I think those are the basics under the hood. If you haven't built an app with a UI yet then perhaps start with a button that, when pushed, sets a UILabel then work your way up.
Swift has a REPL. Type “swift” at the command line
Hi /u/sobri909 I'll raise you with my programming experience. Started in 1982. Been coding ever since (that makes it 35+ years of experience). I've architected extremely complex applications (electrical utility networks, medical field, computer vision, machine learning) and I've built countless applications. Been an iOS developer since the early days. My first App Store application was released in 2009). I'll say that someone who dismisses Functional Reactive Programming right off the bat without knowing the particulars of the project and says that it is a bad paradigm **without knowing the particulars of the use case** is plain wrong. When used correctly, and given the right circumstances, it's an excellent tool. In fact, I'm using RXSwift right now on a very complex application and find it extremely satisfying. Complexity is much better maintained than by using a traditional MVC paradigm.
Don't mind him. He's likely bitter because he has to maintain some shitty reactive code from a developer who doesn't work at the company anymore. Heck, I wouldn't be pleased either but I don't blame incompetence on our tools.
I don't think you understand what RX is. It's not more suited on Android than on iOS. What you're saying is equivalent to saying "You should never use OOP on Windows". It is a programming paradigm. It has nothing to do with the operating system.
I know exactly what it is. And I know what it is suited for. Something that people in this thread do not know.
I started in 1984, and my guest iOS app was in 2009 also. You are wrong on reactive programming on iOS and macOS.
Of course I would decline. I decline jobs every month. And I’ve most certainly declined work on grounds of poorly chosen technologies. Right now I’m not available for work because I’m too busy anyway.
There are already multiple tools provided as part of Foundation, UIKit, and the Swift language and standard lib that make Rx tools redundant. Those already existing tools allow for the same results without adding any complexity, and allow for those results to be achieved in cleaner and more maintainable syntax. There is no excuse for adding an rx lib when the functionality already exists, and is already cleaner and more maintainable.
lol that's cute
There are no pros to using rx frameworks on iOS and macOS projects. That’s the point. OP should run from any such projects.
&gt; Also, this is completely wrong: Wha? Huh? That looks right to me. The part of Apple's documentation that you quote says the same thing as it. For example, you say it has "nothing to do with inheritance at all", but in the section you quote, it talks about how you can "use the class keyword to allow subclasses to override the superclass’s implementation".
Use those built in tools if you want to add that kind of code. Don’t add a large, complex framework when the functionality already exists in Foundation, UIKit, Swift, and the standard lib.
You lean the ways of the platform that I’m developing on? The platform that already provides reactive functionality and doesn’t need any complex third party libs to achieve it? Learn your platform. Don’t throw mountains of complexity at your project when doing so is entirely unnecessary and redundant.
I’m not suggesting it’s the only way to do things. In fact, it’s not even the only way I personally do things. However, as far as patterns go, the reactive pattern has done wonders for our code / app quality, and has made the UI side of the project much cleaner and easy to wrap your head around, so it’s a requirement I have. When you work on a larger dev team, unfortunately you don’t get to make past decisions over again, so it’s put very up front in my hiring process that I will expect some understanding of it, and you will have to prove you understand it. I will openly admit that Rx in the hands of people who don’t 100% get how to make it work the right way is a terrible, terrible thing. However, the right group of people can leverage it to get a much cleaner / implementation of binding complex backend to UI than the other more standard patterns offer IMO
It's not runtime in my program.
&gt; This is kept mainly for legacy reasons for interop with obj c and arent considered swifty. Excuse me??? No. Just no. I don’t know what caused you to think this, but it’s 100% wrong.
Some projects are complex enough to justify using a reactive framework depending on what they need to do. If the app has to manage many async tasks, it's a great option providing you model its architecture to take advantage of Rx (e.g., MVVM). I won't lie though, there are a few strong drawbacks to using reactive frameworks, such as unnecessary complexity (depending on what you want to do), it's hard to debug, steep learning curve, etc. But given the capability of modern processors, clock cycles are not something 99% of app devs have to worry about.
Defining a method on the type is not the same thing as "type method or property is not inheritable when the data type is subclassed". For example, a `struct` can't be subclassed but you can still have an instance method and a type method. Subclassing is a completely different concept than `static`. Yes, making a property or method has implications when you subclass but they are not directly related.
That's one the reasons I use Rx: I prefer not having didSets all over the place. But most importantly without an Rx framework, I can't compose easily. That's a big limitation because I want to tell the system what to do, not how it does it. For example, I'm not interested in implementing custom logic to wait X time and ensuring no more events have fired so I can process the most recent. With Rx I can just say someTrait.debounce(X).subscribe... and be on my way.
Oh man, I still remember that WWDC presentation. One of the best.
You hit the nail on the head. He has absolutely no idea what Rx is or does, and worse: he doesn't want to learn and he's discouraging others.
Thanks, I’ll definitely check it out!
Great thanks, that is very helpful!!
All of your replies seem to indicate that you have a deep misunderstanding of what Rx is. It does not add functionality. Period. It is a way to architect your code around data streams. There is no "functionality" that it replaces. There is no equivalent "functionality" in Foundation or UIKit. It's main benefit lies in avoiding state problems that are inherent in other programming paradigms. Take, for example, the whole segue API. How inelegant that is. Passing values around from class to class in a prepareForSegue, relying on segue identifiers, etc. This is a problem that is elegantly solved by a good Rx architecture.
FRP is brilliant. The frustrating parts are learning the framework like RxSwift, understanding and thinking in this new (for many) paradigm, and debugging.
Was going to use Spotify’s SDK to make the app usable (also because I’m not familiar with pulling RSS feed, but after marxy ‘s comment I’ll try and set that up!
I tried segues when they were first introduced. Terrible bit of API. Never used it again. I assure you I know exactly what Rx libs do, and that their functionality does already exist in the standard libs and frameworks. I’ve been building these frameworks myself for decades. Hell, some of my frameworks have ended up being copied almost wholesale into UIKit over time (this making my project redundant. Such is life). The misunderstanding lies with the people who are using overly complex libs for tasks that can be done more simply and elegantly with built in tools.
I beg to differ. It's much nicer to look at RxSwift done right than the mess of delegation, Notification Center, KVO and Selectors (which still has Obj-C syntax). Rx has one unified syntax through Observables.
I wholeheartedly agree with you. It took me a couple of months to wrap my head around it. It is brilliant, if used correctly (isn't that true for any tool?). I find that you have to rethink your debugging methodology. Forget looking at call stacks!
No, you’re talking about WKWebView. JavaScriptCore has an extensive, full featured API including a direct, synchronous ObjC&lt;-&gt;JS bridge. Admittedly, I haven’t used it in Swift, and it relies heavily on the ObjC runtime, so you’d have to make your bridged Swift objects @objc, but it should work well.
Look if you’re dumb enough to use NC in a global scope good luck.
True. When I first used RxSwift I quickly learned that call stacks aren't helpful at all. In fact, iOS debugging in general is pretty terrible compared to other platforms with or without FRP frameworks.
You'd be surprised at how many devs do that. It has little to do with being dumb, they simply might not know better. Regardless, the facts remain: Rx is complex and for some people, it's not something they want to use which is fine. But its unified syntax is a very strong benefit to the mess Apple has provided us with.
&gt; I assure you I know exactly what Rx libs do, and that their functionality does already exist in the standard libs and frameworks And what functionality would that be, that is available in standard libs and frameworks while being provided by Rx? Are you going to talk to me about key-value observing because that, is a real mess, inherited from Objective-C. Or maybe you want to talk about NSNotification and NSNotificationCenter? Seriously, if you consider these to be the rx-like "functionality" that is provided by the standard libs and frameworks, you have a lot to learn about Rx. If those two examples are not it, please state the standard "functionality" you are describing.
There’s a few more, but yes, those are the heart of it. Wrap them up in some simple syntactical sugar (such as my SwiftNotes lib) and you’ve got simple, easy to use replacements for 90% of what Rx libs do. The rest is just composition. And the composition of Rx libs is one of the reasons why they’re such a bad idea. They add a hard layer of abstraction where none is necessary. It’s unwarranted complexity that doesn’t pay for itself. I find have a lot to learn, because I’ve already been through all of this plenty of times before. I’ve been through all this and come out the other side, wiser, and now well aware that these libs are bad code smells, and disqualifiers for candidates.
In the storyboard, embed your first view controller in a navigation controller. It's under the Editor menu.
I've looked at your SwiftNotes library. Undoubtably useful for smaller needs. However, what happens when you need to pass data around? You'll rely on userInfo. A dictionary. Which could contain anything. It is not type checked. Sure, you could write more APIs around that. However, now your needs grow to maintain, for a given notification, the three last values that were published. Sure, we can code that in too. Not too hard, right? Now, I want to combine two notifications, making sure that I maintain the values received from both to send a third notification to someone else. These APIs (Notification Center, Key-Value Observing) are what I call quick fix APIs. They're suitable when needs aren't too complicated. And you sure as hell don't want to make them a central part of your code architecture lest you write (and maintain) a ton of code around them. On the other hand, Rx handles all these cases, and many many more, very elegantly, in a type-safe manner. As a matter of fact, I'd argue that since making Rx an integral part of my project, hard crashes due to side effects (thread safety, unwrapping nils, etc.) has gone way down to the point that all that is left are crashes related to platform frameworks (forgot to add a UILayoutGuide to a view before constraining subviews, etc.). I do understand that it's hard to see the benefits of Rx. It is also not a solution to every project (what tool ever is?). But dismissing it out-of-hand as incapable or somehow incompatible with the platform, as you've been doing in this thread is, at best disingenuous.
&gt; However, what happens when you need to pass data around? You'll rely on userInfo. A dictionary. Don't pass information around, pass messages around. The receiver should know where to find the data that it needs. All it needs is the message. You're massively over complicating things that can be solved simply. Which is the root of the problem with Rx libs. They add a massive amount of unnecessary complexity, bloating the architecture of the project. If you're doing things right, there's absolutely no need for that extra complexity. &gt; These APIs (Notification Center, Key-Value Observing) are what I call quick fix APIs. They're suitable when needs aren't too complicated. If your needs are more complex, then you've failed in your architecture. &gt; I do understand that it's hard to see the benefits of Rx. The benefits you see are workarounds for your architectural failings. I know that sounds nasty and insulting, but that's what I'm seeing, and what is endemic to users of Rx libs. Throwing gross excess complexity at problems of their own creation, due to poor project architecture.
You should use segues to move to the next view controller.
check Angela Yu / the appbrewery
So, let's say I've succeeded in fetching data; I'll notify observers of that fact and then have them look up the data I've fetched? You think that's a good architecture, separating data from notification? How do you guarantee that the data that will be read by the observer is the data that was fetched by the producer since you've disassociated the two? How do you manage side effects due to threading? How do you manage a producer that produces data more quickly than its consumers can consume it? A good architecture should never disassociate data from action. Otherwise, we'd still be stuck with GOTOs and global variables instead of functions and parameters.
Hackingwithswift.com Additionally, install this app. Unwrap - Learn Coding by Paul Hudson https://itunes.apple.com/us/app/unwrap-learn-coding/id1440611372?mt=8 Same guy. @twostraws
&gt; So, let's say I've succeeded in fetching data; I'll notify observers of that fact and then have them look up the data I've fetched? You think that's a good architecture, separating data from notification? If it's fetching data, then either PromiseKit or a simple callback block will suffice. &gt; How do you guarantee that the data that will be read by the observer is the data that was fetched by the producer since you've disassociated the two? You don't tightly couple it like that. Send the message that data has changed, and let the receiver then look for current data and decide what to do with it. &gt; How do you manage side effects due to threading? By decoupling. Don't make one thread dependent on the inner state of another thread. &gt; How do you manage a producer that produces data more quickly than its consumers can consume it? By sending a message that new data is available, and letting the consumer decide at its own pace when and how to consume it. &gt; A good architecture should never disassociate data from action. A good architecture should never strongly couple. Send messages, not data.
You can access global functions from othe modules (assuming you have the right access level). Though you wouldn't necessarily want to. Global functions are great for simple utilities, but if they're complex, they diminish your testability. Since you can't mock them (by providing an alternate implementation comforting to the same protocol), any code that depends on the global fn can't be tested in isolation, without also testing the global function.
Let's agree to disagree. To an Observer, the "how" data was obtained is irrelevant. It could come from any source. The "what" data is what's relevant. Therefore getting Observers to observe multiple messages stating that data **is** available, is an indirection. A step away from the goal. Letting observers deal with incoming streams of data without maintaining any state and ensuring these streams are fired off properly is much simply that common data repositories that Observers get to query. In my current App, a 3D modeler, there are potentially 1-3 viewports displaying a 2D or 3D model. Selection of objects is shared between these views (they represent the same model). You can place a view in enable "Select by rectangle" mode, which changes the behaviour of gesture recognizers. You need to notify tools that they are available based on the nature of the selection. A particular tool's UI could be open while allowing the user to make (or clear the selection), which needs to alter this UI in meaningful ways. (this is a simple example, for discussion purposes) Sure, I could marshal data between all these different classes in my app through some central mechanisms. However, what I really want is to react to user events, transform them and consume them, regardless of how that state was arrived to. I can easily setup a ViewModel that handles my Scene, produce an Observable&lt;[SelectedObject]?&gt; and now anyone can react consistently, updating their UI when a new message (with it's contents) is received. It is elegant, since no consumer of this Observable ever keeps any state regarding selection. It's always notified of the latest state of the Selection. I can throttle my listening to this sequence if I need to do heavy screen refreshes if selections are coming in too fast (to batch some Metal draw calls) by throttling. All of this with no risk of state being persisted in memory differently in a dozen state-machines. And this is but one example... Actually, I did start coding it traditionally but realized that the possibilities for side effects was too great, I needed a new approach. I've tried different things. Took a few months to get really proficient with RxSwift and it's paid off many times over.
&gt; I needed a new approach. I've tried different things. Took a few months to get really proficient with RxSwift and it's paid off many times over. And you've ended up using it as a crutch for your architectural failings. I'm sorry, but that's how I see it, and that's how I judge it. There is no place for that kind of framework in iOS or macOS apps.
“Swift” is an excitable that runs your program. You should be able to type “swift” at the command line and drop into an interpreter. To run you program make it a parameter on the command line when you start Swift up. The Swift REPL comes with every swift installation I know about. So maybe you need to read the manual.
Agree with the exception of those tab bars with hidden additions to the bar when you click on them.
You are so unbelievably arrogant, I imagine you’re an absolute pain to work with.
Well, I'll tell you this: On the projects I lead, I don't allow bad technologies. If you're a fan of Rx stuff on iOS or macOS, you wouldn't be on the team to start with. You wouldn't get hired. I'm very picky about who I put on my teams. There's always room for disagreement and different opinions within teams and projects. But bad ideas and bad technologies of this scale shouldn't have been let in the door in the first place, and should have been vetted out at the hiring stage.
 https://github.com/vlas-voloshin/SubviewAttachingTextView is written in Swift, not Objective-C. It's override of UITextView ands adds a NSTextAttachment for each ‘live’ subview. NSTextAttachment are meant to add an image inline in running fonted text. As such, it has a Size and a Point giving its orientation with respect to the text baseline and the text on either side of it. SubviewAttachingTextView sets the size of the NSTextAttachment to be the same as the ‘live’ subview, so the underlying NSLayoutManager will measure the contents to put the ‘live’ subview in the correct place. and SubviewAttachingTextView moves the subview to the correct place.
Man. This is one of the most absurd things I’ve seen on this sub. Sounds like this guy lives for the Github stars and doesn’t realize there’s a whole big world out there of other people and things to learn. Don’t take it personally. I was VERY hesitant to introduce Rx into several large codebases but it has some strong underpinnings and is a valuable new paradigm. There’s no one size fits all for anything in life, just as it is with choosing tools like this. You can be sure that acting like you’re the hottest shit who doesn’t need to consider other perspectives is the quickest way to end up miserable, though.
Okay, thanks heaps for that info. Do you think it’s smart to use this library or should I try and copy parts of the code that I need? Just worried about relying on it in future for my app...
I already know about the command line Swift. I want to compile in Xcode, run my program and type in a REPL.
Ok, I'll have a look at that, thanks.
Instead of just a snarky reply, perhaps you could give a pointer to the manual that describes how to use the Swift "excitable" that does this?
How much interaction do your embedded views need to have? Can you get a UIImage from your embedded view, and just stick that UIImage in an ordinary NSTextViewAttachment? That's the way NSTextViewAttachments are intended to be used. It seems a bit risky to connects UITextView's layout manager to the SubviewAttachingTextView to have it move the ‘live’ subviews around. It would be cleaner and simpler to just update the UIImage in the NSTextViewAttachment when the ‘live’ subview changes. But, if the ‘live’ subview has complicated touch interactions (for example, if it contains 4 colored buttons), then using SubviewAttachingTextView seems like the simplest solution. It's small, so if you wind up having to maintain it in the future, it won't be a huge burden.
Bit of a background: The subview is a UIView that contains multiple textfields of 'definitions' of words. The idea is that when they click a button a function inputs the UIView into the UITextView with the filled out text/definitions. I am just worried about using images because then I have no actual way of storing the data of which definitions are in each UITextView. This means in future if the way the UIViews design changes I wouldn't be able to update the user's data with the new views as I don't know which data was inputted because they're just images. Can you give any suggestions on another way I could go about solving this problem? Thank you so much for your help :)
You could look into the coordinator pattern.
It doesn't do what I want anyway. I'm pretty sure the Swift REPL is a command line program that auto-breaks on start and then feeds all the text to lldb's "print". What I'm after is more like typing into a web page console where the page is running and everything working as normal, and I can still type in commands without having to pause execution, set breakpoints or anything.
&gt; And you’ve ended up using it as a crutch for your architectural failings. You can keep on playing armchair Architect with an app you know nothing about and a use case you don’t understand by dismissing the architecture I’ve built and that you have never seen. I’ll keep on working with the most suitable architecture for the problem at hand. And, on this project, part of that is FRP. BTW: replying to my comment by quoting a completely different comment... Enough said. This concludes my interaction with you.
The problem is that the architecture you’ve chosen is never suitable on the given platforms. Never. You got it wrong. That means nothing to me. I have no investment in your project. But if you keep replying to me, I’ll keep pointing it out.
Just a quick question: I've been researching and I don't think the UITextView 'live' view is a concrete option, I have workarounds but I'm not confident in them to translate into real world use. Would this be achievable in a UIView subclass with HTML like: [https://github.com/cjwirth/RichEditorView](https://github.com/cjwirth/RichEditorView)
Thank you for clarifying this! You saved me! I was confused by the video because if static wasn't inherited wouldn't it break Liskov's principal from SOLID?
If statics only get called once, what are some practical uses? I can see using it for constants but the entire point of variables is that they need to be able to change their value. &amp;#x200B; Thanks for these, I really do like your style of teaching.
It’s very unclear what you are looking for. We cannot see if you are rotating the camera, or cannot see if you are rotating the background- it’s just a bit too brief
The background is blank and it’s just my platform so far
Your arrogance disqualifies your experience.
Arrogance doesn’t make me wrong, it just makes me arrogant. I am arrogant and also quite entirely right.
Why do you say it's backwards? I'm genuinely curious because financial iOS apps I've worked with have used RxSwift extensively to help manage complex states and events. Usually they're one of the main fields where Rx shines, as information needs to be kept consistent and with as little side effects as possible.
Developers who coding for Apple tend to be defensive to other 3rd party library like Rx, but the interfaces provided from Apple handling value changes over time is tedious and outdated, Observable is a modern asynchronous interface that Apple should do it for us for a long time ago
The original project used openCV and Dlib, the app only uses Apple’s vision framework ( I’m impressed by it )
What is over speeding?
If in the file.txt you have exactly the string "[[Array]]" then it meqns you didn't save the array but rather the object description that contains the array. You can't save objects without converting them to strings first. If you do have that string, that is useless so make a function that transforms the array to a string or better yet a json and save that as a file. To convert it to an string use a separator like ||| which normally wouldn't appear in the strings or even a space or ",". Swift has default functions for it
\+ if they're on their phone when they're driving?
E.g case uber drivers who use their phones with dock for navigation
Wait your just using swift for this?
Interested about the paper... is it available to read online?
I know you have made an edit, but I’m still confused about this. I can’t tell if this is a view from above, the side, and please link an image of the car going flat and also up the ramp. Thanks!
https://www.irjet.net/archives/V6/i5/IRJET-V6I5318.pdf I have temporaryily made the repo private, but if you want I can share the python code
Yup. Only Apple's Vision Framework, no OpenCV or Dlib
Going too fast probably?
For e.g the speed limit for a particular road is 80kmph and you are driving at 100kmph, that my friend is called over speeding
How does it detect driver fatigue? And what does the app then do with the info?
Hello there! Is there a good Charts Framework? I'm using the iOS Charts by Daniel Gindi but its getting slow when used with tons of data. Or is there a good way to enhance performance for that?
Does that function also uses somehow computer vision? I don’t think it would but who knows.
It extracts the various landmarks using the vision framework and then calculates the euclidean distance between some points and then takes their average. If it is below a particular threshold, it plays an alarm sound. https://navanchauhan.github.io/publications/2019-05-14-Detecting-Driver-Fatigue-Over-Speeding-and-Speeding-up-Post-Accident-Response You can read my paper about the entire project^ (Contrary to the paper, I have temporarily made the repo private)
Nay, it uses GPS/OBD data (whicever is available). I haven't completely coded the overspeeding part in swift yet
Ah that makes sense! I was wondering which magic made your algorithm see oversleeping via the eyes. Like blinking faster or something.
Isn’t that just called speeding?
Different countries mate, different lingo/slang
Pretty nifty piece of algorithm for the sleep detection though, credits to the brilliant people
Vtec kicked in
I meant: have your code create the image of ‘live’ at run time, using the actual data, (keeping it offscreen and out of the view hierarchy), pseudocode: UIGraphicsBeginImageContext(myView.bounds); myView.drawRect(myView.bounds.size); image = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); and translating taps on the image of the NSTextViewAttachment into a tap on the offscreen view. Remember that iPhone screens are small. The way that Apple's Books app solve this is: you tap on a word to select it, and among the choices in the standard menu is “look up” which only then pushes a new view controller of definitions. For your use case, a UITableView of choices. On iPad, you'd put the UITableView in a UIPopoverController pointing at the word. On iPhone you'd push the table view on the current view's UINavigationController. It's prudent for there always to be a UINavigationController, usually the rootViewController of the window. You can keep its UINavigationBar hidden until you need it. If it's there you can just push a new viewController, and UINavigationController will add a back button to get back.
This isn't getting the attention it deserves, nice work!
Sorry I meant but didn’t write job application. I was on mobile. Basically the job itself didn’t specify the need to know RxSwift specifically, and I don’t work with it. However the interview and assessment required it, which in my experience isn’t quite fair, asking general language questions peppered in with an API that not everyone will be familiar with.
Does it work with oriental Asians ?
Honestly, great job on some quality content for once
I’m interested in seeing the code
Same.
The answer in this stackoverflow question seems to do what you want https://stackoverflow.com/questions/37599632/swift-read-write-array-of-arrays-to-from-file Sorry i didnt test it. I thought this wasnt possible and you had to do string operations to seperate the string data into the parts you want for data safety.
Hey, Te\_co, just a quick heads-up: **seperate** is actually spelled **separate**. You can remember it by **-par- in the middle**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey /u/CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". And your fucking delete function doesn't work. You're useless. Have a nice day! [^Save ^your ^breath, ^I'm ^a ^bot.](https://www.reddit.com/user/BooCMB/comments/9vnzpd/faq/)
It worked when I couldn’t open my eyes last night while coding
Python or swift?
Congratulations, man. I hope I can write one too some day!
Looks like your phone is a little fatigued
Maybe next you could shave the ja rule off of your top lip.
This is genius man.
Not as genius man as yo momma! *** ^I ^am ^a ^bot. ^Downvote ^to ^remove ^and ^help ^me ^learn ^what ^not ^to ^say. ^[PM](https://www.reddit.com/message/compose/?to=YoMommaJokeBot) ^me ^if ^there's ^anything ^for ^me ^to ^know!
Swift!!!
@iSw4gger could you post your code for how you got this to work. I've been trying this for a while now and can't seem to get it to work. Thanks
You need to check if the urls match after you download the image. &amp;#x200B; You should also use less bang! operators.
Let's just say you have a button that creates an instance of a view controller. You don't want a new view controller instance to be created each time the user presses the button, hence a lazy loading guarantees that the view controller will be instantiated only once, regardless how many time the user press the button afterwards.
Thanks, that makes logical sense. I am getting an error at step 2. Do you perhaps know why. This is the code for step 1 and 2 that I have: [https://imgur.com/a/lQd7p21](https://imgur.com/a/lQd7p21)
i've never heard the term before, but the first thing i thought of is the difference between going 88 mph on an interstate in the US vs 105. one of those is punished much more harshly, even though both are considered speeding
What's the accuracy like? e.g. False positive, negative, etc.
Just so I understand. So you’re saying I could recreate the image every time the textView is shown. So I would need to store it as text and somehow parse and update images at runtime?
I mean, just do it manually? Go through the set with a for-in loop, forEach on the collection, reduce, etc. and get the sum at the end collection.reduce(0, into: +) etc. and then divide by the count. Don't have to do it too fancy.
[https://github.com/pmacro/Suit](https://github.com/pmacro/Suit)
I already had a url session function in below my url declaration, but the problem is it wont even run that function it will just run the return function as it json response will not run. So do i need to make a http post request? Because in previous function this kind of method works fine for me. &amp;#x200B; Im really new to programming and swift in general, so yea if i ask any obvious question, i apologize in advance haha
as opposed to the dreaded under-speeding
you recreate the image each time the secondary view is **changed**. You do it by asking the secondary view to draw itself. UITextViews can already show embedded images, that's what an NSTextAttachment in an NSAttributedString si for.
Okay, thanks! Do you think this is a good option or should I look at changing my textView to something based on a WebView and do it that way? My only concern is that I would have multiple custom views in each textView and am unsure how I would go about managing and storing all of them. Could I somehow create a custom parse in HTML and store the definitions as text that would get shown in a custom view if it's contained in a HTML like &lt;custom&gt; text for definition &lt;/custom&gt;.
What, like a &lt;span&gt;&lt;table&gt; ... &lt;/table&gt;&lt;/span&gt; in running text? No, I think you should write real iOS app, using actual UIKit.
Okay, so how would I store which definitions are actually in the textView? If it's just an image I have no way of knowing what definition is stored in the textView?
Here are at least two ways to solve the data structure issue: You can use a subclass of NSTextAttachment that adds an additional property, the liveView, a UITableView of definitions (or as many properties as you need. You can do what SubviewAttachingTextView does, and keep a dictionary that maps NSTextAttachments as keys to whatever you like as values.
Both if possible? It would be interesting to compare to see how the port was done
Bangs are bad!!!
Perfect, thanks heaps. So I will look into: 1. Having NSTextAttachments with a subclass or dictionary to store the actual info of what is inside the image. Before I bunker down to work this all out, what's your advice for how I could update the images if the view design changes. Would I need to store the actual range of the image as a property as well? That way I could replace the image with a new generated one?
In your view controller, just keep an array of the NSTextAttachments that are also in the attributed string.
You’re saying an array of the actual NSTextAttachment object? Can I then replace it somehow? Sorry for my ignorance, I’m still learning :)
Well, technically, it's an array of pointers to NSTextAttachment, just like the NSAttributedString will have a pointer to those same NSTextAttachments. One of the properties of the NSTextAttachment is the UIImage that it displays. I already posted pseudocode for drawing a UIView and its subviews into a new UIIMage, that you can then store into a NSTextAttachment. So, you don't replace the NSTextAttachments, you just replace the UIImages they hold.
Super nice! Thanks for making/sharing this
If you don't mind could you go into a bit more depth, very new to programming in Swift and not entirely sure what to do... Sorry if it's very simple
It'd help if you provide a little more on your side, but let me show you how it would roughly go: /// data model struct Test { var score: Int } let tests = [Test(score: 0), Test(score: 2), Test(score: 5), Test(score: 3), Test(score: 7), Test(score: 8), Test(score: 2), Test(score: 3), Test(score: 10)] // One way to get the average var summation = 0 //basically understand that for every test, you get the score and then add it all toegther for test in tests { summation += test.score } // Here's your new average to use let newTestAverage = summation / test.count // Here's another way let anotherAverage = test.reduce(into: 0, { $0 += $1.score }) / test.count
Another way is you could extend collections entirely as this SO signifies: https://stackoverflow.com/questions/28288148/making-my-function-calculate-average-of-array-swift
You really shouldn't crosspost, since you did changes you should reply to the people... anyway: https://stackoverflow.com/a/53581313/3769412 will point you in the right direction.
The magic algorithm implementation ``` if let leftEye = faceLandmarks.leftEye, let rightEye = faceLandmarks.rightEye { print("WORKS?") let p1l = leftEye.normalizedPoints[1] let p2l = leftEye.normalizedPoints[7] let p3l = leftEye.normalizedPoints[3] let p4l = leftEye.normalizedPoints[5] let p5l = leftEye.normalizedPoints[0] let p6l = leftEye.normalizedPoints[4] let Al = hypotf(Float(p1l.x - p2l.x), Float(p1l.y - p2l.y)); let Bl = hypotf(Float(p3l.x - p4l.x), Float(p3l.y - p4l.y)); let Cl = hypotf(Float(p5l.x - p6l.x), Float(p5l.y - p6l.y)); let leftEAR = (Al + Bl) / (2.0 * Cl) print("Left EAR", leftEAR); let p1r = rightEye.normalizedPoints[1] let p2r = rightEye.normalizedPoints[7] let p3r = rightEye.normalizedPoints[3] let p4r = rightEye.normalizedPoints[5] let p5r = rightEye.normalizedPoints[0] let p6r = rightEye.normalizedPoints[4] let Ar = hypotf(Float(p1r.x - p2r.x), Float(p1r.y - p2r.y)); let Br = hypotf(Float(p3r.x - p4r.x), Float(p3r.y - p4r.y)); let Cr = hypotf(Float(p5r.x - p6r.x), Float(p5r.y - p6r.y)); let rightEAR = (Ar + Br) / (2.0 * Cr) print("Right EAR", rightEAR); let EAR = (Float(leftEAR) + Float(rightEAR)) / 2.0 print("EAR:", EAR) let threshold = Float(0.25) let noOfFrames = 2 if EAR &lt; threshold { counter += 1; } if EAR &gt; threshold { counter -= 1; } if counter &gt; noOfFrames { print("Wake up Sid!") AudioServicesPlayAlertSound(SystemSoundID(1005)) counter = 0 } } ``` Ignore the print statements
I have made adequate measures to rule out false positives and negatives When the program detects the EAR is below a particular threshold it increments the counter, when it sees that it’s above the threshold it subtracts the counter by 1. When the counter desired blue it triggers the alarm Also, when the program is not able to detect anything, it does not change the value of the counter
5S, the battery life sux nowadays
How’s that different from electron?
Check out the [NSFileManager class](https://developer.apple.com/documentation/foundation/nsfilemanager).
If it's small amount of data i suggest you to use Userdefaults: Confirm the struct to codable protocol convert it to data store data to Userdefaults and retain it from Userdefaults when app reopens. If it's larger amount of data either use core data or write to file: Coredata is useful when you are required to store data with same structure. Writing to file is similar to storing in Userdefaults only difference is that Userdefaults are loaded before app is loaded written file is loaded only when asked for.
It’s clear only now that you’re talking about a GUI app not a command line program. Also, iOS Mac (watch?) you haven’t said. First, the above trite answers are unhelpful but indeed correct, there is in general a Swift REPL. However invoking that from your program in such a way that you can interact with your app’s internals is a really good question. I’d too would like to hear if anyone knows how to do such a thing. Kind of like a playground for your own app*. Second, your complaints that people aren’t reading your mind about what kind of environment your code runs in is out of line. This is a subreddit focused on the language itself (the windmill i seem to always find myself tilting at sadly). For how to embed something like a terminal emulator to run a REPL in, ask in a subreddit specific to iOS or Mac (or watch) development. If for nothing else than to avoid having to mention in your question ;) * Come to think of it, I remember someone having implemented a standalone Mac app that’s like a playground. Does anyone know what that is? It might be a good starting point to see the issues involved, more pointed direction for further inquiry.
I didn't make any complaints, I just explained more each time.
Okay that makes sense. My only issue (sorry I should have provided more information from the beginning) is that my NSOrderedSet takes user input. Basically the context is a table view of user inputted marks into a data model. So I would need the array to automatically include any new data that is inputted on the user-end.
you can write this to be calculated at any time you wish, I fail to see a problem?
Alert! The driver is too tired. Oh god, he has AirPods in, he can’t hear us. Oh no.
I'm using PlistEncoder for small data.
Faster and less bloated, partcularly if you use the WPE embedded port on Wayland. The interoperability with Swift is much better, basically one call to create the WebKit view and one more to load your UI. Then you have direct DOM access via the WebKit C API, JS callbacks to native code etc. You get a GL texture that you just render into your UI, and pass input events in direct from libinput. Not for everyone, but I like it better than GTK or Qt.
👏🏻👏🏻👏🏻
Seems intriguing.
Nice playful roast, I like it
Thanks 👍🏼 Printed
Not a question for a problem I'm having, but I really want to know if they are going to improve switching on implicitly unwrapped optional enums. Before (if I remember correctly), implicitly unwrapped optionals were their own thing, not just compiler sugar. It meant that if you used a type, it would act like an instance of that type. Nowadays (I'm guessing Swift 5), implicitly unwrapped optionals are just compiler sugar around optionals, which means they act more like optionals. This causes issues when you can do something both on the optional and the type itself, like switching. So I have: enum Enum { case a, b } let e: Enum? = Enum.a switch e { case .a: break case .b: break } I can solve this in 2 ways, neither of which should be necessary in my opinion; I can do `e!` to switch on the actual enum, or I can add a `?` after my case labels. Option 1 suffers in the way that you are force unwrapping an implicitly unwrapped optional, which is exactly why you use an implicitly unwrapped optional in the first place. And option 2 looks weird (stupid reason, I know). I want to know if the Swift devs (and the community) consider this issue solved with these options, or if there are proposals in the works for this.
I am glad you guys liked it. If there is enough demand, I will post my notes as well. They are poorly formatted because of the program I exported them from, I was planning on fixing them at some point anyway. Also If anyone wants to collaborate and make a larger database like this, I would be happy to work with you!
Try not to spend too much time in UI unless they give you a design spec. Most of them would prefer to see your knowledge on design architecture. Such MVC, MVVM, or MVP. Avoid using too much third party dependency as the point of take home project to show case your knowledge.
You say it's Codable, but talk about using NSCoding instead. As with most issues I see here, this would be a lot easier if you *posted source code*.
First load files to memory with “FileManager” (if needed process them) and use loaded data as dataSource for tableView.
Have a GameContext that you keep passing around. This object will also contain the EntityManager for the corresponding game. You will most likely only have 1 game running at a time but you might add 2 player splitscreen action where this will come in handy.
Is there a big difference between having a single super-big global (singleton) and having multiple smaller ones?
I've been developing [ChatStats](https://chatstats.app) for the last couple months using Swift. It's a new iOS app to generate up to 22 different statistics from WhatsApp chats' histories. With it, it's possible to find out who sends more photos and videos, who nags everyone with voice messages, who is crazy about sharing links and who writes more emojis than actual letters. Also, who we'll finally discover who's winning the Sticker Battle?! ChatStats also analyses time of the day groups gets more attention or on which days of the week they are more active. The app is on the App Store now: [download ChatStats](https://itunes.apple.com/br/app/chatstats/id1460322574?l=en&amp;mt=8).
Nicely done! Looks really polished, downloading it right now to give it a try. WhatsApp is huge in my country, so I definitely have a lot of groups experiment on.
I tried downloading it, but it says it’s not available in my country (Denmark).
You don't want global but you also don't want to pass around 10+ objects when they belong together and you could pass around a container. Or you could use the Coordinator pattern and then your Coordinator will have the GameContext and only pass the required parts of it to every part of your flow.
Hey, thanks for the interest on ChatStats. In order to count images, videos, voice messages and stickers, I've relied on cues provided by WhatsApp on the chat history files. As these cue-strings have to be hard coded, for v1.0, I've added support for only English, Portuguese, French, Spanish and Italian. So, in order to protect users from downloading the app and not being able to experience it fully, I've removed any countries that don't have these as their primary language. That said, I'm working hard on adding new languages for v1.1, so I'll ping you when it's released (:
I can see why 1 is "better" than 10, but it's kinda just making everything global state since you don't really need to pass anything as a parameter if you have a single super massive global container that contains everything else via child objects.
I'm sorry I don't understand. What are cues? And how does WhatsApp expose them. ? Do you say that an external app can read WhatsApp data ?
No, external users can't read WhatsApp chats. In order to use ChatStats, the user must export his WhatsApp history file and import it on ChatStats. My app then processes the file counting the numbers of messages, videos, pictures, emojis, etc and then obliterates the file that came from WhatsApp. Also, the whole process is perfomed only on your phone, with no information sent to any servers whatsoever. This way, all your texts remain private. The cues I referred to on my other reply are simple texts added by WhatsApp to the chat log when you export a group history without media. By counting these, ChatStats is able to identify which users send more pictures, videos, voice messages and stickers.
If you’re talking about Bézier paths last time I checked there was nothing really reliable available in open source or even for free. That’s if you want a *ready to use* framework or library. If you have time and know some bits of C/C++ the gimp and Inkscape are both open source and offer such a thing. In a week or two you may be able tu extract the algorithms and mimic them in your own code. Good luck it’s a very interesting part of app engineering.
What did you use to make the graph on the left. Everything looks stunning!
I think it would be better to do this as a popup at first open of the app. I live in Belgium (official languages Dutch, French and German), but everything I own is setup in English.
Great suggestion, I'll add that to the intro when the user opens the app on v1.1 That said, ChatStats is available on Belgium! (:
Love your paper.. you, sir, are a Wizard... I salute you.
Hi Travgalax! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/btq3bi/thank_you_for_big_support_feedback_and_bug/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Oh gotcha. And by the way, was it a conscious decision to target ios12.2 and up devices.
The alternative is to use a service architecture, where you register different objects as services with a service locator (a singleton), and then query that service locator for your specific service. The proposed idea of game context or game world is simpler, but you have to thread it in every function call or inject it into every object at construction.
Thanks! I've built the charts from the ground up using Core Graphics (: I might share the process on a blog post in the future.
That’s impressive... did you consider google charts? That way if you want to move over to android or a web app you can share a lot of the code?
At first, no. But thinking about it, I think it was good to support iOS 12.2 and up devices, as it encompasses everything since the iPhone 5S. ChatStats processes all messages from the chat history (I've seen groups bordering on 100.000 messages) when the chats are first imported, so I think older phones would have a hard time with that.
To me, one of the most exciting parts of writing ChatStats was coming up with the charting code! I also tried hard to avoid external dependencies as I know these have a tendency to cause compatibility issues in the future.
Thanks! WhatsApp is huge in my country also!
Love the idea and especially the graphics! But please consider supporting more countries (Germany plz), not everybody in a country has their device set to the main language there (I understand that's what you're relying on?). Also, support for more messengers would be fantastic as well. Although it's not quite as trivial to access data elsewhere. For Telegram for example you can use the official GDPR Bot to export everything. iMessage has an SQLite DB readable on macOS. But again, super cool app! Would love to try it out :)
Can we at least try to keep the stuff that's blatantly iOS-only on r/iOSProgramming? This really has nothing at all to do with Swift.
[Overspeed](https://en.wikipedia.org/wiki/Overspeed): running an engine beyond its design limit.
Which country calls it that?
Thanks for your kind words! German is on the list for v1.1! As I said, I decided to remove countries with non-supported primary languages to protect the users from downloading the app and being unable to experience it fully. I completely understand your concerns, as I live in Brazil and have my phone set in english (: But hang tight, v1.1 is coming!
Aah okay. I haven't installed the app yet. My OS is still at 12.1. Let me update 😅
Gogogo! \\o/
It would also be nice if you posted the internal UIDevice.currentDevice.model too, so an app would know what it is running on.
I don't have a list of data for that but I could add a second sheet for you to copy and paste it into. I would be happy to format it!
Sigh, I've got this, but it is in Objective-C, not Swift, and it is from 2017: #import &lt;sys/sysctl.h&gt; // 1080 x 1920 401 ppi // Without downsampling: 1242 x 2208 461 ppi //iPad 1/2 768 x 1024 132 ppi //iPad 3/4/Air/Air 2 1536 x 2048 264 ppi //iPad Mini 1 768 x 1024 163 ppi //iPad Mini 2/3/4 1536 x 2048 326 ppi //iPad Pro 2737 x 2048 264 ppi // Returns yes if the current device is an iPad mini, as of mid 2017. static BOOL IsDeviceMini() { size_t size; sysctlbyname("hw.machine", NULL, &amp;size, NULL, 0); char *machine = malloc(size); sysctlbyname("hw.machine", machine, &amp;size, NULL, 0); NSString *platform = [NSString stringWithCString:machine encoding:NSUTF8StringEncoding]; free(machine); NSArray *minis = @[ @"iPad2,5", @"iPad2,6", @"iPad2,7", @"iPad4,4", @"iPad4,5", @"iPad4,6", @"iPad4,7", @"iPad4,8", @"iPad4,9", @"iPad5,1", @"iPad5,2", ]; return [minis containsObject:platform]; } // DPI is 'DotsPerInch' static CGFloat DeviceDPI() { UIScreen *mainScreen = UIScreen.mainScreen; CGFloat scale = mainScreen.scale; CGRect bounds = mainScreen.bounds; CGFloat dpi = 326; CGSize scaledSize = bounds.size; scaledSize.width *= scale; scaledSize.height *= scale; if (CGSizeEqualToSize(scaledSize, CGSizeMake(768, 1024))) { dpi = IsDeviceMini() ? 163 : 132; } else if (CGSizeEqualToSize(scaledSize, CGSizeMake(1536, 2048))) { dpi = IsDeviceMini() ? 326 : 264; } else if (CGSizeEqualToSize(scaledSize, CGSizeMake(2737, 2048))) { dpi = 264; } else if (bounds.size.height * scale == 2208) { dpi = 461; } return dpi; }
Give me a few hours, when I am free I will try to format it in a useful way.
As it stated, it was complete as of 2017.
A reddit OP with a sense of humor. I think you just broke the universe , my dude. Cheers.
downloaded, would be nice to switch among the different people in the conversation for the distribution? alsoo maybe which is the most used emoji
How much time did it take you to make the app?
I started mid February and released today, so I guess around 100 days. But this idea of creating statistics for groups exchanging messages has been a long time passion. I’ve written about it [here](https://chatstats.app/blog-en.html)
The most used emojis are amongst the features for next versions 😊 But I didn’t understand your other suggestion, do you mean to check hourly distribution for each person in the group?
If you need a tutorial for Swift-without-Xcode, you can surely find a Swift web framework tutorial. Or just read the Swift language book. But I suggest you get past your "cannot learn that way" block. These tools don't "obfuscate". They abstract. Are you next going to complain that compilers get in the way, and you need an assembly tutorial? Are libraries too high-level, and you need syscalls next? Where does it end? You can just "git diff" and see exactly what the IDE did. I think you'll find in almost every case, they set a little configuration in a human-readable text config file, or less. You're still writing source code, after all. Nobody is trying to take that away from you.
Give an example. What is the *exact* format of your string serialized into the plaintext file? What is the *exact* format of the de-serialized data?
Where are you setting this, and how are you catching the notification? This would be 100% easier to diagnose if we had source code.
I do it in all of my view controllers within a function called applyTheme() and call that function in both viewDidLoad() and viewDidAppear(). I linked my source code for one of the files below, although all of them are hosted on GitHub. https://github.com/jordanbelinsky/educalculate-ios/blob/master/educ%5Balcul%5Date/View%20Controllers/Classes.swift
I don’t know where the disrespect and hostility come from, but I think “Writing code without having to use an IDE” is perfectly self explanatory as far as “How far do I want to go?” And hey, If I want to learn Assembly then yes, I’ll go and ask people in the know if they have any good tutorials on Assembly.
yeap, like to see which times is that person messaging?
Ah, that could be fun. I’d have to add some controls to the chart view to let the user choose any given person. I’ll add that to my to-do list. Thanks for the suggestion!
Beautiful app.
Thanks!
FIRE at 0:22. Well done. That’s why Jobs invented iPhone.
Reference what you need when you need it.
I can't help but feel this would make things more difficult to unit test, on the other hand, I don't have a better alternative...
thank you, you're absolutely right.
If you are on the Mac, check out [OSA](https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/HowMacScriptingWorks.html). You can use AppleScript or JavaScript to add triggers to your app. You can't just execute arbitrary code, but if you wanted to build specific functionality for script interaction, it might be a good fit.
It’s possible to write Mac/iOS apps without Xcode, but it’s not the least bit pleasant or straightforward. Use of Xcode is pretty heavily integrated into the development process and you’ll be causing yourself considerable pain by avoiding it. Realistically, the only comprise you’re going to be able to make and still have any level of productivity would be to use Xcode for project creation and configuration and sublime text or vim or whatever for editing, but even with that you’ll be forfeiting autocomplete for AppKit/UIKit methods and debugger integration among other things. As for avoiding storyboards… well, to put it plainly that’s a lot easier to do on iOS. UIKit is built to support programmatic UI construction pretty well and many iOS devs do exactly that. AppKit on the other hand is pretty closely married to the use of Interface Builder — while you’ll be able to avoid usage of storyboards, at minimum you’ll have to use XIBs, which can be thought of as single component storyboards without navigation. This will at least let you keep navigation in code, but in all practicality if you want to do Mac dev you’re going to have a hard time avoiding Interface Builder. When Cocoa was created at NeXT (prior to being bought by Apple), Interface Builder was a central pillar and *the* way to do UI development, not an afterthought as WYSIWYG UI editors tend to be.
Well, I've since pivoted from that method and into something slightly different. The option that I outlined in this video from way back when was using a popover. Which is ok when the content in the view requires another view controller. You can also embed the view controller in a view by instantiating a view controller in the first view controller and putting the root view of the second VC in the view from the originating VC. Outside of all of that, this is how I achieved a similar look using a UIView and some animations. Note: the views in my particular case are class variables, so you'll need to declare those as well (i.e. var baseView = UIView()) func createPopup(text: String, title: String){ baseView.frame = CGRect(x: 0, y: self.view.frame.maxY, width: view.frame.width - 50, height: view.frame.height/2) baseView.alpha = 0 baseView.center.x = view.center.x baseView.layer.cornerRadius = 15 baseView.backgroundColor = #colorLiteral(red: 0.09411764706, green: 0.1058823529, blue: 0.137254902, alpha: 1) baseView.backgroundColor = #colorLiteral(red: 0.1238745973, green: 0.1416813731, blue: 0.1727474332, alpha: 1) view.addSubview(baseView) let cancelButton = UIButton() cancelButton.setTitle("X", for: .normal) cancelButton.frame = CGRect(x: 15, y: 15, width: 25, height: 25) cancelButton.layer.cornerRadius = 12.5 cancelButton.setTitleColor(.black, for: .normal) cancelButton.backgroundColor = .groupTableViewBackground //cancelButton.addTarget(self, action: #selector(dismissPopup), for: .touchUpInside) baseView.addSubview(cancelButton) moreTitleLabel.frame = CGRect(x: 0, y: 35, width: baseView.frame.width, height: 20) moreTitleLabel.textColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0) moreTitleLabel.textAlignment = .center moreTitleLabel.numberOfLines = 0 moreTitleLabel.lineBreakMode = .byWordWrapping moreTitleLabel.text = title moreTitleLabel.font = UIFont(name: "HelveticaNeue-BOLD", size: 20) baseView.addSubview(moreTitleLabel) label.frame = CGRect(x: 20, y: 85, width: baseView.frame.width-50, height: 50) label.textColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0) label.numberOfLines = 0 label.lineBreakMode = .byWordWrapping label.text = text label.sizeToFit() baseView.addSubview(label) baseView.transform = CGAffineTransform(scaleX: 0.2, y: 0.2) UIView.animate(withDuration: 0.2) { self.baseView.transform = .identity self.baseView.alpha = 1 for view in self.view.subviews{ if view != self.baseView{ view.isUserInteractionEnabled = false view.alpha = 0.1 } } } } Dismissing the view: @objc func dismissPopup(isNextButton : Bool){ tableView.isScrollEnabled = true UIView.animate(withDuration: 0.1, animations: { self.baseView.transform = CGAffineTransform(scaleX: 1.15, y: 1.15) }) { (complete) in UIView.animate(withDuration: 0.2, animations: { self.baseView.transform = CGAffineTransform(scaleX: 0.2, y: 0.2) self.baseView.alpha = 0.0 self.calendar.alpha = 0 for view in self.view.subviews{ if view != self.baseView{ view.alpha = 1 view.isUserInteractionEnabled = true self.tableView.alpha = 1 } } }, completion: { (complete) in self.baseView.transform = .identity self.baseView.removeFromSuperview() self.calendar.removeFromSuperview() for view in self.baseView.subviews{ view.removeFromSuperview() } }) } } This example shows how I embed a second view controllers root view in my first view controllers sub view: @objc func launchImpacts(){ baseView.frame = CGRect(x: 0, y: 20, width: view.frame.width - 50, height: view.frame.height/2) baseView.alpha = 0 baseView.center.x = view.center.x baseView.center.y = view.center.y baseView.layer.cornerRadius = 15 baseView.backgroundColor = #colorLiteral(red: 0.09411764706, green: 0.1058823529, blue: 0.137254902, alpha: 1) baseView.backgroundColor = #colorLiteral(red: 0.1238745973, green: 0.1416813731, blue: 0.1727474332, alpha: 1) view.addSubview(baseView) let controller = self.storyboard?.instantiateViewController(withIdentifier: "TypeOfImpactViewController") as! TypeOfImpactViewController self.addChild(controller) //add as a childviewcontroller // Add the child's View as a subview baseView.addSubview(controller.view) controller.view.frame = CGRect(x: 0, y: 50, width: self.baseView.frame.width, height: self.baseView.frame.height-50) controller.view.layer.cornerRadius = 15 controller.view.autoresizingMask = [.flexibleWidth, .flexibleHeight] controller.didMove(toParent: self) let cancelButton = UIButton() cancelButton.setTitle("X", for: .normal) cancelButton.frame = CGRect(x: 15, y: 15, width: 25, height: 25) cancelButton.layer.cornerRadius = 12.5 cancelButton.setTitleColor(.black, for: .normal) cancelButton.backgroundColor = .groupTableViewBackground cancelButton.addTarget(self, action: #selector(dismissPopup), for: .touchUpInside) baseView.addSubview(cancelButton) baseView.transform = CGAffineTransform(scaleX: 0.2, y: 0.2) UIView.animate(withDuration: 0.2) { self.baseView.transform = .identity self.baseView.alpha = 1 for view in self.view.subviews{ if view != self.baseView{ view.isUserInteractionEnabled = false view.alpha = 0.1 } } self.tableView.isScrollEnabled = false } }
Oh certainly I understand I don’t mean to imply I’m going to ignore the tools available. I’m actually surprised that it’s easier to do on UIKit. My I do plan to learn Storyboarding, like I said I’ve heard Apple actually does it right. It just makes it worlds easier to stick to plain text at the beginning until I can really wrap my head around how it works. It just makes getting a basic understanding of the language and the system APIs far easier for me when I stick to the basics. That’s why I’m only looking for help in opening a Cocoa Window. I figure at that point I’d have a decent grasp over how everything functions. That said, it took way too long, but I did find the command line compiler for swift so at least that’s one thing solved.
A collection view normally contains collectionviewcells Not sure I understand the premise behind the label...
What im really trying to do is show a picker at the bottom of the view when a cell is clicked, that wasnt working so i dumbed down the problem and replaced the picker with a label to see if i could pin it to the bottom.
Is your collection view on a scrollview or are you just using the default collectionviewconttoller. Sounds like you just dropped in collectionviewcontroller in, but what you need to do is layout view controller or adjust the one you have to something like you’re trying to implement. Short answer - this is from the docs for uicollectionviewcontroller and most likely what you are up against as you can see. Because the initially created collection view is without dimensions or content, the collection view’s data source and delegate—typically the collection view controller itself—must provide this information. I am sure there are plenty of example projects using collection views, let us know if you can’t find one.
ok ill take a look into that, ty for your response!
Very great first app. I wish you offered a little more free stats though!
Are you using a storyboard and just dropped a uicollectionviewcontroller in?
programmatically doing everything
Cool. Amazing. Swift is such a good language and open source. It should not only bind to apple’s eco.
Ahhh - then as stated from the docs - the size is unknown. Let us know if you don’t find an example that helps, I’m sure there’s one out there - just on mobile right now, so limited ability.
If you do make a blog post and/or post the code for that, I'd really like to see it. I'm always interested in the design and what benefits you gained over using pre-packaged stuff. Can you give us an idea of your skill level and how long the graphic routines took and what pattern you used?
Welcome project to the ecosystem, just going full in with the IDE too!
The app looks nice. One thing I don't understand though. Why you cannot access all the charts on the demo group? I think people will be more willing to pay if they can see what they are paying for. Right now it's a "mystery" 😳. It's true, there are small screenshots, but I don't know, personally I'd rather see it in action (I thought that's the purpose of the demo group). Anyway, good job, and he are some other small feedbacks if I may : - the buttons on the landing page should be a little bigger - the French translation has some terms not so greatly chosen - the name of the app WhatsApp has to be written with a capital A. It's a trademark.
I wonder how the UI works. Is it low level using something like Skia or does it use AppKit/Qt/GTK under the hood?
Okay. Do you have previous Swift experience? And how much a day did you work on it? Ive been working on a app since December and I am pissed off that it is taking so long. But its a very complicated app and I have no previous swift experience before it.
I cannot see how complicated your app is, as I cant get it.
 My girlfriend and I on 180k! https://i.imgur.com/03n1qhF.jpg
Agreed!
Looks great in the pictures, but sadly I can't download it either (Netherlands). I agree with the suggestion of showing a pop-up on first open because my phone is set to English so it should work.
I tried to customise the search bar to no avail
if row is equal to indexPath.row do cell.accessoryType = .checkmark else do cell.accessoryType = .none
Would you understand if it was written like this: &amp;#x200B; if row == indexPath.row { cell.accessoryType = .checkmark } else { cell.accessoryType = .none }
Looks awesome, but please make it available in Germany, everyone speaks English here :(
It’s open source. You can see he’s using UIKit for iOS, AppKit for macOS, etc.
Ah great, thanks so much! I knew it had to be something like that, but it just wasn't clicking.
Thank you for a very clear answer. Much appreciated!
Omg! You officially hold the record for most messages imported in ChatStats!! Would you mind telling me how long it took to import such a huge chat history?
Matter of seconds! Took longer to export from WhatsApp (less than 30 seconds but still)
Thanks! It was really hard defining which statistics were going to be free, I thought about it a lot before deciding on these 5 bundles. I tried being fair by making the full package 50% discounted if you’ve already bought any other package. That way, the biggest amount any user should spent on the app is capped at 1,99.
I’m working hard on pushing v1.1 with more languages support! I’ll ping you as soon as it’s available! (:
German is coming! I’m working on v1.1 with more languages support, I’ll ping you as soon it becomes available!
I'm currently looking into whether it's possible to control lldb from the running code, so I could then breakpoint with an injected string for lldb to interprete, and resume running. Essentially the code can set watchpoints on itself, then the REPL would simply set what that watchpoint string should be. Any ideas appreciated!
Hey, thanks or the awesome feedback! As you said, it’s not all mysterious because the user can see the samples on buying screen. I fear unlocking everything for the demo group and “letting the user down” when they try to access those for his real groups. I’ll consider it though. I’ll try and make the buttons bigger. But, do you mean taller or increased font size? Would you mind sending a message with those terms so I can fix them? It’s hard to select the appropriate terms if you’re not reading a lot on the language. I thought I’ve fixed all WhatsApp strings, some must have still gone through. v1.1 will fix them all! 😕
I had some previous experience from programming charts in other languages (Cairoplot). Specifically in Swift, I’d say I was fairly skilled, as I had already tried building an app twice with my brother, but they were never released. That said, I still had to learn all about CoreGraphics as none of my other apps had needed it. I worked on it for 2-3 hours on some weekdays, but others I was just too tired from my regular work. The weekends were when I tackled the more complex issues such as CoreData. December through May doesn’t seem that much time for building a complicated app, specially if you had previous experience. Everyone has his own pace, keep going steadily and you’ll surely get there! Also, be sure to post it here on /r/Swift, the community is great 😊
I’m working on v1.1 with support for more languages, so it’ll be available very soon! 😊
That’s great to hear! Thanks a lot, and congratulations to the record holder! 👏🏻
Yeah okay. Anyway, whats the benefit from using coregraphics (or whatever you used to draw the charts) like you did over using a UIView and turning the view into a picture.??
Yeah thanks bro.
I’m sure someone ITT will beat me but nice for now ;)
Just FYI, since nobody said, that is a very common pattern in coding, cross-language, called Ternary Operator. Go check out out!
Yes, I mean taller. I'll send you a message here with the strings I've seen so far.
Glad I could help :)
Apple does provide Dictionary Services for some of its OSes. So it depends on what OS you're planning to write your code for. If you're writing Swift code run exclusively on Linux then this won't be of any help to you. There are also varying degrees of functionality available for the various Apple OSes. Have a look at the [NSHipster write-up on Dictionary Services](https://nshipster.com/dictionary-services/) to get an overview of what's available. They are just API calls you'd need to make to system libraries. So you wouldn't need to learn XML or SQLite, but the iOS functionality seems quite limited to view controller functionality. &amp;#x200B; Beyond that, if you're going to have to "roll your own" because you want offline access to a dictionary on iOS and don't want their view controller getting in the way, you've going to have to find a free data dump of dictionary data that you're legally allowed to download and use. Then it would be a case of getting that data into SQLite or similar in order to query it. &amp;#x200B; If you only require access to a dictionary while the app has access to the internet, then you might want to consider some sort of remote API service like [Oxford Dictionaries API](https://developer.oxforddictionaries.com). But there are pros and cons to all approaches especially in terms of performance if the user has a spotty internet connection. &amp;#x200B; Personally I would try to find a free data dump of a dictionary and wrangle it into SQLite. That way it will always be available on any OS you choose to deploy it on and available to query while the app is offline. Just make sure you create the relevant index/es against the database table columns you wish to query in order to maximise query performance. You might want to look at [Princeton's WordNet](https://wordnet.princeton.edu/download/current-version), although it is about 10 years old now.
For my app, I knew I'd need to make the charts available as images, so I went straight to CoreGraphics. It's a very mature and fast API, and gave me complete control over the positioning and styling of my elements. I also have plans to write a primer on CoreGraphics in the near future to document how I achieved some of my more complex charts. I think it'd be better for maintenance of the code if you used CoreGraphics instead of UIViews, and it'll probably be faster also, as I think rendering UI elements into UIViews and then converting them to images might add some overhead. But I'd love to hear other users take on this. One way this might work would be to create base views with all elements in place, instantiating them on code, changing the elements you'd like and converting it to images. If you're interested in learning more about CoreGraphics, this is one the posts I've read to learn it: [https://code.tutsplus.com/tutorials/an-introduction-to-quartz-2d--cms-24267](https://code.tutsplus.com/tutorials/an-introduction-to-quartz-2d--cms-24267)
This. I can’t count the number of problems I’ve solved by finding that some intuitive framework tools exist from reading the docs, and I wouldn’t have to roll my own. Solving the annoying little issues and getting back to the interesting work definitely is a motivation increaser
rayascott's explanation is great. Addressing the question about databases in general: Computers store information in files. The format of the information in the files varies - it can be plain text, xml text, binary data like images, or any other format a programmer came up with. A database is just another way of storing information that's optimized for inserting, deleting, updating, and searching/querying. There are many kinds of databases. The most common format is the relational database where data is stored in tables, like spreadsheets. SQLite is a relational database that stores data in a single file. It's small and fast and reliable and free so often the best choice for applications. Larger databases like MySQL or PostgreSQL can store more data, respond to network requests for data, have more features, etc, but they can't easily be bundled into an app. Other databases can be JSON stores like Firebase, "NoSQL" databases like Mongo, key/value stores like Redis, object oriented, etc. Core Data, built into iOS and macOS, is an object store that uses SQLite files underneath.
Hint: **- self**.navigationItem.titleView = MyCustomWrapperUIView() \- add buttons and textfield to wrapper view \- figure out frames and settings &amp;#x200B; Spoiler: &gt;!Image: https://imgur.com/a/0sZqHTo!&lt; &gt;!Code: https://piratenpad.de/p/r.95f609ba3814fe55f4513b9ad078a47b!&lt;
This looks so great defo going to download!! What libraries and APIs did you use ?:))
Awesome app! Out of interest, why do you require iOS 12.2?
Thanks for downloading! All charts are generated with CoreGraphics with an API I wrote!
Wow, thank you for all this info and taking the time to explain this. I think I’m going to look at the SQLite option you recommended. Appreciate this so much ☺️
Ok, thanks for adding this! Definitely opening my mind up to the possibilities and workflows.
When you use the keyword `static` it doesn't get "called once". What happens with stored type properties is they are only instantiated once, at the time of first use. This is similar to stored instance properties with the `lazy` keyword. A bit of background. There are several types of [properties](https://docs.swift.org/swift-book/LanguageGuide/Properties.html). Stored properties are ones that hold an instance of a type. Computed properties provide an instance of a type which is generated by some code every time they are accessed. There are also type properties and instance properties. Type properties are designated by the keyword `static`, instance properties do not have that keyword. An instance stored property is normally generated at instantiation and initialization. When you make a new version of the type the property is filled-in. However, you can designate the property as `lazy` which means it will not be instantiated when the containing type is instantiated. With a type stored property there is no instantiation of the type itself since it only exists as a metatype, a name to use to create instances of that type and to group methods and properties. In order to save time and space during your program's run the Swift designers made all type stored properties also lazy. This means they are instantiated at the time of first access, rather than at the time your program is first run. As for constant verses variable it gets a bit tricky there. With instance stored properties every `lazy` property is variable because it changes after instantiation so they have to be declared using `var`. However, you can make it act as if it were constant by adding `private(set)` and never modifying it inside the type. Effectively, only setting it at first access. With type stored properties you can have them declared as constant through `let`. struct Foo { // constant type stored property static let first = "test1" // variable type stored property static var second = "test2" // constant instance stored property lazy private(set) var third = "test3" // variable instance stored property lazy var fourth = "test4" }
try to do it in viewWillLayoutSubviews
This is how I’ve done it. That being said. UINavigationBar is one of my more painful class votes in iOS. Try changing the height with custom views that animate on scroll of a sub VC. Apples own example code for this doesn’t work properly.
This app looks really nice! I wish I could use it but WhatsApp isn’t really popular in Australia. The colours look really nice as-well. I don’t know if Facebook messenger allows you third-party app apis but I would totally test the app out :)
No worries. While your needs are really simple now, you might want to expand the apps features and store more than just a dictionary in the SQLite store (SQLite can scale to terabytes worth of data). If that's the case you'll do well to look into [data modelling](https://en.wikipedia.org/wiki/Data_modeling) along with [data normalisation](https://en.wikipedia.org/wiki/Database_normalization) to help you understand how to design the relevant tables to store the data and how to relate them to one another so that you avoid data redundancy and improve data integrity. Often you don't really need to distill your design beyond 3rd normal form, 4th normal form at the most. They both look like huge topics, but the basics can serve you well for decades. I learnt this stuff in uni in 1995 and to this day I've still never gone beyond 4th normal form in a design. I'd read through the wikipedia stuff just to get an idea of it all, and then look for basic learning materials that include tutorials because learning by doing is really the best way pick it up. Design and normalisation will come naturally and you'll be able to do it in your head without really thinking about it, after a while. You can just use a spreadsheet to keep track of your design. If it's something bigger like a 30-50 table design in MySQL or Postgres I typically keep track of it using [Navicat Data Modeller](https://www.navicat.com/en/products/navicat-data-modeler). There's a free [Essentials](https://www.navicat.com/en/download/navicat-data-modeler-essentials) version too (but I've not used the limited free version). The paid version will let you generate SQL scripts for your DB schema and allow you to connect to a remote instance and run schema upgrades from within Data Modeller on the database. It's very cool. It performs a diff of the implemented and proposed new version of the schema and generates a script with just the diff. It's great for saving time, but you won't learn anything about SQL DDL (Data Definition Language) for implementing your database schema. If you don't want to use a visual design tool because it can sometimes be overkill and also you won't learn anything about writing scripts to define the data model, you can instead use a tool like [Navicat for SQLite](https://www.navicat.com/en/store/navicat-for-sqlite) to run queries against your SQLite instance. So you could use that to help you develop the scripts you'll need to run initially to create the schema's tables. There are other free tools however like [SQLite Browser](https://sqlitestudio.pl/index.rvt) or [DB Browser for SQLite](https://sqlitebrowser.org) where you don't even need to know SQL in order to get your work done. But it's much better obviously to learn SQL so you understand what's going on. For your existing use case, I really wouldn't bother paying money for SQLite tools unless you're moving into database design for the long term. I had an app on the store for years that had 20+ table schema with multiple schema upgrades over the years and only ever used free tools because Navicat Data Modeller and Navicat for SQLite tools didn't exist back then. Once you're experienced with SQL and schema design, using modelling tools typically comes down to saving time.
Something else to consider is \[UnQLite\]([https://www.unqlite.org](https://www.unqlite.org)) if you don't want to go the SQL route and just want an embedded key/value store. It's written in C so you'd have the added bonus of learning how to interact with C APIs from Swift (haha). There are however few, if no, visual query tools. Also, if you ever wanted to embed a document store in an iOS app, it's the way to go.
I'll look into it to see if Facebook Messenger allows chat history export (:
Same! Try to make it transparent, when you scroll the content, I dare you! And ensure that it goes back to opaque when you navigate forwards or backwards! If that works, make sure you re-test it on every iOS version, as I’ve noticed it breaks nearly every big update since I made it (early 2016).
UICollectionView inherits from UIScrollView, so when the collection scrolls, it will try to scroll **all** its subviews. That means you want your non-scrollable UILabel to be, not a child of the UICollectionView, but a sibling. To do this, if your ViewController inherits from UICollectionViewController, change it to inherit from UIViewController that has a UIView as its base view, with two child views: a UICollectionView and a UILabel.
Use UISearchController, set the navigationItem.titleView to your search controller's search bar property. The set navigationItem.rightBarButtonItems for the other buttons you need (chat and like in this example) Your view controller does need to be in a UINavigationController stack to use this approach
ah interesting, thanks ill have to try this out
UICollectionViewController doesn't do very much. You'll need to make your UIViewController implement the UICollectionViewDataSource and UICollectionViewDelegate protocols yourself instead of inheriting from UICollectionViewController. Remember to connect your collectionView's outlets for delegate and dataSource to your UIViewController.
Yeah, I have been. It's looking really interesting, thanks!
It crashes with really big groups while processing the export. Around 75% in, it crashes. Please fix this. Using an iPhone 7+. Group with around 300,000 messages. Please optimize for personal chats as well. Allow for better more cleaner swiping view for statistics. That’s all. Thanks. The first issue is the worth. Renders the app useless for me.
Thanks for you interest! I'll look into that crash, maybe some kind of OS-level memory constraint is coming into action. Optimizing for personal chats is on the roadmap During development, I thought about adding swiping to move between statistics, but ended up postponing it for a future version.
See if anything [here](https://www.reddit.com/r/swift/comments/brffda/xcode_is_not_working_properly_with_intro_into_app) helps.
 let letEquals = equalsQuestionmark ? questionmarkColon : colonSemicolon; My ternary expression is ready for code review, y’all!
Had the same problem. I just ignored it and moved on. The play button will help with the results sidebar, but I haven't seen other problems!
What's the selling point of using Stride over something like Xcode on macOS, or even VS Code or Sublime Text?
Making an app which integrates with multiple external services and presents a graphical user interface is a *significant* project. What are you starting with? Do you know how to program? Do you know Swift? Do you know AppKit/UIKit? Do you know the APIs of all the services you wish to connect to? Any one of these could take weeks or months to learn, even for a professional. It can be good to be ambitious, but have you considered building something using what you already know how to do, to gain a better understanding of it?
I have considered only integrating twitter or instagram
[tableView(_:didSelectRowAt:)](https://developer.apple.com/documentation/uikit/uitableviewdelegate/1614877-tableview) is the tableView delegate function you're looking for
Thanks, but the function is already set up... I just don’t know how to open the file after...
Do you have anything written in the body of that function? I don't know what your files are, but you could present a view controller to display the document or whatever it is when the table view selects the row. Example func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { let file = self.files[indexPath.row] // you'd create a new FileViewController class let fileViewController = FileViewController(file: file) // show the fileViewController however you want show(fileViewController, sender: Any?) }
Despite the fact that it didn’t work, it DID help me understand the swift logic a little more, so thanks for that!! I’m starting to wonder if it would be easier to make it show up directly in the filemanager instead...
Read the rest of the comment above. To even begin helping you, someone would have to know the answers to the questions asked above. Without knowing the answers to the rest of the questions above, I’d say to look up some tutorials on Codable for Swift and try to make a simple weather api first.
I know how to code and swift and have just getting into UIKit, I am currently watching a tutorial on the API.
Awesome! I really like this guy’s tutorials on codable for accessing json: https://m.youtube.com/watch?v=P6NEUpLhpUM Codable offers the advantage that you don’t have to use a pod like alamofire or whatever.
You could go with two separate views for searching either Twitter or Instagram. So, like, on the main page you have a Tab to go to search twitter, and the other tab would be for Instagram. Each tab would bring you to a different view to conduct a different search. That might make the back end more simple starting off.
Twice as many view controllers, to avoid one if-statement? I'm not seeing how that makes it simpler.
I think it’s a question of preference. One longer view controller, or two shorter ones. Some people prefer the former and some the latter. I personally think making two shorter VC’s makes an app easier to read. It sounds like you don’t. And that’s cool man. As long as you can read your code and it works, *that’s* the best way to go.
Perfect, thank you! Looks like I got some reading to do! ☺️
You have to tell it how to open your file, and FileManager is not the tool for that particular job. FileManager only gives you the URL to the file you need. Then how you load the actual contents of that file depends on what type of file that is. You might check out `Data`, which can be used to read raw bytes directly into memory.
It uses those frameworks for windowing, draw timing etc., but most of the work is in Core Graphics on macOS, Cairo on Linux etc. It’s similar to how Flutter works on iOS, or GTK works on macOS etc. There are some things that can’t be done outside of those frameworks.
There is a Readme on the site you linked...
Paul, I started 100 days of Swift this Monday successfully completed 2 days Thanks much for the Insight and motivation
Did you try setting the imageview image to nil before the download image method cell.imageview.image = nil It’s in the extension, but just to see if it works.
UiCollectionView with custom cell which has buttons and custom delegates.
Thanks, i will try it out
I believe that MDM systems can be set to disallow devices to be taken out of automatic time setting mode. If your client is concerned about its employees trying to cheat the system by adjusting the device clock, they should look into this. And then this would cover all apps on the device, not just the ones that try to determine if someone’s setting the clock back.
Yeah they are employees but it’s true we have not think about this, thankyou! Gonna discuss it with the team.
Easily done in IB or code: just create a full-size UIView that contains your buttons, then make that view the sole subview of a UIScrollView.
Why can’t you get country local/location and ask for time from a server?
The idea is that you can submit your post/report to local DB without internet The post/report requires time stamp The time/date can be get from device The user can easily change date time to manipulate the data
Does the time on the device matter? Or just the backend? Just log the time when you log GPS and when you get internet compare it to the time stamp when logged.
I found [this](https://github.com/instacart/TrueTime.swift/blob/master/README.md) which accounts for differences in reachability. So store the last true time then on connection loss you can just count the difference and use that value.
XCTest is integrated into Xcode, you don't need to add it via a package manager. The easiest way to get up and running is when creating a new project, ensure the *“Include Unit Tests”* is checked... [https://imgur.com/hxgrBAR](https://imgur.com/hxgrBAR) &amp;#x200B; That will give you a test target and a single unit test source file to get you started. [https://imgur.com/VrfE53u](https://imgur.com/VrfE53u) &amp;#x200B; If you want to add unit tests to an existing project, then you'll have to DIY it, which really isn't difficult. [Unit Testing in Swift, Xcode, and Beyond](https://basememara.com/unit-testing-in-swift-xcode-and-beyond)
&gt; The easiest way to get up and running is when creating a new project, ensure the “Include Unit Tests” is checked... Unless you're building a command line tool, in which case that option is not there for some reason. Then you have to manually add tests using the Test navigator.
Get the Firebase Database snapshot for the node and call ‘snapshot.exists()’ in an ‘if’ statement.
Thanks. How does one get the Firebase Database snapshot?
Sometimes this can happen when you open up the Xcode Project instead of the Workspace. Try closing Xcode and re-opening it from the Workspace file (it’s the white icon, not the blue one.)
https://firebase.google.com/docs/database
I haven't used the app, but I'm not sure this is just one text view. To me, this looks like either a vertical stack view or a table view composed of many UILabels, where each row consists of a timestamp and the text associated with it. This is a data-driven application, so let's start by thinking about how we'll model our data. You'll want a class that represents a timestamp (`Date`) and the text at that time; let's call it `TimestampedText`. That's what you'll save to Core Data in an array. You'll use that array to populate the text in the stack as well as add the dots to the scrubber up top, the latter of which I believe is custom UI that you'll have to figure out for yourself. When the user creates new text, capture the time at which the user started typing, and when it comes time to save the text, create a new `TimestampedText` object with that time and text and chuck it into the array. There's a lot left out here, but I hope that gets you going. I recommend going through some tutorials with Core Data and table views.
I am using the workspace
Clean and build your project -
The textView performs like a UITextView, it’s one section and every time you click enter it goes to a new line. Interesting though. Do you think it’s creating a new UILabel on every press of the enter key?
I just had a look at the app, and it does look like one long UITextView. In that case, it's going to be more complicated. `TimestampedText` is now more likely something that will hold a timestamp and the range of the text in the UITextView. As for displaying the timestamps on the left, I'm unsure. The method I described in my previous comment is what I would do if I were to implement this sort of feature, as it would avoid a lot of weirdness with figuring out how to display those timestamps. If I were to venture a guess, I'd say they're using either custom drawing or some layout trickery using a vertical stack view on the left.
i tried several times but does not work
Interesting. I'm unsure as it performs exactly like a UITextView(on enter goes to new line etc.). Do you think they're using just a stack/table view and adding a new cell and UILabel on every press of the enter button? That way when they open the note they're actually loading a large table with strings and the accompanying timestamps?
That’s how I’d have done it on the first pass, but the single text view is better UX. Apple has really robust tools for working with text, so it may be worth watching this talk: https://developer.apple.com/videos/play/wwdc2018/221/
Go to your project settings &gt; your target &gt; Build Phases &gt; Link Binary With Libraries Add Alamofire if it isn't there already. If that doesn't solve it, reinstall Alamofire whichever way you installed it the first time (Cocopods, Carthage, manually installed etc.)
https://github.com/rhx/SwiftGtk
Have a look here: https://developer.apple.com/documentation/uikit/nslayoutmanager/1403255-boundingrect You could get the bounding rect for each line and draw the time stamps yourself, I figure.
Ok, I'll give it a watch. Yeah, my biggest thing is working out how the timestamps are displayed inline to the text in the text view.
Cool. :-) The most important thing in the world, is your code understandable by everyone? If one less delegate, one less protocol, is that so bad? The code seems to run fine. Just bring this up, because was just on a project, someone dropped thousands of lines of code in our laps. Some really smart coders had a hard time figuring it out (the other coder supposedly "imploded" was the word. Just walked off the job, was in a "mental facility" was the rumor). Over 400 lines of Codable code to get 3 values from a JSON obj. I said "this is crazy", "yes, we know that, but the guy is supposed to be a genius. A programming God!" Me: But there are zero comments, and i don't think you need 400 lines of code to get 3 values from a JSON string. "Yes, we all know that but the guy is a Swift guru, a programming God!" NUMBER 1 rules of thumb, EVERY 12th grader, taking a semester Swit class should be able to understand your code, just my philosophy. If they can't, break it down so they can. Make it fun! :-)
@objc func callPhoneNumber() { let telDigits = “5306532136” guard let number = URL(string: “tel://“ + telDigits) else { return } UIApplication.shared.open(number) } Then call the above method when your button is tapped . Fill telDigits with your hard coded phone number you want to call.
I'm curious how easy it is to develop for the macOS and iOS platform while avoiding Objective-C. Is it easy to build apps exclusively with Swift code (and maybe some Obj-C libraries), or are there lots of APIs where you have to drop down in Obj-C code? Thanks!
Is it this part?: **var** db = admin().database(); **var** ref = db.ref("Education"); or perhaps the below?: ref.on("child\_added", function(snapshot, prevChildKey) { var newPost = snapshot.val(); console.log("Author: " + newPost.author); console.log("Title: " + newPost.title); console.log("Previous Post ID: " + prevChildKey); });
Yeah, that's why I love so much Delegate design pattern. Everybody knows it, everybody knows how to use it and it is so simple!
If you can't grasp the concept of a delegate you're going to have a difficult time writing Mac/iOS apps. Delegates are pervasive throughout Cocoa/CocoaTouch.
Best comment ever.
Delegates are cool. Saying sometimes people "force their code" to use something that may not be needed at all. \&gt; Over 400 lines of Codable code to get 3 values from a JSON obj. I said "this is crazy", "yes, we know that, but the guy is supposed to be a genius. A programming God!"
Your project seems to have made Alamofire have a dependency on AlamofireRSSParser, which itself has a dependency on Alamofire. Alamofire has no dependencies, so I'm guessing something in your project is configured incorrectly, or you're using a version of Alamofire which has explicitly declared this dependency, which is weird.
That's what everybody says about their own code.
&gt; NUMBER 1 rule of thumb, EVERY 12th grader, taking a semester Swift class should be able to understand your code, just my philosophy. If they can't, break it down so they can. Make it fun! Many of the most important programs in history would not have been able to have been written, under this philosophy. Unix is definitely out. Probably also most compilers. &gt; It's all Zero and Ones in the end. Unless you're using one of those Russian ternary computers ... or you sidestep the binary nature of your computer with Rowhammer ... or ...
Did phone numbers change much in the past 3 years?
If they're offline, what does the exact time matter? There are no other changes being made during this interval which would be visible to them. Just use the come-back-online time as the timestamp for everything that occurred while offline.
Seriously? I really hope you're not a higher up or a tech recruiter.. 5-20k... internship position.... asking for ALL those requirements? what a joke. \-Prefered Experience in Spring, Kingfisher, Presentation, ObjectMapper, Quick, Eureka, or SnapKit Libraries So literally asking for someone who has no idea how to do native stuff, doesn't know how to do Auto Layout, proper UI/Unit Testing... using Codable/Decodable.. lmao
In terms of design patterns, this example more closely resembles the [Observer pattern](https://en.wikipedia.org/wiki/Observer_pattern) with only a single observer. The observer pattern is intended to allow objects to be notified (observers) when a specific object's state changes (observable). That's exactly what's happening in this blog's example: delegate?.stateChanged(from: oldValue, to: state) The [Delegation pattern](https://en.wikipedia.org/wiki/Delegation_pattern) is slightly different (also goes by the names Dependency Injection or Inversion-of-Control). It's meant to support the design principle of composition over inheritance. A *delegate* maintains the concrete implementation to complete an object. Here's a blog post that goes over it further: [https://www.swiftbysundell.com/posts/delegation-in-swift](https://www.swiftbysundell.com/posts/delegation-in-swift) &amp;#x200B; (and oddly enough, also details the observer pattern too: [https://www.swiftbysundell.com/posts/observers-in-swift-part-1](https://www.swiftbysundell.com/posts/observers-in-swift-part-1))
**Observer pattern** The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods. It is mainly used to implement distributed event handling systems, in "event driven" software. Most modern languages such as C# have built-in "event" constructs which implement the observer pattern components. The observer pattern is also a key part in the familiar model–view–controller (MVC) architectural pattern. *** **Delegation pattern** In software engineering, the delegation pattern is an object-oriented design pattern that allows object composition to achieve the same code reuse as inheritance. In delegation, an object handles a request by delegating to a second object (the delegate). The delegate is a helper object, but with the original context. With language-level support for delegation, this is done implicitly by having self in the delegate refer to the original (sending) object, not the delegate (receiving object). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/swift/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Wow, just wow. That's a position which should pay more like $60-70k. It's really a full developer position at the very least. &gt; Responsibilities: &gt; &gt; - Design and build applications for the iOS platform &gt; &gt; - Ensure the performance, quality, and responsiveness of applications &gt; &gt; - Able to lead, and run project from start to finish &gt; &gt; - Identify and correct bottlenecks and fix bugs &gt; &gt; - Help maintain code quality, organization, and automatization Maybe even more like a lead since you want them to lead and run a project, so maybe even in the $70-100k range.
\&gt; Knowledge of low-level C-based libraries is preferred &amp;#x200B; that's the best bit. for 20k.
Cobol and Assembly is a plus.
Yeah, this is just trying to exploit people who don't know better and will work for nothing.
Totally agree. Unfortunately I've worked with more people who disagree with you, and overcomplicate as the default. It's hard to find a good work environment where people share your sentiments.
&gt; Many of the most important programs in history would not have been able to have been written, under this philosophy. Unix is definitely out. Probably also most compilers. Nonsense. Someone must have commented the difficult parts, or it would be unmaintainable.
Delete derived data. Restart xcode. Build again.
After looking into it I didn’t work reliably so I’ve used just sendMessage. I have a file of audio that needs to be sent immediately so I’m just going to have to slice it up on the watch and restich them back on the phone...
You’re looking at the Javascript code. Tap the button that says “swift” to get swift code. You would probably be very well of following some YouTube tutorials to get started.
Thanks, I'll check this out. Also, somewhere else someone suggested opening a WebView to view the file. Smash or pass?
Depends on the file and what you want to do with it, I suppose. If it’s a pdf, and you just want to display it like the web browser does, then sure. If it’s an image, then perhaps, but an image view might serve better.
In it's final state, the app will only support text files (it's set to "public.data" for now), so anything like .odx, .doc, etc.
Do you get an error? If so, what does it say.
I get an error that tells me that I am not permitted to delete the “documents” folder, which is not want to do, but what it is set for at the moment. That’s all. After that, when I import a file, the rest is gone. So it did what I asked it to do: delete the documents folder.
I could solve two problems at once here, actually! How would I get the URL of the file based on the selection that the user made in the TableView?
I'm not surprised you can't delete the app's sandbox Documents directory, it is used for other things such as iTunes access. I'd suggest creating a directory inside Documents and then for a quick delete use [removeItem](https://developer.apple.com/documentation/foundation/filemanager/1408573-removeitem) that.
Yeah me neither and the fact that the files are stored in “documents” doesn’t really bother me, because in any case, my goal is not to delete the entire directory, just the file selected.
OK, so you need to create the URL of the file, the same way you did it when you created it. Pass the URL or path to the deleteFile() method you've made. (I thought you were trying to do a bulk delete).
Nah, the bulk delete was just somewhat of a test. That’s my problem though... how do I pass the selected file’s URL/path to the deleteFile() method?🤔
What does your tableView(_:cellForRowAt:) function look like?
You’ll have to do `dirsPath[0].appendingPathComponent(fileName).path` to get the path to a specific file (I wrote this off the top of my head, so the method name could be off) It’s telling you that you can’t delete the documents folder, as you only have access to the contents of that folder.
Why not save the file locally and just Store the file name in Core Data?
So you think the File Manager option is the way to go?
Remove Alamofire from you project.
I might be completely wrong with this, so if someone know better, please correct me. I made an app with a table view and an integrated search bar from the table view controller (it is the search bar that appears when scrolling up, similar to the settings and mail app). I updated my table with the same function that I used to search, but the difference was the argument passed when calling the function. When I was searching, there would be a String variable, of course and it shows results that included that string. When it was returning from the search, it called the function with a "" String variable. This worked for me because I was fetching data from a server using JSON so it would be very easy to have something like [`http://server.com/hello.php?search=`](http://server.com/hello.php?search=) that would return everything. This will probably not work for you, but you can still do something similar, if the main view before searching displays everything.
"It is better, however, if you are able to store BLOBs as resources on the file system and to maintain links (such as URLs or paths) to those resources. You can then load a BLOB as and when necessary." Taken from [Core Data Programming Guide: Performance](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/Performance.html). See the section titled "Binary Large Data Objects (BLOBs)"
I would think it is. For example if you were doing images you would usually get told not to save them in a database. What you would do is save them in storage and save the reference to the file in the database. [Check out this link for a bit more info on this](https://stackoverflow.com/questions/5613898/storing-images-in-sql-server/5613926)
Okay, I'll go the route of saving them locally and keeping the name in Core Data ad the reference. Just out of curiosity when using an NSAttributedString should NSAttachment Images be kept as references as well then?
Hmm that’s a really good question. My gut tells me yes, but I’ll be honest I’m not crazy educated on the subject. Just wanted to share some of my past research that I thought would help.
All good, thanks for the info! 👍
My guess is itemsArray is never mutated and contains your entire set of data. So if the search contains an empty string or nil, etc. just reload the table as it will use the entire data set. If you need it ordered, etc. you may change some things around and order it when it’s populated, etc.
 It's exactly that: `func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell {` `let cell = tableView.dequeueReusableCell(` `withIdentifier: "cell",` `for: indexPath) as! TableViewCell` `cell.titleLabel.text = importedfiles[indexPath.row] as? String` `return cell` `}`
It seems like I was able to fix the problem using what you said, but it doesn't show in the console... Weird... And I ended up doing everything in the same function, don't know if it's good or bad... Here's my code: func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) { if editingStyle == UITableViewCell.EditingStyle.delete { let filetodelete = self.importedfiles[indexPath.row] let dirPaths = FM.urls(for: .documentDirectory, in: .userDomainMask) let docsDir = dirPaths[0].appendingPathComponent(filetodelete as! String).path if FM.fileExists(atPath: docsDir) { do { try FM.removeItem(atPath: docsDir) print ("File deleted") } catch { print ("Could not delete file: \(error)") } importedfiles.remove(at: indexPath.row) tableView.deleteRows(at: [indexPath], with: UITableView.RowAnimation.automatic) } }
&gt; The most important thing in the world, is your code understandable by everyone? &gt; EVERY 12th grader, taking a semester Swift class should be able to understand your code I'll be that guy. I disagree. After one semester of high school Swift, a 12th grader would probably not understand when and how to use dependency injection, how to write testable code, when to use certain design patterns, or why I use enum state machines everywhere, or even why you should not have Massive View Controllers. It would seem "overly complicated", but the code they would understand would be a nightmare to add features to, refactor, and/or maintain in the long term.
Is there a more efficient way of adding two variables together, then modifying the result so it's between 1 and 15, rather than: var newVariable = variableOne + variableTwo if newVariable &gt; 15 { newVariable = 15 } else if newVariable &lt; 1 { newVariable = 1 } Thanks!
Protip: Make sure the paths are relative and not absolute. Software and/or hardware changes can modify the directory UUIDs. https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/AccessingFilesandDirectories/AccessingFilesandDirectories.html
Use a separate table view for your search results and don’t modify the original table view’s data source when searching. These might help https://stackoverflow.com/questions/9670853/uitableview-display-search-results-in-separate-tableview or https://stackoverflow.com/questions/36861309/creating-seperate-uitableview-for-displaying-search-results. You could also try saving the content offset before searching and then reloading the data and restoring the content offset on cancel, but to guarantee that you return to the exact same state in table view prior to searching then you should use a separate one.
Going into my role as the lead mobile developer at my company, this is what I would comment on a pull request containing this code: - Try to implement “happy flow” and “fail early”, which in this case means you check if the editingStyle is different from `.delete`, and then return. If you do this, your entire block of code will be less indented. It’s not important for functionality, but it makes code easier to read and you need to ‘remember’ less while reading the code. - As soon as you have assigned `fileToDelete`, I would call another function that actually does the deleting of the file in the filesystem. I don’t know what the type of `FM` is, but you could add it to that class to keep file-related code contained to one class. - You tell me you don’t see “File deleted” in the log? That would surprise me, are you sure the code was compiled correctly? Try maybe a clean and rebuild to ensure Xcode didn’t mess up. Maybe put a breakpoint above the `try` and step through to see where it’s going. That will tell you what actually got executed.
I put “print (“File deleted”)” after the .removeitem and it prints it, but that’s all I can see... but the function works... As for FM, it’s “FileManager.default” and I added it to the class (figured that, like you said, it would be easier) I tried to create a delete function on its own, the problem is that it doesn’t recognize “filetodelete”, because it was called in another function... that’s why I ended up putting it in the TableView edit function...
Here is a [link](https://medium.com/@diegobustamante/uicollectionviewparallaxcell-part-2-parallax-effect-391336d43623) to the Part II of the article. Let me know what you all think. &amp;#x200B; Cheers.
I did something similar to this. I was saving mp3 files I downloaded from Dropbox. &amp;#x200B; What I did was I stored the file in FileManager and just stored the URL File path as a reference in CoreData.
A demo of the effect would be good on the actual GH page as at the moment it just looks like 3 image cells
Good job on creating a blog post but... does it really need to be 2 parts? (Side note: I'm a pretty advanced iOS developer and was just reading your medium post for fun, I may not necessarily be your audience). Your first post is just about creating a collection view. I get that you're all about making no assumptions about your readership but its not really talking about your pod or parrallax at all but your standard, how do I make a collection view and the data source. Its probably useful for beginners but you also don't really demonstrate your parallax at all. I'd have preferred a shorter tutorial on the actual creation of a collection view (if you insist on having it) since this isn't about a beginner tutorial on collection views and more about examples of your library (unless this is not the first post on your library). And see how it functions, maybe embedded gifs of it moving and what the final product should look like overall. Not stills because they don't demonstrate the parrallax well at all. On that note: your second part is totally unnecessary. I mean, the content within is fine enough but its so short did you have to segregate it? Especially since your first post isn't much of a read. It's also a lot different from your first part where you're basically handholding every step of the way. Why take the assumption that the person has CocoaPods installed when you insist on teaching them every facet of a collection view. Its very weird.
Views and content lol.
Well then it works, it’s not supposed to print everything it’s doing (like Android), only what you tell it to print or errors/warnings. You have to pass the filetodelete into the other method, like `func delete(fileName: String)`, and then just calling it with `delete(fileName: fileToDelete)`.
I know, he asked for some feedback. I'm just trying to be helpful. Unlike his post.
It may be worth adding to CocoaControls if you haven't already. Also, a lot of users are using Carthage now days, possible to add a cartfile?
Thank you for your help!! I don’t have access to my MBP right now, but I’ll try it as soon as I get my hands on it! Ps. Did I mention that I’m veeery beginner? Haha
Not just for beginners, for *beginning* beginners.
Yeah just wanted to make sure I covered everything in case anyone is completely new to programming. Next videos will be all about the code. Thanks for watching!
I tried to do it, but I'm unsure on how to do it... Where do I call it? If I try to just call it directly in the function, it still tells me that I'm using an "unresolved identifier"...
The only way to do it is to not trust what the client is doing, and have the server sanity check the timestamp.
There are so many "Beginner beginner" videos out there. Currently, my son is learning swift and understands these basic elements of object-oriented programming. What would be an awesome video series if you go through step by step like Stanford's video does of actually building an app, with available code repo's
There are a lot for sure. That is actually the plan too. Once I am done the 6 video series on Swift basics (variables, functions, loops, and so on) I will begin the iOS Development series and will include access to all of the code to make things easier. Those will have more real world examples of apps as well as how to set constraints and develop for multiple iOS devices.
You mention you’re a beginner in your other comment, and I can’t really explain more without just giving a crash course on programming. I trust you can find many other resources online to help you with that. If you have other iOS-related issues like this one, feel free to post another question on this subreddit. We’re here to help 😊
I didn't know tech n9ne could code
Thats where the tech comes part comes from lol
&gt; Now my question: the if let syntax sets tagdict[note.tag] as optional right? No. It checks if `tagdict[note.tag]` is nil. If it's not nil, then it sets whatever name you provide in the `let` clause to the non-optional value and executes the `if` branch. If it is nil, it executes the `else` branch. What you want would be closer to: func add_note(note: Note) { if let notes = tagdict[note.tag] { tagdict[note.tag] = notes + [note] } else { tagdict[note.tag] = [note] } } You could also do something like: func add_note(note: Note) { tagdict[note.tag] = tagdict[note.tag, default [Note]()] + [note] } **edit:** fixed bits that tried to append to a const array
Okay, I’ll look into it. Is there a function that creates a random long string so I can save each recording in a different folder with a long string name?
First of all, this is probably a more idiomatic way to do this in Swift: import Foundation struct Note { let tag: String let content: String init(tag: String = "", content: String = "") { self.tag = tag self.content = content } } class NotesDataBase { var tags = [String: [Note]]() var fileName: String init(fileName: String) { self.fileName = fileName } func add(note: Note) { guard tags.keys.contains(note.tag) else { tags[note.tag] = [note] return } tags[note.tag]?.append(note) } } The convention is to avoid underscores and instead use initial lower alternating case for object methods and properties. Also, there's no need to include a type in the method name when the method already has a parameter in the name: func add_note(note: Note) { vs func add(note: Note) { From the signature it's apparent you are adding a note. Now, in the body we use a `guard` statement to test for the tag. If it exists we continue and append to the existing `Array`, if not then we create the `Array` and return: func add(note: Note) { guard tags.keys.contains(note.tag) else { tags[note.tag] = [note] return } tags[note.tag]?.append(note) } Also, notice in `Note` I moved the default values to an `init` instead of setting them in the declaration. I also used `let` instead of `var`. This is because it's usually better to have your `struct` be invariant, it causes less bugs down the road and the compiler can often optimize them a bit better. By using an `init` with the default parameters I essentially get an invariant with the following initializers: Note() Note(tag: String) Note(content: String) Note(tag: String, content: String) With your way I only get the first one and I then have to modify the created object to set the parameters.
Why wouldn't you use `append`? By using the addition operator like this you're creating unnecessary copies of the `Array`.
`UUID.uuidString` https://developer.apple.com/documentation/foundation/uuid/1779712-uuidstring
Has nothing to do with swift
The Title reads Swift: 5 programming for beginners
If it is a new purchase you have 14 days to return with no questions asked. After that it is up to the stores digression not to exceed I believe 30 days. So basically ask really nicely if you're over 14. This policy may apply to swapped out device, but not honestly sure. Though again not related to Swift, and better for /r/iphone.
Thank you, I’ll check it out 👍
Thanks for that comment btw!! I ended up watching a tutorial on Youtube (not for that particular purpose) and the guy was explaining how to do this, which is waaay easier than anticipated and saves a lot of energy when you try to read your code!
The other commenters have answered your question well regarding the optional usage. In this specific case you can use a dictionary subscript with default parameter to remove the optionals, like so: func add_note(note: Note) { tagdict[note.tag, default: []].append(note) } This has the exact same semantics as your version.
OK, so another way of saying that "testscore is in the range 97-100" is "testscore is greater than or equal to 97 and testscore is less than or equal to 100". What you are saying in your second attempt is "test score is equal to 97 greater than or equal to and less than or equal to 100", which makes no sense in either English or code. You may, at a later time, want to also look into the `~=` operator in Swift.
Okay that actually makes more sense. I’ll look into that operator. Thank you!
You could use a switch statement instead of all the if else’s and then you could use ranges in the switch.
That was part 2 of the question. I aced that no problem but they specifically wanted an if else for this problem.
I see, so you’ll want to do your if statements like `else if testScore &gt;= 90 &amp;&amp; testScore &lt; 94`
 Ahh I figured out I was missing the second test score. Awesome thanks
You could also probably do `else if (90...92).contains(testScore)` if you really wanted to use ranges, but it’d be less efficient.
I haven’t learned what .contains does yet I’m only one week along. I’m supposed to learn majority of Swift before I start the actual bootcamp. We shall see how I do.
Are you sure filePath is not nil? Can you put a breakpoint on where you are passing filePath to the NewViewController and see what the value is? Also, it looks like FileToLoad.load() method returns an optional WKNavigation. https://developer.apple.com/documentation/webkit/wkwebview/1414954-load
You’d probably have to manually create the file and manually link it.
okay when I do that.. changes to either storyboard/controller dont change anything
a feature that integrates the Measure tool
https://stackoverflow.com/questions/28587577/how-do-i-create-a-view-controller-file-after-creating-a-new-view-controller Check this SO answer out. I think this might be what your asking about.
Not sure what you mean by that. Have you hooked our IBOutlets? You should probably search for some tutorials, there are some complete and comprehensive ones.
okay I thought it was like html/css where everything is displayed, nvm I got it
I see, yeah it’s not like that, you’d have to run your app to see the changes. Although interface builder does have something called @IBDesignable that you can annotate certain parts of code so you can see live updates for views your building, but it requires some knowledge on how to use it.
Thanks for all reply. I was thinking of a solution when I was on the bus and I just placed an if/else statment. func updateSearchResults(for searchController: UISearchController) { if searchBar.searchBar.text == “” { loadItems() tableView.reloadSata() } else { //my code }
Hey, I'm a bit confused what you meant by relative paths. Can you give me an example please? I am keeping each group of recordings in a different folder so will need to access the files from that level.
I have been wondering about your comment for like 15 minutes and I just realized why. Clever none the less!
You need to talk to women about what they want to see. You get them to your app, men will find it.
True, didn’t think about that, thanks!
There are a few ways to do this in an if-else statement, which have been explained in previous threads, but the reason this will not compile is because you’re asking Swift to do something impossible. The statement testScore = 97...100 does not make sense as a condition because it does not return a Boolean value; rather, Swift is trying to assign The value 97...100 to the variable testScore, which is impossible because testScore is of type Int and 97...100 is of type CloseRange&lt;Int&gt;. Note: The = operator is not the same as the == operator; however neither will work in this situation.
Nit: there's no reason to import Foundation here. It's not used at all.
= is an assignment operator. Your if statements should contain == (a comparison operator).
Hi astrowip! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/bv4yqi/audiokitavplayer_combining_audio_for_playback/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Use a switch instead of an if statement
You ought to solve this using Enums and Modulus
For the past couple of days I've been working through a Great tutorial by Ray Wenderlich! and am currently on, Your First iOS app - Part 18:Challenge: I’m getting this message even when I copy and paste the downloaded course material on line 56 of the .swift file: Thread 1: Fatal error: Unexpectedly found nil while implicitly unwrapping an Optional value Also, in the Main storyboard, when I right-click the display label in order to connect the New Referencing Object to the View Controller, I am not getting a “targetLabel” option…only a “view” option. Any help will be greatly appreciated.
Thanks, I accidentally included it and you’re right that it’s not necessary.
**Writing to relative `~/Documents` directory path:** ``` NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSString *documentsDirectory = [paths objectAtIndex:0]; NSString *filePath = [documentsDirectory stringByAppendingPathComponent:@"my File.txt"]; [data writeToFile:filePath atomically:YES]; ``` **Reading from relative `~/Documents` directory path:** ``` NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSString *documentsDirectory = [paths objectAtIndex:0]; NSString *filePath = [documentsDirectory stringByAppendingPathComponent:@"my File.txt"]; if ([fileManager fileExistsAtPath:filePath]) { NSArray *files = [NSArray arrayWithContentsOfFile:filePath]; } else { // File doesn't exist. Do whatever you need to do. } ``` You would then store the `filePath` as a relative path in your persistent data storage (SQLite, CoreData, etc.) This prevents issues of storing absolute paths, which includes sandbox/bundle specific location information like device UUID, app UUID, temporary paths, etc. All of which can change after system reboot, user domain change, device backup restoration, app update, iCloud syncing, etc. For example, when the above code is executed within the iPhone simulator environment, the path returned will take the form of: ``` /Users/&lt;user name&gt;/Library/Application Support/iPhone Simulator/User/Application/&lt;app id&gt;/Documents ``` Where `&lt;user name&gt;` is the name of the user currently logged into the macOS system on which the simulator is running and `&lt;app id&gt;` is the unique ID of the app, for example: ``` 06A3AEBA-8C34-476E-937F-A27BDD2E450A ``` When executed on a physical iPhone device, the path returned by the function call will take the following form: ``` /var/mobile/Applications/&lt;app id&gt;/Documents ```
It is apparently nil, but I don’t understand why...
I have no idea how you'd do that without falling back into the if/else or switch statements. Can you elaborate?
How did you install Alamofire? Cocoapods?
Here's what I get at breakpoint: `FileToLoad = (WKWebView?) nil` Any idea why? &amp;#x200B; Edit: "Inline Code"
You are trying to append `asset` to a nil `catImages` array, so nothing happens. Try setting `catImages` to an empty array instead of making it optional. `var catImages: [CatImage] = []`
Well, then how to I check to see if its nil? If I init the var like you suggest. Also, what's the point of having an optional if it is never nil? Right? If Init the array it will never be nil.
https://gist.github.com/Sajjon/de4f7a57f560cb97bd3c3fc2d801c22c
you can check if it's empty instead. if you expect the array to exist, then why make it optional?
hey thanks for this information. i just tried to do this but it didnt seem to work. any idea what i did wrong? heres a screenshot of my code and error message. &amp;#x200B; [https://imgur.com/sxIjb28](https://imgur.com/sxIjb28)
Well, I don’t care really if it’s nil, but I want the collection view to remember what image was in what cell and not re-Fetch After the cell has vanished and is redrawn. So I made it an optimal at first to have a default number of cells to populate and then called he dataTask function in the collectionView cellforitem function.
Not without seeing more of the code. Can you make a gist or something?
Did you try running it on an actual Device rather than a simulator? Simulators can’t use these devices.
Make a custom view subclass and use an enum for what type of control to put into it. Then just set a given property on the view and you will have to add the control for that configuration with code. The other way may be separate xibs whose view container is the same, but each has the control (s) within it for the given configuration. Name them something and you can use the enum to load the correct one into your view on your view controller. Just some thoughts...
You could have both text and slider elements simultaneously in the xib and change isHidden on one of them depending on which type of question it is.
Sounds like a reasonable use of kingfisher For this - just look into using kingfisher - it will handle the image retrieval much better and cache it etc. even has great examples for cells etc.
aren't you missing w5..w8, or are you expecting that the values ( **0.3775, 0.593269992** ) represent \[h1, h2\] ?
That looks like Python. What am I missing? -&gt; r/lostredditors?
yes the expected values represent h1 and h2. the code above only shows the input going through the first layer and the first layer only uses w1...w4.
check out [https://www.tivix.com/blog/swift-neural-network-tutorial](https://www.tivix.com/blog/swift-neural-network-tutorial) and [https://www.prolificinteractive.com/2017/03/15/getting-started-with-neural-networks-in-ios-10-2/](https://www.prolificinteractive.com/2017/03/15/getting-started-with-neural-networks-in-ios-10-2/) I think you're missing some steps after BNNSFullyConnectedLayerParameters....
Looking over the code made me realize I was looking at the wrong values.... its been a long day haha
database doesn't make sense for a single audio file. databases are more for lots of data. what exactly is your need?
Not sure if this is the same, but I just did a hacking with Swift tutorial (part of 100 Days of Swift) that taught how beacons are used to calculate location inside buildings. I believe you could also do directions, for example inside a mall or museum which would include distance. The tutorial also showed how to use another iPhone as a beacon. It was really cool.
UITableView, have one cell the question, then a cell type for each type of response. When you know the the response type, display the appropriate cell type.
Praise you. Also I’m using Hacking With Swift as a guide! Paul Hudson is a good man!
Definitely. His content is great and presented really well. If you haven’t done it yet, I highly recommend the 100 Days of Swift. It covers a ton and has good challenges that have made me really feel like I’m learning a lot.
Will do! Thank you!
Link please?
100 Days of Swift: https://www.hackingwithswift.com/100 The beacon tutorial starts on day 75.
CoreLocation has different accuracy targets, but it depends on network congestion and interference. I don’t think you can get it more accurate than 1-5 meters by GPS. There’s also a hardware block for higher accuracy because the US military doesn’t want people building guided rockets with iPhone parts - no kidding.
So its a questionnaire. Where users can click play button to hear narration of the question. The questionnaire is targeted to elderly audience hence the audio feature. There will be around 6 questions so 6 audio files to play the respective questions. Thanks.
Speaking of dumb logic on their part, they think terrorists want to build accurate stuff.
&gt; There’s also a hardware block for higher accuracy because the US military doesn’t want people building guided rockets Not active at loss altitude and velocity.
Well, it’s not “their” logic just because a random redditor said so.
Gotcha. I think I found it. Is this it?: **override** **func** viewWillAppear(**\_** animated: Bool) { **super**.viewWillAppear(animated) refHandle = postRef.observe(DataEventType.value, with: { (snapshot) **in** **let** postDict = snapshot.value **as**? \[String : AnyObject\] ?? \[:\] **self**.post.setValuesForKeys("Education") **self**.tableView.reloadData() **self**.navigationItem.title = **self**.post.title *// \[END\_EXCLUDE\]* *// ...* }) } &amp;#x200B; I am getting Use of unresolved identifier 'postRef' and 'refHandle' error, but I think it is this.
You could try ARKit for that.
You’ve read too many Tom Clancy novels.
This is no longer true. The hardware block was removed years ago.
OMG! I posted on the wrong reddit. My bad. Still figuring this out...
This. Beacons and triangulating WiFi has poor accuracy and reliability. Optical point cloud reference is the way to go is say.
I think the way to go here is to include the sound files with the app and access them the way you are. Spoken audio should be pretty small.
Yep that looks better! You are getting unresolved identifier because you are using postRef and never created it I assume. For refHandle, change that to “let refHandle” to create it. Before postRef, you basically need to create the reference to where you are trying to reach in the database. It will be something like Database.database().ref(“someLink”)
How much is the size of all the audio files you will use?
The easiest choice is to build the audio files into the app. If they’re too big (maybe 100MB), you can download them on first run, but that means that the app won’t work without a network connection. One advantage to downloading them is that you can update the test on the remote server without having to update your app. You might download a JSON file with all of the questions that contained URLs to the audio files.
For the record, iBeacons are NOT going to give you the accuracy you need. The ranging is done with RSSI, not time of flight, so you are subject to hella fading which makes Bluetooth distance measuring useless beyond “really close” and “far away”. But interestingly enough there are rumors that Apple is adding UWB antennas on the new iPhones... that will be really intriguing if true...
Thanks! So I have tried: let postRef = Database.database().reference().child("Education") for the postRef issue. It fixes that but then self.post.setValuesForKeys("Education") and self.navigationItem.title = self.post.title give an error: Value of type 'FeedVC' has no member 'post'; did you mean 'paste'? Do you perhaps know how to fix that?
I am working on a new version on this app: [https://akidagain.page.link/download](https://akidagain.page.link/download)
Less code or less computation time? max(min(variableOne + variableTwo, 15), 1))
There are a handful of things that use obj-c style of stuff (namely selectors) but otherwise you can do pure swift.
There is a hardware block to 2-3 meters which is known as a secure element. This has caused the UK to build its own GPS system as they cannot use Galileo after Brexit (though I genuinely don't understand how a 3meter can do much difference when you're firing a rocket.
I’m sorry but this is not true. There is no longer any sort of block at all. Military gps is more accurate because they use hardware that can pick up both GPS frequencies for correcting errors. But civilian hardware can do the same, it’s just expensive and can be large to have both receivers.
No. They don’t have access to this. This has caused a political meltdown in the UK and Galileo https://www.google.co.uk/amp/s/www.bbc.co.uk/news/amp/science-environment-45314954
This is for the NEWEST GPS III that is being built. Nothing to do with current GPS systems.
Would suggest do the experiment?
The free online [Hacking With Swift](https://www.hackingwithswift.com/read) book is definitely a good place to start. Paul’s full catalog of books just went on sale for 50% off for WWDC, too. I don’t think he covers Core Data at all in his books. Core Data or some equivalent (Realm, Firebase, etc.) would be needed for a decent notetaking app. But first, it makes sense to get familiar with the more general Swift and iOS development topics anyway.
Find an idea that seems fun, and just start! Downloading an example app and tinkering with it also helps in figuring out what’s going on. Keep it up, and you’ll end up as a pro!
It‘s never too late to start coding! Start with small steps, dont try to fly to the moon before you can jump up the stairs! Learning swift: Swift playgrounds app by apple. Next: XCode. Download from apple and try to build an easy calculator app or a todo list or so... If you are more the tutorial guy? Just search arround the internet, there are a lot of people willing to help! Read some blogs from the community. If you have patience and diligence, you suddenly end up as a pro!
it's not too late. https://www.raywenderlich.com/ has some tutorials you can follow (some free some paid). apple's website has the swift tutorial and other various docs. there is a good series called swift on sundays where he livestreams himself making a complete app in an hour each sunday and then posts the code so you can modify it or view it. https://github.com/twostraws/SwiftOnSundays apple has a lot of docs for beginners.
hacking with swift is fucking awesome
I was in your shoes a little over a month or two ago. Try https://www.hackingwithswift.com/100. 100 day course to teach the basics of the swift language and challenge you along the way. I’m currently on day 42 and having a great time. Paul Hudson does a good job of feeding you knowledge in short bursts so you don’t get too overwhelmed. We have a discord with other members new to learning swift as well and taking the course. Join if you would like to be apart of it. https://discord.gg/QXHRYm
It’s not too late. I got my first job as a developer at 27. There are many others who have made the switch later in their careers. If you want it, and can put the work in then you can do it too. All the resources others have mentioned are good. I would also recommend doing some command line stuff. The courses on codecademy are simple but good for beginners. Good luck!
He also made a great app to learn on the go: Unwrap von Paul Hudson https://itunes.apple.com/ch/app/unwrap/id1440611372?mt=8
Let’s build that app on YouTube. Brian is amazing!!
Sorry it took a while to respond, I didn't have time to update my git, here is the updated version: [https://github.com/jeed2424/prototype\_ODR](https://github.com/jeed2424/prototype_ODR)
The way I started was with this $12 Udemy course. It’s cheap, thorough and let’s you gut the ground running. https://www.udemy.com/ios-12-app-development-bootcamp/
I highly recommend Apple’s App Development with Swift. It really taught me the fundamentals while walking me through projects step-by-step.
I agree, Brian is amazing!
Just out of curiosity, what sort of things would you say have been covered in the past 42 days of this course?
twostraws is Paul Hudson from [Hacking with Swift](https://www.hackingwithseift.com), not Ray Wenderlich. But both are great sources of information. And I agree, it’s never to late to get started.
This is WAY above and beyond what u/rymustdie needs to solve their problem - they're clearly writing a fairly basic if statement, and don't need to be told to use multiple enums - especially ones with associated values - which then require custom Equatable/Comparable and CustomStringConvertible conformances written for them! &amp;#x200B; All they needed to know was that `=` is the assignment operator, and they should use `num ~= 97...100` or `num &gt;= 97 &amp;&amp; num &lt;= 100` to print the A+ case.
Thank you lol. I am just starting in this class so I don’t even know what enums are yet.
An enum is a data type where you know in advance where all the possible options could be - e.g. Weather. Rather than using a String to represent them (e.g. \`"sunny"\`), you can use an enum value instead (e.g. \`Weather.sunny\`). That way, you can write a function that accepts a Weather as an input, rather than a String. If you were to use a String, you'd have to check the input definitely was a tyoe of weather first, and cause some sort of error or fallback to a default value. Using the enum value instead lets the compiler check this before even building your program, so your code becomes both safer, and clearer in intent and behaviour! &amp;#x200B; I'm sure your class will cover them properly eventually. They're a really powerful tool - and much more powerful in Swift than many other languages!
I’m interested in learning more about using core data and/or databases with Swift. Does anyone know if Hacking With Swift covers these topics or which book in this series does?
I just started last month and I’m 34. No reason to think it’s ever too late. I’m doing a boot camp on Udemy but a lot of the other options people have mentioned are probably just as good or better.
TableViews, navigation controllers, WebKit, we view, alert controllers, text fields, UICollectionViewControllers, imageviews, unlabels, Parsing JSON Code, multi thread (parallel coding), how to build UI through Storyboard and programmatically(with only code), navigation bar buttons, tab bar buttons, and some other stuff I’m probably forgetting off top of my head. I think the next project I start tomorrow will be the first one that uses SpriteKit
Oh yes I have this as well, great for on the go
This is an brilliant deal! His materials are second to none.
 Not in depth. And from what I remember what he does present, although certainly not bad, is not best practice. You’re better off with [objc.io](https://www.objc.io) , but that also comes with caveats that you’re not an absolute beginner and can follow the project code without complete explanation in the book.
Great time to start! Hacking with Swift material are [50% off](https://www.reddit.com/r/swift/comments/bvqgc0/paul_hudsons_content_books_and_videos_are_on_50/?utm_source=share&amp;utm_medium=ios_app) and a great place to start!
Thanks for the recommendation. It looks like a pretty good resource!
Good luck and enjoy!
I love his books. Also, as a reminder, his books all updated in the last few days, so be sure to get updated versions.
Wenderlich and HackingWithSwift are both great as others have mentioned. Even though you specifically mention Swift, another resource I can recommend is the Yellow Book, which is a free PDF for learning C#. Even if you don't want to learn C#, it does an excellent job of explaining concepts like primitive types vs reference types in relatively jargon-free language. Personally I had a very hard time reading documentation and other text books at first, and this was the first book that I could really understand pretty much everything. [http://www.csharpcourse.com/](http://www.csharpcourse.com/)
There's only one project in HwS with Core Data, and that's Project 38 (GitHub Commits). I have three Core Data books: [the Ray Wenderlich one](https://store.raywenderlich.com/products/core-data-by-tutorials), objc.io's, and [the PragProg one](https://pragprog.com/book/mzswift/core-data-in-swift). From least to most advanced: RW, PP, and OI. Personally, I like them all, but I'm a databasey person.
Awesome! That’s exactly what I was wanting to know.
I was 44 when I decided to figure out how to make an app. I think you have some time before it is too late. Suggestions listed will be a great start.
No thanks
He glosses everything. Nothing ever beyond basic shit
Good to know. Thanks for the heads up.
Ahm, it isn’t new, been around even back in 2012. It is very good if you need a simple display for docs. There is nothing comparable in Android afaic
24 is not late to anything. Guessing you have no kids which means you have hours and hours of disposable time in any given week.
I'm going to recommend something unconventional - start using Xojo. It's a really simple language to get a grasp on and the forums are very friendly. At the same time, go for Angela Yu's Udemy package for iOS. You can get it cheap - like 15$ and you'll learn a lot of the very, very basics. Then you can grow from there. Seriosuly, I'd been using Xojo for many years, but they suck at iOS so I started learning via Yu's programme and I'll launch my first app in September!
I would recommend [Intermediate training course with Core Data](https://www.letsbuildthatapp.com/course/Intermediate-Training-Core-Data) by LBTA
The Stanford ios course is great https://www.google.com/search?q=stanford+ios+swift&amp;prmd=vin&amp;source=lnms&amp;tbm=vid&amp;sa=X&amp;ved=2ahUKEwiCiIDIu8riAhXBKlAKHYyjB84Q_AUoAXoECA0QAQ&amp;biw=375&amp;bih=530
Less code; it just seemed a little untidy and clunky but I wasn't sure if there was a simple function that achieved the same thing. I tried searching but wasn't able to find the right search terms to get anything useful... Thanks.
Looks good in the video but doesn't work on my iPad at all.
headerColors.cellBorderColor.cgColor
Thanks, that solves the problem. I still don't understand why a Color Literal will work though.
Not often I see someone trying to make an argument for reinventing the wheel.
UIColor and CGColor are both expressible by color literal. But in runtime they are different, that's why you need to explicitly convert them.
Paste the code directly - the screenshot is 1) impossible to see in mobile, where a ton of Redditors reply from and 2) unable to be easily altered to assist.
There’s always a balance point. Of course it doesn’t make sense to do *everything* yourself, but using 3rd party code also comes with a cost, as the author points out. I think there’s something to be said for minimizing dependencies, and that it’s at least worth doing a cost/benefit analysis before importing a library.
Love it! Very good points.
Will do. Thanks.
**override** **func** viewWillAppear(**\_** animated: Bool) { **super**.viewWillAppear(animated) **let** postRef = Database.database().reference().child("Education") **let** refHandle = postRef.observe(DataEventType.value, with: { (snapshot) **in** **let** postDict = snapshot.value **as**? \[String : AnyObject\] ?? \[:\] **self**.post.setValuesForKeys("Education") **self**.tableView.reloadData() **self**.navigationItem.title = **self**.post.title *// \[END\_EXCLUDE\]* *// ...* }) }
Your “network library” is exactly the point I always make to people. NSURLSession is already incredibly robust and easy to integrate, and will continue to be updated and kept up to date along side the OS. Those third party wrappers around it? You’re just tying yourself to a third party for something that already exists in the standard OS libraries!
Swift on Sundays squad🤙
Hi! If you like books, I think that you should check https://www.hackingwithswift.com/store (there is a 50% discount now) And for animations: https://store.raywenderlich.com/products/ios-animations-by-tutorials
The good news is that you aren’t alone. The better news is that the Swift API to do what you’re interested in has a low and long learning curve. The best news is that the resources to learn stuff are basically free (YouTube/Stanford online) or very very cheap ( raywenderlich.com lessons and the like). In fact, this stuff is so accessible and easy to find that I’m wondering what you’ve done to educate yourself other than post in this sub? If you’re looking at tooling there’s a lot of “cheater” tools like Kite App, Flow, and PaintCode. Easy to make something simple, examine the code gen and learn.
Seriously, its insulting when 20s act like they’ve peaked and everything is down hill from there. I started swift at 38 myself.
I don't have permissions to submit a PR to your repo, so I'll just link the changes in a [gist](https://gist.github.com/shawnbierman/4eccf2b4c087df9a0637a48e85c51206)
Do a side project. Do something small. Once you finish that do something bigger. That’s the only way you’re going to learn. I don’t think you need tutorials you just need to get over the hump and try.
Well do you have a global variable thats called post? Because thats what your trying to call
nope, for the purpose of the snapshot what should I define that variable as?
Note that I didn't check for Realm, etc. Also, I just checked his other books. Don't really cover Core Data there, either.
&gt;I’m wondering what you’ve done to educate yourself other than post in this sub? Well.. * reading other's pull request at work really carefully (git checkout, play with storyboard, analyse code in Xcode rather than in GitLab/BitBucket) but not to slow down project's development * Watching YouTube channels like Lets Build This App but it requires \*a lot\* of time to repeat in my Xcode everything what's there. If I just watch then I'll forget everything within a week. * Bought Todorov Marin. iOS Animations by Tutorials, I'm in the middle :) * Bought App Architecture (authors are my personal heroes) to get better understanding about pros/cons behind architectures. It's kinda required from my in my company. * Reading random articles from [RayWenderlich.com](https://RayWenderlich.com) about cool things in UIKit but they put me off because they almost never start with 0 code its always some bloated projects that needs to be understood before I put single line from tutorial. &amp;#x200B; So it's basically chaos :/ I remember Stanford curses, don't remember why I stopped watching them, maybe because of too much responsibilities at work (they call me senior iOS Dev (lol), I am 50/50 Scrum Master and *kinda* App Architect because of years of experience as a software developer).
Do you mean "against"? I see programmers reinventing the wheel literally every day. That's why we have "Javascript fatigue", and 100 different programming languages which can't agree on anything as fundamental as what a number is, or how a function call works.
I dont use Firebase so I’m not 100% sure what your trying to do but according to the [docs](https://firebase.google.com/docs/database/ios/read-and-write) they just defined post as a Dictionary
I hate that you've already decided that this will be a documentary about how terrible it is, and you're outright asking only for negative experiences. You've already reached your conclusions. In my 7 years as an iOS Developer, I've only had some minor inconveniences, and overall I think the review process is straight forward, and has continued to improve over time.
I’ve experienced the same situation but 6 years ago. You don’t have to push yourself. Try to take maximum advantage of playground and create a sample for day to improve your skills about your weakness, but nothing having a great size. I use to study(even today) one hour each week day, no more, no less. You can make a plain of study to learn a little more about each component in UIKit and mainly about UIControl (it’s very common lots of iOS developers don’t understand the real meaning of this base class), this component is very important when you have to create new components. Animations is very important, but depending on your necessity you can learn more about animate constraints, coreanimation or make some research about components for animations. In my job the animations are delegated to UX professionals and we use Lottie components to plot it inside the app. We can take a brief talk if you want to know a little more about it. I hope to helped a bit and good studies.
Thanks. I added let post = ["Education": Education] - didn't seem to work. I basically want to make a snapshot of a Education Child in the Firebase database, so that I can use an if statement later on that checks if the user has a child entry under 'Education'.
Wow thanks! I’ll import it in my Xcode project later as I don’t have my MBP right now, but I can’t wait to try it! And what do you mean by renaming “FileToLoad”?
Where did you get this code from? It doesnt tell you what post is?
Wow! I just wrote a comment on the subject, then found this article. This is what I concluded: * If you need the code working as soon as possible, and the code will not be maintained: use the library * If the developer is very experienced using the library, the library is maintained and doesn't get in the way of how Apple does things: use the library * If you need only a tiny bit of the library: look at how they do it and do it yourself * If you want it to compile without troubles in a year or two: do it yourself * If you want the next developer to work on it, without exhaustive consulting of the previous developer: do it yourself
Thanks so much for the extensive post!! Ill try it out today.
You can add `.cgColor` after the literal. As it is `UIColor` on iOS and `NSColor` on macOS, you can just handle it like that.
Being SM really is a full time job. Bless you for doing so much.
In your NewViewController, select the word FileToLoad on line 25, as seen in your [gist](https://github.com/jeed2424/prototype_ODR/blob/master/OpenDocument/OpenDocument/NewViewController.swift) and right-click, then Refactor-&gt;Rename. It will rename all references to that across the project.
From Firebase Documentation mainly and Stack Overflow, altered to the specific child (Education) that I need to address.
Could to explain a bit more on how you are using Lottie components for animations and stuff ? I’m infested und the framework in general.
Tbh I love that syntax and paradigm for validation
There are so many discords started around this, I suggest you look back through r/swift and see if you can find the other ones before you make another. You might find more people that way.
I have one question now. I got it to work wonderfully. But not that the second VC is in the view of the first VC, Is the first VC in charge of controlling the embedded VC's actions?
I find myself constantly commenting on your comments, and I’m not sure why, but.... The author of the article is saying sometimes you must re-invent the wheel.
I was in a similar situation, an expert in Swift and "low-level" stuff but not very good at UI. It's actually not as hard as you think and pretty intuitive to learn UIKit. Here's what to do: \- Read the official docs/tutorial to get an understanding of what UIKit is actually doing for you behind the scenes. \- Then, the same way, start learning how other stuff like animations and Autolayout work with this. \- Once you have a good fundamental understanding, start reading some open-source code to see how things are implemented. Check out the Firefox iOS app on Github. \- Try to implement some common screens you see in other apps to get practice.
His name is Marin Todorov.
Or just go to your local cocaheads meetings. And if there is no local-to-you-group, maybe start one.
This would probably work: `cell.textField.text = name.value` But there might be a better way to solve the problem you are facing. Why build your own observation system when you already have KVO?
Well, I didn't build the Observer..and I am stuck using it, and why was it built...god only knows. &amp;#x200B; Woah is me.
The simple answer is no. Take a look at delegation for communication between VCs
Great, thanks! I was just wondering though... Is it bad to do it the way I did (FileToLoad: UIWebView) or just not practical?
push your code again so I can look at the changes.
It there is one thing I’ve learned it is this simple bit: you can’t know everything nor do everything! Better to master the skills that you have and be “hard to replace” than to know how to do something half assed. Now that doesn’t mean expanding your knowledge isn’t valuable, I just got the feeling from your posts that you don’t think your work is as valuable as the stuff done by the UI group. You might find out that the UI guys respect you for the knowledge and abilities you have. Personally I understand your desire to do more, however I wouldn’t spend a lot of time pursuing such tasks at work. Rather get involved in an open source project, create your own open source project or help somebody out. The idea is to grow experience outside of the work environment and the constraints those environment impose upon you.
[Here](https://gist.github.com/jeed2424/9d43ed51410fc6b5ee8446a7f9ab45df) it is!
r/boneappletea
I agree, build something simple and that will come for free. I know UIKit quite well but I prefer the architecture low level stuff myself. Be careful what you wish for 😉
Read up on reactive programming a little bit. Its quite a common pattern. This just looks like a wrapper of KVO stuff.
Yeah i used CocoaPods
Yeah i know but i domt know how to.continue now
I tried same error keeps appearing
Yeah but then what my code requires that i use alamofire
Do self.taskStore?.removeTask(at: indexPath.row, isDone: isDone) instead, notice the questionmark after taskStore
It still gives the same error when I do that
Yahhh. You’re gonna actually have to build some UI to get good at it.
After having unwrapped the Optional, are you sure that the type of the instance variable `taskStore` indeed has that method?
I'm very new at coding, can you elaborate more on that?
Well, where does taskStore come from? And do you know for sure removeTask is a member of taskStore?
It says that it can’t recognize a method called removeTask within the class ‘TaskStore’, To troubleshoot this error, try the following: Between each step make sure to build your project (by pressing (cmd+B)) 1. Go to the file you defined the class TaskView (or where it’s is defined). You can fast travel by pressing command and clicking on the property taskStore at the error line, a drop down will show with an option “move to definition”, after pressing it try to do the same on the class name “TaskStore” (property type). 2. Make sure that the method “removeTask” isn’t private, (internal or public, as you wish it to be). 3. Make sure that the method “removeTask” is an instance method (not static). 4. Make sure that the method “removeTask” has the same signature “func removeTask(at indexPath: IndexPath, isDone: Bool)” (or as you wish it to be). 5. If all of the above is checked, and you still have the same error, then try to clear up your project, using shortcut (cmd+k). 6. Still not working? Try to delete your derived data by going to preferences (of Xcode) then choose “Locations” (last tab to the right) there will be a textField with little arrow on the right corner, click it, then delete the file that corresponds to your project (or delete the whole folder). 7. Still not working again? You can give up, the mighty power of Xcode is trying to prevent you from achieving your goals, don’t worry, we are all here more than glad to help you out. I’m on my phone, don’t have Xcode near me, and not a native English speaker, so excuse my bad English, any my programing mistakes.
Have you taken a look at this: https://help.apple.com/xcode/mac/current/#/dev621201fb0
https://docs.swift.org/swift-book/LanguageGuide/OptionalChaining.html
 import UIKit class TestViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() let backgroundImage = UIImageView(frame: UIScreen.main.bounds) backgroundImage.image = UIImage(named: "GetStartedBackground.jpeg") backgroundImage.contentMode = UIView.ContentMode.scaleAspectFill self.view.insertSubview(backgroundImage, at: 0) } var animator: UIViewPropertyAnimator! @IBAction func makeBlur(_ sender: Any) { animator = UIViewPropertyAnimator(duration: 3, curve: .linear, animations: { [weak self] in let blurEffect = UIBlurEffect(style: .regular) let visualEffectView = UIVisualEffectView(effect: blurEffect) self?.view.addSubview(visualEffectView) visualEffectView.frame = self!.view.bounds }) animator.startAnimation() } }
This should resolve his error. I think he needs to clean the build, comment out that line and rebuild it. Uncommenting that line then should clear this issue.
How is the function defined? Can you add the `func removeTask` definition of your TaskStore?
You are animating the frame of the visual effect view. When a sub view is added to another sub view without frame, its frame defaults to a CGRect.zero, which means it has origin in the upper left corner and 0 height and width. So when you start the animation the sub view starts at zero and then it scales to the whole screen as you’ve set its frame to be equal to the view’s bound. To solve it just add the subview and set its frame in viewDidLoad and set it as hidden, then in the animator set it has not hidden. Hope that helped!
Set the frame before animation :)
How do I do that? :)
@IBAction func makeBlur(\_ sender: Any) { let blurEffect = UIBlurEffect(style: .regular) let visualEffectView = UIVisualEffectView(effect: blurEffect) visualEffectView.frame = self!.view.bounds animator = UIViewPropertyAnimator(duration: 3, curve: .linear, animations: { \[weak self\] in self?.view.addSubview(visualEffectView) }) animator.startAnimation() }
Try initializing and adding your UIBlurEffect and your UIVisualEffectView before the animation block (before animator = UIViewPropertyAni...) and set it’s alpha to 0. And within the animation block, set visualEffectView alpha to 1. It should be something like this: let blurEffect = UIBlurEffect(style: .regular); let visualEffectView = UIVisualEffectView(effect: blurEffect); visualEffectView.frame = self!.view.bounds; visualEffectView.alpha = 0; self?.view.addSubview(visualEffectView); self.animator = UIViewPropertyAnimator(duration: 3, curve: .linear, animations: { [weak self] in visualEffectView.alpha = 1; }) self.animator.startAnimation(); This should give you a fade-in blur effect, switching 0,1 alpha values should create a fade-out effect. I’m writing in my phone, and don’t have Xcode near me, excuse my mistake, and sorry for my bad English (not a native speaker)
When I do that it rapidly appears without any fading.
Then try animating in a different way. Either like [https://stackoverflow.com/questions/2337408/addsubview-animation](https://stackoverflow.com/questions/2337408/addsubview-animation) or by setting up a view and animate alpha property like @koalaSea replied below.
Bro that’s cool as shit, I’d keep it 😂
Hi. There is no secret. I’m particular case I just create a new custom view encapsulating/wrapping the Lottie AnimationView. I use to never call frameworks directly in my code. I always use an wrapper over the framework to insert it in my code, so if I need to change the framework in future or it has a grate change, I’m protected but the encapsulation and don’t need to import the framework everywhere in my code.
It just seems like your following the Spotify suing Apple train from the media, because I as a developer don't recognize the part about `being targeted`. Its being consistent and the process is improving overall, shorter review times (which is better because you can act sooner) etc. Most of the time our apps don't get through because the customer wants to go against our advice and "try", which mostly fails. If you're making a documentary do it right and do it unbiased.
Try self.taskStore**!**.removeTask(at: indexPath.row, isDone: isDone**!**) And see if that works. Looks like taskStore is an optional and when you declare isDone its not a Bool but a Bool?
hey, you need import pod 'FirebaseUI/Email'
Yeeeah I know. Just copied data from some website quickly. I studied Martin's book about RxSwift (excellent book!!) and wrote 2 mvvm+rx apps that are already on market. After I read this book I realized that his name is Marin not Martin :)
I already sat frame before animation, didn’t work even after the update? Unfortunately I’m not familiar with UIViewPropertyAnimation. Maybe you should try using UIView.animate(withDuration, delay, options, animations, completion) try searching it on google! https://developer.apple.com/documentation/uikit/uiview/1622418-animate
same error
Evil bot.
Thanks!
&gt;Yeah I also totally agree with you it is one of the best ways you learn, and get in the flow.
Try removing the **WKUIDelegate** protocol you have on **NewViewController**.
Off topic but could you share that image?. It looks so cool.
Hey everyone, I just released v1.1 with added support for german, dutch, danish and russian. The corresponding regions were added on App Store Connect, so you should be able to see the app on your stores soon. This version also fixes some bugs that weren’t detected on the first betas. Specifically, the app now imports very large groups with no memory issues, and the ocasional bugs while plotting some rankings were fixed. And here's a special ping to the users who tried downloading and couldn’t due to the initial region restriction: u/TriangleTingles, u/PM_ME_YOUR_APP_IDEA, u/kiliankoe, u/livinglibary, u/ErrorNow, u/Aleykopp69 (:
Hey, I’m glad to report v1.1 was released and the huge groups bug was fixed!
Awesome! In how much time will the update come out in the App Store? I haven’t got it yet.
I believe it's being replicated through Apple's servers. It should be available soon (:
He's a fellow Bulgarian :-)
I’m seeing it on my phone now, did you manage to get it?
Yup. Thanks so much!
this is huge though. its completely different from uikit. super reactive/ binding
This changes everything! So much pain integrating with ObjC frameworks now gone. Also, maybe this will end the "programmatically creating views is superior" meme
Wonder how much work it will take to remove ObjC dependencies. Hopefully XCode will have a built-in migrator?
I was literally screaming at my computer doing this demo. Amazing.
Exactly! It looks exciting but there are a lot of considerations to make
I wonder, will this support older iOS versions prior to iOS13?
I feel like the new ui will allow is more accessible for new programmers, but Im not sure how I feel about all the drag and dropping.
SnapKit banished to the shadow realm
It looks like Apple's implementation of React/Redux, similar to Google's Jetpack Compose, though based on top of inheritance rather than functional composition. Color me surprised and slightly excited.
it reminds me of react native a bit
There are several Apple Developer tutorials already live — [https://developer.apple.com/tutorials/swiftui](https://developer.apple.com/tutorials/swiftui)
I scream so loud my girlfriend had to tell me to be quite so I would not upset the neighbours
You can use `JSONEncoder` to serialise your data as JSON, then write that to a file. Using JSON has a few nice features, one of these is that it's it makes it quite straight forward to read and edit the saved data in a text editor when you need to.
haha flutter ctlr+c ctlr+v
IMO Apple aims to eliminate the need for devs. This is big step in the direction- front end becoming more wysiwyg everyday
Yeah, I just really want to start using it and see how it actually works, and if it'll murder my MacBook pro or not
As a former Windows Phone developer. Bindings, yay!!!!!!!!!!!!!!!!!!!1111111111111eleven
That’s true, but they just focus on basics of building UI. I want to see how pro developers take it and write real apps out of it
That's only a good thing. Having to deal with UITableView/CollectionView updates without bindings is a pain. Having to add delegates for every bloody property that needs to refreshing a single label or image in the UI is a pain.
&gt;maybe this will end the "programmatically creating views is superior" meme I think its more likely to polarize that debate. There's the live development aspects, but at the end of the day you're relying on a framework and if its doing what you want its awesome but if you feel that its not ... well, that's why people still debate.
Is Xcode 11 available to download anywhere yet?
Kudos to Apple for finally abandoning their shitty storyboards and constraints. I hope they will also open source this.
That's my biggest question as well. Guess we'll know in an hour or so (once downloads+installs are complete)
Not even close. But declarative UI been the future for a decade. XAML first on Windows, and even Android uses declarative UI today. Hard-coded UIs is why iPhones have struggled so much with different form factors through the years.
The real question is: Will it support highly customized UI just as easily as UIKit and AppKit?
Yup, see your dev portal(assuming you have a dev account). Otherwise I'm sure there will be an unofficial up soon
This is totally copy from flutter...
&gt; "programmatically creating views is superior" Anyone saying so never worked with a declarative UI framework and/or is an amateur. Any professional will prefer to work less on dealing with UICollectionView crashes and more time on adding features to the app. (Features is more fun than bugs, everyone knows that)
As someone who is just about to finish a complete rewrite of an app, migrating from storyboard to UI code, it makes me mad that they didn't released this sooner :D This was mind blowing. I did like how I was able to reuse more the UI Components by doing the UI by code, but the imperative declaration of all the UI Views + the hundreds of lines setting up constraints, fonts and colors really gives a bad touch at the code. This new framework looks truly great. However a few questions come to mind: &amp;#x200B; 1. How customizable will be this? Will we be able to pull off any design on it? 2. Can we create custom UI components so we can reuse in other screens? &amp;#x200B; I'm looking forward to downloading the beta version and trying it out
There is already documentation with tuturials live : https://developer.apple.com/tutorials/swiftui/
&gt;https://developer.apple.com/tutorials/swiftui/ Thanks for the link
I more or less just started to learn to code and tackled storyboards just today for the first time, should I still bother to get a good grasp on them or try to focus on this now? (I'm a beginner sry if this is a dumb question)
The BindableObject is the biggest improvement here. Finally, no more delegates.
Yes, I'm already downloading it. You'll need Catalina as well.
A stupid amount. I guess you're not working on any big projects if this is a question? I've done my best on all my projects (both at Skype and my current job) to get rid of Objective-C dependencies, but it's extremely hard. Even with just 10-20% Obj-C it's still not something you replace in less than a few years (unless management is crazy or something) But I think we can assume SwiftUI will be compatible with legacy solutions. Otherwise nobody will adopt it.
I’m literally about to start chapter 2 of Apple’s ‘App Development with Swift’ book, *Introduction to UIKit*. They gonna have the new guide out before I turn the page or what!
It has to.
Yea I figured based on past experience but it's gotten easier over time too. My company is very Swift-forward so we're surely going to adapt as much as we can without breaking things significantly...
So start learning about it, and write one.
So there's no reason to start a new project without this, right?
As I see it, SwiftUI can only be adopted by rewriting the individual screens completely, one by one. This likely will mean that it'll only be done for new features, or when a feature need a larger change/makeover. We still have views in pure Obj-C because there have been no reason to update them (yet). But we might be able to steal some functionality from BindableObject and re-use that in traditional views. To early to tell (maybe tomorrow).
The demo appeared to be running on a MBP so hopefully it’s not too bad. I’d be worried if they only showed it on a maxed out Mac Pro.
My first thought too. SnapKit and whole bunch of other Swift frameworks just got obsoleted
Depends on what you want to do with your knowledge. If you want to work as a professional iOS developer, you have to keep up with the changes, but knowing the old stuff is pretty important too. You can't come into a years-old codebase as a junior developer, find storyboards, and give up.
Thanks for the share! This is one of my Swift articles. :)
Thanks for the knowledge!
Reminds me a lot of how things work in Visual studio development, which is a good thing.
It'll probably take years for SwiftUI to mature in to a truly powerful UI framework, and I'm sure 1.0 will be missing lots of stuff and have some nasty bugs, etc. But it looks like we can adopt SwiftUI piecemeal into existing UIKit and AppKit apps, which means we can start using it immediately at least for simple stuff, while keeping the older frameworks for more complicated things. It also means that we can now *finally* share UI code between UIKit and AppKit apps. So the future of Mac development isn't Marzipan, it's SwiftUI. I guess that big "NO" slide from last year was right.
"declarative UI been the future for a decade" for sure. Declarative UI is making big strides and I think it will eventually replace the need for front end devs entirely. Why have frontend devs when it becomes so simple that a team's UX/UI designs can do the drag and dropping, and backend devs hook up the rest?
That's what's I'm wondering too. The code shown on stage looks too damn simple to be able to drive an extremely complex app.
SnapKit will still be used if SwiftUI doesn't work with anything below iOS 13. We'll have to wait and see for those details
Here is a download link for Xcode 11, we can get started right away. No sleep tonight...
I see them more as trailblazers that led the way.
People been saying that since WYSIWYG. Anyone who does application development for a living knows that's not the case. Our designers knows that not the case. Our product owners knows that not the case. And our backend developers certainly don't want to touch anything UI.
Yes! BindableObject looks pretty exciting.
You think a Zeplin comp won't easily translate to UI in Swift someday? They will eventually converge to work together.
Doesn't matter if it does. I've worked at Microsoft where we had UX designers who could modify the XAML (and they did). The devs are still needed for the 99% other part of the job that isn't doing pixel perfection or the initial setup. If you work professional you also know that reusable components, localisation, accessibility, edge case scenarios, error handling, etc. all are things that designers don't deal with. I'm a professional, not a hobbyist. The reason companies drop $100k/year for people like me is because we do more than just connect a UITableView with a JSON datasource.
\*We declarative now bois. &amp;#x200B; Knowledge of React JS and Vue should also prove useful. Google announced an early preview of Jetpack Compose, written in Kotlin, at Google I/O earlier this year that's very similar too.
What are the answers?
I did it and same thing happens... Everything works and when I select a cell, it show NewViewController, but it's just a blank page...
Mind there's a lot of architectural understanding to how UIKit works (and soon to be with SwiftUI). A lot of people think `tableView.reloadData()` is the correct way to load new cells into a UI (or remove them for a delete operation), and that's wrong on so many different levels. So it's perfectly fine to not be an expert on animations if you can ensure high level of code quality, architecture, design pattern application and testable code. But specially if you come from C++, you'll find a lot of these patterns are different or differently applied, so make sure you take the time to understand the de-facto patterns on the platform and apply them correctly.
This was also the first thing I was thinking about. So the flutter people must have done something good ;-)
Yes but there will be more lines of code. Hopefully still cleaner than the old code
It is? It's always seemed simple as hell to me. Just glancing over the tutorials, this new stuff reminds me of the XML based UI generation that Microsoft tried (and eventually abandoned) years ago.
&gt; migrating from storyboard to UI code Why the fuck would you do that?
Uuuh, XAML isn't abandoned, not even close. It's the absolute future of all UI development on Windows. People also said HTML was simple-as-hell, yet most people failed to understand the intrinsic parts of it (and HTML is simple, yet people failed). Apple obviously intents to make a react-native competitor here, with a declarative UI framework supporting all their UI features. ... and maybe we can finally make people stop calling `tableView.reloadData()` for everything.
where are you reading / hearing about this?
Go deep enough in the tutorial, and you'll find it referenced. They don't explain it in detail, but it's part of the samples.
Keep up with changes, sure. But if there's one thing we've seen with Swift in the last few years it's that this new shiny thing is going to take a few years to become "stable". UIKit isn't going anywhere in the next 5 years, hell, it'll take 6-12 months for enough tutorials and Stack Overflow posts to appear for most devs to even get a handle on this outside of basic tutorial-type apps, IMHO.
If you look at the [documentation](https://developer.apple.com/tutorials/swiftui/) it clearly states that you can build reusable components, and for my first question, I guess we'll find out once we start playing with it.
That moment when I spent the past 3 weeks painstakingly creating an app and supporting dark mode and then this releases and it could have taken a fraction of the time... Still so impressed and cant wait to try SwiftUI out! :)
Same here. I'm probably 60%-70% through rewriting my main app and, while this looks cool, don't want to toss everything out.
goodbye RxSwift!
Storyboards or only shit if you stick everything in one storyboard and try to load it on a Mac with an old as dirt CPU. 😛
migrating from storyboard to code was not the main reason we decided to rewrite our application, it was mainly because the previous dev team built a unmaintainable massive view controller code base. but since we were at it we decided to build the UI using code instead of storyboards, mostly so we could reuse the UI components more easily, we still use SnapKit for the constraints though. I don't want to go on a discussion about code vs storyboards, I think each has his pros and cons but I share some opinions from this video If you want to check it out. [https://www.youtube.com/watch?v=g6yz5oX5iWc](https://www.youtube.com/watch?v=g6yz5oX5iWc)
or [https://github.com/layoutBox/FlexLayout](https://github.com/layoutBox/FlexLayout)
Actually most "complex" app UIs can be supported by exactly what they showed. Using StackViews and Lists for 99% of the UI instead of constraints is perfectly doable. I'm more wondering about what they plan to replace UICollectionView with in SwiftUI. That's the most powerful control we have available today. And of course, how they plan to deal with animations. But if they plan anyone to use it seriously, both of those two things will been solved already.
Well, it took Swift a few years to get "stable", so this will probably take a few years too. Depending on the day, this sub will either wholeheartedly agree with that statement or run me up the flagpole for doing anything other than offering a human sacrifice at Swift's feet.
Not to be a jerk here but the error you are getting really couldn't be any more clear
No... compare to current state of the art, storyboards in any kind are crap. That's why SwiftUI is done in code.
I glanced through the tutorials but didn't see much in terms of dealing with dynamic data sets or CoreData... How is this new stuff supposed to stop us from having to call reloadData or reloadRows after updating a dataset?
I've worked with both in some of the biggest apps out there when I worked at Microsoft. And once upon a time, coded UI were a good thing, but storyboards is just way more productive now days. Sure, we still build reusable components in pure code (or storyboard+code, or xib+code), and true, SnapKit helps. But it's by no means a requirement. I think a lot of developers was influenced by old-and-angry iOS devs who grew up with XIBs and didn't have embedded storyboards (i.e. they often only had one storyboard for the entire app). All the code needed to setup a UITableView with a few reusable cells, compared to doing it in storyboards with simple constraints? You know it's a ton, and if you're meant to change the colour of one specific label, you better hope your variable naming is spot on. (Also that guy in that video sounds like an idiot. "Too much clicking?" really?)
It’s confirmed that it will support only iOS 13+. https://developer.apple.com/documentation/swiftui/
Because it have bindings :) So you provide your List with a BindableObject (think of it as an observable object/collection) and it'll do the calculations necessary for insert/delete/update/move operations.
&gt;Any professional will prefer to work less on dealing with UICollectionView crashes and more time on adding features to the app. This has nothing to do with the IB vs code debate.
I'm curious about the memory management. UITableView's can handle tens of thousands of rows (sure it's not best practice to present that many rows to the user, but the control can handle it). I'm curious how refined this control is and if can handle work loads like that without shitting the bed.
You missed the part where SwiftUI have bindings (a common feature in all declarative frameworks)
It wasn't a problem on Windows Phone. And it came with free paging (something that is annoying to implement for the standard UITableViewDataSource) Given the UI controls on iOS already have virtualisation (only load page view +- 1 into memory), I can't see it being any less efficient.
Yeah I'm not worrying about it so much. Also looks like this will only be supported by iOS 13 above, so you might need some time until most of your users are there anyways
The tutorials are really great [https://developer.apple.com/tutorials/swiftui/tutorials](https://developer.apple.com/tutorials/swiftui/tutorials)
What do you mean by "current state of the art"? SwiftUI looks neat, but it kinda reminds me of a WYSIWYG editor like Frontpage. Drag a control on the page and it populates the code behind, made a change and it updates the code behind. Or just update the code behind and it updates the preview pane. Jesus I feel old making a FrontPage reference! 😂
Oof. I left bindable stuff behind when I left .NET. Hopefully this is a better implementation.
Dear lord almighty... Wondering how RxSwift's team gonna handle it...
I typically rewrite an app every 3-5 years. So by the time I get around to rewriting this again, SwiftUI will be getting deprecated for whatever comes next. 😂
It's great in XAML. You're not confusing it with INotifyPropertyChanged by any chance? I hope it's a _simpler_ implementation. Bindings been sorely missed in Swift, and using delegates always felt like a poor mans solution.
Drag &amp; drop is probably a useless gimmic (similiar to recording UI test). The real meat is the way you can write small UI components and use them to create bigger components. Storyboards are absolutely horrible at this.
Absolutely you should. While SwiftUI is pretty cool, it is only iOS 13+ for now, meaning most apps are going to have to continue doing UI the way they have been. Plus, even when SwiftUI is usable for most apps, almost none of them will completely re-write their entire UI to use this.
how do i fix it? When i chest the json response the key value is "error" and the name of my varible is error. isn't that supposed to work?
That's why you stick all your reusable stuff in XIB's and load them from the code!
If you don't want to support more than just iOS 13, sure.
I see your point, I've also worked with both and like I said, each has pros and cons. I'm not against storyboards and would happily use it again (maybe not after Swift UI). I agree that finding a variable for a specific label can take more time in code, if you don't name it too well, one thing that has helped me on this is using the debug view to localize the views names, if needed. But I hardly had to use it so far. Before this I had never done the UI in code so part of my choice was also so I could get in touch with something new and expand my knowledge.
Or use modern UI framework (which looks like SwiftUI will be) that makes it 100 times easier.
I feel like such an old man in this thread. All you guys are all "YAY! IT'S LIKE \[some\_new\_upitty\_framework\]" and I'm over here like "THE CURRENT STUFF WORKS GREAT, GET OFF MY LAWN, YA KIDS!".
What do you mean by "modern UI framework"? Up until today, Storyboards and XIB's were the modern UI framework.
&gt; Before this I had never done the UI in code so part of my choice was also so I could get in touch with something new and expand my knowledge. Yeah, that's not a bad reason. Storyboards also offer something else: it's great for new developers joining a company/codebase, since it's self-documenting. Coded UI is usually a nightmare for anyone to take over maintainability for, a important point for a lot of companies (specially big ones)
SwiftUI seems to be heavy influenced by React &amp; Flutter.
Hopefully, it will be a lot more stable than Swift 1.0... :D
"The reason companies drop $100k/year for people like me" Yes they do that today. I never argued against iOS devs being experts in their field today. I am speaking on future prospects.
That makes sense
Look up [Sieve of Eratosthenes ](https://en.m.wikipedia.org/wiki/Sieve_of_Eratosthenes), that should be a simple algorithm to implement as a beginner
**Sieve of Eratosthenes** In mathematics, the Sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit. It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to sequentially test each candidate number for divisibility by each prime.The earliest known reference to the sieve (Ancient Greek: κόσκινον Ἐρατοσθένους, kóskinon Eratosthénous) is in Nicomachus of Gerasa's Introduction to Arithmetic, which describes it and attributes it to Eratosthenes of Cyrene, a Greek mathematician. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/swift/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
ok cool that's what I figured. thanks
Can you write this same algorithm in another familiar language first? Or are you brand new to programming?
Yes, but that argument been made for 30 years. And people have said it every time there was any marginal process in non-coded UI frameworks.
iOS 13+ support only, so if you need to maintain "one version back" compatibility then you'll have to wait.
[The documenation](https://developer.apple.com/documentation/uikit/uivisualeffectview?changes=lates_1) advises not to use alpha values less than 1 on visual effects views. A mask that fades the visual effects view seems to be fine though.
Can't say that I've ever touched those frameworks so I wouldn't know. They've always seemed like fad frameworks to me in the same sense that everyone used to use jQuery UI until the next year when they all moved on to the next big thing, and then the next big thing, and so on. It's hard to keep up with this stuff these days.
RxSwift supports iOS12
There is no value for key "error" in the response. In fact, the response data is 0 bytes long (ie: completely empty) in the screenshot you've shared
What does this mean, someone explain it simply.
I'm new to programming. I can write the algorithm in plain english, but i don't know how to implement it in swift. I know that I need a function to run through all the integers from 2 to n. Second, I need to have 3 conditions be true as the code is iterated through each number: 1st, the number has to be divisible by 1, 2nd, the number as to be divisible by itself and third, the number has to be divisible by all the numbers up to n. The last part probably should be another function call that runs through all the numbers, but from all the search results from google, I haven't seen this implementation. And I can't seem to follow any of those implementations.
We can agree to disagree. I am only thinking on this because it motivates me to be a more well-rounded dev. I’ve been doing iOS strictly for 6 years now. Looking at how far we’ve come since obj-c in 2013 to now, maybe knowing iOS/swift only won’t be enough in the years to come. A positive push to branch out more
well the min specs for os is pretty high on swiftui. snapkit is safe for a while.
Sure, and nobody should limit themselves to one technology. I'm proficient in a lot more languages and stacks than just Apple/Mobile, but iOS just happens to be my current gig. Specially when you work for big companies it's all about practicing Software Engineering at the highest levels (code quality, tests, architecture). The tech stack is second to that, and if you're good at the former, they'll be happy to re-train you in another technology for the latter.
aha thanks i understand it more now. the only problem is I'm still not sure about what I'm doing wrong with the request. I'm adding email and password to my request as reqested by the api documentation.
I don't know. I just download the repo again and made the same changes and it works for me. I'm opening a text file from my iCloud Drive in the iPhone XR simulator. If you update your repo with your latest code I'll check it out again.
See you next year when iOS 13 will be on 85% of all devices
Only works on iOS 13. Usually supporting the 2 most recent iOS versions gets you 95% of devices
aww, fuck. There goes adoption for the next two years.
boooo :-(
I think you are using the wrong URL for the API endpoint -- it looks like your request is to /api/login/login
keeps disconnecting for me, I think I’ll wait until Europe morning instead
Well we still support iOS10 and macOS 10.9 (hopefully for not too long)
With 3D Touch supposible being killed off, I don’t find it very useful We have it in our app as a novelty, but nobody uses it
Thanks for the suggestion. I tried changing the url line to "[https://reqres.in/api/login/login](https://reqres.in/api/login/login)" on line 51 but my data stayed 0 bytes.
It should be to `https://reqres.in/api/login/`. Your current code is appending an extra `login` to the end of the path
I don’t have my MBP with me right now, but give me about an hour and it will be updated! Also, it’s strange that it works for you, but (and I don’t really know if it makes a difference) I’m debugging it directly on my iPhone 7...
 [https://developer.apple.com/documentation/swiftui/](https://developer.apple.com/documentation/swiftui/)
okay that was definitely something that was going wrong thanks for pointing that out. I changed it to **guard** **let** url = URL(string: "https://reqres.in/api/" + url) **else** { &amp;#x200B; sadly I am still getting 0 bytes
Not supporting 15% of your paying customers is usually not a choice for major players :( Name a major company/app who only supports iOS 12?
When is the release date?
I am so excited about this! I love RxSwift but have always felt just a little uneasy about relying on it. It's too early for me to really compare them, but I'm not worried about what happens to Combine if its lead developer moves to another company or is hit by a bus.
Coded UI is a blessing. **Everything** is there. No need to dig into storyboard shit to see if anything was configured there. You can have proper initializers instead of stuffing everything into prepareForSeque. You can have trully uncoupled VCs.
Not iOS 12 but 11 I can give you examples. The untold rule is to support the 2 latest versions so iOS 12 and 11. Next year will be 13 and 12. Examples? Slack, Steam Link, Badoo
I am getting a valid response on the command line for a failed login: `curl -H "Content-Type: application/json" --data '{"email":"email@email","password":"passwrd"}' -v https://reqres.in/api/login` That gives me an HTTP 200 response with a payload of `{"error":"user not found"}`. You could try checking what you are getting for the `response` parameter when you make the request. See what the response code and headers are that are being returned to your app
85% are on iOS 12 already, that's the recipe to not fall behind like Android, new tech for new devices, fuck fragmentation, Android is already a pain
I suspect 5 years is a stretch but yeah you need to at least acknowledge the old ways. For somebody learning though I’d suggest diving right in. By the time he is up to speed stuff should be stable.
On the other hand by the time a newbie is up to speed WWDC 2020 will not be far away.
Can’t argue with that. But if you’re just starting to learn and you plan on getting a job somewhere that’s not the Valley, you’ll need to know the current way.
It’s X-2, not X-1 since that’s what Apple themselves officially supports. But even two versions means we can’t adopt SwiftUI for another year (plus the loose, so more like 18 months). That still sucks Spotify, Office, Facebook, Instagram, Uber? Afaik they all work on iOS 10 All my banking apps etc...
I know that many companies handle iOS 10. I was just answering your question :) But indeed it sucks to wait for that long...
I’d say that depends. There are many companies outside the valley that will jump on new tech like this. I can see job advertisements for 5 years of SwiftUI experience hitting job site tomorrow! 🤪🤪🤪🤪🤪🤪🤪🤪
As someone whose been perusing job ads for the last few months, yeah, that sounds about right!
Okay so I checked the response parameter and it seems to be empty. [https://imgur.com/a/x96FgzG](https://imgur.com/a/x96FgzG)
Probably due to backward compat. If it’s translating into UIKit/constraints the syntax make sense
But, but... ```swift import SwiftUI ```
It's not empty, there's a reference to a URLResponse (should be a subclass of that, HTTPURLResponse) object there. You just need to print out the properties of the object such as the `statusCode` and `allHeaderFields` (https://developer.apple.com/documentation/foundation/httpurlresponse) In that screenshot though it looks like you passed the try statement without exiting in the catch block so I suspect the request is actually succeeding
And will swift ever become a full cross platform, like flutter? I can dream, no?
Finally they add official support for flutter... ah no :v
I am expecting that we are going to see a ton of hacky things to make it look exactly like we want. But that's no different than today.
Old Mac developers know you stay current.... or the bus you missed will loop around and run you over. &amp;#x200B; xCode over CodeWarrior and Cocoa over Carbon being two examples.
Pro developed won’t be using swiftUI for 2 years yet I expect
yep first thing came to mind was WinForms development - which I agree is a good thing. Could knock out apps so damn quick in WF it was crazy!
Using this instead of Autolayout, I have a feeling that we might able to develop apps on the iPad in the future. Plus, iPad have its own OS now.
I'd say android development is pretty easy nowdays, given that almost all of the SDK moved away from the OS and are updated on a monthly release as part of AndroidX components. It's not perfect, but you rarely API limited in android.
Try to convert your explanation into pseudo code. Think it through and you’ll nail it.
If your app doesn’t need to support below ios 13
System frameworks are part of the OS, what did you expect?
That they back ported it to iOS 12 at least. They've done that before with new features.
You don't have to manually update your UI when your data changes. You define the UI declaratively in terms of the state and when the state changes, the UI will update itself. It is called "reactive programming". You might know [React](https://reactjs.org/) which is a the most well-known UI framework on the web. And React Native which enables you to create cross-platform native(!) mobile apps.
I don't think this is necessarily a replacement for RxSwift. In other languages that have streams already, Reactive Extensions extend those streams (see RxDart)
Thanks, I'm working on that now.
When i try to `print(response.statusCode)` or `print(response.allHeaderFields)` in my try statement. i get the error value of type 'URLResponse?' has no member 'statusCode' or 'allHeaderFields'. It feels like it's not a subclass of HTTPURLResponse.
&gt; ...based on top of inheritance rather than functional composition. Inheritance? What makes you said that?
Too much clicking is indeed a thing to some of us :/. The guy in the video is actually not an idiot and has very educative iOS development videos. :/ Storyboards are good. I prefer coded UI. I learned a lot from coding my UI. Plus using a MBP, storyboards are just too large for my small screen
His arguments are still poor, and he's obviously a individual developer. If he worked in a team of 5-10 people on a app that's maintained over 5+ years with tens or hundreds of millions of users, he would care more about arguments about maintainability and ease-of-onboarding for new developers, than when writing a app that's just maintained by himself. &gt; Plus using a MBP, storyboards are just too large for my small screen If you're working professionally, you should already have a external monitor (or two). So it's kinda a moot point.
I formulated my sentence wrong, sorry. What I meant is that in Google's case, Jetpack Compose doesn't use any inheritance in any way(Though they process @Composable annotation in a way that unwraps it by transforming functions into extensions for Ui Composer http://intelligiblebabble.com/compose-from-first-principles/), while Apple makes it through components that extend View, superclass of which, I assume, handles the logic. Besides that, both look very similar react-like in logic.
You are right, they are not obsolete today. Just soon. And I don't mean to diminish the frameworks, they've been great. But looking more long term they are on their way out
If swiftui goes full cross platform one day it will be a dream come true!
don't forget swiftui will only with with macos 10.15 beta as well.
I updated the [repo](https://github.com/jeed2424/prototype_ODR) with the modifications you suggested. (I also cleaned the build, which I hadn't done in a long time, but it didn't change anything)
This is an implementation of the observer pattern. The purpose is to watch a value and do something when the value changes (like update the UI). &amp;#x200B; In the given snippet you have 2 ways of creating bindings: `bindTo`, and `bindAndNotify`. The difference is that with bindTo - you do not get the initial observed value. In this case I think you likely want bindAndNotify. I think you are looking for something like this: &amp;#x200B; `name.bindAndNotify { [weak cell] cell?.textField.text = $0 }` &amp;#x200B; This is a pretty simplistic implementation of the observer pattern with no apparent way to release the binding. This presents problems, especially when binding to tableview cells. These cells get re-used so every time a cell is setup a new binding will be created to it without the previous one being released. &amp;#x200B; See RxSwift for a more complete implementation of the Observer pattern.
Already installed that. The Photos app have 100% crash rate, Karabiner doesn't work :( Google Chrome seems to have problems/lag as well, and Alfred's indexing is broken.
The compiler is complaining because the URLResponse has not been cast to an HTTPURLResponse Just use `debugPrint(response)` and it will print out the entire object
It’s a protocol. Structs can’t inherit.
This is what the debugger printed. &amp;#x200B; `Optional(&lt;NSHTTPURLResponse: 0x600003602880&gt; { URL: https://reqres.in/api/login } { Status Code: 400, Headers {` `"Access-Control-Allow-Origin" = (` `"*"` `);` `"Content-Length" = (` `26` `);` `"Content-Type" = (` `"application/json; charset=utf-8"` `);` `Date = (` `"Mon, 03 Jun 2019 22:34:24 GMT"` `);` `Etag = (` `"W/\"1a-EGIcyP6BIiCXl5Gb1aph5CGf4VQ\""` `);` `Server = (` `cloudflare` `);` `Via = (` `"1.1 vegur"` `);` `"cf-ray" = (` `"4e15225c5d23d8b1-AMS"` `);` `"expect-ct" = (` `"max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""` `);` `"x-powered-by" = (` `Express` `);` `} })`
I doubt it'd be like Flutter. You'd be able to use it for the business logic across multiple platforms, but I don't think SwiftUI would work outside Apple platforms
This is what I get when I input a correct user. The response seems to be correct. why does it keep going into the catch. &amp;#x200B; `Optional(&lt;NSHTTPURLResponse: 0x60000116ae20&gt; { URL: https://reqres.in/api/login } { Status Code: 200, Headers {` `"Access-Control-Allow-Origin" = (` `"*"` `);` `"Content-Length" = (` `29` `);` `"Content-Type" = (` `"application/json; charset=utf-8"` `);` `Date = (` `"Mon, 03 Jun 2019 22:38:04 GMT"` `);` `Etag = (` `"W/\"1d-lGCrvD6B7Qzk11+2C98+nGhhuec\""` `);` `Server = (` `cloudflare` `);` `Via = (` `"1.1 vegur"` `);` `"cf-ray" = (` `"4e1527c00adebdfa-AMS"` `);` `"expect-ct" = (` `"max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""` `);` `"x-powered-by" = (` `Express` `);` `} })`
And what is the payload if you `debugPrint(data)` for the same request?
&gt;Apple makes it through components that extend View, superclass of which, I assume, handles the logic. You really inherit from View. But this is a function call with closure as the only parameter: ```swift VStack{ // children/subviews } ``` But inheritance is probably useless as React taught me. However I do not understand why do you declare custom component as follows: ```swift struct Greeter: View { var name: String var body = some View { Text("Hello \(name)") } } // and then somewhere... VStack { Greeter(name: "World") } ``` Why ```struct```? Why declaring params inside the component using ```var```? What is ```some View```? I don't code Swift and this seems like magic.
Actually, by then, it seems like that'll be when most devs will get to use it.
&gt;No need to dig into storyboard shit to see if anything was configured there. The same can be said for projects that put all the configuration in the storyboard.
it is printing 29 bytes (in the debugger it still says 0 bytes)
Can you print out a readable string of the data using `String(data: data, encoding: String.Encoding.utf8)`
it is printing `Optional("{"token\":\"QpwL5tke4Pnpja7X4\"}")`
it seems to error on dispatchQueue.main.async{ and go into the catch from there
I am very new to iOS programming and I'm wondering about this. I saw a tutorial where the person created a new storyboard and viewcontroller.swift file for every new viewcontroller, instead of dropping everything into one storyboard. Is it generally best practice to create new viewcontrollers in a completely new storyboard? Or is it okay to use a few viewcontroller in a storyboard, and what would be the limit? Would appreciate your opinion
🤯
So the request is working correctly and you're getting a token back. The issue is that you're trying to decode an ErrorResponse object from the JSON which contains a `token` parameter. You will want to check the response code when the request is complete. If it is between 200 and 299 inclusive, you should decode a `LoginResponse` object. If it is 400 to 499 inclusive, you should then decode an `ErrorResponse` object. To check the status code, you will have to cast `response` from `URLResponse` to `HTTPURLResponse` and then you will be able to access the `statusCode` property
True, but it’s not like UIKit is going anywhere anytime soon. It’s usable on both Obj-C and Swift and, most importantly, it’s stable.
thanks a lot man its working properly now.
I think the best practice is to try to break up your app’s views into logical groups. Say for example that you’re making a banking app, your account views would go in one storyboard, bill pay on another and settings in yet another. That being said, I’ve built app’s before where everything lived in a single monolithic storyboard. There’s nothing to stop you from doing this and it compiles just fine. It’s just slow to open in Xcode and is generally looked down upon. Though I’m sure more people do this then they will admit on this sub. As for housing just a single view in a storyboard, I mean I guess you could do that, there’s nothing on the technical side of things stopping you, but it’s not what I would do! Are you sure the tutorial was talking about storyboards and not XIB’s though?
Yea that's prob the most striking point for me rn. There are tons of resources and tutorials for storyboards, but none or only very few for SwiftUI and I don't have the mental capacity to be able to learn it rather quickly w/o good beginner-friendly tutorials I think. I guess I'll continue to learn storyboards and keep my eyes open for potential good tutorial-series for SwiftUI popping up in the future
Plus on top of that you can get a job knowing UIKit. I doubt anyone is going to want to pay $100,000/yr for you to learn SwiftUI on their dime anytime soon.
RxSwift will still be useful, especially for networking. No need for its bindings anymore, though.
Simple? Delegates are a mess. You have to conform, set it, and then implement the methods. Three steps when bindings does it in 1.
That's why RxCocoa's (or any framework that provides bindings) bindings are a joy to use.
That's not going to happen. Designers want nothing to do with front-end bugs (they will happen no matter what UI framework you use), and back end devs won't either.
The live editing got me going
I thought delegates were a mess too... But then I started using them and 😍
No problem. Whenever you're debugging HTTP requests like this, make sure you know what the status code and the data being returned are exactly. After all, you need to know exactly what response data your code is working with
Same, I had great hopes, but now I doubt I will be able to use this new feature for a very long time 😭
Should we expect articles like swiftui spells doom for react native? Lol
Doubtful it is only available for iOS 13+
Oh okay thank you, looking forward to it!
cool
/r/Firebase
I see, breaking up into logical groups makes total sense. I'm currently working on a very simple app, so it won't be needed I think, but definitely good to know. To be honest, I'm not entirely certain if the tutorial uses storyboards or XIB'S. I quickly looked XIB's up but I'm not too sure what it is yet, and I think I would have known better what it is if they were using those! Anyway, thanks for the response. Learning step by step
Correct me if i am wrong, but would enableing swiftui make our apps avalable only on ios13? So not sure about adding swiftui to existing apps :/
I find uikit anything but stable, it is buggy as hell, complex tableview can be pain in the ass. My thought is it will uikit will go away similar speed as objc is leaving the stage, which is fast a lot. Ofcours it will depend on apps and teams, smaller teams and apps will implement it probably next year, while big corporation will stick to ui kit for 3-4 years for sure.
Quick question, will swiftui work using storyboard/xibs or will those days be over?
Yeah damn pro devs hurry up its already been half a day
I’m working on a conversion to dart and flutter code from SwiftUI 😁
composition is by way of “statements” within braces, specialized configuration like string of a label are by parameters, common style parameters are by way of appended “dot” properties. makes sense to me
there’s a session later this week about custom ui elements https://developer.apple.com/wwdc19/237
Time to learn Swift!
I don’t think that will impact anything. You still have beautiful apps now that are either poorly put together (logic wise) or marketed poorly. Hopefully it will help the more used apps be more appealing, but it won’t help with the flooded market issue.
Less code? 🤪
Um, SwiftUI *is* programmatic, highly abstracted declarative-looking programmatic UI. The storyboard alternative is data driven, and declarative can also be data driven. However SwiftUI declarations are formerly structured, amenable to tooling, *code* that gets executed and builds UI at runtime. i.e. programmatic.
I don't see how it would make selling apps harder. Making an app has always been "easy", what's been hard to convincing someone who expects everything to be free to part with 99¢ (or more) for an app that you put months and months of life into.
I saw it coming but still it's quite sad, most of the clients would ask for their apps to support at least one iOS below the current one, that means we won't be able to use this for a couple of years.
I mean, Storyboards technically don't require any code... 😛
That’s one thing I struggle with is knowing how much to charge for an app so that I still make money but people are willing to pay for it.
In my mind, as long as my app pays for its own server bills, I’m happy. 😛
Easy, don't use storyboards/IB. They are horrible as your app grows, horrible for unit testing, horrible for reusing components. The day I deleted them all and the stupid control dragging nonsense is when development became 10x easier.
Swift is a cool language, but dealing with the left over Objective-C stuff was pretty strange. This is a HUGE boost for that language! Awesome stuff.
Except you cannot do in IB all you can do in code.
It's not really _the_ builder pattern, it's a new DSL for building UI. The full pitch is on the [Swift Forums](https://forums.swift.org/t/pitch-function-builders/25167).
There is that weird new framework called Combine, which seems like an Apple attempt for rfp.
Good way to look at it 😂
My understanding is that it still will dequeue and recycle views. It’s just handled for you now when you bind your data source with the table.
Yeah. When I saw the GUI for building the UI, I was sad. But got excited when I saw that changes in the GUI were directly correlated with code changes. I’m very excited to mess with this.
Why Apple don't care about framework developers? I am and SDK developer and if I would use swiftUI when the app who integrates our framework could not edit our UI... Why it is a case? And also only IOS 13.. our SDK must support IOS9... This is hell, I think I will have to use storyboards for 10 years. At least clients can edit theirs UI
We go x-1, and our app is #1 in our category... But yes, we'll be waiting a while to adopt SwiftUI. 😖 First thing out of Cupertino that makes me wonder if Apple actually gives a crap about developers...
This.
This sounds true on paper but in reality is not. We need to have support for auto resizing cells, animations, editing, headers, footers, preloading etc and even our current controls have various bugs with this (especially collection views). If I can't work around some of these bugs using the new api it just won't work. Seems too simple on its own to be of value unless I have access to the underlying api.
When Swift was not part of the OS, yes. Now you won't package the Swift runtime for iOS12.2+
&gt; common style parameters are by way of appended “dot” properties. This makes sense, thank you. Is it referenced somewhere?
Anyone try macOS apps using it?
Thank you u/xbloodyhooker, u/cichy202, u/koalaSea and u/hedgeborn for your time and help and I got it working by initialising the effect in the viewDidLoad and then just letting it appear in the button action like that: import UIKit class TestViewController: UIViewController { var blurEffect: UIBlurEffect! var visualEffectView: UIVisualEffectView! var effect: UIVisualEffect! override func viewDidLoad() { super.viewDidLoad() let backgroundImage = UIImageView(frame: UIScreen.main.bounds) backgroundImage.image = UIImage(named: "GetStartedBackground.jpeg") backgroundImage.contentMode = UIView.ContentMode.scaleAspectFill self.view.insertSubview(backgroundImage, at: 0) blurEffect = UIBlurEffect(style: .regular) visualEffectView = UIVisualEffectView(effect: blurEffect) effect = visualEffectView.effect visualEffectView.frame = view.bounds visualEffectView.isHidden = true visualEffectView.effect = nil } var animator: UIViewPropertyAnimator! @IBAction func makeBlur(_ sender: Any) { view.addSubview(visualEffectView) visualEffectView.isHidden = false animator = UIViewPropertyAnimator(duration: 0.3, curve: .linear, animations: { [weak self] in self?.visualEffectView.effect = self?.effect }) animator.startAnimation() } } &amp;#x200B; But now I have the problem that when I want to deblur it from another swift file, it gives me this error: `Thread 1: Fatal error: Unexpectedly found nil while unwrapping an Optional value` Then, if I add a ? to "visualEffectView", nothing happens. Down below you find the code where I added the ? in the deblurSelection function. &amp;#x200B; **Code in the View Controller with the blur effect:** func deblurSelection() { UIView.animate(withDuration: 0.3, animations: { self.visualEffectView?.effect = nil }) } &amp;#x200B; **Code in the View Controller I want to run the "deblurSelection" function from:** @IBAction func doneButton(_ sender: Any) { let sb = UIStoryboard(name: "Main", bundle: nil) let secondVC = sb.instantiateViewController(withIdentifier: "blurBackground") as? ViewController secondVC?.deblurSelection() } Does anyone know why nothing happens? &amp;#x200B; Thank you guys in advance!
[removed]
The entire purpose of designing a programming language is to make it easier for people to create what they want. If SwiftUI is as great as it looks, it will allow for people to do that more.
Sorry if I’m being stupid - does this mean if I rewrite my app to use SwiftUI, the actual app itself won’t work on anything below iOS 13?
This opens up new way for Design to code. I mean people were trying to develop plugins for Design tools like Sketch. With SwiftUI, i hope it would be Awesome.
You can’t be serious 😂
Yes.
Well, work harder. Damn it, now I sound like a PM
RN is not really full native, there are still JS and bridge layers over native platform. In some way Flutter is more native than RN.
It's not even released let alone widely adopted. Plus works only on iOS 13.
&gt; In some way Flutter is more native than RN. How so? There is Dart and Flutter has also runtime. &amp;#x200B; And how one can do cross-platform with Flutter? There is \`CupertinoButton\` and \`MaterialButton\`.
It sounds like a 5 point feature. Should be done tomorrow.
Obsolete trailblazers, then.
That'd be really clever of them. Minimum requirements: 2019 Mac Pro.