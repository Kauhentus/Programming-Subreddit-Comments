I have done code reviews for a couple of different companies for hiring purposes... Before you read the below, please note that I am being highly critical for your benefit. I wouldn't say all of the below to my boss (the one who makes the hiring decision.) What I *would* say is this: Based on my code review, you seem to be entry or possibly intern level. I would not want to trust you with a project of your own, but if you were amiable to instruction I could see having you work on a small project (closely supervised) or very focused parts of a larger project. If the company isn't currently looking for an entry level developer, then they would likely decide not to hire you. If you are humble about your skills during the interview, and show a strong willingness to learn (and the company can handle the training cost,) then you would probably get the job. General problems: The code in GitHub doesn't compile. It looks like you used some cocoapods but you didn't include the podfile in your repo. As such, the code doesn't compile out of the box. That's a huge red flag for me. Most of your variable names and the functions you named start with an upper-case letter. You aren't putting a space character after your colons. The standard Swift convention is for variables to start with a lower case letter and for there to be a space after every colon. This tells me that you aren't interested/knowledgable in standard Swift conventions. Another huge red flag. You seem very stingy in the use of whitespace in general. There are multiple files where you left the templated bits that Xcode adds on file creation in the files. This shows to me a lack of attention to detail. Regarding PurpView.swift: Your Price1, 2, 3, &amp; 4 variables screams for the use of an array but you didn't use one. You didn't remove the templated code that Xcode puts in on file creation. Regarding MapViewController.swift: You have wrapped some of your views in a PurpView, but then reach into PurpView and directly manipulate its internals; that's and example of "messy code". Read up on the Law of Demeter. Unlike in other parts of your app, you *are* putting whitespace around the equals signs. This inconsistency is troubling. Regarding AppDelegate.swift Did you commit actual API keys into GitHub? Into a public repo at that? Regarding ViewController.swift Use of an NSMutableArray is a rather odd choice. I expect a Swift array instead. Your `ViewController` class implements several protocols, but you don't have them sectioned off in any consistent way. Unlike the files above, this one has lots of comments, but none of them are useful and all of them are quite redundant. Your `tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath)` function spends 25 lines setting up a cell. The cell should know how to set itself up. This is a very leaky abstraction. Regarding LocationManager.swift Very inconsistent indentation. Regarding BurritoTableViewCell.swift This looks very much like the PurpView class. Lot's of redundancy here. That would be one thing if you were using storyboard/nib files, but not in the context of a no-storyboard system. Regarding NoStoryBoardTests.swift There are no tests at all. 
While I don’t know about the slowness of IB I disagree about joining a new project with IB. If you want to visual the project either use the app or if it’s being built use the mocks. It’s much more beneficial to be able see and learn about interface changes through previous code reviews/commits because you can actually see how it works and how your new team does things instead of a bunch of garbage XML. 
The reviewer is correct. I didn’t look at everything, but what I saw had no comments, inconsistent spacing and formatting, lots of style issues, etc. Attention to detail is critical for a Software Engineer. A sample project is your place to shine. The code shouldn’t just work, it should look great. Lots of comments, consistent styling and naming, all the best code practices on display. If you write code like this when you’re putting on your best, what will you do under deadline pressure? 
Thank you so much for the information. I will make sure to act on all of this. As for the tests well the company I applied for told me they are actually not doing any unit tests at all. I just had a few questions &gt;Your ViewController class implements several protocols, but you don't have them sectioned off in any consistent way. Right so I should declare all the delegates in viewdidload one after another or move them into another function? &gt;This looks very much like the PurpView class. Lot's of redundancy here. That would be one thing if you were using storyboard/nib files, but not in the context of a no-storyboard system. Maybe its hard to see this from the code but these two views are supposed to display the same information but with much different constraints. &gt;You didn't remove the templated code that Xcode puts in on file creation. I had no idea this was so important. From now I will remove all of these in my newest projects. &gt;Most of your variable names and the functions you named start with an upper-case letter. You aren't putting a space character after your colons. The standard Swift convention is for variables to start with a lower case letter and for there to be a space after every colon. This tells me that you aren't interested/knowledgable in standard Swift conventions. Another huge red flag. Sorry about that I just started writing swift about 3 weeks ago. I should have focused more on the conventions. &gt;Based on my code review, you seem to be entry or possibly intern level. I would not want to trust you with a project of your own, but if you were amiable to instruction I could see having you work on a small project (closely supervised) or very focused parts of a larger project. This was very humbling to hear. I have been working as a Objective-C dev at a EuroStock 50 bank (like Fortune 50 for USA) for the past 1.5 years. I work with a team of 20 other developers and I have daily code reviews from my manager. I guess I have spent to much time developing at the bank where we have a lot of templates and pre-sets and work more on the business logic layer. Thank you for your comments I will apply what I learn. 
&gt; swiftlint Ok I will install and use this. Thank you so much. 
tagging u/dinorinodino for help
There was a mention of the source code, but no code to be found. The tutorial looks good, but might have too much detail. I didn't go thru all the steps, but it had a lot of screen shots and seem to cover things in too low of detail for things that weren't directly related to maps and parse. I would crop the screen so you don't have so much info on there and maybe shade the screenshot except where you want them to focus. So highlighting sections of the screen to make it quicker to read. I would break it up into sections so it's not so long. Take the number of steps and group them into a section. Remember the reader doesn't want to spend a lot of extra time learning something. Covering too many things not related to a narrow subject can spend the users time. Allowing them to see the section and what's going to be covered in that section, saves them time.
I am sorry I tough the view controller was supposed to connect my views and my model. I am asking in the practical sense where should the array that stores my data for my tabelview be? It should be in another class? A whole new class just to store an array of items for my tableview? 
Just a thought, but... Looks like your deque isn’t resetting the cell that it is reusing back to the default square corner. So when it gets reused it is the rounded corner. Try resetting it to normal up front in the cellforrowat and then as you are in the cellforeowat you redecide if it’s the last and round it back off.
Have you tried creating a view and rounding the edges of the view and placing the table view inside of that view. Then you could use a simple stack view to stack them with the appropriate space between them. I would have to see if the edges would round on the table if done this way, but it may be cleaner than monkeying with cellforrowat - as the rounded edges would be simply applied to the container view.
\&gt; A sample project is your place to shine. The code shouldn’t just work, it should look great. Lots of comments, consistent styling and naming, I had the exact opposite mentality. I thought since it was a sample project they would be more interested in the architecture then the implementation because the implementation is not for production. I will change my mentality. 
https://stackoverflow.com/questions/50980323/tableview-scrolling-get-the-wrong-last-cell Someone solved my question is stack overflow. Thanks
https://stackoverflow.com/questions/50980323/tableview-scrolling-get-the-wrong-last-cell Someone solved my question is stack overflow. Thanks
Yes - they said exactly what I said above... glad you got it. I’m still thinking the container view may be cleaner - would be willing to give that a try.
Yeah that will be cleaner but Ill do that when I finish up the whole project. One more problem, see the label below the header image and the title label, anyway to set it to dynamic height as it is currently truncate tail. I have tried some calculations to calculate the height, but to so success. I think ill open a new thread
Definitely messy. - Indentation is inconsistent. There's no consistent pattern, and code blocks aren't intended logically or consistently. Use four spaces (or a tab, if that's your thing) for indents, and use consistent rules about indentation of code blocks. - Inconsistent newlines. Stick to a set of whitespace rules and apply them everywhere. For me that means one blank line between methods, one blank line between logical blocks within methods, and one blank line above comments. - Inconsistent spacing around keywords. You've got = with no spaces around it, which is not a common or favoured style, but you've also got = with spaces around it. You also have inconsistent spacing around : characters. Pick one style, and stick with it. (Ideally pick the most common style for the language you're using). - Inconsistent variable naming. Swift has naming conventions for use of camelCase. Learn them and stick with them. So yeah, even before getting to looking at the functionality and architecture of the code, it's already presenting itself as sloppy. As a programmer you're essentially a tradesman, hammering digital nails into digital wood. You want your tradesmen to do a tidy job, get their lines straight, and clean up after themselves. Your lines aren't straight, there's no consistency to the style, and you've left cruft around the place after finishing the job. Grab a ruler and a broom, make sure your lines are straight and consistent, and sweep up after yourself once the job is done. You've got to be a tidy tradesman before you can become a master craftsman. 
&gt; Are these such huge mistakes as to eliminate me from candidacy for this position? Interviewers are looking for red flags. Sloppy presentation is a red flag. It's a warning sign that the programmer isn't putting care and attention into the structure of their code. Some programmers treat their code almost like poetry, and put a lot of attention into every newline and whitespace decision, so that the code is visually appealing and easily readable. Some programmers don't care about going that far, but they still stick to a consistent set of styles and use them across the whole project. If a programmer isn't even sticking to a consistent set of styles, yes, that would eliminate the candidate. It shows a lack of care and attention to presentation, which is important when you're working on a team. 
I assume you have it set to 0 for number of lines. What constraints do you have on that label? Also is the label not expanding because the hwightforrowat delegate needs to be used and a larger size returned for that cell than others? Might try using the table view auto height for the heightforrowat method.
I came across this issue in my own code a few days ago, and it appears there is a problem with the removeKey method. As a fix for now, just use the removeValue method. See this [issue](https://github.com/firebase/geofire-objc/issues/111) for more details.
already set to 0 lines [this are the constraints](https://imgur.com/lGkajju) I am trying to use the 'heightforrowat', but when I get the frame.height of the label, I get a static height same as the height in storyboard. And when I print the text of the label, it is the dummy text I set in storyboard, so the height is the same across all data.
This is honestly some of the worst code that I’ve ever seen. 
Been learning Swift and iOS for the least year. Recently got into writing good clean code. Looked at your code, they might be abit right. Don’t mix controller and network code. You should always seperate your networking code. Another thing, use extensions to seperate you UI code, like the tableview delegate methods. You can use extensions to seperate is and make it cleaner. 
Hey, ryhan112, just a quick heads-up: **seperate** is actually spelled **separate**. You can remember it by **-par- in the middle**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Glad you got it solved :)
You know about the header height problem? How can I calculate the height of the header dynamically? 
Join us over on the [ios-developers](https://ios-developers.io/) Slack and post what you have so far in the #help channel. It’s a lot easier to manage code there, and there are plenty of people far more experienced than me who can also offer some input. 
Coordinator master race :D
I prefer creating VCs programmatically using Snapkit. The maintenance is easier, merge conflicts are easier to resolve and localization is much easier. As for navigation, I like to use flow controllers.
It sounds promising, and the Health Records API seems to be available as Beta. I think you can use it to do data transfer with a FHIR-configured server. However, I haven't used it yet, I just read their developer guide on the topic. ([https://developer.apple.com/documentation/healthkit/health\_and\_fitness\_samples/accessing\_health\_records](https://developer.apple.com/documentation/healthkit/health_and_fitness_samples/accessing_health_records)). I hope that these efforts are continued. FHIR seems to be the best shot at an international, interoperable health care communication standard. There is a framework for Swift to connect to a FHIR client ([https://github.com/smart-on-fhir/Swift-SMART](https://github.com/smart-on-fhir/Swift-SMART)), but it is quite messy. 
BurritoTableViewCell: Not following Swift standards of adding a space before and after an equal sign, or after a colon. Unnecessary override method awakeFromNib not being used. Not following Swift standards by ambiguous variable names and not using camel case. Unnecessary extra lines. No grouping or arrangement of similar code. AppDelegate: API keys aren’t constants. LocationManagerProcess: Not following Swift standards of adding a space after a comma or before curly brackets; missing space after colon. Unnecessary use of “self”. Missing spaces after or before equal sign. Break statements in switch cases are redundant and not necessary. No safe checking of locations array by checking size first. Use of semicolon is not necessary; and why use it on 1 line only? Violating Swift standards: variables should be camel case, not capitalized like “Delegate.” LocationServicesProtocol: Missing space after colon. MapViewController: variables should be camel case, NOT capitalized. Restaurants is a terrible class name. Should be Restaurant. Too much code in viewDidLoad. No grouping by methods. Unnecessary space before variable declaration. Missing spaces before and after equal signs. If statement could be a switch. Unnecessary use of semicolons. Overriding method not in use. I removed unnecessary comment. NetWorkManager: Misspelled network; should be Network. You repeat same errors with capitalizing variable names and missing spaces. HUGE RED FLAG accessing JSON values without safe checks. Method names should not be capitalized. Misspelling of UI. You keep repeating the same mistakes. Not using camel case for variables and methods, unnecessary semicolons, missing spaces, and no grouping of code by methods. Your code is bad and would be rejected in a pull request here at my job. 
WHY in the universe did you apply to a job after 3 weeks of Swift experience???? 
Warning and errors are bad. Nobody wants to open an Xcode project shared among others with warnings popping up. It’s embarrassing. 
In your model. 
let Unwrapped: Bool? = are!.you!.sure! ?? “false”
You’re using !, which means “I know there is a valid URL, so use it.” Except it’s not a valid URL and you are forcing it to get the data, which is nil and crashes. This is known as implicitly unwrapping an optional and should ALWAYS be avoided. This isn’t allowed at any iOS job. You should be safe checking that there is no nil value. Read up on “if let” or checking for optionals. 
“URL(string: url)!” is the problem. URL returns back a URL object IF it’s valid. If it’s not valid, it will return nil. In your case, it’s returning nil, and you’re using “!” To force out the value it return, but there is no value, except nil, and you’re getting nil by force, which is the error. Your url is not valid because URL is returning nil. You need to use “if let” to be safe. “If let” means that it will put the value returned by URL into validURL ONLY if it is not nil. if let validURL = URL(string: url) { // will only go here if it is valid url. // rest of code inside here. }
Except Java has way more applications and wasn’t made for Android development. Swift was made for iOS, MacOS, etc. Development. 
Swift is literally used for either iOS, macOS, tvOS, or watchOS. 
Two more things from my side. I did not see them mentioned here, but feel free to ignore if they have already been mentioned. 1. When not using Storyboards/Xib flies, you can do so much more in the init() of a viewController, which saves you from using implicitly unwrapped optionals. So e.g. in MapViewController, you can just pass the selected restaurant into the init, and you can then store that as a let. One source of bugs fixed. This is important, as when you only init your optionals in viewDidLoad, there are a lot of opportunities for people to call into your view controller’s code which could mean you access the optionals before viewDidLoad actually happened, leading to a crash. 2. There is a definite bug in your table view cell handling. You do not implement prepareForReuse in your Burrito cell to reset the views’ properties. When you reuse a cell, and then only set isHidden = true for price level 4, the other ones could still be hidden even though you do not want that. They are not automatically reset when reusing, you have do to that manually. You should have isHidden = false for every price level in the cell’s prepareForReuse method.
Because I am unemployed now and I need the money. I know Objective-C but the market has left me behind.
I find most courses, at some point, feel like they progress a bit too quickly for me. Part of that is different teaching styles, and part is my necessity for repetition to learn something. I'll usually be doing two different resources at once; it helps build confidence when I have those "I already know how to do \_\_\_\_\_!" moments, the repetition helps me truly learn it, and often hearing things taught in multiple ways will get me over any conceptual hurdles. I've also found, as a new developer, learning has to be a 6-days a week process for me. If I take too many days off I start to backtrack on memory retention pretty quickly. There's a great community for people who are changing careers/building side-projects/etc! Find some folks to follow on social media, get invested in dev communities both online and local/in-person, and just keep at it. I find the community aspect to be a huge encouragement to keep going when I feel like I'm not progressing or just spinning my wheels. An awesome quote that helps me frequently: "People overestimate what they can do in a week, and underestimate what they can do in a year."
If you feel that way can you please provide some comments on how it can be better? 
&gt;HUGE RED FLAG accessing JSON values without safe checks. I used Swifty Jason which always returns a value.
Everyone else has said the reasons. 
Well thank you for kicking me while I am down and adding nothing to the discussion.
Like I said everyone else has given their reasons. Listen to those reasons and sometimes being kicked while you’re down is the fuel you need to get better. I used to write code like this years ago and people told me it sucked and I pushed myself to get better. 
If you want to work on making your code look prettier with indentation and so on, look into using swiftlint. It will tell you when you are not following standard guidelines
Same network.
I'd have to see more of your project to see why you're getting a EXC_BAD_ACCESS. The error indicates you're trying to use an object that has already been released, are you setting any properties within the closure? By the time the network access completes the object you are setting them on might have been released.
As an Objective C developer you'll be able to pick up Swift quickly ... But potentially employers aren't stupid; they will be able to tell that you aren't proficient in Swift and won't have faith that you can write clean and maintainable code. I'd strongly recommend picking up Erica Sadun's Swift book and giving it a read, with your existing experience with iOS development you should be able to get to a good level of ability pretty quickly.
&gt; ... I should declare all the delegates in viewdidload one after another or move them into another function? In Objective-C I would use a pragma mark to call out all the methods that implement a particular interface. In Swift I implement each interface in a separate extension to the class. (https://softwareengineering.stackexchange.com/questions/301621/for-what-reasons-would-you-use-a-separate-class-extension-for-each-delegate-in-s) &gt; ... these two views [PurpView and BurritoTableViewCell] are supposed to display the same information but with much different constraints. In that case I would expect PurpView to have two different constructors or possibly configure methods. One for display directly on the view controller and one for displaying in a table view cell. Then the BurritoTableViewCell would merely contain a PurpView that is properly configured. Regarding the leaving in of template code and the use of standard conventions (and also as a bit of a replay to someone who called reviewers of your code "S--theads".) Ensuring that your indention, capitalization and whitespace use is consistent is not important to the compiler, but it *is* important to your human readers. Like any other mode of human communication, there are style guides and an expectation that they will be followed. Strictly speaking they are arbitrary, but then so is the http protocol. We establish and follow standards in order to facilitate communication. Also, these issues are the sort of minor details that an experienced developer does as a matter of habit, they don't even have to consciously think about them. It's an indicator of experience.
ok
Here is what I came up with... https://github.com/cyberclectic/RedditHelp
Thank you for that reply. I feel very embarrassed because almost every job posting is in Swift. I have only seen one Objective-C job. I thought I could do Objective-C development for another 3 years no problem.
I'll keep an eye out for this.
Okay, there are two separate problems here. 1) The popover is not working because your method signature is wrong and is not being called when you expect. It needs to look like this: override func prepare(for segue: UIStoryboardSegue, sender: Any?) Notice that the sender needs to be optional, that's why it didn't match. And once it matches, Xcode will yell at you for not having the override keyword there since you are overriding a super class's method. The fact that the override keyword was throwing an error if you had it on your method would have been a clue that something was wrong. Also, as a debugging tip, set a breakpoint or add a print statement to a method to check that it is being called when you think it should be. Side note: the reason this is necessary (and why it wasn't working on the iPhone) is because popovers used to only exist on the iPad. So the segue just works out of the box there. Apple eventually allowed popovers to come the iPhone but making it appear requires jumping through some hoops like explicitly setting the modalPresentation and the ensuring that the presentation delegate returns UIModalPresentationStyle.none. That's why the code in 'prepare' is important. 2) Completely separate from the popover, the text size is not changing because you are not setting the delegate to receive the actions. ViewController is being set as the popoverPresentation delegate, but that is completely separate from the text size delegate. You need to set both for things to work. Add this to the 'prepare' method: if let popover = viewController as? Popover { popover.delegate = self } 
&gt; Do you guys believe that this disqualifies me from this position? Yes, because it show a lack of personal care (warnings, no linter), a lack of understanding of collaboration tools (git, code reviews) and a lack of respect for your reader (would you read a book written with a messy handwriting, arrows pointing everywhere and half torn pages?) &gt; If you were the hiring manager you would pass because of this ? Definitely, not really "because" of this, but because it says something about you that isn't compatible with the working environments that I expect. &gt; Also what can I do other then double checking in the future to make my code "not messy"? Work with a buddy! Find some people who care about sharing, building and making great things with great foundations. Finding people who care about the craft of code is hard but gives you the opportunity to grow as a développer and as a person Good luck
\&gt;However, I was thinking you were coming from a .NET background (where title case variable names are the standard.) Did your bank job require title case variable names? I ask because that isn't the standard for Objective-C either. Yes in the bank we always use title case variables and in fact many of variables. The banking app devs came from .NET and C backgrounds when they first started the app so they used these conventions. I should have realized it was different but other then the bank I have always just done my own small apps. 
But if I remove the !, xCode instantly show up the message saying that I need to put the ! or ?. That's why!
This sounds like you either haven't seen much code or you're spoiled with the code you've seen.
I would have disquified you for `RestaurantsModel.swift`. All var, all implicitly unwrapped properties, no instance methods? This is such a weak type, it can hardly even justify its existence in its current state. It's hardly better than a tuple. Even for a data model, you should still use `let` where possible, give some initializers/instance methods for doing stuff with the model, codable conformance, etc.
If you like this idea, please, support it by putting your hot 🌟 on the github 😇
&gt; Yes in the bank we always use title case variables... Obviously, you didn't *always* use title case because the variables and functions defined by Apple and every cocoapod library you import are all in camel case. 🙂 &gt; Should I make a new file just for the class extensions? Or keep them in the same ViewController? Keeping them in the same file is fine. It's also acceptable to me if you used `// MARK:` to call out the methods that are part of a protocol.
I don’t blame you for thinking that you could do objective-C more but you should love learned Swift the day it came out. Use your best judgement. 
Okay, but don’t BS it. Read On Swift standards. 
I figured but I didn’t look deep enough into the logic. Good. 
You need to understand the WHY it is telling you to put it rather than blindly accept Xcode’s recommendation and expect it to be fine. It’s telling you to add “!” because it is forcing the value returned by URL to be used. If the URL value returned is valid, it works fine. If the URL is not valid, it crashes because you’re forcing it to get a value of nil (nothing). You can’t force to get a value from nothing so it crashes. Which is why I said use “if let” to do safe checks when getting valued from optionals. It is VERY important to understand optionals if you want to be an iOS developer. 
No screenshots or how to use in README?
This is one reason I recommend learning Swift first before learning to apply it in iOS development.
Stop trying to find a quick solution and read up how optionals work and how to safely access them. 
At my job they would be. They are incredibly sloppy, and I work on a team of 30+. Sloppy here and there turns in to a giant heaping ball of slop as people copy your code in random places. Being neat and tidy is incredibly important for my team. Maybe not others, but just giving some perspective. I’m also at a bank, which is why I mention it to contrast your previous position. 
Don't you see GIF image and Usage section in the Readme?
Whoops I forgot to click the view all read me 
🤣
&gt; an instance of a InternationalTransferClass would be called InternationalTransferInstance This is not a generally-accepted good practice. First of all, there is no need to add the word "Class" to the end of the type. If you absolutely need to know that part of the type then it's easy enough to look at the declaration. Most times that information is just noise. Secondly, the easy way to distinguish type from instance is by the initial case of the object: class InternationalTransfer {} let internationalTransfer: InternationalTransfer = ... Third, it's very unlikely that you want to use the exact same name for the instance as the name for the type. You should try to have your instance names describe what they are being used for, rather than what they are. After all, it's pretty easy to look back and see the declaration of the variable to learn its type but if you have a lot of very similar instances it can get very confusing: let internationalTransfer1: InternationalTransfer = ... let internationalTransfer2: InternationalTransfer = ... let internationalTransfer3: InternationalTransfer = ... let internationalTransfer4: InternationalTransfer = ... vs let main : InternationalTransfer = ... let secondary: InternationalTransfer = ... let side : InternationalTransfer = ... let last : InternationalTransfer = ... The unique names stick in your mind and inform you more quickly about what your code is accomplishing. When the names are so similar and don't have any real meaning they are very difficult to work with, especially for someone who is a relative newcomer to your codebase.
Inconsistencies add up but if the code is clear, concise, and bulletproof then a few misspellings and misplaced spaces won't knock you out. I feel what really did it is the amount of repeated code within your application, along with the inconsistencies in style, not following some widely-accepted Swift naming conventions, and the fact that your project doesn't run right out of the box when you download it from GitHub. All of these things together add up to a negative impression that is tough to recover from. However, they are all easily addressed for your next few job applications. Your code isn't bad, it just needs some more attention to detail and a bit more of a critical eye on your part to be [DRY](https://en.wikipedia.org/wiki/Don't_repeat_yourself) and recognize patterns in your code that could be optimized.
Doesn't really look Swift related, you might want to try /r/iOSProgramming 
I used SwiftyJson which always returns a type so I didn’t see a reason to have optionals.
Looks good - what was the drive behind it?
Thanks) Well... First, I thought that I could easily move UITableViewDataSource outside of my view controller, then played with "kinda bindings" in UITableViewCell, and then accidentally I met NSArrayController and all this macOS Cocoa cool staff... And then I could not stop until moved everything out of the app. This was very interesting puzzle though!)) This is third iteration, the first one was a monster - I scare it is on my hard drive!
The Firebase Auth createUser method returns you an user with an unique UID property. You can use this ID as a database key to store custom data for that user, like usernames and other stuff. Then, you can always get the UID from the Auth when the user logs in and use it to fetch the custom data from the database.
Yeah thank you for your recommendation. But unfortunately for you, I didn’t ask for help in that sort of things, I just wanted to make this work, and all the other people helped me and make their friendly recommendation but I don’t need yours 
I had already [given you a solution with code.](https://www.reddit.com/r/swift/comments/8soo30/comment/e13lumm?st=JIQDUG3G&amp;sh=db60ae99) that you didn’t reply to.
This is a good comment from you, you see? That way I get what you wanted to say, the other comments just were offensive 
Because you are stubborn. You have made almost the exact same comment to people in both posts about using “!” And haven’t changed it. And it has taken 2 posts for you to finally see that. 
Thank you for posting your code here for others to review, and to /u/danielt1263 for his criticisms. I think this is an excellent way for you and many others to improve. 
I always see so much disdain for Storyboards, but I couldn't live without them. Having a "live" preview of the UI, being able to preview different devices from Interface Builder, plus setting up constraints and setting attributes (personally) feels much faster. Another huge factor is keeping view controller code small. With programmatic views it makes view controllers much larger, whereas with storyboads all the view setup is in the storyboard leaving the view controller purely for control-flow and setting up data. Obviously view models can minimize this but it feels painful going back to programmatically declared code (though I'd wager others feel the same about using Interface builder!) The main downside is merge conflicts, but when grouping storyboards by function and using basic communication I've never encountered issues with it.
Thanks for sharing this. 
Please provide full error message.
'FBSDKCoreKit/FBSDKCoreKit.h' file not found
Thanks :)
I hid this and the last post because of some mistakes. Not because I'm a stubborn. But well, if you want to just bother people go away! Have a great day
Bit of a weird post for this subreddit but what ever. It isn't beautiful enough for /r/dataisbeautiful. I decided to create the app in Swift because originally it was going to be an Electron app (yeah I know), but decided that I needed this to be as efficient and light weight as possible. I started learning Swift around February 2018, after a few days getting used to Swift I began on my first Mac App. Lots and lots of Google searches of different architectures and Swift practices later and I'm still not close to being done with my app! (I've made some great progress on it, and have put a lot of thought into how it will work and be designed in my head. Slowly but surely.) Raw stats: * Apple Developer Documentation: 912 * Any page URL/Title that contains word "Swift": 3,675 * Google searches containing "Swift": 1306 * Stack Overflow: 1091 Here is the graph with "Any page URL/Title that contains word "Swift"" included: [https://i.imgur.com/qBPk8Rf.png](https://i.imgur.com/qBPk8Rf.png)
I think your declaration of Any is causing issues. Try this instead: let json: [String: [String: String]] = ["authentication": ["username": Username.text!, "password": Password.text!]]
Nope. Hard crash. Thread 1: Fatal error: Unexpectedly found nil while unwrapping an Optional value
It’s the `try?`. change to a plain `try`
&gt; It’s the try?. change to a plain try Tried that pretty early on. Doesn't work. XCode complains "Errors thrown from here are not handled" when you do that. &gt; wrap in a do { } catch { } block if necessary... Thanks, but I'm too stupid to understand what that means. 
Did you add the SDK as a linked framework in your target settings?
Search on Medium for the React Native Training, you're find a lot of articles about AWS Amplify.
Generally a question mark in your code means it is an `Optional`. Think of it as a value that could also mean "no value". For example, an `Int?` means it could be a number or it could have no value. To use an `Optional` you have to unwrap it - that is you check it for a value and pull that value out if there is one. You do that in several ways but the most basic is "optional binding": if let jsonData = try? JSONEncoder().encode(credWrap) { // use the jsonData here } This will give you a non-Optional only if there is a value and then run the code in the curly braces.
Unfortunately I'm still getting a crash. let json: [String: Any] = [ "authentication": ["username":Username.text! as Any, "password":Password.text! as Any]] if let jsonData = try? JSONSerialization.data(withJSONObject: json) { let url = URL(string: "https://hostname/webinterface/api.php?submission=\(jsonData)")! var request = URLRequest(url: url) request.httpMethod = "POST" let task = URLSession.shared.dataTask(with: request) { data, response, error in guard let data = data, error == nil else { print(error?.localizedDescription ?? "No data") return } let responseJSON = try? JSONSerialization.jsonObject(with: data, options: []) if let responseJSON = responseJSON as? [String: Any] { print(responseJSON) } } task.resume() } 
Same issue, unfortunately: Thread 1: Fatal error: Unexpectedly found nil while unwrapping an Optional value let json: [String: Any] = [ "auth": ["username":Username.text! as Any, "password":Password.text! as Any]] if let jsonData = try? JSONSerialization.data(withJSONObject: json) { let url = URL(string: "https://hostname/webinterface/api.php?format=json&amp;package=\(jsonData)")! var request = URLRequest(url: url) request.httpMethod = "POST" let task = URLSession.shared.dataTask(with: request) { data, response, error in guard let data = data, error == nil else { print(error?.localizedDescription ?? "No data") return } let responseJSON = try? JSONSerialization.jsonObject(with: data, options: []) if let responseJSON = responseJSON as? [String: Any] { print(responseJSON) } } task.resume() } I do appreciate your help and I apologize for being a complete idiot with this stuff. 
It would be nice to see a spread of the websites you visited based on frequency. I'd like to see the domain split. Nice work. 
I'm on a mobile but it looks like a good use case for the automatic codable stuff. Getting it working the first time is the hard part. If you want to start with a functional sample project, here's one that demos 2-way encoding/decoding: https://github.com/UberNick/CodableTester I'd be happy to branch it to include your model if you can wait until tomorrow. Otherwise play around with that and try to make yours work. 
On what line? Don't use forced unwrapping of `Optional`values - anything with an exclamation point (other than the negation operator or the not equals operator). Avoid using `[String: Any]` or `JSONSerialization` if you can. They are the older way of doing JSON serialization and, while they can work, they are a pain at times. Instead use `Codable`, it's easier and more straightforward. What are you attempting to do here: let url = URL(string: "https://hostname/webinterface/api.php?format=json&amp;package=\(jsonData)")! That's not a great way to build a URL. First of all, does your server take a JSON string like that? That's very...unusual and potentially very buggy. Secondly, you really should use the proper way to build a URL: `URLComponents` import Foundation // dummy types to mock your actual ones struct Foo { let text: String? } let Username = Foo(text: "name") let Password = Foo(text: "pass") struct Credentials: Codable { let username: String let password: String } if var components = URLComponents(string: "https://hostname/webinterface/api.php"), let username = Username.text, let password = Password.text, let jsonData = try? JSONEncoder().encode(Credentials(username: username, password: password)), let jsonString = String(data: jsonData, encoding: .utf8) { components.queryItems = [URLQueryItem(name: "format", value: "json"), URLQueryItem(name: "package", value: jsonString)] if let url = components.url { print(url.absoluteString) } } 
Follow up: I typed this from a phone, so it might not compile, but your above code should look something like this: struct authentication: Codable { var authentication: creds } struct creds: Codable { var username: String var password: String } let credWrap = authentication(authentication: creds(username: Username.text!, password: Password.text!)) let encoder = JSONEncoder() encoder.keyEncodingStrategy = .convertToSnakeCase let data = try? encoder.encode(credWrap) print(String(data: data!, encoding: .utf8) ?? "") //this just prints out what the encoded json looks like. or blank if it didnt work The main issue was that you weren't accounting for the key "authentication" in your json model. So your wrapper object needs a variable named that pointing to a creds object. That's about it. There's a whole thing with CodingKeys too, which is used to tell Swift how the objects and json map to eachother, but it shouldn't be necessary so long as you're on Swift 4.1 and your variable names match the JSON object names exactly. I define a "keyEncodingStrategy" for a default but I don't think it's needed.
Sites I visited at least 4 times: [https://i.imgur.com/mJSuRSk.png](https://i.imgur.com/mJSuRSk.png) Sites I visited at least 15 times: [https://i.imgur.com/b2OIPId.png](https://i.imgur.com/b2OIPId.png) Notes: This only includes sites that had "swift" in the URL or page title. That means it's also missing some [developer.apple.com](https://developer.apple.com) stuff since not all of their URLs have swift in it. Raw stats: medium.com: 89 github.com: 1002 google.com: 1284 swift.org: 10 stackoverflow.com: 571 docs.swift.org: 9 hackingwithswift.com: 22 reddit.com: 153 //From this sub mostly theswiftdev.com: 7 developer.apple.com: 105 cocoacasts.com: 12 useyourloaf.com: 4 jetbrains.com: 5 //From when I was looking at the AppCode IDE radex.io: 4 natashatherobot.com: 7 coderwall.com: 7 raywenderlich.com: 5 artsy.github.io: 4 adamdelong.com: 4 npmjs.com: 4 //Was looking at some Cordova Swift plugin blog.bobthedeveloper.io: 11 teamtreehouse.com: 6 hackernoon.com: 4 appcoda.com: 4 youtube.com: 4 en.reddit.com: 7 quora.com: 4 bitbucket.org: 42 medium.mybridge.co: 21 source.ind.ie: 6 twitter.com: 6 gist.github.com: 23 objectivec2swift.com: 8 iswift.org: 13
This would be a good reference to have to show your computer is used as a work expense if you are an independent consultant
I meant: change let jsonData = try? jsonEncoder.encode(credWrap) to let jsonData: do { jsonData = try? jsonEncoder.encode(credWrap) } catch { print("Got error \(error) encoding JSON") } 
```swift struct Authentication: Codable { var username: String var password: String } let authentication = Authentication(username: "hello", password: "world") let json = try JSONEncoder().encoder(["authentication": authentication]) ``` That should do it. 
See TensorFlow for Swift: https://github.com/tensorflow/swift
seems really cool as a concept, especially the idea of network -&gt; ui binding (if I read it correctly) I guess my biggest question is: why JSON? and why not make it a framework in swift? i think json is cool for config but once you start adding logic, it is painful to work with (no autocomplete, easy to make typos, no help from the compiler, etc.) loved the sample app tho! 
Yes. And there are many tools in iOS/macOS to help you with that: 1. The accelerate framework provides low level matrix and vector functions 2. Metal performance shaders include necessary layers for inference and I believe they added training in iOS 12 / macOS Mojave 3. CreateML can create machine learning classifiers and train them 4. CoreML supports most network operations but is only limited to inference (on device) 5. As already mentioned, TensorFlow is being integrated into Swift 6. There are many 3rd party libraries, like [Swift-Brain](https://github.com/vlall/Swift-Brain), [AI Toolbox](https://github.com/KevinCoble/AIToolbox) and many more. 
cmd+shift+0 in xcode shows the developer documentation
Have a look at [Apples documentation](https://developer.apple.com/documentation/foundation/jsondecoder).
\&gt;why not make it a framework in swift It IS a framework in swift :) \&gt; json is cool for config Yes, your app needs a bunch of config files as son as it contains no compilable code (which is the idea - no code inside app). So, yes, this is config. NSPredicate/NSExpression are constructed from plain strings in the Foundation itself, so framework keeps these strings inside config files.
Excellent feedback. It was really helpful, and I didn't have a link to source code because I needed to organize some more things. Since it's a draft, let's take it into account and organize it.
Thank you. I think it's easy to change the Parse-Server related code to Firebase. If you'd like the Firebase tutorial, we'll share it with your sample code later.
Thank you. Let's take this feedback and get a little bit closer. I am not good at English, but I will try my best.
Thank you :D
Thank you for your answer. Saving data locally is also a good idea. I've written this tutorial on how to use Parse-Server as a backend to store it on a server and share it with other users. It's a draft, and I don't think it's organized. Thank you for your valuable opinion.
Is there supposed to be an interesting trend in the data? I don't see it.
JSONDecoder makes it pretty easy, you just have to set up a `struct` to hold it: import Foundation let text = """ { "rates": { "AUD":1.5681, "BGN":1.9558, "BRL":4.3617 } } """ struct Rates: Codable { let rates: [String:Float] } if let dict = text.data(using: .utf8), let rates = try? JSONDecoder().decode(Rates.self, from: dict) { print(rates.rates) // ["BGN": 1.95580006, "AUD": 1.56809998, "BRL": 4.36170006] } 
Thanks for the advice. Did as you suggested. 
Then make them non-optional.
Check out Dash, it's much faster than using the browser. That much time ads up
I like [Postman](https://www.getpostman.com/) for testing my api. I have made the beginning of a mix between Postman and [Perfect](https://www.perfect.org/). Each endpoint implements the `Endpoint` protocol. This ensures that the developer provides a `purpose` string. class EP_GetHealthcheck: Endpoint { required init() {} let purpose = "Used for healthcheck functionality for monitors and load balancers" func handler(context: HandlerContext) throws { let _ = try? context.response.setBody(json: ["health": "ok"]) context.response.completed() } } I don’t like the `required init() {}`, but there is no way to to get rid of it (my knowledge ). Let me know what you think.
This still ends up with an unordered collection, but you could extend it a bit with an extra struct and some custom decoding (I also added sorting, there might be a way to preserve JSON decoding but i just matched it with alphabetical sorting) struct Rate: Comparable { let currency: String let rate: Double static func &lt;(lhs: Rate, rhs: Rate) -&gt; Bool { return lhs.currency &lt; rhs.currency } } struct Rates: Decodable { private enum CodingKeys: CodingKey { case rates } let rates: [Rate] init(from decoder: Decoder) throws { let container = try decoder.container(keyedBy: CodingKeys.self) let ratesJSON = try container.decode([String: Double].self, forKey: .rates) rates = ratesJSON .map(Rate.init(currency:rate:)) .sorted() } }
That's a very roundabout way of doing things. First of all, there was no requirement to have it sorted. Secondly, if you want it in an `Array` sorted by key just use my code and add: rates.rates.sorted { $0.1 &lt; $1.1 }.map { $0.value }
&gt; rates[indexPath.item] this is a requirement for sorting IMO
Knowing the order is a good thing, of course. I'd argue that putting this data in an array is not a good pattern since you already have key-value pairs and there is no need for the extra sorting operation, plus mapping the values into an array. Anyways, there's a lot of extra code for a simple example. Yes, `CodingKeys` and `Comparable` are important but for this example they are not necessary when we have [sorted(by:)](https://developer.apple.com/documentation/swift/dictionary/2298238-sorted) to take care of the operation.
Alt-click shows Quick Help
Its subjective I guess, I prefer the extra struct because it can handle the sorting in one place and give me named getters. Its a little bit extra work that makes every call site nicer IMO As for an array, if this is the data source for a collection view it seems like that's a perfect pattern. You need a concept of ordering and lookup based on index, so unless you want to sort every time the array works well 
Post the errors?
Maybe people could just post their experiences with strange errors/crashes and what the problem ended up being if it is something others are likely to encounter also?
Because beta.
I wouldn't mind using it if there a few simple things that you can fix in your code to avoid confusing the Swift 4.2 compiler.
I had to mess with plist files, it was something in the lines of "Two commands are creating the same plist file" or something, found it on the stackoverflow two days after the 10 beta was released.
The different phone simulators aren't meant to simulate the actual phone performance. If they did, the iPhone X simulator would hog all of your memory resources. The different simulators should simply used to test your application on different resolutions. If you want to test the performance of your application on the different phones, you would have to buy a physical phones themselves.
But 6 and 8 have the same resolution
Interesting the time on Apple's docs vs SO. Personally I almost never go to Apple's docs. I go to a tutorial or SO. What would be even more interesting is the amount of time it took to solve a given question. I found that SO is usually the quickest if you get the search right. If your Google search is really good, you can get a few SO hit that can get to the point quickly. It would be hard to quantify things because some questions are easy to answer, sometimes it just that you forgot the syntax or something, other times you need a tutorial.
&gt; Why should I test my app on iPhone 8 simulator and on iPhone 6 simulator if there aren’t differences in performance? You shouldn't, they have the same screen size so you are just wasting your time testing on both.
OP is asking the real questions
You are absolutely correct about the resolution being right! It's also worth noting that different devices have different "chips" in the simulator. So while running an ARKit app on an iPhone 6 will fail, it will run on the iPhone 8 simulator (although you won't really see anything :) ). 
Source : https://twitter.com/nathangitter/status/1010599486303981570?s=21
Meta: why downvote this post? I know OP could have searched the web, but now I know something I didn’t just by browsing reddit.
Apple docs are amazing. But they don’t always show working-class examples nor best practices. Apple example code is usually good, bordering on great. Even then, it’s hard to illustrate when patterns fail and how to fix them. Stack Overflow and other community sites — including r/swift — should always have a place in the world.
I had a strange issue with Vapor 3 and Xcode beta. Mostly Vapor uses its own implementation of CaseIterable and the pragma catch wasn’t stopping fixit from spitting out “ambiguous definition” errors.
Nice answer. Served for reference. 
Why the hell would we give you our email address when we don’t know anything about your app, you didn’t provide any information about you app, and the link doesn’t give details about it? Are you trying to spam and phish? If so, you’re not that smart. 
Unless I care about layout on a particular screen, I usually test on the SE simulator because it seems to run the fastest. 
The iOS simulator actually compiles your program for x86 and runs it on your Intel CPU natively. It is not meant to simulate performance characteristics of the device at all.
Hi, Im a bit of a noob and also having this problem when trying to do a build through cocoa pods. How did you fix it?
If you’re not satisfied yet, maybe check out /r/iOSProgramming ios
Ok! So I intended well when I started programming 😊
I figured it out, but the xcode is complaining a little. I was able to add the button inside of the view and then center it. Then I added suggested constratings and got something like this. [https://www.dropbox.com/s/ka52no4jfsd7ui0/Screenshot&amp;#37;202018-06-24&amp;#37;2000.24.52.png?dl=0](https://www.dropbox.com/s/ka52no4jfsd7ui0/Screenshot%202018-06-24%2000.24.52.png?dl=0)
Well they are simulators, not emulators :)
Not super difficult, the job is in high demand in this era of apps. Just work hard to learn the craft and study for interviews. And a design sense helps a lot 'cause a lot of smaller houses don't have dedicated designers.
Short version: Yes, it’s hard, otherwise everyone would do it. Longer version: If you’re already a web developer, you should understand enough programming fundamentals. So now you need to learn the iOS SDK and Swift (the latter shouldn’t take you too long.) Then you need to be able to demonstrate to an employer that your skillset is valuable to them. That requires projects, which takes time. Realistically, if you build a few projects and really dive into the SDK, I think a year is a pretty safe bet. Then again, this is entirely location-dependent. 
I’d do it all programmatically, and create a class for your view with your button as a subView. 
As someone who’s actively looking, I would say it’s extremely hard. From what I typically encounter: There aren’t many Swift dev jobs around to start with. Mobile development is quiet fragmented, split between React Native, Xamarin, Cordoba, Swift, Objective C etc, (presumably Flutter will further complicate things). When they are actually looking for a Swift developer they’ll often want you to know Android and server side too. Seeing advertisements requiring 3 - 5 years experience development on iOS is the norm. Though, on one occasion I did manage to get through 4 stages for a role that required 3+ years experience. I’ve an excellent academic record but not much experience, so you might have better luck I’m having 😅.
I was in the same boat. I had 5 years experience before starting to learn iOS development with Swift. I learned developing with “Hacking With Swift” and my goal was to switch jobs and be a fulltime Swift developer. As it turns out, Swift developers aren’t really in demand in my area, but I am happy that I took the time to learn something I wanted to. The point I’m trying to make is: You should want to spend time to improve your own knowledge, regardless of getting the job or not. It’s not a waste of time if you are passionate about it.
this is a nice thought, but paying the bills comes first. Not everyone has the luxury to spend a lot of time to learn ios/swift and then get no $ back for it. 
Well I assumed you would learn it in your spare time, because you currently have a job. Anyway, good luck and I hope you make it!
Well I assumed you would learn it in your spare time, because you currently have a job. If that’s not the case, then of course paying the bills come first. Anyway, good luck and I hope you make it!
But they maybe able to support different iOS versions going forward. iPhone 6 may not work with iOS 13 or 14 but iPhone 8 probably will. I think the iPhone 6 may even support an older iOS than what an iPhone 8 can. 
You are overriding a method on the parent class, in this case most likely UIViewcontroller that already has an implementation of the prepare method. It’s my understanding that whenever you override a method on a UIKit class the first thing you should do is call super otherwise you risk the override not getting called but perhaps someone else could shed some light on that. From there it looks like the rest of the method is just confirming a segue identifier and a destination view controller to pass along a String. 
You don’t have to override it. It’s only used to pass data between viewcontrollers. Like for a detail view, you could pass which object from a list was chosen to get detail for. Be careful to not abuse this! You shouldn’t be passing everything around using this, or setting up the detail view here. Be sure to respect separation of responsibilities.
‘Override’ means that you are replacing a method on a superclass with your own. This override prepareforsegue method is located in a class inheriting from UIViewController (look at the top of your file there should be a line with class ViewController : UIViewController This function is called as soon as your app triggers a transition from one viewcontroller to another. Before this transition (segue) prepareforsegue is called. In this case there probably is a storyboard somewhere which defines a segue to the second screen, it has the identifier “goToSecondScreen”. The code below checks of that segue is the one being executed and in that case it creates the destination viewcontroller for that segue to be one of the type ‘SecondViewController’. It also sets the textPassedOver property on that viewcontroller to pass some text from the current to the second viewcontroller
&gt;It’s only used to pass data between viewcontrollers. So if we're not passing data between viewcontrollers, we don't need to override this func? 
That's what's confusing, I didn't see any "prepare for segue" method in the first or second UIViewController and that made me ask why we needed to override it? Didn't even see it. Is it like a built in Apple code? `import UIKit` `class ViewController: UIViewController {` `@IBOutlet weak var textField: UITextField!` `override func viewDidLoad() {` `super.viewDidLoad()` `}` `override func didReceiveMemoryWarning() {` `super.didReceiveMemoryWarning()` `}` `@IBAction func buttonPressed(_ sender: UIButton)` `{` `performSegue(withIdentifier: "goToSecondScreen", sender: self)` `}` `override func prepare(for segue: UIStoryboardSegue, sender: Any?)` `{` `if segue.identifier == "goToSecondScreen"` `{` `let destinationVC = segue.destination as! SecondViewController` `destinationVC.textPassedOver = textField.text!` `}` `}` `}`
You only need to override it when you dont want the standard behaviour, as soon as you want to pass along text or other things you need your own implementation -&gt; override it
Correct.
&gt; When they are actually looking for a Swift developer they’ll often want you to know Android and server side too In my experience (UK) this is unusual and is probably a sign of a company that doesn't understand software / mobile (or is cheap). You might see it a bit in startups but any reasonably mature company (startups included) would see it as a bonus, not a requirement 
I'd like to know that as well. It's my understanding that I should call the superclass method especially in viewDidLoad(), viewDidAppear() etc. but should we do that in prepare for segue? If so, what's the reasoning behind this? 
The demand for Swift is growing and isn't likely to slow any time soon. The best way to understand the job market is to search the job boards. One job board is Dice. Right now they are asking for 3\~5 or 5\~7 years experience with a degree and several complex apps published for Silicon Valley. Silicon Valley doesn't have much to offer entry level mobile devs. You can also look outside tech hubs, you see not many jobs even offered. Even in California, Silicon Valley has thousands of openings and San Diego had 3 last time I checked. Outside a tech hub, the demand for Swift falls like a rock. IMO, mobile has a few important categories, games, utility, social, business, enterprise. Games has the subs of 3D, AR, MMOOG, etc... Business and enterprise are two overlooked, fast growing areas. These areas are all about moving older client server functions to mobile devices. This is where iOS dev will spread out past tech hubs. It's where a company will start to see the need to hire full time, in house, iOS devs for their in house enterprise software. If iOS get a stronghold in mobile enterprise, meaning that businesses choose iOS over Android, more companies will be hiring more iOS/Swift devs. Apple does have a big advantage here in that almost all the malware is on Android and Apple is the secure platform. Businesses can't function well with all that malware, and I'm not sure how someone can secure an Android phone. Maybe Blackberry has a solution there. You really need to check lock job boards and you need to remember that it can take years to get up to speed on things, so if you want to jump in, it's a several year commitment.
The String you are passing is coming from a UITextField.text property, which is a nullable that you are unconditionally unwrapping. This means if it is ever set to null when your code executes it will crash. Please read about optionals and why force unwrapping values is bad practice. Opt for safer alternatives, like guard let or if let and if you really want to know when the value is null add an assertion instead as these won’t crash production code (only debug). Pro Tip: If you use SwiftLint you can enforce this requirement of calling super as well as make your code have uniformity in structure. 
&gt; It’s my understanding that whenever you override a method on a UIKit class the first thing you should do is call super As far as I’m aware it’s good practice, but sometimes not needed. What’s happening when calling `super` in an override function is that you’re making any operations that your superclass has in its version of that function is carried out. In `prepareForSegue` there isn’t any need to override anything since a standard `UIViewController` has no segue to prepare for. /u/mhcsk 
You should at least have shipped one application yourself. Find a customer for a simple app and build it. Put it on your LinkedIn. Ask the customer to recommend you there. Present yourself everywhere as an application builder. Keep shipping stuff. Perhaps build a native interface to a web api you already did or wrap a web application so it supports push notifications.
Not only faster but also scaling up is much easier than down
My general approach is to call super unless the docs indicate otherwise, e.g. `loadView` says you should not call super The docs say that the default `prepare(for:sender:)` implementation does nothing so calling super isn't a requirement, though personally I'd just call it anyway ¯\\\_(ツ)_/¯ 
`UIViewController` is the superclass of `ViewController` in the code above. The method `prepareForSegue` is defined in the class `UIViewController` and if you are adding or extending what that method does, you will need to override it. It sounds like you are not really confused about how inheritance works, but about Swift syntax. In the code above, here's what's going on: `class ViewController: UIViewController { }` is defining a class _named_ ViewController that is a subclass of the existing class `UIViewController`. There's nothing magic about the name "ViewController" here--it could easily be named "Reginald" or "StartingViewController". (But don't give your classes people names, that's confusing.) Does this make sense? 
Take a online cours in saving configuration in 'defaults' there you can save configuration on the phone for later.
https://developer.apple.com/documentation/foundation/userdefaults?changes=_9
`let alert = UIAlertController()` `alert.addTextField { textField in` `textField.placeholder = "Enter zip code"` `}` `let action = UIAlertAction(title: "OK", style: .default) { _ in` `let zip = alert.textFields?[0].text ?? ""` `print(zip)` `// you could save the zip here, or you could call some other function that saves the zip.` `}` `alert.addAction(action)`
What geographic area are you looking in? Asking for full stack is one thing, not all that common in Silicon Valley, but asking for dual platform, full stack is just unreal. Those are the companies to avoid. I would do a popularity check in Xamarin, RN and Cordova... They don't really have any meaningful market share. Basically Swift and ObjC are all you need, unless you're going to do Unity, then it's C#.
thank you so much!
Store in NSUserDefaults? Seems like the right place for that sort of thing.
I’m a bit unclear on what you’re intending to do with giving a userid a default parameter in a function, if I’m understanding that correctly. As for passing data between view controllers, the function prepareForSegue(with identifier) is what you can use to assign data to a view controller if you’re using storyboard. Otherwise if you’re creating the new view controller programaticqlly, just assign the values where you create the view controller. If you’re having trouble with the value being inconsistent between screens, it’s probably because you’re passing a string id by value rather than by reference.
It needs to be stored in such a way that yes, I can reuse it on a different view controller and thus a second swift file, but also is stored for when the app is closed and reopened. 
It sounds like you have two different questions. 1 is how do I store it, the other is how do I access it from different classes once I have it. To store the username I use UserDefaults.standard. Below is a piece of code for my login function where it uses an optional username or looks into the database. If it can't get a username from either, it returns. `guard let user = username ?? UserDefaults.standard.string(forKey: "username") else{` `return completionHandler(false, "No username found")` `}` I maintain my user session by having a user class which is a singleton, which is a bit of a touchy subject. My current session is maintained in this class with any other user data. I supposed you could just use UserDefaults to do it as well, that's up to you. Singletons should be used for specific reasons and not be over used. If I can pass a variable between view controllers and avoid a singleton, I'll do that. Something that persists across my entire app will often be a singleton for me.
* SwiftyJSON is basically obsolete since Codable * I would use layout anchors instead of visual format for constraints * NetWorkManger, I expected a simple API client, got some kind of a pseudo presenter instead
Very true
I've had issues with local development pods (cocoapods) and the new default build system in xcode 10 beta. If I change my development pod code and recompile the app I don't see my changes in the app. Changing storyboards or assets work fine though. Only if I clean the project and build everything again I can see my changes. It get's annoying pretty fast...
maybe try do { let json = try JSONSerialization.jsonObject(with: data, options: []) as! [String: AnyObject] if let USER_ID = json["user_id"] as? [String] { print(names) } } catch let error as NSError { print("Failed to load: \(error.localizedDescription)") }
did you use \-version control \-upgrade your computer \-update your libraries \-give USER\_ID a default value \-took away the default value in story board?
I would just do 3 nodes. 
No No No No No 
Sounds like that field isn’t in the JSON, and when you try to make it a string, the return value was null. There is a lot of forced unwrapping here. You should avoid that unless you are sure the response is there... normally you’d test value, guard let, if let, etc.
Did the backend you're pulling the data from change?
I don’t think so
Yeah I was following a tutorial and just using some recycled code. Worked at first. 
Note: Trying to do this without the use of Decodable
Is ‘forecasttoday’ an array?
Small correction: there’s nothing like a Swift developer at the moment. There’s iOS developer or/and MacOS developer. Try it out. Learning a new skill does more good than harm. Swift is an interesting language and developing mobile or desktop apps might give you some new interesting perspectives. As for the job market, it’s good at the moment and it’s even better if you can do other things like web fronted, backend, etc. 
My best guess would be that you are trying to unwrap “forecastday” as a dictionary, when it appears to be any array. Try as? [[String : Any]] instead go get an array of dictionaries. Why don’t you want to us Codable?
I think your problem is that you are casting to a dictionary but the value is an array. Try changing: \&gt;if let forecastday = forecast\["forecastday"\] as? \[String : AnyObject\] { \&gt;if let day0 = forecastday\["0"\] as? \[String : AnyObject\] to \&gt;if let forecastday = forecast\["forecastday"\] as? \[AnyObject\], forecastday.length &gt; 0 { \&gt;if let day0 = forecastday\[0\] as? \[String : AnyObject\] 
I’m curious why you wouldn’t use Codable?
That code introduces errors. 
You guys were right... it was an array. Thanks for the help :D
Same error or different error?
A lot more different errors. 
Progress!
Indeed. But I can’t run it. I had to go back to the original code. 
 //creating a string var USER_ID : String? //getting the json response USER_ID = parseJSON["user_id"] as? String To Debug, put a breakpoint while getting the json response and step through the response
Use JSONDecoder this would be far easier to read ;)
I'd love any feedback, but I'll be commenting/replying mainly on /r/iosprogramming to avoid duplication.
That's a great idea! Looks very clean and sharp - I like it a lot!
Most things on job descriptions are nice-to-haves
You could save that value in UserDefaults the load it when you need it after you check if an object exists at that key. This explains it pretty well https://www.hackingwithswift.com/read/12/2/reading-and-writing-basics-userdefaults
The problem is, there are no such things as Swift dev jobs. The language you write in isn’t that important. Your knowledge of things like certain web development frameworks or iOS frameworks is what matters. 
I did so. Now I have a new problem which I’m going to edit this post to ask about. 
Thanks :)
According to your error message, you are trying to concatenate together a string and dictionary. It looks like your `ID` variable is a dictionary, not the string value you probably want. 
You are getting the dictionary instead of string. Use Usersefaults.standard.string(forKey: “ID”) instead of Usersefaults.standard.dictionary(forKey: “ID”)
Hi adrien\_j, could you post what is printed in the debugger? This will help in debugging your issue.
[removed]
 // Called when Share PDF is pressed to create a csv from the arrays @IBAction func didPressShare(_ sender: UIButton) { print("Share") // Create file and path to file let file = "Peripheral_Data.pdf" let path = NSURL(fileURLWithPath: NSTemporaryDirectory()).appendingPathComponent(file) // Create title for csv var csvText = "Time,Temperature,Payload Status,Lid Status,UnixTimeStamp\n" // Iteration through the arrays for i in 0..&lt;temps.count { let newline = "\(times[i]),\(temps[i]),\(pays[i]),\(lids[i]),\(unixs[i])\n" csvText.append(contentsOf: newline) } do { try csvText.write(to: path!, atomically: true, encoding: String.Encoding.utf8) } catch { print("Failed to create file") print("\(error)") } // Present share screen with path to csv let actVC = UIActivityViewController(activityItems: [path!], applicationActivities: nil) present(actVC, animated: true) }
Got it all fixed. Could you check this out for me though? No one has been able to help so far. [StackOverFlow Question](https://stackoverflow.com/questions/51001396/pointofview-node-not-appearing-after-removing-and-calling-again) The comments have most of the details explained.
Try save the data in UserDefaults , UserDefaults.standard.set( userID, forKey: "UserID")
Nitpick: If you write explicit documentation, like: let purpose = "Used for healthcheck functionality for monitors and load balancers" then this is not self-documenting code (not that there's anything wrong with explicit documentation).
Consider, though, that as of right now, Swift doesn't really run on Windows (unless you go through the Linux subsystem) and it doesn't even have binaries for the latest Ubuntu. If your collaborators don't all use a mac (which in the scientific community I wouldn't expect), Swift will be a painful choice.
&gt;hard iOS Dev - Swift + Obj C iOS Dev - Swift + Obj C (javascript/ruby/python/shell desired) React Native Dev - knowledge of Android and iOS 'intricacies' iOS Dev - Swift, Experience with Back end JAVA iOS Software Engineer - Swift, knowledge of .NET and Android desirable Mobile Dev - Cordorva, Dev experience with React, SQL Server and Node.js Mobile Dev - iOS and Android required Full Stack Mobile Dev - their 'perfect candidate will have' React, React Native, MongoDB, Angular or Ember, Cordova and Ionic, Native apps for iOS and Android Mobile Dev - Android and iOS, experience with KnockoutJs, React Xamarin Dev - C# That’s top few result for iOS Developer roles in my locality this morning. The last 4/5 interviews I’ve had required both Android and iOS native, 3/5 additionally required server side. One has since re-advertised and changed from wanting native to RN and adding C++, (seems bizarre to me), to their list of requirements. Finger in the wind: I’m in a small country in Western Europe and I don’t imagine there’s much in the way of venture capital the way there might be in Silicon Valley. Employers will perhaps try to split their costs whatever way they can. Plus I’d imagine there are other factors here: Android has a much larger presence than it would in the US and it probably doesn’t hurt that in California the likes of Stanford puts out courses like CS193p. To my knowledge nothing like that exists here.
See my comment above.
Yeah, maybe I wasn’t very clear. I actually know a few iOS frameworks. None in any great detai,l but enough to read the docs and implement as specified. 
yeah, I shouldn't have used that term as the title. For a new developer taking a look at a web project, it's very difficult to tell from the routing list, what their purpose is. This forces the developers to write docs when creating/updating endpoints. What title do you think would be better? 
Yea, that doesn't look good at all. One thing that pisses me off about this whole system, you spend your time gambling that you'll be able to get a job after it's all done. If you spend 1/3 that amount of time learning plumbing, you'd have a good steady job.
I suspected this. 
First off, CSV is a simple list of values separated by commas. You want to render a PDF of that. How do you want it formatted? A PDF file is not anything like a text file, you're just attempting to save the raw string and name the file with a ".pdf" extension, that's not going to do anything like what you want. So do you want a plain text file or a PDF? How do you want the PDF to be rendered? Font, font size, any styling, any formatting? Also, if you put 4 spaces in front of every line of your code it will all be in a code block and be easier to read.
The issue is when I force quit the app it says finished running, so I no longer get debug information in the terminal. I don’t know if there is anyway to connect back to the app without redownloading it. 
After watched WWDC CreateML session, I will make my own dog classifier to my app(meongCa - camera for dogs) If you have pet, you might can try this app([https://itunes.apple.com/app/id1369505051](https://itunes.apple.com/app/id1369505051)) Let's make a machine learning model :) 
If you're interested in just Swift (without iOS), I recommend you take a look at [Vapor 3.0](https://github.com/vapor). They generally start developing a new major version with Swift beta then they release it after Swift is out of beta.
I like to get inspired by firefox focus on ios https://github.com/mozilla-mobile/focus-ios otherwise you can take a look here https://github.com/dkhamsing/open-source-ios-apps
Can we acknowledge the irony of saying there's a "modern" version of something that's only 4 years old?
Given that technology advances exponentially, not really that ironic.
Hey u/thisischemistry thanks for your time! I put 4 spaces and in front of everything and it almost seems worst but at least it looks like it's in the same comment now. I'm posting from mobile so maybe that's why? I want a pdf for sure. Simple spacing( centered on the page ) and a custom system font ( helvetica nue ) I'll also need a watermarked background image and a graph image that comes from a generated chart, but if I can just get on the right track for this I'll figure those out. iOS. Thanks I updated the post. 
Ok, you took the comment more seriously than I intended. But if you really want to take it seriously, the idea of "modern Swift" being out there distinct from "old Swift" is ridiculous. Swift is making steady changes. There wasn't years of one version of Swift and then a sudden mass of changes to then define a shift in style. Plus, any significant code bases have been around for at least a few years and would therefore have to have evolved along with the language changes (leaving cruft around from "older" versions of Swift). So, I'm skeptical that any open source project exists that can be meaningfully defined as "modern Swift".
[https://github.com/search?o=desc&amp;q=language&amp;#37;3A+swift&amp;s=stars&amp;type=Repositories](https://github.com/search?o=desc&amp;q=language%3A+swift&amp;s=stars&amp;type=Repositories)
i see your point, but you’re arguing over definitions in the english language in the context of technology. technology already just overwrites whatever english was to suit its own purpose better. so, your eight, “modern” and “old” swift don’t really fit the distinctions classically granted by that contrast, but i don’t think the assumption that these words still hold their historic meanings in this context. let’s not forgot what we’ve done to the word “literal” in the last decade. 
In my experience, `Codable` has been far more trouble than it's worth. Because it's designed to be general-purpose, a lot of fancy JSON decoding is cumbersome at best (Arrays of polymorphic data, for example require massive amounts of infrastructure for something that could otherwise be implemented as an enum switch). In addition, I've found the code-generation of the `Codable` protocol to be a debugging nightmare. About a month ago, I discovered that implementing `init(decoder: Decoder)` but using an auto-generated `encode(to encoder: Encoder)` will throw an `EXC_BAD_ACCESS` runtime exception, and will cause decoded `String` instances to never be terminated (inspecting them in the debugger will print gigabytes of garbage to the console, which is... fun...) I've since migrated the project off of Codable, and back to an old-school parser. As I see it, they're far more reliable in a production setting, and far easier to debug than the slew of compiler magic behind `Codable`. If you're only ever decoding from a JSON data-source, then the format flexibility provided by `Codable` isn't really utilized in any meaningful way anyway.
Looking at my own company's codebase you can absolutely tell old swift from new swift. Tons of new control flow has been added since the initial release. Just guard statements made a huge change
No, I'm not arguing over the definition of the words. I am saying there has been no distinctive break in Swift style because it has evolved consistently and gradually. How can one distinguish "modern" Swift in a meaningful way compared to 18 months ago? How can a meaningful code base exist that was developed exclusively with the most modern techniques? How can we look at any code and say it is using an unacceptably old style and needs to be updated? I say, if you aren't getting any compiler error or warnings, you're good to go. Each person is still helping define what "Swift" style is, until perhaps it stabilizes enough for people to come to a meaningful consensus.
That is my point. How can a meaningful codebase exist that is purely a "modern" style? You're codebase has both? And what is "modern" in your codebase will become "old" by that definition in another 6 months. I guess what I am really saying, poorly, is that we shouldn't worry about what is "modern". Explore the newest features and experiment to find the techniques that work best for you or your company.
I'm not sure of what you want for page size but here's a start at least: import Foundation import AppKit let csvText = "Time,Temperature,Payload Status,Lid Status,UnixTimeStamp" // style up the text let font = NSFont.systemFont(ofSize: 12.0) let attributed = NSAttributedString(string: csvText, attributes: [NSAttributedStringKey.font: font]) // create a view with the text let frame = NSRect(origin: .zero, size: attributed.size()) let view = NSTextView(frame: frame) view.textStorage?.setAttributedString(attributed) // The padding + the size of the text should equal the frame // since the frame is exactly the size of the text I reduce the padding. view.textContainer?.lineFragmentPadding = 0.0 // get the destination let desktop = FileManager.default.urls(for: .desktopDirectory, in: .userDomainMask) if let url = desktop.first?.appendingPathComponent("Peripheral_Data.pdf") { // turn the view into a PDF let data = view.dataWithPDF(inside: frame) try? data.write(to: url) } 
I was merely just commenting back on your observation, lol. I don't understand where I got serious. Were you expecting a funny reaction or something ?
Honestly, I wasn't expecting any response. It was meant to be a surface level chuckle. An inane version of "isn't technology funny".
Indeed tech is pretty funny.
Several things stand out to me: 1) You’re calling triggerAlarm in viewDidLoad, which is run before you fetch the data in viewWillAppear. It’s working on an empty data set. 2) In triggerAlarm you would be setting up notifications only for alarms that match the current time. You should be setting them up for all alarms that are currently switched on. 3) Again, in notificationTrigger you’re creating a notification for the current minute and hour *not* a time in relation to any alarm item. There’s no reason you need to use the current date/time in your code (either here or in triggerAlarm). This function should take an Item as an argument and then use its time as the trigger time for the notification. 4) Setting up the notifications when the view loads is bad practice anyway. That means they won’t be set until you basically fully quit the app and reload. You should be setting the notification whenever the individual alarm is switched on, and cancelling it when it’s switched off.
NotificationCenter is unrelated to push notifications. We cannot see your code, so we cannot possibly deduce the reason why might need them. Also we have no clue what "it" is when you say "it says that it needs" - do you mean Xcode?
I would use `URLComponents` and not `String` for this import Foundation let USER_ID: String? = "1" let verificationCode: String? = "2" if let userId = USER_ID, let verificationCode = verificationCode, var components = URLComponents(string: "https://some/website/") { components.queryItems = [URLQueryItem(name: "user_id", value: userId), URLQueryItem(name: "code", value: verificationCode), URLQueryItem(name: "description", value: "iPhone App")] print(components.url ?? "") } // https://some/website/?user_id=1&amp;code=2&amp;description=iPhone%20App 
Thanks for the direction! I am building for iOS though :/ I'm sure some of this will translate over. I think where I went wrong in my thinking was assuming that pdf was a simple file extension change where it seems its more of a render like you mentioned and in the final bit turn a "view" into a pdf. Will attempt. Thanks again 
 @IBAction func buttonGetToken(_ sender: Any) { //created NSURL let requestURL = NSURL(string: URL_GET_TOKEN) // // //creating NSMutableURLRequest let request = NSMutableURLRequest(url: requestURL! as URL) // // //setting the method to post request.httpMethod = "POST" //getting values from text fields // let firstName = textFieldSecond.text // let lastName = textFieldFirst.text // let password = textFieldThird.text // let phone = textFieldFourth.text let verificationCode = textFieldFifth.text let USER_ID = UserDefaults.standard.object(forKey: "User_ID") //creating the post parameter by concatenating the keys and values from text field let postParameters = "user_id="+USER_ID!+"&amp;code="+verificationCode!+"&amp;description=iPhone%20App"; //adding the parameters to request body request.httpBody = postParameters.data(using: String.Encoding.utf8) // //creating a task to send the post request let task = URLSession.shared.dataTask(with: request as URLRequest as URLRequest){ data, response, error in if error != nil{ print("error is \(String(describing: error))") return; } //parsing the response do { //converting response to NSDictionary let myJSON = try JSONSerialization.jsonObject(with: data!, options: .mutableContainers) as? NSDictionary // // //parsing the json if let parseJSON = myJSON { //creating a string var User_ID : String! // var errorCode: String! // //getting the json response User_ID = parseJSON["user_id"] as! String? UserDefaults.standard.set(User_ID, forKey: "User_ID") // errorCode = parseJSON["error"] as! String? // //printing the response print("ID is "+User_ID) // print(errorCode) } } catch { print(error) } } //executing the task task.resume() } This is the full code. How would your code fit with this?
You can just use the query part if that's all you need: if let userId = USER_ID, let verificationCode = verificationCode, var components = URLComponents(string: "") { components.queryItems = [URLQueryItem(name: "user_id", value: userId), URLQueryItem(name: "code", value: verificationCode), URLQueryItem(name: "description", value: "iPhone App")] request.httpBody = components.query ?? "" } 
changing the UserDefaults to string from object fixed it. Why?
&gt;In Objective-C I would use a pragma mark to call out all the methods that implement a particular interface. In Swift I implement each interface in a separate extension to the class. (https://softwareengineering.stackexchange.com/questions/301621/for-what-reasons-would-you-use-a-separate-class-extension-for-each-delegate-in-s) Can I just point out that I absolutely hate that convention? Mainly because I don't see that extension adding any additional flexibility or separation when it's something that the class is required to do, and in the jump bar in Xcode, it doesn't tell you what the extension is implementing. 
The issue you're running into is that the compiler needs to figure out each and every overload and type in a statement. When you do: let USER_ID = UserDefaults.standard.object(forKey: "User_ID") The type of `USER_ID` is `Any`. As in, it could be any type at all. So now the compiler needs to search all types for the overload you want, which is an addition operator between two `Strings`. It looks at the complexity of that search, sees that it's way too complex, and gives up rather than spin for a while. This is why `object(forKey:)` is generally very bad and should be avoided. In fact, `Any` is generally very bad and should be avoided. Swift is a strongly-typed language and `Any` subverts that. It's useful at times to use `Any` but it's mostly lazy programming. Eventually either you or the compiler have to figure out the exact type and there's a huge possibility of bugs and headaches in that step. Also, `String` manipulation can be tough and prone to bugs. Avoid it if you can, use the types that are provided for you like `URLComponents`. They're there to make your life a lot easier.
It's almost exactly the same for iOS.
Curious about this myself... wondering whether I should be focusing any spare time gaining expertise in web (JavaScript/react/etc) or native mobile (iOS and/or android). 
Have you imported a library/tool that requires push notifications?
&gt; It’s my understanding that whenever you override a method on a UIKit class the first thing you should do is call super It depends entirely on the method. - UIView draw(_:) says you don't need to call super. - UIViewController loadView() says you must not call super. - UITraitEnvironment traitCollectionDidChange(_:) says you should call super at the beginning of your implementation. - UIResponder becomeFirstResponder() says you must call super "at some point". - UIViewController updateViewConstraints() says you must call super as the final step in your method. There is no general rule, and no substitute for reading the documentation, and testing.
The only thing I’ve imported was the Google AdMob SDK.
Hi all! I developed a few Pokémon related apps for my undergraduate dissertation. To make sharing the model code between them much easier, I created the very imaginatively named PokemonKit. As well as providing different Pokémon-related data types (e.g. `PokemonSpecies`, `Attack`, etc.), it also contains an (incomplete) implementation of the battle engine. PokemonKit uses the [veekun Pokédex database](https://github.com/veekun/pokedex) as its data store, and I’m eternally thankful to the author for keeping that up-to-date.
Haven't looked at the code yet but I like the idea and novelty of it. 
Thanks! I’m very interested if anyone wants to suggest improvements!
Take a look at kickstarter ios app. It’s available on github. The use of lenses &amp; prisms is quite beautiful 
Check RxSwift 😉 
I'm not even remotely at that level of experience
Look at any StackOverflow question tagged \[swift\], and you will see answers for each major version of Swift. So yes, "old Swift" is not ridiculous. Neither is "modern Swift"
Yes, not two version of Swift, multiple. And that is a SO answer, not an entire project.
Give us more. Errors? 
Just try it out.
You can use the NSTextFieldDelegate and override controlTextDidChange to check when a textfield is changed...
&gt; Can I just point out that I absolutely hate that convention? No problem with that. I wouldn't fault someone who puts `//MARK:`s on methods, or even just groups them together. The problem I was calling out to the OP was that he had methods from one delegate interspersed with methods from a different delegate. They didn't seem to be grouped at all. As for the convention in question, I have had several occasions where I decided to break the delegate functionality out into a separate class and because of this convention, all I had to do was change `extension Foo` to `class FooHelper`, add a init method and create a member in the view controller. I count that as a win.
can you please tell me how to implement point 3 as the 'time' attribute in 'Item' is of type string, thats why I was converting the date's time to string which is 'realTime' which would be easier to compare with the 'Item' time. here is the stack overflow link ([https://stackoverflow.com/questions/51000970/having-trouble-implementing-notifications-to-my-alarm-app](https://stackoverflow.com/questions/51000970/having-trouble-implementing-notifications-to-my-alarm-app)) the code used is similar just a slight change
If you're using admob then make sure firebase isn't getting imported also. Firebase uses push notifications sometimes: [https://stackoverflow.com/questions/37428539/firebase-causes-issue-missing-push-notification-entitlement-after-delivery-to](https://stackoverflow.com/questions/37428539/firebase-causes-issue-missing-push-notification-entitlement-after-delivery-to)
Sorry didn't have access properly to internet at the time, I mean this website and it's books - a great resource - the Hacking With Swift series is free unless you want the PDF and extras [hackingwithswift.com!](https://www.hackingwithswift.com)
👍
For a project of its size, I'm a little disappointed/skeptical with how few tests there are. 
Can you answer all of these or define and explain them? How much could you tell me about them? I sometimes interview at my job. I’m an iOS develop though. Delegation pattern, MVC, singletons. Swift basics: closures, optionals, value vs. reference types, classes vs structs, etc. Concurrency: GCD, NSOperation, NSThread, etc. What is a bridging header? How to reduce app size? Tips? Huge deal here at my job. Crash logs and how to symbolicate them and read them. TDD, Unit tests, UI tests, code coverage calculation. Apple’s push notification services. Layouts: Storyboards, xibs, programmatic. Memory management: ARC, memory leaks, retain cycles; how to fix these issues.
I can't recommend any projects, but I can recommend some books that have been kept up to date: https://www.objc.io/books/app-architecture/ https://www.objc.io/books/advanced-swift/ https://www.objc.io/books/functional-swift/ objc.io has a lot of great books.
You can access the simulator console logs.
It's hard to get a job as an "${X} developer", for any value of X. Companies don't want to hire people to write a program in one language. They want people who can solve their business problems. That's why all software job postings list 25 different technologies. 
I stumbled into this mostly by accident. I was looking for a nice audiobook player, BookPlayer worked well but was missing a nice UI (Which I just realized isn’t shown in the screenshots yet). So I took the chance to create something new and the original creator was nice enough to allow me to dig in and turn over many things along the way I haven’t developed for iOS in years, left off before Swift became a thing. Moving from Objective-C to Swift was as much an adventure as the whole project for me. I did a lot of JavaScript in the mean time so that switch still gives me headaches, but I learned to like Swift. But I also feel like I still have a lot of things to learn here and that is why I’m writing this. Any feedback is welcome, especially on things like ContainerViews and how messages and closures are passed through the app. Gianni (the original creator) did an amazing job at keeping my weirder loan ideas from JS at bay, but I want to learn more. That is, if anyone wants to give it a look, I know that sifting through larger projects is a lot to ask for. In any case, I hope you enjoy the app. 
You shouldn’t be comparing at all. You need to convert your time string to DateComponents and then use those to schedule the notification. Ideally your Item wouldn’t be storing it as a string in the first place but as something else, like a TimeInterval which can easily be converted to DateComponents. All you’d be currently achieving (if that code was called at all, which it isn’t) is scheduling a notification for the current hour and minute... which won’t trigger until this time tomorrow.
Check these out too: https://github.com/artsy/eidolon/ https://github.com/GitHawkApp/GitHawk https://github.com/insidegui/WWDC
I just started testing it after fixing some other location based issues in the app and the issue disappeared. Thanks everyone though
Each of the individual parts has quite a few tests...
This looks great! I have some downloaded audiobooks and there aren’t any free audiobook apps with a decent UI. This looks like really stellar work. I’ll definitely be checking this one out
By individual parts do you mean other packages like Fluent, etc? The main Vapor project has 40 unit tests total. Maybe it's fine since some of the tests look pretty meaty, my first impression was just a bit underwhelming.
Yup. They all have their own sets of unit tests. 
You can use didSet{} 
This is pretty nice!! 
By the looks of it, no. MultiPeer Connectivity seems to be an easier way of communicating using bonjour, which uses a mix of bluetooth/wifi, trying to use the best option for connectivity/lowest power consumption. There is a Core Bluetooth Framework and I would imagine a way of using a local wifi Ad-Hoc network.
Thanks! This looks like Google nearby then :) 
I could be wrong as I have only done a quick scan, but the methods seem to suggest it’s bonjour. I think there is an older WWDC video which goes into it and may have more answers. Around iOS7/8 so 2015/2016
I'll search it thanks, wasn't able to find information either 
Imagine if the text in text field is something like “Hello”, compiler wouldn’t be able to convert it to an Int and hence app will crash. If we use if-let statement, compiler checks if text is convertible to an Int, if not it doesn’t calls the If statement, and hence app will not crash. You can use if without If-Let statement, but you’ll need to force unwrap the variable.
Oooohhhh yes. Definitely using this soon. I’m kind of a beginner with Swift (I do web dev for a living) but I’ll let you know if I can think of any improvements. Thanks for sharing!
I’m going to add plenty of documentation in the coming weeks! Let me know if you need help using any particular bits.
Just to add on to this: Don't do the last thing! Force-unwrapping is very very bad because it can cause unexpected crashes. There's a few, very specific cases for using it but the chances are you're better off unwrapping safely.
Yes! Only unwrap variables when you’re sure that it won’t cause crash. Like when you set the text field type to number only.
No, you can’t. As others have said, it uses Bonjour, but there isn’t a way to choose WiFi/Bluetooth/Ethernet specifically as the interface.
Thank you! 
Hi, thanks for the reply. While waiting for replies here, I googled and found something about "Optional Binding" instead of forced-unwrapping. However, the examples give were all integer to integer and when I tried to fix my code, it just didn't work. 
By the way, before the optional binding, I did try your suggestion using forced-unwrapping (!) and the error message disappeared. App ran fine on simulator as well.
Reading from the article that game was played at E3. Honestly kind of a stupid business decision to not release after it was popular enough to be played at E3... I don't know what they were thinking. That said how many people do you think will see your app / download it? If the answer is sub 100 you might want to gamble it. How hard is it to recreate? How much time did you spend on it? How much do you think it's actually worth? All important in deciding. 
Define Beta test. If you hand out the codes and keep it a closed Beta, there won't be a problem. Open Beta is difficult territory and should only be used when you're less than a few months from release. You hit Open Beta with limited areas/functions and test the critical parts that need 1,000 users right before you smash the release button, pending any glaring issues.
 @IBAction func getAge(_ sender: UIButton) { if Int(ageTextField.text!) != nil { resultLabel.text = "Your cat is " + String(Int(ageTextField.text!)! * 7) + " in human years" } else { resultLabel.text = "Try Again" } ageTextField.text = "" }
Sorry to derail the conversation but can you explain “it’s shouldn’t be too buggy because it’s written in swift”?
There are all sorts of nasty bugs related to memory access/corruption that occur with Objective C that would not occur in Swift.
Is this also "force-unwrapping?"
Are you worried about somebody literally reverse engineering the IPA or just the fact that somebody could see and re-create your product in a quick manner?
The latter.
The reality is that if someone is going to rip off your game they can probably do it faster in Unity. The language or tools used to create the game is irrelevant.
What about an open beta for a game with limited opportunities to play (e.g., like the life system in Candy Crush Saga) and no in-app purchases to play more? Is that risky?
Could you call reloadData() after your function? 
Hmmm. I don't know if I have enough info to answer. Let me ask you to think about it from a thiefs perspective. What is enabling or disenabling me from stealing this money from you? Are you releasing soon so I won't waste the effort? Is it a difficult app for me to swap the art around so I can claim first use? Honestly, if your closed beta didn't reveal anything game-breaking, you'd probably be fine with a short open for a month and then pick a Summer release date.
&gt; It's implemented in Swift so it shouldn't be too buggy anyway. 90% of the nastiest bugs I've encountered are due to logic errors, not memory errors. 
App dev has never been easier and apple/google do not enforce any kind of rules. If you don't find your audience quick,someone will clone you and leave you in the rubbish. It's just a risk of doing business. Have a launch plan ready to go and make sure you're as polished as can be.
These bugs can definitely still happen when using Swift
It’s testing for `nil`. If the `Optional` is not set then it will be equal to `nil`. Since it is not it is then force-unwrapped, which can be done safely. However, it’s just easier to safely unwrap it in the first place. 
Unnecessary double conversion and explicit nil testing.
Even then I’d still safely unwrap it. You may change code later that makes it unsafe and you’re creating a hard-to-debug runtime crash. Safely unwrapping takes minimal code and resources and is a good practice. Only worry about avoiding it when you absolutely need performance and you’ve profiled your code to verify it will make a difference. 
Copies and clones are going to happen. It's a cost of doing business. Your ideas are worthless. It's implementation that matters. You might implement it well, and someone else might implement it better. This doesn't just apply to software, but to all products and services. McDonald's / Burger King. Coke / Pepsi. Target / Walmart. There are some basic things you can do: https://marco.org/2018/02/22/your-app-was-copied
forego the wire and setup a server that the app sends information to?
Why!.doYouSaySo() To be fair if you code defensively it’s definitely less common of an issue. Obviously using ! is often dangerous, especially when hidden like: var whatever: Int! I also found personally that improperly marked up Objective-C code interoperability is potentially dangerous. If you don’t specify nullability it defaults to ! mechanics. Another fun crash I had was due to doing: NSNumberObject as CGFloat This worked fine until a recent swift, and works fine on 64-bit but crashes on 32-bit because CGFloat is 32-bit and you can’t cast an NSNumber to a 32-bit float (better solution - use a CGFloat constructor). In either case, swift definitely doesn’t prevent memory related issue that in other languages would be considered a segfault. It is detected most of the time but the app still exits so net effect is the same. 
Memory errors tend to be crashes, and many can be found with the address checker instrumentation before it even crashes. It and the thread checking instrumentation both are invaluable. Always run through those and the leaks instrument before a release. XCode memory debugging is often easier for finding actual memory leaks if you e determined that they exist. Logic bugs on the other hand simply make things not work right. Crashes can happen - I once had a crash due to a null c string. Added a null check and it still crashed. Spent way too long figuring out that it still was an issue because a return was missing in the if() statement. If it’s not a crash though it can be really hard to find and could be as simple as a missing set return. 
Thanks for the reply. How do you safely unwrap it in the first place?
By testing it for nil
Your solution is....?
I'd personally go with something like: if let age = ageTextField.text, let ageAsNumber = Int(age) { let ageInCatYears = ageAsNumber * 7 resultLabel.text = "Your cat is \(ageInCatYears) in cat years" } else { resultLabel.text = "Please enter a number." }
If you’re working with Xcode you can use the simulator to interact with the app. Then it logs to the debugger when you print anything.
You'd want to use a closure, so the function calls the closure, and then within the closure, you reload the data, example below. `temp(closure {` `DispatchQueue.main.async {` `self.collectionView.reloadData()` `}` `})` `func temp(closure: () -&gt; ()) {` `//Do whatever code you want to run` `closure()` `}`
Is there an extension method on Array to catchEmAll()?
You don't. You modify the model that drives the collectionView then you tell the collectionView to reload that array of indexPaths. If any of the cells would change shape as a result of the modification, then you should clone the model, modify the clone, create a new collectionView referencing the clone, and do an animated transition to the new collectionView (you can't just do an animated layout transition, because the layout will work with the model to determine the cell sizes, and the animation requires access to both the old and new values.)
Thinking about building my very first iOS app (i'm a backend dev, never done any sort of mobile dev). Just a simple hobby project that i haven't really put much thought into but i already got an elevator pitch for investors. 'Are you tired of playing basketball against scrubs who say they're good but can't make a left handed layup, well heres a new app that lets you choose teammates based on a profile. Its like tinder but for your basketball team :'D'. I'm thinking of writing this up in swift but I may just end up using React Native since i have some JS experience. API is gonna be in python or node. Thoughts? Tips for first time mobile devs? 
Maybe something like "Generate API documentation from your code" or so?
Build some sort of Bluetooth receiver for the MacBook?
Neat. Great format for explaining
There is also a video tutorial by Let's build that app: https://www.youtube.com/watch?v=RRuQZSbueJE
Doesn’t know how to print to a console but you think he can set all that up? 
hahahaha man i didn't even size him up. just threw out a suggestion. you right tho.
Comment of the day right here 
If you test for `nil` you can then unwrap it safely or force-unwrap it but you don't have to test for `nil` at all if you unwrap it safely.
What kind of smartwatch is that?
 @IBAction func getAge(_ sender: UIButton) { // Safely unwrap ageTextField.text and then turn it into an Int guard let text = ageTextField.text, let age = Int(text) else { // Failed to safely unwrap so display failure and return resultLabel.text = "Try Again" return } // Safely unwrapped, display result resultLabel.text = "Your cat is \(age * 7) in human years" } 
Well, you do need to convert it twice although you can do it more cleanly with string interpolation. What the OP wants to do is to read in a `String`, convert it to an `Int`, multiply it by 7, then convert the result to a `String`. I'm with you on the `nil` testing. It has its uses but here you're testing for `nil` and then unwrapping. Simply safely unwrapping will do both for you in one step if you use optional binding. So no real need for `nil` testing.
Ooof, yes. Avoid casts wherever you can for just this bug. That's why a constructor can be better, it gives whoever wrote the constructor a chance to properly test the conversion. Now, maybe they didn't test it properly but at least then you'll get a crash right at that constructor and you'll have an immediate idea what happened.
Hey Tyler, 1 month late, but Pulse supports Apple Music now :-)
Garmin Vivoactive HR
That looks nice, how do you like it?
Would adding a `print("stuff")` statement in your app suffice? You can see the log on Xcode when you build and run the app on your phone by plugging it to your mac.
My suggestion would be to update the data source for that cell (ie. the particular element in an array), create an indexPath containing the section and index of that cell, then call `collectionView.reloadItemsAtIndexPaths` to reload just that particular cell. 
You can't stop someone from cloning your app, if you totally want to avoid the risk, then skip the beta testing. Or try invite-only beta and send the invite to individuals who you know won't copy your app / don't have the ability to do so.
Have you tried entering non number input like "Cat"? Does the app crash?
&gt; First of all, does your server take a JSON string as part of a URL? No. Well I mean it can, but ideally it should be submitted as part of an HTTP POST request as the "package" parameter. 
You can use delegate, set the view controller as delegate of textField then when there's change on textField, view controller will receive the change and can perform function. Example: class ViewController: UIViewController, UITextFieldDelegate { @IBOutlet weak var textFieldFirst: UITextField! @IBOutlet weak var textFieldSecond: UITextField! @IBOutlet weak var textFieldThird: UITextField! @IBOutlet weak var button: UIButton! override func viewDidLoad() { super.viewDidLoad() // set textfields delegate to self (view controller) textFieldFirst.delegate = self textFieldSecond.delegate = self textFieldthird.delegate = self self.button.isEnabled = false } // MARK: - UITextField Delegate func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -&gt; Bool { // ensure three of the textfields has one or more characters if let first = textFieldFirst.text, let second = textFieldSecond.text, let third = textFieldThird.text, first.count &gt; 0, second.count &gt; 0, third.count &gt; 0 { // enable only if all of them are filled self.button.isEnabled = true } else { self.button.isEnabled = false } return true } }
Sounds great I’ll have a look!
It's my first smartwatch, I love it. Battery lasts for about 5 days, the display looks great in the sunlight. It may seem big, but it's quite comfortable.
I want to send stuff TO my iPhone to be processed. 
I want to send data on my computer to my phone. So I'm running an iOS app on my phone and all the computer is doing is sending data to my phone. 
what kind of data you want to send? I recommend downloading Documents app by Readdle (https://itunes.apple.com/my/app/documents-by-readdle/id364901807?mt=8) in your phone, then turn your phone into a web server, then you can drag and drop file from your computer to your phone by accessing the specific URL. https://imgur.com/a/IBp18Xr
What, exactly, are you sending to the server? You're doing a HTTP POST, what's your `Content-Type` header? Is it `application/x-www-form-urlencoded`? Will your server take `application/json`?
Huh. Now that's interesting. You bring up a very good idea, even if you're not directly aware of it. Thank you! Right now the server is pulling data as part of a form, and the requests are being sent as "application/x-www-form-urlencoded." But I imagine it would be trivial for me to automatically adjust the "format" variable if the incoming request is sent with "application/json" Assuming I can manage the latter, what would be the best way to POST the JSON to the server URL? 
like others are saying, sounds like you need a server. if you know Swift you can very easily create one with Vapor and host it on heroku. You could look up a tutorial, Vapor makes it pretty easy to create servers for Swift people. 
Apple has an excellent article on exactly this: [Uploading Data to a Website](https://developer.apple.com/documentation/foundation/url_loading_system/uploading_data_to_a_website) 
What data? What type? From where? Is it files?
Nice and succinct!
Yet again, Apple syntax seems to just not want to be compatible from one version to the next. Getting errors with Apple's own examples: The line: let task = URLSession.shared.uploadTask(with: request, from: jsonString) { data, if let error = error { Returns: - Cannot convert value of type 'String?' to expected argument type 'Data?' - Consecutive statements on a line must be separated by ';' - Expected expression
Lucky you, the nastiest bugs I've found are due to internal framework errors.
&gt; I want that data transmitted to a computer Maybe write it correct next time. 
Ok this is serious bullshit. I stopped the build, saved the project, quit XCode, restarted, and immediately restarted the build. The code is now sending to the server but apparently not correctly. XCode is trash. When the same exact code throws four completely different results, it's seriously broken. This is impossible to work with and I'm beyond frustrated. 
I just tried the example code in a plain ol' terminal app project and it worked fine. import Foundation struct Order: Codable { let customerId: String let items: [String] } func upload() { let order = Order(customerId: "12345", items: ["Cheese pizza", "Diet soda"]) guard let uploadData = try? JSONEncoder().encode(order) else { print("guard") return } // testing with the excellent site: https://webhook.site/ let url = URL(string: "https://webhook.site/insertyourcodehere")! print(url) var request = URLRequest(url: url) request.httpMethod = "POST" request.setValue("application/json", forHTTPHeaderField: "Content-Type") let task = URLSession.shared .uploadTask(with: request, from: uploadData) { data, response, error in if let error = error { print ("error: \(error)") return } guard let response = response as? HTTPURLResponse, (200...299).contains(response.statusCode) else { print ("server error") return } if let mimeType = response.mimeType, mimeType == "application/json", let data = data, let dataString = String(data: data, encoding: .utf8) { print ("got data: \(dataString)") } } task.resume() } upload() RunLoop.main.run() 
Huh, no idea what's going on there. Sometimes it helps to clean the build (shift-command-k) or even clean the entire build folder (option-shift-command-k).
Of course it did. You know what you're doing. :( (Though somehow I'm convinced if you try restarting XCode a bunch of times you'll get a different result.) I can't see what the client is sending but at this point all I know is what the server is telling me: malformed JSON string, neither tag, array, object, number, string or atom, at character offset 0 (before "(end of string)")
Visit https://webhook.site/ and get a custom url from them. Point your code there instead of your server and see what gets sent to it.
1. THANK YOU for recommending that site! That is such a fantastic tool! 2. This is even more BS. The site reported the JSON being sent by the client, and it's formatted correctly. I copied and pasted it into my server app's form and it works correctly. Only when it's sent from the iOS app does it break. So as it turns out, the tool is (mostly) useless. 
Could it be that the server isn't handling the POST properly? Check the headers and make sure they look ok coming from the iOS app. Without understanding more about the server and the code on that end there's not much more I can do. Let me know if you figure it out though.
Yep. Turns out that last bit was my fault. I was looking for a form parameter instead of the full HTTP body. I changed the server code to properly look for the right things, and I'm seeing the right data getting returned in the debugger now. Have gold for your help. It's greatly appreciated. 
Look into Pusher Channels. If I'm interpreting your question correctly you want to be able to observe and respond to data sent from your own controlled web server. I would recommend deploying a Node backend to a service like Heroku for the implementation. 
Hey I wanted to thank you for taking the time to help me fix my 2 issues and for explaining the errors to me. It's incredibly helpful to read exactly what parts I'm still missing in my understanding and put 2 and 2 together. I'm a week or two away from submitting my first app that I've built from scratch (it allows you to read foreign language short texts with translation, has a special calendar, and has a section that parses data from html to offer quick info) in the app store and it's really intimidating how much I still don't know about what seems like basic concepts (like setting the text delegate that I was missing). So thank you for breaking this down for me.
Awesome, glad to hear it all got worked out. That kind of data exchange can be very tricky at times. Thanks for the gold, it’s appreciated. Most of all hearing that your code is working is the best reward. That’s why we’re here!
Yeah. Brain is an awesome developer, he just taught regarding UILabel only. In this article, you can implement dynamically to any UIView or SubViews. 
Thanks Sinbu, Glad you like this article.
This is really good. Thanks for sharing.
Is there a specific situation where you have to use "guard" or "if" only? Or are they interchangeable?
Well, `guard` can only be used if you want to escape the current scope since it has to have some sort of exit statement - `return`, `break`, `continue, `throw`, or something like `fatalError(_:file:line:)`. An `if` statement can be used anywhere. You use `guard` because it explicitly signals that it's a possible early exit. That makes it ideal for checking values in a function, if it passes the `guard` then that's the "good path" and you can keep on processing the values. Anything that falls into the `else` of a `guard` is the "bad path" and will exit the scope.
It’s a nice guide! I would however use a different type than a String because an empty string is pretty similar to nil in many cases and new devs might not understand the difference. Int makes a good example because having no value is different than 0. If we keep the person struct, we can use age and set nil as unknown. 
Your table view and map view should have the same data source- an array of pointOfInterest (or whatever you’re showing on your table/map) your cellForIndexPath method should populate your cell with pointOfInterest[indexPath.row], and your didSelectCellAtIndexPath method should call some method like mapView.highlightAnnotation(forItem: pointOfInterest[indexPath.row])
There are a few ways to solve. Here’s a couple: - Have the table and the map communicate the selected model object between each other, on didSet find the appropriate index and select it. - Put the model in a data source object and update the selected index when it changes in either the table or the map, then have both register to updates and refresh themselves whenever it changes. 
Easiest way: In your iOS app's Info.plist set [UIFileSharingEnabled](https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW20) to YES. Then use NSSearchPathForDirectoriesInDomains to get the Documents directory of your phone, and write data to a file in that directory. Then connect your phone to your Mac using a USB cable and open iTunes on the Mac, and select the iPhone's icon from near the top of the iTunes window. Once you are in that mode, choose 'File Sharing' from the sidebar of iTunes. You'll get a list of apps on your phone that have UIFileSharingEnabled YES. Select one, and its Documents directory appears in the right side of the iTunes window. Now you can drag files into and out of that window onto your Mac. 
Thanks!
Thanks!
Thanks! That's a good suggestion, I didn't thought of that when I first wrote this post, will amend it soon!
You planning on any more? As a relatively new developer there’s a few things I’d appreciate tutorials on!
Yes, I am planning to write article like this every 1-2 week or so, what are the things you would like to see?
I’ll be checking them out too! Delegate especially. My biggest desire was more general about segues and the life cycle of views - like if you segue and go back, are the views destroyed, or put in a stack, what kind of segue is used for what purpose, etc. I’ve recently read apples documentation which clears this up a bit, but that more covers segues as opposed to the lifecycle of each view in the project! 
Hey! I like the way this is done. However, the hardest part in implementing skeleton views is not creating them, but making sure they are shown at the right moment and replaced with the actual content whenever that’s possible. Do you have plans on writing about that?
And its possible to do the file dragging programmatically with my own UI on OS X?
So the iPhone would be reading in image files from a directory on a computer. 
Great job, thanks for sharing, look forward to more of these.
The first step is to draw out what you want the screens to look like. Open up Xcode, make a project and then open the storyboard file. Inside the storyboard file, you can lay out all the UI elements you think you need. Then get that all into a Github or Bitbucket repo so you don't loose your work.
Thanks I'll do that right away :)
Personally, this is the hardest step for me. I am no designer and I agonize over the UI/UX of an app. Fortunately, I work with some very talented designers. 🙂
I'm sure that's entirely possible, I don't know how though and I think you'll struggle to get this working. Why do you want this? For testing or you're trying to make an app that does this? 
Sort of: You can use applescript to start Mac apps, and send mouse-clicks at specific places. iTunes used to be much more fully scriptable, bit that was a long time ago. There are command-line tools that run on the Mac like https://github.com/ios-control/ios-deploy that let you manipulate the filesystem of an iOS device connected by a USB cable. I used to have one, but I can't find it now, that would let you list the Documents directory of a specific iOS app, and read, write, create, destroy files there.
Sounds like you need a screen for inputting players names, an add and a done button, add adds players to an array of players and done segues you to a new view consisting of a tableview, populated by the players, split into the desired number of sections (depending how many teams you want). You could use prepare for segue to either pass this data directly to the new view or to store it on the phone itself. Then, as you update scores, the array gets updated, keeping track of both team and player scores. Sounds like it shouldn’t be too difficult! There’s a swift tutorial on making your own meal tracker app - the principals are the same: add meals, go to a view where you see and can edit the meals. It involves prepareforsegue, tables, etc. I’ll go try find it.
If it's a public repo then the work will be let loose for sure.
Your function doesn't have a "return" keyword. When you use "-&gt; String" your function is expecting you to return a value of that type, but currently, again, it isn't returning anything. If you just delete the "-&gt; String" section you'll probably get the results you want.
Additional tip if you are using Swift 4.2 and later (or reading this in the future), you can use the random number generator that is baked right in Swift. `let randomNum = Int.random(in: 1..&lt;5)`
I see. Thank you for the help!
Alright, so I've found two issues with your code. 1. Remove the `-&gt; String` return type declaration after `magicEightBall(value: Int)`. Yes, after the function is called, you are dealing with (printing) a string, but no where in the function's `if` block are you actually returning a String value. 2. `func magicEightBall(value: Int)` only takes values of Int type. Your `randomNum` constant is actually of type UInt32. Why, though? The `arc4random_uniform` function actually returns a value of UInt32. Here's the full declaration: `func arc4random_uniform(_ __upper_bound: UInt32) -&gt; UInt32` To remedy issue #2, you can convert `randomNum`'s UInt32 type to Int type with the declaration of a new constant `randomNumInt`. `let randomNumInt = Int(randomNum)` Then call `magicEightBall(value: randomNumInt)` instead of `magicEightBall(value: randomNum)`.
Just FYI to anyone reading in the now, Swift 4.2 is only currently available in the Xcode 10 betas. ;(
And as an additional tip, you can get the same logic of the current function shorten to this: `func magicEightBall(value: Int) {` `print("You got \(value)!")` `}`
 import Foundation func magicEightBall(value: Int) -&gt; String { return "You got \(value)!" } let randomNumber = Int(arc4random_uniform(UInt32(5))) print(magicEightBall(value: randomNumber)) Here is how I might go about writing this program. It begins by creating a random number, then printing the string returned by the magicEightBall function.
Unless you build the tool chain yourself :)
I know this is a massive nit-pick, but your function is _technically_ not equivalent because in the original function, any integer value &gt; 3 results in printing "You got 4!". Your code delivers behaviour that might be more expected.
This solution is better architected, unlike the suggestion to remove the `-&gt; String` from the OP's code. However, it doesn't have the same characteristics... import Foundation func magicEightBall(value: Int) -&gt; String { return "You got \((0 &lt;= value &amp;&amp; value &lt; 3) ? value : 4)!" } let randomNum = Int(arc4random_uniform(5)) print(magicEightBall(value: randomNum)) 
I know but was following the same logic, since he did all possible cases. And if this would be done properly the random should be moved into the function and handle the print accordingly. 
I've actually made a LOT of progress..! I've made a "homepage" that navigates to two different lists in which I've added the functionality of adding a new item to the list or remove existing, I've also made a ticker where you can declare the number of people you want on each team. So now my question is, how do I save the now edited lists as a "global" variable so that I can access it from another screen?
Thanks! I've actually made some progress as I've stated in my comment above, I just need to know how to declare lists as global variables so that I can access them from another screen!
Since this is a "really simple app" that you are using to learn, you can get away with storing the information in `UserDefaults`. This will have the added benefit of automatically saving the information so that the next time the user opens it, the data from last run will still be there. Once you get past the hurtle of writing apps in general, your next steps will be to learn proper app architecture which in this case means putting the logic somewhere other than in your view controller. That can wait until later though. :-)
Or download the prebuilt toolchain from swift.org.
These are just extra views on a controller. If you have a UIViewController open in storyboard, drag a UIView next to the existing View in the Document Outline. Then at the top of the view controller there will be a new white box, you can click on this to activate / view the new view you made. Then you can assign an outlet to it, etc.
If you really want to nerd out, this has been around since 2015. The top bar is technically called a "Scene Doc", featured here for the first time: https://developer.apple.com/videos/play/wwdc2015/215/ @ 11:40.
&gt;import Foundation func magicEightBall(value: Int) -&gt; String { return "You got \\(value)!" } let randomNumber = Int(arc4random\_uniform(UInt32(5))) print(magicEightBall(value: randomNumber)) And you also don't need type cast 5 as UInt32.
What they did here is add a View to a ViewController but outside of the View, so you can identify this view and add to the View only on the moment that you need to use I recorded a video to show you how to do this [https://www.youtube.com/watch?v=rfniG4DqDpE&amp;feature=youtu.be](https://www.youtube.com/watch?v=rfniG4DqDpE&amp;feature=youtu.be)
Here is another way to write this ``` protocol ResultPrintable { typealias ResultType var result: ResultType func print(_ result: ResultType) } fileprivate class MagicResult&lt;T: ResultPrintable&gt; { var value: T init(_ value: T) { self.value = value } } fileprivate final class MagicIntegerPrintingManagerFactoryi { static func create(ceiling: Int) -&gt; MagicResult&lt;ResultPrintable&gt; { let result = Int.random(in: 0 ..&lt; ceiling) return MagicIntegerPrintingManager(result: result) } } fileprivate class MagicIntegerPrintingManager: ResultPrintable { typealias ResultType = MagicResult private var result: ResultType init(result: ResultType) { self.result = result } func print(_ result: ResultType) { print(“you got \(result.value)”) } } class MagicEightBall { let printingManager = MagicIntegerPrintingManagerFactory.create(ceiling: 100) let result = MagicResult(printingManager) printingManager.print() } ```
Is DoCalculate running? 
Nope, that's where my main issue is. I push calculate and it stays at 0
Ahh that’s what they did — thanks for the video, +1. 
Thanks for providing the name, that’s helpful! Appreciate the response
you're welcome :)
Exactly - you’re never calling the DoCalculate
You shouldn’t force unwrap a text from a label like you’re doing in DoCalculate()... The second a user presses the calculate button assuming you’re gonna wire it to a button, your user’s phone might as well explode because your app is gonna crash so hard. 
&gt; and I would actually enjoy explaining how to use the debugger willingly and as helpful as possible. It would also be nice to collect a few good articles/tutorials on things like this and put them in the wiki so people can be referred to it. I don’t know if we need to be quite a strict with this as /r/Fitness is with the enforcement of [their Rule 0](https://www.reddit.com/r/Fitness/wiki/rules?utm_source=reddit&amp;utm_medium=usertext&amp;utm_name=Fitness&amp;utm_content=t5_2qhx4#wiki_rule_.230) (due to the difference in size and visibility of the subs, but having a well stocked wiki would be a big help.
I read the article that OP posted and do people really use enums like this? Like I get theoretically we could learn this stuff, but in the Wild I feel like I’d never use this at work
Thank you for posting this.
Dear lord, this is a horrible way to build UI. Just do it programmatically. None of this dragging arrow shit.
I am not going to give you any advice specific to your issue, I am rather giving you my self-teaching advice. I would recommend drawing out your app on a whiteboard and breaking it down into the simplest of features and then searching tutorials on youtube or use stack exchange to LEARN how to do these things. Although, when using stack exchange answers try your best to never copy/paste and rather manually type the code and only use code which you understand. That way you are actually learning rather than brainlessly leaching. Also, when I say to break down whatever you want to program, I don't mean searching a tutorial for how to create a login screen. I mean learning how to create a database, how to read/write to it, how to create a textfield/password field, how to create a UIPicker (if needed), ect. From my experience it is also commonly worth "wasting time" with long tutorials rather than short tutorials as they often give an in depth explanation of everything they are doing which allows you to learn how to do what they are doing yourself. Also, as someone else mentioned: I personally like to create my entire UI in Xcode before actually programming. It helps build the vision of the app and breaks things down nicely. Another tip I have is that cocoapods/libraries do exist and you can often get away with completing very large tasks within less than an hour thanks to another wonderful developers hard work.
Hey there - I wrote this tutorial! If you have any more questions, I'd be happy to answer :) 
The whole point of optionals is that in Swift a variable must have a value - unless you declare it as being optional. This means that the value of a variable can be unknown. Or absent. This makes truth maintenance much much easier. Any variable of non-optional type has a value. Period. No more checking if a variable is nil. The language **GUARANTEES** that variables that are not optional always have a value. Vice versa the Swift language has optionals built into the language which means that there are also constructs to deal with optionals in a concise way with `if let` and `guard` and optional binding. This creates a meaningful way to handle truth maintenance and gives you the means to deal with unknown or absent values within an expression. Compared to the `Optional` class in Java for example this is a huge step forward. 
Yes well that really has not a lot to do with Swift but more with iOS does it?
Set up a web browser and use a HTTP request to fetch them.
I would say it’s still relevant to Xcode / swift, as you can’t code an app if you don’t know what’s going on under the hood.
&gt; way to build UI. Just do it programmatically. The fact that saying/typing this does not raise any alarms on you speaks great volumes. 0/10 wouldn't hire. Coding UIs is probably the worst practice the Swift Dev community has come up so far and it all boils down to: I am a huge, useless piece of trash that thinks programming means copying stuff from Stack Overflow. Learn the fucking storyboard you cunts.
Wow, I had no idea you could do this... This really prevents the "hidden" view mess that is going on in some of my VCs. thanks!
&gt;I read the article that OP posted and do people really use enums like this? Like I get theoretically we could learn this stuff, but in the Wild I feel like I’d never use this at work I'm a bit new to this all but how else do you manage your different states then? Do you use a struct with a few different variables in it and then check each variable within the struct when you want to change the state? 
Seriously at google they don’t even use nibs or storyboard. Those are for total noobs
Storyboards is so amateur hour. Real programmers build their UI in code. Storyboards take forever to load. Have fun with your slow app. 
Hmmm. This way we’re really stretching the subject aren’t we? Before you know it the sub is about all and everything even remotely connected to the Swift language...
I wouldn’t say so, but that’s just my opinion!
Most likely you're using a library that has Push Notifications-related code in it. Even if you're not using it, it's still there and it shows up in the static code analysis that Apple performs when you upload your binary. &gt; still says that it needs the Push Notifications capability Are you getting this warning via email after uploading your build? You can probably ignore it. They are just telling you that they detected that code but since you don't have the capability assigned then that feature will not work.
&gt; Real programmers build their UI in code. Dude you're killing me, I'm dying over here. But seriously: you aren't building anything. Especially not in a professional evironment where coded UIs simply don't fly. Enjoy getting told to go fuck your super fast apps because nobody else is going to work with you on them
You can easily do with storyboard. Just place a view and move it to fit inside iPhone X safe area. I remember the bottom safe area is 34 pt height
[Positioning Content Relative to the Safe Area](https://developer.apple.com/documentation/uikit/uiview/positioning_content_relative_to_the_safe_area) view.safeAreaLayoutGuide.layoutFrame
Here's a good guide which shows how to use the safe area both with storyboards and programmatically: [Safe Area Layout Guide](https://useyourloaf.com/blog/safe-area-layout-guide/)
Storyboards are not the way to make iPhone apps. Get a job at Spotify, Google, etc and try to create a storyboard and watch them reject the pull review so fast you’ll never write a storyboard/Xib ever again. 
Google and Spotify uses pure code...
wow kiddo, hope you are kidding. Do we build web UIs with a WYSIWYG editor? No. Do we build android with it? No. Do we build desktop apps with it? No. It's not a practice that we "came up with". It is the best way to create UI. And copying from SO? Not sure what you are talking about there. Storyboards are great for script kiddies who learned iOS development yesterday.
You need to ask yourself why they do it. 
Are you ok?
Dude, what are you even talking about? I've worked on mobile teams with 30+ people. You can't merge storyboard files. You can't merge XIB files. Making views in IB is slower than doing it with Autolayout/SnapKit. Sorry that you can't program a simple UI and have to use a crutch.
Care to elaborate? I’ve never understood what the benefits of creating views in code over storyboards is. Sure, auto layout is a pain in the ass to debug, but how often does that happen? (I’ve had one issue in the last couple years) Don’t get me wrong, I create lots of views in code, but only when I can’t create a storyboard. 
Well there’s a few reasons: Storyboards take longer to load. Have merge conflict issues, etc Another reason is a little more complex but that a lot of the designs are done using a design language. Spotify uses a design system called GLUE which essentially allows them to make their designs unified. Let’s take their homepage for example. They can configure their homepage fully driven with the backend. For example they might have a grid, carousel, button layout, carousel, grid. They can simply tell the app how to lay it out in that manner. When these components are designed they’re given properties such as height, width, etc. You can’t just edit that in the Interface Builder when it’s powered by the backend like that. It must be a view created in code. 
Well if your autolayout is wrong wouldn’t your unit tests catch that?
Love all the downvotes from the IB script kiddies. lol
I just have passion and want the young bucks to learn properly
try this: print(view.safeAreaLayoutGuide.layoutFrame) On an iPhone X in portrait with just a status bar it prints this: (0.0, 0.0, 375.0, 812.0) 
I have two related questions if you don't mind... 1\. How would one parse the incoming JSON returned by the server? I'm seeing it in the debugger, but I'm not sure how to unpack that into variables I can do if/then/else statements on. Here's what I'm working with, based on Apple's example: let task = URLSession.shared.uploadTask(with: request, from: jsonData) { data, response, error in if let error = error { print ("error: \(error)") return } guard let response = response as? HTTPURLResponse, (200...299).contains(response.statusCode) else { print ("server error") return } if let mimeType = response.mimeType, mimeType == "application/json", let data = data, let dataString = String(data: data, encoding: .utf8) { print ("got data: \(dataString)") } } So I'm seeing that: print ("got data: \(dataString)") is what's sending data to the debugger. In this case the server is returning either: "authentication": { "message":"failed" } or "authentication": { "session_id":"12345" } I'd like to get the app to execute my view switching routine if a session_id is returned, or pop up my "login failed" alert if the "failed" message comes back. 2\. What's the best way to handle server timeouts? I'd like to pop up an alert that says the communication with the server timed out. 
Safe areas change between versions. This is a terrible idea
Sure. You get a lot more reusability with your code if it's in code. A big one is a custom initializer, (a nib can also do this though). In storyboards, segues tightly couple flow and can create a large, messy convoluted, force casted `performSegue` function. I have no idea why Apple insists on Storyboards. Once you get passed beginner, they are more of hassle then they are worth.
And I didn’t suggest that make UI with storyboard is better, so your comment is inappropriate 
Thanks! I was trying to get the safeAreaInsets in the viewDidLoad().
Versions of...?
iOS. This year, on iOS 12, the safe areas changed on the iPad: navbars and toolbars got taller. Please never hardcode safe areas. The api is dead simple to use
Senior developers, especially ones working on high visibility apps, should be solve problems like view creation using multiple techniques. And they should know the general tradeoffs between them. For this specific issue, one approach isn't preferable to another. You should definitely know how to use storyboards and nibs, because that's the standard approach. You should also know enough about the view lifecycle and UIKit components to do any part manually. But don't do it just because you assume it's a best practice.
\+10000 Nobody builds website with a WYSIWYG editor. Nobody. Why? Because it's shit. It's not maintainable in source control. You can't merge it. You can't debug it. You can't test it. We had to train all our devs to build UIs correctly when we expanded our iOS projects. So many "developers" think dragging buttons around constitutes software dev.
Also if you want to work there, stop using autolayout for laying out views and pick up on Flexbox style declarative UI. [YogaKit](https://github.com/facebook/yoga/tree/master/YogaKit) is a nice place to start.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [facebook/yoga/.../**YogaKit** (master → 77ea794)](https://github.com/facebook/yoga/tree/77ea79490f245e67c1b255b155b6ed66ee2ca05f/YogaKit) ---- 
It doesn't matter how you create your views. If you're smart enough to get hired, you're smart enough to do it the "right" way (i.e., the way your team does it). Source: I've gotten offers from two of those companies (and have worked for Apple where I used Swift). 
You are welcome to create a new sub called advanced swift
Not true. You can fully drive a storyboard UI from an API. Also, storyboard merge conflicts are a thing of past, if you refactor them into smaller storyboards and use storyboard references.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/iosprogramming] [\[X-Post\] How to ensure that Core Data will save to the database when the app is terminated either by the system or the user?](https://www.reddit.com/r/iOSProgramming/comments/8uncgu/xpost_how_to_ensure_that_core_data_will_save_to/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
This is a great site to determine if you should use storyboards or not https://shouldiusestoryboards.com
I don't mind the beginner questions so much (even though they're better off on Stackoverflow IMO), because they're specific and beginners don't know -what- to search for. The constant questions about "where can I start learning, what books can I start reading" is something that the Wiki is meant for though. New books aren't written every hour.
1. It has to do with control. Interface builder is a powerful tool but when you use it you give up a lot control to the system. For example say I set some properties maybe color or font size. When I come back to that later on how do I know if that set to a custom value or not. I mean I might remember from my head or even have documented it somewhere but ultimately it’s hard to tell. Where as in code I can see exactly what properties I’ve set and haven’t. 2. if have more advanced configurations that aren’t supported through IB I would need to resort to writing code and you don’t want to be setting some properties in IB and some in code as it could lead to some hard to find bugs issues. 3. understanding IB performs a lot of magic in my opinion. The problem with that as soon I can’t do it by dropping dragging or have some unexpected behaviour then I have to go find out what it’s doing. I find this becomes more frequent as move further from the basics. That’s just a few off top my head. I’m also only beginner in iOS dev myself for context. I do like IB for prototyping the look and feel though. I’ve used IB purely to mock the look then build that view out in code which kind of caters to that visual prototyping loop which is so painful on iOS because you have to compile the whole app everytime. I think Apple could really improve this area with few simple thing. 1 a hot reload system. 2. A more native approach to separating the styles of views aka style sheets 
This post is the example of a LPT from someone who has never work in a big company developing an iOS project. Yes, they use Storyboards. Probably they don't use it as you do. You can split storyboards into multiple files which mostly avoids the merge conflicts. Depending on how complex is the scene you want to make, you can even split a scene into multiple ViewControllers and have them have different parts of the screen controlling something. Each of them being controlled in a different storyboard. I can read a view programmatically, I do it for practicing most of the time. But my productivity will decrease. Especially finding bugs, it's not so straight-forward...
https://stackoverflow.com/questions/2138252/core-data-multi-thread-application
And don’t forget about heavy patterns like VIPER and it’s routing, so you need to manage flow programmatically. 
I’ve work at one of the three companies in my title. 
&gt;VIPER Just threw up in my mouth. 
Did you use storyboards or nibs at either of those companies
Until you master this and then get a job at a place that doesn’t use it... 
Obviously you just convince them to rewrite everything, since that’s what Facebook and Google use.
To be honest, using xibs/storyboards feel like using a bad 3rd party library instead of doing the standard approach. Static XMLs get bundled in your app and parsed runtime instead of build time, the files change just from opening them with different xcode versions, all the outlets have to be optional (force unwrapped by default). You can't just make a custom view class in a XIB and put it in your other storyboard/xib. IBDesignable works less often than not, there is no enum IBInspectable variable. WKWebView has been in iOS8 but initFromCoder only works from iOS11. Non-autocomplete strings are being used for identifiers. And there are probably at least a couple more problems with them that I didn't list here but raise a red flag.
I mean technically it’s possible but would be such an annoyance and wouldn’t be flexible 
&gt;Static XMLs get bundled in your app and parsed runtime instead of build time FWIW this is how Android does activity layouts by default. &gt;the files change just from opening them with different xcode versions I think this is pretty standard for most editing tools?
All of that is true, but while not everyone agrees, I think building UIs initially via IB is way faster, and has a nice feedback loop. I still build my UIs in code for reasons you listed and more, but IB has some advantages. 
Why do you need this value? You should be using auto layout 
You have had a job in Google, Facebook or Spotify? Can you give me a referral haha? Applied and got rejected from at least Spotify based on the assumption that this guy most had a lot of years under iOS. I have about 4-5 years now. He most of had 10 for this entry level position. Also I feel like after a while you find a reason to code your view if you want to guarantee it function and look the same. I feel like after a year you will have that experience. 
Actually i have worked at one of the 3 companies in my title. I’m speaking from experience 
Or LearnSwift
You can still have a merge conflict in one of those smaller storyboards. They aren't a thing of the past.
Thanks for the tip. But what are good sources for learning to build responsive views in code? Because most of Apple's documentations are based on making views with the storyboard. And do you recommend to use libraries/frameworks? 
Well, overstatement from my part. But aren't those merge conflicts significantly easier to solve? I remember spending hours on storyboard merge conflicts back in iOS 6/7 era, before the XML file format was a horrible mess and there was no support for storyboard references
Spotify uses Hub Framework IIRC (and drive their UI completely from the backend), Google has their own, Facebook is Javascript and React Native. These companies, for the most part use a completely different stack. Before mobile development, bigger companies like Google and Microsoft often had their own internal frameworks. (Google's Gmail used a proprietary JS framework and not jquery and Microsoft's Ribbon UI is again a proprietary. Bigger companies will always have their own way of doing things. That necessarily doesn't mean everyone else's way of doing things is completely wrong.
Right, but storyboards are not a WYSIWYG editor. 
I have no problem whatsoever with those questions. This is a subreddit for a programming language, after all. It should be expected. And sarcasm is unhelpful and unpleasant to those trying to learn.
great, simple and helpful :)
Fluent is actually separate from Vapor and has its own tests. I think what OP was talking about was how Vapor is composed of a bunch (12) smaller, more specific packages that each have their own tests. https://github.com/vapor/vapor/blob/master/Package.swift Each of those packages are themselves composed of packages. Core for example imports Swift-NIO which takes care of the brunt of the networking and has hundreds of tests https://github.com/apple/swift-nio/tree/master/Tests
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apple/swift-nio/.../**Tests** (master → 89d4646)](https://github.com/apple/swift-nio/tree/89d46464ec25876de2b705fa51a5d789c296d8ba/Tests) * [vapor/vapor/.../**Package.swift** (master → 74a46ec)](https://github.com/vapor/vapor/blob/74a46ecacca51d326a1e8cf4b7967827765f05bf/Package.swift) ---- 
Apple uses both. They show lots of internal code examples in WWDC talks, for example: https://developer.apple.com/videos/play/fall2017/201/ Look around the 4:15 mark. In general it looks like they try to follow their own guidelines. 
IsHidden is the getter... aka read only... Try Button2.hidden = true... https://developer.apple.com/documentation/uikit/uiview/1622585-hidden?language=objc Personally I would have one action and both buttons call it, and it determines what to hide based on the sender, which is the button that called it.
Tim Cook would rip me a new one if I told you, sorry. (I don't do UI-related stuff, no idea. Those companies are pretty big, what is used probably depends on the team)
I will be interested 
Where is Button2 defined?
That’s only for obj c, in swift isHidden is a read write property. 
Oh, I read somewhere that in Swift 3 .hidden was updated to .isHidden. At any rate, I just tried it and it is still returning the same error.
Dammit - that’s why I hate that my day job is all objective c So my guess is there’s no Outlet defines for Button2...
It's not, I just assumed that naming the button with that title would differentiate it, but now I understand why I would be getting this error. How does one go about defining a button?
Yeah - I crossed up my day job ... Do you have an outlet / referenced defined for Button2
Control drag down into the swift file and add a referencing outlet...
Feel like an idiot, figured out that I had to do that, and how to do it. Appreciate it!
No, I’m the idiot telling you to us objective c syntax ...
I don't understand why people are vehemently opposed to either way. I'm glad whenever I hear that Apple uses storyboards, and I'm also glad to hear that they're not insane enough to use *only* storyboards. Personally I've found that storyboards are great to be used as kind of a "view constructor". Because they remove a lot of boilerplate code, they're great for setting up initial state, relationships, fonts, constraints. Then I only tend to programmatically alter the view if the constraint needs to change, the color depends on a run time state, etc. Some people have been burned once with source control in storyboards, understandably, I've certainly been one of them. But the speed of creating views and the lack of boilerplate code IMO is not a good enough reason to let the fear of a rare merge conflict restrict your options. I've found that the merge conflicts in storyboards have come a long way too. If I was starting in iOS dev again, I would encourage someone to construct the views programmatically to understand what's going on, and I certainly did that in the beginning. But I've been doing iOS for so long (prior to storyboards), that if the team is ok with it, then I've going to favor the more efficient way of storyboards.
Will be? When will that be? Lol
Yeah, anyone that runs into major storyboard conflicts now, probably isn't following clean programming standards, and should probably rethink the level of abstraction. Or they were burned 5 years ago and haven't given storyboards a try since. Give it another chance ;) 
But someone could ask about generics in response to my answer. Becoming a good engineer is a lot about reading other people’s code, right?
No developers think that. The only ones who think that software is only dragging buttons around are bad managers (it sounds like a joke but yes they do exist, I've worked for them). 
&gt; Becoming a good engineer is a lot about reading other people’s code, right? Yes, but what you posted was a barely readable, unformatted mess. Perhaps it wasn't deliberate, but I assumed that was part of your "irony".
I’ve been doing this shit for a long time
Then stop. No one says you have to personally deal with every question.
I agree with you. I'm just curious about why you'd say "otherwise everyone would do it"...isn't javascript aggressively defended among devs? Therefore I've assumed that the majority of programmers love JS, or more specifically its frameworks (at least in the discussions that I've had, lol). But I agree that it's hard to find a Swift job right now, and that also depends on location. I'm in Toronto, and 5 years ago everybody was looking for native mobile devs. Now most jobs advertised are for full-stack developers. 2 reasons for this, although these are only just theories of mine and some of my colleagues: 1. There are a lot more non-technical (finance background) founders starting tech companies vs 5 years ago. To them the 1 programming language for all platforms talk is especially appealing, and they don't tend to know enough to understand the drawbacks. 2. In combination to the above, or perhaps because of it, React Native has flourished. There could be the inverse that happens in another few years from now with web assembly. Instead of javascript eating everybody's lunch, perhaps it could be Swift / Java / freaking C devs that eat JS's lunch. Interesting prediction, but I've seen crazier things (JS taking over from Flash was once seen as unlikely). Ideally though, there is room for a combination of platforms, founders just need to be more knowledgeable. I believe that the finance crowd will run away from tech startups in the next crash though, and things will be more balanced again.
&gt;That necessarily doesn't mean everyone else's way of doing things is completely wrong. ... or that a bigger company's way of doing things is correct.
First off: loving the elevator pitch r/BallIsLife. I think being able to create your own api for this sort of thing is a huge advantage, in my eyes anyway. You’ll for sure want to make a Person object with various stats for properties that you think are important. If you’re going to be presenting object data throughout the app I’d suggest using structs rather than classes. Ideal for data transfers. Its data is copied, rather than referred to. As a first timer it might be a bit too much to create your own custom views, so definitely search github for a Tinder Card Swipe library that you can download using Cocoa Pods or Carthage.
Here's a sneak peek of /r/ballislife using the [top posts](https://np.reddit.com/r/ballislife/top/?sort=top&amp;t=year) of the year! \#1: [Check out my 4 year old daughter playing basketball!! She’s been practicing only 2 months and can dribble with both hands!!](https://youtu.be/vHlyQXMtAHM) | [0 comments](https://np.reddit.com/r/ballislife/comments/7etdq4/check_out_my_4_year_old_daughter_playing/) \#2: [MICHAEL JORDAN THEMED WEDDING. I REPEAT, MICHAEL. JORDAN. THEMED. WEDDING.](https://i.redd.it/y5xm9mzph4r01.png) | [0 comments](https://np.reddit.com/r/ballislife/comments/8badtq/michael_jordan_themed_wedding_i_repeat_michael/) \#3: [When ball is life.](https://i.redd.it/r0ailk2qr1h01.gif) | [2 comments](https://np.reddit.com/r/ballislife/comments/7yih0j/when_ball_is_life/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Not standard at all. I've been making iOS apps for 6+ years. No company used them. All actively avoided them because they had seasoned developers who knew the downsides. 
What about Apple?
Honestly, as someone frequently on the hiring end of the table, you’d be out the door if you said you refused to use storyboards. Like all tools there are times and places for both. If you’re calling yourself a professional I would expect you to be able to distinguish when a particular tool might be right for the task at hand rather than refuse to use the proper tool out of some ideological stance of proving you don’t have to. In fact I expect people to know how to use NSURLSession, auto layout and proper use of constraints, storyboards, and general UIView/NSView hierarchies **without needing third party libraries**, and being able to explain each during interviews. While using things such as Alamofire are frequently the way places choose to go, people should be able to understand what is being used underneath and how it works.
I love all the downvotes in this thread. Tons of first tutorial iOS script kiddies who use storyboards. lol. Stop downvoting and provide some real feedback after you read your second iOS tutorial. 
Lmao exactly 🤣 
lol. Merge conflict? Ok, let's have tons of smaller merge conflicts in a file that nobody can understand or code review. Any sizable application is held back by storyboards/xib. I shouldn't have to use a specific editor (Xcode) to get my job done. Also, Xcode is shit.
Yeah 100%... I work at one of the three in the title. We don’t hate storyboards because we think we are better than anyone, it’s because it’s not enterprise style coding
Yeah these videos are for the layman trying to learn iOS development. Not someone with 7 years
Tightly coupled flow is intentional. If the flow is not coupled tightly with the controllers, writing transition animations is going to be tough.
This is exactly the approach we take where I work. Keeping an open mind and not being stubborn in your ways is going to go a long way. We would send a person packing if they came in with an attitude that they know best and anyone who disagrees is wrong. And 100% on what you said about third party libraries. Get to know how things work without relying completely on a specific tool. 
When you’re building large, enterprise apps like Spotify or Facebook, you don’t do some in storyboards, some in nibs, and some in code. Maybe there are some old legacy things in there, but at the end of the day, a large iOS app like those are complete systems and must be maximized for scalability. 
Enterprise iOS is much different from the iOS in Ray Wenderlich tutorials
I mean I’m not gonna die on that mountain over a job that employs me and pays me. I’ll do what they want and I can do it well. My point is being able to do it all well enough so that you have a choice. Knowing how to use storyboards is iOS development 101 stuff. I am also on the other end of the hiring process and I’d give way more of a red flag if a guy didn’t know how to build views in code over a guy that only uses code. 
He answered your question with references. Why shit on him and come off sounding like a code snob.
It's very easy to prove that Apple uses Interface Builder to create UI for their apps. Run `ls /Applications/Mail.app/Contents/Resources/Base.lproj | grep nib | wc -l` and you'll see there are 56 nibs, and `ls /Applications/Mail.app/Contents/Resources/Base.lproj | grep storyboardc | wc -l` shows 1 storyboard in the Mail app. Here's a small sample I took: | Mac App | NIB count | SB count | |----------|-----------|----------| | Mail | 55 | 1 | | Messages | 31 | 0 | | Maps | 32 | 0 | | Numbers | 275 | 1 | And that's without checking anywhere but the base localization bundle, or checking any supporting frameworks.
It can seem repetitive. But I can argue a benefit. Like the old commercial: “if you haven’t seen it before, it’s new to you”. If I’ve already answered a question before, I generally don’t answer it again. I see if someone else answers it. Maybe someone I helped. Maybe someone that read the one I learned from. So it’s a cycle of repetition that helps with learning. You go from asking, to helping, to saying “not this again”. Granted, novice questions shouldn’t be so repetitive as to knock fresh content off the front page. But leave the novice questions to the novice teachers and let them all cut their teeth. 
Hello David, Thanks for reading this article OfCourse we have plan to do, going to update you soon.
Wow that’s awesome. Thanks for sharing this!!
Yes I know, but’s it’s still common with big projects
&gt; You should definitely know how to use storyboards and nibs, because that's the standard approach. It's really not. If anything is "standard approach" for larger well known apps, it's building views in code. Storyboards and nibs are the exception, and generally frowned upon, if not outright banned.
I really feel like there’s also a problem with team communication when any two devs are working on the exact same nib file. Using nibs over exclusively programmatic views just yields incredible time savings.
Burned 5 years ago here! :D I agree that Storyboards have improved since, but loading times are still too long and I still think that putting more than 1 view within a single file that remains problematic upon merging is still a bad idea, so nibs over storyboards.
Hold on a second—Spotify and Facebook are enterprise apps? Pretty sure they are consumer-facing. It’s not the number of users that dictate whether an app is enterprise/consumer, FYI.
&gt; I'm just curious about why you'd say "otherwise everyone would do it" I was probably answering the question more broadly than you're looking at it. *In a general sense*, being a developer (for any system, using any language, with any frameworks) is hard. It takes time to learn and much more time to master; it's not something any Jimmy or John can learn over the course of a weekend and be employable in by Monday. That's really all I was saying. I may not have answered OP's question properly. As for your experience in Toronto, that's not at all what I've experienced out on the west coast. Granted, my experience is biased because I know absolutely fuck-all about JS and never pretended to when prospecting for jobs, but I have yet to be approached by a single recruiter for a position that uses any of the cross-platform frameworks. It would be bizarre for me to be asked full-stack questions as an iOS dev. I'm also biased in that I have 3+ years of developer experience now but the second I flip that switch on LinkedIn I'll have a dozen recruiters a week pinging me for native dev positions. Hell, I have my account locked down as "not interested at all" right now and still get a couple recruiters a week reaching out. 
Heck we’re not even talking about building websites
No problem. You can look inside app bundles and introspect the binaries to learn little details about how they work. &gt; interesting how little they use storyboards That's not necessarily the case. Since you can fit many scenes inside one Storyboard, you can't compare them 1:1. Also, keep in mind that some of these apps predate Storyboards, so it's not surprising that they'll use more Xibs than Storyboards.
The guy is speaking about iPhone X and now te method I suggested is valid for that device.
Yeah but it might change. It's valid but this is dynamic for a reason. That makes the difference between badly made apps that need their hacks tweaked every year, and ones that work with only a recompilation.
Get off the high horse. I work for 1 of the top 4 banks in the US. Majority of the app uses storyboards and nibs. I’m an iOS developer for it. 
Past. Not passed, beginner grammarian.
&gt; Storyboards take longer to load. Have merge conflict issues Are you speaking from experience? I work for 1 of the big 4 banks. The app uses a lot of storyboards and nibs. I am also the one who manages Jenkins, and we have jobs that forwards all monthly changes to team branches, etc. So if there is ANY conflict, I will know because the job fails, and it’s my duty to keep the CICD jobs running, too. And I rarely, probably in 8 months, have only seen 2 merge conflicts related to storyboards or nibs. And this app is developed by over 7 teams with a total of over 40 develops. Are we just really good at preventing merge conflicts with storyboards and nibs or do other teams just suck that bad that they have merge conflicts constantly with storyboards and nibs? Seriously, what gives?
I make my living from iOS apps and have done for six years. As I am a designer as well as a programmer, I prefer storyboards. And I have no interest in whatever you say next and won't bother coming back to look. I would just like you to understand that just because you prefer something does not make it better, or right, or universal.
I work on an enterprise app; legit have enterprise certificates. Teams and developers use whichever they want or are comfortable with. So our app is a mix of all 3. We don’t have strict guidelines of what you can and can’t use. Also, the requirements we get from the UX/UI team for the screens, reusable views, etc. Is a lot easier and faster to do using nibs and storyboards. This also allows other developers to see the design without having to build the app and find the screen. 
Experience in 1 company. And I speak from experience working for an enterprise app; there aren’t set rules of which is better. 
I work for an enterprise app; 1 of big 4 banks. We use whichever we are comfortable with. There is no set guideline of what we must use. Our app is mostly storyboards and nibs. So I talk from experience. Not some script kiddy who did 1 tutorial. 
Thank you so much, everything is actually working now! The only thing I can't quite wrap my head around is how to display the generated teams to the user.. Right now I have them stored as an Array of ArraySlice&lt;String&gt;'s.. Do you have a suggestion as to how I can simply display each ArraySlice as a separate lines on the screen to inform the user of each team?
Xcode has UI tests. 
&gt; Static XMLs get bundled in your app and parsed runtime instead of build time, That is NOT how xibs and Storyboards work!
[@twostraws's latest tweet](https://i.imgur.com/VjlEHiB.jpg) [@twostraws on Twitter](https://twitter.com/twostraws) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
First point - why is this in r/swift ? - it's a Cocoa programming issue, not pure Swift. Ok there's some really bad advice and misinformation in this thread! I don't disagree with the sentiment that you need to be able to make views in code *if necessary.* You should understand at a fundamental level what is happening when you create a view, add it to a hierarchy, set up constraints, etc, etc. Writing the code helps with that understanding. But you absolutely **should not** be hand coding all your views! If you are building anything more than a trivial view you are going to have to work from a visual design - you just can't do this kind of layout in your head. Storyboards offer you a visual way do build the visual aspect of your app. I think those people who argue for code-only layout are either only working with extremely trivial views, have oodles of man hours to invest in hand coding, or are relying on high fidelity UI mockups from the design team, with all the constraints already specified. Storyboards have some well publicised shortcomings (mainly complexity when working in a large team, and string identifiers can mean a typo stops your view from working). But laying out complex view hierarchies that change and adapt to multiple device sizes is absolutely faster and more efficiently done in a storyboard. I think a lot of people never really get to grips with Storyboards and really understand how to use them. People seem to think they are only a design time tool, and that the output is compiled at build time. They aren't - the storyboard is archived and the components in that archive are the same objects that are instantiated at runtime. A lot of apps don't do basic things like state restoration which is almost trivial if done with a storyboard. Many apps don't change their layout for different size classes, again something that storyboards make possible. Storyboards also provide a kind of overview diagram for your app flow. When you're trying to debug an app and trying to work out what a particular view is, and how you get to it in the app, it's much easier if you can visually see the flow in a storyboard. Largely I recommend sticking closely to the first party tools and techniques recommended by Apple, and that is and remains MVC using storyboards. Only break from this if you have a good reason because it isn't serving you correctly in your particular circumstances. Disclaimer: I've worked full time as a professional iOS developer since 2008, and consulted with many blue chip enterprises. 
In 10 years of iOS development, every single team I've been on has used xibs or storyboards to some extent. 
Terrible advice. Autolayout is very powerful and fast (and getting faster in iOS12). Autolayout *is* declarative!
Later on
It's reddit, this is where the kids go to live in a bubble and think their adults. Downvotes are their weapon. Anything that doesn't agree with them is an automatic "close the ears and say LaLaLaLa" It works when you're 2, it now works in your teens.
Good tip. I was digging into SB just because I figured some jobs wanted them and I rarely ever use them.
While that's true, literally none of the companies that we're targeting here use Autolayout for their layout in their day to day work. Facebook uses the aforementioned Yoga. Spotify has their HUB framework - https://spotify.github.io/HubFramework/ Google has been adopting their Flutter framework - https://flutter.io/ So if you ever want a job at one of these, you best forget about Autolayout. 
I'm not arguing that conflicts in storyboards aren't annoying, but have you tried reading the XML in a storyboard? It's usually ok to read. Some merge conflicts can be resolved by just working with the xml directly.
import UIKit import AudioToolbox class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() AudioServicesPlayAlertSound(SystemSoundID(kSystemSoundID_Vibrate)) } }
Merge conflicts with storyboards are fun! I’ve started to do iOS programming 1 year ago and been learning to do views in code for 4 months now. it’s really easy... I’d argue it’s easier than storyboards (well, autolayout can be a pain at the start...) I just hate how the whole framework is made with storyboards in mind. UIView custom constructors are a pain in the ass. override that init(frame:), implement the init?(coder:), etc... But I fully agree, coded views are essential in large team projects. Also, just landed a job in a big company and they were really happy I implemented the interview exercise without a storyboard / xibs and that I injected all my classes dependencies. They really like to test the code base, so that is huge in that case.
Usually, arrays are displayed to the user with a UITableView. I'd have to look at your project to say more.
No it isn't. Nobody messes with any of my XML-based tools as far as I know. Even in Visual Studio I still need to say "yes" to upgrading the project to a newer version.
I recommend creating an Xcode editor snippet to generate the otherwise tedious UIView initializer methods.
I just patiently waited for you to finish throwing up in your mouth, and then I threw up in my mouth.
I agree. I’ve worked in teams with multiple developers on projects with multiple small storyboard and XIB files. Merge conflicts are something that doesn’t happen, because we’re communicating about what we’re doing and not stepping all over each other.
You have to prevent several people working on the same screen or .xib. If you can manage that, you won't see that much problems. Of course you would have conflicts too if two people started to edit the same coded view at the same time but since things are chopped up a bit more in a good design (small views instead of one big one managing the whole tree) the chance of really being in the same file gets smaller.
I agree with most of your points, except that I don't see an issue with outlets being force unwrapped optionals. You do know for sure that they'll be there as long as you're not doing something bizarre/wrong like overriding loadView() when using an nib.
Can you elaborate? They definitely get loaded at runtime in that I can always self.init(nibName: "Foo", bundle: nil) and have it fail because Foo.xib isn't there. But Xcode seems to also spend time compiling the xibs when I tell it to build, so *something* is done at build time, at least. 
At least Apple seems to be dog-fooding their own thing. But yeah, it seems like most other companies I hear about prefer code. The only thing I hate about doing views in code is the autolayout constraints can compile fine and fail at runtime. At least in IB, it'll complain about bad constraints at design-time.
I’d rather Apple admit that IB is amateur hour and treat building views in code as first class in their documentation. Anecdotally, the majority at Apple don’t prefer IB internally, but it’s used in some of their main projects because reasons. 
&gt;Also, Xcode is shit. No joke. How is it still so bad? It fails to rename a class/struct in Swift literally more often than it succeeds for me. It often loses syntax coloring. It uses a ton of memory and just slows to a crawl after a day of work. Plus it's UX is still just bizarre and I'll never get used to it. Tabs aren't even useful and it can't do splits AFAIK.
mind sharing what you use?
Same. Anyone who says "This never happens in the real world" obviously doesn't have enough real world experience. 
You could use UIFeedbackGenerator https://developer.apple.com/documentation/uikit/uifeedbackgenerator 
1 company who is one of the top companies in the world in a large tech city compared to probably the small consulting agency you work for out in probably Idaho or some shit?
I would **love** if there were more (any) official documentation on doing view stuff in code. I'm not going to hold my breath. Apple has made it clear that storyboards are how they want people to make their apps. Even XIBs don't get some of the neat stuff that storyboards get.
Colonel Sandurz: Try here. Stop. Dark Helmet: What the hell am I looking at? When does this happen in the movie? Colonel Sandurz: Now. You're looking at now, sir. Everything that happens now, is happening now. Dark Helmet: What happened to then? Colonel Sandurz: We passed then. Dark Helmet: When? Colonel Sandurz: Just now. We're at now now. Dark Helmet: Go back to then. Colonel Sandurz: When? Dark Helmet: Now. Colonel Sandurz: Now? Dark Helmet: Now. Colonel Sandurz: I can't. Dark Helmet: Why? Colonel Sandurz: We missed it. Dark Helmet: When? Colonel Sandurz: Just now. Dark Helmet: When will then be now? Colonel Sandurz: Soon. Dark Helmet: How soon?
Exactly. I don’t understand why 2 people would be working on the same nib or storyboard. Do they have the exact same story? Or do they just not do Agile and assign each one their work and just touch whatever?
I work on the Citibank app. 1 of top 4 banks in the US. Get off your high horse. All companies use different ways of doing things. There is no 1 set thing that is better than all. 
This one? https://i.imgur.com/bNKMeBl.jpg I can’t even login
The more comments I read from you, it seems you are are such a dick. Which company did you work for so I can trash talk it too? Is that the person you are? You trash talk the other companies other people work for because you think you’re better than everyone else for having work at one of those companies in your title? Pathetic.
Good catch!
&gt; merge conflicts with storyboards are fun Do you speak from experience? I manage the CICD at my job. So I see ALL merge conflicts for jobs that forward and backward merge to team branches. Almost 0.01% of them are from storyboards, and we use a lot of storyboards and nibs. The rest is conflicts with code. And we have over 40 developers so that’s a lot of commits and work being done daily. I always read about merge conflicts with storyboards yet it seems the real problem is with the teams, and not the storyboards themselves. 
I’m jk man citi bank is one of the best banking a apps that I’ve ever used. Go through my account history I’m not always the nicest guy. Sorry. Good job on citi bank honestly and sincerely. 
 override init(frame: CGRect) { super.init(frame: frame) initCommon() } required init?(coder decoder: NSCoder) { super.init(coder: decoder) initCommon() } private func initCommon() { &lt;#code#&gt; } 
Now i feel bad :-(
Post the exact error message.
Is your outlet set correctly? The only thing I can think of that's being force unwrapped is your IBOutlet for your button
It sounds like you haven’t correctly links up one of your IBOutlets. Also, if you prefix each of your lines of code with 4 spaces, Reddit will format your code so it’s more readable. 
It’s the title
Xcode runs great on my pc.
Not sure if this is the answer but make sure your button isn’t linked to an IBOutlet that doesn’t exist (that you may have deleted or something). You can just right click the button in the storyboard and see the connections.
On Windows you mean? PC means personal computer 😊 I know there are websites that do that, IBM has one, don’t remember the name, sorry.
It should indicate exactly which line it is erroring on as well as give an indication of which variable it found nil when unwrapping.
Done, thanks. And I believe I have. I have tried linking and unlinking numerous times so I must be making the same mistake over and over again. I’ll try it one more time and update you with the result.
Ohhh, is that what the OP meant? /s Theoretically a [playground](https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/swift_playgrounds_doc_format/) is just a package format. I don't know of any other program that supports the format other than Xcode but it certainly can be adopted by others since it's fairly-well documented.
Hackintosh babee
Yes, it says it is on the line “Button2.isHidden = true” but like I said it causes a crash so I’m sure it would occur on every line if given the option to do so. It does not specify which variable was found nil and, in fact, there are no variables in the statement at all AFAIK así that’s why I’m confused.
Yep, that was the error from my other post so I made sure to check, but that’s not then case here. 
Your Button2 is not properly hooked up then. I'm assuming you're using storyboards - right click on the button and ensure the outlet is properly setup between the button and your Button2 variable
It is currently hooked up like this, am I doing it wrong? @IBOutlet weak var Button2: UIButton!
It’s set like this: @IBOutlet weak bar Button2: UIButton! Is that wrong?
Is this incorrect linking? @IBOutlet weak var Button2: UIButton!
That’s half of it, you also have to make the connection in your xib/storyboard. 
Make sure it's linked correctly from the storyboard...My guess is it's not finding it when it's being used so button2 is force unwrapping a nil
How? I just dragged it with control to the ViewController. Could you link to a way to fix/give a quick explanation?
Wanted to thank everyone for their help. I accidentally only had the @IBOutlet for button 1 linked. I must have typed code for buttons 2 and 3 last night w/o thinking to connect them to the storyboard.
!solved
In addition to all the guard statements that you need to add make sure to add the proper encoding to your URLS: `//your url` `let urlString = "https://www.reddit.com/search?q=mike portnoy"` `//what you want to get` `//https://www.reddit.com/search?q=mike%20portnoy` `//By using your string direclty Swift will return a nil object when trying to creating an URL` `let url1 = URL(string: urlString)` `//You should encode your String and add those special characters the URL needs` `let encondedString = urlString.addingPercentEncoding(withAllowedCharacters: .urlFragmentAllowed)!` `//after enconding the String a valid object URL is being returned` `let url2 = URL(string: encondedString)`
That’s the correct signature - does it have the circle thingie to the left of the line filled in showing it’s going to something in the storyboard?
Not really. When you create ViewController as independent it gives you a lot more flexibility on when, where, and how you transition to the next screen.
Not solved? Because that’s what you are saying here, to people that speak programming.
Like code, storyboard conflicts only really occur when you're working on the same view or view controller as someone else and merge the two together. Xcode seems to be smarter about merging, as Git is pretty braindead, but in my experience it's mostly an issue early in a new project with only a few screens, so multiple people may be making changes to the same thing at the same time. Not easy to manually rectify, but again, Xcode can help you quite a bit there.
You need to use Codable protocol to parse it into a type, or use the Haim serializer to parse into into a dictionary an extract the keys yourself. 
Maybe, but these aren’t exactly typical companies developing iOS apps. They are hugely profitable or heavily invested with VC money, and have engineers coming out of the wazoo. They also seek to reduce their use of first party tools in order to more easily pivot should the platform turn against them. It’s kind of a very expensive insurance policy against Apple changing things that break their businesses. And also, frankly, there’s a certain arrogance and ‘not invented here’ attitude that pervades these companies. I’ve lost track of how many frameworks for building apps Facebook has created, going right back to that hideous thing that tried to make it web-like (who’s name escapes me). And don’t get me started with Google, who don’t seem to know what an iOS app is supposed to look like or how it’s supposed to behave. The typical enterprise or consumer iOS app just needs to be built quickly and efficiently with the first party tools. You don’t need to be reinventing the wheel. 
I definitely prefer to use Codable. The problem is, I don't know how or where to have the work done. I tried doing some additional parsing after the (dataString) print, but then URLSession line starts throwing errors about too many arguments. 
The xib is not XML that is parsed at runtime - the XML just defines the IB document content. When you build, Xcode actually compiles the xib into native objects that are then archived into the app bundle. At runtime the OS unarchives these objects, just the same way you would use NSCoder to archive and unarchive your own app data. 
 struct Response: Codable { let authentication: Authentication } struct Authentication: Codable { let message: String? let session_id: String?` } Now, where you have your `print` statement, you can use: let response = try? JSONDecoder().decode(Response.self, from: data) You will get back a Response that you can do with like you do any other value. 
Exactly. It’s the teams fault in miscommunication as to who’s working on what. It’s not storyboards fault so why do people constantly bring them up as merge issues? It’s the teams to blame. 
Thank you. This is along the lines of what I'm looking for, but I don't understand where that goes. I assume the "struct" declarations go anywhere outside the above code? Am I also understanding correctly that your `let response` statement would conflict with my earlier `guard let response = response as? HTTPURLResponse` declaration? 
Source?
I've been making iOS apps for 10+ years. Every company I've worked at has used xibs and Storyboards. Since I've got more years that means my argument from authority is more valuable, right? There are times when it's appropriate to write your view layout in code. It's not appropriate 100% of the time, because it depends on your use case. Storyboards aren't perfect, but they're pretty great for a lot of use cases. You're far from enough of an authority that you can tell people what they should and shouldn't use and have that be it.
&gt; it’s used in some of their main projects for reasons I don't agree with so I'm going to act like they're stupid without telling you what they are (because I don't know.) FTFY
Where did I say they are plenty? I said they’re “fun”... when they happen they are full of ids to classify the xml and it’s not really human friendly. Yes, I speak from experience... the very few I had to deal with were not a good experience... :)
You can download the teachers guide that includes the solutions if that would help you figure it out
Reread your comment and realize that your comment describes the attitude that it conveys.
&gt; ... I don't understand where that goes. I assume the "struct" declarations go anywhere outside the above code? Yes. &gt; Am I also understanding correctly that your let response statement would conflict with my earlier guard let response = response as? HTTPURLResponse declaration? Just change the name of the variable. `let foo = try? JSONDecoder().decode(Response.self, from: data)`
 struct Response: Codable { let authentication: Authentication } struct Authentication: Codable { enum CodingKeys: String, CodingKey { case message case sessionID = "session_id" } let message: String? let sessionID: String? } func upload(request: URLRequest, uploadData: Data, completion: @escaping (Response?) -&gt; Void) { let task = URLSession.shared.uploadTask(with: request, from: uploadData) { data, response, error in if let error = error { print ("error: \(error)") return } guard let response = response as? HTTPURLResponse, (200...299).contains(response.statusCode) else { print ("server error") return } if let mimeType = response.mimeType, mimeType == "application/json", let data = data { completion(try? JSONDecoder().decode(Response.self, from: data)) } } task.resume() } 
Is there any other way to describe what is happening? If someone suggests childish, live in a bubble behavior, they are seen as childish and living in a bubble. But what happens when there actually is childish, live in a bubble behavior that's being accurately described? Kind like the police officer that has to speed in order to catch the speeder. How else do you expect the police to catch the speeder if they don't speed themselves? Anyways, I've been on reddit for about 2 years and have never seen a more immature mix before. It's sad because there is a need for a good discussion forum. 
What would you say the advantages of this are over something like MASPreferences? 
Nowhere did you say there are many but I see that this comment is written a lot related to storyboard conflicts. 
What's confusing about it? What do you have questions about?
It’s Three20 And you’re absolutely right. Nevertheless, the thread started off as what to pick up to appeal to the big companies and DSLs are the way to go.
Yeah, I understand what you’re saying. I didn’t even mean it as a reason not to use storyboards. They have their use cases. 
If i'm understanding you correctly, it basically does a screenshot of that view for you to use, no scaling or re-adapting is done unless you implicitly program it to do that.
Sometimes the image returned has a slightly different size though. What happens then?
Written in Swift. Swifty API using a protocol. Fully documented. Less code (less chance of bugs) as it uses `NSTabView` instead of manually implementing the toolbar and view switching. The window title is localized built-in by using the system string for "Preferences".
Maybe the view is slightly larger than you are expecting it to be? Is clip to bounds turn on on the view?
Over promise and under deliver. You will be great for a PM :p
It happens because image sizes must be an integer number of pixels but view sizes do not have this restriction.
Welcome to Xcode. This is pretty normal since Xcode 4. Apple don't care having an app on the app store with 2 stars.
Dang that sucks. Looks like I won't be learning Swift lol. 
Depending on what you are trying to learn, this may not be a workable solution, but try creating a macOS playground instead. This doesn’t require a simulator and generally runs more quickly for that reason. You won’t be able to use any UIKit APIs though. 
you may try to improve your computer with more memory or if possible a SSD. That will probably help a little bit. 
The IBM one no longer exists.
Leetcode has all their problems available to test in swift. You can play around their editor I think. 
I'm sorry I'm so stupid and I do appreciate the help, but I genuinely don't understand how that fits into my code. The code you provided doesn't actually send anything to the server AND I don't understand how to if/else the returned values after the fact. :( Thank you for being helpful and patient. 
Thanks for the explanation. 
The issue is probably a bug in playgrounds. Turn off autorun by holding down on the play/pause button on the bottom left and choosing manual. Then close the playground, quit Xcode, open the playground. Now whenever you want to run the playground just press the play button. Autorun causes it to compile and run while you type and it seems to mess up the playground, causing it to spin and slow to a crawl.
I've tried this. Never works.
An instance of a class is an example of a class. Consider: if the class is car, then your red car is an instance of a car. So when you have a UITableView as a class, you can have myTableView as an instance of UITableView. Just the same as your personal car is an instance of a class known as car class. So you can have several instances of the same class. You can have 3 UiTableViews. It could be, playerTableView, teamTableView, divisionTableView. This could be an example of three different tableviews all in the same app. Each on would be an unique instance of a UITableView. methods are functions, they are just a "chunk of code" that can be called by their name and can return a value. Just think of some lines of code that are grouped together and given a name so that you can call them by the name. Usually that name is used to describe what they do. Does that clear anything up?
Hey first, I feel your pain! I went through his a while back. There seems to be a bug related to where the actual playground file might be sitting. If its in an iCloud, dropbox, or a folder backed up by time machine this happens a lot. check out my post here: [https://www.reddit.com/r/swift/comments/8qu8hi/how\_to\_fix\_playground\_when\_it\_runs\_forever/](https://www.reddit.com/r/swift/comments/8qu8hi/how_to_fix_playground_when_it_runs_forever/) Hope this helps.
one more tip :o) As a newbie, the other thing I've run into time and time again is trying to run old code in 4.1 pay attention to the version numbers of what ever you are looking at. if it's version 1 or 2, don't waste your time with it. 3 for the most part works but see if you can't find version 4 example code.
Hey this is what I thought too. but I found out that the playground is always runs in the simulator. It's an IOS app. I really laughed at the WWDC announcement about being able to run IOS apps on the Mac natively, we've already been doing it :) startup Xcode and run a ps -ef in the console, then load the playground and do it again.
The SSD is the only thing that worked for me. And not just a little bit, a big bit. 15 minutes or more to launch a simulator down to less than a minute, playgrounds not working at all to working fine (when manually running them).
Before I replaced my HDD with an SSD the simulator would take upwards of 15 minutes to launch and playgrounds wouldn’t work at all. Now they’re fine. If you can, I’d recommend it.
[iOS alarm GitHub project](https://github.com/natsu1211/Alarm-ios-swift)
Spot on Karl, I keep it in my mind this way: When you go to In and Out or Five Guys, they have a menu up there; Imagine those are all classes. They have recipes on how to cook each burger on the menu. They don't exist yet. The "Double Bacon burger" is just a reference to a type of burger they know how to make IF you order it. This is the same thing as a class - it's a Buch of code you've put together with properties like cheese and mustard and lettuce and methods like burn it, wrap it up, etc, unwrap it etc. When you decide you want one, you have to go through a process to get it, you tell the dude behind the counter, "I want a Double Bacon Burger" this starts the Burger "Instantiation" process! the patties are taken from cold storage and tossed on the grill, the buns roll through the toaster and all the fixings start to get assembled. Finally its all wrapped up and delivered to you as a real burger that you can eat (AKA Consume). Your burger is now an Instance or a real Object. It's not just a set of instructions any more. And it's unique from all of the other burgers in the shop. When you take a bite out of your burger, you're not taking a bite out of the one that girl is eating over on the other table. does this help? 
The permissions error is caused by your apps entitlements not being set properly. In Xcode you need to go to your project settings -&gt; capabilities, and under the sandbox setting select the read/write files option 
As a newbie learning Swift with a 38 years of programming experience, I'd like to chime in. As to posting questions elsewhere, I'd be happy to but: /r/LearnSwift has 130 subscribers and is pretty much a spam hole. The last post was over 30 days ago. There's a total of 9 posts there, 8 of them are over a year old. /r/Learn_Swift has one post over a year old and 75 subscribers. Frankly Swift "Help" is a sewer. The language went through drastic changes and old out of date examples are everywhere. First you have to learn Oh wait they broke the language between 1 and 2 and 3.... 3 and 4 are pretty much there.... So what version is this example talking about? I like Swift. But frankly it's been one of the most difficult languages to learn because of the mess. Even [Swift.org](https://Swift.org) has issues. When was the last time you've known of when a production class language doesn't have its reference docs available? All of the docs at [swift.org](https://swift.org) point to the 4.2 BETA. you've got to go dig, and find a post by my doppelgänger in the forums to get the download link to the iBooks version of 4.1 if you don't already have it. If the community thinks we're diluting what /r/swift is supposed to be by asking questions about coding, then lets commit to making a better learning environment. I'm all for that. 
Here ya go; https://useyourloaf.com/blog/local-notifications-with-ios-10/
It depends on the feature set and where it is going to be delivered. MVP would probably cost you between 50-75k
is there a highlightannotation function? I'm trying this out but nothing like the sort is popping up. 
The logged error is unrelated to your problem (and extremely unlikely to be caused by you at all).
No, I mean a “macOS Playground” — as in one that can `import AppKit`. For learning Swift standard library stuff, or APIs from`Foundation`, it should be no different than an iOS playground, but it will be faster. 🙂
More than likely your URLSession is broken somewhere. If you terminate the application, it purges everything relating that app in memory. This happens in applicationWillTerminate part of the life cycle.
You can look at URLSessionConfiguration.timeoutIntervalForRequest. The default is 60 seconds. You can set the timeout interval and call a function for displaying the alert if it has timed out. [link](https://developer.apple.com/documentation/foundation/urlsessionconfiguration/1408259-timeoutintervalforrequest)
Yes, I don’t know their reasons. But I do know that they’re not good reasons. Storyboards are objectively bad. They are an inferior option. 
Fascinating. I hope someone figures out how to decode the time markers. They just look like latitude and longitude to me.
The replacement for IBM swift sandbox is here: http://online.swiftplayground.run this should let you do what you want and its run on IBM cloud using Kitura. 
Is that what the OP was saying though? He doesn't mention that they aren't used, or that you shouldn't use them, but that you should learn to do views in code rather than storyboards/nibs. As someone else who works for one of the companies listed in the title, I can guarantee you that there are 0 storyboards or nibs in our codebase.
No, it’s correct. But it probably got disconnected by either you renaming the label or deleting the label in storyboard and adding it again. You probably broke the connection. 
Linux has more limited support.
The encoder takes data object, not a strong object. Show us some code. 
I think this topic might be a bit too advanced for you. You should go over the basics of networking again. Maybe watch the Stanford videos. 
For it to full pay function, you need to consider more than just the app itself. You’d also have server side components for the database, and thus likely monthly server expenses. 
Have someone review it?
It’s not directly related to the question, but I assume this function handles the button presses for all 3. Why not do a check on the buttons themselves? Tags are not a regular way of doing this. Instead, you could do `if sender == button1`, etc. This would result in logic that’s much clearer to follow. I’d also recommend you name your buttons something other than just button1, button2, and button3. Together, it’ll make your code much easier for you to follow. 
Linux has it for ten years now. So sad that it has been considered a cool new feature on osx.
Could *a* and *z* be “altitude” and “azimuth”?
Could you please elaborate a bit? I’m curious 🤓. 
https://github.com/AudioKit/AudioKit
I've seen multiple people make a custom uiview in a xib and then try to use it in another xib/storyboard by just using a normal view with that as custom class. If that view had outlets, you will get runtime crash when trying to access them.
Hate to break it to you, but this is full of misunderstandings. This is fine and can be learned from. You will not run out of array indexes, not even close. Let’s say you store only odd numbers in an array. You’ll have 1 index every entry. And one entry every time you go up 2 numbers. To get to one million you need half a million indexes. You’ll run out of the integer limit for your value twice faster than the index. Secondly, Int in swift is the largest integer supported by your computer. This is almost always 64 bits. 32 bits computers go up to roughly 2 billion positive and negative. 64 bits numbers go a looooot longer than that, a trillion is a small number for an Int64 (or just Int), being just above the barrier for Int32. An Int33, for reference, would be 2 to the power of 33 compared to 2 to the power of 32. Integer capacities grow exponentially, and 2 to the power of 64 is far above a trillion. The reason your compilation hangs on such a large array is simply the compiler’s capabilities and optimizations. An array defined using a literal, in code itself, needs to be parsed by the compiler. This means going over the text, checking absolute correctness and keeping all values in the back of it’s mind. Once it has remembered and analyzed this huge source file it needs to do optimizations where possible and then store it in a binary. The memory needed for your raw array is 8 bytes per element, for almost 800’000 elements. Meaning in the most optimal perfect scenario it would need about 8MB. But a compiler isn’t made for this, so this would be far from optimal. Compiling takes ages like this, which you noticed. This results in the compiler shutting down because it exceeds the compiler’s time limit. A compiler has a time limit to prevent itself from getting stuck infinitely. Next, if you didn’t figure this already, your TXT file contains textual integers. This is very slow to run for computers compared to natural binary integers. It needs to interpret and convert the text to binary first. Your code is also splitting a string into individual pieces of text for each integer by removing the line terminator. Again a very heavy operation. On smaller datasets not a problem, but once you expand to millions of prime numbers an enormous performance problem. There are two ways to improve this part. The first is so loop over the characters one at a time until you see the newline. Then converting these letters to an integer and going forward. This reduced memory usage by a tonne, saving a lot of performance in the process. Another option is to go a bit further and saving all your prime numbers in binary. Then casting your data to the Int type. This will immediately convert the binary dataset to the prime numbers as Int without any performance overhead other than loading the file to Data but requires making a new file other than the TXT. It’ll be faster and use less code wt the same time
Thanks!
See [this](https://www.omgubuntu.co.uk/2018/06/macos-mojave-dynamic-background-linux)
Someone did, it’s indeed location data to know the location of the sun. The writer made a follow up post with a wallpaper that utilize that
Not sure if I’m reading right, but you can try `coins.removeAll()` at `override func viewWillDisappear()`
Absolutely amazing :) I hope more images will be created.
Had some time to do a test for single label views: https://github.com/Cyberbeni/ViewLoadTest You can use the same method to measure the loading time in your specific app. You could just run the app or have the screenshots taken by your automated UI tests included in the documentation.
Why are you calling reloadData twice? Once in view will appear and once in your loadData?
didn't notice thanks for telling
You're welcome
it doesn't work , I think it has to do something with the context &amp; core data
Graphical environments on Linux (and I’m sure other *nix systems) have allowed to use all sorts of interesting things for backgrounds, including e.g entire applications (like screensavers or others) running to create dynamic backgrounds. 
Differentiate it as opposed to what? If you have 3 buttons on the screen, how does Xcode know which button is “button2” if you never assigned one that name? What tutorials have you been doing to not know how to add an outlet? Did you just jump in to your own project? Because this is very basic stuff and I feel like the path you’re going through to learn is not a good one. 
Aren’t you the same shitty person who thinks you’re better than other people? Yup I remember your username. 
He’s a shitty developer. He thinks he’s better than other people who use storyboards and thinks he’s the shit for working at a top company. I saw his comments on another post and he is in a seriously high horse. He also enjoys trolling in this subreddit. He’s a shitty person. 
nah you want to make your whole field a subclass of UIView and override touchesBegan, touchesMoved &amp; touchesEnded. Then check the coordinate of the touch, and use that information to determine which square was touched. Then you can override draw method for coloring the individual squares.
I will try it, thanks :)
My answer using the factory pattern and generics was helpful. You’re missing the point
Nobody uses, or cares about, Linux.
It’s unnecessary in this situation. There is no point of the protocol if it’s only going to be used once. Same for the other parts. Unless he will be using it in various places, this is an unnecessary solution to a simple problem. You even admitted it was a troll comment so you weren’t even serious about it. So in other words, you want this subreddit to become Swift for more advanced people and fuck everyone else learning Swift, basically? The more you comment the more I see what a shit person you are. 
That’s the beauty of my answer is that the magic eight ball can be used with various types. What if you wanted an 8 ball of Strings or any object really. You could use my solution for that!
What OP is a beginner who just wants to first learn the basics of making an app, and then improve on it later?
I don’t like to assume people’s skill levels
You don’t have to assume because it’s clearly obvious based on the post. Don’t act stupid on purpose. 
Run ‘pod update’
 ``` let users = [“DowntownCrossing”, “Jozemite_Apps”] let funAtPartiesArray = users.filter { $0.funAtParties == true } print(funAtPartiesArray.contains(“Jozemite_Apps”)) Output: False ```
Which computer are you using?
XCTAssertTrue(User.named(“DowntownCrossing”), UserType.God) Let f(x) be a continuous function on the interval [2, infinity). Let f(x) be defined as the summation of 1/x^i where i starts at 1 to infinity. What is the closed form?
This guy computer sciences!
Because you're not using the counter in the for loop for anything; the first change I would suggest is that you use the \`for...in\` construction. This will loop through every item in the list. Let swift figure out that your array has sub arrays. It should be able to do that on its own. for aPoint in dataPoints { print("\(aPoint[0]) second point \(aPoint[1])") }
This guy fucks!
If you filter after the map, some redundancies can be removed. `let result: [(Double, Double)] = dataPoints .lazy .map { point in (Double(point[0]), Double(point[1])) } .filter { a, b in a.isFinite &amp;&amp; b.isFinite } `
Every time your viewWillAppear is called it will load the data from the JSON and then add it to whatever it has. If you look over in the AppDelegate (usually it's at the bottom if you're using the supplied templates) there will be a contextSave() or something similar. That is saving the Core Data items to the disk. Now, the next time your view appears it will download a new set of data and then add it to whatever is in core data. This line of code will get called every time the view appears and it downloads the items and adds them to the Core Data storage Networking.performSelector(inBackground: #selector(Networking.fetchCommits), with: nil) and because it's on a background queue it will take some unknown amount of time to occur. That means it doesn't wait for this to be done before your call to \`loadData()\` happens. So, over time, you are going to get more and more items on the list. Depending on what your data looks like, you can either add a little fetch request to your \`fetchCommits\` and try to distinguish new items from ones that are already in the data store. So, if your "name" or "symbol" property isn't going to change, you can see if a record already exists with that property and if it does don't add the new one. Or, you can have the very first thing that your \`fetchCommits\` function does is to erase all of the data before it adds new data. I don't know anything about your data, but this way is not generally a good way because it will quickly cause performance issues. But, if you do want to go this way, be sure that you call a contextSave() after you do the delete. After doing an insert or a delete, you often need to call contextSave() because of the way that CoreData holds onto the data. However, if you're planning to load the data from the JSON on every time you get a viewWillAppear (or even if you just put it in viewDidLoad) then I don't think that you want to be using Core Data. Core Data is designed to hold data on disk and let you use it there. You're grabbing it from the network each time, so, just stick it into some array.
Yes, I agree. I was on purpose being less fancy to make it easier for OP to see where my example matched up with their code. Your way is mighty slick, though, I didn't even think of \`.lazy\` as well.
Emoji’s are all unicode so I’m pretty positive everything falls under one umbrella. This is the thing though, I remember being up here the day news broke that Apple was rejecting apps because of what they feel is inappropriate use of them and to this day I am STILL seeing new apps that violate this rule appear on the app store. Snapchat still uses them for things and they obviously still get approved - so do a lot of other major companies. 
If everything falls under one umbrella, how can you tell whether a character is acceptable?
😏
Yes u would need to store the mark on cloud 
I think I'd tackle the problem while reading the JSON. let json = """ [ [1530295500000, 444912], [1530295800000, 435243], [1530296100000, 144128] ] """.data(using: .utf8)! struct DataPoint: Decodable { let x: Double let y: Double public init(from decoder: Decoder) throws { var container = try decoder.unkeyedContainer() var intArray: [Int] = [] while !container.isAtEnd { let int = try container.decode(Int.self) intArray.append(int) } if intArray.count != 2 { throw DecodingError.dataCorruptedError(in: container, debugDescription: "Expected two numbers") } self.x = Double(intArray[0]) self.y = Double(intArray[1]) if x.isInfinite || y.isInfinite { throw DecodingError.dataCorruptedError(in: container, debugDescription: "X or Y is infinite") } } } let dataPoints: [DataPoint] do { dataPoints = try JSONDecoder().decode([DataPoint].self, from: json) } catch { fatalError(error.localizedDescription) } print(dataPoints.count) 
actually there was one more attribute named 'checked: Bool', it is used to store the checkmark state of the cells, I thought using 'saveContext' will only save the checkmarked state of the specific cells but it is saving the whole data and I don't know any other way as I am at a beginner's stage to all of this and I have a tendency to make things complicated. by the way thanks for telling me I will try to work on the fetch function, coz if I delete the whole data , it would delete the checkmark state also.
Hi Fossfool, You're such a smart guy! It worked for me after following your suggestions. I'm curious how you have found the root cause. I'm very curious about it. shelton
If they were originally `Int` then they have to be finite when they're converted so you don't need to test for that. Assuming that your "data" key is at the top level of your JSON: import Foundation struct Data: Codable { let data: [[Int]] } let jsonText: String = """ { "data": [ [ 1530295500000, 444912 ], [ 1530295800000, 435243 ] ] } """ if let jsonData = jsonText.data(using: .utf8), let values = try? JSONDecoder().decode(Data.self, from: jsonData) { let points = values.data.map { NSPoint(x: $0[0], y: $0[1]) } } 
OK, so if you're going to focus on not inserting any item more than once, you can add in a fetch to your fetchCommits code. Here is an example that uses a predicate so it will only fetch items that match. If the fetch is empty you know you need to insert. If the fetch returns a record, you can update it if you like or else just go to the next one (this example is just to help you understand, I am not saying this is the best way to do this). Really, you should rearrange the code so that you're more recreating all of these variables each time, but I just wanted to show you basically how it will work. Also, really important. I am writing this in a web browser, not in Xcode, so there may be typos or syntax errors, but hopefully Xcode can help you fix them. let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext for jsonCommit in jsonCommitArray { // more code to go here! let itemFetchRequest = Item.createFetchRequest() let filter = NSPredicate(format: "name == %@", jsonCommit["name"].stringValue) itemFetchRequest.predicate = filter do { if let existingItem = try context.fetch(itemFetchRequest) as? [Item] { if !existingItem.isEmpty { //We got an item back, so maybe update it? self.configure(commit: existingItem.last, usingJSON: jsonCommit) } else { //we don't have an item, so, put in the code that will insert a new one let item = Item(context: context) self.configure(commit: item, usingJSON: jsonCommit) } } } catch { print("An error") } Then maybe when the for loop is finished, you post a notification and in your other class, you listen for that notification and then when it hears the notification, it calls your "loadData()" function. You post a notification with something like NotificationCenter.default.post(name: NSNotification.Name("DATA_LOADED"), object: nil, userInfo:nil) and then in your view controller's viewDidLoad() you might have something like NotificationCenter.default.addObserver(self, selector: #selector(self.loadData(notification:)), name: Notification.Name("DATA_LOADED"), object: nil) You'll probably need to fiddle around with the notifications and the signature for your loadData method. but this should get you enough so that you and Google can finish it off.
Thanks
Thanks for your reply, this makes sense
Mac os had it even earlier this is just a new approach whereas whole apps etc use quite a bit too much power and tend to be distracting
I have this problem too from time to time. Playgrounds are terrible. There's an online playground you can use http://online.swiftplayground.run/ and you can even dl all your work
You could use an alert or a screen with a try again button allowing the user the option to get that info again.
No, but you can set a property observer for any value-type instance, and the observer will be called if you mutate the instance. So if you had a `CGRect` property, and called `rect.height = 10`, your property observer for `rect` would be called. Not that I recommend such casual mutation.
It's not about the use of emoji, but Apple's emoji that they'll reject you for. Feel free to display all of the emoji you want, just make sure you're not using Apple's font's to do it (e.g. San Francisco).
Change data type of height_z to any, and make the url_z parameter an optional? Not an expert...but this is how I would fix. 
For starters, you may want to take a look at the error that shows up in your do-catch block. If I’m not mistaken, printing it’s description will tell you on what key the decoder failed on, if it failed on any key.
Step each line and look at the values you are getting back and whether they make sense before being passed to the next line. 
How are you making the request? There must be a reason that "height_z" is returning an int or a string.
`Any` isn't `Decodable`. Really, OP needs to decides on a single representation and then implement `init(decoder: Decoder)` in a way that tries to parse it one way and then the other.
I recently just got created and uploaded an app on the App Store that makes extensive use of Apple's emojis. [https://itunes.apple.com/us/app/emoji-detector/id1394772831?ls=1&amp;mt=8](https://itunes.apple.com/us/app/emoji-detector/id1394772831?ls=1&amp;mt=8) I wasn't aware that Apple doesn't like it when you use their emojis.
Why did you delete code, it could have helped others
Why is total a string should be an into or double 
Just as part of your UI. Normal text usage is fine. 
Delete your derived data, clean and rebuild. Happens constantly to me
Actually, there’s a bug with the source code of that particular excercise! In its current state, you won’t be able to finish it like it was intended. I found the solution to this one, in this video: https://m.youtube.com/watch?v=yZHtn9IAubA&amp;t=436s&amp;list=PLXiaMWHbNgp2oJe2WhwmWSoRYvy75Z2Da&amp;index=21 Hope it helps! 
Make url_z optional and write a custom init from coder to handle both int and string for height.
It depends on your implementation. Due to your vague explanation we can just guess. If you save your crendentials e.g. using UserDefaults you have to explicitly clear them. If not, you probably have some bug in your code which is hard to find without more precise explanations or code.
And perhaps also write tests, so that the parser gets exercised with valid/invalid json. The data coming from the server always change over time.
thanks a lot. The the data is not adding up , the code above solves the main problem. I will spend more time understanding the code and NSPredicate. Thanks again for your time and effort.
Hello, I might of partially fixed it. I was getting the same exact error and a crash when running the extension for the first time (where you print out the URL and the title to the console). after some trial and error I found that the plist file was not exactly correct. Double check the entries are exact, copy and paste them if you need to and (so far at least, not got further into the app bar printing stuff into the console) its working, but it is still outputting that error.
amazing but why Apple do not integrate a visual way to do animations inside Xcode amazes me. Any company willing to make the programmers the best apps would provide such tool but Apple don't care. Just see the state Xcode is today: a mess.
1) You should be setting titleForRow, not didSelectRow if you want the days, hours, minutes text to be in the actual title. 2) Do you mean calculate the time from the current date? use dateComponents? 3) You only ever push the value of the last selected component into your dateLabel from didSelectRow. You need to look at all the components and append a string into that field.
hey joanniso! Thanks for this. More insight to Swift internals is greatly appreciated. This bit with Int being either an Int32 or Int64 based on platform makes sense now that you've said it. Just like GOLang. I'm so used to reading Int as Int32. When I looked at the header for Array and saw that index was an Int I, thought OK 2.14 billion elements or so and thats it. I've been writing code for the last 38 years on various platforms and languages; lots of SQL scripting C# and the dreaded VB.Net for the last 10. Just saying for a point of reference. What I'm trying to do with this simple project is do something fun, and learn how to do file IO in Swift. That's the goal. So imagine I had the first 100 billion primes in a file and I wanted to find the sum of all of them. That should be a big enough number to break an approach like: let content = try String(contentsOfFile:path, encoding: String.Encoding.utf8) I'm not finding anything in the Swift docs on traditional text and binary sequential and random access routines. I've seen a few things on codable, struct mapping, and serialization. Nothing on "Raw" file access in swift. Some pointers to "Go do it in Object C" but before I do, I just want to make sure I'm not missing anything. Is the only way to do basic File IO in Swift with Object C? Am I off? Am I missing some abstracted IO process that would make reading huge files (in the TB range) easier?
just a tonne of digging. I ran across an article on apple community support where someone in apple was talking about disabling iCloud. I wasn't using iCloud but was using Time Machine on the directory. I set up an excluded directory and watched it for a few days... 
Hey Catfish\_Man, yep it turned out to be my dev cert for macOS environment. 
Thanks, tried it but was still getting an error. It turned out to be my dev cert for Mac OS.
Maybe any of this will help your quest, good luck. import UIKit struct PollTime { let time: Int let description: String } struct PollModel { let days: [PollTime] let hours: [PollTime] let minutes: [PollTime] var currentTime: (day: PollTime, hour: PollTime, minute: PollTime)? init() { days = [Int](0...7).map { PollTime(time: $0, description: $0 == 0 || $0 &gt; 1 ? "Days" : "Day") } hours = [Int](0...24).map { PollTime(time: $0, description: $0 == 0 || $0 &gt; 1 ? "Hours" : "Hour") } minutes = [Int](0...60).map { PollTime(time: $0, description: $0 == 0 || $0 &gt; 1 ? "Minutes" : "Minute") } } func validateCurrenTime() -&gt; Bool { guard let currentTime = currentTime else { return false } if (//TODO: check to see if the currentTime falls within the specified time required.) { return true } return false } } class PostPollVC: UIViewController { var pollModel = PollModel() override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. createDatePicker() } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } var days: Int = 0 var hours: Int = 0 var minutes: Int = 5 func createDatePicker() { let datePickerView = UIPickerView() datePickerView.delegate = self datePickerView.dataSource = self datePickerView.backgroundColor = .white view.addSubview(datePickerView) } func createToolbar() { let toolBar = UIToolbar() toolBar.sizeToFit() toolBar.tintColor = .white let doneButton = UIBarButtonItem(title: "Done", style: .plain, target: self, action: #selector(self.dismissKeyboard)) toolBar.setItems([doneButton], animated: false) toolBar.isUserInteractionEnabled = true // selectDateTextField.inputAccessoryView = toolBar } @objc func dismissKeyboard() { view.endEditing(true) } } extension PostPollVC : UIPickerViewDelegate, UIPickerViewDataSource { func numberOfComponents(in pickerView: UIPickerView) -&gt; Int { return 3 } func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -&gt; Int { switch component { case 0: return pollModel.days.count case 1: return pollModel.hours.count case 2: return pollModel.minutes.count default: return 0 } } func pickerView(_ pickerView: UIPickerView, widthForComponent component: Int) -&gt; CGFloat { return pickerView.frame.size.width / 3 } func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -&gt; String? { switch component { case 0: return "\(pollModel.days[row].time) \(pollModel.days[row].description)" case 1: return "\(pollModel.hours[row].time) \(pollModel.hours[row].description)" case 2: return "\(pollModel.minutes[row].time) \(pollModel.minutes[row].description)" default: return "" } } func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) { let currentDate = Date() var dateComponents = DateComponents() let days = pickerView.selectedRow(inComponent: 0) let hours = pickerView.selectedRow(inComponent: 1) let minutes = pickerView.selectedRow(inComponent: 2) pollModel.currentTime = (PollTime(time: days, description: ""), PollTime(time: hours, description: ""), PollTime(time: minutes, description: "")) if days != 0 &amp;&amp; hours != 0 &amp;&amp; minutes != 0 &amp;&amp; !pollModel.validateCurrenTime() { let alert = UIAlertController(title: "Invalid Time", message: "You must select a time greater than 10 minutes, less than 7 days.", preferredStyle: UIAlertControllerStyle.alert) alert.addAction(UIAlertAction(title: "OK", style: UIAlertActionStyle.default) { [weak self] action in //TODO: Reset the components of the picker to one less than or great than the invalid choices.... }) // show the alert self.present(alert, animated: true, completion: nil) } dateComponents.day = days dateComponents.hour = hours dateComponents.minute = minutes let calendar = Calendar(identifier: .gregorian) let futureDate = calendar.date(byAdding: dateComponents, to: currentDate) print("The current date is: \(currentDate.description)") print("Your future date is: \(futureDate?.description ?? "")") } //Either use viewForRow or didSelectRow -- You can't use both. // func pickerView(_ pickerView: UIPickerView, viewForRow row: Int, forComponent component: Int, reusing view: UIView?) -&gt; UIView { // let label = UILabel() //// label.textColor = Colors.mainBlueColor // label.textAlignment = .center //// label.font = UIFont(name: Fonts.OpenSans_Bold, size: 14) // label.text = String(row) // return label // } } 
1. When I do that, the "days" (for example) is added to every single row. The goal is to set to title of each row to integer of the row (which would be scrollable) and days (that should NOT be scrollable). Which for some reason is not working. If i set the string text "days" in the titleRow, it adds it to every row, that's the problem with it. 2. Yes, I'd have to see how that's done 
All right, makes sense. So Swift has a few APIs. First there is the standard library, this contains String, Array and the general basic data types of Swift. Foundation, which you're using, is almost always bundled with Swift but is not part of the Swift standard library. However, most people assume it to be since it's bundled on iOS, macOS and even Linux. Think of the Foundation APIs as a high level API written to be good for most people. They're not made to be the best in all scenarios, contrary to popular belief. Foundation JSON, for example, is written for most iOS users. It supports emojis, type-safe access through codable and type-unsafe access through a type-unsafe dictionary (Any as value). Having said that, the Codable support leans on the type-unsafe dictionary APIs. Type-unsafety implies Any boxing, this implies a good chunk of performance overhead and memory cost. So for some users that do large amounts or big blobs of JSON, this is not a good API. The API you're using is a Foundation API that reads the entire file into memory (I bet using Foundation's Data). However, there are low level API's, too. On Linux you can access Glibc by importing it as a library. And on macOS/iOS you've got Darwin. This imports the operating system's C libraries, and just like the OS's APIs you can also make Swift link to C libs such as OpenSSL, zlib and many other C libs you're used to. Using these APIs you can access the file using raw API's using pointers and what not. I don't have docs for you, but in my time as a core contributor at the Vapor project I've built a branch for file access which was not complete when I stopped. [https://github.com/vapor/core/tree/file-apis/Sources/Files](https://github.com/vapor/core/tree/file-apis/Sources/Files) There's lots of Vapor 3 alpha code in there, such as our abstraction "COperatingSystem" for Darwin and Linux based OS-es and our old Async protocols for async file access. If you want docs on high performance - normal - filesystem access I'd have to direct you to looking at file access in plain C. This gives you all control over your code and let's you read the file however you like it. Please do reply if you want some help/pointers for that
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [vapor/core/.../**Files** (file-apis → 93a3b09)](https://github.com/vapor/core/tree/93a3b09dc6667b3635cb11de817fee514bc98b73/Sources/Files) ---- 
OK, use a UIDatePicker and you can set the min/max allowed date... datePicker.maximumDate = Date() + (7* days)
Joannis, Greatly appreciated! Thank you! 
The way to diagnose the problem is to set breakpoints and watch execution line by line. There is likely a mismatch between how you expect the code to work and how you wrote it. This happens to me often. 
If I change the views colour, then it makes the lag go away - but this doesn't solve the problem with my view not working. Anyone else encountered this before?
Some things to check: Does your segue VC have the ViewController defined? In the Attributes Inspector -&gt; Custom Class -&gt; Class Is your prepare(for segue:_) calling the right VC? Do you have a Navigation setup or are you just directly doing a seque? In either case, check how that is setup. 
Try wrapping the `performSeque` in a `DispatchQueue.main.async`
InitialViewController let letters = ["a", "b", "c"] let number = 16 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { tableView.deselectRow(at: indexPath, animated: true) let detailVC = DetailViewController() detailVC.numberRetrieved = number self.navigationController?.pushViewController(detailVC, animated: true) } DetailViewController var numberRetrieved = 0 override func viewDidLoad() { super.viewDidLoad() print(numberRetrieved) } So the reason I'm so confused is that it IS printing '16', so I know data is being sent, but the view just isn't loading?!
This looks like expected behavior if the incoming view doesn’t have a background color. What’s happening isn’t that there’s lag, it’s that you can “see through” the incoming view and watch as the outgoing view animates its position, and then is removed on completion. If the incoming view has a background color, then it will cover up the outgoing view as it slides in. So setting a background color is exactly the correct fix for the “lag”. As for why the rest of the view contents aren’t loading, it’s hard to say without seeing your code.
It's embedded in a Navigation Controller InitialViewController let number = 16 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { tableView.deselectRow(at: indexPath, animated: true) let detailVC = DetailViewController() detailVC.numberRetrieved = number self.navigationController?.pushViewController(detailVC, animated: true) } DetailViewController var numberRetrieved = 0 override func viewDidLoad() { super.viewDidLoad() print(numberRetrieved) } So the reason I'm so confused is that it IS printing '16', so I know data is being sent, but the view just isn't loading?!
Did you implement `loadView` in the `DetailViewController`? If so, what does that look like? Or is the detail view controller constructed from a nib or storyboard? If so, then you probably need to call a different constructor on the class: probably `init(nibName:bundle:)` or whatever the storyboard method is (can’t remember its name offhand).
Yes I've tried implementing loadView to no avail. I'll keep playing and keep you posted if I find the answer - thanks for your help!
You’ve actually reimplemented a lot of stuff you don’t need to here. The Auth package provides functions for logging users in and out and handling the sessions 
Are you doing your UI in code? Did you set translatesAutoresizingMaskIntoConstraints = false on the view you are trying to display?
Lol just set the background color of the view ur pushing to, im guessing its nil
/u/tsg212 This is the correct answer. Nothing is lagging. What you are seeing is the previous VCs animation that would normally be covered by the new VC. Sine the new VC has a nil background colour, it is transparent so you’re seeing through it. 
Woah this is amazing! I need this now. Let me know if you want any beta testers! 😀😀
Where is your integration with the Mac Touch Bar? Unless you’re talking about the UIInputAccessory in the keyboard which those are two separate things..?
This is great. I built a Mac app a year or so ago and it was truly odd how out-of-date (yet still relevant and required) aspects there were around native help books on the Mac. It's almost like they intended to phase them out five years ago and never got around to it. Better tooling like this is much appreciated.
The problem with UIDatePicker is that I cannot display days / hours / minutes. Otherwise UIDatePicker is ideal
Can’t you show 2 date pickers 1 after the other and the second one change the style to time? I would also adding a toolbar with a maximum time button?
Man why not create a custom keyboard with this feature and see what happen if you release it to the Apple Store? Also would be great but no possible right now, using CreateML to training your keyboard and understand the user behavior to select the actions based on App.
If I change the background colour, the 'lag' goes, but the view still doesn't show anything.
I'm doing the UI in the storyboard, and the only thing I have in the view is a label. In the viewDidLoad I've tried to set label.isHidden = false it then crashes and says that 'label' equals nil. Starting to think it's a problem with Xcode
I've played around with Vim for Swift: http://www.thecodedself.com/Vim-Swift/ I'd still suggest using Xcode, though.
1) Did you hook up your label in your Storyboard with the @IBOutlet in your class? 2) Did you setup your constraints in your Storyboard so your label is positioned correctly?
I have been mostly playing with Swift on Linux and have been primarily using Swift over SSH. I use the premade config at amix/vimrc with Syntastic instead of Ale, and swift.vim. Prefer Xcode, but it's more than usable. I couldn't get SwiftLint to start working and this/autocomplete am missing, but this is presumably my config issue. 
Apple's documentation is really, really, atrociously bad, and once you can figure it out, you're still on your own for making your Help Books work and look "Apple like." Apple internally obviously have their "Eagle" system for developing consistent help. It seems like packaging it up and integrating with (or supplementing) Xcode would be a no-brainer for them. Since Apple don't seem willing to do that, I hope _Middlemac_ can fill the gap. There are still challenges, though. Even though _Middlemac_ produces documentation equal to iTunes/Xcode/etc., macOS 10.13 and newer built-in applications are starting to use yet another system, and Apple Help Viewer now supports actual Cocoa sidebar for navigation (take a look at the Maps application help).
Yes, I was trying with the Auth package, but it seemed a little buggy and wasn't working correctly (maybe because it's still in RC). I changed the title of the tutorial on the site to more accurately reflect that this doesn't use the default Auth package implementation. When the Auth package is officially released, I'll do another tutorial that uses the quicker, "official Vapor 3" way :)
I'm going to give you some advice: Your opinion is not objective fact. You need to realize that before everyone else does. Working with people like that sucks, so no one wants to hire them. That's what the culture fit interview is for. It's weeding out assholes who think that because they worked at Spotify* they're always right. Do you want some evidence (unrelated to your completely inflexible opinion on Storyboards) that you're not as smart as you think you are? Too bad. In this thread you've referred to these big company apps as enterprise apps. That's objectively wrong. Enterprise apps, as a category, are apps written for use by company employees. It's a simple definition, and not that big of a deal to be wrong about, but maybe if you can be wrong about little things you can be wrong about big things too. * No one but someone who's worked at Spotify would think that Spotify is in the same league as Google or Facebook.
I’m going to give you some advice. Check to see whether the person you’re reply to has considerably more experience than you before tapping the post button. That’ll save you from awkward situations in future. Good luck!
&gt;height\_z The request looks like this: [**https://api.flickr.com/services/rest/?page=1&amp;method=flickr.photos.search&amp;format=json&amp;api\_key=\[myAPIKey\]**](https://api.flickr.com/services/rest/?page=1&amp;method=flickr.photos.search&amp;format=json&amp;api_key=[myAPIKey])**&amp;tags=Car&amp;extras=url\_z&amp;nojsoncallback=1** Reference: [URL API Documentation](https://www.flickr.com/services/api/misc.urls.html) [Search API Documentation Search](https://www.flickr.com/services/api/flickr.photos.search.html)
&gt;Why is total a string should be an int or double I don't disagree :)
&gt;Any isn't Decodable. Really, OP needs to decides on a single representation and then implement init(decoder: Decoder) in a way that tries to parse it one way and then the other. Thanks, I looked up some more info on Decodeable and I think that is is probably the solution. Thanks!
From everything that I can see "height_z" is always returned as a string and "url_z" is also always returned. Do you have any examples of the actual JSON returned when the parsing is failing? Here are the `structs` I'm using to decode: struct Response: Codable { let photos: Photos let stat: String } struct Photos: Codable { let page: Int let pages: String let perpage: Int let total: String let photo: [Photo] } struct Photo: Codable { let id, owner, secret, server: String let farm: Int let title: String let ispublic, isfriend, isfamily: Int let urlZ, heightZ, widthZ: String enum CodingKeys: String, CodingKey { case id, owner, secret, server, farm, title, ispublic, isfriend, isfamily case urlZ = "url_z" case heightZ = "height_z" case widthZ = "width_z" } } 
Where are you setting up how the view should appear? Xib, Storyboard or code? You haven’t mentioned that yet. I’m assuming your using a storyboard. In that case you need to create the view controller using the `storyboard.instansiateViewController(withIdentifier: )` method. 
Sorry to be unenthusiastic but it seems entirely redundant. Why would I need to change brightness while typing? Why would I need a volume toggle when I am typing? Both these things are in control centre which is already easy to access, all that has been done is to take up valuable screen space with something I don't need. The remainder of it just seems to be replicating the autocomplete bar below it. The Emoji picker is also not really an improvement over what is already accessible. As someone said, maybe release a custom keyboard, but for me I don't see the need for it. I'd rather have the screen space.
By the end of this year? It's a very long shot and not realistic at all. Yes, you may be able to create your own apps and perhaps you can create some minor apps for small companies that aren't looking for a professional developer. However, a truly professional company is going to want someone with serious education and years of experience as a programmer. I would look at courses at a local university, as well as doing some self-education online. Get at least a minor background in computer science from somewhere accredited. Try to go for at least an associates degree, if possible. However, most professional organizations really want a bachelor's degree to look at you seriously. With some serious self-taught knowledge, good code samples, and few courses under your belt you may be able to get an internship/junior developer position. It'll still be a tough road to get anything truly professional with those bare-bones but you might be able to get your foot in the door. In all likelihood you are looking at several years worth of learning and job-searching before you can be a professional programmer. That doesn't mean you won't be able to do personal projects in the meantime, just that a traditional job with a decent company will be difficult to get any sooner.
Most employers don't care about special education, they just want to know you can do the job. Something like an iOS boot camp would be very helpful for making connections and getting your foot in the door. Some of them even guarantee a job at the end. They can be pretty expensive though. Without any credentials, you'll need to show off your work. Put something in the App Store. Try to build something you can use at your current job. Contribute to open source projects. Anything that will show you can actually build something will be good on your resume.
I am afraid that I am very limited with local university options because I live in Russia. I did some brief research on the web and I did not find anything ios related. Moreover, i do not find higher education in Russia very helpful. There are a few of online courses, but it does not seems like those courses are very in demand for employers. I thought to sign up for online lessons in MIT or any other university with the same reputation.
I am afraid that iOS boot camps are not an option for me because I live in Russia and I have not been able to find something like that. That is why I asked for online lessons with good reputation. I just do not think that self education might get me a job. Or it will take too much time.
Online lessons at an accredited university are certainly a good option if your local options are lacking. Try to do what you can to go towards an actual degree, just being able to say that you have some sort of degree in the field will help a ton with serious companies. Certainly build up your own portfolio while you learn. Volunteer on some open source projects - start with helping out on documentation, then small bugs, then larger features. You want to be able to show your contributions to the project to a potential employer. Eventually create a few apps of your own and get them into an app store, those are a good way to show off your professionalism. You do not need to have a degree to get a professional position but it does make the search much easier. There are tons of short-term, self-taught programmers out there who don't know much about the profession. They give the serious self-taught programmers a very bad name and it's very difficult to distinguish yourself from them at a glance. Often, companies will dismiss your resume in a second without something to dazzle them. Big contributions to open source, your own apps and code, and degrees do that.
Thank you very much for the reply! Don’t you have any recommendations for online lessons by any chance?
I really don't, I've never used any of them. I have a degree from a traditional university, over 10 years professional experience, and over 30 years as a self-learner and hobbyist. At this point I pretty much pick up languages from documentation, sample code, and fooling around with it. Online lessons tend to get in the way of my learning since they're often targeted at a much different type of learner. Once you have 2 or 3 programming languages under your belt almost any language becomes trivial to pick up. Aside from a few really wild ones there are only a couple of major variations on language types and most of the concepts transfer over easily from the ones you've already learned. After that it's just a context switch to go from one language to another and remember each one's idiosyncrasies.
Try Udacity (Udacity.com). They offer “nanodegrees” which provide education specific to what you want to learn - iOS, front end web, full stack, etc... you will need to develop a number of projects from scratch to graduate, and the learning system is completely web based and can be accessed in Russia. 
That's odd. I found the Firebase Docs to be 100&amp;#37; functional and informative. Is there something specific you're trying to learn in Firebase?
Yeah, I’d suggest to OP to instead release a keyboard with a better accessory view that will contain things like the auto-email completer. There’s no need for a touchbar that has volume controls or other controls that can easily be accessed from every screen already
Meetups, bootcamps, side projects, open source. The more you involve yourself in the community the more knowledge you'll gain and the more likely it is that a company will take an interest. If youre applying to a large corporate enterprise then yeah they'll want a university degree and 6 years experience. But smaller startups and agencies will take newer developers that have a strong passion and interest in the field. 
Cool! Just an FYI I haven’t had any issues with it and it’s all working fine in the book!
I agree with some of the other folks here, saying that a formal education in Computer Science is not required to be hired as a professional iOS developer. Proving you can perform under deadlines and your knowledge of the material is much more valuable. I'm the proof. I studied an online Objective-C course online for 3 months, worked my butt off studying inside and outside of the course, learning and building apps that used different frameworks and APIs. I got my first contract job roughly 6 months after I started learning, but that was definitely because I undercut everyone else they interviewed saying I'd work for essentially half of what they would normally pay someone, and showing them my willingness to learn new technologies. I did this because I really needed experience to "get my foot in the door" of the industry. If you're trying to do this nowadays, there are a ridiculous amount of online resources to learn swift from Apple and from 3rd parties. Check out iBooks (or Books, of you're running iOS 12) for "Intro to App Development with Swift"(I think 100-200 pages) and "App Development with Swift" (roughly 900 pages). However, the biggest issue is not learning the material, it's making it a priority to learn. I truly think everyone could learn to program and code if they wanted to do it. But, forcing yourself to skip that weekend party, that soccer game with your friends, that movie with your wife, etc... whatever is going on, so you can sit down and really dig into the material will be a difficult obstacle to overcome. If you're trying to get into the industry in 6 months, you'll need to sacrifice time and effort to do so. I thought about quitting 3-4 times while I was learning because it's hard to struggle with code bugs while you see everyone out enjoying life. But, it's so worth it in the end. Feel free to PM me if you have any questions while you're learning. I hope that helps and Good Luck!
Not using an IDE sucks for Swift, because the CLI tools (like swift test) have horrible output and just drown you in irrelevant details. Using an IDE for Swift sucks because there are only 2 (or 2,5, if you count CLion) of them: XCode and AppCode. None of them support the SPM, both of them crash regularly on me, at least AppCode has a better debugger, but then it also does enough weird stuff on its own. Swift is a fine language, but the tooling is horrendously broken atm.
Almost nobody cares about degrees or accreditation in tech. He just needs to learn how to program well and prove that with a portfolio of projects / quality references. If he programs for a year or two in Objective C and/or Swift he’ll come out vastly more useful to companies than if he did 4 years of generalized study in CS. Software engineering is a trade and it requires very little actual CS knowledge for most domains - particularly on the entry-level side.
It's certainly not required. As you said, contract jobs are mostly about undercutting the competition and having enough knowledge and and examples to make them believe you can do the job. And, yes, you can be a professional programmer on just contract work. However, that market is extremely saturated and most times you'll have to severely undervalue your time in order to make money. It's good to get a couple of projects under your belt and some side money but a corporate job will likely be easier on you, make you much more money, and give you all sort of side benefits. A good mix is to do some self-directed learning, take some official courses, work on side projects and contracts, and hope that after a year or two you can get a junior position where they pay for your further education. It will absolutely take a lot of dedication and it will be more than a full-time job to meet that kind of time schedule but it can work out.
I totally agree!
&gt; Almost nobody cares about degrees or accreditation in tech. Are you serious? First of all, there are many positions where certifications are absolutely necessary. Do anything serious in fields like security, networking, cloud computing, database engineering and you'll see that they all want certified people for those positions. Yes, you can dabble in those fields without certs but the major jobs all require them. Most corporations will put your resume aside if it doesn't have some sort of accreditation. There are exceptions for people who have been working for years on major open source projects or in the industry but without something to show you're probably going to get shuffled into the "don't interview" pile. A four year degree will be a big step towards getting that crucial first serious look. Even a two year degree will often be enough for a junior position or an internship. Now, there are smaller companies that will give people a chance even if they don't have accreditation but those companies don't tend to pay well and they also don't tend to have much in the way of a professional environment. They're generally looking to develop some kind of app on a low budget and push it out the door. Without a degree you *might* get in on one of these companies but it's highly unlikely you'll want to make a career there. Again, you'll have to get some formal education on the side to build up the resume or put in a few years of drudgery for little pay so that you can "level up" to a better job. The same goes for contract work, unless you are an "in-demand" person you're probably going to get the bottom-of-the-barrel contracts. Businesses that are desperate to throw up some kind of app to support their business. They'll have a bad plan to get that app working and they'll pay very little while demanding a ton. So what do you do? All the things! Take some accredited courses, take some online learning, work on a project or two, maybe take that crappy job for a while. Build up knowledge, a resume, code samples, a few apps. After a few years of this apply for a higher-level job. Work your way up the ladder. Just don't expect to spend 6 months learning to program and then be able to get a full-time, well-paying job in software engineering. Some people do get lucky enough to have that happen but the industry is littered with the corpses of people who struck out on the way.
Thank you very much for your reply! I feel you, because I have been studying foreign trade for 6 years. I literally graduated last week. I also have been working at the same time. So I almost had no free time for like 2 latest years and I am used to it. As you said, the main thing here is to push yourself to learning. 
I've developed three apps using that stack. Firebase did have some significant changes over the last few years and some of the old documentation is still floating around which can be confusing at times. Feel free to message me with your problems, I might be able to help.
"Professional" is a word that evokes many different things for many different people. If your goal is to focus on online courses and find \*any\* junior iOS job by the end of the year, I feel like it'll be difficult, but it's certainly possible. However, your network is going to be as much of a factor in your success as your technical knowledge. Do you have friends in the industry? If not, get out there and meet people. Conferences, meet ups, hack nights and hackathons. Whatever opportunities you can find to meet people and connect, take them and follow up. These people will become your allies when you're looking to break into the industry. If your goal is to get a great iOS job at an intermediate or senior level, then that's simply not going to happen. These types of positions require a nuanced understanding of object-oriented concepts and their tradeoffs. The type of stuff that only comes with experience. If you work hard though, you can definitely get to this position quickly. Either way, you'll realize that specific iOS technical knowledge is the \*least\* of your concerns when looking for an iOS job. That stuff is easy to learn and there are plenty of great resources available for different price points. It's everything else that's difficult :)
being that you’ve asked about ios engineering specifically i’m not going to rant about formal education and accreditation. being that it’s not necessary. at least in the US it’s not. i went from admin jobs to having a full time ios dev job in about six months. so depending on how aggressive you are about this goal it could happen. if you have in-person boot camps for programming, i would do one of those. if not, i would see what boot camps offer online courses. if you do it part time, you will probably not meet the goal. But even with part time course work you can make it happen in maybe a year. Then do an internship or apprenticeship program for a few months. it’s easier to score one of those. make sure you have a strong portfolio of complex, original project apps. not just tutorial remakes or assignments. while i would never discourage someone from a goal or career path, i have to add that i know in the US the ios job market is much smaller than web. it might be a good idea to think about why you want to do ios specifically. it will lessen your opportunities and the learning curve is much wider. But it is possible. You just have to have a large amount of time and dedication. 
Nobody cares about your degree or where it’s from except Asian parents. That was a nice rant to justify your degree or accreditation but has zero relevance to this situation. He wants to be a entry-level dev therefore literally one thing matters above all: whether or not he can program. Tech is very much still a meritocracy and endless people are given the chance to prove their ability or lack thereof with or without a degree in the US. I’ve gotten offers from all the big names at one point or another - FB, Google, Amazon, etc - and I’m a completely self-taught programmer. I don’t touch open source projects either. I’m not saying all courses are bad - far from it - but CS degrees in particular do not make one a good programmer... the amount of recent CS grads I’ve interviewed who couldn’t program for shit is alarming. A CS education is expensive - so are most of these boot camps - so they shouldn’t be the first resort when all the information is available free online. It’s clear to anyone who works as an engineer in a serious capacity that much of what’s learned in an academic setting is totally irrelevant for day to day engineering tasks. That being said, not everyone has the diligence required for self-guided learning but absolutely nobody is handed a job because they have a CS degree - they’re going to be tested on their knowledge as a way to gauge whether they will be a positive impact on the project and can work well with the other engineers. You can acquire that same knowledge in *significantly* less time than 4 years if you’re somewhat smart and dedicated.
No, although if it says something like "100&amp;#37; Metal" it might a bit. 
&gt; Not that I recommend such casual mutation Out of curiosity, why do you say that? If you had an object which was tracking the positions of, say, various text blocks laid out inside a view, it seems totally reasonable to do something like `textBlock.rect.height = newHeight` if you were laying out your content.
Computer programming is not a 6 month deal. There's people with a 4 years STEM degree and years of experience trying to get into the market. Look at the job boards and see what they are asking for. Not only is it very hard to find iOS jobs outside if tech areas, they want people that have been around of a long time, meaning 3\~5 years. Look at the list of what they want you to know. Go to some of the sites that show interview questions, look at the apps they want you to develop just to get past the 1st level interview. IMO, mobile is harder than other areas because it's mainly in tech hubs and they don't have much to offer entry level people. [https://www.dice.com/jobs?q=IOS+Developer&amp;l=San+Francisco&amp;#37;2C+CA](https://www.dice.com/jobs?q=IOS+Developer&amp;l=San+Francisco%2C+CA) Read the list of things they want you to know.
That would probably depend on the app/game. It can’t really see myself caring about a game (which will likely not be much UIKit and a lot more custom UI) but I could maybe see if it was a UIKit app that did something cool or novel and told you how it was done. 
A few things: - Your delete method isn’t quite right. When you delete an object, you’ll shift the indices of the remaining elements. - when you’re calling the controller from the cell, you’re instantiating a new instance of the view controller. You could either pass a reference to the view controller (bad as it has a high coupling), or you’re better to create a swift protocol (delegate from obj c) that the cell had a reference to and can call, the view controller will implement those methods. 1. Create a swift protocol with some delete method 2. Ensue your view controller implements the protocol 3. Pass a reference of the protocol to the cell (var delegate: MyNewProtocol? // inside cell cell.delegate = self // inside cellForItemAtIndexPath Check out swift references for protocols: https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html You could also use closures for this, but protocols is arguably a cleaner way to do it. Obligatory sorry for poor formatting, on mobile.
Mostly I meant that mutation like that should be a conscious choice and not a default or accident. In your example, it might be easier to reason about and test methods that return new rects rather than mutating a single value. 
&gt; That was a nice rant to justify your degree or accreditation but has zero relevance to this situation. Nice way to knock down a discussion: characterize the other person's side as a rant. I am also a completely self-taught programmer. I was a programmer for years before getting a formal degree. I've seen many sides of the situation, including being brought in on interviews and hiring discussions for several companies. Yes, you can be a completely self-taught programmer and get a good position. No, that will probably not happen with 6 months of education - self-taught or formal. Yes, a CS degree does not guarantee a good programmer. However, it does at least inform you what they've been exposed to and that they were able to cross a certain bar. Without the degree the candidate has to have other means to prove the same things or they won't get the interview at all. The same goes for working on open source projects. The main reason they are good is a hiring agent can go in, look at the checked-in code, get an idea of the person's knowledge level and style. Any submitted code samples or employment history also contributes, it all aids the decision of whether or not to offer an interview in the first place. They are potentially looking at dozens or even hundreds of candidates. Anything you can do to get in the interview pile is a good thing. A CS degree is one of the most certain ways to get into that pile but it's not the only way and it doesn't guarantee a job offer.
Nope and nope. It's not about the technologies, it's all about the gameplay and how well the program works. Use whatever technology works for you.
Okay I’ll try this out. Thanks! And yeah I didn’t catch that part of my delete function but I’m sure I would’ve realized it after it was deleting the wrong things, haha. Thanks again and tomorrow I’ll update if I need any more help. Thanks again.
if ur new to programming, do the intro first
You’re still missing the point. Learning CS is not the same as learning engineering. You’ve misrepresented what I actually said... I never made any guarantees on how long it takes to get a job - that can vary wildly depending on the person’s commitment and market. If you’re a good programmer, you can get a job *very* easily, and since significant portions of what is learned in CS classes are not relevant to the day to day engineering, it’s fair to say you can become a better programmer by just focusing on the trade and learning the CS portion later. It absolutely should not take anyone even 4 years to get to the level where they can get an entry level job if they’re committed to learning programming. They aren’t going to be hired as senior engineers but they can easily reach a level where they can help on projects. Getting the first job is probably the hardest but there’s other ways to sell your ability than a line item on a resume. Hiring managers don’t really give a shit... 
I understand you may consider this the same as YouTube, but after watching a few preview videos of various courses on Udemy, I found one that I really liked for iOS 11/Swift 4. I think there is a forum for the videos on Udemy’s site plus combined with this subreddit, I think you may be able to get what you need.
No. I would rather read an article or watch a talk about your experience using Apple APIs.
I'm at work now but will try to answer more fully later. But, for starters: You didn't put your method signature, but I am assuming you are returning a \`Future&lt;LoginSession&gt;\` in your route. With that said, this line: \`return try req.client().post("https://&lt;PATH&gt;") { loginReq in \` does not return a Future&lt;LoginSession&gt;. Also, this line: \`return try loginReq.content.encode(loginRequest)\` returns a value of \`()\`, which I suspect is not what you should be returning. Probably better to map the req.client().post("") method to LoginSession.self. That's a decent starting point. I'll try to get a more fleshed out answer after work today.
The Apple Swift book will baffle you. This book is for beginners to programming. https://store.raywenderlich.com/products/swift-apprentice
Honestly - as a consumer/basic iOS Dev I really would. It would give me an insight in how other people (also assuming successful AND big company backed app) do things. As a newbie, most of the things I do works, but I always wonder if others take the same approach or do something completely different. It'd be nice to see the difference between me and others
Personally I use XVim but for the occasional edit I'll use this package. It's handy. https://github.com/keith/swift.vim
XVim2 I should say. ¯\_(ツ)_/¯
You dropped this \ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
Nobody cares what apis you used just like nobody cares that you wrote it in Swift.
Thanks for the suggestion, have solved it, with the help of 0xTim at the Discord Vapor channel. [router.post](https://router.post)("login") { req -&gt; Future&lt;LoginSession&gt; in let username: String = try req.content.syncGet(at: "username") let password: String = try req.content.syncGet(at: "password") let authenticationPassword = BasicAuthorization(username: username, password: password) return User.authenticate(using: authenticationPassword, verifier: BCryptDigest(), on: req).flatMap(to: LoginSession.self) { user in guard let user = user else { throw Abort(.unauthorized) } // Fetch Access Token let urlString = "https://&lt;VALUE&gt;" let loginRequest = ServerAuthenticationData(layout: "&lt;VALUE&gt;", user: "&lt;VALUE&gt;", password: "&lt;VALUE&gt;") var headers = HTTPHeaders() headers.add(name: "Content-Type", value: "application/json") return try req.client().post(urlString, headers: headers, beforeSend: { loginReq in // Encode Content before Request is sent return try loginReq.content.encode(loginRequest) }).map(to: LoginSession.self) { response in let decoded = try response.content.syncDecode(APIAccessResponse.self) print("token:\\(decoded.token)") return LoginSession(userID: user.userID, userToken: UUID().uuidString, accessToken: decoded.token) } } } Is how I solved it with the help. Biggest changes are the start the return chain with a .flatMap, and end it with a .map. Second calling the correct .post function. Third add the correct headers. Now I can move to the next level: adding a session for each logged in user. Should not be to hard. And then adding all the missing calls. Thanks anyway.
Yoi need to load the VC from xib/storyboard instead of just instantiating it if you are not making your view in code.
Solved: [router.post](https://router.post)("login") { req -&gt; Future&lt;LoginSession&gt; in let username: String = try req.content.syncGet(at: "username") let password: String = try req.content.syncGet(at: "password") let authenticationPassword = BasicAuthorization(username: username, password: password) return User.authenticate(using: authenticationPassword, verifier: BCryptDigest(), on: req).flatMap(to: LoginSession.self) { user in guard let user = user else { throw Abort(.unauthorized) } // Fetch Access Token let urlString = "https://&lt;VALUE&gt;" let loginRequest = ServerAuthenticationData(layout: "&lt;VALUE&gt;", user: "&lt;VALUE&gt;", password: "&lt;VALUE&gt;") var headers = HTTPHeaders() headers.add(name: "Content-Type", value: "application/json") return try req.client().post(urlString, headers: headers, beforeSend: { loginReq in // Encode Content before Request is sent return try loginReq.content.encode(loginRequest) }).map(to: LoginSession.self) { response in let decoded = try response.content.syncDecode(APIAccessResponse.self) print("token:\\(decoded.token)") return LoginSession(userID: user.userID, userToken: UUID().uuidString, accessToken: decoded.token) } } }
Make some apps and put them in the store. Assuming they are not too bad it's a great way to demonstrate that you can get things done and publish. The Stanford course is good.
Buy one of the $15-$30 courses on Udemy and follow along. The teaching styles are very similar to one on one tutorials, so it will fit your learning style better than you might expect. They also have live chat rooms or forums where you can see additional 1 on 1 help for free. You won't find anyone who just wants to spend dozens of hours tutoring you for free, simply because that kind of tutoring is worth literally thousands of dollars.
Why don't you straight out use a pickerview?
Because it's presented like a keyboard and I'd like to keep that 
Have you looked at the textFieldDelegate methods? If you use textFieldShouldBegineEditing you can just always return false and editing will never be allowed in your text field and as far as I know the textField will be enabled (but I do not actually know this). Just a suggestion. I'm new so I don't know really know if it's a good one! 
I tried that but it's not really working.
By not really working do you mean the method is not disabling editing or that it disables editing but the textField is also disabled so it's not what you want? 
I've created something similar in the past, but with a numeric keyboard. See here for an example: [https://github.com/bvankuik/TestCustomInputViewCallingUITextFieldDelegate/blob/master/TestCustomInputViewCallingUITextFieldDelegate/ViewController.swift](https://github.com/bvankuik/TestCustomInputViewCallingUITextFieldDelegate/blob/master/TestCustomInputViewCallingUITextFieldDelegate/ViewController.swift)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [bvankuik/TestCustomInputViewCallingUITextFieldDelegate/.../**ViewController.swift** (master → 222ffc3)](https://github.com/bvankuik/TestCustomInputViewCallingUITextFieldDelegate/blob/222ffc3c9525028a7e42e5da5370a816a68f6b2e/TestCustomInputViewCallingUITextFieldDelegate/ViewController.swift) ---- 
Add a delegate to the text view that implements the should change method and have it return false. The delegate method only gets called on user changes, not programmatic ones.
You could start at https://www.hackingwithswift.com/read. Paul Hudson also offers books for beginners which are quite often referenced as a good start into swift in this subreddit. I can really recommend these. Have fun learning. :)
 I mean that if you try to tap on it, nothing happens (ie prevents the UIPickerView to be shown). func textFieldShouldBeginEditing(\_ textField: UITextField) -&gt; Bool { if textField == selectDateTextField { return false } return true }
&gt;You meant TextField. And yes, I did. I have set the delegate of this TextField. And when I tried that, it prevents the user from editing. That's partly what I was hoping to achieve. Now the other part is basically get rid of the courser that's blinking because it gives the illusion that they can change that text
I'm a little bit confused here. Which part exactly turns off the blinking of the cursor? 
Never mind. I can actually just set the text field tint color to `.clear` and that solves the issue. 
Performing under deadlines is often times unprofessional and disrespectful of your own skill. A skilled developer supplies their own estimate and pushes back against imposed deadlines. A deadline is something that is imposed when the people asking for the work don't trust the people that are delivering it.
“Core Data uses thread (or serialized queue) confinement to protect managed objects and managed object contexts (see Core Data Programming Guide). A consequence of this is that a context assumes the default owner is the thread or queue that allocated it”
&gt; it runs NOT in the main thread (I guess). You guess? :) Doesn't sound like a good idea if you're not certain. I suggest to leave the main context on the main queue, and create child contexts for actions that take longer which then merge into the main context. Nowadays you get a lot of convenient methods to achieve this. You can set up your context's dispatch queue during initialization. The key is to use the `perform` methods on your context to make sure requests are executed in the context's queue. See here to get an idea: https://stackoverflow.com/questions/24751276/nsmanagedobjectcontext-and-queues#24751575 To see if the target queue is the problem, try `performAndWait` to wait for the fetch to finish: https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext/1506364-performandwait If that doesn't do the trick, try to execute the functionality on the main queue. Try to get remove concurrency out of the part you need to debug for now to figure out where the problem comes from. (There's no mechanical solution to this problem, it could take a lot of sensing around in your code base, depending on how bad the situation is.)
As far as I can see you are on `Thread 9`, this is not the main thread. Btw. you can check if you are on the main thread by calling `Thread.isMainThread` in `lldb`. It looks like you are parsing some XML files via `NXSMLParser` and to didn't dispatch back to the main thread, after parsing finished.
**Professionality** is a pretty hard thing to attain. It's more about the attitude, thogh. A lot of top programmers have a sloppy attitude, cannot take responsibility, expose insurmountable hubris, or think they know it all and won't listen and learn. Here's what I learned teaching other people to program (in Swift). If you have an affinity to solve technical problems, go with online courses and lots of deliberate practice to get you started: - Get a practice book like "Learn Ruby the Hard Way" to learn a language; you can switch to Swift easily once you understand the basics of programming and are fluent in any other language. (The Swift docs and API documentation aren't very beginner friendly. Some Swift conventions are simply puzzling. I tried to teach a client the basics of UI programming, and looking up `NSRect` in the documentation is one of the harder things to do: first, the documentation doesn't open the correct page most of the time, so you have to click twice, then `NSRect` is defined as a typealias for `CGRect` which isn't helping at all, then you have to look up `CGRect`'s methods and make sense of "what is Core Graphics after all?"; meh. And code completion in Xcode only work 80% of the time, often not for initializers, which you want to use a lot. And there's no docs for keywords like switch/if/func/class/...) - Or get a live coach, which is arguably a lot more expensive. - Try to find someone to practice with and talk to. Figuring out things on your own can work, but having a 2nd opinion and point of view is always better. (And you can pair program, which is cool!) - Separate your schedule: - reade code of other people and annotate it (treat it like reading and understanding a text in a foreign language), - take not of every question that comes to mind so you can solve it later, like "how do nested loops work", or "can I override stored properties with computed properties in subclasses?" or similar stuff, - schedule a lot of time for practice to solve problems, - schedule some time, 10mins or so, at the beginning of longer learning sessions to get to know the tools. Perform a couple of tasks in Xcode, like create a new throwaway project for the day and commit changes with git from within Xcode so that these things become 2nd nature. You can do [a coding kata](http://codekata.com/) every time during that time, too. Once you master the language and your practice goes beyond "create an object that implements CustomStringConvertible to expose the sum of its property values" or similar, look for inspiration for mini projects that can take a couple of days to complete, for example: https://github.com/soapyigu/Swift-30-Projects Good luck 🍀
&gt;Thread.isMainThread Thanks man you've saved me. Now it works perfectly nothing breaks I've added DispatchQueue.main.async in completion handler But why is that cause I haven't used any DispatchQueue.global statements??? func startParsingURLs() { if let urlString = channel?.url, let url = URL(string: urlString) { DispatchQueue.main.async { self.parseURL(url: url) } } } func parseURL(url: URL) { feedParser.parseFeed(feedUrl: url, errorHandler: { [weak self] (error) in if let error = error { self?.didFailureParsing(with: error) } }, completionHandler: { [weak self] (items) in DispatchQueue.main.async { self?.didParseURL(with: items) } }) } 
Thank you!
Thanks I'll read the guide :)
But they *can* change the text. You are even showing them a picker for them to use in order to change the text.
 When an asynchronous closure, at the basic level, what we're asking the CPU to do is handle the work on a background thread (not the main thread). There is no guarantee which thread is used unless we definite that ourselves. 
Why not use a UIButton?
A better option would be to subclass UIControl since that’s where the inputView property comes from. Then just add a label as a subview to show the selected value. No point working around UITextField when you aren’t using any of the text editing functionality. 
I can see your point, however I don’t believe that is necessary true most of the time. I suppose it depends on whether you’re working, such as a larger company, or working for yourself. My main point was just having the ability to get things done in a set time frame.
How come all these articles about programming things have pics of random dudes?
Welcome to exchange and feedback!
Uhm a bit excessive, but kinda cool, I want to use in an app :D No license on it though? Also whats wrong with CocoaPods?
I'll set a reminder to check on this after work. I've done what you're describing in Python and JavaScript numerous times, and I'm quite familiar with Swift, but I haven't personally done this in Swift. I should be able to figure it out if no one else gets you an example by then.
Thanks, I just started swift for a month and this is my first assigned job.Lol. My timezone is at Southeast Asia, and quite close to that of Thailand. It's almost midnight and yet I can't sleep, and keep digging through how to sign request to AWS Gateway API. Really thank you for your time. I understand it is quite difficult to spare time for answering tech questions like this one.
It's no problem--really what you're doing is not an uncommon thing so it should be documented better (or as a provided SDK) anyway.
Thanks! I will check this out. 
Try using gist.github.com or something like that so its easier for people to read.
I first started with "Intro to App Development with Swift", then I moved on to "App Development with Swift". When I started, I was also new to coding in general, and I was able to finish the first book, and I'm halfway through the second one. The first book is short and simple. It teaches you some of the main concepts of swift and a little Xcode, but the second one goes into more detail. By the end of "App Development with Swift", you'll probably know enough to build your own app. There are also other good resources, such as hackingwithswift and Ray Wenderlich. 
CocoaPods does a lot of magic, for example when creating a .xcworkspace. Also, if I remember correctly, it requires you to store the entire specs repo locally. Carthage just fetches the project for you and compiles it. It’s up to you to add it to your project in the best way you see fit. In some cases Carthage doesn’t even have to compile, some repo owners add pre-compiled framework files to their release tags.
If you want to do more custom stuff than the iOS 9 `UIViewControllerPreviewingDelegate` API allows, you’re going to have to make use of iOS 10’s `UIPreviewInteractionDelegate`. That has the relevant methods for Peek/Pop progress as a user adds force, plus you can do anything you want during Peek/Pop instead of just presenting a VC. 
That's my impression of CocoaPods as well. If this is incorrect, I hope to be enlightened.
Okay, that sounds useful, thank you! Am I right in thinking that the Control Center’s Peek action is just the enlarging of the slider, and that the Pop is the actual presentation of the overlayed transparent-background view? It makes sense that this would require this updated API you mention, which I hadn’t seen much reference to previously. (I know you likely don’t *know* unless you worked on that team, but in your experience does this seem a reasonable assessment of the functionality?)
Definitely not an Apple employee, but I did do work for a client that wanted something that (almost) exactly mimicked CC and this is accurate. You could even use snapshot views so you don’t have to manipulate the frames of the actual views if not necessary. 
&gt; I think this topic might be a bit too advanced for you. You should go over the basics of networking again. Maybe watch the Stanford videos. I think you might be unclear about what's happening here. My knowledge of networking has nothing to do with this at all. 
&gt; More than likely your URLSession is broken somewhere. I don't see how. It works fine, but only when the simulator first starts. If I terminate the app while the simulator is still running and relaunch it, it doesn't work. But if I kill the simulator entirely and rebuild the app it works fine every time. 
I'd be happy to share relevant sections of code. What can I provide that will help? You can see a lot of what I'm doing here: https://www.reddit.com/r/swift/comments/8uu8k5/parsing_json_into_variables/
In this case I feel fan-out write is better. Simply because of responsiveness. Submitting a post can be done quickly and then fan it out more slowly, the user will hardly notice. However, if you go to read posts and have to gather them all up the user will suffer as they wait for the data. Updating posts in real-time is less of a concern than responsiveness in reading them. Most times people won't notice if there is a few seconds difference between when someone else makes a post and when it shows up in their feed. In fact, it's not that surprising of a behavior. But when you go to check for posts and the app spins as it waits for data? That's very annoying to a user.
A deadline should work both ways. It should be agreed on by both management and the worker and if either one has an issue with the deadline then it's up to both to discuss what's wrong with it. There's absolutely nothing wrong with having reasonable deadlines. They form a contract that can be used to better plan resources and further development. Done correctly they increase trust and improve the work environment and the end product.
I've added MIT license right now, sorry for inconvenience BTW there is actual app using this library which I made some time ago: https://itunes.apple.com/us/app/companion-cube/id1047146095?mt=8 (maybe will give you some inspiration) Regarding cocoapods: it's a pain in one place to keep you library up-to-date for cocoapods users. While Carthage requires almost zero maintenance (you can actually use it for most dependencies, the only requirement to have a shared scheme for what you will be building). Plus a lot of other points which are too personal =)
Hey thanks for the info. That sounds like what I'm looking for, though the link doesn't really have an example of how to use the function. I've googled a bit but I don't see any examples on how to use the function to trigger an action if the timeout is hit. 
How would you get around the problem of having an updated “like” and “repost” count? A separate node? A separate node for keeping track of these? Because currently as it stands a posts like and repost count is built into a post object that’s copied on the fan out on write. If you know of a service where I instead of denormalizing the data I could say a sort of “pointer” to the posts. The fan out on write would still happen but it would pull an updated copy of the post when a user loads the TimeLine. Thanks again 
I can declare a house to be built before it's actually done being constructed but that doesn't benefit anyone.
So I got a proof of concept working but the example in this article is already there: https://medium.com/@lewisjkl/signing-aws4-31dcff1bf1f0 There's one line to change for Swift 4.2 compatibility (Xcode will point to it) and the usage example is tailored to his API, but that's it. The part that includes the temporary session key is where it sets the X-Amz-Security-Token header on line 125.
And why would you do something so silly?
I will test it out and will get back to you with results! Fingers crossed 😆
I think you can do a mixture of both. Fan out signals that a new user posted. The client can then fetch upon needed. The idea I have was inspired by how I believe Snapchat works at a high level. If the app is open, keep a socket open to your server so that it can listen to new snap signals. Notice I say signals and not objects? If the app is open the signal tells the client to fetch new data. Notice how you’re not sending all of the posts you’re just sending a signal that new data is available. When the app goes to the background you can close this socket and let the system’s push notification take over “John sent you a snap” then when you open the app it knows to fetch data. This is just a high level concept and maybe it could work or not but I’m opposed to copying a million tweets when you could just push signals to the client with an SDK like Pusher. 
That’s actually a really unique idea for loading new posts. However, what you’ve described is a sort of messaging app. My situation is building a timeline for all posts that a user follows. This specific method snapchat uses is in fact really interesting, but I don’t think it would work in this case. I’m not as concerned with showing people new posts immediately, rather I’d be okay with say a 30 second delay my main focus point is quickly displaying a chronological timeline that consists Of Posts that people that the timeline user follows. But I have tried to find a sort of hybrid between the two I just don’t know how to properly execute it. But thanks so much for your suggestion it’s a very interesting concept 
What you seem to be asking is if the more subviews you have, the slower it will get to "live-resize and draw them". The answer is most likely yes... but there are way too many variables to give a useful answer... Depending on how exactly you plan on doing your zoom. Are you drawing these views and positioning them manually? Are you using Auto-Layout? do you plan on using transforms to do it? (CGAffineTransformMakeScale? CGContextScaleCTM?). Time complexity is used to describe the worst case scenario in terms of elementary operations for an algorithm as the input grows (e.g. I am searching for a value in an unsorted array of *n* element, the worst case that could happen is that I have to go through all the elements (i.e. *n*), therefore the time complexity is O(n) ). There's absolutely no need to get down to big O notation and time complexity in this case, really what you're interested in, is if having a lot of subviews is going to be slow to zoom, and the answer depends entirely on how you implement that zoom. You could just render an image of the view as soon as zoom is initiated, and zoom on that image, and then redraw the actual view (and its subviews) once the zooming is done, and then it doesn't matter how many subviews you have. Or possibly just zoom the context, and then do the actual view drawing later. Or you can just use transforms, and then it will definitely matter how many subviews you have. If you use autolayout, chances are that doing transforms on a lot of views is going to be slow, or if you calculate everything manually and position your views manually without autolayout, you might be able to pull it off depending on how many views there are... Would like to be more helpful but really it's pretty much impossible to answer accurately from the info you've given us.
I *think* it just does a scale transform on the root subview of UIScrollView. I would expect O(1). It certainly can if you write your own. 
If you used URLSession to fetch the XML, it called DispatchQueue.global or similiar internally.
Okay, awesome. I played around with it a bit today and it seems to be setting me on the right path so far, so thank you!
That makes a lot of sense, and you're right I didn't give enough info. I think I was more curious about the actual implementation of viewForZooming in scrollView, but now I'm thinking I'll implement with a transform+content offset of a parent view, which shouldnt scale with the number of child views of that parent. I could be wrong, but I'm expecting on the order of 20 subviews, not 1000, so even if it ran the transform on each subviews it wouldn't have too huge of an impact. 
No problem. 
 Did you found solution? To me it's seems that you didn't put right class of ViewController in storyboard. Also if you are using storyboard [check this out](https://stackoverflow.com/questions/39450124/swift-programmatically-navigate-to-another-view-controller-scene)
You can fork swift and put it in the language itself, but you can't do it in code.
Assigning transforms to views is really fast on iOS, you could probably do it for 1000 views and still have ok frame rate on the new devices. What is slow is if you redraw your views while zooming (i.e., have drawRect: called), or do some complicated layout logic.
As a last resort, you can implement a custom gesture recogniser - you can get the raw touch pressure data from there. This allows you to do pretty much anything you can think of. (If you can get away with other, higher level APIs, definitely use those though).
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/iosprogramming] [Waze onBoarding animation tehnology • r\/swift](https://www.reddit.com/r/iOSProgramming/comments/8w0bfa/waze_onboarding_animation_tehnology_rswift/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
It's not a pre-rendered animation (video), it's rendered live, like a game. So there's a basic scene animation that defines the geometry, and how it would move if you were swiping smoothly straight through. As you say, it's controlled by the page number and the swipe offset. Then the little sub-animations are just that - objects that have their own animations running all the time, like the pulses on the cars.
Seems like it is built with a whole lot of CALayers with various transforms.
Nice, might create a version called Swiftn't
I guess you could build something like that with SceneKit. It seems like a lot of work though. SceneKit also let's you use Core Animation. The timing parameters can be controlled with user input to make the node animations scrubbable.
20 subviews or so definitely shouldn't be a big deal no matter how you do the resizing, especially of you use transforms. I would say go ahead with the simplest implementation you can think of (you seem to be on the right track), and only optimize if needed (it probably won't be!)
Neat :D
That's a good idea; I'll keep that in mind if the other stuff doesn't work out for me. Thank you!
[Don't use inheritance, use composition.](https://en.wikipedia.org/wiki/Composition_over_inheritance) In your case you'd create a CustomView class that is a subclass of UIView. Then when you want to show the same thing in a CollectionView, you'll create a UICollectionViewCell subclass where all it does is add a CustomView as a subview, the same way you would add an image view or label as a subview.
**Composition over inheritance** Composition over inheritance (or composite reuse principle) in object-oriented programming (OOP) is the principle that classes should achieve polymorphic behavior and code reuse by their composition (by containing instances of other classes that implement the desired functionality) rather than inheritance from a base or parent class. This is an often-stated principle of OOP, such as in the influential book Design Patterns. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/swift/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Ok, you are a lifesaver. The code snip reallys help me out,with a bit of tweaking. I left an answer option blank at stackoverflow in case you want to post it there. That medium article never appeared in the Google search. Glad I tried to find helping hand on reddit. 
The biggest suggestion I would have for you would be to try to work with the existing style of code they already have in Objective-C, and not immediately try rewriting things in Swift, just because you want to. The languages are different, particularly the lack of optionals in Objective-C, so you'll have to understand how to work with nil values in Objective-C. The good news is that the standard libraries are mostly the same for UIKit and other frameworks, and storyboards, auto layout, outlets, actions, etc. all work the same way. I would suggest trying to work through the code by asking questions as you go from the other developers.
IMO, there really isn't very much they have in common other than the API stuff. You'd still call the same API for things like UITableView and the UI call, etc... So from that stand point, it's a head start. I'd get some of the old ObjC books, there's quite a few of them out there. BNR made a few, they should be pretty cheap now as the demand has dropped a bit.
If you know c or c++ you are half way to understand obj-c, the biggest difference between swift and obj-c is that swift is strong typed language and obj-c is much more dynamic, and theres no optional like other languages like c# or java, also is hard to say because there are so much small things, but the best way to learn is building a simple app from scratch in obj-c, try a simple master detail app with some networking. The good news is that the workflow is the same in both languages, the apple frameworks are quite the same and iirc you can use all the cocoapods libs (including swift libs) in your obj-c project.
Seems to have worked! Thanks for the help! Now just sorting through my big deletion mess, haha. Little by little I guess!
Nice code and documentation :) thanks for the share! Did you do it as a learning project or have a use in mind for it?
Will be integrating it into my other library MessageKit
for languages that have a specific term for `if !x`, it's usually called `unless x`
Maybe you can help me with something somewhat related to this. I’m trying to release my own emoji app, and I’m having a really hard time not only getting it approved my Apple, but also I can’t get it to work how the stock emoji set works, where you tap on an emoji and it types it into the message box, best I’ve been able to do so far is having my emoji down below as a keyboard, but tapping on one of my emoji only copies it, then you have to go above and hit paste to paste the emoji and be able to send it off. Any tips or help in the matter would be greatly appreciated.
I believe that's a purposeful limitation of apps. You might way to look into making a 3rd party keyboard so that it can insert things into any text input
The major differences between the two languages are these: - Onjective-C has header files to separate interface from implementation, Swift does not - Objective-C heavily uses pointers to objects, Swift uses references or directly uses values - Objective-C has method swizzling - the ability to dynamically replace a method with another one, Swift does not - Objective-C allows messages to be sent to null pointers (they will have no results), Swift does not - Nearly all Objective-C objects inherit from NSObject, most Swift objects do not - Swift has type inference, Objective-C does not Other than that the rest is mostly syntax. For example, calling a method in Objective-C will look like: [foo someMethod] In Swift this will look like: foo.someMethod Objective-C objects have an allocation method and an initialization method: [[Bar alloc] init] Sometimes they are combined in a `new` method: [Bar new] In Swift they are combined into an `init` method: Bar.init() Which has a shortcut to call it: Bar() Basically, Objective-C is still very very close to its C roots. Pretty much everything is a pointer of some kind so you should check to see if it's nil before using it to avoid bugs. Obviously, in Swift nearly everything is either an a valid object or an `Optional` so you should unwrap it safely.
look for "Update Frames", by going to the toolbar and selecting Editor -&gt; Resolve Auto Layout Issues -&gt; Update Frames.
xcode latest release is awful. Can't place anything at the right place right now. I have moved to the full coding. After drag and drop sometimes it's not showing anything at all.
is this the same button at the bottom of the screen that is the circle arrow? I've pressed that and things have stayed the same - I will also try this though.
yeah, I think i will eventually move to hard coding things - it seems that you have the most control that way. 
Please change that link at the bottom to "Download Video"
Yes, this works! Thanks!
It's browser dependent. For example on mobile it views the video. Sorry for any inconvenience
check out: https://crashlytics.com It's basically an industry standard at this point
Create it as a UIView subclass and when you want to use it in a collection view just add it as a subview to a plain UICollectionViewCell’s contentView. I do this as standard for all views because I don’t want them coupled to a parent view like a table view or collection view.
And importantly, you can send messages to nil!
Not true, you barely need to know anything about C to write Objective-C. Also the references are basically the same as in Java in everyday use. The hard stuff that's in Objective-C is still in Swift, like weak/strong references, threading and things like that.
Objective-C is one of the smallest languages I've used. You need to get used to the things you can't do anymore and the fact your classes are split in an .h and .m file. The syntax might look funny for a day but it's super easy really. Also at every border (between your internal app logic and external frameworks or data sources) you should check manually for nil or weird values.
I’ve used it and finished all the courses. I’m still a big noob, but what has worked the best for me is to diversify . In other words, don’t just stick with one app, book or video series. Diversify! Did optionals gave you a hard time the first time you read about it? Given another context you’ll suddenly have that «aha!» moment before you know it. With that out of the way, I’ve had experience with the following apps: **Code Swift:** It’s one of the more updated apps compared to a lot of outdated apps on the App store. There are numerous topics to dive into, but the tasks are pretty much the same — guess what’s missing and write it. **SoloLearn:** I like this app. It has a really cool approach, and I really like the social element. If you’re stuck on a quiz you can use the comments section for help. It has one major drawback, though. It hasn’t been updated to use the latest version of Swift. Another nitpick I have, is that you can’t use the coding section for Swift yet. **TapCoding:** I’ve only used the free courses, which where very basic but decent enough. It looks abandoned which put me off from purchasing the other courses. **Mimo:** I really like the courses and the style. It requires a subscription to unlock all the courses. The pricing would probably scare away most people. I decided to take the plunge, but only because I was interested in the other coding courses as well. ** Sedona - Compile Swift Program:** A fun little app to practice simple code snippets on the go. 
If you really want to know, find a decrypted version of the ipa (piracy sites, jailbreak and extract it, that’s on you) and then resign it using your dev certificate. You can then attach the Xcode debugger to the app and use the UI inspector tool to see what view they’re using 
1) cant you make its aspect ratio constraint 1:1 and add a 999 priority width = superview.multiplied(0.85) (i use snapkit so youll have to translate if you dont) 2) not excatly sure what you want in landscape 3) do what you feel is best to achieve the task.
Firebase/google analytics, it has awesome analytics with integrated crash reporting (crashlytics) and it’s free - 
You might as well use Firebase Crashlytics at this point: https://firebase.google.com/docs/crashlytics/ I can't see Google keeping the old Fabric Crashlytics around for much longer now that they're offering a migration path.
If you do, look into SnapKit
That point is in there, although I don’t feel it’s a positive feature since it hides the fact that there is no object present to receive the message. 
Graph data
Use graph 
Will do - github and learning new advanced things is still a bit intimidating. But I will check it out. 
+1 for firebase&amp;analytics Google bought Fabric and they're kind of closing out.
It would be more correct to say Objective-C is much more close to its Smalltalk roots. You use very little C in Objective-C. With a [few categories that add block operations to collections](https://github.com/tblanchard/SmalltalkCollections4ObjC) the only thing you still use C for is conditionals and loops. That's it. 
I'd say it's a strong mix of both. Of course Smalltalk deeply influenced the development of Objective-C but Objective-C is a strict superset of C and so much of it is still valid C. Of course, once you wander into the object-oriented part you stray from C but I find that sticking to plain C can be a fairly good pattern when working with Objective-C. Object-oriented programming is great for handling some things but it is overkill for many others.
Well that's its strength - you can approach fully dynamic OO or you can drop into high performance C all in the same file. But idiomatically - Cocoa is more Smalltalk than C.
Glad to hear, you could use a while loop to do deletions like that, incrementing the counter only if you don’t delete an item and stopping when your index is greater than the length of the list. Or construct a new array with the negation of the condition, heaps of potential ways.
Agreed on all points.
None. User privacy is something you can sell and people will pay for it. 
Eh, it can be useful to avoid unnecessary nil checks of things that are ok if they fail (say, calling removeFromParent on a view pointer that might not be set under certain circumstances). It’s the closest thing in Objective-C to the ?. syntax.
They use a third party framework called Lottie by AirBnB. 
I hope you're right, can you give an example?
I've been diving into firebase's firestore very deeply lately. Let me know if you have any specific questions 
probably sending the data to a basic server running python, like flask or something. Make a rest call sending the data from swift to the server, do the processing, and return. A lot of hosting options on websites like pythonanywhere, heroku, digitalocean etc 
Yup. Exactly. This is what servers are for. 
that isn't a reason to forego analytics. there are ways to use them responsibly (e.g. disassociate data from users, opt-out options, don't sell your data [duh], be transparent if you collect personal info and what you use it for, etc.). and you get great value from knowing when your app is crashing and how users are using your app/new features. 