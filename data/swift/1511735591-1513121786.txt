I'm not familiar with Swift as server side language, but i'll try. Think about it, you want the user to press on a button, which executes some swift code on the sever. But where does the user's code live? Right, not at the server. You can't directly reference it. What you'd need to to is to send some request to the server which executes the swift code. 
Replace the global closure with a global function: func compareGreater(_ a: Int, _ b: Int) -&gt; Bool { return a &gt; b } and the problem will go away.
Compile with `swiftc -O …`
Function is special case closure. So this is expected. I t ally would like to find out what going on under the hood with global closure that makes it slow. 
Global closure uses a "partial apply thunk": +0x00 pushq %rbp +0x01 movq %rsp, %rbp +0x04 pushq %r15 +0x06 pushq %r14 +0x08 pushq %r13 +0x0a pushq %rbx +0x0b subq $16, %rsp +0x0f movq %r12, -48(%rbp) +0x13 movq %rsi, %r15 +0x16 movq %rdi, %rbx +0x19 movq 16(%r13), %rax +0x1d movq %rax, -40(%rbp) +0x21 movq 24(%r13), %r14 +0x25 movq %r14, %rdi +0x28 callq "swift_rt_swift_retain" +0x2d movq %r13, %rdi +0x30 callq "swift_rt_swift_release" +0x35 movq (%rbx), %rdi +0x38 movq (%r15), %rsi +0x3b movq %r14, %r13 +0x3e movq -48(%rbp), %r12 +0x42 callq *-40(%rbp) +0x45 addq $16, %rsp +0x49 popq %rbx +0x4a popq %r13 +0x4c popq %r14 +0x4e popq %r15 +0x50 popq %rbp +0x51 retq There's a retain, a release and it still needs to call into the contents of the closure: +0x00 pushq %rbp +0x01 movq %rsp, %rbp +0x04 cmpq %rdi, %rsi +0x07 setl %al +0x0a popq %rbp +0x0b retq The global variable is wasting time retaining the global variable and calling into it. It is as though it was a global `var`, not just a `let`, everything is dynamically accessed. The plain function or local closure avoids the "partial apply thunk" and calls directly into a the contents: +0x00 pushq %rbp +0x01 movq %rsp, %rbp +0x04 movq (%rsi), %rax +0x07 cmpq (%rdi), %rax +0x0a setl %al +0x0d popq %rbp +0x0e retq so it avoids the overheads of retain, release and the additional call. Why does Swift treat the global variable as dynamic when it is really constant? I don't know. It probably just isn't optimised for this case yet because using a global constant closure that captures nothing is usually a bad choice (offers zero advantages) compared to a plain function.
Thank you very much! Really appreciate you explaining this so clearly. The reason I was using global `let` closure was because I was using the same closure expression in several places. I didn’t want to repeat the same literal. So you think this is just unoptimized code; not some deliberate design choices? The performance hit is quite huge. 
Yep, and its totally worth it in my opinion!
Handling the observers was the hardest part of my own attempt to write a `NotificationCenter` wrapper, so good luck.
I'm just going to return them from when() as a discardable result. I'll probably never use them myself, but at least that'll make it easy for anyone else who wants to.
Wild guess, maybe Swift is ensuring access to your global variable is thread safe by adding locking.
Did you also try the Cocoa Layout instrument? Add it to your trace from the Library.
Done :) There's a v1.1.0 now, which returns the observers as discardable results. 
Let’s say that you order a cup of tea. As you’re paying the barista starts making it for you (think asynchronous task starts, or simply put you’re downloading data to your app). After paying you walk to the other side of the counter to pick up your tea. You see a cup but you’re not sure if its yours or if it’s ready yet. One way to find out would be to pick it up and ask. Is this mine? That would be an example of unwrapping an optional. Is there data here? Is it ready? Great, I’m off todo whatever with my tea/data. The other way to find out is to force unwrap. You don’t ask, you just take it and end up with whatever tea drink is there or worse and more likely nothing is there and you walk out paying for an empty cup of tea. Hence, using optionals is safe and secure and is always recommended. 
A variable of type Int can only hold an Int value; you can't assign a UIButton or a Double or a String to it. A variable of optional type `T?` either holds a value of type `T` or it holds `nil`, and because you can't guarantee that it has a value of type `T`, you have to check it and "unwrap" the value to use the variable where a value of type `T` is expected. `?` is used in "optional chaining": `someValue?.someMethod()` means "if someValue (defined as having an optional type) isn't nil, then call someMethod() on it as if it were of the equivalent non-optional type"; if you replace the `?` with a `!`, it means the same, except you're saying to crash the program if someValue is nil.
Huh - that makes it a lot clearer. Thank you. I have another clear article, and it seems Swift forces you to unwrap optionals, right? So if you're paying for tea, you're forced to open up the cup and see if there's tea in it, and you do this using `if let = `. Correct?
Optional means the variable/object is potentially nil. You want to unwrap an optional so in the event that it is nil you can properly hand that case instead of crashing. Force unwrapping is bad practice and should be avoided, as it can lead to your app crashing. ? Is used to optionally unwrap an object, and ! is used to force unwrap. let say you have an array of contacts and you want to do something with each person’s email address, assuming the user has filled it in. If the user hasn’t added an email address the contacts email property is nil. You might write something like: for aContact in contacts { //force unwrap, if email is nil you’ll crash sendEmail(aContact.email!) //unwrapping this way is better if let email = aContact.email { sendEmail(email) } //if the email is nil, the function won’t execute aContact.email?.someStringFunc() } You can also unwrap stuff in a guard statement, which can get rid of some code nesting. 
Force unwrapping is the one where you don't check. You just act like you *know* the tea is there, and it's yours. the `if let X =` is like checked to see if it is your tea in the cup. Force unwrapping should only really be used when you want catastrophic results if you are wrong about your assumption. Taking the tea analogy: You walk into the shop, you are the only person there, and the baristas aren't doing anything. You order tea, and you watch them make a tea, they put the tea on the counter and you take it without asking if it's yours, because, barring some secret internet order you didn't know about, it has to be. 
Thanks. One thing I don't get, what is the `X` in that code. Like, isn't it `if let X = optionalToUnwrap`?
The x is a newly created normal (not optional) variable that has a value. let optionalValue = someFuncThatReturnsAnOptionalInt() if let valueActual = optionalValue { print("calculated: \(valueActual * 3.5)") }
ahh, so the value of the optional (if it has it) is given to valueActual (x in the prev example)?
Correct. And if the value is ‘nil’, whatever is in the ‘if’ clause won’t run.
wow - actually starting to grasp this a bit now. Thanks!
yep!
There are a couple of video over at Treehouse that explains optionals in Swift. It’s a great place to get som practice in as well.
You’ll have to implement them yourself. Fortunately, it’s fairly easy once you understand how sequences, collections, and protocols work in Swift. Also, there’s most likely someone else out there who has already implemented them efficiently, so I’d just look it up on Github if I were you. 
Hey Guys! Just created this account and immediately subscribed :) I just graduated in Computer Science and I got hired as a iOS Developer. Swift is new to me so right now so I been grinding a Devslopes course in iOS development to learn some basics before jumping in a project with the company.
Thanks
When subclassing the UIButton you can override the touchesBegin method that passes the „event” parameter. You can check if the event is touchUpInside, and if it is you can just return. Please somebody correct me if im wrong
I'm fairly new to Swift, but I've known compilers that have a preprocessor and the compiler has an option to see in between code. Code that's not .asm but not the code you write. Example, when you have a #define, a preprocessor would run thru an convert everything. When you look at this code, you see what everything translates into and how the compiler is optimizing things. Q. Does Swift do this?
When you declare a Bool variable, it has two potential states: true and false. When you declare Bool? (Aka Optional&lt;Bool&gt;), it has three: true, false, and nil. That’s it. The point of optionals is to allow you to more explicitly handle potential states in your code flow. The rest are shortcuts in your code to make this easier. It is a good thing to handle nil state but it can be cumbersome. When you declare Bool! (Auto-unwrapped optional), it can store three states, like Bool?, but when you use it, it automatically is treated as Bool and will crash when it contains nil unless you explicitly treat it as Bool?. Using the “!” postfix operator on an optional will achieve the same effect as originally declaring it with ! instead of ?: it will crash when not nil. Using forced syntax is generally considered “bad” because you’re saying there is an additional state you do not care about. Using the “?.” member operator (nil chaining) allows you to get members of variables without first checking if the variable is nil. If the variable is nil, you simply get nil. “x?.y” is the type of y plus the nil state: ergo Optional&lt;property type&gt;. Finally, “??” (nil coalescing operator) takes a wrapped T on the left and T on the right and gives you a T. “x?.length ?? 0” is a common usage - if your String? is nil, this expression results in 0.
This is how Optionals clicked for me: they’re just an `enum` with some Xcode sugar. An `Optional&lt;Any&gt;` has two cases: `.none` (`nil`) or `.some(Any)` (the “wrapped” value).
Thanks dude. Although the ?? paragraph broke my brain in more pieces than one.
Jesus, you typed all that on your phone? Wow, thanks dude. I really appreciate the help you guys have given me. This sub is amazing and thorough in their responses. Thanks y'all!!
Be sure to learn Guard statements. I was a little slow to pick that up when teaching myself swift. Basically unwraps everything you need for a function to use outside the statements scope and lets you handle what happens if any of it can’t be unwrapped. Where as a variable created with ‘if let’ stays in its scope.
Ah shit, now I'm getting it mixed up again. So why would I want a Guard? To quickly use a variable inside the guard's code and then after that in the code it'll still be that 'wrapped' variable? 
Exactly right. You have to send the action to one of your Kitura routes and handle it from there. If you want some data passed, you can do it via post or get, Kitura can reference those parameters from the request variable. If you really are interested in learning Kitura check out [Server Side Swift](https://www.hackingwithswift.com/store/server-side-swift) by /u/twostraws , I can really recommend that!
I need practice for teaching my junior devs. :) Out of curiosity, what is your programming background?
I haven't touched JQuery in a long time but use whatever XmlHttpRequest object you want to communicate with the server from JS: $.ajax('example.com/comment/delete/12345') { // check for whatever response you sent from the server } HTH
You left out the bit where - you get there, the cup turns out to be empty, but you have to leave the store without drinking anything.
No. The only change is where the variable can be used. if let x = thatThing{ print(x) //this works } print(x) //error, never heard of x guard let x = thatThing else{ return //didn’t get that thing } print(x) //this works outside guard’s { } 
I have the book, but he dones't have anything about deletion. hence i asked here
Try doing some simple tasks without the syntactic sugar. enum Optional&lt;T&gt; { case some(T) case none } So when you have `String?` it's really `Optional&lt;String&gt;` Make a simple console program project in Xcode and create your own enum called an `Optional2` and go through some optional practice with it. `?`, `!`, `nil`, `if let` are just short cuts added for common usages of how you would use an `optional` otherwise. var optionalString = someFunctionThatReturnsAnOptionalString() switch optionalString { case .none: break case .some(let unwrappedString): print(unwrappedString) } This is quite a bit of extra boilerplate code that is required, so a simpler version was introduced. if let unwrappedString = optionalString { print(unwrappedString) } Another shortcut is force unwrapping. enum Opt&lt;T&gt; { case some(T) case none func forceUnwrap() -&gt; T { switch self { case .none: fatalError("Force unwrapped optional.") case .some(let t): return t } } let q = Opt.some("Hello") let qForceUnwrapped = q.forceUnwrap() Swift adds a shorthand: let qForceUnwrapped = q! 
This is an awesome way to explain this.
Yes and no. You won't be able to get output from the preprocessor because, as I understand it, Swift has no preprocessor. However, you can output the code generated at various stages of the compiler by supplying the appropriate switches to `swiftc`. These switches are discussed [in this bit of the Swift documentation](https://github.com/apple/swift/blob/master/docs/DebuggingTheCompiler.rst).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apple/swift/.../**DebuggingTheCompiler.rst** (master → 4e9b91d)](https://github.com/apple/swift/blob/4e9b91d3fe5ac6758f8e49165296095526ef4bc8/docs/DebuggingTheCompiler.rst) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dqf4z0v.)^.
Apps are not any more difficult to test than any other kind of software. They require some planning, and diligence. Why don't you write a simple app and write some tests for it to get some first hand experience? 
This is correct. If you let C be responsible for assigning a value to the delegate on A, then you need to pass a reference to this delegate from A to B and then to C. It’s suggested that when you want to pass a value from a single entity to another single entity OR from multiple entities to a single entity. Otherwise, if you intend to pass a value from a single entity to multiple entities, choose to post a notification without the use of delegates.
I'll check it out and get back to you later. Thanks for the tip 
XIBs? You should switch to storyboards so you can get all those XML conflicts in the same file ;P 
OK thank you! It's hard sometimes to know if the thing you're doing is stupid or not. 
No need to pay. https://www.raywenderlich.com/136159/uicollectionview-tutorial-getting-started It's very straightforward to get something like that done. Of course CollectionViews can become tricky when you start to scratch the surface and implementing your own UI/UX. 
This has honestly been the best explanation or ELI5 of this I have read and I feel like I actually get it now. Thanks so much @hellomateyy
Ah, forgot that storyboards have their own file extension for some reason. It's been a while since I've had to use storyboards or XIBs :P
So Swift has a SIL, I wonder what the code looks like in the SIL for this test. I do remember other langs having a big boost for local vs global var, but I wouldn't have guessed 3X.
Congratz!
Check out https://www.raywenderlich.com/ he has a ton of great step by step guides for making apps.
Based on what I've read in the comments, your remaining performance issues are probably because computing the size of a string is a bit expensive. A couple of things: - Why are you calling `sizeToFit` on your label? This shouldn't be necessary and eats tons of CPU cycles right away. - Make the layout for the cells as simple as possible. Just a constant spacing to the left and right of the label. Fix the number of lines of the label to some number if possible (i.e., not be 0) and use a constant height for the whole cell. - The estimated item size is tiny. I'm pretty certain that the collection view preloads a bunch of cells that aren't visible yet, so this might cause it to load more cells than necessary. I'd set it to some realistic value; especially the height is probably constant anyway? You can even try setting it to a huge size to test if it makes a difference. - In your specific use case, cell reuse doesn't help much, because the expensive part - layouting with the the string's size - has to be done for every cell anyway. - You could cache the cell sizes. This won't help with the first scroll-through, but it'd be fast afterwards. (By this, I mean adding a constant width constraint to the whole cell after the layout has been done the first time. UITableView uses a similar technique by default). - If nothing else helps, you could do an approximate cell size by computing the number of characters * some constant, and set that as a constant. This won't look perfect obviously, but I'm sure you can get the performance up that way. I don't think this is necessary though.
It think the tip in your quote is bad. The reason why UITableView requests cells before they are displayed is so that they are ready to be displayed when scrolling! Otherwise, UITableView would call `cellForRowAtIndexPath:` before the cell is going to be displayed. By layouting cells in `tableView:willDisplayCell:forRowAtIndexPath:` you sabotage UITableView's attempts to have cells ready in time.
No, Kitura does not do that automatically, e.g. you could set up a delete route and in the stencil template in your for loop create a link that has the ID in it so Kitura knows which item you want to delete... so in the for loop you could make ``` &lt;a href="/your/route/to/delete?object={{object.id}} ```
BOOM now I've got it, thanks for the "final push" haha. 
you are awesome. thank you!
Your welcome, just trying to help out
Swift compiler generates intermediate code in AST (abstract syntax tree), SIL (Swift Intermediate Lang) and LLVM IR (LLVM Intermediate Representation), then finally Assembly code. You can get the compiler to emit all the intermediate code. See this page: https://www.accelebrate.com/blog/thinking-swift-part-ii/ Also check out this disassembler: https://www.hopperapp.com 3X performance hit is very surprising. Would be interesting to know what's the language designers thinking...
Swift has no multi-threading as a native language feature. So I don't think it deals with thread safety in the code it generate. Even if Swift does multi-thread, I don't think it would incur thread safety overhead by default. Most likely it will require something like Java's synchronized keyword.
The Swift runtime uses GCD internally to provide thread-safety guarantees when initializing/accessing static variables. I don't know if this also includes global variables.
I'm not sure I'd call a BST "abstract", at least in Swift. The Wikipedia article doesn't say it is, and the only mention of the word "abstract" in their article is where it says BST can be used to implement abstract types such as sets, multisets, and associative arrays. BSTs, though, seem quite concrete. Swift does provide abstract types such as Set and Dictionary, which may or may not be implemented with BSTs. (They probably use trees some of the time, depending on the size and type, but I've never actually checked.) Is there a task for which you specifically need a BST? I can't think of a reason I'd need one, which couldn't be handled better by more abstract containers.
[removed]
Do you know where I can read up on this? Thanks!
I’m late but I went to a boot camp, best decision I’ve made
Yes, make a subclass of UINavigationController which handles swiping and popping and assign your navigation controller that class. https://stackoverflow.com/questions/34942571/how-to-enable-back-left-swipe-gesture-in-uinavigationcontroller-after-setting-le
There is a difference in when they are called! The cellForRow may be called for every IndexPath in the tableview. The will appear only for those who will be displayed. In any case you shouldn’t do complex calculations or manipulations in any of those delegate methods. 
You can use NSArray with set capacity ?
I wonder what you're trying to achieve here. Memory efficiency? I.e. you want to be able to make an integer array of a fixed size so it never occupies more memory than what you want? If that's the case then undoubtedly you want an interface where you can create the fixed size array with a specified length, for example 64 bytes, or 128 bytes or whatever. Isn't it easiest to use [allocate](https://developer.apple.com/documentation/swift/unsafemutablepointer/2295026-allocate) and then create a struct with subscript operator? 
Sorry, as I so often do I told only half the story. I am trying to interface with an existing routine that takes a char[255] as a parameter. Swift imports this as a 255 item tuple.
What routine? I’d like to know so I can avoid it. 
Haha, that will probably be very easy for you. It’s part of IBM Language Environment for z/OS (mainframes). The reason it has this interface is because it needs to also be called by COBOL programs. COBOL ‘s native strings are fixed length.
Ugh. I haven’t touched COBOL since 1999. 
Value semantics vs. reference semantics. Protocol extensions vs. direct inheritance. Use what works for the design you’re implementing. 
This talk from WWDC15 explains this design choice very well: https://developer.apple.com/videos/wwdc/2015/?id=408 Value types (like structs) can in most cases be accessed several orders of magnitude faster than reference types (like classes). There's a nice benchmark on github, if you'd like to run it yourself: https://github.com/knguyen2708/StructVsClassPerformance Author of the benchmark claims the result was struct going 37 million times faster than class, using this benchmark of wrapping Int data type. That's a serious performance boost.
Classes are objects that other classes/functions/whatever interact with by reference, and structs are not. That's the big difference: structs are not _referenced_ at all, they are always copied, much the same way that integers or strings are. Why's that important? Say I have two variables, initialPrice and currentPrice. To start, I'll set initialPrice = 4 and, since nothing else has happened yet, currentPrice = initialPrice. Now say, later in the game, I bump up currentPrice to 8. At that point, what is the value of initialPrice? It's 4, right? Right. Anything else would be ridiculous. But say I had some other info I wanted to package into the price value, so I created a class, like so: class priceObject { var value: Int var currency: String } Then, say I do this: var initialPrice = priceObject(value: 4, currency: "USD") var currentPrice = initialPrice currentPrice.value = 8 print(initialPrice.value) Now our initial price's value is 8, because both variables are referencing the same object. That sort of behavior is great for controllers, API clients, view models, and all sorts of data structures where we want to persist some state across our programs, but it's _ridiculous_ behavior when we're trying to do something like the above. Enter structs: they look and feel a whole lot like classes, but as far as Swift is concerned they're value types just like Int and String. If the class priceObject above was instead the struct priceStruct, we would get the answer we wanted, and this is why: when you set currentPrice = initialPrice, currentPrice becomes a _new, independent instance_ of the struct, rather than becoming a _reference_ to the same class that initialPrice was referencing. There are other differences, including (I think) a slight advantage in read speed for large structs vs. large classes (since structs don't carry the same expectation that their properties can change in place (I think)), but that's the big one. This distinction is generally known as "value semantics vs. reference semantics", and there's lots of great discussion out there in the last few years, particularly by Apple and the Swift community. tl;dr: structs are copied rather than referenced whenever you write them to a new variable, so if what you're building feels like a bundle of values that's itself meant to behave as a value, make it a struct.
This may not be quite what you're talking about, but if you're talking about swiping left from the right edge to work your way back down your NavController's stack of ViewControllers, you get that behavior for free from... iOS 9 and later, I believe
Great description.
Yeah actually I want Nav controller to pop the View Controller when I swipe, how ca I enable it ?
UINavigationController has a property called interactivePopGestureRecognizer that handles the pop. I'm pretty sure it's enabled by default, so you should be able to swipe to pop already unless you have some other gesture recognizer that's blocking it. Have you tested it?
Most languages have structs, at least in the sense of primitive types. Without that performance would suck so much it's hard to convey.
A lot of good answers already, but one other aspect is that Swift has good support for functional programming paradigms. In functional programming, you don’t mutate values. Value types and not reference types support this. The implementation of structs in swift provides good support for this by protecting against accidental mutations via `mutating`.
Hey u/be_polite 26 year old here, looking to sprout into an entirely new field. I was looking at the junior iOS dev position and noticed the prerequisites... most of which I do not possess. Do you know of anything below a junior dev? Maybe internships? Paid and/or unpaid. (This would be in the New York City, NY area) Thank you!
Structs reduce the possible states your code can be in by reducing surface area/dependencies. It’s kind of like [the law of Demeter](https://en.m.wikipedia.org/wiki/Law_of_Demeter). If two places have the same object reference, they can independently mutate the object and screw things up. Do both places actually *need* the functionality of being shared? If not, each piece of code can be more independent with fewer unexpected state checks and less contention. Ask yourself why it’s good that Int is a struct and you will have your answer on when to make your own.
Non-Mobile link: https://en.wikipedia.org/wiki/Law_of_Demeter *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^126043
This is default behaviour, if it’s not working you have something blocking if.
You probably don’t need to develop a “scraper” (the term implies manually parsing through HTML). Reddit has an API ([documented here](https://www.reddit.com/dev/api/)). You should read their usage rules to make sure you rate limit and stuff like that. I don’t know if it’s good or not, but I found [this swift wrapper](https://github.com/sonsongithub/reddift) that appears to be well-documented. Don’t be afraid to interface directly with site’s APIs with HTTP libraries like Alamofire or [JustHTTP](https://github.com/JustHTTP/Just/blob/master/README.md), which is inspired by python Requests to be the simplest HTTP library possible (it’s my favorite). 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [JustHTTP/Just/.../**README.md** (master → 8cda772)](https://github.com/JustHTTP/Just/blob/8cda772de187134d9bab729e429c62a17a9e0b47/README.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dqgewv9.)^.
Your number of rows in section method returns the number of animals even if the section is for people, and your commit editing style method does not call tableView.deleteRows(at...
ok... so I replaced the count with the value of 5, but running a breakpoint it always crashes at tableView.deleteRows(at: [ip.section as IndexPath], with: UITableViewRowAnimation.automatic). what can I do?
If you delete from a table/collection but don't update the data source counts it will crash due to mismatch.
Ray Wenderlich's [swift-algorithm-club repo](https://github.com/raywenderlich/swift-algorithm-club) has Swift implementations of most of the popular algorithms and data structures, including a [binary search tree](https://github.com/raywenderlich/swift-algorithm-club/tree/master/Binary%20Search%20Tree). Check it out, see if that works for your needs!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [raywenderlich/swift-algorithm-club/.../**Binary%20Search%20Tree** (master → 2ea681c)](https://github.com/raywenderlich/swift-algorithm-club/tree/2ea681c4a1331d889ab92bc6b9d39b712c486832/Binary%20Search%20Tree) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Your number of rows method should just return the count of the underlying array for the section without any hard coded numbers. I suggest abstracting that out of the view controller so that there's less boilerplate, but for now, return the count of the array for that section, don't return only the count of one specific array when there are two or more arrays, don't return a hard coded number that represents the count of the initial array for the section, etc. Return the .count property of the array that represents the backing data for that section.
There's two kinds of programming languages I can think of which have "class" but not "struct": 1. Those that are also deprived of high performance (Python, Ruby -- I love you guys but speed isn't your strong suit) 2. Those that have had a million man-hours thrown at developing their runtime, in order to make it go acceptably fast (JVM, ECMAscript) The Java 10 JVM plans to add value types, so I might have to remove it from this list soon. Even after 25 years of optimization, they *still* decided they needed value types for performance. ECMAscript needs to remain 100% backwards compatible (it's part programming language, part development environment, part portable VM, and part standard runtime), so it changes very slowly and isn't going to get "struct" any time soon. The people who really want it to go fast have come up with [a clever extension that allows less memory indirection](https://en.wikipedia.org/wiki/Asm.js) there, too. TL;DR: [FTSE](https://en.wikipedia.org/wiki/Fundamental_theorem_of_software_engineering)
You don't seem to understand how web applications are built, brother. It's not a simple question, you need to learn how to do that no matter which the language then ask how to use kitura.
I glanced at the last one, and they're hiring a "Junior IOS Developer" with "2+ years" of experience, and they've got *23* separate requirements. Are they insane? They're looking for someone with experience in all of Apple's tools, and hopefully Android, and third-party libraries, and third-party web services, at all levels of the stack, and has shipped "applications from scratch" -- "the more apps the better". Oh, and you'll have to work on "many types of apps", and "worry about [it] day and night". This means either: - They're setting the bar ridiculously high so that they never have to hire anyone ("See boss? We made the job posting like you said, and zero qualified people applied") - They're just dumping their entire architecture on there (because they're clueless enough to think it's a good idea), and will end up taking the first person who can bullshit his way well enough through the interview process (because statistically, it's men who do this) - They already know exactly who they're going to hire, so they turned his resume into a list of requirements, and are just going through the motions of a public hiring process so it doesn't look like nepotism What is the purpose of allowing such job postings? How exactly was this list "curated"?
yeah, but i'm learning slowly and thanks to the guys who replied I learned new things. also, I would really prefer if you help me learn by adding something useful instead of just typing what's on your mind.
Say you have this code: let price1 = coinPrice('BTC') let price2 = coinPrice('FAKE') If your function returns a number then you may get 0.0 as the price of FakeCoin and that wouldn't be ok. But if you make the return value optional then you can return null values when there is no price for that coin. if let price1 = coinPrice('BTC') { print("BTC Price", price1) } if let price2 = coinPrice('FAKE') { print("FAKE Price", price1) } Optional means it may or may not have a value so you should check/unwrap if you want to validate first then use it.
Read the other comment before you get discouraged. It sounds like that posting was mostly BS.
With a quick search, I found this from another similar post on reddit: https://github.com/tid-kijyun/Swift-HTML-Parser Basically just import that into your project and it'll scrape what's needed using a URLSession task. The example should help get you going.
I was about to create a script in python some days ago, but I decided to try with Swift. Python still has more packages available, but I think I was more productive using Swift. 
I agree, that's pretty ludicrous. With those qualifications, you'd be a Senior iOS Engineer/Developer (disregarding the 2+ years, knowing all of Apple's tools takes longer than that imo). There's either an agenda involved, or they don't know what the process is actually about.
This. This book changed my life 20 years into my career as a developer.
It's really hard to find information on this that's written down, but this is a start. https://bugs.swift.org/browse/SR-1042
HTML is only a subset of XML. So any xml parser can do you the favor. For the most easy parsing try to find stuff via xpath 
It’s a new circlejerk that developed with Swift so people can raise crumble eyebrows and feel superior when someone...*gasp*...still uses classes for some reason in Swift. Browse some highly starred open source GitHub projects or some Swift blog posts and you’ll find such ridiculously wrong uses of structs you want to rip your eyes out and throw em on the floor cuz you can’t find the garbage can. Structs having reference type members is a common occurrence, I don’t even know how people come up with that shit. In the early days of Swift 2 custom KVO wrappers were a huge thing and all those fucks modeled that shit with structs. Wtf. Makes total sense for a value type to copy a reference to the fucking observer every time that shit is assigned. Fuck you. I’m not arguing against structs here. I’m arguing against the annoying propaganda Swift circle jerk that started developing because *le swifty*. No. Everything has its place. Learn, understand, use. Don’t follow some asshole blog post because they said so. Structs have heir place, classes have their place. Over and out. 
I've used [SwifSoup](https://github.com/scinfu/SwiftSoup) in the past. It makes manipulating the HTML pretty easy.
Swift can do anything any other language can do. 
It's true Swift can compute any value that is computable, but it's equal to other languages only in the [Turing](https://en.wikipedia.org/wiki/Turing_tarpit) sense. Audio plugins have [extremely strict latency requirements](http://www.rossbencina.com/code/real-time-audio-programming-101-time-waits-for-nothing), and Swift (like Objective-C) is not built for realtime work. [Here's Apple's tips](https://developer.apple.com/library/content/qa/qa1467/_index.html) for audio programming. No lock acquisition, no heap allocation, no BSD calls. Do you know which parts of the Swift standard library might allocate memory, or call a BSD function? Me, neither. Is there a way to write Swift that makes all the guarantees needed for audio plugins? Possibly ... but it's not going to be easier than just writing C. The interfaces you're targeting will all be C (or maybe C++), anyway. Sorry, bananapatata. Audio plugins are one of the few areas where you just have to bite the bullet and use C.
What you are describing is called chaining. Here is a super contrived example of delegate chaining. protocol Delegate { func passDataBack(data: Data) } struct A: Delegate { var b: B? init() { b = B(delegate: self) } func passDataBack(data: Data) { print("Got Data: \(data)") } } struct B: Delegate { var delegate: Delegate? var c: C? init(delegate: Delegate? = nil) { self.delegate = delegate self.c = C(delegate: delegate) } func passDataBack(data: Data) { print("Passing along Data") self.delegate?.passDataBack(data: data) } } struct C { var delegate: Delegate? let data: Data = "This is my data".data(using: .utf8)! init(delegate: Delegate? = nil) { self.delegate = delegate } func passData() { self.delegate?.passDataBack(data: self.data) } } let a = A() a.b!.c?.passData() In this code `B` acts as the `Delegate` for `C`, and just passes whatever it gets up the chain to it's own `Delegate` `A`. So `C` knows nothing about `A` just that it might have a delegate and if it does it should call the `passDataBack` method on it's delegate. You can slap this code in a playground an see what it's doing. By using delegates you aren't linking classes/structs together you are telling a given object that it has access to another object that implements a specific set of methods (the protocol). This way `C` could care less if it's `Delegate` object is `A` or `B` or anything else, as long as the object implements the method `passDataBack` `C` is happy as can be. And `C` doesn't give a crap what it's `Delegate` does with the data once it passes it on. It's not `C`'s responsibility, `C` is just responsible for sending that data to the `Delegate` object.
I did a version of this in swift but I just had a xml feed, but html isn’t that much different then html.
Thank you for this! Although I got that issue figured out he goes point for point here on all the stuff I was stuck on. 
Audio Units can't completely be written in swift. See the other posts for restrictions. I've been working on audio units for over a year (AUv3) and it's an unfortunate hodge-podge of Swift, C++ and Objective C. I hope that Apple figures out how to present an API that's less unwieldy, but right now it kinda sucks. 
So it appears that if I have an imported C struct it has a built in init with no parameters. I can just to an extension with my own init (with my String parameter), where I just have self.init() followed by my code and it works fine. Interesting. Can't explain it, but hey it works, so I'm happy.
I would recommend you check out Audiokit https://github.com/AudioKit/AudioKit. Although this lib doesn’t help you actually export audio units to use in Logic, it will give you an idea of what to expect when working with audio. This lib is the best representation I know of that provides a sexy swift API to use. You will notice that under the covers, there is C++ and C and as the others stated, is unavoidable when working with audio. In terms of building actual audio units however the library you mentioned JUCE is the way to go afaik. It isn’t trivial though unfortunately.
Seriously? Not knowing CharacterSet? Fairly over the top don't you think? I've used it quite a bit and have ran into a lot of issues using it previously so it's clearly not the ONLY way to do it. Take for example this method that takes a string and returns a string: func parse(_ string: String) -&gt; String { let vowelsCharacterSet = CharacterSet(charactersIn: "aeiouy") return string.trimmingCharacters(in: vowelsCharacterSet) } if you call parse("why") it works 100% fine and returns "wh" as expected. However, the second that you do something like "why1", it returns "why1". Hell you could even use filter on the string to go that route. Even I learned something in here about NSRegularExpressions with /u/Naxum providing their answer which is pretty great and held up to passing it symbols and numbers and returning the correct information. I know (moreso hope) that you were speaking in a general manner, but these types of scenarios are about finding out how the candidate comes to a solution and how they handle critiques and finding edge cases in certain scenarios. Not exactly about if they know ONE specific piece of the language. If that's how you think in terms of evaluating candidates, one would hope that you're not in charge of such things for whatever company you may be working for because that's just plain silliness.
This is a very good description. The only thing I think should be pointed out is that structs use a copy on write mechanism for optimization. When you set currentPrice = initialPrice, both will actually be pointing to the same instance. As soon as you set currentPrice.value, it will be copied. 
Scrapy?
Many structs in the standard library do copy on write, but it’s not inherent to structs, it’s something those types had to implement (they do it by wrapping a reference type, and copying in mutating methods if the wrapped object’s reference count is &gt;1). It’s also not always a win; depends on the relative cost of copying vs allocating and refcounting.
I couldn't find one on the Internet by searching, so I wrote one. I was heavily inspired by https://gist.github.com/devxoul/a1e6822def36f75d0bc5
The script was not a scrapy, but I would definitely give a try with Swift because you don't require anything fancy, just some HTTP requests and parsing. You could also try to do a quick benchmark between Swift and other approaches, if you are concerned with performance 
[removed]
This answer doesn't particularly answer the question. Although yes, you could write audio plugins in swift - to do it in a way that is fast enough to satisfy real world requirements of audio processing would require discarding all the type safety and value types that make Swift "Swifty". In doing so you would end up writing code that is not only barely readable, but you would be unable to utilise the previous 40 years of open-source example signal processing code that is a staple of DSP engineering.
use view and tap gesture, to judge the direction 
Not directly with a UIButton. I suggest creating a custom control by extending UIControl. 
I did a game that had a controller button that worked like that. One quick-n-dirty might be to have a button with 4 clear buttons over it. I'm pretty sure there's game code out there that does this well. It was so many years ago that I don't even remember what 3rd party tool I used. It was a 2D game from RayW's tutorial from 2010. The reason for suggesting you look at game code is that IIRC, you rest your thumb and then just rotate the thumb around. I'm sure you could put timers and such so that you track time and movement so that you can customize the behavior, but that could be a long journey. The codes out there somewhere, but if your needs aren't that great... I'd start with a shape and 4 sections with each having a touch sensor. You can do one and calc the section by tracking the touch. I'd have maybe two timers, one for how long up, another for how long down. You can store a path in an array and then check if they are doing certain gestures the you want to notice.
I happen to be doing something not dissimilar at the moment. You can subclass some UIView (for instance: in my case another UIButton) and add buttons programmatically as subviews self.addSubview(yourButton). Just define the each button's position with the initialiser that takes a CGRect. Then you can just call addTarget(self, action:, for:) on each button to select a function to execute in response. The image itself I've set into a CALayer and added that as a sublayer of the view.
I saw a video just about a week ago about this. Someone correct me if I'm wrong... A struct is on the stack, a class is on the heap. Big speed difference. Something about Big O or Big N and the cost of the number of iterations. Someone else will have to explain all that, but, the speed for a large number of iterations is the same as a small number of iterations. I haven't tested it, but if true, that's a big difference. Another issue (IMO) is that if you're making copies of things and passing them around, that has to have a toll on memory... Nothing's free, making a copy of a class might be expensive. IDK what making a copy means, you have instant vars, you have methods, is it a deep copy or a shallow copy... IDK... but there has to be a cost.
or 4 transparent buttons
Thank you for your very late opinion. FWIW, I was a hiring manager at a big 4 for a few years about a decade ago. I taught CS at a state university for over a decade as adjunct professor. I was chief technologist at a dotcom focused on language translation and am somewhat intimateIy acquainted with the complexities of Unicode as well as many of the legacy character sets/encodings. I am very involved in hiring at the firm I work for now as a principal engineer doing mostly IoT and ML work. So I don't really need you to lecture me about what makes a good candidate. NSCharacterSet isn't part of Objective C or Swift. Its a library class specifically designed to make dealing with unicode easier and its part of the Cocoa platform. It operates at O(1) time vs the O(&lt;size of search set&gt;) time for the naive solutions put forth here so if the amount of text to process is non-trivial, it is far and away the best solution. I would also expect you to know WHY NSCharacterSet is fast. If I'm hiring a developer, I will expect them to know the basic core library. I would also nail someone for writing their own sort rather than use available library sorting methods - for instance qsort if it were a C position. Writing your own half baked and likely buggy solution, when there is a good, tested. optimized library solution available, is pretty much a cardinal sin in my book. I will almost certainly pass over you if I'm looking for a senior developer. Also, trimming isn't the appropriate call (and y isn't a real vowel but whatever). The Objective C solution would look like: NSString* s = @"Reneé wants to listen to Motörhead and eat jalepeños on the trip to São Gonçalo"; NSCharacterSet *vowels = [NSCharacterSet characterSetWithCharactersInString:@"aeiouAEIOUåéîöüäéÉáÁ..."]; s = [[s componentsSeparatedByCharactersInSet: vowels] componentsJoinedByString: @""]; You can translate that to whatever Swift looks like this week. I don't use it as I mostly work with IoT and ML libs in C++ and Swift's C++ story is pretty much ass.
As someone who did a project with audiokit in high school as part of my first app made with swift, it's quite user friendly
because button's touch area is rectangle, if button close together, 4 buttons is hardly dealing touch direction correctly
No lecturing here, but your response is exactly what I expected. Hope ya have a great day!
So happy I didn’t disappoint you
[removed]
Try this tutorial: https://www.raywenderlich.com/164608/uicollectionview-custom-layout-tutorial-pinterest-2 Should do what you need.
I'll check it out! 
Wait, so your saying that none of my customers structs CoW?
This is the route I am considering going right now
The runtime check is clearly more directly expressing semantics. Is it worth the cost though? Hard to say. Anecdotally, back when I worked on WebKit I was able to get a significant performance win by using a flag just like this to avoid C++ virtual dispatch. The decision to do that was driven by performance profiling though, I wouldn’t have done it without evidence of a problem.
no, the building collapses and the dream sequence starts over again
Yeah, okay. So basically, use it by default since it's more comprehensible, until you explicitly need to eliminate that overhead? That's perfectly reasonable, more or less what I expected. I just wanted to make sure there weren't any major drawbacks to either method that I may have been missing. Thanks (:
 maybe just start by searching how to build a simple list or table apps, something with an add button that pushes over to the next view controller, then you can add info and picture... as far as actually scanning the pics, you're probably going to need some NoSQL 
Sorry, not scanning pictures. I guess I misstyped. Just taking pictures. I guess its more about linking the data on the second VC to the picture so that in the album the user can just tap on it to filter out the pics. 
Short answer : no. Long answer: no, protocols don’t eliminate the need for subclassing. 
Lol. Well then how do Go and Rust get away with having only protocols?
Technically, you could emulate a class hierarchy using struct types, protocols, and protocol extensions, but the benefits would be dubious and the work significant.
Brainfuck could eliminate the need for *all* of Swift's features ... but it would be painful to use, and require everybody to rewrite all of their programs. Can you explain exactly what you mean? Somebody writes class A with method M. I want to subclass it, to add method M2. How do you want that to work?
They're not Swift. Now imagine using `UIViewController` without subclassing. Plus you'll have to write a shitload of extra code if you ever wanted to provide default implementations. You also forget default stored properties. I won't speak about genericity since I don't want to use curse words.
Rust doesn't have classes, so nothing is being lost. They're not removing it. It's like asking why C doesn't need inheritance. It's not a necessary feature for computation. It does, however, make many things easier, and virtually all Swift programs are built on it.
I guess that was a dumb question. I'm just not familiar with those languages, I guess. Thanks for clarifying (:
Two big issues that protocols can’t solve is stored properties and lifecycle functions. Extensions can’t hold stored properties. In general, I try to avoid adding stored properties anyway in favor of computed properties, but sometimes you just can’t avoid it. Also, extensions can’t modify any existing functions in a class. This means there is no way to add a call into viewDidLoad or awakeFromNib from an extension. Instead, I try to take a more balanced approach. Subclass once to add stored properties and to make calls in base functions. For example: ‘’’ class MyViewController: UIViewController { public var someIDNeededForSomeProtocol: String? override func viewDidLoad() { super.viewDidLoad() (self as? SomeProtocol)?.callSomeFunc() } } protocol SomeProtocol { var someIDNeededForProtocol: String? { get set } func callSomeFunc() } extension MyViewController: SomeProtocol { public func callSomeFunc() { print(“you called some function! Your id is: \(someIDNeededForProtocol ?? “ID is nil...”)”) } } ‘’’ The major pitfall to this strategy is readability. someIDNeededForProtocol is not connected with the protocol it is needed for, which can make the code hard to follow. Same goes for the function calls. One way to help this is to break the protocol up. Separate all stored properties into a separate protocol that your base class conforms to. This should improve local reasoning. This solution isn’t perfect, and I am definitely open to hearing alternate strategies, but it definitely helps stop your code from getting too vertical (OOP) or horizontal (POP)
I guess it is hard to imagine that. I see your point.
There's the answer I was looking for.
&gt;it definitely helps stop your code from getting too vertical (OOP) or horizontal (POP) I like that analogy a lot, it's very elegant way to describe how OOP and POP expand classes. So perhaps finding a balance between expanding classes vertically or horizontally would maximize the best of both paradigms.
That presupposes that you want to subclass it, which, like I said, I want to know can be avoided altogether using other constructs in the POP paradigm.
Can you explain a little more on this? How can I use view and tap gestures to make a functional dpad?
As with every performance problem: you profiled it, right? What kind of numbers are you seeing? I wrote test programs to try both ways, a million times, and on my 10-year-old Mac, doing the "is" check took around 100ns, and the .flag check took around 50ns. (With classes -- structs are a bit faster, but the difference between them is about the same.) I bet it's at least double that speed on newer computers. Wolfram Alpha helpfully tells me that the difference between these times is how long it takes light to travel 15 meters. There's at least 15 meters of electrical/optical distance between my CPU and my eyeballs, so you're suggesting my CPU needs to be already at work on the next protocol test before the photons of the first one have reached me. To be contrarian, I say: There's no way that saving a few nanoseconds at runtime is worth more than storing an extra word for every protocol instance, and worth the complexity of needing a redundant copy of what the compiler already has. And if you get to a point where this time is significant, there going to be other parts of your program which will still be much more significant, anyway. 
OK, I still don't understand the question, then. You don't *need* classes or protocols at all.
There are some really major differences beneath the superficial (and by that I mean the value vs. reference semantics) when it comes to actually dispatching the methods and properties contained ins classes, structures, protocols and their extensions. Many of the [WWDC lectures](https://developer.apple.com/videos/play/wwdc2015/408) from past years have been really pushing us to adopt protocols and structures, but in my experience, you have to be really careful at the planning stages to determine which of these is the proper course. [Here](https://team.goodeggs.com/overriding-swift-protocol-extension-default-implementations-d005a4428bda) are some [major issues](https://nomothetis.svbtle.com/the-ghost-of-swift-bugs-future) that [can arise](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001125.html) when you are using [protocols like classes](https://oleb.net/blog/2016/06/kevin-ballard-swift-dispatch/).
There is one case where it might be justified: adapting pseudo-OOP libraries like GTK+, where everything is a pointer imported to Swift as a value type.
Classes in Swift are almost entirely a backwards compatibility feature. That said: Reference types are needed sometimes for performance and for centrality reasons. This is *especially true* when dealing with a real world resource like a screen, or a printer, or a hard disk where you literally cannot make "copies" of it in any way that makes sense. Reference types in Swift are implemented with classes, so you will need classes there, and occasionally, subclasses when the protocols get hierarchical. 
That's not what the question was about, though. Classes are fine, my question was about subclassing vs adopting protocols, not reference vs value types.
RemindMe! 2 days
I will be messaging you on [**2017-12-01 19:51:38 UTC**](http://www.wolframalpha.com/input/?i=2017-12-01 19:51:38 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/swift/comments/7gg2ru/delegates_v_segues_for_sending_information/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/swift/comments/7gg2ru/delegates_v_segues_for_sending_information/]%0A%0ARemindMe! 2 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
The question you need to ask yourself is, "what would the benefit be of doing this?" 
In my opinion it helps to think about subclassing as a way of sharing code. So you've got three things that basically do the same but then enhance it? You can share the code with a base class. I know it's a weird and nonstandard way of thinking about super/subclasses, but it helps me. 
&gt; subclasses when the protocols get hierarchical. Apologies if that seemed like "all background and no answer" You can model these (reference requiring) objects and create software without class based types. However, in Swift, class based types, and the subclasses of those types, will usually be more natural looking than the prototype based classes that are the alternative when there are hierarchies of these objects. The alternative to Subclassing looks like a bunch of closure methods on an object which are replaced by a builder function based on the "type" of the object being constructed. When you have a hierarchal system, you will overwrite those closures, or, if you're going really nuts, you will pass them into the replacement, and supplant them while giving the option to call them, basically 100% modeling subclassing from a functional standpoint...while being more dynamic at the same time. It's not the worst thing ever, but it can be harder on the Swift compiler/Xcode editor than just using some subclasses. 
From my understanding, there are a couple reasons why I use delegate/protocol pattern vs segues. The simple answer is when you can’t use segues, use delegate/protocol. The view controller lifecycle is important to understand here. When segueing to another view controller (let’s call it bVC), you have potential to “stack” it on top of the current VC (let’s call it aVC). So you usually dismiss the segued-to VC (bVC) to get back to the original. In other words, you don’t segue again to the original VC (aVC) because it could stack a copy of aVC on top of the segued-to VC (bVC). This means you might have a three stack: aVC-&gt;bVC-&gt;aVC. I’m explaining all of this because the question then becomes: how do I pass information from bVC to aVC if it’s stacked and I have no reference of aVC while I’m in bVC? Perform segue is no good here because you need to dismiss bVC so you don’t start stacking multiple copies of VCs on top of one another. This is where delegate/protocol can assist you. The other reason that I know of is to ensure developers use certain methods to make something work. Table view is a good example: you want to use a table view, but you gotta lay down some ground rules so it knows what you want it to look like, right? How many sections, rows, etc...these are required protocol methods that you need to implement if you want to use a table view. Well, I hope I helped. That’s my basic understanding...someone else will probably come along and explain it better in this thread, but I tried. :)
Typically when ViewController A is pushing to a new ViewController B, you should override the prepareForSegue method and give it data via public properties. If VC B needs to pass data back to VC A, it should do so via the delegate pattern, using protocols. This is because A knows the type of B but B does not know who instantiated it. To extend on this, you could have B implement a protocol so A can pass in parameters to a protocoled object instead of B’s explicit type. 
If you are going from a parent view controller to a child view controller it is recommended to pass the data via a segue, this will allow an easier transition of data from one view controller to the next view controller. Although you could set up a delegate and send the information the same way (not really standard practice from what I have seen from other developers.) If you are using information from a child view controller to add data to a parent view controller or if you want to decouple the communication between the two view controllers, it is recommended to use a delegate. I have used delegates in the past when completing a transaction in a view controller and updating information at a view controller on down the chain or when communicating information from a custom table view cell or collection view cell to the parent view controller. The benefits for delegation is to decouple the View Controllers, but IMO passing data from view controller to view controller via segues doesn't seem to be bad practice.
That can be achieved via protocol extensions though.
You can subclass classes that implement a protocol.
I just wrote the code on my phone. it may not compile, but the idea is same. The pseudo code should be: ```swift func dealGesture(gesture: UITapGesture) { // if need to deal touchdown and touchup, replace tapgesture to longpressGesture let location = gesture.location(inView: view) let size = view.bounds.size let centerOffset = CGPoint(x: location.x - size.width/2, y:location.y - size.height / 2) if abs(centerOffset.y) &gt; abs(centerOffset.x) { // vertical if centerOffset.y &gt; 5 { pressDown() } else if centerOffset.y &lt; -5 { pressUp() } // press center } else { // horizontal if centerOffset.x &gt; 5 { pressRight() } else if centerOffset.y &lt; -5 { pressLeft() } // press center } } ```
The first is what you use to pass to the function, the second is what you use inside the function. func foo(withString str: String) { print(str) } foo(withString: "hello")
`func myFunction(_ foo: Int, bar: Double, baz quux: String)` is a function that gets called like this: `myFunction(1, bar: 3.1415, baz: "Hello!")`; inside the definition of `myFunction`, the first argument is called `foo`, the second bar, and the third `quux`. The full name of the function is `myFunction(_:bar:baz)`.
This makes a lot of sense! Thanks for the help!
&gt; The first is what you use to pass to the function, the second is what you use inside the function. That makes sense. Thanks!
I think it's mostly useful for making it easier to read methods at the calling site. ``` setStyle(for: indexPath) ``` reads more naturally than: ``` setStyle(indexPath: indexPath) ``` `UITableView` is its own strange beast (if not quiet unique) - I suspect that it's not really how one would design a real modern Swift API for that component, but it's a legacy of the Objective-C/Swift Cocoa conversion - the swift interface has a lot of the baggage of the original Obj-C API.
You should watch the protocol oriented programming talk from WWDC. I’m not saying it’ll change your mind but it’s a great talk. 
I've seen it. I wasn't saying that POP is bad, I'm saying it's not meant to do the same things as OOP in the same way. It's its own beast. 
Thanks for the replies. Am I right In my understanding from this thread to use segues when going from parent to child and delegates when going from child to parent?
the protocol sits outside the class, so it can be used anywhere. if you instantiate the delegate in View Controller C, something like (somethingDelegate:DelegateFromSomewhere?) then you can pass the values back to A if you dismiss the view controller form C to A 
One thing to keep in mind with the argument labels, is the Objective-C legacy. A big part of what you are seeing with these UITableView delegate method signatures stems from Objective-C style method naming. Here's an interesting read on the subject which might answer some of your questions (or at least shed some light on these really verbose UIKit/AppKit function names that made it into Swift): http://ericasadun.com/2016/02/09/the-trouble-with-argument-labels-some-thoughts/
The really painful thing is that RAM. 4GB is seriously cramped. Fortunately, your model can handle four 8GB 1333 MHz PC3-10600 DDR3 SO-DIMMs, for a total maximum of 32GB.
Really? Apple support had told me 16GB was the max for my model. Do you know where I can get some good RAM, to at least bring it to 8 or 16? 
Officially, 16GB is the maximum, but 32GB has been shown to be the real maximum. As far as RAM goes, any reputable seller should be able to provide you with modules in any size you like, and while I have not bought from them myself, I do like the look of macsales.com, they put in the effort to have a half-decent site.
What are you going to be developing? The RAM is a little tight, but your Mac has a modern virtual memory system, and RAM will be sent to the HDD. Just don't try to run Photoshop and iTunes and browse the web with 100 open tabs at the same time. And if you don't have to run the iOS simulator, the RAM isn't even a limitation (Swift for Mac, or Swift for iOS/other?) 
Thanks! So would you say 32GB is a must for Swift development, or since I'm just using it for education/small projects, 8-16GB would work? It is an old computer after all, though I suppose there's nothing stopping me from removing the RAM if it craps out. 
My Macbook Pro has 16GB and I never feel the pinch, but if I could upgrade the RAM I would. 
I'll be trying to further develop my programming skills, which are currently fairly basic, with the end goal of hopefully being able to develop my own iOS and Mac OS apps. 
Slap some more RAM in there.
I highly suggest checking out the Mac app/App Store app Mactracker It has all the updated info on everything apple. It's a small program / app. You don't need 32GB at all. You'd be FINE with 8, but 16gb would be cool. Or if you add 2 sticks of 8 to your already existing 2, you'll be at 20gb. Amazon is good for ram, as they have reviews and questions that you need to ask already answered. Last suggestion for now: After you replace whatever, BACK UP your stuff, MAKE an Apple Store appt, BRING your iMac in, and TELL them you want nothing but a clean install on the most recent OS
That'll be a tough one. I live like 2+ hours away from the nearest Apple Store, and I don't drive haha. Is it easy enough to do with a disc or USB?
Absolutely a great idea. Fuck the store 2 hours away. You'll be fine to make a USB installer! So many tutorials online and much easier to do yourself 
Thanks for the advice!
At least 8 GB of RAM.
When I upgraded mine to over 16 GB using OWC RAM, performance nosedived. FYI.
OWC, but bring it to 16. http://macsales.com
8gb of ram is enough for one or two project opened in Xcode, and some little Sketch design editing. Hdd is an important speed factor, drop your mechanical drive and go for an SSD. 
Actual development isn’t too resource intensive. It’s not my main machine, but I have a 2011 MBP that I put a SSD and 8GB of ram in and it’s more than sufficient.
It's not really the best idea. Subclassing UIControl or adding UITapGestureRecognizer to created view is better IMO
This is the best pattern I've found in years and sums it all. https://www.objc.io/images/issue-7/communication-patterns-flow-chart-56d22932.png
What is notification, and block please? Sorry for my ignorance. I only know of delegates and segues 
[removed]
The Xcode needed to run Swift is resource intensive. My personal Mac is mid 14, 8gb, 2.4ghz, 128 ssd. My work Mac mini is mid 14, 8gb, 1.4ghz, 512 ssd. My work Mac cries like hell. But I still do android development better than some most good windows laptop owned by my co workers. But Xcode is just shit with need of power. 
I’d say go for 16 and spent the extra money on an SSD. I develop on a MacBook with 8 gigs of RAM and while I wouldn’t mind more it’s perfectly usable. 
For perspective, I develop swift on a Raspberry Pi 3. For small projects and just tinkering with the language it’s perfectly adequate. No Xcode of course, so command line builds and emacs. It’s not pretty but does what I need it to do. I also work on some smaller iOS projects on a MacBook (the one-port model, 4GB) using Xcode. Same thing, fine for those small projects but I wouldn’t do any game development or other heavy lifting on it.
There are a several ways to implement MVVM to your iOS project. In my experience, i can suggest you something about your question: 1. You can override many init() methods, but i think you should treat your model as property (var). E.g: let viewModel.model = Some_Model(). 2. Let's think about API first, what is it? Is it a UIView? Of course not. Is it a model? I do not think so. Because MVVM treat the UIViewController as the View, so we should put API handling on MVVM. 3. The number of ViewModels depend on the problem that you are dealing with. To me, i used to create CellViewModel in case of UITableViewCell / CollectionViewCell.
&gt; But the editActionsForRowAtIndexPath` part I don't understand. Why is that there. What is it? Swift inherits, in part, from Objective-C (and thus Smalltalk) where all arguments are "named" (and really part of the function name). Having all parameters named is pretty neat *but* it has a large drawback: the name with which you *call* a parameter (externally) and the name with which you *use* the parameter (internally) are the same, which can make one of them less easy to understand. Swift's argument labels solve this issue by uncoupling the "external" and "internal" names of parameters, so you can have both a name which is very clear when *calling* the function and a name which is convenient when *implementing* the function (where the context is significantly more restricted and self-descriptive names may be less necessary). Swift further builds on that to allow *positional* parameters which Obj-C didn't really have: if you *remove* the label of a parameter (by using `_` as a label), there's no "external name". That's what you see for setViewController &gt; There's a function setView, that takes 3 args, direction, animated and completion? What's the underscore at the front for? It takes 4 arguments, but the first one is positional (= similar to a regular C or Ruby parameter), which makes sense because the method name tells you what the first parameter likely is (an array of ViewControllers), setViewControllers(viewControllers: [vc], direction: .forward, animated: true) would look pretty redundant, the `_` label lets you write: setViewControllers([vc], direction: .forward, animated: true)
That’s correct
You’ll need to post some code to be sure, but UDP datagrams have a max size and the API will error if you attempt to overstuff the data. -1 is the generic return to indicate failure, and it looks like SwiftSocket doesn’t bubble up the system error messages. So the standard idiom is to loop over your data and send a bunch of fixed length datagrams, n-bytes at a time. You said you are sending a file. If one of those datagrams doesn’t make it, is that ok? I’m guessing not. TCP offers reliable delivery for exactly this problem. Hope that helps. 
1. Highly subjective. Whatever fits your needs the best. 2. Previously I would have said the ViewModel class, but now I'm leaning towards another class that handles API interactions, that would be used by the ViewModel class. 3. If you don't need a view model, don't create one. If you think having one for a UITableViewCell would be handy, then do it. It's very situation dependent. Don't be caught in the mindset of "I"m using MVVM now so I have to do it exactly how I saw others do it." MVVM isn't perfect either and if you wanna make the most of it, expand it to fit your needs. (For example, I've added the use of a FlowController to my MVVM app.)
The issue is that the tutorial isn’t showing you the network response that returns the data you’re looking for. [This](https://code.bradymower.com/swift-3-apis-network-requests-json-getting-the-data-4aaae8a5efc0) should give you a general idea on how to make a request and use the data. Then you can parse the data with the code you’re using. 
This is the full article, I can't make it more clear than the author. https://www.objc.io/issues/7-foundation/communication-patterns/
It’s made with a UICollectionView. I don’t believe you can get this effect with a UITableView.
Definitely Collection view
Pretty sure it’s a web view since the online store via Safari has the same layout
You can get this effect with both UITableView and UICollectionView, although it would be simpler to implement with UICollectionView. 
Yepp, it couldn’t be easier just follow the instructions in the link below. You can option boot to the USB drive, erase your drive and reinstall the OS, all supported by Apple without the drive and wait. [create a MacOS USB installer](https://support.apple.com/en-us/HT201372) I also second getting an SSD in there to replace your mechanical drive. 
This isn't a direct answer, but has some good things to look through for 1. https://dzone.com/articles/how-to-achieve-ios-networking-proficiency-in-10-st I'd also check out this since it's one of the better wwdc talks, even if it's a little outdated on the swift stuff: https://developer.apple.com/videos/play/wwdc2014/229/ 
If you’re interested in learning MVVM, I highly recommend the course from cocoacasts. It uses a weather API so you can see how he handles async calls. He combines MVVM architecture with reactive programming and demonstrates the improvements for unit testing. You’ll probably benefit most if you’re already an intermediate programmer, but you can pick up on some good coding practices from this course/demo app. 
Collection view is the way to go for sure 
This is what I thought the issue was and you are right. I ended up sending pieces of the file at a time and I was able to send and receive data. I didn’t realize that TCP is more reliable. I’ll have look into it more. Is there a difference in speed?
Not necessarily. You’ll have to use Swift 3 which is comparable and easily refactored to Swift 4, just avoid using too many third party libraries unless they have clear swift 3/4 branches. You won’t be able to build specifically for the newest iPhones, but your apps will run on them. And you’ll have an appreciation for the differences in Xcode 9 when you do update (some improvements, some new issues). Heck, I spent a year developing with Xcode8 and you can too!
I’d suggest reading up on UDP vs. TCP. For data that must arrive at its destination intact you pretty much have to use TCP. UDP is really only suitable in more specialized cases like streaming video. 
Thanks!
If implemented natively, it's 99% UICollectionView. If they are cheating a bit, it's a UIWebView just showing a web page...
With a UITableView, you could have two UViews per UITableViewCell. Certainly possible. That said, there is no good reason to not use a UICollectionView
That’s true, didn’t think of that. But yes, UICollectionView would be best
Cool use of your Pi! 👍
Well then so many things I've read are wrong or misleading.
Thanks for the answers, I appreciate it.
Thanks for your answers. You're right, I think I was trying to find the golden standard of MVVM, which might not exist. I'll follow the basic rules going forward, thanks for the advice.
Getting the animation they have when changing layouts would be amazingly hard if not borderline impossible with a UITableView
&gt; func funcName(argName:Type, argName:Type) &lt;- this I totally get. But in Swift, there's stuff like func funcName(argName:Type, argLabel argName:Type) &lt;- this I don't quite understand. It just means the implementor wants a different name in the function, than the label used by the caller. &gt; But the editActionsForRowAtIndexPath` part I don't understand. Why is that there. What is it? It's an argument name. It's part of the function name. &gt; Are both of these functions called tableView? No, one is named `tableView(tableView:editActionsForRowAtIndexPath:)`, and one is named `tableView(tableView:commitEditingStyle:forRowAtIndexPath:)`. &gt; What's the underscore at the front for? It means that argument has no label. You can learn all of this by reading the [Functions chapter of the Swift book](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html).
I read that part of these book, but it wasn't clear what actually happening there. They just say: &gt; The use of argument labels can allow a function to be called in an expressive, sentence-like manner, while still providing a function body that is readable and clear in intent. Even in retrospect, it's not quite clear that a function is called with one name, and uses another name inside the function. It think it would have been clearer to show the call as well at the function block. They have: func greet(person: String, from hometown: String) -&gt; String { return "Hello \(person)! Glad you could visit from \(hometown)." } It would have been *really* helpful to include `greet(person: "John", from: "New York")` there to really make thing clear.
Thanks, I'll take a look!
A little update on this one, Swift apparently uses intrasort algorithm :)
It looks like the `_` is redundant now? Even without adding the `_` to `func addOne(x: Int, y: Int) -&gt; Int ...`, I can call it as `addOne(1, y: 2)`. If I change the function to `func addOne(_ x: Int, y: Int)...`, I get the warning `Extraneous '_' in parameter: 'x' has no keyword name`. If I call it with `addOne(x: 1, y: 2)`, instead of just a warning, I get an error `Extraneous argument label 'x' in call`. Does this mean that *ALL* function have no keyword for their first parameter, and that I never need to write the `(_ argName: ...)`? Or am I missing something?
I'm confused what you're asking. Implementing the singleton pattern with a static constant and a private init is a perfectly simple and complete solution. What's a helpfunc file and how do you use it to implement the singleton pattern?
i think OP is asking about difference between a singleton with a function and a global function doing the same thing, rather than different approaches to creating a singleton 
Well in that case, either one is valid, they both accomplish the same thing just in two different namespaces. I tend to prefer: final class Foo { static let shared = Foo() private init() {} } In the end, just go with what's most readable, as that's the most important factor.
I tend to agree. I have a few global functions but i find them hard to remember, and prefer the functions which have a namespace (not using singletons for that, if i just want a namespace i use an enum with no cases)
If you weren't getting errors then you're probably doing something wrong.
Yeah. One benefit I can think of is that intellitype is going to be a lot more useful to you if all you have to do is remember and type the name of the class, rather than having to remember the name of a global function. And I tend to always reference the singleton instance with a static constant called "shared," meaning all that I have to do is remember the name of the class that implements the singleton, and type ".shared" to get the singleton object.
It's because you defined something that you didn't make use of. 
Like I said, it’s often not an optimization. CoW requires a separate heap allocation and reference counting, which are vastly more expensive than tiny memory copies. The collections do it because they often contain a ton of data, unlike something like an Int or an Optional. Mike Ash wrote a great little article (albeit somewhat out of date now probably) on doing CoW for your own types: https://www.mikeash.com/pyblog/friday-qa-2015-04-17-lets-build-swiftarray.html TLDR: the way you do it is you put your data in a private reference type, and then call isUniquelyReferenced(&amp;hiddenReference) to check if you need to copy in each mutating method on the struct.
Very interesting. So basically I don't need it for my reference types as much as I thought I did.
 if let optionalA = optional1 { if let optionalB = optional2 { print("Both optionals unwrapped") } } That is the code that is causing your warnings (not errors, these don't break your code or stop it from compiling or anything). Xcode is trying to help you out here by telling you that you created two variables `optionalA` and `optionalB` but never used them. If you change your code to this they will go away, because I'm using the 2 variables I created with the unwrapped values. if let optionalA = optional1 { if let optionalB = optional2 { print("Both optionals unwrapped optionalA:\(optionalA), optionalB:\(optionalB)") } } The warning is just trying to draw your attention to something that you did that you may not have wanted to do. As you discovered you could rewrite as `let _ = optional1` and have the warnings disappear, they go away for this code because you've explicitly said "I don't care what the value is, I'm not going to use it" so the compiler shuts up. You could also rewrite it like so, if all you wan to do is verify that the values are not nil. if optionalA != nil { if optionalB != nil { print("Both optionals unwrapped") } }
Fun tidbit: the Swift String rewrite that’s currently in progress has something called the “small string optimization”, where the idea is to store Strings smaller than a certain length (I believe it’s currently planned to be 16 bytes) inline instead of doing CoW for them. On the ObjC side, NSString does a similar optimization via tagged pointers, where it avoids creating a reference if the string contents can be packed into 53 bits or less. Should be a nice performance boost!
a Helpfunc file is just a swift file with the functions which you can call from anywhere in the application. It's not in a class, struct or anything else. Just func login() { // do some stuff } func register() { // do some stuff } etc etc 
Oh okay, so global functions.
Nice, when is that supposed to be finished?
I’m not entirely clear on that. Certainly by Swift 5, but I’ve been following along on the draft pull request and it looks like there’s still quite a bit to get done.
Well, I guess I know the name now lol Thanks! So there really isn't any issues with either using global funcs, or singletons. It's just going to come down to readability? 
In the attributes inspector, I believe you can change the textfield style. Maybe that will help you. I'm guessing there is no textfield.layer.cornerRadius attribute. I'd make an @IBOutlet and try to see what properties a uitextfield DOES have! Or perhaps you can read the documentation for UITextField it will list all properties and attribute s you can customize Good luck!
It also helpful to know that the parameter labels are part of the function signature. You can overload function the different param label of same argument type. C++ and Java don’t have separate parameter label and argument name. So they can only overload with different argument types of function of same name. Swift full function signature consisted of both the name of the function plus its parameter labels, example: func doThis(with value: Int) The function signature is: doThis(with:) You can have another overloaded `doThis` function that takes an `Int` argument as: func doThis(over value: Int) 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/vim] [So I just spent the past 5 hours making my vim have the exact same syntax solarized colors as Xcode](https://www.reddit.com/r/vim/comments/7grci3/so_i_just_spent_the_past_5_hours_making_my_vim/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Singletons are objects. You only want to use these if you want to preserve some constant state across your entire application. If you only want to use functions in a singleton, it's really kind of a waste of a class and instance. You can use Swift top-level functions for this. Singletons are generally disfavored unless they present a specific solution to a problem, because singletons are global. What problem are you trying to solve that can't be encapsulated and communicated between loosely-coupled instances of your classes? An application's global preferences might be a good use of singletons. Maybe you want to keep track of the global application preference for, say, VT100 terminal font size. Changing this preference means resizing all of your open terminals. A single instance of a class that can notify all instances is a pretty good use case. On the other hand, using a singleton to remember that document A filename equals "untitled.txt" and document B state equals "dirty" is probably not a good use of the singleton model. 
what exactly is so different from the already existing solarized colorscheme for vim? 
I think you meant global constants, or static constants (or global funcs vs static funcs). The singleton is the pattern that either implements. Yeah, it comes down to readability, and the static constant on the singleton class is surely the more comprehensible one.
it looks like this by default
I’m trying to decide if this is awesome or sad but leaning to awesome.... I’m a vim fanboy though.
IIRC user defined attributes won't show in the storyboard, but when you run your app. Is it still not working when you run it ?
I see thank you for your reply and the explanation! 
Singleton is a pattern that can help you to keep your instance until you dispose it. Class func is similary to static func, but the point here is Class func is overridable.
It doesn’t show in the storey jars that’s right, however it doesn’t show when I run it either
Thanks. Look into it today 
I made my buttons rounded by adding an extension with a @IBInspectable. extension UIView { @IBInspectable var cornerRadius: CGFloat { get { return layer.cornerRadius } set { layer.cornerRadius = newValue layer.masksToBounds = newValue &gt; 0 } } }
Does that work with labels or just buttons? I can get buttons to round off easily with the stuff I mentioned in my first post 
Well where's the .vimrc?
This is my JSON that i am dealing with. I am on swift 3, xcode 9 { "name" : "The best", "length" : 336, "outer" : { "height" : 300, "width" : 200 } }, **I want to access "length" as well as the "width" that is within "outer" and store those values.** I am using alamofire to call the API. The important lines: if let url = URL(string: "Insert URL to API") { var urlRequest = URLRequest(url: url) } Alamofire.request(urlRequest).responseJSON { response in if let responseJSON = response.result.value { //Code to parse JSON } } [This is kind of what i want](https://stackoverflow.com/questions/39609726/swift-3-json-parsing?rq=1). But this example the data is nested within "product" while mine is not nested. I cant quite figure out how to modify it to my case, ive been looking at a lot of different examples as well
What an enormous waste of time
Should work with anything part of UIView, which include UITextField and UILabel.
Yeah I thought so but doesn’t seem to work for me. Can you confirm it works for you?
Yup just tried and it worked. Maybe there is some others settings that need to be done. Can you screenshot the Attributes Inspector, maybe i can look what is different.
Every ounce of efficiency I gain from using vim, is canceled out x10 by trying to configure it to be perfect. 
https://github.com/JayMaddenCox/vimDotFiles I keep all my config files here
meh I learned how to make vim syntax files and its much nicer to look at, win win really
If you want to present a list of items, either a Table View or a Collection View would work just fine, and their API is pretty similar, there's really no "right answer" here. My rule of thumb is that I usually go with a collection view if I want a more flexible layout (i.e. if I plan on presenting more than one item per row on larger screens, like an iPad, or if I want it to scroll horizontally instead of vertically). But like I said, their delegates/datasource being pretty similar in terms of implementation, swapping one for the other is pretty easy; I often start with a tableview and if needed, I switch to a collection view... 
Sure, but it's fun to use, so meh.
I wasn't necessarily characterizing this as a negative thing. ;)
lol, push reddit push notifications user detected.
Some are of the view that collection view will do everything a table view will do and more. One tutorial line uses the collectionview for everything and I haven't seen him use tableview yet. You can double check, a good side-by-side of what each offers, but IIRC, collectionview offers everything and more that a tableview offers. If that's the case, why bother with tableview?
Somehow this medium.com links doesn’t open on my iPhone. 
It really comes down to how you want to present the data. If you plan on displaying just a single column of data and you want it to look like a tableview, well... a tableview works just fine and you won't have to bother styling and sizing your collectionview cell like a tableview one! There is a case to be made about using the simplest solution available. You could always use labels with attributed text instead of plain text since they do everything a plain text label will do and more... but often, a plain text label is enough for what you need.
Thanks man. I’ve been meaning to do this for Typescript and really appreciate the modern example with something familiar
You know what's a waste of time? Criticizing other people's harmless, educational hobbies. Doesn't speak well of your character. You might want to reflect on that.
What did you build today?
Beggining?
I don't remember if there are different categories of tasks, but if not, then wouldn't you be putting two tasks in the same queue where one has to wait for the completion of the other? Without looking at the code, I'm guessing you have an interdependency between the two tasks. If so, you run the risk of a lock up. Why wouldn't you open a new thread for another task? You have to do some fine tuning to get threads to not lock each other up, it's really a case by case deal.
They are actually independent tasks.. each one is supposed to fetch an XML and then parse it and fill the respective View.. I copied my code and just used a different URL. They are also in different classes.. I noticed because I let the second controller print all elementnames in the xmlparserdelegate methods and the first one on parse start and parse stop.. and the element names stop just before parsing of the first. It‘s also very weird that if I don‘t print anything in the first view controller, then the second one doesn‘t print to console at all.
me too thanks
wow, that's an impressive improvement!
So they work correctly if you run only one or the other thread? Did they ever work? Your title says "suddenly stops" meaning they worked before or work for a while then stop? Can you put a tracer on them so you track where they've gone and add a time stamp so you can track how long they've been in each function? I used to do that with an NSLog. Even had a #define to control when it's on or off. You can also write it out to a file and sort it out to see where they conflict is. I would try this: 1. stop one and have it wait for the other to finish. 2. put each one on a different thread. 3. check for something they are both accessing, maybe something hidden up the line.
Why are you using ";" at the end of every line? Just a habit?
Okay, I tried to isolate the task and it seems that the parser only parses to a specific tag and then stops.. Is there anything that can suddenly abort parsing? I still suspect that the datatask which starts the parsing is somehow discontinued and so the parser stops.. 
Here is my code for making the URLSession and starting the datatask in both cases (although the one in the first viewcontroller is via GET whereas the second one uses POST): var request = URLRequest(url: URL(string: "...")!) request.httpMethod = "POST" request.setValue("application/x-www-form-urlencoded; charset=utf-8", forHTTPHeaderField: "Content-Type") request.httpBody = ("...").data(using: .utf8) let configuration = URLSessionConfiguration.default let session = URLSession(configuration: configuration, delegate: nil, delegateQueue: OperationQueue.main) let task = session.dataTask(with: request) { (data, response, error) in guard let data = data, error == nil else { print("error=\(error!)") return } if let httpStatus = response as? HTTPURLResponse, httpStatus.statusCode != 200 { print("statusCode should be 200, but is \(httpStatus.statusCode)") print("response = \(response!)") return } let parser = XMLParser.init(data: data) parser.delegate = self parser.parse() } task.resume() That is all I do but parsing stops after a few elements ):
This. My dotfiles repo has more commits than most projects I've started. :P
Now you should try emacs with vim‘s commands ;-p
 let outer = responseJSON[“outer”] as? [String:Any] let height = outer[“height”] as? Int let width = outer[“width”] as? Int print(height) print(width). I’m currently not at my desk to actually test the code but the above should work. When I get in, I’ll double check and update this post if I find any issue. 
Ya pretty much, i come from a c++ background so it’s kinda instinctive 
You have two options: 1. Hackish way: Your UITableViewCell will consist of three images. 2. Use UICollectionView, [here tutorial](https://www.raywenderlich.com/136159/uicollectionview-tutorial-getting-started)
I tried the Hackish way but still only populated the very left image . I’m try again, thanks 
Really the only valid way to do this is using a UICollectionView, not a UITableView. This allows for a lot more customisation. Along with the link /u/madiyar shared, you could take a look at [this link](https://www.raywenderlich.com/164608/uicollectionview-custom-layout-tutorial-pinterest-2), also from raywenderlich.
You can also overload based on type right? So `func doWork(x: Int, y: Int)` would be `doWork(x:y:)`, but `func doWork(x: Float, y: Float)` would *also* be `doWork(x:y:)`, correct?
I wish I could upvote this comment twice.
This may seem like a stupid question but a debug instance of the app is being launched when running the test, right? Element can’t be found can occur if the app didn’t launch
You really should convert your code to Swift 4 and use Codable and JSONDecoder. 
I haven't used Swift very long, but there's a new parser built into Swift 4, are you using or can you use that? What parser are you using and does it have any fault protection? Can you look at the raw data? If you can access the raw data directly, you can start breaking it into chunks and keep doing that till you find where it breaks. A quicker option might be to use some tool to import the data and see if there's something wrong with the data format. I'd personally see how well the new Swift 4 parser works with it because then you'll know what can cause it to break.
the app launches because it's able to type in the username, password, and click login. it fails when going from the login screen to the app's dashboard. the weird part is, this same code worked one week ago and then when I ran the tests yesterday they all failed at the dashboard
I found the problem~ the service providing the XML didn‘t use utf-8 when receiving database values and so some CDATA blocks in the response weren‘t utf-8 and the parser threw an error! They fixed it and I can now successfully parse (:
I found the problem~ the service providing the XML didn‘t use utf-8 when receiving database values and so some CDATA blocks in the response weren‘t utf-8 and the parser threw an error! They fixed it and I can now successfully parse (:
Cool!
Thank you very much for your help 😊
No Problem!
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/iosprogramming] [XCUITest can't find my ANY of my elements after logging into application](https://www.reddit.com/r/iOSProgramming/comments/7gwafn/xcuitest_cant_find_my_any_of_my_elements_after/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Yes, you can overload on type with same param labels. So both function signature is the same`doWork(x:y:)`. This is ambiguous to read. You will just have to “look further inside” the full function definition to see the difference. 
As far as I can see you are running your test with networkrequests. In which case you will have a delay. Looking for elements will timeout after 1second (which is probably less than the delay of your request AND the syncing of your app with the tests requires. You could wait for an element to appear with a timeout like this: let label = app.staticTexts["Hello, world!"] let exists = NSPredicate(format: "exists == 1") expectationForPredicate(exists, evaluatedWithObject: label, handler: nil) waitForExpectationsWithTimeout(5, handler: nil) I would advice you to create a stubserver which replaces your backend locally.
Thank you 
thanks, I'll try the timeout solution. Is there any way to increase the duration before a timeout looking for an element?
How certain are you that element you are looking for exists? Add the following on the line after the application is logged in: print(app.debugDescription) This will print out the element tree into the debugger, and confirm that there is a matching "Item" that has a (third?) cell to tap on.
I just added that line to the code, right after the "LOGIN" button was pressed. The app is paused at the dashboard screen (which shows the navbar, bar button items, etc) but the debugger only printed out things from the login screen (usernameTextField, passwordTextFIeld, Login Button) followed by printing out the wifi signal, current time, BUT NO ELEMENTS from my dashboard screen. Is this an issue in interface builder or something? Is there some things I can check to make sure everything is hooked up correctly? Thanks for this tip.
Now sprinkle that line to other areas of your test block. Maybe after your commented line. It's entirely okay to add two of those lines back to back and drop a breakpoint on the second one for debugging purposes ;) 
sorry for asking so many questions but I've been stuck on this for awhile now; I added the breakpoint and in the debugger I entered: "po navBar.value" and it returned "t = 918.93s Find the "Item" Button", does that mean it found the navBar, and it's having a hard time finding the navBar Button??
We can’t really help you without any code you’ve written and a better explanation of what you’ve tried so far and what isn’t working as you want.
Hi Luk4s0842! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/7gxcw6/released_my_first_game_for_ios_have_fun/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
That looks like a time counter in seconds. Buttons can be their own elements too, you'd need a strong understanding of how an element tree is structured to really make use of the XCTest framework. When you want to look for an existence of an element, XCTest already has something already baked in: XCUIApplication().navigationBars.element.exists Or XCUIApplication().buttons.element.exists The above returns a Bool, though specifically this element would likely always exist. You'd need to be specific in the naming of the navigation bar: XCUIApplication().navigationBars["Dashboard"].element.exists Or XCUIApplication().buttons["Back"].element.exists The quoted section is a string value of the navigation bar. I don't know what your application says, but this is where you'd need to an element tree to validate each page. Beyond this, it be helpful to organize the tests against a design pattern, the industry standard is Page Objects. 
thank you so much, this was very helpful
Try using a UICollectionView. Then you can create an IBOutlet and easily draw the layout with a function like this: func drawLayout(columns: CGFloat) { let layout = UICollectionViewFlowLayout() let imageSize = UIScreen.main.bounds.width / columns - 1 layout.itemSize = CGSize(width: imageSize, height: imageSize) layout.minimumInteritemSpacing = 1 layout.minimumLineSpacing = 1 collectionView.alwaysBounceVertical = true collectionView.collectionViewLayout = layout if #available(iOS 11.0, *) { // Used to fix UIRefreshControl in collectionView collectionView.contentInsetAdjustmentBehavior = .automatic // On iOS 11 and more specifically the iPhone X // space the collectionView correctly so the first and last sections aren't // partially covered by the navigation bar layout.sectionInsetReference = .fromSafeArea } else { self.automaticallyAdjustsScrollViewInsets = true; } } And in your viewDidLoad() simply specify the number of columns you want using `drawLayout(column: 3.0)`
Only prior to Swift 4. The first keyword used to be ignored implicitly, but that is no longer the case
Swift syntax?
Cool thank you for the advice! I think a Collection View is what I’m looking for here, then. Makes more sense to me since I want it a little more flexible with multiple items. Thanks again!
https://github.com/JayMaddenCox/vimDotFiles/blob/master/.vim/syntax/swift.vim#L37 is `T ODO` intended?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [JayMaddenCox/vimDotFiles/.../**swift.vim#L37** (master → daa2985)](https://github.com/JayMaddenCox/vimDotFiles/blob/daa2985aa22e724813a2a158a350d2a34d0efa83/.vim/syntax/swift.vim#L37) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Wow that's so cool, is it a private project or are you planning on releasing it bc it would be pretty useful for the game
Me, I just carry forward my custom color scheme based on the defaults in MetroWerks CodeWarrior around 1995.
So like this? I get a "Type 'Any' has no subscript members" errors when i try to do this. Alamofire.request(urlRequest).responseJSON {response in if let responseJSON = response.result.value { let outer = responseJSON["outer"] as? [String:Any] //Error here let height = outer["height"] as? Int let width = outer["width"] as? Int print(height) print(width) }
This all comes down to how you plan on using and supporting your code. I just did a major rewrite on a section of my code base and decide on using Class Static functions so I could basically namespace my code `Beacon.auth.login()` to send a notification that a user logged in to my backed analytics server. I could have easily just had a global function `beaconAuthLogin()`, or a singleton `Beacon.shared.auth.login()`. All 3 do the same thing. I personally chose the Class Static function over Singleton because I don't have to store any state each, of these calls is basically a pure function. I didn't choose to create a bunch of global functions because I wanted anyone coming along after me to be forced to put their beacons in the proper namespace, if it was just functions people could name them whatever they want and then discovery goes right out the window. This way people can find the beacons they want in the IDE by just typing `Beacon.` and then find the sub space `auth.` that works form them and finally the actual beacon `login()`. There is no right or wrong way of doing things like this you need to evaluate your situation and decide on what works best for it. After I was finished and started working with my solution I had a little regret that I couldn't inject a different Beacon class for testing, and instead I had to create a class variable called `testing` to prevent unit tests from sending out bogus analytics events. Not happy with having to do that, but very happy with how the subsystem is used throughout my code.
Hey thank you for your reply, and for that explanation! My app works as is right now with global functions. However, after I release it I will probably end up going down class static functions to make it easier to read. As you said anyone coming after you wanted to read the code, they wouldn't be able to read it as easy. I think the class static function is easier to read. 
He could also do this: if optionalA != nil, optionalB != nil { print("Both optionals unwrapped") } There's really no need to have two if statements for this.
You are absolutely right. I was just following his original code. Didn't want to introduce to many new concepts at once. 
Huh. I knew about and used `UICollectionViewFlowLayout` before (even implemented some fairly complicated custom features), but I had no idea you could adjust things like `minimumLineSpacing` directly on the layout object. I've always changed those with the UICollectionViewDelegateFlowLayout.
nice one mate, this has come in incredibly handy :) 
I had issues parsing JSON without using SwiftyJSON pod.
The new codable swift features are awesome. I have been able to deserialize pretty complex JSON from APIs 
Yes it is! Was more talking about before Codable when you had to write the mappings manually since there is no runtime api that could it automatically.
Checked out the repo! I’ll try it out in one of my projects!
Yup the latter could definitely be the case!
Awesome let me know what you think!
Will this be subject to change with Swift versions? That's a big issue as far as I know, since the ABI isn't stabilized yet.
Yes it will. I originally wrote it for swift 3 and the upgrade to swift 4 was not too bad. Only one change affected it. The way casting as a protocol changed. 
You should write about this! I'm curious about diving into github.com/apple/swift but have a bit too much on my plate at the moment. I'd love to find a relatively easily digestible reading on some Swift implementation details!
+1 I've gotten so good with vim and have my plugins so well set up but I'm still no where near as efficient/effective with vim as I am with Atom/Nuclide or Xcode.
Gotcha. Does it also have access to a protocol table? Reverse lookup, rather?
Yea I definitely can! I wanted to do a in depth write up if people were interested so if anyone wanted to contribute it'd be a little easier to started. 
Basically when an object is casted as a protocol its thrown in an ExistentialContainer and if the object doesnt fit there will be a pointer to the value. And now for structs before the bytes of the value they have a header with the witness table, and reference counts, similar to a class. Where in swift 3 that header did not exist.
Wow this looks very, very cool! Quick thought looking at `TypeInfo`, should `superclass` have the type `AnyClass.Type`? Since strict shave no inheritance.
It could as of now! Since `TypeInfo` encompasses enums as well my original plan was to have what ever the raw value type is for an enum go in the inheritance array, and since you can do an Int, String, etc that wouldnt work. But for now that value is always null in an enum's metadata, there's literally a `// TODO` next to it lol. [swift docs](https://github.com/apple/swift/blob/master/docs/ABI/TypeMetadata.rst#enum-metadata)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apple/swift/.../**TypeMetadata.rst#enum-metadata** (master → 14734ef)](https://github.com/apple/swift/blob/14734efb4e7755329232eb89c0290a2d775ff246/docs/ABI/TypeMetadata.rst#enum-metadata) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Interesting. Since it’s not actually “inheritance” with enums it might be better to call it out separately. But I get what you mean. Either way would work.
Yea I agree. At one point it was in its own `EnumInfo` type. But I wanted to keep it centralized. Sounds like maybe I should go back to that to keep `TypeInfo` clean.
Read up on GCD serial queues. That's pretty much what they're for.
Thanks! I was looking just for this!
Like fubarx said, GCD. Or you can use Operation Queues and add dependencies to each operation so they wait for one to finish before they fire. If you can’t figure it out, let me know. I just made a demo project messing around with threads that I could send you. 
Hmm I'm not sure whether to begin looking into GCD or Operation Queues not that you mentioned it. They both seem like they're made to achieve the same thing. 
It’s about safety, unit testing and ease of tear down. Let’s say you make some objects globally available to any part of your app through the App Delegate instance. Now you can’t tell during runtime which parts of your app have strong references to those objects, and also if they’re being mutated concurrently. If you pass objects from above, you can ensure that at tear down (say, when a user logs out of your app), there’s no shared state lingering in your app. Also, if you pass objects from above you’ll have a better time writing unit tests. If I’m a class A and I need access to class B inside my implementation if someone comes along to write unit tests for A they’re going to have a hard time mocking out B so that their unit test is isolated and can’t be affected by B potentially changing in future. If you pass B into A (say, via the initializer in A), in your unit test for A you can just pass in a mock of B. In general, singletons can be tricky and introduce uncertainty to your app because it can be hard to reason about what parts of your app access a given singleton at runtime. It might not seem like a big deal for you now if you’re working on your own app but once you join a large team anything you can do to narrow the scope in which an object can be accessed (and potentially mutated) at runtime is a good thing. 
They do. NSOperation is more high level but has more capabilities. GCD is lower level but more lightweight - on second thought, I’d highly suggest GCD for your situation. 
I jut started getting back into Swift since the release of AR kit and ML I’m excited to be back! I’m taking refresher courses on Udemy I bought for cheap. I’m also back on reddit to check out the communities to learn even more!
`DispatchGroups` will let you achieve that while letting your network calls concurrently. let group = DIspatchGroup() group.enter() make_async_request_1 { // Process response group.leave() } group.enter() make_async_request_2 { // Process response group.leave() } group.notify(queue: .main) { // This will run after both group.leave() calls are made } 
Draw a diagram of the connections between classes in your app. The more lines there are the harder it gets to work with. That’s really all there is to it. If there is no strong reason for a connection to exist then it shouldn’t. Passing it down at initialization is the logical point to do so. 
Definitely a step in the right direction. When it gets parity with Objective C, I might give it another look.
I think you are looking for r/iOSProgramming The sequence should be build, archive, submit, add testers. 
Try defining a protocol in Swift, then define another @objc protocol that inherits from the fist. Use the first in Swift for non-ObjC compatible elements, the 2nd for anything you need ObjC support. Since the OjbC protocol inherited the Swift protocol any Swift code would work with both. I'm not at my Mac, so not sure if this would work, but worth a try....
Thank you. I will post my question there. 
If this sort of pattern is common in your app, is probably best to use a promise library like PromiseKit. It uses GCD under the hood and great simplifies these types of problems.
If you don't have coworkers, or if your coworkers are happy to learn, introduce PromiseKit. Otherwise don't. I felt that getting the hang of futures and promises took quite a bit of time. 
yeah it needs to be approved for external testing to be able to select the build to release to the App Store
One example is if you decide to include some project code in an app extension. With dependency injection you’re not likely to face as many issues as if you were accessing an App Delegate
The problem is also that if I'm reading a class which has references to singletons from the AppDelegate I'll probably have no idea at first unless I go through the whole code. Passing them in on init is pretty nice because you instantly get an overview over the dependencies the class is using To ease transition, one can also use property injection: in existing classes, replace your use of the singletons with a property that has the singleton as a default value. For further reading you can also check out the Wikipedia page on [global variables](https://en.wikipedia.org/wiki/Global_variable). Singletons are essentially just global variables encapsulated by a class, and thus have the same downsides. 
1. For me this depends on the usage, but usually I initialise it with the model or model collection it is responsible for 2. Depends on the size of the app. For smaller apps with less complicated APIs (i.e. the models or model collections mostly correspond 1:1 to a REST endpoint) I do API calls inside the VM, otherwise I separate it out into classes that get used by the VM 3. Usually the granularity depends on the kind of app you are using, but in general for the apps I've worked on the VM has a collection of models. It exposes the data that is to be presented to the UIViewController (either by exposing the model directly or by having a separate "ViewData" struct). The UIViewController is then responsible for taking that array and showing it in the correct places, that is, it takes on the function of the View in the MVVM scheme
True. But I find once you get used it , they are a joy to use.
Absolutely beautiful.
'App Development with Swift' is available through iBooks for free it covers Swift and iOS app development basics . [Ray Wenderlich](https://www.raywenderlich.com) has a introductory books. [Hacking with Swift](https://www.hackingwithswift.com) is another often cited resource. I'd say there's enough in the first book I mentioned to get you going in a few weeks having gone through it myself.
Hey cool man! This reminds me of [Zewo's Reflection library](https://github.com/Zewo/Reflection). I [extended](https://github.com/Evertt/Reflection-Extensions/tree/4.0) that library with a few convenient properties on the property-info struct like `isOptional`, `isLazy` and `isInitialized` (that last one is only relevant for lazy properties). Might be nice to implement the same on your library? [Also I wrote a function which can give you a list of all the cases in an enum.](https://github.com/Evertt/Reflection-Extensions/blob/4.0/Sources/ReflectionExtensions/Functions.swift#L40)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Evertt/Reflection-Extensions/.../**Functions.swift#L40** (4.0 → 1b37ed6)](https://github.com/Evertt/Reflection-Extensions/blob/1b37ed6596a22b4d1481c5ca1326ad9412e24043/Sources/ReflectionExtensions/Functions.swift#L40) * [Evertt/Reflection-Extensions/.../**1b37ed6596a22b4d1481c5ca1326ad9412e24043** (4.0 → 1b37ed6)](https://github.com/Evertt/Reflection-Extensions/tree/1b37ed6596a22b4d1481c5ca1326ad9412e24043) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Using PromiseKit this is easy and more legible. You would have something like (Considering they could run in any order): when(fulfilled: [networkCall1(), networkCall2(), networkCall3()]) .then { result1, result2, result3 in // perform segue } If they need to run in a specific order: networkCall1() .then { result1 in // do something return networkCall2() } .then { result2 in // do something return networkCall3() } .then { result3 in // perform segue }
First of all... Do you mean objective c? Unless I'm completely noon I've never heard of objective c++. C++ and objc are two different language, I think one might be derivative of the other or of C. Anyway, yes you can. You have to expose the swift class or function by using @objc. You can Google it more to find examples. 
Yeah it does sound kind of weird, [but it exists.](https://stackoverflow.com/questions/3684112/what-is-objective-c). In short it is source code that mixes ObjC classes with C++ classes.
Yes Objective-C++ is a thing. Yes you can call C++ from Swift but you need to use Objective-C as a bridge. If your code already is in Objective-C++ then you SHOULD be able to call it from Swift.
Holycow that's so weird. Well today I learned! Op wants to call swift from objc. Since objc++ is mix of obc and c++, idk how you would go about calling swift from c++. Maybe build an adapter in objc to bridge swift? 
Swift functions have strange mangled names unless you explicitly set them. You can try with the `@_cdecl("functionName")`, `@convention(c)` or `@_silgen_name("functionName")` attributes. 
What are the benefits those people are touting for writing code instead of using Storyboard/autolayout?
If you use VFL, be sure to leverage the `options` and `metrics` parameters. The former lets you align the views in the string and the latter let’s you avoid magic numbers sprinkled everywhere. With that said, I used to be a big fan of VFL but now I’ve found that stack views have largely replaced my need for it.
I believe it lends more control, reusability and prevents merge conflicts. Regardless, I love storyboards and appreciate visualizing the layout - plus storyboard references should take away most of the issues with merge conflicts. 
I’ve heard it a couple times in different places. I just did a quick search now to find an answer and found this link. https://medium.com/@chan.henryk/storyboard-vs-programmatically-in-swift-9a65ff6aaeae I also follow some of the tutorials on the YouTube channel “Let’s build that app!” And he often starts a project by removing the storyboard completely. I think at the end of the day it is preference.
Export from C++ to Objective-C, then call the Swift code from the Objective-C code. Relevant post an hour ago: https://www.reddit.com/r/iOSProgramming/comments/7ha6z9/using_swift_code_in_an_objectivec_framework/?st=JAR0C021&amp;sh=3e51b0ea
For me it just another coin of creating apps. Storyboard it is cool and easy, but need to know as more trick as possible...
Working on a team it's a lot easier to deal with UIs in code than in IB. I find localization easier to maintain programmatically than with IB. I find it easier to reuse views created via code as well. If you ever plan on joining a large team doing iOS development it's good to be comfortable doing layouts programmatically.
You might try downloading the Xcode beta. I haven’t updated to the released version of 11.2 yet but I’ve been using the public beta with the beta Xcode for a while. 
Thanks good advice. Pretty unusual that didn’t release a compatible Xcode version along with the iOS release right?
You need Xcode beta 2. This was an early release so I guess they forgot to update Xcode first.
One thing you could do is make your ui elements lazy computed variables. That way you can separate out all the settings for each element. I’m also a fan of [controller view design pattern](https://medium.com/@sdrzn/controller-view-design-pattern-for-swift-new-6283cb052) which allows for better seperation of your view. hope this helps!
Very unusual. But they pushed this update out early to fix the 12/2 bug, so maybe Xcode wasn’t ready ¯\\\_(ツ)_/¯
You wrote what I was going to write. +1
Thanks! And yea I definitely want to add the enum cases. Cant believe I missed them in the first place. After talking to another person I may break enums out into their own `EnumInfo` type and put them in that. For `isOptional` it looks like you're getting the `Mirror` and reading the key. From what I recall the guy who created [EVReflection](https://github.com/evermeer/EVReflection) said the mirrors are expensive to create so I'd be a bit weary about adding that.
Neat! I didn't know such tools existed.
As soon as you have two people working on iOS in your team, storyboards becomes very hard to maintain. Git conflicts happen all the time and are sometimes really hard to fix. An alternative is to use individual nibs for your views. This scales to more people already, as you usually don’t work on the very same view. When your team starts becoming really big, it might make more sense to code your views directly, even though it’s never fun to do imo.
The only reason I used the Mirror is because I don't understand the other stuff (pointers and directly reading from the memory) at all. I'm guessing it's also possible using those things, I just don't know how.
Ohh okay. I'm actually not too sure how they know. According to the documentation for the metadata that is not stored. I'll try to read into it though. Would be a cool thing too add. But you should play around with the metadata and pointers sometime! It sounds way more complicated than it really is. If you have any questions I'd be more than happy to help.
I'll give it a shot when you write that blog post. 😉
I released a macOS app that makes it easy to hide sensitive parts of an image, and I wrote a little bit about the process: https://blog.sindresorhus.com/black-out-c44a1a0e7122#a47a
1. There ought to be no way properties like that would be automagically connected to anything in a storyboard – you need to do it explicitly. 2. You can connect things through code if you really want, but it's pretty miserable compared to Ctrl-dragging. 3. The `@IBOutlet` part means nothing; it gets removed when your code is compiled. However, Xcode scans your code for things marked `@IBOutlet` and offers them as options when Interface Builder is making connections. 4. The `weak` means you don't want to own the memory for this label. In this case, someone else owns it, so that's OK. Apple has flip-flopped over whether `weak` is needed in the past, because internally they don't agree. For example, all the IB engineers agree it isn't needed, but some influential frameworks engineers disagree. (They agreed on a compromise: whatever you select stays selected in the future; use [strong rather than weak](https://twitter.com/_danielhall/status/620717252216623104)!) 5. The `!` makes this an implicitly unwrapped optional. In this situation, what it means is "this thing will start life with nothing inside the variable, but by the time I want to use it – and forever more – it will have something inside there, so don't make jump through the hoops that optionals normally need." 6. The `_` means "don't use a label for this when it's called externally." If they had written `buttonPressed(sender: UIButton)` then the method would need to be called as `buttonPressed(sender: someSender)`. With the `_` in place, it can be called as `buttonPressed(someSender)`. Swift programmers mostly name all our parameters, but the Objective-C style was to make the first parameter part of the method name. This method is called from Objective-C, so it expects an unnamed first parameter. I hope that helps! &gt; For Swift, it's a little more confusing and there aren't many thorough, beginner-friendly explanations I can find. Obviously I really, *really* suck at marketing, because I made a huge, free, project-based tutorial series that teaches Swift 4 pretty thoroughly. It's called Hacking with Swift, and you can start reading it [here](https://www.hackingwithswift.com/read). You can also find over 300 code examples and FAQs documented in my (also free) [Swift Knowledge Base](https://www.hackingwithswift.com/example-code/).
I think you have an architecture problem. C++ is cool for low level or portable code (with PC, Android ...) or for specific library which are very famous (OpenCV). If you call Swift in C++ code you will loose your portability. You can use define and pragma you’ll tell me, but your code will be hard to read and you loose in quality (in my point of view). I work everyday with this 3 languages and just using objective C ++ in C++ code could be quit confusing (we did it for using iOS native face detector which is better than OpenCV in your case, in full C++ code, and now we regret the architecture we choose...)
Once I have time to make the code less embarrassing (it’s really hacked together rn), I’ll probably open source it. Hopefully after finals. I would like to get some other people working on it too, because right now it only gets about 80% Of the questions right. I just thought it would be a fun project.
Once I have time to make the code less embarrassing (it’s really hacked together rn), I’ll probably open source it. Hopefully after finals. I would like to get some other people working on it too, because right now it only gets about 80% Of the questions right. I just thought it would be a fun project.
Is there ascheudle for the release of Xcode 9.2?
Can only guess that it is imminent as 11.2 was due next week I believe.
&gt;I would constantly find that the most expensive operation would always be the bridging from NSString to String Isn't bridging between `String` and `NSString` supposed to be free?
Well, "free", but not a NOP. My text view needs to render a large NSAttributedString. Because my NSTextStorage subclass was implemented in Swift, what I believe was happening is that *every* NSTextStorage operation, even built-in ones, had to go through the Obj-C &gt; Swift &gt; Obj-C bridge. When you're dealing with literally thousands of characters and several overlapping attributes applied to them, this small cost of bridging String to NSString builds up. And this happens because every time the text view needs to draw, it has to query the text storage for the font/color/size attributes.
Pretty sure it’s separate because each ui element is fairly different and implements separate protocols methods etc... 
Makes sense! thought if you selected the same type though it would do something like that, but oh well :). Thanks for the response ! 
Paul I love that you're perusing the subreddit helping people out like this. Cements my confidence in my decision to purchase pretty much every piece of content you've published so far. Keep it up man, it really is appreciated by loads of people!
Yeah! That would be cool it would you would still have to name each one though. Happy coding :)
I noticed the username too and was like, holy shit it’s the HWS guy!
I agree. I'm a very experienced developer just getting my feet wet in Swift and your site is AMAZING! When I get some downtime, I'm definitely buying pro.
I answered. Let me know if that works.
Are you sure you mean Objective-C++ and not just Objective-C?
to set up* setup = a noun
Dirty dog Annamite dog, Annamite twat, Annamite thief Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, 
Dirty dog Annamite dog, Annamite twat, Annamite thief Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, Annamite dog, Annamite twat, Annamite thief, 
Thanks for the very helpful reply. 
Snapkit
that's a really good way to explain !
I like that way of explaining `!`
Bologna, Italy
Here are some cities in Europe to consider: https://www.hubspot.com/european-tech-scene/cities
&gt; When starting to learn Swift I was confused by the auto-layout system I can't find anything "auto" about AutoLayout :) That said, I would advise most people to stick with it and grind through the frustration and the learning curve. I've seen multiple developers who claim it's too hard, and gave up. The problem with that, is that you're going to have to learn it sometime. At least, if you work in teams.
I'm happy to help contribute, and I think it helps me too – it's always good to get a refresher of what people struggle with when they are just starting out. Thanks for your support!
You can view all the outlets and actions for an item by selecting it. Next press alt command 6
Achievement unlocked: became /r/swift famous ;)
Yup... ...one of those times again where you have to use Xcode **beta** for **development**, which just makes so much sense. Now if you forget to fix the info.plist manually before submitting, you'll get a *don't use betas for development* back from itunesconnect. They really need to start considering their dependencies when releasing updates.
Free as in O(1)
Amsterdam. 
Hi! I had saved this link months ago, and just now I came across it... I have to be honest and say I looked around for other alternatives in case there was another one better, but I loved the minimalistic approach you took... Already got it up and running and I'm not looking back! Thanks!!
An awesome answer by an awesome author. As a swift beginner, I would highly recommend his tutorial and any/all of his books. He explains things very well, much like this nicely worded response.
&gt; Yellow is kind of like, “hey, there’s a better way we think you can do this... take another look at it”. Also known as a warning. 
Also, if you're interested, open up the storyboard code and Crtl+F your outlets to see how it actually connects them.
Thank you! I'm glad you enjoy my work :)
Try to emulate the behavior using postman, then pass the credentials to that class and see what happens. What's what I'd do first before coding an authentication method when I have several doubts about how to auth. Also, another option is to use Alamofire, you pass in the URL and the params array and it does the work just as fine.
Thank you! I actually have learned it, just wanted to find a lightweight alternative to use on side projects haha. 
Would you mind posting the code? I don't know that I can offer any help, but I'm concerned about the performance handling string in Swift. These things a good for everyone to be aware of, thanks.
Thanks always nice to hear feedback. Check out spotmenu, its another app similar to mine which is a bit more feature rich. If you want a feature or anything just hit me up!
[But why?](https://www.youtube.com/watch?v=PEZWYXPvmS8)
Swift (intentionally) aims to have a minimal standard library, that provides you the minimum set of tools necessary to use the language. Using these, you can implement everything else which may not be necessary to the core language (such as BSTs). By doing this, they make it simpler to port Swift to new platforms, as only the standard library needs to be re-written, and all other projects dependent upon it should "just work". Ray Wenderlich has a [great write-up on implementing BSTs](https://www.raywenderlich.com/139821/swift-algorithm-club-swift-binary-search-tree-data-structure), which has its code posted on github, available for you on [GitHub](https://github.com/raywenderlich/swift-algorithm-club/tree/master/Binary%20Search%20Tree).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [raywenderlich/swift-algorithm-club/.../**Binary%20Search%20Tree** (master → aa6e2bf)](https://github.com/raywenderlich/swift-algorithm-club/tree/aa6e2bf750322666722c8fdea77b2dae4476cc5b/Binary%20Search%20Tree) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Nice!
I recently released [8chen for Hacker News](https://itunes.apple.com/us/app/8chen-for-hacker-news/id1308885491?mt=8) - a Hacker News reader app for iOS. I would love some feedback!
because the lack of it was bothering the hell out of me
Android version of my app. Kill me now. 
Apple's APIs are verbose as heck. You can do a lot better by writing some basic convenience/helper/init methods and picking a good autolayout library(i suggest mortar). I'd write that as: let label = UILabel(str: This is text", color: .white) view |+| label label.m_center |=| view and line 2 cover most/all subviews like view |+| [label, someView, anotherView, etc] so really only 2 lines for that view. Also I tend to do the creation/styling in one place(at the point of declaration) and the layout in another which makes the layout code a lot easier to read. Mortar also has a VFL style syntax which is type checked(unlike Apple's) and extremely readable once you learn a coupe operators. Most views end up being 2 to 5 lines total for creation, styling, and layout once you've eliminated all the boilerplate(like isActive, translatesAutoresizingMaskIntoContraints, frame:, etc, etc)
Spent the past two weeks starting on my second game with plans to finish by may. Its got a top down rpg feel to it but the gameplay will be similar to fallout shelter as far as managing your base/defending from attacks/foraging in the wild. Also it has a really special gameplay mechanic that I can't wait for people to see but I don't think I am far enough into development to start showing it off. 
Keep working on my code generator for Swift: https://github.com/fernandodelrio/SwiftColorGen/ Added support for some color spaces. Thinking about improvements I could make
I've been in the developer field for about a year now. I was a with a startup the whole time. They hired me right out of my boot camp... After a few month they asked me to be their UI/UX designer so for the last 8 months I've been doing that. The project ended and now Im on the hunt for Jr. Positions and trying to relearn a lot of the basics I lost not coding during that time. So, with that being said I'm making ( for practice ) an app for my favorite brunch spot. It's using firebase as a backend which i've never used before. All in in all im excited about it and I really hope that I can get back into the swing of things and hopefully land another job soon! 
RIP.
Good stuff. Were you using storyboards or building the UIs programatically? 
Storyboards mostly. Most of the original UI was done programmatically and as a startup team we decided to move to storyboard. All of our colors and assets we did programmatically in paintcode and such, though. 
Swift version of my Android app. Feel slightly the same way having never worked with iOS or swift before
Right now I'm working on a new book: [Server-Side Swift (Vapor Edition)](https://www.hackingwithswift.com/store/server-side-swift). It's due for release at the end of December, and I'm writing it alongside the development of Vapor 3 so it's guaranteed to be bang up to date. Last month I published my first ever video series. It took a huge amount of time to prepare and record, but the end result is really great – nine hours of all-new Swift tutorials, all in 1080p. I called it [Hacking with Swift Live: Series One](https://www.hackingwithswift.com/store/videos) because I think more videos will come next year. Also last month I released some Hacking with Swift merchandise. [Yes, really](https://www.hackingwithswift.com/store/merchandise). It includes a calendar with Swift tips on each month, a calendar with Swift *snark* on each month (I couldn't resist!), and a mug that says “Contains minor bug fixes and performance improvements”. I'm hardly going to get rich producing calendars, but they were fun to make! As we're approaching Christmas, I plan to run a few festive competitions on Twitter. If you'd like to chance to win some free books, you should follow me on Twitter: [@twostraws](https://twitter.com/twostraws)!
Gotcha. I'm a bigger fan of storyboards myself but am still struggling to master Auto Layout. Any resources you can recommend? 
# LinguaBrowse 🗺 Continuing to work on my first ever app that I released last month (after 9 months' development), [LinguaBrowse](https://itunes.apple.com/gb/app/linguabrowse/id1281350165?mt=8): a free web browser for reading foreign-language websites on iPhone &amp; iPad. It allows you to immerse yourself in native texts in any of over 30 languages without having to constantly switch out to different apps for tools like dictionaries and alphabet charts; everything you need is inside, and accessible with a single tap. ## CORE FEATURES * Tap-to-define: defines a word with a popup dictionary. * Tap-to-speak: speaks the word aloud (via text-to-speech) * Add phonetic transcriptions: add phonetic transcriptive text like pīnyīn (for Chinese), hiragana (for Japanese), or Roman characters for any other language (e.g. Russian, Greek, etc.) * Universal: There's large support for different language pairs (because not everyone is a native English speaker!), so e.g. a Bulgarian can learn Croatian using Bulgarian&lt;-&gt;Croatian a bilingual dictionary. ## WHAT'S NEW * The online dictionary's visual layout is vastly better now. * Words will be highlighted upon tap (coming in next update). * Soon to add a sorely needed first-time usage tutorial, using TNTutorialManager (coming in next update; see below for details). ## THE FUTURE * Will add a back-end for better language support (only some system dictionaries support lookup of words that aren't presented in dictionary form, and Apple's Core Foundation tokenisers don't provide lemmatisation for all – or even most – languages). * PDF support (have a mostly-working prototype, but have to concentrate on other tasks first * A Flashcard generator based on the words that you find yourself defining! * I should probably also add a nag screen to encourage more reviews &gt;_&gt; # TNTutorialManager 👩‍🏫 Contributing to /u/TawaNicolas 's excellent [TNTutorialManager](https://github.com/Tawa/TNTutorialManager), as I will be depending upon it to make LinguaBrowse's first-time usage tutorial. It can highlight areas of your app, providing instructions to the user on how they should use each functionality. If that sounds like something you'd find useful in your own app, come along and contribute!
Learning swift and iOS whilst building a cooking utility app. Coming from a WebDev background the learning curve is a bit steep but I'm enjoying it. It's useful to take the mind off university and work.
ill give it a try thanks 
Just read about Google Fuchsia will be supporting Swift. Exciting times ahead.
Finally 😁
I hope you’re not using java.... kotlin is a lot of fun and makes android dev so much more interesting.
I don't find Java terrible. I chose to use Java for my first Android app because there's simply not enough examples, tutorials, stack overflow questions out there in Kotlin compared to Java. The parts that I'm finding annoying about Android aren't solved by Kotlin. Fragmentation, supporting different API levels, my terribad test phone (a cheap $150 huawei), difficult to use frameworks (though this could be related to the shitty OS on my huawei phone, I can't seem to find how background audio works).
whatever, just don't take my beachball away! in the ios team the summer never ends!!
Working on a recipe app to practice better architecture, UI, and play with some frameworks
Just a heads up, you can't submit to the store / test flight with this. Seems iTunes Connect still thinks it's a beta. 
Xcode*
Lol true. Programming in Camel Case is getting the best of me.
Long time UX/UI guy... finally released my first iOS app that I coded entirely in Swift. Love the language and looking at Perfect / Vapor for the backend now (currently in Node). Here’s the app: [Cashflowy](https://itunes.apple.com/us/app/cashflowy/id1262925387?mt=8) 
###Open-sourced [**TimelineCards**](https://github.com/vladaverin24/TimelineCards) It's a set of helpful views that make building highly-customizable vertical timelines easier in your app. Check it out if your projects need something like that. [**Get the code!**](https://github.com/vladaverin24/TimelineCards)
Finally
Your stuff is great. I bought your Hacking with watchOS course about a week ago and it’s been very fun. So thats what I’m doing this month. Playing around with watch apps.
It should work fine but won't show up rounded until runtime (i.e. it won't change in the storyboard itself.) Try modifying the "layer" property for the UITextField in viewDidLoad.
Do you think this help is explain why it’s slow? WWDC 2017 “Efficient Interactions with Frameworks “: https://developer.apple.com/videos/play/wwdc2017/244/ Fast forward to 24:00 
Jesus Christ Apple, get your shit together 🤬
I set out on a goal to create an app in all swift, frontend and backend. I decided to use perfect on the server side, it’s going pretty well. I have something working on a Ubuntu server in aws. I’m just stuck on the the design of the app now. That’s the hardest part of it for me.
Cool! Apple Watch is such a small device, but it's remarkable what you can build for it :)
Thanks! This seems spot on!
You can see the original class in swift [here](https://github.com/brunophilipe/Highlightr/blob/29a73f99d5533ea77ac6f56f1c0ffebf0c59c8a1/Pod/Classes/CodeAttributedString.swift) , and the reimplementation in Objective-C [here](https://github.com/brunophilipe/Highlightr/blob/swift4/Pod/Classes/CodeAttributedString.m) . The key method that caused most work is `replaceCharactersInRange:withAttributedString:`. On the other hand, by analyzing the app on instruments more closely today, I realized there are some NSAttributedStringKey bridges happening, but now in a background thread. It could mean I just moved a chunk of code to a background thread without realizing (which is unlikely, as the implementations are logically identical), but I’m not convinced 100% either. This specific framework though is only part of the large structure of Swift classes touching my NSTextStorage, so I think there’s still places where I can replace Swift code with Objective-C to help text-editing performance even more.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [brunophilipe/Highlightr/.../**CodeAttributedString.m** (swift4 → 5d5af7a)](https://github.com/brunophilipe/Highlightr/blob/5d5af7a29c525153ecd8eafe03cbae2486903529/Pod/Classes/CodeAttributedString.m) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
One concern I would have is that at some point Apple might change things between ObjC and Swift. If that happens, all your code stops working. I haven't done this in Swift, but I've done it in other languages years ago, where you write routines in C and then run them in the higher language. Doesn't Swift support direct calls to C without using any bridge to ObjC?
Nice app! Definitely liked the design.
Thank you!
I don’t have much broad experience with swift, but trying the prepare for segue function should do it. I mean, if you have a tableview and you tap on it, you send the indexed tapped element using a segue to another view controller, then you override the prepare for segue function and send the object you need for the next vc.
On weekends: Working on a Swift rewrite, with some new features, of my app Countr - Quick Count. Midweek: Prepping for the launch of our major app update at work. 
Give each of your items a parent ID and unique ID of some kind. If you tap on a cell, check if any items contain that unique ID as a parent ID. If so, pass that array of items into a new instance of your current view controller as the main data source. Repeat (still checking the full list if there are children with that unique parent ID). If there are no items with that parent ID, then it doesn't have any children entries and you can display the details.
Great, now if only I could download it. Been trying here for 4 hours already. Both the App Store and direct download (from the developer portal using Safari) quit on me at around 50%. And no, there is no option to resume the frigging download, it starts from 0% again. Can't find the direct URL either so I can use a decent download manager. This is not the first time this happens, this happens every frigging Xcode update. Anyone a solution or workaround for this? Now trying to download it with Chrome for Christ's sake.
To do it this simply, you have to wrap your async calls with methods that return promises. Or if you want to be terse and isolate promises within the one function, then you need to create promise objects for each async call first, followed by the ‘when(fulfilled:..)’ part (or the sequence of ‘.then’ cases). It’s a little more awkward but still effective. In general though, a lot of code that translates between promises and completion blocks is a code smell. When I’ve used promises, I’ve found that it’s best to adopt them throughout your project (or all your networking related code, say), writing all your async methods with returned promises instead of with passed in completion blocks. If I can’t fully adopt promises but have to solve this kind of multiple completions problem in a few isolated cases, I always just use GCD async groups as mentioned elsewhere in this thread.
What’s the point of the Apple Store appt &amp; clean install? Seems like a make-work project. OP, I say put fewer barriers in front of yourself, go ahead and start with Xcode on your Mac as-is, but also put in an order for more RAM if you can.
Hilariously 9.0 had the same issue. 
200x100 pixels will look different on different devices. And always create highest resolution first, or you’ll end up with unintended pixel art.
 Found the solution to this. As mentioned, create a high resolution image first. Then rename it “@3x...” and then drag this into retini and it will create a 1x and 2x for you. Thanks 
Instant delete of my last hacker news app. Thanks!
Does anybody have any other programs or apps to create the other resolutions of images automatically? The problem with Retini, while it does it fast, is it makes my MacBook Pro 2014 sound like a jumbo jet about to take off - seems like it’s highly inefficient. The fans run for a few minutes even though the task is complete is around 19 seconds for 200 or so images. 
I like it! Very well done and quite simple. My biggest gripe would be with the top bar hiding. Currently it auto hides once you scroll down just a bit, and it causes the page position to jump which results in scrolling that isn’t smooth. As well, if you’re at the very top of the page and you pull down the top bar won’t appear. You have to scroll down a bit and then scroll up. If you’re showing it just based off of y distance scrolled up, you should also take into account if they’re already at the top. And if you swipe back a page the top bar automatically shows which moves the content yet again, making the content jump around a lot in the app. 
Older versions of the book aren't published, but I think there are several automated web archives that have snapshots of older versions. You're probably fine reading the 4.0.3 version, since there weren't supposed to be any severe source-breaking changes between Swift 3 and 4. You could also skim the [revision history](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/RevisionHistory.html) to make sure you don't accidentally use any Swift 4 features on your exam. Your professor would have to be pretty cruel to ding you for accidentally using Swift 4 stuff, though.
Dispatch groups are far easier than serial queues.
You could use the built in 3D Touch and substitute with long press if it’s not supported then implement the delegate which asks you for return a controller to show details for you can use this for a quick details view ?
Agreed, when I've used this kind of approach I adopted promises throughout the entire project. And with a well defined interface this became cleaner. 
xcode-install
I have a copy of the 3.1 version, here you go: https://www.mediafire.com/file/mwa7nynx04jmhpm/TheSwiftProgrammingLanguage%28Swift3.1%29.epub
Ok so I have my 3 sizes @1, @2 and @3. When I am creating the interface in the storey board, and a grad a flag image out, do I make it the size of the @1 or @3? Thanks
One option, if you can't find another good option is to get a book like BNR from last year or a year old tutorial, there's tons of them out there. The syntax shouldn't be more than 1 chapter.
A little side-project I've been working on – outside of the endless assignments and in-term examinations my university loves to provide us with on a daily basis. All contributions are welcome and much appreciated! ☺️ [GitHub Project Page](https://github.com/revblaze/Glow)
You’re confusing points and pixels. iOS UI is measured in points, which is kinda the same as @1x for all intents and purposes. But then different devices render each point with a different number of pixels. So an iPhone X will render each point with three pixels, so a 200x100 *point* image will be 600x300 *pixels* on the screen, and will use your @3x image to fill the space. So you need to design your storyboard using points, making them the size you want them to appear on the screen, and the device will handle using the right assets for each device. 
Really! My MBP died a few days ago. Trued to tell the genius that it was a hardware failure but no he spent two days trying to get it to reboot and reload the OS. I had already tried that myself. Then instead of just shipping it out for repair we ended up playing telephone tag for a couple of days finally making contact yesterday. The only reason they wanted to contact me was to inform me that the unit needed to be sent out fir depot repair. Duh! For a supposedly modern company you would think that the would learn to use E-Mail. Beyond all of that when i finally made contact with Apple yesterday the guy on the phone and the tech seemed to be confused as to why i was calling. Sorry to pull the thread off track here but lately it seems like all Apple can do is wrong. Im kinda loosing faith that they are really focusing on the customer anymore. 
I’ve been working a bit on iina: https://github.com/lhc70000/iina I liked it, but I have some time constraints, so can’ta make it at the moment. 
Chrome completed my download today. I installed [xcode-install](https://github.com/KrauseFx/xcode-install) for next time already. Thanks for the tip.
A good place to check: https://github.com/trending/swift
I use sketch to create my images and it has a feature to automatically do this
Swift is a language where I see almost no value of learning an earlier version. The professor should allow both old and new to be use on the final. 
There's really no problem here, graphics processing is an intensive task so it will kick up the fans. Fan noise is completely normal. 
Yet we still can't submit binaries.... Apple get your shit together, don't release an update on the AppStore when it can't be used
It is ridiculously verbose. There are a few convenience wrappers around autolayout you could check out. [Tiny Constraints](https://github.com/roberthein/TinyConstraints) seems like a pretty good one.
&gt; Hacking with Swift Live: Series One I bought your Hacking with Swift Live: Series One training on sale. Started to watch! 
Does it allow me to collapse code again like XCode 8? Why did they take it out to begin with?
Code folding is still in Xcode 9. They just took out the ribbon for some ungodly reason 
You can only fold whole methods, you can't fold loops, blocks, or if-statements.
you can fold blocks, loops, blocks, or if-statements if you use the menu or keyboard shortcut you find all options here: Editor -&gt; Code Folding
Sorry, I was referring to the code folding in XCode 9.1, has the functionality expanded in 9.2?
Good feedback, thanks. I will definitely consider removing the auto-hide.
right now in 9.2 you can fold code like in 8, you just have to use the menu or shortcuts
Once my semester is over, I'm gonna pour a lot more time into @CodaFi's and my compiler project, [silt](https://github.com/silt-lang/silt). In the meantime I've been having fun writing a test runner for compiler projects called `[Lite](https://github.com/silt-lang/Lite)!
Check the command key shortcuts. … I just did and it doesn't appear to be able to do that.
 Cloning my app without storyboard. More code but so much better timing and indexing.
I know it's not super useful, but FYI, you can command click on a keyword such as `func`, `for`, `extension`, etc. to bring out a menu with a Fold option.
Thank you I was hoping someone would have a copy on their computer still
Oh ok. Thanks! So if I have an image that is @1x of 200x100, when I draw the image Jew do I make sure that’s 200x100 also? Do I make the imageview the same number of points and the @1x image has pixels?
First of all just use K, kay is confusing, second off all you just want a random string from each array every time the function is called? If so that doesn’t require a dictionary.
Some of it will depend on what sort of AR app you're trying to make - lots of them don't overlap very much (at all) with traditional normal data-driven apps that you're looking at. If you want to do some 3D AR there'd be value in learning some SceneKit stuff. You also might want to learn some 3D modelling which is a completely different kettle of fish.
That would work, yes
I don’t have any personal experience with it but Kotlin is supposed to be very similar to Swift so you might want to check that out!
I’ll look into it thanks
"Swift is using 76GB of compressed memory" Oh boy
I jut tried them all. None of them did anything but the whole method. Which one is supposed to work?
I think kay was a typo of key.
My idea is that there would be 3D and 2D objects combined (user chooses each one) into one 3D object and then the user could do some simple (I guess) interaction with it. As for 3D modelling - ain't nobody got time fo' that, haha. I have friends who are 3D artists who could help me if the project takes off one day. Those 3D objects would not be that complicated to make for someone who is skilled. I just could not afford time to get into that too. Thank you for your answer! I guess there is still long way for me.
ahh probably, still doesnt explain why he needs a dictionary at all. this can easily be accomplished with 3 for loops and rand()
https://github.com/willowtreeapps/Hyperion-iOS
Kotlit is now official, and its syntax is very similar to Swift. Beside that, you might consider React Native, it can helps you to build both Android and iOS app.
You'd have to set it to `NO` in order for it to work: https://twitter.com/rballard/status/938216933303885824
https://github.com/crossroadlabs/Regex
I'm aware of it. I can't import it in a Playground. 
This really ought to be at the top of the comments.
```bash gem install cocoapods-playgrounds pod playgrounds CrossroadRegex ```
I don’t know if those stats would be a very good indicator. Dublin has very few iOS jobs and I don’t think I’ve ever seen a call for macOS. You might only see one or two advertisements here per week and even that’s probably masking the reality as the same companies advertise for the same positions over and over again.
Please no. In nearly every case, if you reach for a Regex you should have reached for a parser (e.g. recursive descent) instead. Cue the old joke about "a programmer had a problem....". I like that NSRegularExpression is bad; it reminds you that you're doing something you shouldn't be.
There has been discussion of having a Regex literal for Swift; I’ve heard a couple of interviews with Chris Lattner where he has mentioned it, but it’s really the responsibility of the OSS community to work on the proposals in the mailing list. All things considered, it is WAY behind ABI stability and a native concurrency syntax as far as the goals, but it is out there if you’re keeping up on the development. The pain in the ass of it is in making a solution that makes the most people happy. I know what my ideal version would be, but there’s somebody out there would would be happy to tell me why that’s the worst version of it. 
Yeah. Another vote for Kotlin, as far as Android development goes. I could (but won’t) go i about how I don’t care for JVM, but if it’s an inevitability of modern software, Kotlin is a much better language than Java for expressing the ideas that are compiled into bytecode. Ruby is good certain things, but I would consider it as a language for developing software on a mobile platform. 
Yeah, I don’t exactly know what you’re trying to accomplish here. Dictionaries and arrays are both used to look up values in fundamentally different ways. Arrays are ordered by number, where dictionaries are used to look up a value given another value you associate with it. If you’re looking to randomize the order of things in an array, there are different shuffling algorithms out there, and that’s probably what you’re looking for. 
I’m gonna disagree on this one. A recursive descent parser is overkill for so, so many use cases, and you can never really write a good parser for unstructured data the way you can extract bits of it using a regex. For example, NSDataDetector is wholly regex-based because it can’t possibly _parse_ the Strings it needs to detect. It can, however, use regexes to _find_ the raw data and then pass that to a parser.
..........til im stubborn. they're still missing the point
To be fair, ONLY in my particular case here you're right but truth of the matter is for a lot of cases there's a time crunch and regexes are supposed to be the quick and dirty solution. :/
Talk about design patterns in swift by using examples and real complicated projects.
RAM isn't nearly as important as an SSD on macOS. even 8 GB is fine, but if you know someone that can add an SSD to your iMac please do that.
I can accept that. I would just strongly advise to keep some level of discomfort in using them. If you make it really easy then it becomes the hammer everyone starts reaching for and everything starts becoming a "time crunch".
I higly recommend using kotlin for this
Newer versions of XCode allow you to use PDF graphic assets, so if you have the option of using vector graphics, do so. Behind the scenes, XCode will convert those into .png images of the correct resolution, so you don’t have to worry about it. Of course, that doesn’t work for things like photographic images, but for things like buttons and other UI elements, it’s the ideal way to handle this. 
You connect an IBOutlet from your story board to the view controller class
I find I don't use regexs much myself, but have you submitted a Radar suggestion for this? My contacts at Apple say this is exactly the kind of thing they look for in suggestion reports. The more people submit them the more likely it will be added....
I did the same for my app Conjugar. https://github.com/vermont42/Conjugar Deleting that storyboard felt so good. This month I am working on a programmatic-layout tutorial. Some of the techniques are non-obvious. I'm looking at you, translatesAutoresizingMaskIntoConstraints. 
Because when you try to bind cValue it fails and end up returning bValue. All is done in the last guard let.
Would scheduling a local notification that fires every minute work? You can handle the notification in the background and perform your request there. 
The guard keyword is almost exactly like the if keyword, but it is always paired with an else statement, and is used to allow for an early exit from a block of code. Basically, you say “I need this to be true, or else we’ll do this and quit now.” It keeps the code from forming a “pyramid of doom,” where the code becomes difficult to read because there are so many if statements nested in each other. In your case, it fails when the third guard statement checks to see if there’s a non-nil value for the argument c. The function call specifies that c is nil, so the code inside the else statement is executed, and it returns the value of b. 
All of those returns are valid exits for the entire function - not just the individual guard statement. Once one of those returns is activated, the function ceases there. As you noted, it encounters the return statement when assigning cValue and returns that bValue as the return for the entire function - not just that guard statement. In this example, the function never reaches the line where the values are added.
NSRegularExpression should be quite fast maybe show some code?
Good answer. To clarify a thing : when you use a guard statement, you MUST exit the current scope in the else statement. You can’t write something like « guard statement else { c = 4 } » and just continue to execute the code underneath. It won’t even let you compile if you don’t put a « return » in your else block. 
you're thinking the guard will initialize C to 8 (from B) but it doesn't, it makes the function call return with the value from B
Initial compilation of the regex is slow. Subsequent uses will be very fast.
Playgrounds are a terrible way to benchmark anything.
That’s pretty clever. Great job! 👍🏻
No, it needs its own Regex *struct*, and that's already on their to-do list. But it's just syntactic sugar, and hence low priority. This isn't stopping you from accomplishing whatever you want to do with regular expressions. You can even write your own wrapper, if you want, and there's already a bunch of nice open-source ones floating around. I'm not entirely surprised that JS regex is faster than ICU in some cases, especially microbenchmarks. JS has perhaps the weakest regex library still in use. Eliminating most of your features is a common strategy for making a system faster. (My Apple II boots faster than my Mac Pro, too.) If that one does everything you need, and meets your performance needs better, then go for it. On the flip side, it's lacking lots of features (like atomics) that would let it be even faster, if the regex were written for it. ICU, in contrast, is one of the most powerful regex implementations today. (It lacks arbitrary-length lookbehinds, but that's about it. JS regex, of course, doesn't have any lookbehind support at all.) Its Unicode support, of course, is without equal. A Swift Character is a grapheme cluster, but unlike ICU, JS regex doesn't provide any mechanism to match one of these. I would literally be unable to write most of my Swift regex using JS regex, because they're so feature-poor. I don't doubt that some programs only need the features of JS regex, but don't go blaming an industrial-strength tool for clashing with your suit.
Nonononono you've got that joke all wrong, you see it's not really a joke, and it goes like this: "a programmer had a problem and he solved it with a regex. Then, he had two problems. And job security." :-P
I think submission to App Store is working now. 
I'm going to ask the dumb question but what's so bad about the regular expressions in Swift? I literally use this extension in every project: extension String { func isValid(_ fieldType: FieldType) -&gt; Bool { guard self.range(of: fieldType.rawValue, options: .regularExpression) != nil else { return false } return true } } With a FieldType enum like this: enum FieldType: String { case name = "^[a-zA-Z\\-' \\.]{1,32}$" case ssn = "^[0-9]{3}[0-9]{2}[0-9]{4}$|^[0-9]{3}\\-[0-9]{2}\\-[0-9]{4}$" case middleInitial = "^[a-zA-Z]{1}$" ...etc } So then I can do something like this: if firstName.isValid(firstName) { //do this } I guess I'm missing something because everyone seems to hate regular expressions in Swift but they work fine for me. 
With all due respect, even against completely different, "industrial" programming languages, Swift's Regex performance gets crushed in benchmarks. And Swift's performance was equally bad before grapheme cluster comparison support in Swift 4. I know benchmarks aren't really a perfect measure, but they get close.
Get familiar with SceneKit and brush up on your linear algebra. Other than that, it's pretty straightforward; the APIs make a lot of the work trivial.
Cool. Have you tried it?
Playgrounds or without. Javascript is faster. Try it if you want. Calling a scripting language from a native language and having that be faster is atrocious regardless of whether Swift is running under Playgrounds or not.
Can you explain how to use `as` in `#selector`? I didn’t realize there was a way to disambiguate.
Yep! Mine got reject twice yesterday around 3:00 PM PST. I tried again at 5:00 and it was accepted.
Post your benchmark then.
Yeah that was a typo. The explanation is bad. Basically i just have three array and i want to fill ONE of the arrays with a empty dictionary. So i want to fill the dictionary with one array and the NEXT round i want to fill the dictionary with a different array. I'm thinking i cant use a for loop because i cant stop the for loop when im done filling it in from one array. That hard to explain. I want to fill the dictionary array with one array and then stop. Then fill it in from another then stop. Then fill it in from my last one and stop and start all over. 
why are you using a dictionary? Where are you key words located? when you fill the dictionary the second time are you wanting to over write whats in it already or add to it? you say you cant use a for loop for when your done but thats what for loops are for. just use the size of the array as your max and you then iterate up to that point
That's great news, thanks!
You can, but you still need the return statement after assigning “c” a value. Anytime you use a guard statement, you’ll need that return. Because of this, guard isn’t always the better choice when trying to avoid if statements. Other functions like flatMap or reduce could also be used in this case. 
I forgot it behaved like nested ifs! Thank you!
You say that, but I have a storyboard that seems to crash Xcode 9.2 anytime you try and open it.
Great, will do! Thank you very much, I appreciate your answer!
You could also call a non-returning function, or, if you're in a loop, break or continue.
That’s true. A break or continue would work in those cases. 
&gt; ICU, in contrast, is one of the most powerful regex implementations today. (It lacks arbitrary-length lookbehinds, but that's about it[,,,]) It also lacks support for recursion, and conditionals. I'd hardly say it's one of most powerful, when compared to PREG and Onigmo. 
Hi mohitathwani! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/7i2g68/create_pixel_painting_app_like_dottable_unicorn/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
why the fuck do i need a new version of xcode ffs
&gt; With all due respect, even against completely different, "industrial" programming languages, Swift's Regex performance gets crushed in benchmarks. Can you tell us what benchmarks you're looking at? You keep repeating this claim, but offer no source code, no test data, and no way to verify (or refute) these claims. I've spent a couple minutes googling for regex benchmarks, and the only one I could find with ICU is [this old one that tests ICU4J](http://tusker.org/regex/regex_benchmark.html). In this particular test, ICU is the second *fastest* regex engine -- 400 times faster than Apache's regex engine, and almost 200 times faster than Java's. &gt; And Swift's performance was equally bad before grapheme cluster comparison support in Swift 4. Why do you mention Swift 4? They made String an iterable collection again, as a convenience, but that's all. ICU's behavior did not change. This sentence makes me suspect there's something wrong with how you're calling it. &gt; I know benchmarks aren't really a perfect measure, but they get close. Absolutely right, but at this point you don't even have that. You're still down at "unsubstantiated claims made on the internet", which is about 17 levels below "benchmarks". Let's stop the "yes they are" "no they aren't". Post your code. I suppose it's overly optimistic to hope that this is all an attempt to utilize Cunningham's Law to fix your program, huh?
im not sure if this is missing the point but a swifty way to do this would be func calculateResult(numbers: Int?...) -&gt; Int { return numbers .flatmap($0) .reduce(+) } note: im also on a windows computer so this might have minor mistakes
That’s really going to piss off the user. If they don’t interact with that notification, you stay « asleep ».
When you see someone type "grep", do you tell them they should write a recursive descent parser instead? Was Thompson wrong to make it so easy? Should we make the entire class library hard to use, so people write everything by hand, and aren't tempted into using existing functionality that accomplishes their goals? I have no idea what the hammer metaphor is supposed to mean. Do you not think the hammer is a good tool? If I don't have one in my toolbox, do you think that I'm going to forge my own each time, and somehow be better off for it? Or use a rock? Hammers are ubiquitous, like `grep`, because they're really good at so many types of jobs.
*silent notification
cs 193p is ur best choice. https://itunes.apple.com/us/course/developing-ios-10-apps-with-swift/id1198467120 
http://www.raywenderlich.com 
Your solution won’t return the same value if valueC is nil
There's a cheap Udacity course called Learn ARKit, it's pretty fun and should get you going. 
it's variadic there i no valueC?
I can highly recomnend www.hackingwithswift.com
Sorry I was posting from my phone. But the code in the image he posted would return 8 for the following value: a: 4, b: 8, c: nil. Your code would return 12. The code he posted returns b if c is nil
Silent local notifications will not wake the app, that only works for remote notifications.
I am checking it right away! Thank you!
i guess i misunderstood i'm posting in between games.disregard.
Are a newbie to programming in general or just to Swift/iOS dev?
There are severe limitations to flags: 1. You use up extra memory for each instance 2. You can't make some methods specific to some kinds of Animal 3. You can't create a new kind of Animal without changing Animal. Not possible if Animal is provided by a library yo don't control. Compare: ////////// Some library: protocol Animal { func breathe() } protocol SeaAnimal: Animal { func swim() } protocol LandAnimal: Animal { /* ... */ } protocol AirAnimal: Animal { /* ... */ } extension SeaAnimal { func breathe() { print("Using my gills to extract dissolved oxygen from water.") } // 2. A new method can be made that's specific to only some kinds of Animal (SeaAnimal) func swim() { print("🏊🏻‍♂️") } } extension LandAnimal { func breathe() { print("Using my lungs to directly breath oxygen from air.") } } extension AirAnimal { func breathe() { print("Using my lungs to directly breath oxygen from air.") } } struct Fish: SeaAnimal {} struct Cat: LandAnimal {} struct Bird: AirAnimal {} print("🐠:") let 🐠 = Fish() 🐠.breathe() 🐠.swim() print("\n🐱:") let 🐱 = Cat() 🐱.breathe() print("\n🐦:") let 🐦 = Bird() 🐦.breathe() ////////// Third party code: // 2. A new type of animal can be made, without needing to change Animal. protocol SpaceAnimal: Animal {} extension SpaceAnimal { func breathe() { print("I breathe the oxygen from my space suit!") } } struct Alien: SpaceAnimal {} print("\n👽:") let 👽 = Alien() 👽.breathe() To the closest approximation using flags: ////////// Some library: enum AnimalType { case sea, land, air } protocol Animal { //1. 1 word of memory wasted! var type: AnimalType { get } func breathe() func swim() } protocol SeaAnimal: Animal { func swim() } protocol LandAnimal: Animal { /* ... */ } protocol AirAnimal: Animal { /* ... */ } extension Animal { func breathe() { switch self.type { case .sea: print("Using my gills to extract dissolved oxygen from water.") case .land, .air: print("Using my lungs to directly breath oxygen from air.") } } func swim() { switch self.type { case .sea: print("🏊🏻‍♂️") case .land, .air: fatalError("I can't swim!") } } } struct Fish: SeaAnimal { let type = AnimalType.sea } struct Cat: LandAnimal { let type = AnimalType.land } struct Bird: AirAnimal { let type = AnimalType.air } print("🐠:") let 🐠 = Fish() 🐠.breathe() 🐠.swim() print("\n🐱:") let 🐱 = Cat() 🐱.breathe() 🐱.swim()// Compiles, but 💣💥 at runtime print("\n🐦:") let 🐦 = Bird() 🐦.breathe() 🐦.swim() // Compiles, but 💣💥 at runtime print("\nNo 👽s allowed :(")
In general.
ok, in general you are on the right track; however, I feel like I need to add something to this: &gt; Learn to make some "default apps": messenger, weather app, alarm clock, calendar, note/reminder... I want to get knowledgeable enough to be a good candidate for a junior developer position in some company. Doing the "basic" or "bare bones" version of anything is relatively trivial (in that many people can learn to do it in a matter of a few weeks, specially if they use ready-made packages and external services that already exist). Make sure to challenge yourself and do something a little bit beyond basic, for example: if you are doing a messenger app, figure out how to keep messages in sync in "real time", without causing screen flicker. To challenge yourself further, see if you can handle a large chat history without causing the app to become slow or crash. Better yet, if you are just gluing several third-party components and services together, see if you can replace them with your own hand-crafted component. There's a trap that many juniors fall to: learning to do everything by gluing together other things, without ever getting an understanding of how things actually work. Make sure to avoid that trap, or you will not be able to produce anything of significance.
Maybe look into RxSwift? You might be able to use an interval observable subscribed on a background thread.
Thank you for the advice! Yeah, I wasn't thinking to make just basic apps, I want to explore and create good, complex things. I am sure that's not an easy task so I am not rushing into that. It would be going on my nerves in some lessons of "Intro to App Development in Swift" when it would say "That code over there? Don't worry about it, we already made it for you". I started this course to learn something, right? Anyway, I am type of the person who likes to get into really small details when doing something, just to understand it better. So no worries about that! Thank you for the advice!
I think its B. Question for you, where is this 'Review Question' from? seems like an interesting/fun way to test your basis.
Maybe Mechanical Turk or Fivver?
Thanks!
Thanks!
got reject**ed*** 
Your example code doesn’t show anywhere where you’re actually inserting data that I see or am I missing something here...?
The insertion happens in the last method, tableView(willDisplayCell) of ViewController (first chunk of code)
I am on mobile so maybe that’s what’s going on? But I do not see that anywhere listed in your example...
hmmm, ok, here's the piece of code that inserts new data, bolded part is the one func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) { print("willDisplay") let lastCell = photoViewmodel.photos.count - 1 if indexPath.row == lastCell { print("add 10 more photos") photoViewmodel.loadNewPhotos(indexPath: indexPath, completionHandler: { (indexpaths) in DispatchQueue.main.async { **self.tableView.insertRows(at: indexpaths, with: .none)** } }) } }
I’m about to head to bed here in a few and I can certainly look at this more tomorrow, but willDisplayCell is certainly not where you should be telling your tableview to insert more data into itself. Your model should be doing that work and handling accordingly. Now...if you wanna do something like when you reach the bottom THEN getting new items, I’d look into prefetching. I’ve never used it, but just a quick google search landed me here which looks helpful: https://andreygordeev.com/2017/02/20/uitableview-prefetching/ But yeah, the fact you’re doing that inside of willDisplayCell is certainly suspect to me and I would bet money that changing that up will solve your problems (assuming everything else is setup correctly 😜).
Thanks for the link! I’ll check it and try moving the insertion part into somewhere else.
Just change your bundle identifier to a unique string again and it must work after that.
You never insert rows inside of will display cell function , you can simply append an array when receiving the new data from the api, and then reloaddata for the table view that has its datasource from that array
That did get rid of the 3 errors thanks! There is 1 new error and it’s still not letting me build it. It is now saying “swift stdlib tool Error: task failed with 1 exit signal 0” and when I click the error I get a huge wall of text that looks like some addresses on my local machine. Any ideas?
Got it working now. I had to copy the iOS developer keychain password to the system passwords. 
You can keep track of how many times users opened your app but not how many times users opened a different app. Generally speaking you can’t pull arbitrary information off the phone without the user’s permission and the type of information is limited to things like photos, contacts, etc.
Thanks for the reply. I tried what you suggested but the flashing thing (attached link to the gif in the post) is still happening.... can you spot what I'm doing wrong? ViewController func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) { print("willDisplay") let lastCell = photoViewmodel.photos.count - 1 if indexPath.row == lastCell { self.loadMore() } } func loadMore() { photoViewmodel.loadNewPhotos { self.tableView.reloadData() } } ViewModel func loadNewPhotos(completionHandler: @escaping () -&gt; Void) { API.getNewPhotos { (photos) in self.photos += photos DispatchQueue.main.async { completionHandler() } } }
Voted, thanks!
Apple Store can run diagnostics while you're there. It's fresh from their Ethernet, super fast and especially if you download the 8gb+ Xcode from App Store, it'll be much nicer on their very fast Ethernet. It's not a necessity, but thought it could save OP time. Obviously it won't :)
That's different, if you "grep" you're using a specific tool on the command line to quickly find something. You're not creating a maintainance nightmare for anyone doing that. A regular expression in a program, however, is nearly always the wrong answer. &gt;I have no idea what the hammer metaphor is supposed to mean. ... I'm not sure where you're from but where I'm from people use hammers to hammer nails and that's it. To screw in screws they use a screw driver, to cut paper they user siscors. It's mainly in programming where people constantly try to apply tools where they're not appropriate because they "know" the tool and can think of a way of getting it to do the other job too.
If you just want to sort dates in the future, filter out dates in the past before sorting let relevantSortedServices = services .filter({ $0.timeIntervalSinceNow &gt; 0 }) .sorted (...)
&gt; many bugs fixed! ... &gt; There is a bug in Xcode 9.2 which prevents this.
Dirty dog, subhuman, pathetic piet piet annamite [IPA: pi:t pi:t 'annamit]. You should be kicked back to where your pathetic, sickening own kind lives. It is unbelievable that America, Canada, Australia, etc. took such pathetic, filthy, sickening creatures like you in. Pretending to be refugees was the only way such pathetic, useless, dirty cowards like you could do. These countries should have left subhuman, pathetic piet piet annamite like you died of pirates, hunger and starvation. The best place for you and your dirty dog, subhuman, sickening annamite own kind is Gas Chamber and crematorium. Suck my dick dirty dog. Watch your subhuman, pathetic, sickening own kind Annamite whoring in Singapore: https://www.youtube.com/watch?v=FScBxMqC9cI Dirty dog, subhuman, pathetic piet piet annamite [IPA: pi:t pi:t 'annamit]. You should be kicked back to where your pathetic, sickening own kind lives. It is unbelievable that America, Canada, Australia, etc. took such pathetic, filthy, sickening creatures like you in. Pretending to be refugees was the only way such pathetic, useless, dirty cowards like you could do. These countries should have left subhuman, pathetic piet piet annamite like you died of pirates, hunger and starvation. The best place for you and your dirty dog, subhuman, sickening annamite own kind is Gas Chamber and crematorium. Suck my dick dirty dog. Watch your subhuman, pathetic, sickening own kind Annamite whoring in Singapore: https://www.youtube.com/watch?v=FScBxMqC9cI Dirty dog, subhuman, pathetic piet piet annamite [IPA: pi:t pi:t 'annamit]. You should be kicked back to where your pathetic, sickening own kind lives. It is unbelievable that America, Canada, Australia, etc. took such pathetic, filthy, sickening creatures like you in. Pretending to be refugees was the only way such pathetic, useless, dirty cowards like you could do. These countries should have left subhuman, pathetic piet piet annamite like you died of pirates, hunger and starvation. The best place for you and your dirty dog, subhuman, sickening annamite own kind is Gas Chamber and crematorium. Suck my dick dirty dog. Watch your subhuman, pathetic, sickening own kind Annamite whoring in Singapore: https://www.youtube.com/watch?v=FScBxMqC9cI 
Dirty dog, subhuman, pathetic piet piet annamite [IPA: pi:t pi:t 'annamit]. You should be kicked back to where your pathetic, sickening own kind lives. It is unbelievable that America, Canada, Australia, etc. took such pathetic, filthy, sickening creatures like you in. Pretending to be refugees was the only way such pathetic, useless, dirty cowards like you could do. These countries should have left subhuman, pathetic piet piet annamite like you died of pirates, hunger and starvation. The best place for you and your dirty dog, subhuman, sickening annamite own kind is Gas Chamber and crematorium. Suck my dick dirty dog. Watch your subhuman, pathetic, sickening own kind Annamite whoring in Singapore: https://www.youtube.com/watch?v=FScBxMqC9cI Dirty dog, subhuman, pathetic piet piet annamite [IPA: pi:t pi:t 'annamit]. You should be kicked back to where your pathetic, sickening own kind lives. It is unbelievable that America, Canada, Australia, etc. took such pathetic, filthy, sickening creatures like you in. Pretending to be refugees was the only way such pathetic, useless, dirty cowards like you could do. These countries should have left subhuman, pathetic piet piet annamite like you died of pirates, hunger and starvation. The best place for you and your dirty dog, subhuman, sickening annamite own kind is Gas Chamber and crematorium. Suck my dick dirty dog. Watch your subhuman, pathetic, sickening own kind Annamite whoring in Singapore: https://www.youtube.com/watch?v=FScBxMqC9cI Dirty dog, subhuman, pathetic piet piet annamite [IPA: pi:t pi:t 'annamit]. You should be kicked back to where your pathetic, sickening own kind lives. It is unbelievable that America, Canada, Australia, etc. took such pathetic, filthy, sickening creatures like you in. Pretending to be refugees was the only way such pathetic, useless, dirty cowards like you could do. These countries should have left subhuman, pathetic piet piet annamite like you died of pirates, hunger and starvation. The best place for you and your dirty dog, subhuman, sickening annamite own kind is Gas Chamber and crematorium. Suck my dick dirty dog. Watch your subhuman, pathetic, sickening own kind Annamite whoring in Singapore: https://www.youtube.com/watch?v=FScBxMqC9cI 
Dirty dog, subhuman, pathetic piet piet annamite [IPA: pi:t pi:t 'annamit]. You should be kicked back to where your pathetic, sickening own kind lives. It is unbelievable that America, Canada, Australia, etc. took such pathetic, filthy, sickening creatures like you in. Pretending to be refugees was the only way such pathetic, useless, dirty cowards like you could do. These countries should have left subhuman, pathetic piet piet annamite like you died of pirates, hunger and starvation. The best place for you and your dirty dog, subhuman, sickening annamite own kind is Gas Chamber and crematorium. Suck my dick dirty dog. Watch your subhuman, pathetic, sickening own kind Annamite whoring in Singapore: https://www.youtube.com/watch?v=FScBxMqC9cI Dirty dog, subhuman, pathetic piet piet annamite [IPA: pi:t pi:t 'annamit]. You should be kicked back to where your pathetic, sickening own kind lives. It is unbelievable that America, Canada, Australia, etc. took such pathetic, filthy, sickening creatures like you in. Pretending to be refugees was the only way such pathetic, useless, dirty cowards like you could do. These countries should have left subhuman, pathetic piet piet annamite like you died of pirates, hunger and starvation. The best place for you and your dirty dog, subhuman, sickening annamite own kind is Gas Chamber and crematorium. Suck my dick dirty dog. Watch your subhuman, pathetic, sickening own kind Annamite whoring in Singapore: https://www.youtube.com/watch?v=FScBxMqC9cI Dirty dog, subhuman, pathetic piet piet annamite [IPA: pi:t pi:t 'annamit]. You should be kicked back to where your pathetic, sickening own kind lives. It is unbelievable that America, Canada, Australia, etc. took such pathetic, filthy, sickening creatures like you in. Pretending to be refugees was the only way such pathetic, useless, dirty cowards like you could do. These countries should have left subhuman, pathetic piet piet annamite like you died of pirates, hunger and starvation. The best place for you and your dirty dog, subhuman, sickening annamite own kind is Gas Chamber and crematorium. Suck my dick dirty dog. Watch your subhuman, pathetic, sickening own kind Annamite whoring in Singapore: https://www.youtube.com/watch?v=FScBxMqC9cI 
These are always so good. Currently looking in the Denver area.
Devslopes.com
Apple has an “Everyone Can Code” set of books for free in iBooks. It’s interactive and honestly, I like it far better than the setup my college uses. For the most part, I have been able to follow along and figure everything out with the labs, chapters, and quizzes. It’s actually fun.
"Please help" is a terrible title for a post. &gt; I used: var studyYearIndex: Int! but to no avail. What does this even mean? Where's your [MCVE](https://stackoverflow.com/help/mcve)?
Tech job postings are always bad, but iOS seems to bring out the worst of the worst. &gt; working with a software development company that specializes in creating transportation technology that touches a very large user base. *I* know what company we're talking about, and *you* know what company we're talking about, but *they* don't want me to say their name. **wink, wink, nod, nod** Hopefully this job posting will get past the people who just do a search and exclude that company name (because their reputation is in the shitter). &gt; Strong knowledge of large and complex code bases and architectures Like, any codebases in particular? Or you just want someone who will happily deal with the "large and complex" crapfest your previous programmers have gotten you into? &gt; Our client has a growing development office set up in Seattle and is looking to scale their international infrastructure to meet the demands in a competitive 'gig economy' industry. I love this. We're building tools for employing short-term workers ... but we want to hire *you* full-time. It's a good enough system to exploit low-paid workers, but it's not good enough to actually get real work done. &gt; Our client firmly believes in hiring engineers who have strong CS fundamentals that have a "right tool for the right problem" mentality. Maybe you wouldn't have to offer such a high salary if the rest of your requirements weren't so sad. Good luck finding the right tool to work for you.
That is a variable I used so the code can know which section it has been pushed from, in order to display units associated with the current index(study year), the sections have study courses in them as shown in the attached picture, and in those sections there are studyYears, again as in the attached picture...I provided a bit of code with the units information.
What happens if this call doesn't execute instantaneously? You could have items in your list which are older than items which were filtered out. Use a constant.
Definitely a concern, I was trying to illustrate a point. Honestly I’m not even sure if that is the problem due to the limited amount of informations. 
I’m busy [writing a book about it](https://www.hackingwithswift.com/store/server-side-swift) right now (out at the end of the month!), but be warned: Vapor 3 changes almost *everything*. 
Will the book be based on Vapor 3?
Yep! All Swift 4, all Vapor 3. 
Can’t wait for this! Preordered! 
All of these are great resources, I’d like to add iOS Programming: The Big Nerd Ranch Guide
While series of tutorials [here](https://geeks.brokenhands.io/vapor-tutorials/) 
Judging by your username I get that you don't like Vapor at all
I'm developing my first iOS app for a local gym, with things such as member login, how busy the gym is, member session histories and progress picture uploading. Really enjoying learning Swift.
Your questions is... vague at best. I'd recommend you to browse through popular questions and see how they're asked. Are you using this in iOS or Mac app or just playing on command line? What code line is causing you trouble? Or are you asking for help how to structure your code and haven't wrote anything yet?
Appreciate it 
Every Xcode release: https://img.devrant.com/devrant/rant/r_906244_KpaUJ.jpg
Already ordered! 
&gt; That is a variable I used so the code can *What* code?
This is, without question, the one single thing I’m looking to most for the rest of this year! I tried to get into Vapor before but the docs weren’t helpful. I’m sure they were complete, simply not joined together. Having learned so much from your other Swift books, I was thrilled to see you split the server books up and are covering Vapor on its on. If you’re looking for early testers or proof readers, count me in! p.s. how many times have you typed Vapour and had to correct it so far? :)
I’m glad to hear you’re looking forward to the book! I certainly am too – although I’m trying to keep the two books the same where possible so that folks can learn both, Vapor has so many features such as Fluent that make it great fun to work with. &gt; p.s. how many times have you typed Vapour and had to correct it so far? :) I used to write all my books in British English, but without fail I’d get an email from an American reader once every 10-14 days telling me I had spelled something “wrong”. So, I switched my Mac and all my books to US spellings, and haven’t had a complaint since! It took me a few weeks to relearn spellings, but it’s definitely saved more time overall :)
As an American, I think the proper thing to do is to just ignore the emails. That's what we'd do if the situation were reversed.
That’s certainly possible! But it’s OK, and I really don’t mind. I try to focus on Swift and writing; American vs British English is a bit of a bagatelle. 
thank you, ill take a look at it. 
Thank you.
What's wrong with the docs on the official website? https://vapor.codes/ [2.0 Tutorial](https://docs.vapor.codes/2.0/getting-started/hello-world/) [2.0 Documentation](https://docs.vapor.codes/2.0/)
Ehhh I was looking for different sources then the docs
Ideas are worthless. It's all about execution. If your idea is really that good no one will be able to execute it better than you can. So keeping your idea to yourself is pointless if you're asking for help. And you're right, this isn't the right place for this type of question.
ok, but I'm still confused. What's wrong with the official docs? Maybe it's a personality difference but I just don't understand the appeal of reading long books when there are official docs and tutorials?
I rather tutorials tbh. Just personal preference 
It's for iOS app...I have edited the question and included my codes. Check and see if it's comprehensible to you now. Below is the link [stackoverflow ](https://stackoverflow.com/questions/47651526/errors-cannot-convert-value-of-type-section-to-expected-argument-type-string) 
Here is the edited question: [stackoverflow ](https://stackoverflow.com/questions/47651526/errors-cannot-convert-value-of-type-section-to-expected-argument-type-string) is the link attached 
TL;DR of why Vapor 3 is so different?
Now much better! I assume your current code works and you see the data in the table. And you're already familiar with UITableView's DataSource. Next, look into UITableView's Delegate and corresponding UITableViewDelegate protocol. It will have methods you need to respond to user actions. You can fish out the correct data for clicked cell same way as you do for displaying it. I'd recommend to create a function for this to avoid duplicate code. On top of that, I'd suggest you to look into Structs. Array-in-array is evil. Structs are much more readable.
Looking forward to it! Pre-ordered :D
It's a complete rewrite to take into account all the changes of Swift 4 (mainly `Codable`) and also plan ahead for future async changes. Right now Vapor 3 feels about half the size of Vapor 2 – there's significantly less messing around with things like `Node`, for example.
Thanks for your support!
Awesome!
The code fails to build, I get the errors stated in my question title...it is actually the function to fish out the correct data that's an issue to me. Can you suggest how to do that according to my code?
Which line are you getting the error at? Could you try to formulate in words what that error say? Sorry if I sound like an ass. But I want to guide you to finding the problem yourself. Rather than just tell you what to fix :)
Your ` let unitsData = [...]` is `[[[String]]]` not ´[[String]]`. So to access the string you need to `unitsData[0][0][0]` not just `units[0][0]`. But I think you only need it to be nested once. Like this let unitsData: [[String]] = [ ["fee101","fee111","fee121","fee131","fee141","fee151","fee161","fee102","fee112","fee122","fee132","fee142","fee152","fee162"],["fee201","fee221","fee231","fee241","fee251","fee261","fee271","fee281","fee202","fee222","fee232","fee242","fee252","fee262","fee272","fee282"],["fee301","fee321","fee331","fee341","fee351","fee361","fee371","fee381","fee302","fee322","fee332","fee342","fee352","fee362","fee372","fee382"],["fee401","fee411","fee421","fee431","fee441","fee451","fee471","fee481","fee402","fee412","fee422","fee432","fee442","fee452","fee472","fee482"],["fee501","fee511","fee521","fee531","fee541","fee551","fee560","fee571","fee591","fee502","fee512","fee522","fee532","fee542","fee552","fee560","fee582","fee592"], ["fce101","fce131","fce161","fce163","fce165","fce181","fce103","fce132","fce162","fce164","fce166","fce182"], ["fce201","fce231","fce211","fce245","fce251","fce261","fce265","fce232","fce242","fce222","fce246","fce262","fce272"], ["fce301","fce311","fce321","fce331","fce341","fce351","fce361","fce302","fce312","fce322","fce332","fce342","fce352","fce362","fce392"], ["fce401","fce411","fce421","fce425","fce431","fce451","fce461","fce481","fce402","fce412","fce422","fce426","fce432","fce446","fce472"], ["fce581","fce511","fce525","fce531","fce545","fce571","fce564","fce590","fce512","fce526","fce532","fce572","fce552"], ["fme169","fme111","fme151","fme161","fme171","fme173","fme112","fme152","fme165","fme166","fme167","fme168","fme172","fme174","fme182"],["fme201","fme211","fme251","fme261","fme271","fme281","fme291","fme202","fme212","fme222","fme244","fme252","fme262","fme272"],["fme301","fme311","fme321","fme331","fme343","fme351","fme371","fme363","fme391","fme302","fme312","fme322","fme332","fme344","fme352","fme362","fme372"],["fme411","fme431","fme432","fme452","fme471","fme472","fme492","fme401","fme421","fme422","fme441","fme442","fme461","fme462"],["fme511","fme521","fme531","fme541","fme551","fme561","fme581","fme502","fme503","fme504","fme513","fme523","fme524","fme525","fme533","fme524","fme542","fme543","fme544","fme545","fme552"] ]
I already highlighted that line the question, the line saying: cell.textLable?.text= unitsData[sectionIndex][indexPath.row] The error I get is: cannot assign value of type '[string]' to type 'String?'
I edited the question 
I know ideas are worthless, I have a bit of programming background and I know the implementation of it would be really easy to copy and maybe someone could potentially hijack it before its birth. I know its all about execution and I’ll work in polishing the idea and studing better the market. But I think your answer is valid and I’ll take that piece of advice. Thank you for your time.
Let's walk through the error. Could you tell in your own words what you think that error says? Please explain it word-by-word if you can.
The details from the crash report would be useful here - any exception message and the backtrace from the thread that crashed at least. Otherwise you're asking us to go off and look up a code example and speculate on what could be causing the crash. Much easier to have the reason and work from there. 
I chose Clean Swift instead. Better resources.
I think the error is because there is no clear way of the app knowing the course and which year of study the user has selected In my code I've tried using the variable, "var sectionsIndex: int! " To do that, I also tried something like, "var section[yearOfStudy]Index: Int! " to no avail. The array of units is inside a study year, which is inside a course. There are five courses and each has five study years, in each study year for the respective courses there is an array of units which I want displayed in a table view when one taps on a study year of their choice under their course. 
In general yes. But can you tell me what the error says word by word? That'll help you to debug the issue a lot :)
Cannot assign value of type '[String]' to type 'String?' The above is the error word by word 
The error says and I quote word for word "cannot assign value of type '[String]' to type 'String?' " 
I was asking you to tell in your on words what it means :) I wonder wether you understand correctly what the error says and what [String] or String? means.
Oh! Sorry...i only understand that the error abounds due to the way my arrays are intertwined inside one another minus a proper way of accessing what is required...[string] should mean a array of arrays and string? I think means an optional string 
There's some Indie programmers here that might be able to offer some advice, but generally this is for programming. The advice for the programming part for iOS is probably going to be to learn Swift and program for iOS using Swift. Get an account, tutorials, books, test device and start learning Swift. The legal and other things, we really can't say much without having some specific and even then it's just programmers. At some point, you start to realize the amount of work it'll take to make something happen. You might want to give a legal forum a shot. One option is to just go ahead and build it. Swift is the primary option for iOS, Kotlin is a good option for Android and Kotlin looks like Swift.
Exactly. So you're trying to set array to some attribute that expects single optional string. Move that lookup above the erroneous row or separate function. Then add either NSLog() or breakpoint to see the value. Also, I'd strongly suggest you to use more verbose naming. E.g. you're using "courses" for string. It sounds like array, but is actually a string. Use "courseName" instead. Meanwhile "yearOfGraduation" sounds like a string, but is actually an array of strings. Use "graduationYears" instead. And don't try to cram as much as possible into a single line. Lookup data in one row, set it to something in another row. Especially as you're running into problems. Code will be much more clear to read.
Ok, but it's `unitsData` is still a `[[[String]]]` and you try to access `unitsData[0][0]` which is a array of strings, not a string. `unitsData[0][0][0]` is a string.
Thank you very much, I had this idea yesterday and today, after a lot of feedback, I've started to put everything I'm going to need on the paper. On the programming side, I might pay someone to do it since the biggest part is going to be management of this project. And yeah, I'm starting to realize that is not SO SIMPLE as I imagined but still very doable. Thank you very much for the feedback!
ok added, thanks 
You might want to hire the programmers in small sections and learn to code either way. The reason is that with a small job of say a few hundred dollars, you can get a section done, eval the quality of the code, then hire someone else or have them continue. Beware of the quality, there's been all kinds of horror stories out there.
Yeah, so in english it says: &gt; Cannot assign an array of `String` to a variable of type `Optional String` Does that make it clearer? They're different types. Just like you can't assign an `Int` to a variable of type `String`, you also cannot assign a `[String]` to a variable of type `String?`
Before you go down that road, make sure you have a clear understanding (or as clear as one could reasonably have, really) of the [App Store Review Guidelines](https://developer.apple.com/app-store/review/guidelines/), specifically this: &gt;2.5.2 Apps should be self-contained in their bundles, and may not read or write data outside the designated container area, nor may they download, install, or execute code, including other apps. Educational apps designed to teach, develop, or allow students to test executable code may, in limited circumstances, download code provided that such code is not used for other purposes. Such apps must make the source code provided by the Application completely viewable and editable by the user."
Yeah, I don’t have a Mac to work with Xcode but learning swift can be done in any machine, I would have only to find a way to compile it, and there’s always the hackingtoshs. The quality is really important, as the visual. I used to do some coding with C and C++ and boye you do not want to fuzz around those codes, those are some nightmare codes right there. My idea would use a couple of templates, so once the idea is up and running I’m hoping to be able to handle things better. Thank you for your time and the help!
The reason it's failing is in the message: Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: ' -[NSDictionaryM setObject:forKeyedSubscript:]: key cannot be nil' You, or the framework, are trying to set a nil key in a dictionary, and that's causing an exception which causes the crash. If you look down the call stack, the first three items are just the exception being raised: 0 CoreFoundation 0x00000001118221cb __exceptionPreprocess + 171 1 libobjc.A.dylib 0x000000010d3c5f41 objc_exception_throw + 48 2 CoreFoundation 0x0000000111861e8c _CFThrowFormattedException + 194 Then the method that caused the exception: 3 CoreFoundation 0x00000001118c723f -[NSDictionaryM setObject:forKeyedSubscript:] + 927 And, *then* the method that tried to use a nil key in the dictionary: 4 EventKitUI 0x000000010df73c42 -[EKUISemiConstantCache birthdayImageForFont:withColor:] + 442 This is an EventKit method, so if you're not calling it directly, we look further down the call stack. We see it's trying to extract a tableView cell for the Calendar Chooser: 6 EventKitUI 0x000000010e0d0729 -[EKCalendarChooser tableView:cellForRowAtIndexPath:] + 2083 And this is being called as it's trying to reload this table view as a consequence of: 10 UIKit 0x000000010edc5a5f -[UITableView layoutSubviews] + 176 Ok, so that's deep in the EventKit framework, and without a direct call from you seeming to be the cause, unless you're using the framework incorrectly, which makes this tricky... Let's try a google search, with what we know so far: EKCalendarChooser crash nil key And the top hit is [this](https://stackoverflow.com/questions/47048566/ekcalendarchooser-crashes-on-ios11-1), which looks similar to the problem you're having. 
Sweet!
I've been working on a hackintosh for about 9 years now. Just make sure you pick the right equipment, they have lists of known working combos. You'll need OSX Sierra for iOS 11 and probably want an iPhone6S min. I saved a ton on mine and the upside is that I also use it for Android. So you save a ton, you can reuse parts from your current machine (maybe all) and spend some extra on RAM and SSD, maybe even double monitor.
Second this. It's also a good reference when you start playing around on your own.
I would suggest trying to find a project topic which excites you. From there, find an API which can provide the data and learn how to create a TableView based master detail app. This will help you struggle through the complexity and frustration. 
I'd like to know as well!
the fact that you need a helper method per use case to make it not fugly and verbose. Granted, your example is a nice ergonomic way of wallpapering over rough API for your one use case, but it's still a far cry from some other language's really concise, powerful regex capabilities. Try writing a swift one liner that uppercases the first letter of each word, or that strips whitespace preceeding commas. To some extent it's also about the methods on string(like ruby's gsub) and how nicely they play with regexes. Swift's string manipulation can be pretty awkward for a lot of use cases.
Tableview has this. Not sure if that is what is shown. Look up how to add a delete or copy button by sliding. It’s all customizable. 
Thanks! I've never used Rails so I'm not sure what other languages offer. I never used Regex's until my current job and that was only in Objective-C and Swift, so I'm not sure how other languages implement it. I figured I was missing something since everyone seems to complain about it. 
Your easy mainstream choices for android dev are java and, sort of, kotlin. Other JVM languages are doable but more difficult. Ruby and other non-JVM languages are gong to be a real pain for a beginner, even if they are technically doable. I'd go with kotlin because it's a lot better than java and is almost as well supported as java(which was long the only officially supported choice)
My two examples above would be(if my super rusty ruby memory serves) someString.gsub(/\s+,/, ",") someString.gsub(/\w+/) { |word| word.capitalize } This kind of thing lets you do some moderately complex text processing with some tiny adhoc snippets of code. Of course we do precious little text processing in ios land.
Yup, for iOS 11 it's [UISwipeActionsConfiguration](https://developer.apple.com/documentation/uikit/uiswipeactionsconfiguration)
Man, hackintosh sure is confusing to know what is and what isn't compatible. Everyone says "these days, any machine can work with hackintosh". This is my current rig: i5 750 Radeon 5750 Motherboard ASUSTeK P7P55D Deluxe 12 GB of RAM Thermaltake PP-600AH2NH Is it anything like yours? Currently use my PC to play games and edit photos and videos. But I see no problem in ditch the games. 
Thanks for trying to help, I'll try to get more understanding of these things
Thanks for your insights, let me read on related stuff before attempting tricky projects as a newbie 
I'll take that into account. Thanks 
It's a shame that new iTunes U content is only available on the iPhone and iPad apps. I'd love to follow the latest version of the course, updated for iOS11 and Swift 4, but I don't own an iPad and I'm not going to buy one just to take the course.
for a good overview - https://www.udemy.com/ios-11-app-development-bootcamp/
I'm not sure what your needs are, but if the order of the items isn't important, you could consider using https://developer.apple.com/documentation/foundation/nscountedset
If you mostly have runs of a decent length, that sounds like you could easily convert that array into an [RLE format](https://en.wikipedia.org/wiki/Run-length_encoding). I.e. instead of tracking each number, store the number once and then how often it is repeated. So [4,6,6,6,6,6,6,6,4,4,4] could be [(4,1),(6,7),(4,3)] (using tuples here). It’s a very simple compression scheme but immediately gives you what you’re looking for. And especially if you have a good average run length the RLE is probably compact enough that you can just keep it in memory, and when you iterate through the new array for change you just count each run and see if it matches the expected value. Make sense?
How do? What does that mean?
I have created an educational project to train graduate students in effective scientific writing collaboration. The project has a bold final aim, however is now a simple script that anonymously rotates papers between students so that the recipient becomes a reviewer to the sender. The project is hosted here: https://github.com/lf-araujo/collab
All you care about is when a number at an index is a different value from the one before it. If it isn't, increment its count by 1. So, you really are interested in each "run" of a number, as the other reply indicated. If you only have numbers from 0 - 9, the count of the current run is easy. Create an array where each number in the array is the current run count of the number at that array index. When the number changes, you reset the count to 0 at the index of the new number found in the storage array. You could also do it with a dictionary where the dictionary key is the number and the value is an NSNumber of the current count of your number run. 
Going down the standard checklist: ``` - [ ] You didn't paste any source code. - [X] You pasted some source code but it's not a working program - [X] Your pasted source code doesn't demonstrate the problem - [ ] You don't say what's wrong - [X] You say there's a crash but not where or what the crash is ``` Conclusion: the problem is in the part of your code that you didn't show us.
No, mine was near top of the line custom for 2010, but it actually still works really well. You can look it up at TonyMacX86, but even if it's not there, you can give it a try. Be careful to use a new SSD and back up everything. My upgrade to Sierra cost me a drive and if I setup USB3 on, it wipes out all my bios and locks me out :D I still don't have sound, but I only care about getting work done, and it does work.
As icestep pointed out, what you described is called Run Length Encoding. It's quite simple to element, check it out: let input = [ // generic, can be any type, including just `Ints` "a", "b", "b", "c", "c", "c" ] extension Array where Element: Equatable { func runLengthEncode() -&gt; [(element: Element, count: Int)] { guard let first = self.first else { return [] } var result = [(element: Element, count: Int)]() var inProgress = (element: first, count: 1) for element in self { if element != inProgress.element { result.append(inProgress) inProgress = (element: element, count: 1) } else { inProgress.count += 1 } } result.append(inProgress) return result } } func runLengthDecode&lt;T: Equatable&gt;(_ runLengthEncoding: [(element: T, count: Int)]) -&gt; [T] { return runLengthEncoding.flatMap{ repeatElement($0.element, count: $0.count)} } let runLengthEncoding = input.runLengthEncode() print(runLengthEncoding) // =&gt; [(element: "a", count: 2), (element: "b", count: 2), (element: "c", count: 3)] print(runLengthDecode(runLengthEncoding)) // =&gt; ["a", "a", "b", "b", "c", "c", "c"]
As icestep pointed out, what you described is called Run Length Encoding. It's quite simple to element, check it out: let input = [ // generic, can be any type, including just `Ints` "a", "b", "b", "c", "c", "c" ] extension Array where Element: Equatable { func runLengthEncode() -&gt; [(element: Element, count: Int)] { guard let first = self.first else { return [] } var result = [(element: Element, count: Int)]() var inProgress = (element: first, count: 1) for element in self { if element != inProgress.element { result.append(inProgress) inProgress = (element: element, count: 1) } else { inProgress.count += 1 } } result.append(inProgress) return result } } func runLengthDecode&lt;T: Equatable&gt;(_ runLengthEncoding: [(element: T, count: Int)]) -&gt; [T] { return runLengthEncoding.flatMap{ repeatElement($0.element, count: $0.count)} } let runLengthEncoding = input.runLengthEncode() print(runLengthEncoding) // =&gt; [(element: "a", count: 2), (element: "b", count: 2), (element: "c", count: 3)] print(runLengthDecode(runLengthEncoding)) // =&gt; ["a", "a", "b", "b", "c", "c", "c"]
Fair enough, I have rephrased the question. It's rather a design pattern question. Hopefully better now?
GCD doesn't guarantee that functions are called in same thread. Seems, you need to detach a thread and work there. 
Here is an example if you need it. It won't do exactly what you see but this is basically how to add the Delete and Copy feature to a UITableView when the row is swiped. The .destructive style will default to red color. func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -&gt; Bool { return true } func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -&gt; [UITableViewRowAction]? { let delete = UITableViewRowAction(style: .destructive, title: "Delete") { (action, indexPath) in self.selectedItem = (tableItemList[(indexPath as NSIndexPath).row])! self.deleteRowOnSwipe() print("deleteThis") } let copy = UITableViewRowAction(style: .normal, title: "Copy") { (action, indexPath) in self.tableSelectedItem = (tableItemList[(indexPath as NSIndexPath).row])! self.copyRowOnSwipe() } copy.backgroundColor = UIColor.blue return [delete, copy] } So you could have a one row UITableView with a custom cell to create the text and video, implement this code but customize the row actions, and achieve what's in the video. 
So it's like spawning a new Thread class and using semaphores and/or locks? Is there a simpler higher level API for this kind of situation?
And since iOS 11 barely works even for remote notifications 
Add the permission to play audio in the background. Play silent audio to keep your app alive. VoIP entitlements also give you similar abilities. 
LOL! Yeah well, there’s that too. ;-)
Thanks, this was a very helpful post. Been stumped on value Vs reference 
Queues and threads are not the same and do not map cleanly one-to-one. Many threads make up multiple thread pools, and a queue uses one or more thread pools. If the library wants a specifically **thread**-safe invocation, you should create a single worker thread and queue operations to an array, more or less a multiple producer single consumer design. Performance improvements could include a sleep timer, where if your thread wakes up every 1s to check for jobs, and it fails to start a job after 30 checks, it shuts down, and when a new job is submitted and the thread is not awake, it is then spawned. Should be somewhat simple to design but I make no guarantees on its bug safety. :) 
It appears that you are synchronising only per call when the order of calls is important. This breaks if the queue is concurrent. But even if it is a serial queue, it still depends on your logic being serial. TBH in cases like this, it would be better off to confine all relevant logic to a particular thread, not just synchronising individual calls.
I ain't gonna lie, it's probably going to be a lot of typing. That's most certainly a custom interaction. I would probably start out with a scroll view and a view for each state on either side of the main view. on `scrollViewDidScroll` in the delegate, check your offset and update the views as appropriate.
You won't be able to do this for iOS, but MacOS is fair game. You just won't be able to distribute through the MAS, which no one likes to do any more anyway. https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html#//apple_ref/doc/uid/10000165i
Are you too stupid to read properly now? Is that how you advance?
It's hard to help without seeing some code. Are you able to post some for more context?
[removed]
Seriously? You've been working professionally on a hackintosh? You must have some stories to tell. 
What made you take the leap to do an Android version? Customer demand?
Android is the majority in my target market. For free apps this is important to capture a majority. 
Post a screenshot of the code so that we can trace through it.
let allCoordinates = world.allPossibleCoordinates var heights: [Int] = [] var index = 0 for coordinate in all coordinate { if index == height.count { index = 0 } for i in 1...20 { let localNumber = randomInt(from: 0, to: 17) height.append(localNumber) }
ah sorry reddit doesn't allow me to post it on this Post
[removed]
Stories about how to upgrade the system over some 9 years? Yea, it sucks! This last upgrade wiped out my bios and it took about an hour for each reboot. It's a dual BIOS machine, but takes some 40 min to reset the BIOS. I had to go thru all the options until I found that not having the USB 3.0 turned on in BIOS made it work. I've lost 4 drives in the last upgrade for no known reason, and it took nearly a month to complete the upgrade. I had to find a 2G USB to upgrade the MB because it won't see anything over 2G. Once I had it running, it wouldn't download Xcode 9 because it couldn't validate it. So I tried to download Xcode 9 under the prior version and it wouldn't do it. I hate the upgrade process, but once it's running, it's pretty stable. I just don't upgrade unless I have to. The upside is that you can spend your money on RAM, CPU, SSD, etc... and have a real screaming machine for about 1/2 or less of what Apple wants for it.
Most excellent. Apple needs something like this in their official documentation.
It seems you are having troubles with programming basics. What book are you reading from?
Yeah, Apple hardware is underpowered for the money. I had to buy a little Intel NUC instead of a Mac Mini, because the mini is Ancient (capital-A) nowadays and unfortunately it runs Windows. I'm kinda looking at the hackintosh route, which seems to be doable. But I'm not sure whether I get enough fun out of that...
umm electron App? Called Swift Playground
I don't know what is `world.allPossibleCoordinates` so it's hard to tell what `allCoordinates` is. `heights` appears to be an array of integers. `heights.count` is how many elements in the array. 
ah world.allPossibleCoordinate, is being able to scan/place/destroy all blocks, that are on a coordinate
ah ty
Why? Value/referense semantics, cow, memberwise copy/initialization are all general programming behaviors.
The only thing I miss about the Hackintosh is that I used to play a video game and it's setup for Windows and now I only play it a few times a year. That's kind of a good thing as I tend to become addicted to things, so I avoid things out of fear of becoming addicted :D However, I've played video games about 5 times over the last 6 years or so, kinda miss it. The macOS is great, it's stable, it's WAY faster than Windows. The last few times I booted Windows it was DOG slow. Apple make a TON of money by selling outdated equipment at top prices and that's always bothered me. Their whole "pay thru the nose for yesteryear's tech" combined with "sorry, it's too old, you'll have to buy a new one" is really just a huge money making scam. The next one I build will be probably be a real screamer with dual monitors. The other thing I want is a very fast notebook running macOS. Something in the MacbookPro retina range with a nice sized SSD and packed with ram. You can probably cut the price in 1/2 over a MacbookPro and have it dual boot.
I'm Dutch, and do NOT pick Amsterdam, rather, pick Almere, Utrecht or any other major city in our Country. Amsterdam is horrendously expensive in terms of housing because of a huge housing shortage. 
thanks, you mean if i get a permission from user using kinds of pop-up, then I can get the those information
Perhaps so, but being corrupted for the last 20 years by COBOL, which essentially only has value types, it’s quite useful to me.
Naa this was added as part of iOS 11. 
I don't think the behavior is identical, it presents multiple options instead of changing the current one based on distance, like mail, right?
Great stuff! Thanks for the thorough write up. Definitely makes things clearer.
I'm glad you like it! 
I think it is important to clarify that Swift does \*not\* guarantee the order in which struct properties appear in memory. The article incorrectly states that properties are laid out in declaration order. In fact, the Swift compiler is allowed to rearrange properties when laying out a struct in memory. I have not tested to see if Swift \*currently\* does any such rearranging, but it is certainly permitted to. For example, if a struct is declared with properties of type Bool, Int, and Bool, in that order, it is entirely possible that the compiler might choose to lay it out with the Int first and then the two Bools, to reduce the amount of padding involved.
Thank you for pointing that out! I wasn't aware of this. I'll correct it.
Queues are not threads. You’re asking for a short summary on a massive topic. I suggest sitting down and reading a few chapters in a book on threading APIs. 
There's one case that is guaranteed, right? The main queue is always serviced by the main thread, IIRC.
I created a new project to try again. Now I'm getting "No such module "CryptoSwift". 
I REALLY like Apple's "App Development with Swift", which is available for free. I've tried "Hacking with Swift" and Ray Wenderlich's stuff but I found that their teaching style doesn't mesh well with me (though the sheer amount of recommendations they receive is a testament as to how well they serve others). I like A.D.w.S. because it teaches a little theory first before making you work with the concepts hands on. 
It's definitely not perfect. I didn't know I could actually lose my HD or even have my bios wiped. Thank you for the heads up!
Factorial 5 is the same as 5*4*3*2*1. Programmatically you could hard code that in but then you have a function for fiveFactorial. Now what if you have a need to do 7 factorial? Do you write a new function for every option? Do you write extremely long and verbose code to satisfy that need? Or do you make very simple blanket statements that can be altered with a changing parameter? Basically in this example you would type in Factorial(n: 5) and behind the scenes you want to iterate through that multiplication process for each integer. This allows this small bit of code to work for n=5 n=500 n=27 and every other integer value.
 let res = n * factorial(n: n-1) because factorial(n: n-1) is a function. it is just calling the factorial function over and over within itself until n = 1. 
&gt; return 1 Thanks. How does the return 1 come into play once the value of n == 1? How/Where is the Int 1 that is returned used?
when n == 1 it will just return 1 and the function is finished running. it is used the same way res is used. Without that check the function would just run forever. 
Got it...could it just as easily have Return 23 or 0 or some other random Int? Is there is a reason for the return value being 1?
Its 1 because Fib(1) = 1 
Makes sense, thank you for the explanation. I'm looking at the Fib recursive function and trying to make sense of it's multiple iterations now. A little more complex, but applying the logic above in terms of how things are called to this which is a bit more confusing since it calls itself twice: return fibonacci(i - 1) + fibonacci(i - 2)
https://www.youtube.com/watch?v=KEEKn7Me-ms this video explains it well. this algorithm is the brute force method for getting the Fib sequence and shouldn't really be used. 
VERY helpful in understanding the output of the fib function, and the real world example was extremely helpful as well. I was using a fib(5) as an example, and looking at the stack over flow explanation it had the following: fib(5) =&gt; fib(4) + fib(3) fib(5) =&gt; (fib(3) + (fib(2)) + (fib(2) + fib(1)) fib(5) =&gt; ((fib(2) + fib(1)) + (fib(1) + fib(0))) + ((fib(1) + fib(0)) +1) fib(5) =&gt; (((fib(1) + fib(0)) + fib(1)) + (fib(1) + fib(0))) + ((fib(1) + fib(0)) +1) fib(5) =&gt; (((1 + 0) + 1) + (1 + 0)) + (1 + 0) +1) fib(5) =&gt; 5 This had me lost but seeing the visual representation made it click.
Just FYI there's some typos in the resume on your website: - self-tault - Buiness - Motorcyles
Sleep timer wouldn't work well as the library performing math calculations and speed is paramount. I have tried `DispatchSemaphore` but it's not a great thing for multi-threaded data passing, things fall out of sync very quickly past trivial cases. Mutexes is the way to go, people say, working on that...
Yep, this is what I am trying to achieve, one thread handling incoming requests. Sounds easy in practice yet Swift doesn't offer much help here. If that would be Go, using a channel is all it takes. Surely I could just use notifications but I need much lower latency.
First screenshot in the readme has a typo too. “Moile “
Yeah, yeah, I get it... what's the point in asking for help anyway :) 
I just spent a few days having a blast with Codable! Since I haven't seen much posted about it, I created a short set of snippets for others to learn from... because, wouldn't it be cool if you could do something like this: var myArray: [Records] = [] myArray.load(from: filename) 
Check whether you're typing with the correct case. Also add it to your used frameworks in the project menu for your target. You'll need to do a build (or run &amp; build) of your project, too.
For command line apps Homebrew is probably the easiest way. It's like apt-get on Ubuntu. For example, see this post: http://kylebebak.github.io/post/distribute-program-via-homebrew Good discussion: https://news.ycombinator.com/item?id=11105027 or just search for "distribute with homebrew"
Mutexes are just 1-slot semaphores. I'm not sure why you think they would be functionally different? I think you misunderstand why I suggested a semaphore: it's not to be used on its own, but in consort with the Thread + Queue design I proposed. Things don't just "fall out of sync" unless you are allowing them to.
I'm not marking this fixed because I still don't know what fixed this. I removed and readded it several times, clicking different options during the process until it worked.
Thanks!
If this is the case then are Swift structs not always bit-compatible with C structs?
Recursion works by repeatedly performing the same action repeatedly on smaller and smaller problems until a **base case** is reached. The base case says “this is the simplest version of our problem, we can’t reduce it anymore”. For example, the recursive factorial code solves 5! By simply recognising that 5! is just 5 x 4! And 4! is just 4 x 3! Which is 3 x 2! Which is 2 x 1! We know that 1! is a special case that simply equals 1. 1! is this a base case because it’s the simplest version, or “ground floor”, of our problem. We can thus have a factorial function that solves n! By repeatedly computing n * (n - 1)! until it finds 1! Thus 5! is... 5 x factorial(4) x factorial(3) x factorial(2) x factorial(1)
Well, if you have a compiled binary that runs on your computer, the easiest thing would be to configure it to be a service on that computer. On Linux, that’s systemd, and on Mac it’s launchd. Either way, a configuration file tells the OS when and how to launch the program (like which user launches the process, and thus what permissions it has) and options for things like restarting, graceful shutdown, etc. I’ve found the Linux version to be easier, but either way you can find and modify a template to get you started. 
Not using UIImagePickerController is probably the best its simple to make a Camera these days, the only thing is most bank apps will actually detect the cheque, all you want to do is hope the user does it right
Very right. Swift struct layout != C struct layout. They're often the same, but far from always. Based on who Swift is hiring + it's influences + sanity, Swift will likely get it's equivalent of https://doc.rust-lang.org/beta/nomicon/other-reprs.html at some point, but not yet.
Thank you!
Xcode is balls. It takes ages to index things, and makes no effort to re-compile after any failures. Sometimes you never find the exact fix.
I'm having some trouble understanding recursive functions.
Device uuid? 
Sweet - the value persists and doesn't change over time?
Yeah, obviously if a user got a new phone though they’d need a new account. What about using CloudKit? 
Device UUID sounds perfect, thanks!
Apple disallows the use of device UDID in appstores apps for privacy reasons. If the users are all in your organization and you have an enterprise developer account then they can install the app outside the appstore and you're fine. For appstore apps you can use the ADID (advertising identifier) but users can reset the advertising ID through settings and if the app is reinstalled it'll get reset. Your safest bet is to have a user login. The first time assign them a GUID on the server and send it up. Any subsequent time if missing ask for it from the server. One advantage is it'll be the same even if user switches phones.
I’d be more inclined to use vendor ID instead. 
What I have done is make a UUID and save that into the keychain and set it to current device only
If you prefer GCD, you can move your all operations into one block, in this case whole block is called in one thread. Detaching NSThread is very simple. NSConditionLock is semaphore. NSlock is mutex. 
I don't know, but I'm also rooting for it yeah!
Be careful with device UUID. It can change at any time. For example, if the user deletes and reinstalls your app, iOS will tell your app that the UUID is different.
I suppose the progress can be tracked here: https://github.com/kripken/emscripten/issues/2427
Step through it in the debugger.
Pass the handler as a parameter to the function that presents the UIAlertController and call it with the appropriate response when setting up the alert’s actions 
Firrbase can do this (anonymous accounts). Even after deleting and reinstalling the app on the same phone.
Apple no longer accepts apps the utilize the device UUID. But if you need to identify an app across installs you can generate a UUID and store it in the app keychain. The keychain persists across installs and can even be stored in iCloud across devices if you want. 
Lovely. I manage to actually crash the thing when adding or removing frameworks. 
I've updated the code in pastebin with what i"m assuming is the way you've instructed. However it still doesn't seem to make the connection.
It depends, if the struct you show here is the struct to be used in your UI, I would suggest to create a number of structs as DTO's (Domain Temporay Object.) That represent the actual JSON and turn those into your struct. This page helped me a lot: https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types
Maybe I’m seeing the old version but I don’t see any code in the alert’s delegate apart from method declarations. Assign the invitationHandler to a property in your custom alert controller and call it in those two methods that correspond to button clicks
You are a beautiful person. That worked perfectly and so simple. Thank you.
No problem, happy coding :]
I think I understand it now, but curious, is there a debug mode in Playground, or it only available for a project?
Could you upload an example of the JSON?
Thanks /u/mb_zeppin! I picked this up from the video that /u/6e696767617320 posted (https://www.youtube.com/watch?v=KEEKn7Me-ms). The 2nd part of that video that breaks it down visually really helped me understand the importance of the base case. Your explanation above helps solidify my understanding.
Sure, { "overallteamstandings": { "lastUpdatedOn": "2017-12-10 2:29:19 AM", "teamstandingsentry": [ { "team": { "ID": "109", "City": "Houston", "Name": "Rockets", "Abbreviation": "HOU" }, "rank": "1", "stats": { "GamesPlayed": { "@abbreviation": "G", "#text": "24" }, "Wins": { "@category": "Standings", "@abbreviation": "W", "#text": "20" }, "Losses": { "@category": "Standings", "@abbreviation": "L", "#text": "4" } } }, { "team": { "ID": "82", "City": "Boston", "Name": "Celtics", "Abbreviation": "BOS" }, "rank": "2", "stats": { "GamesPlayed": { "@abbreviation": "G", "#text": "27" }, "Wins": { "@category": "Standings", "@abbreviation": "W", "#text": "22" }, "Losses": { "@category": "Standings", "@abbreviation": "L", "#text": "5" } } }, { "team": { "ID": "101", "City": "Golden State", "Name": "Warriors", "Abbreviation": "GSW" }, "rank": "3", "stats": { "GamesPlayed": { "@abbreviation": "G", "#text": "27" }, "Wins": { "@category": "Standings", "@abbreviation": "W", "#text": "21" }, "Losses": { "@category": "Standings", "@abbreviation": "L", "#text": "6" } } } ] } }
So when you import a C header in to Swift, might Swift have to re-arrange some of the fields? Or are there simply cases where it cannot be done?
Unfortunately, yes. That's why I keep a "Playground project" around, to be able to quickly transplant in playground code whenever I need to use the debugger 
Is WASM a binary format like an x86 exe?
Here your solution: https://gist.github.com/z4r/fb3549083c50f5b92818993141a8defe Enjoy
This will get you on the right path [](https://benscheirman.com/2017/06/swift-json/). I’m currently doing something similar to what you want and that huge and very detailed tutorial was pretty good in helping me.
You mean like Mach-O or ELF? No, it’s more like an interpreted JacaScript file. 
So the result would be the same, but the correct way to write it to account for the actual base would be: if n == 0 { return 1 } or ternary return n == 0 ? 1 : n * factorial(n — 1) Correct?
Thank you SO much for taking the time to implement this! I'm using this as an example to help train new programmers at my school, so I'll be spreading the knowledge.
It is not as simple as targeting another LLVM backend. The compiler itself has an array of ABI concerns that need to be configured for every specific target.
I see two major roadblocks. First, Swift still has some behavioral differences between Darwin and Linux. I'd like to see better platform parity on the "supported" ones, before we start adding more. I really don't want to debug (swiftc, webbrowser) combinations. Second, the size. I hope they have a really good tree-shaker. For my desktop app, libswiftCore is over 5 MB, and there's another 5 MB of libswiftOtherStuff. This doesn't even count the OS-level functionality that doesn't generally exist in web browsers. For example, a default build of ICU today is over 30 MB, so if you use Core functionality that wraps ICU (i.e., lots of text interfaces in Foundation), you could potentially be transferring a whole lot of bytes. I can see this being something that is technically possible, but not generally useful, due to the very different performance characteristics of the platform. It might be feasible if you want to do some raw number-crunching and you avoid 90% of the stdlib, but in that case, C might be just as easy. There's nothing here that can't be solved with enough engineering work, but it doesn't appear to be a top priority for anyone, and certainly not Apple.
If you need any explanation.... :)
Use the IDFV: https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor Note that there is no way to have a machine-provided identifier on iOS that the user cannot reset, by design.
Swift will respect the layout of any imported C structs. It’s just those declared in Swift files that can might rearranged.
Thanks.
Yes, you are exactly correct. That call trace is a really good way of visualizing/debugging recursive functions like this.
Not sure that there is but the idea is fairly simple. Create an empty array of the same type as the ordered array. Grab a random index # from the ordered array, append it to the new array, remove that # index element from the original array. Your random index will need to be less than the current size of the original array, since it will keep getting smaller. Once the original array count is zero then you’re done. 
Thanks for the information. I’ve done a slightly different version of that where I grab a random index and swap it with the last index decrementing a counter. 
That’s interesting, never would have thought of that. 
Here’s the page I found it. Scroll down near the bottom. https://learnappmaking.com/shuffling-array-swift-explained/ 
UUID isn't a very reliable option, can't rely on it to stay forever. My strategy: 1) Absolute majority of users have CloudKit. So call `fetchUserRecordID` of `CKContainer`. That will will give you a permanent anonymous reference to the user. https://developer.apple.com/documentation/cloudkit/ckcontainer/1399191-fetchuserrecordid 2) For those who don't have CloudKit active, fallback to device UUID.
Not quite. On Linux, Swift is designed to create command line programs that don't require UI. It comes with Foundation runtime which is like a minimal core library just enough to run app logic without UI. On OSX you also get Cocoa that is built on top of Foundation. Cocoa manages all UI and Apple specific APIs. Cocoa isn't shipped for Linux. So if you are on Linux, you can enjoy writing stuff like web apps and command line tools. 
I have actually tried that with a semaphore and it worked well... until I have increased the number of threads. Then it started to "stutter" so to speak due to natural threads priority mixups. After some research I have found this excellent article, which apart from giving a fast mutex solution, describes why semaphores not always the best idea: https://www.cocoawithlove.com/blog/2016/06/02/threads-and-mutexes.html So I ended up with a much simpler design for now: single mutex with many threads. It seems to hold pretty well but still need to do more experimenting...
I don't understand why you would increase the number of threads?? The whole point of the library complaining is that it doesn't like multiple threads. A single library thread should be servicing everything and semaphores should be waiting on the client threads, signaled by the library thread... a mutex should realistically be used if you are competing for a shared resource, which in this case, you are not, and cannot, because the C library refuses to operate (I assume via `abort()`) if you attempt to.
Just started learning Swift over the past few days, super excited about what I'm seeing so far. Thanks for the inspiration.
GamePlayKit has an array shuffling function I'm pretty sure
Would that slow things down as I would need to import all of gameplay kit?
Not noticeably, although I don't have too much experience with that. I just know thats what /u/twostraws has people do in Hacking With Swift.
have you found a solution yet?
Ok thanks 
I wrote some things on your codepad, check it out.
&gt; but I need what it fetches before I can move on to the next step The obvious micro-fix, then, is to put "the next step" into the completion handler. But the bigger question you should be looking at is: what exactly do you want it to do? (Block the current thread? What if it fails?) How will this func be called? From the main thread? You need to go up a level and ask why this func is synchronous, given that it makes a network request.
[I've been using this method.](https://stackoverflow.com/a/24029847), however GamePlayKit works too.
If you want to shuffle in place, use the [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle). For each index in the array (often done in reverse order starting from the end) choose a random index from among those you have not gotten to, and swap the elements at those indices. ``` extension Array { mutating func shuffle() { for i in indices.reversed() { let i32 = UInt32(i) let j32 = arc4random_uniform(i32) let j = Int(j32) swapAt(i, j) } } func shuffled() -&gt; Array { var newArray = self newArray.shuffle() return newArray } } ```
**Fisher–Yates shuffle** The Fisher–Yates shuffle is an algorithm for generating a random permutation of a finite sequence—in plain terms, the algorithm shuffles the sequence. The algorithm effectively puts all the elements into a hat; it continually determines the next element by randomly drawing an element from the hat until no elements remain. The algorithm produces an unbiased permutation: every permutation is equally likely. The modern version of the algorithm is efficient: it takes time proportional to the number of items being shuffled and shuffles them in place. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/swift/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
Thanks for the reply. I don’t know how to run this is I have an array a = [1,2,3,4,5] - would I just type a.shuffle () ? What does extension array and mutating func mean? Thanks 
Things I'd try: I'd change the return type of that function so that it's void and doesn't return anything. Also remove the return statement. I'd create a new optional string variable outside of that function call called *encKey* (or w/e it was called) I'd create a DispatchGroup and enter the group *before* I call that function. Then in your completion handler I'd leave the group after assigning a value to encKey Then using .notify on the DispatchGroup I'd continue with the logic. 
&gt;Thanks for the reply. I don’t know how to run this is I have an array a = [1,2,3,4,5] - would I just type a.shuffle () ? Yes, exactly. &gt;What does extension array and mutating func mean? “extension Array” means we are adding members to the Array type. Namely, we are adding methods that can be called on any array. “mutating func” means the function mutates the instance it is called on. &gt;Does mutating mean it mutates he input (Torah tee than creating a duplicate that has been mutated), whereas the second function is not mutating because it creates a second array that has been mutated, but the initial array is still there also? Yes, the first function (“shuffle”) mutates the instance it is called on. The second function (“shuffled”) returns a new instance, leaving the existing one untouched. &gt;Thanks You are welcome. :-)
replied now I get an error for the call: let tempresult = newgetenckey() Editor placeholder in source file Missing argument for parameter 'completed' in call Insert 'completed: &lt;#ViewController.downloadComplete#&gt;' It looks like I need to pass something to the function, but I dont understand how this works so I dont know what it wants. 
Perfect thanks for the great reply!
no 
It fetches an encryption key used for login. It must complete before I can do anything else.
[removed]
I’m sure there are other ways to do it, but this is the first thing I would try. In Terminal: cd &lt;directory with files&gt; for i in *.png ; do mv $i `echo $i | sed ‘s/.*-//‘` ; done If you want to see what it will do before committing throw an `echo` before the `mv` the first time. This assumes that there is only ever one hyphen in the file names. If that’s not true then you can try using `’s/...-//‘`, which assumes every file starts with three characters plus the hyphen. 
Your function needs to take a block that you run once alamofire returns successfully. Never ever set a “timer” for something like that lol
I understand that, but you haven't answered any of these questions. Your func's interface is `-&gt; String`. What if the network times out -- should it crash? Is it being called from the main thread, and is it acceptable to block that? Libraries like AlamoFire are asynchronous because that's how I/O works, and not just because they want to make your life difficult. If you try to wrap asynchronous interfaces in synchronous interfaces, you're gonna have a bad time.
What are you expecting? You likely need to change the Fill Mode to achieve whatever desired behavior you want.
I was expecting it to be 170x170. I think I’ve figured it out, does it display the @1x but it changes the bounds of the button to match the @3x size?
Wow didn’t think of that, thanks for the help! I managed to get it sorted by downloading Renamer. Thanks 
And the function is @IBAction func flagButtonWasPressed(_ sender: UIButton) { print("button was pressed") }
I understand that is intentionally asynchronous. This is a step by step task. So I need step A before step B. 
The error says it is trying to call `didSelectFlag:`. That is not the name of the function you pasted. 
Apple even offers a Swift package that implements this as an example: https://github.com/apple/example-package-fisheryates
Did you rename the function in the code after dragging it from the storyboard?
For this sort of one-off tasks, I find it invaluable to use a text and editor with regular expression search-and-replace to create a script to do the work. Something like “ls -1 &gt; temp.sh”, then replace ^[0-9]+-(.*)$ with “mv \0 \1” and then execute the resulting script.
Maybe you could use Game Center as a creative solution, but it’s likely against the rules if your app is not a game 
This has nothing to do with swift, why did you post it here?
use shuffled: https://developer.apple.com/documentation/foundation/nsarray/1640855-shuffled
Simple: use `NSCountedSet`. 1. create a `NSCountedSet` from your array. 2. if you want to know the amount of any number use count(for:Any). For example: mySet.count(for:6) will tell you how many 6 are in the set.
You might want to check the buttons reference tab from storyboard and make sure the connection is set correctly for assuming touch up inside? Sometimes if you modify the function it retains the old reference and would crash cuz it can't find it. 
A UIButton does not resize itself to its content. You need to give the button a size.
https://developer.apple.com/documentation/uikit/uiviewcontroller/1621413-performsegue
You can programmatically trigger segue inside the if statement that does show the second view controller or just show it without using a segue. Grab the viewcontroller from.story board. Then assuming you you are inside the viewcontroller, call self.present(secondVC, anmated true or something). There are abhnhc ways to present a view controller, you can Google how to programmatically show view controller in (insert your lang) *Not correct syntax. Let secondVC = something initilize vc from your storyboard. //Set some.value SecondVC.name = "I'm 2" Self.show(secondVC) Or self.navigaiton view controller. Push viewcontroller(secomdVC)
That’s not the same function your button is trying to call. Have a proper read of the error you are getting.
You should watch some tutorials to get the basics down, even pros use tuts sometimes. 
Would be helpful if you posted the offending line.
var one = 1 var two = 2 let gacha = [one, two] &lt;—
Try something like: func newgetenckey(completion: @escaping (String)-&gt;()) { } If responseData.result == .success then call completion(swiftyJsonVar.stringValue!)
The @1x and @3x is just the resolution, you’re still going to get padding either way. As the guy said above, you need to change the content mode of the image to get your desired look
That looks like it should work. Where in the app or the file is thisi
inside the ViewDidLoad func cuz when i take it out it says “Cannot use instance member ‘one’ within property initializer; property initializers run before ‘self’ is available
In the app logic, the calls come from a variety of dispatch queues (lots of math calculations often run in parallel), hence several random threads trying to call the same C entry point. My goal is to create a "bottleneck" class that would allow those calls to pass one-by-one and, ideally, using specially allocated thread. I seem to have achieved one-by-one requirement by using a mutex. That's pretty simple but still a cheat - C functions executed by different threads. My research took me to run loops as it seems that's the only way when I can request function execution on another thread while the caller is waiting. I have tried do achieve the same with a double mutex but didn't work reliably. Run loops seem to be more suited for finer execution control.
The [swift language book](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html) is excellent. Did you finish it?
Variables and constants initialized in the body of the structure are properties that will be specific to an instance of the structure. When you initialize them you can provide them a default value, but you cannot access their values until an instance of that structure is created. Your problem is you are trying to initialize and populate your array, which is a property, with other properties, but no instance of the structure has been created at this point. You can declare the array as a property but you cannot initialize it using other properties as values until after the structure itself has been initialized. 
We Americans are the worst. On the other hand, we have never asked anyone to eat Marmite.
You've made your feelings quite clear, so *I don't understand* why you think anyone should waste their time trying to convince you otherwise. But, if you really need an explanation - here you go: [Opinion](https://www.merriam-webster.com/dictionary/opinion).
Yo mein Java? Its binary and can be translated to the hosts assembler quite fast
Very Cool! I've played around with the objective-c runtime library but thats pretty restricted to only @objc marked classes in swift. I'll definitely be taking a look at this.
I don't know how to help you, if you continue to ignore everything I say, and simply repeat your original question. It's not clear to me you understand asynchronicity. One last try: draw a state machine for this procedure. Once you understand exactly what states your application will need, it might be easier to understand how to use the completion handler. Or just ignore my advice and say "I need A before B" again.
That's perhaps the one Swift error message that is both technically accurate and helpful!
The control looks square. The flag looks very not-square. Are you sure the image is 170x170?
I’m making it 170x170 but it never stays that size. It’s as if it’s resizing the bounds to match what it will be when the @3x is displayed 
I’m not sure what you’re hoping to achieve. The button is square, but the flag is rectangular. Do you want the flag scaled to fill the square button? (i.e. clipping the sides of the flag) Also, again, a button doesn’t size itself. If it’s changing size then you’re calling `sizeToFit`, setting the frame manually, there are autoresizing flags set, or layout constraints set.
Create a function that the gesture recognizer calls who's sole function is to call the protocol extension.
Ah, ok. Thank you.
\*high-five\*
You’re rudeness is not helpful. 
nah probably will take at least a month xD
Ok so the following is working in the second viewcontroller, but only when it’s inside a function. It won’t let me put it outside of a function so I can refference its data from all of the functions inside the second viewcontroller. let mainVC = MainViewController() let allPeopleCount = mainVC.allPeople.count Why won’t it let me put it outside of a function so I can reference it in other functions? I’ve even tried to put it in viewdidload but I can’t reference it from other functions. Thanks 
You might want to try lazy instantiation like: lazy var allPeople: [PeopleType] = { let mainVC = MainViewController() return mainVC.allPeople }() I’m not sure how you ended up in this situation. Wouldn’t it be better if the array was owned by another object that Main and any other view controller could instantiate to more easily access this data? 
Thanks for your reply! I’ll look into it. Never heard of lazy before! How would I make it owned by another object?
Lazy means that the variable is calculated (the block after the = is excecuted) the first time that something tries to access it. I don’t know what this array is or how you build it, but it could be as easy as struct People { var all:[PeopleType] = // you can set it here } // and you can retrieve as var people = People() people.all Treating it basically as a static type struct People { static var all:[PeopleType] = // you can set it here } // and you can retrieve as var allPeople = People.all Or even better would be to pass the information to build the array in the object initializer like struct People { var all:[PeopleType] init(dataToBuildTheArray: Type){ all = // build your array here } } Hope this might help you 
You can also find all the videos and contents here: https://www.youtube.com/watch?v=71pyOB4TPRE&amp;list=PLPA-ayBrweUzGFmkT_W65z64MoGnKRZMq
Thanks, I appreciate the link! It looks like he has everything - slides, assignments, and all.
Very nice...thanks!
Glad to hear it! Let me know if you have any problems or questions 
Woohoo, solved! Somebody on Stackoverflow came up with a good solution. I was nearly there -- adding one more, the 3rd, semaphore solved the problem. Too easy :) https://gist.github.com/deze333/23d11123f02e65c456d16ffe5621e2ee
&gt; There is no segue between the two viewcontrollers. There's *some* connection between them, though, right? 
I made a new project in Xcode, replaced the `observe` and `snapshot` parts with the constant `["agencyId": "xyz" as AnyObject]`, removed the `eventsList` and `DispatchQueue` parts, and called `fetchEvents()` from the stock `viewDidLoad()` of the default controller. When I ran it, it worked fine for me. Can you give a complete working example that demonstrates your issue?
Here's a sample of what I was trying to explain: ``` /// A mechanism that guarantees serial single-threaded execution of queued blocks. public class WorkUnitExecutor { /// The internal `WorkUnit` describes the block to perform and a "trap" that /// is laid by the caller thread and triggered by the worker thread when this /// work unit has been completed (and all preceeding queued work units). private struct WorkUnit { /// The block to be invoked. var block: () -&gt; () /// The caller thread semaphore to be signaled by the worker thread. var trap = DispatchSemaphore(value: 0) /// Create a new `WorkUnit` with an active semaphore `trap`. init(_ block: @escaping () -&gt; ()) { self.block = block } } /// The internal worker thread that executes serially. private var thread: Thread! /// The lock for accessing the queue, a shared resource. private var lock = NSObject() /// The queue containing all the work units to be executed by the worker thread. /// Modifying the queue automatically causes a synchronization on `lock`. private var queue: [WorkUnit] = [] { willSet { objc_sync_enter(self.lock) } didSet { objc_sync_exit(self.lock) // Automatically signal the worker thread if the queue is modified. self.semaphore.signal() } } /// The main semaphore that informs the worker thread that a new work unit has /// been queued and needs attention. private var semaphore = DispatchSemaphore(value: 0) /// Construct a new `WorkUnitExecutor` with a given specific label. /// - `label`: identifies the worker thread for debugging purposes. public init(label: String) { self.thread = Thread(block: self.main) self.thread.name = label self.thread.start() } /// Be sure to cancel the thread when finished. /// FIXME: I don't think this actually stops the thread for good. :( deinit { self.thread.cancel() } /// The main function of the worker thread. private func main() { assert(Thread.current == self.thread, "This routine can only be invoked on the worker thread.") while true { // Infinitely trap and process queued work units until shut down. // Once woken, process all queued work units and signal their owners. // NOTE: objc_sync_* is not required since `popLast()` is mutating. See above. while true { //objc_sync_enter(self.lock) if let unit = self.queue.popLast() { //objc_sync_exit(self.lock) unit.block() unit.trap.signal() } else { //objc_sync_exit(self.lock) break } } self.semaphore.wait() } } /// The auxiliary function invoked on any non-worker thread. public func perform(_ block: @escaping () -&gt; ()) { assert(Thread.current != self.thread, "This routine cannot be invoked on the worker thread.") // Push a new work unit and signal the worker thread before trapping. // The caller thread will wait here until each preceeding work has completed. let unit = WorkUnit(block) self.queue.insert(unit, at: 0) unit.trap.wait() } } ```
I think a white background or white on a black background. You’re playing off contrast in both which works for “info” apps. If you really wanted to go crazy, I could see a steel gray working too. It really depends who you’re targeting as to which I’d settle on. I’d focus on a specific segment to narrow the task when you’re starting out.
Thanks for that, I’ve tried to implement it but not got it right. I’ve created a seperate structure called Countries which has all countries and asianCountries, africanCountries e.t.c. I’ve created this in a seperate file called countries.swift. Now in the main viewcontroller I’m able to do “let country = Countries()”, but then when I say “let asianCountries = country.asianCountries” I get an error. What am I doing wrong, any idea? Do I create the struct in the same file or different file? Thanks 
&gt;. . . ¿ seperate ? . . . I THINK YOU MEANT **separate** ^^I ^^AM ^^A ^^BOT^^^beep^boop!
I was thinking about a futuristic theme. So I found a white futuristic theme. I'll have to create my own on Adobe Photoshop or illustrator. Don't know which yet. Steel is appealing to the male audience imo. I want to Target both female and male.
What error is that? Is this line at a global scope in the vc (outside all functions)? let asianCountries = country.asianCountries Supposing this is the problem... You can’t do that. If you are outside all functions the previous line “let country = Countries()” hasn’t happened yet, because the global scope is “outside” (happens before) instantiation process and therefore you cannot reference self (you are implicitly writing self.country.asianCountries). To declare asianCountries globally you need to use a similar trick as the lazy instantiation var asianCountries: [CountryType] { return self.country.asianCountries } This means that every time you access the asian country property, the block is executed to obtain the property value (and that will certainly happen after the instantiation) Or... var asianCountries: [CountryType] = { return self.country.asianCountries }() ...the block will execute once. From the second time on that property will effectively be a constant. I suggest you to read the swift manual and specifically: Properties section https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html#//apple_ref/doc/uid/TP40014097-CH14-ID254 Initialization section https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html It is an invaluable resource!
Thanks very much for the information and further reading! I’ll look into that when I’m next on my computer which will be tomorrow now (currently in Samoa!). Have a great day!
You too
So from what I’m reading there, in my Countries class I need to create an init() function that sets all properties e.g self.asianCountries = (put the array of Asian countries here). Then I’ll be able to reference it as I’ve been trying to do, as in, in any class at any time, as long as I call the Countries() struct first?
I think you should look more into MVC Design, i.e. https://medium.com/ios-os-x-development/ios-tableview-with-mvc-a05103c01110
Hello guys, I’m new to swift. I am curious, do I need an apple product to build an app for iOS? Do I need to be in the eco system to produce something for the ecosystem? Lol
print out all the keys of the dict and compare them to the fields in Events. Looks line there is a key that‘s not matching a fieldname.
I should maybe have been more clear. This array is made up from data collected from a Bluetooth-device that sends a datapoint 52 times per second. So I'm probably going to have like thousands and thousands of 4:s, 6s or 7s in a row. But now when you know that , do you think this is suitable? Because then it looks like a good idea! (Even tough by just reading it , it is a little hard to comprehend for me)
&gt; I should maybe have been more clear. This array is made up from data collected from a Bluetooth-device that sends a datapoint 52 times per second. So I'm probably going to have like thousands and thousands of 4:s, 6s or 7s in a row. &gt; &gt; But now when you know that , do you think this is suitable? Because then it looks like a good idea! (Even tough by just reading it , it is a little hard to comprehend for me) I should maybe have been more clear. This array is made up from data collected from a Bluetooth-device that sends a datapoint 52 times per second. So I'm probably going to have like thousands and thousands of 4:s, 6s or 7s in a row. But now when you know that , do you think this is suitable? Because then it looks like a good idea! (Even tough by just reading it , it is a little hard to comprehend for me) 
I should maybe have been more clear. This array is made up from data collected from a Bluetooth-device that sends a datapoint 52 times per second. So I'm probably going to have like thousands and thousands of 4:s, 6s or 7s in a row. But now when you know that , do you think this is suitable? Because then it looks like a good idea! (Even tough by just reading it , it is a little hard to comprehend for me) 
I have created a playground in the attempt of clearing the air a bit https://gist.github.com/dnakiller/b06e4d40110e3373dd073d9ca2c3c97e#file-countries-playground First of all there is a Country object that represents one country. You instantiate it once for every country you want to represent. In this case you properly use the initializer to pass the instance data (i.e. the data representing a specific country) Then there is CountryContainer. This is a weird object that is trying to solve your problem of containing a long list of data. It is weird only in the sense that nothing is passed trough the initializer because the use of this object is only to contain a fixed set of data that can be then used in any other place. This data should in my view actually be stored somewhere and then Loaded by a Container of some kind (that will make that object definitely less weird) Finally there is a ViewController with a few examples on how to declare and fill properties so you can use these structures. Having said all this and hoping that this information will give you some hint on how to solve your problem, it might be time to step back and try to understand what are you trying to achieve and how to better structure the data to solve your problem. One thing I want to point out is that a viewController is not just a generic object, it is indeed a UIViewController. This might sound a bit redundant but is a very important underlying truth. Inheriting from a parent will dictate the purpose of that object and with that comes benefits, limitations and a specific way of using it. Why am I saying this? Because you were trying to use a viewController for what it is not. A view controller manages views, that is his purpose. This also means that he shouldn't be concerned with the detail of data and most importantly he shouldn't be the sole owner/container of data. He should receive the data from third party and only the data that is necessary for his work, that is again managing views. This is a very big subject, I totally understand if at this point you are confused. 
I'm pretty sure that the `.reversed()` part is unnecessary.
Thanks for doing this, it's great to see how different people tackle the problem! I've created a playground to test and benchmark, see here: https://gist.github.com/deze333/d4cb80d9f95a5426a09125b9abd41d83 I noticed that it gets stuck after about 20-30 calculations on `self.semaphore.wait()` - the sidebar counter increases but no calculations performed. There is a subtle bug somewhere. Another thing I noticed is how actually slow the closure passing is (just like described in that article I referred earlier). I made a posting here: https://stackoverflow.com/a/47765550/9074909 You can see the measurements. I made a closure-free reference passing + run loop based version and it appears to be so much faster! Nowhere as beautiful though :) It makes sense to avoid using closures for intense computations. A good experiment.
https://imgur.com/a/8OAMM
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/sy1wtvI.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dr4riby) 
I spent a few days to redesign my app [Math Problems](https://itunes.apple.com/app/id1244547440) because someone in reddit mentioned that I need a modern design :). Right now working on scratch pad feature, where the player can use it as a handwriting tool to do calculations on it.
I can't write it all for you, but heres what you need to begin. First make an array, that will store the pillars. If you are using spritekit, do var pillarArray = [SKNode]() Then you need to make a loop, that will generate the pillars. Something like this: Var pillarnum =0 for _ in 1...100 { pillarArray.append(pillarnode) pillarArray[pillarnum].position.x = pillarnum //access the node in the array, and make it's position pillarnum. Var pillarrand = arc4random_uniform(2) If pillarrand == 0 { //here code for making a different kind of wall, maybe three gaps } else if pillarrand == 1 { // code for a wall with only one gap } pillarnum += 1 } Just rough code, made this on mobile. Hope it helps, ask if you need more help.
This is more of a design question than a swift-programming question, so you'll probably get more answers in subs related to UI design.
Thanks Paul! 
You configured it from the AppDelegate.swift as well? Anyway, I’d clean and rebuild, maybe there is an issue with the built data.
This can be solved using a completion handler as the redditors here mention. I checked the url and I think is really important to understand how a completion handler works. From what I understand (and correct me if I’m wrong): A completion handler is the returned object from the execution of an asynchronous call. Once your response is successful, you can continue executing your code. That’s when you define your step B, because A was already completed in that escaping handler.
So that’ll be broken in a year 
I'm quite happy that you can't do this.
Sounds like RLE is _exactly_ the right thing to do. Think of it as instead of storing each individual value, you just store “X number of these, than Y number of those, then ...”.
You really didn't provide us with any sample code. so we really cannot help you out on your code. The real anwser is that you probably want a collection view like others has stated
so for the code with two or 3 gaps, how would i go about making the three different gaps? i understand how to make the pillars with one gap from a flappy bird tutorial (im pretty new to swift)
It depends on how you want to make them, but i would probably make another function, that the loop accesses. In that function you would make 4 new sknodes, and make them childnodes to the pillar node. Then maybe give them a random y position as long as the y position is not too close to another. Something like this could work: If pillarrand == 1 { Threegaps(xpos: pillarnum) } Then somewhere outside the didmovetoview put the function. Something like this: func Threegaps(xpos: Int) { for _ in 1...4 { Var 4gapsnode = //a smaller node than the pillarnode that you use for the pillar with one gap, give this a physicsbody // also maybe make these into a separate array to access them easier later 4gapsnode.position.x = xpos Var 4gapsrand = arc4random_uniform(self.view.frame.height) 4gapdnode.position.y = Float(4gapsrand) //here code for figuring out the distances between the different nodes } }
gonna give this a go, thank you lots for the help! 
Man, what a nice resource you posted here. I think that's where my December goes, just in time to improve in swift. And I'm one of those guys whose learn with a purpose, in this case, to make a nice music app.
AudioKit is amazing, and this is a great resource to learn by digging through some real code. Thanks!
Got it. Thanks
This is part of the “sandbox” the apps stay in. You wouldn’t want a malicious app digging around your cloud folders. The type of limits I’ve run into in programming actually make me trust and appreciate the iPhone more as a user.
I've asked 7 questions so far, and you've answered none of them. I've given 3 different specific suggestions, and (AFAICT) you've tried none of them. You can get hung up on my curtness, or you can take some of this free knowledge I'm dropping to try to solve your problem. If nothing else, this exchange should, ironically, demonstrate why an asynchronous request, even if it's required, can't be a blocking non-optional.
So appending an empty string forces it to be a Swift string. That just sounds like something that could be fixed
Yeah. I guess Cocoa's text APIs are NSString based, so we're working in a "mixed string" environment at the moment, and that needs to be a default behaviour. Will be nice when it isn't :)
Would like to know what caused the 83% improvement they mention at the end.
I wonder if force casting it to String instead of appending the empty string would give you the same performance increase?
There was a mistake in the code I posted: the call to arc4random_uniform needs to use i+1 instead of i. I edited to correct it, and I want to make sure you see this.
Neat article. I noticed that you didn't mention Swift's built-in `Mirror` class at all. Wondering if you took a look at that implementation at all, seems like your library can do more stuff.
That’s exactly what I did thank you. I should probably post my code to help others though 
It would also raise fewer eyebrows in a code review.
Yes it probably would! If I get some time I may throw that in
I assume (and kind of hope) that would have no effect, since it's calling a `String.init` already, so the compiler knows it's type `String`. Force casting should only change what the type checker thinks it is, not call some other method and return a new instance. It's neither an upcast nor a downcast, so what would the compiler have it do? I haven't checked the object code to confirm, but it does warn "Forced cast of `String' to same type has no effect", at least.
Swift.String's `func+` calls StringCore's `append()`, which does a `_copyInPlace()`. StringCore is: /// The core implementation of a highly-optimizable String that /// can store both ASCII and UTF-16, and can wrap native Swift /// _StringBuffer or NSString instances. It's got special cases for ASCII-only strings and such. Neat. I'm not surprised that there's some cases where this is a little faster. Possible downsides that I see: - Is it still faster with non-ASCII data? They're using `encoding: .isoLatin1`, which has been declining in popularity for 10 years now. If you loaded any non-ASCII characters (even the upper half of Latin-1), wouldn't NSString load it as UTF-16, causing the `_copyInPlace()` to maintain that encoding, and chew up a bunch of memory bandwidth, for no efficiency gains? - Is it still faster if the CSV file doesn't fit (twice) in your cache? Copying a bunch of data in memory isn't free. They're decoding something called "small.txt", which apparently fits entirely in memory, but that's not always going to be the case. - Will it still be faster next month? This is a pretty odd case, and String is still in flux. To do this is to commit to running performance tests on all these hacks with every new compiler version. This is an interesting observation, but it's not the sort of thing I'd put in production code. I suspect (but can't confirm, because the actual parser seems to be for subscribers only?) that it's a symptom of writing a parser that is doing unnecessary random access. This is like the old C trick "swap two ints without using a temporary variable". It's a fun trivia question, and might be useful if you really know what you're doing (like being able to ensure your input file is always plain ASCII), but I wouldn't recommend it for general use.
Nah. Just go over it. The last parts aren't that important. Trust me, it's an awesomely written piece. 
You need a Mac to run Xcode and submit to the app store.
Woo! I've always wanted to contribute, but the mailing list system is so clunky I've never found it worth my time to overcome its hurdles