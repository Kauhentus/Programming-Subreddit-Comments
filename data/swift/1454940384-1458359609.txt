I use this: extension ObservableType { public func limitRate(rate: Double, scheduler: SchedulerType) -&gt; Observable&lt;E&gt;{ var lastEmit = NSDate(timeIntervalSince1970: 0) return filter { _ in scheduler.now.timeIntervalSinceDate(lastEmit) &gt; rate } .doOn(onNext: { _ in lastEmit = scheduler.now }) } }
Ooh, that version *is* quite nice, actually. I hadn't thought of that.
This article goes into way more detail than you will ever need with FizzBuzz: http://www.tomdalling.com/blog/software-design/fizzbuzz-in-too-much-detail/ 
Sadly this doesn't really apply to accessing private methods in the SDK, only private properties on objects.
If the method doesn't take any arguments, valueForKey will work. Otherwise your best bet is performSelector.
I cannot see anything memory allocation intensive.
Can you please give me an example of how to call the method in the question using `valueForKey` then? I don't think that works with C functions. Also, I don't think `valueForKey` works in the way your are describing: class MyObject: NSObject { private func doSomething() -&gt; String { return "hello" } } let obj = MyObject() let some = obj.valueForKey("doSomething") // SIGABRT, since MyObject is not key-value compliant for the key `doSomething`
You work for Apple ?
&gt; Manager of the Swift performance team at Apple. https://twitter.com/nadavrot
Apple just opened up CloudKit for "server-to-server" access - https://developer.apple.com/news/?id=02042016a so that's one option. Otherwise have a look at [this list](https://github.com/relatedcode/ParseAlternatives) or alternative to Parse.com. Firebase is probably a good way to go
Nice article, did see a few typos though. You frequently use "then" instead of "than"
Thanks and I am aware there are some typos (its on my to-do list and I'm almost at that section of it ... finally).
a quick glance over the source and it looks solid from here
Second line (of ten) in the email: *&amp;gt; all features are not ported*
This is something I used for AVAudioPlayer, it probably works similarly for MPMediaPicker. func quieter() { if audioPlayer.volume &gt; 0.1 { audioPlayer.volume = audioPlayer.volume - 0.05 let dispatchTime: dispatch_time_t = dispatch_time(DISPATCH_TIME_NOW, Int64(0.1 * Double(NSEC_PER_SEC))) dispatch_after(dispatchTime, dispatch_get_main_queue(), { self.quieter() }) } else { stop() } } 
 yourBarButtonItem.action = "yourAction"
Oh, but not if you work with segues, right? Because then the new view controller is initialized for you.
Thanks! I'll look into it
I've been playing with [Hook](https://github.com/doubleleft/hook) for the last couple days. It can use lots of different back-ends including MySQL. The only problem I'm having is its name. It's basically ungoogleable. So as far as google can show me, there's like NO community or examples or anything out there. 
You can try IBM Swift Sandbox http://swiftlang.ng.bluemix.net/#/repl :)
thanks.. thats pretty neat..i was looking more for actually like coding for an iphone app or something...i will probably just have to make a vm
denilcide?
The band I play guitar in added the word "Band" to the end our name for this same reason. Most of us are in IT and we're named after a very important IT process...
"Is It Plugged In Band"
"Turn It Off And Back On Again Band" No, I'm kidding. We're the Disaster Recovery Band. It's an important IT operation, plus most of us have recovered from some medical disaster (cancer, heart attack, serious back injury, etc). It's also an apt description of most of our songs...
You could make those Obj-C properties and methods a lot nicer with the nullable syntactic sugar. @property (nonatomic, strong, readonly, nullable) X *x; - X *xWithFoo:(nullable Foo *)foo;
That's a great point - I will update the article. It is much nicer then _Nullable indeed.
Apologies for the crossposting, deleted all the duplicates in other subreddits. I'll keep to one category the future.
Drink the Koolaide and get a Mac. Mac Minis are cheap. Cost is NOT an excuse - only mindless ideology. Your ideological position is untenable especially if you want to develop for Apple iOS!
My point was that refactoring something for the sake of refactoring is not a very pragmatic decision. Our existing code was tested (both manually and automated), we have a catalog of its tech and architecture debt. Yes, we would get an even cleaner infrastructure by rewriting all of it in Swift. But we get the same gain by writing Swift code, and gradually refactoring / rewriting the existing parts. When rewriting in Swift, we need to rewrite the code, the tests, redo all manual testing (that we can't cover). In our case we decided not to do this as one massive refactor. Instead whenever we add new functionality, the code we touch, we rewrite in swift (this is mentioned at the end of the article).
Thanks! This is very likely what will happen with us as well. More often when touching Objective C code then not, we rewrite the whole class in Swift. One class at a time!
Well, to be specific I want the navigation bar posted above. But since this "back" action is happening when the user is filling out details about an object I'm creating, I don't want it to loose potentially filled out data. Therefore the object needs to be sent back to the previous controller. What has happened is this: I've "uncommented" the edit button from the standard code of TableViewController. Added a leftBarItemsSupplementBackButton and moved the edit button to the left. Problem is, that this has (so far) made me have to use the programmatically created back button provided by the navigation controller. I've also tried to create a IB bar button, and this has worked! But it has also made the programmatic edit-button screw it self over. I haven't been able to make them both work at the same time.
I believe its wifi and bluetooth 
Plus, once an isolated dependency subtree is fully converted to Swift, you can change classes to structs and avoid subclassing NSObject, saving you unnecessary dynamic runtime work and potentially making your code faster.
I didn't see what other subs it was on originally but there's nothing wrong with crossposting if the content is relevant to more than subreddit. Not everybody subscribes to every single sub on Reddit.
Fantastic Reply. +1 thanks
:) +1
yes! It's an unfortunate limitation that structs cannot be used in Objective C, so we need to revisit those twice. Instead of searching for TODOs, you're right that looking for inheriting from Objective C, or (in case of enums) the @objc keyword is enough.
I bet you could signup for AdMob under a new email address. I've always used AdMob as a backup for when iAd fails and plan on using AdMob exclusively in the future. Near 100% fill rate. In-house ad support. Offers every type of ad. Can disable ad categories easily. Decent eCPM. Frequent framework updates. Easy to use. Receive payments on time. There's a pretty good list of ad networks here also: http://stackoverflow.com/q/35169698/2108547 
Someone posted a related issue here a few days ago. Maybe it will give you some clues: http://stackoverflow.com/questions/35183818/access-private-uikit-function-without-using-bridging-header
I am the asker of that question as well. I took some of the concepts from that answer to ask this one.
D'oh!
Iad is being fully discontinued on 6/30 for developers
I'm out of the loop. Did Apple say why iAd is being discontinued? All it said on the developer website was that it's being discontinued.
S3 is short for Simple Storage Service. It's a cheap way to store data (like images) and make said data available over the internet. Start reading [here](https://aws.amazon.com/s3/). I wrote you [a gist with an example class](https://gist.github.com/adamrothman/3166d727829f1d41cd0f) that does the heavy lifting of uploading a `UIImage` to S3. When the upload is finished, your completion block gets called with the URL of the uploaded image (or an error if one occurred). You'd use it like this: NetworkManager.sharedManager.uploadImage(image) { (result) -&gt; Void in switch result { case .Success(let urlString): // save urlString to Firebase case .Failure(let error): debugPrint(error) } } PM me if you have questions.
I'm not sure, cause I don't work with Segues or InterfaceBuilder in general. I like to code the Interfaces. But as far as I know you can override a method that should give you as a Parameter the new ViewController, or am I wrong?
It uses rxswift though, so it introduces a new programming paradigm (react). I wouldn't recommend it to beginners / intermediates.
Okay I didn't get that. Well, I have been using VMWare with El Capitan for several months and everything is working great. But sometimes it's a bit laggy and compiling/executing code can be pretty long. Honestly I recommand you to but a Mac if you really want to develop apps.
Apple has a "Swift Programming Series" on iBooks (might be available in other forms; not sure). It starts with an introduction to the language syntax and general constructs. If you're at all familiar with programming, this is a brief, easy, and clear starting point.
disappointed they arent written in swift.
Thanks but both are not in swift.
Inheritance...done singly, was a giant misfeature it turned out. Done multiple style it had tons of boondoggles too but was ontologically closer to what we were trying to do Glad to see everyone going back to plain interfaces a la smalltalk.
Yeah, you should be using either a class or a struct for this. Whichever you feel would suit your needs best is up to what you decide after reading up on it 
hackingwithswift.com is pretty good for getting your hands dirty fast. Meanwhile find myself enjoying www.raywenderlich.com/video-tutorials for a more thorough explanation
You can use Class, Struct or Dictionary. There are trade offs with each.
NOTHING works to summit the learning curve like coding. Start coding. Anything.
[LMGTFY](http://lmgtfy.com/?q=Cocoa+Pods) Cocoa pods are a 3rd party (non-Apple) library system similar to Linux apt and similar remote update systems for "useful open source ObjC and Swift frameworks and libraries". Private pods are cocoa pods that aren't hosted or publicly available on the Cocoa pods web site but use the distribution mechanism.
I would suggest focusing on Swift as the long term play. Note the word "focus", you still need to learn the C languages. With your focus on the web i have to wonder if you have any formal comp sci education. If not you may have a hard time grasping concepts. 
Start with Swift, but you will eventually need to learn the basics of Objective-C.
I started with Swift 6 month ago and yesterday released my first iPhone App - Shopping Cart Tracker. Swift it's much more easier to understand that Obj-C. But later, you'll start to understand Obj-C a little bit.
Swift hands down is one of the best languages made.
I'll be checking those out. Thanks!
Can you show me which tutorial you're talking about? I'm also using the "size.width" on my code that I learned from their book for SpriteKit but I don't get any errors. And I've also used their random() function before from their book but might be different on the tutorial you're on.
http://www.raywenderlich.com/119815/sprite-kit-swift-2-tutorial-for-beginners
Swift. Objective-C is dead. It'll be like Fortran in a couple of years. 
I would use NSUserDefaults to just setup a saved value for the language, then check that whenever you open the application / keyboard and assign the language preference based on that.
You should take a look at sorting algorithms. Most are comparison sorts and most don't necessarily compare items sequentially. Quick sort for example compares them all to a pivot point and partitions that array into two smaller arrays for further sorting. Perhaps a better way to help you understand this is to actually print out the 2 items being compared as well as the true/false value returned and you'll see what I'm talking about.
That probably was incredibly frustrating. Why are ADT's missing from the library? I can't imagine every iOS dev being talented enough to build their own data structures from scratch is there another way around using ADT in Swift?What Haskell lib were you porting? 
Well, it's certainly irritating... ;)
Someone wrote a [CSP library](https://github.com/Zewo/Venice) for Swift that's already working on Linux and OSX. It offers a very elegant programming model, a lot like golang's goroutines, and potentially has better performance than threadpool based concurrency like GCD. Here's an implementation of the [SleepSort](http://rosettacode.org/wiki/Sorting_algorithms/Sleep_sort) algorithm based on it. As you can see, sleepsort is an elegant, easy to understand and extremely efficient algorithm, sorting random numbers with 0xn swaps. Runtime can be a little disappointing, especially when large numbers are sorted. import Venice let channel = Channel&lt;String&gt;() for i in 1...100 { let rnd = random(5000) co { nap(rnd) channel &lt;- "i:\(i) \(rnd)" } } for msg in channel { print("received \(msg) from channel") }
Definitely need benchmarks before making any kind of judgement on which would be faster. One thing that makes that library nice is that it's pre-built with swift in mind. GCD's main drawback is that it's written like a C API. [DispatchKit](https://github.com/anpol/DispatchKit) is a pretty nice swift-idiomatic wrapper. But GCD and coroutines offer very different approaches. It's largely going to be down to use-case or programmer preference most of the time. Personally, I've found coroutines to be cumbersome and clumsy; and I've been working on a toolbox of async data types to make working with GCD easier. I've just personally found the queue model to be a lot nicer for synchronizing batches of jobs. Also, do you have any insight as to how that library achieves concurrency without using a thread pool? Languages like Go can do it because they have green threads. Swift doesn't have any construct for anything like that. I can't think of any way to do it besides a well managed thread pool (which is just like GCD).
It seems to be based on [Libmill](http://libmill.org/index.html), 'go-style concurrency in C'. How this works under the hood is beyond my expertise. I find it quite elegant when you need to integrate the output of a great number of coroutines. Where you just use it to run a closure in the background, the syntax is about the same as GCD. 
&gt; It seems like this is the opposite of what should be happening (i.e. 7 &lt; 2 should be false, 2 &lt; 11, should be true, 11 &lt; 9 should be false). Why would you assume such comparisons? FWIW Swift uses a hybrid insertion sort and introsort. The degenerate case for only 4 values is [a pure insertion sort](https://en.wikipedia.org/wiki/Insertion_sort). And the first parameter to the callback is the "higher" one not the "lower one", that way the return of the callback is "should these elements be swapped". So * swift calls `sortAscending(2, 7)` -&gt; `2 &lt; 7`, this is true and they're swapped -&gt; `[2, 7, 11, 9]` * swift calls `sortAscending(11, 7)` -&gt; `11 &lt; 7`, this is false and the array is not touched * swift calls `sortAscending(9, 11)` -&gt; `9 &lt; 11`, this is true and they're swapped -&gt; `[2, 7, 9, 11]` * swift calls `sortAscending(9, 7)` -&gt; `9 &lt; 7`, this is false and the array is not touched * end of the array, sort done Just add `print(i, "&lt;", j, "swap?", i &lt; j)` to `sortAscending` and you'll see exactly that behaviour
For the most part, arrays and dictionaries are what you'll need for most tasks. When you have an entire standard library to implement, a few kinds of data types are low on the priority list. This would be a great open source project idea
You're touching on two major points in Swift. The first is closures. You can make a dictionary which contains closures. There is no magical `this` variable to reference the containing dictionary, but you can write code like this. let dict = [ "closure": { print("hi") } ] dict["closure"]() But this brings us to the second point: Type safety. In Swift, a dictionary which can contain any type of value is kind of a bad idea. Swift ensures that you never do anything on an object unless the compiler can guarantee that the thing is allowed at runtime. This means that if you have a dictionary of type `[String: Any]`, you can't call any stored closures until you cast it back into the appropriate closure type with the `as` keyword. And any other stored properties in the dictionary require you to cast them to what you expect them to be. let dict = [ "closure": { print("hi") }, "someInt": 1, "text": "Hello!" ] // There are various ways to unwrap. // If let is one if let closure = dict["closure"] as? () -&gt; () { closure() } // guard is another guard let i = dict["someInt"] as? Int else { // handle incorrect type here // usually via return or throw } // Forced unwrapping is another. let text = dict["text"] as! String That leads to some cumbersome code. So a struct is definitely the answer. struct MyType { let someInt: Int let text: String func function() { print("Hi!") } } let data = MyType(someInt: 1, text: "Hello, World!") let i = data.someInt let s = data.text data.function() You can see how much clearer this is. You lose the ability to put anything anywhere, but you gain code clarity compiler guarantees about the kinds of data you're slinging around.
thanks! For me its still underlining size.height and saying its an unresolved identifier though
I had it outside of the GameScene class...I'm an idiot. Thanks for your help
 Christian Laettner
There is no question that Swift is the best choice. A year ago you could make an argument that it wouldn't be the best choice for some people, but now there isn't really any reason not to learn Swift. If you are looking for a collection of resources to help you get started with Swift you can check out my post on ManitobaNinja which should help get you started! https://manitobaninja.wordpress.com/2016/02/07/resources-for-learning-swift/
One perk of goroutines is the low over head. GCD has a pretty heavy overhead overall, making it less ideal for servers. Also I find goroutines to be much clearer. You can turn any function into one but simply stating "go MyMethod()" or communicate simply via channels. I really hope more languages integrate a goroutines like system.
Try updating the layer frame on orientation change. 
I beg to differ about computer science experience. I started programing when I was 12 and had no normal training then and learned it just fine, thank you. 
Have to say (despite being a ObjC bigot) that Swift is probably the better choice.
Have a look at [Execution States](https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/TheAppLifeCycle/TheAppLifeCycle.html#//apple_ref/doc/uid/TP40007072-CH2-SW3)
&gt; don't necessarily compare items sequentially Quite literally like everything else in GUI/Network-based programming, you must think "event-driven" where you can enter at any point and in any state. Anyone writing iOS code needs to wrap their head around "event-driven" anyway. Once you do, sorting becomes pretty trivial to grok.
dispatch_io isn't thread pool based, fwiw
Notepad++ will open them also
All of your links are broken.
I've compiled a list of resources for beginners over at my site, ManitobaNinja. The full list available here https://manitobaninja.wordpress.com/2016/02/07/resources-for-learning-swift/ and there are categories for both books and tutorials. The Apple Swift book is a must simply because it is going to cover everything you really should know. For someone without any programming experience it can be a tough read, but sounds like you might be okay with it. For books the Big Nerd Ranch Swift book is super popular and for a collection of tutorials hackingwithswift.com is really a great resource.
It may have worked well for you but it certainly doesn't work well for everybody. A good formal program will help people write clean code and avoid "learning" bad habits. It is really the bad habits that are of a concern. Self educated programmers usually fall in to groups brilliant or very sloppy. With a language like Swift, which is under heavy development, you do run into two problems though. One there are few good programs focused on teaching Swift. Two you are aiming at a moving target. 
I really think this is the case but even so you need to learn the "C" languages at some point In your career. By the way I'm careful to use the '"C" languages' phrase here because there still is a rational behind learning plain old C and even Mac OS has some C++ code here and there. For Mac OS or iOS though starting out with Swift is a smart move. By the time it stabilizes at the 3 release cycle a person starting out now will have a good head start on what will become a very hot language. I say hot because I see people adopting it on the Linux side fairly quickly. 
Here's some I've found: https://github.com/dkhamsing/open-source-ios-apps https://github.com/JakeLin/SwiftWeather https://github.com/amitburst/HackerNews https://github.com/MoZhouqi/PhotoBrowser https://github.com/Mav3r1ck/Project-RainMan 
Makes sense. I'm going to delve into sorting algorithms more. Printing the items being compared (also described by /u/masklinn below) helped clarify what was going on in my code.
https://en.wikipedia.org/wiki/Grand_Central_Dispatch
Stay hopeful but maybe look for objc and ask during the interview what their plans are to use swift. Although it seems like all the jobs are objc, most Sr iOS devs I have spoken to recently know that swift is the future and are looking for opportunities to use it, especially in new projects where you don't have tons of existing objc to deal with.
Not exactly -- hence the `Unsafe` marking. The `UnsafeMutablePointer&lt;&gt;` type means the memory is not managed, and the contents are mutable. You should take care of managing this stuff yourself. In modern Swift code, stick to the `&amp;` and `inout` syntax, which is easier to work with anyway. `Unmanaged` only specifies that the pointer lifecycle isn't being controlled by whatever component you're writing at the moment. It's like tossing a hot potato around. In the `CF*` functions, it was a stopgap procedure while the annotation of the Swift methods continued. You should ideally immediately `take{Un}RetainedValue()` and stick with that.
What is a swift job? You're an iOS or OSX developer, you write in whatever gets the job done. You're gonna need to know at least objective-c for both of those. 
In my ~12 years of experience in the software industry, I've found that a college education is not a very good predictor of a person's ability to code. You'd think that would be the opposite, but in reality... I've had only a few formal CS classes but my experience with recent college grads would suggest that the problem is that most academic CS programs don't really prepare one for the professional environment very well. You learn things like how to implement containers (hash sets, linked lists) and sorting algorithms, and a lot of theory. That's great and all, but those are not things that are used all to often nowadays--we don't generally implement our own containers, instead we consume ones provided by the languages or frameworks we use. Thus, the academic perspective on computer science is a lot different than the professional and I've seen a number of college grads come out of their courses but not very well prepared for real world programming.
 &gt;In my ~12 years of experience in the software industry, I've found that a college education is not a very good predictor of a person's ability to code. You'd think that would be the opposite, but in reality... I don't disagree with so at all. Student fresh out of college often don't have the ability to be a successful programmer. I'm searching for the right word but will have to do with the phrase "natural ability". My point is that natural ability can still benefit from formal education. &gt;I've had only a few formal CS classes but my experience with recent college grads would suggest that the problem is that most academic CS programs don't really prepare one for the professional environment very well. You learn things like how to implement containers (hash sets, linked lists) and sorting algorithms, and a lot of theory. That's great and all, but those are not things that are used all to often nowadays--we don't generally implement our own containers, instead we consume ones provided by the languages or frameworks we use. I think you miss the whole point of studying containers and the like in a college course. The Idea here is to learn how the facilities operate. You aren't learning these containers to go out and make your own. &gt;Thus, the academic perspective on computer science is a lot different than the professional and I've seen a number of college grads come out of their courses but not very well prepared for real world programming. I completely agree. However that really means nothing when you consider the value of an education to 1 A peso,o
I would assume you can just programmatically change the default keyboard to one in whatever language Haven't really done this before so not too sure, but have fun with it
Thanks! Your site looks great btw.
The ones in the initial article compiling everything together sends me to a wordpress login.
You're regurgitating "the right tool for the job". In this case they both get the job done. He already knows both and would prefer Swift. I'm sure we'll see more Swift-only jobs this year. https://www.natashatherobot.com/swift-jobs/ 
Oh, you're right.
You are creating the variable inside the if statement. Create the bFruit variable outside of the if statement and set the value in the if statement instead.
That's a step in the right direction. Thanks a ton. I've now added: var bFruit: String Under the Rnd3 above, only now I get "Variable 'bFruit' used before being initialized" on the same lines. If I give it a dummy value above, it never applies the new string value from the if statement.
You're a saint! That was my other mistake, sorry I'm obviously new. Thank you for your time.
There definitely is! Do you have Skype?
CrapsViewController lacks a btnRoll outlet but it is set in storyboard (find btnRoll and delete the outlet link) Also double check if the viewcontroller class is set correctly.
The part of the error to look at is: this class is not key value coding-compliant for the key btnRoll. In your storyboard, did you make an outlet or an action from a button to a property or function called "btnRoll" in the swift file, and then deleted that property from the swift file but not the connection (which can be seen in the button's connection inspector) in the storyboard? That's usually what that type of error means.
OK. I figured this out. The solution is to declare the variable outside of the function first, but under the class. I just created it like this: class ViewController: UIViewController, MPMediaPickerControllerDelegate { var songUrl: NSURL = NSURL() var player = AVPlayer() func mediaPicker(mediaPicker: MPMediaPickerController, didPickMediaItems mediaItemCollection: MPMediaItemCollection) { guard let mediaItem = mediaItemCollection.items.first else { NSLog("No item selected.") return } songUrl = mediaItem.valueForProperty(MPMediaItemPropertyAssetURL) as! NSURL print(songUrl) self.dismissViewControllerAnimated(true, completion: nil) } Now I can access the songUrl outside of the function.
No -- hyper-performance comes from letting the compiler optimize your objects. As a developer you will never be smarter than the compiler, so let that sink in first. There is also a `COpaquePointer` that you'll see occasionally but that is just a stop-gap measure. The reason the `UnsafeMutablePointer` exists is to directly manipulate the memory, instead of being constrained in ways that Java, for example, might hold you back. 
&gt; unless you're doing reads/writes into memory that you don't own If it's not too much of a hassle, could you show me an example of this?
Huh, that's interesting. Now, why would you want to directly manipulate the memory? Seems like something you would use in swift for systems programming?
Which is nice, since it's cross platform now! I can't think of any example uses yet though 
I agree, I am definitely regurgitating "the right tool for the job"...because that's what I said. Using objective-c for many companies is the right decision. OP presents it like his knowledge of the language is important, when it's the knowledge of the framework he's working under that's important. If he really wants to find a place to grow he should focus less on the language used and more on the people and opportunities there. The fact his Sr. Dev. is force unwrapping everything isn't bad because he doesn't understand Swift, it's bad because he doesn't care about writing safe code.
Awesome, thanks a lot! A lot of good information here. For creating variables in the shader interface, there's no construct that tells you these variables, you're actually manually calculating what the address of the memory is from what you know of the MTLBuffer memory layout and other clues? That's really interesting. Since the memory is not owned by you and can be deallocated without you knowing, do those bounds checking asserts also account for that? So, unsafe\* are for general c api's and if there's a use (such as this one) it's best to drop down to a lower level to have a better handle on things. It's not ideal to use it in swift unless necessary.
I know right! I used to use nodejs for any simple scripts, but now I seem to be using swift for everything everywhere. Thanks again for the info!
Metal shaders are... interesting. Basically, you define your interface in the shader, and then it is entirely up to you for the data in the buffer that you bind to it to actually make sense. One way to do that is to hard code the offsets and layouts in your code. This works, although is fragile - any changes you make to the shader layout need to also be accounted for in your code as well. It also is difficult to do in Swift since it doesn't offer any guarantees about struct layout as far as I know. The slightly better way is to query the parameter names and offsets from the shader when you load it, and then write data into the proper places. You get the MTLArgument file by querying the GPU pipeline state after you've created it from a set of shaders. It's a pain in the ass, but yes - by querying the offsets for shader parameters you are able to guarantee that you are reading/writing into the right places in GPU memory. The bounds checking asserts in my code are there to prevent someone from reading adjacent memory. Basically, since I'm calculating memory locations based off of a value provided by a user, I don't want them to be able to pass in an invalid number and read/write memory that they shouldn't - e.g., write position 5 in an array of only 4 elements. When working with pointers there is nothing there to actually prevent that from happening. As a side note: APIs that expose memory like this typically don't just deallocate or move the underlying memory without your involvement. Doing so would (typically) cause a segmentation fault the next time you try to touch that memory, which is not optimal. With Metal buffers, the lifetime of the underlying memory allocation (and all the data contained in it) is controlled by the MTLBuffer object. In that sense, you don't control the allocation (and thus, don't want to use the Swift/CF retain/release pattern on it) - but when the object gets destroyed it will automatically deallocate the memory as well. And yeah, as much as I like Swift it isn't *quite* as nice as C is for systems programming. Unsafe* types are good for directly manipulating data in a buffer if the compiler is aware of the layout, but C is better at letting the programmer define the actual layout of data in memory.
Welcome! Look into the SwiftAndroid project on GitHub too -- soon you'll be able to write Android apps in pure Swift! :) When libdispatch and Foundation settle down, 99% of Swift code will be portable to any *nix platform. (because who needs Windows anyway?)
In Swift, structs and classes are extremely similar, except that structs are passed around by value and classes by reference. This WWDC talk explains this really well. https://developer.apple.com/videos/play/wwdc2015-414/
Can you elaborate more what you are trying to do? 
Seems like all of iAd is being discontinued since I enrolled my app a day late, and its not getting any requests.
Porting any of the snippets there should be trivial even if you have never written Objective-C before.
The socket can only be alive while the application is running in foreground AFAIK. The socket library I have personally used a few times now is Socket.io google socket IO they offer both an app and server side solution (node js i believe). It is really simple you connect, auth(if required) and subscribe to data stream events.
If you have 12 years of php experience learning Swift shouldn't be a problem, to begin with. And making a text based game in Swift shouldn't be a problem. The only thing to consider, in my opinion, is cross platform options. If there is an interest to have a game available to multiple platforms, don't make it in Swift. I'd say Unity. Its definitely possible to do "other" types of games in Unity. I think TIS-100 is Unity for example.
As someone with a PHP background myself I have found learning Swift very easy, much easier than say Javascript.
How are the links presented to the user? As buttons, cells, etc? This could be handled a few different ways but basically, you want to: - detect when a user touches a link - use a UIWebView to load that link One way to handle this would be to have two view controllers, one for link selection (vcA) and the other for webview (vcB). When a user taps a link in vcA, segue to vcB and pass the selected link. In vcB, load up the link. 
Another swift newcomer here, this is like my *hello world* but based on the other responses ITT I think I may have come up with a rudimentary example: @IBAction func iCanDoFoo(sender: AnyObject!) { let task = NSTask() task.launchPath = "/path/to/some/executable" task.arguments = ["imhereforargumentcourt"] task.launch() task.waitUntilExit() } So that would be the script that goes into the AppDelegate.swift, and then you make a button in the storyboard and connects the sent action of the button to firstresponder-&gt;iCanDoFoo. Day 2: I am liking swift.
Start with Swift. As others have said, you'll need to learn Obj-C eventually. Since you're experienced with programming, going learning Obj-C after knowing Swift won't be that bad. They both use CocoaTouch (the main iOS framework).
Hopefully this isn't too technical. In computer science at a base level there are two main types. Reference Types and Value Types. When a reference type is created and passed around, the object itself is not passed around. It is instead a reference to where the object data is being stored in memory. If you modify any of the objects data via a reference, the original objects data is changed. A value type on the other hand, when it is created and passed around. A copy of the object data is passed. This if you modify any of the objects data, the original is left untouched. It is the copy of the original data that has been modified. In Swift (and other languages) structs are value types. Thus when you pass a struct around and modify it, the original value is not changed. There is a WWDC video that talks about this. (2015 - Building Better Apps with Value Types in Swift.) In the talk, they use the example of having a Temperature Object which is used for the heating in your home and then the oven. If you defined the temperature as a class, set a value for it of say 20 Celsius and send that to your house heating system it will be fine. But if you then used that same temperature object on the oven and change the value to be 200 Celsius, you're house heating will change to 200 Celsius as well. Because it is a class, it is a reference being passed and so changing the value in the class affects the original object. However, if you define the temperature as a struct and do the exact same process, then you home heater and oven will have different values, because it is a copy of the object being passed in each case, thus any change to value will only affect the copy that is being worked on. 
Good point. That was definitely missed. Thanks!
I have used a hacintosh for iOS development extensively and it works well. 
So basically because the two oses are so different you might get errors that are too difficult to debug?
I've been looking into this as well, the problem is that I'd like to get a skylake notebook (for gaming). AFAIK skylake has little to no support since no macs use it yet.
To me the great advantage of Venice over GCD is the possibility of working without callbacks and race conditions. Running in a single thread is a great thing imo. Using an HTTP server as an example. The approach we're taking is using SO_REUSEPORT, so if you want to use all logical processors, you just start a new process which will bind to the same port and the OS will handle the multiplexing. This talk by Rob Pike (creator of Go) is awesome. https://www.youtube.com/watch?v=cN_DpYBzKso You take a well defined concurrent design and replicate it according to the number of processors available making the whole thing run in parallel using the available resources efficiently. 
Yea coroutines definitely make for cleaner looking code. I just don't like having to jump through hoops to take advantage of multiple processors. Futures and locks do a pretty good job of making it easy to deal with concurrency issues.
Why would you keep the birthdays on a server...?
Big and little endian literally does not matter; this architecture difference is the same on OS X -&gt; iOS. The "Macintosh architecture" is just x86, and so is Windows.
That is so completely wrong it irks me. The differences are the Mach-O vs PE binary format, different libraries, and the difference in system calls, amongst many other smaller differences. You're really coming off as a CS first year who's never taken an architecture or systems programming course...
My only guess is so that they could update the database without having to update the app itself through the app store; it'd just pull the data from the server automatically whenever a new one was added.
Check out Firebase. 
I do not want to store them locally. I also want practice developing an app with a backend.
I second CloudKit myself. I've used Parse and homemade servers in the past. In the wake of the recent Parse shutdown, your safest bet would be to use Apple's own solution – which, although in its infancy, is on a whole other level of convenience due to its intrinsic presence within the SDK. I'm using CloudKit for an app I'm building right now. You have a 'public' database – which is where I'd imagine you'd store the celebrity data in – and a private one for every user. One massive benefit with CloudKit is the removal of a login / signup process as it uses the iCloud credentials of the phone. To import a massive amount of data, you'd probably have to write some code that parses through that data and uploads it to CloudKit. The web interface is good – just barebones at the moment.
Great, thanks for the reply. I think I'll give CloudKit a try! I like the appeal of convenience. Part of the reason I have enjoyed mobile dev is the philosophy of using all these new technologies Apple pushes. Good idea for uploading too. I'll probably tinker with making an OSX app for that
Does it make sense to use Firebase when you don't care about realtime data? It feels sort of weird observing events when IDGAF--I just want the data once upon load.
To be honest, if I could – that's what I would go for. It was just that the overhead with setup, maintenance, (possibly) scaling, and – most importantly – user authentication, was a worthy trade-off with having full control over a homemade one. More importantly, I found myself writing a lot of boilerplate code – that, even though manageable with a reusable framework, still isn't as convenient as going 'import CloudKit' and then being good to go. It's especially useful when you just want to prototype simple ideas and don't want to bother with user logins each and every time – but still have the option of using them if the app does flesh out.
No problemo! I heard somewhere recently (Accidental Tech Podcast, I think), that Apple is recommending we build 'cloud-first' apps that stores as much as possible in the cloud, so as to facilitate syncing and data recovery. I believe it's no coincidence that this lip service is timed with Parse's departure and CloudKit's apparent maturity – which really gives us no excuse for not doing so. Another amazing thing with CloudKit is that it takes care of a lot of housekeeping tasks like retrying after rate limit's are reached automatically. I'd forgotten how much time I'd have to dedicate towards that.
big endian vs little endian was an issue when Macs used 68k and PPC CPUs. Now it's just standard Intel CPUs. Writing for iOS on a Windows machine with a VM that runs OS X should be no problem.
What you need is 360 app. I've made one of these recently. Look into [Core Movement](https://developer.apple.com/library/ios/documentation/CoreMotion/Reference/CoreMotion_Reference/). You probably need 3D also. You can wrap a spherical texture around a sphere and rotate the sphere with core motion. Look into OpenGL or SceneKit.
When you say "like Shpock", what do you mean? What sets Shpock apart from other apps in terms of what you want to create?
That's just basic CRUD...
For you maybe, yes, it is basic CRUD, but not for a beginner
By learning how to conceptualize and develop software…
The reason is simple - your code become more readable and reusable. For example, you can create a class (in separate file) in one project and use in another. 
You're not gonna be doing iOS development in Swift on Windows, period. They're talking about using a VM or a Hackintosh
[removed]
I was able to eventually answer this myself. It was solved by moving the quite fun outside of the butt under the class. Then I called the fund under the button. This worked, although I can't explain why the above code did not.
Ha ha, you serious? Congrats, every link to chrismanahan.com will now be automatically removed from now on.
Thank you for correcting me so kindly. I'm not an expert programmer nor claim to be. Just someone who programs for iOS as a hobby. 
I don't understand. This is Swift related...
That's pretty much what I wanted. Thanks!
Thanks for the post. Just a suggestion for your app. Instead of having to enter in each item, maybe just have a barcode scanner built into the app so you can simply scan each item you put in your cart. A lot faster and seamless in my opinion. Kind of like how My Fitness Pal does entry for foods and their calories.
It's also spam. Your other account was banned for it not two hours before you used this one.
[If you want to support Mavericks or earlier.](http://www.cocoawithlove.com/2008/12/drawing-custom-window-on-mac-os-x.html) If you just want to support Yosemite or later, simply set the `titleVisibility` property of your window to `.Hidden`. You can then draw anything as you please.
Do you get many sales?
According to Apple Analytics, only ~100 people have visited the App Store page. I have not done any advertisement of my app yet.
You can use the appropriate caching headers. That's what they're for. There are two headers that I find easiest to use. 1. timeouts 2. etag These also have the benefit of being controlled server side etags are essentially a checksum for the content that the server will give to you in the header response so you can check before downloading the body
Great, I like etag idea, however I am not sure how to use it in header. As I understand I can use etag in headers to get 304 response? Could elaborate a little bit how to send etag as header? (I do know how to create headers, I do not know how precisely name etag header...)
By definition, advanced topics are rare - you will always be in a minority. Further, the content of any forum depends on its users choices of discussion. Thus if you want advanced topics discussed **you** need to step up and start the discussions about topics you want - no one is going to do it for you. And you should *expect* finding others at an advanced level to be rare because that's the mathematical reality of advanced topics in any subject. Lonely? Tough shit - deal with it. Reddit is one of the primary forums for such topics so you are already on a key spot for this. Also Stack Exchange and finally Apple's developer forums. After that, you need to socially network with individuals who might want to discuss the same. (I've been involved in technology subjects far more rarified than Swift so I know this territory well)
Well sending the etag header is dependent on your back end. i.e. in PHP You can simply do something such as https://gist.github.com/mrnickel/2cee3bcc4f82dde11a42 I have no experience using AlomaFire (I typically stick to the stdlib as much as possible), I know that if you set up the NSURLCache properly, your NSURLSession requests will automatically check the headers and use the local cache
We've used a HEAD request to get the last modified date on large files in the past
In order for *NSURLCache* to do it's thing you need the response to the request to contain a *ETag* **and** the *Cache-Control* header. The Etag and Cache-Control header should be set by the server. If you are using Alamofire then you are using NSURLSession and NSURLCache as a result. The way this works is that the app will download the file once and then on subsequent connections the device should be served a 304 (Not Modified). A example of a good Cache-Control header might be: Cache-Control: private, must-revalidate, max-age=2592000 This means this resource is private, re-validate every time the resource is asked for (go to server and check the tag every time so we can be 100% sure the cached file is not stale) and cache this content for 2592000 seconds. [More info](https://www.mnot.net/cache_docs/) about allowed Cache-Control allowed values.
 func willAttendWedding(openBar :Bool, hotBridesmaids :Bool, congaLine :Bool) -&gt; Bool { return (openBar &amp;&amp; hotBridesmaids &amp;&amp; !congaLine) } 
After you scan the item to get what it is have a popup for price. 
haha love the `enum InvitationAnswer` :) super cool 
This is gold
Not necessary but a lot more readable imo
No, that's incorrect. If you use `HEAD`, then you have an extra round trip – it's slower. You have to send a `HEAD` request, wait for the response, then if you need to fetch the resource, you have to make a `GET` request and wait for the response again. Just make the `GET` request. It acts the same was as `HEAD`, but if the resource has changed, it'll send back the resource immediately. If it hasn't changed, you'll get the 304 response. Using `GET` immediately is one less request and less time you spend waiting for a response. `HEAD` isn't useful here. It achieves nothing and it slows things down. 
https://imgflip.com/i/zbir9 But seriously, there's like one or two of these popping up each week. It's great! I'm really anxious to see what the community converges on. So what do you think sets this apart from other Swift web frameworks out there right now?
This is your third time posting the same link, my second time having to remove it, and the only time I will bring it up with you. :P
To be clear on why you're getting that error message, there's another implementation of Array.contains that takes a closure `T -&gt; Bool`. Since `Dog` doesn't conform to `Equatable`, Swift assumes you must have meant the closure overload, and errors since `Dog` clearly isn't `Dog -&gt; Bool`.
Did any of you use backendless? If so, how was it?
You are right guys, just give it a try at least. Any feedback is highly appreciated. The time will reveal the winner, still I'm sure every solution has advantages. Very curious if this is something you would like. P.S.: answer to the question on what is different: I think our main advantage right now is Play framework flavoured asynchronous programming (with Futures). So it supports functional style async programming. Would love to have some feedback specifically on this.
Thanks, these are helpful.
Alternatively, at the top of the view controller in main.storyboard, right click on the "square circle thing" (the far left of the three icons on top). It will show you all referencing outlets, delete anything with a caution symbol. This happens if you create an outlet but delete that line of code later on. If that doesn't work, read through the output logs for a specific error on the bottom right of the screen
They all appear to be valid, well according to the "referencing Outlets" in the '-&gt;' menu. 
Thanks this worked, i think what you mentioned was suppose to be in the tutorial. Blame Apple for that lol
This is just one of those things that you'll learn to check for every time that error pops up. It's not always the solution but, in my experience, it is what causes the error 95% of the time.
Thanks for the reply. I am familiar with ARC (maybe my understanding is not correct, if so please help). As I understand, with ARC when I do var x = MyObj(() //assign chunk A to x Memory is allocated to variable x. Then when I do x = MyObj() //Assign ChunkB to x, release ChunkA The old memory assigned to x is freed since there is no reference to it. I do not have to call release/retain in Swift. I updated my example code and I believe my understanding is correct since the deinit prints are what is expected. I am doing the same kind of thing in my App but I don't see a change in memory being used. 
&gt; When you're creating `x` as a strong variable you'll have to set it to `nil` before instantiating it again, unless you declare it as `weak var x = MyObj()` This is incorrect. `var x = MyObj(); x = MyObj()` allocates a `MyObj`, deallocates that, then allocates a new one. Assigning to nil is not required (nor is it possible, unless `MyObj.init()` was failable). `weak var x = MyObj()` allocates then *immediately deallocates* `MyObj()`, since there are no strong references to the new instance anywhere. In the next line, `x` will be nil.
Hands on, which resulted in 2 apps in the App Store within a few months and a fair few experiments and prototypes which might turn into full apps if I find the time. 
google
thanks, i'll check google now...
Using `unowned` instead of `weak` does not prevent the new instance of `MyObj` from being immediately deallocated; unowned references are not strong references, they simply are not nil-ified upon deallocation of the instance they point to (which can be dangerous, as they will point to invalid memory after the deallocation of their objects). Again, I recommend experimenting with these things in a Playground, especially before advising others on them.
Exactly! A popup will ask for price and quantity. 
I believe you are right and my original understanding is consistent with your explanation. I just have to figure out if there are any strong references remaining to the nodes in my tree. That can be the only reason why they are nothing freed
The deinit for that object is being called. But they are not getting called when I point the root of the tree to something else. So must be a retain cycle of some kind 
&gt; Is there a way in Xcode to query the number of reference counts a given object has? I wish... Unfortunately you kinda run into a Heisenberg uncertainty thing there. You can use the `isUniquelyReferencedNonObjC` function to test whether an object has a reference count greater than one, but it only works with objects that *don't* inherit from `NSObject`.
That code doesn't look thread-safe. A thread-safe singleton has the property that the initialization code is guaranteed to run exactly once, even if two threads try to access the singleton at the same time. It looks to me like the runtime will create an object on each thread, run the initializer, then do the assignment Even if the runtime guarantees that the **let** evaluates once, what happens when the other thread tries to do the assignment? Will the losing thread's attempt to assign succeed, be a no-op, or just crash?
Yes I would. If you take your time, do the exercises, and make sure you understand everything before moving forward you'll know a lot of Swift by the time you finish the book. I'd also strongly recommend Apple's Swift book (free on the iBook store).
No sorry. I'm more of a fan of the "read a few books and code a ton" school.
yes. And playgrounds are great. I found that starting with some basic maths problems and building it up helped me a lot.
"To keep the system simple, users of iOS devices do not have direct access to the file system and apps are expected to follow this convention." I believe the idea is that iOS apps are expected to put more effort into providing an easy to use interface for dealing with files rather than phoning it in with "oh, here's a directory with all your files enjoy". The file system is just an abstraction itself, I don't get why everyone considers "direct" file system access the gold standard in usability. 
How much programming experience did you have before starting Hacking with Swift?
Hi everyone! I made an Auto Layout framework to help make my Auto Layout code as concise and readable as possible. Yes, there are many others out there, but none had everything I wanted: * No blocks/closures. I found these to be annoying in controllers that had lots of views. For a project with SnapKit I was calling tons of blocks for one controller's layout and it was pretty ugly. Cartography is cool, but has this problem as well. * I don't like chaining methods as SnapKit does - I find it too hard to parse quickly later on when I come back to the code; I prefer the operator-based declarations like Cartography and SwiftAutoLayout. * Support for multi-constraint macro properties (like .m_edges, .m_frame, .m_size, etc). SwiftAutoLayout and other operator-based DSLs don't seem to have support for these in a concise form. * Support for implicit property matching. SnapKit does this to some degree, but again I'm not a huge fan of the chainable function pattern for Auto Layout declarations. * Support for implicit tuple processing (you don't need to call out a tuple as a specific element like CGRect or CGSize). * Support for multi-view alignment/constraints in a single line. * Threw in support for an operator that lets you visually construct view hierarchies rather than using tons of sequential calls to addSubview(). .. And more! Here's an example (setting the size of three views at once): [view1, view2, view3].m_size |=| (100, 200) Anyway, hope that it finds a home in your next project :) If it's missing a feature you want, contributors are welcome!
With iOS? About 20 minutes looking at Objective C and thinking "this language is crazy". Outside of that I know about 3-4 languages well enough to produce production ready apps and a handful more well enough to read and possibly knock together something that'd work but not be optimal. It's worth nothing I've had no formal training and everything I've done since I started was hands on. I just work better that way, I do what I can until I hit a problem, then I solve it, often by reading a relevant doc or article. The Hacking with Swift series is exactly what I would have loved when I started out with C and Basic, sadly there wasn't anything like it back then :)
I used we heart swift for a while and completed their free courses before purchasing the rest. The free demo was very helpful as an intro so I would work through that before deciding to buy it. Hopefully this helps. https://www.weheartswift.com here is a link where you can find the demo http://www.weheartswift.com/swift-programming-scratch-100-exercises/
heyyyy, down vote all you want, but alllllll this stuff is pretty much easy to find if you apply yourself.
Hehe. It's actually inspired by the OS X Finder icon... I guess iFile had a similar idea... 
True but it should depend on the app. For some apps "direct" access is the best way to interact with the files. Also, "direct" access could be super useful for debugging... 
The initialization is thread safe. Static class variables are lazily evaluated using dispatch_once under the hood.
That's a great idea honestly. 
My first guess: I think you are over optimizing. If you are really using lots of memory in the presenting view controller then implement didReceiveMemory warning on the presenting view controller. In that method clean up all the waste. That's what that method is there for. override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } The other approach is to clean up stuff in - viewDidDisappear: then reload the stuff in - viewWillAppear: Dismissing a presenting view controller just doesn't make much sense. 
I'm confused. Your edited example shows the objects *are* being deinitialized. The amount of memory Xcode reports the system has allocated to your process is *not* an accurate picture of how much of that memory is being actively used. Use the various memory-related Instruments for that. 
I'm stumped on how removeFirst doesn't invalidate indices. wat.
&gt; Swift Programming: The Big Nerd Ranch Guide Have you used this book yet? Any reviews?
I agree. Just looking for feedback. The pre-req's for the Stanford course make it look like it is NOT ideal for beginner's: *[Prerequisites](https://itunes.apple.com/ca/course/developing-ios-8-apps-swift/id961180099): C language and object-oriented programming experience exceeding Programming Abstractions level, and completion of Programming Paradigms.* Hacking with Swift looks like a good intro for beginner's and is free as well.
Thanks, I didn't know about that! )
If you have little to no experience with Object Oriented Programming and you try the Stanford Swift class you will enjoy the first 2.5 classes and then crash and burn pretty hard. He even says so at the start of the first class. Something to the effect of "if you're not a strong object oriented programmer this class is not for you, we will leave you behind." The assignment after the third class is not for the uninitiated. imo. BUT fortunately Stanford also offers the prereqs online as well. [Stanford SEE](https://see.stanford.edu/Course#Introduction to Computer Science) EDIT: I'm going through 106a at the moment. The instructor, Mehran Sahami, is really an amazing teacher.
I couldn't do it with the help of pr 'prepareForSegue' method because I have this sctucture: V1-V2-V3 and I need to pass the data from V1 to V3. If you know another way how to do it, please tell me. )
Oops, yeah if you're a beginner it might be a bit rough. Definitely check out that SEE course /u/zubrowka182 mentioned. And I definitely recommend hacking with swift, if only to be entertained while working through the boring (in comparison to building real apps) 106 material. Also heard good things about big nerd ranch's books, they take the beginner approach though I haven't used them myself
The Stanford course is not for beginners. He says in like the second video you need to be very comfortable with recursion by that point and he is clearly teaching the class to a room full of experienced programmers. 
It clearly sounds like your flow needs a model either simple class objects or core data and pass to each vc...
So deinit is *not* being called? What is Instruments telling you? Edit: looking at your sample code again, you have two fairly different examples. Are either of those your actual code? I see no problems there, but if they're not (and I'm assuming neither one is) that doesn't mean much. Is there any chance that somewhere you've got a second reference to the original root node? (Like say a table view controller that is holding on to it...)
I have it and I should say that Mark Price is a GREAT instructor! It is perfectly suitable for begginers
deinit is not being called. I have not used instruments before. Exploring using that today. Why do you think the examples are different? In my view they are the same. The second example has more code to fill the gaps (building the tree and print statements) 
I think they're different because they're... Different? Different class names, identically-named functions but different parameters, etc. Functionally they may do pretty much the same thing, but my point was that it seemed you were showing us various made-up examples and not your actual code. It's impossible to tell from here what might be holding onto your old nodes without seeing the real thing...
Ray charges, quite a lot more by the way. But I get your point.
I've never used EVReflect before but I ran into a json string error before using it in other applications and I found that in order to use json strings correctly I had to convert it to a String like this: let s = "\(jsonString)" This seemed to solve my problem. I don't know if this is the same as yours but I hope I helped. Edit: letter
I'm doing Mark's course right now. So far it's great as I learn more by doing and repetition than reading. Only gripe I have is he talks fast but I just hit the 15 second rewind button a couple times to catch what I missed. His github lesson was really well done and gave me a deeper understanding of it. 
i recomend you thinking about events, sent from the server, it could be apple push notifications, webSockets, socket.IO (easy use of websockets).... there is so many events frameworks for each server language
The course seems to cover a lot of ground. How did your app turn out? Does he go through cocoa at all?
Thank you! You guided me to the right way: Downcasting it like this finally solved my problem: (jsonString! as String) It still wonders me why a string to string conversion was necessary but it helped :)
Didn't realize that there were separators because of the gray color, changed that. Thanks for the tip!
Does he focus more on swift programming or is the course more aimed at doing what you need to know to build a complete ios app? 
No problem! I'm glad I could help
I did that course, i really learned how to made that apps. But i didnt learn how to code in swift. 
This is beautiful. I'd just pulled SwiftAutoLayout into an huge obj-c app that we're just starting to add swift to. I'm loving SAL but had to modify it to prefix left, right, etc to avoid conflicts w/ an existing UIView category. I also wasn't totally sanguine about overloading == and the like. Mortar looks like it addresses both those issues plus adds a bunch of other goodies. I'll have to try switching over while it's still fairly easy.
Those wacky operator methods are bad attempts at being monadic. The operators are much less wacky if you're used to writing code with Applicatives, Monads, and Functors (concepts from Haskell that every programmer would be better off knowing deeply). I've been interested in replicating [monadic parsing combinators](http://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf) in Swift, because they provide a much cleaner way of doing actual monadic JSON parsing, with the added benefit of not using an in-between Json data structure.
I'm only 20% into the course but so far I though the first couple of example apps we made were informative. 
Are you planning to go the distance and take all the pre-reqs (CS 106A/106B/107)?? I know it all sounds very interesting and fun to learn, but if you want to get into building apps do you really need to know all that background theory? Are you better off getting into Swift and Cocoa right off the bat and start building?
I actually did replicate this exact parsing method in Swift and used it to parse JSON! :D
[removed]
Advance warning: like it says in the FAQ, some questions are deliberately sneaky. If you're looking at some code and thinking "I don't think this will compile," you're almost certainly correct.
Thank you. Adding to improvement list. Also Kelly is cute and taken. 😉
Very welcome. Now do something BIG with it. Lol
Pics of Kelly? 
Keep working on it. Let me know if you have questions? Pro-tip: Don't listen to anyone saying to use cocoa pods. They are the devil.
Honestly, it doesn't seem like a very interesting exam. It's less "How well do you know Swift?" and more "How good are you at pretending to be a Swift compiler?" Half the test is questions that, were you writing actual code, would be clear by the big red compile error staring you in the face.
I understand what you're saying, and did consider various options before starting work. It would have been non-trivial to create a test that had people write code for review by the system, so instead I focused on what can be answered using multiple choice. Some of the answers, as you say, are compile errors: 10 in the Novice 30, 7 in the Intermediate 30, and 3 in the Expert 30. A long way from half, but certainly quite a few. I don't believe that diminishes their value, however: Swift/Linux users do not have the benefit of Xcode to point out their errors as attractively, and people asked to whiteboard in an interview certainly don't. But even then, as you can see only about 20% of the questions would be caught by the compiler. The rest are designed to make you think, "what does this code actually do?" If you join a team with pre-existing Swift code, being able to read and understand someone else's code is an important skill, and I hope these tests go some of the way towards building that skill. If you have suggestions for how I could write a more effective test, I would be very interested to hear. I would also like to hear which questions you got wrong, and what your overall score was.
No, I haven't even heard of that but I will take a look. Thank you. 
Sorry! (Not sorry) :) I hope my explanations on the results page go some way to demonstrating why answers are correct/wrong. I am considering taking all 90 questions across the three tests, adding much more explanation and context, and turning it into a book to help people get a better understanding of how Swift works. I think it might sit well alongside Hacking with Swift, because it wouldn't need to go near iOS/OS X dev. If you have suggestions for how I can improve the tests, or if any of my explanations were unclear, do let me know!
Glad to hear you found it. &gt;I tried using instruments but could not figure out how to make it give me the number of references for a specific object. It's a bit late now I guess, but just so you know: 1. In Xcode, Product -&gt; Profile compiles your app and opens Instruments (you got this far I'm sure). 2. Select the Allocations instrument. 3. In the resulting window, check "Record reference counts" in the Launch Config for Heap Allocations on the center right. 4. Hit record. Your app will launch. Do whatever you need to do and then you can pause. 5. Type in your node class name into the search box (it says "instrument detail") to filter the table that shows what classes have been allocated. 6. Hover the mouse over the relevant line in the allocation summary (since you just filtered to a specific class name there's probably only one line!) and click the little forward-arrow icon that appears next to the class name (yes, this is stupid, why can't you double-click the line to drill down like you instinctively expect to?). 7. A list of allocations for every instance of that class should then appear (you can use the path bar along the top of the summary table to move back if you need to). They're most likely in order of timestamp, but if not, sort them that way so you can easily see which was allocated first (presumably your root node was first). You will see what method the node was allocated in under the "responsible caller" column (this should help confirm you found your root node and not a child created elsewhere). 8. Once again, hover over the line for the root node and the arrow will come up again (next to the memory address). Click it to drill down into the details of that specific instance. 9. You should now be looking at a list of events that happened to that instance, including its allocation and every time it was retained, released, autoreleased, etc. Using this list, you should be able to identify precisely where the extra retain(s) are coming from.
It was actually really helpful. It showed how reliant I am on Xcode telling me when I am being dumb. But uh.. I just woke up and haven't had coffee yet so, you know...
Bah, I overlooked a `final class`. I also got the same question twice.
Are you holding out for a hero?
Are you sure it was the same question? Some questions have variations that produce different results, such as the question on sqrt().
Thank you! I'm glad it was useful. Clearly the tests aren't to everyone's taste, but that's OK – I hope my explanations for your results were clear!
Both are likely to be announced in June, and available to the public in September. There will always be a new version coming out; there's no reason to wait. Neither are available for developers today.
No point to stop learning. From what I've seen, there will be very minor changes to Swift 3.0. Some functionality will be removed and Foundation framework will get new naming conventions for methods. But this can likely be changed with an automatic renaming tool from Apple. If you want to be ready for Swift 3.0 just look up the changes. E.g. stop using C style for loops. 
This is a general problem. People are too quick to jump to third party libraries when often you can make better and simpler solutions by just using the standard library. Just sit back and think a little bit before searching Cocoapods. Third party libraries are not free. A lot of them are not update regularly and you can end up with totally outdates libraries you don't know how to maintain, when you could instead have written slightly more code yourself but which you could easily maintain.
very interesting ! keep us updated ;)
Would this allow to prevent crashes if someone decides not to give access to the location services? Because I haven't thought of that it might crash if someone does so.
Why not pass the object(s) twice?
Any chance Amazon has an API? They do barcode scanning in their app. Also RedLaser does it. Maybe they have APIs. 
If you have one tuple used in only one place, what do you gain by having it implement a protocol?
This is really cool!
But if you don't initialise optionals with `?` in the `viewDidLoad` or a constructor, mayhem also ensues, because those variables won't have a value. I think declaring variables with `!` is great, because you'll be able to tell right away if you forgot to initialise something.
I'll remember this when I make my millions!
Thank you!
 let x = 6 if x &lt; 5 { print("x is less than 5") } else if x == 5 { print("x is equal to 5") } else { print("x is greater than 5") } I clicked on the if-else link at the top. That has to be the ugliest way I've ever seen somebody use the else if statement.
https://github.com/apple/swift-evolution There's also the (very active) swift-evolution [mailing list](https://swift.org/community/#mailing-lists) where changes are discussed before becoming a proposal.
+1 Thank you
Unless that's how they use it. 
I'm fairly certain. And, IIRC, I got it wrong because of the same reason.
If I were to do it, I would lay a UIView over the top of the map view and then cut out a circle using CGContextref around the location of your map annotation
I've never tried it but MKMapView inherits from UIView so you could do something like this in Swift mapView.layer.cornerRadius = mapView.frame.size.width/2 mapView.masksToBounds = true This will only work if the mapView is a square. If it's any other shape you'll get an oval. 
&gt; Stanford SEE 106B and 107 are currently teaching C in 2015/2016, but the online offerings are from 2008 and they teach C++. I'm more interested in learning C and how it interacts with computer hardware. Do you know of something C-based? CS50 I hear fits this bill.
I feel like it'd look identical in objective c
You should be able to set the map view layer's maskLayer to a CAShapeLayer with a circular path.
The Core Intuition podcast's Slack channel has a bunch of great OS X (and iOS) developers. Can't find the link, but the main site is at http://www.coreint.org.
Noted. I'll take this on board for future articles. Still a little disappointed that Swift didn't adopt the Allman style of bracing though ;)
&gt; I would prefer to see you start out learning with a lower level language or simpler constructs in Swift first. The Harvard CS50 (OP's question) is based mostly on C programming, do you think this is an appropriate starting point? I was under the impression C was close to the *metal* and helps people understand how computer's work. Would you agree? I'm no expert, but you seem to know what you are talking about.
Why do pass it twice if I could just use the singleton?
I did this for an internal app I recently built for the company I work for, you can find an example here: https://overflow.buffer.com/wp-content/uploads/2016/02/locations.png I can go into more detail if that's kind of what you need. It shows the user's avatar in a circle shape for the annotation
Why was this necessary?
Depending on the OS OP is targeting, UIView has a maskView property now too. 
See this link explain about iCloud using programming : http://iosdevcenters.blogspot.com/2016/02/how-to-checked-user-logged-into-icloud.html
Is there any way to use this as a stand alone app similar to Finder as opposed to integrating it into another app?
Absolutely! The music is by Eric Matyas of Soundimage.org. The song's name is Clippity Clop, direct link here: http://soundimage.org/clippity-clop/ 
I concur. If you add use_frameworks! you don't need bridging headers, just the import statement.
thank you very much
Thanks! I was just able to get it working by doing: let pinForAppleMaps = location.placemark let mapItem = MKMapItem(placemark: MKPlacemark(coordinate: pinForAppleMaps!.location!.coordinate, addressDictionary: pinForAppleMaps?.addressDictionary as! [String:AnyObject]?)) let launchOptions = [MKLaunchOptionsDirectionsModeKey : MKLaunchOptionsDirectionsModeDriving] mapItem.openInMapsWithLaunchOptions(launchOptions)
Inkscape has within its app bundle a command-line version. With that, you can programmatically convert SVG to PNGs in multiple sizes, and generate a asset catalog of named images that you can use in your U.I. If you don't like that, github has multiple Objective-C SVG libraries, callable from swift, that read SVG files, and draw them using UIBezierPath on iOS, NSBezierPath on Mac.
awesome! thanks for sharing
Likewise. What's up?
Thanks for the tip. I tried use_frameworks! and it created a new issue. I can't import FMDB now due to the following error: 'Include of non-modular header inside framework module 'FMDB.FMDatabase' Seems to be a known issue with CocoaPods. There is more info here: https://github.com/CocoaPods/CocoaPods/issues/4420 
&gt;Oops! You appear to have an ad blocker enabled. Aaand blacklisted in /etc/hosts.
There is a `returnKeyType` property. It's also available in Interface Builder.
If I had to keep my eye on any specific library it would be Alamofire. They address HTTP/2 features in this github issue though, which might be of value for you: https://github.com/Alamofire/Alamofire/issues/935
&gt;Should i break it down here what i want to see if i can get help for it? Well you definitely have to do that as it's not clear what parts of the app you want to imitate. 
If you mean a toolbar above the keyboard, like Mobile Safari uses for filling in forms, then you need to assign a view to the `inputAccessoryView` property. [Documentation here.](https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/InputViews/InputViews.html)
You mean the flow of it or the UI elements? These 2 are pretty different areas... In both cases I'd go step by step.
Watch the WWDC sessions for 2016 when they come out mid june
As I mentioned in title not for saving locally, I'm interested in sending it to server not for saving locally :/ 
I don't use AlamoFire but a quick look shows they like file urls for uploads. So what you might consider is writing the image data locally to a temp file, then passing the url to AlamoFire to work with. If you are totally against this, you can ditch the 3rd party framework and work with NSURLSession directly which takes an NSData object as the post body of the request. 
I don't believe it's a good idea to jump straight to learning a library like aloma fire when trying to learn a language. I'll agree that it makes things A LOT easier, but at what cost? What happens when swift 2.2 is released, and breaks what alomafire has to offer? Granted the team is very good at supporting their packages, but shit happens, and understanding the basics is important. @swiftnewbie999 I suggest you keep plugging away at trying to understand NSURLSession and all associated URL layers before jumping into alomafire. Yes, it may not work now, but think of your research not as a waste of time, but a way to enforce what you've learned in a deeper more meaningful way.
As in, do you have to use ```|=|```, ```|&gt;|``` and ```|&lt;|```? Yes -- those are the operators defined to create the constraints. I feel that using the ```=``` or ```==``` operator is too semantically confusing.
Thanks for sharing. It's gonna be really good introduction for me as a newbie. 
While it may work for your restricted use case, all those `!`s are going to mean runtime crashes if the data isn't exactly as you planned.
Why?
my last full answer at fradelic post, finally managed to make it work, but sending directly nsdata didnt work at first
[removed]
relevant user name
I agree operators can be too semantically confusing, which is why it would be good to expose the functions behind them. 
I have been having a hard time using it with swift. I literally cannot find a tutorial that's effective. I'd like to use swift, java, python, or C++, but haven't been able to get going. Do you have any suggestions or example code?
Thanks for the advice. I updated my code below. I think this makes it safer. let pinForAppleMaps = location.placemark if let addressDict = pinForAppleMaps?.addressDictionary as! [String:AnyObject]?, coordinate = pinForAppleMaps?.location?.coordinate { let mapItem = MKMapItem(placemark:MKPlacemark(coordinate: coordinate, addressDictionary: addressDict)) let launchOptions = [MKLaunchOptionsDirectionsModeKey : MKLaunchOptionsDirectionsModeDriving] mapItem.openInMapsWithLaunchOptions(launchOptions)
Maybe make a VC#0 at the bottom of the stack and you can stash the singleton objects there and refer to them in the other VCs.
Made the change and confirmed it is working. I appreciate the help.
Well i have these electrotherapy pads that work thru 3.5mm jack, qnd I was trying to make an app that can utilize this
I apologize in advance to the mods if this is the wrong place. The rules did not have any guidelines to abide by regarding questions. Furthermore, I have tried StackOverflow, the iPhone Dev Forums, Freelancer, etc. No one seems to be able to provide any sort of answer, whatsoever. Any clarification or followup would be amazing, thank you. I'm not sure where else to ask at this point. **EDIT:** Grammar
The stereo output points will probably both supply +/- 1.5V. I don't think it's enough to drive the pads to let your muscle contract. If you have a multimeter you can measure what the device itself outputs. It could easily be 100V or more.
Google Cloud messaging supports delivering notifications to iOS devices. Or at least [their documentation claims so](https://developers.google.com/cloud-messaging/ios/client).
I don't know - how many open source ibm frameworks do you use? 
What's the code you're trying?
overridden by the subclass right? so it is applicable in inheritance? 
What do you mean? Like what I typed in that runs slow?
Yup.
To add to this, I like to rewrite a simple application I already know all the logic of to test a new language. I only need to worry about syntax at that point 
Yes. You can only use class func in classes, and static functions in structs/enums. Thus class func can be overriden due to inheritance.
nice work! why did you use queues to seperate tasks instead of groups?
not sure how to interpret this response, maybe you read something different to what I intended? The skynet benchmarks compare across languages, not just Obj-C &lt;-&gt; Swift.
If you think of it as "a more laid back Rust, with good OSX/iOS support", you're about 90% of the way to an accurate picture of it. Similar safety-first low-level-with-high-level-niceties approach. Like Rust it doesn't require a GC, unlike Rust it doesn't lend itself to completely manually managing memory (e.g. if you're in an environment that doesn't have malloc you'd want Rust not Swift, but otherwise you'll spend a lot less time being shouted at by the borrow checker). Like Rust it prefers compile time generic polymorphism, but isn't as emphatic about that preference. Like Rust it bridges pretty well to C when you need it (though more cleanly to ObjC, which won't matter to you). Like Rust, it's open source with an active community around it. One particular lack relative to Rust is a language-level concurrency model; Swift currently relies on library-based concurrency like libdispatch, though that's planned to be addressed in the future. In practice though, this generally works fine. 
I don't know how to do that, but I do know that you can control your output simply by playing a sound with the desired waveform. Sound is just a very specific kind of electric signal. why don't you try to send a short trigger to the pad and see what happens? You can simply draw it in an audio editor, or google for a trigger pulse wave. Something like this perhaps? http://www.crudbump.com/pulse-2db.WAV
While I will never use it and never liked IBM stuff, at least this is very important stuff for Apple as the Enterprise cares a lot about what IBM does. This will increase the acceptance of Swift in the enterprise.
Literally all of these frameworks are identical. WTF.
Probably mostly affects companies that spend millions on projects. IBM goes after the big fish. Does it help Swift? Sure, in the Fortune 1000.
Lol the discussion on the repo's latest issue is just top notch. 
[removed]
/u/preflightsiren I was curious about how to do this with [PromiseKit](https://github.com/mxcl/PromiseKit). Unit test below runs in about 18 seconds on my phone and 20 on the simulator. I don't know how that compares to other languages. **edit**: added some comments for those not familiar with promises. import XCTest import PromiseKit class ConcurrencyTests: XCTestCase { static func skynet (num num: UInt64, size: Int, div: Int) -&gt; Promise&lt;UInt64&gt; { // no more instances needed guard size != 1 else { return Promise(num) } // run in default background queue return Promise().thenInBackground { () -&gt; Promise&lt;[UInt64]&gt; in let sz = size / div // create div-length array of promise tasks let tasks = (0..&lt;div).map { i in return skynet(num: num + UInt64(i * sz), size: sz, div: div) } // start all tasks in the array at once return when(tasks) // add the results when all tasks fulfilled }.then { results in return Promise(results.reduce(0, combine: +)) } } func testConcurrency() { let expectation = self.expectationWithDescription("perform concurrent tasks") ConcurrencyTests.skynet(num: 0, size: 1000000, div: 10).then { result in XCTAssertEqual(result, 499999500000, "expect correct result") // pass! }.recover { error in XCTFail("\(error)") }.always { expectation.fulfill() } self.waitForExpectationsWithTimeout(30.0, handler: nil) } }
Thank you! The thing is there is already an encrypted data in production which needs to be decrypted through the iOS app. Is there any alternative for Grain-128 to be used for decryption on swift? I have gone through numerous searches and only found block ciphers for swift instead of stream ciphers which is used by the Grain-128.
I see what you did there :)
Can you link me to specs on Grain128? Never heard of it and googling leads me to (your) stack overflow post. 
thanks for that answer. now its clear to me how they differ to each other
Thank you, thank you. Here's the link to the javadoc of bouncycastle's Grain-128 Engine: [Grain128Engine Javadoc](http://javadox.com/org.bouncycastle/bcprov-jdk15on/1.52/org/bouncycastle/crypto/engines/Grain128Engine.html) Here's the link to Grain's wikipedia: [Wikipedia](https://en.wikipedia.org/wiki/Grain_(cipher))
let interestingNumbers = [ "Prime": [2, 3, 5, 7, 11, 13], "Fibonacci": [1, 1, 2, 3, 5, 8], "Square": [1, 4, 9, 16, 25], ] var largest = 0 for (kind, numbers) in interestingNumbers { for number in numbers { if number &gt; largest { largest = number } } } print(largest)
It sound a lot like [Little Bites of Cocoa](https://littlebitesofcocoa.com).
It's still at a really early phase and there is nothing to sell but promises of a bright future.
You could take a look at SVGKit. The main fork supports iOS, while my fork focuses more on OS X.
Yes, that's what prompted the question. Of all the servers I've seen, only Perfect.org makes any mention of running behind a production-grade server using FastCGI. I wondered if these other frameworks, like IBM's one today, reasonably expect to ever replace nginx/httpd for handling HTTP connections, or whether there's a missing piece to the puzzle I'm not quite getting.
Node comes out of the box with HTTP connections. No nginx or FastCGI required. I think they might still be used for specific problems (maybe routing sockets through 80 and port forwarding them? Or using them in conjunction with other languages on the same server?), but not needed or even standard for production. Might see the same thing with Swift.
Nice! That's pretty slow (about 100x slower) compared to .net, Java and golang. Thanks for sharing! Using XCTest is an interesting way to run it!
Taylor looks mostly abandoned and appears to have been an early proof of concept not a real attempt at a product. Perfect licensing will be unsuitable for some. That leaves Zewo, Vapor, Swifton and Kitura for the remainder. Nothing wrong with some competition; in the end developing and maintaining efforts like this will be a lot of work.
This is a great resource, thank you! It's not the same site, but this is an excellent resource that matches up to everything I described so as far as I'm concerned my search is over.
Hey Paul, I would love to share what I thought in more detail. I hope this can be of help. &gt; Paul loves starting with a complicated template, and then asking you to remove half of it. I will have to stand by this. What I meant with "complicated template" is a template that is not the simplest one you could use. Yes it is a built-in template, but to someone who doesn't know how it works, it is more complicated than it should be. A parallel to it might be (if you have any experience with it) Ruby on Rails scaffolds. They are pure magic if you don't know Rails, so it's better to start from a simpler method (especially when you're learning) and build up to it before you can decide if you want to use scaffolding. This is pretty much exactly like that. &gt; This is partly because deleting code is easier than writing code ... This might be the case for someone who already knows how that template works, definitely not the case for a newbie iOS developer like myself. When you are adding code to a simple template, you know where to start from, the template is your starting point. You can replicate those steps. When you are deleting from the template, you, as the author, know exactly what to delete, and why you should delete those lines. A beginner doesn't know that. After reading 11 chapters of HWS, I didn't feel confident that I could start a new project on my own. In all the projects, so many lines were deleted, and I had no idea what lines I would need to delete. Compare it to starting from scratch, with the simplest template you can. Your starting point is clear. &gt; I would very much like you to share with me when I told you to add a random thing to a project and told you not to worry about how it works. Project 10, section "Importing photos with UIImagePickerController" (direct quote): &gt; The problem is, it's not obvious how to find that directory, so I have a method I use called getDocumentsDirectory() that does exactly that – you don't need to understand how it works, but you do need to copy it into your code. To be fair, you try to give a very quick explanation afterwards. This might be just one example, but this was how I felt all throughout the chapters. I didn't feel like I understood clearly what each line of code meant. I understand that to you they are in a certain order, and they build-up on each other, but I honestly didn't feel so. The order of topics were definitely not based on the complexity of what you were teaching. All those concepts might be easy to you, but to someone beginning, some are more difficult than others. &gt; The course has a very precise direction indeed: to teach all major parts of UIKit, SpriteKit, Core Graphics and Core Animation over a series of tutorials that are designed to be followed in order. I don't think the series are taught in a "need-to-know" basis, and to me it doesn't really have a direction. What is the aim exactly? When someone reads all the chapters, what should they be able to do? Do you think they can write useful stuff in UIKit, SpriteKit, Core Graphics, and Core Animation after reading 30 chapters? I really didn't feel I could even use UIKit after reading a third of it. For example, by the third tutorial, you are teaching how to integrate your first project with social media controls. Does a beginner really need to know this? Aren't there more useful techniques they can learn before that? I'm really sorry if I sounded too harsh. I really do appreciate the time you put in creating the course. I can clearly see that it is not something that was put together in a short amount of time. And as you said, you can't make everyone happy. I feel that your course could be more suited to someone who already knows the basics, and who would like to learn certain techniques, but you are saying that the course is aimed at complete beginners and to be read in order. It definitely didn't work that way for me, but it might for someone else. Once again, I hope this could be of help to you. Wish you the best with the course. 
Hello! I can't help but wonder if you're referring to my own [Swift Knowledge Base](https://www.hackingwithswift.com/example-code), which is hosted on my Hacking with Swift site?
Nimble matchers are complex to follow - the idea of this is to use swift's language to provide easy to understand matchers. I went for simplicity over complexity
Sure, if they are going with IBM. No one is saying everyone will choose Swiftvor IBM. Simply that there will be projects where they choose IBM and Swift because ... No one ever got fired for going with IBM. 
Hey, I recently started with developing iOS apps and since parse is not an available BaaS anymore I had to get my own one. Firstly I rented a virtual Server (VPM) and installed ubuntu on it, then I installed mongoDB and the parse-server-example, which is the BaaS but only in shell so you don't have the fancy webUI but if you're interested you'll get it figured out how to use it and there are plenty of tutorials on the internet. For the login I found a very handsom tutorial I hope it helps: http://www.appcoda.com/login-signup-parse-swift/ EDIT: link to parse-server-example: https://github.com/ParsePlatform/parse-server-example
Well, you tried to make your points, and I tried to respond. We both tried, and both agree to differ, so you're right to suggest leaving it there.
It's Cocoa Touch, meaning that the focus is iOS delivery. That being said, Core Graphics, Core Image, Core Data, CloudKit, SpriteKit and other libraries work on both iOS and OS X, so if you learn them on iOS you will be able to transfer your skills to OS X relatively easily.
I like iOS dev but I don't think Swift is that big of a deal. Yes it's concise compared to ObjC but it's just another C#, Java clone. I think Apple should have been more ambitious and ditch the MVC. Create a pure functional programming language and get into functional reactive programming style. 
[removed]
Being a Java or C# clone is a big step forward. And it's quite a bit closer to Scala or F# than Java or C#.
You are mixing concepts. MVC has nothing to do with a programming language. In the short term it is obvious that Apple will have to rely on their decades of investment into the Cocoa frameworks. But nothing is stopping anybody from building a more functional alternative fitting the Swift language better. I have a hard time seeing Swift as a C# and Java clone. That does not compute. C# and Java are rightfully compared to each other because they have very similar type systems, syntax, programming paradigm and above all they are managed languages. Swift is natively compiled, doesn't have garbage collection, has a syntax which looks like a mix of Pascal and C and does not make object oriented programming the center of its existence. For anybody who knows anything about programming languages it makes much more sense to compare Swift to Rust, Go, Scala, Ceylon, Kotlin etc. Java and C# are more like Objective-C in that they are almost exclusively designed around object oriented thinking.
the reason for bundling the http server at this stage is due to quick setup, just like RoR did when it first launched, in the futurer a con-censors will be reached (hopefully just a module), how to communicate with a "real" httpd, but until that point, whilst "production-ready" can be stated by the fact that they can handle 16k concurrent, it wont be "company ready" really there are big benefits from a developers point of view on this, my app code is swift, my webcode is swift, i just do it all in the same ide, and we are all happy from a business point of view it makes sense, you only need 2 people, designers and swift developers,
You can create views and controllers without any storyboards and xibs at all. I dont know of any repos off the top of my head that show this, but there are tons of tutorials. I think you could get away with one view controller and just replace the current view with the next window's view. Repeat.
Well, of all the aforemention I have least knowledge of Rust and Nim, but I got the picture.
I'm not necessarily averse to it, I usually prefer to work in the storyboard as much as possible, but the person I am working on the app for sent me a flowchart that would basically require 23 viewControllers on the storyboard and I think that would feel a little cluttered to work with. Most of them will have pretty much the same code with the only differences being the names of the textfields and the names of the items being saved from those textfields 
If you're testing properties and what's contained in objects / how they interact on a software level, use unit tests. If you want to test if your user experience is functional, use UI tests. Even though you are using classes associated with the UI, you aren't testing actually touching or dragging them, so you would use unit tests.
Thank you! This is very helpful! Also thanks for the advice on tackling login at the end, im in a planning phase so I intend to "mess around" with the basic elements I am unfamiliar with so as to build confidence so to speak that I will be able to achieve this later as you suggested. With OAuth2 I am gathering that it is mainly for 3rd party apps like auth through google ect... Does it cover normal username/password auth? Also are there any resources you guys have found helpful in how to implement authorization (OAuth or otherwise) into the actual Node js server? 
How would you go about unit testing them since you can't really instantiate them without launching the app? Maybe I am missing something.
Encouraging post, the solution is real!!! Thanks for writing this, hopefully someone here can respond with the actual solution, so both of our lives would be easier.
I'll update you if I figure it out. Lol. 
Typically, what you want to do is tile a bunch of sprites vertically, and then move them. When one "falls off" the top, you move it back down to the bottom and let it start moving up again. That way, you're using a minimal amount of sprites and you are not constantly creating new nodes. Here's a quick-and-dirty class that you can use to make this effect: import Foundation import SpriteKit let scrollHeight:CGFloat = 200.0 // The height of the tileable bunting sprite let scrollSpeed:NSTimeInterval = 0.25 // Seconds to scroll this height class Bunting:SKNode { override init() { super.init() let buntingSprite = SKSpriteNode(imageNamed: "bunting") buntingSprite.anchorPoint = CGPoint( x:0.5, y:0.0 ) self.addChild( buntingSprite ) } func scroll() { guard self.scene != nil else { return } // If we have scrolled off the top, teleport back down to the bottom. if (self.position.y &gt;= self.scene!.size.height) { self.position.y = -scrollHeight } self.runAction( SKAction.moveByX(0, y: scrollHeight, duration: scrollSpeed )) { self.scroll() } } required init?(coder aDecoder: NSCoder) { fatalError("init(coder:) has not been implemented") } class func addBuntingToSceneAt( scene:SKScene, x:CGFloat ) { var cy:CGFloat = -scrollHeight while cy &lt; scene.size.height { let bunting = Bunting() scene.addChild( bunting ) bunting.position = CGPoint( x:x, y:cy ) bunting.scroll() cy += scrollHeight } } } To use this, you'll need an image in your asset catalog called "bunting", and in your scene, you'll need to call: Bunting.addBuntingToSceneAt( theScene, x:xPositionForBunting ) You'll need to set the scrollHeight to the height of your bunting graphic, and scrollSpeed to however many seconds you want it to take to scroll the height of that image. What this class does is create a "bunting" sprite, and when you call scroll() on it, it moves it up the scrollHeight. Then, it checks if it's "fallen off" the top, and if so, it teleports down to the bottom again. Whether it fell off or not, it scrolls again. Thus, you have bunting sprites that are constantly moving up their length in steps, and after each step, checking whether they should jump back down. The addBuntingToSceneAt() function is a convenience function for quickly adding the appropriate Bunting objects to your scene. (Note that I don't include any of the physics stuff here. That's because you would probably be better off leaving the bunting sprites as cosmetic display only, and for your game logic making a single physics object (with no visual representation) for each side - one that stretches from the bottom of the screen to the top - to check against, instead of several smaller ones. That way, your physics engine only has to check against two entities, instead of however many sprites you have.) *Edit:* Note that the above assumes that you just move at a constant rate. This approach won't work if you don't. If you want to be able to move at a non-constant rate, what you'll need to do is not use SKActions to move your sprites, and instead, call an update function repeatedly to move them however far you need to move them, and then, if they "fall off", move them down to the bottom. In this case, since you're not moving in multiples of scrollHeight, you'll need to do more complicated arithmetic to figure out where to move the sprite to, but it's not too hard; basically, you just move it down multiples of scrollHeight until you're "low enough".
It's not my project, but I have no issues with building it.
I used addChildViewController. Edit: Haha, I figured out what was wrong. Stupid mistake. I just printed self.childViewControllers at the initial viewDidLoad and realised that I was ending view Did Load early before the children were added just for the first time the app is run.
Just because you can't see them doesn't mean that they aren't being instantiated during unit tests.
&gt;IDEs and stuff The only IDE you can use for app development for iOS and OS X is Xcode, in case you still had doubts about that. :)
For gamedev you pretty much have to choose whether to go cross-platform or not. If you're okay with only releasing to iOS/OSX, SpriteKit (2D), and SceneKit (3D) are what you'll want to use. Also check out GamePlayKit, it has pathfinding, state machines, etc. For cross-platform dev, you can't really use Swift yet. A project was posted here recently, but I don't think it was quite ready, and it'll probably be a couple years before a major cross-platform solution comes out. You're better off using [Unity](https://unity3d.com/), but that uses C# (a different programming language). We're seeing the same thing with server-side swift. Apple open-sourcing Swift is awesome, but it's going to take developers some time to write web servers and game engines in Swift. There's work being done on cross-platform web servers and frameworks (see https://github.com/qutheory/vapor, and https://github.com/PerfectlySoft/Perfect), but it's going to take some time. I think Swift is a great language, and it's become really popular in a short amount of time. It's a good investment, and you'll likely be able to do cross-platform development soon! With that said, if you're wanting to shift to a career in game development soon, you may be better off with Unity. It's widely used and will likely be for some time.. Also, there's /r/gamedev. It's been my experience that most people there work with c# and develop on Windows (for Unity).
Thanks for your thorough answer! I understand that swift isn't supported cross-platform. I have also begun tinkering a little with java (for android). Let's say I have a complete app/game built for iOS (Swift). Can anything be salvaged codewise when converting it to java? Or does it have to be built from the ground up completely? (Except the graphics of course)
Yes, OAuth 2 is a great framework for doing authentication, and you can utilize it for your own app's authentication (not just for 3rd parties). Check out the `password` grant_type in OAuth; that's what you're looking for. I actually just got started with more in-depth research into user auth relatively recently; I'm in the process of writing an iOS SDK for [Stormpath](https://stormpath.com/) (an API for authentication) and it seems like it might be helpful for you. With an OAuth endpoint, you would `POST` your username and password, and get an access_token and refresh_token in response. To store your tokens, you should utilize the Keychain (not NSUserDefaults), and iOS would make sure it's securely stored and encrypted. If you'd like to see how that's implemented, I can suggest that you clone my [SDK code](https://github.com/stormpath/stormpath-sdk-swift) and see how I implement it. We should be releasing early next week; happy to continue helping w/ auth questions though!
You could set up one view controller, and then A plist array of all of the different text field attributes that you are supposed to collect, and each time the user progresses just swap out the new name for the text field and store their input. It doesn't make sense to make 23 view controllers if the only difference is going to be what the label reads above the text field or what the placeholder should say. In that case you should keep your logic all in one view controller and just swap out the label/placeholder text for what each step should be and store the results of each step into an array or dictionary, whichever is more appropriate
I have used this for swift https://github.com/raulriera/AuthenticationViewController And this for obj-c projects - https://github.com/nxtbgthng/OAuth2Client 
Is this the only code in your playground? Or have you been adding all of your code to the same playground as you are working through the book? I could see a playground slowing down over time as you add more and more code to it. I don't think Apple expected anyone to write full on applications in playgrounds more like verifying some functionality in isolation. I've been working through the Big Nerd Ranch Swift Programming book and they specifically call out creating a new playground for each chapter. And it's been a nice introduction to swift if you are looking for an alternative.
 print("\(Self.self) can't have &lt; 0 calories") This should work.
Avoid `!` at all costs. Keep a consistent style. I don’t care if you put `{` on the same line or not (or use one or no spaces before it), just do it the same every time. Random formatting reeks of copy-paste or laziness.
You're perfectly able to delegate further to cells when appropriate. The key point (with really all delegates), is to use weak references in the reference to the delegate Make a protocol like "GraphDataSource" and make a weak reference to that in your cell class, say dataSource. (Data sources are also delegates in the nomenclature of OOP) In your associated view controller, in the cellForRowAtIndexPath, you then set the dataSource and let the view rendering function render like it is now. That probably should be a separate object that implements the GraphDataSource protocol As the reference is weak, cell reuse is not a problem Just because many examples configure things in a ViewController, doesn't mean you have to do that
Exactly, but also it has standardized on ROR.
Seconded, the use of `if/guard let x = z as? T` is rock solid and definitely "smells good"
That's not exactly true any more. Swift was open sourced in December, kicking off with a Linux port. Lots of different people are working on porting it to more platforms. So depending on your interests and time frame, cross-platform game dev in Swift could be possible. I posted this sneak peak video of a cross-platform SDK for 2D games I've been working on a few days ago in this subreddit. https://www.reddit.com/r/swift/comments/46i6rc/teaser_showing_crossplatform_workflow_for_2d/ 
Wow, thanks for all of the replies and suggestions. I have been researching all day just so I have a few options and it looks like I have the options for OAuth or passport-jwt or just jwt. Im still looking into making a decision on which to use, thank you everyone for the suggestions!
C# is pretty similar to swift, read the article you mentioned above, examine the problem, try and solve it using xcode playgrounds so you can get realtime feedback. It won't take you long. :)
Your pre-enum scenario is a downcast. A downcast goes from a more-general type (the protocol) to a more-specific type (the struct). Any situation where a protocol is passed through an interface as a type may require downcasting on the other side. An example of an unrelated cast – always an anti-pattern – would be: protocol A {} protocol B {} struct C: A, B {} let a = // get an A from somewhere if let b = a as? B { } technically, an `A` could also be a `B` (obviously so, if its a `C`) but any code written to test for that possibility that is terribly designed.
I'm pretty much there actually, I'm just using an alternative version of it I suppose! And damn, I realllly need to learn about using Playground.. lol
Check both sender.currentTitle and text (the ones with !) are not nil before accessing them. You can either use guard or if let for that.
I'm sorry, I'm new to Swift and had previous experience with Java, how should I do it? Or can you show me a snippet of what to change? thanks :-)
something like this: https://gist.github.com/valeIT/26dedec71b619ba0ba3e PS: This way if it's nil it'll just return, if you wanna do something instead just add before the return what you want to do in that case
Well sure, you can write the code in any text editor before compiling it in Xcode, but there's no workflow possible without using Xcode.
Specifically, did you "link" the UILabel to your view controller, with &lt;control&gt;-drag? Not doing this will leave the IBOutlet as nil.
Would just like to note that Zewo is not actually a web framework - its a set of libraries to build server-side software (including web development). As taken from the [readme](https://github.com/Zewo/Zewo): &gt;Zewo is a set of libraries aimed at server side development. With Zewo you can write your web app, REST API, command line tool, database driver, etc. Our goal is to create an ecosystem around the modules and tools we provide so you can focus on developing your application or library, instead of doing everything from scratch. 
Funny you ask this now. Someone on the Swift mailing list just released this website yesterday! www.swiftgl.org It's still a WIP but it's OpenGL with swift.
&gt; Avoid ! at all costs. I disagree here. Of course you shouldn't force unwrap every optional, but sometimes it's pointless for an app to continue running if some optional value is `nil` (for example, the `navigationController` property of the `UIViewController` class is an optional).
Or just generally variables of a view controller you'll set the value of in the `viewDidLoad`, or the `prepareForSegue` of the previous view controller?
It's OK that you're confused – Apple hasn't really done a great job of naming things. In fact, they have this note in their documentation: "The term “Cocoa” has been used to refer generically to any class or object that is based on the Objective-C runtime and inherits from the root class, NSObject. The terms “Cocoa” or “Cocoa Touch” are also used when referring to application development using any programmatic interface of the respective platforms." And it's true: some people use "Cocoa Touch" to refer to the combination of UIKit and a small handful of other frameworks (e.g. MapKit for manipulating maps), whereas others use "Cocoa Touch" to mean "anything that is coding for iOS." Some people have just given up and now don't use the name "Cocoa Touch" at all. I don't mind which is used, so take your pick :) All projects in the series are written for iOS. As soon as you hit project 1, you're using Cocoa Touch, because it's built on UIKit. When you asked, "Awesome, do you cover Cocoa frameworks too?", what your question meant was "Do you cover OS X development as well as iOS development?" If that was your question, the answer is no.
First of all, you don't need a particular license nowadays. Mac's can download their OS online using the boot menu (after 2010 or so). However, do not buy this machine. It's an old PowerPC Mac Mini, I think you still need to buy a license, because that's how things worked back in 2008 (?) when OS X 10.5 Leopard was the current OS. That's the latest OS this Mac will run, and there's no way you'll be able to develop in Swift on this machine. Instead, make sure you get an Intel Mac. (After 2006, but you will find more recent machines for a reasonable price)
I don't know if it's possible, but why don't you use CoreData or NSUserDefaults for storing the ToDo list items?
i am just starting out with swift and creating applications. Any more info or methods on storing to disk, would be much appreciated.
[removed]
Teacher? Where do you follow a class that's taught in Swift? Anyways, then go with `NSUserDefaults`. :)
&gt; `guard … fatalError("descriptive message")` IMO this clutters the code too much, but I get why you'd want to do that. And of course I agree that optional chaining should be done where possible.
Last year when IBM launched BlueMix I went to their campus (among many others) for a day long "demo" of the suite. Everything from the product to the demo day was a hot mess. I wonder if it's improved since. Serious question: maybe I'm missing something, but what does this bring to the table that Cocoapods and Carthage don't? 
The "let's roll FP concepts in gradually" has helped Python, Scala and even Lua gain traction, so it's not a bad idea. Why do you think it has more chance of going mainstream than, say, Rust? I could see D not being too popular as it's only a cleaner C++, but Rust seems like a great balance between various aspects of low-level goodness, interops well with C libs, and while it doesn't have Apple behind it, it does have hundreds of contributors and quite a few people prefering it over Go. 
Do you want to save where the user currently is? Or just the data saved? i.e you have MainVC and ListVC. By default your app goes to MainVC but the user is in ListVC adding items and reboots the phone, when the user opens up the app again do you want it to go to ListVC with the list OR MainVC but have the list saved somewhere for future usage?
To me it looks more like a catalog of packages that you can include using swifts official package manager (https://swift.org/package-manager/)... am I wrong on this?
At university, i will look into it.
It's really easy. Use NSUserDefaults.standardUserDefaults().setObject(myObject, forKey: "myKey") to save, and let myObject = NSUserDefaults.standardUserDefaults().objectForKey("myKey") to load.
Xcode's build tools are leveraged, but AppCode is a cocoa IDE. It's not just a text editor. I think you also need Xcode if you use IB. Mind you... I don't use AppCode. 
Easy but not what it's intended for. Just implement the NSCoding protocol on your model object class and serialize it.
Also depends on how quickly you want to run down the battery. Updates of CoreLocation faster than 30 seconds are going to have a significant battery impact.
Not today NSA!
Clearly this is a sign that I am following God's path for me. 
May Jobs and Lattner be with you.
&gt; you should have some kind of assertion in `viewDidLoad()` Sure, but then you'll still be declaring them with a `!`. Either way, I mostly agree with you.
Kind of funny that CLibvenice, CURIParser, and CHTTPParser are the 'most essential' packages just because Zewo's modularity (it's split into ~30 modules) require them so many times. For example, CLibvenice, apparently the most essential package, has the defendants: &gt;Venice, TCP, File, PostgreSQL, HTTPSServer, SQL, TCPSSL, HTTPServer, UDP, WebSocket, OpenSSL, IP, HTTPSClient, Log, Zewo, ChannelStream, LogMiddleware, HTTPClient, HTTPFile Which are all Zewo modules :)
I completely agree, of course, but I will say that I wish Swift would abandon the GCD concurrency scheme (my main beef is that it leads to callback hell) and instead use something like Go's approach (CSP).
Yes I tried bm too out of curiosity , what a catastrophe, and 5 months later i get a call from them asking me all kinds of shit, why don't you use it anymore? What doesn't work? What was the error message? Why didn't you take a shower today.
No. That's exactly what it is.
The Xliff file is more of a temporary file for you to send to your translator(s). Although you can, you don't have to create a Localizable.strings manually. What you should be doing, though, is wrapping all of the strings you have in your code in NSLocalizedString() calls. That way, if you do decide to add a different language, XCode can generate an XLiff file for you that incorporates the strings in the NSLocalizedString calls. Check out Apple's internationalization hub: https://developer.apple.com/internationalization/
I was quite specific about it's use as a general purpose, compiled (system-level if need be) language, and not being interested in OSX nor iOS development, so that's not that important to me. From what I've learned the C interop and the performance are on par with other LLVM languages. Currently it has little in the means of what I'd like to use it for (embedded stuff, http microservices on ARM computers etc) but it has a lot of chance to catch up with Rust there quickly.
I'd say the current implementation is the way to go here. You always want a cell of the table view to be of class `MyCustomTableCell`, so there's no point in letting the program continue when this isn't the case. You could use `guard let` and `fatalError("some descriptive message")`, as you suggested, but that's more or less the same as force unwrapping anyways: terminate the program if the cell doesn't have the right class. Edit: By the way, this isn't a force unwrap, because we're not dealing with `nil` here. `!` is only used here to force a downcast form `UITableViewCell` to `MyCustomTableCell`.
I have been using Swift on Linux recently, and it's not very pleasant – yet. This is largely because quite a few things are not yet implemented. Even something as basic as strings are lacking: trying to create a String from a file with its `usedEncoding` constructor, or from the contents of a URL, are both not implemented*. I haven't seen a public list of all the API calls that are missing, but it's pretty telling that many Swift frameworks don't yet support Linux. I am certain this is going to improve, and soon, because Apple seem really committed to delivering a truly cross-platform system. But for now it's a bit hit and miss trying to make useful software, so approach with caution. (* Apple release regular updates; this could change at any moment.)
I don't really understand how Swift being open source means you don't need a macbook. There's no reason that you would *need* a macbook unless you were trying to do iOS / OS X development, and you still can't do that on Linux.
&gt; Even something as basic as strings are lacking: trying to create a String from a file with its usedEncoding constructor, or from the contents of a URL, are both not implemented This is because `usedEncoding` isn't part of the Swift String type. It's part of NSString, which is part of Foundation, which is currently in the process of being ported to pure Swift.
I understand that, but it's still something OP needs to be aware of. You try something, it isn't implemented; you try something else, and that isn't implemented either. [This chap](http://www.bensnider.com/roadblocks-when-making-cross-platform-command-line-swift-scripts.html) had a similar experience.
The point is that you shouldn't expect Foundation libraries to be complete when Foundation is not advertised to be complete. It's part of the development process. Swift is *not* ready for production on Linux
I definitely agree that it's not ready for production.
I don't think you'll be able to completely eradicate the forced casting, but you can at least consolidate it into something that at least *looks* more type safe. Rather than using strings as the identifiers, you could use a custom struct that relates your cell type to the string identifier. struct CellIdentifier&lt;CellType&gt; { let reusableIdentifier: String } When you instantiate this struct, you get a value with your cell type encoded in the identifier's type, and the reusable identifier stored in the value. let myCustomTableCellIdentifier = CellIdentifier&lt;MyCustomTableCell&gt;(reusableIdentifier: "identifier") Now it's just a matter of writing an extension to accept this type of identifier. extension UITableView { func dequeueReusableCellWithIdentifier&lt;CellType&gt;( identifier: CellIdentifier&lt;CellType&gt;, forIndexPath indexPath: NSIndexPath ) -&gt; CellType { return dequeueReusableCellWithIdentifier( identifier.reusableIdentifier, forIndexPath: indexPath ) as! CellType } } func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { let cell = tableView.dequeueReusableCellWithIdentifier(myCustomTableCellIdentifier) return cell }
&gt; I don't really understand how Swift being open source means you don't need a macbook. Not everyone has the same level of understanding on what it means for Swift to be OS. It certainly seems reasonable to me that someone not really paying attention to what's going on in the iOS/OS X dev communities might think "Swift is Open Source" means "I can build iOS apps on a Linux machine."
OK, that made me laugh :)
&gt; I was quite specific about it's use as a general purpose, compiled (system-level if need be) language, and not being interested in OSX nor iOS development, so that's not that important to me. True, and for you, today, writing systems or embedded code in swift is not a very practical choice. Realistically, even in iOS land it's still early days for swift adoption in real money, production apps. My last post was mostly in response to "Why do you think it has more chance of going mainstream than, say, Rust?" where mainstream means top 20 or so languages. 
I've been meaning to try RxSwift for so time, but was struggling to follow all the complicated explanations I was finding. This provides a nice, simple starting point. In case anyone reading is unfamiliar with RxSwift: it's a framework which provides the basics for ‘reactive programming’, which seems to be a really good pattern for simplifying UI-related logic. I'm continually impressed by the amount of patterns which can be used in Swift: object-oriented, protocol-oriented, functional, reactive… Properly figuring out when (and how) to use what could lead to really clean code. It's a shame Apple developers are stuck with Objective-C APIs, to be honest. No matter how much ‘interoperability’ is provided, they still get really clunky to use at times, which just drives the appeal of these extension-based layers.
What surprised me is that people are so dense about this, it isn't like Apple is hiding anything here. By the way not ready for production doesn't mean that you can't start learning and experimenting. 
Baloney! Ten seconds spent on Apples Swift sites will highlight the language status and what it WILL BE capable of on Linux. Note the "will be", no one should be left with the impression that Swift is a fully developed language or solution, that includes Apples platforms. Sadly I not sure how anybody that is a programmer can display to the world an inability it understand what a "works in progress" is. 
 &gt;Now that it's become open sourced the tech pess hype machine is portraying Swift as the next big thing in terms of general purposes programming languages. Now, I'm aware most of those writers aren't techies, let alone programmers, however, they probably have a good source somewhere believing it. Where did this idea that tech writers aren't techies come from? M some of the writers inhabiting the blog space are indeed very skilled tech people. &gt;How does it really stack up against the new (compiled) kids on the block like D, Rust, Nim and Go. Why should someone like me, who doesn't see OSX or iOS as his primary targets care? You must have missed the part about "GENERAL" purpose programming language. What makes Swift so nice is the incorporation of a lot of practices and technologies that have been in many languages to date but not all in one place. The fact that it is almost Python like in its ease programming wise is another factor. If you can code with the efficiency you can in Python yet get the performance of compiled code wouldn't you be interested? &gt;It's a honest question, I'm not trolling. I've tried googling but all I get is performance benchmarks and more hype press, yet I'm genuinely interested as a programmer. Thanks all. You need to try harder. Seriously you seem to think that this is an iOS specific programming language, it isn't by a long shot. An open mind is a wonderful thing. 
I think his sales pitch was very accurate. From my perspective Swift has the potential to replace Python. That is if it ever stabilizes and all of the Linux support ends up in place. It has the same ease of use but the performance that comes with a compiled language. Even though it is compiled there is still the possibility of REPL development. 
Thanks, fuckface. 
Label.text! is a string, which is a piece of text like "hello". Firstnumber is an Int, which is a number. To convert a string to an int you can use Int(label.text!) instead of label.text!.Int(). However this returns an Optional int. If the string contains "32" it will become 32, but if its "abc" it becomes nil. The ! operator forces an optional int to a regular int, but you should only use it if you know for sure the string will always be a number. Otherwise you could try firstnumber = Int(label.text!) ?? 0. This uses the labels value if it is a number and uses 0 otherwise.
Thanks! Any idea why the same code worked for the person who made the tutorial? The only difference is that I called my string label.text! in stead of screen.text!, but what you call a string is optional, right?
id like to develop apps
This may help! https://swift.org/getting-started
Yes, you can do that today. Also, we're quite a ways away from writing Android apps in Swift. There's no way to interface it with Java, so you can't use the Java libraries. It's already a pain to do it in C++, because you have to find a UI library written for C++. And none of those libraries are going to be available to Swift, since Swift doesn't have C++ interop. Plus, Swift on Linux / Android is still far from production ready. If you want to use a Swift-like language on Android, just use Kotlin. It's available today, works with the plethora of available libraries and Androids standard UI library, and has reached 1.0 stability.
You can use Xcode to make command line utilities (just choose the "command line utility" project template). It's nice since it gives you all the features you'd expect from an IDE. But you don't have to use Xcode. You can just write your code in .swift files and compile things through the command line.
&gt; Statically typed programming language for the JVM, Android and the browser [Yes](http://kotlinlang.org/). Also, [Kotlin, the Swift of Android](https://blog.gouline.net/2014/08/31/kotlin-the-swift-of-android/).
Cool, I'm gonna try this out :)
Yeah, you have a good point. I've learned other software before by doing easy tutorial after easy tutorial because I find it easier to learn whilst making something specific, but maybe this stuff is a bit too complex to start working with without knowing the terms for stuff first.
Yea works great and its improving everyday. I am using it right now with a 'real' app. I have even cut and pasted code between Kotlin and Swift, it of course required some editing but it did work.
No, I don't think so, only on the image view of the cell. When I click on the collection view in the storyboard, it won't let me add constraints
As the scrub I am, I didn't undersand most of that write up. Does this make it so that we can create an iOS app and essentially port it to android but just renaming all the views to their respective android view names?
Nope, not even close. There's virtually no APIs usable from Swift that you can use to make GUI. Basically all you can do right now is call C from Java, then call Swift from C (maybe? not actually sure if it's that far).
You can use on OS X with no problem. That includes "console apps" which aren't GUI based. Basically it's no different than programming in C or other language. Xcode is the way to go for that.
I made it pretty clear that Swift isn't ready for production, however if you want to start learning Swift it is good enough if you already have a programming back ground. Yes it is beta maybe even Alpha quality but that won't stop you from learning the core language. As for foundation the APIs aren't even stable yet, any platform you use will require a relearning process down the road. I look at it this way learning Swift on Linux puts you on the bleeding edge, if you get in the loop now and don't get discouraged, you will end up with a pretty deep understanding of the language and what people are doing to refine it and why. Right now is a great time to start learning Swift and mastering it as a language. 
yes iOS 
Well there's no *manual memory management* in Rust.. you don't have a choice, memory management just happens like a GC, (unless you go `unsafe {}`, but this would be like dropping the GC in Swift). I have never been bothered by the borrow checker in Rust since i learned it, its an advantage, knowing exactly the state of the memory i am currently using. That it will never mutated under me. Its not mental overhead, because its less that you need to know about, you don't need to think about anything else then, *right now*. It removes exponentially more mental overhead the larger the code base is. Because for all the code you add, the more routes mutability could take. The borrow checker, assures you that its going to be in the state you want. This, i think makes Rust the easiest language to read, out of anything i ever touched. That mixed with composition makes for very good readability. But i don't think using Rust for graphics applications, right now, would be a good idea. Its unexplored so its generally risky, while web development is almost there, good graphics user interface tool kits aren't so much. But neither could of Servo been built in Swift, which purely depends on nanoseconds of performance, very efficient C bindings and most importantly large amounts of parallel processing. Rust and Swift are just sitting on quite opposite polars. 
[Here's](https://github.com/tikipatel/DeckbrewSwiftPlayground) a playground that I quickly made using [ObjectMapper](https://github.com/Hearst-DD/ObjectMapper)... You can figure out how to create rest of the objects. Let me know if you have any questions or need clarification on anything. 
Most likely the Foundation framework they're using doesn't bridge Swift's `String` to Foundation's/Objective-C `NSString`. In Swift, `String` is a struct; In Objective-C, `NSString` is a class. That's the source of the second error. ~~The first error is probably due to differing nullability info between Apple's and IBM's implementation of the method in Foundation.~~ After copy-pasting from the IBM link, I got the same error as the first, but the second error isn't present (although there are other errors.) Also, the warning changes from "…always fails." to "…always succeeds." [This Gist](https://gist.github.com/MaddTheSane/23a9d4a5be682370b524) has both the original and small tweaks that made it compile. Sorry for the white-space noise.
I don't think Swift is as different as you think (Swift is not garbage collected, for example, and has efficient enough C bindings that calling memcpy over them compiles to identical assembly to a C invocation of memcpy). By "manual" I meant that if you need to guarantee that a copy or allocation doesn't occur, it's harder to do so in Swift; the optimizer will help ensure that they don't, but there's a difference between "avoiding most allocations and copies for performance" and "avoiding ALL allocations and copies because it's required for your environment".
One big issue I see with that would be that ARC functions somewhat differently then the GC you would be used to coding for Kotlin. What would be better would be a Swift -&gt; JVM Bytecode and a Kotlin -&gt; LLVM IR with a solid GC
teamtreehouse.com 7 day free trial. No charge. Thank me later 
Thanks for all this information!ation!
I believe value A would be an arc. Can't see anything else for B but the radius (of a smaller circle within the circle). 
Cool! Crazy idea: Make the screensaver run a tiny Linux distro on a tiny virtual machine and make a list of actual commands it's gonna run, pipe the output to the screensaver xP
https://en.wikipedia.org/wiki/Polar_coordinate_system &gt; The distance from the pole is called the *radial coordinate* or *radius*, and the angle is called the *angular coordinate*, *polar angle*, or *azimuth*
Heads up, Chris Lattner has the following to say: "What does this mean looking forward? Well, Swift 2 to Swift 3 is going to be an unavoidably disruptive change for code since Cocoa renamification is going to land, and we’re going to be building impressive migration technology again. As such, we should try to get the “rearrange all the deckchairs” changes into Swift 3 if possible, to make Swift 3 to 4 as smooth as possible." The migration assistants could be great, and I have no doubt that the team at Apple will find a way to complete this successfully, but Swift 2 -&gt; 3 sounds like it will be quite significant. Edit to add link: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160125/007737.html
The Big Nerd Ranch iOS edition 5, is how to create iOS apps in Swift. It to me seems very basic and very easy to learn. I feel that a starter to programming should be able to handle it. That being said, I love Python! It is a fun language and its structure and Swift are very similar. ( I am still a noob at Swift, but Python seems to be close.) If you want to just focus on the Swift language you can buy a [Swift book](https://www.bignerdranch.com/we-write/swift-programming)from BNR as well and it should help you understand what is going on. I do not think the treehouse python class is very useful at all btw. 
Working on it.
Hi /u/asentwo! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://appsto.re/us/lvIVab.i) to have it reviewed. Regards, The /r/Swift Moderation Team
If you're not a programmer already I think Swift will very confusing, strange, and off putting to you. I highly recommend you start with Python. It's a very simply and forgiving language. Come back to swift after you've messed around with Python and you know the basics of programming!!
It would likely use MapKit and App Extensions.
I say stick with it. Swift is still changing but it's an exciting, very active community and there are resources everywhere. I'm pretty new to programming, learned on Java and C#, but doing mostly Swift stuff now. You should be able to find plenty of resources for Swift 2. I can't stress enough how much I've learned from other developers on Twitter. Follow accounts like @codinginswift, @ericasadun, @natashatherobot, etc. Erica Sadun has a great blog and she's really been digging into swift. The Ray Wenderlich site has amazingly detailed blog posts about Swift. Finally, Lynda.com has a great course called Swift 2.0 Essential Training that takes you from the simplest tasks like intelligence world and adding comments to protocols and extensions. Lynda has a monthly subscription fee, but you should be able to find a free trial that'll last long enough to get you through that course. 
It does barely change, it is a bit disruptive but nit a whole new language or anything close
Learn python and swift, then haskell and all the other languages you are interested in. You can only profit from learning more.
I just uploaded using application loader after upgrading my OS. Here's to hoping it works!!
работа с uiactivityindicatorview
I've never heard of reactive programming before. Care to explain what it entails?
I'd say go with the one that does what you want it to do. I started with Python and even though I wanted to make iOS apps because everyone said start with Python. However, it wasn't what I wanted to do so I couldn't even envision what id do with Python. So I switched to Swift. Try : treehouse.com - good basics Raywenderlichs iOS apprentice - the best step by step (slower but takes every little thing into account) Udemy - the complete iOS 9 Developer course by Rob Percival - fast but dirty (you'll learn to do a lot of cool stuff at the expense of learning to make polished apps. Not finished this though so maybe that changes.) A couple others I'd recommend a bit less. We heart swift Hacking with swift 
I want the clojure web framework ring ported to swift for writing web apps. Same for hiccup (html DSL), and core.async (an implementation of CSP)
You might want to read "Using Swift with Cocoa and Objective-C": https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html That page states: &gt; Remap certain Objective-C types to their equivalents in Swift, like `id` to `AnyObject` An `id` is an `AnyObject` in Swift. The `*` means it's a pointer to an `id`, although in this case, it's only done to pass the parameter both in and out of the method. Unfortunately, due to technical reasons, it doesn't translate directly to an `inout` in Swift (you'll get the very cumbersome `AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;` instead) but you can consider it to be a similar idea.
`id*` is more like `void**`
You didn't just disable the auto-rotate feature in the control center? (The one you can swipe up from the bottom) :-)
Nope :( But now I think I should power cycle with portrait-lock on to see what happens... Edit: no effect
Didn't seem likely, but it could have been that. :-)
I expect that after giving this response, he ceased to exist. I imagine there was a poof of blue smoke, but we'll never know for sure. 
[The Swift Programming Language](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309) guide would be equivalent to the first few chapters of the Python library. And the [Swift Standard Library](https://developer.apple.com/library/ios//documentation/General/Reference/SwiftStandardLibraryReference/index.html) and [platform development resources](https://developer.apple.com/resources/) will cover even more! (The [open source site](http://swift-lang.org/docs/index.php) is great, too.)
Here are some options for you to consider: * [Firebase](https://www.firebase.com) * [Amazon Mobile Hub](https://aws.amazon.com/blogs/aws/aws-mobile-hub-build-test-and-monitor-mobile-applications/) * [Urban Airship for push notification](https://www.urbanairship.com) Please review the [Parse migration guide](https://github.com/ParsePlatform/parse-server/wiki/Migrating-an-Existing-Parse-App). (Parse Server Guide)[https://github.com/ParsePlatform/parse-server/wiki/Parse-Server-Guide) describes the Open Source Parse server that you can self host.
This is the most brilliant thing I have ever seen on this sub. Thank you for this.
Ironically, I'm in the opposite situation. I can code (CS degree) but I sure hope I get into med school.
It's a little complicated since `validateName:error:` is an implicit protocol (it isn't actually declared anywhere). To help, we need to properly declare it. Put: @interface NSObject(KVOValidation) -(BOOL)validateName:(id *)ioValue error:(NSError * __autoreleasing *)outError; @end in your Objective-C bridging header. Then put: var a: AnyObject? = nil try! NSObject().validateName(&amp;a) in a Swift file in the same module. Wait a few seconds to ensure the index is up-to-date then Command-click on `validateName` and you'll be taken to the generated Swift interface for the Objective-C bridging header and it will look like this: extension NSObject { public func validateName(ioValue: AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;) throws } 
I see these recommended often. What about something like CloudKit? Is there a reason that doesn't get recommended very much? just trying to learn. :)
please please please make sure you are HIPPA compliant if you are using real cases with any sort of identifiable patient information inside your app. you can/will be out of a job and royally screwed if you aren't. 
Why did Parse disappear? 
https://batch.com
? Explain to a noob please. 
NSRange is is a struct with an unsigned integer location and unsigned length that defines a "stride" within either a collection or some other collection-like object.. Range is a **collection** defined with bounds that are similar to what NSRange defines. Not really the same thing at all because you can use an NSRange in ObjC for many other things than just a string range. You can accomplish many of the same things but it's a different animal under the covers. I suspect this is the reason you still have to use an NSRange.
Last weekend, to start learning Swift, I started working on a Ring-inspired abstraction: https://github.com/danneu/hansel (source in the "Sources" folder) There are basically two things that make Ring stand out (i.e. the two things I'm focused on): 1. Immutability 2. Middleware are just higher-order functions Clojure has great immutable-by-default functions like `assoc`, `assoc-in`, `update-in`. It also has threading macros. Together these make it really nice to pipe a request/response through a chain of functions. (require '[[ring.util.response :refer [response status header]]]) (defn handler [request] (-&gt; response (assoc :body "&lt;h1&gt;Hello world&lt;/h1&gt;") (header "X-Test", "foo") (status 418))) Like most languages, Swift doesn't have all that, so it seems the next best UX is to create non-destructive, chainable methods: typealias Handler = Request -&gt; Response let handler: Handler = { request in return Response() .html('&lt;h1&gt;Hello world&lt;/h1&gt;') .setHeader('X-Test', 'foo') .setStatus(.ImATeapot) } And it's nice when middleware are just functions so you can just `compose(mw1, mw2, mw3)` as needed. 
You can `map` over an array of Ints with the `UInt32` constructor. The `map` method of an array creates a new array where each element corresponds to an element of the original array by calling the mapping function with that element. let ints: [Int] = [1, 2, 3, 4, 5] let uints: [UInt32] = ints.map { UInt32($0) }
I think separate private functions is the way to go. If nothing else, they'll be more testable separated out.
We are using [Kinvey](http://www.kinvey.com/) in my uni's iOS course.
Thx. That got it working 
I'll vouch for Firebase. After researching a bit when Parse made the announcement, I finally settled on Firebase. Granted, the app I've been working on currently already involves a heavy amount of JSON serializing so I'm pretty familiar with JSON (which is pretty much how Firebase stores data). I like it though. It has a lot built in for ease of use. It has a significant curve to get over at the start IMO but once you figure it out, it codes like butter (is that a saying?). Also, you need to have cocoapods installed to use it. Anyway...that's my two cents. 
Please read this tutorial. It's made by Apple and covers all the basics you need to develop a simple app in Swift. https://developer.apple.com/library/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/
button.sendActionsForControlEvents(.TouchedUpInside) should call the target action - is that what you want? But really you should pull the code out into a separate method and call it from the IBAction and for copying the URL
Here is an incredibly exhaustive list of alternatives: https://github.com/relatedcode/ParseAlternatives While a great list it is lacking in any recommendations/comparisons. Like, I'm an old indy developer, what's the best free alternative that has a good object store/query API with push and a dashboard? Good luck. 
I have been writing views in view controllers like this to avoid implicitly unwrapped optionals: let label: UILabel = { let label = UILabel() label.text = "some text" return label }() it keeps all of my view initialisation together, then `viewDidLoad` or `loadView` is just for view hierarchy setup, layout and bindings (if the VC gets too big with these inits I will extract them to a subview just to clean things up) 
But when I call the method, in my viewcontroller, I assume the GPS is stopped, so I want to start it and wait for it to deliver the coordinates before I return the result, is that what the above do? Let me try to elaborate a bit. I have a class called GPSUtil, in this I want all the usual stuff for locating the user. In my viewcontrollers i want to be able, via a singleton, to call the methods like: var GPSCoords = GPSUtil.sharedInstance.getCoordinates() &lt;- I want this to return the coordinates. The above doesn't work due to the delay of getting the coordinates, so it'll just return nil, since I made it an optional. You solutions works, I simply just call the function that get the location and assigns the properties, and when that is done, I get a response back to my viewcontroller so I know the coordinates are ready, and then I can call the function that gets them? I that the solution? The help is really appreciated! I really struggle with this.
Never has a request of 'show us code' been responded to in such a glorious fashion. 10/10.
Sometimes it works, but not in this case (I tested in in playground). UInt32 has lots of one-argument initializers and compiler has problem deciding which one to choose.
It seems to me what you're really talking about edge detection within an image. There are lots of papers and posts out there about that. Happy reading :) You'll post an update with what you've found in your research here, right? 
You are right on spot: - a single language makes it easy to code server and client code (obviously), and recruit developers and have a better unified ecosystem - some code can be shared between the two sides (for ex. validation code, entity code). This can get quickly very useful if you have a lot of user submission and/or model kinds. - you can probably use the same framework to test the client and the server side code - and probably someday, someone will code a framework that **completely abstracts the server/client communication** so that you never ever have to worry about serialization and deserialization. This can also be done with non unified server/client communication but if you have the luck to share your models, things get much easier. Node promise is the same one, and we can see that some frameworks do this communication more or less transparently, for example *Meteor.js* . Of course javascript being an inferiorer language, or at least less elegant in someway, this is much less seducing than imagining this in Swift. All this is rather exciting!
The benefit would mainly be convenience. You're already comfortable with the language, you could theoretically use the same package manager, theoretically some of the same libraries, etc. That being said, swift on the server is in its infancy. If you're trying to do more than play around, I'd stay away from server side swift until it matures. 
Did you get to the "Persist Data" part yet? That's where it gets saved.
It's easier to have people working on both sides if there's not a second programming language involved for the API side. But the real question is how good the frameworks and the rest of the infrastructure will be that you will be using together with Swift to create those API's. Also you have the opportunity to use a data format that is more beneficiary towards Swift than JSON, since JSON is pretty much geared towards JavaScript. But you're not winning anything if libraries aren't mature, servers need to be rebooted every night and things like that. Learning another programming language isn't that hard really. It's the frameworks that are hard.
I'm in the process of writing an app that would need to do quite a lot of queries on the database. I'm afraid Firebase won't be the best choice of this because it's JSON-based, and doesn't have records, but I could be completely wrong. Do you have any idea?
Yeah just for experimenting
Inferior? Less elegant?
Touché. XP 
&gt; and probably someday, someone will code a framework that completely abstracts the server/client communication They did, Distributed Objects. Made for cool demos, and is pretty good if both parts are running on the same machine. One you start introducing wider area networks, latency, and broken connections, things quickly get really hairy. Instead of isolating the easily breakable parts into known components, it's now evenly distributed through everything.
JavaScript's design flaws express themselves in very fun (read: dangerous) ways. Many developers struggle to understand what 'this' is in JavaScript's context because it's poorly designed. JavaScript's variables have peculiar scoping rules because of variable hoisting. JavaScript's implicit type promotion is an endless source of errors and confusing code.
Sounds about right to me.
I'm not sure I understand but, using Sprite kit you can detect human bodies through the camera ?
Oh sorry, I thought you were speaking about games :). OpenCV would be ideal for this. Shame for swift there isn't an easy way to use it (OpenCV).
Just for info what happened in my case. I was uploading builds from my company's network. After 10 days of searching what would be the problem about forever "Processing" mode we found out (with Apple's support help) our company's firewall was truncating some final chunks of the IPA package. OMG.
Initialising a var using a closure (which (I think) is what you're talking about) doesn't require that var to be `lazy`. It is also the first solution to this problem that OP mentioned.
I kind of prefer the first proposed "closure way" of initialising the var, only because it's the "standard" way of doing this. Saving a little bit of typing isn't really worth the increased complexity (i.e. the additional protocol you have to know), but that's very project-dependent I think. If constructing views in code is something you do a lot, this shortcut might be worth it.
Did you forget this ? task.resume()
JavaScript can keep coming with the "It is a prototype based language" excuse. So is Lua, and it is far more intuitive. It does not have the nutty "this" keyword of JavaScript. I did Lua programming before I did JavaScript, and it was very quick to get started with Lua. In comparison I've found that when I started with JavaScript even long time JavaScript developers have no proper understanding of the language. You ask them about central elements of the language and they have no clue. They are just used to hacking around, copy pasting code or whatever they do. You can do lots of useful things in JavaScript due to sheer amount of libraries, but lets not kid ourselves into thinking it is a good language. For Swift to be significantly better JavaScript isn't particularly high bar to set. But Swift can't compete in terms of libraries and mindshare on the server side at the moment.
I wrote [a MVVM implementation example](https://github.com/allbto/iOS-Swiftility/blob/master/MVVM.md) using my own library, but you can apply the idea with RxSwift without problem. tldr; Model implement protocols that the View-Model can pass to the View(Controller).
In the process of a CS Degree. Also would love to do something in a medical field.
Half of those are syntactical quibbles and the other half are taken care of by lazy var. Seems like a solution in search of a problem. A pretty solution, sure, but it falls into the "too much spare time" category, to my eyes. 
That's why I mention both - some people might not even realize the closure option. However, yes I create that many views progmatically. I'd rather something similar be part of the language later. That said, I think the extension adds readability and is fairly obvious without a learning curve as to what to expect..
Ignoring the minor performance and syntactic difference, the extension can also be used for local variables. Given the choice of let or lazy, I prefer the version that means what I want. Lazy is for something that I may or may not need later. At the very least, the closure syntax is something I thought people would like to consider. As another poster noted, I wouldn't recommend an extension unless you do this *a lot*.
&gt; Lazy is for something that I may or may not need later. I believe you can use block var properties just the same without the `lazy`, so that they're created immediately at init time. I like the look of the code yours produces, but as someone else mentioned, it's drifting a fair way from standard practice for not a large gain. Also good to keep in mind that in Swift 3.0 (or possibly after 3.0? I forget) they're planning on overhauling the init process. 
Is there a good tutorial/explanation on how to do this approach? It's completely new to me as well as the other one. Now I'm stuck and I haven't been able to pass the data so I could try a new way of doing it.
I don't know of a specific tutorial but googling "UIGraphicsBeginImageContextWithOptions" should get you where you need to go. That creates the context to draw into.
he gave code... as requested. :D 
use this after the catch guard uiList.count &gt;3 else{ //SETUP YOUR UI HERE return }
Like this? It's not working but either way, will this work if I have one or two results from the fetch? } catch let error as NSError { print("Could not fetch \(error), \(error.userInfo)") } guard uiList.count &gt;3 else { uiOne.text = uiList[0] uiTwo.text = uiList[1] uiThree.text = uiList[2] } 
Look at Apple docs about "Drag and Drop"
Have you ever added `self.navigationController!.navigationBar.translucent = false`?
It's more important that you learn the architecture and design patterns behind programming rather than the specific tools and languages. Any modern and sufficiently managed language can do this for you. So while Swift may change, the underlying patterns will not (at least, not significantly), and it is those that are most important to learn. Python is also a great place to start, but swift has the advantage of playgrounds, which I suspect will really help you early on. 
No. The property to hide the nav bar is `hidden`. 
If you're using Storyboards you can click the button at the bottom right of the Storyboard screen that brings up the little sidebar. In the sidebar click on the "Navigation Bar" from there you will be able to change the Bar's Tint Color.
Could you elaborate on what you're trying to accomplish? Are you trying to basically segue to a tableview and display information based on what Image was selected in the Collection View?
If you talk to many people in the field, its actually pretty common to have abandoned at the least storyboards. XIBs were fine when there was only one screen size to target, but as the screen sizes increase they are becoming more and more antiquated. Many people have moved over to solutions that allow for more responsiveness in the creation of the view, rather than pushing all of that code into the ViewController. My particular favorite is SnapKit. Do you have any apps using exclusively XIBs or the Storyboard that is in production?
Thanks, that makes sense! What about the case where I update one Article from the collection, what would be the wise thing to do to keep the model/view model updated? 
Its bothering me i can't figure out where you mean, but im looking ;-)
Clicking the button highlighted in red will display a side bar. Button http://imgur.com/EwQBCvm Click navigation bar and change settings to the right Navbar http://imgur.com/oepMDzH Hope this helps! 
What, so easy! Thanks, you're the man!!!
You should set up your views using Auto Layout.
They are set up using auto layout 
Hahaha no problem! :) glad I could help!
You forgot the "return".
Have you looked at `Assistant Editor -&gt; Preview`? It really helps to see what the layout will look like on each form factor. [Here's how to do it.](http://imgur.com/a/jI9VI) Edit: This will hopefully help you debug any autolayout issues. Let me know if this is what you were looking for.
Tbh the developers you worked with were kinda bad, then. Just because they don't know what they're doing, it has no reflection on JavaScript. And you can't really compare JavaScript and Swift, one being interpreted and the other compiled, honestly. I guess there's no point in arguing though, it's just your *opinion* against mine in the matter. I don't believe your opinion is justified for the sake of other's ignorance, however; just basing your opinion on your experience is enough for me to know it. 
I appreciate your response and I am able to achieve the auto layout result I am looking for. Hopefully by rewording my issue, i'll be able to change the idea of my problem. So the storyboard height I have chosen to use to set up my screen is 667 (iPhone 6 height). However, if I were to use a 4s simulator, I am only able to see 480 of that 667 (to view the extra 187 pixels, I have a scrollview set up). With that in mind, am i able to create code to screenshot the entire 667 pixel storyboard, even though I may use a 4s simulator which has a max height of 480?
Wonderful! Thank you! I actually was able to figure this out after trial and error and googling, but it is good to have another read over things.
Edit: Whoops. I totally missed it. Anyways, it's not possible to do what you want to do. Sorry :(
Thanks! Any idea why though? 
Anything that requires self must still be done in init or lazily (callbacks, constraints). I'm going to attempt to find a good pattern for that later.
Oh yeah! The above demo also implements a FXAA post process which I was really happy with. Deferred lighting makes typical MSAA implementations very resource intensive. I could make a post specific to this later.
Wow! I don't like BBEdit's previewer much, and my QuickView plugin seems to be stuck with standard markdown. I'll definitely give this a try. What's _really_ cool? OMG I love that frontmatter support! It's on github, so forked, and I'll have a closer look at it, too. I'm thinking it would be really nice to be able to choose the markdown engine... there are differences in the things that, e.g., middleman will render versus Github flavored markdown, so that would be convenient. 
I ended up building a custom cell with a date picker in it, then inserting it below the cell that was selected. The viewController then updated the originally selected cell with the value of the datePicker cell. That was a while ago so there might be more elegant solutions now. Good luck.
You might want to check out [Eureka](https://github.com/xmartlabs/Eureka) and see how it's done there. 
I went and created an app that accomplishes what you want to do but instead uses a tablet view as the first view. I know you are using a collection view but I believe this will give you a good idea of how to go about transferring information between views. Please let me know if you have any questions! Link: https://github.com/kitzmiller09/TableViewSegues Edit: Basically what I did was I created a table view with 3 cells. When you tap the cells it stores that cells value into a variable named "selectedBookID" and then performs a segue to a second view controller passing that variable and storing in one within the second view controller named "bookID" and then updating a label on the screen to display the value of bookID. In your case you would run the query storing all of the book objects into an array (one of these object's attributes would be the ID), and then load the collection view. When a collection item is tapped you would perform the segue to the table view passing along the tappedBook's ID. In the 2nd view controller you would run a parse query retrieving all comments with a bookID of the passed value. Then display that information accordingly. 
But then you have to set it later in init, right? Maybe also with implicitly unwrapped? And then getters, setters, etc are generated in code.
Yeah, nice stuff. Starred yours as well. Will take a deeper look later.
In your particular example, you would have to set it later such as in `viewDidLoad`. I've used this pattern often: ``` @IBOutlet private var button: UIButton! { didSet { //set button properties } } ```
Wow they fixed stringly selectors! hooray
Awesome, thank you!
Yeah, that works, but I want to avoid 'var' and '!' when I can. But in the case where you set properties later, that's a great way to approach it.
Better over AppCoda or Hacking with Swift?
OOP in Java isn't really OOP, it's just procedural programming wearing a costume. The OOP in Swift is derived directly from Objective-C, which is derived in turn directly from Smalltalk, the first real object-oriented language.
You know what I would like to see? A perfectly setup OO, MVC or MVVM designed demo application using all of Swifts cool features and structural paradigms. Any leads? I would love to see a great example of how someone who knows how Swift breaths, doing delegation, notification, etc
I'm confused to how GCD/Libdispatch is being used. I see that you can install it but nowhere in the code do i actually see any calls to Dispatch. Seems like tis using a `lib event` event loop. Which is all well...but can anyone explain where libdispatch is being used? I can't seem for find any references to it in the code
Parse never promised to be around forever but the "sunsetting" announcement made me trust them a bit less. Despite my emotions, their frameworks and product were really good and are now open sourced. It's possible to run Parse Server on your own servers or other hosted solutions like EC2. Several guides and hosting discounts: http://blog.parse.com/announcements/parse-migration-guides-discounts-and-events/
What's wrong with it?
old questions, but this is an excellent repo that solves this problem. https://github.com/smileyborg/TableViewCellWithAutoLayoutiOS8
replied to elvish jerricco
This is misleading. The data is for year-on-year growth **per language**. Since Swift is brand new, of course it will have a high rate of growth compared to last year. Learn the ecosystem, SDKs, design patterns, architecture, etc. That's what will get you a job.
Dispatch is being used through this library: https://github.com/crossroadlabs/ExecutionContext. We made an abstraction layer over dispatch-like stuff to be independent of it. The main reason is to make it possible to support both synchronous and asynchronous development styles. That's true that libevent is used to do the networking job. It was the easiest choice to start with. In the next version (0.4) we are moving away from both Dispatch and libevent as both have shown quite some disadvantages in real-life scenarios. So version (0.4) is all about performance. Stay tuned.
Skyrockets, right, show one position that requires only swift and no objective-c?
I generally refer to it as a proxy, but wrapper works too.
I've worked on 9 in the past 2 years.
Very nice, thanks a lot
Yeah! There's [readLine](http://swiftdoc.org/v2.1/func/readLine/#func-readline-stripnewline_-bool)
Just use `readLine()`. I wrote some example code in my [Swift Knowledge Base](https://www.hackingwithswift.com/example-code/system/how-do-you-read-from-the-command-line) that should get you started.
You're welcome to try it out and let me know your feedback. It's very much appreciated. Making iDevelopers happy with it is our primary goal.
Of course the overall interest is higher than Objective-C already. But in this transitional period you're not going to find many Swift-only jobs.
Learning Swift is not the hard part: getting familiar with the bulk of Cocoa is the tricky bit. This is assuming you want to do iOS development. Swift has been ported to a few other platforms: those frameworks are still very much WIP, so it's experimental at best. Also - if you are betting that learning Swift itself will be enough to land an iOS job: while it *might* be true: however for the most part you will very likely have to maintain (or port) the existing Objective C codebase.
I would actually think that demand will increase potentially since, rate of need for apps increases but newer developers that are swift only cannot fulfil roles which request swift+obj-c and no new developer will learn obj-c, meaning developers with both should find it easier to find work ?
&gt;you will very likely have to maintain (or port) the existing Objective C codebase While true, I don't think this should be a problem for anyone that's experienced with Swift and the iPhone SDK.
"Wrapper" is the most general term – it's not wrong but there are more specific terms. "Proxy" isn't really wrong either but it is more common in situations where the interface isn't really changed, you're just separated from the real object for some reason. Where you have a wrapper whose purpose is changing the interface or behavioral semantics, I'd call it an adapter interface. https://en.wikipedia.org/wiki/Adapter_pattern Of course, "Proxy" is sometimes used for wrappers that keep the interface but change behavioral semantics (like load balancing proxies). In some sense LazyCollection could be considered a load balancing proxy so there's wiggle room to pick whatever name you want here.
Why are you using the Expression Engine logo in your readme's header image?
But what's important is that you can find Swift jobs: https://www.natashatherobot.com/swift-jobs/ I imagine after Swift 3, Swift will dominate iOS development. We have some people afraid of the breaking changes in 3.0. However, Apple is working on that: Chris Lattner: "Agreed – source breaking changes in Swift 3 are already a given, so we’re going to provide a really great migrator to help move people forward. Beyond Swift 3, the Swift community will be a much more diverse place with multiple platforms supported and more diverse tools/ide’s used. As such, source breaking changes will be much more difficult to justify after Swift 3 is out the door, we’re prefer to roll them into Swift 3 where ever possible."
Oh wow haha, TIL
SPM is what's listed on swift.org, so that's what your project should use.
Yep, and it does.
Does this book teach OOP methods aside from just swift syntax? Is it a good earning tool?
Changed. Thanks again!
If you would work for me you would have a Swift-only job as well. And I haven't seen anything in terms of breaking changes during Swift 2 that made me doubt Swift in any way. Looking forward to the first Xcode beta that has Swift 3 support!
I wonder whether it's because the NASA pictures seem to be using weak HTTPS, which iOS 9 really does not like. If you really want to use those pictures, and don't want to wait for NASA to strengthen its HTTPS, you might find [disabling App Transport Security](https://www.hackingwithswift.com/example-code/system/how-to-handle-the-https-requirements-in-ios-9-with-app-transport-security) is a suitable workaround. Note: it's a workaround, not a fix; you need to use it carefully in production code.
asset catalogs are also nice because their structure is documented, so you can poke around and get at the individual images if need-be. You can make your own tooling if you have a complex asset production pipeline.
What are you running on app startup?
So I just noticed that my launch image isn't being loaded. I assume the time that the launch image would typically load is the delay that I am seeing. I've already migrated the launch image settings to Assets and added a launch image to my Assets.xcassets folder. In the first view controller, I have a viewDidAppear function. Could that be it?
Awesome! Glad I could help :)
Its actually a baas.
I can see the disadvantages or more so issues/problems with libevent. What did you guys see were some disadvantages for Dispatch for real-life scenarios? I'm kind of counting on Dispatch to be the ideal multicore-concurrency solution on swift/linux. My rudimentary stuff on OSX seems promising. I've scrapped together a websocket server using dispatch (a mashup really). I'm hoping to have it linux ready as soon as Dispatch plays nice on linux. Check it out: https://github.com/hamin/swift-ws . I am curious what disadvantages you were seeing with Dispatchl?
Can u not on the setters of A and B run a method that checks A and B and if condition is met run the heavy stuff ?
I want the lazy property to have the latest computation when I access it. In `didSet` of A &amp; B, I don't want to do `doHeavyComputation` if the lazy var is nil. But there is no way to check that lazy var is nil/uninitialized. I have decided not to use lazy var and just use computed property with private stored property.
Dammit, I started suspecting this was the case when I created a new tableVC from scratch and that function still wasn't being called. I knew it was something stupid. Thanks, I wish I'd given up and asked sooner! 
Nice coment, thanks. Let me break down my answer: 1. Dispatch on Linux: try our guide, it works for us: https://github.com/crossroadlabs/Express/blob/master/doc/gettingstarted/installing.md#installing-dispatch-on-linux 2. Libevent - has a lot of drawbacks, was used just as a quick start. 3. We are moving away from Libevent to other library in v0.4, stay tuned. 4. Dispatch is default for Swift - it's good. Still it has no manageable parallel queues, and this is a problem for server-side software. 5. Right now we are working on a layer that will allow to easily switch from one concurrency solution to another to make Swift Express highly customisable
Oh, could you go into more detail what you mean? Sounds interesting. 
This is a mix of correct, plain wrong and simply confused. I don't know where to begin. 
Release or Debug? Debug startups can be slower.
this is what Apple recommend as well. basically your launch image / storyboard should look like the first screen but with no content (tabs but an empty table e.g.) so rather than seeing your logo the user sees "the app" and assumes it's loading. it can be hit and miss though because the UI is unresponsive so they might think it's stuck if it's taking too long (but the app will be killed in extreme cases anyway so it shouldn't be taking long)
Yeah just dont use lazy, in Obj-c you can check if a lazy is still nil without Init'ing it, but you cannot do that in swift.
Nice. More on the release [here](http://forereads.com/?single_article=tdonnelly_Open+sourcing+the+Storehouse+animation+engine&amp;universe=design) courtesy of Forereads. 
Firebase is well documented has a very good iOS sdk, easy to implement and what I like most about it is the realtime database. give it a try and you might like. I like CloudKit but I think you will be locked to use only with apple users. 
Do you want to pass data in between view controllers? Or just initialized the struct in both views? Bit confused lol
Excuse the androgynous Agent47 Thumbnail. It's almost off putting. 
Simula came first having classes and inheritance, but lacked message passing, which is the more important aspect of real OOP. Java is a worthless mongrel of a language that does everything - every single thing - wrong, compounding every mistake in the design of C++. Objective-C has warts, most of which come from trying to marry C and Smalltalk, but it at least is an actual object oriented language. Swift is stuck with the ugly aspects of an ALGOL family syntax, but at least it has a nice pedigree and good internals. 
Same iOS version, and yes.
I'm in EST so I wouldn't be able to make the call, but I would love to hang out in Slack and connect with others. Could you shoot me an invite?
It sounds like you are creating a model? Your view controller don't really interact with the model directly. You create an instance of your model with the data it wants then save that instance to an Array, Dictionary, or some other collection class. Then pass it to your view controller.
Sure, Do you have an email you feel okay to share? Slack requires an email to invite.
This [one](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html)? Actually, since Swift doesn't allow multi-class inheritance, protocols could be very useful for some things. [One more](https://www.quora.com/Why-Apple-emphasis-protocol-oriented-development-in-Swift-Java-has-supported-interface-for-a-long-time-what-is-so-special-to-use-protocol?share=1) link. And [this](https://angelovillegas.com/swift-protocols/) seems to be good enough.
Is there a way to avoid force casting in a situation like performSegueWithIdentifier? let viewController = segue.destinationViewController as! SomeSubclassOfViewController
I think you are going to have to take two screenshots and then stitch them together with photoshop or similar. 
Internal classes in a framework aren't meant to be accessed from a project using the framework, that's the point of using `internal`. If you think some of the classes should be usable from your own project, changing the source and making them public doesn't sound like a hack at all. Why do you think that that would be ugly? On the contrary, making internal classes of a framework somehow usable from a client project sounds like the ugly hack. One alternative is just forking the project you want to base your work on (i.e. don't include it as a framework, just modify/add whatever you want directly).
I know it seems like even *more* to learn, and it is, but Git really is worth every second of your time spend learning it.
You should learn about what HomeKit is first. And, it seems, you need to learn what IoT actually is. Honestly you seem clueless about both. HomeKit isn't IoT in the generic sense - it's a far more controlled API and system model so security is far less an issue. It more like home automation a la X10 and LonWorks of yore. You can do vaguely IoT stuff but that's not really what HomeKit is about. Only approved HomeKit hardware works directly with the HomeKit API. People have tried to build gateways but gotten some pushback on that (for security reasons most likely but also because the user interface of HomeKit would suffer by connecting stuff that doesn't fit the UX design metaphor well). You can do IoT completely separate from HomeKit because often IoT is mediated through BLE and WiFi. And then, yes, security of the remote nodes (which either YOU are responsible for as hardware developer or a 3rd party you choose to standardized upon is) becomes a non-trivial issue, though security is enhanced features embedded into iOS and Mac OS X such as 1) sandboxing, entitlements, XPC and code-signing, and 2) choices you make as a developer involve BLE and WiFi interfaces to IoT hardware. But if you actually read the Apple docs or developed this kind of code, you'd already know this. Honestly this isn't Apple's problem (unless they want to go "full in" on IoT in a real way), and that would NOT be HomeKit in most cases. There's NOTHING stopping YOU from solving these problems: only talent, self-discipline and desire.
Total newbie iOS developer question, but is Apple's goal to eventually have Swift completely replace Objective-C? Or will there always be advantages to writing things in Objective-C that just can't be achieved with Swift? (In terms of iOS/OSX/Watch/iWhatever development)
Replying to add more, in case anyone else stumbles across this and can use the help (I noticed that this thread already comes up as a top hit on Google when searching for this problem). Your solution helped a ton (and improved the overall look and feel of my app!), but that little "x" remains in the search bar and still caused my app to crash when tapped. Some Google-fu turned up an answer where someone pointed out that basically "searchBarTextDidBeginEditing: is being called after tableView:numberOfRowsInSection: but before tableView:cellForRowAtIndexPath:.The result is that the tableView is expecting [listOfItems count] number of rows but by the time it calls tableView:cellForRowAtIndexPath: the searching BOOL is YES so the view controller uses copyListOfItems to populate the table which of course does not contain a sufficient number of objects to populate the table". The solution was to simply not set "searching" to TRUE in "searchBarTextDidBeginEditing". The flag is already set by searchBar:textDidChange, having it set in TextDidBeginEditing makes searching TRUE whenever the searchBar is first responder, including in the timing situation in the paragraph above. Thanks again, on to fresh problems now!
I'm not sure of what you mean by "act like a button". If what you want is to trigger an action every time the user presses a key while in a UITextField, then you should implement a TextDelegate.
How can I have a certain text that when it gets entered in a UITextfield it goes to a certain viewcontroller. Please help me. Thanks!
"Design a launch image that is identical to the first screen of the app, except for: Text. The launch image is static, so any text you display in it won’t be localized. UI elements that might change. If you include elements that might look different when the app finishes launching, users can experience an unpleasant flash between the launch image and the first app screen." Here is the link for more information: https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/LaunchImages.html
You should be using Source Control. Git is what's built in to XCode, and it's very easy to use. You save your files all the time, but you commit before you're going to make a major change. 
Not trying to be a pain but the crux of your question really isn't Swift language related, which is what this sub is for. You may be confusing the Cocoa Touch Framework (specifically, the UIKit module) with the language being used to drive it... You'll get a better response with this in r/iOSProgramming. No harm in mentioning that you'd prefer an answer using Swift, in there.
I don't really understand your problem, but structs are passed by value, meaning that when you pass from one object to another, it's really just copied on the other end...so they're not the same object anymore. Classes pass by reference, so you are actually passing a reference to a single object, meaning they can share the same one. 
The why for protocols/delegates finally clicked for me while watching [this video](http://youtu.be/VEvOYG-xB54). All of the written tutorials out there that I had read previously (I had read a number of them) never really clicked. I always found the examples too abstract. I would understand the concepts perfectly well, but never really understand the why. After watching the video I linked to I finally had a "why". Simplest explanation, that clicked with me: to create a contract between view and controller for exchanging data. Always knew this is what table views and pickers and whatnot were doing because I was always having to conform to protocols in order to provide them data and get them working, but it wasn't until I had to create my own custom view that I got the full picture and saw the why from the other side. Edit: Going to leave a link to [this series](http://youtu.be/o3MawJVxTgk) as well by the same guy. I was watching this first, which actually lead me to watching the video I linked above. Can't remember exactly in which video I had my ah-ha moment. 
Ahh that makes much more sense now! In my code I just included both the cases in the cellForRowAtIndexPath method and so it chooses which one to use depending on the Bool isSearching. 
The unmanaged part has to do with memory management. Swift cannot determine who is responsible for taking ownership of this thing so you must manually either takeRetained or takeUnretained (look that API up, not sure if that is exactly right, being away from Xcode). 
The easiest way is to use wAny hAny size class. If you make UI clever with wAny hAny size class, you have also all iPad sizes covered.
Protocols are a really good way of exposing only certain aspects of a class to another, or to ensure consistency in your code. As an example say you have an app that needs to support multiple back ends, you can have a protocol that exposes a bunch of backend methods to your front end classes. Any class that then acts as an interface to a specific back end can simply implement this protocol. Hey presto! You can support any back end with no extra implementation in the front end code. Hope that helps.
Don't forget to set height/width values as ratio of screen, not as constants.
Right now i'm trying to add constraints to a map view kit which is small and sits inside a cell. I'm trying to add constraints of 0 trailing space to superview and 0 bottom space to superview with 50h and 50w. Although this doesnt seem to sit where i want it.. It actually doesn't show at all. If i want to make it sit at the end of the cell in all iPhone sizes how do i achieve this?
Connect the first controller to the second (not from the button). Name the segue in the identity inspector. Then add a function that calls performSegueWithIdentifier wrapped in an "if statement". Finally, call that function when the button is tapped. 
Also creating a new branch in git when you know you're trying something radical. 
SpriteKit is what you're looking for I think. Yes, you can use CAAnimations to move things, but SpriteKit adds a lot of other useful things (like collision detection for that bullet when you shoot the gun for example). Check out this tutorial for a beginners guide https://www.raywenderlich.com/119815/sprite-kit-swift-2-tutorial-for-beginners
Guys check out this page i made. Trying to gather as much people who write in Swift. Doing so, creating a wonderful community:D https://www.facebook.com/swiftcommunity/
This is how I have managed to do it. I have a static variable with the actual group name to compare against. I run through the groups in the phone and then compare the group's name to the variable I have stored with the actual name. If they match, I take that group's identifier and use it in my predicate for searching. I hope this helps a little bit. static var groupName = "PLACE_GROUP_NAME_HERE" /// Fetches contacts from the group in the Contacts application. /// /// - returns: array of contacts static func getContactsFromGroup() -&gt; [CNContact]{ var groupContacts = [CNContact]() let contactStore = CNContactStore() do { var predicate : NSPredicate! let allGroups = try contactStore.groupsMatchingPredicate(nil) for group in allGroups { if (group.name == groupName) { predicate = CNContact.predicateForContactsInGroupWithIdentifier(group.identifier) } } let keysToFetch = [CNContactGivenNameKey, CNContactFamilyNameKey, CNContactOrganizationNameKey, CNContactPhoneNumbersKey, CNContactUrlAddressesKey, CNContactEmailAddressesKey, CNContactPostalAddressesKey, CNContactNoteKey, CNContactImageDataKey] if predicate != nil { let contacts = try contactStore.unifiedContactsMatchingPredicate(predicate, keysToFetch: keysToFetch) for contact in contacts { groupContacts.append(contact) } } } catch _ { print("Finding contacts in \(groupName) group failed.") } return groupContacts }
Google. which generally leads to Stack Exchange (9 out of 10 times).
What? My answer was clear; &gt; There's no IDE for Swift in Windows It might not be the answer you want, but to my knowledge it's not possible at the moment.
Technically not an answer to your question (the other two commenters gave great direct answers, both are fine), but you probably shouldn't have an enabled button that doesn't do anything when tapped sometimes. When the condition you mentioned becomes false, just disable the button (and enable it when it becomes true). Solves your problem is, and the user experience is improved as well. (If your button triggers some other action as well, ignore this comment please).
What method are you trying to use it in?
It's been a while since I've had to do it but IIRC you just pass &amp;pj (inout-style) to whatever method wants the unsafe pointer and the compiler will do the necessary magic. 
There is a talk about Lack of Design patterns in Python. The slides for it is [here](http://cdn.oreillystatic.com/en/assets/1/event/12/_The%20Lack%20of_%20Design%20Patterns%20in%20Python%20Presentation.pdf). I think much the same argument could be applied to Swift. Design patterns is something that makes sense in old school object oriented languages like Java. But with a modern language like Swift a lot of the need for these patterns disappear. I should probably do a writeup on this at some point. But here are some examples. 1) Strategy pattern largely goes away when you got functions and closures as first class objects. 2) Visitor pattern goes away due to class extensions / protocol oriented programming and possible enums. All give better approaches. 3) Factory patterns disappear because classes are first class objects unlike say C++ or Java. I can stick a class object in a variable and then call an initializer or that variable to create an instance of the class stored in the variable. 4) Lazy initialization, singletons etc basically goes away because lazy initialization is built into the language. Pretty much for most patterns I'd it is often straightforward enough in the language that it doesn't become much of a pattern to learn or identify.
Microsoft, as I recall, is actually trying to get Swift-on-Windows working. http://www.windowscentral.com/microsoft-also-working-towards-swift-compiler-ios-developers-come-windows-10 
This seems, on the surface, the opposite of 'good' to me. Can someone explain why this would make for better code?
From some code I ported from Objective-C to Swift. var aMatrix = GLKMatrix4MakePerspective( GLKMathDegreesToRadians(76), /* View angle */ Float(frameRect.width / frameRect.height), /* Aspect ratio */ 0.1, /* Near limit Distance from origin*/ 30) /* Far limit */ let anArr = withUnsafeMutablePointer(&amp;aMatrix) { (arr) -&gt; UnsafePointer&lt;GLfloat&gt; in return UnsafePointer&lt;GLfloat&gt;(arr) } glMultMatrixf(anArr) Although `withUnsafeMutablePointer` could probably be replaced with `withUnsafePointer`.
Xcode does have a feature called snapshots. Although I still suggest using git.
 guard let viewController = segue.destinationViewController as? SomeSubclassOfViewController else { return } Of course if it isn't that particular view controller it shouldn't work in the first place, as the screen you load could not work as certain things haven't set up before the segue. You should log and take appropriate action.
At one point I think it had the opposite effect, so I wouldn't recommend it. The reality is that swift compiling can be pretty slow still, but there are a few things you can try to do to fix it. Check out: http://bits.citrusbyte.com/improving-swift-compile-time/ https://panupan.com/2016/02/16/how-to-speed-up-slow-swift-compile-times/ http://irace.me/swift-profiling http://stackoverflow.com/questions/25537614/why-is-swift-compile-time-so-slow
I'm posting this here because you've all been very supportive of my work on Hacking with Swift in the past, so I hope this book is useful to you too. There's a $10 pre-order discount available before the book is released, but if you already bought the Hacking with Swift book you should have received an email from me with a discount. In case you were wondering, Hacking with Swift will remain online for everyone, free of charge, and you're welcome to continue asking questions here or on /r/hackingwithswift. Pro Swift, however, will only be available as a purchase – I want to give stuff away, and I enjoy helping everyone learn, but I also have my own bills to pay sometimes :) Thank you for all your support, /r/swift. This is easily the most encouraging subreddit for programmers I have come across, and I really enjoy contributing here as much as I can. (OK, so technically it's not the sequel to Hacking with Swift – you don't need to have read one in order to read the other. Follow-on? Companion?)
I'd Rather stick needles in my eyeballs
It doesn't; it's the opposite of what Swift aims to achieve.
I believe you may have misunderstood the purpose of this library. Please see sample code [here](https://gist.github.com/vmanot/cc80e7f2b5cbd8344e5e).
9 times out of 10, your view performance has nothing to do with UIKit. You need to profile your code in instruments and move business logic off the main thread, but **only** if Instruments tells you that code is taking a long time. Some things to look out for: - Database Queries or network requests inside cellForRowAtIndexPath - Expensive allocations inside cellForRowAtIndexPath - Sometimes it helps to make sure all your views are opaque in a view hierarchy
awesome! i'll def buy when it comes out. even though I bought your HackingwithSwift book too, I don't actually use it cuz i just read all your tutorials online but i wanted to support you , even if it was only a little (everyone, go buy the book if it helped you in any way. he is giving his valuable knowledge away for practically free). 
Thanks, twostraws. I'll be purchasing this. Hacking with swift is what I credit to be the major source of what kept me engaged with app development shortly after release. So much so that I pursued and found a great position for over a year now as being a swift dev with a company, and have written a handful of personal cool little utility apps. No doubt you've improved as well and I'm eager get a hold of this. I can't appreciate this stuff enough.
&gt; https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIBarButtonItem_Class/index.html#//apple_ref/c/tdef/UIBarButtonSystemItem thanks 
Actual namespaces (modules) and the fact you can pass functions around like regular variables are the things I've liked the most. Being able to use map, filter &amp; reduce and all those types of things is fucking amazing
1. Stronger protocols. This allows for protocol oriented design which focuses on composing objects as compared to object oriented design where inheritance is used. Protocols allows you to only expose the functionality you want to expose. If you haven't watched the WWDC video, you should check it out. 2. Generics. Makes code bases a lot smaller and cleaner. Also fun when you can solve problems using generics. 3. High Order functions such as map, filter, reduce, etc. 4. Static typing. Catches a lot of during compile time error rather than runtime. Example, if you're casting a wrong type the complier will throw an error. 
Also, this should probably go to /r/iOSProgramming, as this doesn't have anything to do with Swift.
It's not accurate to say that ObjC has generics. You can't make your own ObjC classes or methods generic. You can add generics to collection types like NSArray in order to make your code interoperable with Swift, but that's the only point. The compiler does not enforce these generics in ObjC.
Thank you so much, this is exactly what I was looking for.
Look up Apple Beacons. As far as I know, there is no software-only solution. 
You're passing it like a compiler option. It is a CMake option that needs to be passed when configuring the LLVM build directory.
You have two options. The first is an iBeacon which is physical device that you place in the store which when the iPhone detects alerts your app this is pretty precise. The second is a geofence which is usually less precise and may not work indoors. Either way you will want to read this: https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/LocationAwarenessPG/RegionMonitoring/RegionMonitoring.html
this looks perfect, thanks!
Check out Firebase's [GeoFire](https://github.com/firebase/geofire-objc/blob/master/README.md) code. As long as you're okay with the limitations of GPS accuracy. 
&gt; you can pass functions around like regular variables You can do that in Objective-C too (and even plain C). The real difference is that in Objective-C, function pointers and blocks are different types, so you need to wrap a function call in a block to use it where you use blocks: // Bare function void someExistingFunction(int x) {} // Array of blocks NSArray&lt;void (^)(int)&gt; *blocks = ...; // Need to wrap in a block [blocks addObject:^(int x) { someExistingFunction(x); }]; In Swift, all references to functions are closures, so they are treated as the same type: func someExistingFunction(Int x) {} var closures = Array&lt;Int -&gt; Void&gt;() closures.append(someExistingFunction) What's more, operators in Swift are also treated as functions: var comparators = Array&lt;(Int, Int) -&gt; Bool&gt;() comparators.append(==) comparators.append(&lt;) comparators.append(&gt;=) In Objective-C, you would have to wrap the operators in blocks. P.S. Interesting note, `Array&lt;Int -&gt; Void&gt;()` is valid Swift but `[Int -&gt; Void]()` is not.
Seriously? Have you cracked one tutorial? Have you watched a single video from Apple? This is iOS 101. It's ALL there is now to coding it! This so basic it's insulting to mention the one (1) keyword to search for.
Also enums with associated data, pattern-matching in switches and `if case...` and function overloading, all very, very useful things to use in day to day code that make Swift a delight to use over Objective-C (also not available in Obj-C).
It's not terribly hard to draw your self. I just wrote an extremely close animation for a confirmation screen. The key to the idea is to add Core Animation Layers (CALayer) to the view and then add a bezier path to the layer. Then use a CABasicAnimation to add the animation. Mine had a statice timing but to make it a progress meter would be pretty easy, just pause and advance the animation on the layer as more data becomes available, ie as your task progresses. Here's the animateCircle function I uesd: func animateCircle(duration: NSTimeInterval) { let fromValue = 0 let toValue = 1 let strokeEnd: CGFloat = 1.0 let aniKey = "animateCircle" // We want to animate the strokeEnd property of the circleLayer let animation = CABasicAnimation(keyPath: "strokeEnd") // Set the animation duration appropriately animation.duration = duration // Animate from 0 (no circle) to 1 (full circle) animation.fromValue = fromValue animation.toValue = toValue // Do a linear animation (i.e. the speed of the animation stays the same) animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut) // Set the circleLayer's strokeEnd property to 1.0 now so that it's the // right value when the animation ends. circleLayer.strokeEnd = strokeEnd // Do the actual animation circleLayer.addAnimation(animation, forKey: aniKey) } Here is the circle layer definition: let frame2 = CGRect(x: 0, y: 0, width: 200, height: 200) let circlePath = UIBezierPath(arcCenter: CGPoint(x: frame2.size.width / xDivsor, y: frame2.size.height / yDivsor), radius: (frame2.size.width - radiusSrink)/radiusDivsor, startAngle: startAngle, endAngle: endAngle, clockwise: direction) circleLayer = CAShapeLayer() circleLayer.frame = frame2 circleLayer.path = circlePath.CGPath circleLayer.fillColor = UIColor.clearColor().CGColor circleLayer.strokeColor = UIColor.whiteColor().CGColor circleLayer.lineWidth = lineWidth circleLayer.opacity = circleOpacity circleLayer.strokeEnd = strokeEndCircle
Aha, whenever I go to Starbucks I get a notification from my Startbucks app, they probably have iBeacon device in every store then. 
That HKT syntax seems really unfortunate, but the linked thread shows a surprising amount of skepticism to the idea in general. I perhaps didn't read enough of it to answer this myself, but are there alternate proposals for this feature?
It's very kind of you to support my work – I hope I can surprise you a little with Pro Swift so that you learn at least one or two new things :)
Wow! I read your comment several times, each time with a big grin on my face – this is the kind of thing I just can't read enough! :) It's fantastic that you've found a new career for yourself, and I hope you're enjoying putting your skills to good use. I hope Pro Swift will introduce you to a few things you hadn't tried before – thank you for your support!
The back button apparently isn't supposed to trigger it. Maybe this helps? https://teamtreehouse.com/community/how-to-prepare-for-back-button-segue
I do something very similar to what you're asking for here: https://github.com/Dan2552/Monies/blob/master/Monies/WebViewDriver.swift
Now this is an answer I can get behind. Not just a third party library for literally everything. 
Exactly, or if you wanted to label the lists: var lists: [(name: String, items: [String])] = [] And to get things out: let listName: String = lists[i].name let listItems: [String] = lists[i].items To append: let newListName: String = "Cars" let newListItems: [String] = ["VW", "Audi", "Honda", "Toyota", "Nissan"] let newListToAppend: (name: String, items: [String]) = (newListName, newListItems) //combines everything above into one constant lists.append(newListToAppend) //adds the new stuff above into the list
I'd recommend using MapKit for sure. I've used both Google Maps SDK and MapKit, and MapKit is just so much easier. The fact that it's native means you'll have a lot more resources at your disposal, and I find that's it's also much faster. For a backend, you could use [Firebase](https://www.firebase.com/). They have a really cool thing as part of their backend called [GeoFire](https://github.com/firebase/geofire-objc) which handles location data for you, and it's phenomenal.
I would suggest you use apple maps, easier to integrate and it's free. I think the main issue with it is locations but if you don't have to use locations then it's not an issue. As for database probably just use sqlite with core data.
UIPageViewController? You could also create a horizontal scroll view with each of the views contained within. 
you can try iCarousel ( https://github.com/nicklockwood/iCarousel )
Why use firebase or geofire? OP never mentioned anything about having data stored in the cloud. OP can store lat/lon data as Doubles in core data and compose the CLLocation when (s)he pulls the lat/lon from core data.
i don't understand what that means D:
Try cleaning the project then compile and run it again.
Cleaning up might help you. If you got totally stuck, try to query the state of the ATS status, here is an example on my blog: http://www.learniosdevblog.com/app-transport-security-ip-address/ (sorry, but I am still in transition to Swift, it is in Objective C:().
You should set it in your own project's Info.plist file, not in Pods.
Here very useful video. https://www.youtube.com/watch?v=3BcBu30thIA. Explain on you question
Do you perhaps know how to write a protocol which would conform to UITableviewController?
because you wrote the setting wrong. should be "NSAppTransportSecurity " not "setting" see answer #3 here: http://stackoverflow.com/questions/30731785/how-do-i-load-an-http-url-with-app-transport-security-enabled-in-ios-9
A paginated UIScrollView is my suggestion. Use xibs to make the views if you prefer interface builder, then construct them quickly in viewdidload
This should help you to achieve what you need: https://github.com/ariok/BWWalkthrough
Interesting. I would assume a digit with so many decimals gets offset by Float shenanigans, but if apple think it's proper, I guess it's ok. Alternatively, store them as String and cast them to Double on load. 
Thanks for your help! I will try to implement a protocol, i have been reading on it for 4 hours and now i think i have a decent grasp, but to admit navigation and passing data is still quite confusing D:
You no need protocol who confirmed uitabkeviewcontroller. You need simple delegate protocol. Please watch video, such i present you.
supposedly its nil, someone solved it already. thanks btw: http://stackoverflow.com/questions/35836027/variable-used-before-being-initialized/35836129#35836129
Thank you for your support! 
So, i am making a simple app where lists on multiple subjects can be stored, for example groceries list, favorite quotes list, etc. I have used segue to connect the lists scene to create scene. I used a delegate protocol to transfer data between the lists scene and elements scene(where the elements of the lists are filled in), here i transition from lists scene to element scene without using a segue. What i would love to have in the elements scene is navigation bar with a back button which leads to the lists scene. I however cannot make the navigation bar appear in the elements scene, if it would appear i think i could make a custom button and when it is pressed trigger an action to dismiss the elements scene, i think. But i cannot get the navigation bar to even appear in the elements scene :/. Do you think this would be the best way, or would there be an easier way? 
**Posts**: 1. [Mocking Classes You Don't Own](http://masilotti.com/testing-nsurlsession-input) 2. [Flattening Asynchronous Tests](http://masilotti.com/testing-nsurlsession-async) 3. [Stubbing Data for UI Testing](http://masilotti.com/ui-testing-stub-network-data)
Have you seen MapBox? It has the best developer exp of all of them IMO. I highly suggest you check it out! Google maps has them all beat for info and routing.
The difference between var something:SomeClass! and var something: SomeClass Is that the compiler will not complain if something is not set in an initializer, which could open your code up to run-time exceptions. You're basically telling the compiler, "I definitely initialize this variable before using it, trust me". Someone correct me if I'm wrong
You want to show "delete" and "edit" options when the user presses the Edit button in the navigation bar? I don't think this is possible with stock UIKit. The options the table view will show for each row are controlled using the [tableView:editingStyleForRowAtIndexPath:](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/index.html#//apple_ref/occ/intfm/UITableViewDelegate/tableView:editingStyleForRowAtIndexPath:) delegate method, and the only editing styles you have to choose from are Delete (minus button), Insert (plus button), and None. There may be third-party solutions to this but I don't know of any myself. What are you intending for each row's Edit button to do?
Usually a 3rd party service, yes. I can see some very large companies possibly doing it on their own, but it doesn't seem worth it unless you're say, an actual phone company already dealing with SMS at a low level.
Also, how did you come by this knowledge? Where did you look, or is it just a long history of work that you knew this stuff. 
https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/#//apple_ref/doc/uid/TP40006816-CH3-SW108 I recommend you check out these open source projects. https://github.com/JakeLin/IBAnimatable https://github.com/storehouse/Advance 
&gt; You want to show "delete" and "edit" options when the user presses the Edit button in the navigation bar? You are completely right! &gt; What are you intending for each row's Edit button to do? I would simply like that each row's Edit button would lead to an edit scene, where user could edit the elements of said cell.
&gt; Someone correct me if I'm wrong No, I trust you.
From what I recall, you might be able to use UIPopoverPresentationControllerDelegate and set the size in one of the methods defined there like prepareForPopoverPresentation(_:)
Not sure how much this will help - I'm on mobile - but check out [UIDevice](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDevice_Class/) Edit: realized this won't help much for processor, ram etc. Edit2: Found NSProcessingInfo class as well - I will look at it with more detail when I get home later. 
Your video link doesn't work for me, but I think I can guess what you want. The easiest solution is in three steps: set up a delegate for your tab bar controller, make that delegate conform to the `UITabBarControllerDelegate` protocol, then return `false` from `shouldSelectViewController` when you want your own behaviour. At that point, create the view controller you want and show it yourself. I created a simple example for you here: [How do you show a modal view controller when a UITabBarController tab is tapped?](https://www.hackingwithswift.com/example-code/uikit/how-do-you-show-a-modal-view-controller-when-a-uitabbarcontroller-tab-is-tapped)
Learn to code it yourself so you know it works as intended? This is the problem with relying on other people's libraries... Just saying - some of us avoid it this way.
Thanks u/waterskier2007, I'll give that a shot.
I already pre-ordered... Very interested in the video lessons and all the updates with the imminent Swift 3.
Another way is define a closure in view controller 2, and when we're pushing from view controller 1 to view controller 2, we can define the closure so that it will execute code within the scope of view controller 1. 
By `3 ViewControllers as Children` do you mean that you're segue'ing to the three view controllers (liek when you hit a button or something)? If so, just change the segue so that the two that need the NavBar are `Show` segues and the one that doesn't need the NavBar is a `Present Modally` segue. 
Walking through this code, step by step, I'm getting a "A C Function pointer cannot be formed from a closure that captures context" error. When I do a google search, what should show up, but another of your posts: https://www.reddit.com/r/swift/comments/3ko9cm/capturing_closures_calling_conventions_curiosity/ I get this error if I try to replace the comments /* Handle Error */ with meaningful code. I'm guessing you've thought this one through as well. 
Are you familiar with Objective-C? If so, it might be worth searching through the source of [this](https://github.com/Shmoopi/iOS-System-Services) and translating parts of it into Swift. Most of that library is NSProcessInfo (which is quite simple, actually - `NSProcessInfo.processInfo().physicalMemory` in Swift gives you the total amount of RAM on the device, for example) but some of the other stuff, for example getting the amount of _free_ memory, requires some lower level C calls such as `host_statistics` whose api does not translate into Swift very cleanly. [This](http://stackoverflow.com/questions/33855998/how-to-get-hardware-details-in-swift) stack overflow question has some potentially useful resources in the accepted answer.
&gt;Someone correct me if I'm wrong You're absolutely correct.
Heh, funny you saw that post of mine; that was when I was first coming over to Swift from C and Objective-C. So, that "captures context" error is that I was referring to by this part of my last comment: &gt; The difficulty with CoreFoundation's callbacks is that they are not nearly as flexible as Swift's or Objective-C's. Within the callback, all you have access to are its arguments, as well as and global variables and functions... That's what the third `clientCallBackInfo` argument to the callback is for. For a more clear illustration of what this means, consider the following Swift code: func someFunction() { let someContextVariable = "Hello" let someClosure: () -&gt; () = { print(someContextVariable) } } Swift is able to "capture" `someContextVariable` when creating `someClosure`, such that whenever you call `someClosure()`, it has access to that value. While Swift makes this seem trivial, there is actually a lot that goes on behind the scenes that make it possible. C functions *cannot* do this, so the following gives you the capturing error: func someFunction() { let someContextVariable = "Hello" let someCallback: @convention(c) () -&gt; () = { print(someContextVariable) } } If you take a look at the definition of `CFReadStreamClientCallBack`, you'll see it has that same `@convention(c)` attribute, and that's where the problem lies. Take another read over my previous comment, as most of it was dedicated to how to work around this issue. Don't hesitate if you need further clarification.
nice, appreciate the detailed answer! im keen on taking this approach thanks to you but theres just one part ive yet to figure out -- how you would detect the circular scrubbing from the user's thumb? it's essential to being able to skip throughout the audio track...it would be great if there was a circular version of the Slider element... edit: dont get mad but i found a library for it https://github.com/eliotfowler/EFCircularSlider
hm would you suggest this over UIPageViewController? Or UICollectionView?
Would you mind explaining the code in the first expression? As a beginner, when I think "list" my immediate thought is *array.* By looking at the position of the brackets and the additional info, it looks like a single array that's declared as a tuple, which appears to function like nested, sibling arrays, but able to return separate values from separate "lists." Just breaking down the code for my own practice, would love to hear any advice you can give or feedback on my guess.
Thank you! I think I underestimate how many people prefer videos to books – I guess videos just weren't a thing when I learned to code, so I'm used to reading!
No problem. Basically, it's like a Russian Matryoshka doll where you can nest stuff: http://www.bestpysanky.com/v/vspfiles/photos/NDS05210-1F-2.jpg I'll go step by step. You should open a Playground and play with this. var car: String = "" car = "Honda" car //is "Honda" var cars: [String] = [] cars = ["Honda", "VW", "Toyota"] cars[0] //is "Honda" cars[1] //is "VW" var sport: (String) = ("") //the () do nothing...yet sport = "Tennis" //Now let's make a tuple, a group of related data var datingCouple: (String, String) = ("", "") datingCouple = ("Philip", "Leela") datingCouple.0 //is "Philip" datingCouple.1 //is "Leela" //reassign datingCouple.0 = "Jack" datingCouple.1 = "Jill" datingCouple.0 //is "Jack" datingCouple.1 //is "Jill" //Let's add some descriptions the the variables: var marriedCouple: (husband: String, wife: String) = ("", "") marriedCouple = ("Tarzan", "Jane") marriedCouple.husband //is "Tarzan" marriedCouple.wife //is "Jane" //See how this works? Continued...
I guess a better way of rephrasing this is: When I load my Main view controller, it also runs the code in the 3 children view controllers. But that means the viewDidAppear in the children only runs once. Is there a way for the app to know which view controller the user is on so that when I scroll to a view controller, it will run the viewDidAppear in that viewController file?
 //You can mix data types var person: (name: String, age: Int, isStudent: Bool) = ("", 0, false) person.name = "Amy Wong" person.age = 22 person.isStudent = true //You can also use optionals var bicycle: (make: String, color: String, owner: String?) = ("", "", nil) bicycle.make = "Trek" bicycle.color = "Red" bicycle.owner = nil //You can also use arrays of data types var student: (name: String, weightInKg: Double, personalItems: [String]) = ("", 0, []) student.name = "Morty" student.weightInKg = 60.1 student.personalItems = ["Keepsake Robot", "Morty Jr.", "Tiny Rick"] student.personalItems[1] //is "Morty Jr." Continued...
 //Now you can make ARRAYS of TUPLES var students: [(name: String, weightInKg: Double, personalItems: [String])] = [] //empty array var newStudent: (name: String, weightInKg: Double, personalItems: [String]) = ("", 0, []) newStudent.name = "Morty" newStudent.weightInKg = 60.1 newStudent.personalItems = ["Keepsake Robot", "Morty Jr.", "Tiny Rick"] students.append(newStudent) //Insert Morty into the array of tuples newStudent = ("", 0, []) //Not necessary, but showing anyway newStudent.name = "Summer" newStudent.weightInKg = 55.4 newStudent.personalItems = ["Cell Phone", "Makeup", "Space Phone Grandpa gave her"] students.append(newStudent) //Insert Summer into the array of tuples students[0].name //Morty students[1].name //Summer students[1].personalItems[0] //Summer's cell phone fin edit: paging /u/DisagreeableMale
Oh sorry! Sent you an invite.
Well I'm not using any segues. The three ViewControllers are added by using this format of code three times: let vcMiddle = self.storyboard?.instantiateViewControllerWithIdentifier("vcMiddle") as UIViewController! var frameMiddle = vcMiddle.view.frame frameMiddle.origin.x = self.view.frame.size.width vcMiddle.view.frame = frameMiddle self.addChildViewController(vcMiddle) self.scrollView.addSubview(vcMiddle.view) vcMiddle.didMoveToParentViewController(self) I guess I just want to know is there a way for the app to know which view controller the user is on so that when I scroll to a view controller, it will run the viewDidAppear in that viewController file?
Sweet, thanks! I wasn't really looking at adding the amount of *free* memory, just the total amount. I guess I could add that feature on later when I'm a more experienced programmer. Thank's for your time!
They also offer a open gl version which has amazing performance!
I don't know if this is affecting your case specifically, but UIScrollView has always had issues with AutoLayout. For example, constraining a UIView left-to-left and right-to-right inside a UIScrollView almost never works - you have to use centerX-to-centerX and width-to-width instead. Try adjusting your constraints to different (but equivalent) constraints and see if it works. 
Could you show us what you are trying to do and what it looks like when things go wrong? I remember the initial size of the scroll view is initialised when the view first builds itself which is initially in the size of your storyboard. You need to refresh (*layoutIfNeeded* usually) your layouts after it loads for it to display correctly. There's a reason for this. Within the scrollview it still uses CGRect for positioning and initially it will take the CGRect value from your storyboard. The same problem applies when you're dealing with UITableViews and UICollectionViews. It's also the reason that self sizing cells are a bit less straight forward than you would expect. Also: the width of the UIView inside the scrollview should be "same width" (or height if it needs to scroll vertically!) as something outside of the scrollview. Then add another UIView inside it with the spacing, or alternatively, add the spacing outside of the scrollview.
What a delightfully pointless image.
Can't. Best you can do is define your own `didAppear` / `didDisappear` etc methods, and detect which ones to call in your scroll view delegate's `didScroll`. 
Thanks!
Just FYI: This year's Stanford course will start at the end of the month. The first videos will likely be uploaded a few weeks after.
That's great to know. Thanks! I'll probably keep banging on the old course, since fixing it is forcing me to learn things I wouldn't have otherwise. Totally looking forward to the new stuff, though.
I have a couple of questions with this. It looks like if I'm using Grand Central Dispatch, then according to the Queuing Tasks for Dispatch section, "Your application uses one (and only one) of the following three approaches to invoke blocks submitted to the main queue" I'm really new, but it seems if I have an @UIApplicationMain sitting at the top of AppDelegate, then I can't use GCD. Like I said, I'm new, so I have a lot to understand yet. 
Honestly, trying to duplicate Cocoa rather than forking off in their own direction (and to Hell with backward compatibility) is probably what kept GNUStep from being what it should have been.
For iPhones that don't have 6 and S in their name, there aren't many other options. The use of a UITabController takes up real estate on the screen, and developers and designers alike may want to utilize as much as possible
Do you have a link to the new course? Casual Googling fails to pull anything up...
It largely depends on the user story. There are layouts in my apps that would look incredibly shitting if there was a UITabBarController instead of a hamburger menu
How would I use this to create a schedule for tasks ? e.g. "Start a timer and when that timer hits 60 seconds, do a task, when it gets to 72 seconds, do another task"
Try setting a breakpoing in the line of the `var secondImage...` definition, it should break every time the value is set or read, then you can `print(secondImage)` to check the new value and check the stack to see where it's being set, maybe you'll find what's wrong this way.
Is this what you mean? 60.second.delay { doSomething() 12.second.delay { doSomethingElse() } } or am I misunderstanding 
I'm fairly certain you can run swift on any distro that has the correct version of clang + glibc. Ubuntu just spent the time to make it `apt-get`able. Check out the swift git repository and see if you can't build it from source. Good luck!
The problem is that it doesn't happen anymore like I said. As soon as I wrote new line of code (print), erased it, saved the file and compiled again it never was nil again, but thanks for a good idea. I could also maybe just declare didSet and print the value that way.
This is currently being worked on by myself and others in the group. We should have more news in the next month or so. 
By swift. Not by GNUstep. They declined to use GNUstep on their side. They want a purely swift foundation. This is not tenable or useful if you have an ObjC app you wish to port. 
Did I say anywhere in my post i supported using GNUstep? I think not.
I never said you did. I said the idea was rejected by the swift maintainers. I remember because I was part of that discussion. They want a pure swift implementation which is not a problem. What's missing in the Linux version of swift is the ObjC bridge. 
 &gt;There is a caveat, though – Ubuntu (14 &amp; 15) is currently the only *suported* Linux distro, where "supported" means there are tests running [in a CI environment](https://ci.swift.org), and any regressions are addressed quickly. "Supported" is the keyword here. The other thing to realize is that things are changing very fast, what is difficult today is likely to be easier tomorrow. &gt;There are other OS's where Swift (at least partially) *works* (FreeBSD, Android, Cygwin, Raspbian, to name a few) and active development work is being done, but don't have first-class support yet. Speaking of first class support, I don't think that will really happen until after Swift 3 as new initiatives stabilize. With the API changes it doesn't make sense to put a lot of effort into Swift 2 on Linux. 
Is there any long term plan to port GNUStep to Swift, in part or in full. Yes I know the whole thing would be a massive project, however if you have no bridging support it might make sense. 
Always welcome!
this is great. did you upload it to github?
All programming languages share similarities and almost all have the same core concepts. You have to learn these core concepts of programming before you can begin to master a language. Python is often recommended because it is very beginner friendly, powerful, and has lots of great support and documentation as well as a very active community. Swift is less mature than Python and rather more limited in its scope, relatively speaking. It would not be a good choice for a first language, in my opinion. Learn to program first -- with a language like Python or Ruby -- and come back to swift later. Once you understand how to make something in Python, figuring out how to make it in Swift will just be a case of figuring out where the syntax differs, but you'll be able to see the big picture, which is the most important step. 
There are no excuses for bad UX
that being said, the Hamburger menu isn't necessarily bad UX. Not if it fits with the user story and the research behind the human driven design
I agree that if learning to program in swift is the goal, then swift is what OP should start out with. Swift permits progressive learning so a person can start out with the basics and grow into the more advanced language features that swift has incorporated as he/she is ready to understand them. It might just be a bit of hyperbole saying that cocoa APIs are "decades" older than Python, though. Python has been around for around 25 years (1991). True, Cocoa comes from NextStep, which traces back to the 1980's, so maybe a single decade could be argued. EDIT: I also agree that the tooling around swift is already better than what Python has around it. 
&gt; func webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction: WKNavigationAction, decisionHandler: (WKNavigationActionPolicy) -&gt; Void) { &gt; if let url = navigationAction.request.URL, path = url.path { &gt; if path == "/donate" { &gt; decisionHandler(.Cancel) &gt; UIApplication.sharedApplication().openURL(url) &gt; return &gt; } &gt; } &gt; decisionHandler(.Allow) &gt; } Awesome! Where do I past that at?
Does this go in my AppDelegate.swift file?
[Now it's on GitHub.](https://github.com/ZombieWonderland/Trax/blob/master/GPX.swift)
Hi, I’m the author. I’ve been developing a new SDK called Blurrr for 2D games. I posted a few weeks ago with a similar video showing SteamOS (Linux), OS X, iOS, and Raspberry Pi 2. https://www.reddit.com/r/swift/comments/46i6rc/teaser_showing_crossplatform_workflow_for_2d/ Thanks to the SwiftAndroid branch, I now have it working there too, so I thought you might like to see a demo of Swift running on Android. Under the hood, SDL provides the common platform layer. The build system is built on top of CMake. I have been adding Swift support to CMake. Even if you aren’t interested in my SDK, I thought people might be interested in seeing how much is possible with Swift today from a cross-platform perspective. I’m happy to answer any questions. Thanks for viewing! 
The biggest issue is that the community, tutorials, and documentation surrounding swift frankly pale in comparison to Python, and that makes a BIG difference imo. Cocoa APIs are not platform independent. Python is. Also, once you start getting into app development you are in WAY over your head as a total newbie programmer imo. What happens when they have to bootstrap some objective C in Swift? That shit is confusing as balls to new folks. A new programmer needs to learn the basics of programming before becoming tied to a specific language. Swift isn't a great choice, imo, because of its lack of maturity as a stand alone language and precisely because it brings with it the baggage of Cocoa, AppKit, etc. It's too much too soon for a brand new programmer. 
Just type the class name out in Xcode and command click to see its methods and pseudo-documentation as comments.
I wish i were a better programmer. I'd write a compiler that compiled Smalltalk-80 syntax into Objective-C. Since all Smalltalk syntax can be expressed as Objective-C syntax, it then would become a matter of implementing the library, which could be mostly a thin wrapper around the Foundation and Application Kits. 
I call bullshit. Your post history shows otherwise.
I really am. If you want to help I can upload the code so you can see. 
Thanks for this, I've been following SwiftAndroid daily and needed an example besides "Hello World". :)
Python dev here. I'd recommend what these other guys are saying and just start straight out with Swift. Apple has some good and free documentation on the language foundations. Python has gotten more complex as the versions increase and Swift is a more newer style of doing things. Plus there is a war between Python 2.6 and Python 3.x developers you don't even want to get in to. Many courses teach Python 2.6 and it will be unsupported in a few years.
I've used BWWalkThrough before and it's super simple: https://github.com/ariok/BWWalkthrough
Beautiful! Nice job!!!
Right now, the work has been on 2D games. However, if you take a look at the BlurrrGenProj GUI application in the video, that is actually built with Blurrr with the use of another small library called IUP, which does cross-platform native UI. I think it has a lot of potential because it was written to be native, extendible, and designed for building language bindings to it. And I actually think its design already has a good match up to "Protocol Oriented Design" which makes it potentially very Swift friendly. It's current downside is that it doesn't support all platforms (yet)...I'm actually starting to implement some of it for my own use. But it's going to be some effort. But if there is enough interest from people with money behind it to help fund it, I could see this becoming a reality. 
This seems like it's close to solving it. There's no UIView inside the Scroll View, something like this http://shrikar.com/ios-swift-tutorial-uipageviewcontroller-as-user-onboarding-tool/. When I make the story board an iPhone 6 and run the app on a 6 simulator it works fine, but if the storyboard uses an iPhone 5 the scroll view is messed up and not lined up with the photos. I tired running scrollView.layoutIfNeeded() and printed out the .frame to see if it changed and it does change, but it is still not the same frame size as when the storyboard is an iPhone 6.
Ok? I was responding to Princekolt's claim that it was unbeatable.
I tried this but sill no luck. I posted some screenshots maybe they'll give you some idea. http://stackoverflow.com/questions/35950599/uiscrollview-constraints-based-off-storyboard And this is the exact tutorial I used: https://www.raywenderlich.com/76436/use-uiscrollview-scroll-zoom-content-swift
Looks great, thanks for sharing
SENT THANK YOU!!!!!!!!!!!
ugh never do that, child controllers when done right will automatically viewWillAppear and did, etc
If you read the description of the problem, that's impossible in this case. All of the controllers have already been added to a parent scroll view. The only way to get normal viewDidAppear etc would be to use the same code as my example but instead add/remove them from the superview at the determined times.
Correct. 
Can I get in on this ?
Do you think it is a good idea to use Perfect for production backend?
Not yet. Swift on Linux is miles away from production ready
A lot. Foundation is mostly un-ported so far. There's instability / crashes. Grand Central Dispatch or other threading libraries are in very premature states. All around, nothing is stable, complete, or mature.
It's best to convert it to an NSDate object. func getDate(dateString: String) -&gt; NSDate? { let dateFormatter: NSDateFormatter = NSDateFormatter() dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss" //Getting this right is very important! guard let date = dateFormatter.dateFromString("\(dateString)") else { //handle error return nil } return date } let date: NSDate? = getDate("2016-03-13T05:04:08") Ideally, you'll want your date string ("2016-03-13T05:04:08") to include a time zone, too. If you do, you will have to update the the .dateFormat string above.
*NSCalendar*: This is the brain that does all of your date and calendar operations. It knows all about time zone, DST, days, months, years, eras, leap years, etc., and will do date arithmetic correctly. Note that the user may have their system calendar set to something that you don't expect (The Hebrew Calendar, The Japanese Calendar, etc.) so you'll want to make sure you're using the Gregorian calendar in your code. *NSDate*: This represents a mere moment in time as a raw number. It has no calendar or time zone information. Use NSCalendar and/or NSDateFormatter to convert an NSDate to something human readable. *NSDateComponents*: The opposite of NSDate, It contains separate fields for Day, Month, Year, Hour, Second, etc. NSCalendar will generate these for you. These are also used for doing date arithmetic. (e.g., adding 1 month to a date). *NSTimeZone*: Represents a time zone. *NSLocale*: Represents a locale (for date formatting, month names, etc.) *NSDateFormatter*: Converts a string to an NSDate, and vice versa. You'll notice that is has NSCalendar, NSTimeZone, and NSLocale properties. So, you use an NSDateFormatter with a UTC time zone to read your time string and convert it to an NSDate. Then you use a NSCalendar with a local time zone to convert the NSDate into NSDateComponents (day, month, year, hour, minute, etc.) 
is this a proper way to take a UTC string and convert it into a string that reflects the local time? // create dateFormatter with UTC time format let dateFormatter = NSDateFormatter() dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss" dateFormatter.timeZone = NSTimeZone(name: "UTC") let date = dateFormatter.dateFromString(string) // change to a readable time format and change to local time zone dateFormatter.timeZone = NSTimeZone.localTimeZone() return dateFormatter.stringFromDate(date!) Edit: Furthermore would it make sense to apply the singleton pattern to this problem, considering you said that I need to make sure the calendar is Gregorian.
So, since you're using Parse (and their SDK I'm assuming?), because the default account type is buyer it sounds like, you can just add fields to _User until it meets your requirements. Then, simply create another class Seller with all the information you need for a seller's account, and have the _User class point to it to sort of extend _User class So for the _User instance, if the pointer to Seller doesn't exist, that means they don't have a seller account. Hope this makes sense.
Since I'm not quite sure how you're trying to access the calendars and their events, maybe you could compare your own code against a small sample I made. First, I created a calendar in the Calendar app named "TestCalendar" and created a few dummy events for the current day to test with. Let me know if you have any success! import UIKit import EventKit class ViewController: UIViewController { var eventStore = EKEventStore() var myCalendar: EKCalendar? override func viewDidLoad() { super.viewDidLoad() eventStore.requestAccessToEntityType(.Event, completion: { (granted: Bool, NSError) -&gt; Void in if granted { let calendars = self.eventStore.calendarsForEntityType(.Event) for calendar in calendars { print("Title: \(calendar.title)") if calendar.title == "TestCalendar" { self.myCalendar = calendar as EKCalendar break } } if let calendar = self.myCalendar { let predicate = self.eventStore.predicateForEventsWithStartDate(NSDate(), endDate: NSDate(), calendars: [calendar]) let events = self.eventStore.eventsMatchingPredicate(predicate) for event in events { print(event.title) } } } }) } }
I think it's nice, but I'm not sure if it's worth the extra complexity. Although you're essentially currying the setter from the second argument onwards, so it might have an elegant implementation.
I'm not sure about the added complexity for adding getters/setters to functions, either, because they would only work on functions that return something. However, adding this functionality to computed variables barely adds any complexity at all, in my opinion.
Well, it gets even better then, since subscripts aren't limited to one parameter: subscript (imageForState: UIControlState, container: UIAppearance.Type) -&gt; UIImage { ... } myUIButton[.Selected, container: UINavigationBar.self] Overloaded parameter names are also possible: subscript (alternateImage state: UIControlState) -&gt; UIImage { ... } myUIButton[alternateImage: .Selected] 
I don't know why you had to write that, there was no need; it was a yes or no question. I've been using playground, i wrote my own block of code below. If you took the time to read it, you'd see that I included that line of code and that's why I asked the question. It works on playground, but that doesn't necessarily mean it's the best way to accomplish the task. Furthermore, your code is only iOS 9 applicable, I still need to make my app work on iOS8
https://www.raywenderlich.com/93276/implementing-tesseract-ocr-ios Ray's tutorial for Tesseract OCR is updated for Swift 2.0!
Yeah I guess multiple lines would probably make that nicer. Good stuff
I just pushed it could you check :) .
Thank you for your thoughts. These little things really help me improve. I've incorporated all your suggestions.
Perhaps change from if let theClosure = closure { theClosure(self) } to closure?(self) 
perhaps remove `let` from function arguments. change from func add(let string : NSString , let closure : ((SmartAttributedString)-&gt;())? = nil)-&gt;SmartAttributedString func color(let color : UIColor,range : NSRange? = nil)-&gt;SmartAttributedString func backgroundColor(let color : UIColor, range : NSRange? = nil)-&gt;SmartAttributedString func font(let font : UIFont,range : NSRange? = nil)-&gt;SmartAttributedString change to func add(string: String , closure: (SmartAttributedString-&gt;())? = nil) -&gt; SmartAttributedString func color(color: UIColor, range: NSRange? = nil) -&gt; SmartAttributedString func backgroundColor(color: UIColor, range: NSRange? = nil) -&gt; SmartAttributedString func font(font: UIFont, range: NSRange? = nil) -&gt; SmartAttributedString 
Looks great Perhaps remove semicolons, eg. func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int { return self.configurator.numberOfSectionsInTableView(tableView); }
I also find myself looking on the internet for solutions. I'm pretty sure a lot of devs do that. I learned swift by doing some of tutorials, and then build a few apps of my own. Building apps gives you lots of experience. More than doing a tutorial. I would recommend to build some apps and use tutorials to implement stuff in your app. Thats what I did, and I am now quite experienced in swift. Some good sources to learn are Ray Wenderlich, Vea software, Archetapp.
They are not required so shouldn't be used, that seems to be the consensus (except when using multiple statements on the same line)
There is never a good reason as the icon implies nothing to the user. 
I'd start by structuring the code a little better. Make a bunch of smaller functions that solve one subproblem at a time, instead of one huge thing. For example, one function that reads the text file, one function that processes a line, a function that processes a word, etc. Once you've done that, I'd profile the App using Instruments (in Xcode, select Product/Profile, and then select the Time Profiler in Instruments). Then do whatever you need to do to trigger your code. Instruments then gives you a nice breakdown of where the CPU time went. If you are lucky, only one of your functions (or relatively few lines of your code) take a lot of time - these are great candidates for optimisation. Maybe you can figure out something yourself, or you can come back and tell us what code consumes the most CPU time; it'll be easier to help you out then.
Can you use variable.map({})?
i could try it out
Late response (probably meaningless): Yep. Your example you had below looks correct. They're in objective-c, but there are some useful functions here: https://github.com/erica/NSDate-Extensions for common things you might do with dates. (doesn't help you with this, but just in general)
Interesting. Still seems pretty verbose, but maybe you need that much code in a statically typed language? Compare with this python library I'm an author of: https://github.com/trioptima/tri.table/
one thing you could try to do is disable userInteraction for both the label and image view. Example: imageView.userInteractionEnabled = false 
Whew. There's a lot here to review. I'd like to address a few things before answering your question. &gt; `class House: NSObject {` Unless you want certain features of NSObject (such as KVO or ObjC interop concerns), there's no reason to inherit from NSObject. Arguably, you *don't* want to do that since it imposes ObjC mechanics for that object. Also, I'd recommend considering using `struct` instead of `class` for pure data objects. &gt; `var housePerson = []` You don't need to repeat "house" in the properties. It's redundant. Also, consider making these properties constant by using `let` declarations. Mutability is a great thing, but it also makes certain types of problems in the code much harder to reason about. Finally, you don't define a type for `housePerson`. I'm assuming that you mean `housePerson: [String]` since you're just assigning names below. &gt; `class HouseModel {` The "Model" terminology is commonly used to indicate data objects. Your "House" would be a "HouseModel" if you're using those terms. It's used incorrectly here. &gt; `func getHouse() -&gt; [House] {` This should probably be a static function. There's no need to allocate an instance of an object in order to use this function. &gt; `var house = [House()]` There's no need to pre-allocate this variable since you're just adding one house. You could readily just `return [house1]` at the bottom of the function. Also, use the plural form ("houses" in this instance) for collections of objects. All this said, I'm assuming `getHouse` might be better as `getHouses` to indicate that more than one house will be returned or the return type changed to `House` to guarantee that only one will be returned. &gt; `class Person { ... }` Same concerns as the House object. &gt; `class PersonModel { ... }` Same concerns as the HouseModel object. *** Okay, code review done. To address your concern: &gt; Is there a way i can link these 2 array together rather than being separate arrays? Absolutely. Here are a couple of ideas. Change the House object so that the occupants of the house are Person objects. struct House { let occupants: [Person] } struct Person { let name: String } let people = [Person(name: "Tom"), Person(name: "Dick"), Person(name: "Jane")] let home = House(occupants: people) print(home.occupants) [Example in IBM's Swift Sandbox](http://swiftlang.ng.bluemix.net/#/repl/1f5af4229d1a7b18e0f430adb27ca419bdace235c61ab040c40c48f76fb5ee79). Also, you could associate them through the use of a containing object: struct House { let address: String } struct Person { let name: String } struct Home { let house: House let people: [Person] } let people = [Person(name: "Tom"), Person(name: "Dick"), Person(name: "Jane")] let house = House(address: "123 Elm St.") let home = Home(house: house, people: people) print(home) [Sandbox](http://swiftlang.ng.bluemix.net/#/repl/0eca04f2c9beb0199e01932e96da3ece8e6e21193eb197f9d819bb3f86f22b9e). There are several other potential ways of associating objects, but these two examples are quite simple and easy to use.
This reply is golden, thanks so much. Exactly what I was looking for!
I like your second idea: computed properties with arguments. I also think its' cleaner then using subscript overload. Go ahead and propose it. Thumbs up from me. var imageForState(state: UIControlState): UIImage { get { ... } set { ... } } 
Thats good to know. However I personally think computed properties with arguments is cleaner and easier to understand then subscript overloading. IMHO it just seems more swift like and less hacky.
Yes! You may not need to learn the concepts immediately but you don't want to put it off for long. Personally I'd suggest doing the whole book to get a good overview before diving to deeply into my own app. Further produce a few mini apps that aren't part of your overall developmental goals. Mini apps are a good way to work out specific concepts in your head and provide insight when it comes time to right your first real app. At this point I wouldn't suggest writing your first real app with this little experience under your belt. You want to be able to design an app "thinking in Swift" and that is very difficult to do with any non trivial app and no experience. Besides all of that understand that Swift is still under rapid development, when Swift 3 comes out expect to spend more hours learning new stuff, possibly learning to undo some of what you did in Swift 2. 
This somewhat applies to the Mac side also. Apple expects to refactor much of SWIFT IN VERSION 3. Swiftifying the API interfaces is a major thing and frankly may be why Foundation on Linux is so undone. There is little sense in completing Swift 2 if the APIs are expected to change dramatically in 3. 
Thanks, but I meant processing something that is within a region drawn on the view. Sort of like the Apple Wallet app
Read Apple's guide in it's entirety once, and then start learning iOS development. You should re-read when you encounter trouble - I found myself re-reading parts of it often until 1 year into Swift. Takes a while to internalize everything. 
You could try Syncano - newer platform, but good similarity to Parse - [Looking for a Parse alternative? Here's how Syncano compares](https://www.syncano.io/blog/looking-for-a-parse-alternative/)
(Formatting: use backticks (top left under your escape key on a US keyboard)) You are adding the *contents of* your two arrays to the persons array. You are not adding the arrays themselves to that array: The content of `persons` starts out as [] (empty). The contents of `person1` is [Matt, Paul]. When you append the contents of `person1`, the contents of `persons` becomes [Matt, Paul]. Then you create and append the contents of `person2` and the contents of `persons` is [Matt, Paul, Steve, Tom]. If you want an array of arrays, you must declare and append like so: var persons = [[Person]]() // This is an array of Person arrays let person1 = [Person(name: "Matt", age: 27), Person(name: "Paul", age: 22)] persons.append(person1) let person2 = [Person(name: "Steve", age: 45), Person(name: "Tom", age: 40)] persons.append(person2)` At the end of that, the contents of persons is [ [Matt, Paul], [Steve, Tom] ] (it is an array with two arrays inside it).
Ahh that's good! At first I was always concerned about bad code and if its the right way to do things. Although, I ended up thinking too hard and not getting enough done. Now though I just go ahead and do what I can, hence why I was using classes over structs earlier but after your help as well as from a couple others I've learnt whats right. I am hugely grateful! :-) Here i'll try and break down what I'm trying to do so you can hopefully see what I'm aiming for. struct House { var address:String var people:[Person] } struct Person { var name:String var age:Int } var houses = [House]() var persons = [[Person]]() let person1 = [Person(name: "Matt", age: 27), Person(name: "Paul", age: 22)] persons.appendContentsOf([person1]) let person2 = [Person(name: "Steve", age: 45), Person(name: "Tom", age: 40)] persons.appendContentsOf([person2]) let house1 = House(address: "123 Lime st.", people: persons[1]) house1.people houses.append(house1) scene A View controller/tableview cell.address.text = houses[indexPath.row].address scene B View controller/tableview var selectedHouse:House? let home = self.selectedHouse cell.name.text = home?.people[indexPath.row].name cell.age.text = home?.people[indexPath.row].age Something like that. Not 100% sure of it yet as i have yet to implement it but hopefully you can see what I'm trying to do here :) I've said it already but i'll say it again because you've been great, thanks a lot for your help! :-)
…has he even heard the *word* "refactoring"? Did he used to program in Visual Basic?
What? You are surprised by "brogrammer" ineptitude? Say it ain't so!!
You should always apply much more scrutiny to someone who says they are senior level. It's a large claim to make IMO
Recently got hired to help a company develop their iOS app. (Most of it was objective-c++ and webviews, which was fine). But dayum, their main viewcontroller was 1800 lines of really badly structured spaghetti code. And The guy who wrote it was their senior developer as well, with several years of experience. First thing I did was structure it and made it follow code conventions. Don't think I have ever had a co-worker more annoyed and irritated at refactored code. 
&gt; Could you highlight a specific piece that you find verbose? I can't really find anything that isn't :P I'm trying to figure out how to show a tri.table config that is roughly equivalent, but the entire feature of sections doesn't exist there so a huge chunk of your example just isn't transferrable :( A table with just the persons in tri.table would look something like this for comparison: class PersonTable(Table): name = Column(cell__value=lambda row, **_: '%s %s' % (row.firstName, row.lastName)) age = Column(cell__format=lambda value: 'Age %s' % value) I guess.. I don't see why a row is just a single cell though, this seems more rational to me: class PersonTable(Table): firstName = Column() lastName = Column() age = Column() I don't feel comfortable enough with swift or the libraries to offer much constructive feedback. I do wonder why buildReuseIdentifier can't be implemented by default with just the name of the class though? I do like the chainable cellReuseId() function a lot more. That makes the BasicCell example pretty much collapse to one line. But then it seems like... why is the less powerful and more cumbersome example the one at the top? Another thing that I don't get is why in TableViewConfigurator in the readme you have all those func tableView(tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return self.configurator.tableView(tableView, titleForFooterInSection: section); } etc.. can't you supply a default (base class?) where you get those delegation calls and then you can override the ones you want?
So... if the content size (size of all the things inside the scrollview) is smaller in height or width than the device screen, the scrollview will not scroll at all - this is an intended effect. The other guy was right about space being added to your scrollview inset because of the view's constraint to the top layout guide. The top layout guide will shift depending on whether or not a navigation bar is present, causing extra space to form in your scrollview. Instead of adding the constraint in the way you are doing now, dragging from the scrollview to its parent view (shown in your gif); instead try clicking on the scrollview once, and then clicking the add new constraints button on the bottom of the window. (an example of that little popover can be seen here in this image I just googled: http://2.bp.blogspot.com/-ov6HC_jIWtM/VYfYL5RRuuI/AAAAAAAAJtA/vYziJBb3ndo/s1600/width_constraint.tiff) Continuing on, to add the constraint directly to the view and not it's layout guide, you should be able to select the drop down box seen at the top of the popover in the image I linked (where 514 is written) and change the constraint to reference the view instead of layout guide. Then, you'll have to click the red little line pointing to that drop down if it's not already selected. Make sure you remove any other existing references to the top layout guide. Hope that makes sense. All in all though, scrollviews are weird and a little unintuitive to work with sometimes. When it doesn't make sense and you feel like you've tried everything, go read another tutorial and try to start over building that view -&gt; make sure to test bit by bit as you go along to make sure you notice it when something unintended occurs. Edit: BTW *AutomaticallyAdjustsScrollViewInsets = false should keep it from adding any extra space when constraining to top layout guide. But If it's not scrolling any more when you add that, it probably just means that your content size is too short in height for scrolling to be enabled.
Ok thank you. 
Did you tell them... Keep in mind that Swift is very young, and many experienced iOS developers held off on learning it until the API was more stable. `guard` was only introduced a few months ago, and some of the optional syntax has been very fluid.
Can someone explain to me why that logic doesn't stand? Why would you add another method call to the stack if that is the only place it will ever be used? 
Right now SwiftAndroid only has armv7. But it is likely more will come. Somebody already did the work for Swift for armv6 for Raspberry Pi and probably armv6 in general. I think that backend is the vanilla armel-linux-gnueabi. But for Blurrr, I actually just disabled armv5 support for the other languages (C, Lua, JavaScript). (Note that Android's armv6 is actually armv5 ABI). Since this is doing game/multimedia stuff, performance matters and armv5 is pretty much non-existent now. The industry is transitioning to armv8 from armv7. And for context there are probably more x86 Android devices in use now than armv6. 
&gt; Windows XP You've got much bigger problems than not being able to run Xcode. There are plenty of programs out there that can give you syntax highlighting for Swift (Atom and Sublime Text to name two of them), but none that will be able to perform autocompletion or compilation. At least, not yet.
It's just a good general-purpose text editor. Although, interestingly enough, both it and swiftstub.com are based on the [Ace editor](https://ace.c9.io). Atom is pretty extensible, but until Swift itself gets Windows support, there's not much it could offer on that platform apart from syntax highlighting.
I see. I do know that c and c++ offline compiler apps already exist, so I'd imagine that making one for swift shouldn't be that tough, but then again I'm still new to coding so something like that could be extremely difficult for all I know. Thanks for the guidance anyways!
According to your comment history: &gt; I'm a junior dev with about 7~8 months of experience. I suggest you withhold being judgmental until you have at least a few years of working on big projects under your belt. 200-300 is NOTHING in a big app. 700-800 is not ideal, but it happens. Just wait until you have a program where a single class has 10k lines of spaghetti code that you're expected to maintain. Complaining won't get you very far, but making the best of a bad situation will. 
Sometimes you *do* know. 
Yup, I actually started using RoR and moved to Sinatra over time. Now most of my projects start with Sinatra and scale up, instead of RoR and scale down. I'm waiting to make the leap to doing Swift instead of Ruby for my web apps. Nothing against Ruby (I love it) or Sinatra, I just like to try out new things =)
What I've learned through my last couple jobs is that the title and the compensation is very often mismatched with a developers performance. Some other things I've learned: If work that your senior dev does is slowing down your personal responsibilities, just make sure that it gets flagged in a non-accusatory way to alleviate your culpability. E.g. at stand up you might say "I started work on feature X but as I worked I realized the complexity of this class was becoming unruly and required a refactor". Also I don't know if you get to perform PRs for your senior dev, but that's a great opportunity to make suggestions. I usually tip-toe with my language here because bad senior developers are likely to be sensitive to feedback from devs in lower positions. E.g. "It might be worth considering putting X into its own class so...." vs "This should be in its own class" -- best case scenario, your senior dev takes your advice. Worst case, you've at least relieved yourself of some blame when you're the one that has to go in a month later and your task takes you an extra day because you have to reason through and refactor a nonsensical codebase (sorry I think my cynicism is showing). Ultimately, just focus on yourself and how you can add value to the project. It was (is still sometimes) hard when you feel like you bring twice as much value but are in a lesser position, but that's not something you can control, and resentment is like drinking poison and hoping the other person dies. In the end I believe you'll be recognized if you are truly bringing value to your team- and if not, you'll at least you'll have learned a lot and you can carry that with you to your next job. -- oh and with the specific problem of him throwing bangs everywhere, you should suggest to your team to start using a linter. We use swiftlint and disallow force casts and unwraps
Can anybody explain how they detect touch surface area? I was under the impression that wasn't possible in iOS.
It's easier to test a small function. It's "easier" for a compiler to optimise. It's more maintainable. It opens up the opportunity for re-use. It's easier to refactor the method that it was going to reside in. Maybe that one chunk of code can be used elsewhere (other project) Maybe, the stack overhead is minimal. But s candidate for subsequent optimisation. When debugging that large method, you can quickly determine if an issue is part of that one small chunk of code, if not your focus is on the larger method. 
&gt;But hopefully I won't have cut out food from my diet for a week just to buy a four-digit priced Mac. My main development machine is a Mac Mini. You can get one that can run Xcode [new for $500](http://www.apple.com/shop/buy-mac/mac-mini) and used for even less. Of course, you'll need a monitor, keyboard, and mouse. But, I'm sure you can get those if you've been in IT long enough. You can get a monitor for like $20 at Goodwill. &gt;...To release apps? Are you sure about this? I don't think so. Yes, I'm sure. You can develop and publish to your local test device without a license, but to publish to TestFlight and the App Store, you need one. [From Apple](https://developer.apple.com/programs/how-it-works/): &gt;If you’re new to development on Apple Platforms, you can get started with our tools and resources for free. If you’re ready to build more advanced capabilities and distribute your apps on the App Store, enroll in the Apple Developer Program. The cost is 99 USD per membership year. My advice: Focus on trying to do things the right way by getting a decent mac. It doesn't need to be a Mac Pro or MacBook Pro. Any decent Mac will do. The worst case you'll run into is long compile times if you have a project with a lot going on. You are going to run into enough roadblocks as you make your apps that you don't need the added variable of a ported, cracked version of Xcode on Windows adding drama.
A tad disappointed - I was hoping this wouldn't be regex-based so that I could study and learn from the source. However, whatever gets the job done well is good enough to use :)
Just to clarify, Xcode on Windows doesn't exist (that I've heard of). But CQH is on point — you really will need a Mac to make an iOS app. And to publish on the App Store, you will need a paid developer account. You can get a free one to do development and testing, and then pay for a full account at any time. If you have any questions about development or Xcode, feel free to hit me up :)
Breaking it into smaller parts improves readablity. It's very apparent what these 20 lines are doing when given a name and moved out of the 1800 lines. 
Just to give a counterpoint. I strongly prefer long functions for reasons similar to what John Carmack describes here http://number-none.com/blow/john_carmack_on_inlined_code.html.
Hey @hundley10. So... UITouch, the class that handles touches on iOS, contains a majorRadius value. In the docs, Apple says majorRadius is an "approximation of the size" of the touch. More details on: https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITouch_Class/#//apple_ref/occ/instp/UITouch/majorRadius
So, they each take on different business techniques, sure. Apple's technique involves making it troublesome to switch to a competitor's products (read: Apple Ecosystem Lock). &gt;I think you don't realize that Apple is primarily in the business of selling hardware. No, I do, my comment was just pointing out how unfortunate that can be from a consumer's point of view. Not saying that it should be stopped, or is unwarranted, because dominating two other companies doesn't happen on accident, so obviously they're doing something right. &gt;You have a lot to learn about this game. Couldn't agree more. &gt;BTW, you know you want a Mac. Stop fighting it and just work and save and get one. *defeated walk to the bank*
[JetBrains CLion](https://www.jetbrains.com/clion/) with their Early Access Swift plugin on Linux. Kind of bleeding edge, but it does work; I'm using it myself. There is unlikely to be a viable option for Swift on Windows in the foreseeable future. Perhaps someone [will make it work with cygwin](https://github.com/tinysun212/swift-cygwin) but they're not going to have an easy ride. Edit: just saw elsewhere in the thread that you want to make an iOS App. This is an entirely different ball game to just compiling Swift (Swift != iOS) and frankly even the most cursory of searches online would have told you the same thing: iOS App Development is, practically speaking, IMPOSSIBLE unless you are running OS-X. Honestly, see the number of people who asked this same question over and over, you're not going to get a different answer just because you really want it :-) If you are lucky with your PC's hardware configuration, you may be able to run OS-X, in which case, use Xcode - search Hackintosh.
This is awesome, thanks so much!
This, methods should be named with exactly what it does, showMenu shouldn't parse JSON then decide which menu to open with a 6 case switch, it should only show a menu ...
This one rant sure made it hard to find today's six other posts. /s I'll take anything that spurs some interesting discussion here at this point. 
"senior"
I think the important takeaway from that article (besides functional programming lol) was finding a balance. There are obviously issues specific to game development he goes over. Just like aerospace is special, every application is special to some degree. He talks about removing functions without removing code duplication: &gt; In almost all cases, code duplication is a greater evil than whatever second order problems arise from functions being called in different circumstances, so I would rarely advocate duplicating code to avoid a function, but in a lot of cases you can still avoid the function by flagging an operation to be performed at the properly controlled time. For instance, having one check in the player think code for health &lt;= 0 &amp;&amp; !killed is almost certain to spawn less bugs than having KillPlayer() called in 20 different places. Which makes sense but would be the completely worst way to, say, handle rendering of asynchronously-downloaded data to the DOM in a web app. In situations like that, it makes far more sense to call render(data) and pass it the data as soon as you get the it. Instead of sitting there in a loop, either polling repeatedly for some kind of "downloadComplete" flag and grabbing the data from some global source or literally polling to see if this global data store is or is not null, we can encapsulate the data, render it as soon as possible, and even make render multiple sets of data at the same time if they happen to download at the same time (async, remember?). If we just polled for data != null &amp;&amp; downloaded like Karmac describes, we'd have to make sure data only contains one set of data at a time, which would require either queuing download requests until the previous one downloads before sending them, or worse, requesting the data asynchronously then storing it somewhere and queuing it to render. EDIT: I know he does specifically say sequential in the article but its worth reiterating because everything said in this comment thread, especially your comment, breaks down when asynchronous jobs are needed.
700-800 line methods are too much in pretty much any language. Hell that's 4 times as much as a code smell for the line count of a *class* for me....
We're talking about inner loops that need to be performed in x cycles before the next frame needs to be rendered. I would unroll loops on a C64 if it meant shaving off a few JMPs. I don't think anybody in their right mind would call that a good practice for business code.
I kinda like the fact that it's a slow-moving sub. 
I started learning python, then switched to Java to learn OOP fundamentals [here](http://mooc.fi/english.html). From there, once I thought I had a good base I started tinkering with [hacking with swift](https://www.hackingwithswift.com/). You just have to keep playing around. If you ever get tripped up, stack overflow is your friend. You just have to try to build something... you can follow [this](http://cocoascientist.com/luna-displaying-the-moon-phase.html) to build a simple lunar calendar. 
Thanks for the comments. Some of your confusion is indeed because of the specifics of UITableView. It's not really a "table" in the standard sense, because there's only one column. More of a list really. You make a good suggestion in terms of buildReuseIdentifier(). It would be simpler to just have a default implementation that did something useful. I included all the delegation methods in the readme, because at some point the implementor is responsible for satisfying that contract. It may we worth some thought, though, around simplifying that piece. In particular, swift extensions may offer a way forward.
I've been pretty fine developing on several years old Mac Minis. Just getting a mac saves you a lot of hassle and doesn't need to cost you a lot. Buy a used Mac Mini and just attach the mouse, keyboard and screen you already god.
Man, somehow I must have missed that. Thanks!
Can I ask a couple well meaning questions? For starters, why MongoDB? I'm certainly not an active member of the non-relational database field, but [everything I've been hearing about Mongo](https://www.reddit.com/r/programming/search?q=MongoDB&amp;restrict_sr=on) is that it was a fad that's on its way out... Is that not the case? &gt; We also wrote our own BSON parser for this, because we didn't want to depend on a C BSON library Why not? That is, if there's an established implementation that's stable and performant, is there a reason that it being written in C makes it less desirable of a dependency?
They are build up from the ground up with modern concepts and data structures. Thats why they are very fast and easily scalable. SQL is still good for accounting, which requires reporting. But I haven't seen anything else that Mongo cant do. NoSQL databases are built generally for specific use cases and in many modern applications there is usually a mix of both transactional and non-transactional databases. A good example on NoSQL for specific use cases is Neo4j. It is very easy to build a social network with it because the database is just a graph. You can build any application with any database but sometimes choosing the right one will be much cost effective. 
That I can get behind!
Making helper functions often serves as a form of commenting for me. Instead of writing a couple lines to parse a token out of a string, I'll toss that in a function called "grabTokenFromResponse(desiredToken: String, inString: String)" and now that code has basically commented itself. I am not concerned with over-coding (making a function I'll only use once) if it takes only trivially more time to make the function.
That's also quite a hassle when subclassing NSObject still, because you need to give all the non optional properties a value before calling super.init() Hopefully they'll do something about that once they get around to redoing the init() stuff. 
I really like the type inference and ability to use new complex types right in the route. So much boilerplate code saved with a single feature.
So I thought I'd give a from-scratch non-optimized implementation a try, cause it looks simple enough. Takes about 1.7sec to complete on my MBP with the dictionary that /u/masklinn posted (has ~130k entries), so maybe that's fast enough? Anyhow, here's the implementation, try it yourself. struct Phoneme { let value: String } struct Word { let name: String let phonemes: [Phoneme] init?(line: String) { let components = line.componentsSeparatedByString(" ") guard components.count == 2 else { return nil } name = components[0] phonemes = components[1].componentsSeparatedByString(" ").map { Phoneme(value: $0) } } } let start = NSDate() let stringData = try! String(contentsOfFile: /*path to the dictionary file*/, encoding: NSASCIIStringEncoding) let lines = stringData.componentsSeparatedByString("\n").filter { !$0.hasPrefix(";;;") &amp;&amp; !$0.isEmpty } let results = lines.flatMap { Word(line: $0) } print("Parsed \(results.count) entries in \(NSDate().timeIntervalSince1970 - start.timeIntervalSince1970) seconds.")
I applaud the effort, but as the author of one the [alternative MongoDB libraries](https://github.com/danappelxx/swiftmongodb) I don't really understand the point of reimplementing the functionality the mongo-c and libbson in Swift. If you take a look at some of the examples in my readme, the API is just as "swifty" as a native implementation (with the exception of the neat query builder that you have), but I bet it was a lot easier to make and is likely going to have less bugs (building on the shoulders of giants, etc.).
If you enjoy Hacking with Swift, you might be interested in the new book I'm working on: Pro Swift. It's available with a pre-order discount right now, so you get the book and accompanying videos for $20. [Click here for more information](https://gum.co/proswift). Thanks for your support!
Maybe make it chop off unneeded decimals. For example when I do 5+4 I get 9.0. Instead, make it so it just says "9" especially since the calculator doesn't support typing in decimals (which may be another good thing to implement). Also maybe try your hand at some UI design. Try doing a color scheme like the iPhone calculator by making the operators a different color than the numbers so they are easier to differentiate. Other than that, looks good! keep it up!
Thanks! And good ideas, too. [I made the updates.](http://i.imgur.com/iJ5Cg4z.gif)
Ah yea, that can be annoying. I've generally been doing something like class MyVC : UIViewController { let myButton = UIButton() //instead of //let myButton : UIButton .... which avoids that problem. It's not perfect(you can't use one member var in another for example) but it works well for the the majority of my usage. 
Thanks for those clarifications. 
Actually it is the other way around. The only thing that mongo has it hypeca view years back. 
&gt; Actually it is the other way around. What is? I kind of wrote too many things and I don't know what you are referring to. 
Sorry bud. I know you didn't get the upvotes you were hoping for last time, but you can't keep spamming your website here, so these links will be removed (starting with this one).
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/xcode] [Cryptography in parse, App store](https://np.reddit.com/r/Xcode/comments/4aqf5p/cryptography_in_parse_app_store/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Interesting thanks for the reply.
So are we talking about chaining here?
Thanks for the reply. This is a good idea. I created a modal segue from my tab bar vc to my login vc. Any suggestion on how to access this login vc to present it through code?
Thanks a lot! This seems like a far more direct approach. I originally had all of this code written in Java (including the algorithm I need this data for) and am now translating to Swift but am overall pretty new to Swift. So I'm curious: 1. What's this $ business? Is it just a standin for a parameter? Which parameter(s) is it referring to here if that's the case? 2. What is flatMap and why are there curly braces being used to surround the Word object? Is this just to say "the contents of this will be a bunch of Word objects"? 3. Where did you learn about componentsSeparatedByString()? I had read the documentation for the String struct before doing any of this and did not see that anywhere.
Yep I built the vc in my storyboard. I added the code below to the didFinishLaunchingWithOptions function in appDelegate. let modalVC = UIStoryboard(name: "Main", bundle: nil).instantiateViewControllerWithIdentifier("loginID") as! LoginViewController tabBarController.presentViewController(modalVC, animated: true, completion: nil) The app builds in my simulator but the login vc does not present. I get the warning message: Attempt to present LoginViewController on myTabBarController whose view is not in the window hierarchy! 
Not sure if it's the same in Swift, but in Java it simply specifies which "self" is meant when you're in an inner class. When you have a class A with an inner class B, a method inside B has a valid reference to both its own instance and an instance of A (=the instance that created B). To make it obvious which instance you're referring to, "classname." is used as prefix.
Swift is open source and works great on Linux. Server-side Swift is a reality
If the tabBarVC is in a UINavVC present using he navVC instead (so something like tabBarVC.navController?.present…). 
Hi, I'm one of the core contributors at Zewo. I saw that you guys depend on BlueSocket and I also saw your comments about why you didn't like Zewo (the C deps). Well as Dan is probably going to comment as well, this won't be a problem anymore with the new snapshot that is coming. So I'd like to talk to you guys about a server side swift standard we're creating which could help the community a lot. The ideia is, in your case, instead of depending on a socket implementation. You would depend on a protocol representing a stream (the TCP socket stream). This stream could be implemented by Kitura, Zewo, or whatever. Now about the Zewo socket implementation. AFAIK, Zewo's implementation is the only truly concurrent implementation. And what's great about it, is that it's based on coroutines, so you have concurrency without callback hell. If you guys are interested I'd love to chat with you about this (the standard, zewo, etc) on our slack. slack.zewo.io
Great response! You're good with words :). I agree with a lot of what you're saying. &gt;This is a MongoDB driver that does not rely on the C library. It feels really native and is easy to read, maintain and contribute to. While the Mongo-C driver is very clean and easy to work with for the most part, I imagine that the whole UnsafeMutablePointer shenanigan could discourage a lot of people from contributing. I don't think rewriting it from scratch is necessary in this case, well documented code should do just fine. However, I see your point. &gt;If your library as it stands now had been available in this state 3 months ago I would’ve no doubt used your library and I would’ve probably contributed to it. I very much agree, haha. Before the refactor that it went through a couple weeks ago it was inconsistent, verbose, and even incorrect in some places. &gt;We’ve been following a project that you’ve been working on (Zewo) since December. And we disagree with one major thing in this project. Which is that in order to start with your project you’ll need to download the dependencies using SPM plus the dependencies in either Brew or apt. I can see how this could get in the way (trust me, it makes me tear my hair out sometimes). However, I'm glad to say that in the next snapshot, SPM will be able to build C libraries and we are already ready for that. This means that Zewo has no outside C dependencies, which is pretty awesome! I would just like to say that while I'm obviously still going to be maintaining my own library, I think yours has a lot more prospect and would make sense to be infinitely more popular. So, while people might still use mine because it's built off a well-tested platform, I will likely encourage people to use yours instead. Finally, I would like to extend an invitation for you to Zewo's slack ([here](slack.zewo.io)). There are a couple of things we wanted to talk about (though it looks like paulo has already made a comment).
I liked this so much that I've been mocking up similar functionally - in Python - with a generic decorator that accepts callables and applies them to arguments by name. 
It's to distinguish that you're referring to the class itself, as opposed to an instance of it. Most languages allow you to simply write className instead.
This is awesome. I wish there was a better approach than [this](https://github.com/qutheory/vapor/blob/master/Sources/Vapor/Core/Generated.swift), though :P.
I started to put together a list of all the cool swift libraries, tools &amp; resources I come across. If anyone has any suggestions, let me know so I can add to it.
What do you mean by "by Slider over"? Also, just use this: self.navigationItem.title = webView.title!
[removed]
Just like how you spend your time, that video was an absolute embarrassment. Pretty old.
Tell me about the recipe api. Im also thinking that it might be better to have a list of ingredients to choose from, rather than typing them in (consider misspellings and items that don't exist in the recipes). 
I am going to implement a feature that autocompletes what you type, and you can only type what is valid.
I certainly try – thank you! You might also find my [what's new in Swift 2.2 video](https://www.hackingwithswift.com/swift2-2) useful.
I'm not sure there's an API available to check if it's supported because using auto-layout, everything should resize automatically. For slide over, you'll receive the did resign active call in your delegate, I know. Otherwise, I'm not certain there's a way to specifically tell that the features are supported on the device.
No, inner classes are pretty much a Java-only concept (at least I haven't seen that anywhere else) and doesn't exist in Swift (Swift has static nested classes, but those don't have access to an instance of the outer class's "self").
1. Ask user to enter items 2. on pressing of submit, send that information as POST or GET parameters to server 3. Your API uses that ingredients , matches recipe and returns that recipe in JSON or any format you like. [I would prefer JSON] 4. You receive that recipe in your app, Parse Json to any form you require and display it in your app
Just like asking an ill-formed question that isn't a question.
Are you using the same data source or delegate for both? Maybe one is adding to the index when a cell is added, and this is reflected in the embedded collection view. 
I didn't even realise this was a thing. I'd seen the ios goodies list though. Now my list seems a bit pointless.
If something on your list is missing from the [Awesome Swift](https://github.com/matteocrippa/awesome-swift) list, then you can make a pull request. :) Also here's a list of lists: https://github.com/sindresorhus/awesome
Both have different data sources. The cell being embedded is from another collection viewcontroller.
As in Objective-C, Swift types actually *are* objects, it's just the way you access the type object is by appending `.self` to the type name. Obviously, this could be changed, and there has been [some discussion](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160307/012239.html) lately. And there had [been discussion a few months back](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/002502.html) about doing something similar (changing `Blah.self` to `Blah.type` or `Blah.class`). One specific benefit to the current approach is that, when I make a mistake and type `let x = MyType` when I really meant `let x: MyType`, the compiler is able to let me know pretty clearly. If `let x = MyType` was valid, it would be tougher to communicate where my error was. From what I gather reading the Swift mailing lists, there would be technical challenges to overcome in order to keep the compiler clean. Specifically: - Does `[Blah]` mean `Array&lt;Blah&gt;` (an array of `Blah`s) or `[Blah.self]` (an array containing 1 element: the `Blah` type)? - Does `Array&lt;Blah&gt;` mean `Array.self &lt; Blah.self &gt;` (where `&lt;` &amp; `&gt;` are operators, like "less-than" and "greater-than") This is obviously solvable, but it means the parser can figure out fewer things out on its own. I'm not a compiler engineer, so I can't articulate why specifically that's desirable, but I believe the compiler wizards when they say that it is a consideration.
I'm sorry, I'm not a fan of forcing Swift to work like every shitty web framework out there. It's going to end up being just a different syntax for the same exact processes that web developers currently use. That's one of the main reason I just can't stand modern web development. Instead of trying to innovate or being open to new ways of thinking, web developers just force everything they get their hands on to operate exactly like every other platform they use. 
You just implied I asked an 'ill-formed question', yet immediately after you say it isn't a question. Please don't contradict yourself if you are going to attempt witty comebacks.
I would suggest looking into the [Just HTTP library](https://github.com/JustHTTP/Just). It will look after a lot of the HTTP side of things for you, and allow you to focus on other aspects of the app. You will have to format your ingredients into JSON format, which is actually very manageable with a separate JSONHelper class. You then Just.get(URL, json: ingredients, auth: credentials) { (result) -&gt; Void in and deal with the result of the request.
If you look at the top web frameworks out there (angular, rails, laravel), Vapor is radically different. For example, it takes a huge majority of errors that would normally happen at runtime and moves them to compile time. It's also incredibly modular and decoupled. These traits are only possible because it's based on Swift which has one of the strongest type systems of any language and is protocol oriented. "Laravel inspired" doesn't mean copying Laravel, it really means inspired by Laravel's ease of use, concision, and expressiveness. 
Watched this video a couple days ago. Great stuff!
I've been reading [Andy Bargh's blog](http://andybargh.com/blog/) a fair bit too, to help deepen my understanding of the fundamentals. I think it'd also be a pretty solid resource for people coming to Swift from other languages.
Drink the cool-aide. Use storyboards. Even using XIB files is needlessly difficult for old-hands who used to only program with them. Storyboards also make the UI "nice" like you must have *for approval into the iTunes store*. If you go your own way, odds are against being complaint. Stop wasting your time.
Doesn't run in Linux though. Seems awesome.
First, let's make it clear that this is a good skill to know. Personally, I prefer creating a lot of my views programmatically because it allows me more control over what I do with the views. Storyboards only give you so much freedom, and although they work really well, I mostly just use them to define the flow of the app from view controller to view controller. Often, storyboards won't work if you need to make very complex view structures, which can occasionally be necessary. This is one reason why you may want to do it programmatically. Another reason to do this is when you want to change constraints on the fly (more than simply changing the constant of a constraint). Adding views programmatically and then using [SnapKit](https://github.com/SnapKit/SnapKit) is awesome. This is usually my approach when adding views programmatically. While I don't have any good tutorials off-hand, I found [this](http://www.apptuitions.com/programmatically-creating-uiview-uislider-uiswitch-using-swift/), [this](https://coderwall.com/p/6onn0g/adding-progress-icon-programmatically-to-a-new-uiview), and [this](http://viperxgames.blogspot.com/2014/11/add-uitableview-programmatically-in.html) from a quick Google search. You'll have more luck if you're willing to look at some Obj-C stuff too. The code is pretty similar, and process (all the function calls, etc.) is identical.
/r/swift is on the list, we did it, Reddit!
Only backend logic. The UIs need to be written separately.
Thanks for your support!
I've been developing for iOS since it was called iPhoneOS so I know how this goes. iTunes Connect is rather terrible and often has problems that persist for several days. There is nothing you can do about it except to wait for Apple to fix it.
You need to look at AVCaptureSession, AVCaptureDevice, AVCaptureVideoDataOutput, AVCaptureVideoPreviewLayer, and AVCaptureConnection.
My build took around 18 hours to finish processing. It's not stuck, it's just iTunes Connect being iTunes Connect.
I'm on the border of Collingwood and Fitzroy.