It teaches Swift. 
Is it useful? I tried to learn swift with swifts book, did learn somethings but couldn't build anything yet 
Yes yes, [this](https://itunes.apple.com/it/app/voyage-been-travel/id1096626087?mt=8) is the last one I've made, check it out!
I certainly hope it‚Äôs useful; I wrote it!
Thanks üôè, and btw did you use swifts book? 
https://krakendev.io/blog/weak-and-unowned-references-in-swift This article helps a lot to understand how they work.
clean also the project (Shift-Command-K)
Yes. /r/artificemtg is my baby. Mostly Swift, a little Objective-C.
I am working through Mark Price's ios 10 and 11 course and just finished submitting an app i started building about a month ago. 
I'm honestly still waiting for a simple API on macOS to control Spotify without having to resort to Applescript or ScriptingBridge.
Its a selector, you use it to specify functions to call See the docs (scroll to "Selectors") https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html
The # in the '#selector'? That's like a swift compiler directive. It tells the compiler to look up and make certain that the method BaseScreen.updateNameLabel exists and then when compiled will insert the selector itself in place of that directive. The directive looks like c directives like #define, #include, and friends.
You can always interview @ Lyft and do it on swift. Send me you resume via DM.
Found the Unix/python programmer 
I see. Never programmed in C so I was confused thanks!
Ok thanks!
You can add semicolon in Swift as they are liberal about usage of semicolon. Also can't you do this in TS: "I have ${total} fruits" I know you fan do this in ES6 but can't you do it in TS?
I'd suggest relearning ObjC. First off, any job worth having will expect the competency to be able to pick up a new language from scratch anyways. Especially when they are as close as obj-c and Swift. Second, UIKit &amp; Foundation are ObjC based frameworks. You need to understand ObjC to understand them better.
The # denotes that it isn't part of the language and is something the compiler will have to do by it's own accord. "Compiler, find the selector that corresponds to this symbol and put it here before you compile the program."
S√≥, it‚Äôs totally unlike TypeScript where it really matters.
 `I have ${total} fruits` Works in both ES6 and TS.
Didn't Lyft write an article about how they converted to swift back when it was initially announced? Curious if they ever did a follow up, specifically what was the maintenance like? Swift changes quite a bit from version 1 -4 
By day, I'm a TypeScript dev and by night, I'm a Swift dev. The capabilities may overlap a lot, but the main thing that comes to mind is that I adore using TypeScript and dread using Swift. I have to look up this week's latest syntax for using ranges anytime I have to break out a string function in Swift, and the compiler is so slow I could wait for a tea to brew before the code completion comes up with anything (or spots any compiler errors). That and I hate using named parameters in a language where the tooling can't refactor (Swift). I can never remember the crazy syntax for closures in Swift, and I can't get my head around retain cycles. Give me TS's arrow functions any day. Oh, and selectors that can't pass parameters (other than the target) are a baffling weakness of Swift in my mind compared to Typescript's function currying options. Really uglifies my code by having to keep variables accessible as a class field to any function that gets passed as a selector. Could go on, but gotta sleep tonight. Constructive thoughts are welcomed.
&gt; by it's own accord by its* own accord it's = it is Your code has to compile. So should your English. This is second grade English in any case.
It's* a selector it's = it is Your code has to compile. So should your English. This is second grade English in any case. 
Requires 10.3 or later... why? You used a feature that need the user to be on 10.3? I'm jailbroken on 10.2 
Yeah I realized that after I published it. I will change it in the next update. 
It's the beginning of a [selector expression](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Expressions.html). The letters "selector" are the rest of it. Asking what "#" does is like asking what the "s" does in "struct X { var y: Int }". On its own, nothing. In front of the letters "ruct", it denotes a structure definition.
Hi inhoc! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because ‚Äì generally speaking ‚Äì compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/6xqa4x/like_baseball_heres_my_ios_app_that_tells_you_how/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
FYI not mine but I just stumbled across it while looking up, you guessed it, NSDateFormatter questions. Truly helpful!
But why?
üëÄ
type safe all the things
kind off topic, but IMO, HAML is the best way to write HTML
Hi Steven0351! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because ‚Äì generally speaking ‚Äì compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/6xr5vv/the_learn_swift_podcast_need_a_guest_for_episode_4/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Closures are just un-named ("anonymous") functions. You can treat any function as a closure as well, but it's convenient sometimes to just stick one right at the point of use without declaring and naming it separately. So let evenNumbers = numbers.lazy.filter { $0 % 2 == 0 } vs func isEven(num : Int) -&gt; Bool { return $0 % 2 == 0 } let evenNumbers = numbers.lazy.filter(isEven)
Even if you‚Äôre right, there‚Äôs a way of doing this. 
First paragraph : "...One important job of a web server is to produce the HTML that will be served up to the browser. We claim that by using types and pure functions, we can enhance this part of the web request lifecycle..." I imagine this is useful for the folks looking at swift as a server side language. 
i‚Äôm a newbie so take this with a pinch of salt but i think you can use the heightForRowAt tableview method. I‚Äôm assuming you are using a custom table view cell with an optional Image property so you should be able to add some conditional code in the above function to add on the height of the image to the height of the cell (and still include the original height from the text being displayed). Experienced devs, please feel free to correct me if i‚Äôm wrong. 
If the image is remote, your gonna need some info to set the cell up and basically end not be exact but show the general shape, generally you would supply the aspect ratio and the cell would be setup with a height constraint. If the image is local just setup an image view without an image and add a fixed height constraint that removes itself on runtime
I don't think that this is useful at all, and I use server side swift a lot :) Because normally the people who write the backend code do (should) not write the HTML, that's more suited for web designers. It is easy to convert the finished design in plain HTML to the most (if not all) template languages, so there is nothing to gain by writing HTML in Swift. IMHO
But if you're using a template language, why shouldn't it be Swift?
HAML! seriously though‚ÄîSwift is a procedural language... it may not be the best choice for templating. 
For server side swift I use [Perfect Mustache](https://github.com/PerfectlySoft/Perfect-Mustache). Here is an [Mustache example project](https://github.com/PerfectExamples/Perfect-Blog-Mustache/blob/master/webroot/story.mustache)
It looks like the Y axis is flipped. Try flip the min/max code inside `drawRegionBox` 
&gt; use the heightForRowAt tableview method Yes.
I think this is a great question, so I dedicated a whole [Medium post explaining it](https://medium.com/@Jernfrost/what-is-the-difference-between-a-closure-and-a-function-204504569a9b), to it. While Catfish is explaining a very common usage of Closures, that is not really what closures are. Closures can be named as I explain [here] (https://medium.com/@Jernfrost/what-is-the-difference-between-a-closure-and-a-function-204504569a9b). The essence is the ability to capture state. You can see that in my example. 
We know.
Glad to hear it! I didn't find it on a search of Reddit and the site has no indication of how old it is that I could find, so I thought I'd share it. Carry on and have a great weekend!
I would say that Apple are fully committed to making Swift a great programming language. To get locked in by ABI stability and not be able to change things as much too early would not really have been a good decision. ABI stability will be a part of Swift 5, so expect it to be shipped with iOS around that :) 
Hasn't it been pushed back several times already? 
Server side rendering doesn't really illustrate the usefulness of this paradigm, but... 1) React and the other "virtual component tree" renderers work for all kinds of UIs if you provide a few foundational components for each platform. As Swift gains cross-platform traction, and as WebAssembly ramps up, this sort of tool is very valuable because it's a single paradigm for server-side, mobile, and browser UIs, and the abstraction is very compelling (just seeing how popular it's becoming) 2) string-concatenation-based templates like Mustache, HAML, etc. aren't subject to the Swift compilers rigorous type system and in that case everything may as well be a string 3) virtualized DOM is a great way to get performance and testability in unit tests where rendering isn't always necessary. It's a great way to extract serializable state with functional components so that implementing undo or Elm's "bug history" where you can send a developer an exact snapshot of app state when you encounter a bug, is relatively simple. It's a great way to share components that are easy to manage in Swift code 4) templating languages have limitations: they can often be awkward for things like if statements, iteration, and component reuse, but Swift is a capable programming language for building a DOM tree and then translating that to HTML Like I said none of this is immediately apparent from the server side use-case but keep an open mind on this type of setup because it is freaking awesome for other UI use-cases especially making functional/reactive UIs
They sure have. But this time around they seem to be way more serious about it: https://swift.org/abi-stability/ https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md 
I did a similar thing yesterday. Create your image view in the cell and create a width constraint on it. In layoutSubviews you can toggle the width constraints constant to 0 when there is no image.
Ah thanks for the links
Nice job! One thing I‚Äôd like to note (unless I‚Äôm mistaken) is that you probably don‚Äôt want to have the font hard-coded as Helvetica. 
Thank you, I forgot about it. I‚Äôm going to edit it
Thanks. I'll check this out after my morning coffee!
Well your code has some issues like replacing every $¬£{} with nothing even if they are not part of a token pair, and some other strange limits you've put on (why limit to 10 characters? etc). I suggest you look into regular expressions as this could have been much more elegant.
I‚Äôll definitely edit my code to make it better and cleaner
Thats an awesome idea man. UX/UI is arguable more important sometimes when it comes to making a good feeling app. Id check it out.
I led that project. 
It both tests for nil, and assigns a non-nil variable to use within the scope of if
Thank you for the prompt and kind reply. Best,
 lazy var array: [((UInt8, UInt8, UInt8) -&gt; Int)] = { return [self.func1, self.func2] }() Also since its a class level variable it has to lazy. 
The issue is that `func1` and `func2` are instance methods of the class `test`. If you make them `static` or change the type signature of `array` to `[(test) -&gt; (UInt8, UInt8, UInt8) -&gt; Int]` (or just leave out the type signature since it can be deduced), it should work.
1. Sure they aren‚Äòt in a folder called _Swift_ in _Documents_ ? 2. Open them up, see if there‚Äòs a ‚ÄúShow In Finder‚Äù option in xcode (not 100% sure) about that. 3. General hint: put up a working directory for your tutorial exercises. You probably don‚Äòt want the clutter of your first ‚ÄûHello World‚Äú programs around your later, more serious work. 4. Meta: I find your thread title extremely unhelpful and vague. Maybe describe your problem in the title itself? Also, this question isn‚Äòt really r/swift material, since it doesn‚Äòt touch on the language itself. 
no, i only have 1 folder that i made in documents it doesnt open them and says they cant be found or something okay thanks 
It's a shortcut for what you would be doing otherwise. func getUsersName() -&gt; String? { // get some name from the internet } let name: String? = getUsersName() if let name = name { print(name) } This is equivalent to if name != nil { let name = name! print(name) } It's a syntactic sugar for something you would do all the time. It is also there to encourage safe behavior (i.e. never using the force unwrap). Other languages, like C++, can have plain `String` that can actually be `nil`. So sometimes you forget to check if an object is nil or not and then end up with a crash. Swift provides all the tools to make handling `nil` quick and easy as possible. To further exemplify how nice this is for Swift, I'll point out some other pains for non-null-safe languages. In C and C++, for example, when a function fails, it's undetermined how it will tell you it failed. Some `int` returning functions will return 0. Some will return 1. Others a negative integer. Some returning `int*` will return `NULL`. Some even place an error message at some other location completely unmentioned in the function signature. You just have to know to check this other random memory location after you call the function to see if your call failed or not. Swift handles this 1000x better.
Huh, weird. Right-clicking on it in the xcode startup menu doesn't help either (http://imgur.com/a/6uNNB)? Looks like you have already deleted the file, and Xcode is slow to catch up. Also: You probably get your error message because you use quotation marks in the file name, which causes a parsing error. Try saving it just as _helloWorld.playground_ , and it should work. 
thank you, it wont let me edit the title since im on mobile
It provides some nice syntactic sugar for binding something that could be Optional to a non-Optional within the scope of the `if` statement. The last part is really key as to why you would use it. let person: Person? /// ... if person != nil { // person is stil optional in here, even though we know that it isn't nil based on our above if statement print(person!.name) // notice we still have to force unwap. } if let nonOptionalPerson = person { // nonOptionalPerson is of type Person instead of Optional&lt;Person&gt; so we don't have to force unwrap print(nonOptionalPerson.name) } Using `if let` can be useful when testing a cast on a non-optional value let me: Person let couldBeAnything: Any = me if let person = couldBeAnything as? Person { // couldBeAnything was holding a Person, we can now use person freely print(person.name) } Lastly `guard let` just flips the scope of the bound variable - Where we could only access `person` inside the true condition part of the `if let` statement above, a guard allows you to use `person` in the rest of the body freely. let person: Person? guard let nonOptionalPerson = person else { // person is nil return } // nonOptionalPerson is available and of type Person print(nonOptionalPerson.name) 
You could (and should) get safe behaviour with a full "switch" rather than a forced unwrapping (WTF people?), `if let` is just a much terser version: if let name = name { print(name) } versus switch name { case .some(let name): print(name) case .none: () } Optional is fairly standard enum despite having extensive language integration.
That did it - thank you! Now I need to read up on lazy variables, as this is the first time I'd encountered these in Swift.
&gt;You could (and should) get safe behaviour Should? According to who? Using a `switch` here would get unanimous rejection in every code review I've ever witnessed. 
Compared to the forced unwrapping your were using.
This depends on so many factors, practically none of which is technical, that it is impossible to answer. It depends on: is this Mac or iOS? is this for millions of users or you and your mates? is the service going to cost you or your department money, and are you willing to pay? is this a work project or school? are there limits to the service (as there are for example for Apple maps)? can you stay within those limits? The fact that you've asked about 'bad form' (and used that phrase) makes me think this is _not_ some kind of work thing, therefore it probably _is_ bad form (based on the, "if you have to ask, you shouldn't do it" principle). If it were work, you would know that it _only_ depends on money (of one form or another). 
After reading the user agreement on the the service I was going to use it says they don't allow any automated usage of their site. So I'll have to either learn to do complex math with swift or solve the equations that need solving (there will probably be over 100) and putting the values into my app
Well I am going to ask the freelancers but I thought if the idea sounded simple enough to the more advanced coders here, then they could tell me: "Oh no, keep your money, college kid. That's easy enough to learn in X weeks." I think it's worth $200. But some web developper in my school is asking for $900 for the first version and then $1500 for the second version, so I'm a bit hesitant. edit: he's a web app developper so not ios, I was looking for ios first but he can't do it
A portfolio with a simple app is significantly better than a portfolio with no app. Being able to take a piece of software to completion is essential. The first 90% of developing any piece of software is the fastest and easiest. It is that last 10% that really counts.
You should be able to handle it yourself within 1-2 months, and would be a good learning experience for a CE. Good luck
Is there an API with a user agreement that allows for that behavior? If not, then it is bad form. Otherwise...have at it.
How has it been with maintenance given how drastically swift has changed in the past 3 years? 
The problem is project scope. I would take $200 and make an app that does exactly what you said. Then, when you see it, you'll realize "it should do this, too!" And you'll expect the developer to add that feature for no cost. It happens almost every time.
If anyone wants to tackle that problem in swift, it sounds easy enough... Use CloudKit to store this info in the app's public container (I'd also have a unique ID stored in the private container), and then just "fetch" the complete list regularly in the background.
Coming from the purely business side of things, it would've made sense to learn swift, make the app, then start the business. If your timeline is 1-2 months even, you're risking a lot by trying to do this yourself. I say you need to find a freelancer to do it for you. Start googling "iOS developer (your city), look at portfolios, and contact them if you like what you see.
If you would take $200 then my price estimate was reasonable. I'm a programmer too so I know about project requirements and I would make sure every modification to the original version I outlined would be paid. 
I hope so. People are giving me different timelines. Some say 1-2 months like yourself, others 3-6. As well as price ranges
It sounded easy to me too I just don't know how to do ios programming or know how submitting an App to the app store works. If it were C, it would be a snap. Do you think $200 is a fair price to give someone to do exactly what I described?
the forced unwrap was to show what the if let was short for. also, a forced unwrap is perfectly fine in that example anyway.
Actually I can see at least two reasons to use a switch instead of If-let 1. Deeply nested structures Imagine that you want to pattern match on a value that contains an optional. It happens that you want to pattern match agains .none. For example enum User { case registered(name: String, address: Address?) } func print(user: User) -&gt; String { switch user { case .registered(name: _, address: .none) : //etc case .registered(name: let n, address: .some(let a)): //etc } } I agree, that this example is not exactly similar to the original problem, but I think that the point still stands: Destructuring optionals in switches is important. It‚Äôs particlarly useful when destructuring segues! 2. Optional get special syntax but sometimes it‚Äôs really annoying. imagine you are dealing with asynchronous computations and you are dealing with computations that can fail. Sometimes you have Results, sometimes you have Optionals, sometimes you have a custom enum state like `enum AsyncState { case done(T); case waiting; case canceled }` All those different types are mostly interchangable. imagine some requirement comes in and the task is ‚Äúsomething that was optional needs to be a AsyncState now‚Äù and ‚Äúsomething that was a result, needs to be an optional now. it‚Äôs easier to move from switch optional { case .some(let value): ‚Ä¶ case _ : ‚Ä¶ } to switch async { case .done(let value): ‚Ä¶ case _ : ‚Ä¶ } than translating from if-let and similarly for the other case. Arguable those are not cases that you will encounted *all* the time. But you should be able to recognise one of those situation when they come up. Finalle, most of the time, the best way to handle optional is to write you function as if they didn‚Äôt exist, and then use `optional.map(f)` in order to compute your result.
1-2 if you have good focus on the app, 3-6 if you mess around with tutorials and procrastinate
You can get it done for much cheaper by freelancing it to someone in India. HOWEVER, the quality of work would vary widely, so make sure if you can check some reviews before committing.
There are probably lots of semi-beginners that would take this on for $200. I'd do it if I didn't have any other projects happening at the moment and wanted something to do... but, realistically, if I was coding full time and pursuing projects to pay the bills again, then this is a $500 project and I'm quoting 10 days. Also, the $100 apple fee is on you.
I think it's important that you offer users a consistent product. Because you don't control how those calculations are made they might get changed out from under you without you knowing. Either find a library so it's always consistent, or include a disclaimer with each result ("WolframAlpha says that your launch trajectory is \(‚Ä¶).") so users know that it's recalculated each time.
If you ever log in to Twitter or Facebook or whatever from your app, it's part of the Internet. Things as a service.
Thank you for the insight! 
I have limited experience with swift, maybe 4 or 5 months of weekends and evenings, I'd be willing to take a crack at it but I'm not sure if it's within my skill level. I'll pm you
what the fuck
Obviously a local solution would be better because it would not rely on network connectivity. There may be some existing frameworks depending on what you want to do. Maybe blas, veclib, Quadrature or vDSP, which are part of the Accelerate framework can help you. There are some wrapper libraries like [Surge](https://github.com/mattt/Surge) which may be easier to use. If you want to solve arbitrary equations, maybe a symbolic math library can help you. Sadly I don't know if any Swift implementation. The [Newton API](https://github.com/aunyks/newton-api) May be helpful in this case but it requires an internet connection. 
Except you wouldn't actually take $200
Zero chance this is a $200 job. For one thing, I wouldn't touch a job for less than $100 an hour, you may find someone for $80. Either way this would take more than 2-3 hours. More importantly... how is the state of the queue fracked? Does it need to be real time? In either case, those things necessitate a server or some other backend data store. Those things are very rarely if ever written in swift. So you'll probably need a backend dev too in addition to your mobile app. As a professional developer who has put out large scale web apps and a mobile app I think $200 is insulting. You'll need some form of auth, a backend server that does the auth in addition to serving the queue list. It needs to either poll or use websockets. Then there's the mobile app which has to make Ajax calls (if polling) or open a websocket. Have some form of animations when moving places in the queue... unless it's just a number. I also try to write code that a future developer wouldn't hate to work on, so I make sure it's well tested and documented. I'd estimate between 20-40 hours for a good product. 
"Coding full time", 10 days. 10 days x 8 hours a day = 80 hours. $500 / 80 hours = $6.25 an hour. Yea... that's not a great idea
There is no chance this is less than a 20 hour project even for a veteran unicorn full stack developer. Which means it will probably take an avg dev more like 40-120 hours realistically. I don‚Äôt know any developers that would take much less than $10/hr lol, no not even from India. What infrastructure are you using to run your dB and app server? The server should be managing the logic for the queue and the push notifications. So you need a web app hooked into a database. Definitely check out and learn firebase to accomplish this.
If you're thinking MVP and just getting something working out there as quickly as possible, I would at least consider [React Native](https://facebook.github.io/react-native/). That way you get both iOS and Android from the get go, and can put most of the work into building a reliable REST API. - The downside is that you are choosing a niche framework for your mobile devices, but you can always migrate to Swift/Java/Kotlin later on. - I would go against what others have recommended with Google Firebase, CloudKit etc - By putting most of your focus on the actual backend API you can easily add clients later if your idea takes hold **Edit:** However building your own backend is also a double edged sword. You can obviously go the YOLO approach of using some third party database/key value store. But in the long term, learning how to setup a proper backend on AWS, Microsoft Azure or Google App Engine will be invaluable regardless of whether this project is a success or not.
You need to dismiss the view controller or else you are creating the same or a new view controller over and over again 
Where would I dismiss it? If I dismiss it in the function it seems like it either dismisses the opened view controller or if I put it before the call for the new View controller it doesn't open it anymore.
While I do not think I will be forgetting obj-c or failing tests anytime soon, it definitely feels very clunky to me now. I have not been using it for any big projects for about two years and then had to expand an existing app written in it - I will not go as far as to say that I felt miserable, it lacks so many things I take for granted in Swift, that make my life easier - Enums as implemented in Swift, is a huge one. - Optionals! - Map, reduce, filter - Being able to have value types in arrays - Not needing to wrap anything in NSNumber/NSValue, apart from compatibility reasons - Lots of other little things Sure, reflection is very rudimentary, but the day to day impact from this is close to zero, while the lack of the above features from obj-c is a PITA, once you grow used to them.
You could build the foundation of the idea in about 4-6 weeks of dedicated time with firebase, a competent Dev could probably get the foundation done in 1-2 weeks of dedicated time. Then it's just the complexity of the UI
They have an api (expensive to use as it's per query with about 1000 requests free or so) you should really just learn how to solve them yourself if you can type it into wolframalpha then you can solve them on your own too.
I'm also fond of reverse engineering but I'd suggest pluralsight's swift in depth, or any full swift training you can find. You can't really code properly if you don't understand your tools.
Why not do something more than looping .count number of items? for (i, name) in names.enumerated() { print("Person \(i + 1) is called \(name)") }
https://github.com/MessageKit/MessageKit
Any idea how mature this is? The [roadmap](https://github.com/MessageKit/MessageKit/issues/62) seems to indicate it's a long way of things like typing indicators and image messages. NB. I'm still using JSQ despite it's deprecation.
Doesn't need to be lazy, you can also make it a computed property.
34 years working experience in mobile app de- velopment
&gt; despite it's deprecation. Despite it is deprecation? Really? Despite its* deprecation it's = it is If you can learn learn how to program, you can learn this.
To be fair, his phone could've autocorrected its to it's. 
Its ok. Chill. The fact that you used pre-formatted text suggests that this is not your first one. Now continue doing the code reviews.
Pssst.. calm down. Maybe he is not a native speaker or whatever. You did understand what he tried to say, didn‚Äôt you? So what‚Äôs the problem.
Wow, thanks for this!
Add a transform to flip the collection view vertically, then add the same transform to each cell so they're right side up. That's how chat apps do it with table views to have messages start from the bottom.
Well from looking over real quick I would say you would want to dismiss the view controller where you have all this: self.removeAllChildren() self.removeAllActions() self.scene?.removeFromParent() self.viewcontroller?.gameOver() and it will replace pretty much all of that and then it should automatically go back to your view controller that lets you select the game. You shouldn't have to call the original view controller. Because from my understanding you have your main menu which is view controller one. Then when you click a button it opens another view controller with the game. If thats correct then yeah you should be able to just dismiss the view controller with the game and it should go back to the main menu controller.
The docs for `scheduledTimer` say "Creates and returns a new NSTimer object and schedules it on the current run loop in the default mode.". It looks like your explicit call the the RunLoop `add` method is redundant, who knows what effect this is having. If you really want to add it to a runloop manually, use a normal `NSTimer` initializer instead of the "scheduled" factory method. You might also want to look into runloop priorities or modes or something which can influence accuracy. Also, you might want to use a lower level API for the haptics, the system sound one might hit the file system on each call which may give inconsistent execution times depending on caching. Try doing nothing but logging in your timer until your satisfied with its regularity, then add the vibration and see if that's a problem itself. (This isn't a swift language question, would have been better to post this to r/iosprogramming and leaving posts here to be ones specific to language issues. Or whatever)
It works. Thanks
Brilliant explanations and handy info; nothing to fault! Would be happy to see more from this author.
That can be surmounted with a well-thought-out waterfall-method requirements list. Creating such a requirements list is no trivial undertaking, however, and that's what senior engineers (and similar roles) spend a lot of their time wrapped up with in many companies.
Do you mean UILocalNotifications? If so, that's not even in Foundation but far into private OS frameworks, extremely separate from the open source language. The best you can do is file a bug report with includes an xcode project reproducing the problem.
I normally do UIs programmatically and the way I would do it is in the view controller of this view, have a variable referencing the reverse button, and then add the lightGrayView as a subview to the reverse button. Then from there you can add the constraints: lightGrayView.centerXAnchor.constraint(equalTo: reverseButton.centerXAnchor).active = true lightGrayView.centerYAnchor.constraint(equalTo: reverseButton.centerYAnchor).active = true And then doing: stackView.addArrangedSubview(reverseButton) should add the reverseButton to the stack view with the lightGrayView behind it. 
Yeah UILocalNotifications. I'll give that a go.
I've yet to do any constraints programmatically, so forgive me if these questions seem foolish. 1. Do I just throw all the views (Image, Stack, etc.) into the main container, add the Outlets and then do the constraints in the View Controller? Does that last line add the Reverse button to the Stack? (And im assuming since the ligjtGreyView is attached to it, it goes with it?) 2. Is it back form to do some constraints through IB and some via View Controller? Thanks for the clarification. 
So you have a button which is inside a stack view and you are trying to place a UIView such that it is centered relative to the button. And the UIView is not inside the stack view. Possibly you can do this, but it is difficult and becomes more difficult if you want them to move together when, for example, you run it on a much larger or smaller device, or you rotate it. I think it would be much easier to do one of these two things: 1. don't add another UIView, just set the background colour of the button to light grey. 2. if you absolutely must have the grey UIView, then put the button and the grey uiview inside another uiview, and put that enclosing uiview in the stack view. 
I'd take exception to the fact that Kotlin's Any is paired against Swift's AnyObject, since Swift also contains an Any typerasure as well. AnyObject is in there for different reasons, and you're mostly going to see it when dealing with Objective-C interoperability. Out of an article that suggests that the two languages have **up to 77% string similarity** in some cases, and points to a potentially shared language base between Android and iOS, it's interesting that the most interesting thing to you is that one has slightly shorter syntax. For me, Swift helps to steer me in a direction where code is more immediately readable and understandable. I'm not sure, given the examples in this article, that Kotlin is remarkably different in that way. Beyond this example that is incredibly limited in scope, what do you want to see Swift do that it doesn't from a smoothness standpoint? And are you talking about readability? Or functionality? Are you noticing patterns in code that people have written? In Apple's frameworks? In tutorials?
Did you get working ?
I did
`If you‚Äôre coming from Objective-C, or any other modern language, you should be fairly familiar with reference types (fancy name for classes, really). ` Is this really true? Its definitely not true in C++ where a class can be instantiated as either a value or a reference. 
It's bananas, but not as bananas as apple's lack of support for such a common use case. PS Remember that any animations or work with positioning will have to be flipped as well
This comparison seems superficial at best. Concluding that they're extremely similar without mentioning the completely different memory management model seems baffling, for example. Similarly, not discussing value types seems like a massive omission. Same with bridging to other languages. The syntax examples are also misleading; for example get-only computed properties in Swift can be done as concisely as in Kotlin, but the author apparently didn't realize that.
FYI, this was posted earlier today: https://www.reddit.com/r/swift/comments/6y0m69/structures_vs_classes_in_swift/
Who works on only one project at a time? 
Uh... most people? Why would you work on multiple at a time I don't understand. All that could do is detract focus from the project you're working on. "Context switching" may be a cool thing to brag about on forums but is horrible in practice. List of companies whose dev's work on one project at a time: Thoughtbot (could stop there), Gaslight, Vaporware, every other consultancy Edit: also you said you're billing for 10 days.... how else should that be interpreted? How many hours are you ACTUALLY billing for over the course of those 10 days. You're response is literally why there is so much confusion around billing dev projects. Be up front and clear
You're right. The explanation applies two different concepts and links them, namely equating stack to value and heap to reference.
Thanks!
I'm sure that my processes, as a former indie and (for a short while) corporate-ish LAMP dev, are far from ideal, but I know there are many like me... Focus on a single project is boring. About the timeframe... Just because I quote someone a time-frame, doesn't mean that I'd be dedicating my days to that. It's also good to have flex in case something goes wrong. Maybe it'll only take 5 days, but my dog dies, and I want a few days to mourn. And yes, $200 or even $500 is terrible... but have you tried to be an indie? I did it for a while and most of the time I thought to myself "why don't I just go bag groceries?!" Granted, I am not famous, a well-rounded multi-language expert, or famous podcaster. Alas, you seem aggravated. Sorry if my input convoluted the billing practices of coders-everywhere.
Having used both extensively, and I'm probably going to get some hate here, considering we're in the Swift subreddit, but Kotlin feels more well thought out. The syntax is nicer, cleaner, and easier to understand, to me at least. Kotlin's when syntax is more intuitive and simpler than Swift's switch, and data classes in Kotlin are awesome. I'm also considerably more impressed by Kotlin's standard library functions, and Kotlin's type inferencing is miles ahead of Swift. Oh, then there's the matter of binary size, which is negligible in Kotlin and enormous in Swift. Don't get me wrong, Swift is a great language, a massive improvement over Obj-C, but it does have its flaws.
I was hoping that he would mention something regarding copy-on-write as I feel that is something important to note regarding Swift and this topic 
That's actually part of the stdlib, not the language. I think a lot of people are making structs and assuming they get COW behavior for free, when in fact you have to implement that yourself if you want it.
What solution did you use so others can see if they find this post 
This is just a bad article. There's a lot of misinformation here. It should be a red flag that half the article is spent talking about the stack and heap, yet not one of the references at the bottom mentions the word "stack" or "heap". It's well-known that [Swift structs larger than 3 words are heap-allocated](https://www.mikeash.com/pyblog/friday-qa-2014-08-01-exploring-swift-memory-layout-part-ii.html). So are indirect enums -- it'd be rather difficult to implement them entirely on the stack. I imagine there are other cases. This article's analogies are cute but they don't explain the difference between a stack and a heap. Why does a heap use memory addresses for access, but a stack doesn't? How is it helpful to describe the heap as a "pile", a word which is literally synonymous with "stack" in English? (Merriam-Webster, heap: "a quantity of things thrown or stacked on one another".) What the heck does the novelist analogy mean -- if he had used a heap, would he be able to see forward in time? Swift has its own memory model. I don't know where these ideas came from, but they're not correct. You can't just take Objective-C concepts and rewrite them in Swift syntax and expect them to still be accurate.
Fair enough, but still worth a mention I think 
Reasonable people can disagree about which syntax is "nicer" or "cleaner" (especially since these terms are not well-defined), but: &gt; Oh, then there's the matter of runtime size, which is negligible in Kotlin and enormous in Swift. That seems backwards to me. From what I can tell, Kotlin's main runtime is the JVM. On my system, that's much larger than the libswift*.dylib that Swift requires.
Really? I don't recall that little point from any of the WWDC talks about Swift that were hyping structs as really useful...
I'm not sure how "learn the basics" and "get a job as a junior engineer" translates to "become a rockstar". In music, someone who knows the basics is not a rockstar. A junior musician at his first gig is not a rockstar. I'm hoping you mean there's going to be drugs involved.
That article says that structs in *protocol variables* are stored inline if up to three words. I expect actual structs to always be stored on the stack, and your link doesn‚Äôt contradict that. 
And they are. 
This is just what I thought when I first saw Kotlin. The langauge is clear, simpler, smart and shorter. What I realized is that since we are in Swift subreddit it is really hard to discuss anything outside of Swift. We are not talking about which language performs better which I don't have the capacity to argue on that anyway.
Crap that's inconvenient o_o
After adding subView in setupView() you can programmatically setup auto-layout constraint for view loaded from nib
Strange how much this sounds like me. Also 23. Currently working on a turn-based strategy dungeon-crawler. I've found games afford me a lot of creative liberty, and are also just good programming practice in general; there are so many different problems to solve. I also just love modeling game worlds in code (strange, I know). Lately, I've been reading "Pro Design Patterns in Swift", and while some of it is admittedly a bit over my head (I'm looking at *you*, multithreading), it's a great "next step" after reading the full Swift language guide by Apple and after lots of experimentation with language concepts. Design patterns are important and understanding them is first step in really *understanding* Swift programming, instead of just *reciting* it! Get familiar with some of them, I'm glad I did!
Yeah you are right, I call the game from the main view, but then on game over I would like to go to a new Game over View controller. So is there a way to dismiss the current view controller and open another one? I¬¥ll try to do it via delegates later am I on the right way there?
If you're interested on CoW, you can have a look at my article: https://marcosantadev.com/copy-write-swift-value-types/
What‚Äôs wrong with https://developer.apple.com/documentation/swift/sequence
Nothing at all. I might just be an idiot. ü§§
I have seen a lot of tutorial videos but this one is the best by far, better than Devslopes. 
the popular writer is here :)
Thanks, anonymous plug! :D At least they went the distance to suck-up for the course spam.
Why don't you show us what didn't work? This works for me: /** Do stuff. - Parameter bar: A param - Returns: A good old int */ func foo(bar: String) -&gt; Int { } 
Lol, i like how you think this subreddit is an appropriate place to post your advertising, probably straight up lie in your ad copy ("All of our students (12k+)who took the previous versions of our courses, not only got jobs as iOS developers, but became the lead developers in their companies in a year on average."? Come on, you can't expect people to believe that without providing evidence) and then forgot to include a link to what you're advertising for üòÇ
The Plymouth course on itunes U is good, same with the Harvard one. 
Thank you very much !
go with this one: https://web.stanford.edu/class/cs193p/cgi-bin/drupal/
&gt; Since reasoning about cycles is hard ....it's better to *not* reason about them, given there is a guaranteed safe alternative. Unowned is essentially an implicitly unwrapped optional, which are also forbidden in our code. Yes, *sometimes* it's safe...as the code is written today...probably...not really. I prioritize safety, readability, performance in that order, and avoiding unowned is a safety thing. If it burns a couple clock cycles in the name of safety, I'm totally fine with that. If we got the memory instrument running in our CI builds and failing the build any time an unowned is used in an escaping closure then I'd be OK with it, but lacking that, weak instead of unowned is reliably safe.
I just got the 11 course, did you decide to do both together?
Do you have a rest app on the server? Create a get request for that value. I don't think you want to access the sql database directly on your client 
You could try my own iOS/Swift book, [Hacking with Swift](https://www.hackingwithswift.com/read). It's free to read online, uses projects so you learn real stuff, and is kept up to date as new Swift versions are released. Let me know if you hit any problems!
So your backend will be C# with a SQL database and a swift frontend? I would just use Alamofire to send a ‚ÄúGET request‚Äù to your backend, which is essentially just hitting a route on your server. That route will then query your SQL database for a count and render it as JSON for your app to use. I don‚Äôt know C# well but I could help you make these connections so you try see how it fits together. Once you get it all connected, it‚Äôs easy enough to go poke stuff and see what happens. That‚Äôs how I prefer to learn as well. PM if you want.
Not to mention that weirdness about pushing a new stack frame for a for loop. I mean, he's sorta-kinda correct in that you get a new frames built and torn down at the (implicit) calls to `CountableClosedRange.makeIterator()` and `ClosedRangeIterator.next()`, but that's not how it's presented at all. There's some heavy funk spread over this article.
Do you have a link to the podcast?
https://itunes.apple.com/us/podcast/the-learn-swift-podcast/id1272996458?mt=2 I put the link in the original post, but it got auto-blocked because the iTunes link was flagged as an app link.
This is a useful extension to have, but the syntax is pretty weird. It doesn't look intuitive, and I don't even know how to type all of those characters on any keyboard I've ever used. I'm not sure if there are escape characters available here, either. TeX invented a perfectly simple, logical, and typable syntax for superscript and subscript 40 years ago, and it uses the standard backslash for escaping. HTML is a little more complex but has a way, too. Improve the syntax and you've got a winner.
I know the syntax is a bit weird but I didn't know which characters to use, I'm going to look at the syntax you suggested and try to implement it. Thank you for your opinion
&gt; It just shocked me deeply how easy the Kotlin is. Can you provide a few examples that illustrate the difference you see? I'm not familiar with Kotlin, and that article you linked to has no compelling evidence of this at all.
I agree with you on most of your points, but technically selectors have nothing to do with Swift. They're leftovers from back when Objective-C didn't have blocks. (I have no idea why Apple didn't remove them or at least provide block-based alternatives) Outside of iOS development, I don't think anybody uses selectors. I also worked with both Swift and JS and work with JS developers, and it seems to like like people don't have problems with Swift, but with iOS development and Xcode. Web development and React Native, plus the tooling around JS are what make JS/TS great, the language itself doesn't really contribute that much.
There's a lot of screenshots of one way to set up Xcode, but not much useful information. It doesn't even get as far as running the compiler. Were you able to successfully share any non-trivial amount of Swift code this way? My experience so far is that swift-corelibs-foundation on Linux still has a ton of differences from FoundationKit, so unless you want to buy Macs to run your web server, or write your Mac/iOS apps in a constrained subset of the stdlib, this is mostly just a toy exercise. 
Apologies, I should have said "binary size", not "runtime size". I use it with Android, and it adds 881kb to our .apk, much of which is reduced by ProGuard. Simply adding Swift to a project on iOS adds ~6.5mb iirc.
Last month I launched my latest bundle, [the Swift Platform Pack](https://www.hackingwithswift.com/store/swift-platform-pack), which brings together [Hacking with macOS](https://www.hackingwithswift.com/store/hacking-with-macos), [Hacking with watchOS](https://www.hackingwithswift.com/store/hacking-with-watchos), [Hacking with tvOS](https://www.hackingwithswift.com/store/hacking-with-tvos), [Server-Side Swift](https://www.hackingwithswift.com/store/server-side-swift), and [Practical iOS 11](https://www.hackingwithswift.com/store/practical-ios11) for one discounted bundle price. This month I just published a collection of [interview questions for iOS developers](https://www.hackingwithswift.com/interview-questions) based on what I asked when I was hiring people and input from others. It's designed to complement both my [Swift coding test questions](https://www.hackingwithswift.com/test) and my [Swift Coding Challenges](https://www.hackingwithswift.com/store/swift-coding-challenges) book, and I hope it's useful to people looking to get a job as an iOS developer. I also just added completion certificates for all books in my range. If you've finished one and want to get your certificate, just log in to my [Swift Frequent Flyer Club](https://www.hackingwithswift.com/frequent-flyer) and download it while you're claiming the other benefits. So, that's where I am so far. Right now I'm busy writing a new book all about SpriteKit, and I'm pretty sure I'm using an approach that's never been tried before ‚Äì I'm pretty excited about it! I haven't announced any more details yet, but if you [subscribe to my newsletter](https://gumroad.com/twostraws) you'll hear more soon ‚Äì and get a discount on it too when it finally launches.
Unnecessarily using `weak` affects both readability and performance in negative ways. Given the fact that tools can detect cycles, defaulting to always using weak doesn't actually gain you anything. I mean, I'd hope you don't apply that rule to things like array closures or UIView animation closures, do you? There're whole realms of closure uses that are either guaranteed not to cause retain cycles, or whose cycles are transient, while the closure is being executed (like an animation closure or closures dispatched on queues). Perhaps most importantly, retain cycles aren't a safety issue. At best they're a performance issue, as they can lead to memory leaks over time. Your app isn't going to crash because you have a cycle, just take a bit more memory. So you've created a huge code burden for something that's a non-issue.
They runtime does, I think, store very, very large structs on the heap, but I wouldn't count four words as large much less very, very large. It also passes structs by reference if they're too big to fit in registers.
I've just launched my fourth app, [Voyage!](https://itunes.apple.com/it/app/voyage-been-travel/id1096626087?mt=8). You can mark the countries, regions and World Heritage Sites you have visited (also as a map).
Can you provide the status of Swift 4 updates? Particularly for the coding challenges book.
Work begins as soon as the Xcode 9 gold master is available, which I am expecting to be on the 12th. My initial priorities will be Hacking with Swift and Pro Swift, but I intend to get through them all as quickly as possible. Everyone who has bought any of my books will get a free update for Swift 4, as per my [lifetime upgrade policy](https://www.hackingwithswift.com/update-policy), but it will take a few weeks to complete the updates. I'm afraid I can't be any more specific than that at this time, but you will definitely get an email from me when the update is available.
Empty extensions are commonly used to make something adopt a protocol, but that isn't happening in the code you provided. If I had to guess, I'd say you were looking at the auto-generated headers and this is just a conversion glitch.
They raise a compile-time error if the type doesn't exist, or isn't visible to Swift. I don't know if that was the intent but it's not *quite* nothing.
Working on a [parser generator framework](https://github.com/palle-k/Covfefe) for context free languages, such as programming languages, mathematical expressions and many more. It can parse strings that cannot be parsed correctly with regular expressions. I have implemented two parsing algorithms, CYK and Earley, which can parse any context free language. Currently I'm trying to optimize performance of the Earley parser. I implemented a [calculator](https://github.com/palle-k/ExpressionSolver) which respects operator precedence and associativity and a syntax highlighter based on this framework. 
Hey applishish, you are correct. This is a toy exercise but it's also a proof of concept for something bigger. You should check out the GitHub version of the full notes app (github.com/dimitryz/Notes). I disagree that the functionality of this exercise is limited. Most of the Foundation framework has been ported and so has GCD. For those areas where you have minor differences, you can still fall back on OS-specific implementations, but these are few and becoming fewer in number as the platform matures.
Is this the actual source code or the generated interface view in Xcode? If the latter, it's just a bug in Xcode.
`enum`s don't seem like the proper representation here. Normally you just serialize responses into values, then you can filter them based on properties of the response. Do you have that part? Otherwise you need to explain what you're trying to do here. 
No. You can't run code over another app. The only exception is if you develop a tweak for jail broken devices you could accomplish this but no way to do it with a standard phone. 
Man if only you added cards for text would I use it. Just can't afford to do image-only but the design looks great. Good luck on future progress.
I like it. But instead of having to search for a subreddit, would it be possible to login and go through the subreddits that you are subscribed to instead of showing the whole front page? Just an opinion. 
&gt; Unnecessarily using weak affects both readability and performance in negative ways. Agreed, but I'll trade those to eliminate a potential crash. &gt; Perhaps most importantly, retain cycles aren't a safety issue. At best they're a performance issue, as they can lead to memory leaks over time. ...which can lead to out of memory and your app being killed silently. Then there's the opposite problem wither you use unowned incorrectly and crash. Both of these scenarios are avoided by using weak. Sure it's a bit more code but it's safe. And no we don't use weak for non escaping closures, since they're cycles are provably transient and therefore don't generate a complier error. But anything that's escaping and generates an error gets a weak rather than an unowned, cause that's one chance for developer error. If the compiler gave an error on incorrect unowned usage then I'd be all for, but for now at least it'll happily let you ship crashy unowned code to production. 
I'm sure if this is what you're requesting, but if you log in, open the frontpage and go to the menu, you can see your subscriptions [here](http://i.imgur.com/317Qo85.jpg). Is this what you meant? Or do you want to be able to see your subscriptions without having to open the frontpage first?
Hi NoaWitte! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because ‚Äì generally speaking ‚Äì compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/6ya230/i_just_released_my_first_app_it_is_a_client_for/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
I cmd-click on Foundation of the line Import Foundation Or any of those symbols like "Array", "Error" etc and choose "Go to Definition" on the popup menu That file then open 
Yeah, so this doesn't mean the source code actually defines empty extensions, it's just a weird Xcode behavior. You should file a radar.
What compiler error are you basing this off of? Required self reference for captures?
Sorry to tell you, but software development involves continuously learning new tools, languages, techniques. You can become a specialist in something, but you're risking being left behind. The good news is that your skills are always built on what you learned before and no work is ever really a waste of time. Years of experience in software development are valued along with the supporting skills like time management, source management, working within a team, etc etc.
That all makes sense to me but not really what I'm wondering. Obviously that's the nature of the beast but I'm wondering if there's even a way for something like a wordpress for apps to be made and if there was, wouldn't there be many limitations?
You're so loving you love your parents. I hope you have a nice day!
What?
Hey, thanks for the response! I do have a serialization part. It's very simple, essentially I have a struct called Card which is init'd with the JSON rep of the card and then I have one method with signature `value(for property: CardProperty) -&gt; Any?` and then some getters for the most common card properties like: var name: String? { get { return value(for: .name) as? String } } which so far works for me. ---- I'm trying to have the FilterKeys use as like a typed way to build a query. Where the api usage would be something like: Cards.where(.name("John"), .colors(.and, [.red, .blue])).get { cards in let card = cards.first! print(card.value(for: .name)) } so the programmer doesn't have to know all query parameters and use cases. I'm not sure if this is a good paradigm or not, but the code for it doesn't look good and is cumbersome to add more to it. I think what I'm really trying to ask is what is a good pattern to organize the code? Thanks for your feedback.
You should separate your serialization representation from the query representation. It's far simpler to have a proper struct that you can query a collection of for properties matching whatever than it is to combine the two. You could create extension API for `Array` (or underlying protocol types) that performs your queries. Your query language and your API representations are really orthogonal concepts.
I sort of want to argue with you about web design being defunct because of Wordpress, but I guess that's beside the point and I'll restrain myself. I suppose I'll at least say that "web design" and "web development" are two very different things. Web development is by no means dead, and web development can create a foundation upon which a native (Swift, or otherwise) app can rest. The two branches of development are deeply entwined and I feel bad for any iOS developer who is building something without an understanding of at least one backend web technology. But enough being off-topic... I'm going to rephrase your question simply as "Will there some day be a Wordpress equivalent for app development?" I'd say, "no", but we live in a world of infinite possibilities, so on a long enough timeline, maybe, but probably not in our lifetime. iOS development is extremely streamlined in many ways already but it is considerably more complex than web development. If some day there is a simple template format that a "layperson" could use without having a nuanced understanding of Swift development, it will develop apps that are incredibly rudimentary, similar to how Wordpress is a platform for largely rudimentary, same-y websites. Any real development will always be done by someone with real experience and ability, in either medium.
To give you a more bullet point type thing... I have a lot of experience with this now since my first app is built entirely around calling data from a SQL server over a lazy REST API. * You'll need to create a JSON REST-like API on your webserver, that will return a json encoded array of the output of your SQL query (this can be simple, the url would be something like https://www.sample.com/api.php?counter and it returns a json string) * You'll need to create a method inside your iOS app that will send a get request to that JSON API and then parse the JSON and display it on the app. You don't need Alamofire for this but going it alone can seem complicated unless you watch a couple videos. I use SwiftyJSON for parsing my JSON but supposedly Swift has some nice JSON parsing built in now. I don't use Alamofire. https://www.raywenderlich.com/158106/urlsession-tutorial-getting-started https://www.raywenderlich.com/150322/swift-json-tutorial-2 SwiftyJSON: https://www.hackingwithswift.com/read/7/3/parsing-json-data-and-swiftyjson Good luck. It's fun once you figure it out.
Ah sorry, I misunderstood your comment. I don't think there will be something quite that prevalent on the native mobile space. People write native code to do specific things that frameworks can't. You generally don't find a standard cms on mobile because you want a custom UI (otherwise you might as well use a mobile web site). That said, you might actually want to use a cms backend for your Swift app :) My advice is, if you find yourself enjoying learning Swift, then why not continue?
Thanks for this, will let you know if any questions come up!
Thank you! I appreciate the response and I will! It seems a little overwhelming knowing I'm always going to be figuring out the next thing but learning is why were here in the first place so why not? Do you think learning programming and whatnot is as potent for self development as learning more practical things?
Yeah, that's what I was saying is that any layperson can now make a nice website without any coding but knowing how to code will always obviously trump those services because the scope of what you can do is way larger if you're a pro
Okay, so I have separate representations. I have a `Magic` struct where I build a query and fetch the cards from the database and then I have a `Card` struct which is the deserialized representation of the fetched data. Should `Card` drop the `value(for property: CardProperty) -&gt; Any?` method and have all getters for every property and would every property be optional? Doing that would take away the need for a CardProperty enum. However, I do feel there is a lot of repetition of the same thing in different ways where `Card` has the same properties that you use to build the `Magic` filter query that is sent to the server. &gt; You could create extension API for Array (or underlying protocol types) that performs your queries That's a cool idea. What would the theoretical extension api look like? I'm having trouble imagining what it would be like.
In my experience, those services demonstrate that "any layperson" can definitely *not* make "a nice website", regardless of how easy the tools are. It still takes skill. It's the same with writing software. Swift will let you be much more productive than assembly language (like we used 30+ years ago), but you still need to know what you're doing, at some level. Of course, there are many purposes which don't need a nice website. You just need a website, any way you can get it, for cheap or free. The good web designers working at companies that care about design are not in any career trouble just because Wordpress exists.
I think in general it will help you think analytically, great for problem solving. It can also be very creative and satisfying when everything clicks. If you're thinking about a long term career its also one of the top earners which doesn't hurt. It all depends what you enjoy.
Converting inventory and cycle count app to Swift 4, plus adding multi-warehouse and assignment functionality. So far Swift 4 is not happy with the barcode scanning - converted, and it builds, but it doesn't recognize the warehouse barcodes.
Working on a peer to peer CouchBase lite electronic medical record app. It's a Volunteer project and all of the other developers bailed. Huzzah!
A. Web development is so far from dead that I don't have an analogy. It's hands down the easiest field to get a well paying job in in the world. B. Technologies will come and go. Being a software engineer is more about learning the skillset of software engineering than it is learning a particular stack. I taught myself Swift &amp; iOS development but never even ended up working as an iOS developer because another opportunity came up. I knew nothing about this field, but my employer was willing to train. They were hiring for the software engineering skillset and potential, not the experience with a particular language or library.
Okay yes I know that Web dev beyond the basics isn't dead that wasn't what I was trying to get at... I just mean anyone wanting to make a website for their business has no problem making it themselves in a day with no prior code experience through Godaddy or wordpress, etc
I will make you a coupon personally if you promise a 5 star written review? 
Looking for a job as a recent CS grad :(
[removed]
If you've got time to be posting and reading here, you've got time to contribute to open source projects. Just pick something in the language and field you're normally interested in and dive into the code base as deep as you can. Even if it doesn't lead anywhere, diving into unfamiliar code is an important skill. And there's plenty of jobs that'll take your GitHub history or open source contributions into account. It's a good way to prove yourself as useful. 
What‚Äôs the key? I often get this error if I connect something from Interface builder to code and then either rename or delete the variable. Edit: In storyboards check all your connections to code. [Example](http://imgur.com/a/Ceegw)
There's really not enough information to go on here... I would try to find working table view sample code online
Im thinking about a desktop app not mobile
What kind of backend do you recommend and why is it important for ios dev? Just curious
in your view did load, put these lines: let cero = 0.0 let ayCarumba = 1.0 / cero Now it is no longer 'crashing for unknown reasons'; it is crashing for a well-known reason.
Sounds like you hooked up an Iboutlet to either the view controller for your table or the table view cell class and deleted/renamed/otherwise changed it and it wasn‚Äôt updated in the story board or xib file. If I remember right it should tell you what class is actually causing the crash. Try unhooking outlets and then re hooking them up. Alternatively include more code here or push it to a git repo for people to take a look at. A lot of good developers here but we can‚Äôt diagnose issues without the code (usually)
Devslopes is very good but I think they go a little too fast when teaching. Her tutorial is very good too.
I bought this on Udemy. I can say by far this is the best course for the $$. I actually requested a refund from DevSlopes and bought this. The instructor is very straight forward and the examples are very good. 
I am trying to learn how to use overlays on mapkit to simulate the grid from the dragon radar on a map, I am still very confused.
Well, you got me to sign up for your newsletter.
Thanks! You should download my [free Natural Swift video](https://gumroad.com/l/natural-swift) while you're waiting ‚Äì it sends you a whole bunch of discounts on my other books :)
I agree ! This course is the best and instructor is excellent !
My first Swift app. Nothing big, interesting or complicated. Gotta start somewhere though (and I fancy a change from web based stuff).
I'm still looking for a hobby project but I can't come up with any ideas.
i literally said that this is the advice every online forum gives. i literally said i didn't name anything incorrectly. 
yes.
For the most part, arrays will do what you need. However, for large structures linked lists may be faster, especially if you are adding and deleting items in the middle frequently. Imagine, for example, if you have a list of structs that are a megabyte in size each like a video frame (not a pointer to a buffer, but the raw pixel data). You never want to copy those structures once they are created. Also, in the old C/Pascal days, arrays were always contiguous memory so inserting items in the middle required large memory moves to shift everything down. That's not the case with NSArray or Swift's Array. 
Ahh - that makes more sense! Honestly not sure, sorry I can't help. 
Well fuck off and find your own fucking solution then dick. What do you expect when you post "it's broke, how do I fix it" and that's it. Stop being an asshole when people are trying to help you. Also you said the class name was correct and I specifically mentioned outlets that might have become disconnected. You're what's wrong with this sub and Reddit as a whole. 
That's only half true. If you want a stable (if way less exciting than the average) software development job, there is an entire industry sector based on maintenance and very incremental, careful development of enterprise software. These systems are often based on language and environment versions that are out of date right now, but still won't be updated for years, if not decades. You can totally make a career out of that. A well-paid one at that. It's just not as exciting and flashy as working on innovative projects, which is an absolutely valid caveat.
This is the third time you've asked about this without giving anyone here anything to work with but a vague description of the problem. Unless you can provide people with more information, you're not going to get any further.
This probably will elicit eye-rolls from people but my background is PHP/MySQL, which is a simple and very ubiquitous backend. (Facebook, for example, was built originally on PHP, and I believe many parts of it still run on PHP? But it's been a while since I've looked into it.) It seems like Python is really hot because Google has been pushing it, but I'd still personally recommend PHP for any beginning hackers because it's really easy to understand and fumble through. With only a couple hours of work (for a beginner), you can have a database going and serve data to your app through a rough API. Why is web dev important for iOS dev? Unless you're storing data only on the users device, you need some sort of "cloud" for databases / user information. I see a lot of devs on here using Firebase and similar services, which is basically "backend without managing infrastructure", but honestly I think it only strengthens your marketability if you have any experience developing a web backend--not only can you do it yourself if needed, but you have the knowledge necessary to know what is capable, which expands your mental toolbox. Personally, I like to be in "full control" of the entire stack that operates my app. I want to design and control the database structure and the API that my app pulls data from. I think some people learned with Parse that using a third party backend can eventually bite you in the ass. You're always at the mercy of what they support and how fast they update their frameworks... that's no bueno for me.
Whenever you think linked lists are better than regular arrays, you are probably wrong. They need to be very large before it becomes an advantage. This is due to the memory hierarchies in modern CPUs.
In viewDidAppear, delete all the viewControllers from your navigationController's view stack except the root and the top. That way you won't dismiss your VCs before displaying the next. Or don't present new one, just reset the state of the current one.
We just released our new Notification service. It helps apps personalize the timing of notifications to each individual, based on when they will actually get value from the content. You can read about it here, [Set Blog](https://blog.set.gl/stop-sending-notifications-that-dont-matter-an-introduction-to-set-sdk-notifications-13f295bb07a6). Our goal is to help you make it better for your users, get 1 click from 1 notification instead of 1 click from 6 notifications. We're really excited for developers to try it out, let me know what you think.
currently working on more levels for Octopuz. Octopuz will launch October 2nd. See progress here: www.chainreactiongames.org/octopuz
I'm making a promotional SpriteKit game for a wine shop in Boston with a very offbeat style. Inspiration comes big time from Legend of Zelda and The World Ends With You. A series of rooms with encroaching enemies you have to dispatch using a limited set of skills gained from collectable vintages of wine ‚Äì each loosely based on an existing independent wine label. I've toyed around with SpriteKit before. This will be my first full project with it.
i'm being an asshole for pointing out that you fail to read? well i apologize for hurting your feelings. i'm what's wrong with reddit but people who fail to read what people say aren't? that makes a whole lotta sense coming from a sensitive individual such as yourself. 
if you can't help, don't comment. it's simple. if you need more information, ask. it's simple. people on this sub are so sensitive. 
I haven't used Kotlin; I'm curious about what's so much better about Kotlin's type inference? Is it compile times (which can be terrible in Swift), or is there some fundamental thing that's more powerful?
I'm curious, what about Swift could be simpler? Or alternatively: can you give an example for something that is much simpler in Kotlin than in Swift? I don't see any examples for this in the article. I personally see the two languages kind of like "twins" - very similar in terms of language features, both are a modern "replacement" of an older language that has accumulated some cruft but won't go away anytime soon (Java/Obj-C), while providing great integration with the older language. Both have app development for a mobile OS as the main use case (I guess, in the case of Swift, it's OS X too), but can be used in server-side development as well.
Where do you find these? All the enterprise maintenance jobs I've seen are anything but "careful". That's the reason there's so much maintenance!
If you know all the things you didn't do wrong, then you don't need our help. It's the other one.
&gt; if you need more information, ask. it's simple. It sounded to me like he did. Why do you insist on responding only to the *tone* of the questions asking you to post the source code, rather than just posting the source code? You're driving this train off the tracks yourself.
If you can't provide what people need in order to help you, don't ask for help. It's simple. People have asked, you haven't responded with more information. 
Since you want to go on the topic of not reading, read my answer again. Not one time did I say your class name is wrong. I specifically mention iboutlet variable names and connections. Stop being a self righteous douche bag for once in your life. If you pulled your head out of your ass long enough to look around you might find your own mistake. 
Oh and now it looks like you've gotten a connection and it's crashing your project cause you fucked something up and can't figure it out. Don't help this guy. He's a mega asshole who thinks he knows it all. Check out his last thread today where I tried to help him 
Oh and now it looks like you've gotten a connection and it's crashing your project cause you fucked something up and can't figure it out. Don't help this guy. He's a mega asshole who thinks he knows it all. Check out his last thread today where I tried to help him 
Watch LetsBuildThatApp‚Äôs Firebase Chat App tutorial on YouTube. He has a part where it displays every user that‚Äôs signed for the app up in a TableView. You could use that for reference.
You could do web scraping, but that can be a tedious thing to get into. Essentially you need to find news or other websites to search and parse the content on the page to extract the scores. Some APIs like this are expensive because it's costly to put in all that data. I've known a couple folks who worked on data entry at the score on the esports side for putting in winnings &amp; results of matches.
Except for some really niche cases, stick with arrays. But if you want to polish your data structure knowledge, implement it and use it where you don't actually need it.
I guess you could. But wouldn't it be easier to have a view pop up with whatever you are displaying? Really comes down to what you're trying to do and why. 
Unless you can find a public api to use that doesn't ask for money.
I've done similar for a uni assignment. If there is no viable webservice you have to do webscraping. My suggestion would be to make the app first, and make it work with mock data. Afterwards, make some proof of concepts scraping some websites. Then, host a server and merge the data from the different scrapers, and then hook your app up to it. I can send you some code from my scrapers (I scraped IMDB, RottenTomatoes etc). Using JSoup is easy as pie. 
I never claimed to know all the things i didn't do wrong. I said the things people are saying is wrong isn't wrong. 
Saying "we need more information" isn't asking for information. Asking for information is asking for the specific information needed.. I have no idea what information you think you need to help. 
Tell me what you need - it's simple. I made a post intended to spark a dialogue but all i got is upset people telling me they need "information" but not asking for the specific information they need. 
"renamed/changed the class" sounds like saying the class is incorrectly named to me. 
&gt; who thinks he knows it all. that makes zero logical sense in a post where i'm saying "i don't know this. help". ??? 
I've only been working with Swift for a couple of weeks now but, I'll subscribe and listen in!
This is the right answer. The advantage of a LL over an Array has nothing to do with functionality. Anything you can do with a LL you can also do with an Array and an Int to track your current index. The LL has a number of advantages and they all center around memory. Since most Array implementations are just blocks of contiguous memory which can be accessed with a value representing the size of a single entry, and an index you run into some limitations. For example, if you wanted an array which will hold 10 items, each with a size of 1 byte, you would need some memory on disk which is 80 bits long. Then when you want to access the item at index 5, you go to the address of the array, and then increment that address by 5 (our target index) multiplied by the size of an individual item (1 byte, or 8 bits). By adding that offset to the array's initial memory address, you get the address of the 5th item in the array. Great. So no we know how arrays work. They sound easy and awesome. So whats so great about a LL. Well it was that word "contiguous". The array has to have all the memory in line in order to work. Which means once you fill up all 10 slots in your array, and you want to add an 11th, you have to allocate a new portion of memory big enough to fit 11 items. Then copy the original 10 over, and add the new 11th. Since a LL is made up of 2 properties, a value, and the memory address for the next item in the list, there is no limitation to where that next item must be. It doesn't have to be contiguous memory. You could have one object in memory over here, and then the next item somewhere else completely. This means that mutating the LL is extremely easy to do. 
Code? Error text?
Working on trying to marry Vapor and Cassandra db.
&gt;hooked up an Iboutlet to either the view controller for your table or the table view cell class and deleted/renamed/otherwise changed it Reading comprehension is not your strong suit. I said your outlet got changed or renamed not the class. If you don‚Äôt know the basic syntax to communicate with other developers in, don‚Äôt act like you do. 
Don‚Äôt even try. This guy is a straight douche canoe
Your responses are all self righteous and condescending. You act like you know what‚Äôs wrong when people try to help you and give them shit for it. Your attitude is why you will never be a good developer. Always the bottom of the barrel. 
**`FilterKey` should not be an enum. It should be a `protocol`.** If I am reading your code correctly, it seems that each `FilterKey` case exists to encapsulate data that can be turned into a key-value pair. protocol FilterKey { var parameter: (key: String, value: String) { get } } struct NameFilterKey: FilterKey { let name: UserFilterValue var parameter: (key: String, value: String) { return ("name", self.name) } } Enums are almost the correct solution here, except the volume and variety of data that you're trying to encapsulate means a protocol is a better solution. Each enum case has little, if any, relationship to the other cases. What binds them is the common functionality that they provide. In this case, providing a key-value pair.
 extension Optional where Wrapped == String { var nilIfEmpty: String? { guard let strongSelf = self else { return nil } return strongSelf.isEmpty ? nil : strongSelf } } This method is unnecessarily inefficient, as you're unwrapping the string and then re-wrapping it when it's being returned. You're doing a great deal of unnecessary work to avoid simply writing, guard let title = textField.text, title.isEmpty == false else { return } and stuff.filter { $0?.isEmpty == false }
i'm on mobile. &amp; the error text says the class is not key value coding-compliant for the key 'parksTableView'. the parksTableView is properly connected to the code. the parksTableView is properly named. i've attempted various different combinations of code to try to fix the crash. 
Swift code is so far removed from the metal, that it's a little bit of a fool's errand to try to outguess the compiler and optimiser as to the best data structure to use. Start simple. Use the standard library. Profile your code. Refactor.
if you want to talk reading comprehension then you should talk to yourself. is an iboutlets name change not something along the lines of the class name? do they not both have to be properly named in order for the app to work? if you're going to pretend you can talk about iboutlets without talking about class "or something along those lines" then it seems you're solely here to feel better about yourself. 
you're not logical in the slightest. i hope coming to a post like this has adequately made you feel better about yourself. at least then something would come from you being here. 
That‚Äôs alright. I know I‚Äôm a good developer and I know your not. So knowing I‚Äôll never have to deal with you on a daily basis is comforting. Go ahead and reply, we both know youre a last word freak as soon in other threads. 
No an iboutlet name change is not the same thing as changing the class name. Your app won‚Äôt compile if the class name is wrong. Your app will compile and crash if the outlet is messed up. Now do you see why I suggested looking at that. It‚Äôs not that hard to not be a douche canoe to people when they‚Äôre trying to help. If you want someone to actually help you put your code in a git repo that people can actually look at. You definitely seem like one of those last word freaks, which makes you look even more stupid because you also have no idea what your talking about
Build an app. Make mistakes. Ask questions. Learn. Build another app.
"along the same lines" i'm not even going to bother with whatever hypocritical insults you typed up to feel better about yourself. if you can't understand that iboutlets and class names are connected &amp; "along the same lines" as a said in my post then i can't help you understand anything. 
When you become a senior dev at a fortune 25 bank you can lecture me about iOS development. The fact that you can‚Äôt make a simple table view work and then argue with people trying to help speaks volumes. Go ahead and reply, we both know last word freak can‚Äôt help themselves 
I don't understand what you're saying, could you explain further? Not trying to argue or insult, just looking for legit opinions on this course. I pay for Treehouse, but at $15 CAD for unlimited access to this course, I'm super interested in going with it. 
UPDATE : Back online
So that explains why I couldn't validate my archive
Kotlin has [smart casting](https://kotlinlang.org/docs/reference/typecasts.html), which functions similarly to guard in Swift. Example. Suppose you have two classes, Foo and Bar, which extend from FooBar. FooBar implements the .bar() function, but only Foo has the .foo() function: Swift: func fooBar(_ fooBar: FooBar?) -&gt; Float{ if fooBar == nil { return 0.0 } if fooBar is Foo { return fooBar.foo() //Compiler error in Swift, even though we know fooBar is of type Foo } return fooBar.bar() //Compiler error in Swift, even though we know fooBar can't be nil } Kotlin: fun fooBar(fooBar: FooBar?): Float{ if(fooBar == nil) return 0f if(fooBar is Foo) return fooBar.foo() return fooBar.bar() } or shortened further: fun fooBar(fooBar: FooBar?): Float = (fooBar as? Foo)?.foo() ?: fooBar?.bar() ?: 0.0 Of course it isn't terribly difficult to work your way around that problem in Swift, but being needlessly explicit can get a little tiresome after a while. 
I can see why `$0?.isEmpty == false` was used, but `title.isEmpty == false` is unnecessarily redundant when `!title.isEmpty` will do.
That's missing the big picture. Nowhere in Apple's Swift documentation does it say when *anything* is stored on the stack or in the heap. Mike's article was clearly meant to be elucidative, not authoritative. There's a boatload of rules encoded in the Swift compiler for when objects are allocated in which place, and I'm sure the exact details change from time to time. I looked in the compiler source for 10 seconds just now and found a rule that says "Don't stack promote any allocation inside a code region which ends up in a no-return block", for example. Nobody can learn all of these. You're not supposed to. In order to understand structs and classes, programmers need to understand values and references. They should know that the stdlib uses CoW for collections. They *don't* need to understand how Obj-C used to use the stack and heap, and unless you're pulling it apart your object code with a memory dumper, you really can't know for sure where it's ending up in the Swift world, anyway. This is an incorrect mental model. &gt; I expect actual structs to always be stored on the stack, and your link doesn‚Äôt contradict that. But *why* do you expect that? Apple has never said that must be true (AFAIK). It's clearly not required, for value types (since there are already cases where value types must be heap-allocated). For one's performance intuition, it's no longer useful to think of stack/heap as "fast/slow", since most value types are wrappers for reference types, anyway (collections, non-trivial strings, protocol values, indirect enums, etc). This is an assumption about an implementation detail that may or may not be true, today or in the future. It's probably not wise to build one's mental model of a programming language on implementation details, especially one changing as fast as Swift is.
[This video](https://developer.apple.com/videos/play/wwdc2015/414/) shows how to implement your own CoW structs, using `isUniquelyReferencedNonObjc()` (which *is* [part of the language](http://swiftdoc.org/v3.0/func/isUniquelyReferencedNonObjC/)). The Swift compiler team [notes](https://github.com/apple/swift/blob/master/docs/OptimizationTips.rst#advice-use-copy-on-write-semantics-for-large-values) that "The easiest way to implement copy-on-write is to compose existing copy-on-write data structures, such as Array". That is, you don't get it just for being a struct, but you do get it for free if you keep all your data in an Array.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [apple/swift/.../**OptimizationTips.rst#advice-use-copy-on-write-semantics-for-large-values** (master ‚Üí 264ac94)](https://github.com/apple/swift/blob/264ac94c44294526fa02d0f908842c134978c39e/docs/OptimizationTips.rst#advice-use-copy-on-write-semantics-for-large-values) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dmnypgl.)^.
I remember the bit about sticking to existing data types for best results, I hadn't known there was a protocol that you could implement. If a struct contains functions and existing CoW data types, is it still CoW?
ISTM, it is very rare that one needs to distinguish null from "", unlike numbers (zero is a valid number) or dates (no blank date) or other types. 
`title.IsEmpty == false` actually computes `title?.isEmpty == Optional(false)`. `!title.isEmpty` won't do, because `title` is optional.
I'm almost certain (can't check right now) that there is no "unwrapping then re-wrapping" going on after optimization. Plus, if you're so concerned about redundant optional wrapping, `$0?.isEmpty == false` does just that. It computes `$0?.isEmpty == Optional(false)`
Since the blog post talks specifically about `UITextField`, there is the possibility of just checking against the `hasText` property which is defined via the `UIKeyInput` protocol. Both `UITextField` and `UITextView` conform to this but non-input types (eg. `UILabel`) do not. func validateText(in field: UITextField) -&gt; Bool { guard field.hasText else { return false } .... other checks ... return true } This may not be so useful if you need to unwrap the text but is another approach in case you don't.
Do you know how to use the `if let` syntax? Here's an example: if let unwrappedAge = Int(age) { // unwrappedAge has type Int and was assigned the value of age } else { // unwrappedAge was nil, and could not be unwrapped } Go ahead and try to solve it, I'd be glad to help if you need more hints.
LOL my friend was pissed as hell wondering about the same thing yesterday
That is incorrect. `title` is safely unwrapped during the `guard` statement and therefore not an optional. Both `title.isEmpty == false` and `!title.isEmpty` should suffice, I guess it's just the developer's preference.
That is quite neat! Got to say though the "shortened further" version is almost exactly the same in Swift: `func fooBar(fooBar: FooBar?) -&gt; Float { (fooBar as? Foo)?.foo() ?? fooBar?.bar() ?? 0.0 }`. Also, there's a cost/benefit thing going on for smart casting, because, by having smart casting, the type of a variable can now change. You simply don't have that in Swift, which simplifies the mental model of thinking about code a little bit. Smart casts only change the type to a more specific type though, so it's not dangerous or anything. Swift just forces you to give the casted thing a new name (with some exceptions), so that the type of a variable doesn't change. An example why one might consider changing types problematic (using swift syntax, I'm just pretending smart casting exists): func foo(foo: FooBar) { print("A") } func foo(foo: Foo) { print("B") } // later... // let bar: Foo = FooBar() // ... even later // if (Foo !is FooBar) { /*whatever*/; return; } // &lt;- important line // ... lots of thing happen // foo(foo: bar) Given this code, the last line prints "A", right? But, if I remove the "important line" at some point later, I get "spooky action at distance", because the last line now prints "B". Could introduce a sneaky bug. I'm not saying that this is a huge deal-breaker for smart casts, but it is something to consider, and a possible reason why the Swift guys did not go this way.
You cant really go wrong with a small $15 course online, even if its terrible you‚Äôll still know more than you did going in. At the end of the day, making an app on your own feet will be the best way to really learn how to code. But these kinds of courses are a good way to get your feet wet.
Could that be a reason why I am getting a lot of false Apple e-mails?
I never had used Udemy as well. This is the first course I bought. I haven‚Äôt finished it yet, but it‚Äôs worth the $15 you‚Äôre going to spend.
How long ago did you start getting spam?
I think you misunderstood the commenter. He didn't propose that as an alternative implementation of `nilIfEmpty`. He was making the argument that `nilIfEmpty` is hardly necessary to have, if you could just write `s?.isEmpty == false` directly. Thus, there is no guard statement that conditionally unwraps `s` in such a context.
 (stringOrNil ?? "").isEmpty ? nil : stringOrNil
In sectors where precision is key, so they have to use reliable systems that have worked for years already, but change is frequent due to changing laws or guidelines. The one I have experience with, since I'm a consultant in the field and can therefore vouch for the existence of those jobs I'm talking about, is banking. Lots of old systems that need to change all the time.
There is also a free introductory [Udemy course on Youtube](https://www.youtube.com/playlist?list=PLxwBNxx9j4PW8bsVaXia9c20I87YEGNRu).
[ESPN Devcenter](http://www.espn.com/static/apis/devcenter/docs/scores.html#using-the-api) Looks like espn has a public api for a bunch of things including sports scores. Though they seem to have 2 tiers above free api access, not sure what the limitations are but it'd be a good place to start.
Vapor 3 and OpenKitten and all related libraries. Vapor 3 is a rewrite of all libraries. Asynchronous APIs, Routing, JSON, JWT all the way up to Vapor and the ORMs Some pure-swift rewrites Pure-swift MySQL Pure-swift PostgreSQL https://github.com/vapor/vapor/issues/1138 progress is going strong https://github.com/vapor/vapor/pulls many PRs still unreviewed, but ready for merging into the WIP beta And my older projects at OpenKitten are going to need an update for Swift 4 and a major update, too. Meow (MongoDB ORM) 1.0 for MongoKitten 4 And MongoKitten 5 Then another Meow version (Meow 2.0) on MongoKitten 5
They were talking about guard let title = textField.text, title.isEmpty == false where `title.isEmpty == false` can be replaced by `!title.isEmpty`.
`title.isEmpty == false` and `!title.isEmpty` are functionally equivalent. I'm choosing the former, as I believe it's more readable. I read the former as "title is empty, is false", but the latter as, "not title is empty", which is linguistically awkward. Also, at glance, it's easier to miss the presence of the not operator, and so, misread the statement. The assertion that `== false` is "unnecessarily redundant" compared to using the not operator, is a more than a little hyperbolic. The approach I've taken is an explicit boolean expression, where yours is an implicit boolean operation. I would go as far as to say that, if anything, `!title.isEmpty` is "unnecessarily redundant" as you are taking a boolean value, **inverting it**, then *that* value is being compared. Where `title.isEmpty == false` is comparing the value directly.
Just add the ! to unwrap the value and it'll work let userInputAge: String = "34e" // given by problem func checkAge(age: String) { let possibleAge = Int(age) // converts input to integer if possibleAge! &lt; 18 { print("Welcome!") } else { print("Sorry, re-enter your age") // prints if conversion is unsuccessful } }
&gt; I'm almost certain (can't check right now) that there is no "unwrapping then re-wrapping" going on after optimization. var nilIfEmpty: String? { guard let strongSelf = self else { return nil } return strongSelf.isEmpty ? nil : strongSelf } `nilIsEmpty` returns an `Optional&lt;String&gt;`. The return line of the function implicitly wraps `nil` or `strongSelf` into an optional. **That is all we know for sure**. Whether the optimiser inlines the method, and optimises away the check, we can't be sure. We shouldn't write sloppy code that we hope the optimiser tightens up. &gt; Plus, if you're so concerned about redundant optional wrapping, $0?.isEmpty == false does just that. It computes $0?.isEmpty == Optional(false) I don't know what the phrase "redundant optional wrapping" means, in this context, as there is no redundancy is needing to unwrap the optional. We must do this to filter the array. (Did you read the article, or just my comment?) `$0?.isEmpty == false` is equivalent to switch $0 { case .some(let string) where string.isEmpty == false: return true default: return false } As you can see, there is no redundancy in unwrapping the optional. It is essential to know whether the string is empty or not.
I don't really understand the point of this whole article. Nil and an empty string are two different things, I'm not sure why the author would want to conflate them.
Wow a lot of people are pooing all over this idea but it's pretty convenient sometimes, and he's hardly the only person using it (http://www.russbishop.net/improving-optionals). I use a variation of this as well for strings and arrays. I've also got a nilIf and nillUnless that take a predicate. Sometimes it's convenient to be able to nil out certain cases in the middle of a chain of method calls. This is especially true for "empty" cases that are often used as defaults. It's not something I use all over the place, and it's certainly not the only way to do it, but sometimes it's the most concise and readable option.
`We shouldn't write sloppy code that we hope the optimiser tightens up.` No, but we shouldn't let micro-optimsations deter us from the most readable code we can write. When I said `redundant optional wrapping`, it should have been `redundant optional ***re-***wrapping`. That was your complaint about the "sloppy" original code, yet your alternative, `string?.isEmpty == false`, does it too: In the expression `string?.isEmpty == false`, [this `==` function](https://github.com/apple/swift/blob/6c7d93491fe2bf42553fbccff529aeddc938796c/stdlib/public/core/Optional.swift#L356-L365) is being called: @_inlineable public func == &lt;T: Equatable&gt;(lhs: T?, rhs: T?) -&gt; Bool { switch (lhs, rhs) { case let (l?, r?): return l == r case (nil, nil): return true default: return false } } Both arguments have to be optional. `string?.isEmpty` is already an optional, whereas the `false` isn't. It's implicitly wrapped into an optional, only for it to be conditionally unwrapped within the `==` implementation. It's guilty of exactly what you didn't like in the original code. In any case, there's a much cleaner, clearer and simpler implementation: extension Optional where Wrapped == String { var nilIfEmpty: String? { return self.flatMap{ s in s.isEmpty ? nil : s } } } print(Optional("abc").nilIfEmpty as Any) print(Optional("").nilIfEmpty as Any) print(Optional&lt;String&gt;.none.nilIfEmpty as Any) let optionalStrings: [String?] = [ "abc", "", nil ] print("optionalStrings: \(optionalStrings)") let nonEmptyStrings = optionalStrings.flatMap{ $0.nilIfEmpty } print("nonEmptyStrings: \(nonEmptyStrings)") 
&gt; I'm choosing the former, as I believe it's more readable. I disagree. Whenever source code does something simple, but not in the most obvious and direct way, I have to slow way down to try to figure out why. Negating a boolean in any way other than `!` is unusual, and demands extra care from the reader. Another commenter here, for example, is trying to justify it by assuming the expression is an Optional, and that `!` won't work -- a false assumption, but not an unreasonable one if you look at this expression without context. &gt; I read the former as "title is empty, is false", but the latter as, "not title is empty", which is linguistically awkward. They're both awkward, as English, but I'm not sure why English-ness is relevant. 99% of source code is "linguistically awkward". ("Guard let strong self equals self else"?) I'd like to see any Swift program where more than the occasional 2 or 3 words are linguistically graceful, because I doubt it exists, and if someone did write that way, I suspect it'd be awful to read. Source code is not English, and was never designed to be, and it wouldn't be any better if it were. We shouldn't go out of our way to make it awkward, but using `!` to negate a boolean isn't that. &gt; The approach I've taken is an explicit boolean expression, where yours is an implicit boolean operation. What do these words mean here? A unary operator is "implicit", while a binary operator (with a literal constant) is "explicit"? By that logic, would the ternary operator (with two literal constants) be super-explicit? Would that be even better? title.isEmpty ? true : false 
Wats? /r/titletlegore
True, but most posts here are about "some rare thing I needed to do (and how Swift handled it)". Posts about "I needed to make a class with 2 string fields" or "I needed to loop over all elements of a string array" don't tend to be very interesting. :-)
My guess is the reason this is done is so that you know exactly what happens when you access someVar. It's a form of encapsulation. This is how I see it: If Swift gives you the power to do more than get/set values in getters/setters then when using open properties you should never assume there isn't a side effect to what you're doing. What if you were using someVar and it was setting other types of values at the same time somewhere else in the framework? By doing this you have some sort of documentation. _someVar is a private var while someVar is what you can access everywhere and you're saying that manipulating someVar is the *exact* same as manipulating _someVar in regards to getting and setting the variable so at no point do you need to worry about side effects when it comes to this That's just my take on it. It could be right or it could be wrong. Idk. Just my educated guess
Have not been through the update for iOS 11 but the previous one for iOS10 is one of the better Swift courses on Udemy. Hard to go wrong with the price.
Interesting thanks, so _someVar is just aesthetic right, - its the file private that sets the permission? In my example above the code wouldn't behave differently if the get/set wasn't there right?
This is utterly pointless in Swift.
Probably a throwback to a developer's previous language best practices. For instance, in C# we would use properties for all public fields, because then we could modify existing behavior and maintain binary compatibility (you couldn't just convert a public field to a property and not risk breaking something). Not sure if that applies to swift.
Since async functions are just a generalization of functions, I'm not sure I understand why the "async" keyword needs to exist. Is that just for backwards compatibility reasons? That seems to be [the primary reason it exists in C#](https://blogs.msdn.microsoft.com/ericlippert/2010/11/11/asynchrony-in-c-5-part-six-whither-async/). 
Thanks
You're missing the point, by conflating the two separate pieces of code. guard let title = textField.text, title.isEmpty == false else { return } This is the alternative I was proposing to avoid **unnecessarily** unwrapping and rewrapping code. Because, in the original, the string was being unwrapped, tested for whether it was empty, re-wrapped, then returned, **then** unwrapped again if it was both non-nil and non-empty. *Whereas*, my alternative was trying to unwrap the value, then check for emptiness (which would only happen if there was a value). In the other piece of code, stuff.filter { $0?.isEmpty == false } the `false` value is indeed being wrapped into an `Optional` *by the compiler*, because of the limitations of the parameter requirements of the equality operator. To me, there is a fundamental difference between an optimisation/transformation done by the compiler, versus, an optimisation you hope the compiler will make. This, in my opinion, is a completely acceptable trade-off between efficiency and terseness. I was not writing a complete and absolute condemnation of unwrapping and rewrapping a value. Sometimes it is avoidable and sometimes it is not. My point, was that the original author had not achieved efficiency, or *crucially* terseness in his code. &gt; No, but we shouldn't let micro-optimsations deter us from the most readable code we can write. The code presented in the article was not, *in my opinion*, more readable, and it was *knowingly* less efficient than the alternative presented. The larger point, I think, was that making your code more readable is an excellent goal, but the author did not achieve this at all. The alternatives presented were no more or less readable, and were *knowingly* less efficient. Efficiency can be sacrificed for readability, but neither was gained in the article. Just to belabour the point, conflating the two examples, makes my argument purely about efficiency, which wasn't my point. My point was that the extension suggested, achieved nothing, at a cost (albeit a small cost).
It'll only work if `possibleAge` does not contain a `nil` value. Otherwise it will crash. And even if you've already checked that the value is not `nil`, it's better form to unwrap it with an `if`, `while` or `guard` statement.
Well the code would behave differently if the get/set wasn't there. Here's an example for wanting to do something like this: Let's say at first we used _someVar but then there were changes in Swift's programming style and we needed to quickly update it so that the users could use the new style. Well, I *could* change _someVar to someVar but now I have to edit all _someVar and Xcode sucks at doing this. It would be easier for me to just create this new variable for the user to use so that way I don't have to touch any of my old code. If you did this change then removed the getter/setter from someVar then now someVar and _someVar are two different variables. So someVar wouldn't behave differently if you removed the get/set *but* _someVar would because unless that property is just as open as someVar then you'd have no way to update or retrieve the value in _someVar
So personally I taught myself iOS game dev using spritekit. Spritekit is used for making 2D games and I find it to be super intuitive and powerful. I mostly used the free tutorials on https://www.raywenderlich.com/ They have a ton of swift game tutorials that are super helpful for learning different features of Swift/SpriteKit. If you really like it you can pay to unlock more, but they should have more than enough to get you started. Good luck out there, and have fun!
&gt; It'll only work if possibleAge does not contain a nil value. true, but an if statement that checks whether the value is nil or not should do the job I think. Something like if possibleAge != nil { if possibleAge &lt; 18 { print("possibleAge&lt;18") } else { print("possibleAge&gt;18") } }
vs stringOrNil.nilIfEmpty now chain another method call onto it an watch the ?? ? : version get even uglier. It's not lifechaning, but it's a nice little utility method to have kicking around.
Recommendations yes: - since you already know about Swift and iOS take a look at sprite kit and scene kit! There are tons of tutorials out there - prototype, prototype, prototype and keep doing it. It will help you get confident in your skills and help you find a fun project to work on - find teammates! A game is a huge endeavor and very few of them are 1-man affairs. Playing with other testing, sharing code and ideas will help you stay motivated and hungry - that said it is useful to have a global idea of what all aspects of game dev are like. So make sprites, scan them and put them in your prototype. Record sounds effects, write a story, imagine a landscape and put it in your game. Exercises in imagination are very important. The technology (Swift and SpriteKit) are only a tiny portion of what makes game d√©veloppement in my experience. The people, the project and your passion is what‚Äôs most important.
&gt; I disagree. Whenever source code does something simple, but not in the most obvious and direct way, I have to slow way down to try to figure out why. Negating a boolean in any way other than ! is unusual, and demands extra care from the reader. I said, "I believe". I wasn't making an absolute assertion. You are making an objective statement on a completely subjective issue. &gt; They're both awkward, as English, but I'm not sure why English-ness is relevant. 99% of source code is "linguistically awkward". ("Guard let strong self equals self else"?) I'd like to see any Swift program where more than the occasional 2 or 3 words are linguistically graceful, because I doubt it exists, and if someone did write that way, I suspect it'd be awful to read. Source code is not English, and was never designed to be, and it wouldn't be any better if it were. We shouldn't go out of our way to make it awkward, but using ! to negate a boolean isn't that. You're having a little argument with yourself there. I never said it should be English. I said the way **I** read it, comes out linguistically awkward. The issue is the logic of the statement, not the conversion to a verbal language. You're arguing with me over my opinions/preferences. &gt; What do these words mean here? A unary operator is "implicit", while a binary operator (with a literal constant) is "explicit"? Explicit: stated clearly. Implicit: implied. Boolean: a true or false value. Expression: evaluates to a value. An "explicit boolean expression" is an expression which evaluates to a boolean value, in an explicit manner. title.isEmpty == false Here, the result of the equality operator is a boolean and we are *explicitly* comparing a value (`title.isEmpty`) to a boolean (`false`). The desired outcome of the expression is explicit. We want the value of `title.isEmpty` to be `false`. An "implicit boolean expression" is an expression which evaluates to a boolean value, in an implicit manner. !title.isEmpty Here, the outcome is implicit. As it is not stated that we are hoping the value will be true. *It is implicitly implied*. &gt; By that logic, would the ternary operator (with two literal constants) be super-explicit? title.isEmpty ? true : false Yes, this is explicit. As the return values are clearly stated. &gt; Would that be even better? That's subjective.
lol it was maintenance. That is why they were down.
I wish they gave us warning like
My day job primarily involves developing a macOS app in Swift ([Diamond](https://www.diamond.io), currently in beta testing). In my spare time I've long been working on a programming game of sorts. Players use Lua to program the behaviour of their ships, and I needed a language that could call the C-based Lua libraries directly. Swift was an ideal choice, high-level and performant, and I've since started using Vapor as the web server which has been enjoyable.
In addition to their free tutorials, [2D Apple Games by Tutorials](https://store.raywenderlich.com/products/2d-apple-games-by-tutorials) is an excellent introduction to SpriteKit. I find it well written and it does a solid job covering the bases (physics, tile maps, Game Center, and so forth). It assumes some level of Swift knowledge, but I suspect basic proficiency is enough. There's also a [3D Apple Games by Tutorials](https://store.raywenderlich.com/products/3d-apple-games-by-tutorials) if you want to learn SceneKit later.
guard let
Are the needs of this specific hospital such that they need their own app? It‚Äôs something that an off-the-shelf product or app can‚Äôt cover? I‚Äôm essentially trying to politely ask whether this is redundant work; and ask whether this is something other hospitals would benefit from also.
While syntactically correct, idiomatically and for OP's purposes the following would be more correct: if let intAge = possibleAge { if intAge &lt; 18 { // Too young } else { // Just right } } else { /* nil value */ } My own preference on the whole matter would be func checkAge(fromString input: String) { guard let age = Int(input) else { print("Please re-enter your age even though we're not in a loop") return } if age &lt; 18 { print("Sorry, you must be of majority to use this application") } else { print("Welcome") } } edit: Making that guard block escape
I might be interested. While I've done a little iOS development, I may be able to fulfill a testing role as well.
https://www.udemy.com/swift-3-mastery-and-ios10/ 
There might be off the shelf apps that could do this but for myself (and hopefully others) this is also about gaining iOS development experience using Swift. Currently this project is tailored specifically to the Nepal Cleft and Burn Center but a long term goal would be to make a platform which could work all types of remote hospitals.
Why aren't more people recommending Apple's book on Swift? I mean I they created the language. The book is called *The Swift Programming Language (Swift 3.1)* it covers everything from the straight up basics to more advanced topics. I think this book is a great start.
Exactly this. SpriteKit is one of the easiest and most practical ways to get into iOS game development. It's inherently compatible with iOS and you'll learn about things like 2D physics, collision detection and animations just by writing SK code. It's not a particularly powerful 'game engine' (compared to things like Unity2D), but it's definitely one of the best ways to start.
yeah i see what you are saying. I found out before it happened.
I have been working on [a library](https://github.com/brightdigit/swiftver) in Swift 4 for parsing and managing version and build numbers based on your application plist but also any version control metadata.
It's done that way to be able to extend the getter or setter at some point in the future.
In your `else`, it's not `age was nil`, but rather `unwrappedAge was nil`
Ahhh I see now I need to use a nested if statement. Thanks!
How did you find out? Just so I know for nextime
The former block of code you put worked. THANK YOU!!!
Very useful API, definitely helped with my own color scheme struggles
Interesting point about variable types changing. In practice, I've never had an issue with that. It helps that IntelliJ highlights any code that's been smart-casted and shows a tooltip when you hover over it, which makes it pretty clear what's happening, harder to screw up. The other thing I find a little tedious with Swift is having to manually add initializers for classes. class Foo(var a: String, var b: String, var c: Int) is so much simpler than class Foo{ var a: String var b: String var c: Int init(a: String, b: String, c: Int){ self.a = a self.b = b self.c = c } }
I just started, about 10% through. Very detailed, goes very slow but is starting to ramp up nicely. Very much recommend it, I‚Äôve made my $15 already with what I‚Äôve learned.
 func checkAge(_ age: String) { switch Int(age) { case .some(let age) where age &gt;= 18: print("Welcome!") case .some: print("Sorry, but you aren't old enough to use our app.") case .none: print("Sorry, something went wrong. Can you please re-enter your age?") } } 
Hey thanks for your reply! I really like your idea of using protocols. I've been playing with them, generics, and protocol extensions to make a cleaner and DRY API. So far not bad. I have work to do but when I get around to finishing it up I'll be sure to post my code for some much appreciated (and needed) review. Thanks again for the tip and perspective change of the problem :)
[Here](https://www.raywenderlich.com/139322/firebase-tutorial-getting-started-2) is a tutorial that shows you exactly how to do that with Firebase.
Yup, my mistake.
Is this something where you're in immediate need of an app, or more of a "let's learn app development while helping people"-type project? I'd be happy to help out for a good cause, but I have quite a bit of experience and am more interested in helping a hospital than guiding people through writing their first app (no offense of course).
No offense taken, we have most of the app working currently, but the multipeer connectivity and CouchBase syncing could use some troubleshooting. We are using trello and slack to manage development so if you're more interested in helping the hospital (which I totally get) you could just take tickets and make pull requests whenever you have time. This is definitely focused around helping the hospital first but since it's volunteer work we can't be super picky about experience level. Everyone works pretty independently. 
Yeah, I'm not sure why classes aren't like structs in Swift in this regard. It's not as if having a default initialiser keeps you from creating your own initialisers or anything.
I would be interested in this idea. I have basic experience in iOS Development. Just let me know with more details. 
Stored properties automatically synthesize the getter/setter and backing instance variable. To reemphasize the top comment: utterly pointless in Swift
No problem. I can't wait to see what you come up with.
Like this week I think, I received 3-4 spam mails talking about account violation
There is a critical (to me) down side to this: It precludes your ability to use the massive tool ecosystem for HTML. WSYWIG editors, live preview, etc. Tell me what you guys think about this: As I see it, such template pages are really just functions that map some model type `M` to a `String` containing the HTML content. Thus, wouldn't it be possible to create a templating language with only two special forms: 1. A special header that lets you specify the value of the type variable `M` 2. A way of starting denoting the start/end of a Swift expression From there, a pre-compiler step could be made that takes the content of this template file, converts it into a multi-line `String` literal (escaping characters as necessary), and putting it inside a function body with the properties that: 1. Its name is derived from the template file's name (e.g. `HomePage.htm`l -&gt; `HomePage(_:)`) 2. Has one argument of type `M`, set according to the special header's definition of `M` 3. Returns a string For example, a template file called `HelloWorld.SwiftHTML` could look something like this: {{model: Person}} &lt;!-- special form 1 --&gt; &lt;H1&gt;Hello, {{model.firstName}}&lt;/H1&gt; &lt;!-- special form 2--&gt; Could be automatically transformed a file `HelloWorld.SwiftHTML.swift` like this: func HelloWorld(model: Person) -&gt; String { return """ {{model: Person}} &lt;!-- special form 1 --&gt; &lt;H1&gt;Hello, \(model.firstName)&lt;/H1&gt; &lt;!-- special form 2--&gt; """ } From here, the template file is in a form that can be type checked by the Swift compiler. E.g. all interpolation segments like `model.firstName` can be checked, to guarantee that the model is indeed of type `Person`, and that `Person` contains a property called `firstName`. As a result, you have a template file that can be manipulated just like any other kind of HTML file, letting you take advantage of the massive tool ecosystem around HTML. At the same time, you are given static type safety by the Swift compiler, and you have the full expressiveness of the Swift language (you can use any arbitrary Swift expression within the `{{...}}` blocks), without the need to implement some kind of pseudo-swift DSL.
You can just use `stringOrNil.flatMap{ $0.isEmpty ? nil : $0 }` In most cases where you use nil coalescence prior to the start of an optional chaining expression, you should probably be using [`Optional.map(_:)`](http://swiftdoc.org/v3.1/type/Optional/#func-map_) or [`Optional.flatMap(_:)`](http://swiftdoc.org/v3.1/type/Optional/#func-flatmap_) instead.
Based on the thread below I think you need help learning how to communicate with people and not just with your code. Not worth my time to even attempt to fix your problem with the way you've treated others on this forum. 
An excellent question! It's true that coroutines are a more general form of subroutine, and that any subroutine could be written as a coroutine that didn't yield (or "await" in C# and the proposed Swift syntax). So if the only thing that (conceptually) differentiates a coroutine from a subroutine is the presence or absence of "await" statements within it, couldn't we scan for these at compile time rather than requiring the whole function be tagged as "async"? I think the answer is "yes" but, much like the case with "throws", it's useful to set a policy at a top level of a function as to all the ways it can exit. That includes a "return", a "throw", and now for coroutines an "await". It makes for a more expressive contract and addresses whole classes of bugs we can prevent and sanity checks we can verify with this information. Also, to the extent actual implementation of coroutines and subroutines are different under the hood, it's good to have some explicit indication of which is which in our code. Why wouldn't we just use the same "under the hood" implementation for coroutines and subroutines seeing as we can model all subroutines as coroutines? We might and we'd have to know something about the actual ultimate implementation of coroutines in swift to say for sure. But it's usually safe in these matters to assume it has something to do with performance. ;-)
I've started a YouTube series called Swift Quick Shots. My goal is to create a few videos a week exploring ways to utilise Swift's language features to improve your code. This video is about sorting algorithms (it's sexier than it sounds, I promise). I really would love to hear your feedback (I do know I need a better microphone, and I can't do anything about my accent, sorry).
it's worth your time to tell me it's not worth your time huh? i guess when your only two options are to ignore it and move on with your life or comment to feel better about yourself, there's only one thing you can do. 
It was absolutely worth my time to call out your bs in hopes of warning others to not deal with you. 
"in the hopes of warning others not to deal with you" it's always interesting to see the lies people have to tell themselves. 
I know the likely answer but fuck you're toxic, enjoy struggling. 
i'm so toxic for being a punching bag that a bunch of overly emotional people can take their pint up anger out on - i'm sure. 
Odd I haven't had a single one
I'm not sure I understand why it's "useful", either, but let's say I accept that. What's the long-term game plan here? Do the Swift designers plan to keep stacking modifiers on function definitions for every possible calling subtlety that ever comes up, or do they think that this set (including async/await, from C#5, which is only a couple years old) is the last time we'll ever need to change it ([this time for sure!](https://www.youtube.com/watch?v=pc4IFIXcDcs))? 
Video linked by /u/applishish: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [Bullwinkle's Hat Trick 5](https://youtube.com/watch?v=pc4IFIXcDcs)|da6is9|2015-03-11|0:00:16|40+ (100%)|13,146 --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/applishish ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=dmqox3z\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v2.0.0
https://www.udemy.com/complete-ios-11-developer-course/
Gentlemen, we are in the presence of a troll. Bravo /u/CarneyAsada
Well, I think you're misstating a bunch of stuff here. First, you don't need to accept it as useful. If it seems dumb to you, you can just pretend it doesn't exist and keep using Swift the way you always have. Nothing will change (this is in line with Swift's goal re: progressive disclosure of complexity). There are a some people who decided they didn't like Swift error handling and use Result types instead of try/throws, for example. That's cool! Swift works great for them! Second, "every possible calling subtlety" seems a touch disingenuous. Changing the way a function can be called/exited/resumed is not very subtle. It'll be illegal to call any async function from a standard one, for example. Likewise, in the case of throws, we're talking the difference between returning a value and short-circuiting with an error instead. That's pretty nontrivial. If I have different types of callable routines that all require different handling at the callsite, and the only way for me to know how to handle each is to dive into the implementation of the routine (and all the routines it calls), I think I'd get pretty frustrated pretty quickly. But that's just my opinion. If you're interested in this topic, it's currently being debated on the Swift Evolution mailing list. It's pretty friendly! You should join in! Finally, coroutines date back to literally the 50s. Even Futures (which are implicit in the C# model but not the Swift one) are from the 70s. C# might have adopted them in the last few years, but they've been around long before that. But lets say that, despite 40-60 years of intensive research on this subject, tomorrow someone discovers a brand new conceptual container for routines (I mean this non-sarcastically. Quantum computing could hit in our lifetimes). What are the chances that this new concept would be an extension of coroutines? That is, what are the chances we'd have to write both "async" and "quantum" or whatever. Pretty slim. In all likelihood this new conceptual routine would have properties that make it very different than a coroutines or a subroutine (if not, it wouldn't be conceptually different). So it's not like we'd chain tens of words after our functions or anything. We'd always 0-2 that describe the contract on offer. We do that all the time in all sorts of languages for all sorts of things (see also: types). It hasn't caused any problems yet that I know of. Related to this: another topic being discussed on evolution right now is whether or note to make "async" imply "throws" thus making the two keywords mutually exclusive. It sounds like a something you'd be interested in. I'm just a not-too-bright blogger. Those folks are the people implementing the language. You should try to convince them ;-)
I wrote one that's free to read online, although you're welcome to buy the download edition if you want. It's called [Hacking with Swift](https://www.hackingwithswift.com/read), and it teaches you both iOS and Swift development using projects. It's written for Swift 3, but I'll be updating it for Swift 4 shortly. (And yes, if you buy the book you'll get the [update for free](https://www.hackingwithswift.com/update-policy).) Let me know if you hit any problems!
Is the project on GitHub (or similar)? Are there open issues? Are you open to pull requests? I think you would see better results if the answers to those questions are yes, rather than coordinating via Reddit and private messages.
Thank you for your concern, the project is in a private repo in git hub currently. There are open issues on a trello board. As this is not a large open source project I would like to coordinate with a smaller team directly.
What happens to the project if something happens to you? How does the hospital benefit from the project being private?
Again thanks for your concern.
Are those print statements placed literally right after the call to `observeSingleEvent`? I‚Äôm unfamiliar with that method and on mobile right now, but my first guess would be that it‚Äôs dispatching that closure to a queue, then continuing on to call those print statements. Depending on the queue, the closure is either racing the rest of `viewDidLoad` on another thread, or else is on the main queue and will wait for `viewDidLoad` to finish before running. Or are you seeing the in-closure print statements logged *before* the out-of-closure prints?
well either way I am actually using the data in tableView(cellForRowAt) and none of the data is showing up. Could that also be a race problem?
the closure is being run after the tableView(cellForRowAt)! How can I load data using observeSingleEvent and have the closure be called before tableView(cellForRowAt)?
Your `observe` closure could call `DispatchQueue.main.async { self.tableView.reloadData() }` once your data is loaded.
Hey before I got your response I just called self.tableView.reloadData() at the end of the closure. I have some experience with GCD but is your code just making sure its run on the main thread? PS: How do you make your code inline?
Yeah. Is this a Firebase database? I don't know what thread they run their closures on, but anything that updates the iOS UI should be put on the main thread for expediency and correctness. Inline code can be put between tick marks, `, found just above the tab key
Working on release 7.1.0 of [JTApplecalendar](https://github.com/patchthecode/JTAppleCalendar) an iOS calendar library for Swift. Video tutorials can be found [here](https://www.youtube.com/watch?v=wyh_DVFeH_w&amp;list=PLpqJf39XekqyUG7dxcqGO0JNprryysv9Q)
You say you're *new-ish* to Swift, but are you an experienced programmer or new to programming in general and uncertain about general coding practices? This information could help someone respond with a more relevant answer to your situation.
Hmm, I have been *dabbling* in programming since I was 12 (I'm 23 now). I understand some high-level programming concepts. I've explored different paradigms. With that being said, I would *still* say that you should consider me new to programming. I've never written anything substantial. A lot of basic design patterns like MVC are new to me. I may be familiar with some of the concepts, but actually implementing them in substantial code is new to me. The most useful thing, I think, would be for someone to look at what I've got here, and tell me what they might have done differently, and why. I'm just trying to become a better programmer, in general. Just something to start the ball rolling: The way I approached categorizing types/designations of Items was a combination subclassing Item and using the Sellable protocol. Is this the way you would have gone about it? I had my doubts, but this was what I settled with. It definitely has drawbacks. Could you point out some pros and cons? Or was the way I handled it okay? Obviously, that's just one aspect of my code. If anything pops out to you as unusual, or even good approach, let me know. Just trying to better myself.
UserDefaults only supports property list types (numbers, strings, dates, booleans, data, and arrays and dictionaries containing those). So you‚Äôll need to convert your types into those if you want to save them to UserDefaults. You could do that using Coding, or as you say you could just write code that saves an array of the numbers. It‚Äôs also worth considering that if you implement Coding for your type, it‚Äôs pretty much the same amount of work to just save it to a file rather than using UserDefaults, which may be a better choice if you have a lot of data (UserDefaults always keeps the data in memory for fast access, and setting unrelated defaults will still cause everything to be written out. For small stuff like most preferences that‚Äôs the right set of tradeoffs, but for user data it‚Äôs often not what you want).
Just a short look so nothing big here. for syntax formatting and smaller mistakes use SwiftLint. It will change ALL your brace placements, but it's Swift's default. Furthermore I think your romanize() method doesn't necessarily give you the correct result. What about MIX (1009). Just glanced at it, so I might be wrong. You might want to use a logger instead of debugprint/print/dump. Dictionaries return nil, if they don't find a value for the given key, so no need to initialize it that way. This "equipped[slot]! == nil" should crash if the slot is nil. Use "if let" for this.
Hi there again, I just thought I'd let you know that I have started recording some Reddit Special series videos on data structures and you can find the first video here: https://www.youtube.com/watch?v=mwBvUqgh3fg It's about generic stacks that conform to Equatable. I hope you enjoy the video. Please let me know what you think of the level of the content and if it needs to be going into any more advanced subjects.
Video linked by /u/VandadNahavandipoor: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [(Swift Data Structures) - Stacks (Reddit Series Special)](https://youtube.com/watch?v=mwBvUqgh3fg)|iOS Dev Caf√©|2017-09-09|0:27:03|1+ (100%)|9 &gt; Learn how to implement a generic stack that is Equatable,... --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/VandadNahavandipoor ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=dmrldjn\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v2.0.0
From my perspective although your right I think most people look to learn from practical exercises coupled with theory. The Swift Programming Language is amazing for reading up on subjects you are currently working on for practical exercises. It's tough to recommend it on its own as it's 100% theory and I think in general a lot of information won't stick until it is implemented. 
This is usually the pet project of an enthusiastic individual (or group). While there might be a business opportunity to be the leading authority on server side Swift development, including hosting of end-to-end Swift applications with tight Integration in IBM's cloud infrastructure, it's hard to ignore that OSS development is plainly thankless work. Kitura is developed in the open, perhaps reaching out to the top committers would be prudent? IBM likely accommodates their developer staff's skills development, and a Swift dev (or multiple Swift devs) are working on this with IBM's blessing.
IBM wants to get you on Bluemix, (their 'serverless server' platform as a function as a service (and other meaningless marketing wankery)) where it will cost a minimum of approx $70 per month ... and add another $200 per month if you want to be able to ask questions on their forums. And it didn't look like it would have been difficult to do. Probably targeted at the crowd which thinks that Node.js is something amazing and magical. ------- From a strategic perspective remember that in the early years IBM was the company investing the most money in Java (more even than Sun). So it's not at all out of character for them to support various programming initiatives. However, when I last had close daily contact with IBM employees (2009) I found out that internally programming was a dead and/or dying career path for them. IBM was all about the consultancy. Which makes sense. It's easier to sell someone on the concept that they're buying a consultant's time for $300/hr than a programmer's time for $300/hr.
Hi, can you please share your contact details (Phone/Skype) and your convenient, so the things get done better and more faster.
Do yourself a favor and learn something you can use to easily export to different platforms, e.g. Unity. I made a game from scratch in Swift and had to rewrite it in C# because I was missing out on Android user base. 
UserDefaults is for small pieces of data, like preferences or tokens. It sounds like you require a persistent data store. Perhaps CoreData, or SQLite. Maybe serialising to JSON and writing to disk.
I agree, here‚Äôs a framework to help you easily save structs and other data to the disk: https://github.com/saoudrizwan/Disk
These functions help to separate the logic of, say, filtering an array (i.e. which elements to include), from the behaviour actually constructing and returning a new array. The functions you've mentioned come from functional programming. I'd suggest reading up on the subject. It's very interesting and contains many of the ideas that underpin Swift.
I see a couple things here worth thinking about. First is a very common problem with oop which I call 'switch orientated' or 'if-else orientated' "object" programming. One example for this is in the sortItems func of Inventory.swift. Notice how you test an item's type and then do something based on that type. What should happen is you tell an item to do something and each item responds in a different way. For example, typically objects are introduced by saying "well there can be Animals and then Cat and Dog are subclasses. And if we implement the `makeNoise()` method, the Cat will implement it by returning 'meow' and the dog will return 'ruff'". This is ok if pretty simplistic. The wrong way to do it would be to say, "well, we have the cat and the dog and we will implement makeNoise by asking the animal, 'are you a dog' and if so, _I_ will say 'ruff' or 'are you a cat?' if if so, then _i_ will say 'meow'. Notice in the first case we sent the same message `makeNoise()` to the generic object and it responded according to its class. Whereas in the second way we _tested_ the class and then we ourselves responded based on the class. In general, the oop way is extensible and centralises logic, whereas the switch-orientated way disperses the logic all over the place and can only be extended by finding and fixing all places where the switch statements exist. The second thing is knowing where code ends and data begins. This is hard. And there are no hard and fast rules. But in general, the more something is likely to change (during development, not during runtime) the more likely it is that it should be data. An example of this is equipment: gloves, boots, etc. As you develop this, you may decide to take away gloves and add preMoistenendLemonScentedTowlettes and then take away some others and add others and so on. Or you just may add loads and loads. I really don't think you want to write all kinds of code to support each different possible item, when it would be very straightforward to treat all this as data. It is true you will need code to support the use of the equipment, for example you need to know it is somehow safe to wipe your nose with a preMoistenedLemonScentedTowlette but not with a pickaxe. That's why I said this is hard; this is hard in all apps and for all developers of all levels of experience: finding the 'dividing line' between what is code and what is data. So, it is possible I'm wrong about this, but I think it is worth considering the options and making sure there are good reasons for implementing it a particular way.
&gt; UserDefaults only supports property list types (numbers, strings, dates, booleans, data, and arrays and dictionaries containing those). What you are trying to say is that UserDefaults supports collections.
It‚Äôs not about performance (although there is potential for that) but about keeping your code clean, simple, and concise. There‚Äôs also no mutation and less room for error. \+ referring to the function in this way looks like a special case but it‚Äôs no different if it was a regular function like `func add(a: Int, b: Int) -&gt; Int` and you then wrote `reduce(ns, add)`. + returns a function that you can pass around because Swift has first-class functions.
The benefit to IBM is obvious. There's a new language, and they can get in on the ground floor with their own web framework. They'll know it best, and can drive the design. IBM is to Kitura as Basecamp/37S is to Rails. What is the benefit to Apple? They never asked for a web framework, and don't need a new one, and their web team is not going to switch to a Swift-based system for many years, if ever. It can't hurt to have more people using Swift, but being the language for Apple's platforms has been, for at least a decade or two, enough of a boost to keep your language in the top-20, anyway. It's not like the Kitura team is adding compiler features themselves, or the Swift team doesn't have enough bugs to fix. 
It is not a big market at all. They‚Äôre making a bet that it might be though. If Swift does become a thing on the server then IBM has a head start on capturing some of that market. It probably also has something to do with Apple and IBM‚Äôs collaboration on enterprise software for iOS.
&gt; This "equipped[slot]! == nil" should crash if the slot is nil. Use "if let" for this. It's of type `[Slot: EquippableItem?]`, and all the valid keys are mapped to nil on init. It won't crash here, but it's a pretty weird way to use a dictionary, so people reading it will (like you) think that it looks incorrect. &gt; It will change ALL your brace placements, but it's Swift's default. Yes, it's just a bit *off* to try to read code that uses newlines before every opening brace. (Indent style wars are over. K&amp;R won.) Even the short and simple files don't fit on my big screen without scrolling, but they would if the braces didn't each need their own line.
Sounds like a job for UserDefaults
Hmm... thanks. I'll look into that.
Yea I think I worded my post poorly, I know the how the syntax works and I actually made the post based off of the medium article. I just wanted to know if Apple implemented a better way and if they did then I was curious as to how. 
Udemy has 30 day refunds. I've tried out a few courses and if I didn't like them, really easy to refund. 
Are this your tutorials? If so, great job, I subscribed already, i like your style. Keep up.
Before making any changes, will my iOS 10 app still look the same way in iOS 11 as it did before?
You need to break every problem into smaller problems, and then solve them one by one. You want to know if a user is logged in? Logged in to what service? Have they previously logged in? What data did you store from authenticating them? If the app stores data locally only? Why are they authenticating?
You need to heavily comment your code base. Only someone with deep knowledge of the game is going to be able to make heads or tails of what the code is actually doing.
Assuming the inliner is doing its job properly, map and friends should be basically the same as what you would write.
Thanks for your reply! I'm a bit confused about centralizing that logic inside of Items, though. What I mean is, when I do the runtime the check within Inventory, the way I sort the Items is based on their type, but the logic is specific to Inventory and I can't imagine a way that this could be centralized to Item. Is that specifically what you were referring to? Regardless, thanks so much for the advice! I understand what you mean about migrating the most mutable and likely-to-change code to data. That is very good advice. But it leads me to another question: Would it have been a better approach to generalize an Item as a collection of all the *potential* methods and properties an item could have, and then discriminate between types of items using, say, an Enum? It would make the items physically larger in memory (probably no biggie), but I figured that this was the naive approach, and that subclassing was a better one. I'm starting to doubt this. EDIT: So [this style guide](https://github.com/github/swift-style-guide/blob/master/README.md) was pretty eye-opening, specifically the part about using protocols instead of inheritance by default, and only to opt-in to inheritance when it's required. Great idea, and I can agree. But this was the original approach I took when writing Item.swift. I can't remember exactly why, but there was something that convinced me that protocols were less-than-elegant for the job. I'm going to go back and try to refactor Item.swift today to see if I can implement everything using protocols. EDIT 2: Okay, I remember why I chose not to use protocols, and it was just a misunderstanding. I didn't realize protocols can be extended to provide default implementation!! This is great! Before I realized that, I thought there was going to be a lot of redundant/duplicate code; that's why it struck me as inelegant. Now that I know this, protocols are AWESOME!
Hi there, yes I make these videos, thank you so much. Just FYI, this new video is the result of some of the feedback I received here on Reddit 2 weeks ago. The original post is here: https://www.reddit.com/r/swift/comments/6wdf9m/ios_dev_caf√©_my_new_project/ Thank you for subscribing, it really means a lot. Have a nice day. /v
I'll do that later today and update you on the next commit. üôÉ
Recently decided to start learning Swift, decided to jump in at the deep end and create a procedurally generated city using Metal. It's going slowly...
The only way to be sure is to run your app through Xcode 9. They did make quite a few changes to auto layout, and while they aren't drastic enough to break apps, some might have buggy views here and there.
Didn't even realize this wasn't a normal approach to the problem. What might you guys have done differently in this case?
Romanize() is honestly something I just lifted off of someone else's code, nothing too important to me right now. What exactly is SwiftLint? I am writing a logger today.
&gt; are there genuine performance benefits to using the higher order functions? If you wrote `map` by hand, would you reserve the new array in correct capacity to avoid extra memory allocation and moving? [Because that's almost all the optimizations there are.](https://github.com/apple/swift/blob/master/stdlib/public/core/Collection.swift#L1424)
Empirically, with Swift 3: without the optimizer, the HOF way is much slower, and with the optimizer, it's the same speed (and exactly the same size).
Are you asking about [the source to reduce()](https://github.com/apple/swift/blob/6c7d93491fe2bf42553fbccff529aeddc938796c/stdlib/public/core/SequenceAlgorithms.swift.gyb#L541-L654)? I don't see any special magic here. It looks exactly as you'd expect.
I actually need to use something like this for a project, do you mind if I use it? 
No? It doesn‚Äôt support Sets for example. It supports all plist types, which includes some collections.
I'd suggest turning "car height = ..." into a guard statement in the keyboardwilshow method.
Var height ... on mobile, sorry, but leaving the original in tact because it made me laugh
As a critique: any time you're explicitly unwrapping something with an ! consider that presents a risk that can be easily mitigated. Most of the time you're doing it it's usually worth thinking twice.
&gt; Swiftlint IT's a tool (linter) that checks your code conforms to a bunch of best practices and coding styles, as well as pointing out potential errors you've introduced that the Swift compiler doesn't notice. 
I don't mind at all! Feel free to use it!
Follow the "null object pattern": have an "empty" EquipableItem which has more or less no behaviour, that way you rarely if ever need to check for nil, though you may need some special logic to disappear this "empty" item. Also seems somewhat odd to use a dictionary when you have a very specific number of slots, though I guess that lets you address slots dynamically without needing to manually implement subscript. Possible alternatives: an array, a struct implementing `subscript` (so you can index it), or key-value coding.
Keyboard height canal change when the user changes the keyboard (emoji for example). You should implement a function to deal with that if it apply to you, in achar, for instante, it'd be neccessary. I also preffer the animation time at zero, but that's up to you.
&gt; What I mean is, when I do the runtime the check within Inventory, the way I sort the Items is based on their type, but the logic is specific to Inventory and I can't imagine a way that this could be centralized to Item. Each item type could expose a "priority" property of some sort, and `Item` would implement Comparable comparing on (priority, name). That way `sortItems` just calls `sorted`. This can be done by the Inventory module as an extension to the other objects, and avoids all of the downcasting and hand-rolled bucketing: class Item: Equatable, Comparable { let name: String var priority: Int { return Int.max } init(_ name: String) { self.name = name } func sortKey() -&gt; (Int, String) { return (priority, name) } static func ==(lhs: Item, rhs: Item) -&gt; Bool { return lhs.sortKey() == rhs.sortKey() } static func &lt;(lhs: Item, rhs: Item) -&gt; Bool { return lhs.sortKey() &lt; rhs.sortKey() } } class Quest: Item { override var priority: Int { return 0 } } class Consumable: Item { override var priority: Int { return 1 } } class Gemstone: Item { override var priority: Int { return 2 } } class Equippable: Item { override var priority: Int { return 3 } } items: [Equippable(mace), Consumable(meat), Consumable(ale), Quest(flute), Gemstone(ruby), Consumable(baby), Quest(snakeskin)] items.sorted(): [Quest(flute), Quest(snakeskin), Consumable(ale), Consumable(baby), Consumable(meat), Gemstone(ruby), Equippable(mace)] (obviously you may want your priority to be an enum rather than a bare integer)
You don't. Solve this problem by making your first view controller a simple splash screen that checks if the user is logged in and does the right thing.
Sorry for the late reply. I took this advice but I had to use a little bit of smoke and mirrors; but it's almost what you suggested. I dragged a constraint outlet to my VC and gave it a name and then based on whether or not the image was there, I adjust the constraint 200 from the bottom. It works great. Thanks for the reply and help! 
Yep! This worked, sorry for the late reply! Thanks!
This worked swell. I love the affect and consistency. Thanks for your help! 
This makes a lot of sense. Thank you for the detailed explanation. Excuse the untimely reply! Best! 
In addition to readability, functional constructs can be used lazily. let people: [Person] = ... var names = [String]() for person in people { names.append(person.name) } The `names` array will be created and `people` fully iterated over no matter what. Example, if the `names` is only partially used the computation an memory is still O(n). let firstName = names.first With functional programming you can do let names = people.lazy.map { $0.name } Not only is this far more concise, and `names` is immutable, the returned view is lazy. The original array is not iterated over until needed, a second array is not created. `names.first` will be O(1), both in computation and memory.
PlayerCharacter.swift: - I would use structs for stats and location in order to deal with a recognisable type Item.swift: - Item is completely immnutable, I would use a struct instead of a class. - the functino socket is a bit clunky, you should probably a special datatyle like ‚ÄúboundedList‚Äù for sockets instead of using a triple inventory.swift - I feel like there exists a better way to implement the Item array. Maybe move the logic into it‚Äôs own type would be a good start. Something like ‚Äúpadded array‚Äù and then implement inventory as a sorted paddedarray. - Sort is super clunky, I would do it like this: filter the items you want to sort, sort them, combine them all items.filter(isQuestItem).sorted(by :alphabetially) + items.filter(isConsumable).sorted(by: alphabetically) + //etc equipment.swift: - you don‚Äôt have to make a dictionary of [Slot: Equippable?] you can make a [Slot: Equippable] and use the fact that getting a value from a dictionary gives an optional in case the key is missing. I hope that‚Äôs the feedback you were looking for. As a general opinion I would say that I wouldn‚Äôt mind maintaining this codebase. Of course I am making all those suggestions but I can‚Äôt guarentee that they are actually accurate since I haven‚Äôt played with the code. I only made surface level observation and that can be both useless and counterproductive. My general advice is that, since the type system in swift helps you quite a bit, do not shy away from big refactoring. Experimentation is very easy and useful
UserDefaults, create a bool value set to true whenever you are logged in, and then in the appDelegate, perform an "if user.isLoggedIn == true" then instantiate a view controller
Cheers!
Thanks, I hadn't thought of this! Smart.
Thanks! I just haven't found any good resources for learning GameplayKit for Swift 4 and Xcode 9. Totally understandable, though, Swift 4 isn't out of beta yet.
&gt; you don‚Äôt have to make a dictionary of [Slot: Equippable?] you can make a [Slot: Equippable] and use the fact that getting a value from a dictionary gives an optional in case the key is missing. Yeah, that's obvious to be *now* üòÖ I even felt it was a bit redundant when I was writing it. I'm considering just using a different collection type entirely for this.
I've removed some forced unwrapping and replaced them with guard lets. I must say, guard let is a very nice feature.
Also interested in this... I've seen MVC diagrams but can't find any good examples of the pattern in use in a project.
Watch the second video of the Stanford iOS course on iTunes U. The lecturer covers MVC and explains how to use it in your app
This might not work correctly in some cases - for example on an iPad, when a physical keyboard is used. In such a case you will still get the notification for the keyboard appearing and your view will resize, even though it shouldn't. Also, you need to convert from screen coordinate space to your local view coordinate space. Here is the approach recommended by Apple, which was mentioned in WWDC17 session "The Keys to a Better Text Input Experience" : https://developer.apple.com/videos/play/wwdc2017/242/ (first thing the video talks about) Here's the code: guard let userInfo = notification.userInfo, let frame = userInfo[UIKeyboardFrameEndUserInfoKey] as? CGRect else { // Log an error perhaps. return } let convertedFrame = self.view.convert(frame, from: UIScreen.main.coordinateSpace) let intersectedKeyboardHeight = self.view.frame.intersection(convertedFrame).height 
You need a pulse to tell the server that the user is still connected. Another way is to send a push (notification) from the server if the user hasn't been heard from in a certain time period and have the client app make a server call that acts as an acknowledgement that it is logged in or issue a login request from the client.
I might be reading it wrong, but it force unwraps the return value nil (if no value is present)
Love the design 
This! Also I'd dump the MVC on behalf of MVVM, maybe with coordinators, or Viper / Clean architecture 
ELI5, what's the diff between MVC and MVVM?
In MVVM model is the same as in MVC, but you delegate all user interactions to ViewModel as well as binding all Sorts of UI to data in ViewModel which are aggregated from the model. So, View binds to data from ViewModel that are "prepared" from the Model. You usually want to do this using RxSwift or some binding framework, or just KVO (or even didSet for super simple examples). View has no knowledge of non UIKit stuff, as well as Model being totally independent of UIKit. ViewModel serves as a "bridge". You can also add Coordinators to extract navigation logic from the View. 
I was also looking into MVVM but I'd like to learn MVC first. 
Sure thing. As recommended above - go and watch Stanford latest course. It's full on YouTube. Good luck 
Watching now :) 
Mvvm is a great way to overengineer a simple app
Models can absolutely talk to each other. Even view controllers can talk to each other but they usually don't have much to say as the bulk of the business logic is in the model. Views are dumb and shouldn't be talking to anybody. Definitely access whatever models you need in each view controller. 
Try https://tokbox.com. Used it at my last job. You have to have a subscription but most Webrtc platforms that are really easy to intergate will. I think it is worth it rather than burn that money writing your own.
Thanks for your answer. I know that it can be done, but it is a good practice if the models reference each other directly? I was told otherwise during lectures from the Stanford course, and I did some research online where I've read that only controller is allowed to talk to the model. I'd like my MVC to be generic, so I could easily reuse them in other apps. Do you know any good resources to learn MVC in iOS?
From your description, I think you might be slightly misunderstanding the MVC pattern. The ViewControllers should be just that - controllers for your views. Their role should be to: - React to user interaction and pass information to the model. - Update the views when the model changes. In an application like a calculator, what you probably want to separate is all the mathematical operations. You want to have a separate class or struct that handles the logic, completely separated from the user interface. Both of your different ViewControllers can share a reference to this shared utility. With a calculator, you don't really have much in the way of persistent data (unless you are implementing 'memory' and 'history' capabilities). The shared logic kinda plays the role of the 'model'
Sorry, but why not `fileprivate lazy var data = [T]()`?
If you're just passing variables between controllers just do this &gt; class classyviewcontroller{ &gt; &gt; static var fancyGraphingVariable = dataType() &gt; &gt; // manipulate that variable Then in the other view controller: &gt; classyViewController.fancyGraphingVariable + 2 or whatever 
Yup Im currently taking this course. She is a very good teacher and the class starts at zero. They assume you know nothing about programming. So if your not a noob the class can feel a little slow. Currently 30 percent done. To me it was worth the 15 dollars!
Use a singleton and store the value(s) in a property. 
Thanks for your explanation. I'm more convinced now.:) I thought that all MVCs should be completely separate. I do have struct that handles all the mathematical operations, but I thought that it can only belong to the calculator MVC. 
&gt;:) :)
In your app, there is no single 'MVC'. Model-View-Controller is simply a design pattern. In iOS development, ViewControllers are a type of Controller. I think you would get a lot out of doing a little reading on the MVC pattern in general, not in relation to iOS specifically. I actually find that the terminology Apple uses can be confusing to learners of the pattern.
&gt; but it is a good practice if the models reference each other directly? No.
Please post the repo link. I mainly work in Objective-C, but I spent the past 2.5 years heading the iOS development team for one of the top disaster notification applications.
Yes, why not?! :-) I didn't think about that alternative.
You should have your setup function automatically run when the view is added to the view hierarchy (override didMoveToSuperview). Also make sure to unregistered for notifications either when your view goes off screen or in deinit. Lastly, and this is a small thing, when adding constraints you should put them in an array and activate them all at the same time for performance reasons
You keep using "MVC" as a noun, but it's an adjective. It's like saying you have two object-orienteds, or two functional-programmings. Model is a noun. View is a noun. Controller is a noun. Model-View-Controller is an adjective describing a system using all of these in collaboration.
Go to Apple's list of sample code, and search for anything involving "AppKit" or "User Experience". Heck, if you search for "MVC" they've even got a networking example.
Thank you!
Did you add the google info.plist file?
Yes
Info that looked relevant from google-info.plist: &gt; plist version: 1 &gt; is ads enabled: yes &gt; is analytics enabled: no &gt; is appinvite enabled: no &gt; is gcm enabled: yes &gt; is sign in enabled: yes 
Just published my very first App - [Enbloc](https://itunes.apple.com/us/app/enbloc/id1271878178?ls=1&amp;mt=8) It's a google Contacts client for your iphone. You can store your work or other contacts separately from Apple's contacts. It's been a long road. I started learning to program a year ago. I initially tried to learn everything by myself, but quickly realized that I needed guidance. I needed someone to review my code and correct any grievous errors. I enrolled in the Beginning IOS Nanodegree and quickly became enamored with Swift and coding. I then enrolled in the IOS Developer Nanodegree and [Enbloc](https://itunes.apple.com/us/app/enbloc/id1271878178?ls=1&amp;mt=8) was my final project. I made it for my wife so she could store all her hospital contacts separately. I couldn't believe I made it through the Nanodegree and then I couldn't believe that it was actually accepted by Apple. It's got a lot of bugs and I am continuing to iterate on it. Hope you enjoy it an let me know if you have any Swift tips or feature suggestions.
Here's the thing about programming, there aren't any distinct boundaries. Skill is a gradient. You should never stop learning things. I've been a professional developer since the late 90's and still learn new things about the way stuff works on a regular basis. The point at which you should apply for an entry level job is the point at which you feel comfortable building and debugging a complete app yourself. There will still be innumerable things you won't know about, and you'll need to learn those on the job. Be comfortable with figuring out stuff for yourself. Dig in to things, know how to research topics. Good luck!
Thanks for the advice! How complex is the app I need to be able to Build and debug from scratch? A simple checklist app or something as big as a social media app handling database and such? 
Somewhere in between. I think the app that got me my first job was ~ 3000 lines of code.
Find a public JSON API, returning data about something you‚Äôre into / would like to try building. Maybe use the Dribble API and make a really slick app to browse designs, this would help you practice loading images efficiently and making a UI full of user-generated content. Or perhaps use a stocks API, like Yahoo finance and display lists of stocks, have a portfolio feature to add and track certain ones. This would be more practice with real-time networking and maybe persistence with CoreData. Basically build apps on top of API‚Äôs. Doing this is almost identical to the situation at a job. They‚Äôll have an internal API built by the backend team, and you‚Äôll just need to get data from it, display it, manipulate it and maybe send data back. Interfacing with an API and persisting the data (if necessary) is 80% of app development imo, so practice that across a few different public API‚Äôs until it starts to become easy and intuitive for you. Each API will bring new challenges that you‚Äôll learn from until you‚Äôve just about seen it all. I recommend first checking out [Chris Eidhof‚Äôs work](http://chris.eidhof.nl/post/tiny-networking-in-swift/) , and then applying his ‚ÄúTiny Networking‚Äù approach to various API‚Äôs of your choosing. 
The app that got me a job, and taught me what I needed to know was making a complete spotify player with a search tab and a queue.
Maybe you could use NSUserdefaults. Is an easy way to save data. 
Was thinking of that, but seems like you have to do a lot of extra work to be able to sae a struct to NSUserdDefaullts. So was just curious if there was another option. Maybe there isn't and that's fine. Just want to be sure before I start going down that route.
dankmeter: "How long is a piece of string?" voidref: "It can be as long or short as you want it to be. That is its purpose." dankmeter: "So ... like 3 feet?"
3 ft ‚âà 0.9 metres ^metric ^units ^bot ^| ^[feedback](https://np.reddit.com/message/compose?to=cannawen&amp;subject=metric%20units%20bot&amp;message=I%20think%20your%20bot%20is...%20%5BPlease%20include%20a%20link%20if%20you%20are%20reporting%20a%20bug%20about%20a%20specific%20comment!%5D) ^| ^[source](https://github.com/cannawen/metric_units_reddit_bot) ^| ^[block](https://np.reddit.com/message/compose?to=metric_units&amp;subject=stop&amp;message=If%20you%20would%20like%20to%20stop%20seeing%20this%20bot%27s%20comments%2C%20please%20send%20this%20private%20message%20with%20the%20subject%20%27stop%27.%20If%20you%20are%20a%20moderator%2C%20please%20go%20to%20https%3A%2F%2Fwww.reddit.com%2Fr%2Fswift%2Fabout%2Fbanned%2F) ^| ^v0.8.1
NSUserDefaults is good for storing very small pieces of data. This seems like something more geared towards Core Data. Unfortunately to save your struct into either data store, you will need to convert the struct to a dictionary, because structs aren't accepted as a data type by either store. That means you will also need to create an initializer for each struct that accepts the dictionary version of the struct. If you're able to use Swift 4, you can use the new [Codable](https://developer.apple.com/documentation/swift/codable) protocol, which auto generates the dictionary and initializer for you.
Thanks. I had read something about Codable. I'm using Xcode 8 and not sure if Swift 4 is an option. But I will check. I'm not far into the project so now would be a prefect time to switch if I can. EDIT: Specifying Xcode version I'm using
Yeah you‚Äôd have to use Xcode 9 to use Swift 4. Honestly all Codable does is write the dictionary for you, you can totally do it yourself. Post what your solution is in here and I can help edit.
UserDefaults is not the place to save this stuff despite what others are saying. Even if your new, don‚Äôt take the easy route. You should use Core Data which will be over kill for a small app but will scale with you should the app scale. It will also be the most logical implementation and have the most support for trouble shooting in places like stackoverflow Alternatively I would use Codeable to save JSON to disk and retrieve and reconstitute it later. This might get a little unwieldy if the app becomes large or has lots of structs to save. It will also eat up your device storage and make your backups bigger (unless you turn off backing up those files in an iCloud/iTunes backup)
Thanks. I will take a stab at it this evening and see where I can get. Just needed to make sure I wasn't going to go down the completely wrong path since I come from a PHP and NodeJS background wheee there are many different ways to achieve the desired result.
User defaults are not Appropriate. Core data is overkill. Keyed archiver is the answer.
Thanks. App itself will be pretty small so don't this file getting too large. Just some config details to work with AWS. I do need to consider encrypting the file I suppose, because it will contain sensitive info and I forgot about the whole iCloud/iTunes backup. 
There‚Äôs a flag you can set per file to include/exclude it in backups and encryption isn‚Äôt overly difficult. 
The key is experience. Even if you take all the top-tier courses in the world, you will never be job/internship ready without extensive time and effort put into implementing what you learned and building products
That's not what I asked at all. It's more like "how long does the string have to be in order to reach that building over there"
So basically learn what I need and start building apps and putting them onto the app store 
Great advice thanks!
Yeah, in the process of building those apps you're gonna run into problems that you have literally no idea how to solve. They will be tough to work through, but in the process of solving those issues, you gain a deeper understanding of the code and how Swift works. Solving these issues, to me, was one of the most important reasons why I chose self-learning instead of courses.
If you are using modern Swift, (Xcode 9), then the following working code is even easier than keyed archiver, using JSONEncoder and JSONDecoder: struct KeyFile : Codable { var name : String var path : String } struct Region : Codable { var region : String var awsAccessKey : String var awsSecret : String var keyFiles : [KeyFile] } struct Organization : Codable { var name: String var regions: [Region] } ... inside some method: let region1 = Region(region:"r1", awsAccessKey:"key1", awsSecret:"secret1", keyFiles:[ KeyFile(name:"name1", path:"/a"),KeyFile(name:"name2", path:"/b")]); let org1 = Organization(name:"org1", regions:[region1]); let data:Data? do { let encoder = JSONEncoder.init() data = try encoder.encode(_:org1) if nil != data { let fm = FileManager.default if let url1 : URL = try fm.url(for:.applicationSupportDirectory, in:[.userDomainMask], appropriateFor:nil, create:true) { let url2 = url1.appendingPathComponent("data.js") try data!.write(to:url2) } } } catch { } 
This is all you‚Äôll need! https://github.com/saoudrizwan/Disk
This is great advice and what I've done in my learning process with Swift. It's been a long process working in the evenings (I'm a web dev for my day job) but releasing my first app was one of the proudest moments I've ever had. I would also add that you should try (no matter how simple) to make a game with gamekit. I learned a TON of UI tricks making a crazy simple game. 
The most common type of mobile app is one that connects to a web service. I would say that knowing how to handle network requests asynchronously would be very useful. This, of course, is on top of knowing how to use auto layout and handle tables and collections. I might recommend doing some reddit development, last I checked the API was pretty straightforward and it's not hard to get results in JSON that you can populate a table with That's the sort of surface stuff you'll probably want to be familiar with. Under that is the basics of understanding things like the difference between reference and value types, what the stack and the heap are, and being familiar with the types of data structures and algorithms. Knowing procedure, like how to use git, and the general development lifecycle are going to be important as well.
Okay that makes sense. And if I need help with certain problems I can't solve myself just use something like Stack Overflow and find solutions 
What can I help you with?
Or use this definitely helpful bot haha
Am I what you're looking for?
&gt; but the latter as, "not title is empty" No, it's saying "title is not empty", which reads very well.
MVC on iOS is a great way to write unmaintainable code.
Lmao
Yeah I just recently learned about randomizing stuff from the Gamekit def got some cool stuff in there I can check out. How is swift learning going for you in a we dev perspective? Was it harder or a lot more diff than web dev?
Man this is perfect thank you so much I got a lot to learn...I focused too much on the learning and memorizing the syntax that what I really should be doing is working on the apps itself
I'm finishing up ten and moving onto 11 but I may move on earlier. Not sure 
&gt;Maybe you could use NSUserdefaults. Is an easy way to save data. NO. That is not what UserDefaults is for! 
Without trying to sound disrespectful, It seems like you are trying to find the shortest/easiest route to being a proficient developer. If this is the case then I can assure you you will quit within 6 months of starting. You need to want to do it and enjoy doing it enough to just dive in and get started. All of the sources you have linked are excellent places to start - yet you haven't, why? Why further procrastinate starting by asking us how to start? I appreciate there are a lot of "bad" resources online, but if you know how you learn (visual via videos or more text based), just pick one, dive in and start. If you get bored or stuck, pick another and start that. The only advice I would give, aside from just start on the resources you provided, is a way of thinking when learning to code, which is something I picked up from the London App Brewery: A lot of developers, especially new ones, seem to get atelophobia when approaching coding. That is, they are worried that what they are doing isnt perfect or the "right" way of doing it, so they either never start or spend way longer on something to try and get it perfect. There will always be ways to improve your code, and there are a million ways to do a task, so **just dive in and get started**
Umm I never said I didn't dive in I was just looking for some advice. I'm two and a half months in spent over 4hrs a day learning Swift when I'm not working. I finished Apple's ebook and into treehouse's intermediate track. I just wanted hear from people who already has their foot in the door what to expect from an entry level job as a requirement. Idk how you came up with the assumption I'm finding the easiest route, will quit within 6 months of starting, and procrastinating...
What about Realm? That's an amazingly dynamic and flexible database system which is lightweight too
So say the hip kids. They're wrong 
Hello! I wrote Hacking with Swift; you should try it :) With that out of the way, I wrote an article recently that I think will help you: [ How to get a job as an iOS developer](https://www.hackingwithswift.com/articles/10/how-to-get-a-job-as-an-ios-developer). It's quite a long article, but make sure you reach the end ‚Äì it provides some specific reading instructions to work through my material if you're looking for a job.
Hey! I actually checked out hacking with swift for a little bit and was planning to do all the projects you have once I get more familiar with the language itself. It's nice to see how you're always active on reddit and I am planning to get the full bundle so you definitely have my support!
&gt; I actually checked out hacking with swift for a little bit and was planning to do all the projects you have once I get more familiar with the language itself. Just start with the language introduction and continue from there. The projects are written so that they teach the language as you go, so you learn things in context ‚Äì I find it easier to remember things that way. I basically wrote the book I wanted to read :) &gt; It's nice to see how you're always active on reddit I'm as hooked on it as everyone else! &gt; I am planning to get the full bundle so you definitely have my support! Great ‚Äì thanks for your support! When you buy Hacking with Swift you get a guidebook that helps you follow the course faster and retain more. Some people wait until they've read the book before buying, and while it's nice of them to show that kind of support I think they would probably have learned faster if they bought earlier.
Have you considered SQLite?
Do any of your books go into algorithms? My goal is to apply at toptal eventually and they have algorithmic problems for you to solve as part of their screening process.
I have just the book for you: [Swift Coding Challenges](https://www.hackingwithswift.com/store/swift-coding-challenges). Enjoy!
&gt; Swift Coding Challenges Just what I was looking for! Would you say your book combined with Cracking The Code Interview is good enough to have a solid grasp on algorithms using Swift?
A solid grasp of algorithms: yes. A solid grasp of good Swift ‚Äì that's another thing entirely! If you look at the [table of contents for Pro Swift](https://www.hackingwithswift.com/files/pro-swift-toc.pdf) and it all looks a bit alien, perhaps algorithms aren't your main priority :)
I have not. Honestly the more I learn about storage options, I realize I don't know crap. So, I'm doing some more research this morning to figure out what is best. Since this is more of a learning project for me, then this works out well.
I saw a mention of that in some article I was reading, but did not look into it further. I will take a look at that as well.
That says it is for iOS. Will that work with OSX as well?
I can't tell if you're being sarcastic or dense. *I* was explaining how **I** read it. ***I*** read it from left to right, in english, which ***I*** sound out as "not title is empty". I'm not reading ahead and adjusting the sentence. It's a literal reading of the code.
[removed]
To defend myself, you never said you did dive in. You said "beginner", "zero experience in programming" and " If I finish say 1-2 of those resources completely". This all implies you have done nothing, no? You didn't say "I'm two and a half months in spent over 4hrs a day learning Swift". You didnt say what you have done or what you are struggling with. All you said was what should I do, followed by a load of content answering your own question. Sorry if I sound condescending but a lot of people spend so much energy procrastinating. Once you get over the hurdle of starting, you will quickly realise how you can best move forward. If you have started, as you say you have, keep at the sources you said in your OP, they are all great.
I don't know if it's the best way but I save arrays of structs using "Transformable" attribute in the xcdatamodel. In fact you can shove about anything into that attribute type one way or another. But this type of data you have, you should make the data model represent it and not just shove everything into one variable. Then you can perform requests on any given attribute without unpacking a whole array and then sorting through it. The Coredata book from Ray Wenderlich was helpful to me.
Work: ecobee Personal: ISY994i "Remote".
I'm currently getting my masters in data science but making apps always sounded like something cool to do. I started working through Apple's book on swift they released a few months back, but I didn't really take to it. They'd teach a chapter and give you a lab to do. But then, during the lab, they'd show you a bunch of things that you needed that they haven't taught yet. So you really could never work something through yourself. It was just typing in what the book says. Is Hacking with Swift better? If so, why?
As far as I know, Hacking with Swift book doesn't ask you to do anything it hasn't already taught. In fact, I'm pretty sure I go over all the key topics several times to make sure they have sunk in. However, every course ever invented has you type in what the book says ‚Äì it would be unreasonable for us to say "do this thing" without actually giving you the code, at least when you're learning. If you follow the Hacking with Swift guidebook there are challenges there that *do* ask you to write original code from scratch, but it's always based upon things you learned previously. [Hacking with Swift is completely free to read online](https://www.hackingwithswift.com/read), all 39 projects, so perhaps you could decide for yourself; I'm a coder, not a salesperson :)
&gt; However, every course ever invented has you type in what the book says ‚Äì it would be unreasonable for us to say "do this thing" without actually giving you the code, at least when you're learning. Yeah for sure, but at some point you have to be given a problem with little to no guidelines and put everything you've learned together. Or maybe that's just how I learn, the more "Learn By Doing" approach. But I'll check this out, I have a couple hours a week to spend on something outside of school/work. Been trying to think of something productive. Thanks!
&gt; Yeah for sure, but at some point you have to be given a problem with little to no guidelines and put everything you've learned together. Right. Most of the Hacking with Swift projects end with some homework that ask you to experiment a little to make the project do something new. Like I said, the guidebook (only available with the download edition) includes challenges that do exactly what you said.
I know you‚Äôre probably looking for some cash (aren‚Äôt we all!) but if it‚Äôs possible, I would recommend doing it for free. You'll probably get a bigger turnout and it'll get kids interested. Once it's more legit, you can charge. Maybe expand to middle and high schoolers and then charge them. 
I'd say charge $75 a week
Well if they find it too high then you can always ask them how much were they thinking and go lower.
I'll look into that and see if the school would be interested, I'm not sure if they would take a cut of the profits, or if they want me there to be a draw, and that's the "profit" for them, of course, I would like the extra cash! However, I work there currently doing something non-technology related, and I'll ask some of the parents what they think.
I usually have a `RootViewController` for stuff like this. On launch it's the initial controller. When it's loaded it checks to see if it can load the user account from whatever storage it's in. If it can, it embeds whatever controller you use when you're logged in. If it can, it loads the login controller (or whatever you do to get a user into the app). That way your "logged in" state is based only whether you have an account, not some other bool value that might get out of sync.
Off the top of my head: - Create a closure within swift that will be passed to the JS promise. - You will need to create a JS object within JSContext, from swift, that has a function property that is your closure. JSContext is not too difficult to work with from ObjC, which I leveraged, so it shouldn't be difficult from swift. - Create wait pattern within swift for your closure to be called from JSContext
&gt; You will need to create a JS object within JSContext, from swift, that has a function property that is your closure. JSContext is not too difficult to work with from ObjC, which I leveraged, so it shouldn't be difficult from swift. This is the right answer.. You may have to give your closure an obj-c type, however: let myClosure:@convention(block) (ArgumentType)‚ûùVoid = { } 
I wouldn't recommend learning two programming languages at once, and although Apple likes to tout Swift as a beginner language, I don't feel like it is one at all. The big thing about programming is that you want to learn the concepts first. The concepts will translate from language to language for the most part. Once you get good at one language, learning another isn't so hard. I would suggest learning Python first because it gets ugly syntax out of the way and lets you focus on the core concepts. There's a book that you can read online for free called "Learn Python The Hard Way" (don't worry, its not hard) that is a great resource and assumes no knowledge. I would suggest starting there and doing a little bit each night. After you finish the book (it's short), move onto whatever you feel like learning. If you want to learn Swift then you'll find the transition much easier. 
I find Raywenderlich site really good for Swift. Especially for beginners to Swift. 
You can learn with my free online book if you want: [Hacking with Swift](http://hackingwithswift.com/read). You can wait for Swift 4 if you want ‚Äì it's likely to be announced as final tomorrow :) (Note: it doesn't change much, so if you want to start now just go for it!)
I think your Xcode is ok. From what you mentioned it looks like your code is exactly the same as mine https://imgur.com/a/2QZ87 (which works) The only mistake I can think of is your .plist, it should have this name: "GoogleService-Info.plist" something it can have a name like this "GoogleService-Info-2.plist" if you already had a .plist in the downloads folder. Also, I remember that I had a problem with Firebase implementation so I just get back to the beginning and followed Google's tutorial step-by-step. One more thing I can think of is that you may be using .xcodeproj instead of .xcworkspace file.
Have you tried Firebase? You can just register observer which will in "real time" follow any updates of user's/app data. Creating social media app with Firebase is pretty simple.
I downloaded the book preview thing. I'll read it as soon as I'm able. Is there an easy way to describe why/how Swift is more complicated than Python?
Sort of a followup question. Two friends of mine graduated in Comp Sci. Mulling it over with them, they both strongly recommended I start with Java instead of Python, due to its universal application. They both admitted that it's a little harder to learn and more complicated, but say it's far more useful than Python. So, Java&gt;Python?
I think you might've struck upon something here, I have no electricity right now but when I do I'll be sure to check these things and update you! 
That‚Äôs nonsense. Python is every bit as universal and useful as Java. Python has completely taken over in data processing and scientific research because it is easy to use and has many powerful libraries. Its great for scripting simple tasks yet also used for very sophisticated desktop and server applications. Your friends probably think that about java because most computer science courses were taught in it. But now, more and more universities are switching to python for their introductory programming courses. You can always pick up java later. Learning new languages is easier once you grasp the basics, and python is better for learning the basics.
Swift has some fairly abstract concepts that can quickly get lost on someone new to coding. A few examples would be: Optionals and unwrapping them. Enums with associated values. Functional programming concepts (map, flatmap etc) Protocols Structs (which are different from other languages) Closures and escaping closures These are great to learn, but Swift resources often dwell on these up front instead of easing the user into them when they're needed which can add to the confusion. The syntax for Swift is also different than most languages. For example in C based languages a function looks like this: Int addNumbers(Int x, int y) { return x + y } In Swift you have this: func addNumbers(x: Int, y: Int) -&gt; Int { return x + y } It gets even crazier looking when you add closures into the mix. 
Let me know if you find the solution! I am still pretty new to coding and it's great to learn from the mistakes.
&gt; Should I skip Swift 3 and just start learning 4? Yes. The differences are minor though. The majority of the Swift 3 tutorials you find will apply to Swift 4 without changes.
If you want a government job learn job. If you want a startup job, learn python. 
That's like saying you should learn to drive with a Peterbilt 579 instead of a Honda Fit because there's a million times more jobs driving a truck than a hatchback. Why do I need to learn basic principles in a forgiving environment, when I can jump in and use what the pros use on day one?
If you would like to build out your own api, i would recommend using Vapor. Otherwise, I think firebase is your best option.
Also nice having an easy scripting language in your back pocket for doing quick one-offs or some data massaging.
If you're starting out, try Firebase. It's free for a while before more people try out your app. Otherwise, learn Vapor. Super cool once you get into it
It's inefficient to create 11 separate view controllers, have you tried using a Table View Controller? In my experience that is the best way to easily store specific notes for various objects. You can easily pass data when you select a table view cell
Thanks. I Thought about table view controller, and actually it's one of the only thing I can use, but, can I customize it and design it like that? Like create prototype cell and make the layout like this: https://imgur.com/a/LClDw, I have no idea about it....
^(Hi, I'm a bot for linking direct images of albums with only 1 image) https://i.imgur.com/pcr1QWX.jpg ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dmvj0kk) 
Is that right image lol? You can design every element of a table view controller but it'll still have to look like a table view. If you want it to look like a field you can still store data, you'll just have to create separate functions for passing data, like for example you tap on a "player1" object, the data only associated with player1 should be on the next view.
Yes, my best effort :) Thats what I didn't find all over the web... can you please make me an example on how to create that other view every time I add a player? its like I don't even know where to start!
I'm a bit lost as to why you think that C syntax would be easier to read for a beginner. If someone is just starting programming, *all* syntax will look alien.
With out question python. 
You should look into UICollectionView or UITableView to create cells as desired. Individual view controllers is not the correct approach. Personally, I have found https://github.com/Instagram/IGListKit to be a fantastic library to manage data and formatting individual cells.
Swift has over 3x the number of keywords, arbitrary operator symbols, umpteen different ways to write exactly the same closure, etc. Plus, in order to write almost any real program in Swift today, you need Foundation, which is also huge. The Swift book isn't hundreds of pages longer than K&amp;R just for fun. What does "{" mean? In C, about 3 things (type definition, type initializer, scope). In Swift, off the top of my head I can think of at least 6 completely different things that it can mean. Same with "[". In C, it's an array type, or an array access. In Swift, it's an array type (shorthand for some *completely different* generic syntax), array literal, array access, or dictionary type/literal/access, or capture list, or part of an attribute list. Not only does Swift use a lot more symbols, but it re-uses each of them a lot more, so you need more context to understand any bit of Swift syntax. There's lots of subtleties like that in Swift. Even once you know the basic syntax, something that looks exactly the same might behave in a completely different way, depending on context. Unless you abuse the preprocessor, that's just not true of C. There's only a few basic rules, and they combine in exactly the same way, always. Learn what a C struct is, and you can open the Linux kernel source and see them in action, with no more fanfare than your own. These syntax subtleties can and do bite you. Worse, Swift is so young that you'll still run into compiler bugs (I still do), and the error messages are often terrible. I've been programming in Swift for a couple years now, and in other languages for decades, and I was still really confused the first half dozen times I saw: Binary operator "+" cannot be applied to two int operands It's *got* to be lying (right?!), but the Swift syntax is so complex that (a) I tried to do something reasonable, in the simplest way possible, and I ended up here by mistake, and (b) swiftc can't even tell me what's wrong using English words that might be helpful. In C or Python or most other languages, you can shoot yourself in the foot syntactically, too, but it takes some work. So, yeah, on day 1, all syntax looks crazy, but a week or two later, you can tell the student "That's everything there is to know about C syntax". It'll be many, many weeks (if ever) before the Swift student learns everything there is to know about Swift syntax.
I started using vapor today and it's pretty cool
Because it provides clarity about what blocks are running. Python is very ambiguous with its white space only approach 
Most intro uni classes are C are they not 
Nope - every app is sandboxed so you can only change settings within your own app
No it is not
I can't tell which way you're arguing. &gt;.&gt;
What do you mean "No it is not"? It's not sandboxed or it's not possible to do it?
An app cannot modify iOS settings without user input. You can tell the user to change them themselves you can‚Äôt 
Hahaha that can't be right
Alright. Thanks 
Check out http://snapkit.io. We use it for everything on multiple apps with tens of millions of downloads. 
Syntax wise, Swift has a lot of similarities to Javascript, so for me that was nice. Learning Swift was definitely more challenging than any web development I've done. Swift is the first language i've learned that needs to be compiled. So that alone was a new experience. 
Making assumptions... Maybe a collection view would work but a table view would over complicate things. I‚Äôm assuming you‚Äôd like to place players in a certain formation. 4-4-2, 4-2-3-1, etc... a table view will certainly over complicate things. SpriteKit may not be a bad option if you plan to eventually animate these players around the field. Separate view controllers are not the correct solution either. Way to much bloat and super unnecessary. You can create your player object when you tap the plus sign or even when you tap the screen (this way you know exactly what point to center the player on). After creating the player, create a styled UIView and add it as a sub view at the desired point. The sub view may contain a tap gesture that pushes a detail view onto the stack to add/view notes. Hold each created player in an array. If you want to save your data, read up on core data. To conclude, you may have a hard time finding someone to write you an example however someone may be kind enough to direct you to a tutorial that will help you accomplish something similar. I would but am on my phone. Good luck!
Seems interesting. Unless I‚Äôm missing something, it doesn‚Äôt seem like it does much more than NSLayoytAnchor although NSLayoutAnchor is iOS 9+. Anything else that snapkit provides?
Hell no to Java. There are more jobs in Java but they aren‚Äôt the good jobs. They are the small jobs where your manager is a business man who also wants you to be tech support and sysadmin. Learn Swift. And C. Computers are C programs. Swift is basically translated to C when it compiles. Python is nice, but you won‚Äôt use it enough in your early years if you want to do iOS development. I‚Äôve relearned python like four times because I forget it between uses. C for Absolute Beignners and then BNR Swift was my path and I wouldn‚Äôt change a thing. 
Well snapkit has cleaner syntax and uses closures. Since closures can be made somewhat generic and passed as arguments to other functions, maybe this pattern lets you do something interesting that would be less elegant the other way. In my team's code we don't do anything crazy with it yet, though, but I like the clean syntax and easy-to-read statements. Try out one of our apps if you wanna check out the results, they're all free. [Here's one](https://itunes.apple.com/us/app/nike-training-club-workouts-fitness-plans/id301521403?mt=8). (Open the link in Safari if you're using the iOS mobile Reddit app.)
iOS or macOS?
I just need either an email or GitHub account name and I can send you a link, feel free to DM me
As a newbie, ive also been wondering this. 
Programmatically because I just hate using a mouse, it feels really slow. It feels more natural to me to use code for everything. That said, it was nontrivial to write a good enough wrapper around auto layout to the point where it was actually comfortable to write UI code. But once I did, I was off to the races.
I prefer to use xib files. Interface Builder is a very powerful tool and can make creating a user interface very easy, especially when setting up auto layout. However, I have two main issues with storyboards: they break dependency injection and they force you to depend on string typing. When you instantiate a view controller from a storyboard or get a view controller from a segue, you are returned a UIViewController. It's up to you, the developer, to know what the exact type is. The type of the view controller can only be determined by the segue identifier string. Additionally, the view controller has already been instantiated. This forces you to resort to late instantiation, which results in public/internal var properties which would otherwise be private let properties with dependency injection. This doesn't seem like a big deal while you're creating it, but it makes things very confusing 6 months down the line when you've completely forgotten what you did and why you did it. Just using xib files lets you use Interface Builder, and it also lets you control how view controllers are instantiated. You can subclass UIViewController, create a new initializer that enables dependency injection, and you get the exact type of the view controller you just created. You lose segues, but you gain dependency injection and strong typing. It's always going to be a trade off between storyboards/xib files/source code, it's just a matter of what's the best choice for your situation. However, I feel that xib files are a happy medium.
I use storyboards as much as I can.
I think swift is a great beginner language and the satisfaction you get developing your own apps is great. You will have apps in your pockets and can show it to your friends whenever you want, something you couldn't really do with other languages. Except I guess java and kotlin but that's a different story. My recommendation learning is to not pay for courses in the beginning. See if you like it and use the free resources available. Like raywenderlich.com On YouTube I recommend Sean allen and lets build that app. And of course the Stanford university course about swift. But to begin with you might want to start with apples free book. I forgot it's name but something like Everybody can code.
Ios 
https://www.toptal.com/ios/ios-user-interfaces-storyboards-vs-nibs-vs-custom-code Here you can know more 
I use storyboards. I refactor storyboards to many storyboards with storyboard reference. 
For my main project I'm using a code based UI even though I'll have to refactor some minor things or use some xibs within the code for clarity. Another project is using .xibs, and I don't think that there is much difference in my workflow. I simply like code better because I can make changes much faster than in the IB.
You an use a collection view that has different amounts of columns per row. So if you want to save your formation as 4-4-2 you'll have 2 rows with 4 columns, 1 row with 2 columns and one row with 1 column (I just assume you'll want to play with a goalkeeper).
I don't think a `UICollectionView` is very applicable in this context. If you know anything about football there are lots of different combinations when it comes to lineups. You might want your two full backs slightly above your centre backs if you're doing a regular 4-4-2 line up, see this [image](https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Association_football_4-4-2_formation.svg/422px-Association_football_4-4-2_formation.svg.png) as an example. Hence I would recommend you add your players with a `CPPoint` and hide the default width and height in the init function of a `PlayerView` class. You can then implement drag and drop to change the x and y coordinate of each player.
&gt; SpriteKit may not be a bad option if you plan to eventually animate these players around the field. Yep, I definitely agree with you on this one. But with OP being a rookie when it comes to iOS development it might not be the right option for him/her to delve into the ins and outs of SpriteKit. 
That is the idea. I‚Äôd like to place them in fixed positions. At the moment I kind of solved it with a new UIPanGesture(if you check in the method it‚Äôs there) for any other player added. This way I can at least move the balls around, as a proof of concept. Not gonna animate at all for now, since I just want some cells with different data inside. Do you still recommend me to do it with SpriteKit, or should i go for uiCollectionViews? Honestly the real problem here is that I can‚Äôt visualize how to approach this, when it comes to click on different players and insert/keep into another viewController... Thanks
I realise programmatically more faster then storyboard or xib. My advice continue on programmatically
By self-learning do you mean you just 'stack overflowed' if you got stuck and gradually worked through issues, rather than going on udemy etc?
Is it shitpost o'clock already?
Since the addition of storyboard references, I do the bulk of my work with storyboards. The main reason is that they are actually quite effective as a communication tool. This allows new developers joining a project to find what they need to work on and be productive quickly. Don't try to fit a square peg in a round hole though. For any project there will be situations where programmatically creating and transitioning to ViewControllers makes more sense. - Sometimes you can get really good code reuse by loading a different subclass of a VC conditionally. There isn't an elegant way to do this with storyboards well that I have found. - There might be a VC that is used very frequently. I wrote an app where showing a user profile was available in several places. Rather than adding several segues to the same VC, it was easier to create a button subclass that pushed the profile VC onto the current nav stack
&gt; that's tempers with the settings that* tampers* with 
That doesn't make any sense. What is "it"?
You can open settings using URLs. From there, it is up to the user to make a change.
What op was talking about...
&gt; I just hate using a mouse, it feels really slow Interestingly, one of the big discoveries of the original Mac UI/UX team was that things that *feel* slow are often faster when measured with a stopwatch. Have you done any testing to determine if you can generate layouts more quickly programmatically, or if it's just the psychological effect?
apparently
I programmatically create everything. While the interface builder can be useful for prototyping everything before building the same can be done with applications like Sketch, Photoshop, etc. I feel like when I code everything I have more control over what I'm making. 
Oh alright. Initially, I was thinking of making a multi game center app where players can easily switch their game center account using the app. But I guess not 
Well, I guess I got confused by the way MVC was introduced to me in iOS Development course from Stanford. Look at this slide from a lecture about MVC https://raw.githubusercontent.com/wiki/sebastienwindal/iOSPatterns/StanfordSlide2.png I'm glad I asked this question here though, at least I won't be making such silly mistakes again.;) 
What wrapper do you use?
[Release notes](https://developer.apple.com/go/?id=xcode-9-beta-rn).
OK. Sent. Did you get it?
Basically, yeah
Yay!!! Now I can make apps for production on swift 4!!
Who the hell down voted you?
Anyone?
To create an app that's tempers with the settings.
And ARKit
Reddits voting system will automatically add down votes to any post that has been upvoted a lot. You know, to fight bots and all.
PSA: Make sure to backup before upgrade to iOS 11. 
Yeah, but I was talking about down voting the comment linking to the release notes. When I got here it was at 0.
The initial creation of the UI is much faster with a mouse than with a keyboard. Subsequent tweaks are faster to make in code than in interface builder
Im using Swift 4 and Xcode 9 beta and long way into production of my first app ever. What does this mean for me?
Hey, asking this again since I didn't find a solution.. can you suggest me some tutorial about this? can't find anything even close to this.. I managed to get the subview and the popup, everything is working now.. but I have no idea how to "Tag" every new ball, so that i can access every ball individually. Like click + (newBall.1), + (newBall.2) and so on..
It means you should upgrade to the gold master immediately ‚Äì you can download it from the same place where you got the beta. Not a lot has changed, but you do need to upgrade in order to submit to the App Store.
Thank you! Hacking with Swift has been a huge help for my development. 
Awesome ‚Äì glad to hear it! :)
This has nothing to do with Swift.
Nope not directly. üëçüèΩ 
IBM is now doing business consulting on the iOS side. Big business, even have a partnership with Apple pushing for Enterprise Mobility. Kitura enables them to develop integrated application using Swift for iOS clients and Server. Same way JS fit in for Client and Server. Also note, IBM bought out the guys that developed Express, the leading NodeJS framework. Plus also take into consideration amongst all languages Swift has a small memory footprint, and in cloud business it's all about memory not raw computing power, unless you're using GPU instances. 
+1 for programmatically. If you're starting out, it's normal to use storyboards. However, as your app grows and changes, I find storyboards just get in the way. Here are the advantages of programmatic views: - It's easier to refactor and reorganize a view - Programmatic views can have some rendering logic reducing the size of your view controllers - Storyboards are poorly handled by Git et co. - It's easier to read code than read a storyboard (fewer places to look) - It's easier to expose constraints programmatically (for animations) I'm sure there are other reasons, but the reasons above are my top 5.
I wish they had a version of Xcode for iPad Pro.
From mobile so can't access, did they announce any release date for Xcode 9?
Or any actually useful apps for, you know, professionals. My iPad Pro is basically overpriced Kindle/Reddit machine. 
I much like parse-server. It is easy and poweful. Sashido.io , back4app.com is a great parse hosting services. 
Any have any idea on how to fix this? I have tried uninstalled Xcode and reinstalling it but I still get the error.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/iosprogramming] [Simulator broken after Xcode9 GM installation](https://np.reddit.com/r/iOSProgramming/comments/6zthjf/simulator_broken_after_xcode9_gm_installation/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Damn, Xcode 9 is good!
Yeah! It's much faster, and you can finally run more than one simulator at a time :)
Did you try simulating another device? 
I had an error where the simulator wouldn‚Äôt run because I had the GM installed alongside xcode 8. I went into xcode preferences / locations and made sure I had the correct version of the command line tools selected. I needed to have xcode 9 selected for the simulator to run. Maybe this will help you. 
It's out now, from the Apple Developer site.
Just a warning that Xcode 9 will not upgrade a Swift 2.x project. You must do that with Xcode 8 first. Something I discovered this morning when deciding now was the time to get round to updating a side project.
Yeah, I tried it with all of them.
Weird. I had no issues installing the GM. 
Is anybody else experiencing a slide show in the simulator on the GM seed? It runs a lot slower than the Xcode 8 simulator running the same SceneKit app 60fps vs 0-2fps
Yes; SceneKit is basically dead in the simulator now, as is anything else that requires GPU work. iPhone X seems particularly vulnerable, but all iPads are a write off right now.
Is this a bug that will be fixed / optimised or am I now being forced to use physical devices for game dev? Was hoping that Metal2 would have brought simulator improvements
It's hard to tell, I'm afraid; I didn't see anything about it in the release notes. That being said, using a physical device has always been a good idea.
I guess I‚Äôll have to wait and see if they improve it at all, it‚Äôs just annoying how Apple gives in one hand and takes away in another even if it is unintentional
This has been an issue in earlier Xcode 9 builds. The solution for me is to resize the screen (even slightly). You can do that by hovering your mouse near the corner of the simulator screen and dragging.
Have you tried deleting xcode‚Äôs derived data folder? I find this often fixes weird simulator issues.
YES!! This makes me happy :)
Finished working on a Tags and Social Filter feature for my Strength Training app [Setgraph](https://itunes.apple.com/us/app/setgraph-weight-lifting-log/id1209781676?mt=8). Right now I'm trying to translate everything into Spanish. I'll probably push the update soon. Anyone know when we'll get the option keep our ratings after an update?
For all the talk Apple makes about the iPad Pro being a computer replacement, they still haven't fully committed by putting their own professional apps like Final Cut or Logic available for iPad.
So why are you posting it here instead of r/apple or r/iosprogramming etc?
Have you tried this content mode? .scaleAspectFit If you do something like... let imageView = UIImageView(image: image) imageView.contentMode = .scaleAspectFit Then whatever constraints you give the imageView, the image will be fit by its proportions inside that imageView. Or are you maybe looking for a different behavior?
I would do it by having a `UIWindow` placed at a level that will be on top of everything in the app. Then you just need to tint the window's view controller's view when the user hits the button.
I have not yet used UIWindow...quick google search says windows have no visible content... What would the benefit be of using window vs view?
A `UIWindow` can be placed above everything else and lives by itself. A `UIView` requires something to own it. A window itself is not visible, but the view controllers within it are, since they have views (look at your app delegate and you should see a window property it uses for your initial view controller). But essentially what I'm proposing is just a view inside a view controller inside a window. You'd put it in place at app launch and only interact with it for the coloring effect.
Do replicas of already released apps?
I'd prefer to build something that has any use not just build something for the sake of it.
Shouldn't really be suggesting to use "Selector("buttonWasPressed")" but rather the type safe version #selector
Thanks for your polite and timely response. I'm looking for my imageview to get smaller and larger based on how big the image is. I've found some good suggestions here and this is where I'll start for now: https://stackoverflow.com/questions/26833627/with-auto-layout-how-do-i-make-a-uiimageviews-size-dynamic-depending-on-the-im
Final, non dev preview GM version, will likely be out with the iOS, watchOS, and tvOS releases on the 19th. It will most likely be the GM version, but may not, if there are bugs that absolutely need fixing.
You came up with something that seems reasonable but doesn't work, apparently, but all you said is "it was giving me an error". There's no source code to demonstrate the issue. You haven't even said what operating system you're developing for. It's hard to give any kind of useful feedback here. Have you tried fixing the error?
Sorry, I am at work right now, but I will post the exact error and issue when I get home. Do you happen to know of any tutorials or documentation regarding this problem? Thanks
So I guess side or hamburger menus are going to be popular on the iPhoneX
Why?
Apple is discouraging controls and gestures near the bottom of the screen, that will prove difficult for tabbed apps.
I don't think Apple is telling people not to use tab bar controllers. It's one of the primary container controllers that Apple provides.
I didn't say that's what they said. I said that they are discouraging it. If anything they will patch the UITabBarController to include a buffer for the bottom edge
Wonderful, Mike Ash is back writing his blog...thanks for posting. have been wondering how Swift can do type safe json decoding, now I can see.
Make sure it's clear in the UX that your app is a reader/catalog of articles from one journal. Reviewers get little time and yours may have missed that fact. "4.2.2 Other than catalogs, apps shouldn‚Äôt primarily be marketing materials, advertisements, web clippings, content aggregators, or a collection of links." https://developer.apple.com/app-store/review/guidelines/#minimum-functionality
Did you find a solution to this?
First, don't feel down for a rejection. It's not permanent, and I bet most apps get rejected at some point, for some reason. It's a mark on you, and maybe not even on your app. Apps are mistakenly rejected all the time, which is why you can appeal, and resubmit. There's no penalty (AFAICT) for getting rejected, and the turnaround time these days is quick. They might have misunderstood what it is, or they might have thought that it's more appropriate for Newsstand or iBooks. Reviewers, unfortunately, are never very talkative. &gt; The functionality is limited to reading the articles, displaying in different formats including PDF and being able to download and share those PDFs. Why *is* this an app? It doesn't sound like an app.
&gt; If anything they will patch the UITabBarController to include a buffer for the bottom edge Yeah, it's called the Safe Area Layout Guide. They're not "patching" anything. 
There are many reasons but my favorite is hygienic: I like to place the protocol conformance of my classes in their own extension just for cleanliness. Often a class declaration and implementation can get long and messy. So I‚Äôll have an extension for my custom viewController class for the UITableViewDelegate methods and another extension for the UITableViewDataSource methods. I don‚Äôt put them in another file or something, I just place both extensions in the same file after the first class block is done. Though I also place //MARK: titles above each extension so maybe I‚Äôm a code neat freak EDIT: Typo
Dose the new control center show any toggles for anyone? mines does not
This also helps to avoid class declaration lines that include many protocol conformances, which can look messy. For example: class MyClass: subclass, protocol1, protocol2, ... {} Opposed to a cleaner looking: class MyClass: subclass {} extension MyClass: protocol1 {} ...and so on You can imagine it's also easier now to move this protocol conformance to another class if need be. 
There's no way to suppress warnings in Swift. Perhaps creating a C wrapper for the library that properly exposes the API to Swift will help?
Just mutate it in some way and the compiler will be happy ;)
Gotcha!
I'm curious ro see how breaking these additions will be with regard to custom top and bottom segments of apps.
Another good use for this is to enforce access levels of methods at compile time. For example, I put all of my private methods in a private extension: private extension MyController { func someMethod() {} } This way all of my methods are grouped by access level and the compiler enforces that they are all private. Some people instead use a comment mark (`// MARK: Private methods`) but then you have to manually check to make sure all the methods below the mark are actually private.
**Inventory.swift** Perhaps change `items: [Item?]` to `items: [Item]`. Introduce an `EmptyItem` class for use instead of nil. Get rid of the `InventorySlot` and always use `Item`. Perhaps change `items didSet` from padding up to capacity, to instead an assert that the new items array has the correct size. btw. Please use swiftlint.
It's kind of like adding paragraphs to text: to add some structure and to group things that belong together in some way. It doesn't necessarily add any new information, but makes it easier to understand the code.
It's also good because you decouple protocol conformance from class/struct implementation
Here is another great article. This talks about json parsing with nested structures. http://benscheirman.com/2017/06/ultimate-guide-to-json-parsing-with-swift-4/ 
Swift is only, currently, supported on macOS and Linux [https://swift.org/getting-started/#using-the-package-manager](https://swift.org/getting-started/#using-the-package-manager) You will need a Mac to create iOS apps, as it requires Xcode which only runs on macOS. The software you are referring to which updates the UI while coding is Swift Playgrounds, which runs as a part of Xcode, and there is also a dedicated app for iPad.
Thank you for the quick response! So you are telling me I can't create apps with Swift because MacOS is required to do so and it's not supported on Windows neither on Linux ? Is there a way to overcome this problem ? I just haven't got the money to buy a Mac or something similar except my iPhone of course... I also bought a new PC with up-to-date hardware just a few month ago 
You can write and compile Swift on Linux, but you can't create iOS apps without a Mac. The process of creating (and submitting) an iOS app is much more complex than simply writing Swift code. Xcode encapsulates the entire experience. Edit: You could look into creating a Hackintosh, but I'm not sure of the legalities.
I like to place all functionality into extensions as it affords me the opportunity to logically group blocks of functionality, which makes a source file much more readable, and easier to reason about. It also separates the declaration of a type from the associated functionality, e.g. enum Result&lt;Value&gt; { case success(Value) case failure(Error) } extension Result { init(_ capture: () throws -&gt; Value) { do { self = .success(try capture()) } catch { self = .failure(error) } } }
I got rejected 5 times before getting in the App Store on a single app. Good luck!
And a much more extreme example (with classes): [https://gist.github.com/oliverrussellwhite/a3f55f7abb103ce93c94fc8cd682fb81](https://gist.github.com/oliverrussellwhite/a3f55f7abb103ce93c94fc8cd682fb81)
okay thanks I will be back with a Hackintosh If I wanted to publish my App I can just use the Mac of a friend At least I think so 
The code looks good. Perhaps change code examples to use `guard let` instead of `if else`. https://vast-earth-28983.herokuapp.com/thread/10
I bought another SSD for my windows PC and installed Mac OS Sierra to that. Now I boot from mac SSD when I'm going to use Xcode, otherwise I boot from win SSD. Installing Mac OS took about two hours, when I finally found correct files. Searching for right installation method for my pc took a lot of time, since I have a AMD CPU. Other option is virtual machine that you use from your current OS, but they ask quite a lot from your PC. Tutorials for that are easy to find. 
Wow thanks so much guys for all the responses! I appreciate it. After seeing some of the examples here I started doing the extensions and it is nice to separate the class data from the methods and to have private methods under their own private extension. 
&gt; This month I just published a collection of interview questions for iOS developers based on what I asked when I was hiring people and input from others. It's designed to complement both my Swift coding test questions and my Swift Coding Challenges book, and I hope it's useful to people looking to get a job as an iOS developer. I have this book, I can't wait to dig into it. I've worked with Swift for a little bit here and there but I still feel like I'm not writing "Swifty" code. 
I adore SpriteKit I wish I had more time to play around in it. Apparently there's now even an editor inside. 
I'm currently trying to do more Swift coding as I finally got the approval to upgrade my Objective-C apps (all enterprise, nothing on the store) to Swift. I'm also working on small apps for the store so I have a portfolio (since I can't show what I make at work). I'm making small apps that show a lot of different knowledge areas. The current one I'm making shows I know how to work with GPS data, Core Graphics, Web APIs and storage. 
You must be having a bug somewhere. Set a breakpoint after assignment and check if name is set. Also check if the SKNode address is the same when you're assigning the name and reading it. A code example would help
And make sure you leave a comment explaining what's going on! That's the best way to prevent people "fixing" it!
Hmm‚Ä¶ send me an email (paul@hackingwithswift.com) and I'll set you up with a free copy of Pro Swift ‚Äì it's specifically designed to help you write more natural Swift. (Note to others: this isn't a free for all; I'm handing out one copy of the book to one person who already bought one of my other books.)
That is the absolute nicest gesture but I have to politely decline. I already own all your books lmao. I just haven't got around to reading them. Thank you so much for the offer though it really is truly appreciated :) 
Ah! Well that sucks, but is also awesome ‚Äì thank you for your support! Also: READ PRO SWIFT :)
No, the home indicator uses a fixed design. However, the "color" isn't really solid ‚Äì it uses a dodge effect so that it stands out against whatever is behind it. I wrote an article you might find useful: [How to update your app design for iPhone X](https://www.hackingwithswift.com/articles/12/how-to-update-your-app-design-for-iphone-x).
hard to diagnose without seeing your code. maybe your label constraints are wonky? is there a single array of model objects that you are laying out your collection view from, or are you laying the cells out using contents of multiple arrays? again, hard to say without seeing your datasource methods 
Not totally related, but what are the most popular swift server frameworks?
&gt; I wrote an article you Ah you're the one who writes these. Good stuff man, I read it the other day!
Does this work? I remember there was a thread about it on Swift Evolution a month or so ago, but I don't remember how it turned out. It used to make the members in that group fileprivate (because Swift 3 semantics were weird), but I don't remember if they changed it to match the new private.
Here is a comparison (slightly outdated) https://medium.com/@rymcol/linux-ubuntu-benchmarks-for-server-side-swift-vs-node-js-db52b9f8270b
Well it already broke my simple edit to a tab bar iPhone X: https://imgur.com/x1G1a7w iPhone 8 comparison: https://imgur.com/0aFqCqW
These seem to be pretty much the only ones, not just "the most popular". 
Why do you *not* want extra cash?
I think mostly you appeal based on &gt; aggregated from the internet since, as you say, it's not aggregated - it's a dedicated reader for a specific product, and in that is not notably different from say a dedicated client like the Reddit app. You might also point out any local caching you provide for already-retrieved articles and any simplified login. edit: Oh, and it may not be obvious to the reviewer that you are doing this as a branded reader for the site itself. That would be another point against calling it aggregation rather than a branded reader.
Why?
You can install Swift on Windows 10 by way of the Ubuntu Linux subsystem you can optionally install: https://solarianprogrammer.com/2017/04/19/getting-started-swift-windows-subsystem-linux/ You will not be able to create iOS apps, however, as that requires Xcode on macOS, but you can write Swift command-line programs or server-side code.
This looks really good. Thanks.
Thanks! I'm glad you enjoyed it :)
thanks! hope it's helpful!
You might be right on that one, I think I remember the same discussion. I can't test right now to confirm if it's changed, but at least for me it doesn't make much of a functional difference whether it's fileprivate or private in Swift 4 now that private access is shared across the same type in the same file. I do wish it would be changed though if it hasn't already.
OP's suggestion sould work, given a couple of things. If you don't set size constraints on an imageView, it will resize when you set the image depending on the value of contentMode. scaleAspectFit I believe does allow the imageView to resize. Give your imageView an anchor (vertical center, 16 from leading margin. 8 from top/bottom of the cell). Do not add width/height constraints. Now when you set the image it will resize. You can put a height constraint that says height &lt;= MaxHeight, but if you use = it will not resize. I'd recommend experimenting with the imageView in a plain view controller all by itself. This will let you tinker without wondering if your table cell is at fault. After you understand how UIImageView works and behaves, then move it into a tableViewcell. 
How did you manage it with SpriteKit elements alone ? 
I didn't write the class to be reusable in other projects so it's designed to work with my game only but I first made a class to hold the collection view, then I made a class to hold each collection view cell (which were subclasses of my other custom class that was like UIButton). Then I made 2 additional classes to hold the collection view data and collection view cell data. I mostly used SKShapeNode to form the size of the views. [JKLevelCollection](https://pastebin.com/ZPkyyd1b): It's like UICollectionView. I didn't care to copy all properties. [JKLevelCollectionData](https://pastebin.com/ZgJwUPLH): Holds the data needed to be saved to the app from JKLevelCollection. [JKLevelCollectionCell](https://pastebin.com/xqyRzSWQ): It's like UICollectionViewCell. I didn't care to copy all properties. [JKLevelCollectionCellData](https://pastebin.com/Rfa40JPc): Holds the data needed to be saved for each cell. [JKButtonNode](https://pastebin.com/8GBRrRpJ): It's like UIButton. I didn't care to copy it exactly like UIButton, but it does function as a button on its own. It uses an SKSpriteNode and an SKLabelNode on top as the title. This is what JKLevelCollectionCell was a subclass of. The data files are used to save and reload what the user has already progressed through in the levels so the app knows what's already unlocked, etc. [This is the game](https://itunes.apple.com/us/app/wall-of-gold-rescue-game/id1191149640?ls=1&amp;mt=8) that uses the above classes for its level selection scene. [Screenshot](https://i.imgur.com/xHbFl9S.jpg) of the level selection scene.
Not sure exactly what you are asking since you answered your own question. You can just start using a playground. Try using if with different supported types, bool, string, int....etc. Change the values and see if your logic works as expected.
IBM blue sandbox is a great! sandbox. Make sure to make a profile so you can save your work. https://swift.sandbox.bluemix.net/#/repl
You do realize that *every* company in the world uses price discrimination, right? It's hard enough to run a software business today. It'd be downright impossible if you had to charge the same price to everyone. I'm not sure what ethics have to do with it. Do you think markets are inherently unethical? Do you complain to your gas station attendant about his lack of ethics, for charging 20 cents a gallon more for premium?
This has nothing to do with Swift. This question/rant would probably be better suited in /r/explainlikeimfive or /r/offmychest. 
Hey guys a question about Vapor and server side swift. Is server side swift something I could make a reliable production REST API out of? Has anyone or does anyone use it as a production REST service?
Thank you,I really appreciate you taking the time to reply to me. I saved the files and gonna go over them now. In my own game, I was looking to use a collection view just to have a slidable view to pan through a character list. I originally used a camera and just moved it over the list but Its really rigid whereas scroll views and collectionviews have a bounce to them. Thanks again ! Also I downloaded your game! Its so annoying. I just passed lvl 6. üòÇüòÇüòÇ Its really fun and challenging, great job!
I'm only involved in the Vapor community, so can't speak for other swift server frameworks, but yes, Vapor is definitely production ready. It's on version 2.0 right now, and v3 is in the works (no timetable for release, probably several months out though). My site linked in OP, its backend is vapor, with a react front end. 
Thank you! Im mainly an iOS Engineer, but id like to expand to backend as well. I have a bunch of projects using open source parse and plan on trying out a swift backend because who doesnt like one language code base.
thanks for the feedback! just curious, is there a reason why people prefer the guard let? is it functionally better in some way? 
Well ... it's clever, but I'd never ugly up my code to save a tenth of a millisecond here and there. It's almost certain this isn't the bottleneck of my build, and someone will fix the compiler eventually and you'll just have to change it all back. &gt; I have 2 issues with the ternary operator: Readability: People who are not familiar with this operator might be overwhelmed by the question mark ‚Äì value ‚Äì colon ‚Äì value and just go bananas in their heads. You're concerned that a programmer will not know `?:` (a feature of various programming languages for the past 40+ years), but will understand extensions and generics?
why not use realm? isn't it easier for offline syncing and such?! I have been working on one similar app just for fun (not an actual product) and using realm has been a major advantage... Edit: I have never used CouchBase and I am asking to get an advice...
That's indeed a valid point. I do a lot of consulting for various companies (big &amp; small) and you would be surprised how many junior developers don't know about the ternary operator. Or they have seen it, but for some reason are afraid to use it :D A few months back our build time was +5 minutes when you just changed 1 line of code. So for us it has been a huge win by changing the way we write code. Although it's really sad we have to change the way we write code, just to keep to compiler sane :-/ Let's hope Swift 5 will focus on performance (next to ABI stability :D)
That's a really useful article. Quick question though. If I want to keep my app rectangular, but use as much of the screen as possible, is there any way of finding out how much of the top and bottom I'd need to cut off without hard coding a number? I.e. Can swift find out the height of the notch/curved area of the screen?
You should use the safe area layout guide for that. However, be warned: Apple may not take kindly to apps that ignore the notch!
If you agree with both extremes, why do you disagree with the midpoint? The way I see it, you can force users to pay in full before using the app, you can allow them to use a portion of the app before paying or you can do something inbetween. E.g make them pay half what you think is fair before they can use the app, and then if they like what they see they can pay the other half to use the full app. If anything, it's more ethical than charging them 100% on the outset as long as you make it clear what the pricing structure is before they download the app.
Do you mean `case .thing(.some(let value))` where the `.some` matches a non-nil optional contained by `.thing`?
Here are pros/cons of each approach: https://softwareengineering.stackexchange.com/questions/18454/should-i-return-from-a-function-early-or-use-an-if-statement I prefer to return early using `guard let` instead of having a single exit point.
Nope. I‚Äôm looking for the equivalent of something like: if enumValue == .thing, let value = optionalValue { } The optionalValue isn‚Äôt an associated value of the enum case, it‚Äôs just a variable I have on hand that I‚Äôd like to use its unwrapped value along with the enum case. Currently we‚Äôd have to do this if we wanted to accomplish this in a switch statement: switch enum { case .thing: if let value = optionalValue { } default: break } What I‚Äôd love is if `optionalValue` could be unwrapped right in the case declaration, as I want to use the default case‚Äôs code if it‚Äôs nil. 
 switch (enumValue, optionalValue) { case (.thing, .some(let value)): /* do something with value */ default: break }
I guess that works, I‚Äôll just use _ for the other value then. Cheers!
Finally sensible answers. Thank you guys
What is this obsession with using the word, curated, recently?
I have not heard of realm until now, we went with CouchBase because the lead developer at the time wanted to use it but I am personally not a fan of couchbase. Thanks for the tip! Definitely going to check it out.
You may want to try working through the [tutorials and examples found here](https://www.weheartswift.com/variables-constants-basic-operations/) to work on your basics.
IDK, I'm Russian
Thanks! That was exactly what I was looking for.
This title triggered the same thought. My guess is that ‚Äúhand-picked‚Äù doesn‚Äôt sound fancy enough when talking about internet links, so the ‚Äúbeautiful, buttery-smooth‚Äù Apple bloggers out there are appropriating museum and art gallery terminology. Edit: OP isn‚Äôt a native speaker and borrowed the word from other bloggers, so all my self righteous criticism skips over to them.
Thanks Artem. FYI, let me help out a little with the joys of getting English correct. Sasha is **an** easy-to-use CLI app for routine designer tasks like icon slicing and project structure. One big difference in English from Cyrillic languages is that nouns that aren't the *proper* name of something will get an "article" in front of the singular form of the noun. I know it's a pain, so let me try to help make it clear. The common articles are a, an, the, that and this. You use **a** in front of a noun that has a consonant sound and is nonspecific. a cat a program a hospital You use **an** in front of a noun that sounds like it starts with a vowel. This is why hospital gets "a" and not "an". You pronounce the h. an operation an indicator an implementation When you want to refer to specific targets, you can use the, that or this. this error that Xcode crash the provisioning profile error I'm sure your Russian is a million times better than mine. Just trying to help your very good English get even better. English is a pain in the ass to get right. Cheers and thanks for the post. 
As others have noted, you can't suppress warnings. However, when you say you "have to use var", I don't think that's quite right unless we have a bug in the compiler. We have much stronger static guarantees than C and that warning is not supposed to have false positives. My advice would be to heed it and use let wherever it tells you and the corresponding `UnsafeMutable*` type for your buffers instead.
Did you mange to fix it? I can‚Äôt get the simulator to work with my computer. It just stalls and everything freezes. 
I saw a comment you made about your main page, so I'm curious if there is a tutorial coming to do a react/vue front-end with vapor as the backend? I could figure this out on my own, but a tutorial to get going right away would be great! I'm currently doing native iOS and Android so my time is usually delegated to both platforms most of the time.
That's called a type parameter or generic parameter in both Java and Swift. Read the Swift Language guide. Seriously.
Thanks for putting this together. I look forward to seeing what you put together.
Hi- thanks for sharing! I am working my way through the App development book and this how-to was right at my skill level. Neat to see a custom control explained in such detail.
Dude, just submit a PR...
That's awesome to hear! I'm glad I could help üôÇ
This is pretty interesting. Normally I'm not a fan of sidestepping autolayout, but this addresses one area (line wrapping) which autolayout really doesn't support at all. Is it iOS-specific in any way? I'd be interested in trying this, if it supported AppKit (and perhaps Carthage). Also, it's not clear how this interacts with existing size properties, like intrinsic content size, compression, and hugging. If this were simply an NSCollectionView that worked well (for finite content), that would be pretty neat.
You may want to consider making this work with swiping.
Excellent advice. Isolation to figure things out, always. 
Is the new `Codable` protocol available on iOS10 using Xcode9?
&gt; Thanks :D One more question: Now I have a Class with a Variable using the generic Parameter, but in its subclass I want the same variable to be a Double. Is there some way I can tell the compiler that I want it to be a double?
sadly no, I downgraded to 8
You can use `fallthrough` to skip to the default case. `guard let value = optionalValue else { fallthrough }`
Thank you! I'll update README.
You should definitely read "The Swift Programming Language" book, the part about Generics. You are asking obvious things, man.
hey! do you mean integrating with React as 2 separate projects, or by typing react code in the Xcode project with vapor? I did it the former way and could do a tutorial on that if that's what you mean. I have a ton of work to do on the site this weekend, but maybe I can do this one early next week. thanks for the interest!
There is shorthand for .some: `case (.thing, let value?): ...`
Definitely the former! I've heard it mentioned before and was curious how that was done. But yeah no rush, can't wait to see it!
ok cool, will try to get to it next week!
That‚Äôs their only contribution in this sub but they aren‚Äôt banned yet even though I‚Äôve reported a bunch of their comments. 
Did that too. Hopefully Tuesday‚Äôs release will work. 
Usually they're used to differentiate between a reserved keyword. Maybe you wanted to name something "long" (for some reason) but that is reserved for the type. You could then name it like so: private let String ``long`` = "hello" (granted I'm not entirely sure long is a reserved keyword in Swift, it's late, but you get the point) 
I think you forgot to escape it and meant \`long\`. That makes sense, but why did they use it in this tutorial book? It doesn't make sense to me unless it was an accident and they forgot to remove it. It's a book about iOS animations, and CAKeyframeAnimation is a valid class and we never declared our own. 
I should have checked. A quick scan for their comment history suggests they're more precocious child, less programmer...
Haven't checked the lib yet, but the name is funny :)
Not sure if I'm correct but I thought you could override scrollToTop() and then scroll your scroll view of choice ? Or add an nsnotification at least ?
You'll have to use the xcode-select command line utility to point to the developer folder of your Xcode 9 installation: sudo xcode-select -s /Path/to/xcode9/Contents/Developer Edit: fixed command -- omitted the -s switch
works thanks! For reference, the exact command was: $ sudo xcode-select -s /Applications/Xcode9.app Where `Xcode9.app` was my installed version of the XCode 9 GM.
Shouldn't put a scroll view in a scroll view. 
very detailed tutorial from Stephen Celis, ex-dev at Kickstarter.
Nothing. It's to show you something.
Alternatively, you can do `export DEVELOPER_DIR=/Applications/Xcode9.app` and call Swift Package Manager via `xcrun swift package init`.
Other replies are correct that \`\` are used in Swift to "escape" keywords, like naming a variable "default", however, in this case this is just a small formatting mistake in the book, which will be fixed in the upcoming update. You will receive the update for free if you [bought the book](https://store.raywenderlich.com/) in the past! :] 
You should only have one view with the `scrollsToTop` property set to `true` on screen at once. So you should set the inner scrollview's `scrollsToTop` property to `false`.
Since you have Xcode installed you can change this in the Preferences menu section of Xcode too. A bit simpler to remember than the command line syntax for something not done very often.
Thanks! I actually ended up buying all the books during the Black Friday sale as an entire pack last year when it was down to $200. 
I only know a bit of python and when I looked into this, I almost fell from my chair. "Did this guy just code almost 4k lines for this?" Then I jumped to the end of the file and saw that you used a template and only the last 30 lines are yours :P Thanks man, no idea why Apples Server is not working. It also gave me some insight in how I would program such a server myself and I also played more with Swift than intended. Thanks again. 
I think it's formatting differently on mobile üòï yeah not entirely sure why they're using the tick marks. 
Do you gain anything by using a segmented control for this over a horizontal stack view of buttons?
maybe unwrap the variable before setting it? if let myName = powerUpData[indexNumber].name{ powerUp.name = myName }else{ print("got a bug somewhere and my name isn't set!") }
Yep! Everything works fine now. Thanks! 
Yep. You were in the ball park. Thanks! 
Thanks but that's not what I asked. You shouldn't waste your time replying to posts because someone else will more than likely give a better response than you did. Have a great day. 
Mac OS X uses Emacs keybindings, so maybe C-a C-o will do what you want.
Assuming you're a main contributor? I'm just about to dive into server side swift and am really intrigued by vapor. I use laravel at work, but wasn't to use swift in my personal projects. Are you guys looking for contributors? Wouldn't mind lending a hand to an Open Source project. 
Use something like [Alamofire](https://github.com/Alamofire/Alamofire#making-a-request) to make an [http request](https://stackoverflow.com/questions/24016142/how-to-make-an-http-request-in-swift). The contents of an http request for a URL that returns an HTML page will be an HTML string!
Excellent SO link showing many different approaches
Thanks a lot! I also managed to get the HTML with the method described in this link: https://stackoverflow.com/questions/26134884/how-to-get-html-source-from-url-with-swift
It's probably a little heavier duty than you want, but XVIM is a plugin for XCode which gives full vim keybindings. 
You probably don't want to use that method, synchronous network calls are the devils work.
let url = URL(string: ‚Äúhttp://www.example.com‚Äù) let html = String(contentsOf: url) ... plus optional handling and possibly a do / catch. I wouldn‚Äôt do it this way though, URLSession is the way to go, but this fits on 2 lines.
NSKeyesArchiver/unarchiver serialize and deserialize classes to and from binary data - a soup of letters and numbers. Structs that conform to the Codable protocol can encode and decode into JSON format, so you can save them as .json files on the user‚Äôs disk directly as a file. For example if you use JSONEncoder and convert a Codable struct to Data, that Data is just JSON. You can then save that data to disk using `dataVariable.write(to: url, options: .atomic)` or you can use this awesome framework: https://github.com/saoudrizwan/Disk
I am pretty sure such a handy method should have this signature: `func mapTo&lt;T&gt;(ifTrue: @autoclosure () throws -&gt; T, ifFalse: @autoclosure () throws -&gt; T) rethrows -&gt; T`
SpriteKit is a 2d game engine and includes an integrated physics library, plus a lot more. If you're new to game development, this is a great place to start. Once you learn more about SpriteKit you will understand when you will benefit from using it.
You are the almighty software developer! You can do what you want to do! Having two (or more) libraries or frameworks or packages which do the same things and are each suitable for a particular purpose is pretty gosh darn common in software development. For example, you could probably also consider OpenGL and Metal and non-apple packages such as cocos2D (i think that's what it is called?) to make games and you could use all those same libraries for non-games. Try a google for 'SpriteKit data visualization' and you'll find some people are using SpriteKit for things like those ever-present and ever-popular heads-up displays of their department's or company's performance. Decide what you want to do, evaluate the available software, consider your level of expertise with each one and choose. You can practise good software development principles to try to keep the connections between 'your code' and 'their code' nice and isolated so that, later, should you learn more about the available packages, you could change your mind; or even have two versions of your app, one using one package and another using another. As to how to choose, it depends on so many factors: does the package do what you need doing? do you know the package? does it run on the platform(s) you are targetting? how hard is it to get help? how quickly are new features added? bugs resolved? questions answered? how much does it cost? how easy is it to hire other devs who know this package? And some of these factors won't even apply to you, for example, if you are just developing stuff for yourself (which is my personal situation) considerations like cross-platform and finding other devs wouldn't apply. Editing to add: I realise you asked about using SpriteKit for 'alternative style games' and, above, I discuss non-games; but the argument is still the same. 
Yes, I'm a main contributor. I'm currently focussed on Vapor 3 since it's a complete rewrite. Contributors are always welcome :) The toughest part of an opensource project is finding a balance in your time spent. You need to write code, since that's your main project. But spending enough time on tests, documentation and tutorials can be really tough. Vapor 2 (the current version) has a severe lack of documentation, for example. Vapor 3 has documentation, but will need a lot of work on tutorials once that's released. Code contributions are also welcome, but it can be a little intimidating to contribute the first (few) times. However, we do have slack channel full of people that help each other. And you can reach out to me, too.
There are methods on `NSKeyedArchiver` and `NSKeyedUnarchiver` which work with Codable protocol. Those are `encodeEncodable(_:forKey:)` and `decodeDecodable(_:forKey:)` respectively.
Thank you for your comment. I am working on another video as I'm writing this. I hope to have it up soon. Have a nice day.
Awesome. I actually looked at the validations PR last night and felt that intimidation haha. I'll keep an eye out to see if there's anywhere I can help though!
At the moment ARKit has enough trouble keeping the location of an object during the session. I imagine you could probably use beacons or QR codes to consistently project an object at a certain place but just from AR session data it would be incredibly hard to reconstruct. Edit: Even with CoreLocation, the accuracy is off enough to make projecting an object at a certain place incredibly hard. You can get the vicinity, but it's inconsistent at best.
The YouTube comments include a few more tips.
Oh hey I personally know this guy. He‚Äôs a great dude 
Nobody is able to guide?
The lack of XVim support is the real problem with Xcode 9.
Yep I‚Äôll be on Xcode 8 until then. Tried to use AppCode as a standby but I‚Äôm not a fan. 
Check out [Kana](https://github.com/tid-kijyun/Kanna). It's works great for parsing HTML.
This, tried something similar myself for a hackathon and couldn't get "shit to stick" so to speak. 
You and me both. I have friends who swear by IntelliJ but I just don't feel it. I'm guessing I will have to use Xcode 9 anyway if my team is upgrading but I loathe the thought.
Yep. Switching to AppCode as of today.
What do you mainly use it for? It's cool but I haven't found anything that I can't do otherwise
Well, text editing. Since I started using Vim I want all my software to behave like Vim. XVim makes Xcode behave like Vim to a certain degree and losing that sucks for me.
I think you need the numberOfSections method
You may be right. What would I return? In the end I'll want at least two sections. One for 'My Parks' then the other for nearby parks.. How would I do that? Returning 1 doesn't work.
You could create an array with your section names as strings let section = ["one", "two"] Then in your method return section.count
I'll keep that in mind for a later date. But returning 1 didn't work. So how do I get the data to appear? 
I'm on mobile so I can't actually run your code maybe try changing the myCell.textLabel! To myCell.textLabel? Also check if you have your cell registered in your storyboard with the same name as in your code 
that did not work either. This is the first time I've tried to connect a table to a database so I am very confused. 
Where are you getting the data from?
My website. This is where I'm learning how to do this but so much has been wrong from the php script to this so I'm just trying to tailor it for my uses. http://codewithchris.com/iphone-app-connect-to-mysql-database 
Since the tableview is loading it must be a problem with the textLabel - which really has me confused. Do I need a label in the storyboard? I've tried this but just got some errors. Or will it automatically generate a Label for my cells?
You need a label in the storyboard and need to link it to your view controller
Now I get the error: &gt; error: Illegal Configuration: The parkNameLabel outlet from the ParkViewController to the parkNameLabel is invalid. Outlets cannot be connected to repeating content. What does it mean when it says it is repeating? I don't have any other labels there. 
Delete the connection and see if the cell has the same name as the one you are dequeuing in your controller 
They're both called 'myCell'. Is deleting the connection supposed to rename the class for the cell? 
I can see where you're coming from, but they're also not wrong... As a developer for both platforms, I've found that IntelliJ/Android Studio work a lot better than AppCode. The keyboard shortcuts, refactoring tools, and live templates are AMAZEBALLS in IntelliJ and just fairly good in AppCode. That said, keyboard shortcuts and refactoring sucks in Xcode, so I still think refactoring is *slightly* better in AppCode.
no I thought maybe the cells were named differently and that could be why it's not displaying. Maybe your downloadItems function isn't populating the array?
It's an error you get when trying to connect a reusable cell to your view controller. Do you have the delegate set in your storyboard and is the class name properly set?
I would suggest using whatever for a path you want to continue later in life. Wanna be a game developer? Learn unity. Primarily interested in app development? Go the swift route. 
This is really useful!
I can't set the TableViewCell as a delegate. 
Thanks, this has been helpful. How would you go about modifying it to be able to have more than one cell ? 
That's not very common, at least not in my experience. A lot of the time nobody will even look at your resume or application because an algorithm has deemed you not worthy. That and the old "you have to have experience in order to get experience." 
Sure, you can do everything without Vim. The point of Vim keys is you can do it all a lot faster and more fluidly (once you've trained your muscle memory). For a job that involves structured text manipulation all day every day, tools that allow you to edit text faster and more fluidly can be very important. So for people who take the time to learn Vim, the benefits are great. 
There's [XVim2](https://github.com/XVimProject/XVim2), but it has a long way to go. Though at least there's progress being made. Apple really should be doing this themselves though, or at least assisting the project. That they have totally blanked the Vim using community is a nasty mark on their developer relations. 
I haven't watched those in years, but I remember it was damn hard to read the code and that was on a regular screen, on a mobile screen, you'd never have a chance of reading something that small. Maybe downloading the code in advance would be a good solution. They'll still probably show up on YouTube.
That's weird, but I don't see it being a problem though considering a lot more people just use the YouTube playlist. Heres a link for the CS193p playlist on YouTube: https://www.youtube.com/playlist?list=PLPA-ayBrweUz32NSgNZdl0_QISw-f12Ai Some links to the class work and slides: https://web.stanford.edu/class/cs193p/cgi-bin/drupal/ You can also check out this awesome GitHub page for all the lectures, slides and reading assignments. https://github.com/duliodenis/cs193p-Winter-2017
you can subscribe to a course through ios and then watch on macos through itunes/podcasts/your subscriptions. But I find it hard to look for courses through podcasts sections, only going to some itunesU/university and then back to itunesU helps to get access to education "podcasts" and navigate there p.s. you can do it by going here http://itunes.stanford.edu and then "LAUNCH STANFORD ON ITUNES U" on top left corner you will have iTunesU/Stanford by clicking on iTunesU you will get to education podcasts (hidden/old iTunesU?) 
What do you mean? Having more than one kind of cell? 
Where's the whole swift sub? went back to school I guess, heh. :) Nice article, the whole time I was thinking, okay, but how will the UI behave on rotation. Well, nohow. And that's why we have autolayout. I seriously hate that Youtube doesn't support landscape on my 6S+, while it's supported even on the shittiest android phone. This tool introduces more problems than it solves, but was a fun read, thanks for sharing!
Have you set the cell identifier on your storyboard? Also I would recommend using ? on your myCell.textLabel?.text = item.parkName, otherwise you might crash and burn because of this at some point. Additionally you could try to dequeue your cell as UITableViewCell let myCell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath) as! UITableViewCell
Still broken af :|
This is indeed a custom styled grouped tableview, you can use tableview headers with a custom view / or fake it with your own header cells I suggest you search for a basic tableview tutorial
Oh, I‚Äôve definitely fallen into both of those myself. But I‚Äôve also definitely missed an opportunity or two at some places I‚Äôd have really loved to work at partially due to this. 
Not the cell set the controller as a delegate
I was trying to return 2 BWCollectionViewItems instead of one. One item being arranged at the top and the other item under it. 
I've just released an updated version of my game called **Marbles AR** available on [App Store](https://itunes.apple.com/us/app/marbles-ar/id1162028350?ls=1&amp;mt=8) using ARKit. It works both on iOS 11 with ARKit, and on iOS 10 without it. The source is available on [github](https://github.com/UnalignedByte/marbles). I'm finishing a second AR game called **Square Off AR**, where you have to build a tower as tall as possible without collapsing. I'll be uploading it today or tomorrow. Have a look at it here https://www.youtube.com/watch?v=fhBp8lVm7Xs 
Thank you very much! How can I make the Arrows from the Cells? Is there an option to enable them, or are they just images? 
there is an accessory type on the cell you could https://developer.apple.com/documentation/uikit/uitableviewcell/1623228-accessorytype
there is an accessory type on the cell you could set https://developer.apple.com/documentation/uikit/uitableviewcell/1623228-accessorytype
I don't know how to set the View Controller as a delegate. 
Yes. And I can't do that. It needs to be as! LocationModel or else I get an error. 
There's another that was posted here, showcasing how much faster it was compared to Vapor called [OpenKitten](http://openkitten.org/beta/site/index.html). However, I think he's doing Vapor 3 things now..?
I can't seem to find the issue when it comes to loading my data on this table. I've searched for an answer and tried the many things people have suggested but nothing has come of it. I'm now posting all the code to see if there is something wrong when getting the data. 
just glanced at it, but where are you setting your delegate? is reloadData actually called?
Both in the ParkTableViewController. 
Have you tried downcasting your cell after dequeueResuableCell? In your case it‚Äôll be something like (withIdentifier: cellIdentifier) as! cellIdentifier
I think you might be looking at the wrong part. The commenter above meant where you die dequeueReusableCell(withIdentifier: ...) I think you might need as! parkCell after that to downcast the custom cell. 
I'll try that when i'm back at my computer. What is downcasting? 
I'll try those. Thanks
It‚Äôs when you want the compiler to use a more specific class for your tableview cells. You have the custom class parkCell so you need to specify that when you dequeue. 
Looking again I think that might be your issue. You‚Äôre trying to set the textLabel.text using your data, but without the downcast the reference to myCell.textLabel.text isn‚Äôt working. I might be wrong, but that‚Äôs a mistake I‚Äôve made several times myself. 
The landscape layout is a big issue. I didn‚Äôt choose the Instagram for no reason though. Instagram, Youtube, Twitter, Spotify, and more have chosen not do make their apps adjust for a landscape view. Every app I‚Äôve made also has no need for landscape view. Not to say that it wouldn‚Äôt be nice it‚Äôs, in my experience, unpredictable and not intuitive for users. Of course all apps are different. Also keep in mind this is my first post on this topic and I outline the drawbacks, benefits, and my process to start a conversation on how to deal with issues like adjusting for landscape view. The way I see it now is that AutoLayout is the only option right now and I don‚Äôt like that. So this idea is really for people who are having an issue with AutoLayout.
You can modify a storyboard by code, but it's not recommended. In this case, it's better building the UI programmatically (and to some, all of the UI ;) ). This is a bit unlike Android since there's a direct XML layout you can design with. The best guideline is to start building something. There are common libraries like Alamofire, but personally I prefer not relying on dependencies unless it's absolutely necessary (client wants x framework, etc.). This is a bit different from Android where Dagger 2, OkHttp, Gson, and Retrofit are everywhere for Dependency Injection, etc. Just experiment.
First of all thanks bro As short answer best guideline is practice! But i saw many things like ios-xcode constraint layout and its far away from android's consraint layout I wanna know the best practice only 
I think most of what you'll learn will be applicable to iOS 11. I would just continue and then learn what the new stuff adds to what you already know.
Keep it up! Vapor has become my favourite API framework for swift.
I could list you what are some of the more popular frameworks. As such, if you're building out your iOS application programmatically, a popular framework is SnapKit, where it tries to make/create constraints much more easier. Another option is Moya Swift, which is a network framework. Like what /u/deadshots said though, experiment and have fun. Good luck!
[removed]
I am curious what your bachelors/associates degree was. Hope things are going well!
It's not updated yet for Xcode 9 btw
 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let cellIdentifier: String = "parkCell" let myCell = parksTable.dequeueReusableCell(withIdentifier: "parkCell", for: indexPath) // Get the location to be shown let item: LocationModel = (feedItems[indexPath.row] as! LocationModel) // Get references to labels of cell myCell.textLabel?.text = item.parkName return myCell } That just produced an error of saying cellIdentifier is undeclared. How do I declare it? In my new code, would it harm me simply to get rid of "let cellIdentifier: String = "parkCell"" because its now simply "(withIdentifier: "parkCell", for: indexPath)" in the line below. 
http://www.reactiongifs.com/but-why/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=but-why
so that you don't have to port things yourself? or pay for swiftify? it's pretty dope.
I meant why JS? Just to have a web implementation?
i think it's because the libraries it relies on are implemented in js. it uses at least peg.js. 
Unless you know Unity programming, go with SpriteKit. Unity is C# or JavaScript.
So after for: indexPath) have you got as! parkCell ? Just check that your custom class for the table view cell identifies the class as parkCell, so it should say something like class parkCell: UITableViewCell What you downcast (the as! parkCell part) the cell as must match what your custom class is named. So if your class file starts with class ParkCell: UITableViewCell then you need to downcast as! ParkCell with the capital P. If you want to paste the whole code as is again I‚Äôll take a look at the whole thing if you like. 
I wish. It should
Swift 2.1, what year is it?!
Playing around with it I found something really interesting, if I used the constraint ``` contentView.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: "V:|-[nameLabel]-|", options: [], metrics: nil, views: ["nameLabel": nameLabel])) ``` the labels appear correct, only at the top of the cell (where they should be at the bottom). However, if I do ``` contentView.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: "V:[nameLabel]-|", options: [], metrics: nil, views: ["nameLabel": nameLabel])) ``` that is when I see the offset labels with two of them floating above the first two UICollectionViewCells.
thanks! yep, there will be more to come :)
Converting from one language to another is just a pretty darn bad idea. Ever tried to translate Spanish to something like Danish on Google Translate? Yea, that's why.
amateur hour
Have you checked if you are getting the data properly? Try debugging it.
This. And Swift integrates with ObjC code pretty well so...
Exactly. It's pointless.
You need to research frame size, (scroll view) content size, and intrinsic size. Hint: the three sizes are all different for a web view.
I've been an iOS engineer for a decade and here is my honest advice: submit it again. You'd be amazed how often this works. Sometimes a reviewer just makes a bad decision. Submit it again, and it'll more than likely be accepted.
The most annoying fatal error for me as beginner XCode coder is that I put the asset files but did not check the box to link it to the app project.
Nah. I think the code would be ugly. I had converted a lot of code manually to get comfortable with Swift. There's something beautiful about the resulting code. You have to think Swift and refactor a lot to take advantage of its constructs. No way to do that automatically.
Ofc it doesn't but this stillvmakes it faster.
It actually doesn't matter for this as the objc part of swift hasn't charged like at all.
Then it should be an easy update for at least to Swift 3.2 I guess. ;)
This is incorrect. It has changed in swift 4.
The generared code would be the same.
What has changed?
https://i.imgur.com/PxSQXWJ.jpg
Go fuck yourself.
One example is that you can't use the @objc annotation on extensions any more. EDIT: Think I have that the wrong way around and it's needed in swift 4 where it wasn't previously.
You fundamentally misunderstand what the tool does.
Nope, I understand what the tool does...
Then your would understand that the difference you point out is inconsequential because the tool wouldnt be taking advantage of it anyway. 
You don't seem to understand the implications of what I'm saying. The change note for Swift 4 is here: https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Compatibility.html &gt; The @objc attribute is implicitly added in fewer places. Here's a stackoverflow link explaining the change with examples: https://stackoverflow.com/questions/44390378/how-can-i-deal-with-objc-inference-deprecation-with-selector-in-swift-4
I understand very well. Thus change matters extremely little for this.
It matters if you want compatible code. I guess what you might mean is that this is irrelevant when the converter doesn't handle extensions correctly anyway: https://i.imgur.com/tcxkKHU.png
It doesn't matter because the code this generates needs to be manually changed anyway and the difference you are talking about is so miniscule that's it doesn't really matter.
Keep learning Swift 3. XCode 9 and Swift 4 is very similar to older versions. I have learned all I know in Swift 3/ XCode 8 tutorials and had absolutely no problem creating my new app in XCode 9 beta. When you are finished with your tutorials make sure to check out ARKit and MLKit. I have never thought that MLKit would be so easy to implement and so useful to use.
OK, so a number of issues to do with things changing, in particular: the cell height and the web view content. As with all science, the way to understand the effect of multiple variables is to change 1 whilst holding the other n-1 constant. I would initially set a reasonable constant height on the cells, and get the content issues sorted out. By content issues I mean the fact that you say when the cell is reloaded it will refetch the data; this shouldn't happen. I think you need to have some model objects. The cell gets its data from the model object; if the model object lacks data it will get it by, for example, fetching it over the internets, but it will only fetch it once. If the data change frequently and you need to refresh it, then that is a separate concern from reloading cells. Once you have the cell reloading (and data loading) issues sorted, you can move onto cell height. You need to step away from constraints for a sec and decide what it is you want the cells to do wrt resizing. Should the cell be tall enough to show _all_ the content in the webview? or maybe be as tall as the content, but only up to a max, beyond which the user must scroll? or any of a 1000 other possibilities. Once you have that goal in mind, then start flinging constraints around. One last point, you say setting a heightAnchor after the data has been fetched breaks existing height constraints. So you either need to change existing constraints or delete them and add new ones.
I giggled
I'm playing with CoreImage Filters and build this simple macOS App - [FilterShop](https://github.com/KrisYu/FilterShop) 
Hacking with Swift will be updated for Swift 4 and iOS 11 in the next few hours, so this ought to be a moot point. (Source: I wrote it.)
Yes https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/WhatsNewXcode/xcode_9/xcode_9.html
And are there any updates to when will it be released?
and are there any clues to when it will be fully released?
It's out right now. https://developer.apple.com/download/
i have a rather small but complex(for me) code and don't want it to be ruined...now its a hard choice
It'll work just fine. I've been alternating between 8 and 9 for awhile now. 
- iMac: Late 2009 or newer - MacBook and MacBook Retina: Late 2009 or newer - MacBook Pro: Mid 2010 or newer - MacBook Air: Late 2010 or newer - Mac Mini: Mid 2010 or newer - Mac Pro: Mid 2010 or newer You want as much RAM as you can afford. And yes, you'll need an actual iPhone or iPad that can run iOS 10 or later if you want to run your apps natively. You can run on the simulators that come with Xcode if you want, but that's a pain in the ass on a slower system.
how can you do that using one laptop 
rename one of the XCodes