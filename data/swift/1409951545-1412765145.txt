That doesn't make any sense. Not to mention Railscasts was much, much earlier than Laracasts.
I think it's even more subtle than that. Isn't it always – in any language – just an optimization? It becomes an absolutely essential optimization, however, when you start writing in the classical functional style where you write recursive functions. Without TCO, your code would still be correct, but you would have fatal stack overflows all over the place were TCO not there to support you in writing in that style. So I think it's more that TCO is essential to the usability of the language for that style of programming, rather than correctness. Scala has a nice compromise. Like Swift, they cannot universally guarantee TCO either, but instead they allow you to annotate a function with `@tailrec` to tell the compiler to fail the build if it's unable to do TCO for that function. This way the programmer gets the comfort of knowing that the optimization was done, rather than having to read the resulting assembly/bytecode.
That is certainly not my intention. It is similar of course to RailsCasts and Laracasts but intended for Swift. Sorry for any confusion.
That's a practical point of view. It would be confusing, though, for someone with a more formal view of what correctness entails, for it's only resource constraints that cause the crash, not an implementation flaw. Would anything ever be correct if you could break correctness just by making the machine sufficiently small?
Take a look at the function spawnPipes() in [this](https://github.com/lorenzopicoli/SwiftBird/blob/master/FlappyBird%20-%20Swift/GameScene.swift) file. It's a flappy bird clone it does exactly what you want, maybe it'll help you.
This was the answer and thank you!
This was correct :D. And thanks. That does make sense I guess haha.
Looks like shit in an iPhone 
Looks pretty nice! Why the hell is isPrime an Int though?
Generally interested, how do other's create something like this?
Pretty... Is there a github link would be cool to see some scenekit code.
https://github.com/WilsonKoder111/SwiftSceneKit 
I don't even... how?
This is so cool and so fast, how does it work? 
I'd be damned if I knew. The site admin unfortunately doesn't seem to post any information, but I'm guessing it's an OSX server backend compiling the code and displaying the output. I unfortunately did seem to get it to crash with a project euler solution, but that might also be my end, I can't really know.
Ya, sorry about that, my CSS skills aren't very good haha, but then again it isn't targeted at mobile anyway :p it isn't exactly horrible in landscape mode though!
You should have titled it iOS to OSX, as is it seems like you're asking what resources you should use to learn ios dev which gets asked and answered all the time and is annoying as hell. 
Just a bit surprising - writing about a mobile technology, but in a format that looks bad on mobile.
I'm a native developer this web stuff is new to me :) I just pushed some CSS fixes though so it should look a bit better
Applause, great job!
no problem. fix it when you have time
Hmm I guess another way to say it is there are three text boxes where you type in a number and the numbers are then divided by their weights and summed into a fourth textbox or whatever 
Swift is very slow when compiler optimizations aren't turned on. When on, it's very competitive in terms of performance.
These kinds of posts come up from time to time. See this example from StackOverflow. [swift performance sorting arrays](http://stackoverflow.com/questions/24101718/swift-performance-sorting-arrays)
Hi "damned if you knew". I made swiftstub. here's a link of that project euler example working: http://swiftstub.com/119176146/ It runs on multiple VM's. It's sandboxed in multiple VM's that get created and destroyed every so often. You can save your designs and pass them around. 
&gt; You must be the guy that made runswiftlang I am not, but thank you for the information nonetheless! :)
Is that the example you were talking about and does it work now?
If you feel like saving lives and being awesome press save at the bottom of the site and PM me the url to your saved design so I can see what's happening. Thanks for finding a bug!
Just pasted a 1600+ line version of my GitHub project, along with some basic test code, and it worked. I wish I knew about this Thursday night while I was preparing for a Swift presentation I gave to various colleagues at work.
Who the heck knows?
In Objective-C `setFrame` is the name automatically generated for the setter. In swift, the setters are not given method names, you simply call *property* = *value*. If you want to override the setter like you did in Objective-C, Swift allows you to do so: class CustomTableViewCell: UITableViewCell { override var frame: CGRect { get { return super.frame } set (newFrame) { var frame = newFrame frame.origin.x += 20 super.frame = frame } } } *The getter in there is required if you override a setter in Swift*
Fetch some sample code. Read some sample code. Modify some sample code. Pay the $99 for a developer account that lets you publish in the Mac app store (and gives you access to some frameworks that are forbidden to non=store apps.) Apple makes the source code to their app TextEdit available on the developer website. Use Layer-backed NSViews, read Apple's docs, and you'll find that much of what you know from UIKit carries over to UIKit, and many of the other frameworks are the same. Then, make your app scriptable. 
I tested the following code and got no errors. protocol SomeP { } class SomeC: SomeP { var name: String = "Name" } class A { var protocolObject: SomeP! } class B { var protocolObject: SomeC! func f() { protocolObject = SomeC() var obj = A() obj.protocolObject = protocolObject } func g() { println(protocolObject.name) } } let b = B() b.f() b.g() Are you sure the deinitialization is the problem? Are you sure you're not trying to access the implicitly unwrapped optional before you initialize it?
Command line utility
That's impressively concise! I had no idea it would be that easy to work with.
The usual recommendation for new Cocoa programmers is Aaron Hillegass's book "Cocoa Programming for Mac OS X". I'd suggest grabbing a copy of that to get used to things, then trying a few simple projects. Once you've done that, maybe find an open source project to mess with so you can see a real Cocoa app's structure (my person bias says check out Adium for this). Edit: oh, and just to save you some pain, a few major differences: * Where iOS says "view controller", OSX usually says "view" instead * Where iOS says "window" I have no idea what it means. OSX actually has windows, and they're important. * Where iOS says CG, OSX has AppKit-provided functionality for a good bit of it, using CG directly is less common * Where iOS says (or used to say before TextKit) CT, OSX usually says NSAttributedString
Sorry it was not very specific on that i mean Augmented Reality by AR.
Takes 15ms with the default release optimisation settings. It takes around 6.5 seconds on my machine with the debug settings, so it should be even faster on yours. The differences based on optimisation levels are a bit crazy. Also: I feel strongly that indices should be avoided, so here's a rant on how to do your loop without indices. With the default tools, you can write it as: let f = map(Zip2(d, e)) { $0 * $1 } This does the same as your for loop. I don't get why Zip2 is programmed the way it is, it should just be a function imho: func zip2&lt;S1: SequenceType, S2: SequenceType, R&gt;(s1: S1, s2: S2, combine: (S1.Generator.Element, S2.Generator.Element) -&gt; R) -&gt; [R] { var g1 = s1.generate() var g2 = s2.generate() var results:[R] = [] while let result = ifBoth(g1.next(), g2.next(), combine) { results.append(result) } return results } func ifBoth&lt;T1, T2, R&gt;(t1: T1?, t2: T2?, combine: (T1, T2) -&gt; R) -&gt; R? { if let t1 = t1 { if let t2 = t2 { return combine(t1, t2) } } return nil } // Array-specific version because why not func zip2&lt;T1, T2, R&gt;(array1: [T1], array2: [T2], combine: (T1, T2) -&gt; R) -&gt; [R] { let count = min(array1.count, array2.count) var result: [R] = Array() for i in 0..&lt;count { result.append(combine(array1[i], array2[i])) } return result } with that it's let f = zip2(d, e) { $0 * $1 }
Worked great! 
I'm guessing you haven't implemented spawnPipes. Look through your github example for the implementation of spawnPipes.
https://github.com/fullstackio/FlappySwift/blob/master/FlappyBird/GameScene.swift I dont see it in the file
I still get the same error.
If you've included that method, and you're still getting the error, clean and reopen Xcode. Sometimes it doesn't recognize things. But that should have done it.
Not 100% sure I follow what you want, but in the storyboard, you can add a Container View to one of the Tab Bar's ViewController's view, which you can then embed a different UIViewController in. Or in code you can add a different viewcontroller as a child controller and add its view as a subview. But not sure why not just make what you want to display as tab's controller in the first place? More on Containers: https://developer.apple.com/library/prerelease/ios/featuredarticles/ViewControllerPGforiPhoneOS/CreatingCustomContainerViewControllers/CreatingCustomContainerViewControllers.html
Thanks for the tip
Hey everyone, I also wrote a follow up post looking at a slightly more realistic example here: [http://mathewsanders.com/custom-menu-transitions-in-swift/](http://mathewsanders.com/custom-menu-transitions-in-swift/) And @dpjames — thanks for posting!
Use optional binding. var x:Int? if let y = x { // x was not nil, and its value is now stored in y } else { // x was nil } 
Sadly, but, not surprisingly, people are heavily focused right now on aspects of Swift that exist primarily to support compatibility with existing Objective-C patterns. The idea of a nil being returned by a working method call, for example, is a terrible idea that persists due primarily to laziness or lack of creativity and forethought in software design up until now. It's a dying concept. Ideally, going forward, use of nillable variables and return values will be kept to an absolute minimum in "Swift native" code and libraries. So the seemingly inconvenient aspects of Optionals should be considered a bandage, or bridge feature to deal with the ongoing existence of Obj-C. In reality, new API, function, and class designs should be promoted to deal more directly with the situations that may have resulted in nillable values before. For example, a method call that has such a high likelihood of errors occurring that it would directly return an error object "Maybe" should just take a closure that handles the known error conditions, perhaps expecting a parameter detailing which error condition occurred. In fact, it could take two closures, one for success and one for failure cases. Anyway, I digress (majorly.) The point is, checking for nil is always going to be a little wonky because it is something you should be trying to avoid in new designs going forward. It's just a value that an Optional can have, so you can check for it in any manner you feel like as well as using a few of the special constructs designed for optional use such as... Forced unwrapping (append ! to expression resulting in optional) which is useful when you believe a nil value is a sign of an error and you want to crash as soon as possible under such conditions. println(methodThatReturnsOptionalAndWeDoNotWantToAcceptNil()!) (will crash if nil is returned) And there is implicit unwrapping which is basically the same except the bang (!) goes on a variable let result! = methodThatReturnsOptionalAndWeDoNotWantToAcceptNil() println(result) or... Just check with if: if (someFuncThatReturnsOptional() == nil) { } but optional binding is even better, typically if let result = someFuncThatReturnsOptional() { // do whatever } else { // do whatever if it was nil } And of course you can chain calls that all return optional safely with the optional chaining operator if let result = someDict["key"]?["key2"]?.methodCall() { } And finally, the nil coalescing operator to basically give you a default value for when nil is returned: println(someDict["key"] ?? "defaultValue") Of course, if you actually read Apple's free book, "The Swift Programming Language" then all of this is covered.
Awesome thanks for the detailed response
I know what a method is..............I copied the whole code into my xcode project and I got 21 errors. pipeUp.physicsBody = SKPhysicsBody(rectangleOfSize: pipeUp.size) pipeUp.physicsBody.dynamic = false pipeUp.physicsBody.categoryBitMask = pipeCategory pipeUp.physicsBody.contactTestBitMask = birdCategory pipePair.addChild(pipeUp) I get three errors for the 3 middle line of codes that says "SKPhysics? doesn't have a member named dynamic", "SKPysics? doesn't have a member named categoryBitMask, "SKPhysics? doesn't have a member named contactTestBitMask" I think its a xcode problem. 
As you've guessed, both Twitter and Instagram do store their data in databases on servers. There is caching that happens on the client (the application to view their data), but this is only after they fetch the data from a server. HTTP requests are sent to the server either adding, updating, retrieving data. Simple databases you could use to store data are postgres or MySQL. Twitter and I'm sure instagram use other databases to handle their large data problems, but that's not something you would have to worry about yet. As far as server-side code goes. Twitter's front-end was originally built in Ruby on Rails. I believe a lot of it has been migrated over to Scala's Play and some Java. They have their own front-end framework I believe they use, do not remember the name of it. There's a lot that goes on to make what seems to be simple apps happen. Hope this helps!
Much much nicer than NSNotificationCenter. Make sure to add this to http://www.swifttoolbox.io
helps a lot! so theres no way to create a server side code using swift? because i was wondering if AlamoFire was a swift based networking client that i could use to communicate to another database but i might be wrong... http://nshipster.com/alamofire/
Thanks! We are excited to launch and hope it becomes a great resource for Swift.
Alamofire is for the client side. Technically it's possible to write a Server-Side code in Swift (eg. some Apps offer an integrated HTTP server to display files and such stuff), but it's very unlikely that's what you want to go for. If you want to get a very easy start: Json is a very popular format to exchange data between server and client. So to get started, you could place some static json files on your computer and start up apache (a web server that comes with Os X). Then you can start coding your app, and request your static json to test the App (eg. with alamofire). This way you can play with your App's networking code and displaying the data in a UI quite quickly. Once you want "proper" data from your server, you can simply change the URLs, and generate the json from some database or whatever source for the data you have. However, if you're new to coding, going for an app that has both a back and front-end might be a quite difficult task.
So you don't get the same error. :-P No, it's not an Xcode problem. Look at your Error: SKPhysics? doesn't have a member named dynamic So, that's wrong, SKPhysics has a member named dynamic, right? Yes, it does. But look closely: Xcode tells you that SKPhysics**?** does not have that member. The question mark means that it is an **optional** SKPhysics object, and that one does not have these members indeed - an optional does not have a lot of members, you need to unwrap it first. So why is SKPhysicsBody an optional? Because SKSprite does not necessarily have a physics body. The physics body property is declared as var physicsBody: SKPhysicsBody? in SKSprite, an optional right there! A lot of these things changed when beta 7 was introduced, which is why your sample code doesn't work anymore, which was written for an older beta. The fact that physicsBody is an optional now is a good thing, it tells you right away that the property might not be set, while before (i.e. beta &lt;6), accessing it might have caused a crash because it force-unwrapped an optional that could actually be nil. So how do you solve this? The easiest way would be to just add a question mark everywhere, e.g.: bird.physicsBody?.dynamic = true But you could also do: bird = SKSpriteNode(texture: birdTexture1) let physicsBody = SKPhysicsBody(circleOfRadius: bird.size.height / 2.0) bird.physicsBody = physicsBody physicsBody.dynamic = true ... In this case, you store physicsBody in its own variable that is non-optional (i.e. physicsBody is of type SKPhysicsBody without the question mark), then you can access that variable directly without all of those other question marks.
Interesting trade-off - less memory usage, but more processor usage. It would be kind of interesting to have some more detailed information about this: How much memory would be used when storing a full gif in memory vs this approach (for some example gif)? What's the CPU impact? I assume this is worse for battery life, but it's worth it for longer gifs.
Good call. I can add some more data. A GIF of 500 frames would be ~700mb if all frames are loaded simultaneously. All GIFs end up around ~30mb with this approach. Also, this Swift implementation is as performant as a previous heavily optimized Obj-C/C implementation. That's a good sign for Swift ;)
Part of iOS 8 is CloudKit that makes it easy(?) for your app to save and write data to iCould: https://developer.apple.com/icloud/index.html You're still writing a client/server app, but you're writing all the code in your app (and maybe a bit of configuration in the browser to set everything up). You might also want to look at Parse: https://www.parse.com/products/core Both options are pretty generous and allow you to start for free and only pay if you grow large enough.
Thanks for the help it worked!
These are good options definitely to start. I don't feel Swift is essentially the tool for server side programming though. I would stick with things such as Scala, Ruby, PHP, Node, etc. Swift is proving to be a great scripting language, but I don't think there are the libraries yet to really make writing server side applications a reality.
It is bad practice to include your Parse keys in a public repo.
No READ ME? :( 
Xcode 6 GM has already been released
On https://developer.apple.com/devcenter/ios/index.action there's the following note: You may now use Xcode 6 GM seed to submit apps to the App Store and Mac App Store. So I'm assuming submitting a Swift application is just fine.
Known issues are not a problem. Unknown issues are a problem. Presumably they are comfortable with the level of unknown issues.
what is the last build of Xcode? I've the 6A280n.
what is the last build of Xcode?
Oh ok, interesting. Let's hope they clear out the remaining problems... Beta 7 was actually quite usable, at least I didn't experience too many compiler crashes and other weird issues. It kinda feels like Apple is releasing beta software as a GM version though...
This will come in handy for sure. Thanks for sharing!
Serious question: why would I want to? 
Right. I will fix that right away. Well when I get home...
Swift apps actually bundle the swift runtime with them, so yes, you can use swift apps on ios8, even though it doesn't include the runtime. The reason is that swift will break binary compatibility in the future, but this way the apps will still run fine.
Been posted here before, but wondering what type of project did you use this for?
Known issues with no work arounds are problems!
Every known issue with Swift that is missing a workaround (which is not that many) has a backup workaround: don't use Swift. Remember, you can use both Objective-C and Swift in a single project.
Well, this was done as an exercise, which is great. But, for production code, you'll probably just end up adding bugs converting to a new style.
but in theory it is still possible right? I appreciate all the comments if any of you guys would let me contact you guys about questions regarding coding please message me your email or Skype I'm trying to learn as much as possible! thanks 
Is there any way to program in Swift on Windows ?
XCode is OSX only
Start a sydney one and I'll be there. 
Although Xcode is only available for OSX, you can give the language a try and play around through sites like http://swiftstub.com no matter what OS you're on.
Decent summary.
I'm lovin' Swift, but I think it's best for the language and for Apple for the compiler and runtime to be open-sourced. Because of the cross-platform nature of LLVM, that'd allow the language to at least be written and compiled on Linux and Windows machines, and they can keep the Cocoa libraries proprietary.
Eh, the same is true of clang, but that was open sourced. Written entirely at Apple initially, then merged into LLVM.
swift is not open source
I'd disagree -- more potential people developing open-source libraries and tools adds immense value to the language itself. The use of Swift as a potential server-side solution is currently limited to OSX-based servers, which pretty much makes it out of the question for almost anyone I know. And hey, Google open-sourced Go, and it has been a great thing for the language *AND* the community. Even if Apple doesn't open-source it, what's probably going to happen is that there will be, eventually, a community-created Swift front-end that hooks into a Linux-available LLVM back-end.
how is it irrelevant? i guess what i mean to say is, i understand it doesn't make it impossible. but it seems pretty relevant if the "port" involves re-writing the compiler and standard library from scratch.
Yea, it took about 3 years to develop Mono for C# (also closed source). I'm feeling pretty good about Swift getting open sourced though. Lattner's one of the good guys.
They'd love folks to learn the language, and for others to submit bug fixes optimizations to the compiler. But they definitely want Swift to be *the* higher level language for their libraries. My guess: once Apple has tweaked the language to support the design patterns of their libraries in convenient syntax, clear semantic meaning, and functional (though maybe not optimal) cross compatibility with Objective-C... Then they will open source the language, but without their libraries. Look for Next year's WWDC at the earliest.
&gt; people can build there own parser That's not porting it. That's reimplementing it. 
Good job. MATLAB is crap anyway. Just millions of functions, without any concept
Hi there! Do you mind if we advocate the usage of this for code snippets on #swift-lang in freenode? Also, any chance of import support?
I'll take partial credit for this, as I subscribed around 4:45 ;)
http://www.reddit.com/r/programming/wiki/faq#wiki_what_language_reddits_are_there.3F
Just because you haven't had a use for them doesn't mean they aren't incredibly important to have available. There's a reason aerospace engineers don't use Swift, Rust, Ruby, etc. (And likewise plenty of reasons web/app developers don't use Matlab.) Matlab's more of a tool for doing science/engineering/math than it is a programming language.
Does the Swift front-end let you dump LLVM IR? For very very simple things that could possibly be compiled to object files using a Windows version of `llc`, but you'd be missing the runtime library, IO probably wouldn't work, etc etc. One wonders whether the Swift front-end is structured in a way that would allow https://github.com/joyent/libuv to be used for IO, as in Node.js, Rust, Julia, etc.
Matlab also makes publishable charts/graphs. Or at least it did 10 years ago.
Every subscriber takes partial credit for this. ;)
Check out my answer here on Stack Overflow (ugly but it works): http://stackoverflow.com/questions/24136874/appearancewhencontainedin-in-swift/25793566#25793566
Google is your friend. http://stackoverflow.com/questions/392749/xcode-adjusting-indentation-of-auto-generated-braces Not 100% sure this works for Swift as well, but it's worth a try.
I am not sure if there is one, but this would be better suited in a SpriteKit sub-reddit. Your Swift code looks fine, but I know nothing about SpriteKit. 
I actually saw that post and a few others but the answers all seem to conflict each other i.e. on the accepted answer someone else comments that the solution no longer works. I just ended up making code snippets to use my style (how to link below). Still would like to know how to get xcode's generated files to use the preferred style though - remains a mystery. http://goo.gl/D0Mfrv
Xcode 6.1 adds support for developing Swift applications that run on OS X. It also has some changes to the Swift language, the release notes should provide the details on this.
Have you got a view controller set to be the initial view controller?
The "Loading Screen" is a view that iOS now uses to replace the original implementation which used to be a Launch Image. In previous versions of iOS you would use an image file to replace the black screen to provide a better app loading experience for the user. With the implementation of a ViewController to handle the Loading Screen, it allows you to design a loading screen that can adopt to multiple sizes of screens rather than having to make an image file for every size screen.
So 6.1 is the more up to date version?
There's a document in the Mac Dev Center called **[Xcode 6.1 beta Release Notes](https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1_beta_r4c8zg/xcode_6.1_beta_release_notes_.pdf)**. Within that document there's a section with the title *"New in Xcode 6.1 Beta"*. It will answer your question.
Ok, this helps a lot. Thanks!
What is your desired outcome and what is actually occuring? Are you trying to move a sprite downwards at a constant rate?
Yes, you'll need a Mac. Mac Minis are awesome little things, but if you wish to use one for development, make sure however to max out the memory to 16GB (but get the memory from a third party source, as Apple charges eye watering prices for memory upgrades). You'll need to join the iOS Developer Program (£60 a year, not £99). Download Xcode 6 from the iOS Dev Center. Watch the WWDC 2014 videos about Swift (Introduction to Swift, Advanced Swift). Download the free Swift ebook from the iBooks Store. Then watch any other WWDC videos you're interested in. Then come up with something to build and build it. Let me know if you have any further questions.
You would need a device to develop for. Ipad and an Iphone. Then I would recommend to start with SpriteKit and make simple games. This is a good starting point
Sorry should have mentioned, I already use an iPhone. It is the iPhone 5S to be precise. 
You could look into using Xamarin, so you could use your C# skills and not have to learn Swift or Objective-C.
I have these two rectangles one is on the left and the other is on the right and theres a gap in between them kind of like in flappy bird. I already got it to move from top to bottom but I want other rectangles to follow after every 3 or 4 seconds. 
1. You need to add you resetMoveBottom action to the sequence. let sequence = SKAction.sequence([moveBottom, resetMoveBottom]); 2. You could probably be using SKAction.moveTo because it will move without needing to provide a duration. 3. Your x and y coordinates are the same so it isn't going to move anywhere. 
I tried the big nerd ranch's objective C book, but for someone who comes from C/C++ it was a bit confusing, I found a video course on bitfountain.io which has been great so far, the will be selling a swift course soon
1) How was it confusing? Coming from C/C++, I thought the Objective-C book was only marginally useful. 2) I think the recommended BNR book was the iOS book, not the Objective-C book. The iOS book is a beginning intro to Objective-C, but mostly covering the essential stuff for iOS.
for import I mean like "import darwin", "import foundation", but the file import is cool too! It looks like you are blocking all calls with a regex that matches on "system" as well? any plans to setup the vm sandbox such that these calls aren't so dangerous that you blanket block them?
Good choice, Xamarin is more trouble than its worth. XCode is a very good IDE at this point, transitioning from VS is easier than ever.
Click on your sign up page view controller in storyboard, go to the Identity inspector and make sure you linked it to the appropriate class: i.e, SignUpPageOrWhateteverViewController.swift 
How many rectangles are you going to have on screen at one time? I ask because it might be easier to reset a rectangle to the right side of the screen once it has moved off the left side. Does that make sense? Kind of like... (psedo code) if rectangle.x &lt; 0 { rectangle.x = scene.width } Is there a particular reason you want to try and time things? If so you will need to look into the NSTimer class. However, I'd push you towards the aforementioned tactic.
http://restkit.org/ 
http://i.imgur.com/xkWTk9i.png This is the rectangle that will be going from the top of the screen to the bottom. I want my code to spawn the rectangles every three seconds and have it repeat like in flappy bird does with the green pipes. Thank you. 
Will people please start turning on optimizations before complaining about swift's performance? Believe it or not, optimizations kinda optimize these things, and it's very relevant. I remember a post a while ago claiming Swift was on average 7x slower than ObjC without optimizations, but about the same speed and often faster if you have optimizations on.
I imagine it increases clarity. A lot of programmers love sacrificing clarity for conciseness and that's a bad plan. If I see an if statement and am unsure if an object is a boolean or an optional, that's a problem (even if I can easily alt+click the obj to see its type). It's just important to increase clarity whenever possible.
I believe you might be referring to this...? http://www.jessesquires.com/apples-to-apples-part-two/
That's not the article I read but it demonstrates the point delightfully.
If you really, really want to, you can write an extension for the optional type and make it conform to the BooleanType protocol. Then you can write the old if (obj) { ... } again. I agree with /u/ElivshJerricco's comment though, the clarity of if (obj == null) is better. You should only be able to do if (obj) when obj is actually some kind of boolean. An optional is not a boolean.
It's because this is super confusing to read: let aBool:Bool? = nil if aBool { ... uh did we just test if aBool is true, or if it's not nil? }
Swift performance is very obviously a work in progress, but has been improving rapidly through the entire development process. If you're deciding whether to use Swift *right now*, this seems relevant, but in another year this'll be water under the bridge.
thanks yeah that makes sense. The same issue exists in C and I think it was fine there. I understand their reasoning, I don't actually agree with it totally but at least it makes sense.
How does the same issue exist in C?
I think a variant of that issue is along the lines of non-nil pointers evaluating to true. if (@NO) { NSLog(@"I will always trigger."); }
Have you read the iBook? They do a really great job explaining some of the more abstract parts of the language in human terms.
This is our first screencast. We've learned a lot after recording this and will be putting it to use in our next screencast. We apologize for the change in audio levels. I'm going to do my best to address this in another render this weekend. Our next screencast will be covering Cloudkit in a multipart series.
Talk about missing the point. The point is that Swift has a very challenging compilation model which means that we still see very unpredictable performance from the compiled code as well as having a huge amount of corner cases where bugs pop up. Plus the whole difficulty of making the compiler efficient. That we're still seeing huge performance bugs popping up (there is nothing innately in Swift itself that would prevent C-like performance) proves this, and Lattner and others on the team have acknowledged that there is a lot to do. The question is how **predictable** the performance from Swift will end up being, seeing as how dependent the language is on optimization to reach "normal" performance.
The article didn't express that in the slightest. And it's kinda unfounded when the article bases itself on irrelevant data by not using optimized code
Only if you're desperately out to misinterpret the article. It is simply an example of how uneven Swift is when the correct optimizations are missing - i.e. how dependent Swift is on being correctly optimized everywhere. This is in itself very fragile. For example, let's say that in Swift 2.0 they introduce the new language construct X, now suddenly the language has to adjust all it's small optimizations to correctly handle this new language construct. For a simpler language the special cases needing optimization are few, but for Swift the # of special cases appear numerous enough that each major feature almost guarantee that performance bugs will arise.
It does have some relevance to later development as well, since guaranteeing performance stability when introducing new language features is dependent on how complex the language is to optimize in the first place. If Swift 2.0 introduces some new features, the performance bug cycle could start again.
Also look at http://xamarin.com/ if you want to stay with c#
Am totally looking forward to checking this out! Cheers for enabling download, too! 
Will take a look to see what the deal is! I wont be able to correct any problems till tomorrow.
What are you raving about? The article has nothing to do with best case runtime performance of the language itself. Your strawman argument that this is about non-optimized runtime performance of the language is frankly absurd.
I don't feel like typing very much. var colors:[UIColor] //empty or default array of colors If (first condition) { colors = [whateverColorsyouwant] } else if (2nd condition) { colors = [whateverColorsyouwant] } else { colors = [whateverColorsyouwant] } I think that'll work. 
Thanks. Any input would help. I am transitioning from MS to Apple. Really like Swift. 
In your storyboard... See that little arrow pointing to a screen? Drag the little arrow to the screen of your choice.
You just missed the sale. I got it for 79$
Wow thanks so much. You're so helpful. /s
I followed this: http://www.raywenderlich.com/forums/viewtopic.php?f=20&amp;t=10752
By creating a new View Controller you need to create a new class for it. It can be confusing because the name is sort of the same... I just learned this on "Hooking up our view objects" on the bitfountain.io iOS 8 course! Thought I'd stop the lecture video to try and help.
It means that you connected some text field with a controller's usernameLoginTextField outlet, but that controller doesn't actually have that outlet. Right-click on your textfields, you'll see a exclamation mark in a yellow triangle somewhere. That thing happens when you set up your view controller with a certain view controller class, and later change to a different view controller class that doesn't have the same outlets.
lol, I guess so. I was just hoping that the final GM version would've smoothed some things out but apparently not. I've gotten quite a few screen freezes primarily when working with storyboards. Code editor windows have been pretty stable though (crosses fingers)
I spent two days trying to get an app signed, before giving up and going back to 5.1.
Fixed it. I deleted and re-wired the button to the action. 
Did you get the error of not being able to connect with your dev account?
Yeah, my keyboard extension just ceased being debuggable. I can still debug the app, just not the extension. Also no console output. I keep thinking i must have inadvertently changed a configuration, but the whole process around the extension feels a little wonky. 
What's your problem, bro? Why are you so hostile? I'm like, seriously confused.
I suspect that this is because the GM is for 'submitting programs to the App Store', and you are not yet allowed to submit swift apps for Mac OS 
Apple said that Xcode 6.0 does not allow using Swift for OS X applications, only iOS. Xcode 6.1 beta allows you to write swift for OS X.
Damn, I had just downloaded the gold master. Oh well, I'll try 6.1 beta. Edit: You were right!
No, I could connect to it, generate certs and provisioning profiles, and everything looked good in XCode. But it would fail when bundling for ad-hoc distribution and tell me that I already had a certificate. I tried deleting every certificate and profile from the site, and got XCode back to an empty state. But it didn't matter how many certs I revoked and requested, it wouldn't work. I'm a member of two teams, and I could sign with certificates from the first team, just not the second. It was really weird. I rolled back to 5.1 and everything immediately worked. I just downloaded 6.1 beta and I'll give that a try. Maybe that bug got fixed.
The author is correct but ignoring the point. The author is correct that Objective-C and Swift should be approximately the same speed when doing exactly the same thing. Subtle differences in standard libraries aside, they both use the same LLVM back end, so they'll be basically the same. There's no magic here. The point about Swift being 10 times faster is that *idiomatic* Swift uses more efficient representations than *idiomatic* Objective-C. This is because Swift prefers to use native and struct types on the stack with direct function or v-table function based method invocation but Objective-C is focussed on dynamically allocated objects with dynamic message sending for methods. Saying "use native types" in Objective-C misses the point. Most of the time this will never be done because it's not the simplest situation. There's additional work in Objective-C to identify performance problems, find a third-party library to handle the same work in plain C (the C standard library is famously tiny and implements basically nothing for you) and then handle continual conversion between Objective-C and native representations because none of this is idiomatic Objective-C and won't work in your user-interface.
Also claiming that inlining/static specialization is of relatively little value because it doesn't somehow optimize primitive comparisons into something faster is a bit of a non-sequitur. Inlining is valuable because it lets the optimizer run the *other* optimizations across function boundaries; changing a CMP to an inline CMP isn't gonna help a ton, but proving that an object allocation doesn't escape then using that information to delete every refcount operation and move the allocation to the stack absolutely will.
I got in on that too. I don't understand how they can offer such a significant discount though...
The point of the article is that where you need speed, the correct solution in ObjC is to use plain C constructs - which will be as fast as anything Swift can dish out. If you read the original book on Objective C, the point of objects in Objective-C is to ensure modularity and decoupling. If you use Objective C message passing "all the way down", then you're doing it wrong. I think the mistake people do is treating ObjC like it was Ruby or Java. Objects isn't the solution to everything in ObjC and basing an argument on that assumption will yield the wrong conclusions. (Even ignoring the state of Swift runtime performance still being rather quirky and full of bugs)
That's bad. I had this error during all of 6.0 because my *full name* has a non 7-bit ASCII character in it. Couldn't connect to my account through 6.0 at all. Changing that single character in my ADC account suddenly got 6.0 working. 5.x always worked fine though.
Not Swift related, but storyboard compilation takes FOREVER. 
I think the Xcode 6 GM changed the requirement for SDK in use of Swift. Now you need to use OS X SDK 10.10 or later, which is not in fact available on OS X 10.9 Mavericks
There is a course on Udemy.com that I was thinking about taking called "The Complete iOS Developer Course: Build 15 Apps With Swift ". Its $200 ( 144 shortest videos ). I been looking and looking and this seems the most comprehensive. It seems ok but the only thing stopping me is that on his demo vid the instructor seems kinda douchy. Think the English guy character in the movie "Yes Man". I don't know if I can do that for 140 some videos. Saying that, I am loving Swift. I do wish the IDE was as mature as VS though. Books will be coming in the December/ January time frame. Again, I can only hope that are as good as I had been getting from Microsoft Press.
If you read TFA: (a) one point is that NSNumber is absolutely not the simplest or "idiomatic" solution (b) the other is that not providing an IntArray class is purely an omission by Apple (c) that is easily/trivially remedied Are we mice or men?
That is not the claim. The observation (it is not a claim) is that the overhead of something like qsort() using pointers (the function pointer and the pointers to the inline elements) is apparently only 15-20%, for something that could be considered the worst case for that implementation: the actual op is as minimal as possible (single machine instruction), therefore the proportion of the total cost attributable to overhead is maximal. And even with that worst case, the overhead appears to be only around 15-20%. And if you actually care that much about the performance of this case, it is also pretty easy to do much better by switching to a different implementation. There was no expectation of "optimize primitive comparisons into something faster", that would be silly and is a total straw man. The whole refcounting performance mess with ARC is another issue. 
Stanford has a free iTunes U course. Right now the latest is with Objective C, but it should come a new one with Swift soon.
Because you're still trying to write Objective-C in Swift. You need to shift your thinking and remember that Swift deals much more gracefully with nil values that Objective-C did. First, it tries to eliminate them completely by requiring a potentially nil variable to be of type optional. Then it allows you to use optional binding in place of the obj != null idiom that you're used to. Try this on for size: if var myObj = obj { ... } Here, if obj isn't nil, then we assign its value to temporary variable *myObj* which we can then use without fear. In my opinion, this way is at least as readable as the old way.
So we can tell everyone how awesome the course is. 
You need to put the code to generate these rectangles in a function, lets say createRectangle and then run the following. func doAction() { let generateRectangles = SKAction.sequence([ SKAction.runBlock(self.createRectangle), SKAction.waitForDuration(3) ]) let endlessAction = SKAction.repeatActionForever(generateRectangles) // run the action } Something like that anyway.
&gt; SKAction.runBlock(self.createRectangle), I get an error for this line of code saying gameScence does not have a member named createRectangle. Thanks for the help. 
you would have to put the code you have written in your OP into something like: func createRectangle { // code you have omitted for creating sprite let moveBottom = SKAction.moveByX(0, y:-100, duration: 1.0) let endlessAction = SKAction.repeatActionForever(moveButton) sprite.runAction(endlessAction) } What this will do is repeat an action where every 3 seconds it calls this function and creates a new rectangle, I am pretty new to swift though but in objectiveC you would also need to put an action to removeFromParent in there too, else you would have a memory leak.
I dont know why but I still get the same error. 
Here is the exact quote: "However, if the benefit of inlining is only 21% for the most primitive type, a machine integer, then it is clear that that the set of types for which compile-time specialization is beneficial at all is small." If you'd like to begin twisting that so you can claim you meant all along that yes, clearly static specialization has many other benefits for non-primitive types and more complex operations, due to the optimizer gaining visibility, go for it.
hey i tried connecting to that channel on free node but it says at the bottom i can't connect and i am banned? I've never used it before why does it tell me this
If you upload it to github, I'll take a look... who knows what it could be based on the information you've given... could be any number of things.
Does it work on a device?
What sort of things confuse you?
There is no twisting whatsoever, except (maybe) by you. The quote says exactly what I restated: Even for the the most primitive type, the benefit is small. Now the rest was "clear" to me, but maybe I need to explain it. The total cost of the comparison in this case consists of two parts: a) Actual cost of the comparison operation (in this case machine integer compare) b) Overhead imposed by the interface (call via function pointer, deref two pointers) The overhead (b) is largely fixed, (a) is the variable part. Inlining removes the overhead (b). Therefore, the advantage of inlining is largest when (a) is smallest. As an equation: inline_advantage = (a+b) / a With (b) fixed, the advantage gets bigger as (a) gets smaller, for example, with b=10, here are values for the inline_advantage for values ranging from 1 to 100: * a = 1 , advantage = 11 * a = 10, advantage = 2 * a = 20, advantage = 1.5 * a = 50, advantage = 1.2 * a =100, advantage = 1.1 So as you can see, as the operation cost (a) gets smaller, the advantage grows, and as the cost gets larger, the advantage grows smaller. My contention is that with an integer comparison, (a) is about as small as it's going to get, meaning in other cases (a) will be larger, and therefore a larger part of the overall cost. Not sure why that would be controversial, unless there are comparison operations that are cheaper than a register-register integer comparison (we already accounted for the memory dereference in the overhead). The rest is pure arithmetic and minimal logic: if 20% is at or near the maximum, then most other types will have less than 20% advantage. And of course, that 0-20% advantage comes at a cost in memory and compilation speed. When I was on the performance team, memory was generally prized much more than CPU, because the effects of memory shortage are much more drastic and non-linear than an increase in CPU. Now you seem to claim that in addition to removing the overhead (b), inlining also makes (a) faster, especially in more complex cases. I really don't see that, particularly in the sorting case, so I am comfortable with my assertion that "the set of types for which compile-time specialization is beneficial at all is small". Of course, if those are the types that *you* care about in particular, that may be just the thing, and remember I called the generic inlining "clever" and "a Good Thing". Whether it is an advantage really depends on how much you care about that particular code and how much a CPU speed advantage is worth in terms of memory (and compilation speed). At the very least, there should be some more explicit control so I can decide whether I want to make that tradeoff. My experience is that in the case I *really* care about performance, automatic inlining from generics isn't sufficient. In this case, after all, a specialized integer sort was 42% faster than the inlined generic version that Swift produced.
not to sound dumb but I'm new to coding so how do i go about uploading a project to Github aha
In case anybody is tempted: &gt; To enter, submit a pull request to this repo by July 15th. I assume that since we've just seen a bunch of old submissions show up, that none of the moderators were checking this subreddit's moderation queue and somebody just went through and pulled everything out of the spam filter. 
Very odd - you could just put all the code in the block function, but it would be pretty messy.
The code in the op?
You can do this using closures in Swift (Note: You must give the variable a type or else you will get a compiler error) let x: Int = { switch y { case .Something: return 1 case .SomethingElse: return 2 default: return -1 } }() You could probably merge some lines if you wanted it to be more compact like your example
Just seems like an abuse of closures for something that should really just be part of the language.
Swift is very strict (and smart) and will force you to give that variable a default value if you use it anywhere before it is assigned (this is the same for properties in classes). For example: var x: Int let y = x + 1 // compiler error: Variable 'x' used before being initialized It's true you can use optionals but to be honest I don't think something like variable assignment is a good enough reason to use an optional. My opinion would be only define local variables when you're setting them in the same line (abuse the `let` keyword). In the case that you are creating a variable that will be set more then once, give it a default value.
This was the exact explanation I was needing. Thanks!
I'm not sure why you're getting downvoted, but I disagree with your idea. &amp;nbsp; What other use cases would giving switch a value improve? &amp;nbsp; Semanticly, let is an immutable value. It doesn't make sense to require a bunch of extra data to simply store a "primitive". The use case you are describing, to me, sounds like a lazily evaluated function. You want to compute some value, and cache it in an ID. &amp;nbsp; lazy let x = valueFromY() &amp;nbsp; As /u/Lurky036 points out, you could abuse a closure. This is still semantically better, you're just short circuiting the function call logic. The closure is an anonymous function executed only once.
I ran into a similar issue a while ago. Double check the background color for the tableview. Change it to white and see if that fixes it. I discovered that there was a bug that made the default color (the background color was "default") show up as black.
Are you doing this in a playground? &amp;nbsp; Using the self keyword would reference the current instance of the class containing the `doAction()` method. If you're just defining everything in the global namespace (top-level outside a class) your functions aren't methods on anything and should just be called as functions. [ i.e. `function()` not `object.function()` ]
I really don't think you understand just how much generic inlining is happening here. "Int" is not a primitive type in Swift. "&lt;" is not a compiler builtin. Array is not just pointer sugar. What you're describing as removing a single layer of dynamic dispatch is actually the last little bit on top of the *many* other layers it's already deleted entirely (in the case of Array, that deletion is still quite imperfect, leading to a bit of a perf delta, but it's pretty close these days and getting closer), saving both space *and* time. Now, you could argue "ok, so don't do that then. Stop putting so many abstraction layers in place. Build Int, &lt;, and [] in the compiler, instead of the library, as it is in C.", and that's a sound enough argument, but a very different one than "generic inlining is not having a dramatic effect on performance". My point of disagreement is a simple one: In my experience, removing dispatch overhead is not the primary goal, nor primary impact, of inlining. When I made node traversal in WebCore dramatically faster by converting a few virtual methods to statically dispatched calls that checked a bit, it wasn't the removal of the vtable load and jump that did it, it was exposing the full structure of the loop to the compiler. The first calls converted had little impact, the final one that made the loop completely transparent was a 10% speedup on macro-level benchmarks. (edit) Also yeah, equivalents to the noinline and always_inline attributes would be handy to have. No argument there.
Ok. You haven't actually provided any meaningful context by pasting the same code as in the other comments. Spritekit is just a library. &amp;nbsp; It still comes down to "Do these functions belong to a class or object?" If not, see previous comment.
This thread isn't for hacks? I thought we were already talking about extending Optionals :P &amp;nbsp; For beginners: 99.9% of the time, any hack like this is definitely less understandable even if it increases brevity. New programmers on your team will have to learn one coders bullshit constructs even if they know the language. +1 for `if let` syntax &amp;nbsp; +1 for the Elvis operator (eh ?? kinda looks like ?:) &amp;nbsp; eh, what the hell... `+` 10 billion for suggesting treating monads as monads. 
Glad to hear!
Let us know what you think!
What I meant with extending optionals was pretty much this: extension Optional: BooleanType { public var boolValue: Bool { get { return self != nil } } } let someOptional1: Int? = 5 if someOptional1 { println("someOptional1 is not nil") } else { println("someOptional1 is nil") } let someOptional2: Int? = nil if someOptional2 { println("someOptional2 is not nil") } else { println("someOptional2 is nil") } This prints "someOptional1 is not nil" and "someOptional2 is nil", aka the old syntax. 
Yes but yours is just as much a hack. It only exists in your codebase and only you have ever seen it (ignore us Swift beta-ers).
still looking for cheaper alternative!
like properties and events...
You're focusing on the wrong thing. Visual Studio and Xcode are just IDEs. They are just the software you use to type the code in and compile it. The things that confuse you are things to do with the language and the platform you are targeting. There is nothing you can learn about Xcode that will help you understand properties and events. Have you read the introductory material Apple provide on building your first iOS application and learning Swift? 
Hi, thanks for the reply! I've tried doing your suggestion, but it's not working. [Here's my code](https://bitbucket.org/CallumNZ/tutorialcode/overview). The Photo class is what I'm trying to encode/decode, and the top of ViewController1 has a persistantData button where I'm trying to make 3 Photo Objects, set their properties, then encode/archive/dearchive/decode. Any ideas? It might be something silly...
Person who knows what he's doing here. You have some problems. One problem is that CD has schemas while json is schema less. Another problem is there isn't a good mapping between types. The data type, for example, has no good json representation. Also relationships. There may (or may not) be ways to solve these problems in a way that makes sense for your particular app. However there is no solution in general, so you will not find a library that can do it out of the box. And beware anyone who tells you otherwise, as they will have decided how to solve these problems in arbitrary ways that may or may not make sense for you app. If this is your first rodeo, I'd recommend mapping the fields by hand, yourself. There are other ways but they are probably too magical if you are posting here. 
Okay, well, It felt weird that you first just jam a button onto the regular layout, then, whilst telling how to patch the button to run a piece of code, you also switch the layout from Auto Layout to Off - and re-drag the button to the now-iPhone-size main.storyboard. I would have appreciated being told why this should be done, and how it should be done, at the start of the first edit to the storyboard. Also, right at the end, I get an error for imageView.image = info[UIImagePickerControllerOriginalImage] as UIImage it tells me "Treating a forced downcast to 'UIImage' as optional will never produce 'nil'". Xcode 6 Beta 7 tells me to do one of two things. "Fix-it - Use 'as?' to perform a conditional downcast to 'UIImage'" "Fix-it - Add parentheses around the cast to silence this warning". Which should I go for? 
How do I find out about the next screencast? I really like the fact that we're actually doing something. I got really tired of the var catdog = cat+dog type stuff (from other tutorials) 
Is there a way for you to also inform us on how to save the Camera-taken image into the Camera Roll? I'm going to try and modify this so that can have three imageViews present and can take a photo or select a photo to each of these with 3 different buttons for Camera and 3 for Choose Existing Photo. I hope I'll succeed.
With *too magical*, are you referring to *Magical Record*? :D
I did read somewhere that the course this year will be in swift and iOS 8.
Sure. Just wanted to clarify my original comment. I'd argue that you went more crazy with the syntax abuse though (using class constructors to simulate a control flow statements, took me a few seconds to actually grasp that). Because you seem to like these hacks, here's an old one of mine that allows you to write `|x|` to get the absolute value of an int x: struct IntContainer { let value: Int } postfix operator | {} postfix func | (value: Int) -&gt; IntContainer { return IntContainer(value: value) } prefix operator | {} prefix func | (container: IntContainer) -&gt; Int { return abs(container.value) } let x = -1 let y = |x| // y = 1
Both of the functions belong to a class. 
I think you should read Apple's documentation. 
Apparently that channel is no more, I removed it from sidebar.
It doesn't look ready for prime time to me either.
esaruoho, I'll see about covering this in a future tutorial. What we can most likely do is plug in a phone and airplay it. Then I can record it, so we can actually view the Phone functionality.
Thanks for the feedback esaruoho. Yeah I agree I shouldn't of switched Auto Layout off and not explained why. I will update this screencast in the near future to discuss this. Use as?
He mentions its only exists in beta 6 in the blog post , see i actually read it even though it was a bit pointless. 
Well this [page](https://developer.apple.com/swift/resources/) in Apple's site has a good collection of info. I think its a good place to start. Look under *Guides and Reference* for some ebooks. I'd strongly suggest learning at least the basics of Objective-C prior to touching Swift because since currently all the code examples for iOS are in Objective-C all over the internet and other material. So being able to read them and translate them in to Swift is crucial until Swift gets widely used. From what I've been hearing and seeing, not many people recommend Swift as a language for someone who's just getting into iOS because Swift itself is pretty new and still maturing. Do you have any other programming experience because neither HTML5 or CSS3 actually fall in to the category of "programming", you know.
The function objectValueForTableColumn is not getting called. This is because the function signature is wrong. Apple removed the implicitly unwrapped optionals from the function signature. You are referencing a tutorial that is outdated. I've posted the answer on SO. Edit. I may be wrong on this one. Seems it's only the UiTableview delegate methods that have the implicitly unwrapped optionals removed. 
Awesome, thank you for the direction. I'm going to look into this more tonight.
Personally, I'm a big fan of this project for working with Core Data. It's not written in Swift, so I may be out dated but it's always worked well for me. https://github.com/vokalinteractive/CoreDataManager-iOS
If you don't have any experience with C or C++, then skip Objective-C completely. Other will say that you need it in order to understand existing code, but that's not really true. There are plenty of resources and examples available to keep you busy while you learn, especially if you're new to programming. Objective-C will be overwhelming to you if you're coming from HTML and CSS and maybe some JavaScript, but no other language use. I suggest that you start with something like [Skip Wilson's videos on YouTube](https://www.youtube.com/user/SkipCasts). He's in the process of updating them for the Xcode 6 GM and I think you'll find them informative. Other than that, read up on the free documentation from Apple (you can find the link in the sidebar) and ask questions here if you have them.
Given that the OP didn't say what/why they're doing this, it's hard to answer. But Swift will cause less headaches out the gate. It's not beta anymore, so the stuff that you'll be learning has been done enough that you won't hit any bugs and won't change. (Not guaranteed, but it's a good bet.) I might give up the first time I see an Objective-C initialization ("[[SomeObject alloc] initWithSomeCrazyArglist]"), but Swift ("let thing = Something()") isn't so intimidating. Depending on what you do and when you do it, you may get by without ever learning Objective-C.
Did so as well. &gt; This seems to be a bug of Xcode 6 beta 6, hopefully it will be fixed on the next release Where exactly did he mention that it "only exists in beta 6"? I'd actually expect the bug to be still there, it doesn't seem super critical and there are plenty of things on Apple's todo list.
I haven't gone through it, but [this is a tutorial for making a Candy Crush-like game in Swift.](http://www.raywenderlich.com/75270/make-game-like-candy-crush-with-swift-tutorial-part-1) Might help. It assumes knowledge of SpriteKit. They have a tutorial for that [here](http://www.raywenderlich.com/42699/spritekit-tutorial-for-beginners), but it's in Objective-C, so I dunno about that. Maybe you want to look for a Swift SpriteKit tutorial or something.
[Me right now](http://i.imgur.com/Ichev.gif)
Figured it out: http://stackoverflow.com/questions/7533682/nstableview-only-displaying-table-view-cell 2 year old problem?!
This is the tutorial I started with. Sprite Kit isn't *that* far removed from Flash (at least, for really basic use, obviously it differs a lot beyond the basics) so it was pretty easy to go from there as a starting point.
Read Apple's *Start Developing iOS Apps Today* in the developer library. It uses Objective-C, but if you've got a basic understanding of Swift, you should be able to translate easily enough. 
The blog post is pretty old (August 24). Anyways, the bug is still occurring on the GM.
Because the blog post is about a month old (August 24). I'm still getting slow performance when I use generics on a different file with the current version of Xcode btw.
Well, I failed gloriously. I do have 3 Camera &amp; 3 Camera Roll -buttons, but having three ImageViews does not seem to work. Should I change their class-names or something? :) to somehow separate them? I already have three pickers (picker1,picker2,picker3)
I'm very new to Cocoa/Cocoa Touch, so I don't know much...
Thanks! This will be very helpful! The reason I'm doing this is just for my passion with tech. This is also a part of my future education next year :) /u/shiggie so there is your answer to why :)
Awesome, works now! Thank you so much! I guess I need to keep better track of what object type variables are.
are you sure? I don't think I got such a coupon!
The [buyer's guide](http://buyersguide.macrumors.com/#Mac) on Mac Rumors tells me not to buy the Mac Mini as it is due for an upgrade :/
What does PSA mean?
Public Service Announcement. Habit from other subs I guess that didn't carry over here maybe?
Yeah. They sent me a second one the next day as well. 50% off. The coupon code is: NEWNE50
Hehe no I think it is more to do with the fact that I'm still learning my way around Reddit. Anways, thanks for the heads up, subscribed to the course. A real bargain.
It is now only $25!
I just saw that!
Add the missing parentheses since you're trying to call a method, not access a property.
Where would I add the parentheses?
 SKAction.runBlock(self.createRectangle), That is the line missing parens, it should be more like SKAction.runBlock(self.createRectangle()), That said, I don't know if your program will work after this change, just that the error you describe should be addressed.
I still get the same error after adding the parens.
on this line &gt;SKAction.runBlock(self.createRectangle) When you start typeing self.createRectangle, do you get auto-complete telling you the method exists in 'self'? Example code I am looking at... class MyScene: SKScene { func doAction() { let releaseBalls = SKAction.sequence([ SKAction.runBlock(self.createMyNode), SKAction.waitForDuration(1) ]) // run action } func createMyNode() { // create the nodes } }
Is there another way I could write this code so I don't get an error? 
Wouldn't that call createRectangle when he's trying to pass in the function into runBlock? He needs to post more of the code - from here, it looks like createRectangle is just a free function. We need to see more of the GameScene class.
I just realized that what you are trying to do there is different from what I thought you were trying to do and the parens are not necessary, but, it does seem like there may be a difference in the structure of your class versus what you think it should be, so seeing the whole class/file might be helpful. I recommend http://gist.github.com/ but there are a million choice for pasting code online.
I posted the whole code if anyone wants to take a look at it and find the problem. Thanks.
Here we go. You have defined the function createRectangle inside of didMoveToView. It is not a member of self. I don't know if it will work to just remove self. from self.createRectangle, but, that's what I'd try first. If it doesn't work, I'd try moving the function out into the class itself.
Yeah, I was mistaken on that and with the whole class posted, the problem has become apparent.
I tried removing self but I get an error saying "cannot refrence a local function with captures from another local function."
I got it to work by moving the createRectangle() function to the gamesScene class but now when i run the project nothing shows up in the simulator. The only code that worked was the background. 
I moved the createRectangle func into the class and the error went away. But now when I run the project nothing happens in the simulator. The only code that runs is for the background color. How do I fix this. Thank you. 
I haven't worked with SpriteKit so I can't say what you should do. However, it appears to me that you have defined the local function "doAction" but never actually use it in any manner that would have it called so that its functionality could take place. I'd be looking at why that is and considering what you need to do to fix this problem as the most likely cause for your current lack of rectangles.
Swift can be deployed to iOS7 - so check out the supported devices for your phone of interest.
How is it failing? The best way I can think of doing it without having separate delegates is in the didpickmedia method determine which button was pressed and based on that update the corresponding image view. 
Wow! I've been waiting to buy this exact one and was about to get it two days ago. So happy I waited. I watched a few of his Udemy courses in the past and really enjoyed them. His voice doesn't make me fall asleep like a lot of other classes.
It was announced at WWDC.
PSA is a prostate exam. Get your finger out of my ass, please.
From the horse's mouth: https://developer.apple.com/swift/blog/?id=2 Now only the iOS 8 and OS 10.10 SDKs support Swift, but you can still deploy on iOS 7 and 10.9.
For $29, you can't go wrong with this much content as a crash course into Swift/iOS/XCode. It'll develop a strong base knowledge, and from there you can take advantage of other resources. Part of the problem now for new users is the lack of resources available for Swift (Books, videos, tutorials etc).
Is this the same course as this? http://bitfountain.io/course/complete-ios8/
Folks have posted chapter and verse for ios7 support. The LLVM group tends to be pretty good at deploying their new toys on the previous version of the OS, which really helps with adoption of new language features.
Thanks for the help and support. Luckily Johns Hopkins University as well as Hopkins Hospital are resources that have already been utilized. References thus far into ANN's include peer-reviewed documents from Yale, Princeton, MIT and Harvard in addition to discussions with neurosurgeons and researchers at Hopkins. This is an interdisciplinary project, and will incorporate resources that can be made available in and around the Baltimore area. While I acknowledge the exciting attitude that the post puts forth with all of the Apple jargon, this is a real possibility. The proof of concept is currently being developed as quickly as possible. Discrediting credentials -- moreover trolling --- are neither productive activities nor helpful to anyone but yourself. 
Given that the video is posted in 2 locations and has absolutely no information in it, what else can someone expect...that it is a proof of concept from someone that hasn't done basic research. No one I know from John Hopkins would ever be associated with a 'proof of concept' like this...in fact, when I was doing machine intelligence / synaptic programming one of my collaborators was from here. I have never heard of anyone from here really doing anything with undergrad projects, even current-PhD candidates were a little hairy and it was mostly post-docs. I'm just saying that a video with no information at all is doing nothing but discrediting your credentials, whatever those may be. I'm a programmer / psychologist and honestly, this was something I was interested in when I clicked on the link, only to be vastly disappointed.
PSAs are normally used in TV like commercials such as [these](https://www.youtube.com/watch?v=R0LCmStIw9E). 
Does anyone who has taken this think it would be a good tutorial for someone with 0 (and I mean 0) programming experience?
Does sprite.runAction return? Try stepping through the code, it should be pretty obvious. Also, please format your code a little better if you post this amount of code here...
I have this course. It's a good swift course for beginners but most of the course was recorded in Xcode beta 4 or earlier. That means most of the projects don't run anymore on Xcode 6 GM, which is annoying. 
So this means most of the course is about obj-c and not swift?
Checkout skip wilsons stuff. He has later tutorials that talk about making games and making apps. He even has one on connecting to db's. https://www.youtube.com/user/SkipCasts
Best out there: https://www.youtube.com/user/SkipCasts Has stuff for people completely new to programming and all sorts of stuff. 
Thanks. I read that as xcode 4, oops. 
There was good news from Lattner on the dev forum this week on that front: "We're aware that 'switch' and 'if' are commonly expressions in functional languages, and that this brings a lot of convenience. We'll consider expanding this in future releases, but it isn't a short term priority for Swift 1.1. -Chris" https://devforums.apple.com/message/1040049#1040049
Two things: First, I followed this link from this site and it displayed the course at a higher price. I also received a Udemy email that had a discount code in it. With the discount code, it was available for the $29 price tag (until Thursday, Sept 18, 2014). Second, though I am working through the course now, I might recommend a different course if you have had some programming experience (Java or Javascript, or even Basic). That'd be the Daniel H. Steinberg iBook "A Swift Kickstart" available in the iBookstore. It was $20 when I got it. It teaches using the REPL from the terminal, and goes through many examples in playgrounds. From what I've read so far, I'd say the Udemy course is a *great followup*, but based on the thoroughness and clarity, I'd go for the Steinberg iBook first.
sprite.runAction only returns for the createRectangle function. The other function is not going through.
So I'd like to plug my course which I made for someone just like you. 3+ years ago when I was trying to learn iOS, I had no experience and I felt like a lot of tutorials and classes left me confused. You can see the kick starter here https://www.kickstarter.com/projects/1766493251/how-to-make-a-freaking-iphone-app-with-ios-8-and-s And sign up here https://gumroad.com/l/freaking Let me know if you have any questions!
Just worked through the first 16 of videos / downloads. * The interface of Xcode may make it hard to follow item for item what he is doing. * The changed optional syntax will frustrate you no end When you make a connection from Interface Builder to the app, Apple now wraps the output of the connection in an optional. In his videos the values of the outlets weren't unwrapped. But without unwrapping them today, you'll get errors like `value of type 'int?' not unwrapped`. Having done other intros to Swift, I knew what was going on, and I thought this was a nice challenge to debug. But if this is your first foray into the language, the errors about unwrapping optionals are going to frustrate you no end.
Great find, I bought it.
Did you actually step through it? And sprite.runAction in doAction does not return? Or what do you mean with "is not going through"? Where is it getting stuck?
Hi, ok, here's the pastebin ( http://pastebin.com/iU2SHrdC ). I think what's wrong is that I'm not able to do the UIImageView thing properly. None of the three work, actually. When I run the app, Xcode says: 2014-09-17 08:58:55.456 CameraApp2[18748:4698934] Snapshotting a view that has not been rendered results in an empty snapshot. Ensure your view has been rendered at least once before snapshotting or snapshot after screen updates.
I'm trying to figure out if this would be a good course to do if I have only a very very slight knowledge of Swift and Obj-C. I'm tempted to put the $30 down for it, but wary that it's a time waste like lots of other resources. 
Have a look at where you are creating the sprite in the code, ask yourself: Do you want more than one sprite to exist? Do you want the sprite to be removed once it is off the screen? Is there a function for this? 
I've only been vaguely following Swift but have been meaning to make the switch from Obj-C. Is there somewhere good that documents the changes to Swift from the first beta?
wow seriously overfunded thats amazing!
I'm a complete noob. I have ideas for apps that I want to make but I know nothing when it comes to coding. I signed up. Looking forward to giving your course a try.
I'd say for $29 it is a great resource, it will show you how to do a lot of things in Swift/Xcode. Especially right now with the lack of resources for swift/iOS8.
You need to step through your code to see where the issue lies. Se a break point on **doAction()** call at the end of your **didMoveToView** method. Debug your code, does the break point get hit? If it does, step into the **doAction()** method, and see where that method stops executing. If that break point doesn't get hit, set one at the first line of the **didMoveToView** method and step line by line and see where the method may be blowing up early.
thanks!
Actually, I am in work and currently trying to procrastinate a bit, not got XCode so YMMV with this https://gist.github.com/anonymous/fd5b801125ce039eadcb The main thing to understand is that you want, or seem to want to create a new node each time and move them down the screen and every 3 seconds create this. The first function will create the node itself as a new node and move it down the screen and afterwards remove it. The second function repeats the first action every 3 seconds forever - Note! This is a bad idea, is there a point you would want to stop this action? If so you need to name each of these remove it then stop the action or track it somewhere. The sprite creation has been moved out of the init function and moved to the create rectangle function. 
Not that I know of. Swift's updates were usually announced in the Xcode 6 beta and Xcode 6.1 beta release notes. More detail on interesting features was given in the Swift blog. But the Xcode doc sets are not yet up to date, nor is the iBook. One note: though Xcode 6 beta release notes also listed previous changes from earlier betas, Xcode 6.1 betas do not (since they are changes since 6.0). To get a complete picture you will have to consolidate both of these sources. I realize Apple doesn't like folks republishing their material, but if anyone has a link to a site that's already done this consolidation, it would be greatly appreciated.
I want this image to go from the top of the screen to the bottom of the screen. I want other rectangles like this one to follow every 3 seconds so it repeats forever. Kind of like the pipes in flappy bird. http://i.imgur.com/xkWTk9i.png
I changed up the code to get the rectangles to appear in the simulator but it only shows up for a half a second and then disappears. 
Treehouse.com just started their video tutorials (today, in fact), although they charge $25 a month for the service. I've taken other courses from them and they are excellent, as good as or better than Lynda.com (which does not have any Swift videos yet). I've just started the Swift intro and it assumes you have no programming knowledge (as I don't) so takes you from scratch. 
This is a very early release, we wanted to start with Swift syntax and we're now working on additional chapters focused on development. We also open sourced it over at https://github.com/GoThinkster/swift, and we'd love to see pull requests with additional resources/bug fixes :)
I see what's wrong. I will reply later with a meaningful response.
One of the parameters to your code block is an error variable. If you want to know why the request is failing, then look at the error.
Have you read the book that Apple provides?
It works but the way I want it is for the rectangles to follow one after the other. You see how in the video the screen goes from left to right and there are pipes that spawn every 1 or 2 seconds. Thats how I want mine to work when it goes from top to bottom. Thanks for the help. http://youtu.be/aK5APhNYVWA?t=22m43s
This is the post in question: http://www.reddit.com/r/swift/comments/2fy3nt/how_to_fix_not_being_able_to_compile_osx_based/
I think you can use the Xcode 6.1 beta just fine on Mavericks (I haven't had issues yet). You could even have it installed alongside Xcode 6.0
Thanks guys, I will try some of this solutions - I am sure it will work.
Increase the time delay, but quick currently 
First, ask yourself: how relevant is this comic to Swift in specific, and is it out of place compared to other submissions to this subreddit? Second, although it's thankfully credited, why would you possibly link to anywhere other than the [original creator's site](http://www.commitstrip.com/en/2014/08/18/the-dilemna-of-mobile-apps-development/), which offers content in the same language as this subreddit and is free of [3 ads, 3 comment boxes, and **9** social media buttons not belonging to the original creator](http://imgur.com/pwOpiCL)? Oh right, it's because it's your website, and you're trying to promote it to make money by posting stolen content that's hardly even relevant to this subreddit. (Granted, [CommitStrip.com](http://www.commitstrip.com/) has as many as 7 social media buttons, but it has only 1 comment box and absolutely zero ads.)
Thanks! Is it somehow related to the three NSImageView things? I hope I at least got the picker1+picker2+picker3's right? If you have a way of explaining what's wrong with it in such a way that I can comprehend it, that'd be much appreciated! I like to watch a tutorial and then modify it, since that's the only way I'll get comfortable with Swift, really. Sometimes things break, sometimes I'm successful. 
Thanks it works now!
Interesting post! I have one question though, how is it possible to create iPhone apps without Cocoa / SpriteKit? It sounds like it is a lot harder since you have to do more low level stuff like handling 1x vs 2x (and now 3x) images manually (sorry if this is a dumb question, i'm kinda new to iOS development (and programming in general))
Sounds sweet! 
It isn't possible. I'm sorry if my post was a bit unclear on that. The interface and visual experience of the app is all accomplished through Cocoa/SpriteKit, where as all the puzzle logic is done using the Swift Standard Libraries. A similar thing can be done in Objective-C by using Pure Objective-C (though there is pretty much no standard library for it) or by using C and C++ for the core logic. Typically a lot of people tend to use Foundation for the Core Logic of their applications, because in Objective-C there was never really a clean or nice way of implementing it. The Swift Standard Libraries (for the most part) act as a reasonable substitute for Foundation. I'll try and get something longer put together and post it at some point containing some information and comparisons between Objective-C and Swift.
I thought most of the APIs (Foundation, UIKit, SpriteKit, etc) were auditioned to only use optionals when actually necessary? Do you have an example where a lot of unnecessary boilerplate is needed because of optionals? Seems quite strange to me... I agree with pure swift being awesome. It's great to write algorithms and general business logic and stuff.
In my view, Swift isn't production-ready, and as such you shouldn't use it for production. Two days ago, I found that this generates invalid ARC code that crashes the program at the end of the second call: import Foundation protocol FooProtocol : class { var value: Int { get } } class FooImplementation : FooProtocol { let value = 42 } func printValue(obj: FooProtocol) { println(obj.value) } let obj: FooProtocol = FooImplementation() printValue(obj) printValue(obj) It appears that class protocols cause parameters to be double-released, or something like that.
This code is just so insanely ugly and overly complex. I don't see any reason to do things this way other than "I wanted a map operator and to treat optionals like monads because hur dur functional is cool". Why do all of this when you can just have a JSON enum with computed properties to return optionals of various possible types? It achieves the same thing but without the unreadability and assortment of non-standard, non-self-explanatory code. EDIT: [Made what I think](https://gist.github.com/ElvishJerricco/290dd0fdeb99494725eb) is simple, readable, type safe, and ultimately just nice (sorry about the tabs getting screwed up). You could argue that returning optionals is kind of unsafe but I think this is exactly the situation optionals were designed for. We don't want to create an object that doesn't have a name, so if the json data doesn't have a name, we want an error to occur.
You're arguing that we should be generating runtime errors (and crashing the application) if the JSON is malformed? Not only does that seem like a poor idea in general, it seems like you're completely missing a large point of swift, which is to _avoid_ crashes like this in our applications. No matter which approach you take, you should at least be checking for a value instead of force unwrapping it. EDIT I should add that I can't get your example to load in a Playground at all. It looks like it's crashing the playground.
"Beginning iPhone Development with Swift Exploring the iOS SDK" -- available now via Apress' alpha program which releases chapters of the book as they are finished. Final version is slated for release on Oct. 22nd. Fyi, I haven't purchased this book so I can't speak to its quality. http://www.apress.com/9781484204108 
Ah that makes sense. Could this be usefull for me? I'm currently building a top down shooter using sprite kit and swift and this sounds very interesting. 
I'm not familiar with the below syntax, is this saying that the protocol can only be applied to classes? protocol FooProtocol : class 
&gt;In my view, Swift isn't production-ready, and as such you shouldn't use it for production. Totally agree with this. I feel like Apple just slapped a '1.0' sticker on Swift just to coincide with the release of iOS 8, even though the OS is in no way dependent on Swift. If these issues aren't fixed by Yosemite's release, I'm somewhat worried apple won't fix the language until iOS 9. At this point I'm not even convinced Swift will be production ready by Yosemite's release.
Hey sorry esaruoho, I got sick yesterday was unable to respond. I will respond tonight and if I don't ping me on twitter @adamjleonard and tell me I'm a terrible person.
This looks like something very useful but I have absolutely no idea how this works. Doesn't help that XCode crashes when I try and step through.
I'm sorry, but this is about the ugliest syntax I've ever seen... User.create &lt;^&gt; d["id"] &gt;&gt;&gt; _JSONInt &lt;*&gt; d["name"] &gt;&gt;&gt; _JSONString &lt;*&gt; d["email"] &gt;&gt;&gt; _JSONString Edit: Nevermind, I just scrolled to the bottom of the article... The "improved" version is much worse...
They really rushed XCode 6, still crashes on me all the time and swift keeps crashing and restarting popping up all kinds of notifications...
Yes, [this is exactly what it says](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html#//apple_ref/doc/uid/TP40014097-CH25-XID_409). It's necessary if you want a protocol type to be nullable.
I'm using Mavericks with the Xcode 6.1 beta. My application targets 10.10 but it somehow works on Mavericks anyways.
So each of the imagepickers will call only func imagePickerController. It's a single method (you cannot have 1, 2, 3). Within that method you can determine the exact picker by the "picker" argument that gets passed. Off the top of my head at the moment I cannot think of the best way to do this (I need sleep). So have your multiple imageViews, have a single func imagePickerController method and within that method decide which image picker is sending the message and then update the corresponding image view! Hope this helps.
Sorry but you are a bit confused regarding the theft of content. (This is not theft since their origin is informed). But from your point of view, I also consider this link http://imgur.com/pwOpiCL content theft (stolen 2 times). Okay all right. Regarding the site, yes he is still young and needs many adjustments. Some of them referred by you.
Huh. Never would've guessed in a million years. Thanks a bunch though, you saved me from almost breaking my desk in frustration.
Hah, I'll bookmark this to read later. :)
btw, I purchased one of the o'reilly books from the link you provided - "Swift Development with Cocoa". Halfway through it so far and I have to say it's a really good book - thanks for the tip! http://shop.oreilly.com/product/0636920034285.do?code=WKIOS8
You need to add an SKAction. Relevant link: https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKAction_Ref/index.html#//apple_ref/occ/clm/SKAction/moveTo:duration: It would be something like let moveAction = SKAction.moveTo(location, duration) rectangle.runAction(moveAction) Not 100% positive on the swift syntax, but it would be like that.
&gt; This is not theft since their origin is informed It's not theft, but it *is* copyright infringement unless you have permission from the copyright holder to redistribute copies of their content. Telling people where you got it from is not a defence for copyright infringement. If you put Microsoft Windows up for free download on your website, putting "Source: Microsoft" underneath the download link would not stop you from getting sued for copyright infringement. This is the same thing. Just because it's a picture and more easily copied, it doesn't mean that it's legal. 
Can anyone explain what is inherently better about using magic operators to obscure things rather than simple, straight-forward extensions? It seems to me that not only is this more of a maintenance and debugging headache, but doesn't really seem to ultimately save many keystrokes. In addition, it requires making the assumption that your iOS model property names and JSON property names will always be 100% in sync, which is rarely a safe assumption in my experiences. I don't really feel like I know anything about Swift yet, but what is wrong with an approach like this? https://gist.github.com/exorcyze/488dc26c46e7b8fdc6a7 I opted for "safe" values returned from a dictionary, which just means default return values. The constant need for unwrapping variables is unwieldy in my opinion and should be minimized as much as possible. I think in cases where it matters, it's easier to say **if myuser.name.isEmpty** than **if let userName = myuser.name { if userName.isEmpty { ...finally do stuff... } }**. Why would you needlessly inflict that every place you need to access a value from your models? I think clarity and simplicity are a good combination for code, and it feels a bit like Swift is trying to move away from those things to be "fancy". Just my $0.02 - would love to hear support or dissent.
Read the docs. didBeginContact is part of SKPhysicsContactDelegate protocol. It says this (emphasis mine): &gt; An object that implements the SKPhysicsContactDelegate protocol can respond when two physics bodies are in contact with each other in a physics world. To receive contact messages, you **set the contactDelegate property of a SKPhysicsWorld object**. The delegate is called when a contact starts or ends. So the SKPhysicsWorld calls the methods. Of course you don't call it yourself, you want SpriteKit to figure out when two physics objects contact. Otherwise you'd be implementing your own physics engine.
Those are not global variables, they are simple members of your class. I assume you added `var firstBody:SKPhysicsBody, secondBody:SKPhysicsBody` last, right? If you have members in your class that do not have default values (like those), you need an initialiser that sets those members to some value. Otherwise there would be fields that don't have a value - Swift doesn't allow that.
I guess the delegation pattern is new to you. It's used everywhere in Apple's frameworks, so you should know about it. Here's an explanation: https://developer.apple.com/library/ios/documentation/general/conceptual/DevPedia-CocoaCore/Delegation.html
As it turns out, I just fixed this in our latest compiler. The fix will go out in the next update to Xcode 6.1 release.
Whoa. This is legitimately Chris Lattner. Cool!
Good to know! Also: Wooo, Chris Lattner is on Reddit :-D
As far as I know, UIWebView is the only UIKit view that will format html.
If you're targeting iOS 8, you can also use WKWebView: http://nshipster.com/wkwebkit/
Looks very very clean. Any chance you made the UI in Sketch? 
Oh cool, that's pretty nice! Although, because it's just some static html, I don't think access to nitro is an advantage in OP's use case (no access to nitro was the one big problem with UIWebView if I remember correctly). On the other hand, WKWebView is probably the way of the future.
And by far the easiest. I've made many an info or help screen out of a bundled HTML and CSS file. Throw them in a folder in your bundle and load the request up. Easy peasey. 
I submitted an app but it's still waiting for review :(
What's the app? And how long has it been in review?
I guess that means that one should go the "case picker1 -&gt; load to x" route? 
I'm still pretty confused. Could you explain this with my code
It isn't a book, but I recommend bitfountain's series. It's excellent.
It took a few days (possibly up to a week) for iAds to start displaying in my app as well. Have you filled all of the tax stuff etc in for iAd? I seem to remember having several different places I needed to fill things in. Every time I thought I'd done everything I needed to, I'd go to another page on the developer site and discover another form that was needed.
Yep, something along those lines. Work on it and show me what you got and I'll see how we can better clarify!
Awesome! Thanks for sharing!
wow its Chris Lattner! Only if people could understand what it takes to develop, create, design a new programming. it's really quite amazing. Thanks Chris for all your work. 
Now that's what I call good customer service ;)
Just wanted to say I'm excited to get my first mac and start diving into app development. It's great to see you guys on reddit responding to threads like this.
I reached the same conclusions as yours: JSON is just dumb data carrier and should not change the way we write our model. I believe the `modelFromDictionary` method as in your gist is the most effective solution for dealing with JSON.
Have you considered doing [an AMA](http://www.reddit.com/r/IAmA/wiki/index)?
ooo! that would be such a great ama.
Thanks for the amazing language and all your work on it :) 
Looks like your sprite goes off the screen all the way from y:0 to y:-100..-200..
Hi! I've just started learning Swift, but I have a bit of Objective-C experience, so I can help answer your questions. **Q1**. "import Foundation" makes the basic libraries (known as Foundation) built into iOS/OS X available to your Swift environment. Swift's built in library is rather sparse compared to the massive amount of functionality present in the Foundation library. For example, parsing JSON isn't exactly a trivial task. However, Foundation has NSJSONSerialization, which makes this common task pretty straightforward. NSJSONSerialization is an Objective-C class, but Swift can use it exactly like Swift code, thanks to the interoperability present between Swift and Objective-C. Since the functionality for JSON parsing is already present in the Foundation library, there's really no need to reimplement it if it already works perfectly fine. Many Swift types are also "bridged" to Foundation types. For example, if you import Foundation, you can use a native Swift string as an NSString and vice-versa. This is helpful, because NSStrings have a ton of functionality built-in, and you can intermingle Swift and Objective-C without worrying about casting or converting anything. As an example, here's the [standard Swift library](https://developer.apple.com/LIBRARY/PRERELEASE/IOS/documentation/General/Reference/SwiftStandardLibraryReference/index.html), and here's [the functionality built into Foundation](https://developer.apple.com/LIBRARY/PRERELEASE/IOS/documentation/Cocoa/Reference/Foundation/ObjC_classic/index.html#//apple_ref/doc/uid/20001091). If you're doing app development, you pretty much are required to use Foundation in some way or another, since the iOS and OS X apis (UIKit and AppKit, respectively) are built on top of Foundation. In general, Foundation classes start with "NS," and you're more likely than not going to see that a lot in your code. (Technically, "import Foundation" is actually importing the Foundation *module* into your Swift file. Over time, parts of Foundation might be rewritten in Swift, but you won't have to change your code. In other words, the internal implementation of Foundation should be of no concern to you.) **Q2**: To add files to an Xcode project, the easiest way I've found is to drag the relevant files/folders into the left sidebar in Xcode. A dialog box will appear, and you should make sure to select "Copy items if needed". If you're importing Objective-C code, you'll need to configure a [bridging header](https://developer.apple.com/library/prerelease/mac/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html) for those types to appear in your Swift files.
For question 1, Swift was designed by Apple for use with Cocoa. Foundation is one half of Cocoa (the other half being either AppKit or UIKit depending on platform). Using Foundation is absolutely the expected way to do many things, at least for the mid-term future. That said, there are some places where the way things are designed in ObjC isn't the best way to express them in Swift; once you get comfortable enough to identify those places it's entirely reasonable to request improvements (whether that be ObjC APIs that bridge better, or overlays to adapt things, or entirely new APIs) from Apple via bugreport.apple.com, or to investigate third party Swift libraries.
Very very helpful info, thanks!
Will do, thank you.
File a radar.
&gt; `Character` in Swift represent code-points, code-points can have variable number of `UInt16` (1 or 2 since each `String` is UTF-16 coded) so you can't count 'em as you count the `UInt16`. &gt; I ended up using `String.nulTerminatedUTF8` &gt; Done some other work (such as working only on ASCII char and `UInt8`values) It seems to me you're being unfair to Swift here. Text is a hell of a lot more complicated than "just assume everything is fixed-length ASCII". Swift's strings try to handle text properly, so obviously they've got to do a lot more work than code that can only handle ASCII. You can do it quickly, or you can do it correctly. I'd rather have a parser that *doesn't* blow up the second somebody uses an accent in their writing. 
This is 3 unrelated things. 1. I'm not saying supporting Unicode is a bad thing. I'm just saying that working with it require more attention than ASCII. 2. `String.nulTerminatedUTF8` was the faster thing to iterate through at this point, remember execution speed is the main goal. 3. It appears that I only need to work with ASCII to analyse the text since no unicode character is part of the grammar. I simply skip *n* UInt8 depending on code units. What I tried to say is that I think `CollectionType` is not efficient by explaining why I end-up thinking like this... 
You shouldn't have stopped because it's not the point ;)
&gt; I'm not saying supporting Unicode is a bad thing. I'm just saying that working with it require more attention than ASCII. Well no, you're pointing the finger at *Swift* as the cause of the problem, when really it's about the complexities of representing text in a computer system. What you have found is that if you ignore the complexities and assume an unrealistic subset that's convenient to program for, you can do it faster. Well, sure, but that doesn't help you if you want to make a robust Markdown parser, and it doesn't mean "Swift sucks at making good text parsers". It's slow because it's *good* at handling text. &gt; `String.nulTerminatedUTF8` was the faster thing to iterate through at this point By treating the characters as `UInt8` values? UTF-8 has variable-width characters. You can't iterate over UTF-8 characters that way. &gt; It appears that I only need to work with ASCII to analyse the text since no unicode character is part of the grammar. Well that's obviously not true, but what grammar are you talking about? 
For one of your questions in Q1: What's the point of using Objective-C: Why wouldn't you? It's working code that's been debugged, tested, and tuned. Christian Laettner said there's no use going back and rewriting perfectly fine Objective-C code. And, for certain, Apple has quite a bit of that.
&gt; Well that's obviously not true, but what grammar are you talking about? Well he's talking about writing a markdown parser, so the obvious assumption would be the markdown grammar... Writing a markdown parser with full unicode support which operates on UTF-8 does not require operating on proper unicode characters at any point. All of the actual text between the control characters can simply be treated as opaque blobs, and the set of characters which require special handling are all a single byte in UTF-8. As a result, treating the text as if it were ASCII works perfectly fine (and making this possible was sort of the main design goal of UTF-8). Parsing a file format which happens to be text-based and processing human-language text are two very different things. Swift's Strings optimize for the latter, at the expense of the former.
That's exactly what I'm talking about. Thank you :)
It works in my playground with Xcode 6.0.1, but then again I had some code that worked in the playground and crashed inside an app.
&gt; Well he's talking about writing a markdown parser, so the obvious assumption would be the markdown grammar... Yes, but which one? Markdown doesn't have a formal grammar. There's lots of different flavours of Markdown. 
Try this playground.. https://github.com/ochococo/Design-Patterns-In-Swift
Pick any of them. To the best of my knowledge no real-world markdown implementations treat U+2028 or U+2029 as line breaks or anything other than U+0020 as a space, and anything involving non-whitespace, non-ascii control characters is clearly not "normal" markdown.
This is not isolated to Strings. Swift is quite picky when it comes to performance and there are a large number of cases where the naive version is either slow by design or slow due to bugs in the compiler / runtime. If you want to work with Swift in the near future then this is what you need to accept. Although bugs are continuously fixed, the current burn down rate will still have serious bugs popping up even many months from now. BTW. I have no idea why people are downvoting this, which is very relevant to Swift programming. On the other hand, people are desperately upvoting articles that have information on the level of "here is how you create a function in Swift", so it might simply be that this subreddit is overrun by idiots.
This was created as part of Realm's Summer of Swift and presented last friday at NSSpain. It might very well be the first implementation of a generic cache in Swift. Feedback and contributions are more than welcome!
Thanks! I'm not keen on writing (production) Swift apps so early into the language's lifespan, so I haven't used it either. :) However, it might be one of the few full libraries written in (pure) Swift with heaps of unit tests, so hopefully it will be useful to others as an example.
I tried using the Xcode 6.1 beta, on Mac OS X too.
Cool. I look forward to checking out your code!
He basically just regurgitated the section about this from the Swift ebook.
Man you weren't kidding. The amount of blog spam on this sub is ridiculous.
You don't mention how you're measuring performance. FYI, performance evaluation in a playground is completely meaningless (because the playground logs lots of values to show you as it evaluates) and building without optimization gives you a several order of magnitude slowdown vs building with -O or -Ounchecked. That said, and just MHO, but if you're writing a real parser - one that accepts unvalidated text from the wild, you'll be working in terms of bytes, and assembling unicode code points from whatever input format you're working with (a code page, UTF8, UTF16, etc). The best way to do this in swift is to memory map a buffer in from disk (or read from a socket, etc) and treat the data as a Slice&lt;UInt8&gt;. This gives you full flexibility to treat the input data however you want, and is effectively how clang and swift itself parse input data. If you care about super low-level performance, you'll of course need to know how String represents data, and how -O speeds up runtime performance. If you have specific questions about this, you should go to the developer forum. -Chris If you think you don't care about unicode or non-english languages, then ok, it degenerates to the same thing - an array of bytes. 
Swift is a language you can use functionally or in an object oriented manner If you want to program iOS apps, large portions of your code are going to primarily look OO due to having to interface with cocoa, which at the moment is OO, however, you *can gain a lot* from functional techniques such as higher order functions, closures, currying, and partial function application As swift matures, more pure functional and mostly functional programs will likely be possible
I can't help with your question, but I *also* can't help but notice you've submitted 5 question posts to this sub over the last 2 days. You'd probably be better off asking on StackOverflow or in an IRC channel dedicated to learning Swift. Many of your questions also seem to be about semi-basic ideas. Have you tried going through some tutorials related to storyboards step-by-step? It seems to me like you're trying to learn on the fly rather than just learning the basic ideas first and *then* trying to apply them to what you want to build. You'll be a lot more confident in what you create if you first obtain a solid grasp of the fundamentals.
swift was already released...officially.
This is really simple stuff. I'm on my iPad so I don't have Xcode to type it in and get it right but looking at an ObjC example it should be easy to write. Create it with a view controller and present it. https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPopoverController_class/index.html You won't get away without being able to read objc, so head over here and read this: https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011210 Objc the language is very simple and the wealth of info out there is gigantic. 
&gt; For one of your questions in Q1: What's the point of using Objective-C: Why wouldn't you? It's working code that's been debugged, tested, and tuned. My instinctive answer to this would be "so is the C stdlib, but we aren't trying to use that", but I think that's out of my weak understanding of the relationship between Swift, ObjC and OSX :)
Why are people so secretive in what their app is called? Don't you want exposure? Tell us the name of your app! Please?
Will do. In the meantime, here's how you could use Haneke to fetch and cache JSON from the network: let fetcher = NetworkFetcher&lt;JSON&gt;(URL: url) Haneke.sharedDataCache.fetchValueForFetcher(fetcher, success: { json in // Do something with json }, failure: { error in // Handle error }) 
[Readme](https://github.com/Haneke/HanekeSwift/blob/master/README.md) updated with more examples and how to support custom types. Hope it helps!
[Solved] (http://stackoverflow.com/questions/25970842/nstimer-scheduledtimerwithtimeinterval-and-target-is-class-level-function)
The error is: "Cannot find object class with name Person". Wouldn't the name of the swift class in the objc runtime be "Raiseman.Person" rather than just "Person"? If you have not tried that yet, give it a shot.
Wow, cool. It works. How do I know when I should use `RaiseMan.Person` or just `Person`?
If you're referring to the class by name (e.g., by string) you will always need to use the full module definition + classname since that's the "actual" name of your class. You can refer to your class sans module name *inside* your app (as a literal, not a string) since it's implicit in your app. EDIT: Clarification
OK, got it! Thanks guys. :D
I didn't use the beta but the Xcode from the App Store (6.0.1)
Awesome! Thank you. Will be using this definitely. Why did you name this Haneke btw? 
I use NSDate "enclosure" to measure time taken to execute a bunch of functions. It's not really accurate but tells me if a method is faster or not than another. I don't test it in playground. Could you please tell me how to treat a memory area as a Slice ? I've been searching for a while...
Am I the only one who thought this was about an infinite loop happening on a background thread? :)
Well the builder is pointless. Why write let p = Point { point in point.x = 1 point.y = 2 point.z = 3 } when you could just have a constructor which would let you write let p = Point(x: 1, y: 2, z: 3) And the downsides for using the builder pattern are not negligible. Using closures when they're not necessary slow stuff down. And it forces you to make all your properties optional when using a constructor lets them be concrete, and avoids the issue of forgetting to initialize one of them. There's just no upside to the builder pattern. It's less concise, less efficient, and forces your properties to be optional. As for the factory pattern, using a class for that is unnecessary. We can just make global functions. I also don't see any reason to have a factory class when we have a much better possibility that can return subtypes. Here's an example. class A { let a: Int required init(a: Int) { self.a = a } class func create(a: Int) -&gt; Self { return self(a: a) } } class B: A { required init(a: Int) { println("B being created") } } // This works let b = B.create(2) // This also works func calculateAndInstantiate&lt;T: A&gt;() -&gt; T { let a = ... return T(a: a) } let b: B = calculateAndInstantiate() The required initializer and returning Self is an unsung hero of Swift with a lot of power. Kinda creams the factory system IMO
haha cool.
Awesome, thanks! I guess I wasn't very targeted in my question. I had realized the builder pattern ( at least from that example ) was pointless - though others may benefit so the ambiguity probably ended up being good. Since pretty much everything can have initializers, I'm not sure when it would serve a purpose. I tend to prefer factory-style methods on the objects like you have on your A class example, but didn't know about Self - that really gives a ton of flexibility. And the code is still clear! 
You need to follow these steps: 1. Create a SKAction that moves the background node (something like SKAction.moveBy() ) 2. you need to repeat the action that you created at step 1 infinitely, you do that like this: SKAction.repeatActionForever(&lt;THE ACTION YOU CREATED AT STEP 1&gt;) 3. run the action that you created at step 2 Feel free to PM me if you have any questions
There are many reasons why someone might not reveal what their app is. For example a contractor's agreement with clients or easing into exposure to scale back-end resources.
Just a some help with the terminology, what you are talking about is a "repeating" background, not an "infinite loop". Loops in computer science generally refer to control flow, not data. Using the more common terminology will help people understand your questions more easily and therefore get you better answers :)
Why use NSTimer (in most cases) when you have dispatch_after?
Good points about spacing towards the end. Beware Swifters, spacing may be the simple explanation to some non-descriptive compiler errors!
No, you were not :-)
Tell us what the problem is and someone might help you.
I think you've gotten several answers on this...but I figured I'd throw out a less clever implementation that uses basic syntax. extension Array { func flatten() -&gt; Array { var flat = self var i = 0 while i &lt; flat.count { while flat[i] is Array { var j = 0 for item in flat[i] as Array { flat.insert(item,atIndex: i+j++) } flat.removeAtIndex(i+j) } i++ } return flat } } Usage: let myArray1: [AnyObject] = [ 1, [ 2, ["A", "B"] ] ] myArray1.flatten() 
Where do you set the data that should be displayed in the cell? The way your code looks, your cells should be simply empty? Your bug is probably because of the way `tableView.dequeueReusableCellWithIdentifier` works. When you scroll, it may give you a cell that you already created (instead of creating a new one). That's what the `reusable` part refers to, the whole thing is for performance reasons. It is your responsibility to configure the cell correctly and set all fields that are displayed in the method you posted. If you have different types of cells that shouldn't get mixed up, use a different cell identifier for each type of cell.
The UI is set using the storyboard. The GoalTableViewCell class contains the code that executes when a tap on a button inside of the cell occurs. Is there an alternative to dequeueReusableCellWithIdentifier ? This is the default method used in a lot of tableViews I have seen. I cannot use a different cell identifier because the cells look no different. When I mentioned that I modified the text in the UITextField, I mean't through using the simulator. For example, a reminders app is an example of this, the cells are all identical until information is filled inside of them by the user.
This has various solutions for it. http://stackoverflow.com/questions/7864371/ios-how-to-pass-prepareforsegue-an-object/
That last sentence is gold! Thank you. So the obvious next step here is..well..finding out how to get that old cell with the text back. I will just use an array.
No, using dequeueReusableCellWithIdentifier is the right thing. It sounds like you're saving your state in the cell itself, that's the problem. You should store the information about what a cell displays somewhere else, so you can configure the cell to display the correct content in your method. /u/iv_mexx explained it pretty well.
Most definitely. I ran into lots of little issues like this along the way, but it makes for more solid code in the end.
The first step is telling us what your problems are.
Here's a quick translation: https://gist.github.com/andrewroycarter/b0d3ba2f4b938bd04326 I'm guessing the problems you ran into probably deal with the CGFloat / Float / Double / etc conversion which can be quite fun in swift. This really is just a translation and could be done in a much more "swift-y" way, but I was bored and had fun doing a quick conversion. Let me know if you have any questions!
nice man...
When is the screencast available ? 
Hm what do you think of the idea of currying the error handling closure parameter so it could look like this? let fetcher = NetworkFetcher&lt;JSON&gt;(URL: url) Haneke.sharedDataCache.fetchValueForFetcher(fetcher) { json in // Do something with json } ({ error in // Handle error }) Oddly, it required parens around the second closure but it still seems a bit better to me.
Not going to retype it since it's pretty long, but my reply to an earlier thread applies just as well here: https://www.reddit.com/r/swift/comments/2far3v/python_and_swift/ck7hg3h Don't be afraid of learning more languages though. The medium you express yourself in shapes the thoughts you can easily have; as you learn more ways to build software, you gain the ability to think about programming problems in new ways. 
 override func didMoveToView(view: SKView) { // Background background = SKSpriteNode(imageNamed: "background") background.position = CGPointMake(self.size.width/2, self.size.height/2) self.addChild(background) // loop Background Image doAction1() } //loop background image infinetly func loopBackground() { let moveToBottom = SKAction.moveByX(0, y: 0 - self.frame.size.height - background.size.height, duration: 210.0) let removeTheNode = SKAction.removeFromParent() let moveAndRemoveBackground = SKAction.sequence([moveToBottom, removeTheNode]) let repeatBackground = SKAction.repeatActionForever(moveAndRemoveBackground) background.runAction(repeatBackground) } //background repeat action func doAction1() { let generateBackground = SKAction.sequence([ SKAction.runBlock(self.loopBackground), SKAction.waitForDuration(1)]) let endlessAction = SKAction.repeatActionForever(generateBackground) runAction(endlessAction) } the background is moving but doesnt repeat. It goes to a grey background. 
You are asking the question wrong. "Can iOS scan bar codes out of the box?" is what you should be asking. The answer to that is yes. http://www.itexico.com/blog/bid/99298/Mobile-App-Development-Creating-a-Bar-Code-Scanner-for-iOS-7 Translating that to Swift should be pretty quick.
How would I do that? 
Apple provides copious amounts of learning material in the developer centre. 
Just change to position of the background to be at the top
Awesome thanks. I know I have a lot to learn. Haven't programmed since C++ in 2001
Try : https://github.com/yeahdongcn/RSBarcodes_Swift
Mobile is the now!
Add first in your GameSceneViewController.viewDidLoad: scene.size = skView.frame.size And then heres a example of a Node that acts like a button and load a scene when it get touched: Import SpriteKit class GameScene: SKScene { var aButton = SKShapeNode(circleOfRadius: 50) //Circle shape as Button override func didMoveToView(view: SKView) { aButton.fillColor = SKColor.redColor() aButton.position = CGPoint(x: CGRectGetMidX(self.frame), y: CGRectGetMidY(self.frame)) self.addChild(aButton) } override func touchesBegan(touches: NSSet, withEvent event: UIEvent) { /* Called when a touch begins */ for touch: AnyObject in touches { let position = touch.locationInNode(self) // Get the x,y point of the touch if CGRectContainsPoint(aButton.frame, position) { // Detect if that point is inside our button let endScene = GameScene(size: self.frame.size) //Replace here with the target scene self.view?.presentScene(endScene, transition: SKTransition.doorsCloseHorizontalWithDuration(0.35)) // Performs the transition of scene if the button was touch } } } } Hope it helps you
I have no idea how to do that, but just out of curiosity what are you making? 
It sounds like you're asking for two separate things. You might have to explain what you're doing. I'll assume this is OS X, because you're getting outside what I think Apple will allow in the app store. How will you call your swift function if you're in an arbitrary C program? 
Let's call your class `Bag`. You take one bag and put stuff in it, then print the content of that bag - great, 100 items (or whatever). Then you take a **new** bag ("creating an object of the other class"), look into it, and wonder why it's empty (number is zero). Your problem is that you create a new object where you have to reference an existing one. These are basics of object oriented programming, or rather programming in general. You create a new thing, and somehow expect it to be the same as some existing thing. It doesn't work that way.
I'm sorry but omg search google! 
Thank you for that explanation! I have a Game class in which my game executes. In there, the score is calculated and is working fine. I need to display the score in my GameOver class. I created a var and called the int on this, which didn't work ^ you explained why. So, what would I do to properly use this variable in my GameOver class and for it to have the same value as my Game class?
The object I created was a Game object, which is where the score int is stored. 
I don't like the idea of using a trailing closure for errors. However, I'm considering changing the order of parameters so that the success closure is the last one, and use the trailing closure for it.
You haven't really given enough information for us to help you out. We need to know what context this is in. Do you want to do post-compilation processing on a program? Or are you trying to pass a function around at runtime?
The first two are constructors, and the second two are class methods. Swift drops the Objective-C initialisation style of [[ClassName alloc] initWithFoo:] in favour of ClassName(foo:)
You need to keep a reference to the instance of the Game class that is being used, and then access that instance. Store it in a variable somewhere the GameOver class can access later, like in the app delegate.
Sorry, I am a bit confused. What do you mean by keep a reference to the instance being used? Where would I create this? Could you expand on this a bit?
You don't have to use Objective-C++ to use Pop, its API is pure Objective-C, C++ is an implementation detail. 
Thanks for the help!
Thank you! The detailed explanation did it for me. Really appreciate it.
One quick thing though.. What's the deal with AmazingClass()? Shouldn't it be TestClass() ?
Too much repeated code! func rollDice() -&gt; UInt32 { return arc4random_uniform(6) + arc4random_uniform(6) + arc4random_uniform(6) + 3 } let Die1 = rollDice() let Die2 = rollDice() // etc I've never written swift before so I can't guarantee this is syntactically correct, but this is the method I'd use.
Yes. Thank you so much! I've been programming for about a week. I just get spidey-senses that I'm doing something wrong, but I don't have enough knowledge to know exactly what I'm doing wrong haha Thanks again 
This is an even better way to do it. Simplify the problem and find out what the actual results you want are. My answer was just a quick refactoring of what you'd done.
haha thanks for the tip. I've been learning for 5 days, but yea I knew something was wrong. Would the result be the same if I removed the - minDiceValue and the +minDiceValue? Do those not just cancel each other out? for i in 0..&lt;6 { let sumOfThreeRolls:Int = Int(arc4random_uniform(maxDiceValue + 1)) results.append(sumOfThreeRolls) }
Take a look at some basic code control flow statements. Seems that you don't know what a for-loop is. Here's a "simple", iterative version, that prints some output for each dice roll: let numberOfDiceRolls = 6 let numberOfDicesPerRoll = 3 func rollDice() { for rollDiceNumber in 0..&lt;numberOfDiceRolls { var result: UInt32 = 0 for i in 0..&lt;numberOfDicesPerRoll { result += arc4random_uniform(6) + 1 } println("dice rolls for \(rollDiceNumber): \(result)") } } rollDice() And here's a functional version. This one's not that easy to read if you're not used to functional programming. Maybe it gives you some ideas. // Returns an array of UInt32 of length numberOfDiceRolls, // each element contains a number determined by the sum of numberOfDicesPerRoll dice rolls. func rollDiceFunctional(numberOfDiceRolls: Int, numberOfDicesPerRoll: Int) -&gt; [UInt32] { return (0..&lt;numberOfDiceRolls).map { _ in (0..&lt;numberOfDicesPerRoll) .map { _ in arc4random_uniform(6) + 1 } .reduce(0, +) } } let dice = rollDiceFunctional(10, 3) // eg. [12, 4, 12, 12, 14, 9, 7, 14, 14, 11]
Don't repeat yourself! You stated the problem as "take 3 dice, roll them, and add the results 6 times". Each component of this statement can be expressed in the code: 3 dice, each with 6 sides: let dice = [6, 6, 6] Rolling the set and adding the result: func roll(dice:[Int]) -&gt; Int { var sum = 0 for die in 1...dice.count { let sides = dice[die-1] sum += Int(arc4random_uniform(6)) } return sum } Rolling 6 times: let numberOfRolls = 6 for index in 1...numberOfRolls { roll(dice) } Here it is all together: let dice = [6, 6, 6] let numberOfRolls = 6 func roll(dice:[Int]) -&gt; Int { var sum = 0 for die in 1...dice.count { let sides = dice[die-1] sum += Int(arc4random_uniform(sides)) } return sum } for index in 1...numberOfRolls { roll(dice) } You can certainly write this code more concisely, as other people have shown, but hopefully this way helps to make the solution a little more obvious.
Someone creates the GameOver class, right? That dude needs to know about your Game class (it might be the game class itself, doesn't really matter). Then you create some instance variable in your GameOver class for the Game object, and make the initialiser of the GameOver class take a Game object as a parameter (and set that parameter to the instance variable you just created.) The class that creates the GameOver object can now pass the Game object to it's initialiser. Now, the GameOver object can access the Game object via it's instance variable. Example: Wrong: class Game { .... } class GameOver { func something() { let game = Game() //game is a new game and has nothing to do with the actual game object you're interested in. game.getScoreOrWhatever() // does the wrong thing } } Correct: class Game {...} class GameOver { let game: Game init(game: Game) { self.game = game } func something() { //game is the game passed to the initialiser. There's a chance it's the correct one! self.game.getScoreOrWhatever() } } // This class should know about the correct Game object because it initially created it, or might be the game object itself. Adjust as needed. class ClassInWhichGameOverIsCreated { let game: Game ... func gameEndede() { let gameOver = GameOver(game: self.game) gameOver.something() } } What might be even better though, is if you just pass the information that the GameOver class needs to it, i.e. the highscore itself, not the whole game.
Thanks for that amazing reply! How do you *Just* pass the highscore itself?
How would I just send the high score? I tried the method you listen but it yields errors, such as super.init() not being called. 
If it complains the super.init is not called, maybe call super.init? I don't know what kind of classes you have.
Ok. But how would I transmit **just** the highscore and not *all* of the information?
It's not that hard. class Game {...} class GameOver { let highscore: Int // or whatever type it is init(highscore: Int) { self. highscore = highscore } func something() { println(self.highscore) } } // This class should know about the correct Game object because it initially created it, or might be the game object itself. Adjust as needed. class ClassInWhichGameOverIsCreated { let game: Game ... func gameEndede() { let gameOver = GameOver(highscore: self.game.score) // or whatever the property for your highscore is gameOver.something() } }
This is the result of a few months developing Swift. As much as I enjoy the technical aspects of Swift, I find we're lacking literature about style and nomenclature and often wonder if I'm doing things right or wrong. Hopefully this article will spark some conversation around this topic.
Worth mentioning that I was inspired by this other [article](http://radex.io/swift/methods/) about Swift conventions.
I was in the same boat as u. I wouldn't waste my time in an old language. There's a lot of great resources for learning Swift as a beginner. Also, everything I learned in Obj-C helped in my learning of Swift. Currently, I'm taking the iOS 8 course on Bitfountain and so far so good. Luckily I got it during the sale. I know it's expensive now :/
The same happened to me. In my experience, there's lot of cases in which you want to ignore a failure handler or other secondary closures in methods. It's even more important if you consider that Xcode autocomplete forces trailing closures. I like the idea of using verbs. Will update accordingly.
It's the tradeoff you get for some other new conveniences. * Adding beta tests by Apple ID * No need for testers to sign up and create an account * Beta testers can use multiple devices without needing each UDID setup individually. * No need for managing individual UDIDs for all your testers. * TestFlight available through the App Store and automatically showing what you have access to. (I understand this is already available through the web app that gets bookmarked to the home screen. There are some other things as well, but I can't remember them off the top of my head. Also, IIRC, the beta distribution is for external beta testers. You can still pump out builds to internal testers as often as you want (there's a flag you can set in iTunes Connect for internal testers).
mate this is bad advice. That 'old language' represents a huge proportion of the iOS and OSX codebase. Furthermore learning a modern language like Swift without a solid foundation in a systems language like Obj C puts you at a disadvantage, no matter which way you spin it.
How would I code that? Thanks.
Yeah that is what I have actually. I am like 1/4 into the iOS 7 course with objective-C and I am wondering if I should complete that before moving to Swift. I don't want to abandon course halfway but this would tai eke forever to complete and I don't want to wait forever to do Swift. But I guess it is good to wait to see if Swift takes off. 
It's not only going to take forever to complete, but take even longer to master. Why waste your time? If Swift takes off? It's Apple's new modern programming language. There's no ifs about it!
Thanks for trying to help, but this code doesn't work. It says super.init is not called, and when I call it it just gives more errors.
Something is seriously wrong with your installation of Xcode 6. I'd reinstall before I'd do anything. Seg 11 is b0rked completely. Remove all versions of Xcode you might have, install Xcode 6.0.1 (the official version) and run xcode-select to make sure your paths are ok. If that still fails I'd get someone to help you in person as something must be very wrong. Also make sure you don't have any odd additions to your default paths from any pervious installations. Maybe something from home-brew or other could interfere in some new way.
Git submodule?
excuse my ignorance as I'm new to the XCode environment but could you elaborate a bit more?
It's the yo dawg of git-- a repository that is used inside another repository. If you look at this repo: https://github.com/RyanCopley/RCActiveRecord You may notice it has a submodule of FMDB at a specific spot in its git history (See: fmdb @ fd95c38) You can click that and go to that repository... Here is some documentation on submodules: http://git-scm.com/docs/git-submodule http://git-scm.com/book/en/Git-Tools-Submodules
ok. Thanks to everyone!
As per my opinion, QuickBlox (http://quickblox.com/developers/SimpleSample-messages_users-ios) is one of the most adequate cloud services for that purpose.
Thanks for the advice. It started working on my 3rd reinstall.
What this guy means: Put your logging class into a git repository. It'll be pretty empty, you can either put just the logging class framework there, or just the single logging class source file. Then, the projects that you have, should have their own git repository as well. You can then add a git submodule to that repository, ie. the git repository of the logging class embedded in the project's repository (see his comment). This way, all your projects that use your logging code, can just have a git submodule of the Logging repository, and you can include the code in the project. I still recommend CocoaPods though, they use git too, but in a bit more automated fashion.
You're not supposed to copy this code exactly the way it is, it's just supposed to give you an idea about how to structure your program. Consider it as pseudocode, you're supposed to adapt it to your program. If you don't know how to do that, read the Swift book or something; I'm not gonna write the exact code you need for you.
The Swift compiler kinda likes to Segfault, but it really shouldn't do it with a fresh project. Some ideas: - reinstall the most current Xcode version - make sure you remove all derived data (in ~/Library/Developer/Xcode/DerivedData) Sometimes, when the swift compiler segfaults, it actually print some information, look closely at the compiler output, maybe it tells you something? 
Cocoapods or frameworks.
Actually started working after a couple of reinstalls. Appreciate the response though!
Some feedback: - Is there a particular reason why all methods in KeychainWrapper are class methods? Personally, I'd prefer instance methods. That way, you can have multiple KeychainWrappers with different service names. That might not be the most common use case, but the way you did it seems like an unnecessary restriction and singleton-ish design. - You could make your class support access via subscript. Would look really nice I think: `keyChainWrapper["myString"] = someValue`, `keychainWrapper["myString"] = nil`, etc. The problem might be that it's possible to store different types of data in the key chain... one solution would be to use subscript for strings only, or to return AnyObject and have the user cast to the expected type, or return an enum with the possible values... I dunno. - Not important at all, but I noticed you could write some code a little more compactly: if internalVars.serviceName.isEmpty { let bundleIdentifier = NSBundle.mainBundle().bundleIdentifier if let bundleIdentifierString = bundleIdentifier { internalVars.serviceName = bundleIdentifierString } else { internalVars.serviceName = "SwiftKeychainWrapper" } } vs. if internalVars.serviceName.isEmpty { internalVars.serviceName = NSBundle.mainBundle().bundleIdentifier ?? "SwiftKeychainWrapper" } Way easier to read imho.
Can you tell cocoapods to include the source code in your projects? The issue I have is that I can include an xcode project from another submodule in my workspace and I'll be able to set breakpoints in it, but with cocoapods I only get the headers which is pretty useless for debugging. 
Cocoapods. 
A good beginner needs humility.
I'm a little bit confused. If you take his proposed *fobjc* version of the first Swift example, doesn't it have exactly the same "flaws"? Just replace the Swift with his fobjc code in the article and the complaints are still valid. What does his solution have that Swift doesn't? I'm not very smart, so I'm probably missing something. Can anybody help me out? Edit: missing words.
Thanks for the feedback Jasamer. Regarding the class methods: My original wrapper was a static class in Objective C. I wanted to be able to use it without having to initialize anything, so I did this Swift wrapper the same way. In my use cases, I did not need to use different service names and just using the bundle identifier was enough. But I see your point about wanting to be able to have different wrappers and setting the service name each time is certainly not ideal in that case. I actually had the same line of thoughts as you concerning subscript access. It would be really nice to have and make that class even simpler to use, but the different data types make it less straightforward. I do want to add this, I just haven't taken the time yet to work out an elegant solution. And finally, the if let ... { } else { } syntax is just what I have seen used so far with Swift for unwrapping optionals. I was not aware of the ?? operator in Swift, and you're right, its a perfect fit for what I need. Thanks!
And then one of his examples complained about the clarity of the language using a sort function as an example. A) He could have just passed the operator without the closure, B) Anyone with any basic knowledge of swift knows what $0 and $1 are, and C) the only remaining problem is the type of the array, which can be indicated with an explicit type declaration or by option clicking the variable or by using a name that makes it obvious what the variable is, none of which are cumbersome solutions This guy posts every single one of his swift related articles on this sub and I tend to disagree with all of them. He just seems like he's really digging for things not to like. (It also feels like blog spam but that's beside the point)
Yea the problem is that you're wanting to go from compiled machine code to LLVM IR which isn't possible. Instead you could try embedding both languages in an Objective-C program that makes a function that takes a block and used the other languages library to add the function to that language.
I think he's trying to say to get the full understanding of Swift, iOS and Cocoa it would be a good idea to learn Objective-C. I think it would be a good idea to learn Objective-C such that you have no troubles reading code that is already available. 
I'm not aware of that being a current limitation. I haven't tried it either though, nor did some searches bring up questions or answers about it. Most of the writing on CP and Swift appears to be from right after the announcement.
I can't get my head around why the author feels type inference is "ambiguous," but then favors NSArray and NSMutableArray ... which can just be populated with any subclasses of NSObject. Most people who do dynamic programming will probably find Swift to be a bit more strict than they'd like, but compile-time safety, to me, is of far more value than runtime flexibility.
You basically made a list that references like 30 pages of the manual and it's just an overview. What could you possibly expect to be getting in response to this post? Try asking specific question if you want any hope of getting any helpful response on interactive forums like this one. In the meantime, read Apple's free eBook linked on the sidebar. It covers all of these topics at near-ELI5 levels.
That Apple Book, is +900 pages. Where did Closures appear from? Why now? Unwrapping? Never heard that expression in any language before. What's the history, that's what I'm curious about. After 40 years of pointers why did Apple throw them away? What was their reasoning. The code now is for sure harder to read, is it faster? Does this have anything to do with architecture changes? I've been in Comp Sci classes, no one every talked about unwrapping. (but that was years ago). The question was, lets see this new tech represented as an info graphic. Have not seen a single one yet. Helps students understand these principals for sure. I've been buried in JSON, server access, custom table cells, dispatching, etc. Have looked at at least a dozen ways to do this, there is still no standard way of doing it. Everyone is doing it in their own fashion. Download any sample App is this area. Pretty much 100% will not compile under 6.0.1. Not a one. So why did Apple do another radical change to the Swift compiler with the new release? Why? This is fun stuff by the way!~ :-)
Why are you on your third swifter account asking the same questions over and over again??
If you dont know the answer just ignore the question. Its that simple. 
Why don't you just post your final app requirements here and ask someone to write the whole thing for you instead of piece by piece.
Anytime I posted a question I put MY code up and asked for help just like im doing now. Like I said before if you don't know the answer ignore this post....
Wrapping and Unwrapping are just two words to describe how Optionals are handled in Swift. Think of Optionals as standard variables wrapped in a condom. This protective layer allows you to not use the variable if it's nil. I think with the above analogy wrapped and unwrapped make sense intuitively. Closures are just blocks from Objective C. Let me know if you need further info here. Finally ! Removes the "condom" from variables automatically 
This is /r/swift where people can ask questions about the Swift programming language, is it not? What a douche.
Awesome. Thanks. Something students can understand for sure. 
Right, so first of all I'm not the author. Secondly Owens is well regarded in terms of writing about Swift, except perhaps on this subreddit, which probably is just as likely to dismiss Weiher, Simmons, Tsai, Ash or any other well-known and experienced ios/mac developer.
If you do a bit of Swift programming, you run into cases where the type of a variable might be determined in a non-trivial manner due to return overloads, so that the type of variable a affects b which affects c which affects d. The actual type of types b, c and d can be affected by extensions etc. Also, compiler errors are currently often misleading or straight out incorrect, which again hampers comprehension. Any non trivial program that utilize features like return type overloading, advanced generics or operator overloads will be more complex to figure out than a similar ObjC program. Of course, you can introduce similar confusion into ObjC by relying heavily on method forwarding, on-the-fly proxies and similar strongly dynamic techniques. However, excessive use of such code is not encouraged in ObjC, while among Swift enthusiasts the corresponding obfuscations are hailed as great features. I think that once the dust settles, people will probably recommend much more moderate programming styles for Swift. Unfortunately it seems that Swift needs a bit more of obfuscating techniques than ObjC does.
Rather, these people are probably not the ones you should take advice from. Try the Apple Devforums instead, where the people on the compiler team (Lattner et al) are actively participating in the discussions. Ask the same question there.
Are you a programmer already or are you becoming one with swift? If you're already a programmer, optionals are a solution to the problem of If I have a function which returns any number from a set, how do I signal an error occurred with just a return value? For instance, if you have a function called plus that takes two arguments and returns their sum, only by using optionals (or tuples) could return some thing consistently that was the right answer to "plus" most of the time, as well as denoting the error case when plus does not have a defined solution. So plus (INT_MAX, 1) returns an Optional Int. (This is a bit of a wonky case because they don't handle overflow errors this way in Swift, but they COULD have). Something is an optional instead of the non-optional version of the thing when somewhere in it's creation path, it could have failed to been constructed. That's it. That's all an optional is. On Unwrapping: So Swift is pretty new, hard to say what the right way is to do something for sure, but I think for the vast many folks, if they just avoided using the ! operator to unwrap optionals, they'd be better off for the time being. Unwrapping (and we're not talking about just the ! operator, but also "let x=" in if statements, etc) is the process of reasoning about the error states of a given variable, and finding all the cases of failure and handling them appropriately. If a variable is optional, it still has possible error states you haven't solved for (this is why the "if let x =" is probably safer for beginners. Your "if let =" case handles what you want to do if the variable actually has the real value there. Your else case handles what you want to do if the variable never got the type of value you wanted in it, likely due to a program flow issue earlier in the program, or an exceptional condition on the device (e.g., there is no more storage space, no network, etc). The ! operator: "if let =" is a way to very explicitly reason about what you wish to do if you got the real type of value you're looking for, or a placeholder signifying an error. The ! operator lets you throw some of the safety you get out of the "if let x =" code out the window and risk runtime exceptions. You'd do this to possibly get far shorter code, or because you've already determined the value is fine, and just haven't otherwise handled this using the type system. Now no one has written enough swift to say *never* do this, but until you're know what you're doing, know this *is* the more error prone syntax variant for handling optionals. 
Closures: Closures are blocks :D. If you know blocks, you already know closures. The compsci definition of a closure is a "new scope that captures variables from the scope that it's initialized in and stores them for later execution". In comp sci, how exactly a closure is implemented is not essential to the concept of a closure, but swifts particular implementation happens to copy stack variables and add another strong retain on heap variables. Swift basically makes all variables visible outside the closure available in the closure as if they were marked __block in objective c. In short: Don't worry, write the answer like you can access any of the global state. The stuff in the closure will be executed later when it's appropriate (i.e. for an error handler, if there is an error, for a filter operation: on every item, for a completion handler, when stuff is done). I'm happy to answer any questions about the concepts in this or my other answer on optionals.
You've posted the same question multiple times 
I'm all for helping people but it gets of when someone comes here with multiple accounts asking the same questions in multiple posts 
thanks, i was losing my cool with Swift, think I've recovered!
Ok, it's becoming clear!
If you remove the minDiceValue, then its possible for arc4Random to return any number between 0 and the max dice value. Which is not what you want. Right? Because when i roll 3 dice, its iMPOSSIBLE to end with a result of 0. If I roll 1 die, the lowest value it can return is 1. If i roll one die three times the lowest value it can return is 1 + 1 + 1. Right? So we want to make sure we are limiting our results to exist between the lowest possible value a die can roll (1 + 1 + 1) and the highest possible value a die can return (6 + 6 + 6). Does that make sense? Feel free to PM me if you have questions
Ya, it would definitely be nice to remove the requirement of creating the factory method.
Swift is already at 1.0, batting for 1.1. If you followed the betas you know that we're not seeing much change in terms of patching the holes that are there. Complaining about his dislike for generics is disingenuous - if you do any juggling with generics in Swift you know it's a mess of half completed features. ... which by the way is the story of Swift. Loaded with features only half implemented due to either time or interoperability constraints. So the question he's basically posing is "would it have been better to create a language that started from ObjC and improved on that language, instead of starting with something very similar to C++?" And his conclusion is "yes". Strongtalk had a type system with generics on top of Smalltalk years ago. Nothing would have prevented the team from basically taking ObjC, slim down the syntax and fit an optional type system on top. This is essentially what Swift is anyway (since you can send any message to AnyObject). The problem is that they decided they wanted to take it one step further and actually base the system on top of a C++-like runtime to ensure maximum dispatch speed. And that's where they messed up, because that's a much bigger job in doing that and still keeping good ObjC interop. There are other experimental features they crammed into the language that ended up causing them issues, such as the +1 ARC emits (single-handedly causing something like x100-x1000 longer execution than ObjC on -Onone in some benchmarks!), which also was put in there to help optimize special cases. I could go on, but the point is that Swift has a lot of bad decisions you'll be paying for when you use it. Maybe some day in the future we'll also get incremental compilation in Swift, and not have to recompile **all** Swift files for changing a single character in one of the sources. We're currently guaranteed O(n^2) compilation time in Swift. Which is fun, because this means that at 15k LOC you look at 60+ second compile times *for any change*. It's unknown when **that** will be fixed, but I certainly haven't heard rumours that it's coming any day soon. Until then, have fun with anything but toy projects in the language.
ok
yah thanks for this. This made it all really comprehensible.
In other words "I'm incredibly lazy and want someone else to take a handful of complex topics and magically turn them into a pamphlet for me." Nothing you are asking about can be properly understood via infographic. In fact, many of the most popular and well respected "minds" in the iOS/Mac development community are outright failing to understand the concepts since they are derived from higher level languages and these guys have been stuck in the doldrums of C/Obj-C for decades. Basically, the people most likely to dive into this new tool are completely out of their depth. The people most likely to be able to explain it are focused on other things, typically far more academic than most people will find interesting. Someone who spends a lot of time fooling around in Haskell, or O'Caml, or even Clojure and Scala will provide more insights than most people in the Apple development community. But, for the sake of completion, here is the skinny: Not one single thing in Swift is new. Nothing. It's all derived. And it's a pretty nice concoction in the end. Closures are especially not new. Many languages have had them for years. They sometimes come with different names and slight variations on just how much state they enclose, but, that's not important. The fact is that they aren't new and you can find enormous amounts of info about them generally and specifically all over the web. You may choose to start with https://en.wikipedia.org/wiki/Closure_(computer_programming) Optionals are proliferative also: https://en.wikipedia.org/wiki/Option_type In fact, wikipedia is a great place for all your questions to be answered (or just read the damn Swift book, it's not nearly as long as you think and you don't have to delve into the whole thing to get these important key elements covered.) Swift on Wikipedia: https://en.wikipedia.org/wiki/Swift_(programming_language) Even with that information it's likely you will miss what's important about these changes, but, they can nearly all be summed up with one word: predictability. Optionals and everything associated with them vastly improve predictability. Their existence will further enhance a programmer's life when people stop obsessing over compatibility with Objective-C and focus on new work in Swift natively where you will be using optionals as little as possible, focusing on idioms where it's totally unnecessary (hint: it's entirely possible to write software with no concept of null or any kind of invalid address at all. Swift helps get close to that end while retaining compatibility with legacy software/libraries, partly with Optionals.) That aside, pointers are still accessible within Swift. You merely have to be very deliberate about it. Most of the symbols that will litter your code that accesses them will have the word "unsafe" in them for good reason. An enhanced type system improves predictability about what data will be accessed at any given time. Lack of nil message destinations, and hell, far fewer "messaging" concepts in the language improve predictability about what code will be executed at any given time. Closures **coupled** with the (eventual) proliferation of immutable value types will provide a far greater predictability for first class functions, or code as data. As much as possible, state of the program should be in the runtime, not arbitrary data structures. These constructs help make that possible, while falling far short of enforcing it (unfortunately, for that you can take a look at languages like Elixir/Erlang.) Predictability means fewer invisible programmer errors which means higher quality software before the software is even executed in the debugger. Tools to restrict what code can actually do are far superior to runtime testing, even if they are not quite enough to totally eliminate the need for runtime tests. Many of Swift's features and behaviors revolve around improving static analysis for this sake. As a developer, you have to go out of your way to cause a segfault/EXC_BAD_ACCESS type error in Swift, and there will be obvious syntactical elements helping to call out that you did that (presence of ! is always a code smell and should be given great thought when using it, hence the choice of an exclamation point.) As for compatibility and people doing things their own way, I have been updating an iOS app that I wrote with the first Xcode beta that supported Swift. I have had to make very few changes. Of course, Swift is a very new, very actively developed language. It is broadly advertised by Apple that changes should be expected. That is a very good thing. We want a tool to adapt quickly at the beginning where compatibility is extremely unimportant. But, if it makes you feel any better, your built iOS apps will have no problems running even after Swift is changed since each app includes the runtime libraries. Specifically regarding people doing things their own way: obviously! It's a new language with concepts that many—probably the vast majority—of the typical work-a-day hacker type writing user-facing software have never encountered before despite existing for decades. Programmers are notorious for not having any concept of the history of the tools they use. I laugh every time someone talks about Ruby like a new idea, considering it has been around almost as long as the World Wide Web. If you aren't prepared to participate in a tumultuous storm of change and uncertainty, then just stay away from any truly new language or platform. It's not for the faint of heart. Things will break. Ideas will have to be deeply considered. There will be far fewer knowledgable, authoritative sources to tell you what you really should do versus the many people who will spout the first nonsensical interpretation that comes to mind despite not actually understanding the thing at all. In other words, it's a ton of fun and there is no place here for oversimplification. The opposite is needed.
Thanks for this reply, wow! Super informative. It's pretty hard to get 9th Graders to read a Swift Manual. But in pieces they'll figure it out. The use of a condom metaphor for Protecting, Wrapping and Un/Wrapping goes a long way. My goal is to turn kids onto coding Swift, not to have them flee. They're very visual, showing them a "Class" based on something them can understand (Hey it's like a car, and well you can make more cars. And they have different colors, etc) is something they can absorb. Is it the right approach? I'm not sure. Exploring all ways at this point to get kids into creating Apps. I would love to see a Swift "Graphic Novel". Crazy idea? Maybe, but I think someone is doing that for parts of the Linux kernel actually. Thanks again for your time to reply. Fog is clearing! &gt; "Optionals are proliferative" Wow, that's kind of like a bit of Zen philosophy. Brain is processing. :-)
In your use case, is the function that you would like to be passed to your library not-yet-compiled sourcecode (it looks like this is the case for Julia's code_llvm)? If so (the "function" is Swift sourcecode), you should be able to do what others have suggested: invoke swiftc from your swift code (using an NSTask, for example) passing the sourcecode whose IR you want. If not (the "function" is some address in memory where there is compiled machine code), it's going to be more difficult. You may be able to use McSema ( http://blog.trailofbits.com/2014/08/07/mcsema-is-officially-open-source/ ), if you're on x86, anyway, to transform compiled code into IR, though of course in general it won't be the same IR as would be produced by the compiler.
No, this causes the error: let gameOver = Game(piecesDodged: self.game!.piecesDodged) There's an exclamation point after self.game, which is a forced unwrap. Your `var game: Game?` isn't initialised. 
You don't show if you initialized self.game anywhere and if you didn't then self.game! will trigger this error.
Either way you're learning from scratch. And from what I heard Swift use a completely different syntax than Obj-C so learn C first would not really help much in Swift. This is why this is so damn confusing cause y'all are saying two different things. One say to learn obj-c first and then other say Swift. 
I don't think I'll ever understand why everyone wants JSON parsing to be the most haskell thing ever. Why can't we just have a JSON data structure and a class method that takes a JSON structure and returns self? func createModel&lt;M: JSONModel&gt;(url: NSURL) -&gt; M? { json: JSON = ... return M.create(json) } protocol JSONModel { class func create(json: JSON) -&gt; Self? } The use of the Self return type is all the trick that's needed. None of this ugly, over-texted functional stuff that's really half baked when you can't support Monads or Functors. With the above, I just make my class with a required initializer, and "create" can be called on any subclass to create the proper instance.
Swift is 1.0 and we're dealing with the growing pains of a new language. I find myself agreeing with a lot of his points. Although I do like generics but I'm not crazy with how they are implemented in Swift. Xamarin using C# is looking more attractive every day.
Where do you set the value of your game property? I'm asking to because the following line looks suspicious: var scene: SKScene = Game(size: self.size) You're creating a game, but not not storing it in your game property. Shouldn't this be self.game = Game(size: self.size) or something? Also, it's kinda funny that you still have my comment from a while ago ;-)
The question is, what does your `...` code look like? It is the handling of parsing failures that causes all of the complication. I have not seen any non "over-text functional stuff" that does not require verbose if statements to handle a failure. On top of that, I believe that for me to become a better programmer, I have to explore other ways of programming, definitely including functional style programming.
Theoretically yes. The `create` method in the examples can be written to create a managed object in any way you want.
Unfortunately, as I have begun integrating this library into a few of my projects, I have run into some **significant** roadblocks. It seems there is a bug in the Swift parser causing an infinite loop in various circumstances. I believe it is caused by all of the generics, but that is just a theory. Until that is fixed, I am sad to say that this library isn't practical for any but the most basic JSON parsing.
I made this a while ago. I think it's pretty simple and much easier to work with https://gist.github.com/ElvishJerricco/290dd0fdeb99494725eb
ya, your example crashes your whole app if the parsing of "name" fails. I would like to avoid that. It isn't hard or that ugly for just one property. But how about a type with 10 properties.
Yes, exactly. There's a big difference between "the language allows this terse syntax" and "this terse syntax is good style".
I totally agree. Type inference should be used responsibly, you shouldn't trade readability for saving a few characters. In your example, the problem isn't the missing annotations though, it's the bad variable name. `var orderStatus = processOrder()` is better than just using a generic `result` variable. I also agree with /u/cheifshiggum, the IDE/compiler should be way better at providing the inferred type. When there's a compile error in with closures somewhere, it's sometimes very hard to figure out what the problem is, because the compiler is very bad at telling you what types it inferred. For example: class X { func baz() { println("woo") } } let bar: X? = X() func foo(closure: ()-&gt;()) { closure() } foo { bar?.baz() } The last line gives the compile error "Cannot convert the expression's type '() -&gt; () -&gt; $T1' to type '()'". That's just so annoying. That compile error isn't exactly helpful, and it's one of the simpler errors of this type that I encountered. The best way to find the problem is, it seems, to add types explicitly and figure out what's going on.
Had the same reaction when var was Introduced in C# - but it actually allows you to stop focusing on types and concentrate on good variable names and method names instead. A good IDE helps too, just mouse over a variable to find the type, or use autocomplete to find what methods are available.
Simple fix for your Scenario 2 is var orderStatusResult = ProcessOrder() It's terse and tells me everything I need to know visually. I'd depend on the IDE for refactoring and being able to tell me everywhere OrderStatusResult is used.
don't get me started on IDE's :-) Visual Studio, how I love thee, let me count the ways! I can't believe how awful XCode is in user experience. I know that VS has 20+ years experience but at the same time I don't understand why the XCode team didn't adopt some of the great ideas from VS since it has that 20 years behind it. Even AppCode is magnitudes better than XCode. Can't wait till they implement Swift support.
I agree with you in scenarios where I'm initially writing the code but again in a team environment where this is pre-existing code that you're having to support - the original coder may not have been as diligent in using good variable names.
What are these great ideas?
Personally I don't find that I need to see that much type information locally. But I do prefer to have type information visible for member variables and function signatures. When getting an overview of code I think it is easier to understand how all the pieces fit together when you see the type of member variables and what goes in and out of functions. It is one of the things I find problematic when reading ruby or python code. It also drives me crazy not seeing what type of objects goes into Array and Dictionary member variables in Objective-C.
I'm with you, ultimately we need Chris &amp; the gang to implement something akin to JSON.Net within Swift - but who knows when that will happen using Newtonsoft.Json; public class Person { public string Name { get; set; } public DateTime Birthday { get; set; } } void PersonToJsonToPersonExample () { var person = new Person { Name = "Bob", Birthday = new DateTime (1987, 2, 2) }; var json = JsonConvert.SerializeObject (person); Console.WriteLine ("JSON representation of person: {0}", json); var person2 = JsonConvert.DeserializeObject&lt;Person&gt; (json); Console.WriteLine ("{0} - {1}", person2.Name, person2.Birthday); }
You should be able to write code in any way you like. But, it's nice to be able to read code in a text editor or web page. Autocompletion is writing code. Mouse over is reading code. One of those you do once, the other you (or someone else) might do hundreds of times. The overly verbose alloc/init didn't help with writing or reading. Type inference helps with writing, not as much with reading.
off the top of my head --fuzzy searching within auto-complete i.e. typing "section" would bring up every method/property with section in its declaration --automatic generation of outlets when a control is dropped onto a storyboard -- is a horizontal scrollbar in the storyboard preview window too much to ask for? --double-click a control to generate action handler --smart tags on controls within storyboards that allow quick access to the most used properties for that control -- a toolbox panel that allows you to see the majority of the controls at a single glance -- an errors panel that allows me to immediately see an error description at a glance instead of having to carefully maneuver the mouse within the gutter as XCode requires -- a cleanup of the entire interface that utilizes tab panels so that panels aren't continuously tiled next to each other the way XCode does I could go on for days...
I treat it, rightly or wrongly, as another format of commenting. Most variable declarations don't need a comment if they are well named but sometimes they do. Likewise, sometimes it makes sense to make the variable type obvious to a reader. Whatever works best while keeping the code simple. 
Wow, I'm totally wrong about the 1.0 thing, I could swear Lattner tweeted about Swift being due for 1.0 in October. I completely disagree with his opinion on starting over with a new language, rather than bolting even more on to ObjC. Look at C++, that's what happens when you maintain backward compat while bolting on new features and ideas. I would much rather the Swift team push the envelop and break shit every so often than play a conservative backward compat game. If you are expecting to use swift for large important projects right now, you need to re-evaluate your understanding of the software industry. The language is new, don't be so impatient. ObjC is *fine* for a few more years, and nicer to work in than the vast majority of the other non-interpreted languages I've dealt with.
In fact, Xcode supports this as an IDE feature: just option click the variable name, and it will show you the inferred type. -Chris
I have a feeling shooky1 is wanting to see this information at a glance for all variables rather than having to alt click each one and remember which each is. I'm thinking more like something that could be displayed inline with the code, with the option to toggle it on/off obviously.
How lovely for him. I want to option click. I say we should fight to the death, but in jest - All that time he spent typing out type names - I spent at the gym training to become invisible in hand to hand combat. 
You need the 6.1 beta if you want to build Swift apps for OSX. This is due to the 6.0.x series being allowed to submit Swift apps to the iOS store. 
Interesting. Thanks.
My biggst beef with auto complete is that it still shows invalid choices in the list rather than removing them completely. Also the fact that the three finger inference randomly breaks for some variables. 
Are you saying you want a text box the size of the screen? drag a text field onto your story board and then re size the text field to the size you desire.
Some nice examples. A shorter version for reversing strings: let input = "abc" let reversed = String(seq: reverse(input)) 
I kinda think you don't understand that there can be multiple instances of a class ("objects"). Ie. you can have two objects of the same class. If you create a new instance of a class, it is not identical to some other instance of the same class. You need to work with the same instance of your Game class everywhere, it doesn't help you at all to create new Game instance at a random point (i.e. this line: `var game: Game? = Game()`). It's not the same as your 'actual' game.
well done apple.... we like your this step 
Also, my take on finding the state with most vowels (uses a few helper functions that are helpful in general though): // Helpers // Returns the first element of a sequence func first&lt;S: SequenceType, E where E == S.Generator.Element&gt;(sequence: S) -&gt; E? { for element in sequence { return element } return nil } // Takes a key extractor that maps an element to a comparable value, and returns a function that compares to objects of type T via the extracted key. func comparing&lt;T, U: Comparable&gt;(keyExtractor: (T) -&gt; U) -&gt; ((T, T) -&gt; Bool) { return { a, b in keyExtractor(a) &gt; keyExtractor(b) } } func maximum&lt;T&gt;(a: T, b: T, comparator: (T, T) -&gt; Bool) -&gt; T { return comparator(a, b) ? a : b } func maximum&lt;T, S: SequenceType where S.Generator.Element == T&gt;(sequence: S, comparator: (T, T) -&gt; Bool) -&gt; T? { if let first = first(sequence) { return reduce(sequence, first, { (a, b) -&gt; T in return maximum(a, b, comparator) }) } return nil } // Actual code let vowels: [Character: ()] = ["a": (), "e": (), "i": (), "o": (), "u": ()] func isVowel(character: Character) -&gt; Bool { return vowels[character] != nil } func numberOfVowels(string: String) -&gt; Int { return filter(string, isVowel).count } let theStateWithMostVowles = maximum(states, comparing(numberOfVowels))! Unfortunately, Swift has no set class, which would be perfect for the vowels variable, so I abuse a dictionary. Ps. I recommend the comparing function. It's so readable. I stole that idea from Java 8.
And finally, my take on the maximum consecutive consonants (using some functions from my other comment): func maxConsecutiveConsonants(string: String) -&gt; Int { let stringWithVowelsReplaced = String(seq: map(string, { isVowel($0) ? "_" : $0 })) return maxElement(stringWithConsonantsReplaced.componentsSeparatedByString("_").map({ countElements($0) })) } let theStateWithMostConsecutiveConsonants = maximum(states, comparing(maxConsecutiveConsonants)) Not the most efficient solution, but short and readable-ish. (The idea of maxConsecutiveConsonants is to replace all vowels by "\_", then split the resulting string into substrings with the separator "\_", and finding the longest substring).
How do you initialize your cells? If you are using Interface Builder you need register nib for cell and then deque them or create them by yourself but directly from nib. You can find more here http://mrmaksimize.com/ios/Custom-UITableViewCell-With-NIB/ It is for Objective-C but it should be working in Swift too.
I'm a huge fan of the raywenderlich tutorials http://www.raywenderlich.com/search/uitableviewcell They also have a few books covering swift. I'd try some of those. 
Maybe I was thinking too hard about it lol... 
Use a TextView
1) fuzzy search you can get as a plugin. 2) I don't see why I would want this. I want to give my own names to outlets and I don't want an outlet for every UI object I make. 3) Not like a "great idea", more like an simple omission by Apple which could very easily be fixed. 4) I know this from VB back in the day but I prefer the xCode way. This is about preferences. VB is about quick and dirty. I like it conceptually better than with xCode you can think in terms of a control object that you design and then later connect GUI to it. Remember You can connect multiple controls, xibs and storyboard objects to the same IBAction. You can also connect to any object. With double click there could only be one target. It is a simpler but much less flexible way of doing it. 5) That sounds usefull, do you have any link to explain better how this works? 6) You already have an error panel. You must have misised it. You don't have to scroll around in the code for the errors. 7) Don't get your point. What problem does xCode cause in its layout and how does VS solve this problem? Last time I used VS I found it to have powerful features but that it generally had a very messy user interface. I think xCode is more streamlines but that it is lacking some polish from being a redesign rather than using the standard IDE formula that has been used since the days of Borland. In sum I'd say you mention a few points VS is better, but a lot of your other issues is either that you didn't know about a feature in xCode you have another preference, which might be due to not knowing flexibility in the xCode way of doing things. Frankly I think 60-70% of people's issues with xCode is that they aren't very experienced with it but have used traditional IDE's for years and get upset because xCode doesn't work that way.
Yeah it really feels like a 1.0 version. There is a lot of stuff that lacks polish. Error message are also frequently not very clear. To be fair though I think they have accomplished amazing things with Swift, so I assume we can't get it all perfect right away. It is still in general better than Objective-C. Hopefull by next year we will have a really solid product. I think Swift offers enough advantages so I am writing my code in swift rather than Objective-C at the moment although it means dealing with more strange errors. Compiler that occasionally fails without giving line number. You have to experiment by removing lines at times.
Defining a new operator that isn't obvious to anybody reading, simply so you can write: pickerView --&gt; myDelegate …instead of: pickerView.delegate = myDelegate pickerView.dataSource = myDelegate …is a perfect example of what people complain about when they say people are too eager to use custom operators when all it does is obscure meaning. To answer the question: &gt; How would you read this? &gt; pickerView --&gt; myDelegate I wouldn't know what it meant. So immediately, use of this custom operator should be reserved for where it has *drastic* advantages over the alternative to outweigh the destruction of readability. That's not the case here. &gt; Wouldn't it be nice to have two delegates/data sources. One for each view, that is still somehow part of your view controller? Also, wouldn't it be nice to easily move this logic to a different view controller, if necessary? &gt; I didn't find an elegant way to solve this in Storyboard. Drag two generic objects into the scene, set their classes, then hook them up as the delegates/data sources. If you need to provide static configuration values, use the user defined runtime attributes. If you need to provide dynamic configuration values, hook them up as outlets. 
You can easily make it types safe if you implement the function for concrete subclasses of UIView 
Fixed the typo in the operator definition. Thanks for pointing it out
Thanks!
There are 63 (!!) NSObject methods?! Swift should hide those methods if they dont apply, since so many wouldn't.
Its finally giving me errors now inside of the framework files. I think I'm just going to install Xcode 6, and stop using Xcode 6.1 for now.
Performance varies wildly for now. If the optimizer understands it, you can do much better than ObjC. If you hit something that's not optimized yet, it can be way slower. As an example there's a post on Apple's swift forum now where someone's mandelbrot set code went from taking 2 minutes to taking 0.4s just by adding 'final' to an array to work around a known issue in the optimizer (this particular issue was fixed in 6.1b3!). "Scripting language" is an essentially meaningless term at this point, but for any definition I've heard *except* for "supports #! so you can write shell scripts in it", Swift ain't a scripting language. 
If I hook up delegates in storyboard that way, I guess my view controller doesn't have a way to init them? (I would have to call a method on viewDidLoad?) Also, how is the life cycle of these objects?
Why is swift dependent on Yosemite?
My answer is telling you how to use your bg image Step one, turn it into a color Step Two, pass that color into the scene kit functions
To answer your first question. Swift 1.0 is not ready unless you are really adopter and you don't mind to see SourceKitService crashing very often and seeing vague error messages and sometimes not be able to compile code for unknown reasons. Some issues are already fixed in Xcode 6.1 Beta 2 and more will follow. So firstly it is still very unstable and I don't think it will be stable enough with Swift 1.1 that will be introduced with Yosemite. So unless you don't mind bugs wait for Swift that will come after Swift 1.1. Secondly it is still missing a lot of fundemental features that I would expect to be in modern language and if you need to create something more complex very soon you will meet these limitations and because of Swift being statically typed language you cannot bypass them. But it has huge potential to be great language but for now it feels like Swift 0.2. Another problem is debugging but is different story. To answer your second question I don't have enough information but I don't care much about performance because I am not writing performance dependent applications and if I need something fast I fallback to C. It won't replace Objective-C anytime soon. Hard to tell what Apple will do but in the future they might introduce APIs that are available only from Swift because some features are unique to Swift and are not compatible with Objective-C. And to answer your last question, no, it is not scripting language. It is object-oriented language with a few aspects of functional programming. It is very similar to C# but it is also possible to use it for scripting. But it is side effect. 
Sometimes Xcode doesn't show errors in subprojects (or even building when building dependent targets in the same project). You need to go to the build log to track them down. And sometimes it does. And those "stop signs with no text by them" in the error navigator? Those are usually link errors.
its all good man, happens to all of us. Good luck!
Yeah, you mentioned some of disadvantages (some of them later on?). I still thought it's a good idea to summarise why I think using an operator here is a bad idea. The idea to have a separate class that is responsible for a picker (via delegate/datasource) is a good idea of course, but that doesn't require a custom operator.
Love the design!
I would suggest using the 'Time Profile' tool in Instruments to examine your app while it's in this state.
Congrats! I'm gonna agree with ghobs91, the design is brilliant!
Why not do: func rollDice(numberOfDicePerRoll dice: Int = 1, withNumberOfFaces faces: Int = 6) -&gt; [Int] { return arc4random_uniform(dice * faces) + 1 }
Very nice! Did you hire a designer for it? How did you make those screenshots? Also, did you, or plan to, integrate HealthKit eventually?
You are right. It doesn't require it at all. I was thinking more in terms of using operators as visual clues and how they could be useful in composing UIs. With most of the composition being handled in Storyboard nowadays, there isn't a lot of plumbing going on in real code. However, not everyone uses Storyboard for everything. Thanks again for your feedback.
Because the sum of the dice when rolling more than one not have uniform distribution. Your results are wrong, because they have uniform distribution. Also, it's just wrong. If I call your function with 5 dice and 6 faces, it may return 1. It is not possible to roll a 1 with 5 dices. But lets say your dices are 0 index base (as mine are), so the values on the faces are 0,1,...5, and we remove the +1, and replace faces with (faces-1). Now the range of results should be correct. But the function is still incorrect because the distribution is wrong. A simple example: 2 dice, that have faces 0 and 1 on them (aka a coin, but the idea is the same). The probabilities are: result = 0 in 1 of 4 times, 1 in 2 of 4 times, 2 in 1 of 4 times. Ie. the result of 2 is more likely than the others. With your function, each outcome would have the probability of 1/3, which is incorrect. Eg. look at this charts: the probabilities for each result are not the same: http://wizardofodds.com/gambling/dice/2/
Got any tips to share for those of us just starting out in app development? Any lessons learned? (Also your app looks great)
If `physicsBody` is a boolean, something's seriously wrong. I'm pretty sure you need to set the physicsBody property to something though.
Nice work. Interesting idea.
Hmm, I had thought about it, but I wasn't sure. Thank you though, I appreciate it.
Do you mean *optional*? `physicsBody` isn't a boolean, that makes no sense and it wouldn't even compile if that were the case. `physicsBody` defaults to `nil`, which means that the node isn't processed by the physics engine at all. You need to assign to it before your node interacts with the physics engine. 
I have gotten a bit bored of this guy considering I have pointed him towards the sprite kit development guide and multiple tutorials to go over.
"Beer Styles is a native app built for iOS 8 (which is a requirement) with Swift." It should work on iOS 7 unless something changed very recently.
That is my only issue. I've seen countless people help him and he comes back with some questions on a new account. I am all for helping developers, but at some point if you cannot ever help yourself you won't make it far in development
Working on getting our RSS feed up again today! Will post later.
Let us know how we can improve this tutorial and all future tutorials. We want to ensure we handle all relevant questions for people and that our tutorials are easy to understand. Any thing we can do to improve them will be greatly appreciated.
The iPhone compatible UISplitViewController (and UITraitCollections) don't work in iOS 7.
Thanks
Congrats!
&gt; I have ball.physicsBody = SKPhysicsBody(circleOfRadius: ball.size.height/2.0) on the next line. You mean the line after `ball.physicsBody?.restitution = (0.8)`? Then the problem is that you have the two lines in the wrong order. When you assign to the `restitution` property of `ball.physicsBody?`, `ball.physicsBody` is `nil`, so nothing is being set. If you put that line after you assign something to `ball.physicsBody`, then you're setting a property on that object. 
Thanks! No, I did all of it on my own. I used a Photoshop template I found on Dribbble for the white iPhone and then just added my own screenshots inside of it and added the green background with text. I'm hoping to eventually integrate HealthKit with it, but I'm unsure of whether I can immunizations to the Health App.
I really really enjoy programming using Swift. I could never could get a handle on Objective-C and would program more with Ruby and Javascript. Swift was extremely approachable and pretty easy to get a hand on. If you have any specific questions, feel free to ask.
I don't know if I would recommend Swift as a first language to learn, just because it comes with the baggage of UIKit to get any real work done, but it may work for some people. I started off with web languages and Swift was familiar enough to really be able to jump right into and I am a pretty novice programmer. One big tip I would say is too not get discouraged when you don't know how to do something. A lot of times I would Google for something similar to what I wanted to do and then tailor the online "tutorial" to my own specific problem. If you have specific questions, feel free to ask. 
Thanks, I definitely feel like the hardest part of the process is the design. This is probably because I didn't really mock up the design ahead of time, but I find when I'm programming, it is easier to find solutions to programming problems than it is to find solutions to design problems.
That worked. Thanks!
UISplitViewController works on iOS 7 and compatibility with UITraitCollections can be made using different techniques.
Yes, UISplitViewController works on iOS 7, but not on iOS 7 iPhones. Since it's a free app with no ads or other revenue sources, I have little enthusiasm for writing extra code for backwards compatibility (especially with the iOS 8 adoption rates being what they are).
Thanks. I've done a bit of Python and some Java so I'm familiar with OOP and the general concepts but actually making something people will actually use seems like such a huge step. I've started watching some online tutorials on swift, UIKit and SpriteKit but it's all just a bit overwhelming. It's something I would love to do but I think it's going to take quite some months until I know my way around all of Apple's libraries and stuff. I've got to say though, the online community makes solving problems really easy and sites like StackOverflow are just invaluable. I don't know how coders managed before web!
Don't underestimate yourself and don't overestimate the difficulty of UIKit. UIKit can seem daunting, but there are a lot of great resources and what you become more familiar with it, you'll pick up different aspects of it easier. 
I assume he means the following: When you open your project, select the project, go to build settings, there's a base sdk setting. Also, you can select the deployment target in the Info page.
Looks good, I'd only criticise the note about the forced unwrapped optional parameter: it's only useful for compatibility reasons and should never be used like that. If it can be nil, pass an optional (with a question mark). A parameter that is a forced unwrapped optional basically says "the type system cannot know that this isn't nil, but I know it's not nil, so I can force the unwrap". I can't think of a scenario where this happens. Most importantly, the "can be nil" note is wrong-ish - while it can be nil technically, you should be very sure it isn't actually nil.
Ah, that's just poorly phrased on my part. I didn't mean to imply that iOS 8 is required for Swift, just that iOS 8 is required for the app.
I updated the phrasing in the blog post. It'll take up to 10 minutes to propagate through the CDN, but it should be a lot more clear now.
Just being nit picky, is there a reason that the status bar sometimes has light content and sometimes dark content on the same color navigation bar? (at least in the screenshots). Was that deliberate?
It was an oversight when uploading the screenshots to the App Store. The actual app has a white status bar across the entire app.
Debug your app in Xcode and when it freezes, hit the "Pause" button and look at the call stack for each thread to see where it is.
Do you think it would be better to do what ieee1394 recommended? &gt; func rollDice() -&gt; UInt32 { &gt; return arc4random_uniform(6) + arc4random_uniform(6) + arc4random_uniform(6) + 3 &gt; } &gt; &gt; let Die1 = rollDice()
Ty for clearing that up... though Apple had changed something while my back was turned lol.
You're right about the getter, but still now I'm stuck on the returning an array issue. I don't know what the method signature for that is supposed to look like, so if you could post a method signature that returns an array I would really appreciate it thanks.
That was it! For some reason no errors were showing and the project was still building.
Well this is legal. let x = obj.someMethod If someMethod is declared like this: func someMethod() -&gt; Bool { ... } then they type of x is ()-&gt;Bool. Basically x becomes a reference to the method itself. Calling x() would be the same as calling obj.someMethod(). As a side note, obj.someMethod() is also equivalent to calling ClassOfObj.someMethod(obj)() because SomeClass.someInstanceMethod is a function that takes an instance of the class and returns the instance method for that object.
Thank you for taking the extra time to post this comment. It looks like I have A LOT of swift reading to do. I had no idea that you could store a reference to a method inside of a variable. That's really cool and extremely powerful.
I put `swift NSError` into Google and the very first hit was to Apple's document *Using Swift with Cocoa and Objective-C*, where it gave an example of doing just this. The next three hits all gave examples as well. Before asking for help, please make sure you have read the relevant documentation and searched the web. This stuff is *very* easy to find. Go to the developer centre and start reading.
You can google programming Qs, but you can't design :)
100% agree with everything you say, especially errors and debugging being a major pain. Added to that the type system often feels kind of pointless, as a lot of UIKit, uses stuff like AnyObject? in places where it shouldn't need to. The ideas of the language feel right in most places, but the execution just isn't up to par right now
Yeah, AnyObject when using UIKit, AppKit and other frameworks is also a bit annoying. It would be cool if Apple introduced a toolkit that is designed for Swift and works on iOS and Mac OS X that would replace UIKit and AppKit but I guess it is dream but with high possbility. They would get rid of old Cocoa and created something modern that works on both of platforms.
You can separate your code into multiple projects, however, in ObjC-world, you usually only put code into it's own framework when you actually plan to reuse it. If it's just separation of concerns you're after, usually, no separate frameworks are created - it's not really worth the hassle. The code I've seen so far is usually grouped by functionality, i.e. a controller and the views it uses in a folder (also model specific classes I guess), not so much by Model/View/Controller (even though I can see why one would like to do that). About storing data: If you plan to get your questions from a web server later, you could store them in a JSon file locally and read that. That would make the switch to getting questions from a server later on very simple. Alternatively, you could look into CoreData. About the start screen/settings screen: These things are very easy to do with storyboards. Just create your controllers there, and add segues between them. I don't really know how to do music playback properly (you probably don't want to play it if the user is already listening to music, or start playing it when the user pauses his own music). In general though, look into AVFoundation, it offers plenty of media playback related classes.
That works, yeah. It's probably the simples solution. My proposal also works, but it might be overly complicated if you really only ever need 3 dice rolls.
Actually, the string you use is just how it's referenced in the JSON. It can be completely different than what the property name is in the model. They just happen to be the same in the example.
The next blog post covers this topic: http://robots.thoughtbot.com/parsing-embedded-json-and-arrays-in-swift
My reason for down-voting, and my guess is that the reason for others as well, is that your headline is meaningless. Headlines for posts should say what you're linking to, not what your opinion about what you're linking to is. That said, what you linked to is basically what anyone here already knows. So maybe it is being down-voted for pointlessness instead. Couldn't say for sure.
I'm new to the iOS world but tons of .net experience so keep that in mind with this advice :-) I asked a [similar question](http://redd.it/2hdez6) just a few days ago. If I'm wrong on this point then someone please correct me, but to date you cannot create a Swift framework (i.e. DLL/Library) and re-use it across apps. Simply because the Swift compiler is still in development and will be changing often over the next year and they cannot guarantee that a framework you create today will run against future compilers. Also just an fyi, you can look into Realm for client side storage also - just google realm and ios - it'll pop right up in the results. I've found their API very well laid out. Parse is a good cheap server-side solution also especially if you ever consider providing an android solution.
A related question: what the oldest Mac OS on which I can install the Swift programming language?
To kind of bridge off of the suggestions here, have you looked into the SpriteKit framework? While I see no particular pitfall in just using UIKit to made this app, SpriteKit does have some (albeit buggy at this point, but the Xcode 6.1 beta gives me hope) ways of storing content to be used in the form of scenes. From the WWDC talks, this is Apple's way forward in terms of reusing scenes/assets.
Thanks for the reply - I went back and read through ( yet again ) and understand it better now! Plus I've had an extra week of playing with Swift in my spare time - makes it a bit difficult to go back to Objective-C during the day. The functional approach is neat, but can you help me understand why it would be a better approach for a task like this versus the sample I posted above? Or is this mainly to serve as an example of *how* to approach the problem in a functional way? 
 items.enumerateObjectsUsingBlock({ (UIDynamicItem myObject, index, stop) -&gt; Void in //Do stuff while enumerating }) No need for the &lt;&gt;. It's just used like a regular type in swift. EDIT: Unless the method is expecting a block whose first parameter is id. In which case you'll have to do this. items.enumerateObjectsUsingBlock({ (AnyObject myObject, index, stop) -&gt; Void in UIDynamicItem dynamicItem = myObject as! UIDynamicItem //Do stuff while enumerating })
I am unable to select Swift as the program language in Xcode 6. I am trying to do this for an OS X app. I can select Swift as the language in iOS but not for OS X for some reason. Thanks!
Thanks for such a fast reply. When I try your first solution it gives me the following error: Type AnyObject! does not conform to protocol 'UIDynamicItem' Here's my code just in case: items.enumerateObjectsUsingBlock({ (UIDynamicItem myObject, index, stop) -&gt; Void in //Do stuff while enumerating var behaviour = UIAttachmentBehavior(item: myObject, attachedToAnchor: myObject.center) }) If I try your second solution, I get the following errors: 1. Consecutive statements on a line must be followed by ';' 2. Expected type after 'as' 3. Type AnyObject! does not conform to protocol 'UIDynamicItem'
My bad I had the syntax for unsafe casting wrong. items.enumerateObjectsUsingBlock({ (AnyObject myObject, index, stop) -&gt; Void in UIDynamicItem dynamicItem = myObject as UIDynamicItem //Do stuff while enumerating }) No exclamation mark needed
You should submit this on http://stackoverflow.com
Haha, I actually started typing it out there, but then decided that I've been getting better answers on this sub.
There isn't a "half true" here. Either one is speaking of Swift sans Foundation, or with. Without == !KVO, with == KVO. In the Stack Overflow post I referred to, KVO's absence was asserted in a manner that was 100% untrue. If observation wasn't a kosher design pattern, then Chris Lattner and others wouldn't have implemented willSet, didSet and Observable. Looking at the docs for Swift, you can see that willSet and didSet are based on part of KVO. That puts the kibosh on the thought one should not "rely on it", but even without that knowledge, it's a mistake to assert that Swift development targeting the AppStore can be done well external to Foundation *at this point in time*. Structs are neither here nor there for this discussion. Structs in Obj-C don't have dynamic dispatch either. It's like saying a discussion of UIKit is invalid because command-line apps can't use it. Statements like "Swift isn't allowed to use objc-runtime" are going to be misleading to some developers. You can use the ObjC Runtime in Swift. You just can't use it on objects that don't inherit from objects written in Objective-C. Yes, NSKeyValueObserving is in ObjC. None of the NextStep APIs were written in Swift unless they were transmogrified and shipped from the future. Before you assert what design patterns the  overlords are dictating, one must consider the dog food that folks inside Apple are eating. I've talked to some devs in Apple. Many internal apps do not use Swift... some don't even use ARC! Swift is a key addition that will evolve over time to incorporate safer and more efficient ways of writing programs with a UI. One day, the APIs from Apple will have a more functional flavor. Today, KVO and many other aging patterns peppered throughout Foundation &amp; UIKit are still very much part of the game. 
for some I was having trouble posting part 1 so here it is: http://swiftapprentice.com/build-a-swift-app-quiz-app-part-1/
Did you add the constraints for all size classes? That's the only reason i can think of, the constraints themselves look fine to me.
Your variable declarations seem wrong. It's `myObject: AnyObject` and `let dynamicItem: UIDynamicItem = ...`. Other than that, is there a good reason to use enumerateObjectsUsingBlock in your case? Why not just this? for item in items { let dynamicItem = item as UIDynamicItem ... } Also, if you can, use Swift arrays, those have "proper" types. 
Protocols, as long as they don't have associated types, can be used directly as a type name. Eg. let something: Protocol = ... In general in swift, it's always name of the parameter/variable first, then a colon, then the type. `&lt;UIDynamicItem&gt; myObject` isn't only wrong because of the brackets, but the order is wrong, too. It has to be `myObject: UIDynamicItem`. Only that Swift doesn't let you just put any type in that closure, myObject has to match the type of the array's elements. So if the items array is a NSArray, it's element's types are AnyObject. But because that's the only type that's possible anyway, you don't have to write it yourself. So then you have items.enumerateObjectsUsingBlock { myObject, index, stop in //Do stuff while enumerating } Then you just cast myObject to the type you want, using `as`, like /u/ElvishJerricco described. But then, why not just use a normal loop? for item in items { // Cast item if necessary, do stuff } 
Nevermind, I was still passing myObject instead of dynamicItem. This solution works, but only when you fix the variable declaration like jasamer describes below. Thanks for the help!
Yea sorry I was sleepy when I wrote that. items.enumerateObjectsUsingBlock { (myObject, index, stop) -&gt; () in dynamicItem: UIDynamicItem = myObject as UIDynamicItem //Do stuff while enumerating } That should work. Although /u/jasamer has [a comment](http://www.reddit.com/r/swift/comments/2ht2m7/swift_equivalent_of_objectivecs_idprotocol/ckvvms5) that suggest a better way that doesn't need the closure.
Thank you for such a detailed explanation I really appreciate it. I see now why it makes more sense to just use the normal loop.
No problem and thanks again for all of the help.
What is "large"? Don't think 15k LOC is especially big. 100k+ is large. Anything below 5000 lines is trivial. This is just a simple game client. You mean to say it shouldn't work for that? Should we all sit down and submit fart apps written in Swift for a few years? Because that's about the size Swift is suitable for right now.
I look forward to see this downvoted as usual by people who has written less than 1000 lines of code of Swift, on the grounds that the author "clearly doesn't understand anything about Swift".
Maybe ditch the pre-emptive and defeatist attitude. If you speak with respect and in a tone of open inquiry you may have more success in opening a discussion with others. According to the [Reddiquette](http://www.reddit.com/wiki/reddiquette) guide, you're not supposed to complain about the votes you do or do not receive.
I've written a simple game client and a keyboard extension in swift, while not being perfect, they have worked out fine. But it'll be years before we try and rewrite Capo in swift.
There are a few good points in this; it's definitely worth the read for someone deciding whether to do a "bigger" project in swift. I can confirm the bad compile times, wonky performance characteristics (and gigantic differences depending on the optimisation settings), buggy generics, etc. I would add the missing refactoring support as a major annoyance. I don't think that going for a new language was necessarily a bad idea though. It's a bold step, and quite a risky one. But I think there's quite a bit of value in just getting rid of all the old stuff, instead of slapping on some new features on top of ObjC. It's actually quite an "Apple" thing to do (going for the big steps from time to time, instead of only iterating). The major issue was that Apple rushed the 1.0 release, imho. People expect more from a final version. Doing a new programming language is hard, it takes time. In my opinion, it would have made more sense if Apple had just left Swift in the beta state for longer, until it's actually solid. It doesn't raise peoples expectations, and not as many will complain (as it is, the complaints are (mostly) completely justified). On the other hand, I guess it's hard to decide when something is ready for a 1.0 version (if you strive for perfection it'll take forever to release). Apple just decided that it was the right time. Or maybe they backed themselves into a corner with announcing Swift for iOS 8 at the WWDC, and didn't want to back out. Dunno.
Tried to answer on stackoverflow, let me know if it doesn't work
Exactly. There are tons more reasons to down-vote. The OP can use their preconceived notions to avoid thinking about what the real reasons might be. That let's them believe that they are still right.
I am not sure what you are talking about in regards to C++, no source compile of one translation unit ever triggers another one unless there is an explicit dependency. The fact that swift compiles everything every time has nothing to do with C++ like, or strong typed languages. It's because they haven't bothered with type dependency optimization yet. Swift doesn't have headers, so it doesn't know if you have changed the signature of a symbol in another translation unit. It's not hard problem, it just takes time, and they are busy with other things that aren't a compile time optimization. At Borland in the 90s we were working on incremental linking and everyone thought it would be a super complex thing that would never work right. It ended up working fine, just took some time to get right. 
See cybdestroyer's comment.........
Using WKWebView and a bit of javascript inserted into the page is likely your best bet. See http://nshipster.com/wkwebkit/
Probably would help if you went over some Object-Oriented Programming fundamentals. I had the same problem as well. You need to be willing to google every single thing and slowly piece all of the bits together. Eventually it will all come together for you. Good luck.
Thanks for the advice. I actually just recently began doing that and it has helped a lot. I think as I read up more, watch more tutorials, and start writing things on my own (even if I don't fully grasp what I'm doing), it'll start to come together.
I have yet to come across an HTML or XML parser written in Swift. If this was my app, I'd probably end up writing my own based on some of the existing Objective-C implementations.
&gt; The major issue was that Apple rushed the 1.0 release, imho. People expect more from a final version. &gt; Doing a new programming language is hard, it takes time. In my opinion, it would have made more sense if Apple had just left Swift in the beta state for longer, until it's actually solid. It doesn't raise peoples expectations, and not as many will complain (as it is, the complaints are (mostly) completely justified). I feel a bit stupid writing "This" reply, but - this. Apple dropped the ball by rushing Swift release. 
Actually I don't think Apple dropped the ball by releasing Swift this early. The average developer will still use Obj-C the next few years. But early adopters will starts using Swift, despite the shortcomings, and provide very valuable feedback to Apple.
Check out the Swift tutorial at http://www.raywenderlich.com/ Is good reading for how to work with Table views. If you want a custom cell layout, you need to create a cell view in Interface builder (drag&amp;drop a TableCellView into your table view), create a new class that inherits from UITableCellView (MyCellView), set it as the class name in the table cell view, then add whatever labels or other cell component you want using Interface Builder. Next, open your new table cell view class in Assistant Editor and control+drag a label into the assistant editor to create an Outlet. Also set a ReuseIdentifier in interface builder for the cell. (MyCell or something). Last step is implementing func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell! { var cell:UITableViewCell = self.tableView.dequeueReusableCellWithIdentifier("MyCell") as MyCellView cell.textLabel.text = self.infoArray[indexPath.row].age .... return cell } This will create a cell view instance on demand which you can then connect to your data model 
As a Java developer coming to the iOS platform, all I can say so far is that Swift is a wonderful thing. There are significant differences to Java (don't get fooled by inner classes), but it just feels nice and clean, has familiar syntax, closures and a whole bunch of neat additions that Java doesn't have (custom operators, subscripts, extensions, direct support for optionals etc). I tried to like Obj-C many years back, but couldn't. With Swift, iOS is almost a sane development environment. 
`standardUserDefaults()` gives you a `NSUserDefaults` instance that accesses the "standard user defaults". There's only one set of standard user defaults, so those are accessed. Your code works. You can also think of NSUserDefaults as a singleton (it's not quite true, but close enough), and `NSUserDefaults.standardUserDefaults()` always gives you the one shared instance used everywhere. To explicitly answer your question: you can use `NSUserDefaults.standardUserDefaults()` to set and read defaults anywhere. It's purpose is that you don't have to pass some settings object around everywhere.
I just did a random google search, oracle seems to do an ok job at explaining the basics of object oriented programming: http://docs.oracle.com/javase/tutorial/java/concepts It's java, but for those kinds of concepts I don't think it matters too much. Should give you an overview about objects, classes, methods, instances, and protocols (those are called interfaces in most other programming languages, including java). Functions are very similar to methods, sometimes even used interchangably. A function looks like a method, but isn't declared in a class and doesn't act on one single instance of a class, but on some parameters. Enumeration just means going through a sequence/list/array of something, eg. a for loop. Properties are just that: properties of some instance. Like the text a label displays, age of a person, etc.
I usually create a storage class like XXsettings or XXstorage, make it a singleton and use NSUserDefaults in that class. I override the property's getter and setter to store/retrieve from NSUserDefaults. Hope this makes sense.
I had a very similar experience. Once our project got large enough changing one line of code would require a 1 minute compile, and the auto correction and code highlighting wasn't working well at all. We switched back to Objective-C before the 1.0 release, so I'm curious how much things would have improved if we would have waited. I'm excited about swift and think it's a move in the right direction. Apple's tools for Objective-C has been getting polished for years, so it's understandable that things are still not quite there yet for swift. Eventually swift will get to that same level of polish!
Hey thanks for the reply. This sounds like a very smart idea, although I am a little confused as to how I change the setter and getter method to store/retrieve from NSUserDefaults. Would you care to elaborate? (I'm new iOS dev)
I'm one of those early adopters. When they released Swift, while other devs cheered, I groaned. I was just getting good at Objective-C and I had to learn a whole new language. But then we started a medium sized project at work and they encouraged me to do it in Swift. I have certainly changed my initial attitude on Swift. I've bought a few books, been watching video tutorials and stuff, basically going all in learning Swift. But I feel the pain of using a language that's not entirely polished. It's like swimming upstream. 
I agree with you only thing I am worried how fast Apple will iterate with Swift. If Apple releases Swift 1.1 with Xcode 6.1 and Yosemite and we will have to wait for next version until WWDC next year then I will be pissed but if every month there is release with bugfixes and improvements then I don't mind.
Should of mentioned this was a Podcast. Sorry about that!
&gt; think as I read up more, watch more tutorials, and start writing things on my own (even if I don't fully grasp what I'm doing), it'll start to come together. Yep, exactly. It just takes some time to get the fundamentals down.
Congratulations! How long did the approval process take?
Congratulations! How long did the app store approval process take?
Put simply, delegation is a design pattern. Protocols are a language construct that are useful for implementing a delegate. By definition, delegate means to move responsibility of a task to something else. For instance, UITableView uses a data source delegate, as well as a general purpose delegate.
There's almost certainly going to be at least one update early next year for the Watch integration. But I wouldn't expect it to be a monthly thing, or even a quarterly thing.
If you are doing it Objective-C. Sorry I haven't started digging into swift yet! Check out the paste bin http://pastebin.com/srwFT0aG EDIT: Sorry, I just realized that I'm in the swift subreddit. I would leave it here anyways, if it helps someone. 
A short google search yielded this: http://www.appcoda.com/ios-avfoundation-framework-tutorial/ The AVFoundation classes look very straightforward (as usual), I don't think you'll get any significant benefits from using another library. 
About 9 days
This kind of bug usually occurs the following way: First, you created a UIColorButton outlet called "colorLabel". Then you decided you don't need that outlet anymore and removed it from your controller file (ie. you deleted the corresponding @IBOutlet line). Interface Builder doesn't automatically recognise that that outlet doesn't exist anymore - it will still attempt to set your controller's colorLabel property to some object. This causes the exception you see: when loading the view, it attempts to set the colorLabel property even though it doesn't exist anymore. To fix this, remove the corresponding connection in your storyboard/xib. When you right click your controller in the Interface Builder, the problematic outlet should be highlighted with a yellow exclamation point. I don't see any obvious problems with your code itself.
Just reading the docs, isn't there just a image property? You could just set that to an image in your app bundle; you can create an image via ˚NSImage(name: "yourimage.png")` for example. It's deprecated in 10.10, but so is the title property you currently use. I'm not quite sure what the replacement is supposed to be.
For the initial approval it took quite a long time, 15 days. I was able to push another update out soon after to bring in ios 7.1 compatibility (originally only worked on ios8.0) and that was approved in under 2 days. The long initial wait was probably due to the large influx of apps for review with ios 8, but it was frustrating having to wait so long.
Try `gLabel.text = "\(gSlider.value)"`. Edit: I have no idea how you get the label to be "(Function)" though. It should be "&lt;UISlider: 0x7fc428d0e7a0; frame =..." or something like that.
Did you just try to play some random number? If so, I guess you're quite lucky you guessed the constant correctly, or vibrate is the "default sound" ;-)
well, i looked around on stackoverflow - then someone stated 1352. i then tried 1353 and 1354 for the value of another slider and those did nothing. i guess i should really go all-in and try and find out why 1352 does this and if there are other numbers for shorter vibrations. 
Thanks.. that gives an error (!) "(UISlider) -&gt; 0 does not have a member named 'value'. However, when I switched to using @IBAction func gSlider(sender: UISlider) and did a var gSlidervalue = Float(sender.value) then the teller.text = "Value is \(gSlidervalue)" started working. now all i need to do is somehow use this value for setting the g-colour in UIColor :) Thanks immensely for your help! I was just about to completely give up.
well, i think the (Function) was simply because I was trying to output the gSlidervalue without first rendering it into a float. maybe. incidentally, since I'm so close to getting there, I'm here now: self.view.backgroundColor = UIColor(red: 0.5, green: 0.2, blue: 1.0, alpha: 1.0) but whenever i try to replace any of the numbers with bSlider or gSlider or rSlider, they simply do not work (I mostly get an error saying -- as an example:) self.view.backgroundColor = UIColor(red: 0.5, green: 0.2, blue: bSlidervalue, alpha: 1.0) says "Extra argument 'green' in call.. like the number after green is wrong because blue has bSlidervalue instead of a number. so for the time being, I've mucked it up so that if the slider is slammed to 1.0, then the colour is changed to 1.0 for that specific one of the R G and B. and the phone vibrates. but I do not comprehend how to read the current R or G or B so that those would be used when the self.backgroundColor is changed by the slider. but one thing is certain: there has got to be a way to have 3 sliders that change the actual background colour! and i'm gonna get there.
As an indie dev, I decided to use Swift for my latest app, and I have to say, I think it's a great improvement over Objective C, but XCode support for it still feels very rough around the edges. I'm not doing anything performance-sensitive or particularly complex, but given the interop between Swift libraries and ObjC, I feel confident that I could revert to ObjC in performance-critical code. After doing Swift for a bit, then going back to my day job where I do Java, I absolutely miss the native support for optionals and closures. But I don't miss the somewhat cryptic error messages and lack of debugging support I'm currently getting in XCode with Swift. I think if Apple sticks with it and keeps putting the energy into it, they could have a big winner with Swift.
Sure you'll get there! There is a little pitfall with Swift you need to be aware of here: UIKit very frequently uses CGFloats, which are not automatically converted from "regular" Floats. The problem is that the UIColor constructor takes CGFloats, but bSlider.value is a Float, and I guess your bSliderValue is a Float, too. You need to cast with CGFloat(bSliderValue). Here's how I would do the whole thing (ignore this if you want to do it yourself, it's like spoilers I guess): - Create 3 outlets for each of your sliders: redSlider, greenSlider, blueSlider (make sure they are connected). - Create a single IBAction `updateBackgroundColor` that you connect all the sliders with. Set your sliders range from 0 to 1. That function contains this: self.view.backgroundColor = UIColor(red: CGFloat(redSlider.value), green: CGFloat(greenSlider.value), blue: CGFloat(blueSlider.value), alpha: 1.0) 
There are some documented constants for this. For example, there's the `kSystemSoundID_Vibrate` constant, which probably happens to contain 1352. Why exactly Ints are used to reference various system sounds, I don't know. Probably because it's an old C API.
That's probably the best concise description of delegates that I've read. I wish I could upvote you twice. 
So would this be the way to do it? http://imgur.com/h2VrVWc All the stuff below the class is just me testing it all out
Yes that looks correct. The few nitpicks I have would be: * 'defaultsArray' is misnamed; it's a dictionary, not an array. * you never actually use the 'defaults' variable you declare in the wrapper; I would either use it or not bother with it Personally I tend to just use NSUserDefaults directly, but there's no significant difference between that and what you're doing, so whichever feels best to you is fine.
Yeah as soon as I finished with writing defualtsArray I realised the error but as this was only a test case I couldn't be bothered changing it. Also, as soon as I uploaded that Image I did realise that I never used the defaults variable so I changed the code to use it and it made it much less clutered. Thanks for the reply though and all the help!
CoreData is almost always the wrong answer. The sweet spot is if you have a lot of objects that you want to run complex queries on, while the data isn't simple enough, or large enough to warrant using SQLite directly. Anything else is just introducing unnecessary hardship.
Is there anything in the console? (like a stack trace?)
The site I recommended has quite a few written tutorials. The warning you are getting might be coming from the Storyboard. But I'm too much of a newbie myself to say for sure.
Near the end of 2015, I think. 
It is sort of like a singleton so you can declare it whenever you need it. You don't need to place it in a single location.
I am changing code to swift so I am a bit worried about this. Do you know roughly how big your project got before you ran into problems? How about projects mixed with Objective-C and Swift? I am wondering about keeping it mixed to prevent it from growing too much before Swift has stabilised more.
you know, i did try kSystemSoundID_Vibrate but just got an error with Swift AudioServicesPlaySystemSound(kSystemSoundID_Vibrate) results in this error: 'Int' is not convertible to 'SystemSoundID' I did try Int(kSystemSoundID_Vibrate) but that did not seem to like to work either.
Okay, I think I can understand now. I ctrl-dragged the sliders to become outlets, then I wrote that IBAction updateBackgroundColor - spent a little bit of time deleting the rSliders and rSliderDidMove's from the main-storyboard, and ctrl-dragged the sliders to the viewController to map them to updateBackgroundColor - and made it so that updateBackgroundColor will also update the redLabel.text, greenLabel.text, blueLabel.text. and now it all works! Wonderful! I had to fiddle a bit to get rid of the remnant stuff (the ctrl-dragged sliders and whatnots), and after cleaning the code, had to re-do those colourlabel.text-updates (and it was way easier to have them in one simple update function instead of having 3 of them). and now it's just perfect! I think I also figured out at least some sort of rudimentary way of debugging storyboard stuff, because normally I'd just start from scratch when I'd start getting remnant-linkages giving me errors. This time I tried to approach it from the point of view of: it must make sense somehow. They must be there somewhere. They can't just be ghosts. I've now accomplished, well, apart from that kSystemSoundID_Vibrate weirdness, everything I set out to do. And you've been a great help! **EDIT** but the only thing that I'm still vague on, is, let's say there's a UIColor.purpleColor() and UIColor.greenColor() - how would I use Swift to extract the values so that the sliders can be made to update? :) I already know how to update the redSlider.value = 1.0 , but to get the numbers out would be somehow i think the last step so that this can be closed as a project and can start something new. 
Apple watch comes out early 2015
Yeah I use that site a lot but my biggest problem now is getting the cells custom label to equal the name name in my array of there is 1 item in my array let's say ["kevin":15] I can get the label title to equal Kevin by creating a for in loop like .... for (name, age) in nameAndAge { Cell.label!.text = name.text } But if I put more than one value they all equal Kevin no matter what I put and yeah I return the value in the for in loop.... So idk why it won't change the cells name.... I'm on mobile so can't give a good description
It was in the order of a couple hundred files / classes, big but not really *that* big. Again I switched back before the 1.0 release so it's quite likely I wouldn't have had as much trouble. I'm using swift for all my personal projects right now, but for big important stuff for clients that has to work and work well by a deadline that they're paying for I'm going with the tried and true objective c. 
There has been some negative feedback on the readiness of swift for production. Any comments to that? Like would you still prefer to use Swift for you next project or do you think it is immature and would rather stick with Objective-C a bit longer?
On one hand, it makes sense as we're not going to have hardware before launch. On the other, can't ride that glorious hype train. Although with recent issues, not surprised that they're not too concerned about that.
I've never actually used Objective-C in anger and my app is comparatively tiny, so I'm poorly placed to compare the two. That being said, I've certainly been very happy I went with Swift (overall), despite the teething issues. I wrote a bit of ObjC for an unrelated OS X app that I'm working on and I definitely prefer Swift…
Hi! Glad I could help. About extracting red/green/blue values from an UIColor - this is a bit complicated unfortunately. I think it's got something to do that an UIColor can use different internal representations and color formats (it's not necessarily RGBA), but that doesn't really mean that it has to be so hard... So, if you look at the documentation of UIColor, there's this function: func getRed(_ red: UnsafeMutablePointer&lt;CGFloat&gt;, green green: UnsafeMutablePointer&lt;CGFloat&gt;, blue blue: UnsafeMutablePointer&lt;CGFloat&gt;, alpha alpha: UnsafeMutablePointer&lt;CGFloat&gt;) -&gt; Bool Now you might be asking: what is an`UnsafeMutablePointer` and how do I get one? The basic idea is that you pass in a pointer to a memory location of a CGFloat, that the function may write to (ie. it is mutable). Fortunately, it's quite simple to get a `UnsafeMutablePointer` in Swift. For example, if you want to get the red component of the purple color, you could do it like this: let color = UIColor.purpleColor() var red: CGFloat = 0 color.getRed(&amp;red, green: nil, blue: nil, alpha: nil) The `&amp;` basically passes the address of red, ie. the pointer to that place in memory where the value of `red` is stored, to the function. `color.getRed...` then writes the color's red component in there. So after the code above, `red` will magically contain `0.5`, the red component of purple. But I'd say, it's annoying to write this every time to get a red, green and blue component from a color. So let me show you a neat little thing called class extensions! What we ideally want is that UIColor has a property called `red` that returns it's red component. With swift, we can do that! If we want to extend UIColor, we do that by creating an extension, by writing simply `extension UIColor { ... }` and putting our new functionality there. In an extension, we can only introduce computed properties and methods, but that's ok for us. Because I'm lazy, I only wrote one computed property that does this pointer stuff, it's called rgbaComponents. It returns a named tuple with red, green, blue and alpha values. Here it is: extension UIColor { var rgbaComponents: (red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) { get { var red: CGFloat = 0, green: CGFloat = 0, blue: CGFloat = 0, alpha: CGFloat = 0 self.getRed(&amp;red, green: &amp;green, blue: &amp;blue, alpha: &amp;alpha) return (red: red, green: green, blue: blue, alpha: alpha) } } } Now we can write: let color = UIColor.purpleColor() let red = color. rgbaComponents.red // contains 0.5 But, by adding some more computed properties, we can make it even better! extension UIColor { var red: CGFloat { get { return self.rgbaComponents.red } } var green: CGFloat { get { return self.rgbaComponents.green } } var blue: CGFloat { get { return self.rgbaComponents.blue } } var alpha: CGFloat { get { return self.rgbaComponents.alpha } } } With that, you can just write: let color = UIColor.purpleColor() let red = color.red // now contains 0.5 If you want to try to get the hang of this, you could try building the same for hue, saturation, brightness and alpha!
I just got my first swift app approved last night, and I submitted it for review sunday afternoon. Pretty quick - I guess there really was a load of iOS8 updates being reviewed.
Yes, but what did you do with that data. I see people using Core Data to serialize their app settings, or cache JSON data. That's what people think it's for.
Which Swift or Xcode version are you asking about?
var number = "1234567890987654321" let numarr = Array(number) var val = "abc" for i in 0...20 { val = String(numarr[i]) }
You are going from index 0 to 20, but "1234567890987654321" only has 19 chars. You are getting an index out of bounds error. So change 0...20 to 0..18. Or better yet use the length of number - https://gist.github.com/anonymous/46956da2dc144e2a3ae5
Hey, nice job. So, I was just playing with your app. Why is California the only State you can search Events?
What we did? Received the data via XML, the build CoreData objects with that data, and persist those. I guess there's people abusing CoreData, for app settings you obviously have NSUserDefaults, and caching JSON like that doesn't make a lot of sense... *shrug*
Listen to this guy. It's rather easy to avoid index problems if you avoid indices. Indices are just a huge hassle most of the time.
uhh.. does this mean that I'm supposed to write this: AudioServicesPlaySystemSound((SystemSoundID(kSystemSoundID_Vibrate) ?? cos if that's so.. wow! :D
It's free because I'm using data from the BJCP whose licensing prohibits me from charging for the app.
Your second loop would only ever run once. It would say "is the first apartment number equal to the one we're looking for? If yes, we're done and can return, if no, we're done and can return". Nothing specifically related to optionals here, just loops.
Your problem here isn't related to use of optionals. If you changed the return value to be of type String, and returned an empty string to represent not found, you'd still have a problem. The compiler error you're getting is because there's a possible path through your fintApt2 function that results in no return statement being hit, and that's not allowed because the function has to return something. Imagine the aptNumbers array were empty. The body of the for loop wouldn't run even once, and the code would drop through to the end of the function without a return statement. The Swift compiler detects this and complains "Missing return function" (and the thing you need to return just happens to be optional). In your first example, no matter what, a return statement will be hit, because you have an unguarded return on the last line, so Swift will allow it. (yes, technically you can tell statically that aptNumbers isn't empty and therefore will definitely execute at least once, but the Swift compiler can't do that – though it can do simpler cases such as a if...else statements which both have returns in them, one of which is guaranteed to be executed) 
Oh I hadn't seen that, do you have a link to where they said that?
Oh ok I see. That makes sense.
Great! It didn't occur to me that my for-in loop would only run once. Thanks!
This makes sense. Imagining that the array is empty help! Thank you!
Hi, California is the only state that currently has a group that is entering in their immunization clinics/events. Anyone health care provider can make an account, and once approved, they can add in their clinics as well. It is not limited to California. 
That is what I was thinking as well.
I changed the deselect and the select... How can I make this into one file that I can upload onto here so it is easier to debug so I can get some help? 
&gt; How can I make this into one file that I can upload onto here so it is easier to debug so I can get some help? Well first of all, have you checked the segue identifier to make sure that's not the cause of the crash? There's no point sharing your project if you can already solve it. You don't make this into one file and you don't upload it here. Use an appropriate mechanism for sharing code. I already suggested putting your project on GitHub. 
I can have a look and see. **EDIT** well, plenty of errors. http://imgur.com/DcO5wM7 not sure which ones i know to fix, since i don't know any :D
woah. i'm gonna have to stash this one. and then attack hue,alpha,brightness,saturation and just get at it. thank you very much for writing this. my eyes bulged out of my skull when i started scrolling down. :) 
Don't do the spawnThenDelay thing forever? Just do it once, and add some action at the end of the sequence that does the whole thing again. Eg. func didMoveToView(view: SKView) { self.spawnThenDelay() } func spawnThenDelay() { let repeatSpawnThenDelay = SKAction.runBlock(self.spawnThenDelay) let spawn = SKAction.runBlock({() in self.spawnBlocks()}) let delay = SKAction.waitForDuration(timeDistance()) let action = SKAction.sequence([spawn, delay, repeatSpawnThenDelay]) self.runAction(action) }
Thanks buddy. I don't know how come I couldn't figure that out.
This, exactly. For extra clarity, I'd like to point out that C# has basically the exact same concept - events and delegates. In Swift, as Legolas explained, protocols are often used to define what a delegate must adhere to. In it, the delegates themselves are objects -- a view will have a delegate that is actually responsible for things that happen in/to the view (for example, a button was pushed), rather than responding directly. The protocol for the event, then, says what methods this delegate must implement in order to respond to the events on the view. Example (Swift): protocol MyProtoType { func viewWasTapped(x: Float, y: Float) } class MyClass : MyProtoType { func viewWasTapped(x: Float, y: Float) { println("The view was tapped at (\(x), \(y))!") } } This code defines a protocol (think C# interface as mentioned above) that must implement the viewWasTapped method (which takes two Float arguments and returns nothing). In C#, the delegate keyword actually defines the method signature for a method that must be adhered to. Rather than delegating to entire objects, as in Swift/Obj-C, delegation applies to individual methods. So, you could create something like the following: Example (C# -- assuming this is all within the definition of a class called 'MyClass'): public delegate void ViewWasTappedEvent(float x, float y); public event ViewWasTappedEvent OnTapped; public void ViewTapped(float x, float y) { Console.WriteLine(string.Format(The view was tapped at ({0}, {1})!", x, y)); } public MyClass() { OnTapped += new ViewWasTappedEvent(ViewTapped); } Clear as mud? (As a warning, I haven't used C# in a while, so I may have messed that up just a little bit - if I messed that up, somebody feel free to tell me and I'll fix it up). As far as differences between the two go, there's plenty of difference in implementation (such as how the delegation relationships are defined) - but the concepts are basically the same.
When I previously ran into this issue, string interpolation worked pretty well, even just to hold a single character. So "\\(char)" or perhaps in your example "\\(numarr[i])". Hopefully it will work fine for you too.. let me know.
This is it. The channel is pretty active, from what I've seen (though this depends on the time of day) - but Freenode has a lot of... less desirable types, so I can see why the nickserv registration is required. To OP: My suggestion is to visit the [Freenode FAQ](https://freenode.net/faq.shtml#userregistration) to learn how to register your nickname - after you do that, you'll be allowed in the channel!
You can't generate more than one table entry from this method! I assume you want each entry in your array be in a different table row? The call to override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { ... } is done for each entry automatically. So all you have to do is use indexPath.row as an index into your table and set up the cell for that single entry. That is why you have to implement override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return myArray.count } and tell the UITableView how many entries you have. Does that make sense? If in doubt: https://developer.apple.com/library/ios/documentation/userexperience/conceptual/tableview_iphone/AboutTableViewsiPhone/AboutTableViewsiPhone.html 
As far as I know, swift is all about being explicitly safe, and they would want you to manually put in the .count in there. You can actually define the suffix notation to do pretty much anything you want, but that always comes at a cost wrt readability of your code for others.
Well, there is a [SwiftJSON](https://github.com/swiftjson/SwiftJson)
Hmm... I'll have to look into overriding that operator. But I don't really see how `[3..&lt;foo.count]` is any safer than something like `[3...]`. If anything, I think the `3...` syntax is both more readable (to me the `..&lt;` is rather ugly...) and safer, as you can't accidentally do, say, `3...foo.count`, which would obviously throw an error.
&gt;So change 0...20 to 0..18 As of a few betas ago, the .. syntax no longer works. You'll need 0..&gt;18
&gt; var number = "1234567890987654321" &gt; let numarr = Array(number) &gt; var val = "abc" &gt; for i in 0...20 { val = String(numarr[i]) } What is it that you're trying to accomplish? This code (if you fix the index error) just assigns the last element of your string to val. Also, a better way to do this (it's just a reimplementation of your code, so it has the same problem) is: var number = "1234567890987654321" var val = "abc" for char in number { val = String(char) } EDIT: Looks like /u/ztj beat me to it with his gist. 
That's for JSON, not XML ;)
Oh! My apologies 
You need to use indexPath.row as an index into your array. Show me your array handling code and I can tell u what's wrong. 
There's nothing "safe" about forcing the programmer to put a .count there, if anything, it's less safe because there's more to write.
I swear 90% of the time I get to a thread in this sub, you've already posted the answer I would have. Keep up the good work.
What is watchkit?
They don't allow it. Also, there's no reason to do it as you can easily close apps in the multitasking screen and you're not really supposed to force close your apps all the time. iOS can manage itself just fine. 
as far as I know when an app is running in the background it has no resources committed to it.
Because iOS does a better job of managing its memory than you do. 
http://www.reddit.com/r/apple/comments/2h0hqq/psa_dont_force_close_your_apps/ 
&gt; the ipad/iphone seems to NEVER close them on their own. It does. That list doesn't show you everything that's running, it shows you everything you've used in the recent past. Most of those applications will have been terminated by iOS a while ago. Stop trying to micromanage your device. You don't know what you're doing, the operating system does a better job than you, and your actions probably waste your battery because you're keeping one of the most power-hungry parts of the system – the screen – on longer. Computers are supposed to make our lives easier, you're not supposed to be cleaning up after it. 
We've been writing a Swift app in the open for a few weeks now, it's a ReactiveCocoa app with tests and view snapshots. It's both my first RAC app, and non-trivial Swift app, but my work buddy @ashfurrow knows a bunch about them both. So it might be an interested read/reference for people.
that depends on whether you have background processes for that app turned on. If yes then the app will just keep going, if not then i guess a minute or two.
Because you can reboot. 
Thanks for the reply I think I will give it a shot then. Still far away from hundreds of files. Swift doesn't seem that bad now, and I suspect by the time I have written enough code for the next release of our app Swift will be more polished. It is a difficult balance. While Swift is less mature it also has a lot more features to catch mistakes that Objective-C simply didn't have. 
try the swift stuff on lynda.com - I thought it was really awesome and easy to understand.
Maybe you're right, I'm just more used to it at this point, I guess.
I can with my jailbroken 4S.
Ill never know how to use IRC :/
Yes and no. Python is a "dynamically typed" language -- that means that a variable can be of any "type" -- a number, a string of text, or a list of any type of object, or some other type of object that a user might define. This style is largely easier to understand and pick up when you're getting started. This lets you focus on the basics of algorithms and data structures -- looping, if-statements, etc. Other dynamic languages include JavaScript, Ruby, PHP. Swift is what's called a "statically typed" language -- this means that we have to declare a type of every object before it can really be used. In this way, the compiler (the software that transforms your Swift source code to machine code that your iPhone or Mac can execute) can know the type of data you're passing into a function to ensure its correctness. Yeah -- I'm sure that's a bit over your head, so...Here's an example of a function in Python: def say_hello(name) print name This function takes a single parameter: a "name", and prints it out to the console. Here's the same thing in Swift. func sayHello(name: String) { println(name) } Notice that I have to specify the type of the "name" parameter as a String - this makes Swift a bit more complex for a newbie, because these types can get very difficult to manage. Some folks might argue that this type of programming is better -- and on the whole, I agree with them, as it can enforce structure that oftentimes improves the overall quality of the code -- but it may be a bit more difficult than Python if you're just getting started. That being said I think the playground feature of XCode can help you experiment and get more immediate results and feedback from your code, which is a large boon if you're just trying to mess around with the language. [see here](https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html#//apple_ref/doc/uid/TP40014509-SW3) for more on playgrounds. I also think that the appeal of programming is "makin' stuff," so if you're interested in making some kind of application for Mac or iOS, Swift might be a better gateway drug to programming as a whole. There's no wrong choice for getting started, but with the relative new-ness of Swift there aren't a heck of a lot of resources available in the form of books and tutorials (at least not in comparison to something like Python). If the idea of static typing a nd some relatively cryptic error messages don't scare you, I say give Swift a whirl :)
Having taught many non-engineering undergrads and kids beginning programming in Python and other things... I'm pretty excited about Swift. But Swift is not done yet. This sub is full of people kicking the tired and running into problems. Playgrounds and many aspects of the language feel almost made for beginning and young learners. The syntax is minimal and simple to learn. One liners exist, graphics are trivial to manipulate. Simple things are simple to do and intuitive to figure out. (Everything ObjC is not) So not yet, but soon.
Thanks for your reply! Maybe once I learn a little bit more I'll take the time to make a little library for myself. In regards to Python's `a[::]` syntax, is there a way to define some syntax like `a[0...10, 2]` to stride by 2? It appears that Swift has a `stride` function: foo = [1, 2, 3, 4, 5, 6, 7, 8, 9] for x in stride(from 0 to foo.count by 2){ println(foo[x]) } This can done quite concisely in Python: print(foo[::2]) It seems overkill to create a generator from `0..&lt;count` and then into index into `foo`. In other words, is it possible to redefine an expression with multiple operators? I'd like to be able to build a grammar with `x OP1 y OP2 z` where `OP1` and `OP2` are each operators, but in which the whole thing acts as one operation, that is, you would not be to use OP2 only (unless some other behavior was defined for that).
Yes, you can learn with [this bundle on raywenderlich](http://www.raywenderlich.com/store/swift-tutorials-bundle). I've learning five chapters, and that's so great.
http://stackoverflow.com/questions/17507170/how-to-save-png-file-from-nsimage-retina-issues
That really depends on what you want to use it for in the nearest future: - iOS or Mac apps – then go for it, but you'll still have to learn Objective C along the way - Web dev – Python and Ruby are great - High load / infrastructure – C++ or Java, but honestly make sure you've read some books on Algorithms and Data Structures first - Statistics – Python or R And also, no matter which one you choose, don't forget to take a course in algorithms if you haven't done so already. Something like Algorithms I from Coursera.
Thanks for the reply. I will try both swift and ObjC out. Cheers! 
Make sure your audio file is also actually being copied into your resource bundle. Oh I just noticed your code confused, vars never go in quotes. Just use the code in the post by JRDerpwing as an example.
I'm actually using the JRDerpwing code now, and that, too, just gives me silence. the audio file is being copied into the resource bundle. well, i continued, and i got this: fatal error: unexpectedly found nil while unwrapping an Optional value (lldb) out of @IBAction func startPlayingMP3NumberOne(sender: UIButton) { let mp3_one_path = NSBundle.mainBundle().pathForResource("06 Молитва страдания.mp3", ofType: "mp3") var player = AVPlayer(URL: NSURL(fileURLWithPath: mp3_one_path!)) player.play()
What the fuck? Go to the app switcher, swipe up, app closes. AKA terminates. AKA "is killed".
Have a look at http://realm.io/docs/cocoa/0.85.0/ has a step by step process on how to start using realm. I tried this process yesterday and it works. I had trouble with integrating with workspace and had to do it on a project. 
Honestly, I would say pick a language based on whatever platform you really, really want to create on. I first learned Objective-C, which is very different from a lot of other languages, but I stayed motivated because I love the iPhone (Especially my new iPhone 6 :D). Hopefully, this provides another perspective.
That is so weird, I did those steps multiple times now, watched video, same error
Hi, I too have taken this code and slapped a mp3 into it, and am running this all within a button, so that when i press a button on my iphone, it should play the sound. for some reason, all i hear is silence. not sure what i'm doing wrong, either. 
https://github.com/nchen24/SwiftInterval Hm. I got most of it to work. Took me probably 4-5 hours in total, but it was a fun exercise. There are a few edge cases with negative stride, especially when using `..&lt;` and one of the open intervals. I need to come up with a better way of testing... there are a lot of cases to cover.
UIKit stuff gets all freaky if you don't call it on the main thread. If you need to do something with UIKit, wrap it in: dispatch_async(dispatch_get_main_queue()) { // WHEEEEE } You can use dispatch_sync too, of course. Edit: To clarify that AFAIK the dataTaskWithURL callback doesn't occur on the main thread.
THANK YOU. I been hitting my head against the desk for few days.
I personally think not. However, if you feel like getting into it, check out [this todo app tutorial](https://github.com/jadekler/git-swift-todo-tutorial) that I just wrote. =)
It depends on what you're doing. JSON is an awful format for, say, documents, but it's a great format for lots of different types of structured data. What are you struggling with? 
Glad it helped you. :)
make sure you check your optionals! I'd wager pathForResource is failing.
to be honest, your code lacks most Swift features and isn't beautiful at all. *ToDoItem.swift*: *itemName* won't be altered once the object has been created, why do you use *var*? Why do you initialize it with ""? You've got the init function for that! My suggestion: http://pastebin.com/UnPBMv2q *AddTodoItem.swift*: I don't like your default-init of *todoItem*, why don't you use optionals? *var todoItem: TodoItem?* -&gt; *todoItem* will be *nil* if the user doesn't make any input / dismisses the view controller Which leads us to *TodoListTableViewController.swift*: There's too much *var*! Please check when and how you use *var* and *let*, this is essential! *unwindAndAddToList*: The entire function feels wrong, there are 5 lines and 3 of them don't follow Swift's principles. Why the *var*? Why the check whether *itemName* equals ""? My suggestion: http://pastebin.com/4aiVnyba I appreciate the effort you've put into writing the tutorial, but &gt; Switched from objective c hackery to real deal swift as commit message is annoying for someone who has been putting his efforts into learning proper Swift since the initial beta release. :/ 
Hey there - thanks for the feedback. I'll try to address a couple points: &gt; itemName won't be altered once the object has been created, why do you use var? Why do you initialize it with ""? You've got the init function for that! &gt; My suggestion: http://pastebin.com/UnPBMv2q This is a great suggestion - thanks! &gt; There's too much var! Please check when and how you use var and let, this is essential! I thought it was fairly modest, but I will go ahead and do a re-check and see if there are places where it may be appropriate to alter it. If you feel strongly about certain areas, please feel free to PR against it. &gt; The entire function feels wrong, there are 5 lines and 3 of them don't follow Swift's principles. Could you clarify what you mean by 'swift principles'? &gt; Why the check whether itemName equals ""? So that we don't add blank items. I'll take a look at your pastebin this Sunday when I get internet again and see if it addresses the problem better. &gt; I appreciate the effort you've put into writing the tutorial, but &gt; Switched from objective c hackery to real deal swift as commit message is annoying for someone who has been putting his efforts into learning proper Swift since the initial beta release. :/ I've also been learning Swift since release. The hackery I was referring to was a particular Swift problem where Unwind Segue wasn't able to connect to Exit, and you had to declare classes as Objective C (this is the hackery in particular) to get them to register in the storyboard. See [this SO post](http://stackoverflow.com/questions/24029586/xcode-6-storyboard-unwind-segue-with-swift-not-connecting-to-exit) for more info - and feel free to ask about something questionable before bashing it. ;) I believe this was resolved sometime between xCode Beta 5 and general release - the commit message you're seeing is my work in updating the repo from Beta 4 to general release, which included removing that particular piece of hackery.
It turns out version 0.86 is required as noted by a realm dev in that stack overflow thread. It will be released in a few hours.
The questions was specifically on why you can't kill all apps at once. Like, if I have 50 apps open, close them all. I get that the iOS is supposed to do this for you and/or keep resources in check. However, some apps, i.e. map apps or apps that use gps/location services will not close and you must close them so they don't eat your battery.
So.. how do i check my optionals? :) 
I made sure iPhone was not muted/silent, I made sure volume was max. I even started iTunes playing and pressed pause on it to make sure volume was functioning. I put a println("hello") right below the sound.play() and it did hello at me from Xcode's debug view. Well, the Xcode Simulator also does not play. Uhh. @IBAction func buttonPressFile1(sender: AnyObject) { var audioPlayer: AVAudioPlayer? if let path = NSBundle.mainBundle().pathForResource("file1", ofType: "mp3") { audioPlayer = AVAudioPlayer(contentsOfURL: NSURL(fileURLWithPath: path), fileTypeHint: "mp3", error: nil) if let sound = audioPlayer { sound.prepareToPlay() sound.play() println("hello") } 
Hi, &gt;I thought it was fairly modest Nope, definitely too much var, too little let. :) &gt;Could you clarify what you mean by 'swift principles'? &gt;So that we don't add blank items I was referring to let vs. var and not using optionals where it may be appropriate. Checking for a blank item is pointless since you're already checking if countElements(textField.text) is &gt; 0, a clean approach would be to make use of optionals (todoItem in your AddTodoItemViewController class) instead of default-initializing an instance of TodoItem with "" and to use optional binding on the other side. The modified source code for this function is: let source = segue.sourceViewController as AddTodoItemViewController if let todoItem = source.todoItem { self.todoItems.append(todoItem) self.tableView.reloadData() } &gt;and feel free to ask about something questionable before bashing it. ;) I'm sorry if I was offensive or bashing it, it's just that there's too much questionable code out there, not much room for friendliness :p
The biggest problem is that the most worthwhile features of Swift aren't very compatible with ObjC, so swapping a few files of ObjC for Swift will not gain you much. And yet, when you take the plunge and have a lot of Swift, you'll run into continuous issues with performance, large incompatibilities between beta releases (Swift is still very much in flux) etc. Doing any client work in Swift is clearly irresponsible at this time. I would actually recommend starting up some very small Swift-only project. That's the only way to get a deep feel for the language.
Oh, you have a dictionary, not an array! That's why you are having difficulties accessing the array by index :) Try using an array for the keys of your dictionary: let keys = [String](nameAndEyeColor.keys) Then change override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { // remove the for loop !!!! let (name, eyeColor) = (keys[indexPath.row], nameAndEyeColor[keys[indexPath.row]]) 
Right now, the tooling is terrible - Playgrounds, which would seem to be the ideal way of learning swift, frequently break (even in the second GM that's come through). You have no idea if the bizarro error you see is due to your code and some misunderstanding you have, or it's just Xcode losing its mind again. For an experienced programmer, that's somewhat OK - we can figure it out. If you're a brand-newcomer, I can imagine it'd be frustrating beyond belief.
Move this line to the global scope: &gt; var audioPlayer: AVAudioPlayer? It worked when I moved that out of the function. My guess is that it was getting destroyed when the function ended.
OOOOOHHHHHHHH! That definitely turned a lightbulb on. Thank you so much!
You're welcome :)
I need structured data passed from a web server to swift. I formatted in JSON but it's not very native to swift to use that data. I found some nice JSON libraries for swift that are helping me a lot
I appreciate it. I'm having trouble making it so that it will cycle through the colors everytime I press the button. Argh. I tried a for loop and placing the for loop variable for the array value. I feel so dumb. All these lessons and I can't do such a simple thing. 
Or you could make a color providing class: import Foundation import UIKit public class ColorCycle { let myColours:[UIColor] = [ UIColor(red:1.0, green:1.0, blue:0.0, alpha: 1.0), UIColor(red:0.0, green:1.0, blue:0.0, alpha: 1.0) ] var index:Int let limit:Int public init() { limit = self.myColours.count index = -1 } public func nextColor() -&gt; UIColor { self.incIndex() return myColours[self.index] } func incIndex() { index = index + 1 index = index % limit } } then in your code var colorProvider = ColorCycle() var nextColor = colorProvider.nextColor() 
Arwa from Realm here. Sorry about that! version 0.86 was released a couple of hours ago: http://realm.io/news/realm-cocoa-0.86.0/
Don't feel dumb. Mistakes are necessary to learn. import UIKit let myColours:[UIColor] = [ UIColor(red:1.0, green:1.0, blue:0.0, alpha: 1.0), UIColor(red:0.0, green:1.0, blue:0.0, alpha: 1.0) ] for colour in myColours { println(colour.description) }
Invisible hand to hand combat... sounds awesome, but I bet its terrible to watch
Thank you so much for this you have no clue how easy you just made my life!
actually one more thing... im having trouble changing the coordinates of the text field. I dont want it in the default position and changing it in the stroyboard does nothing
Use a table view. 
&gt; Incidentally, do you have any tips to comprehend how things like this should be in the function itself and when they should be global? If it needs to stay alive after the function ends, it should be outside the function.
I'm not sure how to modify your code so that the sound var/let is outside of the function so that can use a separate function to stop the playback. I tried slamming in a if (sound1.playing() == true) {sound1.stop()} at the start of the play-button-function, but obviously, sound1 is not even defined before there are at least 3 different nested if's. how should i go about it?
Swarm.swift: - I'd use url as a computed variable: var url: String { let multi = "+".join(subreddits) return "https://reddit.com/r/\(multi).json" } - I'd overwrite the += operator instead of writing the add function - instead of iterating over each child in children (in fetch), I'd use map: self.posts = map(children) { child in let title: String = child["data"]["title"].stringValue! return Post(title: title) } AddSubredditsController.swift: - I'd rename *subreddit*, it's confusing because you don't know if it's some object or a GUI element I like it, I can clearly see that you've wrapped your head around the Swift concepts, especially the short enums, optional chaining and mostly correct use of var and let are fine. One thing I'd change if I were you, though: If a function takes a closure as argument and it's the only / last argument, you can omit the parentheses: swarm.fetch { dispatch_async(dispatch_get_main_queue()) { self.tableView.reloadData() } } BTW, you could use XPath instead of Json as well, I wrote / ported a [library](http://www.reddit.com/r/swift/comments/290fnk/a_xml_html_parser_written_in_swift/) for that, an example for reddit is included. :)
Your question is a great example of why I don't recommend Swift to new iOS developers. Your question has nothing to do with Swift, it's a basic question about UITableViewCells that has plentiful answers online. Since Swift is so new it doesn't have the following and resources that ObjC has. Don't kid yourself into thinking you can "skip" ObjC and just learn Swift--maybe in a year or two, but not yet. You can find your answer by Googling "center textlabel in uitableviewcell" there are many approaches, but you'll need to learn some ObjC to understand them.
Ah, those are all great catches! Thanks. I especially like that I can omit the parenthesis around the closure, personally I find that makes it a lot easier to read when there is nesting. And computed variables, I had no idea about those - this changes everything! And as a ruby dev, I'm quite embarrassed I forgot about map... 😁 All in all thanks for the feedback!
Try changing the auto layout constraints instead (or move the text field then select Uodate constraints)
I'd recommend UICollectionView instead, if it's a grid of photos (or any other fancy layout). Pretty sure it does the section headers too.
You have many options... Local sqlite database, coredata, iCloud, a remote storage... Search iCloud + swift for tutorials... 
Which would you recommend?
Which ones can do which things? And thanks for the link
I have only used this in one Swift app so far but AwesomeCache seemed to work out pretty nice for me for saving objects and a few images. Your things just need to adhere to the NSCoding protocol. https://github.com/aschuch/AwesomeCache Edit: This is assuming you want to save only to the device 
Why are you doing this?
Well the best advice I can give you it's to learn how to learn by yourself. You have they incredible chance to have everything at your fingertip with internet. When I learnt more than 30 years ago I was not that lucky and I had to learn it the hard way. No books and no magazine to help me (I am French) and the most complex thing was you could find was to read hexadecimal. So I taught myself to write assembly (8080) it took a long time; it was tough but I am glad I learnt it that way. Now I work with young engineers. They just don't realize how easy it is to learn how they did. It probably sounds like an old man grumble but every experienced professional will agree with me; what you learn at school is just like an appetizer.
Why not just use the provided width value for the movement?
You should never use "magic numbers" in your code like this. You should build the UI so it fits any screen size, like with auto layout. If you want a dialog that takes up the width of the screen then make it self.frame.size.width.
You need to unwrap the optional, try: self.view!.addSubview
Try saving the view in a variable with the type you are wanting. let skView = self.view as SKView skView.addSubview(newSubView) My thought is that the self.view property is defined to take a UIView or via polymorphism take any subclass of UIView, essentially meaning you need to cast it into the appropriate subclass.
When I try this code let skView = self.view as SKView This error appears: Downcast from 'SKView?' to 'SKView' only unwraps optionals; did you mean to use '!'? I still can not understand what his problem :(
Options: CoreData, SQLLite, NSCopy, NSUserDefaults, Realm, iCloud
Ideally you shouldn't really be aware of what device you're running on. You should look into using AutoLayout if you want to have views that adapt to the dimensions of their surroundings.
Is this designed for tableView datasource usage or would it be slow for that?
I'm have not done any performance testing on AwesomeCache yet but if you have lots of data I would... 1) Pull it out of AwesomeCache in your viewDidLoad/viewWillAppear or whatever function you prefer and save it off into a property that the UITableViewDataSource will look at 2) If not not fast enough for you, do #1 in the background with GCD and show some sort of loader The cache saves to file and reads from file so I'm not sure how often it stores things in memory itself after I reads it (I have not dug trough the source myself yet) so to be safe I would do what I mentioned above. Let me know if you have any other questions :)
This isn't /in/ "Swift", this is part of UIKit.
Ok I did this and solved :) Although I do not understand these aspects of SWIFT 
If you try to learn Swift without learning at least the basics of Objective C, you're probably gonna have a bad time. Swift is almost entirely dependent on C / Obj-C based APIs to do just about anything worthwhile. Being able to understand code examples and documentation written in Obj-C will be *hugely* helpful for you if you want to be proficient in Swift.
I agree, I only knew basic Obj-C before Swift came out. It was enough to be able to convert basic samples of obj-c code to Swift. This helped me massively in learning Swift. Always good to have a strong root in C and obj-c when starting with a language that is heavily based on those.
I would follow /u/kingarthur 's advice http://www.reddit.com/r/swift/comments/2ib7px/skview_does_not_have_a_member_named_addsubview/cl0lptd and learn about optionals. Writing in swift without understanding that concept will be very confusing. 
I used it for saving some images (UIImage) and data modes for offline use. Hope you like it and works out for ya!
While this may not be ideal, there could be practical reasons to do this (ie developer time is more valuable than elegance) but at least test a range of widths using &gt;= instead of == to handle any intermediate resolutions that apple may release in the future
I agree you can learn a lot online, but when you want to learn something specific it is very difficult to find a specific tutorial. I'm in the same boat. I want to learn x,y,z but I can't find an exact tutorial. Plus, I've always learnt best with a mentor next to me guiding me.
* Coredata, SQLite -&gt; Device storage * iCloud -&gt; sync between devices * Remote storage -&gt; call an external webpage passing data and store them on the web server. Of course you can mix them (i.e. store on device and then sync something on the cloud). It's really up to you...
I feel dumb (and sad) because I still no not understand how I can make it so that when I click the button it cycles through the array. I can make it switch between 2 colors using if and else statements but as far cycling I'm completely lost. With everything I learned I should know how though which makes it worse. I've learned a whole lot of concepts and stuff, but I guess I'm having trouble putting it all together to make ideas work. 
You shouldn't advise newbies to force unwrap without a fuller explanation. The next time they come across a problem like this, they are going to use the same solution, so they are going to end up force unwrapping everywhere.
That's not a great solution. As kingarthur says, you should read up on optionals. You should only use `!` to force unwrap an optional when you are **certain** that it's not `nil`. This is fairly uncommon and you should be very sure of what you are doing when you force unwrap. If you aren't 100% sure that the variable has a value, and your code should simply be skipped over if it's `nil`, then you should use optional chaining like this: self.view?.addSubview(replay) If you aren't 100% sure that the variable has a value, and you should do something different if the variable is `nil`, then you should use optional binding like this: if let view = self.view { // view is an unwrapped self.view that has a value. view.addSubview(replay) } else { // self.view is nil. } 
These are good points. I've been thinking about this topic too. It's a pretty hefty amount already, so I'm concerned that by adding explanation to the smaller things, we'll flood the user. However, I might try playing around with adding links to further reading where appropriate. Also, thanks for the ```swift tip. That's good to know. Thanks again for the feedback, will keep improving it.
**EDIT**: Alright, I bought the bitfountain ios8 course and I'm enjoying it so far. Thanks!
Hi again, I like your first two changes, but your third (http://pastebin.com/4aiVnyba) does not compile. Could you please clarify what you were trying to express? I think you're trying to say, if source.todoItem != an uninitialized todoItem, but your code is inconsistent with this statement. Thanks!
Thanks again for your ```swift tip - this has been implemented. I'm still giving though to explaining the concepts more thoroughly.
Hi, just compiled the code, it works on my system (10.10 GM Candidate, 6.0 Release Version). Did you already replace *var todoItem = TodoItem(itemName: "")* with *var todoItem: TodoItem?* ? It's important to make sure you have an optional there because *if let todoItem = source.todoItem { }* will try to unwrap the optional and, if the optional isn't *nil*, create a locally valid variable called *todoItem*.
I agree, I was tired and it was late so I just wanted to help :)
Make sure reloadData is being called from the main thread.
Go thru the [CodeSchool guide](https://www.codeschool.com/courses/try-objective-c) on Objective-C a couple times. It should be just enough basics for you to be able to read Objective-C (in the way someone can *read* a second language, but not *speak* it) and translate into Swift.
Is there some reason you can't use the Obj-C library?
Nice. Put it on the App Store!
Nice mate
Post some code bro.
https://github.com/nemesit/SwiftXMPP
Do you mind if I grab the code and work on UI? Edit: Are you releasing the code under any type of license?
Which is why I prompted him to post a [licence](https://tldrlegal.com/) on his repo. My offer of help was not to steal the code and use it for myself, but rather to contribute code to his repo and help make his app better. 
At least it's a start and something to build on. You can't expect everything to be finished and handed to you with a language as new as Swift.
what is calling this update function? you shouldn't be updating anything by checking manually how much time has passed. Read up on CADisplayLink
The Update function is called automatically, but that's not where the problem lies... all other functions being called in Update are working fine. 
It's not an actual crash though, it just uses a lot of CPU, right? Maybe it's your `addAlien` function? Also, formatting code isn't that hard. Just add a newline before the code starts and inset it by 4 spaces.
I will put it under a reasonable license later today. 
Never mind. Worked it out as soon as I posted it.
bitfountain. io
Look at Apple's [AVAudioPlayer documentation](https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAudioPlayerClassReference/index.html#//apple_ref/occ/cl/AVAudioPlayer) If you feel your code should work but doesn't, look around on Apple's [developer forums](http://devforums.apple.com) or StackExchange.
Yes but no. you can use swift to make widgets, but you can't toggle system settings.
Hmm, ok. So, code is math. To print a line in swift you have to type "println(var)". To print a line anyone has to do the same thing. So, how can you copyright that code when everyone has to type the same stuff? Does it depend on the complexity? If you wrote a complex app to print a string of characters and I did as well, and our code is nearly identical, who has the copyright? If I steal his code and tweak it he can no longer say it's his right? How can you prove that I didn't write the code myself since everyone must write the same/similar code to get the same outcome?
Looking at your code this is probably your issue. I haven't had a chance to test this, but I think this is what you need to call instead of reloadData directly - http://pastebin.com/DVQ6BmY6
You should be able to do everything here by reading through the Quartz 2D Programming Guide. A combination of paths, fills, gradients and masks is enough to get you most of the way there.
UISlider has a target-action pattern that you can use to hook up to the reservoir levels , CGAffineTransform on the water view behind the round-corner white mask should be an easy way to meet Goal #1
Why not just use the production 6.0.1...
Because it does not support OS X 10.10 yet
I'm glad that it's not only me who's having issues with this - I don't know what Apple changed between the previous beta and the 6.1 GM release, but I have experienced all three problems you mentioned. I'm struggling to understand how this was labelled as a GM release - I'm keen for Apple to release an updating rectifying the problems.
until 4 days ago, I was using 6.0.1 and SourceKitService was crashing and would not recover i.e. auto-completion was not working at all and white was the only syntax color being used. Restarting the app did not help at all. I finally gave up and downloaded 6.1 and it has been a bit more stable for me. I do get the syntax coloring issue also but I can live with that for the time being. SourceKitService has crashed a few times but it quickly recovers and I can continue coding. Swift support in AppCode can't come quick enough - come on JetBrains - code like the wind!
I think that it's pretty crazy that they're calling it GM when one of the known issues is that NSView subclasses crash Playgrounds. That's like one of the most useful things for me.
Also to be on the latest and greatest if you're planning on shipping / teaching stuff based on 6.1 once it drops.
Yeah, 6.1 is terrible for swift on ios development, I'm sure it's fine for objc and Mac dev though, which is what it's targeted at. FFS is came with iOS beta SDK.
I'm having all of the same issues, extremely frequently - for a relatively small project. I'm backing down to the 6.0.1 release for iOS development. If you're interested, you can find it (the older 6.0.1 final release) here: https://developer.apple.com/downloads/index.action#
Its very difficult to address this without more context. Your updateWithTimeSinceLastUpdate() also calls addAlien() for which you have not provided an implementation for us to look at. If you are following a tutorial like [this one](http://www.raywenderlich.com/42699/spritekit-tutorial-for-beginners) then I can say after translating it to Swift I did not experience any unusual performance lags from the implementation of a delayed update to spawn sprites. I would strongly suggest you start looking at your running code with the Time Profiler Instrument. If you haven't spend any time in Instruments, you should. Its a very powerful performance analysis and debugging tool.
I found it a bit more robust (not 100% stable by any means though)
Maybe you're in a good position to isolate the cause then? I have the suspicion that generics might be the culprit that causes a lot of problems, but I don't really know of course...
I'd just create a custom view and implement drawRect. Then draw your stuff. /u/grewgrewgrewgrew's idea is quite neat because you could achieve the rising water levels with extremely few lines of code. It's not as flexible though.
this post jinxed me - previously source kit would crash and then recover; now its just crashing :-( Can't get anything done... This is painful! 
If it's always crashing (like, so frequently that you can't get any work done) then it's often due to you importing a library from one of your Swift files and not linking to it. Make sure you link to every library you import.
If you mean under Build Phases &gt; Link Binary With Libraries -- then that is done already. The only libraries I'm using are the various ones needed to support Parse and I've double-checked that all of them are linked. Parse also requires you to create a bridging file but I did that also. App builds with no errors - just can't get SourceKit to stop crashing. So I have no auto-completion whatsoever. 
 FBRequestConnection.startForMeWithCompletionHandler({connection, result, error in if ((error) != nil) { NSLog("%@",result as NSDictionary) } else { NSLog("god fucking dammit") } }) I'm returning "god fucking dammit" from this code. I feel like I'm some how mishandling the conversion of input from ObjC style to Swift.
I tested for swift and seems to work well. but I am worried if it is discontinued. or if there is some more developed than this
You just saved me a lot of work! Thank you very much :)
I submitted my crash logs. But I'm not about to go picking out pieces of code one-by-one until I can no longer kill the SourceKitService in an effort to narrow it down that far. Apple uses Xcode internally, so they're encountering the same issues, and I'm sure it will be fixed shortly. In the meantime, the 6.0.1 release has been stable all day. Not to mention, my code compiles fine - so I'm not about to go undoing my work and adding workarounds unless it's a compilation issue. I'll just wait for the 6.1.1 update.
It's actually Xcode 6.1 GM seed.
Sorry, here is the implementation of addAlien() (The formatting is not working correctly) As a sidenote, I don't think this is the root of the problem: when I comment out addAlien() inside the function causing the problem, the problem gets *worse*! Now, it crashes immediately at 101% CPU func addAlien(){ var alien: SKSpriteNode = SKSpriteNode(imageNamed: "rainbowMM") //alien.physicsBody = SKPhysicsBody(circleOfRadius: 22) alien.physicsBody = SKPhysicsBody(rectangleOfSize: alien.size) alien.physicsBody?.dynamic = true alien.physicsBody?.categoryBitMask = alienCategory alien.physicsBody?.contactTestBitMask = heroHitCategory! alien.physicsBody?.collisionBitMask = 0 alien.physicsBody?.usesPreciseCollisionDetection = true alien.yScale = 0.6 alien.xScale = 0.75 let moveObj = SKAction.animateWithTextures([fallSpriteTexture, fallSpriteTexture2], timePerFrame: 0.1) let repeatMovement = SKAction.repeatActionForever(moveObj) alien.runAction(repeatMovement) let minX = alien.size.width/2 let maxX = self.frame.size.width - alien.size.width/2 let rangeX = maxX - minX let position:CGFloat = CGFloat(arc4random()) % CGFloat(rangeX) + CGFloat(minX) alien.position = CGPointMake(position, self.frame.size.height+alien.size.height) self.addChild(alien) let minDuration = 2 let maxDuration = 4 let rangeDuration = maxDuration - minDuration let addsss = SKAction.runBlock({self.addScore()}) let duration = Int(arc4random()) % Int(rangeDuration) + Int(minDuration) var moveTheSprite = SKAction.moveTo(CGPointMake(position, - alien.size.height), duration: NSTimeInterval(duration)) var actionArray:NSMutableArray = NSMutableArray() actionArray.addObject(moveTheSprite) actionArray.addObject(addsss) actionArray.addObject(SKAction.removeFromParent()) alien.runAction(SKAction.sequence(actionArray)) if(gameOver == true){ playCrashSound() alien.runAction(SKAction.animateWithTextures([SKTexture(imageNamed: "brokenMeteor")], timePerFrame: 15)) alien.runAction(SKAction.moveToY(self.frame.height, duration: NSTimeInterval(duration))) alien.removeAllActions() allowMovement = false pixelman.removeAllActions() alien.removeAllActions() self.removeAllActions() alien.runAction(SKAction.moveTo(alien.position, duration: 0.0001)) alien.runAction(SKAction.moveToY(alien.position.y+50, duration: 0)) var bringUpScene = SKAction.runBlock({ var transition:SKTransition = SKTransition.crossFadeWithDuration(0.1) var gameOverScene:SKScene = GameScene(size: self.size) self.view?.presentScene(gameOverScene, transition: transition) }) alien.runAction(bringUpScene) } } 
7 days ago it was up for download as "beta 3".
By newest do you mean Xcode 6.1 GM or Xcode 6.0.1? I don't have the former, but the latter seems to work fine. My best guess is that they added the ability for initializers to return nil (like Objective-C can) which means optionals. Workaround: if let url = NSURL(string: "http://sheu.ru") { UIApplication.sharedApplication.openURL(url) }
I've experienced all these problems. Really annoying they labeled this a GM release. Anyway, ***I did find a temporary fix*** for when SourceKit is crashing constantly and you can't get any work done. Go to the DerivedData folder and delete out your projects folder and the generic Cache folder (it starts with an M) that's in there. Once that's done you should have SourceKit stop crashing, or at least crashing less frequently. Sorry I can't give more details, I'm on my phone. I'll try and update this when I get home. Hopefully Apple puts out a new build soon.
Thanks for sharing it! This is a greatly valuable educational resource. P.S. I &lt;3 Cocoapods
Try NSUserDefaults
Sorry didn't notice the date. It looks like it was caught in the spam filter and only just approved by the moderators here.
automatically how? none of the functions you listed are called by the system automatically, and you show manual calculation of 1/60 a second. this will never work as intended without using a display link.
I got it to work like this: (yeah i'm on Xcode 6.1 ) - seems that the exclamation mark was required right at the end ( ")!)" ) @IBAction func openSheu(sender: AnyObject) { var url : NSURL url = (NSURL(string: "http://www.sheu.ru")!) UIApplication.sharedApplication().openURL(url)})
Maybe you're looking for the `tintColor` property?
I have exact same issues 
Ok will do. I deleted what I originally had, but I will re code something and get back to you asap. Thanks again.
Here you go sir, import UIKit class FirstViewController: UIViewController { @IBOutlet weak var navBar: UINavigationBar! override func viewDidLoad() { super.viewDidLoad() navBar.barTintColor = UIColor.greenColor() }
Mostly the 3rd I notice, but I have 1 and 2 occur frequently too. Had to downgrade to 6.0.1 to continue... So annoying.
no the same bugs since 4.0...
If you want to do it "correctly", try to use GameKit. With it, you can report a GKScore. The score will be saved by GameKit and you get all of GameKit's other nice features (eg. competing with friends, global leaderboards, etc.). The downside is that it's significantly more effort to implement than just using NSUserDefaults, but you get a lot of advantages and it's not all that horrible all things considered. You can get started here: https://developer.apple.com/library/ios/documentation/gamekit/reference/GameKit_Collection/index.html#//apple_ref/doc/uid/TP40008303
Put the content inside yet another view, then use: [_actualContent setAlpha:0]; [UIView animateWithDuration:0.4 animations:^{ [_actualContent setAlpha:1]; } ]; to fade in. To get a bounce effect, use [UIView animateWithDuration:0.4 delay:0 usingSpringWithDamping: ... 
It is open source here: https://github.com/jstart/Terrific In this class: https://github.com/jstart/Terrific/blob/master/Terrific-Nearby/TodayViewController.swift Its formatted better on github, but look at the widgetPerformUpdateWithCompletionHandler method implementation. Look at this section: SGNetworkManager.sharedManager().categorySearchWithCategory("eat", locationArray: locationArray, resultCount: resultCount, success: { places in //Fade out current state if (!self.isEqualToCachedPlaces(places as [MKMapItem])){ UIView.animateWithDuration(0.5, animations: { for view in self.view.subviews { for subview in view.subviews as [UIView] { for subsubview in subview.subviews as [UIView] { subsubview.alpha = 0.0 } } } }, completion:{ _ in //Remove faded out views for view in self.view.subviews { view.removeFromSuperview() } NCWidgetController.widgetController().setHasContent(true, forWidgetWithBundleIdentifier: "spotngo.Nearby-Places") var placesData = NSKeyedArchiver.archivedDataWithRootObject(NSArray(array:places)) self.defaults.setObject(placesData, forKey: "nearby-places") self.places = places as [MKMapItem] //Add views with new state and fade in self.updateWithPlaces(self.places, animated: true) }) } completionHandler(NCUpdateResult.NewData) }, failure: { error in self.preferredContentSize = CGSizeMake(self.view.frame.size.width, 0) completionHandler(NCUpdateResult.NoData) })
sorry, couldn't resist refactoring :-) func isPlayingAI() -&gt; Bool { if gameType == nil || techType == nil { return false } else { return gameType! == .RealTime &amp;&amp; techType! == .Local } } 
:) Good point! Incidentally, TechType is an enum that doesn't inherit from Int (or any other types), so it doesn't have an == operator defined. That's probably why the code ended up written that way. Easily fixable, though, since it could be an int.
I've had similar problems occasionally in the past, and this kind of thing is usually caused by Xcode failing to pick up changes in some manner. Does a clean &amp; build make the problem appear for development builds? Also, this is the kind of thing that continuous integration is great at picking up. 
WOOHOOOO!! Downloaded, installed and it appears that sourcekit and auto-complete are working as expected! Let's hope its here to stay.
SourceKit will crash whenever the compiler would, so it's much more likely that the *particular* crashes you were running into were fixed. Still good news though :)
&gt; SourceKit will crash whenever the compiler would True, but it did crashed on code that would compile without crashing.
No, what I'm saying is you may have used the wrong code or used it in the wrong way, this means it'll compile but an error will still return. 
I agree overall, but having to use a switch statement just to check "if value is [x]" feels clunky. Is there a language feature I'm missing that makes it less painful?
would this be in viewDidLoad ? 
I've run your code line for line word for word and there is compile errors on the following lines: assert(data != nil, "Failed to read data from: \(path)") and let json: AnyObject? = NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.allZeros, error: &amp;err) I'm a beginner and have tried to fix with no luck. 
The tradeoff is visual "cleanliness" vs working code. You needed to have the ?s in many places for safety even with the implicitly unwrapped optionals, since they will crash if they're nil. The change is that the compiler lets you know where you need to be careful now, rather than you having to figure it out on your own. That said, the auditing of APIs for nullability is a work in progress, so you should absolutely file bugs with Apple if you believe something is marked as optional when in practice it actually won't ever be nil (or vice versa).
I'd advice against force-unwrapping optionals (using !) as it can lead to a crash in the case that it returns nil. If you are going to use it, make sure you check the variable first by doing if (url != nil) { ... url! ... } or just use the above example I gave you in my last comment.
Here's the [overlay](http://pastebin.com/Cb3GT0kB) Here's the [viewcontroller](http://pastebin.com/wqLx1QYb)
Yes, I'm having a trouble importing the dependencies of XMPPFramework. 'DDXML.h file not found'
Yes, I was already talking with him via an Issue thread. You can see, he just uploaded the code. However, it needs some help and it's not a Swift library, but a sample bridge that he tried and no longer seems to work.
I agree with the creator: &gt; Please keep in mind that this is not intended or recommended for production. Custom operators of any breed are ripe for misuse and abuse, and should be used with as much care and caution as you would something like method swizzling or complex macros. Fun to play with in a playground, but there's no way i'd use this in anything real. 
The files you provided hardly constitute a "project", but I dropped them into a skeleton iOS Game Project using SceneKit and supplied some stand-in assets to get it compiling. I was able to replicate your issue with the app pegging the CPU usage at 100% in the simulator on the end-game screen. Breaking execution at this point in the execution seems to drop into an infinite -[SKScene -update] loop. There seems to be an issue with the following line(s): var changePic = SKAction.animateWithTextures([play2, play1], timePerFrame: 0.001) That is *quite* an aggressive timePerFrame parameter; changing it to a more conservative 0.01 or 0.1 value results in the game being stable and repayable over and over through the end-game scene.
I've just come across the same thing. Just comment out the assert line, and get rid the the exclamation mark on data! in the second: let json: AnyObject? = NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.allZeros, error: &amp;err) I'm still getting my head around Swift myself, and I'm not sure what the ! does, but removing it like the line above let me get through the rest of the project.
I am having a problem as well, following the tutorial by the time I complete the steps outlined in the: "Exercise: Read quotations into memory when the app launches." and the next step is: "Inspecting the Quotations with Debugger" the code displayed in the screenshot does not match what is in the app delegate at that point. I can't seem to see any explantation of the missing code in the tutorial. The important part is the loading of the quotes into the positive/negative properties of the app delegate.
I was able to get past this point by altering my app delegate: func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool { // Override point for customization after application launch. // TODO: load quotations from JSON files let path = NSBundle.mainBundle().pathForResource("positiveQuotes", ofType: "json") println("positive quotes path: \(path)") self.positiveQuotes = loadQuotes("positiveQuotes") self.negativeQuotes = loadQuotes("negativeQuotes") // Assertions to make sure that the quotations are loaded. assert(positiveQuotes.count &gt; 0, "should load positive quotes") assert(negativeQuotes.count &gt; 0, "should load negative quotes") return true } func loadQuotes(filename: String) -&gt; [String]{ let path = NSBundle.mainBundle().pathForResource(filename, ofType: "json") let data = NSData(contentsOfFile: path!) var err : NSError? let quotes: AnyObject? = NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.allZeros, error: &amp;err) if let quoteResult = quotes as? [String] { return quoteResult } return [""] } I am pretty sure that the `if let` at the end of the load quotes function is the wrong way to handle typecasting, but I am still new 
yes.
hi, with that original code you gave, Xcode gives this error: '() -&gt; UIApplication' does not have a member named 'openURL' 
Thank you for the detailed feedback.
Thank you for the info!
 &gt;Awesome! It's really uncool to rub his nose in it, after he just admitted not knowing what that operator does. 
Are you crazy? I told him that I appreciate his reply, and his attempt to help me out. You just jumped to an accusation before neutrally inquiring with me about what my comment really meant. 
Better than before - at least my project does something similar to compiling. Still tons of SourceKit crashes though. Edit: Was happy too early, still getting compiler segfaults... yaaay Edit 2: If you get compiler segfaults, just try and try again if you've got nothing better to do. The fault just magically went away after attempting to compile the same project the sixth time. Also, be sceptical about compiler errors: The compiler informed me about compile errors, which I fixed (by explicitly specifying labels in a tuple which should have been optional in that case). After the first successful compilation, I could revert to the old code. Didn't seem necessary after all.
I had it not work in the past and never looked into it. Checking Xcode's list of known issues, this snippet potentially explains my confusion: &gt; The relational operator == may not work on enum values if the enum is declared in another file. &gt; Use !(x != .Value) instead of (x == .Value). (18073705)
You are absolutely right. I don't know why I created that parameter. I can't thank you enough for your help! That fixes the issue of when I hit the play again button it crashing, but I continue having the issue of CPU usage when the game is begins: the start button is hit, and Game.swift loads, and most of the time it works, but 20% of the time it hits 100% CPU and crashes. So much so that it never works on the IPhone 4. 
How do I upload the complete project?