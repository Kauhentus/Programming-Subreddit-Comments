After 2 years of storyboarding I made a switch to code for my new project. And I completely agree with you even though I work alone. Apart from that, I also find some other advantages. Reusable design component. Inheriting UI components. Better debugging. 
Because when you call a mutating function on a value type, it’s not actually mutating, it’s creating an entire new copy of the value type and changing the value you’re ‘mutating’ on. Makes perfect sense that you shouldn’t mutate the contents of a collection with new entries while iterating over it. If you want to mutate like this - use map() and write a functional version of save that returns a new value, instead of a mutating func.
You are assigning to the variable 'm' and MyDataModel being a struct you get a copy. When you call save() on it, the copy in the variable 'm' is mutated, not the original in the array. On the other hand ```dataModels[index].save()``` mutates the variable inside the array. In this specific case it makes more sense to me that the data model is a class, instead of a struct, but there are instances where the above is a real issue.
At my work we use storyboards but I create views programmatically for hobby projects. The advantage of the latter is that it makes testing and routing easier. There’s nothing wrong with using Storyboards, though. It makes it easier to visualise and compose your views which is a very real advantage.
A formal education is absolutely not required to be a great programmer. Additionally, Computer Science bears little relation to the day to day work of a programmer.
You’ll be perfectly qualified to get a job in software development if you start building a github portfolio. 
[removed]
If you're really able to dedicate three hours a day to learning Swift, then you should be able to contribute meaningfully to iOS teams in about six months – that's well over 500 hours of learning, which is a _lot_ for a junior developer. I built a bundle of books that's designed to help you get started with a career building iOS apps: [the Swift Power Pack](https://www.hackingwithswift.com/store/swift-power-pack): - Hacking with Swift teaches you the main concepts of Swift and a huge amount of the frameworks in iOS. - Advanced iOS: Volume One teaches you more advanced techniques such as speech recognition, Siri integration, and iMessage apps. - Pro Swift takes you further into Swift with more advanced techniques like operating overloading, generics, and POP. - Swift Coding Challenges helps you test your Swift knowledge with the kind of problems that are regularly used in interviews. - Objective-C for Swift Developers helps transfer your Swift knowledge to Objective-C, which is an older language that is often found in enterprise apps. - Beyond Code teaches you important skills outside of coding, including regular expressions, the command line, and Git source control. Combined, those books really will take you to junior developer level and put you in a great position to get a job making apps for real. The first book – Hacking with Swift – is available to [read online completely free](https://www.hackingwithswift.com/read) so there's no excuse not to get started :) 
This sounds incredible! Have you had complete beginners with no coding experience go through your books and then get jobs as junior developers? I’m in an into to swift course at community college, and I’m considering concurrently going through your curriculum. 
Many, many people have gone through the courses and gotten jobs as developers. In fact, just last month a Polish journalist who had been reviewing my books for a magazine decided he preferred coding, and got a job as a junior developer. He went a lot further (mostly because he was writing about the books!), so he read Hacking with macOS, Hacking with tvOS, and others, but those are bonus extras rather than something you really need. You might enjoy following [@audreycode](https://twitter.com/audreycode) on Twitter. She's a young lady who started doing Hacking with Swift back in September alongside all her school work – she's about four months through now, and making some really advanced projects.
Not to take anything away from the author, since he does a good job, but he is self promoting here. And to be honest there are (IMHO) better resources around for starting out, which give you a better understanding of what and why are you doing stuff instead of just repeating. You should check [Stanford CS 193p for iOS 11 and Swift 4](https://itunes.apple.com/us/course/developing-ios-11-apps-with-swift/id1309275316) and [for iOS10 and Swift 3](https://itunes.apple.com/us/course/developing-ios-10-apps-with-swift/id1198467120), which is pretty current besides a few things. Somethings are repeated between the two but the demos are interesting. After those courses you should have a solid foundation to go and study more in depth the areas you are more interested in and to study the apple documentation, which is great. 
In Swift your IBOutlets are either going to be optionals or implicitly unwrapped optionals. I would consider both of these less clean than the programmatic alternative of non-optional views.
I recently pushed my company to stop using storyboards, here's a quick summary of my reasons: 1. Code layouts are easier for large teams to work on. * Mostly avoid difficult merge conflicts. * Allow more reusable components. 1. Code layouts provide compile time guarantees for initialization, and navigation. * Storyboards require loosely typed strings. * There are 3rd party solutions that create string constants for you, but that adds complexity, and a dependency. 1. Compile time checked dependency injection is possible with code layouts (it's not with Storyboards). * Storyboards can still do dependency injection, but it's up to the developer to ensure everything is satisfied at runtime. If a new dependency is added, you will need to manually find every place you create that storyboard and satisfy the new requirements. 1. Storyboards make it easy to violate the SRP * ViewControllers need to inject services into other ViewControllers * You implicitly have routing in the View layer All these reasons make writing unit tests significantly easier, and more reliable So far almost everybody has agreed the change has been very positive. A lot of these problems can be avoided in smaller teams, and for smaller projects. But for us, it pretty much became unmanageable.
If you're slapping something together for fun and you like using xibs/storyboards, use 'em. If you're planning on working with others or maintaining something over the long term do yourself a favor and do the views in code.
People telling you just to read a book probably never went to proper onsite course. I just finished 3 months course and there is no way to will learn all this stuff from books in this amount of time. Find a good program, they are very much with it. Reading books is necessary either way, this way you will actually understand what you are reading. 
Check out LaunchCode, if its in a city that your in, it might be the opportunity your looking for.
Because `MyDataModel` here is a `struct`, it's copied by value into `m` as a constant, `let` over the iterations. Were `MyDataModel` a class, it would save.
I don't have any certificates or diplomas. I'm getting personalised emails and generic recruiters increasingly more over the last 2 years. My activity [in opensource](https://github.com/vapor/vapor/tree/beta/) and [on GitHub](https://github.com/Joannis) in general has caused that. Rather than educating using a school or teacher in a more traditional sense I've taught myself a lot by developing opensource projects. When I started on opensource [almost 2 years ago](https://github.com/OpenKitten/BSON/commits?author=Joannis&amp;since=2016-01-22T23:00:00Z&amp;until=2016-01-23T23:00:00Z) I learned a tonne about communication with [fellow contributors](https://github.com/OpenKitten/MongoKitten/issues/1) [(and community members)](https://github.com/OpenKitten/MongoKitten/issues/13). This really helps a tonne in IT and work in general. Once I got the basics of maintaining a project down and [communication improved](https://github.com/OpenKitten/MongoKitten/issues/27), people with [different](https://github.com/OpenKitten/MongoKitten/issues/48) or [more serious requirements](https://github.com/OpenKitten/MongoKitten/issues/34) came along. I learned a lot about writing stable, documented and performant code. And as my project(s) grew, as did I. Learning programming on a school is not for everyone, and learning it by yourself from a book or opensource activity isn't for everyone either. Learning programming without a study is definitely possible, though.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [vapor/vapor/.../**** (beta → 376b657)](https://github.com/vapor/vapor/tree/376b6573cb460dde4a3bc02da63799659967f761/) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply drtjqzx.)^.
Thanks!!
And you’re right. If MyDataModel was a class, this would work as expected. The only issue with making a data model a class is accidentally reference sharing across multiple parts of the app.
I can vouch for this guy – he's pretty good ;)
I enjoy writing the UI in pure code but there aren't as many resources out there. Does anyone know of any good resources for writing UI in code?
I my Work we programming without Storyboard. I using a long time Storyboards and than ein recognize Storyboards sucks. You have many merge conflicts if you using Storyboards together. And the loading time is fuckt me also up. Well for me i can say just using Snapkit or Anchors and all is fine.
OK, fair point. I missed that. Looking at it again, though, does someone have a real-life example of this? This sounds like an XY Problem. In order for this to be an issue, your program needs (a) a value typed data model, (b) in a collection of items you want to all update, (c) whose only update method has both local and remote side effects. I've written primarily in Swift for a few years now, using NSDocument and also several different database backends, and I rarely have even 2 of these 3 conditions met. The toy example here defines a value type, but uses it more like a reference type. The suggested 'func saved' extension wrapper makes it more value-like, but if it were value-like from the start, you wouldn't even need that. As Linus Torvalds once said (though in his standard passive-aggressively insulting way), you should get the data structures right, first, and the code will naturally fall into line. It's always going to be possible to define a data structure so counter to the grain of the language that there isn't a reasonable way to manipulate it.
Here you go duder! ``` let frameworks = Bundle.allFrameworks for bundle in frameworks { print(bundle.bundlePath) } ```
&gt; Oh you changed the placement and order of those buttons. &gt; &gt; Storyboard: Fck you. 789 lines changed I haven't seen this happen since Xcode switched to the shorter XML format several years ago, so I tried it just now. I made a new project with 2 buttons in the standard location (bottom-right corner), and committed. Then I swapped them around, fixed up the layout constraints, and committed again. Total changes: 2 chunks, for changing 2 of the `&lt;constraint ...&gt;` lines. That seems exactly analogous to doing it in Swift or Objective-C, only it's in declarative XML rather than imperative source code. The only aspect of IB that I see causing this mess is the generated IDs. True, if you delete everything and start over, the changesets are going to be a mess ... so don't do that.
Apple's API documentation? You just instantiate the objects like any other type, rather than dragging pictures of them onto the Interface Builder canvas.
I think this is a bug with interface builder, since Xcode 9 any labels with lines set to 0 seem to bug out the preview, at run time they work as expected, its extremely frustrating 
+1! There’s definitely some iOS / Cocoa / Swift meet ups in Chicago, and several of the companies represented there do unpaid internships/apprenticeships at their devshops. But you gotta meet’em! This is definitely a great place to start, and since OP’s way ahead of the spring rush of kids looking for summer opportunities, they’ve got decent odds of meeting someone who has a connection that can help.
This example isn't really contrived at all. It's something I ran into in real code, which is why I decided to post the discussion. As for your 3 conditions: * Value typed data models are actually really nice to work with. They present some unique challenges (like this one), but I think the benefits far outweigh the challenges. This [WWDC video](https://developer.apple.com/videos/play/wwdc2015/414/) does a good job of explaining it, but in short, they make a lot of dubious mutability topics clearer, and they're safer to work on across multiple threads. * It's common to have a collection of items to be updated if you're working with anything in batches. * What data model doesn't have both local and remote side effects on being saved? Imagine that your server performs some kind of sanitization on input data. You send a data model to your API, and the server responds with what was actually saved, which may be a slightly different object. If your data model doesn't update itself to reflect this, you're now out of sync with the server, and what the user sees in a UI may not match up with what's actually there. And that's just in an iPhone app. I can imagine a lot of situations in which you'd want the data model to update itself after being saved in server side programming as well.
Thanks for the feedback! That's what I have in my 5th code listing with the `saved()` function.
[removed]
&gt; Because when you call a mutating function on a value type, it’s not actually mutating, it’s creating an entire new copy of the value type and changing the value you’re ‘mutating’ on. No. Copy-on-write is a behaviour implemented by some common value types (Array and String probably being the most prolific ones). Value types in general are changed in-place. Using map should work well for small entries, but if you had a big struct that did not implement copy-on-write, should work nicely, while avoiding a bunch of unnecessary copies. &gt; Makes perfect sense that you shouldn’t mutate the contents of a collection with new entries while iterating over it. Inserting and removing elements would probably lead to code relying on non-obvious behaviour, but changing the individual elements is totally fine imo.
&gt; My question is, why isn't this included with Swift? The current guidelines for what gets included in the standard library are pretty strict. One of the questions commonly asked is "does this *need* to be in the standard library", which is not the case here. If usage of a function like this was widespread enough, it might be considered for inclusion, but for now I think implementing it yourself is fine. &gt; It's a really simple thing to implement manually, which isn't a problem, but does anyone feel like there's something wrong with an approach like this? I'd love to talk about it if anyone has any input. I like the idea, for some use-cases this could be pretty useful. I'd consider changing the name to something that reflects the mutating nature though, maybe `mutateEach`?
But even when I’m running it it doesn’t show. I wish I stayed on Xcode 8 before finishing this book because it’s really frustrating 
I agree, I really like the fact that you can have a class with "private let settingsButton = UIButton()" and stuff like that. Except what you get back is a huuuuge amount of code doing very repetitive things (creating buttons, setting up constraints etc). View controllers become very bulky if you're doing everything in code. 
One thing I find that helps is separating business logic from my view controllers. Generally my VCs have just layout code in loadView and bindings to those views from a ViewModel passed in via init. Anything very repetitive goes into a custom UIView subclass. 
Plus you can instantiate your views/view controllers with relevant information passed via constructors, e.g. `UserViewController(user: self.selectedUser)`. With storyboard and .xibs initialization like this is not possible and it ends up getting in the way sometimes.
I can guess that you created the segmented controller in a Nib or Storyboard. The component has a property to set which index is going to be selected by default, so you can change it there, or simply set it by code when your view loads. 
How may I change this component? Or, if that’s too difficult, how would you recommend that I change this by code? 
How may I change this component? Or, if that’s too difficult, how would you recommend that I change this by code? Thank you. 
Visual way, enable the **selected** check in the index you wish to have selected by default: https://imgur.com/ajzgrhC And by code, simply set **yourSegmentedControl.selectedSegmentIndex = 0** in your **viewDidLoad** Hope that helps you!
I agree with applishish that this sounds like an XY problem as you have pointed out this is a problem in real code. It seems to me as a code smell that your data models have the capability to persist themselves. Somehow they are getting a reference to, and interacting with, both the network and disk and in the process mutating themselves. Having an additional layer (eg. MyDataModelController) that does these tasks and operates on its own array seems to me as the cleaner solution than converting the models to classes (which is also a valid solution, as others have explained). This solves your issue as the new controller will have its own save function, not the models themselves, which mutates the models, sends the API request, save to disk etc. the models that actually need persisting, and then updating its own array to reflect the new state. Sure, you will still have to have something like this during it, but it will be self contained and only needed once: dataModels = dataModels.map { model in var model = model model.saved = true return model } Then the consumers of your data models can get them through this new layer when needed.
Will attempt this now, Thank you ever so much! 
No problem! Keep a look in the inspector when working with Nibs and Storyboards, also, any checkbox or option that you see there, has its counterpart programmatically. 
I’m mostly self-taught, and I’ve built enough stuff that, one way or another, it’s getting pretty hard to use a computer without using something that I’ve contributed to at least in a tiny way. It’s definitely possible, it’s just a lot of work.
About 30% of the programming workforce lacks a degree in programming. You will be just fine.
What's wrong with Java?
I hate storyboards. They are huge, takes forever to open, hard to work on with other devs, hard to copy to other projects. Xibs are great. One for each VC, clean. Combine xibs with code and you're good to go.
The latter method is the correct way to animate transitions between view controllers.
And what about the dismissal of the controller? Can I use the same UIStoryboardSegue?
I was in a similar situation, and I think you're not missing anything. This is the way it is. Or we are both wrong, of course. `NSTextStorage` now requires its `string` to be a Swift String instead of `NSString`, which sounds nice to interface with text storages from other Swift objects, but is a hindrance for the rest of the text storage API. In the end you and the framework cast from Strings to `NSString` everywhere, back and forth. Even when you work with Swift String wherever possible, you end up with creating `NSBigMutableString` (private) in memory inside the `NSLayoutManager` behind the scenes, which could be avoided if you wouldn't have to pass Swift Strings around all the time. But it's unlikely you are working with Swift String most of the time and cast to `NSString` as early as possible because you need to consume `NSRange`s from the API, and you want to avoid the insane cost of character index offset counting. To me, it seems, the situation right now is not outright broken, but the framework is not in a useful state for production apps, either. 
Last year I wrote a book on Kitura, and tomorrow I'm releasing my book on Vapor ([both here](https://www.hackingwithswift.com/store/server-side-swift)), and it's been an interesting experience. I'll probably write a blog post with more details, but broadly: - Kitura uses Stencil for templates, whereas Vapor uses Leaf. If I had to choose, I'd go with Stencil – it's very similar to other template engines you might have tried, and offers a wider range of syntax. - Both Kitura 2 and Vapor 3 have been updated to take advantage of Swift 4's `Codable`. Kitura's use of codable routing is very clever, but likely only to be useful in fairly simple CRUD applications. Vapor 3's use of codable is very impressive: most things can be encoded/decoded, which makes (e.g.) parsing forms a cinch. - Vapor 3's use of async makes for a steep learning curve, but once you understand it – and realize it's endemic in the platform – you learn to lean on it more and more, and appreciate how clever it is. (Leaf integrates very tightly with it.) - Both Vapor and Kitura have a database abstraction framework, although they are quite different in how they work. Having used both, I can tell you Fluent (Vapor's solution) is better. It takes a little setting up (although this is significantly better than it was in Vapor 2), but once you're done it's almost magic. - Kitura supports things like Facebook/Google/GitHub authentication out of the box, which solves a whole category of problems. There are third-party frameworks for Vapor, but I don't know how well supported they are. - There are some variances around the way they handle routing. Kitura offers things like regular expressions in routes, as well as a syntax that comes more naturally to folks who have used routing on other platforms. Vapor on the other hand does things in a more type-safe, albeit less flexible, way: you specify types right in your route. (Flip side: this lets you use Fluent model IDs as part of your routes.) - Both Vapor and Kitura have command-line apps to help you create quickstart projects easily, but Kitura's version likes to generate projects that are significantly bigger. That might be useful for some, but I find it an annoyance. - Both Kitura and Vapor have cloud solutions for you to deploy to. I haven't used either, but there's an old saying "no one ever got fired for choosing IBM." All of that is straight off the top of my head; like I said, I'll probably write a more considered blog post with examples and so on. Some of the time it's six of one and half a dozen of another, but for me there are some clear winners: Kitura for templating, Vapor for database access, Kitura for simple routing, Vapor for being able to read/return practical any data model, Kitura for authentication, etc. One stat you might find useful: the Kitura edition of my book is 78,000 words, whereas the Vapor edition of my book is currently 67,000 words – for the same projects. That says a lot about how much work Fluent does for you, and how good Vapor is at accepting/sending back complex data.
Really looking forward to the Vapor 3 Edition ... my goal for next year is to switch over to Full swift on iOS and web 👍👍
`UIViewControllerTransitioningDelegate` (could be `self`) to return a `UIViewControllerAnimatedTransitioning` conforming object from `animationController(forPresented:…)` and `animationController(forDismissed:)`.
Came here to say Vapor because /u/twostraws is releasing a book about it in a few days... guess I’m too late :( happy to hear it will be out tomorrow :)
Thank for the very full reply. I actually brought your Kitura book back in July! Just updated it for Swift 4. Would recommend it to anyone looking for a full explanation of the framework. With the exception of Vapor's upcoming async-ness sounds like there isn't too much difference. It's very revealing that for someone who's gone in deep investigating both Kitura &amp; Vapor, you have not even mentioned Perfect - despite it allegedly performing best in benchmarking: https://medium.com/@rymcol/updated-benchmarks-for-the-top-server-side-swift-frameworks-vs-node-js-9da4a0491eca Having had another brief play with Vapor, Kitura &amp; Perfect, I'm going to give Kitura a go for now :)
Make sure you use the crossgrade offer that was sent out to everyone who bought the Kitura book – it lets you pay $10 to get the Vapor book as well! (Or if you have the Platform Pack, the Vapor book is free.) Don't underestimate Fluent. Some of the chapters I'm converting from Kitura are almost "select all &gt; delete" because Fluent does so much work for you.
I haven't worked with the server frameworks in a while, but I was playing a lot with Perfect when it first came out. Super friendly people working on that team, they even sent me swag because i wrote a couple tutorials about how to build a server 
Thanks, think I'll do that and wait until tomorrow to checkout your Vapor 3 book :) Have lost faith in IBM trying to get up and running with Kitura. (Ideally I'd like to find out before downloading bits of software that they're no longer supported, not from searching support forums after failing to log in: https://developer.ibm.com/answers/questions/413589/sign-into-ibm-cloud-application-tools-failed/)
Do you guys think server side swift has a chance of becoming popular? I use Node at work and Go for fun. But swift in my opinion is the most enjoyable language to write code in.
lol this topic is like a weekly discussion on this sub.
Just pre-ordered this book. Waiting for it desperately! 
You have an uncaught exception coming from *somewhere*. Xcode will allow you to create an exception breakpoint that should at least let you see who is throwing it. If that fails, try rerunning with a symbolic breakpoint on `objc_exception_throw`.
You can look for cloud functions on fire base and trigger the push notification once a new message is added, you need to read the user’s token and send the payload to that specific user 
Big enterprise stuff, no. But for smaller shops and personal stuff absolutely. It's already grown quite a bit in the last couple years and I love to see all the work being done to keep the frameworks updated with features like Swift 4 codeable 
&gt; Last year I wrote a book on Kitura, and tomorrow I'm releasing my book on Vapor (both here Absolutely fantastic.
Any brief, high-level thoughts on Perfect? 
The Platform Pack is only $240 if you buy all the books individually; it's $150 as a bundle. I don't have any plans to make a bundle of those two books, I'm afraid – each pack I do adds extra admin work with all the updates.
I'm afraid not; it doesn't have much interest for me.
Typo in your first paragraph under Methodology: The biggest change **form** the last benchmarks I do this all *teh* time too. Question: &gt; Both Kitura and Zewo have had issues in the past building with spaces in their absolute file paths. If they are URL escaped, does that compensate for the " " in the file path?
No prob. Thanks for your time. I certainly understand the demands this adds. 
It should be fine if you place the image in a view and put that in the stack view. 
Regarding templating, I’d recommend against generating HTML server-side at all, and going with a client-side solution like Angular instead, with the server just acting as a JSON API. That cleanly separates your business logic and your UX into two different machines, makes it easy to write interactive app-like web sites, reduces your bandwidth consumption and server load, and simplifies developing both web-based and native clients talking to the same backend.
Has a chance? Sure! But it’ll take a lot more community and some large players investing in the ecosystem to make it happen. 
Now it works! I added the image view and the filename label to a view and set the priorities of the constraints. Thank you!
One thing to mention - the benchmarks aren’t always exactly real world. And by all accounts Vapor 3 should blow everything out of the water
If it _isn't_ significantly faster, /u/joanniso will be very sad indeed :)
Perfect for backend? Not sure what that is. Soon to start on backend for a new project, I'm interest to hear about your stack.
Client wants another "Uber-like" app (not related to driving) so I've been working on that. I've also been messing around with integrating React Native with custom Swift classes.
The short answer is Metal can’t handle NSStrings directly. The longer answer is you need to be clear on what you expect to do with the GPU. GPUs are very good at floating point math and have many parallel execution pipelines. If you can distill your “code signing” to a broad parallel set of floating point operations, then you may be able to achieve a performance gain. Since you’re dealing with string data in your function, you’re probably not at a good spot to offload stuff onto Metal yet.
&gt; Both Kitura and Vapor have cloud solutions for you to deploy to. I haven't used either, but there's an old saying "no one ever got fired for choosing IBM." I'm not sure if you're taking that overly literally, but the "IBM" of hosting is, of course, AWS.
There's not going to be a "winner" among the current crop. That's not how emerging technologies work. (It's like asking if Zope or TurboGears was going to win. Yeah ... not so much.) They're all going to be moderately popular amongst themselves, and not terribly popular outside the Swift community. 
Perfect is a swift on server framework, that allows you to make endpoints. Some benchmarks said it was the fastest. My stack is Perfect on a Ubuntu server, and MySQL database server. Then URLSession on the client.
This past week I tried out Perfect and Kitura writing the hello world of web frameworks - a simple blogging engine. ‘swift build’ got stuck in infinite loops at various points for both, like during Kitura-Mustache, HeliumLogger and Perfext-CZLib-src. I stayed with Kitura because it eventually got thru Mustache and I switched to SwiftyBeaver for the logging. I now have my engine up and running on Kitura. While working on this I was looking at docu and tutorials for both. I will try Vapor next. 
I wonder if it's even "string" data. It's been a few years since I've used C++, but in C, "char" isn't so much "character" as "really tiny integer (which happens to have an alternative literal syntax)".
I have been trying for 2 days in a row. The picture shows the screen grab of Debug -&gt; View Debugging -&gt; Capture View Hierarchy. The innermost boxes are labels, text fields and buttons, whereas the outer boxes are nested stack views. As you can see, the first layer of outer boxes are aligned left perfectly. But, to the right, the first and third boxes reach upto the edge of parent view, whereas the second box gives about 20 px. I had set 20px as leading and trailing for all the 3 boxes. But the first and third boxes are behaving oddly. What I want is the same alignment as that of second box. I have not set any width constraint for these boxes. What am I missing here? PS: This auto layout alignment is taking so much of my time. If you have any better way of creating forms faster, I would appreciate the information. I am targeting iPads only and not iPhones. In the form given in screenshot, I am using a series of labels, text fields and buttons in a nested stack view.
No, it won’t create new instance. static properties are created once per class. Also they are created lazily so they are created at the first time they are accessed. 
thank you! 
you could also use a fileprivate var—perhaps less confusing than static which is a C-ism
I’ve been using Vapor 2 for an important side project (my wedding website!) and it’s been awesome. I’ve learned a ton from the community and they have been really supportive. Definitely looking forward to Vapor 3.0, as well as all the work put in by other Server-Side communities!
Completely on point, I really won't allow our performance to be less.
Question is about singletons. Using statics is the way for having singletons in Swift. Not sure what would fileprivate var help in here
Thank you for the tip on following the Twitter user. It definitely helps seeing others going through the process and give pointers. 
Swift class type properties are "a C-ism", even though it doesn't have classes? Huh. Maybe we should stop using "Int" and "Void", too.
You have to use the UITextFieldDelegate method textFieldDidEndEditing. In viewDidLoad(): [YOUR TEXTFIELD].delegate = self. Then, make sure to put this after your view controller class name class [YOUR VIEW CONTROLLER NAME]: UITextFieldDelegate Then, in the func textFieldDidEndEditing method put this: [YOUR LABEL].text = textField.text Sorry for the text format, I’m on my phone.
In terms of popularity, probably Vapor. But I personally would bet on Perfect, in terms of performance and just having a solid foundation for fast robust code.
Just finished another Pluralsight course. It is the third, final part of the *Design patterns in Swift* series. See https://app.pluralsight.com/library/courses/design-patterns-swift-behavioral/ You can watch this course and the previous two parts if you have a Pluralsight subscription.
The specs are certainly enough, and both screen sizes are likely to be fine. As you grow in your iOS skills, you might find the 13" a little restrictive when it comes to designing your interfaces. I use the 15" Touch Bar model, and it's perfectly fine for building apps.
What Swift course are you taking 🤔 I’ve been learning iOS development myself over the passed 2 years but I’m not making as much progress as ide like haha so I think I should take a course 
So Swift surprisingly isn’t in my degree plan or major, however my university has partnered with CodePath which offers free programming courses to students (Swift being one of them). I’d definitely check on CodePath’s website to see if they offer courses at your university or in your city. Besides that, another really good resource is Lynda (online courses). Hope this helps!
Thank you amigo I will check out CodePath! I’ve been really deep into RayWenderlich’s tutorials they help a lot but yeah I think I just need to go to a class 🤣
/r/AppleWhatShouldIBuy
Thanks, didn’t know that was a subreddit. Though since I’m using the MacBook primarily for Swift I think this subreddit is also appropriate. 
Happens to the best of us!
I'd suggest the 13". It's definitely powerful enough for most Swift projects and lighter/easier to carry than a 15". As a student I am assuming you will have to carry your laptop around and I'd consider portability a big plus then. You will also save some money. By the way, the touch bar is completely useless in my opinion.
"Did you try turning it off and on again?" :-D
For a second I didn't see which subreddit this was and was going to ask you to share.
One of the more frustrating things is when you have a whole bunch of code from different sources and you have to debug things you didn't write. I guess it more an issue now with Swift/ObjC, but it's been around long enough the most issues are 'known' issues. What's worse is when you're under the gun to get something done an have to debug someone's code.
Restarting Xcode is always my shameful “did you try it yet?” “...uhhhhh please don’t solve the problem... iuuuuuhhhjhjjj..”
That’s weird, my version of Xcode has a feature that makes it restart at least once a day ^/s
Worse is that the keyboard on the new ones is pretty bad. 
Been there brother... Stay strong!
Something else to note: `sharedInstance` *cant’t* be nil. You’d need to make it an optional (i.e. of type `TheOneAndOnlyKraken?`) for this to be possible.
[removed]
Welcome to iOS development.
Look into [CS193P](https://www.youtube.com/playlist?list=PLPA-ayBrweUzGFmkT_W65z64MoGnKRZMq)
Xcode is written by satan with only one objective: work like shit and piss the hell out of everybody. If you think Xcode is amazing you have not used it enough. Give it time and return here in one year.
This was my opinion until I started Android development. Compared to that, Xcode is a gift from heaven.
Make sure you have 16 GB of RAM and the biggest screen you can get. The Touch Bar is useless bullshit.
over the past* 2 years. as I'd* like Come on. This is grammar school level English.
the new one* is pretty bad.
The screen is way too small to do productive work in Xcode.
Hey thanks for pointing that out 👍
Both of those are more than fine. 
Axort's reply is correct, but I might put the delegate implementer in a separate object that the view controller weakly owns. The initializer would take the label and text field. This prevents view-controller bloat and helps testability. That said, I have written view controllers that implement ten protocols. 
Good point. It’s also not copy/paste safe.
Just to make sure I understand, it sounds like you're trying to present a view on mobile that appears "not" full screen, similarly to how a `formSheet` appears in a horizontally regular environment, so def let me know if I'm wrong. &amp;nbsp; It's tough to tell what exactly is going on from the three lines of code you posted, but from what you wrote, I'm assuming `self` in the first code block is a different object than `self` in the second block (presented VC and presenting VC, respectively). It's also unclear how you're setting the alpha, what object you're setting it on, and when you're setting it. If the _presenting_ VC is defining the presentation context, and you're presenting a VC over the current context, and you lower the alpha of the _presented_ VC, then expected behavior is for the _presenting_ VC's underlying content to be visible behind the _presented_ VC. &amp;nbsp; If you could post additional, more comprehensive code - or even better, a link to a repo holding all of the code - it would be significantly easier to help you figure out why your code isn't working as expected. As a side note, I'd also recommend taking a look at [Custom Transition Tutorial](https://www.raywenderlich.com/173576/ios-animation-tutorial-custom-view-controller-presentation-transitions-3), since it will both expand your understanding of how custom transitions operate in general, and in particular will allow you to build custom transitions as soon as the native styles don't fit your use case.
I have a Firebase project I was working on not too long ago. Did you add an observer to the values/table you’re looking for? That’s what I remember doing. If you set up the methods right for each action in Firebase, then data is updated automatically.
Why not just create your custom view and add a custom transition to display it the way you want?
We can't really help you if you don't provide any existing code
Here's what I have so far.. this works for retrieving the data and posting it to the tableview.. func fetchData(){ refHandle = ref?.child("caddata").observe(.childAdded, with: { (snapshot) in if let dictionary = snapshot.value as? [String: Any] { let event = Events() event.setValuesForKeys(dictionary) self.eventsList.append(event) DispatchQueue.main.async { self.myTableView.reloadData() } } }) }
Apologies, i've edited the original post.
I use a 13'' MacBook for working in Xcode and its completely fine. The portability of the 13'' makes it entirely worth it.
It works fine for me (mostly). I’ve been to tinkering with development on Apple platforms since OS X 10.0. In my experience, Obj-C development is pretty universally silky in Xcode and Swift dev got a lot easier when how Swift “wants” to be written finally “clicked” in my head. From what I’ve observed, here are he “rules” for getting good performance out of Swift dev in Xcode: - Don’t chain optionals more than a couple levels deep (e.g. `foo?.bar?.baz?.doSomething()`) - Don’t nest blocks more than a couple levels deep (you should be avoiding pyramids of doom anyway) - Don’t lean heavily on autocomplete to hunt down the function/property/etc you’re after. Having Dash open with UIKit docs on a second screen is a massive boon here For non language specific stuff, I avoid storyboards altogether and will only use XIBs up to a certain point of complexity, after which I just write the VC out in code. XIBs with tons of views/constraints and most storyboards will slow IB to a crawl. I agree that Apple has dropped the ball here and needs to improve things badly, but it’s possible to make Xcode workable and even pleasant. In any event, I’ll take it any day over the constantly-changing convoluted build chains web guys have to put up with on a daily basis.
I'll have to try out that tutorial, thanks for the link. I tried to explain this as well as I could, but I know it is hard to figure it out without the full code. There is a lot more code to this that is irrelevant to this question, and I don't have a repo link, but I am doing exactly how you described, and when I lower the alpha of the presented view controller, I am not seeing the controller behind it. I figured maybe I was setting the context wrong or something. Might just have to go with the custom transition, but I figured this way would be much simpler. I'll try to post just the code relevant to the question. Here is the presenting vc: class ChatsTableViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, AKSideMenuDelegate { override func viewDidLoad() { super.viewDidLoad() self.definesPresentationContext = true self.navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(handleNewChatRoom)) } @objc func handleNewChatRoom() { let vc = CreateChatRoomViewController() present(vc, animated: true, completion: nil) } and here is the entire code for the vc that is being presented: class CreateChatRoomViewController: UIViewController { let mainView: UIView = { let view = UIView(frame: CGRect(x: 0, y: 0, width: 200, height: 100)) view.translatesAutoresizingMaskIntoConstraints = false view.backgroundColor = .black view.layer.cornerRadius = 30 view.clipsToBounds = true return view }() let textField: UITextField = { let field = UITextField() field.translatesAutoresizingMaskIntoConstraints = false field.placeholder = "Enter Chatroom Name..." field.backgroundColor = .white field.textAlignment = .center return field }() let createButton: UIButton = { let but = UIButton(type: .roundedRect) but.translatesAutoresizingMaskIntoConstraints = false but.setTitle("Create Chat Room", for: .normal) but.backgroundColor = .red but.tintColor = .white return but }() override func viewDidLoad() { super.viewDidLoad() self.modalTransitionStyle = .crossDissolve self.modalPresentationStyle = .overCurrentContext self.view.alpha = 0.5 view.addSubview(mainView) setupView() } func setupView() { mainView.addSubview(textField) mainView.addSubview(createButton) mainView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true mainView.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true mainView.heightAnchor.constraint(equalToConstant: 200).isActive = true mainView.widthAnchor.constraint(equalToConstant: 300).isActive = true textField.centerXAnchor.constraint(equalTo: mainView.centerXAnchor).isActive = true textField.centerYAnchor.constraint(equalTo: mainView.centerYAnchor, constant: -50).isActive = true textField.heightAnchor.constraint(equalToConstant: 40).isActive = true textField.widthAnchor.constraint(equalTo: mainView.widthAnchor, constant: -40).isActive = true createButton.centerXAnchor.constraint(equalTo: mainView.centerXAnchor).isActive = true createButton.topAnchor.constraint(equalTo: textField.bottomAnchor, constant: 50).isActive = true createButton.widthAnchor.constraint(equalTo: textField.widthAnchor).isActive = true createButton.heightAnchor.constraint(equalToConstant: 40).isActive = true } }
Never done custom transitions, but might be time to learn. Anyways, I figured the way I was doing it would be much simpler, less work, but I just don't know the proper way to do it.
I prefer to keep actual JSON in my test bundle and deserialize it to create a model instance. I also expose non-JSON initializers for mocking when I'm testing other components with the model.
Drag a new button and connect it to your action and see if print fires. This happens to me all the time. Usually it's something wrong with my hierarchy. The button is probably behind your view or something. 
Same problem unfortunately, the uibutton shows on the simulator and blinks* when pressed but no action /-: 
Why are you presenting a view? Maybe I can't understand what are you trying to achieve, but i would add a subview and animate it the way I want. 
I'm presenting a view controller, not just a view. Sure, inside the vc is basically just a view, but I made it a separate controller and I'm presenting that.
Dows the correct view own that xib? Usually if it makes the outlet action it does. Is outlet ownership of th button (or other elements) working?
They have a pretty quick learning curve, the beauty is you can reuse said transitions elsewhere if you want the same effect with different views.
Fuck your whole family Annamite. Your whole annamite family and your own kind must be hung and gassed alive. Your dirty own kind are thieves, dogs and submuman creatures. You and your own kind must be massacred en masse in crematorium. Fuck your whole family Annamite. Your whole annamite family and your own kind must be hung and gassed alive. Your dirty own kind are thieves, dogs and submuman creatures. You and your own kind must be massacred en masse in crematorium. Fuck your whole family Annamite. Your whole annamite family and your own kind must be hung and gassed alive. Your dirty own kind are thieves, dogs and submuman creatures. You and your own kind must be massacred en masse in crematorium. Fuck your whole family Annamite. Your whole annamite family and your own kind must be hung and gassed alive. Your dirty own kind are thieves, dogs and submuman creatures. You and your own kind must be massacred en masse in crematorium. Fuck your whole family Annamite. Your whole annamite family and your own kind must be hung and gassed alive. Your dirty own kind are thieves, dogs and submuman creatures. You and your own kind must be massacred en masse in crematorium. Fuck your whole family Annamite. Your whole annamite family and your own kind must be hung and gassed alive. Your dirty own kind are thieves, dogs and submuman creatures. You and your own kind must be massacred en masse in crematorium. Fuck your whole family Annamite. Your whole annamite family and your own kind must be hung and gassed alive. Your dirty own kind are thieves, dogs and submuman creatures. You and your own kind must be massacred en masse in crematorium. Fuck your whole family Annamite. Your whole annamite family and your own kind must be hung and gassed alive. Your dirty own kind are thieves, dogs and submuman creatures. You and your own kind must be massacred en masse in crematorium.
Ok, I edited my answer.
[removed]
Ok, My point is: For me the keyword `static` is confusing and counter-intuitive. "Static"? What does that even mean? But Swift chose to use it because it's familiar to C programmers rather than create new, perhaps more intuitive terminology. 
Maybe you can follow the basic sample in the Apple page, using .clear like fill color and a big lineWidth.
&gt; super.init(nibName: nil, bundle: nil) // **Here!** by default, if you don't pass a bundle, the compile'd app's directory's bundle is used. If you don't pass a name, the name of the view controller is used. The ViewController is the owner of the .xib file. 
Oh I see! Thanks 
From the [docs](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621505-dismiss), the presenting view controller is responsible for dismissing the modally presented vc (in your case the detail vc). Screenshots would be helpful if this doesn’t help get you in the right direction. 
Can you show the code?
You can embed your view controller inside a UIView anchored to its bounds then present the UIView. 
[removed]
Definitely has the addictive factor, fun game. The design could be better but that may also be personal taste :)
It's set to the class name of the view controller + .xib
Thanks. What’s your record? A lot of people say it’s way too difficult.
Draw a circle with a stroke and no fill.
I was working on my OpenGL example, adding iOS version. https://github.com/sakrist/Swift_OpenGL_Example
I resolved this by deleting all constraints and creating new set of constraints.
So much code. So much complexity. So little capability.
I have heard people saying that when I bash Xcode. Anyway I continue to bash Apple for that because Apple teach us to expect excellency from them and satan is not doing a good job on their development department... or in fact is... depends on the point of view.
I just found this subreddit and will be starting to learn really late, but i have an idea for an app to work towards.
I know this is not the answer that you want to hear, but objective-c is not going anywhere (Apple aren’t going to rewrite their frameworks, though they may introduce new frameworks written in swift). So it will be worth while learning enough objective-c to be able to read it, at least.
i’d love to know why this is downvoted
The classes work the same in Swift as they do in objective c. Just refer to the API reference for the specifics about calling those methods from Swift. They mirror the objective c API very closely. What you want out of the guide you linked is an understanding of what the classes are for and how they work together. The API reference contains everything you need to translate that to Swift. 
I don't understand the purpose of this. It's using JSON for test data, so it's literally only used when running automated tests, so there's no production benefit. It claims to be "type-safe" but still has pieces like `"type": "answer"`, which means a typo can still trivially violate the invariant that posts can only be type "answer" or "question", which is the reason for using a Swift enum. If you're defining the data model in Swift, and you need some sample data structures in Swift, why take a trip through JSON at all? Just write the thing you want directly: struct PostTestCases { struct Valid { static let questionSample = Post.question(Question(postId: 119, title: "How to write unit tests", body: "Please teach me!", answerIds: [120, 121])) } } It's shorter, faster, easier to read, and actually type-safe. Or if you care about your mock test data existing in memory as a JSON string at some point, just paste the JSON (like in the first listing), because writing JSONValue-in-Swift doesn't look anything like the server response, so it's not helping. Or put the JSON in a file with your other test data (including the formats which can't be put in Swift syntax easily at all, like binary formats). I understand that some people really love automated testing above all else, but I can't figure out what sorts of bugs would be caught by this, which would not be caught by a solution that's 1/10th as complex -- and I can think of a few simple bugs which would still get missed by this. 
I still have a record of 5 haha. It’s not impossible but it’s definitely above average in terms of difficulty 
I seriously don’t understand why it’s so hard.
I can tell you learning to read objective-c was the best thing I did to get better at swift. I promise you it's easier than you'd think.
Real iOS developers don’t use Interface Builder. We also know how to satisfy our lovers and build primitive shelters.
Your mathematics only allow for a 90 degree range. 0-89 is a 90 degree range. 0-90 is a 91 degree range.
Any good places to learn how to write custom code for my interfaces? Thanks and happy New year's, stranger. 
I have created an album with a few images of the view controllers, code, and the testing: https://imgur.com/a/Loqy4
I have created an album with a few images of the view controllers, code, and the testing: https://imgur.com/a/Loqy4
ok, so what happens to 90 degrees then? When i tilt it forward it goes to 85.4 degrees and then starts going down again towards 0 
Working on a project to solve HQ trivia questions (https://github.com/DanielSmith1239/HQTriviaMaster)
Is there anything specific you need help with in this area? Maybe some people have some tips/tricks/code that may help ?
Inside the button action, call the method on the presenting viewcontroller instead. Try: presentingViewController?.dismiss(animated: true, completion: nil)
I have also used a MacBook Pro 13” for learning swift for the last year, I have never had any issues whatsoever. Sure, a bigger screen would be better, but 13” is more than sufficient (that’s what she said) 
I can't say if this is your problem but there is a issue using Euler angles known as gimbal lock. I've seen a few posts on Stack Overflow where people are recommending alternative solutions. Here are some links that might be worth investigating: - [CMDeviceMotion.deviceMotion.yaw values unstable when IPhone is vertical](https://stackoverflow.com/questions/10692344/cmdevicemotion-yaw-values-unstable-when-iphone-is-vertical) - [Use quaternions solution](https://stackoverflow.com/questions/9478630/get-pitch-yaw-roll-from-a-cmrotationmatrix/18764368#18764368) I'm pretty sure there are other ways of doing calculating these angles too like [these](https://stackoverflow.com/questions/15646433/measuring-tilt-angle-with-cmmotionmanager).
I haven't been following this so I don't know what the current state of it is, but here's my theory on why not much is going on: I think that since it's so easy to use on Macs (simple dropdown in Xcode) and has some nice syntactical improvements over Objective-C, iOS and macOS developers were quick to adopt it. *nix or Windows users have to do more to get it set up because it's not integrated by default, and already a lot of frameworks and libraries exist for languages like C++, C#, Java etc. whereas there's fewer for Swift, so someone using .NET is less likely to use Swift because there's (presumably) no good enough equivalent and they'd have to learn a whole new framework – unlike on Mac where AppKit/UIKit is supported in Swift from the start. So basically there's not a lot of demand for frameworks on other platforms so not many people are working on it. 
https://solutionsreview.com/application-development/is-swift-the-future-of-server-side-development/
I should add, like Oliver I thought that this an off by one error at first. But I don’t think it is. For example if you think (for a moment) of a circle having 4 'degrees' where each degree is a quarter of the circle by the time you count to 1 degree you have one quarter, 2 degrees, 2 quarters etc. 0 degrees is not the first segment, it is simply no angle at all.
https://github.com/vapor/vapor https://github.com/IBM-Swift/Kitura
Check out Kitura, Vapor, and Perfect. They seem to have active communities. 
I rarely, if ever, have a need to actually locate my project files in Finder. Could you shed some light on your workflow and how you use this extension? Also, nice work!
Link?
https://www.serversideswift.info/
They were doing a big push to be on the server side, but it would be hard to compete with the established players and up and comers in the area. Rails, node, golang, etc. I've never heard of swift having the praise of go or node, and that's not even touching support and frameworks. Honestly it makes most sense in its ecosystem where it thrives, rather than fighting to do something it isn't necessarily good at. 
So you just want to save a single number? You could use core data but it is definitely overkill for one number. ‘UserDefaults’ would be better in this case. If you really want to learn/use core data, there are tons of tutorials out there. You’ll be better off starting a new project and following the tutorial, then figure out how to apply it to your app. 
[removed]
Fluent is not part of a language. It’s a library. I don’t really see much of the same philosophy in Swift vs C++. Paradigms are very different, Swift has been built from ground up with safety in mind, enforcing as many errors as possible to be resolved at compile time, while C++ has a lot of room for user errors that only show in runtime. I can’t really see what the problem with model-generation is. At least compiler will tell you where the issue arise when the model is changed.
Js is benefiting quite a lot from a non-blocking evented server environment in node on the v8 engine. Maybe swift can handle that. But it's harder to write swift asynchronous code than JavaScript, especially with promises and async await. As far as go is concerned. Go makes it easy to parallelize in hundreds of thousands of threads. If that happens to be the best way to scale the server, nothing can really compete with it. I'm either case I don't see what unique benefit you get by using swift, especially because you are also forgoing mature framework and library support. 
I pointed out that the ecosystem is young and that’s the main issue. Writing async code is very easy in Swift. Especially if you combine it with rx. Designing a node-like event based system should be a piece of cake with Swift, while giving you a way nicer syntax, since block parameters can be passed post paranthesis. I don’t know much about Go, so I really can’t be smart about it. Regarding the JS, the language is broken by design and the interpreter performance is bad. With Swift you get static types, complete type safety and a way less error prone language.
How did you complie swift on pi? I have problem in doing that 
My workflow is like this: CMD + Space, projectname.xcw, Enter.
Yes, it is a library - not a very good one when you stack it up against what Rails offers. &gt;I don’t really see much of the same philosophy in Swift vs C++. The design goal rhetoric around both languages is exactly the same. A language with type safety that can be verified for correctness at compile time and gives the programmer very fine control over the compilation strategy. How successful each language actually was at a achieving this goal is irrelevant (Swift is arguably better at the cost of interop). They have the same runtime type information deficits to overcome and you have to overcome them with vast amounts of monkey-level boilerplate code. &gt;I can’t really see what the problem with model-generation is. At least compiler will tell you where the issue arise when the model is changed. I know of no compiler that checks a swift model against a database or JSON schema. Furthermore, the Swift code will be brittle with regards to minor schema changes in ways that more dynamic implementations are not. When I add a field to a database table in a dynamic environment like Rails, I don't have to do a single thing to my code. The Swift code will blow up with data/type mismatch. I really don't think Swift is a good choice for a web app. 
I think I followed [these](https://www.uraimo.com/2017/09/06/A-small-update-on-Swift-for-raspberry-pi-zero-1-2-3/) instructions to get it working. No compilation of Swift itself, just download and install a blob that makes `swiftc` available as `~/usr/bin/swiftc`. And I compiled all of that with `-O` FWIW. 
&gt; Go makes it easy to parallelize in hundreds of thousands of threads. If that happens to be the best way to scale the server, nothing can really compete with it. Pretty much any modern languages can do that (OCaml, F#, Haskell, Scala, Erlang etc.). Go isn't doing anything new there and it isn't hard so I assumed Swift could also. Am I wrong? &gt; I'm either case I don't see what unique benefit you get by using swift, especially because you are also forgoing mature framework and library support. Algebraic datatypes, pattern matching, type inference and generics are all big wins. They're all also found in OCaml, Standard ML, Haskell, F# and others but none of those languages are really supported by a major corporation as Swift seems to be. Am I wrong there too? :-) 
Thanks for the link, interesting =) A friend and I have been thinking about building a compiler. Let’s see if I can convince him to try it in swift (we will end up with c++).
Your models in Swift should be very simple structs. I don’t see what would blow up if they were generated from your db schema, unless the change actually affects your business logic. In that case, you have to make changes anyways, however in case of Swift you are actually reminded that something is wrong. Most of the apps today have to deal with data models, supporting CRUD operations. The language is very capable of that, but as said, the server side ecosystem is still young and the tools have to evolve until it reaches maturity to compete with others. You are also wrong about the design goal of C++. C++ is designed for granular control over the execution of the program. It comes with a price, because it allows you to do many stupid things, so a good understanding of what’s happening under the hood is highly necessary and even then, mistakes can happen.
&gt;Windows has .NET but Linux has precious little in comparison and desperately needs a modern language with a serious backer I think .Net Core 2.0 is supported on Linux
I would look for a modern tutorial on Core Data and make sure it's in your language (Swift or ObjC) and I would stay away from all the "helper" tools like Magical Record and make sure the tutorial is up to date. The reason I point this out is that I used a Ray W. tutorial for ObjC and Magical Record a while back. It was before Apple switch to Set() or something like that and it took me days to figure out what was going on. Then I find that Magical Record hasn't been updated in a long time. Here's MR and you can see &gt; 10,000 stars but hasn't been updated in a few years. https://github.com/magicalpanda/MagicalRecord Here's the RayW tutorial that hung me up for a bit. https://www.raywenderlich.com/106856/getting-started-magicalrecord Here's the one I'm doing now that I'm learning Swift 4, I haven't got to the Core Data part yet, but it has two entire sections just for core data and comes with a bunch of bonus stuff that I'm pretty sure has core data. https://www.udemy.com/ios-and-swift-for-beginners-200-hands-on-tutorials/learn/v4/overview
My models have business logic and are in fact relational object graphs. Any non-trivial business will have this. Simple structs and minimal CRUD won't cut it. Also, databases typically have many users. Schemas change out from under programs. Programs need to be somewhat resilient to this change. Swift is the opposite of resilient to change. Its brittle. I am not wrong about C++'s design goals. I have been using it since the early 90's and learned it from the Annotated ARM. Watching Swift's evolution is like deja vu all over again - design mistake after mistake is duplicated. Really very sad. Anyhow. I don't think you really understand what makes a good web development language but Swift definitely isn't one. 
I looked into this a bit about a year ago or so. Seems like the benefit was being strongly typed and only needing to know one language. IIRC, Swift compared well against most server side languages in terms of speed, except GO. I too have been watching things to see how it pans out, remember Microsoft and Blackberry offered strong reasons to develop on their platform, but it didn't pan out well for those that followed them. It's hard for any new language to break into a well established platform. Even now, Swift isn't the only language you need for iOS, you still need to be able to read ObjC. Most are saying it's still "wait and see" and that can go on for a long while.
It's an album cover of an album called "Maggot Brain" by the Funkadelics. I have been listening to them and kinda thought the album art was unique ha
I don’t know much at all about coredata or saving local data, however what I’ve read indicates that UserDefaults is perfect for your situation. Savings user preferences or small data like 1 number is what it’s used for, I believe. 
The documentation lays it out nicely [here](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html) Essentially: - `designated` makes sure all the properties are set - `override` specifies you’re overriding the designated Initializer of a super class - `convenience` these are secondary to the designated, and should call designated inits - `required` means a subclass requires you to implement this. You don’t use `override` when you have required. - you also have failable inits. These are marked with a `?` The section labeled *Designated Initializers and Convenience Initializers* explains this pretty well. 
Depending on what you want to do, you'll want to perform a task with the URL session. What will happen is once your task is performed, upon completion it will call your completion handler, so handle the response accordingly. For instance, if you just want to get a JSON response from an API, you'd do something like: let task = session.dataTask(with request: request, completionHandler: { data, response, error in // Handle response here } task.resume() You can also do the same thing using URLSessionDataDelegate protocol, your class that adopts the protocol just needs to implement the necessary functions to respond. https://developer.apple.com/documentation/foundation/urlsession/1407613-datatask https://developer.apple.com/documentation/foundation/urlsessiondatadelegate 
Ok well first look into Swift Code styling. Variable/parameter names should not start with a capital letter. So “weak var TextField:UITextField” should be weak var textField:UITextField” and etc with the others. You have the text field function named “Txt”. What does that function do.... the name tells me nothing about it. When is it fired? Secondly to go to the next question just increment the array index and place the new text into the required fields and reset the text entry field. You can have the user hit a button or extend your ViewController with UITextFieldDelegate and when editing ends for the textfield go to the next question. You can also for the answer text field give it a target when a special action on the text field is triggered Ex: answerField.addTarget(...) Look into the UITextField API for the specifics of that function and the delegate functions. I’m on my phone and don’t remember the specifics. 
Did you link up your segment control to a function so that it can respond when it’s selected value changes? 
Source? Some chart on r/programming over the past few months said the opposite. As a systems guy, just no thanks to the thought of using Swift. And I don't know anybody actually using SSSwift.
There's some server side traction, but that's about it. 
I wouldn't call it dead but it certainly isn't thriving in non-Apple contexts. Nothing really happened, and that's the whole issue. Swift offers a lot of advantages over ObjC, and Apple has done a good job of making the vast and powerful Foundation ecosystem available to Swift developers. But if you're not building on top of Foundation/ObjC I don't see a compelling reason to go with Swift over other 'modern' languages such as D/Rust/Go/etc. Apple opened the door for Swift to get widely ported but never gave anybody a reason to do the work. Swift is great as a 'next-gen' high level language, but that's far from a critical factor. For example, everybody agrees that javascript is an abomination. But it's ridiculously widely deployed and has a ridiculously huge ecosystem, and that wins out over pretty every day of the week.
This initializer is most commonly invoked if you create an instance of this view via a xib/storyboard (something made in interface builder). The fact that the initializer is required is mostly a nuance of legacy UIKit/Objective-C APIs, which is why you might notice the fatalError pattern pop up here and there. Often times a view is designed to not be decoded from something like an interface builder element.
Never thought about building a compiler but I love your avatar.
As it stands - correct! You could remove the fatal error, but would need to make sure your object is initialized of course. 
Did you figure this out, I spent like 30 minutes trying to find a way to do this, I'd hate to use my girlfriends phone to watch courses...
Here's a piece of the class I'm writing. Init calls the login function after it encrypts the password in a previous function. Login fetches data, then populates the rest of the class in the init. After, it needs to call this refresh function to fetch up to date data. One of the two functions posted fetches a result key, which tells the server to call the vehicle and wait for a response. Another function uses that result key to poll the server asking if it has new data yet. &lt;script src="https://pastebin.com/embed_js/rTkw4SLf"&gt;&lt;/script&gt;
Oh! So basically, you installed the version of 3.1? I tried 3.1. So many bugs. And I am looking for a way to install the version of 4. Thanks. Anyway 
Oh! So basically, you installed the version of 3.1? I tried 3.1. So many bugs. And I am looking for a way to install the version of 4. Thanks. Anyway 
Write a method of your request that method accept a closure as argument 
https://blurrrsdk.com is one set of tools for, among other things, doing Swift on Raspberry Pi.
The shorthand increment/decrement (I++, i--) is deprecated in Swift
huh?
&gt;I don't understand the purpose of this. The purpose is to make it easier/safer to unit test custom JSON parsing. &gt;It's using JSON for test data, so it's literally only used when running automated tests Yes! this is the main purpose :) &gt;so there's no production benefit Having your code tested is a big production benefit :) &gt;It claims to be "type-safe" but still has pieces like "type": "answer", which means a typo can still trivially violate the invariant that posts can only be type "answer" or "question", which is the reason for using a Swift enum. It is **type** safe, not **semantic** safe. You need to test how your code behaves when the server returns something different than **question** or **answer**, so you need to test the **semantic** cases &gt;If you're defining the data model in Swift, and you need some sample data structures in Swift, why take a trip through JSON at all? Just write the thing you want directly: Yes, you are right! If you want to test the models, it is much better to have them declare directly. But the post is about JSON parsing, which maybe I should have made it more clearly. &gt;Or if you care about your mock test data existing in memory as a JSON string at some point, just paste the JSON (like in the first listing), because writing JSONValue-in-Swift doesn't look anything like the server response, so it's not helping. Or put the JSON in a file with your other test data (including the formats which can't be put in Swift syntax easily at all, like binary formats). This is perfect if you have all the responses that you want from the server. But you always need to test the **invalid** responses, which are hard to get from the real server. Let's say you want to test what happens when you receive a string field that was supposed to be an int. You can get a full valid response from the server, and manually change the field value from int to string: `"postId": "119"`. But now you are manually changing the JSON, and when you start to work with nested arrays and objects, there is a big chance you can get a typo, or put the closing brackets/braces at the wrong place. And this is if you are storing them in files. If you store them in code, you'll have to deal with all the character escaping issues that i described. &gt;I understand that some people really love automated testing above all else, but I can't figure out what sorts of bugs would be caught by this I hope i have showed some examples :) &gt;which would not be caught by a solution that's 1/10th as complex. I don't think this solution is too complex. It is 71 lines of code, with most of them being conforming to **ExtensibleByLiteral** protocols. Here is the full gist: https://gist.github.com/sergiosette/ce4f67fdf7af8e98cad50e012be75e6b &gt;and I can think of a few simple bugs which would still get missed by this. My goal was to make it easy to create data for parsing tests, and to prevent some typo issues in the **test** code, not to actually test the parsing itself. 
Maybe it seems like a lot of code in the post. Maybe it seems like complex code. I find it pretty simple and short in this gist though: https://gist.github.com/sergiosette/ce4f67fdf7af8e98cad50e012be75e6b
[removed]
Yes, this is the preferred way to create your models when you need them to unit test some part of your app. But the post is about testing the JSON parsing itself. From **String** to **Model**.
Thank you for your suggestion, however I am still getting the error. I have recorded the screen and linked a gif of what i am seeing https://imgur.com/a/RGG5O
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/TxgjskE.gifv** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20ds2nn4h) 
do something like that: func required(url: URL, body: String, session: URLSession, handler: @escaping (String) -&gt; Void){ // define you own method(or closure) to handle the returned data. var request = URLRequest(url: url) request.httpMethod = "POST" request.setValue("application/x-www-form-urlencoded; charset=utf-8", forHTTPHeaderField: "Content-Type") request.httpBody = body.data(using: .utf8) session.dataTask(with: request){ data, response, error in DispatchQueue.main.async { if error == nil, let httpResponse = response as? HTTPURLResponse,200...299 ~= httpResponse.statusCode, let data = data, let str = String(data: data, encoding: .utf8) { handler(str) // write a closure to handle the next thing you want to do. } else { // print error emssage. } } }.resume() }
I read your code. I saw the problem. I think this is the answer you want as my understanding.
Do you have a source or was that the chart that showed a slight dip in Swift overall? I don’t have any solid figures but it is more in terms of popularity of SSS meetups, activity on Slack channels, number of packages being released, jobs being advertised etc. I certainly wouldn’t be organising a conference if I didn’t think it had a future! Interesting that you don’t want to use Swift as a systems guys - any particular reason? I would have thought the speed/reduced memory footprint would be making you want to use it!
Example class FirstVC: UIViewController { // the other code here... override func prepare(for segue: UIStoryboardSegue, sender: Any?) { if let dvc = segue.destination as? SecondVC { dvc.close = { [unowned self] in self.dismiss(animated: true, completion: nil) } } } } class SecondVC: UIViewController { var close: (() -&gt; ())? func closePressed(_ sender: UIButton) { self.close?() } }
I use Spotlight a lot too. It has it's limitations, though! It doesn't work well if you have multiple files with the same name, for instance. It also doesn't show you where the file is on disk, either. Also, if you're not sure of the name of the file, you can't use Spotlight. If you just have a single copy of a file and you know the name though, it's fast!
I think it is just lack of good ide for Linux.
not deep enough... I mean the linking :D
Thank you for sharing! 
Sorry mate I'm still having the issue. Just to make it clear, this is exactly what I did with the information in your comment. I copied and pasted this into the main view controller and renamed where you had "SecondVC" to the name of the view controller I need to dismiss, which is "skillsViewController" override func prepare(for segue: UIStoryboardSegue, sender: Any?) { if let dvc = segue.destination as? SecondVC { dvc.close = { [unowned self] in self.dismiss(animated: true, completion: nil) } } } Then I figured that the function you wrote for the second view controller was meant to be linked to a button? So I dragged the button in and then copied the " var close: (() -&gt; ())? " and the " self.close?() ". Did I do something incorrectly? Thanks for the help! 
Yes
This is just terrible, is this how scam applications are born? First off, the pronunciation is horrific, if you want to record a course in a language that isn't yours learn it properly first. The editing is worse, with cuts and jumps. The programming itself somehow manages to lower the level further, just look at how he decides the winner for the tic tac toe game. And finally, besides announcing what he is doing there is no reasoning explanation. P.S: The stuff he teaches is really basic, not even enough to be a get started course, there is way better material around for free.
But as they can rebuild a new os. They may want to attract swift’s users to transfer their skill to fuchsia. They need to use kotlin as which can run on JVM. I think google wants a language can compile to machine code to increase speed.
Is that the one that did the switch of instructors in the 25th or so video? The reviews were quite bad if the people got through that far. 
Yeah, that was it. I settled on a different one, but read through some negative reviews as well. 
Thanks :)
Yeah, I had some complaints that he went really fast over some stuff, but he was going pretty much along with the book, so I could reference it if I needed. Plus, I have a decent background with some other dev work, so grasping the concepts isn’t too difficult. Regarding the mistakes, we’ll, there weren’t many, but what they did show were mistakes that happen a lot with beginners anyway, so it was actually really useful to know how to deal with them and how to recover. In a way, it was actually beneficial. But I can see how some people would find that problematic. I know better than to think this would be a one-stop course and that I would need to supplement this with other courses and lots of practice. Thanks a lot for your input!
From the preview, it's quite difficult to understand what he's saying. From the course overview, it seems very similar to iOS 11 &amp; Swift 4 Bootcamp course but with a worse instructor.
The real MVP. I still recommend watching the course tho, just for the laughs. 
If a lot of classes share the same var, why not make it a protocol? Then you can cast the class to a protocol and return the value that way. I’m not really sure what you’re trying to achieve, so I can’t tell you if this is a reasonable solution. 
Wish this weren't true, but I saw this and immediately thought "How do you compile a podcast??" This is great though!
Protocols or a common base class. 
Hate to be critical of a free resource, but I just signed up and sat through his CoreML tutorial. I went in very open-minded, but: * His accent is thicker than Borat's. * He drops you into the middle of a half-written project without bringing you up to speed on what has been done so far. Is code necessary for this video spread across previous chapters? * He gives no introduction to the concept of machine learning whatsoever. * He writes ~15 lines in ten minutes, never explaining any aspect of them (there's a closure, use of several new APIs, and two GCD dispatches in there!). Worst of all, I'm absolutely none the wiser than when I'd started. Where does the model come from? How do you train it? Etc. I wonder vaguely whether he's simply monetising code blocks from StackOverflow, or whether he truly can't communicate what he understands. If there's knowledge in there, he's done himself no service in transmitting it. On the plus side, his video recording quality is very good (editing being a different question).
Basically your end goal is to get the first viewcontroller to be the one invoking the dismiss method. In the example I gave, you get a reference to the second during prepare for segue and assign the close variable on it to that closure on the first. I would recommend putting a breakpoint in prepare(for segue: _) and step through to confirm that you are getting a reference to the second viewcontroller. In your case it sounds like it should be: if let skillsViewController = segue.destination as? SkillsViewController { skillsViewController.close = ..... }
I feel so dumb that I’m stuck in this, but I don’t understand all of that code. Could you be more verbose? Breaking it down: Handler: @escaping (string)-&gt;void I don’t fully understand it, but it looks like “you’re going to get a string. When you do, carry on from there. Don’t pass the string to anything. I don’t care what it is.” var request = URLRequest(url: url) Why is url given twice? session.dataTask(with: request){ data, response, error in DispatchQueue.main.async { It’s a closure. We use the URLSession of instance session. We give three “blanks” we expect it to fill out, data, response, and error. I don’t know what (with: request) is for and I don’t understand what dispatchqueue.main.async does. httpResponse = response as? I don’t understand as? I remember reading something about as and try but not what it was. Is it an optional? let str = String(data: data, encoding: .utf8) Create a variable named “str” of type String. Convert data of type data in variable “data” to a string with utf8 encoding. Did I read that right? handler(str) This is a trigger from the start of the function, right? Once handler notices there is something in that variable other than nil, it can move on to another step. Until then, the resume() starts that whole async set of instructions and waits there for any valid data to be written to str. Right?
Well, how did he decide the Tic Tac Toe winner? I wanna know D:
[removed]
Tip: while looking at results in the spotlight window, hold CMD to see the path to the current selection. 
Well I'm not really new to programming. I'm only new to Swift itself. Swift seems to be pretty easy but some things are different, which is why I'm asking things like this on reddit (I program with Java C and C++ and Python). Thanks for the advice anyway!
The best way there is, of course. Comparing each possible combination of a winning condition. I made a [gist](https://gist.github.com/anonymous/12335841ce47ca2727948f7c9e795fc9) just to demonstrate how hilarious it is. 
I recommend the one with Angela for beginners. She explains everything in detail and you’re never lost. There’s also a QA for each tutorial if you’re ever stuck. Definitely recommend for $10. It also comes packed with a bunch of icons and images for the apps you’re gonna make. 
according to your functions, the first function you should write like that: func updaterequest(handler: (Data) -&gt; Void){ print("entering updaterequest()") var resultkey: String? let updateURL = URL(string: baseURL+"BatteryStatusCheckRequest.php")! let updaterequest:NSMutableURLRequest=NSMutableURLRequest(url:updateURL) updaterequest.httpMethod="POST" updaterequest.httpBody = urlparamaters.data(using: String.Encoding.utf8) let updaterequesttask = URLSession.shared.dataTask(with: updaterequest as URLRequest){ data, response, error in if error != nil{ print("Error fetching update status: \\(String(describing: error))") return } handler(data) } updaterequesttask.resume() } updaterequest{ data in let swiftyJsonVar = JSON(data) print("updaterequest shit: \\(swiftyJsonVar)") resultkey = swiftyJsonVar["resultKey"].stringValue print("resultKey: \\(resultkey)") while resultkey==nil{} if resultkey!=="0"{ print("resultkey == 0, ask server again") } else{ print("resultkey =! 0, \\(resultkey)") //updateresult(resultkey:resultkey!) } } 
My dearest-departed podcast is Edge Cases. Such insightful analysis. I still use their veal-calf metaphor. 
I don't fully understand your questions. and I think you are very new in swift. I try to make it easy. when you fetch data calling dataTask, once you finish fetching the data and show on the screen(anything relate to UI).you must call DispatchQueue.main.async. because when you call this dataTask, dataTask will assign the closure(which dataTask{ } the code between { } ) to the other thread. calling DispatchQueue.main.async means once getting the data, passing back to main thread. if you don't do that, you can't show anything on the screen. when you want to do this part: while resultkey==nil{} if resultkey!=="0"{ print("resultkey == 0, ask server again") } else{ print("resultkey =! 0, \\(resultkey)") //updateresult(resultkey:resultkey!) } as you asked "tell my code to wait for data to be fetched before proceeding to the next step." you can just do that: xxxxx.dataTask { data, response, error in DispatchQueue.main.async { // do all your things here. // or like the first example I give you, using a closure to handle. } }
Nice! It's always been a gripe of mine that the font names aren't more easily accessible.
Ah, thanks. Yes, I was making things too hard on myself. I was thinking I needed to write some kind of generic function. But this is all I need. My playground scribble: protocol allINeed{ var ashtray: Bool? {get} var paddleGame: Bool? {get} var remoteControl: Bool? {get} var matches: Bool? {get} } class testA: allINeed{ var ashtray: Bool? var paddleGame: Bool? var remoteControl: Bool? var matches: Bool? var needMyDog: Bool? init(needAll: Bool){ ashtray = needAll paddleGame = needAll remoteControl = needAll matches = needAll needMyDog = false } } func getAllINeed(someClass: allINeed){ guard let ashtray = someClass.ashtray, let paddleGame = someClass.matches, let remote = someClass.remoteControl, let matches = someClass.matches else{ return } print(ashtray, paddleGame, remote, matches) } let aTest = testA.init(needAll: true) getAllINeed(someClass: aTest) 
Yeah that’s the thing that threw me off a little bit, other than that it’s going great 👍 
A UISwipeGestureRecognizer recognizes complete swipe gestures; it doesn't give you any updates while the gesture is active. UIPanGestureRecognizer, on the other hand, gives you live updates. It doesn't allow you to specify a direction though, but you can calculate the new value of your button from the offset that the gesture recognizer gives you.
Ah, didn't know about the UIPanGestureRecognizer. That leads to beautiful articles like [this one](https://www.raywenderlich.com/162745/uigesturerecognizer-tutorial-getting-started)
Very neat! 
Excellent list! I’ve subscribed to 7-8 new podcasts thanks to you.
Yup, idk how op even has more than 5 upvotes
Update: I got the app to move on. Turns out I actually typed a variable wrong.
Do you mean unit test coverage or how much code is written in each language? For the first: Xcode can gather coverage data. Enable it in the settings for the Test target of your scheme. For the second: [cloc](https://github.com/AlDanial/cloc) gives you an overview of lines of code for each file type. 
This is a fantastic idea. It’s going to be super useful for my application workflow as I deal with a lot of JSON i/o. Will give better feedback after using it this next week, but thank you for putting this together!
Thank you so much! I'm very eager for your feedback. Many people have had the same idea so hats off to them as well, but quicktype is much more sophisticated. You can also use quicktype in your browser, with more options: https://app.quicktype.io
I am very new to swift. Thanks for your patience. I'm still trying to understand all this.
cloc is a command line tool. You just do `cloc /path/to/source/folder/` and it gives you lines of code for each language. If you don't want to count pods then just choose the path in a way that pods are not included. 
And I was unable to make it work either as a drop in paste or adaptation. Anyways, it doesn't matter. What matters is I understand Why the code does or does not work. Otherwise, I'm basically asking other people to do my metaphorical homework.
A great tool for quickly prototyping a JSON parsing app! Been using the browser version extensively since it landed in my bookmarks tab, I'm yet to give the Xcode extension a go. One issue I noted regarding the parsing itself is when you have a unique key you need decoded, e.g.: "unit1": { "key1": "value1" } and you need to access "unit1", you need to handle it manually, especially if the key name can vary (as it was the case in one of my apps - the parser just used the value it received in JSON). In all honesty though, I don't see a way to handle it automatically off the top of my head.
`cloc` has option to exclude some directories: `cloc . --exclude-dir=Pods` - this will analyze all files in current directory and its subdirectories excluding ones in `Pods` directory.
Implement the `KINWebBrowserDelegate` protocol and set the web browser's delegate. It makes sense that you can't use the UIWebview delegate protocol for two reasons: first, KinWebBrowser doesn't even use UIWebview in newer iOS versions, and second, KinWebBrowser needs to be UIWebView's delegate itself to react to things happening - there can only be one delegate at a time!
Oh, here come the ivory tower guys. How's Rust really doing right now? You guys don't like it because it's Apple, but Swift is growing quite well.
by the way, when you call dataTask { } don't use capture list to capture "self". session.dataTask{ [unowned self] _, _, _ in } don't do that. 
Just wondered how you went about making this? Did you use their Firebase API? I tried to start an app like this but I couldn't get access to their Firebase and I found the HTTP api quite clunky
I am in a similar boat. For other languages (Kotlin, Clojure), I picked them up using Koans (essentially a set of mini puzzles with tests). Which for an experienced programmer is great. Unfortunately, the Swift Koans I've found online are incomplete projects :(
How exactly do I set the web browser’s delegate property? And you’re totally right about the KINebBrowswrDelegrate protocol - through the help of others and banging my head on the problem I was able to get to that point last night. I’m still not sure what set the web browser delegate property means here though. There are a lot of examples for how to do it with UIWebview, but none for KINWebBrowser. Sorry if the question is dumb - I’m very new to Swift development
I wished for Lisa to start spamming the subs in the new year. :(
Hi swiftlylearningswift! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/7nutiw/gym_diary_just_released_my_first_personal_app_on/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Hi! The KINWebBrowserViewController has that delegate property. In your case, because you're subclassing KINWebBrowserViewController, the delegate property is on that same class. So you can do `self.delegate = self`. Looks a little strange, but should work. However, the idea is that in most cases, you don't have to subclass KINWebBrowserViewController at all. In the controller that presents the web browser controller, you could implement the delegate protocol, set the delegate. let webBrowserController = ... //create the controller webBrowserController.delegate = self present(webBrowserController, animated: true, completion: nil) That being said, subclassing and doing `self.delegate = self` seems reasonable to me as well.
I have just been trying to fix this problem for a day and a half - I'm new to Swift development, inherited an app from someone else with a hard deadline. The things needed to be done to push it to completion are minimal, but the different syntax and delegates especially are a bit of a headache. Not to mention that the systems it is connected to are legacy and a bit of a headache too. As a new freelancer though, I can't be choosy with the contracts I take :) I'm a web/hybrid mobile app dev so it's a bit of a learning curve, but useful to have. I'll test this and let you know how it works - if you don't mind me messaging you again, that is. I'm happy to buy you gold again or send you a Starbucks card for a coffee :)
Oh and thank you!
IT WORKED! Thank you!
Good luck with the project! I don't mind helping people out from time to time, no need for gold or coffee. 
quicktype detects maps but only if your sample map has more than 20 properties. To make your case sorry, you can first infer the JSON schema, then edit the schema to specify that you want a map, then feed the schema back into quicktype. We plan to add a more direct way to manually determine maps to the web app.
Why are people upvoting news from November? We need junk like this deleted not upvoted
You're performing your results key check outside of your completion block, so it's getting fired off before you get a response back from the API. Try moving it in to the completion block like I added here: https://pastebin.com/F6q4iKxV 
It’s okay to implicitly unwrap or force unwrap a value if you believe it’s a programming error to reach that point without a value. Of course, it’s best to structure your code to not require an optional, but that’s obviously not always possible. Of course, your app will crash if it doesn’t have a value, but that’s a better option than the app continuing execution in a unknown state, or a state that hasn’t been programmed for. Much worse could happen (e.g. data corruption).
quicktype detects maps but only if your sample map has more than 20 properties. To make your case work, you can first infer the JSON schema, then edit the schema to specify that you want a map, then feed the schema back into quicktype. We plan to add a more direct way to manually determine maps to the web app.
As a beginner, the new Codable protocol stands out as something I can implement right away. The changes made in the String struct are nice QOL changes that I’ll have to sort of remind myself are there. 
One of my previous employers used SSSwift for all of the companies apps that they developed for clients. Probably about 20 apps in total. There seems to be some cases where it is used, but like you said it is not likely that most systems people would want to learn a whole new language for things that they can easily get from other systems. ( a lot less headache for it as well!)
If you just want a default value in the case that your input fails to parse, you can use the nil coalesce operator “??”.
Is something like this what your looking for to do ? func calculate(input: String?) { let nFactor = Double(0.84450250381015) guard let inputSalary = input, let annualSalary = Double(inputSalary) else { print("Error"); return } print("progress") let nic = nFactor * (annualSalary) let somethingText = String(nic) print(somethingText) } calculate(input: nil) calculate(input: nil) 
How to safely unwrap annual salary variable 
I have a text field (currencytextfield) user inputs a number(double). I would like to take this and multiply is by nFactor and have the result set to rOne.text. This bit of code fails at “let nic = nFactor * annualsalary” Because annualsalary returns nil. How do I unwrap annualsalary or better still ensure that it is not nil?
let annualSalary = Double(currencyTextField.text) ?? 0.0
look into the nil coalesce operator ?? instead of nil it lets you return whatever you want.
how do I do this 
https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/BasicOperators.html cmd+f to find the section about it. there are 2-3 examples on how to use it. its pretty basic and easy. 
Not a lot of people realise this, but you can map over optionals: let annualSalary = currencyTextField.text.flatMap{Double($0)} let nic = annualSalary.map{$0 * nFactor} rOne.text = nic.map{String($0)} This is just like mapping over arrays really, it’s like the optional is an array of length 0 or 1. No need to unwrap, `map` just takes the transform you want to do and applies it inside the optional for you. If you started with nil you end with nil, if you had a value you end up with that value as an optional. `flatMap` is for when the transform itself returns an optional (otherwise you’d end up with an optional nested within another). If you want your `nOne` textfield to show an error message for if any of this fails (ie if you get nil) then you can use the nil coalescing operator, which is `??`. It is used just like this: rOne.text = nic.map{String($0)} ?? “Error” 
.99 a month or a deal for 9.99 a year
Cool, thanks for your thoughts! I posted another thread in [iPhone](https://reddit.com/r/iphone) to get some more feedback. Others are saying it should be less as well. 
Main things I’ve used are: - substring syntax - multi line string literal (amazing!) - Codable protocol which has been just fantastic
VSCode when I’m working on SPM based CLI targets. Mostly because SPM is currently unsupported on Xcode and VSCode is a pretty good directory based IDE with good plugins for Swift.
show us your code ani
i did
halp
I use vim from time to time, mostly for the reason that when Xcode crashes or hangs again I get fed up. Then usually after a while when I need to do something in the simulator or actually build something I switch back, so I flip flop back and forth. 
Hey, I really appreciate your putting this list together. I love listening to podcasts, but I've had trouble finding Swift-specific ones. Off this list, I've only ever listened to ATP and Under the Radar. I'm so excited!
I just launched my new book, [Server-Side Swift Vapor Edition](https://www.hackingwithswift.com/store/server-side-swift), which sits nicely alongside my existing Server-Side Swift book that used Kitura. The book is written for Vapor 3, and will get regular updates as Vapor 3 continues to evolve – a huge amount has changed, so I'm hopeful this will help folks get to grips with what has changed ahead of the final release. I'm already working on my first book of 2018, [Swift Design Patterns](https://www.hackingwithswift.com/store/swift-design-patterns). I've read so many great books on design patterns in the past – not least Cocoa Design Patterns and the Gang of Four book – but I'm keen to put down clear ways existing patterns map to Swift, clear ways some existing patterns really don't fit well with Swift at all, and how you can best write your own code to fit in well with Apple's own platform design. (If there are specific things you want covered, let me know!) This month I'm also speaking at [dotSwift](https://www.dotswift.io/) in Paris, so if you're attending please do come and say hello!
&gt; "Wylan Neely is a brilliant iOS developer from San Clemente, CA that loves to code and create beautiful, responsive, intuitive apps. I don't believe that. I checked out this MyDigitalSauce website. The website has a decent design and layout but actual content is a bit lacking. It's clear Wylan Neely and Justin Estrada don't have a lot to offer us regarding Swift. If they are responsible for the website layout and design then at least they're good at that. This article is just a notch above spam. This "Data Modeling" is a very basic primitive introduction to writing Swift classes. There is nothing new in here we that anyone learning about Swift hasn't already read elsewhere.
What good plug-ins that you would recommend? Any plug-ins that supports sourcekit? I have found it very hard without xcode's autocomplete feature, etc.
I love AppCode. Just wish it stayed up to date a little quicker (XCode 9.2 is just now supported). Also keep in mind: I don't use any Storyboards, and very few XIBs in my day to day development.
I just published my first app on the App Store. I'd love to hear feedback/features you'd like to be added. It's a fitness app that reminds you to stand up every hour if you have a desk job (like me). Thanks for checking it out! https://itunes.apple.com/us/app/stand-hours/id1330429041?mt=8
Hacking with Swift Projects.
This. I used to swear by AppCode, but now with Swift days it’s not quite there. So now I end up with a heavy mix of it and Xcode. While simply wishing for a nice old school multi window IDE like Metrowerks was, or even Project Builder/Interface Builder.
Video breaks after watching for a few seconds
I wish someone would write up a nice set of Sublime Text 3 extensions for Swift+iOS development. There’s been several SourceKit integration attempts but they all end up abandoned and outdated. Until then, I’ll stick to Xcode. I’ve figured out how to get it working well enough, and there’s no point switching tool sets unless there’s a massive net benefit (AppCode and VS Code for instance are still pretty heavy).
You are right. I have kind of a similar story as you. And have one foot at the FOSS world. In a discussion with a random archlinux user, he pointed out that Swift will always face difficulties in the open source world, because it represents a large company, etc. I think he is right as well. We should collaborate to help dismantle this idea. I am working on an educational script to train undergrads to criticise each other essays. A denial package for swift is sorely needed too.
No, it should be available in all territories. It is possible they’re still processing it for some other countries however, it was just approved less than 24 hours ago 
Much appreciated! Yeah the idea was to replicate that feature of the Apple Watch for people like me who don’t have one yet 
Great idea 👍🏻
Since I've got college apps sent in, I'm hoping to start a project that can visually assist in composing an outfit for people like me who are interested in fashion/style.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/codementors] [\[Seeking\] Swift mentor](https://www.reddit.com/r/CodeMentors/comments/7o0hw7/seeking_swift_mentor/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Are you looking for in person or online? A few times people here have tried to get a thing going to do some tutorials as a group, but they keep falling apart. Seems like people say they want to join, but they never do. Are you doing any tutorials now, are you looking at Swift 4 only, is there some area of iOS dev you'd be looking at?
I'm starting to tutor and mentor in Swift at: http://code-coach.net/
It’s an Apple centric language completely driven for Apple development. It’s no different than Objective C was for NeXT then macOS. Adoption is going to be very hard unless Apple spends resources to make it not Apple centric. 
FWIW, I am beta testing Swift for z/OS (IBM's primary mainframe OS). It's been quite enjoyable, even though I haven't written any real applications at this point.
So I just downloaded your app , some of my thoughts - - Overall app is really great, simply and easy to use. - Love the first page which simply explains your stand hours. - Calender functionally is great however layout is slightly odd. Maybe more spacing between the days? - The worst thing that I found very confusing (as a user) is the functionality to store the “stand hours” in another Apple Health metric. This made complete sense to me as a developer, but to s regular user that wall of text about it at the start just made it far more complex than it needed to be. My suggestion here - remove this explanation from the start, making it as simple as possible. Move this explanation to the settings area where you can change the metric, as you said, it’s completely optional That’s just my two cents. Of course not being s critic, just some feedback, trying to be helpful :-) 
You already have [Swift Playgrounds](https://www.apple.com/swift/playgrounds/) for iPad which we can all agree was targeted at younger coders and since I didn't pay much attention I'm not sure if it isn't just doing some pseudo compiling of your code. The main reason for no major advancement most likely is the ever changing language. Swift is yet to have an [ABI stable](https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md) standard library so it can be part of the OS and we don't have to package it with every single app like we do atm. There will also be no major code breaking migrations with new Swift versions, what very few production environment can afford generally. This is also a big no no for many to adopt Swift. The ABI stability is promised in [Swift 5.0](https://github.com/apple/swift-evolution), which will be available this year, so I'd say we'll see more advancement on other platforms and even more activity in the already vibrant Swift communities of the Apple ecosystem.
Yea, what I was attempting to do was have that function sit at that line until data appeared, then release it to do the rest. Sloppy, but i was hoping it would work until I could learn to do this properly. Surprise, it did not. The entire concept of completion blocks has me flummoxed. I can look at all these examples of them, but I’m not really understanding them. 
Xcode 9.1 and 9.2 lost the functionality to autocomplete/search initializers when typing out arguments. It’s fucking terrible and slows me down. Also majority of the time almost all of the code gets discolored and becomes a single color. Damn I hate Xcode.
Required init(aDecoder...) is called by iOS itself to decode data from NSKeyedUnarchive. As I’m load data that was previously saved for the specific object. you don’t call this init yourself. 
This is exactly another reason why I tell people to learn Swift first before learning to make an app. The first question is located in questions[0]. The next question is located in questions[1]. For example, if the user is right, then have a variable to hold the index position of the questions array. var questionsIndex = 0 Use: questionLabel.text = questions[questionIndex] If the user is correct, do: questionsIndex += 1 And reload the view to take into account the new index so the following should display the next question: questionLabel.text = questions[questionIndex]
Use UserDefaults. Core Data is for data that can grow. To save: UserDefaults.standard.set(indexVariable, forKey “LastPosition”) I’m on mobile so I think that’s the right method call. And to load it. You have to use optional binding when accessing from a dictionary. If let index = UserDefaults.standard.object(forKey: “LastPosition”) { //set index to the position and load it }
Use AppCode. You’ll never use Xcode again except for storyboards. 
Really your fault. Turning things off and on should the first thing you do. 
Probably because it’s bad coding practice to have globals. Also, it’s fileprivate wouldn’t it only be accessible In the same file?
static means it’s called by the class, not an instance of the class. It’s that easy and simple.
I have a 13” MacBook Pro with Touchbar. I love the touchbar but it’s not worth the extra $300. The 13” has a better resolution than the Air so you can see more space on screen if you want. I’m fine with the screen size for my iOS development. Especially for the storyboards/views. It’s slick and fast too. 
I love the Touch Bar but it’s not worth the extra $300. Unless you got money to waste.
Yes you can name views by setting accessibility Label 
I thought about that. The problem with AppCode is exactly this "except for" part. I need storyboards. If Jetbrains decides to make AppCode cover everything Xcode does, I would be burning a version of Xcode in CD, on the full moon circled by wolves howling... Xcode is a piece of crap.
Thanks, this almost worked, it's accessibilityIdentifier but then it works!
This is the one, except I currently don't use IB. I've updated the OP, though.
Rust seems to already be the systems programming language that Swift wants to be with a very solid ownership model in place thaht Swift is just getting around to implementing. Sure it's a bit more clunky, but it already has a lot of developer mindshare and if it saves me from ever having to write C++ in my life again, well that alone would be worth it.
I use both side by side.
This is the sort of nonsense that really hurts Swift. Swift isn't a simple hack like Objective C was, Swift is a fully modern development. It is no more Apple specific than Python and frankly is a better solution to many problems than Python ever will be. From my standpoint the Linux community is really hurting itself being so stuck in the C world and hardly well adjusted to C++. Go with a modern solution and much of the bug riddled software that pollutes the Linux world would disappear. There is nothing better than Swift right now for app generation..
I’m still flabbergasted how Mozilla bested Apple on this.
Appcode is my secret dream...
Rust had a headstart and to be fair, Swift was always gonna be given a community focused on application development with the way they positioned it. Heck, look at this subreddit. It's all iOS. Couple that with how difficult systems development is on Swift and you can see why this is all not going anywhere: This guy here wrote a kernel in Swift and had to use a modified Swift compiler to support the x86_64 kernel memory model and disable the red zone: https://github.com/spevans/swift-project1
It’s not the language, it’s the platform libraries. There are a ton of libraries for Swift, and things that make it work with legacy Objective-C and Cocoa. Swift works well for he platforms it supports directly, iOS and macOS. However, looking for Swift to work on other platforms like Web and Android or Windows, proves to be difficult, because the libraries don’t support them. 
Although, I don't use Swift on a daily basis, I do think it's a great language, and wish I had more incentive to start a project with it. I can't speak to the speed of it, but I do have an opinion on why it's not adopted outside of Apple targeted platforms. My opinion is that only open sourcing the language, while keeping Core Graphics, Core Audio, and all the other useful libraries closed source was the reason it didn't catch any steam. I understand that there are open source alternatives, but that's not enough, obviously. If Apple came out of the gate with open source versions of those libraries, I suspect there would have been a much larger response. It certainly would have taken some of the Electron / Reactive Native market share. Plus, the Xamarin / Cross Platform apps would have had a good competitor in Swift + Core libraries. It's great that use can use Swift for web projects, but honestly, who cares? There's entirely too much competition in that domain. And, if I have to re-invent the wheel for graphics and audio, I'll look elsewhere. Which, is really too bad, because I'd much rather write Swift than C++.
I’ve had to kill DerivedData multiple times. After one of them it all came back. Also missing in XCode is block selection. That one hits me hard every day.
It would be so nice to have a tagName property.
Yes, I know. I actually figured it out a while back. And also I have learned Swift, but thanks for your reply anyway. EDIT: Sorry, I posted a comment that said I solved this problem, but I must have deleted it.
Thank you very much for your feedback. I agree that the Apple Health exporting is somewhat confusing, so I’m definitely open to suggestions on how to make that better. I’ll play around with moving that to the settings screen. As for the calendar screen, do you think the overall use of the clock emoji is odd, or just the layout/spacing? That was another thing I was unsure about but decided to roll with because I didn’t have a better idea. I’ve heard mixed feedback. If you don’t mind, an App Store review would be very helpful ;) Cheers and God bless!
&gt; Fedor Just noticed that someone has started packaging swift in a snap, however he is facing problems with permissions, just a tiny little bit to be functional. If anyone read this and is able to help, please chime in [here](https://forum.snapcraft.io/t/help-packaging-swift-compiler-in-a-snap/2142/2).
Swift does work on the web already. It also does have a third-party library to build Android apps. There's some real hackery to get it to work on Windows, but that can be done using the WSL (not the biggest fan of this) terminals
What I found that also really helps is to join the /r/iOSProgramming slack channel here: [iOS slack](http://ios-developers.io/) By that I've gotten multiple answers and insight on Swift techniques, and eventually I was able to help other people out too!
Will definitely add a review to the App Store! Regarding te calendar - yes, the clock emoji is definitely odd. The green tick looks somewhat out of place as well. To be honest, I think what you’ve chosen is just as good as anything id come up with for this page so I don’t really have any feedback to help you here What you need for this page is someone who’s artistic who can design a cool page for you! And finally about the Apple health metrics - absolutely it is not going to be a big deal for the average user. If they want their stand hours, they can just .. open your App! Stand hours! No need to use Apple health 
There's too much work to be done to make it useful. It's a wonderful language (for the most part) but there's no support for it outside of iOS/macOS. What would you want to use it for on Linux? Name anything other than server-side and there just won't be a library to support your work. 
"More friendly" is relative. "More friendly" than what? Simple summary: they're a way to bundle related pieces of data into packages that are treated as one, which define the operations that can be applied onto that data. For example, if you're writing a piece of bank software, you'll need access to your customers name and contact details in many places. Rather than shipping around separate strings and such (such as first and last names), you can just define a `Person` struct that encapsulates them all together, and you can just conveniently pass around `Customer` structs as a whole: struct Customer { let firstName: String let lastName: String let dateOfBirth: Date //... }
I don't know how much this will help but you can think of them as about the same thing with a few key differences. The Struct is faster because of where the memory is (stack/heap). Structs are passed around the app as a pointer, so they are always by reference. So when you pass a struct into a function, you can modify it in that function. A class makes a copy so you then have two and any changes don't make it back to the other. I'll let some others jump in for other differences.
Thanks! and by more friendly, i meant more friendly than he description of Class and Struct from apple.com :3 
You’ve got classes and structs switched around. Structs are value types and will be copied. You are correct that they are more memory efficient. Classes are reference types and share a single copy.
Structs are passed "by value" while classes are passed "by reference." Create two types: class PersonClass { var name: String; var age: Int } struct PersonStruct { var name: String; var age: Int } and a function func changePersons(struct: PersonStruct, class: PersonClass) { struct.name = "Fred" struct.age = 44 class.name = "Fred" class.age = 44 } and call it var s = PersonStruct(name: "John", age: 20) var c = PersonClass(name: "John", age: 20) changePersons(struct: s, class: c) print("struct:",s) print("class:",c) (side note, this won't actually work because Swift prevents you from modifying a struct argument to a function to prevent you from making this very mistake. But pretending it didn't...) What you'll see is that struct version is still "John" and 20 and the class version is "Fred" and 44. A class is a reference type. That means when you pass it around you tell the target "here, this object is at memory address 0xf1eacd. Do what you want with it." And the recipient can modify the values at that address if it so wishes. Since both the source and the target were referring to memory address 0xf1eacd they both will experience whatever changes are made to the values at that address. A struct is a value type. That means when you pass it around you tell the target "here, this object had the values "John" and 20. Write those down on your own notepad and do whatever you want to it." So the recipient can only change it's own version of this object. So when the target changes the value it's only changing the value on it's own personal notepad and doesn't touch the sources version. If you want to know what the point of a sturct/class is in the first place then that's relatively simple. Imagine you had the concept of a Person that you wanted to model. Prior to structs you'd have to write: let johnsName = "John" let johnsAge = 20 and if you wanted to use those values in a function you'd have to write func printOutJohnsInfo(johnsName: String, johnsAge: Int) { print(johnsName, johnsAge) } an obvious grouping would be to combine those into some sort of structure that the compiler will do this bookkeeping for you: struct Person { let name: String let age: Int func printInfo() { print(name, age) } let john = Person(name: "John", age: 20) print(john) the compiler actually turns the struct version into the non-struct version later during the compilation process. This is all just window dressing to facilitate ease for the programmer. 
It clearly states it's a beginners blog post with much more advanced content on it's way. Thank you for your criticism, it has inspired us to move forward faster with our Swift Series content.
Yep! You’re correct about structs being more memory efficient, though. Just mixed up the value vs reference type. 
You should abstract away your logic from the asynchronous call so that you can test it independently with a mocked response. 
Structure and classes are very common among languages and as such examples can be found outside of apples documentation. There are some specifics to swift over other languages but don’t be afraid to google and learn more about programming languages as a whole. 
That seems rather vague and subjective. Who's to say dogs can be compared? Two dogs can have similar properties but separate identities.
That’s exatcly why I mentioned it as a rule of thumb that I use. 
Find some courses on UDEMY. 
Not looking for tutorials. Looking for a mentorship.
Either would be fine. Would prefer in-person though. Looking for more of a mentorship, not looking for someone to help me with tutorials. I have an app in the app store.
It might be basic, but the most important to me if want to venture to new language. Ability to manipulate data using array. What my question is to manage manually location each label.. If other language like web or c# or vb.net or java, you can set manually.. But in swift , you need to drag and drop component like label .. A bit annoying. IF can avoid the storyboard , i just want to create a template generator instead .
Thenounproject.com is one resource. They require either attribution or a paid subscription. 
Go for the most RAM you can get, which is 16 GB. If you have apps running besides Xcode, you will need it.
I haven't looked in a while but I think the attribution clause is pretty fair. It's not like you need to put a big banner on your pages or anything. That may have changed.
No I think it's just a simple mention somewhere in you're app.
Much appreciated! Thanks again for all your feedback.
There was someone that was offering that as a paid service on here a while back. I would be interesting to have some live video sessions, but the problem with this or in person is finding someone with the skills and the time. I'm more of a tutorial and Q&amp;A kinda guy myself.
You can certainly avoid storyboards. AFAIK the only framework that actually needs them are apps that use the Apple Watch framework WatchKit. Programmatic views are definitely a thing and it’s not bad. A google search and you’d be well on your way in doing that. It’ll take some time though adjusting, especially with AutoLayout in mind (you’ll also want to consider the new safeArea guidelines), but I found it’s very worth the effort. GL
I’ve ran AppCode, Xcode, Photoshop, Illustrator, Sketch at the same time and my MacBook Pro is 8 GB. Everything runs just fine. 
You mean option+click+drag to select?
Do just that, then type something. How many lines get changed?
My comment was written poorly - I was referring to Swift being a proprietary language. I didn’t know until a few minutes ago that Apple released 1.2 under the Apache license. This is great news. 
So I’m still fairly new to swift development, but, since you’ve defined the variable outside the class, is it not just a normal variable? 
Exactly. It's not a global. It's private to that file, only accessible to code in that file, or exposed via a class method if you so choose. Like static but without the legacy terminology/keyword.
I know what it means.. I'm saying the word `static` is not intuitive here for new users of Swift. It's a holdover from C.
It's a global variable. The protection is `internal`. So you can refer to `ThisVariable` from anywhere in the same program or framework. It is not associated with `ExampleViewController`.
Love it, I’ll definitely use that in my projects. A good idea would be make something similar with the keychain saving too.
What specifically is troubling you with constraints? I find them much more liberating than CSS, but I learned Swift first to be fair. A lot of things are transferable from CSS though: Swift stack views are kind of like flow layouts, edge-distance constraints are like margins and padding, etc. Maybe I can help if you have a specific thing in CSS that you can't seem to consistently transfer to Swift.
It is great news and unfortunately nobody is paying attention in the free software world. Swift is a very modern language that would eliminate much of the badness that comes with trying to write major software projects in C. In a nut shell Apple and the external developers have leveraged years of experience with other languages to make Swift a safer programming language. While I don't want to put one new language ahead of all others, it is pretty clear that Swift is a complete implementation of new tech which has melded together ideas from many existing languages and formal research. In any event I do believe that my point stands, the Linux community needs to get behind modern languages and programming concepts or be left in the dust with C. Hell they could do wonders simply by putting more effort into C++, but even C++ will get left behind at some point as it still has a lot of gotchas that harm newer programmers. What would be interesting is to see a new user land for Linux built around Rust, Swift or another language that protects the developer from himself. Of course that is a big undertaking but I fully believe it is something that needs to happen because Linux user land is in need of quality apps that don't suck. 
Just what I thought too ! 
I used to run some mentorship sessions a while back, over facetime/skype video or audio calls + email assignments. It usually works well as long as both sides reserve some time for that (on a "no matter what" basis), ie put that permanently in their calendars. The more "ad hoc" sessions approach was much more problematic. 
Thank you all for the answers, you've all been helpful. Last night I was watching https://academy.realm.io/posts/altconf-jaim-zuber-stylish-developers-guide-to-unit-testing-in-swift/?utm%5C_source=Swift%5C_Developments&amp;utm%5C_medium=email&amp;utm%5C_campaign=Swift%5C_Developments%5C_Issue%5C_76 You all do make a point, and I will split writing and reading. Although, I am testing if the method writes and then updates the record in db, so I'll have to think of another way instead of mocking. 
Practise.
Is there an advantage of using KeyPath versus say a struct with static strings? The latter is less code and easier to read. struct AppConfigKeys { static let kMyKey = "only place you will see a raw string" } UserDefaults.standard.value(forKey: AppConfigKeys.kMyKey) 
A variable created at the top level outside a class behaves like a static variable. Only one instance of it exists, and it doesn't get deallocated. In your particular example, `ThisVariable` has nothing to do with `ExampleViewController` other than being defined in the same file. It would behave the same if you moved it to a different file.
What I like doing is to break the networking into three parts with two of them as standalone. One deals with the low-level stuff, like URLsessions, progress, errors, etc. The second part deals with caching and translation of the data into values the app can use. For example if JSON comes back, parsing it into dictionaries or objects. Going the other way, this layer also has calls that eventually translate to REST calls, for example 'addUser' with a bunch of params gets converted into a dictionary which then calls the low-level networking for a POST to a given URL. Each of these components should be kept isolated from each other. This makes it so you can replace them with fake or 'mocked' versions that offer the same interface but can be used for quick development and testing. The last part is the main app. It calls the second tier ONLY. It doesn't know about the low-level networking at all. If you want to be real clean about it you can wrap both low-level components in a standalone wrapper and turn it all into a standalone framework. This way you can reuse all that stuff as an SDK in a separate app or use it in a testing target. The trick is to break things into decoupled layers that interact with each other through APIs. That way you can change things as you develop without having to do a lot of search and replace all over the place if, say, a new field is added to the back-end.
Just bought it. Thanks!
I'll stick to https://github.com/radex/SwiftyUserDefaults - way less boilerplate.
I like the concept, but there's a lot of boilerplate in getting and setting from UserDefaults, it'd be best if you could limit the amount of #keyPath(favoriteName) 
i had to add @obj to the function
I usually make a light wrapper for `UserDefaults` that has its own key type that I can extend with new static values when needed. That, and generic storage, make `UserDefaults` much more Swifty.
Thanks a lot, I got what I needed.
Yeah, it's so stupid they replicated the previous broken behavior when they implemented block selection and editing in the new Xcode editor, rather than matching how every other block editor works.
I’m certain there is a project manager hiding away in the Apple headquarters shouting at padded walls “this is the way it is supposed to work!”. Someday I want to meet that individual just to tell them how utterly, and inescapably, wrong they are about this, and probably everything else in life.
Yeah, there's a certain amount of insularity at Apple, especially amongst the dev tools people. They don't really know how third party devs work and apparently don't care to listen to us so we see things like the block editing behavior and the brain-dead "matching delimiters" feature they added in Xcode 9. A hugely useful feature in any other IDE is annoyingly buggy in Xcode.
Thanks for curating those. Do you have an RSS feed?
Thanks for the response! Quick questions: does the second layer directly interact with the model? For example lets say you have a data store object that you've been injecting through your VC's. Also, are the parts singleton classes?
In general, the safest *and* least hassle is to use neither ‘?’ nor ‘!’, and just not allow nil as a possible value, but sometimes that’s not possible. If nil is a reasonable thing for a variable to be, then ‘?’ is definitely safer, and there’s no downside to using it over ‘!’ other than it being a bit of a hassle. The way I think about ‘!’ is this: “if ! didn’t exist in the language, would I write ‘guard let foo = bar else { fatalError() }’ here?”. If I would, if nil is really always an error at that point in the program, then I go ahead and use ! as a quick convenient way to say that.
Depends on whether you're sending model data directly or there's logic involved to filter out or selects parts. I generally try to keep model dependencies out of networking components to make them easier to test and reuse. The parts are effectively singletons since there's usually only one of them around. Depends on your threading model and whether you want to use delegates, blocks, or broadcast notifications for sending back status.
Even when the value is expected to be non-nil in all cases, it’s also worth considering two different philosophies for sudden unexpected state: * fail early, fail often (if I didn’t plan for something weird, then crash, forcing me to handle the weirdness) Versus * no-op on soft error (if an error occurs, back out but keep the app running) Both are valid options, depending on the expectations of the overall project. The ! operator represents the first philosophy. Using ? in all cases represents the second.
That’s stupid. Why have a global only accessible In that file when the point of a singleton is to be accessible everywhere. 
You must also tell it that you are inserting the rows of the other array.
Thanks! Your replies are really helpful.
The problem is that you tell your tableView just to delete one row and that's why it expects to see 0 rows in tableView(_:numberOfRowsInSection:) instead of what you provide. a) Consider about using tableView.reloadData() or reload data in needed section so it will just hook up new array. b) Consider about using insertRows(at:with:) after deleting the last row in section.
I usually like to play a little game with myself every time I make a new subject (class/struct/enum). Here are the rules: 1. Try to make this new class, struct, or enum (there's a separate game to determine which one to use, but let's stay focused here) without any optionals at all. 2. If an optional makes sense to use for a property, never use `!`. Always `guard let` or `if let` it anywhere it's used. I've quite literally had large projects of 25k lines of code, and less than 5 force-unwrappings. And those `!` were almost all dealing with UIKit black boxes in some way. If it's my own code entirely, it will never have an IUO or a force-unwrap at all. I know there's some debate about force-unwrapping not being a boogeyman, so please don't misunderstand. It's not a must to do anything, but if you play this game, you'll be rewarded with almost no crashes. Obviously, you can write some things that the compiler won't catch (literal array subscripting [idx] and calling things from incorrect threads to name a few), but logic crashes become a thing of the past. And thats one less thing you have to worry about while you fix real logic and architectural problems. You'd be amazed at what this does: - It forces you to make every subject have all of it's data at initialization time. This encourages encapsulation and value semantics which, in turn, minimizes unintended sharing of state. - It ensures that, possibly, nothing in the class/struct/enum is unaccounted for. Everything it needs is not "in question" ;) - It forces you to do all of the hard work up front. Some times your programmer angst just wants to get in there write an exciting class that shows up on the screen/page/whatever, but if you have to initialize every value beforehand, you end up writing 18 classes before you finally have all the data it needs to truly be autonomous. By then you've probably forgot what you were doing, but I assure you this is the proper way to build your apps in units. This is how you build apps from the inside out, rather than the sugar coated candy outside first. - You've also resolved a boat load of future bugs where previously you were just glazing over with a "ah, I'll figure that part out later" or "ah, I'll handle that scenario when I get to error handling" - Does wonders for unit testing. Not only paving the way for easier unit testable classes, but also helping you develop an understand of the importance of it and how to do it properly. When you play this game, you most certainly end up with plenty of optionals. Optionals are super useful. But when you eliminate the need to use them because you simply don't know what the hell to have as a default right now and just want to monkey code some more lines before the end of the sprint, you are doing it wrong. If your question marks are a symbol of you just not wanting to deal with what the value should be, you need to play this game instead. So what are optionals used for? Let's give some real use cases: 1. Unfortunately, you may be forced to use them to play well with the Cocoasphere, such as with IBOutlets and things that the Apple folks haven't really figured out how to translate into Swift safety. No choice there. 2. When a value truly can have a "it just doesn't exist yet" value. A good example would be a number that just doesn't exist yet. All values from negative to positive infinity are valid, so defaulting doesn't tell us whether the number was already calculated or simply hasn't had it's turn to be set yet. Maybe a tax on the final price. The key here is to use nil to describe your logic or describe the fact that you have no other choice but to have nothing at all. These situations will force you to use optionals, you won't have to decide really. They are typically driven by user input... the user is a real world human event that hasn't gave it's input yet, therefore the values haven't been set yet and need to be set before the app can continue on it's flow. 2.a Now, you may be tempted to think many things are "not there" yet, but many times with things, such as with strings, you end up asking if it's nil and blank. Really blank is just as bad as nil, so you should probably default it to blank and make it non-optional and just do validation like you would have anyway. Or even with the tax example, multiplying by 1.0 is the same as not having one set at all and that becomes your new "optional" value if it's ok to move on without it being set properly. 3. Using it as a boolean "3rd state". This one is cool because it kind of speaks for itself. Let's say you have a setting that's displayed as a UISwitch. It's either on or off. True or false. However, what if the user has never set the setting either way? You want them to choose, but before they do, you have no value set at all, which is useful for all kinds of first-time user scenarios. I'm basically saying with this type, the value has been set true, it's been set to false, or it has never been set yet. No //code comments needed! 
Great explanation! As a newbie myself, I would be very interested in your “class/struct/enum” game as well. I don’t want to hijack the thread, but it seems like your explanation of the original question is pretty complete.
Adding the @objc to the start of that function just exposes it to Objective-C so that the function can be used as a selector.
Nothing implicitly wrong about pods! We have a ton of pods for a reason. But as we are getting close to 50 dependencies, I try to keep it as low as possible to avoid longer compile times (each module takes quite a while) and to reduce complexity of the project. 
a) Reloading data for one deleted cell is a bad thing to do. b) I will try that. Thank you!
When you delete a row, check if the count is going to be zero. If it will, tell table view you’re inserting the other array.
7
Sure. Very briefly (hopefully): 1. Start with enum, then struct, then class. If it can't be an enum, make it struct. If it can't be a struct, make it a class. That's pretty much the game rules, but here are some things you should know: **enum** If your entity can only be described as one value **OR** another. Don't just limit this to a single value either. Associative enum values are very powerful which is why you want to play this game to make sure you still can't use it. People think that with more than one value that describes something, it has to be a struct. Something can be a "type" but still have a few values to give it fine tuning. Some examples: 1. Usually anything you would consider putting in a dropdown for a user 1. Anything you feel like calling a "type" or "category" in your specs. Like the "type" of a clothing (shirt/pants/accessory) or the "category" or "group". If any of these synonyms are in your vocabulary. Most likely it can be an enum. You can still have a *dress* type and pick the size with the same enum, so no need to go struct, even with complicated dropdowns. 1. For static name-spacing. At the moment, Swift doesn't have a concept of submodules so declaring grouped static helper functions can be placed at the top level of an enum. This gives a safeguard in your code for other developers not to create any instances of it and just use it in a static fashion. For instance if my enum was named Helper and had functions like Helper.parseSomething(), I would be the parseSomething public static method on the enum. This enum has no cases and can't be created (like with a Helper() constructor) so it's a dead end scope, which is what you want. **struct vs class** Here's where I have to tread a little lightly. This topic can become a matter of preference so I will only describe how I decide for my personal liking. It is often possible to have a struct or a class in either case and it won't harm your code or be "stupid" either way. It just matters regarding your end goal. If there isn't a clear distinction I use some of the following rules of thumb to make it a struct over a class: - Is it a "dumb model object"? You know, those ones where you're just storing what amounts to properties and passing them around inside as parameters and in collections? Struct. You typically don't want those things to share state. - If you lean on the functional/encapsulation purism side of things, you obsess over making sure nothing modifies your stuff, even your own code. Structs are useful for this because they are values that can't be modified once they are created, without creating a new one. There is so much more to this topic, but too much to cover here. - Are there going to be a gazillion of these things? In that case, I would look at making it a class to possibly save some memory, but that would have to be looked at on a case by case basis. It's just a scenario to give you pause to think about scalability. If structs are passed by value, that means copies are being made (in many cases this is mitigated by the compiler too), so you're sacrificing immutability for memory. If I'm pushing the limits of the tool, I'll consider other tools. Then there are times when you definitively need a class. This is why you start with struct. Struct is a value type and some things just can't be considered values and need to "hang around". Some examples are: - most singletons - things that need to receive delegate callbacks - things that need to be NSObjects for protocol conformance (NSProtocol usually) Hope that helps
First you can use linux to learn swift on itself. Second, learning swift is not the same as learning iOS development. Just like if someone knows Java doesn't mean the know Android development. And above all this some computer science is important if you want to go pro. My suggestion, baby steps. Think of a project, read about iOS components, do some some tutorials on YouTube, and build your app. As you'll progress you should go back and refactor part of the app to higher standards.
Just creating an app isn’t hard. Creating one the standard way is a bit more challenging.
don’t you have to have an implicitly unwrapped optional in order for storyboards to inject elements in UIControllers? 
In my short experience, Swift is a beautiful language, and relatively simple to learn to use effectively (if not to the point of mastery). However, the difficulty of iOS development is the same as any other platform: it’s in the nuances of the platform, knowledge of APIs, and how to use the tool chain. If you dive in, there are lots of excellent tutorials on various websites for the basics, including Apple’s own ebooks. I’d use those first, and branch out as necessary. 
Quick question related to this. I do use these when I am defining typealiases. Do you create a separate file for typealiases or declare them as global?
Learn JavaScript first and do some cool things with your site. 
I can tell you about my experience: I had zero programming experience. I had wanted to learn how to develop apps for a long time. I tried diving into Objective C, but would get so overwhelmed by the syntax that I gave up multiple times. With the release of Swift, I figured it was my chance to go for it. I read Apple's [Swift Programming Language](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309) cover to cover and took extensive notes. I then started trying to build simple apps with some success. I quickly learned that I needed feedback about whether my code was "right." I enrolled in the Udacity beginning IOS development and raced through it (it's pretty fun, but it is expensive). I then did the IOS developer course and built my first store app as the final project ([EnBloc](https://itunes.apple.com/us/app/enbloc/id1271878178?ls=1&amp;mt=8)). I am now working on the app I have always wanted to build. I usually refer back to my Udacity notes or Stack Overflow when I get stuck. I would say my total time was about a year to year and half from starting to learn, to getting through the courses to publishing the app. This is also while holding down a full-time career and raising a newborn. My advice would be to have a final goal in mind. My main motivation is the app I am building right now. It is something I really want to see exist and is something I would use. You will hit obstacles, but make sure you have something that motivates you, otherwise you will likely give up when it gets hard. Swift is a great language and programming is super addictive. Good luck. 
This was cool. Thanks
This. I’m surprised nobody has facetiously told you that HTML/CSS aren’t “programming languages” yet, but it is an important difference when learning your first programming language. Swift itself is pretty easy, but the concepts of software development (e.g. class hierarchies, protocols, closures, delegation, async) can be difficult to understand and apply the first few times. It’s wonderful that you already have a website. JavaScript is a great way to start doing interesting and useful stuff in an environment you already understand. Try your hand at mocking up the app you want to make (if possible) as a web-app using JavaScript. Once complete, you’ll hopefully already understand many programming concepts, have an idea of how you want to architect this shindig, and just have to learn the syntax and peculiarities of Swift and apply them. 
A board/card game that utilizes MultipeerConnecitivity for iPhone and iPad. Been a fun project to work on, hoping to release it in a few weeks.
yes, this method does not work. They are adding additional dylib files and tweaking the binary and re-distributing it.
Typealiases are not variables, so have different rules... While it can be helpful to define a typealias within a class or struct, they are also commonly defined globally. For example a commonly used closure may be typealiased globally, or a type like TimeInterval is a globally typealiased Double.
I'm not sure why I was downvoted. I'm not sure what you mean by 7?
Sweet. Thanks.
Swift is amazingly simple to learn. I mean that in the way it’s easy to learn to ride a bike. If you’re in the park and just want to have fun biking around for a few minutes, learning to ride a bike is easy. If you’re looking to do aerial tricks or win the Tour de France, then learning those skills will take time and some dedication. You can learn the basics of Swift syntax, variables, and logic flow in less than a day using the Playgrounds app on iPad. But if you’re going to write an app you’ll need to know about Xcode, iOS SDK, and App Store publishing. That is going to take time. But if 99-year-old grandmothers and 9-year-old kids can learn that stuff, so can you.
This is the book I’ve been hoping you’d write since I landed (thanks in no small part to your other books) my first ios development job. Already pre-ordered. Thank you being you. 
First things first, you can get a used mac for $400 on eBay. I filter for an i7 and 8gb of ram, you can filter for more ram, or an ssd too and still get a cheap computer. I have found a 2011 series macbook pro, with 16gb of ram, an i7 processor, and a 256 gb ssd for 400. This is the only way I'd recommend getting a mac. If you have reservations about that, you can make a hackintosh. It's much harder, but better performance/dollar. But trust me, you can find a good laptop on eBay. Html and css are essentially markup only. This is not the same as swift. In swift you'll have a huge amount of things that will be challenging to start on. For example. In js, python, ruby and many others the type system is hidden from you. In swift you must work with it. This makes it harder to learn and slows production, but fundamentally you need to be aware of types when you program and so it's going to be worth it. I started learning swift march of last year. By June I was working on an app that revolved and optical character recognition (ocr). The challenges of this tech and the framework I used losing support prevented me from going to market, but I would have shipped in November. I worked roughly 5 hours a night learning and programming. I also learned python in a few days in the summer because of my background in swift. In the last month I've learned JavaScript and now I have a node server running and I'm working on a react website. All of these would have been harder to learn without my background in swift. Swift is a really good language to start with. I'm betting you're probably 6 months away from shipping an app. Which is a ways tbh. Make sure to use tutorials and if programming is something you can see yourself doing with your life, try other languages too. It makes you like both languages more.
Oh?
Tweet at Chris Lattner. He would have been the person to decide or approve upon the mapping. Also, I wouldn’t mention that you think his choice was insane in the tweet. He might think it’s rude, or take it personally.
Well at least I know who's to blame now!
Good luck with your investigation.
If you want to do multiple operations on a table view you need to perform the operations between a call to `tableView.beginUpdates()` and `tableView.endUpdates()`
The way you expect is how it was originally, and that changed at some point to what it is now. Objective-C didn’t have named first arguments, but Swift can. It makes more sense to break that last piece of the method name into the argument name, while keeping the name of the method focused on the action it performs. Here are some of the official resources that can answer your question about why this was done [Swift API Guidelines](https://swift.org/documentation/api-design-guidelines/) And the proposals, with reasoning: * [SE-0023 API Design Guidelines](https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md) * [SE-0006 Apply API Guidelines to the Standard Library](https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md) * **[SE-0005 Better Translation of Objective-C APIs Into Swift](https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md)**
I’m assuming this was set up in a storyboard. Create outlets for all your text fields in your TableViewController class (by ctrl-dragging from the text fields in your storyboard to the class file). You should then be able to get the values in them with their `text` property. 
So I don't create a custom cell class? Do I get values from cellForRowAt, didSelectRowAt? Will I be able to get all the values even the ones untouched? I think I just am over thinking it because off my other tableviews are dynamic and I was adding the textfield in with the associated cell object to a model with textFieldDidEndEditing. 
Right, I was just saying thats how I was doing it on my dynamic tables and was getting confused and over thinking how to get the values from a static cell. So I can just create a protocol and then the button on the other view will be able to access the data and I can submit to my API.
Thanks for the details. This is useful.
The values in the text fields can be gotten by their `text` property (i.e. `let exampleString = textField1.text`). The save button would have an action (function) attached to it where you can then get each text field’s text. Do you have that?
I'm on mobile right now but will be back on in a few minutes. I would be able to make outlets from a container view to the parent view? 
My point is a singleton shouldn’t be constrained in a file 
He means a unified SDK for Mac and iOS, web development will still be completely different. And even a unified SDK means handling UI considerations differently for the two platforms. 
People think you are being lazy for asking such a vague question.
HTML/CSS is the xcode of website development in sense. JavaScript would be the Swift comparison in this analogy as well.
Having a goal or reason helps greatly in getting through self education attempts like this. However like you I'd avoid setting that goal as a first project. Make your first projects simple and throw away-able.
For organizational purposes, it doesn’t make sense to put everything in your AppDelegate, that will make it more crowded and convoluted. Re memory: it depends on how the constants are declared. If they’re wrapped in a struct, sure, you have one other object in memory. But at the end of the day that is not going to make a big difference on the performance of your app.
why do i need to know about xcode?
Oh. Okay. What is 7?
Correct, exactly
For practical purposes code files have no bearing on memory. Files are for organizational purposes. You could have all classes in your project all in one huge file, but finding anything would be difficult and maintaining such a pile of crap would be hard. By separating elements of your program into separate files you provide structure and organization. A file called "constants" lets you and others know immediately what is to be found in that file.
It might help if you post the code, it's hard to know what you've got going on. I've done static tables before, but it was all ObjC and years ago. What I remember off hand was passing data from the main caller, getting the data, then it would be updated at the caller. The other option I had was to save direct to file like a Core Data table.
Learned it well enough to write the skeleton of an app in 48 hrs
it's an answer as meaningless as. your question.
No.
I'm working on a cool app (in my opinion it is cool, it probably sucks though). It is a geography app that helps people study for the Geography Bee. It has a Map, and you can put pins on important places. It also has a table of facts and capitals of countries to study. Most importantly it is a Geography quiz app. It is not on the app store because membership is WAY too expensive, and I'm just a kid. 
Set it via the init or a setter function. There’s no way to do it “in-line” the way you have it declared in your snippet. As an added bonus, if you do it in the init, you don’t need to have the member var be optional.
You can do `mySkView = self.view as? SKView` but then mySkView will be an optional
How could be the structure of that constant file and how to use it?
Here's what's wrong even with separate `Constants.swift`: you'll soon get salad as project grows. I like to keep constants in their respective usage files (e.g. VCs, Views, Models, extension files). When you have around 200 constants you'd most likely start guessing where they're used. I know it's easy to see get the usage of identifier in Xcode, but again - it's probably better if you don't even need to perform that action.
About so hard. About so long.
You need to use a guard. guard let mySkView = self.view as? SKView else { return }
You can’t, however since it sounds like the button is in the parent, a view controller has the property `childViewControllers`, which is an array. Since you have just one childVC, you can do something like below in the button’s function: if let childVC = childViewControllers.first as? YourTableViewController { exampleString1 = childVC.textField1.text exampleString2 = childVC.textField.text … }
Thank you so much! 
Single responsibility principle. The purpose of the AppDelegate is getting getting the app launched, initialize services, and show the screen. After that, you don’t go there. Also, you might not have a single constants file. I have one for internal strings (my apps are localized), another for theme, another for Standard paddings, etc. But constants that are only used in one file are declared in that file.
Or if let
I looked at your example again. My solution only works in the context of a method. A guard doesn't work in a declaration, but I'm not actually certain of what is being demonstrated in the example. You can use 4 space indent To make things monospace and resemble code =)
It's too early in the morning but why not simply: let mySkView: SKView = self.view And use it as a normal instead of an optional?
It's inside of the viewDidLoad method. So yeah ur solution works. Can you tell me why it works inside of a method and not outside?
Thank you .)
I wrote a handy extension to UIView for you extension UIView { var typeCastToSKView: SKView? { guard let result = self as? SKView else { return nil } return result } } Then all you need to do is this class ViewController: UIViewController { override func viewDidLoad() { let myView = self.view.typeCastToSKView } }
if let isn't working for me here. Perhaps I'm not using it in the way you imagine?
Sorry, yes, just re read your post and saw that you were after SKView and not SKView?. Disregard that then!! 
Benefits of a constants file: All in one place, easy to find the file and localize Benefits of constants in their relevant class files: modularity, easier to find in the file, follows OOP design principles (low coupling) Benefits of constants in appdelegate: None that I can see. It's messy, doesn't follow design principles, and it probably won't be any more efficient once compiled. It's the compilers job to translate code structured for humans to code structured for CPUs. If you want to improve code efficiency, either find your bottlenecks or research common ones. 
[removed]
Even bigger newb question here, but why use “as” there?
I recently came across a `NiblessMenu` project on GitHub where you can copy the boilerplate to replace the main menu: &lt;https://github.com/lapcat/NiblessMenu&gt; It's so much stuff to recreate the nested menu structure that I won't copy &amp; paste it into here. But I think the `main.swift` is interesting as it works a bit differently than the approaches already mentioned: import Cocoa autoreleasepool { let delegate = AppDelegate() // NSApplication delegate is a weak reference, // so we have to make sure it's not deallocated. // In Objective-C you would use NS_VALID_UNTIL_END_OF_SCOPE withExtendedLifetime(delegate, { let application = NSApplication.shared application.delegate = delegate application.run() application.delegate = nil }) }
As others pointed out, this is a **global variable**. It has _internal_ visibility and will be _lazily_ initialized (given that you provide an initial value, or change the type to `Any!` or `Any?`, which you have to, because the sample code won't compile like this). Swift is interesting when it comes to "root level"-code instructions. This term is about the code as _plain text_. It denotes the stuff you write outside any curly braces. Stuff on this level can be type declarations in the _global namespace_, like your class `ExampleViewController` is, or typealiases, for example. It can also contain variable declarations in the global namespace, turning them into global variables. The interesting thing about this is the ability to just put stuff at the root level in any file and it becomes included in the global namespace, just like that. (Of course you can restrict availability of declarations to the file scope with `fileprivate`.) I think of this to be similar to `extension`s, only that you extend the global namespace implicitly instead of writing an explicit type extension. Scattering globally available information all over the place will make finding stuff harder, though. Xcode's symbol navigator can help (⌘⇧O) to think in terms of symbols instead of files, but proper partitioning of declarations into their own files will be much more helpful. Because our brain clusters information, and having a properly named file helps to organize this info and navigate around. Part of your initial question was: &gt; is this variable created with every instance of ExampleViewController? If you had put the global variable declaration into its own file, you wouldn't have been puzzled about this. It'd have been obvious that since the variable is in its own file, of course it's not tied to any type declaration.
Hi! I’m listed as a co-author and wrote the current and previous implementations of the proposal. AMA
Hey, Im new to ios programming, well not so new it has been 4 months already. I have been playing around with basic, and intermediate level tutorials but, I believe I have reached to a certain level and I would like to learn more advanced stuff. Is there any recommendations like some libraries or some communities that I should check to get better? Also I already have two apps on the Appstore, which are pretty basic apps and about blockchain coins. I'm working on them to publish newer versions on this month. I would be obliged if you could also take a look at my apps and let me know how can I improve them :) https://itunes.apple.com/tr/developer/emre-havan/id1315541762
Thanks! This will be useful. 
Thank you.
He is using Spritekit for game dev. SpriteKit uses a specific view called SKView which is a UIView. He is using as in order to cast his view property to be of SKView instead of UIView.
am i missing something? all i can find is getting a date based on another date, but all i have is a day of the week: sunday, monday ...
The other date is "now" (i.e. `Date()`). Use it to calculate the next date you're looking for.
Happy cake day! 
This is good. The use cases aren’t exceptionally frequent, but when one presents itself, you don’t really have any options. Every hand-made solution to this problem is very error prone. Hopefully the Swift team approves this proposal. Even better if we can see it for, presumably, Swift 5 this summer. 
How difficult would it be to enumerate an enum with associated values? Why is that not included in this PR?
Interface builder will generate the XML for you but xCode is an IDE and by no means is it responsible for your view layer. You can write your view layer in swift and not use IB at all. edit: typo
How would that work? The associated values can be of any type, so the API would have to use type erasure and provide the values as `Any`, which wouldn’t be very swifty.
Hi maerdnacirema! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/7ot3n5/looking_for_a_software_engineer_that_might_want/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
&gt; we are in no way trying to shortchange the immense value an engineer brings to a product. you have no product without an engineer/s
How do you plan to make money (other than investments)? And what happened to the person who made the initial version of the app that’s available in the App Store?
We do not have a clear path to monetization right now. We are still on good terms it has just come to a point where we do not have the personal capital to continue the project. We have been self funded so far. 
Just got into Swift last night... soo I’m working on starting to learn lol
I have no idea :D That's why I'm asking. In my tiny little mind, it shouldn't be that much of a difference.
Rule of thumb - Never mess around with Apple private API. It's private API for a reason and can result in your app crashing with just a minor update from Apple when that private API usage changes. 
I know, it was just for fun; I say exactly that at the end of the post.
Consider what that would mean for Optional. If you asked for “all values” of ‘Int?’, it would have to give you a collection of every valid integer, plus nil.
Why would it be "all values" of "Int?"? For example enum SomeCases { case SometimesError(Error) case Success case Success(Int) } What's so difficult about returning a collection without the associated values? Let's say: [SomeCases.SometimesError, Success, Success(Int)] Is it that there's no way to create SometimesError without an Error?
When a case has an associated value, the case becomes a category of all combinations of its associated values, rather than being one unique case itself. &gt; What's so difficult about returning a collection without the associated values? Well, theoretically we can have enumerable _tags_ of the enum cases, but then it wouldn't be the with-payload enum itself. Just think of it: Given an enum case `Mammal.human(Brain)` and `Brain` being non-enumerable, how could an instance of `Mammal` of case `human` be formulated without a `Brain` to satisfy the enumeration requirement? If this could ever happen, the instance would just contain garbage. So even if you get to consume it, what could you possibly do with a garbage value?
Right, you can’t create any of the value-having cases without something in them.
That makes sense. Thanks!
Ah! That makes sense. Thanks!
On the app store?
It's not that hard to create one with Core Bluetooth but if you want to just get up and going here are a few to check out: https://www.adafruit.com/product/3406 https://mbientlab.com https://www.punchthrough.com/bean
I'm young but I would be willing to help with something like this as a side project, please DM!
Why not just report the types of the associated values when enumerating instead of trying to report values? An enum type isn't going to contain associated values, and you aren't enumerating over instances of the enum, just the 'cases' the contains. The problem does become how you represent the associated value type to the enumerating code. I suppose it would have to be a tuple, they of course more introspection needs to happen. What I am saying is, is the use case really that one wants to know the range of all values that could be in an associated value, or would it be enough to know the types?
Will do!
I don’t understand. You cannot instantiate an enum case with associated values *without the associated values*. It’s impossible. And returning the tags alone would just be tantamount to returning `(0..&lt;countOfCases)` which is certainly not the same as enumerating all values.
I did message a mod months ago to see if it was ok, with no response. I thought it was ok after seeing other posts like it. I apologize if it is not cool, I just thought since it is unpaid at this point it didn't belong in r/swiftjobs. 
Here's a sneak peek of /r/SwiftJobs using the [top posts](https://np.reddit.com/r/SwiftJobs/top/?sort=top&amp;t=year) of the year! \#1: [To all the \[For Hire\] Swift developers and redditors here: we have 769 job openings for you](https://np.reddit.com/r/SwiftJobs/comments/6lsbg6/to_all_the_for_hire_swift_developers_and/) \#2: [\[For Hire, Remote, Full-Time\] Senior iOS Engineer with almost 9 years software experience](https://np.reddit.com/r/SwiftJobs/comments/6375kc/for_hire_remote_fulltime_senior_ios_engineer_with/) \#3: [Looking for 1-2 hr tutoring session on getting collectionView data from my server API](https://np.reddit.com/r/SwiftJobs/comments/7faezb/looking_for_12_hr_tutoring_session_on_getting/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Quickly skimmed over it; I don’t see why Apple wouldn’t allow this. I think some apps like Apollo modify UIAlerts already.
But you still need to know Xcode because it also includes the debugger and profiling tools. Not that there’s anything hard or tricky about Xcode.
Yeah, the proposal would need provide the type constructor instead of an instance of the type, so the example would have to be something like ...allEnums.map { t in return Card(suit: t()) } to further conceptualize, imagine: enum Card { heart(Int) ... } let deck = Card.magicListOfAllCases.flatMap { suit in (1...13).map { rank in Card(rank) } } It's probably a bit out there, but I suppose it's what I was imagining the use case might be. In any case, thanks for the proposal, I hope that it makes it into Swift!
Are you downloading source code? Or an APK? If you’re trying to distribute an iOS app like this, you should look into how to put an app on the App Store. If you just want to give the app to any one who wants it just give them the source code and have them build and install on their own machines. You can’t just distribute unsigned APKs and throw them on a device AFAIK, you need to have developer profiles and a couple of other things to distribute apps. 
It's more that they have no obligation to guarantee its behavior will stay the same. So your app is chugging along fine then one day Apple decides to update some of its private API (which they won't say what they updated), and your app suddenly crashes. 
You can't. Main official way of distributing iOS apps for general public is AppStore. Also, You as a developer can create ad-hoc builds which can be installed on predefined devices - by specifying their UUIDs in provisioning profile. Companies which want to distribute their apps to their employees only, can join enterprise developer program, which allows to create in-house builds, which can be installed on any device. Yet, Apple strictly forbids using this method for publishing apps outside your organization. If you want to make your app available for others on web, you need to publish source code and others can build it themselves.
Apple controls app distribution really closely:/ Even testing. You need an Apple Developer account ($99/yr but fee waivers exist). Go to iTunes Connect and set up a profile for that specific app. In xCode, archive the app. From there, there's an option in the window to upload it to iTunes Connect. From there, you can submit for distribution on app store or add TestFlight users. There are some minor gimmicky things along the the way that I didn't mention. I think this process seems overly complicated as well:/. I think there are some hackish 3rd party things that can bypass the process like pgyer, but not officially supported. 
Because String[index] returns a Character and not a String
Run this in your playground Is this what you wanted to do let VIN = "123456789ABCDDEFG" for yearoffset in 0...VIN.count { print(1945+yearoffset) }
And a jailbreak developer is born
This works!! :-) :-) let VIN = "123456789ABCDDEFG" for character in VIN { let characterAsString = String(character) if let yearOffSet = Int(characterAsString) { print (1945 + yearOffSet) } else { print ("This character is not an Int!") } } 
Array.max (optionally) takes a predicate, that predicate tells it whether the first parameter should be "lower" (true) or "higher" (false) than the first. Here the comparator sorts array elements by length, so "max" is "max by length". Can't say I'm very fond of this style, I prefer key functions, but there you are.
Not sure where 1945 is coming from. According to [this](https://www.dmv.org/vehicle-history/vin-decoder.php) it is a bit more complicated. Here is my take: func getYear(vin: String) -&gt; [Int]? { let vin = vin.uppercased() let yearOfs = 9 guard vin.count &gt; yearOfs else { print("VIN too short") return nil } let valid = "ABCDEFGHJKLMNPRSTVWXY123456789".flatMap{ $0.unicodeScalars.first?.value } let yearIndex = vin.index(VIN.startIndex, offsetBy: yearOfs) guard let value = vin[yearIndex].unicodeScalars.first?.value else { print("Character Of Unusual Size at year offset") return nil } guard let index = valid.index(of: value) else { print("Unsupported character for year") return nil } return [1980 + index, 2010 + index] } let VIN = "123456789ABCDDEFG" if let years = getYear(vin: VIN) { print(years) }
Aside from the risk of crashing with an update, Apple want their native alerts to conform to a style and look that they dictate. They don't want people modifying how they want native UI to look. 
The behaviour of the simulator does not match the devices. If you see a strange behaviour in the simulator, test it on device first. If the “bug” only exists in the simulator, don’t worry about it.
Yeah that was my first thought. However, as I don't have a Plus model to test it on I wanted to check if this was something that was common or not. Thanks for the advice ;)
I haven’t been able to convert character to string or process this as a character though. 
Thanks. I’ll try this when I get home. 
The vehicle I’m parsing data for identifies the yea at that digit as A for 2010, B for 2011, and so on. So the integer value of A + 1945 = 2000. I’m parsing the data from a source that always returns all caps and always has all the digits so I just needed the logic to go from char to int. 
There are other IDE’s that you can use for iOS MacOS development. xCode is not required but is the best IDE for development. 
Thanks a lot
One thing is that Arduino is not waterproof if I would like to place it outside
Moderators (/u/wuddersup, /u/lyinsteve, etc), this is yet more Udemy affiliate spam.
`Sequence` has two `max` functions (and similarly, two `min` and two `sort`/`sorted` functions). The first, [`max()`](https://developer.apple.com/documentation/swift/sequence/1641492-max), exists on `Sequences` of `Comparable` elements (expressed as `extension Sequence where Element: Comparable`) . It determines the maximal element of the sequence using the `&lt;` operator defined by the `Element` (which it requires in order to conform to `Comparable` and to be qualified to have this varient of `max()`. It behaves much like `sequence.sorted().last`, but it's more efficient (time complexity of `O(seq.count)` rather than the `O(seq.count * log_2(seq.count)` of sorting), uses less memory, and is more concise. let x = ["a", "yo", "xyz"] print(x.sorted().last) // =&gt; Optional("yo") print(x.max()) // =&gt; Optional("yo") The second variant, [`max(by:)`](https://developer.apple.com/documentation/swift/sequence/2906531-max) is the one in your question. It is available on all Sequences, not just those with `Comparable` elements. It lets you provide your own closure, which they call `areInIncreasingOrder`, which has type `(Self.Element, Self.Element) throws -&gt; Bool`. It let's you specify, well... if two elements are in increasing order. In your example, `$0` and `$1` are in increasing order if `$0.count` is `&lt;` than `$1.count`. This orders strings by their length, and takes the longest one. If the code you provided used the first variant, `max`, then effectively `areInIncreasingOrder` is specified as the `&lt;` on `String`, which would take the maximal element by lexicographical sorting (i.e. the one which would appear last in an English dictionary). The second variant behaves much like `sorted(by: areInIncreasingOrder).last`, but with the same performance/clarity benefits mentioned earlier. let x = ["a", "yo", "xyz"] print(x.sorted{ $0.count &lt; $1.count }.last) // =&gt; Optional("xyz") print(x.max{ $0.count &lt; $1.count }) // =&gt; Optional("xyz") P.S. `x.sorted{ $0.count &lt; $1.count }` is just syntactic sugar for `x.sorted{ (a: String, b: String) -&gt; Bool in return a.count &lt; b.count }`. See [my related answer](https://stackoverflow.com/a/40390414/3141234) for a breakdown of Swift's closure-related syntactic sugar
The thing is, I'm not in the apple developer program, which means I can't even export it.
Correct. I just need one specific digit. I ended up creating an array (A,b,c,etc) and adding the index of the extracted character to 2010. Tada, now I have my number.
Thanks. I'm still a long way from a usable app though. I'm obsessing over making this class perfect before I move on.
What does the app do? 
Technically speaking nothing in the linked article modifies the “view heirarchy” - it makes changes to individual views but makes no modification to the heirarchy. 
It's an oversold pattern for the ultra-hip buzzword friendly crowd. Here's the problem. There is no binding in iOS. So, the tutorial writers say "Just use RxSwift!" Yeah, no problem. Until you try RxSwift and find out what a mess it is. 
You don’t comment on anything you’re doing. 
Is that really a huge issue? I guess looking over it I should comment more, but *how much* should I really be commenting?
 No😰 only mail subscription. Or you can follow me on Twitter))
Comments are really important. They differentiate a good developer from the average one. They should be more about why rather than what. I'm currently on mobile, I'll give you can example later. If someone is happy to provide, that'd great too!
Okay, so you don't need to make closure for lazy vars, you can just do: lazy var tableView = CreateProfileTableView(stylist: self.stylist, createProfileDelegate: self) Provided that is Xcode 9.1 or above I guess. let viewControllers: [UIViewController] = self.navigationController!.viewControllers as [UIViewController]; No need for ; and explicit type, avoid force unwrapping. createProfile() { result in wrong ident for result and retain cycle for API request. So here's few issues. Overall it's fine for junior.
I beg to difer. For simple code(99% iOS code) good naming for methods and variables is desirable. Sure, for complex algorithms comments are lifesaver, but often times it's being done in C++ or C(from my experience). It's better to write self-documentary code than average code with bunch of comments.
It’s for accessing electric cars remotely. 
i second this. generally when programming, you should comment a lot. functions, classes, etc should all have explanations. but swift tries to get away with this and be more readable on its own. if something’s not clear then it should definitely be documented, otherwise it should just do it’s best to read like english
Think the first one was not refactoring fully afterwards. Not sure why I did the second one, might of been half asleep. As for the `retain cycle for API request`, I'm guessing this is related to use of `unowned` and `weak` self. I've searched all across the web for an explanation on this but never been certain on it. Could you elaborate here why a retain cycle is caused in this case? Seems to me sometimes a retain cycle is caused and other times it isn't. Also, do you have any general advice at all? Thanks a lot for your feedback.
Ray Wenderlich has a course on custom controls, thought I haven’t gone through it myself.
You would have to, but you can subscribe for a month, enjoy the course (and their entire catalog), download materials and take notes, then cancel.
When you pass in self to the closure the closure will capture a strong reference to ‘self’. So then the Controller cannot be deallocated until the API request is complete because it updated the controllers strong reference count. However, if you passed in [weak self] ARC would have updated the Controllers weak reference count and thus the API request has no control over the deallocation of the controller and it becomes optional that the controller still exists. I’m not sure if passing strong in the API request technically counts as a strong reference cycle since the controller will be deallocated(if needed) once the request is complete. I would suggest reading Apples docs on ARC. 
I think all programmers have firsthand experience about this. And I’m only 16...
that would be really cool! i had a similar idea a while ago but i couldn’t figure out how to do it. how do you plan on doing it?
&gt; Why is a segue sending the action? What do you mean? The segue is sending the action because it's the action because it's the [apple's way](https://developer.apple.com/library/content/technotes/tn2298/_index.html) There are no `@IBoutlets`, the code is literally all there, there is nothing more. There is a Segue that presents modally from the button on the first view controller, then there is a button that calls the unwind segue from the presented viewController.
I tried doing that but couldn't find anything. Thats the reason I started from scratch and still also using default stuff only it still increases.
Um, you aren’t actually dismissing the modal anywhere. Am I missing something?
Dismiss should not be called on the presented viewController but on the presenting ViewController. [Link](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621505-dismiss#discussion)
I’ve been waiting for this!
Currently, what you’re doing *is* the Swift way, kind of. There’s a [proposal](https://gist.github.com/lattner/429b9070918248274f25b714dcfc7619) to implement async/await in Swift which would make it a lot easier to work with, but that’s still fairly far off in the future. I’d recommend either finding a plugin or making your own. But keep in mind that someone else will probably be extending your code at some point, so carefully examine these options. 
Make sure you don’t have NSZombies enabled in your scheme. It can make it appear like you have lots of memory leaks when debugging. 
I’m on mobile so I didn’t check your project, but Apple currently is leaking UITextField objects (if my twitter feed is to be believed), so if you’re making any of those they always leak in the current version of iOS (at least until it’s patched)
hmm if you can get the gesture of the tableview you can say the pan gesture of the card requires the tableview one to fail, but i dont think you can get the pan from the table. if you can its: gestureYouDontNeed.requiresFailure(gestureYouWant)
You should use the object graph to actually make sure there is no difference
I only have one gesture and it is a pan gesture. So I do not need any other gesture. I just have to use table view's native swipe to delete action. 
Soooo what are you trying to do? Seems sketchy...
Create a delegate to pass that gesture over to the tableView. If (panLeft) Pass offset.x to tableviewcontroller I’ll post a more detailed solution later. I’m at work currently. 
No, no textfields at all. There is only a button for each view that handle the presentation and dismissal.
Do you have a resource to help me with that? I tried to use it but couldn't get the hang of it.
Will look into that, thanks. Edit: No zombies enabled for me.
Optional Chaining is more condensed way of testing for nil. https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html
Can you give us full project? GitHub or download link. Is your unwind function shown in your code above inside your presenting view controller or presented view controller?
Maybe some weird apple optimization keeping it around in memory while memory is not critical. Did you try to trigger low memory warning from simulator? 
I will upload when I get home, I the mean time, the unwind function is in the presenting view controller, not the presented. 
Can you please give me the code example? I am lost. 
Please do. I cannot figure it out. 
Perhaps some examples you don't like would let us give you concrete suggestions?
A couple of Udemy courses I purchased during their winter sale.
After the segue's animation is completed try removing the view with .removeFromSuperview() What I misunderstood was I thought you had set an action for the button. I guess the button is tied directly to the segue and the action is on the segue. That's somewhat counterintuitive. What I usually do is tie an action to the button and then call 'performSegue'. 
[This](https://imgur.com/Oljm6ME) is the object graph after a dozen or so presentations, it looks like there is nothing out of place to me.
I just now tried and issuing a low memory warning will free up the memory that was allocated during the presentations. Does it mean there is no cycle and everything is fine then?
correct, that looks very normal 
`get` and `set` are used when declaring protocols to specify mutability, and also when defining variables with custom getters and setters: protocol SomeProtocol { var someVariable: SomeType { get } //Means that someVariable only needs to be gettable to satisfy the requirements of SomeProtocol. var someOtherVariable: SomeType { get set } //Means that someOtherVariable must be gettable and settable to satisfy the requirements of SomeProtocol. } The easiest way to satisfy a `{ get }` requirement is to use `let` and declare a variable as a constant. Otherwise, you can use a computed property (`area` in the example below): struct Quadrilateral { let width: Double let height: Double var area: Double { return width * height } } Computed properties implicitly have a `get` specifier. For example, the `Quadrilateral` below is functionally identical to the `Quadrilateral` above: struct Quadrilateral { let width: Double let height: Double var area: Double { get { return width * height } } } In the `Quadrilateral` examples above, you can't set `area` directly because it only has a `get` specifier. This makes it a *computed property*, meaning that its value is determined by the values of other variables in the `Quadrilateral` structure. To make a computed property settable, you must add a `set` specifier: struct Square { var sideLength: Double var area: Double { get { return pow(sideLength, 2) //sideLength squared } set { sideLength = sqrt(newValue) //newValue is the value that was just set } } } Now you can manually get and set `area` in the `Square` structure. I'll let other people chime in to talk about `lazy` and `static`.
Please?
You know Xcode compile thé module only once locally? 
I've written this too (with just an `OptionalError` type instead of a parameter) and it makes it really nice to unwrap things within a throwing context. Frankly this should be part of the language by default.
I’ve read it on Bloomberg, but nothing official. It would be a push to get everything to be so you develop or buy an app on iPhone/iPad/appleTv/Mac and it shows up on all platforms. 
That’d be so nice. 
You’ve got that engineer or programmer mindset, whatever you wanna call it. Stick to that. I can’t say if this really is the case, but I think you might be lacking knowledge in some fundamental iOS API’s. Once you read the docs, UICollectionView is fairly straightforward. 1. Stanford CS193P. Easily the best iOS course to date. Almost all skills transfer to Mac development as well — I was able to make a menu bar app that executes a bash script in about 1-2 hours. 2. Depends on the problem. If it’s a memory leak, I usually cry myself to sleep and wake up the next morning with a partial solution. Rinse and repeat until there are no more leaks. If it’s stuff like learning to interact with an API, which seems to be the case for you, I reduce the problem size. For instance, if I need to make a UITableView with a variable amount of sections which all have a variable amount of rows, I’ll start with a single section and single row, make it suit my needs, add more rows, add more sections. It’s all just a big game, and you can’t go fighting Bowser if you haven’t stomped a Goomba. 3. I look at the code I wrote 2..&lt;6 months ago, cringe, and try to come up with an alternative design. Also there’s always at least three side projects going on at any one given time, all in different domains, so that’s fun. Regularly reading blogs, other people’s code, and random GitHub repos also seems to work quite well for me. Keep in mind I have a lot of free time currently and wouldn’t recommend this approach to anyone with a life. 
Thanks for the advice! The app we built doesn’t exactly have a money making strategy and as college students, the money required for an LLC simply isn’t worth it. I guess just having the name will do... 
Thank you so much for the initiative. It will be a significant help for non-computer science professionals who have a difficult time with installation, even before writing their first code using Swift. 
`func nextDate(after date: Date, matching components: DateComponents, matchingPolicy: Calendar.MatchingPolicy, repeatedTimePolicy: Calendar.RepeatedTimePolicy = default, direction: Calendar.SearchDirection = default) -&gt; Date?` This method takes a DateComponents object. If you set weekday of the components object to Sunday, the method will return the date of the next Sunday. import UIKit let calendar = Calendar(identifier: .gregorian) // Weekday units are the numbers 1 through n, where n is the number of days in the week. // For example, in the Gregorian calendar, n is 7 and Sunday is represented by 1. let weekday = 1 // Sunday let sundayComponents = DateComponents(calendar: calendar, weekday: weekday) let nextSunday = calendar.nextDate(after: Date(), matching: sundayComponents, matchingPolicy: .nextTimePreservingSmallerComponents) // "Jan 14, 2018 at 12:00 AM" 
It still needs testing. If you have some time, please try the instructions at the GitHub page.
The type of the data a function will return: func multiply(_ op1: Int, _ op2: Int) -&gt; Int { return op1 * op2 } The *-&gt; Int* part defines what datatype is returned by the function.
&gt; RFC and discussions about features (accepted/rejected/ongoing) Swift Evolution is the place for that: https://apple.github.io/swift-evolution/ https://lists.swift.org/pipermail/swift-evolution/ The mailing list is moving here soon: https://forums.swift.org/
I appreciate the feedback, but chill dude, I'm not making some animation framework. Just showing my use of UIView.animate() Also your feedback is horrible 1) Explain why my "code style" is horrible 2) how else would you organize 10 lines of code? 
perhaps disable your recognizer when the table view is visible.
Sorry, went to a concert tonight last minute. Will post back a solution by tomorrow. 
Thank you so much for such a well written and exquisite response. I’m definitely going to check out CS193P. “Can’t go fighting a Bowser without stopping a Goomba”, that is AWESOME. Thanks for feeding me a new phrase XD. But like i said, I can’t tell you enough how much I appreciate the response. I’ll keep going on with all of your suggestions and help. Cheers!
I believe you can use appcode for windows. http://www.jetbrains.com/objc/ The catch is you have to have Xcode to test an app on a simulator or device, as well as to archive it to a .ipa file. Note: I’ve never used it myself but I read about it before
Never mind... It looks like macOS is still required as well as Xcode which is noted here under system requirements. https://www.jetbrains.com/objc/download/ Sorry to get your hopes up. Seems a little crazy to me but I guess it needs Xcode for the compiler?
Is your code Backend/API based or UI? If the former, you may be able to do some work on Linux. JetBrains’ CLion supports swift on Linux: https://www.jetbrains.com/help/clion/swift-support.html
React native (facebook.github.io/react-native) is a cross platform mobile framework that is pretty popular. It is developed/maintained by Facebook but I think you will still run into the problem of needing the iOS simulator provided by Xcode to run your app locally. It may have support for building to a physical device but I’m not sure since I haven’t used it. 
This guy as a few good collection view tutorials: https://www.letsbuildthatapp.com/course/YouTube Ray W is pretty much a standard "go to" guy for tutorials because he's got TONS of them. https://www.raywenderlich.com/ I'm doing his Swift 4 , iOS 11 setup from Udemy, it was on sale for like $10. https://www.udemy.com/ios-and-swift-for-beginners-200-hands-on-tutorials/learn/v4/overview If there's some part that hanging you up, you can ask around here, just be specific and maybe post a code snip or Git link.
Someone once asked me what that means. Return means to send back. So if I did: var number = multiply(2, 3) The value, 6, is returned and put into the variable number. A function that returns something sends that type of value out. 
Google is your friend.
Just rent a Mac Mini somewhere: https://www.macstadium.com/mac-mini/ Install Xcode and work remotely over VNC. I am an app developer and have done this. I worked on a very large app, while living in a 3rd world country. Deploying to the app store would often fail because the internet was too unreliable. So I would work on my laptop, check work into BitBucket, then access my rented Mac Mini via VNC. Then remotely, build the app and submit to the app store. Worked fine. 
VMware
There aren't any official Swift Windows builds, and for most iOS usage any non-Mac version of Swift is sadly not gonna cut it. You will also need Xcode to test. I'm kind of miffed that whatever course that mandates an iOS project isn't giving you access to a Mac.
Cool
When you don't know what's happening behind the scenes, reading the apple docs should help. For example, https://developer.apple.com/documentation/uikit/uicollectionview explains collection views pretty well. Whenever you see code in a tutorial that calls some API, or implements a method in a protocol that you struggle with, look up the docs. For example, you might see an implementation of `collectionView(_:cellForItemAt:) ` with a call to `dequeueReusableCell(withReuseIdentifier:for:)` that you may not understand. So you look up what the first method does (here: https://developer.apple.com/documentation/uikit/uicollectionviewdatasource/1618029-collectionview) and what the second method does (here: https://developer.apple.com/documentation/uikit/uicollectionview/1618063-dequeuereusablecell) - those explanations are pretty good I think and should help you understand what's going on.
Thanks for the reply! I’ll definitely give these resources a look!
Alright cool! It’s nice to have full documentation coming straight from the source and now I know where to find it! Thanks so much!
I'm going to make an analogy and will probably be downvoted for it. Imagine someone drawing a car on a notepad. After 2 weeks the drawing is starting to look really good despite his lack of experience, and that person asks: how long will it take me to build a real car?
I’ll preface this by saying I’m not that experienced. I’ve had a few internships, and only recently graduated from college. I’ll actually be starting my first job in industry in a few weeks! However, I’ve found myself in a situation similar to yours as I also switched majors to computer science midway through my college career, so I hope these comments will be useful. To answer your questions... 1. Some of the best resources I find are from Apple themselves. If you want to dig deeper into UIKit, their documentation is fairly expansive. If some code looks like gibberish to you, then go through that code line by line and figure out what is happening. Is there an object, or method you don’t recognize? Look it up and read about it. Apple provides many great keynotes where some cover topics broadly and others offer more of deep dive on a specific topic. If you are looking into learning more about Swift itself, I found [this keynote](https://developer.apple.com/videos/play/wwdc2015/408) to be fascinating for example (note this one is a couple years old so the syntax is old but the concepts are still relevant). Many of the keynotes come with sample code that you can play around with and learn from as well and they offer a lot of guides as well. 2. Regarding road blocks, I find that walking away from a problem for a couple hours to a day helps me come back to look at it with a fresh set of eyes. Note that this requires that you have a couple hours or a day to spend away from the problem, so if you need to plan your time accordingly so that you make sure you don’t end up stuck during crunch time when your deadline is the next day. 3. One good practice I found is tinkering. If you’ve solved a problem, think if there is another way to do it. What are the advantages of your current solution compared to another one? Would your solution change if the problem was slightly modified? For example, lets say you created a program to maintain word counts of a text file. You’ve created a dictionary with unique words as the keys, and counts as the values. Are you done? Is a dictionary the best way to store the words? Are there any data structures built to handle words (perhaps a trie)? Would your solution change if you wanted to count plurals with their single counterparts (so boys and boy would contribute to the same count)? Really try to explore the problem space to see if there is anything else you can learn. Hope that helps!
Like a CocoaPod?
hmm i'm not sure about that, do you think this is the way? i think my final goal is to be able to import my library in another project and to be able to run `present(MyHomepageViewController())` something like that and from there my app will run.
Thanks. I hope the mailing list moves soon.
Yea cocoapods or distribution through another dependency manager like Carthage is the way to go. Unless you want to hide your source code. In that case you would need to write it in ObjC and either create a precompiled binary or framework. 
Make it a cocoa pod, great tutorial on how here. https://www.raywenderlich.com/126365/ios-frameworks-tutorial
Yeah this helped a ton! I’m definitely going to continue checking out the Apple website and I’ll give that keynote a watch. And when it comes to stepping away for a few hours at a time, I’ve had to go to work or do something in between hours of programming and never realized until now how much that time away helped me. Planning my time ahead of me getting started for the day will probably show to be a big help. Thank you so much for the elaborate response!:)
The answer to your question in the message title is yes, you can code in Swift on Windows and even Linux. However the body of your message indicates a different question is really being asked. That is can you develop iOS apps on Windows with Swift. Right now I believe the answer is no you can't. Now someplace in between you can develop Swift code on Windows that can be transferred to a Mac running XCode. Depending upon how well the app is partitioned this can work out well. Swift is a pretty well fleshed out development language that can be used to develop code for a variety of platforms, it isn't Apple specific like some want to believe. What is is the iOS API's that make iOS devices what they are. It is really app specific but if the apps functionality can be partitioned into generic Swift code that part can easily be developed on other platforms while the XCode / IOS specific stuff gets done on a Mac.
If you keep it completely legal😏 I got it to work on my old pc a while ago, but it was just too slow to work with. However, that was on a dual core machine without core virtualisation.
Its doable on Windows hosts. Doesn't really run well, but if you just need an emergency XCode for something its better then switching computers all day long I suppose.
i saw hints at an ios virtual machine being released soon on r/jailbreak; not sure if itll help your case but might be worth looking into
Hey thank you for your reply, and for that information. 1. I think it should be fixed now. I'm still a beginner using GIT, I think that will be my next focus on my day off to use it more effectively. 2. Would you spilt the protocols and the delegate protocols to their separate files then? 3. Noted, and I'll keep that in mind for future projects. Thank you for your feedback!
My 2 cents: - A would try to avoid using singleton classes (WeatherAPI) and use dependency injection instead. You haven’t done any unit test, but dependency injection will help you a lot writing unit tests. - I think CoreLocation should be handled by a different class, and WeatherAPI just do the networking. Try every class do just one thing. - Maybe it is a matter of personal preference, but I think the WeatherAPI could receive a completion closure parameters instead of using a delegate. - Use guards to make code easier to read (for example in completion handler in session.dataTask you can use guard to check for a nil error instead of the if). - Try to keep consistency with your code style, try to structure the code in the same way for every class (for example, private properties first, then public, then private methods, public methods, and so on. I would use extensions when possible to group functionality and implement protocols. I hope this helps.
Thanks for your response. 1. Thank you for bringing that up. I will look into it, as it's a new concept to me. 2. Yeah you are right. It may be confusing based on how it is now. Thanks for the suggestion! 3. Yeah I could see that, I feel like closures get a bit messy though when you have of a bunch of async callbacks. I'll take your suggestion in consideration and split it. 4. I ended up doing that in the first place, but I don't remember why I switched it, but I will focus on that in the future thank you. 5. Noted thank you for your feedback! 
Shouldn't you be changing modalPresentationStyle to .custom rather than .overCurrentContext when using custom animations?
Wow, was there someone in charge of this project? I know some companies really have a loose structure, and that can be great, but if this guy was on my team, I'd probably look for another team. I really hope these things are not a trend. Having run a software company for years and worked on a number of teams, this is such a waste of time. Wastes the person that does it, and all those that have to work with the code. I worked at a company that went out of business in part because of this kinda stuff.
If you’re not making any network requests, and only loading content that you authored, it would be extremely difficult for an attacker to insert any unexpected js into the page. Similarly, communication between one part of your app (the webview) and another is equally secure whether it’s swift - swift or js - swift *as long as* it’s true that you aren’t loading any remote content. Being completely secure is probably impossible, but what you’re describing likely doesn’t *decrease* your security meaningfully.
Wow perfect timing! Thanks! 
You’re not asking how to distribute it, right? you’re asking about the right way to architect your code, and for examples of presenting your app’s main view controller inside another app. Do I have that right? (it seems all the current replies think you’re asking how to distribute this, eg cocopods or Carthage)
Thanks for sharing! 
&gt;return openDataPriceGlbl shouldn‘t it read „return openPrice“? Also, what is the output when running your code? Does it print anything at all? If not, it could be that your url is not valid.
This should be called “using a cocoapod charts library in swift 4”. 
You're welcome! I hope you liked it :)
alternatively, use CoreAnimation 😎
You are just using a third party library, what's to learn other than how to use cocoapods super basics? Useless tutorial.
You have asynchronous call to API here which changes `openPrice` but you return it synchronously from your method. Basically you return `openPrice` before it's changed by response from server. 
On mobile but I don’t think that’s the case. The first `func` statement is outside the code block
https://i.imgur.com/js96vSS.jpg
[removed]
I've written some shocking code in my time, although perhaps not quite as bad as the example you give. In one case I ended up with one epic `UIView` subclass that had more tentacles than a sushi bar, and it's the kind of thing you'd say once a month "this really should be ten different classes," then sigh and move on. It's a bit of a long tangent, but: no one likes writing bad code, and I think in some ways iOS/macOS/watchOS/tvOS apps are particularly prone to it for a few reasons: 1. Every year, Apple announces thousands of new APIs. iOS 11 was particularly big, but no year is small. If you don't support features like `SFSafariViewController` (from iOS 9), the `UserNotifications` framework (from iOS 10), and drag and drop (from iOS 11), users complain either by email or on the App Store. 2. Every year, Apple deprecates hundreds of old APIs. You can still rely on them to a point, but you'll get warnings in your code. ("So what? It's only a warning." Warning *matter*: they are code smells being reported back to you in a clear, concise way, and if you clutter your warnings then it's likely you'll miss something important.) 3. Every year, Apple drops a major new Swift version. Every six months, Apple drops a minor new Swift version. These things not only break code, but they also require you to rethink and refactor your own code if you want to take advantage of them – taking advantage of `Codable`, for example, has been a huge job for projects like Vapor and Kitura, and even adopting something simple like multi-line strings takes time. 4. Every year Apple drops new form factors and hardware profiles on us. 2017 gave us iPhone X, the 10.5-inch iPad Pro, and Apple TV 4K, 2016 gave us the Touch Bar and 9.7-inch iPad Pro, 2015 gave us 4th-gen Apple TV and Apple Watch, 2014 gave us iPhone 6 and 6 Plus, etc. ("Just use Auto Layout!" Yes, because that's all it takes. [*Narrator: "Before they had one problem; now they have two problems and an unsatisfied constraint."*]) Those are four big things, but none of them have much to do with your business. In your business you have two priorities: 1. Fix existing bugs. That JIRA dashboard you have on a wall-mounted 55-inch TV? Yeah, you should probably have bought a bigger TV. 2. Add new features to generate revenue, either by increasing average revenue per user or by attracting new users. There's also a third unwritten priority: trying to convince your boss to let you refactor some code you know sucks. "Listen, the end result will look exactly like what we have right now, and it will generate no extra revenue, but the code will be a lot better" – unless your board is technically switched on that's a hard argument to win. So you're in a constant state of flux. Every year you know you're going to need to set time aside to watch a big stack of WWDC videos and figure out how it impacts your products. You'll also then need to fix any deprecations, upgrade your Swift code, add some more devices to your test sheet, then make sure you haven't introduced new bugs along the way – and that's before you do any work of your own. It's easy to join a company and say "what the hell? I would never have let this happen," but the truth is that when you've gone through a dozen "this is a really big client and they need this feature"-s and a dozen "our Korean users are hitting a major problem with iOS 10.1.3.2.9 on iPad Mini 9 when used in airplanes please fix it immediately"-s, you shouldn't feel so bad about your code.
I like this one: https://medium.com/flawless-app-stories/debugging-swift-code-with-lldb-b30c5cf2fd49
This one https://github.com/apple/swift/blob/master/docs/CompilerPerformance.md is extremely insightful article. Definitely recommend!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apple/swift/.../**CompilerPerformance.md** (master → b0d5454)](https://github.com/apple/swift/blob/b0d54549db2e6af8387a384a8ed65c70b5d7f89c/docs/CompilerPerformance.md) ---- 
Thanks. I am pretty new to this "composition" subject, and was used to just work with inheritance. What would you suggest to better discern when inheritance is better suited than composition?
Thanks for the input.
I've been playing with the code, the code isn't readible on mobile when I was testing I assigned openPrice to openDataPriceGlbl which is a global var. Regardless it doesn't work. The api works because I do get the value. And when I print openPrice, it gives the correct value. But what the function returns isn't that value. I thought the problem was because it was assigning then returning on different threads but idk anymore. 
I have read their other three books but am hesitant on buying this one. Have read it? Is it good?
I’m beginning to do this as well. As long as you’re familiar with that style then I think it organizes it very nicely. 
Launched my app "Math Problems: mental maths" with trigonometry section, i.e sines/cosines of special angles, radians &lt;-&gt; degrees converter exercises. I've implemented several parsers/converters: from latex to expression, from expression to Math AST, from Math AST -&gt; Float value. For now, I use Math AST to convert it to float value. In this month, I am going to use Math AST for more interesting exercises, such as factorization. 
Great write-up, thanks for posting (not your write-up, I know). Now all i need is a swiftdoc.org replacement (or update).
A guy I work with does this. His solutions aren't even clever, they're just obfuscated. He's a .Net developer who thinks he can do everything under the sun (he can't, I fix his shit regularly and I'm a n00b to .Net) and will try and get philosophical about his shitty web forms during stand ups. But back to Swift. I use ternary operators a lot to reduce code size. It's always clear but I know many don't like ternary operators. I also use a lot of extensions but tend to keep them neatly in their own file. 
You're generating a password? Are you sure you used real entropy for it?
Thanks
I made a similar library to what you're describing. I used a big UIView for the entire day, and added event views, and modified the y-coordinate of the origin according to the time that the event occurs To make a blank row selectable, just add a gesture recognizer to the big UIView. Check it out: https://github.com/EvanCooper9/swift-week-view 
are you actually displaying something in the web view, or just using it to execute some javascript. If so, you may not need the web view at all and just use the built in Javascript engine. http://nshipster.com/javascriptcore/
Thanks for the response and your library link! Just to clarify, when you used a big UIView for the entire day, does that mean you did not use a tableview to display the rows? Sorry for the basic question
For your situation, if using a table view, make each day a table view cell. Personally I'd use a collection view because I have more experience with them, making each day a collection view cell. Splitting up the 15 min intervals into different cells/views would be a bad idea, because the moment that you have an event that spans over multiple intervals, it will be difficult to add that event's view to each of those intervals. For my project, I didn't use a tableview or a collection view. Instead I made my own sublcass of a scrollview, because I needed the ability to infinitely scroll both left and right. I ran into limitations when using table and collection views where I could easily add content to the end, but not the beginning. Let me know if you have other questions!
Event views should sit *inside* a cell of a table/collection view (prototype cell). If you want to use my library, you can display 1 day at a time with the default initializer: let weekView: WeekView = WeekView(frame: frame, visibleDays: 1)
I’m the Harvey Weinstein of code abuse but I think Swift has helped me clean up my act. I’m nearly done rewriting one of my monstrous apps to make it more Swift (I don’t like saying “Swifty”).
Does using ObjC runtime to trick the Swift runtime count as a Swift abuse? When Twitter was still a static framework, my coworker had problems with it because of transitive static dependencies when trying to create a framework from one of our apps. I told him that he could just copy the headers from the Twitter framework, rename all the classes (to like "TwitterWrapper"), implement the +class method for the new classes returning objc_getClass("OriginalClassName") and then create a typealias for the wrapper classes, so the code doesn't need to be changed anywhere, only the imports and the pod files. He chose to just use a "magic script" to pack the whole framework into a static framework (while waiting for CocoaPods 1.4 to solve the issue) but now it has duplicated symbols and Twitter's sharedInstance is different when called from the main app than from the framework. The project is still just a POC cause bureaucracy.
I think the [top google result](http://mikebuss.com/2014/06/22/lazy-initialization-swift/) for lazy variables is a better explanation than what you could receive from a reddit comment
Thank you! Just to check my understanding, a real-world call from DiceGame would look like this, correct? Since didStartNewTurnWithDiceRoll is an Int: delegate?.game(self, didStartNewTurnWithDiceRoll: 5) And it seems to be the case that functions can be overloaded such that only the argument label differs?
Ok, thanks! I will give your library a try
I only need a label in it really, so that's pretty easy. :)
Models are better suited. For the UIKit stuff, especially VC’s, go straight up subclassing.
Makes sense. I'm just trying to tease out that **diceRoll** in this case is completely unrelated to the argument name as used within the function, correct?
Thanks so much. Made my day over here. :)
so im guessing they'd just the trim each file to the point where you started a new recording and then just combine them all together at the end?
I don’t know offhand when they actually save the file, but I doubt recordings in the same memo are saved in seperate files along the way. It’s not too complicated to just say ‘I have 5 seconds of audio in memory that I just recorded, put it in this file, overwriting 0:11-0:15. 
I don’t know offhand when they actually save the file, but I doubt recordings in the same memo are saved in seperate files along the way. It’s not too complicated to just say ‘I have 5 seconds of audio in memory that I just recorded, put it in this file (saved or in memory), overwriting 0:11-0:15. 
In Server Side Swift we use [SPM](https://docs.vapor.codes/3.0/getting-started/spm/), or Swift Package Manager for managing dependencies. The link I posted links to the Vapor 3 documentation (which is currently in beta). These docs assume you're using Vapor toolbox, but SPM has a CLI that is really similar. For updating you just run swift package update For cleaning dependencies: swift package clean For generating an Xcodeproj file swift package generate-xcodeproj For building from the commandline adding debug symbols (and low performance) swift build For building with optimizations (and no debug symbols) swift build -c release
In linux, you can only rely on swift package manager. For my personal tools, I have been trying to use [marathon](https://github.com/JohnSundell/Marathon) as a poor guy version of of a dependency handler. Also, have a look at [Linuxbrew](http://linuxbrew.sh/), which I just recently discovered.
For me Google has [this](https://en.m.wikipedia.org/wiki/Return_type) as the first link, which explains it perfectly well.
It should work just fine on other screens, since the volume bar is positioned relative to the status bar. Unfortunately, I could only test it on my iPhone X and I don't have any older devices to test it on :) 
Thanks! The password is generated through a library that I just can't seem to port over to Swift
It uses the node.js standard library [Crypto](https://nodejs.org/api/crypto.html) to generate the values. I believe it is a pseudo random generator (which isn't the most ideal) but is used quite extensively in JS (for things such as encrypting cryptocurrency wallets). Ideally I wanted to use the phone's accelerometer and gyro for entropy, but I'm not sure if they've been fully tested (where motions can't be replicated) and could encounter issues if a user's sensor is glitched or broken.
Could you create a single Apple ID with the name of a company name or dev team name that you guys collectively come up with and submit that way? Then spin up a quick website that features everyone and link to that site in the Developer Site in App Store? Not really sure what Apple's rules are about having a single generic Apple ID for this. 
 struct MyStruct { let firstPropery: Double let secondPropery: Double } self.cells = MyStruct(firstProperty: 100.0, secondProperty: 50.0)
If you're not using the tableView's tableHeaderView, then the easiest way is the set the tableHeaderView to the searchBar. searchBar = UISearchBar(frame: CGRect(x: 0, y: 0, width: tableView.frame.size.width, height: 44.0)) tableView.tableHeaderView = searchBar If you want to hide the searchBar, set tableView.tableHeaderView to nil tableView.tableHeaderView = nil
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/macgaming] [What’s everyone working on this month? (January 2018)](https://www.reddit.com/r/macgaming/comments/7ptxsp/whats_everyone_working_on_this_month_january_2018/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
A lazy var is evaluated only when its being called, not when the class is initialized. This is tomsave memory and computing power until needed.
You can use a [struct](https://medium.com/ios-os-x-development/structs-in-swift-for-newbies-bf64f3d40f68)
If you want to use MVVM, reactive really helps you managing events
I don't think it stores the compiled version for all devices, only the last one you used. I switch a lot between different simulators and devices, seems to compile 3x slower when I use another one.
JSON isn’t a data structure, it’s a way of representing data. Having funcs like getName is a bt odd in Swift. People usually have a var with getters and setters in those scenarios. With that out of the way, I think protocols and composability would go a long way here. E.g.: all items in the game belong to the protocol Nameable. They could then implement Interactable, Destructible, Controllable, Drinkable, Explodable, InventoryRepresentible, etc. You could then define a common thingy like PlayerItem in terms of composing different protocols: maybe a PlayerItem would implement InventoryRepresentible and Collectible (which would implement Controllable). Once you’ve got that sorted out, implementing JSON-based “persistence” would be trivial — make each concrete entity, like the PlayerItem from above, conform to Codable. You could then even implement a sort of editor for the game, where you could just drag around JSON template entities and design your game visually. Maybe that’s stretching it a bit, just throwing ideas out here. 
Get an old macbook or mini, before 2013, then upgrade ram and ssd
See the [SPM Documentation repo](https://github.com/apple/swift-package-manager/tree/master/Documentation) for details on how to use it
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apple/swift-package-manager/.../**Documentation** (master → 38913f5)](https://github.com/apple/swift-package-manager/tree/38913f52aeaef924c0c1f5953fb2a6ebfb193c89/Documentation) ---- 
I have 0 experience with ARKit and SceneKit, but I can assume that there is a variable to set the radius in the code somewhere. Next what you’d need is to add a `UIGestureRecognizer` to whatever view is displaying the sphere. That will give you how mich the user has zoomed in or out. You can then adjust the radius using the aforementioned radius variable. There are plenty of resources on how to do this online if you look it up. Good luck!
I got MacBook Pro 2011 Early (i7 quad, upgraded to 16GB RAM and SSD) and it's working pretty well. Mind you, I am a beginner so I am making simple apps while still learning. I think it is a good machine for a beginner and it shouldn't break your bank (depending on your budget). But yeah, if you can get newer machines (not having USB3 is only small issue with my laptop) it would be better.
https://github.com/dillidon/Alerts-Pickers
[removed]
Uhhh, you want to compare car to a gearbox. Funcional reactive framework vs a design pattern? I sometimes have a feeling that 'ugh, that would be cool if I had RxSwift instead of bunch of delegates', but still this is not the reason to utilize a whole new framework to the app.
A shitload
/thread
While there are plenty of reasons to get onboard the Reactive train, "replacing delegates" is not really one I'd consider valid... Deciding to embrace a functional reactive framework can bring a lot of advantages to the table, not using delegates is just a side effect. If the only benefit you are going to see from using RxSwift is to get rid of delegates, you are adding quite a big dependency to your project (not to mention making the learning curve for new developers who are going to work on it steeper), and adding a complete set of arguably complex paradigms to replace a fairly simple design pattern (i.e. delegates). That being said, if you are interested in learning functional reactive programming, by all mean give it a go; but the video you mentioned along with all the available info on the topic should make it quite obvious that it brings a ton of advantages other than just an alternative to delegates. Remember that you do have to think about memory management when it comes to delegates (retain cycles!) but if you feel like RxSwift's disposable pattern is a step back, I suggest you have a look at Matt Gallagher's `CwlSignal` library [1]. It offers most of the same operators as RxSwift, but doesn't have the disposable pattern for managing memory [1] https://cocoawithlove.com/blog/cwlsignal.html
Well, I’m doing this in code, but I tried adding a text field in storyboard and I don’t see an option for number of lines.
Looks like you are fighting the type system. Try to think of another solution (e.g. an array of enum values with associated values or multiple dictionaries, one for each possible type) 
eh, remote code execution + privilege escalation would be sufficient. But yes, this isn’t worth worrying about; if it happens you have much bigger problems.
Initially you must read the Apple Swift books, it’s a good introduction! Then personally I recommend the courses of Simon Allardice; he’s an amazing teacher, you can find his courses on Lynda.com and Pluralsight. You have also Brian Vong, a YouTuber who teaches really well. Later you can read Advanced Swift from Ole Begemann and Chris Eidhof which will be really helpful to you on an advanced stage. 
Finally, JS will die!!!
Hacking with swift
Adv swift is good, but still very basic imo
Going very deeply with the protocol oriented programming paradigm works great in isolation and in theoretical examples, but in real life, not so much... From my experience, at some point, you always end up with some code or properties that should be reusable, but you need to reimplement it all over for no reason and won't be able to standardize across your protocol backed pieces of data, ironically leading to hidden contract based programming. Maybe there is something I or the Swift language is missing, but from my experience this happens all too often. 
This might serve your needs: [swift scripts and http requests](https://www.twilio.com/blog/2017/08/how-to-make-http-requests-in-swift-3.html) Although you may have to adjust things as it is Swift 3 code here
Some stuff I'd say in a code review, though I have a bad habit of dwelling too long on style comments that ultimately are a matter of taste (or at least, personal/business convention): Your Constants are set up as global variables, but these tend to not be preferred in most iOS projects - it's usually better to make a `enum Constants { static let value = "..." }` class. (Style) you don't need the auto-generated header on every class. All those wasted bytes! Most don't need the Foundation import either. You've got a file name `Enums.swift`. Why not just keep a separate file for each enum? Makes it easier to find. Your `SpecficError` (typo) enum extends String. Why not extend the `Error` type instead? Then your error delegate can pass back `SpecificError` cases that would in themselves be errors. Looking at your protocols, they're missing a quality of good Swift where the functions [read like prose](https://github.com/raywenderlich/swift-style-guide#prose) - when you call `weatherDataDelegate.setWeatherData(weatherData: weatherData)` that doesn't feel very... elegant? `func set(weatherData: WeatherData)` or in extremis `func setWeatherData(_ weatherData: WeatherData)` might be better signatures. Some of your structs in `WeatherData` could have better naming - it's nice to know at a glace what a `Main` type might be? `JSONData` sounds like it's just the Data object that you return from the `URLSession`. If you write some custom decoders you can simplify the object structure a lot and remove some of the unnecessarily nested objects (the `Main` and `WeatherID` structs aren't really providing anything of value). Like another comment said, singletons are almost always evil. In the `WeatherAPI` it's common practice to separate delegate implementations like the `CLLocationManagerDelegate` methods into a separate extension in the same file. I agree with the other comment that it would be better to separate the `WeatherAPI` and Location services into two distinct classes. (Style) Swift prefers camelCase for property names, not the TitleCase you're using for `WeatherDataDelegate` and `ErrorDelegate`. Why use `startUpdatingLocation` / `stopUpdatingLocation` and not just call `requestLocation()`? Why are you using the a property named `weatherID` to refer to the name of a local `UIImage` file that you want to show? It's pretty confusing! It would be completely reasonable to change your `WeatherData` object to hold that `UIImage` object too. Heck, rather than have a `updateWeatherIcon()` method anywhere near the `WeatherAPI` class, why not make something similar as a computed property on your `WeatherData` struct? It would be pretty easy to change this so that your API directly decodes a single `WeatherData` struct that you can pass directly back to the delegate. In the `HomeViewController` I'm not really sure what you accomplish by putting everything in a `DispatchQueue.main.async` block. Nothing inside any of them should require this? Unless I'm missing something dumb... Most `IBOutlets` should be `private` usually. In your `changeCity(viewController: ` method I think it's probably better for the `ChangeCityViewController` to dismiss itself and only pass the city name back to the hosting view controller. Lots of this is quite nit-picky! Which is good, because it means you're hammering the fundamentals well :D
You are right. I think the takeaway, though, is that not only do you have your existing tools to implement traditional inheritance, Swift also provides round-about multi-inheritance, which is just another tool in micro use cases throughout your code base. Deciding how to solve those real life examples is all part of the fun, and usually doesn't involve militaristically following any "oriented" designed pattern on a large scale. Breaking rules is the name of the hacker's game, but do so for the stability of the code, rather than the laziness of doing the right thing at the time. I think protocol oriented can be easily abused like how Java devs do it, but I also think it's a huge gift when you truly do need it. 
Yea it's tough to go too deep when you have associated types. It's had to follow what you need, but see if [type erasure](https://www.mikeash.com/pyblog/friday-qa-2017-12-08-type-erasure-in-swift.html) can be a good solution.
I like js for small things, but if i can write this stuff with C#.... bye bye
But will it work on linux?
Yep, my main thing is, I see these nice "beautiful" examples and then I try to do something similar irl and it ends up being a pile of sh$t :) Pisses me right off to tell the truth. 
There might be some things that won't work all entirely well, but since there are no UIKit/WatchKit/etc. calls being made here and just Foundation, these should work okay. This is generally how server side swift works with Linux, you may just have to play with it and see where it goes. I'd advise going the URLSession route than the Alamofire/SwiftyJSON way though. I don't know how viable those are for Linux, whereas I know URLSession works fine.
As with all ports, a lot more than expected.
No reason to choose only one if you can afford to include Rx in your project. Rx, and the community are building some pretty cool stuff. I remember finding out about RxKeyboard, which makes extremely easy to work with the keyboard’s height and scrollable content. Bind a visual element to a network request that will retry with an exponential delay in case it fails.. it’s a powerful framework. 
So, does the WebAsm target for Silver actually have value type collections?
Yes! tableHeaderView = nil worked perfectly. Thanks!
How does linking work in wasm? Is wasm just a different architecture? Does that mean browsers now parse ElF(?)-wasm files now?
Hey! Thank you for your feedback and reviewing my code. I appreciate you taking the time to write your reply. I will make note of everything you suggested and hope to improve the code more. Once again thank you!
The members should be non-optional. The initializer should be failable. Does your Person type conform to Codable?
This object does not conform to Codable. I use [AlamofireObjectMapper](https://github.com/tristanhimmelman/AlamofireObjectMapper) as my response serializer mechanism.
I also find that Jared Davidson is also a good YouTuber to learn from. Ps. Just for anyone wondering: if you search “Let’s build that app”, you’ll find Brian Vong’s channel faster. 
Fascinating stuff. 
Apples free Swift documentation. I learned Swift in a week. 
I’m always of the opinion that bugs should be fixed as low level/downstream as possible, eg, database first, then API, then clients. Fixing/working around this would mean each client has to set up defensive measures against a response that should be impossible. I think it’s worth asking these developers why it might be possible for “bad data” to be returned in the response. Does the data have no integrity? Was the database poorly built? Perhaps the API has bugs in it? In any case, the bugs should be fixed there. 
&gt; https://www.udemy.com/complete-ios-11-developer-course/ Do you consider the Ray W Swift 4/ iOS 11 tutorial to be more advanced than this one? We should have some reviews of the tutorials because there's so many of them.
[Stanford CS193P 2017](https://www.youtube.com/playlist?list=PLPA-ayBrweUz32NSgNZdl0_QISw-f12Ai) Available on iTunes U but Apple dumped desktop support. There's links to the other course material in the comments on the videos. 
I agree with you in terms of designing your model objects with non-optional properties, but you shouldn't just "give up and crash" from an invalid response. If the invalid object is an item in an array, just skip it and throw an assertion failure in development, otherwise show some kind of error message to the user. To implement that in a model, I normally use an optional initializer, like `init?(json: [String: Any]) { }` with a bunch of guards to make sure all required properties exist and are valid, and return nil if anything fails. Then you can be defensive yet also have a nice design for your model object. As an example with an array of posts: ``` let posts = postsJSON.flatMap { guard let post = Post($0) else { assertionFailure("Failed to create post from JSON: \($0)") return nil } return post } ``` Similarly for a single User object, do something like: ``` guard let user = User(json: responseJSON) else { // do something to notify user of an error return } ``` I think this approach gets you away from the idea that an "invalid response from server" is an "undefined state". Yes, your view controller / view model *does* need to handle an "invalid response" state (just like it probably has "loading" and other error states), but your model objects get to stay nice and clean.
There is nothing in life that I hate more than a model with all fields optional, even ones that make no sense. Oh wait, there is - models where fields are non-optional but are initialized to a default value that makes no sense - ```var age: Int = 0```....
POP is a programming paradigm we should be aware of. I've been using it successfully in my latest projects. I recently revamped an existing app using POP and generics. The outcome is convincing. &gt;&gt; you always end up with some code or properties that should be reusable, but you need to reimplement it all over for no reason You can provide the default implementation in a protocol extension. Did you use that feature? 
This is an issue that I have with most tutorials and/or articles on architectures or paradigms. They all illustrate the concept with a trivial example, but never go into details how would you adjust it or what would you do once the app starts to scale.
You probably want to use a UITextView instead, as it is much more customisable and can support multiple lines etc. It’s a bit more work though and doesn’t do some of the things the text field does for you, so be prepared to do some reading of docs. 
You'll only be able to effectively apply POP-principles once you understand how protocol extensions, protocol composition, and protocol inheritance works. P.s. Obviously, I could not explain each related concept in a 4-minute video. I have another tutorial on protocol extensions and I plan to publish further POP tutorials on my Youtube channel. Btw, I recently published a POP course on Lynda, where I implement an entire app using POP.
Yup I forgot to say to people search for Let’s Build That App :) thanks for bringing that up
😁👍
I implemented the code(I'm assigning the value that's getting returned to a cell label...) returnPrice(val: 1, callback: { openPrice in print(openPrice) }) when openPrice is printed here i get the value that i want(the one from the api) but the label's text is () What did I do wrong? :/ thank you so much for your time.
https://pastebin.com/gkc5cXqS
Well technically you are 0 years old the day you are born, so Int = 0 makes sense. Int = 1 would not be the case until your first birthday.
https://pastebin.com/SezrQ48h
Ok, so `openPriceForCell` has type `()` because `returnPrice` method does not return anything (this is what we want). This method uses `callback` to return `openPrice` asynchronously. To use it with your cell, you have to invoke it like that: model.returnPrice(val: indexPath.row, callback: { openPrice in DispatchQueue.main.async { cell.priceLabel.text = "\(openPrice)" } }) `DispatchQueue.main.async { ... }` runs code on main queue - it's needed when doing anything with UI
Never ever trust what you’re getting over the network. You don’t want a server or network issue (e.g. bug, compromise) to turn into a client issue. Crashing the client is a client issue. It means users cannot use other parts of your app, and your app may be rejected during review. You need a layer that turns untrusted data into trusted data. It separates the data you get from he network from the rest of your app logic. That lets you use non-optionals in most of your code. Non-optional means you can trust that the value is there. Crashing in that part only happens if there’s a bug in your app logic or data sanitization, which is an appropriate reason to crash. In short, your model can use non-optional values. Your data sanitization can’t just try to blindly apply the model. Instead it should use if lets to safely create a model object, reporting errors when it can’t.
From a first look I’d say you have forgotten to hook up the picker in interface builder. I.e. ‘picker’ is nil.
Did you wire up your picker view? On your storyboard, control-drag from your picker to the yellow circle at the top of the view controller and setup your datasource and delegate. 
What is a state variable? I am a noob. Only 6-8 view controllers right now. 
I am interested. Have been learning for 1-2 years 
Something similar to the Starbucks app for mobile drink ordering 
 func overrideviewWillAppear(_ animated: Bool) { let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext do { sounds = try context.fetch(Sound.fetchRequest()) as! [Sound] tableView.reloadData() } catch { print("There was an error") } } Are you actually creating your own method or you trying to override viewWillAppear? Because if you are trying to override it needs to be override func viewWillAppear(_ animated: Bool) 
I have tried this and it has not worked, it has just given me the same error.
I am trying to create some kind of CoreML app but there is no so many useful models :/ 
Thanks for the suggestion guys 👍
If you have verified that your picker view is properly connected to the IBOutlet, then I would ask: in the storyboard, is the picker view contained by another view, or is it a top level object? If it is a top level object, then I think it will be immediately dealloc’d since the reference to it is weak. Try making the reference strong (by removing `weak`) and see if that fixes your problem.
Wohoo! Glad it's fixed. It's all good we all miss the little stuff like that.
Thanks for the advice, I really appreciate it.
[sure](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html) 
Since git will always show the key in your commit history, you should roll the key (revoke the current key and create a new one)
Thank you! I’m glad you liked it :)
How’s your app review strategy?
Awesome, thanks! Just sent you a message on FB.
Have you tried to use the visual debugger to see what elements are causing the issue? What are you returning for the row heights function?
While debugging, there is a button on the debugger toolbar that looks like three rectangles. It’s next to the other controls for Play, Play Next, Play Into, etc. When you get the spot in your app to replicate the issue, tap on the button and it will snapshot all your views and show you a 3D render of it. You can select views and see sizing and what constraints applied. 
I wouldn't fight with NSScrollView. I'd create my own "scroll view" (I'm a maverick). It's a relatively simple idea (A view which clips to bounds, and has a content view which is larger than itself). You can create an infinite canvas area in a quite straight-forward way when you divorce yourself from NSScrollView. The center of the content view has an offset from the center of the scroll view. When the user scrolls, you can move the content view **infinitely** away from the center. This all makes sense in my head. But I did have a beer two days ago, so I might still be under the influence.
Notes: - the content view (canvas) should determine its own size (based upon the drawing) - when a user scrolls in the scroll view, you are only moving the content view's center relative to the scroll view's center
Wow! Thanks for featuring my library [ViewAnimator](https://github.com/marcosgriselli/ViewAnimator) at #11! 
Please don't attempt to roll your own scrollview. The native scrollview has lots of subtle dynamic behavior that will make your clone feel off and wrong for users of tother software on the platform. Example: when used with a magic mouse, there's velocity an deceleration metrics that come into play when you 'flick' the scroll - do you want to guarantee that you match the platform? How about accessibility shortcuts? Do you want to guarantee that you match the platform?
Who wants* How do you not know this?
Just a typo, relax ;) 
Sadly, this did not work.
I didn't plan to ;) 
If you need a mapping from a string to a unit (like "ml" to UnitVolume.milliliters), I'm not sure about that. But if you just need to serialise measurements, that seems to work fine: let measurement = Measurement(value: 100, unit: UnitVolume.milliliters) let data = try! PropertyListEncoder().encode(measurement) print("Data is: \(data)") let deserializedMeasurement = try! PropertyListDecoder().decode(Measurement&lt;UnitVolume&gt;.self, from: data) print("Result: \(deserializedMeasurement.converted(to: .liters))") Prints the following: Data is: 147 bytes Result: 0.1 L 
Overkill for dev work. Also not a great idea to buy a 1st gen Apple product.
That's very nice of you. Thank You!
Just wanna take this opportunity to highlight my library for working with units, which is imo much better and convenient than Apple's one. The readme gives a thorough overview: https://github.com/Infinisil/SwiftUnits Of interest might also be the [Units.swift file](https://github.com/Infinisil/SwiftUnits/blob/master/Source/Units.swift) which demonstates how easy it is to add new units. It is however abandoned, as I am not doing any more Swift development. Hopefully someone takes some inspiration from it.
Sounds nefarious... no way in hell i want my social apps scanning my face when i use them... is this feature even allowed on the app store?
Yes, allowing them to use the camera allows them to do this. There really should be an icon for camera/mic usage just like there is one for location usage.
Why?
An indicator is exactly what we hope this project pushes people to want. Similar to the indicator for background mic usage. 
This is some Black Mirror shit right here.
IDEs are becoming increasingly extensible. It'll be interesting to see how long Apple can buck this trend, and how much it will hurt them.
So I fiddled around with this problem a bit, I ended up writing a Objective-C "script" that turns the NSUnit.h header file into a Measurement.init that handles all provided units and returns a properly initialized Measurement. I think I can work with that. The Swift code looks like this, just with 163 Units instead of 5: import Foundation enum MeasurementError: Error { case multipleMatchesForSymbol([Dimension]) case unknownSymbol } let dimensionLookupTable: [String : Dimension] = [ "mph" : UnitSpeed.milesPerHour, "°F" : UnitTemperature.fahrenheit, "L" : UnitVolume.liters ] extension Measurement where UnitType == Dimension { init(value: Double, symbol: String) throws { if let dimension = dimensionLookupTable[symbol] { self = Measurement(value: value, unit: dimension) } else { switch symbol { case "g": let dupes = [UnitAcceleration.gravity, UnitMass.grams] throw MeasurementError.multipleMatchesForSymbol(dupes) default: throw MeasurementError.unknownSymbol } } } } Full Swift code: https://pastebin.com/Uxzbwd3y The Objective-C script that was used to create the code: https://pastebin.com/j6H8FTbe 
Reviews of Xcode have always been bad. Perhaps even more so since Swift appeared because its compiler is young/stubborn/crashy. If anything I'd say they're better than they used to be because a lot of nice improvements have made it into Xcode 9.
Be specific as one cant address a problem if we don't know which one you are talking about. Beyond that XCode has always been a horror story in my opinion. in a nut shell a works in progress that should never have been released. Apple can get away with this due to developers being a bit more computer savy but XCode has always had its performance and bug issues. Now that is off my chest I do wonder why every IDE out there basically emulates every other IDE in that software is built the same way. We really haven't seen much innovation in the way software is created. Sure there are new languages but the actually building of an app is pretty much the same as it was 30 years ago.
You might want to look at maps.me api https://maps.me/api/
I don’t know. People who are reading news are not likely to react highly emotionally, especially not when alone. I don’t think it would be very good data. 
Xcode is terrible.... uses Android studio... Xcode is not terrible ;) just be thankful you dont have to use Eclipse :) 
Xcode was fantastic while Interface Buildwe was an standalone app. and usage/performance has been decreased since then. It does make sense with the current dev prefered architectures to split it back, remove the bridge obj-c / swift and get back to the glory days. I know many people already doing this, using Appcode for coding/testing and XCode for other stuff.
Xcode is fantastic if you compare it with Android Studio for example
I’ve been looking at Mapbox now. Animations within the maps look excellent and has an offline ability. The examples are easy to follow. I’m going to give this a shot and the pricing seems good. I couldn’t figure out commercial costs for arcgis. Mapbox says it’s free for up to 50k users per month. Which is more than enough. 
This exactly. I really miss the days of separate windows and apps for different pieces of the IDE. So tend to edit in AppCode, build and debug in Xcode, at this point with Swift there are zero tools that are stable or complete enough to handle the entire workflow. 
Every new Xcode/Swift update gives a bunch of additional soft-warnings. It's a pain to maintain any mixed Obj-C/Swift apps that rely on third-party libs. The warnings alone have made me want to rewrite my older app in pure-Swift. Maybe that's what Apple wants: to be as annoying as possible until you go down the path they've chosen.
Android Studio is great. Really nice code completion, awesome refactoring tools, lots of Android lint checks, string/color resource inline preview and more.
I learned a lot from the YouTube channel Let's Build That App It teaches you from the ground up how to build various apps like Messenger
Recent meaning the last 10 years? Yeah, Xcode is awful compared to basically every other major IDE (IntelliJ, Visual Studio).
(Objective-C) selectors are an (almost) required implementation detail of a dynamic programming language. A dynamic programming language requires a runtime. Swift is not a dynamic programming language.
This is a godsend: https://stackoverflow.com/questions/7997636/disable-warnings-in-xcode-from-frameworks
I use VSCode+Swift addin for writing, and [Swift for Windows](https://swiftforwindows.github.io/) when I’m writing console programs on windows
Yea I do not get why people bash Android Studio other than for memory consumption. My gut tells me it is just inexperience with the platform that gives them a bad impression of everything (including the IDE). As someone who develops for both iOS and Android currently with past experience in a large variety of languages, frameworks and IDEs - Jetbrains IDEs are light years ahead of xcode. Can you even refactor -&gt; rename reliably in xcode yet? There are too many issues with xcode to even list here. I specifically use AppCode just to avoid xcode (even though AC is not quite up to par with other jetbrains products, and has its own bugs), I only use xcode for IB and visual autolayout because xcode really is terrible. Also big shout out to VS Code. Probably the next best IDE for me after jetbrains. 
I’ve had a few issues with Xcode but nothing that is a real show stopper, then there’s Interface Builder and constraints. Sadly I’m too new and rely a lot on Interface Builder. :/
KeyPath is the static, type safe, compiler enforced version. There are talks on the swift mailing list about implementing similar dynamic lookups.
I've used Xcode since v3 on a near daily basis, for almost ten years, as a professional App developer. Recently switched to work on Android... and I will never look back. I have no idea why you would rate Xcode above Android Studio, AS is superior in almost any way you care to mention while Xcode has declined into a buggy mess.
With source editor extensions and the new refactoring engine (open source via Swift project), it seems like they are at least heading in the right direction, if a bit slow.
Good for you pal. Our android team is in constant pain while we have all the fun and laughs on the iOS side. Not to mention that the iOS team is half the size, while we have equally well trained software engineers. That might tell something when you are working on the same project...
Yep, both Xcode’s and Interface Builder’s performance suffered greatly from the merge. Some might have found the floating palette driven UI of pre-merge IB outdated, but it never bothered me and I appreciated the extra flexibility offered by palettes compared to the pane system we have now.
My response to this is to keep third party libs to an absolute minimum. The ones I do use have either proven track of timely updates or are small/simple enough for me to fork and update myself. Anything all-encompassing or monolithic is out of the question.
Visual Studio looks just as bad as Xcode.
Well, Android Studio is really a good tool, but what you complain about its about Android development, the pain in Android is their SDK/frameworks, fragmentation, etc, but we are talking about the IDE, and yeah, I work on both and theres some things that Android Studio do better, as mentioned in other comment renaming methods/vars (Xcode has but its not so good) also the only thing I don't like about Xcode is the code completion for methods, its hard to get it work as expected almost every time, i.e. you write "String(" but Xcode doesn't show you all the available constructors (I tried App Code and it does work fine).
[removed]
Oh! this will be pretty cool if theres an IB standalone again, b/c right now is too slow, I suffer from it nearly every day :(
Yes, it's never *just* about the IDE. But I still find Xcode a better overall tool for development. Especially for my side projects with spritekit and scenekit. It has a mini-Unity built in. :) I also fancy the *much hated* interface builder with storyboards. For me it just seems like a lot more effort to develop for android. But, whatever floats your boat, right?
Now you need a mapping SDK and you need to present those tiles. You may be able to apples mapping SDK
It doesn't, read what he wrote. 
Just a quick tip: check to see how quickly they started supporting iOS 11. If this is a crucial component to your app, then such things are awfully important. You don't want to be beholden to a 3rd party.
&gt;visual autolayout As someone who's never used appcode, this sure sounds like it
&gt;I only use xcode for IB and visual autolayout Reading isn't that hard, mate. 
Hi certainly123! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/7qr9nu/i_made_an_itunes_chart_viewer_app/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
&gt; Give up and crash? Why the hell would you do that? &gt; in order to use Swift the way it was full heartedly meant to be used Are you saying Swift is meant to write crappy apps that crash all the time? You have it backwards. You are favoring "ease of writing code" over "quality of product". I know this is how we approach our small fun side projects, but this is not how you build products that you distribute to people. &gt; Don't we want to define variables as non-optionals if in fact they should always be non-optionals in order for our app to 100% properly function? If not, then we are losing one of Swift's most powerful concepts and features and have no reason to use Swift over any other language. This is again backwards. The "optionals" thing exist precisely to handle situations where you are not sure whether the data is really there or not. When you are loading data from the network, _you are not sure if the data is there at all_. &gt; Shouldn't the server have the responsibility of validating values before it sends it back in a JSON response? Yes it should, but that doesn't mean you get to write crappy code because you hope the server has the good code. ok, here's one thing to consider: Instead of "give up and crash", how about "show an error message to the user"? If your application cannot function without proper data from the server, it should tell the user there was some error in communicating with the server; instead of just crashing. If the application can still provide something useful to the user even in the absence of the data from the server, then it should do so instead of giving up. 
Related: Especially if you can’t think of any other use cases for it, an “Open in dark mode” option in your app’s 3D Touch menu would be great!
Or even better - don't have any launch screen. It is useless anyways.
Memory is shaky, but was Xcode ever separate from Interface Builder? Before Xcode there were separate Project Builder and Interface Builder, and I thought it was Xcode 1.0 that brought them together. This was, what?, 2003 or so? 
The goal of iOS Ref is not to provide information that isn’t available anywhere else, it is to make the most important iOS developer info and web tools accessible as quickly as possible. I used to get stuck on basic closure syntax all the time, even though I conceptually understood it, so I'm hoping that pages like [this one](https://iosref.com/swift-closures) can serve as convenient quick references. I just started this website last week, so I’m still working on adding and removing content. But over time, I hope to make it a stable location where you can consistently find important information. I’m definitely looking for feedback so please let me know what you think should be added *or* removed!
I could also offer some help with iOS development either on swift or objc. I'm a professional developer with about 5 years of experience. Prearranged questions are preferred. https://t.me/glukianets
I agree. Games, fine because they are meant to waste time. But utility app? It’s like the bad old days of the web where they used cover pages. Let’s go, time is money.
But isn’t launch screen static? I don’t remember that it could be changed without updating..
As far as I know, you can’t change the launch screen dynamically. I remember trying this a while back. 
Huh? The launch screen is a static view shown while the app loads. Without one, it’s just an empty white view by default.
Wow awesome ! Will camp it like a noob in PUBG :D 
Developer here, this isn’t possible. Launch screens are static and only display while an app is loading. Any animating launch screen is actually a pseudo launch screen view inserted after loading AKA Twitter.
I’m guessing they mean just use the dark launch screen. That’s what I did. 
Liked it :) well done
Correct. Many great apps like the Apollo reddit client do this
That’s not what I mean. I’m saying you should have an always dark launch screen just in case the app is being opened in the dark
Ah, gotcha. That wasn’t clear to me.
We are all developers here. I am not saying the launch screen should be changed if the app is launched in the dark, I am saying the launch screen should always be dark just in case. 
Having a dark launch screen works great for most apps. The reddit client Apollo is an instance of this
I have an option in my open source Quiz app to launch the app with the dark theme ^^ https://github.com/illescasDaniel
If app UI is always dark then launch screen too being dark is a common design choice. Whats special here then? Light screen for "always dark" app doesn't make any sense isn't it.
Thanks! I’ve been wanting to. Do you know a good resource to look into?
In an app where a dark mode is available (not obligatory, available), the launch screen should always be dark just in case the dark mode is on for the app. 
That’s a joke, but the class browser from Xcode 4 was really nice. Too bad they ditched it. The class browser of today is totally useless
"blind"
Wow, you really know what you're talking about, huh?
If dark mode is NOT ON for the app then isn't "making launch screen dark always" cause a disturbance upon launch? I mean, for default mode (non-dark) the launch too is non-dark for a reason.
If you’re just learning Swift, do one thing at a time and stay in Xcode. Appcode won’t accelerate your learning, Do I use Appcode? You bet. I loathe Xcode. But you will probably be better of in Xcode since you’re just learning it. You won’t hit on the thwarts of it until some time, and then Apple surprises everyone with yet another reimplementation of everything on top of everything else. Talk to you then. 
Cool thank you! I was looking a bit at SnapKit which I believe does the same? 
Great, thank you. I'll read through that tonight! 
No
Huh, this is fascinating. I'm behind the times- I avoided Swift initially because it was in flux, then I was learning Java/Android while Swift started taking off, and now I'm back trying to maintain an Objective-C program and everything new is in Swift and I never learned it. I had no idea it was practical for server-side coding. I will keep this in mind.
Nope. All Xcode. I work on a massive app daily and Xcode handles it fine. 
Yes, same thing different dialect. I think cartography is more succinct, but I guess; taste and all that ;-)
It’s this constant nagging and the interruption you have when you’re in the flow writing code and the editor wants to inform you that you made a mistake and you correct the mistake but the error still persist and you’re not sure if you are right and the editor is wrong and so on - from the top of my head. And then you wait for a couple of minutes until the refresh cycle is complete and everything is fine and then it’s not because of fucking state and all that and there is just to much of it in this fucking piece of shit that just crashes on you silently and so on. I’ve been coding in Xcode for so many years now and I don’t think I know any other piece of software that makes me seriously reconsider my platform of choice. And then it works adequately and I don’t think about it for a couple of days.
You were talking about the class browser. Where it's inferior to other offerings?
It’s handy to have both around, but I tend do 99% of my work in Xcode. But Xcode has its problems. Recently it was crashing on me when I threw fatalErrors. Had to run in AppCode so I could see what was actually failing.
Xcode sucks, only use it for what you have to. Don't use IB, either, as others have suggested. Bad code.
Thanks
Selectors are strings that are used in hashed tables to dynamically dispatch a method call. Swift function passing is static. The two concepts have nothing to do with each other. If you know specifically what function you want to call you can use Swift's static function passing behavior, yes. But it does not allow for dynamic dispatch.
Great job with UX with the “EXT” on external links 👍😊
The IDE doesn’t matter for what you want. An IDE, to simplify, is just a fancy text editor. It won’t magically make your code work on both platforms. You should look into frameworks that allow for cross-platform behaviors. React Native comes up every once in a while. I don’t do much mobile development so I don’t know what most folks use. I do know that, eventually, you may outgrow such frameworks. Make sure you account for the costs of transitioning in the future. 
I've heard some good things about [Flutter](https://flutter.io/).
Open the color picker, and literally drag a color from the picker into the source. No more magic numbers. [Example](https://i.imgur.com/HGhXROM.gifv)
Holy shit is this amazingly useful!!
SO THIS!!!! Flutter is pretty much my favorite cross-platform mobile app framework.
Gods no. Having to build and navigate just to see the changes to your layout is 10 steps back in my opinion. 
Compares to thinking you have the layout right, running it, and finding one (or 10) dragged constraints are wrong and have to be removed and started over. Move an element slightly and see IB throw a warning, say to fix it, have the fix not work. IB does not represent what you will see. To make it faster to view the layout I have a debug view that I can load various layouts with a couple taps. Actually, you should try to build this anyway.
I should also not, I’ve been building and designing UI for 20 years or more. Visualizing what my ui will look like base on code is second nature to me. But with code I can build a ui in code twice as fast as I could in IB. But that is just me.
I'll just say that first class apps are always written in the native SDK. For iOS apps, you will never get featured on the Apple app store if you use a cross platform SDK. That's a 100% guarantee. Moreover, users can always tell when an app isn't truly native. It's already insanely difficult to get screen space on a device, if you're competing against head to head against native apps, you're only further stacking the odds against acquiring that screen space. 
Emacs 
Good bot
Thank you ChristianGeek for voting on sneakpeekbot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
Great write up! 
loved it too! it was written by my friend :)
That’s just wrong. I’m sure plenty of apps written in react native or Xamarin got featured. There is a big difference between apps that work on a web view and cross platform frameworks that makes use of native components on each of their target platform.
Well TIL. When did this become a feature?
Ah, thanks for catching that! I just fixed it. Adding information about capture lists would be a good idea, thanks for the suggestion!
Sweet, thanks man!
It's daunting at first but if you setup Core Data, then it handles the changes for you. Any changes you make to the database will automatically be handled on the TableView/CollectionView as long as it's all setup correctly.
While this is great, you never know if that particular shade of pink is the correct one when dealing with designers. Personally I can't wait until I can support 11+ only and use colors in my [assets](https://blog.zeplin.io/asset-catalog-colors-on-xcode-9-c4fdccc0381a) folder.
Really like the site and the idea behind it. Would love to see you add to the closures page information about writing your own functions that take closures. That's the one I always have to go to http://fuckingswiftblocksyntax.com/ to look up, and still have to puzzle out the exact right way to do it.
I know what you're talking about but I don't actually see an example of writing your own function that takes a closure in http://fuckingswiftblocksyntax.com/. Where do you see it?
👍😀
That's my point. It's not there, and I have to extrapolate. I did see that iosRef.com has an example on the function page, but that isn't where I'd first look for this information.
Oh, and I just ran across this site http://iosres.com/ after noticing that my go to place for resolution information https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions didn't include iPads and think it'd be a good addition to your site. It'd also be nice if your resolution information included iPod Touches even though they have the same dimensions as one of the iPhone models released at the same time (i.e. gen 6 = iPhone SE).
iPod touches are included at the bottom :) https://iosref.com/res I hope to have a way soon of displaying a one-line table of contents on each page, so that people know everything that's there.
Ok, I see. Yeah I have an example in the functions page, but it's only one example. With all the ways that you can define a function with a closure as a parameter, like escaping vs noescape closures, closures with parameters that have names vs without names, do you think I should just add all of these examples as a separate page? Or would it be more convenient in the same closures page?
LUV IT! I teach an iOS development course and will make sure to introduce my students to this awesome site!
Try using xamrine... did the faital mistake of building an app in it. 
Yeah I think you're right. Hopefully I'll have it added later today.
Thank you for your reply! Those were pretty helpful. I will look into it.
Hey Eoghain, I added a small table of contents to https://iosref.com/res and a few other pages!
Xcode 8 / Swift 3: color literals. Image literals too. I find both largely useless outside of playgrounds. Image literals are actively dangerous.
Hello yeah. Hanks! 
Is MVVM beginning to be used more than MVC in iOS development?
Thanks for the resource, can’t wait to try it out!
If it is reasonable to require the devices to be physically near each other during this interaction, look into MultipeerConnectivity: https://developer.apple.com/documentation/multipeerconnectivity Otherwise, you’d need to use more traditional web services.
gud vid gud topic, I’ll be looking for that free download too Thanks
Thanks!
Eclipse is the easiest for setting up cross platform development. It's not really the best IDE. Visual Studio Code pushes Xamarin but can be used to compile swift cross platform frameworks. You'll need to learn about compilers, linkers, and debuggers if you really want to get into proper cross platform development. I'd like to know why you'd switch between a Mac and Windows continually throughout development. Seems counterproductive.
Beep boop. I am a bot that sniffs out spammers, and this smells like spam. At least 60.0% out of the 5 submissions from /u/mizaksad appear to be for Udemy affiliate links. Aside from the general annoyance that is spam, many of the courses that get spammed are by brand new creators on Udemy, which are actually just selling pirated content that is free for now to get views/ratings, then gets pay-walled. Do not put up with this trash on Reddit. Throw it out! Bee bop.
Thank you!
Interesting. So load all the data into core data then have the collectionview from coredata is what you are saying? 
True, to each his own and always do what is best for your team/project even if it's a team of one. Was just stating that I really want the assets folder stuff. I think it's going to be a game changer for my company in allowing designers to be guaranteed that the color they chose is the one in the app, and giving us the easy ability to change all occurrences of "actionColor" in a single place. Currently we've got it in storyboards, and UIColor() inits in code, and it's a pain to change (like they just asked us to do). Now with this style, and it coming from Zeplin I might be able to get them to actually name their colors and stick to using the naming conventions. 🤞
I found it on iTunes; you just have to search for Stanford in the Podcasts section. Of course, YouTube's accessible just about anywhere
I feel like imma just stick to Xcode on Mac for iOS and then just find something good for Java on Android. Seems annoying now that I think about it to have to code for both at once now :/
Pretty much. The secret sauce is the NSFetchedResultsController, it responds to any changes in the data store and then sends updates about the changes to your Table or CollectionView.
`locationService` is deallocated as soon as `findLocation` ends, because nothing keeps a strong reference to it. Add a property to `HomeViewController` like `private var locationService: LocationService?` and set its value in `findLocation`.
That worked, thank you! Since it now holds a strong reference do I have to worry about deallocating it at somepoint? As I don't want the locationservice to be allocated if it's not needed. 
As long as the location service doesn’t retain your view controller (which would cause a retain cycle), the view controller’s strong reference to the location service will be removed automatically when the view controller is deallocated. Usually that happens when you pop or dismiss the view controller. It doesn’t seem hackish to me. You always need to keep a strong reference to dependencies you inject. Even singletons have a strong reference somewhere: in the static `shared` property. Minor note, but if you want to avoid the optional property on your view controller, you have two options: 1. Create the location service in the view controller’s `init`, then don’t call `setupLocationServices` until `viewDidLoad` 2. Make the location service a `lazy` property, to automatically create it the first time it’s used (i.e. when you call `setupLocationServices`) You can’t use option 1 if you’re using storyboards. You can always use option 2.
Ahh. That makes sense then. Thank you! I appreciate the feedback and for the help! I didn't thing about a singleton being a strong reference as well.
No problem! Let me know if you have any more questions.
So I have a NetworkService which gets the data from the API, and the LocationServices. I have the location services passing in the lat and long and the networkservice. Should the locationservices talk to the network service? I'm also not sure on how I should rely that information back to the HomeViewController to make the UI updates
EDIT: I figured it out actually. I just had to add \(address.text ?? D66237RqYLpgmhRJK8p2mFppFuyr3LmJXF) at the end of the url.
Why are people up voting a bot that is calling this spam? Looks like a legit link to a free course. Thanks for the link, I'll be checking out the course.
They’re not available readily like they are with UIBarButtonItem, but this StackOverflow question has an interesting answer (the higher voted one, not the accepted answer) that will return you a UIImage from a UIBarButtonItem, which you can then use with UIButton. https://stackoverflow.com/questions/21187885/use-uibarbuttonitem-icon-in-uibutton
Honestly. Read my mind on this "issue". I tend to take the same approach. I think up ideas id like, then search the Google Play store and the Apple Store and read reviews, download the app and check it out. Then redo the app and see what I can make better personally to better my skills and it just feels like a personal gain to myself that I was able to resolve or make an app better that another person or company might have approached it. 
SWIFT is not Swift
You’re posting in the wrong subreddit. This is for the programming language. 
This seems like a bit backwards to me. I code to create something I think should exist. If it exists I don't code. If you're just having fun coding, why does it matter if it exists or not?
I mean like. Yeah I code to learn and for fun. But I also kind of want it to be useful in some degree. Not spend a month creating images and coding and making a working application just to trash it. But like to enjoy and have fun but to actually make something with meaning and that is useful. If that makes sense. 
There's a reason that apps exist in a market: it's to let the market choose a winner via voting with its collective wallet. Improving something that exists is absolutely OK. You can't copyright or trademark or patent ideas (although patents can be a bit thorny). You can copyright artwork, though, so don't copy the assets of an exist game in the idea of making a clone.
There are a lot of articles about not using IB ( Interface Builder) and doing everything in code. There's also a guy on YouTube named Brian Voong who has a channel called Let's Build That App and he produced and excellent series of tutorials on how to build apps using only code. The apps are great samples on how to do some very interesting things in Swift.
Not a solution for this thread, but these are the situations where apps like Pocket helps a lot.
Just improve instead of copying.
I usually add stuff to reading list in safari but I forgot 😖
Any action that requires a debit from the players in game currency should probably be confirmed with the same message consistently. If for nothing else than to prevent accidental payments.
But it would be very annoying to keep asking the player to confirm after every single move beyond the move limit.
I suppose it would. I underestimated how often someone might need to do this. Might I suggest a visual cue in the UI that indicates purchasing? For example, all buttons that will result in an action that costs money will be the same shade of pink.
IB is not suitable for a team &gt; 1. You should not write software in a WYSIWYG editor. IB is slow and horrible for code quality. 
For work I have a 2017 MBP 13” with 16gb ram. At home I split my time between a similar MBP and a Mac mini. I don’t have the specs of the mini in front of me, but I maxed out all of the internals in 2015
A 5K 2015 27in iMac with a 1TB Fusion Drive (Though I wish I went full SSD) and 8 Gigs of RAM. 
I use a 2017 15" model for work, and at home I hook it up to an external GPU with a GTX1070 and an 8TB external drive for backups and storage. I occasionally bootcamp into Windows when I'm home for some gaming.
Did you see this comment: One trap is hidden ;-) This code only works, if the UINavigationItem is currently rendered onscreen. It fails, for example, if the view controller isn't currently loaded (e.g. if it is one of the not selected view controllers in a UITabBarController).
Can’t comfortably afford a real one yet, so hackintosh with 3rd gen i7, 970gpu, 24GB ddr3 ram, and 1TB Samsung pro SSD. Running it on dual 24” lg monitors. Sometimes I use my wife’s 2012 MBP, but rarely. Works well for my needs. 
2017 MBP 13" with 16GB. Pretty great machine, though the keyboard could definitely be better.
I much prefer the keyboards of earlier-generation MBPs.
I don’t think the location service should talk to the network service. Either the network service should call the location service, then use its results to make the network call, or the view controller should first call the location service and then call the network service. You’ll want a completion handler closure for both the location service and the network service. For the location service, you could store the completion handler as a property and call it the first time the `CLLocationManager` calls its delegate method. Alternatively, your location service could have a delegate. Once the location service finds a location, use that to call the network service. In the network service’s completion handler, update the view controller’s UI. Nothing wrong with initializing an object inside one function just to use it in that function. It’ll be deallocated as soon as the function ends, but that’s usually what you want if you don’t use it anywhere else.
Don’t convert it to a string. Convert it to a Dictionary using the json facilities.
MB Air mid 2012, 8GB Ram, i7. Works ok except for the screen size&amp;resolution, running xcode gets a bit cramped. But the machine has held up fantastically well.
I've tried to convert it to a dictionary with this code let json = try? JSONSerialization.jsonObject(with: data!, options: []) as! [String: Any] print(json) but json is equal to nil
You’re in the wrong dimension buddy. Many apps have been made and more will be made, not because of novelty but because of better implementations and solutions to any given domain in any given axis. 
.storyboard files aren't language specific; they're available both in Swift and Objective-C. Speaking from my experience with merge conflicts related to storyboards in the past, they're backed by an xml file which isn't quite pretty enough to be human readable and not worth modifying in a text editor because of the great likelihood or corruption. I believe the xml itself is generated by the IDE, Xcode. Of course, this xml file contains references to UIKit objects and layout/dimensions which the compiler can interpret at build-time. As an example, a layout constraint would look like the following in the file: &lt;constraints&gt; &lt;constraint firstAttribute="height" constant="400" id="VT3-nW-96Q"&gt; &lt;variation key="heightClass=regular-widthClass=regular" constant="600"/&gt; &lt;/constraint&gt; &lt;/constraints&gt; This would translate to "Add a height constraint to the view with the id VT3-nW-96Q. Set the constant to "400pts" unless the current device's size class is regular-regular; then make it "600pts""
Work: 2015 MacBook Pro 13' (512GB i5 8GB ram) Home: 2016 iMac 4K with 1 TB Fusion Drive (i5 8GB ram) 
[Upwork](upwork.com) has caught my interest but I haven’t actually used it
Alerts are always the safest bet, an end user needs to know what/when they’re money is being spent on. If they don’t see where they’re getting value it’s likely they’ll stop purchasing in the future, it’ll also change how some players will play the game. This is in the case of in-app purchases being used to buy extra credits, otherwise display the total credits available and then have a pop up that doesn’t stop the action of the game notifying players of the impact of a move on their credits.
Your explanation makes sense to me! Thanks a lot!
I am giving it a go now. Thanks.
It’s per api key, not per app. Each user can make that many requests.
Sorry, I'm probably a bit naive about this, but I thought that the developer has his own api key that he includes within the code that makes the api requests. So, I thought that different users of the app would still be connecting with the same key?
No, each user of the app obtains an API key
But I've used reddit apps on my iphone and I don't recall ever having to enter an api key. Is the key obtained automatically once the person enters their username and password? Or how would that work?
Convert it to an array using as! [String] instead of [String: Any] 
&gt;?(["Vilnius, VL, Lithuania","Villas, NJ, United States","Villavicencio, ME, Colombia","Villahermosa, TB, Mexico","Villa Park, CA, United States","Villa Rica, GA, United States","Villa Park, IL, United States","Vila Nova de Gaia, PO, Portugal","Vilamoura, FA, Portugal","Villach, KA, Austria","Villanova, PA, United States","Viljandi, VD, Estonia","Villeurbanne, RH, France","Vilvoorde, VB, Belgium","Villingen-Schwenningen, BW, Germany","Ville Platte, LA, United States","Villa Grove, IL, United States","Vilanova I La Geltru, CT, Spain","Vilseck, BY, Germany","Vilonia, AR, United States"]) This looks like an optional array [String]? Perhaps you should just unwrap it? if let unwrappedArray = myText { print(unwrappedArray) }
The app authenticates with reddit and gives you a key automatically. Look at your reddit account and you’ll see every app you have used with that account. 
Ah! Ok, that makes sense now. Thank you! :)
My home setup is a late 2016 15” + GTX1070 through an eGPU. I lack the extra storage but our setups seem pretty close!
Work: 2016 15” Retina MacBook Pro i5 and 16gb RAM Personal: 2017 15” Retina MacBook Pro w/ Touchbar with an i7 and 16gb of RAM.
Thats an Invalid Response from the server. You shouldnt see "?(" as the leading 2 characters. See https://api.reddit.com/ for an example of proper JSON return You can turn that into a String, remove the first 2 and the last character, turn it back into Data and parse that if your just looking for experience parsing Data. 
Thank you. Yes my app uses a custom built server which stores private user data. I haven’t uploaded my code to my Github and I will later on. I believe my app can show a potential employer my capability. Thank you!
don’t use People-Per-Hour unless you don’t mind paying 20% or more of every job to them . They’ll shaft you and the other party if there’s any disputes. 
I only did a fifth of the course, but it looks horrible. Starting with method names like “didChoiceSelected(choice :String)”— and yes guy puts space before the colon, but has no space after. That name not only makes no sense grammatically but it also violates Swift API guidelines. Then he uses classes for VM. Who needs value types, right? Then he instantiates model with the VM, not the other way around. For some reason properties on the model are implicitly unwrapped optionals despite the fact that they are always set in init. What else… VM doing the persistence stuff? Not enough? VMs also do validation. And webrequests. If I had to pay for this course, I’d be pissed. 
It’s a self promotion of low quality shit. Looks loke spak, no?
True. But otoh sometimes one-person project grows and then multiple devs will suffer choices made with the assumption of the single person workflow. Also, adhering to the best practices even while working solo gives you good habits in case you will be part of the team some day. 
Post an anonymized version of your resume. No responses (even rejections) means your resume is likely not very strong. Make sure you are also networking in person. Go to meet up groups, find friends to code with, etc. You want to get a positive reputation. These relationships will help people get to know you're a good coder past just your resume. They can tell you when jobs at their company become available before they're posted publicly. Also, recruiters or people looking to hire iOS developers attend iOS meet ups.
This is perfect! I haven't worked much with tableviews and API calls in the last few months so this would be a good refresher! Thank you for your input 
I really, really appreciate this. Im a super confident person is every aspect of life except my coding abilities and interviewing. Ill try to be mindful of what you said here. 
i would study the following. -basic form creation textfields plus buttons with stack views and can handle rezing to various screen sizes -tableview to display data -ability to segue between views -some type of memory persistance -networking like building a url with xyz parameters and various nsurl functions