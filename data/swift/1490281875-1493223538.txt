Certainly a nice way to clean up notification names, but that doesn't make other ways wrong. 
I restart Xcode when it starts doing this and syntax highlighting/auto-complete usually works again. Sometimes a reboot is needed. There's a number of SO threads about this.
No goal/project and I don't know what my boss had in mind when he came to me, telling me I have to learn Swift now.
My Objective-C is rusty but I thought they replaced all the *'s with -&gt; in one of the revisions. 
When you're programming for 10 hours a day even the simplest things can slip haha I thought I was just setting it initially then when I performed the segue it would change its initial value.. idiot haha
Love: type-safety, more compact (but still very readable) code, lack of header files. Hate: JSON parsing without libraries. Regex integration at the language level, as well as multi-threading as the language level (big fan of how Golang emphasized this so strongly, but I understand it's at conflict with UIKit somewhat). By far the worst is compiler performance and how in general how Xcode interoperates so poorly with Swift (it's seriously disappointing this is still the issue it is), it's the only thing that has made me question using Swift full-time. Not a big fan of the access modifier situation as it stands right now either. Also, not one of those "ABI stability needed NOW!!" people (though I understand their reasoning), but the size of Swift apps versus Obj-C apps is rather annoying, and to the uninformed makes the developer look lazy when in reality using Swift just means larger app downloads at the moment.
Oh how I miss the console responding in under 10 seconds. #justobjcthings
How cool! Do you have that in Swift by any chance? If not, I can go ahead and make it and post it there.
Ah okay thank you I'll look into that 😊
mmm makes sense. Thank you.
&gt; It's the end of an era but after so much time it was about time to make the NeXTSTEP Way more rad, man. 90'z rule! 
block was the type of (dispatch_bloct_t). since swift doesn't anymore support (dispatch_bloct_t). I replaced dispatch_bloct_t with (() -&gt; ()). This silenced my error for dispatch_block_t is unavailable in swift. 
You Sir are right !
Definetly check out Treehouse. Friendly teachers, helpful community that will answer your questions in about 10-15 minutes and great courses for Swift programming.
Since that kind of randomisation contains a lot of non-saturated (i.e. greyish) colors, I would recommend this instead: extension UIColor { static func randomColor(saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1) -&gt; UIColor { let hue = CGFloat(arc4random_uniform(361)) / 360.0 return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: alpha) } } 
Are you still working on this project? I'm near completion on a calendar with events myself, and I can help you.
 Do you mean something like this: #if os(macOS) || os(iOS) import CoreLocation #endif
Start with [Netflix's Terms of Use](https://help.netflix.com/legal/termsofuse?locale=en&amp;docType=termsofuse) Yes, this is the wrong subreddit as it has nothing to do with Swift. You might want to check /r/legaladvice. Also, I'm going to take a guess that you want an app where the user puts a certain date for their subscription to automatically cancel. 
He makes a class for Network calls. I'm guessing a method in his network class might look like this: func someRequest(request: Request, completion: @escaping (err: Error, dat: Data) -&gt; ()) { //stuff for request to do to verify connection or data //ClosureCall if the request worked completion(err, dat) } So when he's in a view controller, and if he calls the method like this: Neworking.shared.someRequest(request: req) { (err, dat) in //This is a trailing closure, so everything in here will only be //called if the network request worked or connected //It gets called above where I marked it ClosureCall //This is as if you're passing this closure as as an argument } This basically passes the closure into the someRequest method and only runs the closure where I marked it //ClosureCall. So basically, all the Network code is in it's own class, but the completion handler code is in the view controller because you passed a closure as an argument when you called the method. I've seen this done many times in tutorials. By the way, notice that I wrote `Networking.shared`, `shared` is a singleton (static variable, as in can only be accessed by the class). Having a singleton allows you to have a single object of the class to use. Think of it as a global variable that you can call from a class, which in my case I called `Networking`.
 I don't see how the people that wrote that compiler have any business giving the rest of us efficiency tips. Also from my years working in Java invariably it's the methods marked final they are the ones I usually need to override. 
Coming soon: - Tips for avoiding segfaults from the Swift team - Tips for publishing stable long-lived interfaces from the Swift team
MVC isn't all encompassing. In fact, it's too simple for bigger apps. A large app that only uses MVC will be a bad one. Networking is it's own thing. Put it in it's own class and connect it to your controller with an interface defined by a protocol so it's loosely coupled. 
TIL about [ContiguousArray](https://developer.apple.com/reference/swift/contiguousarray). Very cool.
I'm trying to make an app that's like a very personally specific search engine. So like you give your interests and it does a search based on those and gives you relevant articles and videos and sites based on those.
Not sure why you're being down voted. The Swift compiler is shoddy and we should not have to do all these tricks just to get a little better performance. The compiler needs to be better.
"The intended audience of this document is compiler and standard library developers" They're not talking to you 
Not sure why you're being down voted. Some of the dispatch behavior is Russian roulette unless you memorize dispatch scenario tables. Hell, I have Anki cards for the dispatch scenarios and still occasionally find myself why some method isn't being called only to have to relook them up. Only language I'm aware of that has this pedantic of dispatch rules.
Well, no I meant "Mark Price" the instructor. He's one guy, and his videos are the best on Udemy for sure. Did you know that? Or were you talking about in general on Udemy?
That's why you should decouple hex creation from color creation. Turn it into its own method, and you can use it on any color you want. extension UIColor { static func randomColor(saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1) -&gt; UIColor { let hue = CGFloat(arc4random_uniform(1001)) / 1000 return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: alpha) } enum HexError: Error { case unsupportedColorSpace } func hexString() throws -&gt; String { var red: CGFloat = 0 var green: CGFloat = 0 var blue: CGFloat = 0 var alpha: CGFloat = 0 if self.getRed(&amp;red, green: &amp;green, blue: &amp;blue, alpha: &amp;alpha) { return String(format: "#%02X%02X%02X%02X", UInt8(red * 255), UInt8(green * 255), UInt8(blue * 255), UInt8(alpha * 255)) } throw HexError.unsupportedColorSpace } } let randomColorString = try! UIColor.randomColor().hexString() // randomColor() creates in HSB colorspace, which is convertible to RGB colorspace, so method won't throw, so using try! is safe 
YouTube:)
I was referring to the course "Beginner to paid professional" which you mentioned; specifically the one about Swift and iOS 10 I think.
Because "new shiny thing". Lets recall these people are apparently people who were somehow incapable of coming to grips with Objective C - a tiny extension to C that I picked up in a day. I've been struggling to ship products other people have started in Swift for a little while now. It is beta quality software at best. So why are people betting their companies on it? I can go MUCH faster in Objective C just because the damn compiler is MUCH faster, the debugger is MUCH faster, and I already know all the names of the api calls - as opposed to trying to guess new "better" (not better just different) api calls. Basically, low skilled whiners.
I wish fileprivate had a less awkward name too, but stop pretending that a scope-based access level isn't useful. My proposal would be to rename fileprivate to something smooth like hidden, protected, or closed. 
Yeah, they're just really bad. 
I only looked at the Queue struct, but here's some feedback: Force unwraps are bad practice, and rarely ever needed: For example you could change to: mutating func dequeue() -&gt; Int? { if let head = self.head { let val = head.val self.head = head return val } return nil } No need to force unwrap.... And to your comment about generics, yes you can make this generic easily. Move the Node class to a fileprivate class outside the Queue struct, and define Queue as Queue&lt;T&gt; and Node and Node&lt;T&gt;. Everywhere you have Int, change to T.... 
What a pointless comment to make lol. 
That section on Generics is no joke. There are times when a generic function can take as much as 100x longer to run than a specific one, and @specialization can be a life saver, then. Ran into that recently when trying to generalize a string parser.
Wow you are insufferable. Down vote and move on instead of littering threads with your useless comments about how you're above everything. 
Performance tip from me: always profile
Did you read the class description? It's a compatibility hack of sorts, Array is a wrapper around either NSArray or ContiguousArray.
yup, even better
I got it a lot, and now ask potential hires all the typical iOS interview questions. Google that: "iOS interview questions" and make sure you understand all the common ones you can find. Eagerness, apparent intelligence, and commitment to self improvement are to me more important than some mid level who is stuck In their ways, so be positive and friendly. Good luck! 
Oh, and admit when you don't know. Think about, make a guess if you can, but acknowledge that it's a guess, and let that moment move on.
Got any interesting ios pieces (or apps even) you can show? Things you made that you're proud of? Enthusiasm and willingness to learn are characteristics lots of interviewers like to see imo. Good luck!
I just had an interview today (3/24) for an iOS position. I was asked: What is a string and an integer? What is a delegate? What is multi threading? What is Grand Central Dispatch? What is the difference between if let and guard let? What comes first, viewdidload or viewwillappear? Write and check if a string is a palindrome on a whiteboard. Write a function that takes a number as a string and return it as an integer. (I don't remember if that was the exact wording) They also asked me to choose a project I've worked on from my GitHub and draw out the app (I drew a basic wireframe) on a whiteboard then talk a little about the coding behind some views, why I chose to use certain things like a segment control, and how I would change or enhance the app if anything. Hope this helps! 
I am currently working on my first project. My biggest accomplishment so far is that I got the highest grade out of ~70 people a month ago in the final exam for a certification in 'Swift for iOS development'. I hope I'll be able to finish the app I'm working on soon but my current job kinda consumes a huge portion of my time. 
Some other ones I've been asked: * Why use protocol oriented programming * Differences and tradeoffs between structs/classes (most important thing IMO is understanding the difference between pass by value and pass by reference) * Design patterns, MVC vs MVVM, singletons * Concurrency and OperationQueue * why use weak or unowned and what is the ARC? * it never hurts to understand what hashing is and how dictionaries work 
Too real :(
As a junior, the biggest approach is how to research a problem, and how to tell you're stuck. There may be questions on things like the difference between views and view controllers or the VC lifecycle, but perhaps not. Interviews are usually very amaturely done, so often ask too easy or too hard of questions
I don't have kik and I can't find that Facebook code, but I assume that's how all of them works (including Snapchat): the basically just encode an id that is related to your account to an image. They probably thinks qr code looks fugly so they decided to make one that incorporate their design. Three is a video from Tom Scott about snap chat. I'll see if I can find it.
According to Apple Caches or tmp. [https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html](https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html) 
Making it would be rather difficult, you'd have to find a way to map a unique ID string to one and only one unique image pattern, and a way to map it back to the ID string. I don't have much knowledge on creating images like that, maybe there's a python library out there to help you out
I mean, generating the image isn't the hard part - you can literally just encode your 64 bit integer as 64 circles, black when the bit is 1 and white when it's 0. The tricky part is actually reliably reading that (which I agree is probably too much effort if you're not already experienced in computer vision).
If you visit the RFC link that they provided you with and find/search for "text" you will see what they are referring to. https://tools.ietf.org/html/rfc2104
If you have a UIImage can't you just convert that back into an NSData or Data class and then use to convert into a string?
in an app bundle, macOS may dump tmp on its own when the app is not running. Most people clear tmp at the completion of necessary use. 
If you are not limiting yourself to personal guidance, I highly recommend Swift Programming by The Big Nerd Ranch (available on Amazon). Their books cover a lot of topics, and the book that comes after, "iOS programming, is for using those topics in real applications. 
Go on Udemy and have your boss purchase Rob Percival's iOS with Swift course. It is packed with 21 increasingly complex app tutorials, from absolute beginner to making clones of popular social media apps like Snapchat and Instagram (without all the back end of course). Rob's courses are incredibly valuable and a great place for beginners
Go to a civic hacking community like Code for America. You will have a project towards, which in my opinion is the best way to learn, and you will be surrounded by knowledgable people. As an added bonus the project you work on will be used for the betterment of your community. https://www.codeforamerica.org
Good luck buddy! I'm confident that you can do it. 
I have essentially 0 experience in this area but the way I would do it is use an edgefinding library to find all the shapes and then analyze the circles it finds. I would have to do more research on the implementation, but my gut tells me that it's probably not worth it, and you should just use QR codes instead.
I started about the same age. I would say just do whatever you enjoy whether its web development with PHP and JS or mobile with swift. the JS ecosystem is very fun now and its easy to create some great apps solo. But an honest advise I can tell you is that you are not passed the fundamentals at all. There were times where I thought I was actually pretty damn good and thought I could do anything you'll get better. But looking back now, I had no fucking idea! But as long as you keep creating stuff you will keep advancing. Create a github and post all your projects there. You can look back at it in 5 years and see how you advanced and might even get a laugh.
Keep in mind that the raw data of the image tells you very little about its actual semantic contents. If the image is a bunch of black and white circles, it's not just going to be a 1 for a black circle and a 0 for a white circle - it's going to be a bunch of rows of pixels and it's entirely up to you to find the circles and their values.
Yeah! I'm actually applying as well! There are probably some good places to get started if you're lost online. 
Thanks for the insight. I will absolutely look into edge finding libraries. I'm trying to stay away from QR codes since I want the codes in my app to be easily identified as my app's code. Ie. I want to make the code unique so that when people see the code, they identify it with my service. Thanks again!
Thanks!
I'll help you out
Hi all, I've made a Xcode theme. Hope you'd like it. Theme: https://github.com/cseanc/Tokyo Design story: https://medium.com/@cseanc/designing-a-swift-theme-tokyo-7133d6c77c78#.ge99r8dgy
Awesome! Good luck and I hope to see your creation after it's submitted!
Hey mate. Im learning it as well right now. Maybe we can help each other out where get stuck? 
Right, you shouldn't use Java style getters/setters in Swift. There's no reason to do so. Java getters/setters are generally used to control access to a variable and/or to make that variable a bean property. The latter isn't relevant to Swift and the former is accomplished by a combination of public/private access control declarations for the variable and willSet/didSet, e.g: public private(set) var name: String = "Default" { willSet { print("will change \(name) to new value: \(newValue)") } didSet { print("changed \(oldValue) to \(name)") } }
Sadly this thing has infested the third party dev world. Hard to find people not on it. When I point out that two minute builds will add significantly to the time and cost they get someone else.
Yay! I think the tone the Big Berd Ranch books are written in and the types of projects they teach make them engaging. 
&gt; Let age = 25 &gt; If case 18...35 = age, age &gt;= 21 { print ("drinking age demographic") } I pasted this code into a new playground and it works fine. I had to make both the let and the if lowercase. Can you please copy and paste your code that is having the error? The reason why is because there may be an error in your code that you are fixing when you are retyping it.
Here it is :-) Thank you for your help.. //: Playground - noun: a place where people can play import Cocoa let age = 25 if case 18...35 = age , age &gt;= 21 { print ("Can drink!") } 
Are you talking about iOS development or Mac development? You mention UIKit classes (iOS) but then say Mac development. `NotificationCenter` is for when you want to broadcast a 1-n message throughout your application. It's not appropriate for generic event handling like this. You should read up on target-action.
7.3.1 ....perhaps that's the issue....
there shouldn't be a space between print and ("Can drink!") it should be print("Can drink!")
You should use the newest one - 8.2.1. Xcode 7 has Swift 2. As far as I know BNR book teaches Swift 3
thats your problem they changed the syntax for swift 3 so your code should read if case 18...35 = age where age &gt;= 21 { print("CAN GET DRUNK!") } swift 3 changed where to just a comma
If you'd like to make a variable read only: Private(set) public var foobar
If you're using the most recent BNR book, it uses Swift 3 which is only available in the Xcode 8 family. Getting started in iOS programming is hard enough without fighting versions of the language on top of it :-)
My guess is that's exactly the issue. See /u/mlokz reply.
&gt;So my first (and pretty much only) thought is to use NotificationCenter to bubble an event to the ViewController. Is this the "normal" way to do it in mac app development? `NotificationCenter` is pretty much an anti-pattern. As a rule of thumb, don't use it until you are knowledgable and experienced enough to know when it's okay to use. Use delegates. Nobody needs to know what the view is doing other than it's delegate. `Notification` tells EVERYBODY. 
That was it. I didn't know that this could be an issue. Issue resolved, thanks to everyone! I also edited the original message in case any other newbies stumble across the issue. THANK YOU!
[AsyncNinja](https://github.com/AsyncNinja/AsyncNinja) a library for concurrency and reactive programming. Not popular yet but seems very promising to me.
Thanks for the info! A follow-up question to this (and I think I know the answer, just want to make sure): Is it more common to have a delegate that just works for one object, or a more global one for the app?
Edit: side note this method is only available on macOS 12 and iOS 10 and newer. I actually just dealt with this today. The preferred method with FileManager (NSFileManager) if you just need to write a file to disk for a temporary amount of time seems to be to use this method. https://developer.apple.com/reference/foundation/filemanager/1407693-url To create a temporary directory you will want to pass .itemReplacementDirectory to the directory argument .userDomainMask to the domain argument and the URL argument must be set to something on the same disk, I normally use the FileManager.temporaryDirectory URL just to be safe. This will will make FileManager do all the dirty work of finding an appropriate path and naming a temp directory for you and returning the URL for iOS MacOS and sandboxes macOS applications. The OS will also clear out the data when it feels it is appropriate for you, usually when the app closes, but it suggests removing it when you know you are done with it. It may be a little bit more convoluted than just using the .TemporaryDirectory property but can be very useful to get in the habit of using as it is part of a family of methods that are also used to get access to directories in iCloud and other places you may not otherwise have access to or where standard file paths are not applicable or are subject to change or not be available. 
Big tip: libraries sometimes give out free treehouse accounts. San jose public library and a few others do for sure
I just got it for $10 yesterdag by googling the name of that + discount
&gt;you are no safer having setter than just direct access to the variable This is straight up 100% wrong, for Java anyway. Encapsulation isn't really about safety, it is about only exposing what you need to so that you can change implementation details without those changes propagating outward to your code base. You can change a setter to do nothing an deprecate it. You can't do that with direct access to a variable. If your code security is relying on encapsulation, you're going to have a very bad time. 
I had this argument - the PartialEquatable one - with Dave Abrahams 'round about the time we proposed the Comparable overhaul. He agreed you do get a more (type) algebraic answer to Floating Point and other types' nonstandard definition of equality, but he raised a fantastic point: No useful algorithms exist that work over PartialEquatable things. And the ones we could find in the wild turned out to be incorrect in strange ways! 
&gt;In all other cases, define a class, and create instances of that class to be managed and passed by reference. **In practice, this means that most custom data constructs should be classes, not structures.** This is straight out of the Swift book on classes VS structs. It is *not* a good rule of thumb to start with a structure. It is a good rule of thumb to start with a class and if what you're doing is better suited to a struct, use a struct instead. Better yet, read the book: https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13-XID_108
Is `[View type][View's name]Delegate` the common naming convention? So like `ButtonFooDelegate`? Also, this one's a bit more semantic - why is this pattern better than just passing the controller to the view? I understand the idea of separation between the two and that the controller should know about the view and not the opposite, but the delegate pattern seems like a pretty obvious skirting of that rule by using a proxy to do basically that.
The "controller" in MVC, is responsible for the interaction between the data (model) and the view. When there is a change in the view, the controller updates the model with the new information and vise versa, if model changes, the controller updates the view with newly relayed data. The controller has a similar responsibility in MVVM, but it attempts to take some of the "logic" out of the controller and place it in a separate layer. Things like date formatting, sorting logic, and other data preparation that the controller really shouldn't be dealing with is moved out. This is an attempt to minimize how "bulky" controllers can't get. In my opinion though, MVVM is trying to solve a problem while creating another. Yes controllers have reduced code, but it doesn't really solve the composition problem. ViewModels are largely not reusable so you end up having 2x source files and a lot of duplicate code occurring in each ViewModel. MVC overall is still a solid approach but there is lack of understanding of how to implement it correctly as of late. Breaking you logic up into separate pieces will largely solve the "massive" controller problem. Create a separate classes for your Networking, tableView datasource, date formatting, sorting, other data manipulation, and anything else. This allows flexibility since these classes can now be reused by all who needs them and the responsibility of what each class does is much clearer.
Thank you!
[Here's a link](https://github.com/jozemite/Snowfall/tree/master/Snowfall) to my app's Github; you can see the folders I have. Although I see some of my files are in the wrong folders here, but not in Xcode they're not.
The is a really high quality well thought out post! We need more content like this.
Xcode 8.3 does not ship the 3.0 toolchain. Do you have the source to the libraries you're using? Swift 3.1 is source compatible with 3.0.
Has anybody had success with URLSession on Linux? It's very hit or miss for me... an identical request might sometimes succeed and other times fail with `the operation could not be completed`. Impossible to debug :/ Also, I wonder why they haven't yet implemented the `shared` session? It's usually much more convenient to use that vs creating a custom session.
Yes, to partial-equality indeed is one of those few cases where being correct doesn't really give you much benefit in the real world. One of the reasons I wrote up a proposal (to check if my argument is water-tight to begin with), but didn't submit a draft to Swift-Evolution. I'd argue that it's still worth knowing how `NaN` is a thread to safety in Swift and being aware that without `PartiallyEquatable` one ends up having to do the checks oneself. Thanks for your comment!
Having the same issue any luck?
That's an awesome looking app! Nice job. Any particular reason why you have messages as a separate node? I'm relatively new to back-end structure so I'm genuinely curious - as you can see I have messages as a subnode of each room.
nice man! I almost finished my personal portfolio website using Vapor. Been distracted with other projects since Nov. ugh! excited to check this project out! 
We don't have pagination yet so retrieving the list of the groups would have been much more longer with all the messages in the group.
Does it remove all middleware in Vapor 2?
It isn't the same effect. If I have a library that is widely used and need to, for whatever reason, update the implementation in a way that this state or setter is no longer needed, I can deprecate a setter and make it do nothing without the risk of breaking code of others. Ultimately, it was probably poor API design from the get go, but a public variable is not the same as public getters and setters. 
As fast as they have been before
Can you check and see if the libraries either (1) offer the source, or (2) offer a separate `swift-3.1` development branch in their repository you can checkout?
I solved it.
Next time post the error message as well. 
I put it in the OP, if anyone googles it hopefully this helps them :)
I've now got a shit tonne of warnings for my pods. Presuming cause of 3.1.
Glad I could help:)
This looks interesting. I don't know where I'd start with this but I'm certainly interested. I'll have a closer look at the codebase soon.
I have a school project (I have already graduated) that I want to refactor, but I don't have time to work on it as much I want to. If you are interested I can send you the details and add you to the repo. We can discuss more in PM's.
https://itunes.apple.com/us/app/sudoku-super-easy-4-x-4-grid-kidoku/id1212032380?mt=8 
keep my name out ya mouth OP, or i'll be back
https://itunes.apple.com/us/app/tappy-me/id829801706?ls=1&amp;mt=8 Waiting for appstore to approve swift version update
too late look at your activity monitor i am eternal
This may well be a real problem but I think it only affects bitcode and not the binary itself?
Unfortunately they do not yet have new branches, but I do have access to the source. Edit, unfortunately Carthage doesn't bring down the source for SwiftyJSON, it just downloads a binary which is compiled with 3.0.2
About six hours after upgrading, Xcode won't deploy an app I've been deploying several times a day for months to a sim or a device. I called it a day and shutdown before investigating much, but it sure was not encouraging.
I'm struggling with Swift making puzzle game on iOS and WatchOS. Bugs in SpriteKit and other things make me crazy. But there's always workaround :) I know "Don't reinvent the wheel", but I'm reinventing all things... Yes, it's my worst mistake but good experience for me. Here's my recent work and it is almost done. https://youtu.be/DFZ5C4NOyTc
It's based of his book, then I don't agree with the price. Just use Paul's book. It's cheaper. 
In the first error, looks like you're calling an instance method from the class which is not right because the method you called is not a class function. 
How much does Paul's book cost?
Swift compiler is still very buggy, it fails to compile my project with some cryptic errors. Maybe 8.3.1 will be better.
This course is on discount always . Anybody can buy it at $10 !
Yea something got reset or fixed concerning subprojects. I used to have a framework subproject in my workspace, the warning would always be disabled for that sub project no matter what, not sure if because of some settings on that project or in xcode, or because of a bug, but it looks like xcode will now throw proper warning at you for subprojects.
I'm a big fan of server side swift and Vapor is my favourite of the big ones, but is there much point benchmarking on macOS?
Hope springs eternal eh?
I'm seeing improvements in compile time. Went from ~ 3.5 minutes to ~1.5 minutes. SourceKit stability increased a lot. Jump to definition is much faster. SourceKit breaking syntax highlight / autocomplete still happens but recovery is much much faster. 1-2 seconds vs a couple of minutes. Xcode 8.2 was a nightmare for me. It was almost impossible to write code while getting syntax highlight and autocomplete, these would break as soon as I started writing any code. Personally I'm very happy with this release. 
Usually both. The reason is that network calls to Firebase can take a long time to complete. So if every time you needed an object you decided to fetch it from Firebase, your app would probably slow to a crawl. So usually, you grab the database object once and use the data you retrieved to instantiate a new object from that data. That way your object is stored in memory which can be accessed super quickly. Additionally, the code you would write if you were retrieving from the database every time would probably be bloated and filled with callbacks, which is usually a code smell. EDIT: The other thing I forgot to mention is the fundamental difference between storing in memory vs. storing in a database like Firebase. Storing something as an object in memory is ephemeral. When you close the app, that data will be gone. However if the data is stored in a database like Firebase, that storage is permanent and independent from your app. If you close, or even delete, your app, the data will remain in the database. So you usually store things in a database that need to persist from one instance of the app to another. But certain data which is relevant only to the current app session (like the current logged in user) should not be stored in a database and only stored in memory
This is a refresh to a previous version of the tutorial. Swift supports the idea of "mutation when you need it" but a lot of code can be made more testable and clear using functional techniques. Definitely a tool you want to have in your toolbox. :]
It crashes every 10 - 20 seconds for me
Not to mention it's more ethical. This is just a big bucket of borderline. Based on /u/twostraws book, but not getting him any money! Taught at Udemy by a person who doesn't have the same name as this person promoting it, so... what? For referral money? $175 but it's never actually $175, it's $10 but we'll say $175 so you think you're getting a deal even though nobody ever pays that. You should at least charge $40 so you can give every person a copy of Paul's book and pay him his $30. After all, he worked up the sequence and material just being barfed back up in a new medium. That wouldn't make up for standing on his shoulders and claiming that you're tall, but at least it would be something.
To be fair, if that was really the case you'd still be using xcode 4
Makes sense. I just don't agree with the base price of $175, especially when his material is based off a book. I would understand if the material wasn't derived from a book and was only in the videos. 
Haha, funny story, for me Xcode 4 was one of the worst, it had a crippling bug that caused it to crash repeatedly when working on a project that was under SVN and the SVN server had a self-signed SSL certificate. I had to disable version control integration completely, but that wasn't an issue because I was using an external tool to handle that anyway. But as for Xcode 8.3, the bugs and sluggishness will keep me from upgrading. Xcode 8.2.1 is slow and buggy as well, but I apply "the devil you know..." mantra for the time being. I've been developing for iOS since iOS 2.2, so being an early adopter bit me more times than I care to remember.
You need to get a Mac programming book. Your question is analogous to somebody trying to drive saying "what's a gas pedal?" I could tell you, but your question points out that your knowledge is way too lacking to actually create an app. The only up-to-date macOS programming book I know of is from hackingwithswift. I suggest checking it out: https://www.hackingwithswift.com/store/hacking-with-macos
I did Caleb's Sketch course. I liked it. What's an "AMA"?
Thanks, Bodiam!
Send me a PM I'm interested 
That worked :)
As I haven't learned swift basics would you say starting functional is a good approach?
As in many of the examples shown in this article, Apple's built-in routines use some functional programming, so it's not a terrible idea to know a little bit about what's going with mutability and immutability.
I am just a beginning student in Swift, but I pick up problems very easily. I am currently working on a project of my own, but this intrigues me and I am at least willing to take a look at it. 
Save the last date (yyyy.mm.dd only) in user defaults and compare to the current date. If different then calculate and save again. If same, do nothing.
We have tracked down our issue to be Dictionary literals with Xcode 10.3 and Swift 3.1. New Swift bug: https://bugs.swift.org/browse/SR-4430
Thanks for the find. I hope Google fixes this soon as it's very annoying and hard to determine actual warnings from junk like this.
Encode the array as JSON or using `NSKeyedArchiver`?
Perfect answer, thanks!
You must not know the Udemy trick...sign up, watch the intro, then wait a week or two and you'll get an email about it being 95% off. 
As far as I know (which may not be much) enabling Facebook on firebase is required just like all other login methods. In terms of staying logged in/logging back in I'm not sure if it even goes back and looks if it's enabled. But either way it needs to be enabled for it to happen once so you wouldn't want to disable it anyway. I'm not sure if I'm completely understanding your question but hopefully this helps a little bit!
It makes sense but like I said I have no problem using Facebook to sign up, without having it enabled on Firebase. I haven't tried logging in (at this point in testing I just sign up every time I want to get in the app), so that's where I'm wondering if the Facebook auth in Firebase comes in.
Swift isn't really a functional language. All the iOS APIs are clearly OO, not FP, so even those of us on the FP bandwagon are still generally writing OO with a smattering of FP techniques where appropriate. That FP stuff is totally optional, and you don't need any of it as a beginner. However as you get more experienced, you'll find that many of the FP techniques from this article make certain pieces your code significantly cleaner, safer, and more concise.
I'm taking a quick look through the Firebase docs, if you go into your console, click on authentication and then say click and open the Facebook method, there's a learn more tab with a how it works section that may provide you with the information I think you're looking for if you haven't looked there yet. I think that's the best I can offer at this point.
How so? IT all depends on one'e vision, age, and screen resolution setting, along with comfort. First thing in the morning my eyes on my 13" MBP are fine by the end of the evening I'm done. Been looking at Dell Ultra sharp Monitors on eBay because a friend has one and it's night and day. 
You can use the `-Xfrontend -debug-time-function-bodies` flags. Just add them to Other Swift Flags in the Xcode build options. Then build your app, go to build logs, click on the latest build, right click on the build phase and click on Expand all transcripts. You will then find the build time for every single function. [More detailed instructions here](https://thatthinginswift.com/debug-long-compile-times-swift/) In most cases long compile times come from long mathematical expressions or long chains of map, flatMap and filter operations on arrays, as type inference for those expressions has exponential complexity.
I'm fairly new as well so I totally get it, Google usually has fantastic docs, especially with Firebase. And no problem, best of luck! 
This. IIRC, popular keychain library Locksmith also uses NSKeyedArchiver.
I might be tripping, but did you mix up the VM and VC in your first sentence?
What on earth are you building that takes 2 minutes to compile......
This would be my answer as well.
I use a 12" MacBook to tinker around with swift. It works great for me, but obviously for bigger projects I would look into a MacBook Pro.
all current macs have plenty of power for swift development, you have nothing to worry about I use a macbook 2016 (non pro) when i am at conferences and the compile times are not bad at all compared to my main machine (imac 5k 2015), i just miss the three 27" screens.
Run of the mill project. About 50K lines of Swift code.
&gt;I've decided on the 13'' rather than the 15'' I would actually spend the money on the 15. I can't stand working on a smaller screen, personally. Other than that you have 2 choices for RAM on the pro now, 8 or 16 and I would go 16. Other than that I would get the larger hard drive if you can afford it. Also note you can get an older version sans bar as well. Other threads on this has other advice: https://www.reddit.com/r/swift/search?q=MacBook&amp;restrict_sr=on&amp;sort=relevance&amp;t=all
Get a refurb 2015 rMBP instead. Something like this: https://www.amazon.com/Apple-MJLQ2LL-15-4-Inch-Certified-Refurbished/dp/B01B1YT6LM I have a 2012 rMBP which is still running quite well and at this point I just don't see where I can go next. The price of these new MBPs, especially here in Canada, is just insane. About $600 more than I paid for the equivalent model. Tough pill to swallow.
Singh did, in his Medium article 
Ohhhh I thought name dropping meant something else, like bad mouthed. 
is the baseline processor ok?
This is incredibly serendipitous because I was just looking to learn some review system implementations... Lo and behold it is much simpler than I thought! Coming from a beginner Java background I am finding Swift / XCode to be fantastic. The features and API's included make everything so easy!
You would use firebase uid to log back in even if you using Facebook to authenticate with firebase 
So... what does it do?
I mean... macOS would really benefit much from a touchscreen IMO, and most laptops don't really benefit. Plus we already have a kickass touchpad. Maybe replacing a row of keys wasn't the best idea... but we'll see how it turns out
Not sure what to think of this TBH. I thought KVO was on the way out (has been). Seems like more of a Foundation item than a language thing. Could be way off base here.
You are encountering issues which are very common when one reuses cells which have similar but different formats depending on some data item(s). The key is to set/clear _everything_ for each different format. To illustrate what I mean, I'll use your table view code, but I believe you have similar problems with the collection view. btw, please don't post pictures of code; put the code right inline in your question. If your code were in your question, I could cut and paste it, but now I have to type it all out, and I'll probably make a mistake. See formatting help for how to put code inline. if indexPath.row &gt; 0 { cell.nameLabel.text = &lt;something I'm too lazy to type&gt; collectionView.tableViewLabel = nameLabels[indexPath.row - 1] } else { cell.nameLabel.isHidden = true } What happens when you use a cell for row 0, then reuse that same cell for row 72? Well, when used for row 0 the name label gets hidden, but there's nothing which sets the name label _unhidden_ for row 72. OTOH, what happens when a cell is used for row 72, then reused for cell 0. In this case, the collectionView.tableViewLabel gets set to something for row 72, but when used for row 0, the tableViewLabel isn't set to anything, so it retains its value from row 72, which clearly can't be right. You need to do a reload data on your collection view from within the table view's cellForRow, because you are changing the source of the data for the collection view's data source. edited to fix formatting and add advice on collection view.
Well I did my small(1-200 hours of work in solo) university projects with a 11 inch 2015 MacBook Air with 4GB RAM and 128GB SSD and it was perfectly fine for that. Landed a job for my thesis now and working on a bigger project and it's still bearable (obviously there are some problems but I can still work with it) but the company is getting the new employees new 13 inch 2016 MacBook Pros with 16GB RAM (still like 2 weeks left till they arrive). So if you plan on only using your own machine in the future then go for 16GB RAM and 256 or 512GB SSD. If you get hired, they will get you one that they think is sufficient for the job.
Have you tried implementing prepareForReuese on the table view cell and then collectionView.collectionViewlayout.invalidateLayout
This could make ORMs easier to make, and make them more pretty and typesafe to work with. And don't we all need to work with an ORM from time to time? 
Maybe, Apple does not follow what everyone else is doing obviously. I've seen locally at user groups where people are using older macs and dual booting in to linux. Now thats programmers only. The people I know that are using macs for development are NOT running and buying the latest and greatest, They stick with the older models because they work 
Without using any external libs, you can compress in MP4 using AVAsset​Export​Session. You basically just have to copy paste this code (will take you 5 mins) : http://stackoverflow.com/questions/39657639/compress-video-and-images-before-uploading-to-server More info here (Objective-C) : http://stackoverflow.com/questions/11751883/how-can-i-reduce-the-file-size-of-a-video-created-with-uiimagepickercontroller/11819382#11819382 Official doc here : https://developer.apple.com/reference/avfoundation/avassetexportsession
&gt; http://stackoverflow.com/questions/39657639/compress-video-and-images-before-uploading-to-server Hey: I appreciate the replies, man. I'm just heading to work now but would you be available at some point this weekend to implement this into my code if I sent it to you? I would pay you the $30 USD as well. Just let me know and I can send over the code later on. Cheers.
Do you have your code on github or anything ?
Your website navigation doesn't work on my phone browser. 99 bucks a month for git push? Care to explain that one? All links hash tags? What is this? Seems sketchy. I'm reporting. Seems like this was a fake blast for ad revenue. 
The biggest ORM-esque thing most of us work with is JSON object mappers. Using key paths to define object→JSON mappings is so much easier than mapping it by hand!
As long as they still work with strings. I don't really see the point in "type safe" KVC. Quite often you are getting your keyPaths not from your program but from external files or data sources. I have a great little class that is pretty much a full on JSON-&gt;Object-&gt;SQLite active record thing. It completely depends on being able to do KVC based on querying the structure of the database. So for instance: -(NSDictionary*)primaryKeyValues { return [self dictionaryWithValuesForKeys:[[self class]primaryKeyColumnNames]]; } which depends on +(NSArray*)primaryKeyColumns { NSMutableDictionary* schema = self.schema; NSArray* primaryKeyColumns = schema[@"PrimaryKeyColumns"]; if(!primaryKeyColumns) { NSArray* columns = [self columns]; NSMutableArray* pks = [NSMutableArray arrayWithCapacity:[columns count]]; for (NSDictionary* obj in [self columns]) { if([obj[@"pk"]boolValue]) { [pks addObject:obj]; } } primaryKeyColumns = pks; schema[@"PrimaryKeyColumns"] = primaryKeyColumns; } return primaryKeyColumns; } which ultimately depends on [db schemaForTable:[self tablename]] and so I can map from database column names to object properties There is also the consumption of JSON: +(instancetype)fromJsonDictionary:(NSDictionary*)items { NSArray* pkNames = [self primaryKeyColumnNames]; NSDictionary* keys = [items dictionaryWithValuesForKeys:pkNames]; id object = [self find:keys]; if(!object) { // object is not persistent - do not make it so object = [self new]; [object setValuesForKeysWithDictionary:items]; return object; } // if object was persistent - save update [object setValuesForKeysWithDictionary:items]; [object save]; return object; } which ensures I update the correct record in the database - again because I can find out what the database thinks are the primary keys, do queries on that, etc... KVC saves me hundreds of hours writing monkey code. OTOH, typed KVC is pointless because if I can generate the type expressions in code, then I can just call the accessors. 
I don't see anything "wrong" with that code. It may be done differently but in essence it would be the same. For each line, check if words are contained in line. No matter if you use map, filter, reduce, regex or whatever, at the end it's all the same logical steps. For each line, check if words are contained in line.
Simple improvement: for sentence in page { for name in names where sentence.contains(name) { //do stuff regarding name } } Probably unnecessarily fancy version: let matchingNames = names.filter { name in page.contains { sentence in sentence.contains(name) } } (read that as "the matching names are the names such that the page contains a sentence containing the name") Silly and inefficient but very concise version let matchingNames = names.filter { page.reduce("", +).contains($0) } (read as "the matching names are the names contained in the concatenation of the sentences in the page")
 for sentence in page { for name in names where sentence.contains(name) { //do stuff regarding name } } That is perfect!, given how most of these scenarios in swift feel "cleaner" I knew I was at least one nest too deep. Thanks for the help!
[git repo](https://github.com/kingreza/Swift-Boids)
Woah slow down big spender! 
Then what do they use then?
Yup, UES! You?
cool, same here..:work in Chelsea though. Your app looks cool. How is it different from Periscope?
Not what my sources say. You're free to disagree but I have people who work at Apple and say otherwise. I'm going to trust them over some random on the internet. 
Yea I work in Dumbo. And keep in mind the app is still in its infancy, I'm not even pushing advertisements or anything yet. I just wanted to get the basic features out. More will be added to make it unique in its own right.
And here I had so much (misplaced) hope.
Yea... sorry for the bummer. Our codebase is fairly large. Not huge, but there's a lot of shared code between our iOS and Mac applications. But in Xcode 8.2, on this machine which is still running 10.11.6 for testing purposes, our project takes nearly 5 minutes to full build after a clean, and this is a release, not debug, so we're talking about all the optimization happening. This is on a 2012 retina MBP. It sounds like I'm going to need to upgrade this machine anyway, but based on what I've seen on other computers, it might shave 30 seconds off the build if we're lucky. Not sure I'd call that significant. Edit: The build time is for our Mac app. 
That's fine. I'm not lying to you, and obviously I have no way to prove that to you. I get it. But I also have no reason to lie to you either. Take it for what it is. But it's your choice whether you want to believe me or not. I'm not going to try to convince you if you don't believe me. It's just not worth it. 
Cool. Are you a developer professionally as well?
First two things I'd do: 1. Restart the simulator by quitting it and letting Xcode relaunch. 2. Reset the simulator: Simulator &gt; Reset Content and Settings in the menu. The error is procNotFound, which you can find by typing your error number in [here](https://www.osstatus.com/search/results?platform=all&amp;framework=all&amp;search=-600) Proc not found would probably be an error for xcode communicating with the simulator process. Restarting will probably fix it. 
They use it; it can depend on the team, on the product(s) they are working on &amp; can depend on the engineer (some folks are just *that* good with vim/emas hah). The thing is, what newbie swift jumpers don't always understand; most big places, including Apple are still doing objc, not swift. It's safer for a few key things: Xcode works wonderfully with it, one can refactor, you're not playing the swift catch-up/compiler bug/Xcode failure game, and swift isn't abi binary compliant yet. If you're building products one thing you desperately try to achieve is stability, with as low of costs as possible. There's always a lot of discussion on these topics, but if you listen to that Chris Lattner podcast from a few months back, I think he talks about some of this too.
I would imagine it depends upon the department. Compiler developers probably stay away from XCode. However app developers would likely be required to use the tools. If for nothing else internal app development with XCode would help with quality control. 
you can use a guard statement to make sure the input is non-nil and a valid integer guard let i = input, let newScore = Int(i) else { return } Now you can use the variable newScore (which is a valid integer constructed for the input string) in the rest of the function scope. Note I didn't try compiling this so minor tweaks may be needed. If you ever think you need to validate input or return early from a function think to use a guard statement!
Of course they use Xcode, but people at Apple (especially the Swift team, and other clang/LLVM/compiler nerds) can't actually use Swift. The Swift compiler is written in C++, so the people building Swift are mostly C++ developers. I think it's safe to say they use Xcode, but a lot of them don't write Swift as their primary language.
There are faster ways to search for matches in situations like this, but I cannot do them justice in a Reddit comment, certainly not from a mobile device. Briefly, though, for any “regular expression” (Google that if it is unfamiliar), you can construct an abstract “finite state machine” that searches for it. The effort of this construction may be worthwhile only when there is a lot of searching to do—many strings to search or very long strings to search. As an example, suppose you examine a character in the source string, and it is a `d`. Then you know it is part of a match only if the next character is `o` (in Frodo) or `a` (in Gandalf). If it is neither, then you can skip ahead three characters and start looking for a new match. Whatever character you see there will control what you do next. (If it is an `F`, `r`, `o`, `G`, `a`, or `n`, look back a bit to see if there is a complete match. If it is a `d`, proceed as above.) There are entire computer science courses studying these expressions and machines, along with other types of expressions and machines. They are hugely useful and important in general but might not be worth your time in simple, small, one-off situations. POSIX has regular expression routines, including a `regcomp` routine that compiles a regular expression into the machine or other prepared construction, and a `regexec` that executes the machine (searches for the regular expression). These routines or similar routines may be available on other platforms as well.
If you decide to port GIMP. I'd love to see the Seashore project get some love. http://seashore.sourceforge.net/The_Seashore_Project/About.html It doesn't work on MacOS 10.12
I've had to use `default` a few times, but otherwise try to avoid it because it looks pretty confusing in code. 
*looks at calendar*
Here you go: class Score { // making it fileprivate(set) means it can only be updated using the setScore func fileprivate(set) var score: Int = 0 func setScore(input: String?) { // make sure the input is not nil and unwrap it in the process guard let input = input else { return } // convert the string to an Int. This will return nil if fails so guard ensures that it is a valid string guard let i = Int(input) else { return } // make sure the value is greater than or equal to 0 guard i &gt;= 0 else { return } // if passes all above guard statements set score to i score = i } } let s = Score() s.setScore(input: "1") print(s.score) // output 1 s.setScore(input: "Foo") print(s.score) // output 1 s.setScore(input: "10") print(s.score) // output 10 If you're going to be using Swift a lot then I'd recommend doing some tutorials. The basics are very easy to pick up and it's all there on youtube.
"Provably" lol
Multiple people in thread have said this is 5 minutes work. I did not imply that this was little or lots of money anywhere in this thread - just trying to make it right for any kind souls out there willing to spare their time.
Thanks for the info! 
Appreciate the insight and taking the time to help me out. Learned something. I see that you also help many others and I realize this post was probably very basic for you but I am grateful for your help. I know it's not much but hope you enjoy a little gold. Will keep practicing. 
Check the calendar
Thanks for the quick reply. Will keep onward with your books!
The name isn't is paramount to this feature.
Hey i already had two upvotes 😑 – whoever was so kind to downvote this, thank you very much. It's not that i'm not trying to do it myself... I'm currently following [this tutorial](http://www.swiftprogrammer.info/swift_call_cpp.html) and am working on implementing the .cpp file in Swift. But of course i got some compiler errors... 
I guess techically March is over as of today. But I'm working on my second kids learning apps. It is called My Kid's Firsts, it will feature abcs, numbers, shapes, colors, etc... Trying to focus on Parents actually using the app as a teaching tool for the kids, instead of some game you just hand the phone to your kid and hope they pick it up on their own... I'm a Beginner developer though, learning SpriteKit right now so I can incorporate it into this next app. My first app is a sight words app, I made to help teach my child sight words. If you are interested, I can give the link, or you can look up my username on twitter/facebook. I'm not sure what the rules area for marketing on reddit. Anyways, I would love to meet some new developers that want to trade services, like help with marketing, app testings, or feedback on an app. My stats from the App Store with my first app Rainbow Words are fairly low, but I think of it as a learning experience and I think it has been fun. I look forward to keeping at it and building up a following and growing. Hit me up if you are like minded or interested in establishing a partnership. Happy coding and good luck to all!!!
Wow, photos of a Swift truck that's *not* the cause of an accident. 
You nave to create a work item instance. You can call cancel on that instance. let item = DispatchWorkItem { // do stuff } item.cancel() 
I always get a feeling of sudden procrastination when it's time to work with Strings and ranges. It's the least fun thing I've encountered in Swift. My other gripe is working with pointers, but that's at least kind of interesting. Other than that I'm really enjoying Swift. I'm glad I made the switch at work. 
to create an instance
Maybe these are for the people who may forget the initialisation parenthesis and assign a type to a variable instead of an instance? ¯\\\_(ツ)\_/¯ 
I'm running a maxed out 2015 MBP. There are a couple of things that improved cumulatively increased compile time by ~50 percent for me: - turn on whole module optimization - use a tool that points out files that are compiled multiple times and optimize those ( i had a bunch of files that were compiled 200+ times) - change the c compiler the project uses to "default" Hope it helps you. And if you want to be a real hipster build a super powerful hackintosh, I bet you can get MUCH better results than on a mac pro. AFAIK mac pro isn't all that great at swift compilation
It's probably also because it can be hard for a human to quickly see what type a large, multi-line dictionary/array should have. (e.g. imagine you only read the first couple lines of an array that starts with `[0, 1, 2, ...`. You think it has type `[Int]` but later on there's actually `... 10.5, ...` so the type turns out to be `[Float]`)
On a more realistic note, does anybody else hate the c-style !, || and &amp;&amp; operators in Swift? I find it very east to miss a '!' while reading code or to forget it in my own code. And the latter two operators are just... old.
One of their developer explain he will do a mockup how it works. Not sure how this is useful as I came across this last year.
Currently (not on GitHub or anything) I am working on a project that helps to create programming languages. You turn the text in a token list then hand it to my project, then bam... it runs. E.g. print("Hello, World") You then parse it to [id: 'print'] [str: 'Hello, World'] [newline] Then hand it to the class... [id: 'print'] `-- [str: 'Hello, World'] My project will then either compile this node tree to swift or native code, or it may run interpreted code. It will (by the time it's done) be able to create some type of byte code.
The site's layout is the biggest joke.
Just to be consistent with everything else. You wouldn't write `let string = String()` Instead you would write `let string: String = ""`. (You don't need type annotation for String, but that's how you annotate things if you have to.) So to be consistent everywhere in your code, the same is preferred here. There is no technical reason why one is better than the other, but it's important to write code consistently, so other people can read it without thinking about it.
Oh, the angry robot emoji. Scary. TIL about the Elvis emoji used in Kotlin ?:
I think the abhorrent compile times for inferred types in nested collections was fixed in Swift 3. 
It was just a simple conversion/typecast error... 😬 For some reason i could return the free VRAM via an integer while the total VRAM was a float. So i simply converted the float inside the C++ function to an integer – and problem solved :-) I just feel a little bit lost, as i can mostly copy and paste (c++) code and modify basic things. But when it comes to things like: How do i get a c++ string (char?) to Swift? What if i need multiple return values from one c++ function – can i use an array, or a tuple? What if i need to transfer an object or struct? How do i declare all this stuff in the bridging header, .cpp file etc. There are so many things you have to look out for when you want to transfer data between c/c++ code and Swift. I guess it wouldn't hurt to learn the basics of c/c++. I have found some links to specific solutions on stackoverflow, but i would rather like to watch a tutorial that covers the whole c/c++ function + variables conversion topic. Or a book – but what i've found is only how to combine Objective-C and C/C++. With no prior c/c++ experience it's hard to grasp all of this. Swift feels so comfortable compared to how you work with variable types in c/c++. 
Swift is a bit weird with that. `&amp;&amp;`, a `,` and `where` are three different ways to express basically the same thing.
Just in case someone is interested, here are the links to the site and the sub: https://kotlinlang.org https://www.reddit.com/r/Kotlin/ Happy coding :D
[Link to repo](https://github.com/kingreza/MengerSponge)
Kotlin is prettier, just like Swift. Look for yourself: https://yalantis.com/blog/kotlin-vs-java-syntax/
&gt; It was just a simple conversion/typecast error... 😬 Ah! Welcome to C 😅 &gt; I just feel a little bit lost, as i can mostly copy and paste (c++) code and modify basic things. Yep, that's how you start out. It gets much easier! &gt; But when it comes to things like: How do i get a c++ string (char?) to Swift? Well, a `std::string` can be thought of the same way as a Swift string, but without the crucial part: the reference counting of the underlying buffer. So if you try to call the `.c_str()` method on a `std::string`, then that string will get destroyed before the function exits. You have to copy it into a buffer that you explicitly `malloc`, return that buffer, and you'll have to `free` it from Swift. &gt; What if i need multiple return values from one c++ function – can i use an array, or a tuple? Well, C doesn't have tuples, and you can't return a C array from a function because it lives on the stack and will get torn down when the function returns. So the way people do this is through `out` parameters. void getValues(Foo *outFoo, Bar *outBar) { *outFoo = (Foo) { 0, bar }; *outBar = (Bar) { 4, 7 }; } Then you can call those from Swift like so: var foo = Foo() // default initialize to 0 var bar = Bar() // default initialize to 0 getValues(&amp;foo, &amp;bar) print(foo.bar) // prints 0 &gt; What if i need to transfer an object or struct? How do i declare all this stuff in the bridging header, .cpp file etc. You can only use structs you declare in a C/C++ header. I usually make two structs, one in C and one in Swift, and make the Swift one initialize from the C one. That way I can convert all the `char *`s before I need to use the data in Swift. &gt; There are so many things you have to look out for when you want to transfer data between c/c++ code and Swift. I guess it wouldn't hurt to learn the basics of c/c++. 100%, absolutely. You'll find a lot of parallels! &gt; With no prior c/c++ experience it's hard to grasp all of this. Swift feels so comfortable compared to how you work with variable types in c/c++. Yep. Swift's value types are really nice compared to C and C++. Not having to explicitly manage the memory makes them much better.
The Big Nerd Ranch 6th edition iOS book.
Take a look at the google maps API
Looks good to me, I've only looked the readme but it seemed like it was easy to use and I'll definitely think about using it in the future. The one thing I wondered from the readme was when you said the default duration is 5 seconds but you can dismiss with .dismiss() or whatever it is, can you in the creation of the notification specify the amount of time as a parameter? As I said, I've not used it so I'm not sure if it's there/would even be useful but I'd imagine it would just be a case of adding a TimeInterval? to the init, defaulting to 5 if nothing is passed so could be simple to implement if it's not already there. 
Have you checked out Scala? I'm a big fan.
Nice, forgot about .joined() :)
I'll put in my two cents and say that it will be time well spent, if you build a couple projects using the native NSURL libraries. It's a lot easier than you might imagine and you'll have a deeper understanding of how it all works. I still use third parties occasionally if time is an issue or there are requirement constraints, but I give it a good long thought before deciding to do so. 
I agree with this 
Timely post; just about to go into my first full day of work coding Kotlin for Android; marking the end of an 8 year iOS streak(!) Looking forward to having a change. I've been a long time fan of AppCode, so feel right at home with Android Studio, and seeing as JetBrains also develop Kotlin, the language support is first-class.
Kinda, but Kotlin is much much more similar to Java than JavaScript + React native are to Swift.
**Wow thanks for answering all my questions** – i was just thinking out loud! Didn't think someone would take the time to answer them. Thanks! I'll just have to go step by step with the c++ examples. If i find an interesting repo on github that's written in C or C++ i'll try to include that into my next Swift project. Since you have a lot of experience with Swift, C and C++ – can i ask you two more things? &amp;nbsp; **One easy question:** If i call C/C++ functions in Swift that need a lot of processing power (like Googles [brotli](https://github.com/matthewcheok/Brotli) compressor) **does the whole Swift conversion overhead slow down the computation a lot?** I know i could just test the original binary (from `brew install brotli`), compress a file and compare the time needed with that of the Swift wrapper. I'm just looking for a rough estimate, or if you have encountered cases where the Swift function execution was too slow to make sense even using them. &amp;nbsp; --- &amp;nbsp; **The other one is a little bit more complex** – but maybe not that hard for you to solve (**if you have the time to look into it of course!**). To keep it short, i love working with machine learning frameworks and have seen a lot of interesting projects that run on [Torch](http://torch.ch). But with a standard local torch installation you have to use the command line to process torch (lua) files and i would like to build an UI in XCode for some of these projects (like [neural style](https://github.com/jcjohnson/neural-style), Generative Adversarial Networks - like [Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks](https://junyanz.github.io/CycleGAN/) etc.). With nice parameter controls and live image output, maybe some small project management (save a plist, json or xml for already tested parameters). I've already written (messy) UIs for two projects, but here **Swift only calls bash background processes that execute torch**: http://i.imgur.com/h1paURX.jpg http://i.imgur.com/OMzK6Te.jpg &amp;nbsp; Someone has already uploaded a project on github that allows you to generate a **Torch Framework for Swift**, but the makefile only targets iOS, so you can't use the libraries on OSX. Here is the project: https://github.com/clementfarabet/torch-ios I've tried [reaching out to the author](https://github.com/clementfarabet/torch-ios/issues/25) and the [Google Group for Torch](https://groups.google.com/forum/#!topic/torch7/0GrRyUGWTgg) (i've posted the first thread over a year ago...), but didn't receive an answer on how to also compile the source files for an OSX framework. &amp;nbsp; --- **The framework gets build with this make script:** https://github.com/clementfarabet/torch-ios/blob/ios/generate_ios_framework I was thinking that i just need to change the architecture targets, but i am not completely sure if this would be the right way: The file begins with: XCODE_ROOT=`xcode-select -print-path` IPHONE_SDKVERSION=`xcodebuild -showsdks | grep iphoneos | egrep "[[:digit:]]+\.[[:digit:]]+" -o | tail -1` ARM_DEV_CMD="xcrun --sdk iphoneos" SIM_DEV_CMD="xcrun --sdk iphonesimulator" EXTRA_FLAGS="-miphoneos-version-min=6.0 -fembed-bitcode" &amp;nbsp; **I hope i am not oversimplifying this, but would it be enough to:** * Change the `grep iphoneos`to `grep macosx `? * Then `ARM_DEV_CMD="xcrun --sdk iphoneos"` to `X86_OSX_CMD="xcrun --sdk macosx"` * Change all occurrences of `ARM_DEV_CMD` to `X86_OSX_CMD`. * Uncomment `SIM_DEV_CMD`(since OSX has no simulator) and `EXTRA_FLAGS`. * Delete everything else that is only there for iOS (flags, architecture targets). --- &amp;nbsp; There are parts where the `x86_64` libraries also get build – they are only for OSX, or am i misinterpreting these lines? &amp;nbsp; echo "generating torch" generate_arch armv7 # &lt;-- delete generate_arch armv7s # &lt;-- delete generate_arch arm64 # &lt;-- delete generate_arch i386 # &lt;-- delete generate_arch x86_64 # &lt;-- keep 😁 echo "extracting archives and recombining" extract_recombine armv7 # &lt;-- delete extract_recombine armv7s # &lt;-- delete extract_recombine arm64 # &lt;-- delete extract_recombine i386 # &lt;-- delete extract_recombine x86_64 # &lt;-- keep 😁 echo "creating universal binary" lipo_libs &amp;nbsp; As you can see i would just delete all the library architecture targets, except for `x86_64`. &amp;nbsp; --- &amp;nbsp; #**Sorry if this question is too complex and out of scope of my original issue, but i thought it may look a lot clearer for someone with more OSX development experience!** &amp;nbsp; My guts just tell me that there is not that much that needs to be changed in the build script – since the header and source files from Torch haven't been modified for iOS – they are the same as the files from the original installer. &amp;nbsp; **I wonder why the developers haven't configured the Framework for iOS *and* OSX** – i guess it's not that much work to create a universal framework: http://colemancda.github.io/2015/02/11/universal-ios-osx-framework &amp;nbsp; **Thanks for reading and i hope i'm not asking for too much!**
Thanks for sharing!
So, to answer your first question, the extra issues you'll hit are if you improperly convert the data going in and coming out. When you call into C, then it does its thing completely independently, so it's running as fast as it can. But if you have a function in C that takes a `void *` of arbitrary data, and you copy data yourself into a buffer, then you'll hit the cost of the copy every time. But if you use things like `withUnsafeMutableBufferPointer`, then you can avoid extra copies. bytes.withUnsafeMutableBufferPointer { buf in my_cool_c_function(ptr.baseAddress, Int32(ptr.count)) } As for Torch, well, that's a huge question. I think you're on the right track but I have no idea how Torch is structured. My suggestion is just try it! 😅
So basically the same as 's Find My Friend app?
Nothing. Looking for inspiration...
Sure! That would look like this: int getmem(size_t *outMemFree, size_t *outMemTotal) { // blah blah CUDA_CALL(cudaMemGetInfo, outMemFree, outMemTotal); // blah blah return whateverYouWantToReturn; } You make two out-params, that need to be _pointers_ to `size_t`. To use it in Swift, just make local ints and pass them in with the `&amp;` operator. var memFree = 0 var memTotal = 0 get_mem(&amp;memFree, &amp;memTotal);
Nothing, I have school.. :/
Would be cool if it rendered a few iterations in front of it so it looked like it was a constant flow instead of it just appearing 
Don't crush imtherealwaffle's dreams of dominating the App Store! Its a good exercise regardless (as a beginner) to make something like this
The yearly Dallas Hackaton, HackDFW is near the end of April and I'm sharpening my skills learning as much as I can about making iOS apps that are not games, so right now I'm just working on an app that accesses a simple API for practice.
I think it's easier to use NSURLSession than learn how to integrate and use Alamofire. I would only use it if I needed a specific feature that it has that is hard to write myself. Doing basic requests with NSURLSession is simple and there are a ton of tutorials available.
Thanks! It took a while because i followed this tutorial: http://www.swiftprogrammer.info/swift_call_cpp.html which has an additional step to create a library file, then a class you need to access and that seems rather unintuitive ... NOW – with all that sweet knowledge 😎. I just took it as the first learning example (well, lucky me) but it made things more complicated than they should have been. I do get the idea of pointers, but the declaration part was a bit trickier because of the extra class "wrapper". But it works now! **Pointers are the perfect solution – i don't need any unnecessary intermediate variables that are just created because of the C++ function wrapping.** And i can query as many variables through a single function as i like! Now i only need to get rid of the unnecessary classes that the tutorial suggested... maybe it will come in handy in the future to know how to handle things with classes. But i don't have enough energy to learn about c++ classes today :-). --- &amp;nbsp; #**Thanks for all the help along the way!** I think i get the basics now and will just have to look up how to correctly declare certain value types so that i can transfer them over to Swift. **I love the moment when something clicks in your head and you're one step closer to your solution. Thanks!** &amp;nbsp; This is the output from my Console – now i can finally move on to the comfortable part in Swift! -------- Timer is @ 0 seconds -------- Old INEFFICIENT 😁 method: The free memory is: 328 The maximum memory is: 6144 Percentage free: 5 % -------- Dump the raw values from getGpuMem(&amp;memFree2, &amp;memTotal2): cudaMemGetInfo -&gt; size_t *free: - 343810048 cudaMemGetInfo -&gt; size_t *total: - 6442254336 cudaMemGetInfo -&gt; size_t *free in MB: - 327.0 cudaMemGetInfo -&gt; size_t *total in MB: - 6143.0 -------- Timer is @ 2 seconds -------- Old INEFFICIENT 😁 method: The free memory is: 328 The maximum memory is: 6144 Percentage free: 5 % -------- Dump the raw values from getGpuMem(&amp;memFree2, &amp;memTotal2): cudaMemGetInfo -&gt; size_t *free: - 343810048 cudaMemGetInfo -&gt; size_t *total: - 6442254336 cudaMemGetInfo -&gt; size_t *free in MB: - 327.0 cudaMemGetInfo -&gt; size_t *total in MB: - 6143.0
Doesn't the new Dropbox API require this for iOS? Edit: [yup](https://blogs.dropbox.com/developers/2015/05/try-out-swiftydropbox-the-new-swift-sdk-for-dropbox-api-v2/). Gross. 
Sure, whatever works for you is fine. On the flip side, I'd rather not have a huge framework added to my project to save a few lines here and there.
For sure, all good
Updating my [tennis scorekeeping app](https://itunes.apple.com/us/app/deuce-scorekeeper/id1189508962?mt=8) so that it's useful without an Apple Watch, and using Core Motion to have it tell you your number of forehands and backhands if you're wearing a Watch.
Doesn't CloudKit have this functionality?
Finally learning how to do this. Third time's the charm, right? I've got an app I want to build. A subscription manager for a web platform I'm also developing. I gave up on trying to hire a developer so I'm just learning it and building it myself. So far, it's fun and very challenging. I have a two-decade history with web application development so the concepts translate. It's just learning to translate what I know about web dev (PHP, mostly) to Xcode + Swift. So far, I've got a table that loads data from an array. Next up is pulling data from the REST API and populating tables, then building out table-based navigation, then wrapping the whole thing in tab bars to jump between sections of the app, then... you get the idea.
Yea that's annoying. I'm not sure if it's aliasing or the sub boxes not lining up correctly because of division precision points. 
I just started to look at SceneKit more seriously. This was a little weekend project I put together after I watched this video https://www.youtube.com/watch?v=8pj8_zjelDo What I really want to do with this Menger Sponge is give the user the ability to fly through it as deep as they want, and the app will tell you how many other people have explored the same parts you're exploring right now. (and if you're the first person, you can claim it as your own, leave a flag and a message etc etc). It would be cool art project 
Swift can make and keep it's mark because it's open source and backed by a high demand company/OS and ObjC is not really moving forward anymore, not to mention that Swift works with ObjC. I've heard of Kotlin and it looks interesting, but who's backing it and what platforms does it work on? Can it make use of Java code already out there? Where's the job market stand on this. More and more devs are looking at the job market as the mobile app market is hard to make money from.
&gt; I've heard of Kotlin and it looks interesting, but who's backing it JetBrains, creators of the famously popular 'IntelliJ' and (by extraction) the official 'Android Studio'. &gt; and what platforms does it work on? Anywhere Java runs. So, a few places then :-) &gt; Can it make use of Java code already out there? Yes. It's interop with Java is seamless; that was one of the main design goals. &gt; Where's the job market stand on this. More and more devs are looking at the job market as the mobile app market is hard to make money from. Interesting question. Technically, it's just as suited to back-end work as it is for mobile (and anywhere else for that matter - [JavaFX bindings](https://github.com/edvin/tornadofx) are maturing for desktop Apps). Here's an [adoption curve](https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/03/GitHub-Stats-1.gif) taken from Lines of Code in GitHub, which must be at least a rough indicator for how the job market is taking it... quite well by the look of things!
I'm running a Hackintosh but haven't submitted anything to the App Store. Any idea if the submission process is doable on a Hackintosh or should I use a real Mac to do it?
&gt; Kotlin Why didn't they make it native? I guess being compatible with Java means you can't be native. It's cool that it has some of Swift syntax in it, there'll be a market for iOS -&gt; Android transfers, and this would be a viable path for that.
Thank you, will look into this. Do you have any opinion on swift vs going the typical web dev route with HTML/CSS/JavaScript that everybody seems to recommend? 
Yeah, there shouldn't be any problem.
Sorry for raiding your thread but: Does anyone have any feedback on udemy.com courses? I bought one by Mark Price. It was great in the beginning but the further I go, the more lost I get. I feel like the teacher is basically saying "do as I do, I'll explain what it does later" but he never does. Should I invest in "Hacking with Swift" because right now it sounds like the greatest intro for beginners?
My new book, [Hacking with watchOS](https://www.hackingwithswift.com/store/hacking-with-watchos) is out tomorrow! Just doing one last read through now to make sure it's all correct. I'll also be announcing a new book shortly after; if you'd like more information you can [sign up to my free Swift newsletter](https://gumroad.com/twostraws/). I announced my [free lifetime update policy](https://www.hackingwithswift.com/update-policy) last month, and I've had lots of positive feedback from readers. I already announced my [Swift Frequent Flyer club](https://www.hackingwithswift.com/frequent-flyer), so now I'm looking for more ways to give readers more than they expected :) I'm thinking of running a survey asking readers what they'd like to see next. I have no shortage of ideas, but obviously it's important to hear what people want – let me know! (PS: If you didn't already download my [free 75-minute Natural Swift video](https://gumroad.com/l/natural-swift), you should!)
You should explain what that ruby code does... 
You can use an enum with a String raw value. enum Strings: String { case string_element } print(Strings.string_element.rawValue) // "string_element" But it's not really the same. Swift (currently) lacks the dynamicism that Ruby (or Objective-C) has, so there's no way to convert strings into "variables".
That's a cool idea! Sounds like a bit of a nasty data structure for storing the player data though... I imagine the number of spots becomes extremely large fast
I would recommend it since the data set could get large. Plus using database provides optimized queries. Also having a server to to provide backend opens up future possiblity of other platform. If you used cloudkit it would limit your application to iOS I'm assuming. But again I've never dealt with it so idk. This just sounds like a very standard client server architecture 
Not OP, but a symbol is a different string type, mostly used semantically for hash keys, and options to pass to methods. They do not compare equally to strings of the same value. `'string_element' != :string_element`. The main difference is that symbols are immutable. It's essentially a literal, for all intense and purposes.
You're likely looking to define an enum or static constant string
Edited, you can check it now.
The way I've done it before is write the 2d array out to a string and save it that way on cloudkit. Then when you read it back into the app you convert it back to the 2d array.
given the property is `element_type`, i'm guessing he/she is using them as an enum or something. I've done that for sure with models for db records in rails apps.
&gt; This is for a programming language I am making, I know how to convert the code to a list of tokens with a custom node class, but I want to be a able to see whether a token is a function, string, number, etc. Given the last part of that sentence, I think what you need is reflection. Found this when searching on the subject: http://stackoverflow.com/documentation/swift/1201/reflection#t=20170403144614865444
Obviously it's a proof of concept rather than an optimized, market-ready project. This seems to be an issue that comes up with many visual implementations of fractals based simply on the definition of the format it is presented in. The pixel is a blessing and a curse. 
worked with it for three years within a company, will never ever use it again
* Focused on the French market * Only operates from 8pm to 6am
Thanks so much! 
It still looks terrible. Use 4 spaces to format it as code and enter twice to make a new line.
I highly doubt it. You'd need to actually make the API calls in the source code of the app you want to use it in. There might be a way around it that i haven't heard of. You could maybe look into BetterTouchTool to try and extend it somehow? 
Nope, the app is sandboxed so you can't add in your own components. If you wanted to inject code and distribute, you could do so (though it might take objc knowledge) but it would require SIP disabled and you couldn't do it via the Mac App Store; so that's probably not something you're interested in. 
Oh my god, Scala looks so nice too! Gonna keep an eye on it.
Before building [Set](https://www.set.gl) we were working on a social app with some related requirements. One thing that could be interesting for you is to explore using Firebase or [deepstreamhub](https://deepstreamhub.com/) as the backend for moving locations around quickly
You could try out Pubnub which also has a [tutorial ](https://www.google.com/amp/s/www.pubnub.com/blog/2015-05-05-getting-started-ios-location-tracking-and-streaming-w-swift-programming-language/amp/) on how to use their API with swift. 
I don't believe this is entirely correct. I don't believe an app has to be sandboxed to use the Touch Bar APIs. I believe they do require a provisioning profile though. 
I assumed the third-party app was a Mac App Store app. If it isn't, then it might be possible without disabling SIP, but code would still have to be injected (and that's getting into jailbreak-tweak-level hackiness)
The idea is to make a simple app for organizing meet ups. This part is pretty critical.
Oracle is no longer releasing updates to Java, and has thrown their weight behind Kotlin?!
True, this explains "Why Kotlin over Java?", but not "Why Kotlin over ___?" Many languages are prettier than Java. Many languages are less verbose than Java. Many of them even run on the JVM. Kotlin is very young. If you're committed to the JVM, why not at least pick one of the mature options?
It's pretty small as far as framework goes, not sure what's your definition of a small framework is... Why waste the time to implement your own response serializer and that kind of stuff you will need anyway if you're creating any kind of serious app when there is already a library thats more than likely doing it better than you, updated faster than yours and tested by more people than yours? Stop being a dumb hipster.
Because people are too retarded to use a dependency manager and like to act like hipsters when it comes to their code.
It is quite large in my opinion and I'd prefer to use the most tested framework in Swift, URLSession. I don't really see the problem that it solves since they deprecated NSURLConnection. I fail to see how Alamofire is much more convenient than URLSession, for a basic REST call you have to set your httpMethod, url end point, httpBody data, and fill out the completion block with data returned. How is that wasting time? All the same things need to done with Alamofire. You also don't need worry about sweeping changes to how the entire framework works, ala Alamofire 3 -&gt; 4.
User defaults is fine if your dictionary isnt too big and doesn't need lots of editing. 
I just upgraded [calorious](http://calorio.us) to swift 3. Not too bad... 
- writing a book about ReactiveSwift and ReactiveCocoa; - submitting PRs to mapbox;
[removed]
This calendar lib is awesome! Thank you for making it!
It might not disappear, but its quality might degrade. And (this is only the case for Swift developers) you need to allow some time for the framework to be updated to the newest release of the language. I also prefer to know what's happening in each line of my app, and additional layers of abstraction tend to obscure it. On top of that, in that particular case, NSURLSession isn't that bad, really. That said, I sometimes tend to use Alamofire (or even Moya, or third party frameworks for other things) to quickly mock up an app, but for production apps I prefer going with the least third-party dependencies possible. Another aspect Alamofire (or most third-party frameworks for that matter) helps is to get beginners going. But I'd advise against going for the "now I import Alamofire, use this here method, BOOM magic happens and voila, request done!" attitude. Once you understand how HTTP requests work in Alamofire, try to understand how they work without it.
I'll still use Rx frameworks, cause I'm not planning to implement my own way of reactive programming anytime soon. Or Lottie for AE animations. Or many other things. But as /u/RollingGoron wrote, I don't need to import a pretty large dependency to make a simple network call.
Like?
Hi mildlycustard! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/63d9ki/creating_clickthrough_applications_that_are/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Mostly submission/comment/username filtering
Take a special kind of idiot to rate libraries. That's like saying top 5 tools: 1) Hammer 2) Screwdriver 3) Calipers etc.
The article is more of a self-reflection about scripting in Swift than a showcasing of a perfect Web Crawler solution. It just happened that I needed a quick crawler so I gave Swift a go (see what I did here? :D ). I've personally written (and used) a much more powerful/smart one in Javascript but, again, this is not the focus/aim of the article. Anyway, thanks for sharing! :D
No need to insult, we just want to promote work from other developers and give insight on some not so popular libraries. This is not a competition, this is just a list. :]
Thanks for posting! I didn't know some of these libraries existed! Will be definitely using them in my projects!
Thank you!
Thank you!
I did...
That's a tall order if you're just beginning. Start small. Learn how to use Mapkit, learn about core location and how to use a core location object and mapkit together. 
Thanks for posting these! 
🙏
I'm pretty new to Xcode, so probably, ha.
I'm working on a library that helps you create your UI Programmatically, by turning the interface you made in Interface Builder into Swift 3 code (I mean, it generates the corresponding code and writes into the console). For now, it recreates the hierarchy, and the auto layout constraints, which is already saving a lot of time, and it extracts a few properties like background colors. It's in Beta and I would like some feedback. https://github.com/xdaleau/IBToCode
I'm writing yet another twitter client for macOS:)
Great post. Thank you for sharing this.
MongoKitten 4 and Meow 1.0. MongoKitten 4 is going to make it the fastest MongoDB Client and will give it an amazing API (especially compared to MongoKitten 3). Meow will be a library based on MongoKitten and Sourcery, allowing people to create models without boilerplate code which work really intuitively thanks to MongoDB's recursive JSON-like structure.
Thanks! 
This is great! I just started using some of these libraries and they look fantastic in my app! Thanks!
Omg you're the best. Thanks so much 
Thanks for the feedback! I'll definitely add a gif or a few screenshots. It's quite a simple idea but it's hard to explain in a few words when your aren't a native speaker. 
Working on a better alarm clock app. Unfortunately Apple doesn't expose some of the functionality the system app uses. 
This is far from a dismantling. His argument seems to boil down to "Scala is hard, and it has to be true because This Guy I Know^(TM) has a PhD and he said it was." &gt;organizations are consistently just as successful at producing working software with dynamically typed languages. This is not a reason to dismiss new ideas. Orginazations are successful at producing working code with Objective-C, but that's not a good reason to dismiss Swift. Heck, why aren't we all still writing assembly? Scala might not be for you, but that doesn't mean it's not worth looking into as an alternative to Kotlin. 
Working on my new app: 📊 **InstaMetrics**, the best app to show your Instagram stats. Fully created with **Clean Architecture**. It helped me to *reuse different layers* and create also the macOS app just creating a framework (sharing the same code across cocoa and cocoa touch) **iOS app: [https://itunes.apple.com/us/app/stats-for-instagram-instametrics/id1197883687?ls=1&amp;mt=8](https://itunes.apple.com/us/app/stats-for-instagram-instametrics/id1197883687?ls=1&amp;mt=8)** **macOS app: [https://itunes.apple.com/us/app/metrics/id1214689455?ls=1&amp;mt=12](https://itunes.apple.com/us/app/metrics/id1214689455?ls=1&amp;mt=12)** Some cool pods/frameworks I've used: IGListKit, RxSwift, Cartography, SwiftyStoreKit, Firebase, Crashlytics, CocoaLumberjack, etc. I'm gonna create some posts explaining all the things I have learned!
Known as an Elvis operator and is actually an emoticon used in many programming languages. 
It sounds like you're trying to understand how your application's model implementation fits in with fetching and setting data from/in Firebase. Basically, your model is the blueprint for your application's data objects. So, depending on how your application works and the features you want to provide for the user, you'll need to create the appropriate properties and methods for those objects. For example, if you display the user's first name in the app somewhere, your user should have a firstName property in your user class. If a user can send a message to another user, there should be a sendMessage method in that class as well. Firebase is your source of truth where all your data lives. You can retrieve and set that data however you need to work with your application logic. For example, when you are working with a user, you would instantiate that user and set the appropriate data from firebase to that user object (basically like how you mentioned in your post). So, user.firstName should have a value, and the sendMessage method I mentioned above would have some kind of implementation that sets values in firebase for the recipient to read from (message text, sender id, timestamp, etc.). I hope this helps a little bit. Good luck! TLDR; Think of how you can represent your application with objects and what information those objects need to hold. Then use firebase to retrieve and set that information.
I learned Swift with 's book back in 2014 when it first came out. I had no prior programming experience. What I would do is create a new playground for each chapter and save each one. I would just practice writing what I've learned and some days go back and review. It took me maybe 2 weeks to go through all of the book. This gave me a general idea of Swift and I was excited for it. If you still struggle with it, Ray Wenderlich's Swift Apprentice is an amazing book that teaches you how to use Swift. It has a lot of information and also has questions to practice it. The book is only focused on Swift though. You won't be making apps with it. Their other book, iOS apprentice shows you how to make 4 apps that show you A LOT of what iOS apps is about. I recently finished that book. Each book by Ray Wenderlich costs $55. What really makes you good at a language is using it. I made my first iOS app in Swift in 2015, which was a game called Chomp'd. Writing over 3,000 lines of code REALLY helped put Swift in hard stone in my head. Since then, I've made another game in 2016 and now working on 3 non game apps right now. I REALLY do not recommend learning Swift while making an app or a tutorial that's shows how to make an app. It is a lot easier to do a tutorial when you understand the language first. If you start learning by making an app first, you're already exposing yourself to classes, subclasses, superclass method calls, function overrides, etc. and that can be confusing for beginners.
Thank you for a clear answer!
Awesome! Let me know how you get on :)
Convert the array fromJson/toJson and store it as string. let json = "[[1,2,3],[4,5,6],[7,8,9]]" Or Yaml: let yaml = "- [1,2,3]\n- [4,5,6]\n- [7,8,9]" Or your own format, say pipe separated: let pipes = "1,2,3 | 4,5,6 | 7,8,9" Then split by pipe, split by comma. I like this because its more fun but the maintainer will follow you with an axe wherever you go.
Transpilers convert one language into another. A traditional compiler would output byte code.
I mean how else would you do it
\* Thunderous applause by hobbyists around the world.
English is defined by use. We only have descriptive rules for the language.
Not how it's used in computer science.
Most traditional compilers also output source (assembler).
"[Just](https://media.giphy.com/media/Fjr6v88OPk7U4/giphy.gif)."
Yes, that's what it is doing. And yes, it only transpiles only a bit of this language because Swift is extremly complex. I built this on a weekend so far, it is not possible to re-create somehthing alone in 3 days what a team of professionals is creating in a few years :)
https://www.raywenderlich.com
Thanks! Will start this weekend :D
Sorry, off the top of my head (seems like there'd be one of those acronym things for that phrase: OTTOMH?) i can both think of no reason and think of 1000 reasons why that could happen! As Sherlock says, it is a mistake to theorise without data. All I can say is this seems like one of the thousand of typical nonsense things that can happen when programming. My best advice would be learn how to debug. Not simply how to use the debugger (although that is important), but how to reason about how the code is working and form theories about what is happening and how it could go haywire. And then learn how to figure out the best way to test your theory to prove or disprove it. Above all, be organised: don't just go off in a 1000 directions and set breakpoints and print out all kinds of messages; in my experience, that just leads to confusion.
I seriously hate it when people come on here asking for help and aren't specific.
thank you!
 var adviceList = [ "Yes", "No", "Tom says 'do it!'", "Maybe", "Try again later", "How can I know?", "Totally", "Never", ] /*--------elsewhere--------*/ XCTAssert(adviceList.contains(&lt;string that is shown&gt;)) disclaimer: I think that should work. I don't have Xcode in front of me
How can I make my array global so that I don't have to copy and paste it from the ViewController to my UITests.swift file ?
With some other students at my uni, we are creating an app that will display to user certain places on custom map (apple map with an overlay) that he/she can navigate to (built-in directions). Those "pins" are also displayed on different view with camera capture and Augumented Reality overlays - pins on your camera view with name of the place and distance. Upon the arrival to place X you're able to view the gallery with photos/videos showing the place from the past. There will be paralax effect and some kind of overlaying old photo onto the camera view. You will be able to mark the places as your favourites, filter them by type, distance etc. We're doing it in a team of 3 during 5 months semester. SO FUN!!
I'm making a puzzle game for both iOS and WatchOS using SpriteKit. I started about 2 years ago and that time there's no SpriteKit for WatchOS, so I made wrapper code for WatchOS. I've made whole things for games like UI system, particle system, light physics system and so on. Now WatchOS supports SpriteKit so I integrated iOS and WatchOS. It is a hard journey for me and "Reinvent the wheel". But almost done. :) 
Compilers are suuuuuuper fun! You should try using LLVM next!
No really, it's not a word.
Noob question: What do you use for JSON parsing in this case?
Better KeyPath support is coming in Swift 4 I believe! And eventually there will be full blown reflection. Maybe Swift 5 or 6.
For anyone who might be interested or has a similar issue, I found a solution: http://stackoverflow.com/a/43237373/7816756
Mate, sort out your opening brackets. It's disgusting. 
\*Fuck JSON. FTFY
Yeah, the practical, attractive symmetry of Allman style has been ruined by a lapse into the disjointed, messy, yet inexplicably popular K&amp;R style on line 28.
You don't, there are plenty of single library solutions to pick from...
Thanks! I made an attempt at initializing the user object from Firebase (edited my OP to show my code). The error I'm getting is on `userRefHandle = userRef.observe`: "self" captured by a closure before all members were initialized". But I'm not sure how else to set the values, they need to be set inside the if let don't they? That's where each variable gets its value from Firebase.
THIS. It was also easier to crash the app if the json was to be malformed or had any field differently from expected
Thank you this actually ended up working, I finally used LLDB and put a breakpoint at the failure point and saw that I needed to wait for element to show before adding your above assertion. Thanks so much for all the help.
How condescending. No, it's not. I'm a compiler engineer. I fail to see how: id value = json[@"key"]; if ([value isKindOfClass:[NSString class]]) { _property = (NSString *)value; } Is any better than: self.property = json["key"] as? String Because, remember, *you have to check types regardless*, and *ignoring them, and ignoring nil, is fundamentally unsafe*.
What's inexplicable about consuming one less line?
Just don't have any icon starting with "i" because you're gonna have a bad time with "if"s haha.
I typically create a class for parsing and a class for the object itself. Very clean. My parsers usually stick to handling two things. Parsing JSON into the object and the object into JSON.
Argh, the imgur didn't embed. Here's the screenshot. http://imgur.com/a/K82so
I thought a "requirement" of this meme is that all the approaches are semantically equivalent, no? That isnt the case here
While I think it's an interesting thing to try to do, why bother? Just leave everything in IB if you want to build the interface visually. It seems to me that you just want to generate the code because it's more maintainable and a little bit easier to manage in source control, but honestly you're almost better off just using a library like Stevia (https://github.com/freshOS/Stevia) to create your interfaces
I just mentioned Stevia in a reply above, but check it out - once you figure out a few of the quirks, it's leaps and bounds ahead of similar libraries: https://github.com/freshOS/Stevia
I personally like how it makes code easier to read (for me! I like to let the code breathe a bit!), and especially how cutting and pasting becomes trivial when it's inevitably time to do some refactoring. It's fine!
No worries. Good luck moving forward with all of your programming endeavors.
Thank you very much! I will join the Slack team later 🙂
That would be the IDE.
What does that sperm operator do?
Adding Target allowed the pod to install, thanks! Now I can move onto my SQLClient implementation issues. The fun never ends :)
Don't quote me, but I believe KCFloatingActionButton has an option for that.
Thanks! Ill check it out
No point in earning Karma if I'm not gonna spend a little sometimes :)
same
when was swift about being quick and easy? there are much more quick and dirty languages to choose from. its about safety and readability, and apples or something. 
Started playing with AI and Machine Learning by porting the excellent library by Collin Hundley **Swift-AI** using the Handwriting Recognition example as my first project. https://github.com/kuyawa/Handwriting \* Collin is a genius.
This is kind of a separate question but does anyone know off the top of their heads if this kind of design adheres to apples HUI guidelines?
I've been using it in many production environments already. It lacks some features here and there, like a Paypal library, LDAP client, PDF and XLSX generators, useful but less necessary libraries. Some can be worked around using a C library. For me, so far, it has proven to be a performant, expressive and reliable ecosystem with a fantastic, helpful, friendly community.
This is a really good proposal. The only thing I don't like is that the JSONEncoder returns Data. I would prefer if they would introduce a new type JSON. Having a designated type for JSON has the advantage that you know what you are dealing with and the underlying data is always valid json. You can also expose new api on this object that you would not expose on Data since Data is used for other things as well. You could have methods for transforming the JSON object into a string or initalizing it from a string etc. A good analogy of this situation is the URL type. You could represent an URL as a String or Data, but it is better to expose a specific type so you can have all those helper methods on the type and you explicitly know what you are dealing with.
They do not force JSON on you. It is just one of the encoders. You can write your own YAML encoder if you want.
I take it you're in strong favour of this proposal then; seeing as it's focus is allowing object graphs to be encoded in *any kind of notation*, not just JSON. You could even define an Encoder for the `print()` format and live your dream!
you failed to prove that swift was meant to be quick and easy. you gave one example where they said it was easier to use functions, not that swift was quick and easy to write. i get what you are saying but I think you are arguing against something that no one claimed
XCode 8.3 requires 10.12 or above. There's no other way around it.
I suffer from the same condition plus [Telephobia](https://en.wikipedia.org/wiki/Telephone_phobia) and [Selective Mutism](https://en.wikipedia.org/wiki/Selective_mutism) (Raj from TBBT) and it is the worst for remoting. I just gave up and am trying to start my own business. Nobody will interview you by email or chat, get over it and start thinking on ways you can leverage your condition. My best advice, start your own business, develop apps and sell them on app store as an independent programmer, work on your own.
I'd suggest replying on the swift-evolution list. They're soliciting feedback as we speak.
I see, I saw something like that somewhere but I forgot already, it was so painful having to recompile everything just to test one simple change I erased that data from my brain. When working on web apps I have to try a million changes on html, css and my templates to waste my precious time compiling, that's why I didn't consider that an option.
What are the use cases for manipulating the JSON data directly? IMHO you should only convert to JSON moments before you pass the data object to a function that does things like saving to disk or sending over the network. I don't see why I should pass around JSON objects when I can pass arrays, dictionaries or decoded objects of my own type. 
As someone who has seen the worst done with serialization APIs, I am scared of this brave new Swift encoding world. Kind of liked it without. But yes all this looks nice.
For that particular scenario I'd go with Google AppEngine's free tier and Python, no need for dealing with server stuff, just code your Python services, parse your JSON and save your data in their many cloud storage options. If you feel adventurous Heroku also offers a free tier where you could play with Python and Postgres but again you have to do a little bit of configuration. If you want to go all Swift, Heroku would be my choice. There are also other options like Amazon and Bluemix but they're not free or their free tiers have expiration dates and are limited in their free DB choices.
Thanks for the share! Glad to hear people are finding it interesting. You could definitely apply this concept to a number of computer vision applications.
Well, I don't know if I want cloud services... I can use Google's cloud to execute my Python script? I'm talking about neural net, so it envolves a lot of processing. If it's a good choice, please can you show me some good tutorials to use REST with Google's cloud? Thanks.
Hey thanks! I'm working on some new examples in Swift 3 as well. I bet you could easily use a neural net in place of knn for the gas pump reader. In fact my goal is to build a native Swift implementation of everything you used OpenCV for here. If you end up using Swift AI let me know and I'll link to it from the repo!
Your swift library looks pretty cool! So far in my development of that project, the hardest problem I'm still solving is getting a good crop of the digits. Sunlight and glare on the LCD leave all kinds of artifacts when trying to pull out the digits. If you end up building something like this, let me know! I'd love to see it.
You could use the Swift REPL in a Terminal. 
All props to @kazmiekr, all I did was posting the link for everybody to enjoy. Both of you are my inspiration.
Ah I didn't realize this was your project. Good work! We'll stay in touch for sure, I've been wanting to build a 7-seg scanner for a while.
Regex will be something like this: /\#([a-zA-Z0-9\.\-\&amp;]+)/ Escaping some characters might not be necessary but I added them just to be safe. Explanation: - \#: Starts with hashtag - Parentheses: Group the matches inside (this makes them easily accessible) - Square brackets: Lexical matching - a-zA-Z0-9: Match all uppercase and lowercase letters, and also match digits - \.\-\&amp;: Match ".", "-", "&amp;" - +: I don't know the exact definition but it basically means "repeat the previous match group"
have you tried Narwhal? It's pretty great (and as a little detail it's made with no IB at all, entirely programmatically :P)
I wonder if you can have them log into a remote desktop server right there. We used to have a server just for offsite employees and it worked pretty good. Why can't you setup those computers to log into a server that you setup that uses VM? https://forums.developer.apple.com/thread/48942 If they can run OSX on Windows, why can't OSX run Parallels VM on OSX for a newer version of OSX? If that doesn't work, there's always mac-in-the-cloud, I hear it's not expensive.
That looks very impressive. I saw the PY code, is there a Swift version of this?
Thanks! I wasn't aware of any of these. 
I haven't done that tutorial, it's on my list (seems like a never ending list) However, is it just wrappers? A lot of 3rd party stuff is just wrappers over the stock equipment. If it's wrappers, then you can just make your own or go back to stock. I'm not the biggest fan of 3rd party unless it has the code, I've been burned in the past. 
see the swift wiki linked in sidebar
Your delegate function is incorrect. It should be &gt;func stream(_ aStream: Stream, handle eventCode: Stream.Event) { } Looks good, otherwise.
Thanks, but that stuff is all below Advanced Swift. I'm looking for content to bridge between reading the code in the stdlib implementation at github.com/apple/swift
Thanks, but I'm looking for much higher level stuff. I.E. I can make sense of SOME of the stuff in the stdlib at github.com/apple/swift but it's just too much for me to really make any progress on.
Oh jeez. Thanks. That's what I get for relying to much of Stackoverflow. 
&gt;I don't mint it being a desktop but I want a recondition thank you :) You do realize that that makes no sense considering the title of your post. A Serious Programmer needs to learn to communicate. In any event if at all possible get a four core machine. Ideally you will get one with enough RAM or one that is upgradeable. In the end though comfortable programming is more about the screen than the actual computer. In that regard you want to avoid the smaller laptops if you expect to do a lot of serious programming. My 13" MBP passes for casual programming but I'd flip out if I had to use it for 8-10 hours a day of development. Screen real estate is a very valuable commodity for a programmer. At one point I even had my iPad propped up next to the laptop as a supplement. So only you know your needs but I'd suggest going with a desktop with a large screen. By large I mean 22' or bigger. I like to have lots of info on screen so maybe I'm biased.
Let me know what you like to see!
I think there are a few options: * Spend time reading through the source. You say you can't make sense of most of it, so picking something and slowly and methodically work your way through it. It may not be all that much fun or exciting, but you'll slowly get faster and more knowledgeable * Read through Apple's Swift guide - you probably already know the bulk of the material, but if I recall the second "half" of it is very detailed language specifications. There are actually quite a few tricks and approaches you can gleam from this info that isn't obviously stated in the main docs. * Find a bug and try contributing to Swift. This is a very rewarding and challenging process and you will learn a ton along the way.
Swift is built from C++. If you want to dig deeper and understand more you could research the repo and start studying more C++. I've wanted to contribute to swift, but I don't know C++ well enough yet. 
What year's model?
The Big Nerd Ranch books. https://www.bignerdranch.com/books/ios-programming/
Mid 2015 MBP with the i7, 16gb ram. This worked pretty well with my mid 2012 model too, although the Retina display on the new one is very pretty
Define "lighter"
For Python: just use gunicorn and Django. 
I had my best growth when I stopped limiting myself to just books written in the language I was using. Swift, as a language, is largely similar to most other languages that look like C. Yes, there are differences, but embrace those. So, with that in mind, here is my book list: * Clean Code by Dr Bob (Java, but applicable) * Head First Design Patterns (Java, but applicable) * Code Complete (lots of languages) * Refactoring by Fowler * Inside SQL Server: The Storage Engine. * Framework Design Guidelines (C#) * Rest Frameworks in Practice (so you actually understand what REST is, and not the 5 minute version everyone says) * Domain Driven Design (this is the hardest book in the list) * Find an algorithm book that works for you. I have a stack of them. 
this takes the cake on made up conditions
My personal platform is a 2012 15" MacBook Pro. I can very much recommend that with the exception that it is a bit heavy. 
What's the purpose of this UI? You could try decreasing saturation and contrast
Watched this video a couple of days ago: 5 Design Tips for Better Backgrounds (iOS, Xcode 8) https://youtu.be/iu9cam3XYiE
Alright thanks! I appreciate it :)
You are almost running the same set up as me! Upgraded my non retina 2012 (i7 8gb ram) to 2016 (i7 16gb ram)! The screen on the newer ones is beautiful. I never realized how bad the old ones were comparatively.
Thank you 😊
No, you are way too deeply nested, use guard statements and early returns
example? 
Your error != nil could be one guard statement, your let content = data could be another and you could even get rid of that try catch by using the try? expression in a guard statement
For example instead of nesting everything in the first if - else statement you could return if there is an error and not nest. You could also use guard statements to accomplish this. It will make your code easier to read/understand.
Thanks for the tip. 
I just updated my code, let me know if I did it correctly. [Here you go](https://gist.github.com/farhansyed9/7ef31c53605e6a0ebdb8fe3585419ce8)
Thanks for the tips, appreciate it. 
looking better already! good stuff
Ok, here it is: https://pastebin.com/SbNisd7i The stuff is in viewDidAppear()
A role-playing game character sheet app
Propogate the error. You'll want to handle the error in the VC that uses this information in a real app (ie to tell the user in a popover that there was a connection error). You shouldn't be handling it there. So use: func parseJSON() throws and at the call site do { try parseJSON() } catch { showAlert("Your stuff didn't download") }
I didn't say you need a big ass desktop machine rather i pointed out that you will benefit from a large screen. Back in the day, before Apple went stupid, you could buy a quad core Mini, that machine is still very popular with developers. Like it or not things (XCode especially) run smoother with a quad core even if it is a low performance quad core. The intention was not to imply that a Mac Pro is required. In any event the biggest factor in developer comfort and productivity is a decently sized screen. Many developers run dual screens to help in that regard. Sure some can get away with programming on a Mac Book and its tiny screen but it is much less than optimal for most developers. 
If your intention is to become a professional programmer communications skills are a must have. This especially when programming itself is a form of communications. 
Cool stuff! Bookmarked it. 
starred it , comments missing in code rest looks cool
You can -ask- a company whatever you want to. Are they going to interview you via texting? Probably not. I think you need to be be realistic and admit that your condition puts you at a huge disadvantage versus other applicants for a job. You need to somehow either work on your social skills or develop some other skillset that would make you valuable to a company even with your disorders.
I might be being incredibly stupid, but if I do that, then it just sends the 'theDouble' twice, instead of a new value, so how would I make sure it is sending two variables instead of one twice? I'm guessing it is because the performSegue's sender is 'theDouble', so when I add the new variable in the prepare(for segue) it is also assigned to that value, but I cannot add a second sender to it in order to make it the other value?
Amazing, thank you so much, got it all working :)
&gt; guard let name else { } // instead of: guard let name = name else {} &gt; &gt; if let name { } // instead of: if let name = name {} Still, I rather use this: guard name! else { } if name! { } so I don't have to reassign the same var to the same name, which since day one I found weird `if let name = name` just to unbox it
No, there's a bot here that does that. But apparently the readers of this sub are okay with it, so whatever.
If nobody told OP, he would go on and keep making communication errors, and it could cost him important things down the road.. 
What the hell am I looking at? Is this the gameplay? Or what is it??
That's the level selection screen with preview gameplay for each level.
yeah i get what youre saying but my app is really simple, i want to enrich the ui a little with something, its also a chance to experiment with background images.
Enriching the UI with a background will go well if the UI elements on top are enriched in themselves too. I'm curious how this would look. Also, it's "what would you like to do?"
The best way to learn advanced stuff at a certain point is looking the compiler and understanding the infrastructure. 
Awesome job. I always wanted to write a book for Swift, but never did. I'm glad you're able to put the time and effort. I know it isn't easy!
Swift is a huge complicated language described in a book of over 1000 pages and filled with unexpected pitfalls. [I would try this instead](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html)
Thank you so much 
I love obj-c, but let's be rational, Swift is way easier to pick up. I'd suggest Swift specific tutorials on lynda or pluralsight. They might not be updated for 3.0 but can get you going with the basics.
It freaks me out that i can not find a single tutorial regarding this problem. I feel like i am the only one who is trying to create a chat view controller from scratch. I use a iPhone 7 for testing right now
Any recent Mac should be fine for iOS development. If you're doing 3D Game Dev on iOS, I'd probably go with a MacBook Pro, iMac, or a higher end Mac Mini. The MacBook could probably cut it, but I'm not too sure. 
i love you
&gt;Swift is way easier to pick up Why do you say that? That hasn't been my experience at all. Swift is the most complicated computer language I have ever encountered. Objective C took me a day to get productive in and about a week to fully master. Six months in and I still feel like a noob every single day with Swift. And mind you - I spent half a decade doing C++ for a living. 
Here. Its not pretty, but it has worked for all keyboards I have tested: https://github.com/Awalz/KeyboardOffset It does not scroll the tableview, but rather moves the frame up. The first time it launches, there is a noticeable stutter as it adjusts. It does not happen after that that I can see. You will need to install the Snapkit pod for this project
I have reworked the sample project you provided with my implementation as well: https://github.com/Awalz/chatOffset
wait, this one works like a charm and suddenly you dont need snapkit?
I used SnapKit because i don't use IB and its the best framework for contraints. It is not a requirement for this implementation, just my laziness of doing UI in code
https://itunes.apple.com/pt/course/developing-ios-10-apps-with-swift/id1198467120
The way I used it was via the Swift Package Manager. In the directory where the .xcodeproj file for your project is located, create a Package.swift file with contents similar to: import Foundation import PackageDescription let package = Package( name: "YourProjectName", dependencies: [ .Package(url: "https://github.com/IBM-Swift/BlueSocket.git", majorVersion: 0, minor: 12), // whatever the current version is ], exclude: ["YourProject.xcodeproj"] ) Then at the command line type: *swift package generate-xcodeproj* That will clone the git repository and add it to your project with the framework as a product that you can build. At that point, you should be able to add the *import Socket* and use the framework with your code. Hope that helps and that I didn't leave anything out.
Just finished this guy: https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=1220536593&amp;mt=8
I have pdfs but they arent v good ..if u wish u can buy iOS Apprentice by Raywenderlich they are awesome As i am also a beginner i can tell
Second this. I'm now 4 months into my internship as an iOS Dev. Started off with nothing but basic swift. Ray Wenderlich's site is like a booster pack if you will.
I feel less defeated now that things are starting to work a bit. It really isn't swift, it's the entire xcode thing. It's just, I've built a LOT of software and it has never in 10 years been this difficult to accomplish simple tasks like integrating libraries. 
Easiest way? Rebuild it from scratch. This is coming from someone who's done multiple conversion projects. I don't know of, nor would I expect there to be an automated script that could do this for you. You might be able to convert some basic syntax automatically, but actually using swift in a meaningful way means rewriting whole chunks of code by hand while making deliberate style decisions. Keep in mind this is extremely error prone and risky. Unless you have 100% unit test coverage already, you shouldn't bother. What are you hoping to gain by converting to Swift? Maintainability? Efficiency? You won't get either without a full rewrite. An alternative would be to gradually phase out Objective C. Make all new files Swift. Try to encapsulate stable legacy code into Pods. This is viable but it also means you'll forever have a split codebase and cause new devs to learn and work in 2 languages.
Most job interviews I've seen/done that had a technical part usually asked you to do something just like this using NSURLSession/URLSession and UITableViews. So if you want to study up...make sure you follow this tutorial and really understand it. Google everything you don't understand. Send messages to this guy as well if you get lost. Just make sure you understand this because this *is* important.
Totally true. Converting is impossible. For larger projects I usally phase out objc code by creating all new components in swift. But most of the time I stick to the language initially used, no need for conversion....
I mean sure,If you need to perform a side effect on nil cases guard is great. but nothing beats map and flatmap when composing multiple optionals. Also you can deconstruct more than one Optional in "if" statements. So if you need to compose optional deconstruction without intermediary steps, if let is the way to go. *something something do notation*
Have you tried gradient? I think that the gradient (horizontally) would look similar to WunderList background if not identic.
Thanks for the feedback. In place of `as! NSDictionary` I was thinking `as! [String: AnyObject]` or `as! [String: any]` would work. What do you think?
I'm pretty sure on iOS you don't have access on a level deep enough so that the actual file system becomes relevant. For iOS developers the important part is the lack of unicode normalisation. Which means that if you use non-ASCII characters for file names in your app (not in your source code) you'll might end up in trouble. Because there are unicode characters that can be created in multiple ways. https://mjtsai.com/blog/2017/03/24/apfss-bag-of-bytes-filenames/ ---- In the future: for regular Mac developers that'll mean that the file system is now case-sensitive. Like it always has been on the iOS device. But to the confusion of many, not on the iOS simulator. Because the simulator uses the file system of the Mac. 
Thanks for the suggestions. Went with Django + rest_framework and it's going good. Still learning things.
Thanks a lot!
Don't quote me on this but using a copy on change symbolic link for these kind of files would be the logical from a file system viewpoint. And I have no reason to think that apfs works different from "2017 logical".
&gt; Swift is way easier to pick up. I honestly don't understand why people think this. I found Objective-C to be easy to pick up and Swift incredibly difficult. I had many false starts with Swift. 
&gt; Swift is the most complicated computer language I have ever encountered Same here. I'm fine now that I work in it but sometimes the crazy amount of optionals still throw me for a loop (although the compiler picks up what is needed pretty well). 
Hm, I tried that once already, but maybe I typed something incorrectly. I'll go back and try it again. Thank you!
I have been brushing up on Objective C this morning and it's coming pretty easily to me. I will probably end up going with Obj C. Thanks for the advice, I really appreciate you taking your time to help out!
~~This is incorrect. The file system sits at the foundation layer of the system stack and is in complete control of how files are managed. In the OP's example, APFS will automatically clone duplicate files to optimize space.~~ EDIT: according to /u/apfsgeek, my above assumption may be incorrect. Credit to him for posting additional source material. 
They kind of are though right? "If I can derive a value from x, then do this with that value."
I'd change the guard to something like this (removing the force cast) ``` guard let json = (try? JSONSerialization.jsonObject(with: content, options: .mutableContainers)) as? [String: Any] else ``` Or you could not use the optional try (you'd need to then catch the error): ``` guard let json = try JSONSerialization.jsonObject(with: content, options: .mutableContainers) as? [String: Any] else { ```
Agreed. Newbies, there are better guides on how to accomplish this exact task.
MacOS updates and the subsequent Xcode updates were such a pain because it delayed development time and require searches for new VM images or patches. That combined with the delay with every key press and long compilation times, I got frustrated and bought a MacBook. 
I'm planning on doing that as well but I'm hesitant to do so right away because I bought my current computer just last year so I'm not ecstatic on the idea of dropping another $1000 or so until I really need to. 
&gt;another $1000 or so until I really need to. Trust that instinct. iOS development is miserable on low end hardware. Wait until you're making money or get a job doing this, then buy a better Mac 
If you're doing this professionally and contracting, the best thing you can afford. If not, Air or a resold MacBookPro/Mac Desktop. Avoid the MacBook line. 
&gt; it's not that specific language, it's just you. I can't agree with that statement. I had no trouble picking up C++ (my first language), C (my second), x86 Assembler, VB, C#, or any number of web languages, or graphics API's like OpenGL, but Swift was a whole new ball game. Part of the big problem with Swift is that there are far too many ways to do something in it. Do we really need four different ways to initialize an object? Not to mention optionals which have all kinds of syntax to remember and get downright messy when dealing with Cocoa. 
Those are convenience initializers for common uses, saving you time and lines of code. Funny thing I tried to get into C++ and still to this day I couldn't advance. And I accept that it's me, not that messy c++ syntax. :)
Sounds good gotcha 
No problem and thanks for the reply. The fact you took the time to re-evaluate Objective-C's suitability for your goals and not just follow the Swift hype, is a great sign for your future career as an engineer. 
Yeah, you know what really strikes me as nuts is the 2017 StackOverflow language survey lists Smalltalk as the 2nd most loved language. Rust is 1st but Rust is kind of a current darling. OTOH, Objective C is something like the 6th most loathed language. Why? I don't get it. Objective C is an attempt to add Smalltalk's object model and messaging paradigm atop C and provide a foundation for "software IC's" (a buzzword that floated around in the late 80's implying software components should be swappable like integrated circuits). As such, Objective C is enormously successful. But we could move even closer to Smalltalk now. You could engineer the C out of Objective C and end up with a decent approximation of Smalltalk complete with type annotated syntax. That would be real Nirvana. If the fancy takes you, I encourage you to have a go with [Smalltalk](https://medium.com/smalltalk-talk/smalltalk-choices-6c39d09a40e6) at some point. It will change how you think about software forever. 
Wow, there's a lot of misinformation here. I have no idea where half of you are getting your information. Sources, please! APFS documentation includes descriptions of [the new cloning APIs](https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/APFS_Guide/ToolsandAPIs/ToolsandAPIs.html#//apple_ref/doc/uid/TP40016999-CH7-DontLinkElementID_14). Not every file copy can or will take advantage of APFS cloning. Calls to the new `clonefile()` will, as will higher-level APIs like `FileManager`'s `copyItem()`. In libcopyfile, the new flag `COPYFILE_CLONE` is defined as equivalent to the union of 5 other flags. You might think that this means if your program happens to pass those 5 flags to copyfile() already (or a simpler alias, `COPYFILE_EXCL | COPYFILE_ALL`), you'll get cloning automatically. That does not appear to be the case. The manpage describes it as "a best try flag i.e. if cloning fails, fallback to copying the file". Another new flag, `COPYFILE_CLONE_FORCE`, is also defined as the union of those same 5 flags (!), and returns an error if cloning fails. Clearly these flags do something else beyond just being a union of the other 5. They're both [defined](https://opensource.apple.com/source/copyfile/copyfile-138/copyfile.h.auto.html) as their own bit, not just a union of the others (like `COPYFILE_ALL`, for example). So if you use libcopyfile, pass `COPYFILE_CLONE` or `COPYFILE_CLONE_FORCE` as desired, and don't just depend on your old flags getting you cloning on APFS. APFS [does *not* offer deduplication](https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/APFS_Guide/FAQ/FAQ.html#//apple_ref/doc/uid/TP40016999-CH6-DontLinkElementID_3).
Some people in this sub may be against it, but you will have way better performance using a hackintosh setup. Depending on your hardware it may not be too hard to setup dual booting.
I'm always down for learning. I'll look into Smalltalk and maybe even start a class discussion about it with my Programming Language Structures Prof. I'm sure he'd dig the chance to talk about it. Thank you for the suggestion! *Also...* Objective C is one of those languages I keep revisiting and trying to learn. I can tell you that the more I knew in general, the harder Obj C seemed to me. I guess I eventually hit the tipping point where I no longer focused on "knowing a language" and moreso "knowing how to understand a language" which instantly cleared up the entirety of Obj C for me. Before that, though, I got so frustrated with not being able to understand Objective C, yet still being able to pickup other languages easily. I'm not sure what phenomenon to blame that on, haha
This works great! Now I only need them not to repeat. And the letters that I have are: U' and U R' and R L' and R D' and D B' and B F' and F So hese cannot be followed by each other. I'd honestly appreciate the hell out of you if you could do this in some way. Every time it scrambles it should say for example: F U L' R U2 F U L' R U2 R U2 F B2 [Repository on Github](https://github.com/erkyy/CubeTimer/blob/master/CubeTimer/MainVC.swift#L17)
Thanks, I will be updating to all the advice I've seen. How would you suggest tidying up the code? I did `control + I` to make the spacing the way it was in Xcode.
I've been working on a personal project for the last month or so, which is a 2D Isometric Grid-Based Tactical game (basically Final Fantasy Tactics). I find that RPG games are the most fun to design for and I've really enjoyed the challenge of an isometric 2D grid (zPositions are a total pain if not designed ahead of time) I'm quite happy with my progress. I've got maps that are dynamically created from json files, a database, A* pathfinding and breadth-first searching algorithms, and a crude, but serviceable UI. This is actually the third iteration of the game. My first version was mostly just a "learn Swift" project and died off after I discovered the instruments functionality (and subsequently realized I had tons and tons of ARC issues that were going to be a nightmare to fix). The second attempted to improve on that but ran into some major issues with view controllers and stuff that I decided it was best to start fresh after figuring out how those work (I still don't understand them fully, but the latest version seems to be using them well enough). I'm confident that this is the last reboot... I've had 3 iterations now to improve my designs and the new code is a dream to work with compared to the others. No current plans to release anything. I just really enjoy working with mobile apps and Swift. If anything this is going to be a portfolio booster.
Would that get rid of the limitations of my vm and my hardware consists of a Dell XPS 13 so I'm not sure I could get a useable hackintosh on it
I never intended it to completely replace, sorry for that! Maybe I should've picked a better title. 
I'm cruising perfectly on a 6 yr old MacBook Pro 13". Yeah, it sounds like a jet engine at times when it's indexing and you could cook an egg on he underside after a codejam session, but it's serviceable and I haven't had any real issue working on my app. Looks like they go for around $200-400 on eBay.
I should have mentionned it's for an original rpg i'm working on with a team, the game is in playtesting and it's going well but the bookeeping is horrible, hence the app idea.
Swift weekend project turned into a library. Maybe somebody find it useful :) 
 let randoms: [String] = [] while randoms.count &lt; 10 { let r = arc4random_uniform(12) let letter = letters[r] if letters[letters.endIndex - 1] != letter { randoms.append(letter) } } 
Soooo Swifty 👍
Amazing!
So basically it's working fine but loud and hot. $200-$400 isn't as hard to swallow as $1000 thank you for your input 
Here's one with a definite runtime: var sourceArrays = [String:[String]]() var baseLetters = ["R","U","F","B"] var additions = ["","\'","2"] sourceArrays[""] = [String]() for letter in baseLetters { sourceArrays[letter] = [String]() } for letter in baseLetters { for addition in additions { let stringToAdd = letter + addition for key in sourceArrays.keys { if letter != key { sourceArrays[key]?.append(letter + addition) } } } } var previousChar = "" var randomArray = [String]() for _ in 0..&lt;20 { let arrayToAddFrom = sourceArrays[previousChar]! let stringToAdd: String = arrayToAddFrom[Int(arc4random_uniform(UInt32(arrayToAddFrom.count)))] randomArray.append(stringToAdd) previousChar = stringToAdd.substring(to: stringToAdd.startIndex) }
You're welcome! Just beware of Indexing. Xcode has a tendency to need to index a lot if your code is unnecessarily complex. I was pulling my hair out due to all of the indexing (compounded by the older laptop) until I realized that Xcode sometimes has trouble figuring out what's what when your code is overly complex, like having a lot of nested computations in an if logical check. Just pull them outside of the check on their own line. I.e. instead of if(computations &amp;&amp; computations &amp;&amp; computations) { // Do stuff } Change it to let a = computations let b = computations let c = computations if(a &amp;&amp; b &amp;&amp; c) { // Do stuff } Newer MacBooks might not have too many indexing issues, but if you plan to use older hardware, Xcode can slows things down if you get sloppy.
If you don't mind explaining what you you mean by indexing I understand what you mean with your code I just don't understand what indexing is
Xcode has intellisense, which allows you to use code completion and jump around your code by links to methods and stuff. In order to do that, Xcode has to figure out how your code is working. If you ever see it say that it's "Indexing", it means it's processing new code to understand where everything is and how it links together and whether or not you have any code errors. If you make your code too complex, it has trouble figuring out what's going on and will start indexing to get back up to speed. This usually all happens without any noticeable slowdowns.
I'll check out that website! It's kind of difficult to build apps, but when I see people's apps source code I can read the code quite easy, just figuring out my self is difficult lol. 
Thank you 
Reading code is one thing, but fully understanding exactly what it does and how it does it is another thing. 
You should try to watch some videos on YouTube. Usually they can help explain the syntax and concepts in a way that you can understand. It takes a while. Especially since it's your first language. You just need to keep reading documentation and watching videos. Sooner or later it's going to click in your head. Just don't give up! 
Guard variables exist outside the scope that they create. Your example doesn't show this. You are also comparing them wrong. Here is the same statement using if: if error != nil { print("error") return } print("success") 
It's your first coding language, it's going to be tricky, don't be too hard on yourself, but just keep at it, and things eventually "click" that may have seemed insurmountable the previous day. As clichéd as it sounds, practice is your best friend here. :) Thankfully there's tons of examples for just about anything that could confuse you out there, so if you're confused in one article/video, check out another. Or post here with the question!
I also updated the post with better examples. 
Thanks for the information man! I'm not gonna be too hard on my self nor give up ;)
I had a pretty bad example, I've updated the post reflecting a new example. 
I think with Swift or any programming language it's more about learning the specific framework functions instead of the language itself. Logic more or less stays the same between languages, language specific functions change. 
Are you looking at app development or just learning swift? If you're focusing on learning Swift, you should look into either using an iPad or the open source Ubuntu version.
I know, and I don't remember why I did it like that.
For your first programming language it should be normal to be confused. The official apple documentation is a great resource and I still to this day sometimes refer to it. Learning the language is more or less the boring part, however most fundamental. Once you have a firm grasp on the language you can move into more of the fun stuff with advanced frameworks (Like UIKit for iOS). Once you get there you'll probably feel beaten down again because those frameworks can sometimes be a bit much to handle. That being said stick with it and you'll make sense of it all. If you want to learn some more, raywenderlich.com has some great tutorials. If you are looking for even better descriptions, bob the developer is a good place too. Good luck!
First of all, learning Swift and learning iOS development are 2 different things. I recommend you DO NOT do any iOS development or tutorials at all until you understand Swift, from the basics to functions, classes to protocols. Understanding Swift makes it way easier to start iOS development. And to answer your question, I believe about less than 2 weeks to learn Swift. I started as soon as Apple announced it in 2014. I used their documentation to create a new playground for each chapter and would go back and review as I progressed through the chapters. I would do it everyday. This was my first language I actually tried to learn (I looked into Objective-C but was bullshitting it and quit). Knowing Swift made iOS development easier, especially table views because you would already know what a protocol is, a function, extension, etc. Table views can be hard to learn at first, but once you understand them, it will be way easier.
&gt;Should i learn swift or something else in 2017? Do you want to create iOS applications? If so, then yes. &gt; And is swift playgrounds good enough for starting? The swift playground is really good for getting a grip of the fundamentals of swift. So in the beginning when you are learning the core concepts of swift which have nothing to do specifically with iOS (things like what is an array, how do you declare a variable, how do you call functions, how do you create classes), then playground is great. As you move into creating things specifically for iOS devices then you will move away from playgrounds. I would highly recommend the Stanford course. ([iTunes U](https://itunes.apple.com/us/course/developing-ios-10-apps-with-swift/id1198467120) / [YouTube](https://www.youtube.com/channel/UCYVp6suz7ztKAKY8jpfACXA)).
Well i had just finished learning objective C for 5 months, so it was a bit more straightforward to pick up Swift. I finished ~1 month and half later and moved on to actually making an app. 
Very nice. Thanks for sharing! 
When I did my rewrite I utilized categories. I would take a class at a time and then move a few methods out to a separate file using categories/class extensions. Then I would replace this file with swift code. Then I could have a gradual transition one function at a time while still keeping the program compiling. I would also annotate the objectice-c code with optional types etc. My approach was basically do it so it could be abandoned or paused if needed. 
A day or two until I could write an app. Maybe a week until I was comfortable. But at that time I already had like 5 years Objective-C experience and was writing code for a bit more than a decade. As others have mentioned, the complicated part about learning to make iOS Apps is the iOS platform, not Swift. If you have some money to spare I would recommend to get these two books: [iOS Apprentice](https://store.raywenderlich.com/products/ios-apprentice) and [Swift Apprentice](https://store.raywenderlich.com/products/swift-apprentice). Solid content and at least in my opinion much more useful than watching countless videos. 
I'm leaving both at the moment 
Optionals for sure
Optionals tbh
That's cool you made some progress with Kickstarter. How far did you get with it? I understand the concerns you outlined; I think you could build the UI in 2 layers to enable different types of users to see and upvote both the general idea for an app and then also it's specific feature list that would be added to and organised overtime. This could solve the problem of keeping things simple and clean whilst allowing the projects to manifest naturally over time. I think it's a valid approach to enable people to also make existing product recommendations if they know of something that will fill the need being specified. Obviously marketing would be a key component to getting a project like this up and running properly. PM me if you fancy chatting. I have some cool ideas.
Have you tried updating the files taken from [Kanna](https://github.com/tid-kijyun/Kanna)? It looks like many of the issues are due to using an older version of that library.
Not just a swift feature obviously, but closures confused the hell out of me for some reason.
One thing that I would add is the usefulness of guard statements. In your example with the middle name, let's say your program absolutely required a middle name. Instead of doing an if-else, you could do: guard let middle = middleName else { throw Exception... } print("\(firstName) \(middle) \(lastName)") The code is a little more compact and easier to read, imo.
Generics, not so much syntax wise, but more how and when to use them. Proper usecases.
[Application Binary Interface](https://en.wikipedia.org/wiki/Application_binary_interface) Basically, for an application that has been written in say swift 4.1 to run on an os that has a lower version of the swift libraries, both versions must have compatible ABIs. The link from OP shows the status of all of the tasks that, when complete, will stabilize the swift ABI so that going forward, if iOS 11 shipped with swift 4 and then iOS 12 shipped with swift 5, an app written in swift 5 could be run on an iOS 11 device without needing to include the entire swift library. (note: i believe this is all correct, someone feel free to correct me)
Twillio
Hey this is really nice
We are actually Carthage only on this project. We had issues with cocoa pods never building
You can't send SMS automatically from the user directly. You can open and pre-fill a message with `MFMessageComposeViewController`, but the user has to send it themselves. You can send SMS from a third-party provider like Twilio or Plivo. These don't get sent from the user's phone number, you have to set your own number up.
One thing I didn't understand when I just started was why I even needed guard when there was if else. Then I learnt. Sometimes you do somethings someway just so the dev after you doesn't pull his/her hair out.
Yes great idea on guards. While writing the article, I debated about introducing guards to show exactly that, but I didn't want to confuse anyone anyone just starting out. I do have another article on [guards here.](https://medium.com/@farhansyed/how-you-can-use-guards-to-clean-up-your-ugly-if-statements-in-swift-cdd24c484334) Edit: I added guards in the article. 
You can send data. You have to pack it into a NSMutableDictionary. However, if you have a fixed way to fetch your data, you could wrap your loop in another function to be called by the selector. I'm a starter at developing iOS apps so this might not be the best way but it's the easiest. However, seeing how it's coming from sender, yeah you'll need to pack what you need into an NSMutableDict and unwrap the data in the shiftselected function. 
Leuk man
This checks so many boxes for me. Thank you!
I don't recommend the Stanford course for complete beginners. The class is not made for beginners and doesn't exactly teach you Swift or iOS development. I do recommen the intro up until MVC.
Thank you for reading! Let me know any topics you'd for me to write about!
Is there any reason I should use a guard instead of "if let" statement? My understanding is that they are the same thing almost.
Great! Let me know when you proceed~ : ) 
Man, you must long for the golden days of COBOL and FORTRAN.
Guards communicate the intent of the code better. With a guard, you are saying *"If we don't meet these terms, we must not pass onto the next part of the method."* That's a lot more specific than a general `if let`, which only really says *"Can we have this as a non-optional?"*. Guards are enforced by the compiler. You can forget to handle the `else` part of an `if let` statement. You can't forget to handle a guard, because your code won't compile. As a general rule, code is more readable if it focuses on the "happy path". If you have conditions that need to be met before you can process something, then putting those at the top and bailing out if the conditions aren't met is simple. If you are stacking those conditions inside `if` statements, then you're increasing the cognitive load involved in reading and understanding the code because your mind has more to keep track of. In complex cases, you can end up with a "pyramid of doom" where your main body of code is shifted off to the right inside a bunch of nested `if` statements. 
Did you use Kotlin and how hard was it to understand Swift? I'm still doing ObjC, I've been digging into Swift since day 1, but I still do ObjC as the main thing. About ready to fully embrace Swift.
From the page: &gt; Material Motion is a toolkit for building responsive motion using Core Animation. &gt; &gt; Learn more at https://github.com/material-motion
So far this book is going into fantastic about everything little, I'm only on the variables but still I can just tell this book is going to help me!
I find the best way to organise a project is by screens/flows, i.e `Startup, Profile, Events, Checkout` etc. Create a separate storyboard file for each screen/flow if you're using IB. You might want additional groups for Singleton Controllers, and widely used models, extensions
ITT: literally just optionals
&gt;Apple created Swi and has been making and pushing towards the transition to make this the new one and only programming language for Apple development. No, they haven't. That's wishful thinking bullshit. 
Overall, I think this paper does a good job of comparing similar language constructs between both languages, but what catches my eye is the little factual errors that crop up in the middle of otherwise well-formed analysis. Some of these can, I think, be attributed to translation errors (I assume this document was originally written in Dutch). &gt;The most important factor being that in Objective-C the programmer is to handle memory management on its own. This would be true, but for the example you gave showing two-step initialization of an Objective-C object. Automatic Reference Counting obviates your need to think about memory management for that example. A better one would have been demonstrating the process of allocating a CoreFoundation object in Objective-C versus allocating one in Swift where the memory for that object must then be explicitly managed versus automatically managed respectively. &gt; Objective-C is a lower level language then Swift... Debatable. Objective-C code does not lower well to machine code because it constantly bumps up against the boundary of the runtime. There is very little optimization that can be performed without disturbing the dynamic semantics of the language, and thus in most cases Swift code comes out "closer to the metal" than the equivalent Objective-C. There is also this odd presumption that just because Swift explicitly marks lower-level constructs like raw memory/raw pointer access as "unsafe" that it isn't supported at the same level as Objective-C. Rather, the intent of these APIs is clarified, but the functionality is all preserved and maps onto the constructs you're familiar with. This argument, of course, ignores that Objective-C is a strict superset of C. In that sense, yes, you can write a C program that fiddles with raw memory in ways that swift couldn't and run it through an Objective-C compiler and it would Just Work™. &gt;with the ability to handle null objects and work with pointers. You make this claim twice, and both times it's spurious. I'll address the second one below. &gt;SmallTalk was the very first programming language to support classes and object This is downright untrue. SmallTalk may have been where OO came into its own, but Simula came well before it and introduced the concept of a "class" explicitly. The study of Object-Oriented systems well predates SmallTalk. &gt;and was based on the Procedural language we all know and love still today called C. This is also untrue. SmallTalk and C were developed and released during the same time period (around 1969 to around 1972). They cannot have "influenced" one another other in the sense you mean here. If you spend time with either language, it quickly becomes apparent that they took quite distinct approaches to support their respective paradigms. &gt;Swift is also unable to deal with nil objects or null objects as they are known in C++ This is not true. Nullability is a concept that both languages must deal with, Swift has just decided to encode it in the type system (where it belongs). &gt;This while Swift almost has no similarities at all to C++. I'm not sure where this is coming from, but I invite you to read both specifications. The inspiration is quite clear.
shhh
What to do with the fields in the enum types. When to use ! on optionals was another big one.
This has actually been in Windows 10 since the Anniversary update, and Swift works on it! If you have the Creators update, download the 14.04 build of Swift. You will need to `sudo apt install clang` and one other dependency that I can't recall right now.
Sounds like you still don't understand Optionals. A good way to think of them is to compare to ObjC. In ObjC all variables/pointers are optionals by default; they can be the type you expect or nil. In Swift, only Optionals can be nil, a regular variable must always have a value. if let myVar = myOptionalVar {} Is just the equivalent of if (myVar != nil) {} Also force-unwrapping is as used as the old GOTO statement. Sure it's there, and some advanced code might need it, but if you're using it you should really think if what you're doing can be done in a better way.
Ffs yes, same here. Now I feel like Shaft when I write my own function that takes a closure. 
Hello David, While you can we're Swift code in Atom, and compile in Xcode, I wouldn't recommend it. Xcode is built so it's easy to interact with the Apps UI. Drag and drop, autocomplete etc. Best of luck!
I don't follow. MVC is covered in [lecture 2](https://github.com/duliodenis/cs193p-Winter-2017/blob/master/slides/Lecture-2-Slides.pdf). I used the class to get a pretty good understanding of Swift. What courses / website would you recommend?
Initializing sub classes 😩😩😩 I still don't understand 😞 Sub classing is so difficult for me I don't know how to create sub classes with different properties from the parent class.
[I wrote this article on Optionals](https://hackernoon.com/optionals-in-swift-for-newbies-7199a30707d5), hope it clears things up! 
I still don't fully understand applied covariance, contravariance, and invariance in conjunction with generic classes/protocols... 
Objects not ObjC primitives. Yes Optionals are a wrapper, actually an enum, but generally thinking of them as an ObjC pointer to an object can really help out the beginners I work with; although most beginners I work with actually have a Java background where everything already is an object, so perhaps the leap is easier from that mindset.
Yeah I know what you mean, what would you reccomend? just something like ` if someString != nil {print("has value") }` ?
If you are planning on checking if a string is nil by checking if it equals "No value"... no. Do not do that. Please. Don't. Please, please, just work with optionals. Learn how to use them. Do not try to circumvent them. Other languages do not have optionals, and *needing* to get around the lack of an optional type in those languages is a pain in the ass. Swift added optionals for a reason. Learn to love them because they encapsulate a lot of logic in a very lightweight container.
Yes very true. My func seems overkill after your example.
Not my most problematic area but to be original I'm gonna say Strings. Swift just handles them so strangely compared to everything else I've used 
If you hit a wall with generics, either because the language is not expressive enough or you haven't learned the right idioms yet, you can always shove some casts in there at first and gradually refactor your code over time. One weak spot with generics right now is diagnostics; it would be easier to learn if the compiler did a better job of telling you exactly why a generic method cannot be applied.
Optional is defined as an enum in the standard library; maybe it would be easier to learn enums first, then learn how Optional is kmplemented, and only then learn the additional sugar provided by the compiler, such as ? syntax, if let, etc.
For someone totally new to programming thinking of optionals as enums is the way to go. Null pointer values are an anachronism and don't make much sense as a concept.
&gt; ARC was about automating memory management, which at the time was the biggest stumbling block for beginners and was syntactically verbose and ugly (sound familiar?) Yep. Unfortunately ARC didn't go all the way in eliminating undefined behavior. You still had nullable references and the lack of typesafe collections, which means any method call anywhere can fail because the receiver is not the type you expect. And the surfacing of unsafe C pointers whenever APIs trafficked in structs, which came up quite often because Objective-C method calls and object layouts are not efficient enough for many use cases. Fixing these problems is not really possible by incrementally extending Objective-C though, which is why Apple built a new language.
&gt; Debatable. Objective-C code does not lower well to machine code because it constantly bumps up against the boundary of the runtime. On the other hand Objective-C exposes a lot of undefined behavior compared to the safe subset of Swift, so it's lower level in that sense. &gt; There is also this odd presumption that just because Swift explicitly marks lower-level constructs like raw memory/raw pointer access as "unsafe" that it isn't supported at the same level as Objective-C. Rather, the intent of these APIs is clarified, but the functionality is all preserved and maps onto the constructs you're familiar with. The main shortcoming of Swift here - or really any high level type safe language that exposes raw pointers in this manner - is that the unsafe code ends up looking a lot more verbose than C. C is basically a domain specific language for writing unsafe code. If you have a Swift function or two that uses no Swift features and just manipulates pointers, there's little to be gained from not rewriting that one bit in C.
Fucking this
&gt; If your program requires a middle name, why make it an Optional at all? Maybe some place else you don't need it? Maybe you're unsure whether it'll have a value or not when you get it from an unknown source such as a database, a user, a third-party, etc? &gt; If you're just going to throw an exception, why not use forced unwrapping? So you can be specific about the exception that's being thrown. Particularly useful if you have your own set of exceptions. Alternatively, maybe you assign a different value to middle in the else block: guard let middle = middleName else { let middle = "" } 
If I understood you correctly, you want the subclass to remove some of it's superclass properties, right?
I've always wanted to do this.
At first, generics and closures, hands down. Especially the strong / weak dance when using closures on reference types, to avoid retain cycles. Now shifting my thinking towards functional programming is giving me a slight headache, but it's not that bad compared to understanding generic types.
To be honest, just use a class until you get a feel for the rest of the language. There are a lot of confusing topics in Swift and trying to program for efficiency in 101 is pointless. An enum, however, is totally different than a class or a struct. It's an enumeration of options. So if you had class Coffee { var size: Size enum Size { case small case medium case large } } An enum enumerates over the options for the size of a coffee and gives you a typesafe implementation. let coffee = Coffee(size: .small) But as a general rule, structs are never shared and classes are. If you need something to be shared between objects, use a class. If not, use a struct. 
Why not : let sv = StackView(arrangedSubviews: [nameTextField,bar,passwordTextField]) sv.layer.cornerRadius = 3 sv.layer.borderWidth = 1 sv.layer.borderColor = UIColor.lightGray.cgColor
ooh so close, optional unwrapping is ? or !, conditional binding is the one you're looking for.
Put the textfields in a container and round all four corners of the container. 
Does this work? UIStackView is a non rendered class, so I didnt think changing its view properties would do anything
There are some good reasons IMO, like performance, different implementation, etc.
Just to clarify the last part if anyone needs it, structs are *value types* and classes are *reference types*. Really important to understand the difference: https://www.raywenderlich.com/112027/reference-value-types-in-swift-part-1
Which corners are you talking about? You have a four side rounded rectangle containing two textFields with no borders. What I mentioned would round their parent view which would look similar to what you want, though you'll have to adjust the spacing. And as mentioned below, stack views might not render. If they don't, embed it in a normal view.
I still take issue with the last claim. We do model nil and NULL.
I have just released version 2.0.0 of my Great-Circle mathematics helper library, [Euclid](https://github.com/timsearle/Euclid)! Big project re-structure, testing and building are no longer separate schemes in the project and it now supports all major Apple platforms. Added a few new features around coordinates existing within bounding boxes and a new bounding box transform function. Pull requests welcome!
Swift's optionals make people feel unhappy.
!: what is my purpose. Xcode: you unwrap optionals. !: my god.
You could also do: let fullName = [firstName, middleName, lastName].flatMap({$0}).joined(separator: " ") The function flatMap() used like this will remove any elements of the array that are nil, then the remaining elements are joined by adding a space between each one.
Especially in tutorials. I've seen the instructors write out code and then basically say, "write what I'm writing", so when I first saw `_ in` for the first time, it made no sense what the hell was going on. 
Optional unwrapping is a general term that encompasses all of the above, a forced unwrap is still an unwrap. You were specifically complaining about the if let syntax which is a conditional binding. What would you suggest in its place? I agree it is not the best syntax, but I have trouble thinking of what I would do instead.
A closure is basically a portable function. For example, the following function that adds 2 numbers. func add(num: Int, num2: Int) -&gt; Int { return num + num2 } If you were to declare a closure like above, it would be like this. Notice the type of the closure. It accepts 2 integers that return an integer. let someClosure: (Int, Int) -&gt; Int = { (num, num2) in return num + num2 } You can also pass closures to functions. Here's the function declaration that accepts a parameter closure that accepts 2 integers and returns an integer: func something(closure: (Int, Int) -&gt; Int) { //other stff closure //the closure is executed here } When you call the function, you can basically write the closure inside the parameter. Closures must be inside curly braces, unless it's a trailing closure. something({ num1, num2 in return num1 + num2 }) //Trailing closure works if the closure is the last or only parameter something() { num1, num2 in return num1 + num2 } These are dumb examples, but a good use of a closure is when you're making an API call and want part of code to execute ONLY if the data call works. For example: func makeAPICall(using: String, completion: () -&gt; Void) { //Run some call asynchronously using NSURLSession //Reach this point if it worked completion } And when you call the function, you can use a trailing closure to tell it what to do. makeAPICall(linkString) { in //code in here will run only if the api call succeeds //Like updating the view }
&gt; At the heart of the course is the use of a bespoke integrated development environment (IDE), rather than a converter, that allows coders to program in Swift instead of Java while using the normal classes of the Android SDK. So, * It's theirs and we can't have it * They assert it's going straight to java bytecode, not transliterating Swift into Java first. I guess that's possible but color me skeptical that anyone would do all the work to create that tool then limit usage to a teaching environment. If nothing else, what good does it do to get training in how to do something that you can't do outside the course?
It's not possible to remove properties when subclassing. You can only add stuff or overwrite. Let's assume that we have a superclass called Bird and we want to create a subclass of it called Dog. We would want to remove functions like fly(), because dogs dont fly :) But this is not possible. So let's do something different. We can create another class called Animal, and both Bird and Dog will be a subclass of it. This way, all the common functions and variables can be put into the Animal superclass, and everything unique like fly(), walk() or bark() can be put into the subclasses. If you need some more explanation you can PM me your skype username and I can explain it in a bit more detail :)
Basically sounds like they are using lab rats to test their product they will eventually sell. Not a bad thing per se, as long as people understand that. Edit: a word, and another word!
Okay that makes sense. Can you please give an example of subclassing bird and dog from animal? Thanks so much 
https://iswift.org/playground?xKMdj0 Edit: Also worth noting, generally Animal should be an abstract class (a class that can only be used as a superclass), but this is not possible in Swift (you can however use a protocol and extend it to achieve basically the same thing)
I would be interested in hearing how you went about creating this! Not an extensive list but just an over view. Also yes this is extremely cool, hope it gets some use!
&gt; One letter cannot follow the other. What is this supposed to mean?
If I have let letters = ["A", "B", "C",] There cannot be 2 A in a row nor 2 B nor 2 B in a row. The final cannot be A B B A C A The B's are wrong. Sorry I phrased it incorrectly.
You don't necessarily have to go to any Java code or bytecode. You can compile to the Java/Android ABI. That _could_ be how they're doing it. Qt does this with C++ to iOS/Android. But you still have the "middleware", which, like any cross-platform tool, is limited to the lowest common denominator at best. I don't know of any other cross-platform product that goes straight to the ABI on the Android side. Qt already had a GUI toolkit 20 years ago. I don't know how these guys could do this to any sort of real quality in 3 years (with an evolving language).
FYI (trying to be helpful not a grammar jerk but I realize it's impossible to tell from text) it's *per se*, latin for "in itself" Dunno if that's a typo/autocorrect or you're just used to hearing it not typing it.
No worries. Twenty years ago I worked with a guy who one day said something to me about *puh-suede-oh-code* and we went back and forth for a bit before I realized he meant *pseudocode*. Dude had studied compsci but somehow had either never heard a prof say the word or just hadn't noticed; all his familiarity with it was written. Smart fellow and a good programmer, it was just a blind spot for him. So I always try to politely say something to people who might just have a similar situation with a phrase and do my best not to be a douchenozzle about it.
Swift will soon be available on Windows natively https://github.com/apple/swift/pulls?utf8=✓&amp;q=windows
Thanks! Its not complicated at all once you get a grip on how masks work on a UIView. A mask lets you make part of the view transparent. You can check the source code on Github, its just around 200 lines of code.
 In general, to round half of a view's corners you need to: round all its corners, extend one of the dimensions (in cases like yours, the height), enclose it in view which clips off the extension. Let's see if this ascii art works: ______________ | ,--------, | &lt;- a mask-to-bounds view | | | | |_|__________|_| '--------' To do this for a bordered text view you'd have to customize its layout as well as its height, making this solution not really worth the trouble. Easier to give the text view no border and manage the outline yourself. Add the fact that you can border the whole group at once and not need this half-rounded trick, makes it a no brained to go that route instead.
As a related note: does anybody else that printing an optional requires unwrapping nowadays? When I printed an optional value, Optional(4) OR nil was EXACTLY what I wanted. I don't fucking want to unwrap it, I want to see it's value. I ended up writing a function pr(_ any: Any?...) { for a in any { if let a = a { print("Optional(" + String(describing: a) + ")") } else { print("nil") } } } I understand the absolute compliance to type-safety but print was perfectly type safe the way it was before. 
What?
I always thought that naming parameters was a childish thing. Before ObjC and Swift, I've never used any lang that had naming parameters. That and the in/out for reference/value passing... it make Swift seem like a child's language. I saw a quote about C++ from long ago about how we were ruining things by making the language easy. It made it so that non-programmers became programmers. That's what we're doing now, we went from programmers to 'coders' ... the sad part is that AI can code and these 'coders' won't be needed at all. They're ruining a great profession.
The article said native Android classes which are Java.
Thank you. I am also a beginner Swift programmer and your first sentence makes me feel a lot better.
Fetch a JSON api and display the data in a table view and show a detail view upon tap. 
Thank you for clearing that up, I appreciate the help! Sometimes the documentation isn't great with practical examples for beginners 
Thanks
Just why? Why not learn Java. What's the advantages of doing it in swift? 
As others have already said, put your textFields in a container which has rounded corners. In code... //: Playground - noun: a place where people can play import UIKit let container = UIView(frame: CGRect(x: 0, y: 0, width: 280, height: 91)) container.backgroundColor = UIColor.white container.layer.cornerRadius = 7.0 container.layer.borderWidth = 1 container.layer.borderColor = UIColor.lightGray.cgColor let usernameTF = UITextField() usernameTF.translatesAutoresizingMaskIntoConstraints = false usernameTF.placeholder = "Username" container.addSubview(usernameTF) let divider = UIView() divider.translatesAutoresizingMaskIntoConstraints = false divider.backgroundColor = UIColor.lightGray container.addSubview(divider) let passwordTF = UITextField() passwordTF.translatesAutoresizingMaskIntoConstraints = false passwordTF.placeholder = "Password" passwordTF.isSecureTextEntry = true container.addSubview(passwordTF) let views = [ "user" : usernameTF, "pass" : passwordTF, "divider" : divider] let metrics = ["hinset" : 10, "vinset" : 12] let horizontal = NSLayoutConstraint.constraints(withVisualFormat: "H:|-hinset-[user]-hinset-|", options: [], metrics: metrics, views: views) let vertical = NSLayoutConstraint.constraints(withVisualFormat: "V:|-vinset-[user]-vinset-[divider(==1)]-vinset-[pass]-vinset-|", options: [.alignAllLeading, .alignAllTrailing], metrics: metrics, views: views) NSLayoutConstraint.activate(horizontal) NSLayoutConstraint.activate(vertical) container.layoutIfNeeded() Looks like this: http://i.imgur.com/Rjh45r1.png (the blue border is from Playgrounds)
I covered how to do this in my [article here.](https://medium.com/@farhansyed/real-world-example-fetch-json-using-nsurlsession-and-populate-a-uitableview-3e5d84c87e68?source=linkShare-66b23f8728cc-1492125874)
No, he's asking why make android apps with Swift when you can use Java. 
I recommend: 1) Big Nerd Ranch iOS Programming https://www.bignerdranch.com/books/ 2) Stanford University iTunes U online courses https://itunes.apple.com/us/course/developing-ios-10-apps-with-swift/id1198467120
I couldn't figure that out, so I just subclassed the uibutton and it works from there.. thanks all for all your help!
Nice crash course. As a footnote, you can also cut down the size of the closure with [Shorthand Arguments](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html).
Yes! I was planning on doing Shorthand on another article. Didn't want too much information bunched up into one.
Thanks, but those are rather introductory.
 let moves = ["B", "D", "F", "L", "R", "U"] var randomArray : [String] = [] let firstElement = moves[Int(arc4random_uniform(UInt32(moves.count)))] randomArray.append(firstElement) var i = 0 while (i &lt; 20){ let randomIndex = Int(arc4random_uniform(UInt32(moves.count))) if (randomArray[i] != moves[randomIndex]){ randomArray.append(moves[randomIndex]) i += 1 } } 
Exactly, I made sure to note that in my post!
Great! So closures are just syntactic sugar for functions?
&lt;deleted because several people have already done the exact same thing: use a container view.&gt;
Publishing a lot of tutorials: https://www.reddit.com/r/swift/comments/65bvre/a_rapidly_growing_list_of_mongokittenswift_guides/
I think part of the motivation is to free Android development from the onerous licensing terms being put on Java by Oracle.
Not quite. Functions are actually a special case of closures that allow for things like naming in a different namespace and the use of required named parameters (and on the flip-side, closures get some things like sugar for shortening their definitions, etc.). Consider the following code: func hello(name: String) -&gt; String { return "Hello, \(name). Function \"hello\" welcomes you!" } let hello = { (name: String) -&gt; String in "Hello, \(name). Closure \"hello\" welcomes you!" } The first defines something named "hello" in the function namespace of type `(name: String) -&gt; String`. The second defines something named "hello" in the variable namespace (not sure of the official namespace designations, but note that the are separate as you get no 'invalid redeclaration' warning) with type `(String) -&gt; String`. Note also that the second one does not require a `return` as single expression closures do not have this requirement. Now if we call these two entities: let hiToBob = hello("Bob") let hiToRobert = hello(name: "Robert") We get the following output: "Hello, Bob. Closure "hello" welcomes you!" "Hello, Robert. Function "hello" welcomes you!" Now, if we only provide the function declaration with these two calls, we get the following error on the first call: Missing argument label 'name:' in call let hiToBob = hello("Bob") and if we only provide the closure declaration, we get the following error on the second call: Extraneous argument label 'name:' in call let hiToRobert = hello(name: "Robert") Which gives you a bit of an idea on how they differ when it comes to named parameters (note that if we declare the function as `func hello(_ name: String) -&gt; String {…}`, so that the parameter name is not required, then we get the error `Argument labels '(name:)' do not match any available overloads`). For a bit more in depth explanation of this and more, [The Apple Swift documentation](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html#//apple_ref/doc/uid/TP40014097-CH11-ID94) is a pretty good source of info.
It's primarily a list for getting started with MongoKitten, which is used for connecting to a MongoDB database.
Userdefaults stay in ram? I though it was basically limited single element Core Data. You want Core Data for this and leave userdefaults for holding things like user settings or um.. user defaults.
You're storing song files in UserDefaults? It's meant for settings—basically primitive types and the occasional array or dictionary. Shoving large binary blobs in there is a recipe for problems, as you appear to have discovered. You should use CoreData or the file system instead.
Yeah that makes sense... thank you. What do you mean by "use the file system"?
Read on Twitter: ! is the YOLO of Swift.
I'm work on probably one of the 5 largest swift codebases in the world. AMA 
Upvote for "screwing yourself in the ass"
An easy rule is to ask yourself, would it make sense to compare two of them for equality? If yes, then use a struct, otherwise use a class. Use a struct even if you don't actually conform to the Equatable protocol. Another question to ask, would the using code care if the thing was replaced with another thing that has all the same values? If yes, use a class.
This helped me a lot. http://stackoverflow.com/questions/29618760/create-a-rectangle-with-just-two-rounded-corners-in-swift/35621736#35621736 
Make a really good looking and thorough app and publish it on the app store and have 30 of your friends rate it 5 stars. Then make a beautiful resume. Yes, not having an education yet will hurt. So make up for it with work relevant skills. Also, be as ambigious as possible about your age. Don't list your high school graduation date, don't list your projected college graduation date. Just say "xyz University - BS in Computer Science - Current" or something like that. Getting past the liberal arts majors who scan resumes for checklists is the first challenge.
I'd look into the subscription feature in swipe. You don't want to store customer CC info in your app.
Thanks for your help. Are there any free alternatives you could recommend?
For me the ! is more like "You shouldn't do this, if let the shit out of it!"
I am inclined to say that yes, you could. I base this on having graduated high school in 1975 and being employed as a programmer since 1976 to the present (with occasional gaps of up to 2 years because I bloody felt like it). My first jobs were programming in COBOL, Fortran and assembler and atm I'm on a 6 month contract working on an app in Swift for a retail clothing designer/maker/seller. However, if possible, get the degree.
Thanks heaps. Yeah I just mean free to initially implement. I understand they charge for the most part based on transactions.
Not useful yet. Other languages like Python are far more useful for data science. They have all of the libraries, community, examples, etc. 
1. You can edit comments 2. It’s ok to say shit on the internet
Note that the Swift API guidelines, as of Swift 3, prescribes lowercase enum cases (e.g., "case one" rather than "case One"), so possible consider updating the tutorial to conform to this (as not to reinforce non-API conforming conventions in a beginner tutorial).
Sorry I knew that, I was just on my phone in bed right when I woke up. Eyes were basically closed. 
Stupid question from someone who doesn't know much about Swift - what the point of "case" keyword inside of enum? Other languages don't seem to need anything like that. 
Clearly, you should force-unwrap all your variables when using the Metal API, and be sure that all your variable names include an umlaut: // MARK: 🤘 let näme = MTLCreate​System​Default​Device().name!
Not all languages are the same. The use of `case` in an `enum` is to tell it well... the value is a `case` for the `enum`. It's just part of Swift syntax. Remember that Swift is a very safe language and doesn't like ambiguity or allow confusion. It's also like me asking, why don't they use case in Java like other languages?
That undeterministic runtime though.
Based on my own experience, (only went to 8th grade, never went to high school although not by choice lots of history there...) I'm now a Senior iOS Dev for a $2B a year company. So I'd say yes, it comes down to your drive, what your willing to give up so that your focus can be your goal. 
Yes that's what I need help with! I have stripe setup. I just don't know what to use to save payment.
I'm using a https://www.moltin.com ecommerce platform, so all I actually have to provide is the name of the payment I accept in a property called Payment Gateway in my Payment View Controller. Then in the Moltin web client I enable the Stripe Gateway and provide the Stripe client API key. So almost all of Stripes implementation is handled by Moltin's framework. When a customer purchases in the App's test environment, their order details are passed including the total price and their name and address, credit card details are validated and if all is well the order appears as an order on Moltins web dashboard and the payment goes through to Stripe. This is all well and dandy. But if a repeat customer comes they have to re input their credit card details. The account creations are handled by Firebase
Ive got a similar situation- can you tell me the names of some of your apps? I want to see what other people have done. 
Okay I see, well I ran my own backend in node. Basically from what I did is for example, when a user signs up for an account on the iOS application they have the option to store their credit card. (not on the app) I did this by when they enter a card, on the backend it creates a `customer` under my Stripe account, which I then would save the card to that `customer object`. You have to create ` one time tokens` to pass to Stripe. I'm not sure how you would do it with Moltin. Do they let you edit the code for your server?
I'll PM you. Don't want to have too long of a chat in the comments.
Show them the difference of block syntax. That should seal the deal, all by itself.
Swift is a lot easier to learn in a pure swift environment But lots of us did what you said
Do it! Pretty much all of apple's iOS libraries support swift so there shouldn't be anything you can't to in swift. You don't have to start from scratch as you mentioned, all new code can be written in swift and it's compatible with existing iOS code and visa versa. Although it's easier to use objc from swift than the other way around because swift has so many more features. Also, while the syntax may be more modern thus more familiar, it's a statically typed language with a lot of features so there's a high learning curve.
Honestly, for such a discussion I would also present the drawbacks: * Much larger app bundle size * Increased build times * Language complexity and counterintuitive and poorly understood performance characteristics * Having to deal with objc interfaces that don't elegantly import into swift * Having to learn and support two languages * And that swift is still pretty unstable and you will incur huge costs to update your swift code as the language evolves
free? you should be willing to support your fellow developers and respect their work by paying for it. 
Did you see what I said? &gt; Yeah I just mean free to initially implement. I understand they charge for the most part based on transactions. 
Just curious, why is your PM responsible for technical decisions? That should go through the technical Team Lead or Architect, not the PM. 
Swift enums are more powerful. The definition of enum associated types mirrors the pattern matching syntax in Switch statements, and ends up subsuming a lot of the functionality you'd see in unions, enums and bitfields as well as complex structures, in other languages. 
I have not released an app into the app store yet, but I have developed a few apps here and there. Web browsers, Instagram/twitter clones, etc. 
Swift enums can have methods, too.
Lol, I agree. "Why am I going to use Swift? None of your fucking business that's why".
You had a bunch of bullet points, but the only reason to switch in those is 'safer and more powerful.' You mention Swift being easy to learn, but if you already have objective-c code, that means developers already know objective-c, so learning a language is a negative. I use both languages daily and never felt that I needed more security or power while using objective-c. The real power is in cocoa. 
Do you think using Alamofire is ok? The course I follow shows how to parse JSON using Alamofire. 
Most of the swift code i've seen in the wild just throws ! Everywhere
I disagree that Swift is easier to learn. Writing good swift code is hard and you need a lot of discipline if you want to keep it readable, and interoperable with ObjC (basically forget about structs). The compiler errors are absolute shit too.
Don't switch to swift yet.
Header files tell you everything that you need to know about how to use a class.
Just my 2 cents. We are now shipping our 4th 100% Swift app. We started using Swift around Swift 2, and have been using it ever since. Every member of the team (AFAIK) feels this way: Migration is tough, but we still saved more time than when working in Objective C. We have no runtime issues (all of our apps are 100% crash free at this point) and we all feel like working is Swift is much save and "cleaner", and feels better. It just has better ergonomics. I also (personally) feel like Swift started a wave of new architectures and patterns, and a huge community around Swift and iOS development. In Objective C it felt like it was a small closed niche, now it feels like there's a huge community of people from diverse experiences contributing to the discussion and making best practices better. This is why I really like Swift and what it brought to iOS development in general.
Don't even need to ask, I'll always write articles. Just let me know if you ever get interested in something, I'll try to make an article about it to help you and others. 
Firstly, thank you for co-founding such a fantastic platform. You guys are doing great things, and I hope you continue to get the funding you deserve for what continues to be an excellent e-commerce solution. In Moltin's *Swift Example App* [Payment View Controller](https://github.com/moltin/ios-swift-example/blob/master/MoltinSwiftExample/MoltinSwiftExample/PaymentViewController.swift) Is line 17: *fileprivate let PAYMENT_METHOD = "purchase"* Where for example you could put a Customers Token to represent a saved card?
. Once you get used to it, you will be faster . It's fun . You might need to modernize your Objective C code to play nice with Swift. Adding nullability annotations and types to arrays and dictionaries will make your old code safer . New frameworks might be Swift only . Apple might release Swift only things in the future . Swift 4 will be source compatible . Your company will have an easier time recruiting iOS devs . Your developers will be happier knowing they are learning something that they sure will use in the future . Your company will start learning how to support Swift. All infra required to ship and test your app might need to be updated. Of course there are drawbacks. Greater app size, compile time and startup time on older iOS versions. You could also say that every line of Objetive C you write today is already obsolete. I know most people won't agree with this, but it might help with your argument. Good luck. 
So as a Swift "outsider", I have questions: 1. Is every major version of swift going to be a breaking change in the core language? 2. When macOS upgrades include XCode upgrades, does that force you into a Swift language upgrade? 3. Do new Swift versions invalidate old builds? (Will a Swift 2 binary work on a system upgraded to Swift 3?)
Except it's not what OP wants. He wants top left and bottom right corners only curved. The bottom left and top right would still be sharp corners. 
I work on a project currently using both swift and objective c. I am primarily a swift developer and have been able to pick up some objective c overtime. Here are several reasons I feel Objective C limits you: 1. limited support for generics 2. No default parameters - you have to create basically the same function twice and then also add that to your .h fil 3. Obj C to Swift bridging headers break at times 4. Swift class functions will not sometimes autocomplete in Objective C classes 5. Having to switch back and forth between two languages 6. Coding in Objective C for me at least is significantly slower (partly due to myself being a swift dev) and partly because you have to make a .h and .m file every time 7. Swift is able to pick up on things before compile team allowing for safer coding 8. Swift looks much cleaner with less brackets and without need of self being used for every single function or property. 9. More design patterns for Swift 10. Array of Objects in model objects - man NSArray for everything so annoying and then recasting 11. map, flatmap, reduce etc.. available for swift 12. Swift classes are way easier to maintain. I.e. you want to add new properties or remove them you do it in one file as opposed to doing it in 2 different files for Objective C. 13. Swift is open source and you have more say in the direction the language takes
true, but the vast majority of iOS is still written in objc (probably also true for macOS, but I'm less sure there). and as u/dov69 points out, apple never seems to update their swift example code to the latest version of swift, so all that code is now hopelessly stale. Related note: if you submit code with a radar that demonstrates a bug, do the apple engineers a HUGE favor and write it in objc. It's possible that your bug won't be looked at for a long time, at which point swift may have had several breaking changes.
By Interface builder do you mean Storyboards? They both use interface builder to construct views. Nibs were the older way of building views in the past, but are still common in a lot of instances, like custom table view cell. 
The fact that you inherited a lot of shitty code with a !s everywhere isn't a knock aganst swift, people will do dumb things in any language. 
Most coding challenges probably won't allow you to use Alamofire. But don't worry...using URLSession in some ways is almost exactly the same as Alamofire when it comes to parsing JSON Just look up "URLSession Swift 3 tutorial" and you'll see it's almost exactly the same. The only difference I think is that the closure for parsing JSOM with Alamofire is automatically handled on the main thread while with URLSession you have to manually put it on the main thread. But that's probably like 3-4 lines of extra code you have to write. Dealing with the threads is important too since they'll talk to you about GCD in the interview 
Fair enough on 3-5, generic nsarrays in obj c nice. Going to check that out and change as many as I can find. Any downside to using them? /u/Arkanta
Nope it's pure goodness. You might get warnings about old code, in which you'll have to check if your arrays are of mixed types, or just if you had a creeping bug To be perfectly clear, I think Swift will be really great in the long term. I can't wait for abi stability
Yeah, that's fair, I'm not suggesting the business side shouldn't give their blessing, especially if it would impact timelines in anyway. But that assumes that OP is Team Lead/Architect and the development team already signed on the idea so the next step would be the Product Owner. Ultimately I guess in depends on the company's dynamics. In my case PM would be the last person to give approval. and unless it requires massive changes to schedules, it would be approved mostly based on trust of the technology team. 
Neither. Do it programmatically
"You could also say that every line of Objetive C you write today is already obsolete." You can say the same thing for swift (:
well as a beginner i can't see the problem...what is the fix?? Guard? if let? ! or ?
Always move the selected element to the end of the array (then the array has to be var instead of let) and only create random between 0 and count-1 (except for the first element). Or if you want to create a lot of these random arrays (or a very long array), you can create multiple "moves" arrays and always use the one that doesn't containt the last element (you can store them in a [String:[String]] and the key would be the String that's not in the array). Generally it's a good idea to avoid scenarios where if the random generator always rolls a specific number, it is possible to get into an infinite loop.
&gt; Bundle size I didn't ( and honestly still don't ) care about so that didn't play a factor at all in my decision. Doesn't seem like a big deal to me either. Are people really saying that this could be a factor compared to other things like image assets? &gt; Build times dropped exponentially once swift was removed (this was a huge factor). A slightly larger issue, but as long as you aren't doing clean builds all the time, manageable. I can see it being an issue with larger teams and teams that are doing a lot of automated testing and such. &gt; Swift is not simple. You can still write some really shitty swift code. I replaced some shitty swift code with infinitely more maintainable objective-c. language doesn't mean anything in this regard There's definitely a high learning curve, but I believe it's worth it. Most of the features are there to help you write more readable, more maintainable, less error prone code. So you have some pretty powerful tools in your hand once you learn it. The language documentation is actually really good so that helps. It also helps that the syntax is more modern so there's some familiarity for people coming from other programming languages. For experienced developers wanting to learn objc for the first time, the syntax kind of makes you want to barf. &gt; interop is a pain in the ass. oh you used this swift specific thing? whoops It's easier to use objc code from swift than the other way around. In most cases, you're writing new code in swift on top of an existing objc code base so you're importing objc code into swift and it shouldn't be an issue. &gt; learning/managing two languages wasn't the worst thing but it definitely lead to stupid errors like adding unneeded ;. And forgetting necessary ;. Same problem with self Maybe focus on becoming experts on swift and write all new code in it. Then just maintain objc code which should only require familiarity of the language. &gt; Swifts instability, or breaking changes between versions, whatever language you choose to use, especially being the single engineer responsible was the other largest factor (aside from compile times) as to why i purged swift. While changes suck, isn't it a good thing that they're trying to improve the language. As the language matures, hopefully changes will become more incremental and less breaking.
I'd say do a staged conversion. Start doing new requirements in Swift, and maybe parts that require significant changes. That way, the developers get used to Swift, while still maintaining a largely Objective-C system. 
You can cut your monolithic storyboard into pieces, and connect them with segues by using Storyboard Reference objects in place of the destination controller.
Well we already know that we'll have to migrate from Swift 3 to 4, don't we? (Just like from Swift 2 to 3) So if you are on a project that goes on for a longer time, I would recommend staying with Objective C until Swift gets mature enough that you won't need to migrate the whole codebase every year.
&gt;A slightly larger issue, but as long as you aren't doing clean builds all the time, manageable. I can see it being an issue with larger teams and teams that are doing a lot of automated testing and such. True, but this was also before swift had incremental compiles so any changes anywhere in the codebase caused an entire rebuild. Also, Travis was _much_ slower to adopt at this time so CI was also painful. But yes, currently those two pain points should mostly be resolved. &gt; It's easier to use objc code from swift than the other way around. In most cases, you're writing new code in swift on top of an existing objc code base so you're importing objc code into swift and it shouldn't be an issue. absolutely 100% true. And you can write swift that can be called from objective-c and have that as a middle layer between your incompatible swift code (which we had, may have attributed to some of the other issues at the time too considering swifts age) &gt; Maybe focus on becoming experts on swift and write all new code in it. Then just maintain objc code which should only require familiarity of the language. While I can agree with this, the team I'm on was all Objective-C developers. I was the only one using swift. That _did_ play a factor in my decision so its not going to be the case with all teams ¯\\_(ツ)_/¯ &gt;There's definitely a high learning curve, but I believe it's worth it. Most of the features are there to help you write more readable, more maintainable, less error prone code. This.... I think is the goal, absolutely. But, as was stated before, you can write shitty code in any language. What is safe in swift at one point leads to compiler battles down the line at others. its a trade off for sure. &gt; It also helps that the syntax is more modern so there's some familiarity for people coming from other programming languages. I'll be honest, this isn't even on my radar ;) &gt; For experienced developers wanting to learn objc for the first time, the syntax kind of makes you want to barf. I personally love the sentence like formatting of Objective-C and the very clear differentiation (via code style) of `[some method]` versus `some.property` but i mean that's matters little to none really. Since Swift 3.1 has been released I need to look at the road map for swift 4. I know some newer members of the team would like to see swift again and i'd definitely like to start using it again where we can. All my pains and qualms were with old swift, new swift fixes nearly all my issues which is great! I guess my point is, swift is great but its not a silver bullet. Just trying to give another viewpoint ¯\\_(ツ)_/¯. Everything, especially introducing a new programming language should be considered carefully and on a team by team basis. But, like I said, I'm seriously thinking about introducing swift into the code base again where we can. Mostly depends on how bad the Swift 3-&gt;4 transition will be. 
This is awesome! I was preciously using a similar extension to return each font I had used. This is much better. Thanks!
I actually started with that, but they had a "bonus challenge" to include an if/else and switch statements. I wasn't sure how to incorporate the if/else, switch and for statements without it being repetitive. I've added the challenge summary to my post. Thank you for your suggestion as well!
I see, I still believe you should not use a while loop in this scenario as it's kinda counter intuitive and makes it a bit more sloppy to read imo (Didn't test this) but you could just use an index and a string to solve it with a for loop. for i in 1...100 { let counterTuple = (modThree: i % 3, modFive: i % 5) var text = "" switch counterTuple { case (0,0): text += "FizzBuzz" ... etc } text.isEmpty ? print(i) : print(\(text)) }
I used to think like what you just thought. But after a certain point in time I realized that all those lines were mere boilerplate, the component logic should be as generic as possible and separated from its specific configurations and I was intertwining nonsense yarns of bindings with these components. It was when I learned to stop worrying and love the Interface Builder.
You have 2 things to set up: 1. Fix up the JSON parsing 2. Pass the data to the table view At the top level of your JSON, you have an array, not a dictionary. It's an array of dictionaries (one for each movie / book). So when you get the data from the networking call, you need to turn it into an array then parse each dictionary in that array. Before we do that, let's get rid of the implicitly unwrapped optionals. If you just make the vars strings then you can handle empty cases by assigning an empty string if you don't have data (since that's what you want to display). And give them a default value so that when we parse the JSON we can just leave them that way if we don't find a value: var title: String = "" var author: String = "" var imageURL: String = "" Since the network call returns an array of Potter objects in the JSON, there's no need to create a single Potter object to call the function. It'll be easier to call it if it's a class function and it won't leave an empty object hanging around: class Potter { var title: String = "" var author: String = "" var imageURL: String = "" static let POTTER_URL = "http://de-coding-test.s3.amazonaws.com/books.json" class func downloadJSON(completionHandler: @escaping (([Potter]?) -&gt; Void)) { // ... } } I also added a *completionHandler* to the function, we'll use that to pass the data back to the table view. Don't bother with it right now, first we need to get the JSON parsed. if let content = data { // create an array to hold the objects parsed from the JSON var potters: [Potter] = [] do { // Check if the JSON is valid and it's the type we expect: An array of Dictionaries ([[String: Any]]) if let jsonArrayOfDictionaries = try JSONSerialization.jsonObject(with: content, options: JSONSerialization.ReadingOptions.mutableContainers) as? [[String: Any]] { // loop through that array and take each dictionary so we can create a Potter object from it for potterJSON in jsonArrayOfDictionaries { let potter = Potter() if let title = potterJSON["title"] as? String { potter.title = title.capitalized } if let author = potterJSON["author"] as? String { potter.author = author.capitalized } if let imgURL = potterJSON["imageURL"] as? String { potter.imageURL = imgURL } potters.append(potter) } } } catch { print("not a JSON dictionary") } // TODO: have all of the Potters, return them return } That should work to parse all of the JSON. Now we need to return it to the table view. We'll use the completion handler to do that. We can't return it directly because the network call is asynchronous. The completion handler lets us provide a bit of code when we call the parsing function that we can call when it's done. So when the parsing function is done (because it finished parsing or encountered an error) we call the completion handler to notify the table view controller: class func downloadJSON(completionHandler: @escaping (([Potter]?) -&gt; Void)) { let url = URL(string: POTTER_URL) let task = URLSession.shared.dataTask(with: url!) { (data, response, error) in if error != nil { print("Error") completionHandler(nil) return } else { if let content = data { var potters: [Potter] = [] do { // do parsing... } catch { print("not a JSON dictionary") } completionHandler(potters) return } } completionHandler(nil) } task.resume() } And finally, we need to call that. Assuming you want to reload it whenever that table view is shown: override func viewWillAppear(_ animated: Bool) { super.viewWillAppear(animated) fetchPotters() } func fetchPotters() { Potter.downloadJSON(completionHandler: { potters in if let potters = potters { self.potters = potters } else { // TODO: handle not loading data } self.tableView.reloadData() }) } So we call *Potter.downloadJSON*. If we get parsed results, then we assign them to the variable in the table view controller and reload the table view. Then you can display them like this: override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return potters.count } override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let cell = tableView.dequeueReusableCell(withIdentifier: "Cell", for: indexPath) let potter = potters[indexPath.row] cell.textLabel?.text = potter.title return cell } This code leaves out any real error handling (other than not getting items from the JSON). If you wanted to do different things for different errors (e.g., tell them when they don't have an internet connection), add an error param to the completionHandler and give it an appropriate error: class func downloadJSON(completionHandler: @escaping (([Potter]?, Error?) -&gt; Void)) { let url = URL(string: POTTER_URL) let task = URLSession.shared.dataTask(with: url!) { (data, response, error) in if error != nil { print("Error") completionHandler(nil, error) return } else { // do parsing // hand back results like: completionHandler(potters, nil) // and create &amp; hand back an error if the JSON can't be parsed } } Then handle it in the table view controller: func fetchPotters() { Potter.downloadJSON(completionHandler: { (potters, error) in if let error = error { // TODO: handle } else if let potters = potters { self.potters = potters } } self.tableView.reloadData() }) } 
This is also how I do my app-specific styles.
Thanks!
Great job! I've just finished app where I had to use 100 of different fonts (about 90% of them were custom fonts), and I had problems implementing them as I wasn't sure what is the "correct" name of the font for use in code. I had to create the loop which printed all fonts available in the app and then go through the console to add them with correct name. Such autocomplete would save me a lot of time.
Oh, very good point!
I read this challenge as solve it both as a switch statement and as an if/else. I think they were trying to get you to do it both ways so you could learn the differences and possible see where and how to use each type of construct. So ignoring the weird if statement to exit your structure, I like the basic design. Only thing I think I'd change is instead of storing the mod results I'd rather see a bool, that way your switch isn't comparing to 0. Just looks a little weird when reading the statement, also I'd compact this down a bit, no reason to store a separate value for you tuple calculation: (1...100).forEach({ (counter) in switch (isFizz: counter % 3 == 0, isBuzz: counter % 5 == 0) { case (true, true): print("FizzBuzz") case (true, _) : print("Fizz") case (_, true) : print("Buzz") default : print(counter) } }) 
Do you have any good tutorial on this? 
I prefer not to use 3rd party frameworks when starting something new because then I still wouldn't know how to constrain things on my own.
Just try looking at the code and figuring it out. 
Referencing the book, the chapter is basically week two of an "Introduction to Programming" book. Closures are absolutely out of the question.
I agree that looking at more iOS specific ways of doing this is would be recommended(SpriteKit etc). However if you DO want to do graphics manipulation on a timer, you should consider using CADisplayLink instead of a normal timer: https://developer.apple.com/reference/quartzcore/cadisplaylink It's a timer that's bound to and synced with the screen refresh rate (so 60 fps). 
This looks much cleaner, Thanks for the suggestion! The bool switch case is much easier to read.
&gt; Personally, I see header files as a positive. being able to see what a class claims to do why being able to totally ignore the how is a feature. But that's just me, that's a subjective point. I agree. That's why I love that Swift has header files -- they're just automatically generated from the public interface you give your class. Instead of retyping (or copying) 1/10th of your source code again, and then having to keep two similarly-named files in sync for all time, you just mark parts of your class "public" or "private", and the compiler generates the correct header files for you. All of the benefits, and none of the downsides.
A swift function generally looks like this: `func functionName(argumentLabel parameterName: ParameterType)` In your function the argument label and the parameter are the same. func hello(name: String) -&gt; String { // ^^^^ argument label and parameter name return "Hello" + name } hello(name: "mfnotech15") // ^^^^ argument label It's a shorter version of the general form from above: func hello(name name: String) -&gt; String { // ^^^^ argument label // ^^^^ parameter name return "Hello" + name } hello(name: "mfnotech15") But parameter name and argument label don't have to be the same: func sayHello(to name:String) -&gt; String { return "Hello" + name } sayHello(to: "mvnotech15") Or you can specify `_` to have no argument label: func hello(_ name: String) -&gt; String { return "Hello" + name } hello("mfnotech15") ---- I can't help with your second question. You didn't post all the code. And I won't bother to figure out the number(_:isDivisibleBy:) function myself. Neither will I look up the leap year rules. Generally for debugging you want to break these multi condition statements into individual ifs. So you can use breakpoints or print() to figure out what is going on So for example instead of if condition1 &amp;&amp; condition2 { return true } else { return false } write: if condition1 { print("Condition 1 true") if condition2 { print("Condition 2 true") return true } else { print("Condition 2 false") return false } } else { print("Condition 1 false") return false } 
Yes sir.
When I first saw OOP code almost 20 years ago (this was before Java,) there was a lot of disagreement about its value, but I thought to myself, "This is the future of programming." When I first saw Reactive programming 2 years ago, I again thought to myself "This is the future of programming." I would not be surprised if, 20 years from now, this is the default style. 
You could replace map().filter().map() with flatMap() on lines 63 and 76. 
Thats a great idea, and I will implement that soon! Yeah, having all of the standard system fonts and custom fonts the developer installs in the same struct would allow the user to use the `UIFont` extensions as is. 
thats the one, thanks!
You can think of parameters and argument labels as internal and external names respectively. Applying Swift coding conventions your functions are likely to look like this func someFunction(externalName internalName: Type) -&gt; returnType(if any) Which would look like func someFunction(argumentLabel parameter:Type) -&gt; returnType External names are what you'd pass onto a function when you call that function. Internal names are the name of that variable that you can use inside the function. As for your leap year code it's hard to say without seeing your full code. I'm not sure what exactly the number(year, isDivisableBy:) logic is, or if number is a variable or class. What I'd suggest is to firstly break this down into logical operators opposed to methods. So If year % 4 == 0 { print("year is divisible by 4") } If year % 100 == 0 { print("year is divisible by 100") } Etc. Then combine the statements If (year % 4 == 0) &amp;&amp; (year % 100 == 0){ print("some statement") } I'd try it this way until you figure out this way of debugging and statement building before trying to complicate it with the number(isDivisableBy:) function.
Yea, the old rule was to import as little as you can and only import what you need as everything you imported would be linked to the binary. BUT, I'm pretty sure the Swift compiler and the dynamic loading system is much smarter than that. But nonetheless, the old minimize-youre-imports is still the norm. Read both all the way through. You can start on the iOS one whenever you want, but know when to stop and read further in the Swift one when you get caught.
That last part doesn't add up. "Migrate ASAP If you wait too long, just like with everything, it becomes a pita to update to the latest ver" If you use that logic, you would have gone with Swift 1, then had to get rid of For..Next loops and upgrade over and over again. People coming in today, can forget ever prior version of Swift and just go with 3 or 4 when it comes out. When I started, there was no ARC, we learned to reference count. Then ARC came out and all that knowledge was pretty much worthless. If I had waited, I wouldn't have bother with pre-ARC code. I'm not saying wait forever, but just look at the basic changed Swift has done. Something as basic as a For..Next loop? Really? WTF was the logic in adding the For..Next, then removing it later? The better choice is to wait until the language figures out what it's going to use and becomes stable. Apple fan or not, Swift was a fumble and they really need to make good on this. Having said that, I await 4 and hope it at least fixes most things.
I didn't downvote you, but my guess is that the downvotes are due to the lack of content in the comment. You took an opportunity to make a dig at RxSwift, and that's it.
yeah `CADisplayLink` is definitely better, I just didn't mention it because it would have been a solution to a problem that doesn't need to exist :)
Ok, I misunderstood what you said. Upgrading inside of Swift, you're 100% right. I would ignore everything but the latest version of Swift. As far as Swift evolving, yeah, that was a big mess. I started the day Swift came out, read the book, liked some, loved some, hated some. I still think named param is childish, and will never forget the For..Next loop... A loop that I've used for decades is now gone... IMO, there's one thing that really sums up Swift, it's the unwrapping of optionals. New people don't understand the concept, so they just do a gratuitous unwrapping of optionals. This sums up the real problem that started back with OO. Object oriented programming is seen by a noob as something to work around, to the pro, they take the time to really understand class development. When to used final, overrides, etc... They are rules that all the other programmers are supposed to follow, yet a noob just see is as something that's in the way of them writing code. Apple tried to make things simpler, I've seen some Swift code that is nothing close to simple. Making it simple just made it easy for non-programmer types to pretend to be programmers. It's like letting all the driver's ed students onto the freeway at rush hour.
It depends where you work, if you are good in programming you can get a higher salary than someone who works for years in a company, this is from my experience what I saw!
I made two replies. The first two in the thread. My first reply was the map().filter().map() comment. A purely technical detail. My second reply was an architectural consideration. Which is pretty much my job, so it's what I do in code reviews. Saying "let's not increase our external dependencies in this case" is a necessary part of the code review process. So no, it wasn't just "taking a dig and walking away". It was an important factor of code review. Which is what's got me curious. Are the downvoters not recognising the value off that facet of code review? Or are they just butthurt that I didn't like their particular external dependency? 
I feel like it's a bit too much to introduce new syntax just for this proposal, I can't see many use cases. This is something that bothers me with Swift in general, remember the [Operator Precedence](https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md) proposal? // Before infix operator &lt;&gt; { precedence 100 associativity left } // After precedencegroup ComparisonPrecedence { associativity: left higherThan: LogicalConjunctionPrecedence } infix operator &lt;&gt; : ComparisonPrecedence We introduced a really complicated model, which I had to look up every time I needed it, for operators in Swift? How many times did you really need that flexibility? &gt; Now it is not possible to insert any custom operator between &lt; and ??. Who in their right mind would want to declare even more operators, this goes against Swifts general mindset of being explicit about things. Now, I'm sure you've heard about Haskell, it's a language that's famous for its extensive use of operators. I'll tell you how to declare this new operator in Haskell: infixl 4 &lt;&gt; Beautiful. Think about it, a language where operators are overused as hell can cope with this simple model for more than 25 years, while Swift thinks it needs something better after 2 years? This brings me back to my original point, if we continue to add syntax and semantics without considering the real benefit and need for it, Swift will become a bloated mess.
While we're at it... I think the operator system in Swift is a complete and total screw up. It literally enables nothing but for Haskell guys to write functional libraries with custom operators. Custom operators breaks EVERY SINGLE RULE on this page: https://swift.org/documentation/api-design-guidelines/ &gt;Clarity at the point of use You can't get less clear &gt;Clarity is more important than brevity. You can't possible sacrifice any more clarity to gain any more brevity than you can with operators. &gt;Include all the words needed to avoid ambiguity There are no words and absolute ambiguity. &gt;Omit needless words. lol &gt; Name variables, parameters, and associated types according to their roles, Again... &gt; Compensate for weak type information Doesn't happen... &gt;Prefer method and function names that make use sites form grammatical English phrases. ... Etcetera. This operator system is clearly in absolute violation of Swift's API guidelines and yet it still is a determining factor in various sections of the language (including using the dreadful `!` prefix operator instead of `not` and `&amp;&amp;` instead of `and`.) 
OP provided no context. They asked for a code review. That means the entirety is up for review. And if I were doing my job, without any other context, then one of the most important parts of that job while doing a code review would be to say "No. You cannot import this lib into the project." &gt; A review of "Don't use RxSwift" is about as relevant and helpful as if you'd told them they should be writing in Objective-C because you don't like Swift, No. There are fundamentally different considerations between that question and the question of using a lib like RxSwift. The two have no crossover that makes them comparable. The comparison doesn't work at all. &gt; you weren't trying to help somebody out with a code review, you were trying to take a dig at something you don't like. No. It is my professional opinion that a dependency on something like RxSwift is a detriment to any and all projects, and should be highlighted in a code review. It would also disqualify someone in an interview.
And, as you can see, the other post got the upvotes. I'm not disagreeing that RxSwift is a somewhat large dependency – it's why I am hesitant to use it as well. However, OP did mention that: &gt; This uses RxSwift to implement a generic paging download system. It seems to imply that RxSwift was not in the scope of the review; that it's a precondition of the solution. --- I think it's your second sentence reaping you the downvotes. To me your parent comment read like: "if this project was using RxSwift, it would not be good-enough for me". Even a couple of sentences elaborating on _why one shouldn't add RxSwift dependency for just one task_ would've been significantly more valuable. In my experience, the _why_ is a very important aspect of feedback. And between the initial post, the edit to express puzzlement at downvotes, and all the follow-up discussion – it wouldn't have taken that much more time.
&gt; And, as you can see, the other post got the upvotes. Because this sub is populated by beginners and intermediates, at best. Understanding of broader considerations is sparse, and the majority of questions asked are neophyte. Ditto the answers given. &gt; I think it's your second sentence reaping you the downvotes. No doubt. But it had to be said. RxSwift is a bad paradigm, and a negative ingredient to add to any Swift project. &gt; And between the initial post, the edit to express puzzlement at downvotes, and all the follow-up discussion – it wouldn't have taken that much more time. I'm popping back here briefly while waiting for compiles. This ain't paid work for any of us, so anyone asking for a code review should take what they can get and make the best of it. Also, it wasn't puzzlement, it was curiosity. I *expected* downvotes. I'm well aware that these subs are populated by beginners and intermediates. What I was interested in is *why* they were downvoting. Did they understand the criticism, or not? The question was for their benefit.
Is there anything wrong with being a beginner? If you're aware of your audience, all the more reason to be explicit with your feedback. If you were curious if your criticism was understood, it might be a good indicator that your criticism was unclear. No one is paid to comment here. In the same vein, very few people are paid to maintain open source projects. As luck would have it, no one is forcing us to do any of it. &gt; RxSwift is a bad paradigm, and a negative ingredient to add to any Swift project. A couple of sentences as to _why_ would've been of much more value than this entire comment thread. And odds are, it would leave the comment with positive score, and perhaps someone else would read it, and learn about the potential pitfalls of RxSwift. I'm not disputing your review, but I _don't think_ it accomplished what you wanted it to. 
That's not my takeaway from this thread, but fair enough. Thank you for your time.
Sadly, RxSwift does not yet have a flatMap operator to do that yet.
Operators are useful when their use case is obvious (e.g. +, -), or common in programming (eg. !, %, &amp;&amp;, ||). It's recommended that you only use them in those cases, but they do allow very powerful use cases where using functions would be awkward at best. It's also recommended that developers of custom operators use them to wrap a function rather than implementing functionality directly, so users can call it directly. In conclusion, you're wrong, and your operator-less language would suck.
Yes, I was surprised that the author was thinking about Agile blogging in 2014... Very progressive guy! 
Good for you. I personally avoid third party dependencies whenever possible. You can constrain in code just fine anyway, there's a whole guide on it: https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/ProgrammaticallyCreatingConstraints.html
You want to use .png for your image format, its what iOS expects and it supports transparency. As for size it depends, sizes on iOS go in "points" vs "pixels" and its due to different screen resolutions and pixel densities. For example if your image is 25 x 25 points, the resolution on a non-retina display (which you don't really have to worry about anymore) needs to be 25 x 25 pixels, on a retina display it needs to be 50 x 50 pixels, and on an iPhone 6+ and 7+ it needs to be (I think) 75 x 75 pixels. All three images will look the same size with regards to the screen, but you'll need to provide your application with three different sizes in the image catalog (it will automatically switch to the one that is needed). 
Hmm I think that operator overloading is really useful (i.e. vector * vector) but not so much creating new operators. However, I'm a big fan of doing as much of the language in the language itself (all the operators are declared in the standard library, with the exception of optionals), so I guess I'm in support.
HINT: Size classes. If you ate using interface builder then you can click on vary for traits.
Starting the Swift programming book for the first time! I'm super excited about learning it. 
I'd rather mark an init as unavailable instead of private, mainly because it lets me define a custom error rather than the access level one you get by default, e.g. @available(*, unavailable, message: "Don't even think about it") init() { }
Nice! Keep it up
Use enum instead of the second one
Thanks for sharing this Lisa! It's crazy - I wrote that post back in 2014 and thought, "No one will ever read this or care about it." And at the time, I was right! haha Today, however, it was my most-read post because you shared it here. So thank you! Do you write anywhere by chance? 
I still practice my own advice with "Agile Blogging" to this day. I've circled back around to a lot of my content (including the "7 Reasons" post that Lisa referenced) and updated it with minor tweaks after publishing. It's definitely helped me get past that fear of hitting "publish". Glad you enjoyed it, Jie!
I.e: an empty enum acts almost as a namespace- no way to ever instantiate it. Ex: enum ColorHelper { static func darkenColor(_ color: UIColor) -&gt; UIColor { ... } }
The second part looks more java like then swift. It is much cleaner to just write an extension here for UIColor instead.
I liked your thoughts, that's why I shared it :) btw, I read you on Twitter and often check your blog. &gt; Do you write anywhere by chance? yes, I'm writing as well. I'm more focused on startup topics. I feel confident to write about things, where I have a lot of expertise (I've been running my startup for 2 years, so I have a lot of things to share). Because I'm still learning Swift I'm not sure, that I can write a solid article, which will give a lot of value. I don't want to write some clickable obvious stuff... Anotherer thing is time. To write one article takes me from 2-3 days to 1-3 weeks. Then it takes time to polish it (I'm not a native speaker). 
I love reading constrictive criticism!! Because it improves the language. Some nice examples from the recent posts: * [article](http://khanlou.com/2017/04/safety-in-swift/) about the cases, where the safety seems to be lacking in Swift * [Interesting thoughts](http://khanlou.com/2017/03/on-comments/) on dark side of commenting your code Posting some critics and suggesting a change to the Swift Evolution mailing list is a good thing! 
Are there any plans to make the keypaths observable but without KVO? Native Swift keypaths observing would be great.
Started learning Swift in January and I have just finished my 2nd app a few days ago. I am pretty impressed that I got 28 downloads (it is free app) and 3 InApp purchases even though I didn't promote the app to my blog audience yet. If anyone is interested it is fullscreen stopwatch app with customizable fonts and colors with built-in progress bar. [Check it here!](https://appsto.re/cz/FI55ib.i)
&gt; only static functions inside the Swift library are operators. (There are also a few static vars.) Since I'm not writing an operator or a var, that point doesn't hold either. 3) The only difference between a free function and a static function inside a protocol is the number of characters you have to type in order to call the function. It serves merely to make the name of the function longer. The name is already plenty long. &gt; For those reasons I see no value in making it a static function inside a protocol. However, I do see some stylistic value in making it a non-static function inside the PaginationUISource protocol. (Which is something that is done all over the place in the Swift library.) I guess I shouldn't be really inventing these arguments. My only point was that code should follow common conventions. Your logic function should probably be just PaginationSink.init (standard library seem to have shitload of inits everywhere), but I guess method will do too. Names look ok.
Hi, I'm the presenter of the talk. I'm happy to try to answer any questions here. Thanks to try! Swift Tokyo for making this talk happen, and thanks to Realm for posting it. (Note: Realm added the subtitle/tagline. It's not in the talk.) For more info, I wrote a few more things about the talk and conference on my blog. http://playcontrol.net/ewing/jibberjabber/swift-on-android-at-try.html Thanks for watching.
Step 4, panic when Realm decides to close / gets bought out / becomes more expensive. See, Google Reader, and Twitter's API shenanigans.
• UIViewController gets callbacks from the operating system for events in its lifecycle like viewDidLoad, viewDidAppear, and viewDidDisappear. Since the implementation of these methods in UIViewController does nothing, we subclass and override to take action when these callbacks occur. Sure, we could make a generic, reusable, subclass of UIViewController that just forwarded these methods to yet another object, but we'd still need to write _that_ object to hold our actual behaviors. • UIViewController is a bit misnamed. It isn't really a classic controller in the MVC sense. It is actually a small object that exists apart from and manages a view hierarchy. At the end of its init method the view hierarchy doesn't exist yet. That happens later, when loadView is called (which in turn happens automatically the first time you access the .view property of the controller) Our subclasses just happens to be a good place to put MVC-Controller code. • When, in the Storyboard editor you add an element from the library to your storyboard or .xib file, you are creating XML in the storyboard that, at runtime, will cause the object to be created, initialized, and assigned as instance variables to the IBOutlets it connects to (and in the case of nested views, it is added as its superview's subview.) It's possible to add arbitrary objects at the top level of a .xib, but if you don't connect them to something, they'll be automatically reclaimed as soon as loading the .xib file completes. Some UI elements are sufficiently customizable in the storyboard editor that you don't need to subclass them or reference them at run time to set additional properties on them. 
You can write once and deploy to multiple, no real cost increase, but I'm not sure about legal requirements. (UK has some interesting laws)
You can't create an instance of UIViewController and modify it to work the way you do because it would be sloppy. Where would you even declare the UIViewController? In an empty Swift file with code all over the file? And the only way that would work is to make extensions of it which makes all your code even worse when a class is easier. Also, the Controllers in storyboard MUST have a class assigned to them. Which means that making an instance of UIViewController is pointless because you have to assign a class to the Controller, and if that class is UIViewController, none of the things you created would be available to it (unless you made extension, but why would you when you can just make your own class?). That's why we make a class that subclasses from UIViewController, so we can assign the custom class to the Controller. And it's a subclass of UIViewController so you have access to all the methods and properties that UIViewController has. You're not understanding how MVC works. Model is the data classes, Views are the view objects on the controller and their associated files, and Controller where the views are shown. This doesn't mean views should not be placed on the controller. The separation shows much better when you use a table view. A table view sits on the controller. A table view has a cell. The cell has itss own class file that is a subclass of UITableViewCell that manages the view of the cell. The controller SHOULD NOT be managing the view of the cell. The data that is used for the cell sits in its own model file. So just to have a cell, you would have: //1. A file that manages the view of the cell class SomeCell: UITableViewCell() { @IBOutlet nameLabel: UILabel! @IBOutlet picture: UIImageView! func prepareCell(withData data: SomeCellData) { nameLabel.text = data.name picture.image = UIImage(named: data.image) } //2. A file that manages the data of the cell class SomeCellData { private(set) var name: String! private(set) var image: String! init(name: String, image: String) { self.name = name self.image = image } //3. Then in the controller's table view extension, you would have something like override func tableView(_ tableView: UITableView, cellForRowAtIndexPath indexPath: IndexPath) -&gt; UITableViewCell { let cell = {deque cell code...} as! SomeCell let data = dataModel.dataObjects[indexPath.row] cell.prepareCell(withData: data) return cell } Notice in the above code that the controller connects the model to the view but the model and view classes never talk to each other. &gt;but there are other controllers that don't have a file directly associated with it ,is that because any UI object we add from the library becomes a child of the view or controller itself ?" What? That doesn't make sense. ALL controllers have a file associated to them, which is UIViewController automatically assigned by Xcode when you make the controller. Any outlets you add to the controller become a subview of the controller. When you connect them to code, you see the line: @IBOutlet nameLabel: UILabel! You can see there the nameLabel is a class of UILabel, which has it's own properties and methods we use that are all part of UIKit's library. All those classes that you use are declared there in UIKit.
&gt;For example Flappy Bird has the pipes, how exactly are they made? A program where you can draw things. &gt;What size do you make the sprite in photoshop? How do you know how many pixels by pixels your canvas should be to make the sprite the perfect size for your app? What I did when making my 2 games was I made the canvas the size of the iPhone 6 Plus ([reference](https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions) and then draw the objects in the canvas in their own canvas, so it made it easier to export them using Illustrator. The sprites would go well with the 4.7 and 5.5 inch devices. The sprites look a little compact on sizes smaller than the 4.7 but I didn't mind. Most of the downloads come from 4.7 and above devices. You can find my 2 SpriteKit games [here](http://www.jozemite.org).
Really fun read, would like to see more like this!
Excellent post!
macOS Sierra Version 10.12.4 (16E195) Safari Version 10.1 (12603.1.30.0.34) js is enabled, also running AdBlock EDIT: Just tried in a private window, works without issues, so it's something on my end of the pipe, sorry! EDIT 2: Also working now without private mode, so ¯\\\_(ツ)\_/¯ 
Ah, Stuff like this happens :) Thanks for the input
What Jozemite said will work well. Otherwise, I sometimes will add the plain color sprites to my SKS file and mess with the sizes until they look good and use that to decide how large of a canvas to use. I always say to use temporary assets (even colored squares) first when developing your game. Once you have a gameplay loop going, THEN make your art. You'll find too many times that you make some cool, or at least not terrible, art and then decide to change something and now its no longer usable and you wasted all of that time. Get something playable before you put time into making art for it.
As mentioned in the swift-evolution email thread, KeyPaths are interesting for future directions of both KVO and Property Behaviors.
This is great!
One simple way to do something like that would be to use NSTabView, and have each 'page' be a tab. Cocoa Programming for MacOS X is my usual recommendation as far as books go, but it's a bit behind on Swift versions (there's a companion guide updating it to Swift 2). That said, the concepts and APIs involved are really very similar, so if you're willing to deal with a little bit of "oh the name of that method changed slightly", it should be fine. 
Try my own book: [Hacking with macOS](https://www.hackingwithswift.com/store/hacking-with-macos). It was written for Xcode 8 and Swift 3, so it's bang up to date.
Get the core functions working first, then do the login. The login is an accessory.
I m also new in ios. Are u following only this course right now or doing something else too ?
Yes I am computer science student and have used many languages before. I have trouble understanding the structure of the assignment
That's actually a fair point. I agree with you. I will make note of this discussion in the article.
Thanks i am not so good in programming so should i take Harvard's CS50 course ?
Here's a starting point: https://github.com/saifhunk/TwitterAnimation
Start the first timer based on the number of seconds left in the minute, then subsequent timers run for 60 seconds each?
Try GIF Brewery.
I really like Ibrahim Ulukaya (he was so helpful as a YouTube dev relations engineer on a video streaming project I built a few years ago), but I have to strongly disagree with using a converter to migrate a pure Objective-C project to Swift. How are you supposed to learn anything by letting a translator do most of the work and fixing the project error by error? There are so many new Swift design patterns that you wouldn't learn by just translating pure Objective-C logic into Swift.
I don't understand what you mean with the null handler. Is it a closure/function/delegate-alike on an object, which is invoked when a property of the object is null? A static method when a variable of that type is null? A global function? Another method on a property, akin to getters and setters? All of those seem to be varying degrees bad, significantly worse than optionals, so it must be something else. The consequences of a null vary by call site. Moving the null check somewhere away seems bad. 
Thank you for elaborating. I'm not seeing the superiority over optionals, but I'll have a think on it in the morning. Either way, thank you for your time. 
But just switching to swift removes bugs, right? https://www.youtube.com/watch?v=9rscHmvW3ig
I do a bit in objects - why how should I go around accessors in swift?
I've spent a majority of the past 6-8 months on and off converting my project [FindMyBusNJ 2](https://github.com/findmybusnj/findmybusnj-swift) to Swift 3 and iOS 10. I should be able to push the release any day now :)! Plus, I integrated Fastlane into my build process, so I'm super excited about that.
https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html You should read up more on how properties work in Swift. You only override the defaults if you have to.
Thanks for this! Didn't realize there was a Swift extension for VS. That's awesome. 
Hey, Thanks for the response! I am trying different approach. Dictionary will store variable value. For the sequence i am creating a New array of type (Entries) which is a custom enum that has three cases : operand, operation, and variable. Im working on evaluate() in spare time. I will let you know if this works. 
In terms of learning the actual language itself, Xcode 7 will be fine in my opinion. Once you start jumping into using swift for iOS development and the likes, I would be cautious. Swift 2 has a lot in common with swift 3 even in this regards,but if you ever make the jump to a new one converting swift 2 code to swift 3 can be a pain sometimes.
I just always click build if I'm expecting compile time errors. Then I fix a few and click build again. 
Hit command b all the time. It is the gimmie errors button.
I just use AVFoundation. I used it in my SpriteKit games. A single channel will only play a single sound/music at a time so they can't overlap.My [answer](http://stackoverflow.com/questions/31422014/play-background-music-in-app/32134851#32134851) here was to make a custom AVAudio class and used 2 channels for music and 1 for sound.
Amazing thank you! It's coming up with some errors about some code being new for iOS 10 and therefor can't go lower, so I'll have to try and figure that out! Thanks again 
Xcode is the worst IDE I have ever used. 2 Years later and there is STILL no Swift refactoring support. I can't help but wonder if Apple actually uses this trash or if its just a joke they play on developers.
Thanks! 
hey, your problem : actually you are not reusing cells. you are doing too much work with those stack views alignment etc. but you can improve scrolling speed with drawing asynchronusly like : cell.layer.drawsAsynchronously = true
i sent a pull request.
seems good thanks!
Apple doesn't really rely on Swift. Its a skunkworks project they tossed out there. It isn't remotely strategic to their business. It shows.
DateComponents is about as slick as it gets here: let currentSeconds = Calendar.current.component(.second, from: Date()) let timeTillTopOfTheMinute = 60 - currentSeconds
I will definitely try it next year! Will be my third and last try, I will also finish my studies next year.
_Assuming I am understanding your idea correctly..._ The main thing that would scare me with this idea is the fact that null handling is divorced from call site, because the implications of a null vary. `delegate?.someMethod()` and `dataStore?.save()`^1 may have different consequences for null. Thus I feel like some combination of these things may come true: - the null handler will bloat to cover each case sufficiently; - the null handler call stack will become confusing ("at which level did I get this null issue?"). It's mainly the separation of null-handling that rubs me the wrong way. Admittedly, I've bought into the idea of enforcing explicit null-handling with `Optional`, so there is likely bias at play. --- ^1 exaggerated example; woe be unto most anyone declaring their persistence layer optional.
SourceKit doesn't work correctly, this is why there is no Swift refactoring tool that works correctly. It's also why the swift converter is a piece of crap.
Scheduling app in the works. Thanks for all the help! Much appreciated! 
I actually prefer VI and VS Code to xcode for swift. But that's probably because xcode and SPM is still balls. 
Thanks for the advice. Any insight on your background? I'm interested in getting a job too, but I dont know whether i'm ready or not.
Thanks for the code. Did you run into any latency issues for the sound?
Yes, exactly like that!
 let a : [String?] = ["a", "b", nil] let b = a.flatMap { $0 } let c = b.joined(separator:"\n") print(c) 
Are you asking about the execution speed of compiled programs? It hasn't changed dramatically since Swift's first release since it's mostly dependent on LLVM, not Swift. Seriously: most benchmarks for Swift have not changed at all. There are minor changes associated with Any -&gt; NSObject abstractions, optimizing Array to the stack, reference counting elisions and whether closures are captured or inlined but these are case specific, not general.
please, please if you are going to call this a real world example, don't use the Xcode template style of including core data stack management in the app delegate
Sorry about that, but what I meant was the app functionality is a real world example of a journal entry. This was meant for the most basics of core data introduction.
Awesome. I hope it turns out great! :)
I realize that. Just curious about the performance of LLVM vs GCC and other compilers.
As blitgerblather said, work on the core functionality of your app first. However, keep in mind that you are going to be adding a login feature in the near future which makes the user of your app dynamic, so plan accordingly. What I mean by that is build the core functionality of your app like you already have the login functionality implemented. 
If you are wanting to go to the root view controller inside the navigation controller, what you are looking for is this: navigationController.popToRootViewController(animated: true/false) However, as a user, when I click the back button within a navigation controller, I expect to be taken back to the previous controller. Unless you have a really good reason to skip the middle controller on a back button press, I would reconsider if there is a better way to do what you are wanting to do.
Thank you for your response, just wondering which file I would put this in?
Without knowing anything about your app or how it is structured, it's almost impossible for me to tell you which file to put whatever you are trying to do in.
Hmm I think I might be going about it the wrong way... Basically, I have my initial view controller which has two options 'Start New Timer' and 'View Previous Timers' if start new timer is pressed it segue to my second view controller where I have a timer. Once the stop button is pressed the time/answer (and user) are segued to the third view controller where the time/answer is displayed. However when I press back (on the nav bar) to get back to the second view controller the timer's time is the previous answer, but I want all the data to be set back to nothing/nil, so they can start a completely new timer (without the last one being anywhere in sight)... If that makes sense? So I'm guessing what I really need to do is just reset everything to as if it was new, but that's what I'm stuck on.
I interviewed with 3 different Apple teams, none of them still use any Swift and insisted that I know Objective-C for job! :)
If all of the engineers at Apple use Xcode, wouldn't that make Xcode the best IDE ever. But I feel like its just for outside developer! hmm
I think it's on line 48 or 49 (I'm on my phone) It's when you wrote ViewController().bankText() Sure thing! Just PM me and I'll give some more details. Also if you can, post it to github so I can pull it down and make some changes 
Thanks for the advice, but I've actually already tried that. When I add the question mark there, the bank label only updates when the main button is pressed (and not once per second when the coin is added). 
Try using this https://paste.ofcode.org/36FyhANzJX8h3MxVvXPYevs
Could you link me to the guides and tutorials you'd recommend?
It works! Thank you so much for helping!!!!!
Look into an unwindSegue
my class has that as the definition. i probably should have uploaded the entirety of it. is it not an issue that the page that has the uipicker isnt opened yet when the pickerview is created?
this is the code i have. outlet for the pickerview was dragged over. the error is fatal error: unexpectedly found nil while unwrapping an Optional value class LoginViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource { @IBOutlet weak var passwordField: UITextField! @IBOutlet weak var emailField: UITextField! @IBOutlet weak var loginButton: UIButton! @IBOutlet weak var newAccountButton: UIButton! @IBOutlet weak var typePickerView: UIPickerView! let firebaseAuth = FIRAuth.auth() let accountTypes = ["Administrator", "Manager", "User", "Worker"] override func viewDidLoad() { super.viewDidLoad() typePickerView.dataSource = self typePickerView.delegate = self } ///////////////////////////////////////// // ACCOUNT PICKER// ///////////////////////////////////////// func numberOfComponents(in pickerView: UIPickerView) -&gt; Int { return 1 } func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -&gt; String? { return accountTypes[row] } func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -&gt; Int { return accountTypes.count; } func numberOfComponentsInPickerView(pickerView: UIPickerView) -&gt; Int { return 1; } ///////////////////////////////////////// override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } } 
Which line gives you the error?
That must ve a constant for the reference in the database. That is not swift but seems to be something a Dev wrote on the code to have quick acces instead of keep writing the value many times. 
Your outlet is called typePickerView but you call it pickerView here. One of these needs to change.
Yes but as per my post, I've tried both and neither work.
I'm on mobile so the full JSON is hard for me to read but is it not "results.contents..."? Did you miss a part of the path?
tried that! Didn't work :)
Ok I think I see what's going on here, though TBH it's tricky without seeing more of the code and also the output of the first print statement. It all comes down to what `cartData` actually is. If `cartData` is exactly the output you uploaded to Pastebin, then the only way you can access any of the `totals` fields is by actually including the key for a specific product. For example, for Vegetarian Pizza: `forKeyPath:"result.contents.dc9d4f799119110e13f5815372cf2212.totals.post_discount.formatter.with_tax"` `forKeyPath:"result.contents.dc9d4f799119110e13f5815372cf2212.title"` If `cartData` is already one of the product dictionaries (that you've extracted from the larger catalog), then you would omit `result` from your key path: the only place it appears is at the root, and not inside your product dictionaries. To rephrase it as a question, how does `forKeyPath` know which product for which you want `totals`? You need to tell it. Let me know if that makes sense. If not, please post the surrounding code and confirm exactly what `cartData` contains and I'll do my best to help further. Also, just FYI, the "full json" upload looks to actually be the output from printing the dictionary in the debugger, which isn't JSON but looks deceptively similar.
Really depends on what your goal is. And I'll preface this by saying that I'm an Objective-C guy so I'll do my best to be clear in case you're not fluent. Try to think about the hierarchy of objects here. Right now, they're just these nameless object structures in a dictionary, but you know better. `cartData` is a bag of products with some associated metadata. If you want to access the metadata on those products (title, totals, quantity, etc), you'll want to get that bag into a simpler representation. "results.content" is a dictionary of your products, with product identifiers as the keys. That's fine. Rather than write potentially incorrect Swift, I'm going to write Objective-C. Apologies in advance: NSDictionary *productsByKey = [self.cartData valueForKeyPath:@"result.contents"]; At this point, you can already enumerate the products. See the method `-enumerateKeysAndObjectsUsingBlock:`. However, there's no implicit order to that. If you need to sort the products for any reason, you can extract just the products into an array by doing the following: NSArray *products = [productsByKey allValues]; In both cases, you don't really need to care what that generated key path is doing. You know that all the keys under "results.contents" represent the products in your cart. Once you have the product dictionaries, you have access to the product metadata. A few side notes: - Working with dictionaries like this, especially those with complex key path hierarchies, will get tiresome very quickly. You'd be well-served by looking into some more structured data model. Whatever the external representation is (e.g. JSON), you parse it into your own model, and hopefully generative some native objects where instead of navigating via key paths, you are accessing strongly-typed properties. - The debugger is your friend. When working with dictionaries like this, I've found it useful to set a breakpoint roughly where you have your `if let` before you print. While paused in the debugger, you can run exactly the forKeyPath code you're using to extract the total price string. If I'm not getting the result I expect (and assuming the following is valid Swift), I would run the following: print(self.cartData?.value(forKeyPath:"result") as? NSString) print(self.cartData?.value(forKeyPath:"result.contents") as? NSString) print(self.cartData?.value(forKeyPath:"result.contents.dc9d4f799119110e13f5815372cf2212") as? NSString) That way I can go deeper one level at a time. it'll be instantly clear at that point where I'm missing a key. Glad I was able to help!
i wouldn't, i would just write the app in swift and just scan the objc code for anything weird going on. i can't stand objc, it's a crap archaic language.
wrt: "Should I have a UIView used as a container, and then two UIViewControllers for each segment? Or should they be two UIViews?" I would use view controllers. Even though there is a certain amount of silly ceremony associated with bringing view controllers on and taking them off (when the user changes segments), the fact is that every ios programmer recognises that view controllers are a focus point for controlling a portion of an app's functionality. Although that functionality usually is associated with one screenful, that is not required. One benefit of breaking it down is that it erects a defence against Massive View Controller disease. And it also means that that functionality encapsulated in each view controller can be moved elsewhere in the app (if the designer decides to rearrange the screens) or even used in multiple places very straightforwardly. Just remember to observe the ceremonies about bringing them on and off so the child view controllers receive all the right messages in the right order (like view will/did appear, view will/did disappear and friends). A refresher on doing all this is here: https://github.com/codepath/ios_guides/wiki/Container-View-Controllers This is commonly called view swapping, and I shouldn't be surprised but what there might be some open source components available already, if you're into using OSS, or maybe they could serve as starting points and hints for your own implementation. In fact, thinking about it, the UIPageViewController is essentially a view swapper...maybe you could use one of those and instruct it to make page changes based on the segment selection?
I think you would need to use generics on the class for this, e.g. extension SomeProtocol where Self: UIViewController { func doSomething() { print("self is a view controller") } } class ContainerClass&lt;T: SomeProtocol&gt; where T: UIViewController { var instance: T? func foo() { instance?.doSomething() } }
What do you mean? I edited my answer... This works fine in the playground: import UIKit protocol SomeProtocol { } extension SomeProtocol where Self: UIViewController { func foo() { print("foo called") } } extension UIViewController { } class MyVC: UIViewController, SomeProtocol { } class C { let sp: UIViewController init(_ sp: UIViewController) { self.sp = sp } func bar() { sp.foo() } } let c = C(MyVC()) c.bar() 
 let IPAddress = String(UIPAddress.text) The above line does *not* assign to UserVariables.IPAddress. It creates a new local variable that is discarded when the function exits. Try this instead: UserVariables.IPAddress = sender.text ?? "" (You don't actually need the outlet for this job. 
Careful you will upset the swift circle jerkers and they will follow you around down voting everything you post in all the programming subs
I know you want the answer in code but if it's an app just for yourself and you just want it working while you come up with the correct code just assign your TV a static IP address. Edit: Now I am not on my phone and taking a quick look on the laptop. You could just set the IP to UIPaddress ayntime text changes if you wanted to by creating a send event (right click on UIPaddress in your story board then drag from "editing changed" to a new function. Function body: @IBAction func updateIP(_ sender: NSTextField) { //Validate that the IP formatting is correct before settings then... UserVariables.IPAddress = sender.text } and for your variable just use something like this: static var IPAddress: String { didSet { IPAddress = "http://\(IPAddress)/sony/IRCC?" } }
I have multiple UIViewController subclasses that conform to this protocol, so this wouldn't really work for my purposes. 
[@IBAction's latest tweet](http://i.imgur.com/YXFEheG.jpg) [@IBAction on Twitter](https://twitter.com/IBAction) - ^i ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
I think your initial issue has been addressed. I'd just like to clarify that a global var doesn't have to be declared in structs. Global is more a description of something's scope, rather than how it's defined. 
Great, but why? Can you explain the variance going on here
Sorry, my response wasn't very clear. `UnsafeMutablePointer&lt;Int&gt;` accepts arrays as well as single integers. This is by design, though in my opinion confusing. A good example is the vector multiplication function in Accelerate, where the signature looks something like this: func vmul(a: UnsafePointer&lt;Float&gt;, b: UnsafePointer&lt;Float&gt;, c: UnsafeMutablePointer&lt;Float&gt;, length: Int) Here `a`, `b` and `c` are all arrays `[Float]`. Since - like you mentioned - the pointers are actually to single values, you must provide a `length` hint so the function can continue striding through memory.
Swift 4.0 will allow you to write 'SomeProtocol &amp; UIViewController': https://github.com/apple/swift-evolution/blob/master/proposals/0156-subclass-existentials.md
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [apple/swift-evolution/.../**0156-subclass-existentials.md** (master → 4a43a7d)](https://github.com/apple/swift-evolution/blob/4a43a7d7ac82a61b3d6f0c8d6bc8984a64bb0f5d/proposals/0156-subclass-existentials.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dgo5k3o.)^.
I'm not sure what your example is trying to accomplish. OP wanted a way to constrain a value to be both a subclass and a protocol. Your example just wraps the protocol value for no added gain (you may as well pass around a value of type 'SomeProtocol' without defining an AnyProtocol type at all)
First of all, I feel the hassle of this method is not worth the worry about avoiding collisions and it might even cause them unnecessarily. Suppose you create a protocol with a property named `rx`. Someone comes along and wants to use your protocol but they already have something named `rx` or they are using an extension which also has an `rx`. Now there’s a collision if they want to use your protocol. If, instead, you put the extra namespacing directly on your methods there would be less likelihood of a collision. For example: foo.rx.bar() vs foo.rxBar() Of course maybe they already have a `rxBar()` method but that’s much less likely than something simply named `rx`. Not only that but you also introduce an object that needs to be instantiated, increased complexity in the implementation and call stack, and an additional period that needs to be typed every time your protocol is used. Perhaps I’m missing something but I don’t really see a strong upside to this design.
I don't know what exactly you mean by `UnsafeMutablePointer&lt;Int&gt;` accepts arrays". A type doesn't "accept" anything. I'm not trying to be pedantic. I just honestly don't know what that means precisely, and precision matters a lot for compilers. Could you give an example of a call to that `vmul` function where the caller is using an array? What would that look like? Make sure the example compiles before posting it.
A function which accepts `UnsafeMutablePointer&lt;Int&gt;` can be passed either a single `Int` *or* an array `[Int]`. The actual `vmul` function is long so I won't type it here, but this example is identical: func doSomething(_ arr: UnsafeMutablePointer&lt;Int&gt;) { } var a = 5 var b = [5] var c = [[5]] doSomething(&amp;a) // valid doSomething(&amp;b) // valid doSomething(&amp;c) // invalid doSomething(&amp;c[0]) // valid This behavior is expected and well documented. The Swift compiler bug (or more likely, type checker bug) becomes apparent when you do this: let idx = 0 doSomething(&amp;c[idx]) // error After some digging I've found [this report](https://bugs.swift.org/browse/SR-3213), which appears to be the same bug. Your workaround of passing `&amp;c[idx][0]` actually seems to work ok for now though!
First of all we have /r/spritekit, it's not that lively, but check it out anyways! SpriteKit is awesome! It's the most fun framework in the Apple universe, it's not perfect, has some of its quirks, but a great playground overall. The learning curve differs, you can go super easy on yourself and throw a project together in no time. There are plenty of tutorials and sample projects around, https://developer.apple.com/spritekit/ , http://www.sprite-kit.com . Then if you want to get into serious business with game development you want to implement GameplayKit, which also has a nice guide: https://developer.apple.com/library/content/documentation/General/Conceptual/GameplayKit_Guide/ Since you got some iOS dev background, I'd suggest to get familiar with the framework in a few sample projects, but then get into GamePlayKit as soon as possible! I got super lazy writing my own logic, but GamePlayKit aces it in all aspects, try to adopt it in the early stage of your game development!
You probably want to use UserDefaults. And you should set up static IP for your TV, so your don't have to change the IP in the program.
This is the first part of the post and here is [the second](https://medium.com/ios-os-x-development/real-world-example-creating-a-journal-entry-app-with-core-data-in-swift-part-2-4f0bfda61cd0)
without having seen OPs original code I think what was happening is they have a var which is either a type conforming to `SomeProtocol` or a `UIViewController` but not both In the first case the extension function is only valid when the SomeProtocol conforming type is also a view controller (which it may well be, but the compiler doesnt know that) The second case is almost the inverse, the compiler knows a var is a view controller, but not that it conforms to SomeProtocol (you could change the type to be a view controller subclass which does conform, but then you'd lose some of the generic-ness) The example by /u/danielt1263 does _almost_ the same thing, but it wouldnt work if only view controller subclasses conformed to the protocol, rather than at the base class level So the generic approach is to essentially repeat the constraints on the extension of SomeProtocol, so that the compiler knows that `T` conforms to SomeProtocol AND it is a UIViewController subclass so it becomes aware of the extension functionality. As /u/compiler_crasher pointed out, this should become easier in 4.0
Thanks!
You need to create a protocol to send the offset between the two. DM me and I'll send you sample code for it. I recently had to synchronize scrolling for my project. 
Location data is never guaranteed to be 100% accurate (especially the first few hits), what you want to do is "smooth" the data that you do receive. 5m radius is too precise to get accurately. 
I believe using `&amp;c[idx][0]` is unsafe because you're getting a pointer to the first element of the array, but the array isn't guaranteed to be contiguous so accessing later elements could return random memory.
That's a great point, but I believe that Apple guarantees `Array&lt;T&gt;` to be contiguous as long as `T` is a "primitive" type. So as long as we're not storing classes, we *should* be ok. So far I haven't encountered any errors...
I don't think you're using the term IDE right. It's really not that big of a framework, it gives you the basic tools and you can take and leave most of the other stuff. It's a great framework once you get the hang of it. 
From what I hear Bubble is quite well know. Surely they apps can be tested once built
What about the trillion Apple devices already in existence. 
Like I said i'm not talking about this happening next year but in a few years maybe. Sure now there are still many apple devices being used but in a few years these phones will be outdated and nobody will use them anymore. Are you still using an Iphone 3G? 
Obviously apple will sell a bunch of devices still. I would not dump ObjC not to mention Swift (open source remember?), though I wouldn't _only_ learn apple.. that being said is it any different than any other competing market/language? 
Yep that is true. Probably not i guess this applies to all markets or languages.
Probably passing an object reference through pthread_create() in some semblance of a general way so that in the thread I can continue to use swift. 
I'm making apps for iOS and Mac that use the Network Extension framework for an SSL-based VPN. Both apps basically do the same thing and share a lot of code. I'm a little salty at the moment about how painful the keychain documentation is, particularly in reference to trying to do the same thing on Mac and iOS. Spoiler: They use almost all the same methods, but work very much differently, and it's very unclear which things should work which way on which platforms. I eventually basically wrote two totally separate implementations for keychain management. Both are using the Security Framework, both are using Swift, and both are ultimately just doing the same few basic CRUD keychain operations, but are doing it totally different ways. Oh well. At least it works.
im using xcode 8.2.1 i also already converted it to 3. they want 2.3 now. no idea why
Does your company want the app on the AppStore?
rapidly displaying images in cells (collection view) while scrolling and such 
Async image loading. Lol
Location based Augmented Reality using AVKit, SceneKit, Core Location and Core Motion: - Core Location accuracy is not exact to the meter unless you are outdoors - Core Location exactness uses up so much battery power - Core Motion is finicky when the device switches from landscape to mobile - People have complained that SceneKit has lags - People have complained that AVKit has lags All in all my experience in making AR apps for iOS using these Swift Frameworks has been emotionally rewarding just not financially rewarding :-\
I would try having a 2x 3x and normal sized version of the image, although it should be just getting scaled anyways, not sure what the problem might be
And so dramatically at odds with everything good about Swift! It's depressing how well this could be done with proper types like the other Apple libraries. It could really be made so easy that the compiler is verifying you're passing in the right parameters to do what you're trying to do. You know, like is the case with everything else! Ugh, oh well.
Do they have some kind of reason for this requirement? 
Downscaling also distorts image. You should use images with exactly the size you need (2x the size and 3x the size for @2x and @3x assets respectively).
how is mongokitten better than perfect-mongodb? 
Integrating Swift with undocumented Apple private C API's. The hard part was making selector calls with more than 2 parameters since NSInvocation is a class ONLY available by Objective-C, no bridges via swift. Trying to use C and Swift can be a pain and is sometimes quicker to just use and Objective-C bridge, but where's the fun in that?
It's not really a bug, it's a difference between Swift arrays and C arrays. UnsafeMutablePointer&lt;Int&gt; works for C int arrays, because those are actually a contiguous buffer in memory. A Swift array is actually a struct that contains a ManagedBufferPointer. In the case of the Swift array you do need to get the address of the first element because there maybe housekeeping data in front of it. This AFAIK isn't necessarily guaranteed to work but so don't be surprised if a future compiler (or even debug builds) break it. I believe the correct thing to do here is to define this as a single dimensional array, so that there definitely can't be any data between the subarrays.
First, updateViewConstraints does not appear to be called unless you tell the view that it needs to update constraints using view.setNeedsUpdateConstraints() Here is what you're trying to do: import UIKit import PureLayout class ViewController: UIViewController { var blueView: UIView? override func loadView() { view = UIView() view.backgroundColor = UIColor.white blueView = UIView() blueView?.backgroundColor = UIColor.blue view.addSubview(blueView!) view.setNeedsUpdateConstraints() } override func updateViewConstraints() { super.updateViewConstraints() blueView?.autoPinEdgesToSuperviewEdges(with: UIEdgeInsetsMake(25, 25, 25, 25)) } } However, I think it's overly verbose and possibly needlessly complicated as it would be wise to add a boolean flag that tells you whether you already added those constraints. If you really want to go that way I would suggest also looking at viewDidLayoutSubviews. Anyway, I would favor this implementation: import UIKit import PureLayout class ViewController: UIViewController { lazy var blueView: UIView = { let view = UIView() view.backgroundColor = UIColor.blue return view }() override func viewDidLoad() { super.viewDidLoad() view.addSubview(blueView) blueView.autoPinEdgesToSuperviewEdges(with: UIEdgeInsetsMake(25, 25, 25, 25)) } }
Hi LisaDziuba! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/67g299/an_app_to_help_you_follow_the_proposals_from/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Swift is actually doing quite well as a language outside the Apple ecosystem. For example: server-side development, teaching, scripting. Sure, it may not be a mainstream language in those areas at this moment but all languages have to start out somewhere and development in Swift is pretty easy and fun. Some links to demonstrate Swift’s usefulness server-side: - [Benchmarks for the Top Server-Side Swift Frameworks vs. Node.js](https://medium.com/@rymcol/current-features-benefits-of-the-top-server-side-swift-frameworks-b15b4f2d7bc3) - [Server APIs Project](https://swift.org/server-apis/) - [Vapor, a Web Framework for Swift](https://vapor.codes) - [Perfect, a web server and toolkit](http://perfect.org)
Nothing really, the worst was figuring out how to use regular expressions in Swift. Now I have a nice string extension that as an enum (the type) with associated values (the regex) that lets me call easily verify if a field matches the required input. Now today I get to try and figure out how to take a security certificate and use it to RSA encrypt data. I'm no expert in this and I'm also not allowed to use 3rd party libraries so it'll be interesting. 
no
Why is this challenging? Can you not, say, load the next ten rows off screen so that they'll always be visible when they appear?
You need way better focus and knowledge yourself before writing articles for others. This is just a mess of thoughts spit up on to a screen. I imagine this is what my blogs would look like, which is why I don't write for people. 
Honestly. The standard library reference. The information is getting better, but still needs loads of work and the organization is... Questionable. It's pretty, but I don't care about library references being pretty. They need to be quick and functional. 
It's very much a learning tool - the included content let's you learn the basics of the syntax for swift, and others encourage you to explore libraries and APIs. That said, it's constrained to showing output only within the playground - a sort of interactive edit and see-what-you-did sort of setup. There's a fair bit of flexibility within that, but if your end goal is to write IOS apps, this will only get you part of the way. The three intro course sets are really quite good for learning the basics, although learning by yourself can be one of the more difficult things to do. While they walk you through the examples and set tasks to encourage you to try, it can be frustrating and the "why" of what you're learning isn't always obvious. If you have access to other developers in your area willing to even discuss it with you, or someone else doing the same thing (learning) and then talking through it - I suspect you'll get quite a bit more out of the effort.
The tutorial frustrates me because of Sam's shady business practices. Jan is getting taken advantage of, paying for empty apple boxes. 
Thanks for the criticism. What specifically am I doing wrong in your eyes? 
Big Nerd Ranch books are also a good starting point. They're gentler at introducing new stuff than Stanford's iOS 10 Programming course (too many new concepts packed into too few project assignments). However, they cover different things in different ways so do both.
How did you solve this?
Recently finished a rich text editor for macOS (after developing it for a year) that's completely written in Swift: http://wordcraftapp.com Needless to say, I got frustrated with TextEdit.
I thought about it this way: you pay for 10 apples, but we may send 12 boxes, some of which may be empty ¯\\\_(ツ)\_/¯ 
I didn't say that *all* ViewControllers conform to SomeProtocol. The OP stipulated it when he said he had the extension: &gt; extension SomeProtocol where Self: UIViewController { } Any method in the above extension is available to *all* view controllers.
Given the guidelines, this gives the libraries that are already on the list a significant advantage over their competitors. Note that the guidelines disallow other libraries to be included if they solve the same problem as a library that is already on the list. This means that, for example, ReactiveCocoa will never get on the list (because it doesn't "Add value not already included in the suite"). I'm not sure what I think of that, but I get an uneasy feeling about it...
I hate that splash screen so fucking much. Honestly, they have not changed it in forever. The photos have direct grain and contrast from each other. 
Trying to get GTK to work...
I've seen the screenshots, it looks absolutely dreadful. Tons of weird gradient backgrounds, MASSIVE TEXT, and terrible contrast. Almost impossible to see anything. I am pretty sure they have some new C-level or UX responsible at Hulu that now have to "make an impact" so they grab their favourite terrible UX ideas and shove them into our faces:(
Vapor for app backend. And some deployment tools.
Part one now says it needs a notification, and I can't find "editing changed". @IBAction func updateIP(_ sender: NSTextField){ //validate IP UserVariables.IPAddress = sender.textDidEndEditing(notification: Notification) } The next part says that static var requires an initialiser expression. struct UserVariables { let IPAdress:String static var IPAddress: String { didSet { IPAddress = "http://\(IPAddress)/sony/IRCC?" } } [Here's a picture](http://imgur.com/a/9IBXD)
https://github.com/Longhanks/gtk-test
How much of Gtk are you supporting now?
/u/Longhanks might as well put [this](https://m.youtube.com/watch?feature=youtu.be&amp;v=lITBGjNEp08) in that section.
I've been looking into this: https://github.com/rhx/SwiftGtk The developer is helping out, but is it that long to build a project with swift? Gosh... I will look further and try to go beyond the hello world window...
&gt; When i try this i am getting error When asking for help it's useful to include important information like what error you are seeing, and when you are seeing it There doesn't seem to be anything immediately wrong with the function, though without knowing android it looks like it using using JPEG and you are using PNG 
To expand on what /u/JimDabell said: You should be using NSDecimalNumber for all monetary values. Use NSNumberFormatter to format them as currency strings. `minimumSignificantDigits` will ensure that you have trailing zeros.
As to the second part: they have always had rules about not gathering user data you do not need for a legit purpose, especially things like email
Just create a global for your IP address , not in a struct and it should work fine as long as you access it directly , failing that post it. 
I was building my app on Firebase only using Facebook authentication and had a question similar to your's. I ended up removing Facebook authentication completely and just went with using email/password sign up after finding this on a forum: 17.2: Apps that require users to share personal information, such as email address and date of birth, in order to function will be rejected. Your app uses Facebook login for authentication purposes but does not include account-based features offered by that site, which is not allowed on the App Store. In order for Facebook to be the only authentication mechanism available, your app must include significant account-specific functionality from Facebook. Pulling profile information, or sharing, are not sufficient account-based features for Facebook to be the only authentication mechanism available. https://forums.developer.apple.com/thread/15800
You are using the function "didDeselect", while it should be "didSelect". Then you'll receive the proper indexpath for the selected cell. Edit: Also, you might want to change your data model from two arrays, into a single array of custom structs, which has multiple variables, including "description" and "name". 
Why on earth would they want a swift 2.3 version? I can't think of any reason for that.
upvote on the array of structs instead of the pair of arrays. Your life will be much easier when it comes time to sort or manually re-order the items in the list.