Bitfountain has a great course for beginners: http://bitfountain.io/courses/complete-ios8
There are some bible github repos but they are all in objective c and not updated. I want this app be my life learning experience of learning original biblical language, where I can read and provide my own translation. 
Interesting - I tried the XCode 7 address sanitizer and it did point to a location but given that it doesn't crash in debug or when compiled with 6.4 I am not sure there is much that I can do with the info... It is crashing in a comparator and the stack shows two seemingly valid objects... so I assume some kind of release bug in the compiler. I'll keep experimenting. Thanks. 
Thanks for all the responses! Did not expect this good of turnout. I can't wait to get really into Swift now, so many resources.
Ray Weiderlich's site pretty much taught me how to be an iOS Developer.
You can do what I did to practice. Make an app where -you can choose from different trips -each trip contains multiple (more than 30, so you have to use meta-geofences) predefined points of interest -each point of interest should have a custom map annotation -the PoI callout should be highly customized, not using the default options -the app needs to find a path between the points -the app needs to notify the user when he reaches a point of interest Took me quite some time but it helped me a lot. 
You can also download the whole course including video,slides and home work from iTunes U. https://itunes.apple.com/en/course/developing-ios-8-apps-swift/id961180099 It's the same, Just bit easier to navigate thought 
I don't recommend Stanford course or hackingwithswift for the start. It quickly gets very complicated and some advanced topics will be discussed earlier in the course, However I absolutely recommend hackingwithswift as it provide excellent explanation of what happens behind the code. For start I'd recommend waiting Teamthreehouse Amit Swift Basic course. It is absolutely the best way to understand basics of swift and later on they will walk you through building your first swift app. Plus you have one month free trial. Also Lynda.com Simon Allardice has some absolutely fantastic basic guides on swift. It is only for paid subscription though. I find bitfountain.io very practical but lacking discipline a bit. And Hey. Happy coding, It'll change your life :) 
I use github search tools. On Github, look for a specific function like this: functionName extension:.swift This will return all swift results that contain `functionName`
Have you heard of GNUstep? It will probably be ported to Swift.
There is Swift on Windows already: RemObjects Silver.
There is a free Swift IDE: RemObjects Silver.
I started with [this](http://www.mitchellallison.com/blog/) set of blog posts to get started on parsing the language. Of course I had to make some modifications for my syntax. Then I had to really dig through the documentation of LLVM to be able to generate assembly code from my language. I've also picked up a couple of books on compiler theory and language implementation patterns. Hope this helps.
Are you loading the images manually with a file name or using the xcassets catalog?
I'm adding them in Images.xcassets. Interestingly, I kept seeing just grey on the simulator but am about to go out to dinner with my grandma so I JUST ran it on my phone and the image is showing fine. I ran it in the simulator again and the image isn't showing on there, so I think it may possibly be a simulator error. 
Sounds like what you're looking for is [Layer](https://layer.com/)
If you're really desperate to use Swift 2, tutorials 31 to 35 are all written in Swift 2 because they target iOS 9. Have fun!
Simon on Lynda.com does a great job of explaining what's going on. However I felt the course was a bit to short and left me wanting more, which is a good thing but I wish he could send you off in a more clear direction.
* [Roomguru](https://github.com/netguru/roomguru) * [Gulps](https://github.com/FancyPixel/gulps) 
Agreed and he explains stuff super fast. It's sometime a bit hard to keep up for non natives. I also found myself going to back swift fundamentals and listen carefully to fill the gaps. I hope he comes up with more course in the future 
Sounds like a bug in Xcode 7 then. Submit a bug report and give them your project as stripped down as possible so Apple can see the issue. 
Wouldn't you go view.subviews.first?
There's a really easy way to access views elsewhere without making new variables. Just tag the view: view1.tag = 1 //the tag is an integer Then in your other function: let theViewToAccess = view.viewWithTag(1) as? UIView //or whatever type theViewToAccess!.backgroundColor = UIColor.redColor() //now you can modify it 
So I can tell you that I am learning an insane amount about the iOS SDK, best practices, Swift etc. using just these 4 resources: * Ray Wenderlich's site and his iOS Apprentice Series. I'm about to start the second tutorial and it is over 250 pages, so there is a ton of content there and it's broken down very well and very easy to follow/understand. * The Stanford class taught by Paul on iTunesU is so far fantastic! I am loving the pace and Paul is a great professor who has been teaching iOS and app development for years now. Seriously, it's free and easily one of the highest rated learning tools out there. * The free Swift book by Apple in iBooks is a great read. If you read through that a little bit and then watch the Stanford class, you'll find yourself knowing what Paul is setting the students up for before he even does it in code (i.e. He'll ask the students 'Why is this line of code here throwing an error do you think?' -- You'll already know why because you've read the book and know where the common mistake/concept is that he's trying to drive home). * This subreddit. Seriously, this has got to be one of the most helpful subreddits I've seen in regards to actually assisting users. They are constantly posting useful links to tutorials, articles, demos etc. Utilize the community!! I hope this helps, as I too am a budding iOS developer working on creating an app for a start up I'm in here in Houston.
Swift is a safety-oriented language, making it very difficult to shoot yourself in the foot. To fill this deficit, Apple released the world's first standalone foot-shooting app: Xcode.
Step 1. Implicitly unwrap your foot.
$179 is really steep; I wouldn't pay that. But I feel Ray's $54 iOS Apprentice series is a great introduction to the iOS SDK and Swift. You cover pretty much all of the essentials, and all 4 huge tutorials that are kept up to date with the latest iOS release, I personally feel like it's worth it.
Fatal error. Unexpectedly found blank when shooting the gun.
You have to fully initialize the UICollectionViewCell subclass object that you return from your collectionview:cellForItemAtIndexPath: method, which is part of the UICollectionViewDataSource protocol. That's how the data gets into the collection view's cells. It's the same pattern as the TableView.
Why not create a for loop that instead of going through lottoLabels it also iterates through the indices then do a dispatch_after for the label with a delay based on the index? dispatch_async(dispatch_get_global_queue(QOS_CLASS_USER_INITIATED, 0)){ for (index, label) in enumerate (self.lottoLabels) { println(self.lottoNumbers) var lotto = String(self.lottoNumbers.removeLast()) self.lottoNumbers.shuffle() let timeDelay = time_dispatch(TIME_DISPATCH_NOW, Int64(Double(index) * Double(NSEC_PER_SEC))) dispatch_after(timeDelay, dispatch_get_main_queue(), { () -&gt; Void in label.text! = lotto } } } I might be wrong here but maybe you could give it a shot and let me know if it works?
While writing the code to shoot yourself in the foot, Xcode crashes. Your foot is lost in a corrupted project.
If I'm creating a subview from a XIB with it's own .swift file populating it, how can I change a button or label from that subview? I tried using this method, but I can't access anything that I actually have in the XIB, even after connecting it to the matching .swift file.
I like to use the following function: func delay(delay: Double, closure:()-&gt;()) { dispatch_after( dispatch_time( DISPATCH_TIME_NOW, Int64(delay * Double(NSEC_PER_SEC)) ), dispatch_get_main_queue(), closure) } Then you can just call it anywhere with a simple: delay(0.5) { // do shit }
wait but after it finds the foot, and then fails to find the gun nothing is returned...
Hacking with Swift is pretty nice, especially the price. The website is very text heavy, so if you are a heavy visual learner, you may want to try some of the other video solutions. Twostraws does have some outdated videos, which honestly are still very usable. There are differences, but you learn what they are very quickly, and troubleshooting is par for the course anyhow. It really forces you to really learn what your doing. Plus, he is clearly here on redit if you need help. :)
? You can have 6.4 and 7.0 beta installed side by side just fine.
Not when he is on OS 10.11
Nah I did upgrade to El Capitan, of course. It was just so annoyingly buggy, I went back.
Anyone have any idea on how to fix my incremental compilation? I can't use Whole Module Optimization cause I get an 'abort flag 6'. The smallest change is triggering a complete recompile and it's driving me mad. Don't know if there's any other settings that could affect this. 
You see the problem with the Pyramid of doom? You can't even shoot yourself in the foot with it. 
The long con (warning: requires a time machine) - start using Swift in a real project after WWDC 2014 - work on features updates the months that follow - WWDC 2015 comes. You now have to figure out when it is the best time to convert thousands of lines of code to Swift 2.0 so you can work on iOS9 features. If you've done the conversion you realistically cannot release before October. /rant
Just as a follow up and incase anybody else in the future has this same problem, I downloaded the new Xcode 7 beta 3 and still had the same issue so I downloaded the iOS 8.3 simulator and everything worked like a charm; It was an iOS 9 bug. Now I just need to figure out how to contact Apple. 
I get the gripe, but I think Apple's trying to give developers a way to provide their own context-dependent names for closure variables, which has the benefit of leading to more readable code. And you can always read the documentation (as you probably should be anyway) to find out exactly what the exposed variables are for.
So, it sounds like you know how to catch the notification, correct? If you are asking about the user experience, it depends on what the next (desired) action is by the user. What about some type of banner in your app's look and feel?
I guess I don't see why going into the documentation to find out what a parameter stands for is such a huge deal, though. Closure arguments in the frameworks are designed to allow developers to easily, immediately, and locally implement customized solutions that improve the readability of their code. Part of this customization is leaving the naming up to the developer.
Why would you ever do that on your primary machine that you use for day to day development
Cause I had a snapshot and could go right back. :p I did try to do a lot to make it work first though.
NSURLConnection is deprecated. Also I believe I remember hearing that NSURLSession uses a separate process to do the actual networking.
Storyboard is a kind of archived object graph, not compiled code. (maybe a xml file?) 
I wouldn't say it's the *wrong way*, but it's definitely inconsiderate, especially for libraries offering code for others to use. I agree. It should be a common practice, and I think it will be as the language becomes more popular.
Yes, but your way obscures the parameters type which is a far worse situation. I'd much rather know the required type than the name someone decided to give to a parameter.
Thanks for clearing it up for me. Structs it is!
Yeah I'd say it's be better to use a Struct with static constants. Say you were using Java or another language to parse some JSON, you'd typically do something similar and just define your JSON keys as static constants. As for the Enums, those are good for when you have a class that can be a certain "type" of that class, so you handle each "type's" logic accordingly. Say you have a Cat class, and you need to handle whether your Cat is: .Indoor, .Outdoor, .Both. You'd create an Enum with these cases, create an instance variable that holds onto the "catTypeEnum" and set that variable accordingly so you can handle the set up for each case. 
I'd use an enum. Not in Swift 1.2, but in the new version, according to apple: "If an element of an enum with string raw type does not have an explicit raw value, it will default to the text of the enum’s name." So you could do let jsonKey = JSONKeys.Name with the enum as well... soon =]
Well damn. Maybe I should just settle this with eenie-meenie-miney-mo.
Yeah so on a programming standpoint what do I need to do to tell the view controller, or some sort of object on the storyboard, that I got a notification?
Will report back with confirmation one way or the other, installing the beta right now.
👉💥👣
 enum JSONKeys: String { case name case job case age } let myRawString = JSONKeys.name.rawValue //this produces "name" let myString = JSONKeys.name //this produces "JSONKeys.name" Tested a few different things. Less cool than I thought, but still more options than before. Previously, you would have to define the string literal to back your case.
You must be doing something wrong.
Just drop it in the appropriate reddit group: :-) https://itunes.apple.com/us/app/h4-spanish-lite/id388918463?mt=8 To be honest, I've tried iAd with zero luck. At one point, Facebook was helpful, but the last campaign I did didn't generate many downloads. I've posted my link to reddit and Hacker News but I couldn't see difference in downloads. I'm not sure how to find my particular audience. The App Store is so crowded I just see fewer downloads over time, no matter what I do. 
Thanks for the reply although not very encouraging :) In your case, when did you get the most downloads? Was it just after release or maybe the download count kept growing with time? The App Store is super crowded that is why I am trying to think of a way to efficiently promote my app if possible. This is my first app I don't know what to expect at all. I put significant effort into building the app and I would like people to use it especially since I think it is useful :) I wonder how many downloads can an unknown developer of an unknown app expect over the course of the life of the app on App Store...
I would highly recommend teamtreehouse.com, I have been learning Swift with their tutorials, and honestly I can say it does help a lot. They have videos that you can split screen while you practice writing the code, and besides that they have challenges to make sure you are learning.
printing out queryURL.description gives me: URL: 0046500733437/ --https://api.outpan.com/v1/products/XXXXXXXXXXXXXXXX/ where XXX...XX is my apikey and 0046500733437 is the GTIN number. I construct the queryURL like so: baseURL = NSURL(string: "https://api.outpan.com/v1/products/\(apiKey)/") queryURL = NSURL(string: "\(gtin)/", relativeToURL: baseURL) EDIT: I already see my problem, had my URL set up incorrectly. Thanks for pointing me there
I don't know what exactly are you trying to achieve but generally you should look at string interpolation for manipulating string content. var meal = "dinner" var mealQuestion: String { return "What would you like for \(meal)?" } println(mealQuestion) // would print "What would you like for dinner?" meal = "lunch" println(mealQuestion) // would print "What would you like for lunch?"
lol thanks 
This is something that fills books. And there are actually books about that. For example [Pitch Perfect by Erica Sadun &amp; Steven Sande](https://geo.itunes.apple.com/us/book/pitch-perfect-art-promoting/id641124831?mt=11&amp;at=11lthK), which is specific for app developers. So you might want to check that book out. Here is something that most developer forget: sending press releases and pitches to media outlets, bloggers and review sites. Yes, this means you have to figure out how to write a good pitch, and you have to create a list of relevant media outlets. It's still very likely that nobody covers your app. But still do it, you never know if your app is exactly what the journalist was looking for. If you receive feedback or engage with journalists, keep their names and some notes about them. Next time you know already who you should address and how you should address them. Build a relationship with journalists. They are some of the most important multipliers for your marketing efforts. Figure out what they write about, what they like about apps and what they don't like. Next time you send them a pitch, you can emphasize things they will like about your app. Make it personal without being creepy. If you have an app that is relevant for a specific target audience of non-IT websites/magazines you should send them a press release as well. For example if you create an app for gardening, don't hesitate to send the press release to a Gardening Magazine. Even if the magazine has never covered apps before. Of course you have to adjust your pitch for the audience. And regarding app review sites, once your app is in the store you will be contacted by many "app reviewers" that offer to review your app in exchange for money. You should ignore them, you won't get a return of investment from these services. They are basically scammers. &gt; I also noticed that some apps are featured on the app store. Do you have to pay Apple to promote the app that way or is there some kind of algorithm that selects the apps? They select the apps by hand, you don't have to pay them. If you want to be featured create great apps that use the latest Apple technologies. Last year, during the iOS8 release, they covered apps that had things like Today Extensions. This year they'll probably cover apps that implement the iPad multitasking stuff, or the search API. So make sure that your app is in the store with some iOS9 features on day 1 of the iOS9 release. 
Have you heard of a service called Parse? It will basically do everything you are looking for, and the best part is that it is free until you reach a pretty significant volume of alerts or database entries (I don't remember the exact amount). It has got a great set of APIs for most modern languages as well, including Swift. https://parse.com/ 
Yep, saved me a lot of time trying to create a backend.
Not sure what you want to do. But iOS has NSLinguisticTagger to tag parts of a string you supply. For example this code let text = "I want dinner" let options: NSLinguisticTaggerOptions = .OmitWhitespace | .OmitPunctuation | .OmitOther let tagger = NSLinguisticTagger(tagSchemes: NSLinguisticTagger.availableTagSchemesForLanguage("en"), options: Int(options.rawValue)) tagger.string = text tagger.enumerateTagsInRange(NSMakeRange(0, count(text)), scheme: NSLinguisticTagSchemeLexicalClass, options: options) { tag, tokenRange, sentenceRange, stop in let token = (text as NSString).substringWithRange(tokenRange) switch tag { case NSLinguisticTagPronoun: println("Pronoun: \(token)") case NSLinguisticTagNoun: println("Noun: \(token)") case NSLinguisticTagVerb: println("Verb: \(token)") default: println("??? \(tag): \(token)") } } yields: Pronoun: I Verb: want Noun: dinner You now know a lot about the entered text. ---- You might want to have a look at this talk: https://realm.io/news/natural-language-processing-with-swift/
Found this on SO and it works wonderfully
It really depends on what you are trying to do. If you are a new developer I highly recommend learning to use Autolayout for fairly simple layouts. The majority of simple apps out there can be done using autolayout and it saves you the headaches of different screen sizes and what not. It's not perfect by any means and can be frustrating with tons of constraints conflicting and such but it can help you a lot especially if you are doing very static layouts. Plus, it's easy to lay things out manually with springs and struts - just set the frame as either constants or relative to the superview, why not give autolayout a try and learn something new?
thanks!
I've tried these things too with little luck. The only thing that worked for me is when Big Bang Theory used one of my apps in their episode. That worked! Besides that... yeah not so much.
I strongly recommend using and learning auto-layout. It is tricky at first, even with a simple app, but once you master it, it saves you a lot of coding by hand for every possible screen size, both present and future. I hope they improve the way constraints are presented in xcode soon though as sometimes it can be hard to modify the correct one (or figure out which two conflict if you have an issue).
It is worth mentioning you need to whitelist urls in the info.plist starting with iOS 9.
&gt;Are the skills required for iOS and OSX development completely transferable, The UI frameworks are similar, but the UIKit was designed by people who had decades of experience in developing with the AppKit. The key difference I would say is that the UIKit is considerably streamlined.
What an interesting fantasy life you have. 
Try again, that sentence doesn't parse. If you write code the way you write English, then I suspect that Xcode is not the problem.
You would understand if you were able to talk a second language and if English was not your first. You would also know how to be polite.
Everything about this comment is true. Autolayout is painful. 
There are still people who stubbornly insist on designing pixel-perfect layouts by hand for every different screen size, but I think Apple has made it clear that this is only going to become more and more of a chore for developers as time goes on, and they're really trying to push autolayout as a result. The increasing expectation is that developers learn to think differently--more simply, really--about how they design layouts, instead of trying to over-engineer things, which is not only harder, but can lead to cluttered, confusing designs. They want users to be able to interact with the same app on any device, any screen size, in any orientation, and have it look beautiful. Autolayout aids in that process, and you should definitely learn it. As with many things in programming, autolayout generates quite a bit of drama because people are invested in the ways they've always done things, and they don't like change.
From what I remember when I tried it and got an error message, the phone needs to be on iOS 9 as well. Now that the public beta is out, it should work, right?
Got it working. I had to use another Apple ID however, because I was getting an error due to a bug in the Xcode beta.
Short answer. Yes. Swift is a good language to learn for a beginner programmer. I'm a full-stack engineering working in the startup world of SF and I started out programming in Matlab. I work mainly with Java and Javascript, but was able to make an iOS app with Swift in a matter of couple months. If you know the basics of programming, OOP, data structures, algorithms, MVC switching from languages should be fairly easy. I would have to say that Objective-C has a steeper learning curve than Swift and that the majority of startups/corporations nowadays still code in Objective-C, but some of the newer ones are transitioning to Swift. 
It's clearly going to take some time before I'm proficient. Is it unreasonable to think there will be a solid amount of demand for people writing in Swift in, say, a year or two from now? 
Swift 2.0 is a *huge* improvement. Cocoa is vastly easier to use since APIs return the correct types (instead of the ambiguous Objective-C "AnyObject") and error handling is now easy (instead of pure torture). Additionally, large numbers of bugs and obvious functionality holes have been plugged. I know this doesn't directly answer if Swift is good for a beginner but if you're simply looking for a comparison to 1 year ago: Swift 1.0 betas were nearly unusable. Swift 1.0 was constantly frustrating with continual crashes and unreadable compiler errors. Swift 1.2 worked okay but gave weird errors and crashes you if you tried to do anything interesting with generics, currying, enums or reflecting. Swift 2.0 is vastly better for *anyone* trying to use it.
Do you mean Interface builder? Because you can write autolayout constraints in code as well. 
Thanks for the great reply! I would never have thought of sending press releases to media outlets. Probably because I have a strong feeling that they will just ignore me but still worth the shot.
Try moving your request authorization and start of updates into viewDidAppear. Prompts likely won't work since the view hasn't even loaded when you currently call on the location manager to start updating.
You don't think Apple is going to completely supplant Objective-c with Swift, as is their apparent goal? I think they will, within 2 more years.
Ok, thanks!
Ok, there are thousands of production apps in Objective-c that are never going to be rewritten in Swift. What do you mean under "supplant"? Apple has not been doing much with Objective-C either way. They add some nice syntax sugar every couple years, but that's it. If anything it is stating that Objective-C is not going anywhere, since all new libraries support Objective-c and not abandon it/
I like your analogy! 
Just viewing your list, I don't think you will necessarily need a private API to get....things like speed, direction should be available via Core Location or Core Motion. 
That looks cool! I'll try it!
Can you give an example of where Swift is incomplete as a language because it relies on "ObjC" libraries? Swift has it's own standard lib. The only time I use any libs that were written in objc is when I am interfacing with the Cocoa Kits.
Here is a Stackoverflow answer that shows how you can show a notification based on this: http://stackoverflow.com/questions/7965417/ios-push-notification-alert-is-not-shown-when-the-app-is-running/7965961#7965961 You could always use a platform like AppBoy or any other open source alerting UX to do it yourself inline. You just need to catch the notification and then display the UX you want...
I work for a company that builds apps for huge brands like NBC, Coca-Cola, Chick-fil-a, etc. We use Autolayout. Some people think Autolayout is buggy, or that Xcode does not handle Autolayout well. These people do not understand Autolayout, so they are inclined to bad-mouth it. Modern apps are not built for iPhone + iPad like they once were. Your app must support any device resolution and aspect ratio, no matter how absurd. Just look at the split screen functionality on iPad in iOS 9. Autolayout is currently the best mechanism to achieve this.
Why not use CoreData, or some sort of persistent backend (Parse.com is good if you don't have server software experience)?
My professional experience has been: Startups are often using swift. Large established (fortune 500-ish) companies often have established code bases in Obj-c. Swift is amazing and growing in popularity but currently there's more existing code out there in Obj-c, and still a lot of apps that need work done with it. Going forward, the popularity and reach of swift will continue to increase. It's a good thing to learn.
I attempted using CoreData, yet it didn't play so well with a generated collection view. I'm wondering if there are any alternatives, and although I've used Parse in the past and thoroughly enjoyed it I need to locally store data this time.
Go for auto layout, it would (generally) make your life much easier. It can be a bit tricky in the InterfaceBuilder (+ really sucks for version control there) and the Apple solution for AL in code is a bit verbose, so once you grasp it well I would suggest to have a look at http://snapkit.io Also, bear in mind that for complex layouts with tens of interdependent views (e.g. keyboard) there is a non-trivial performance penalty.
Instead of passing nil for the handler, pass a closure. This will be executed when the user tap "OK". For example: alert.addAction(UIAlertAction(title: "OK", style: .Default, handler: { _ in self.performSegueWithIdentifier("some_ID", sender: nil) })) Edit: added example
The main issue that I see is that Swift seems to keep changing. Lots of example code out there is almost up to date, but not quite. This can be frustrating for a beginner. Also, some code samples you find are not so great. As a beginner, I've come across code tutorials that aren't as well thought out as they could be.
Try this: NSTimer.scheduledTimerWithTimeInterval(1.0, target: self, selector: "updateTime", userInfo: nil, repeats: true) 
I was afraid of the 'unfortunately'...just hoping for an easier way. Oh yeah...slipping into old habits...thanks for reminding me.
Download Xcode 7 beta 3? It's working fine for me. If you still use iOS 8.4 on your phone then you need to copy the contents of the latest official Xcode so you also have it on the new one.
Not sure what you’re going for, but maybe (untested): enum Directions:Int { case diagonalUp = 0, diagonalDown, row, column static let count:Int { return Directions.column.rawValue + 1 } var isDiagonal:Bool { switch self { case .diagonalUp, .diagonalDown: // if case in Xcode 7 return true default: return false } } } for directionValue in 0..&lt;Directions.count { // TODO: add generatorOf to Directions if let direction = Directions(rawValue: direction.isDiagonal) { if direction.isDiagonal { println("This is a diagonal") } else { println(direction.rawValue) } } }
This might work for you: public struct EnumGenerator&lt; I : ForwardIndexType, T where I : IntegerLiteralConvertible &gt; : GeneratorType, SequenceType { private var i: I private let en: I -&gt; T? public mutating func next() -&gt; T? { return en(i++) } public func generate() -&gt; EnumGenerator&lt;I, T&gt; { return self } public init(_ initFunc: I -&gt; T?, start: I = 0) { self.en = initFunc self.i = start } } Then, to use it: enum Directions:Int { case upDiagonal = 0, downDiagonal, row, column } // This is a sequence that can iterate through the enum let enumSeq = EnumGenerator(Directions.init) // To make it into an array Array(enumSeq) // [.upDiagonal, .downDiagonal, .row, .column] // To iterate through for direction in enumSeq { ... 
Thanks; I'd stumbled across AVAnimator but looks like you have to pay if you want to use it in a commercial app.
Is your phone running iOS 9 Beta 3?
Yup
&gt; small hack
Yep, you just need to copy some catalogue from Xcode 6 and paste it into Xcode 7's app bundle. Search my comment history, I linked to a SO's thread with this hack.
I believe you just need to set their contact, collision, and category bit masks to make the sprite physics affect each other.
MySQL is just the database, which is independent of the backend api you chose to implement. I'm a big fan of SailsJS (uses node and is built on top of express). You would also get the added benefit of built in socket implementation (using socket io), which could be crucial with your style of application. And yes, it does support MySQL. http://sailsjs.org
something like spriteName.physicsBody.contact = true ?
I agree it is poorly done, but when it works, I find it nicer than trying to determine every device screen size and orientation permutation.
I want it to be multi-platform later on
Gotcha. You might want to take a look at Azure. MS is actually doing some great PaaS (platform as a service) stuff there. https://azure.microsoft.com/en-us/documentation/articles/mobile-services-ios-get-started/ If you don't mind getting your hands dirty, then Amazon's AWS is hard to beat. http://aws.amazon.com/mobile/sdk/
UIKit =/= WatchKit. Control-drag might be the way to go, otherwise redesign your app.
Out of interest, what chat app? :)
Parse user here, enjoying it as well.
Thanks for all your help
That is going to be a painful process but here it is: 1. Find a Cloud hosting service. Recommend: Amazon AWS, Microsoft Azure, Google Compute. Others: Linode, DigitalOcean etc. 2. You might need multiple servers if your data gets big and you will need to configure your infrastructure. 3. Plan your database based on what you need to do. Do you need reporting, joins, etc? If yes, go with SQL. If not, I would go with Mongo. Because it is simple to configure, easy to scale, and it is unstructured, so the flexibility is higher. But again you need to figure it out. Parse uses a NoSQL database (I don't know if it is Mongo, but it might be). 4. After you setup your database, you need to create an interface for your REST application to make it talk to the server. No Mobile client should talk directly to the Database. It should talk to the interface and get a response, preferably in JSON format. 1. To build a REST application, first choose a language - PHP, Python, Ruby, Javascript/NodeJS 2. Then choose a framework. For PHP, check out Slim. For Python check out Django. For Ruby, check out Ruby on Rails. For JS/NodeJS, check out ExpressJS + Mongoose. Most people I know use MEAN stack. MEAN stands for Mongoose,Express,AngularJS,NodeJS for web applications. In your case, you just need to ignore AngularJS because you will be basically making an API server. If you ask my personal preference, it is PHP because I am comfortable with the language but I know for a fact that when Swift Open Source comes out and people start writing web libraries for it, I will change the language to Swift. Parse itself uses Javascript if coding is needed. 5. Create your REST API. Some personal tips on routing. Use version number for your API. For example have route like "GET /v1/users". And use plural when giving a name for your endpoints. For example, "/v1/users", "/v1/places", "/v1/photos". If you want to go with this approach, it is going to take lots of time and you will be facing LOTS of problems. If you are doing it for learning, go for it. But if you are doing this for something production and you are doing it alone, I can assure you that you are going to hate switching between languages. If I were you, I would go with Parse.com or CloudKit. 
Thanks. I'll give it a go. I like this generating one's own sequence concept. I've had some fun and games getting it to work. It appears that Apple are still fine-tuning their sequence and generate syntax. Many/most/nearly all examples on the internet don't work on my versions of xCode (6.4). While Apple is still refining Swift, all examples on the internet should be prefaced with the version under which their code works. [Including mine, which I'll got back and add, once I get my sequencing working). I appreciate the time and thought that you made to assist me.
I'm having fun and games getting the GeneratorOf to work. Nearly all examples on the net don't compile under my version of xCode (6.4).
Just based on the info you've given in this post, this is the structure I'd use: 1. A table view that shows all the different books, selecting a book takes you to a table view of all the chapters, which takes you to a table view of the next smallest sub-division, etc. (it's been a while since I looked at a bible so I'm not 100% on the overall structure but you get the idea) 2. Once you get to the table view that shows all the given translatable pieces of scripture, selecting the one you want to translate takes you to a screen with a text view on top and a text view on bottom. The view on top is read-only and the user input goes on the one on the bottom. Another thing you could try, if you are looking for a challenge, is make the book table view have sections that expand/contract which represent the chapters. This would offer a cool effect for the UI and also save the user having to dial into an extra view controller. It's not that hard to code up once you are comfortable with table view controllers. Just my $0.02...
I have no use for that because I'm on El Capitan, iOS 9 and Xcode 7.
Definitely go with parse if your requirements are simple. It's quite nice. If you have a more complicated need... I HIGHLY recommend sails.js. It's un-freaking-believable. Built on top of node and express but it's feature set is amazing. The socket work alone under the hood is worth it imo. Other than that /u/dGasim posted some nice info.
Hi /u/jzed Like to seek you opinion on MS Mobile Services. After reading through the link that you shared. I see that MS Mobile Services only works for mobile services. (no pun intended) i.e. If you have an iOS app that is doing great and you are building your team to do up a desktop app. It would not be possible to leverage on the same database / service. because it does not have a JS sdk. Do correct me if I'm wrong on this. I'm asking this because I'm working on an IOS app with a web app in the pipeline for my client so I thought of using windows mobile service. Thank you very much. 
Woah, why are you spooling up Core Data in didFinishLaunching? Do you want to get watch dogged? Why does the App Delegate even know about Core Data? Bad idea. The tutorials are wrong. Don't use Core Data in your app delegate. It's a big time code smell. 
You're doing the wrong thing in the wrong place. You shouldn't be doing Core Data stuff in your app delegate. Refactor (or just move) the Core Data code out of the app delegate and into a dedicated model class. An easy (but not necessarily always good) way of referencing the objects you need, in this case your managed object context, is to create a singleton or shared object – Google it, it's a very simple concept. Then use the context from within your view controller instead of trying to assign it to a specific view controller in your navigation hierarchy.
Finally worked it out. A lot of dead ends along the path, but a great learning experience. Thanks heaps for all your advice: /u/basthomas, /u/DressTheMonkey, /u/SheepWheatOre, /u/foBrowsing. I've got a deeper understanding of Swift (yet, heaps to go), especially with regard to creating custom iterators. My final (well, until I improve it) attempt is: enum enumDirections:Int { case upDiagonal = 0, downDiagonal, row, column func isDiagonal() -&gt; Bool { switch self { case .upDiagonal, .downDiagonal: return true default: return false } } func lastItem() -&gt; Bool { return self.rawValue == column.rawValue } } class Directions: SequenceType { let directions: [enumDirections] = [.upDiagonal, .downDiagonal, .row, .column] func generate() -&gt; GeneratorOf&lt;enumDirections&gt; { var i = 0 return GeneratorOf&lt;enumDirections&gt; { return i &gt;= self.directions.count ? .None : self.directions[i++] } } } let directions = Directions() for direction in directions { if direction.isDiagonal() { println("Diagonal") } else { println("Row or column") } } 
Does the model just create a new context? I've been assuming that I needed the AppDelegate's context specifically, is that not the case?
Thanks for your comment. :) The reason for posting it here versus /r/iOSProgramming was because I was curious if this could be achieved with Swift, without needing to go anywhere near ObjC. I don't think that is reason to be disappointed? Secondly, I've already searched for a semi-straightforward (and Swift based) solution, I've even tested out a few snippets people had offered (e.g. [here](http://stackoverflow.com/questions/26817618/generate-pdf-with-swift) and [here](https://gist.github.com/nyg/b8cd742250826cb1471f), but to no avail (or at least, not in what seemed a straightforward way). While generating a PDF from a screenshot (using Core Graphics) is a good fallback method, its just image data bundled inside a PDF container (i.e. no text accessibility or vector support, etc), correct? If HTML (with CSS styling) could be exported to the PDF I'd assume that the content would be appropriately accessible (not just bitmap data). Although it seems easier to send the data I need to a PHP script that generates the PDF ([like this](https://github.com/dompdf/dompdf), and then download said PDF, the big problem with that idea is the need for an internet connection...
Uh, are you wanting to draw something manually? You said generate something in HTML. Why wouldn't you just load up a web view and back out a PDF using core graphics? If you want to draw a PDF all manually, you *can* do that, and you would *have* to use Core Graphics. If you're afraid to go near Objective-C, I can almost guarantee you what you're describing is too complicated. You could hard code an HTML file, and load it up in an web view. I'm not saying I'm disappointed in you specifically. I'm saying you're asking an iOS development question. There's an iOS programming subreddit. Not going anywhere near Objective-C is near impossible if you're trying to be an iOS developer. I'll get off my soap box now though. Also, learn to love Apple's documentation. Everything you're wanting is [right here.](https://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_pdf/dq_pdf.html#//apple_ref/doc/uid/TP30001066-CH214-TPXREF101) It's literally called "PDF Document Creation, Viewing, and Transforming". 
If you don't want to go anywhere near objective-c, you might want to take a break from ios and come back in a year to see if things have changed. As it stands you were always bound to run into something you wouldn't be able to do in swift. To stay on topic though, you are probably right in regards to the bitmap part. 
Is it really anymore challenging than other desktop operating systems? You look at Windows, Linux, BSD and whatever and you find lots of cruft. Last I knew most of GTK and gnome was written in C. At least Objective C is a tiny step above that. That being said Swift does nothing for either iOS or Mac OS in replacing the tool kits with something more modern. Cocoa is still there wth Swift. 
Short answer: Use `weak` or `unowned` when you are storing the closure somewhere. Long answer: Read up on ARC, closure capture lists (with a focus on `weak` and `unowned`), retain cycles and you'll more or less understand. Also, that `showError()` call seems redundant. `return` when there was no error and call `self.showError()` on the last line of the closure.
Parse parse parse. Geeze all these people posting with zero experience. 
Noob Q. What exactly is backend? I was interviewing for an entry level ios developer position and the interviewer asked me 'are you more interested in backend stuffs'? Can iOS development considered both? Front end = Interface Builder, Backend = logic stuffs...?
Quick question for you. Have you ever had an issue with the 1000 limit on queries? We have an app where we want to send a notification to everyone in a certain area. The only problem is our largest case could be around 50,000 users (not likely but it's a possibility). I know we can get up to 10,000 by using skip but my client would rather have a better solution.
Backend refers to the application's data store, meaning where and how it stores it's data. Examples are mySQL, MongoDB, Parse and others.
I thought as much. It's a shame, I hope Apple fixes this soon, surely they realise how limiting CloudKit is in its current state?
&gt; Grand Central Dispatch does not keep a strong reference to the block you give it. Can you say more about that. That doesn't seem right. If GCD doesn't have a strong reference to the block and the view controller doesn't either, then who is keeping that block alive until it makes it to the front of the dispatch queue and gets executed? Or do you just mean that it no longer has a strong reference AFTER it executes the block? If that's the case then I'd still use [weak self] because if the VC pops there's no reason to parse the data so there's reason to keep the VC alive during a long network timeout. I would use [weak self] in the OP's example.
Both map and table views can be set up to use the same datasource so there's no memory penalty for that. The easiest way to do what you're asking is to have a parent viewcontroller with two child viewcontrollers, one for map and the other tableview, with the toggle switch in the shared region (navbar). The only thing to keep track of is that in the yelp app you can zoom in the map and then do redo the search in that region. This means that the map can affect the data source so when you toggle back to tableview it should update to reflect the changed data. Also, for both table and map views tapping on an item pushes the detailed view onto the navcontroller. You will need to decide if the navcontroller is at the parent level or if there are separate navcontrollers for table and map.
uncredible swifting must watch share and follow me
This is what I'd like to do, but I can't seem to get the date components to display in the label. "1) Create two labels, one to hold the time, the other to hold the am/pm label. Put different fonts/sizes or whatever you want there. Then in the code, use two date formatters, the first containing just the time and set that on the first label, the second containing just the am/pm and set that on the second label."
If you have experience on MySQL why not use it? Display all the info in JSON and make every app read it, you could create it your own small API.
Another vote for a simple back-end here. Parse hasn't been great in my experience, and if you're concerned about cost then it's probably not a good idea to lock yourself in. 
I think I understand what you're asking. Once you have player as AnyObject, you can cast it to PlayerSprite. e.g. array.enumerateObjectsUsingBlock { player, idx, stop in if let player = player as? PlayerSprite { // player can now by used like a PlayerSprite } }
From the JSON, the value for findItemsByKeywordReponse and ack is an array. I don't remember SwiftyJSON too well but I'd assume it's something like this: JSON["findItemsByKeywordResponse"][0]["ack"][0].stringValue
I'm going to dissent and say that I think Swift is *generally* a horrible first language. It's.. not easy. To really leverage the language and do useful things with it, you have to understand some not-basic programming concepts. The Swift language, on its own, isn't the easiest thing to wrap your head around (many ways to approach one problem, some "advanced" techniques are pretty standard, a lot of thinking quite abstractly (which, IMO, is hard for a beginner), and good luck to any beginner trying to wrap their head around what an Optional is). But you'll rarely be using Swift on its own -- you'll be using it in all of Apple's ecosystem, which is no small task for a beginner to pick up. Learning Swift will hit like a pile of bricks. But, if you're willing to stick it out, why not. If you can deal with the frustrations and several roadblocks you'll encounter on trying to do useful things in Swift, you can probably become a proficient Swift programmer in less time starting with Swift than Other Language -&gt; Swift. However, my recommendation would be to spend about 1 or 2 months studying either Ruby, Python, or Javascript, learn to do all the basics there, then begin to pick up Swift. I think your chances of success will go up, you'll stumble less, and it'll be less of a headache. I'd recommend Ruby and Javascript over Python, as they "think" more in the same manner to Swift. With Python you tend to find code that "thinks" in a C-style way. Choose Ruby if you'd be interested in learning Obj-C in the future (both borrow heavily from Smalltalk), Javascript if you want a more "Full stack" approach. Whichever language you choose, you'll now benefit from being able to use the different languages for different tasks. I wouldn't bother with C or Obj-C right now. Both of these languages take quite a bit of effort to become proficient in, and will distract you from your goals. They're something you can pick up later. **tl;dr:** Swift is a hard language, especially for a beginner to programming. However, which language you should learn depends on your goals. If your goal is to program in Swift, just suck it up and dive into learning Swift. If you want an easier path, first spend a couple months on Python, Ruby, or Javascript.
Smalltalk is a great entry point, especially if you want to use Apple's languages. For those who don't know, Obj-C is basically "Smalltalk bolted onto C," and Swift feels like someone wanted a language sitting somewhere between Smalltalk and Scala (Or, more so of, trying to pull Obj-C, along with its Smalltalk concepts, into a Scala world). If anyone has trouble trying to understand OOP, I also suggest Smalltalk. It really opened my eyes as to how to actually program in an OOP style (instead of just "procedural with objects").
I really do think a Swift programmer benefits from understanding ObjC's approach to using all of the ObjC/Cocoa libraries/frameworks, but is totally something you can get around. ObjC just doesn't "think" in the same way as most languages, and I think it really shows up in how you use the frameworks. But I think majeric's point still stands: Good luck using Swift without Apple's ecosystem. You're going to pretty much learn some portion of Apple's ecosystem to do anything useful in Swift, and because of this, I can't really recommend it (nor ObjC) to a beginner. Python or Ruby, where you have the luxury of asking, "What's a library?" after building half of a blogging platform, would be a better start.
Solid advice in this [thread](https://www.reddit.com/r/swift/comments/3cxcfg/best_backend_for_my_app/ct02rxt)
OK I had a second look, and the 10.11 docs mention it as being deprecated: https://developer.apple.com/library/prerelease/mac/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/index.html but actually not all of the methods listed are marked as deprecated. Either way, it seems clear to me that Apple is wanting devs to switch to NSURLSession if they can.
C++ is a pretty hard first language, most universities learn java first then C++. I guess that makes learning higher level languages pretty easy then!
Agreed that they want developers to switch, but those docs are the same as the iOS docs. [This](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISearchDisplayController_Class/) is what it looks like when they completely deprecate a class. They make it very obvious that a class is deprecated by displaying a message at the top and putting the deprecation in the availability section. As I said before, It's odd that they deprecated the important methods but left the class as non-deprecated. Perhaps there are some private methods in there that NSURLSession or some other frameworks depends on that they didn't want or have the time to migrate yet.
I'm not playing any audio. Say a user opens the Music app and plays a song. Now, when they open my app, how can I control the music that is currently playing?
If you need high performance, you can do it with dispatch_async() by passing a time created via dispatch_walltime(). But the easier way is to use a NSTimer. If you look at the initialisers of NSTimer, you'll find one that takes a NSDate as the first parameter, so there's no need to check regularly. This example fires in a minute, but NSDate refers to an absolute point in time, and you can use any date you want: NSTimer(fireDate: NSDate(timeIntervalSinceNow: 60), interval: 0, target: self, selector: "someMethod", userInfo: nil, repeats: false) Maybe you're not aware that NSDate can express points in time with millisecond-precision, not just "dates" in the sense of day/month/year. Another thing you might want to look into is NSDateComponents to create your NSDate object. 
I am coming out of school. I've been in development classes for a couple of years and have about a year of iOS development experience. Maybe I just need more experience? How do you get more experience in this field? Work on your own?
You want to work for Apple developing iOS, or do you mean you want to develop software for iOS? Because I do it as a hobby with the intention of building a portfolio. If you're not stuck working retail to support your kid(s), then spend all the time you can building software, building a portfolio, and learning while you earn a degree. That's what I would do if I could go back in time. I'm not sure what established developers do/have done though.
This is really interesting and well done. I'm not sure I understand the utility in defeating CoreData's uniquing by using value types. In all my work with CoreData, I've never once thought of uniquing as anything other than a huge asset.
Are you calling discoverServices on the active peripheral after didConnectPeripheral calls back?
By your definition core data is a backend. Databases are only a part of a backend It's usually 3 parts, database, an application and server 
I was able to find a couple of clients after about 8 months of studying swift. Nothing full time, but if you look around and sell yourself and your product well, you'll have some bidders. Just never expect the customer to come to you. Don't think to yourself that after taking a programming course, be it online or an actual class, that the customer will come to you with a lacklustre résumé. Work hard, put your body and soul into your programming, and even try to use a Steve Jobs-esque mindset that the work your doing is "Revolutionary".
Basically JAVA certifications and courses in android and iOS development. It's a from a technical school. I'm in northern Utah. 
Okay, so you don't have a degree, this is going to be the problem: you will have a rough time getting job one....but job 3-6 may not be so rough Utah in particular has more schools than places consuming their grads from what I understand. Prepare a self paid move to Atlanta, Austin, SF, LA, Boston, Chicago, etc You may have to take an internship instead of a full time position at first I strongly suggest putting in talks to conferences you can travel to easily, especially ones that record talks, and rehearse your butt off for the talk. This can definitely be an in to jobs, and looks great on a resume Put out high quality libraries that solve pain points in the industry. Follow every iOS dev you can find on Twitter, and be helpful with answers, but not about things you can't really answer. Retweet everyone who says they are hiring, and apply to any of them you'd like to work for *making it clear you're moving yourself*
Yeah, interfacing with the C foundation types is such a pain in Swift still. One thing I noticed is that the API you are using is deprecated in 10.11: &gt; "Use a LaunchAgent, XPCService or the ServiceManagement APIs instead." 
If you have sorted this by now, then well done and just ignore the rest of this. If not, I'd be glad to try to help if you can post some code which isn't working along with your description of what you are trying to do and what is actually happening. I can't tell if you are successfully getting the two strings containing the correct date components and you are having trouble displaying those strings in labels, or if the problem is getting the strings containing the date components. So (to coin a phrase I'm sure no one has ever used before): a hunk of code is worth a thousand words.
Is there somewhere I can find a list of all of the deprecated 10.11 APIs?
If you grab the release notes from XCode 7 it should tell you. Otherwise just use a copy of XCode 7 and turn on the deprecation warnings when you compile.
It looks like the whole new system boils down to using `SMLoginItemSetEnabled` and having a helper app in your main app's bundle that launches your main app. Dang Apple, A P P C E P T I O N much?
You don't the system does. That is what the SMLoginItemSetEnabled() function is for.
really? which app man! 
I'm just frustrated that it can't be as simple as NSApplication.sharedApplication().setLoginItem(true) or something like that. It's a bit ridiculous on Apple's part to make such seemingly simple functionality (to the user, at least) so complicated to implement.
Yeah, just finding this information has been a pain: * LSSharedFile -&gt; Deprecated, use Service Management API * Service Management Doc: Use Launch Services * Launch Services: Use LSSharedFile Dammit APPLE, THERE'S A HOLE IN THE BUCKET!
Well Frak, I just saw that the SM call explicitly says it will be hidden from the user's prefs. WTF APPLE?
If the API is deprecated in 10.11, does that mean the app will just crash if it tries running a line involving the API? I don't have access to a machine running 10.11, so I can't try it out, sadly. On the bright side, I at least have a few months to figure this out. 
Would it be possible for you to just set up your login dashboard instead of using a UIWebView to display the site's? The situation sounds unresolvable if you're dead-set on piping users directly to the site's login panel.
Thanks! Utility depends a bit on the use case, of course. If you're using NSManagedDocument or other Cocoa/UIKit tightly coupled UI &lt;-&gt; Core Data functionalities, then CoreValue is of limited use. However, if you're doing lots of operations and processing on the items in your CoreData store, then using CoreValue can yield a huge performance boost and make the interaction with CoreData objects much less awkward (i.e. way less code to write). The reason for this is that NSManagedObject's valueForKey has a lot of implicit dynamic dispatch in order to look up a value. Swift's type inferencers does a (by now) a very good job of optimizing calls and inlining them. All this can't be done for valueForKey. Of course, one can create an NSManagedObject subclass, but that's still a lot more heavyweight than a lightweight struct + some protocol extensions. In Addition to that, as FutureIsMine points out, threading is much easier with value types.
Great explanation!
This happened to me during the first submission of my first app - for *me*, there was no way around it besides removing the webviews that contained the content, which means we couldn't link to our source website anywhere within the app. I believe you may be able to apply a custom style sheet to a UIWebView or a WKWebView, in order to hide the links for purchasing stuff, but I've never done so.
Super helpful thanks. I will keep you in mind. 
If I understand correctly, the user's already denied your request in the past? If that's the case, they need to enable it in their settings under location services. You can let them know that's the case and give them instructions on how to do so [Relevant Stack Overlfow](http://stackoverflow.com/questions/26725159/request-know-their-location-after-his-deny-it)
Right. I wanted a way for the pop-up to show up so they they just press allow in the app as opposed to going back to settings. Just a little detail. But thanks for that link! I'll certainly be using that as the alternative. 
It means it will work in 10.11, but it may stop working on 10.12 I don't know if it will crash, or not load, or just not do anything. They may just stub out the functions so old apps don't crash, but don't do anything either. 
Whipped It is nothing special but it's my most popular app, lol. 
Woah man! Did you contact them or something or it happened without your knowing?
This is what I used to learn a little bit about CoreBluetooth. [Give this a look over and hopefully it will help!](http://anasimtiaz.com/?p=201)
Hard to say. Look at viewDidLoad and viewWillAppear on the new ViewController at least for starts.
I even went ahead and connected the segue to a blank, classless, viewController and it still happened 
Bond does seem quite useful. HanekeSwift actually comes in handy with something I'm doing, so thanks for that too! :)
So I'm just barely getting into Swift and all this library business is till way over my head. Anyone willing to take a few mins and give me a quick run-down of what they're really for and how to use them?
Sadly, no degree or experience is the issue. Aim to get something entry level, and learn from the pros there. I'm not familiar with Northern Utah but it's a lot easier to be hired by a company local than working remote for your first job given your circumstance (no degree or experience), so some of your problem might be location. I have a pretty decent background in IT in general, but my iOS development is more a hobby and I'm a beginner at Swift. I do see job offers every other day though for 80k+ entry level in San Diego, so don't lose hope.
It should just be self.addGestureRecognizer(UITapGestureRecognizer(target: searchBar, action: "resignFirstResponder")) note: this is without testing it or anything... 
let gestureRecognizer = UITapGestureRecognizer(target:searchBar, action: "resignFirstResponder") self.addGestureRecognizer(gestureRecognizer) I think this would be how you would translate it to swift.
Look for a `dismissViewController:animated` call somewhere.
[This is where the documentation can come in really handy](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIGestureRecognizer_Class/index.html#//apple_ref/doc/uid/TP40009279-CH1-SW27). At the top of the page, you can click to show Objective-C, Swift, or both implementations side by side.
Just wondering what you guys think of my new simple tutorial series.
They're too cheap to apply for a business account eh? Well, it being under your name will give you quite a lot of power over the app then. If it can't be used by general users, then it probably won't be approved, that is what business ad-hoc accounts are for. https://developer.apple.com/programs/enterprise/ It's $300/yr, seriously no reason for the business not to do it.
Why do they have to be swift if your making iOS ? Can you not still read and subclass Obj-C ?
No problem! Apple really has done an excellent job weaving Swift into the online documentation.
Thank you ArvoHeikki. Swift developers need to know this. Unfortunately the parent post has been downvoted to zero and beyond (for now at least). This is one of the most valuable tips a beginner or experienced Apple developer could be given in 2015. Swift may be the one-true future, but there is a bunch of ObjC out there, and it isn't going away tomorrow. Swiftians need to know how to read Objective C, or at least have an accurate and handy cross-reference. They also need to learn to love "the documentation".
Well, you should expect more if you wish to earn some money ;-). Do not forget to Integrate [Appirater](https://www.google.si/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;sqi=2&amp;ved=0CB8QFjAAahUKEwiqpOCDiN3GAhWCwHIKHesCCTk&amp;url=https%3A%2F%2Fgithub.com%2Farashpayan%2Fappirater&amp;ei=BUimVeqNJ4KBywPrhaTIAw&amp;usg=AFQjCNGHGbe28ghovOcQkg5jzIoFef0Hlg&amp;sig2=fSp5WformdcnvoWb-V6gaQ&amp;bvm=bv.97949915,d.bGQ). *Appirater is a class that you can drop into any iPhone app (iOS 4.0 or later) that will help remind your users to review your app on the App Store*
Swift and iOS beginner here. Would a good use case for this be temporarily holding some data while waiting for it to be sync'd with a server? Or is this too heavy of a solution for that and I should use some something lighter?
Hehehe thanks
Another option if you are storing locally is to use SQLite, which is a regular relational database, but not network based. You can think of it as the file format for your App, and then use SQL commands to store and access your data. It does not support things like stored procedures, but has pretty complete coverage of basic relational concepts. You can find out more about it at http://www.sqlite.org . I don't know enough about Core Data, as it also will allow you to use SQLite as the back end storage, but you wouldn't access it with traditional relational database commands. 
It depends. Ream's strength is it's query and persistence model. It's an object database. If that lines up with your needs for an object store, then it's fine.
I think I am going to work with SQLite as some have recommended I have looked at some of the wrappers such as SwiftData https://github.com/ryanfowler/SwiftData and they look much more intuitive (to me) than Core Data. 
It's like one of those blinds where there are horizontal slats connected with strings. When you pull on one it's like connected to the others, but when you push it pushes the others when it collides with them. You can also flick them around and they will fly off screen and dismiss themselves. The imgur app also has something like this: http://imgur.com/KzjghaN
you can us SQL as Core Datas backend and still use traditional commands as strings
the imgur one looks to be a UIView with a UIPanGestureRecognizer on it and then translating the views position based on the gesture. The other maybe using spritekit potential for collision ?
Could it be that runAction is always executed asynchronously? Try checking the button.texture in a dispatch_async or on some event.
Probably the simplest way to write the array (array must have plist-compatible elements): let success = (myArray as NSArray).writeToFile("myArray.plist", atomically: true) To read the array (cast array to correct item type or leave as AnyObject): let myArray = NSArray(contentsOfFile: "myArray.plist") as [AnyObject]?
I'd offer another vote to check out Realm. I've been using it lately, and the dev shop I am at has been using it in a few recent projects and it has been pretty slick. https://realm.io/docs/swift/latest/ 
Been doing this for a very long time: Core Data shines when you need lots of things depending on fetched results controllers (which are great at updating UI based on database changes in lists the UI), and when you really need to have huge amounts of data that's only partially in memory at a time. Core Data Migrations, threading, and various other quibbling bits are really hard for most beginners to grasp You personally, I'd guess just using SQLite directly since you're familiar with it, and skip anything looking like a ORM such as Yap or Realm. If you do decide to go core data, check out marcus zarra's excellent book on the topic 
I would prefer it to be square yes, the code is just a normal UI slider implementation. I only edited the override func trackRectForBounds(bounds: CGRect) -&gt; CGRect { return CGRectMake(0, 0, self.frame.width, 25) } to make the bar taller 
Tesseract is great because it's free, open sourced and supported by Google. But (like any OCR) it's a resource hog and runs slowly on mobile. It's also not the greatest OCR engine I've ever worked with, but I'm used to working with ABBYY engines (finereader), which are incredibly expensive. I'm not sure what you're using it for, if you're using it on small images for basic recognition it should do fine. If you're working with larger images or need higher accuracy, you might look into handing off the OCR to a server (send it an image and receive a json object back). Even using Kadmos (industry standard handwriting recognition), I wouldn't expect great OCR results on handwritten words.
SIIIIIIIIIGH. Didn't work. When I go back to the initial view controller another copy starts up and I have two overlapping copies playing.
You can do that, but the Core Data schema is optimized and kind of opaque. Going SQLite has a few advantages, among them: you have full control over schema and queries, you can tune the threading directly without having to use pinball machine body english to keep it from going blooey at the wrong time and you can take advantage of SQLite features (like custom SQLite functions that let you layer in expensive computations to be done by the engine).
I will recommend you to check over [MagicalRecord](https://github.com/magicalpanda/MagicalRecord), it's a great tool for using Core Data, it simplifies it a lot so you don't have to worry about the right configuration
A local SQLite store will keep text in the clear. So, don't store passwords or anything else that needs to be encrypted unless you do it yourself. 
I am going to play around with Realm.io -- seems intuitive and powerful. 
[Here's the problem I'm having.](https://www.reddit.com/r/iOSProgramming/comments/3dfjdb/didupdatelocations_is_never_called_and_app_never/) I want a class that a VC can create an instance of and get the user's location via the instance's methods. I can't get my iPhone to ask for permission to use location services so I was just wondering if it might have something to do with the CLLocationManagerDelegate not working on this class
Thanks!
Yes. Though you have to be careful, because delegates are usually weak or unowned variables, you have to keep a strong reference to the object that acts as delegate. Example for a tableView that uses separate classes for `UITableViewDataSource` and `UITableViewDelegate`: class MyTableViewDataSource: NSObject, UITableViewDataSource { func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int { return 2 } func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return 1 } func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { let cell = tableView.dequeueReusableCellWithIdentifier("Cell", forIndexPath: indexPath) as! UITableViewCell return cell } } class MyTableViewDelegate: NSObject, UITableViewDelegate { func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) { println("Did select Row") } } class ViewControler: UIViewController { var tableView: UITableView! let tableViewDelegate = MyTableViewDelegate() // need to keep instance variables because tableView.dataSource is unowned let tableViewDataSource = MyTableViewDataSource() // ditto override func viewDidLoad() { super.viewDidLoad() self.tableView.dataSource = tableViewDataSource self.tableView.delegate = tableViewDelegate } // no dataSource and delegate methods in the viewController }
There's an easier way to flip from a a viewcontroller to another: vc.modalTransitionStyle = UIModalTransitionStyleFlipHorizontal; [self presentViewController:vc animated:YES completion:nil]; And to flip back you can do this: [self dismissViewControllerAnimated:YES completion:nil]; This works with the whole screen. Not sure if this is what you want to do but it's much easier than the traditional view flipper.
If you're doing realtime chat use Layer Atlas. atlas.layer, it's great if you need to roll out something quickly with read receipts, photos, and notifications that actually arrive correctly.
Facebook and Google. If you host your PR site on GoDaddy (it's not great, but cheap) you get $100 credit on Google ad words and $50 credit on Facebook advertising (which is bad ass), for new hosting.
CoreData will very likely do what you need. It's really just a way to map a database to an object oriented way of thinking. It is still backed by an SQLite store. If you are comfortable using SQLite already, it's not a bad idea to just use that. SQLite is compatible with iOS. Realm is a good alternative, if you are looking for something like CoreData. It is much easier to learn, however, be warned because it is in Beta still, there are features that are missing that you would expect from the database solution. I could not use it for my applications because of missing features. It is growing rapidly, but is still lacking in my opinion. If you decide to use CoreData, I highly recommend that you use MagicalRecord. It will make your life 100x easier.
Why did I not think of that... Such an easier solution. But it would be a tuple of `Vertex` objects. So: struct Triangle { let vertices: (a: Vertex, b: Vertex, c: Vertex) }
Drop your app on right subreddits on right time. Try other free sites like, hacker news product hunt etc. Find your niche people and drop show them your app. If your app is paid give away promo codes and offers so ppl spread the word about it. Anyways, tell us about your app, what is about (just curious)? Best of luck :D
I'll look into this. Thank you!
You're correct. I was just trying to get the basic idea across to Op.
You could post it here, not as a separate post, but at least in this post
Try this in your app delegate in case your initial view controller is being deallocated. You want to make sure that the onceToken is never changed throughout the lifetime of the app. I don't think you'll be using anything from UIViewController so I can't see why starting music in applicationDidLoad should be a problem. Can you post a snippet of code? I might be able to help a bit more. 
&gt; SDWebImage Indeed a very good library.
But the former form had vertices be immutable, so there's always 3 of them. I was watching the advanced swift video from the ADC 2014 and they mentioned the Indexable ... not sure if it was a protocol or not. Anyway, it looks like one can have the underlying representation in any form one wants, but still be able to pretend it's an array. Haven't tried it yet though, and I haven't found any other info on it. Thanks for the comments. Lots to chew on!
I fail to see why a tuple is better. 
I like this approach a lot - this is the one I use most of the time. The one additional thing I like to do is to create a typealias for `[String: AnyObject]` called `JSONDictionary` that makes it just a bit more readable and easier to understand. Then instead of `[String: AnyObject]` I just use `JSONDictionary`. More in depth on that here: http://roadfiresoftware.com/2015/07/how-to-use-typealias-to-make-json-parsing-more-readable-in-swift/ But yeah, I'm of the opinion that third-party libs like SwiftJSON just add an unnecessary dependency like /u/sirmoosh said.
Did you add the static lib to the project?
What exactly are you trying to accomplish? all the same or different for each? What have you tried that doesn't work? I would think setting the tintColor of the UITableViewHeaderFooterView would work for foreground text, and setting the background color on the contentView from the UITableViewHeaderFooterView would also do the trick.
Do you mean that? http://imgur.com/IpeB8jy
Another thing I just thought of, is the library file in the library search path in your project?
http://stackoverflow.com/a/19173639/2287993
No problem; good luck! There is a lot to learn about CB, but I feel this is a perfect place to start and get the basics down.
The library was sent to me by iBeacon manufacturer, I am not the author of the library.
You can also use NSJSONSerialization to easily create JSON from normal swift objects. let params = ["username" : "Andrew"] let json = NSJSONSerialization.dataWithJSONObject(params, options: nil, error: nil) // Use json in request
While its late in the day and I am having some trouble picturing what exactly you are trying to do, I think there should be a way around needing the button. Is it possible to get rid of the button and use the didSelectRowAtIndexPath and in that method use a NSNotification to send the required information via a dictionary under 'userInfo'? That solves your problem of only wanting to send the information for that particular cell while still allowing it to go through the prepareForSegue. Not sure if it helps.. edit: a word
If I were you I would implement bannerviewcontroller as root view controller. This way you will have banner always visible and better control everywhere. This is actually recommended way by Apple. I think there was a wwdc session in 2014 about it. Search for BannerViewController on GitHub. I am sure something will come up. You may also check Apple's implementation by downloading iAdSuite http://developer.apple.com/library/ios/#samplecode/iAdSuite/Introduction/Intro.html Good luck
I got everything to work, but when the app first opens the place where the iAd should be is a white rectangle before the iAd loads. Is Apple okay with this? Or do I need to come up with a whole new way to display the Ad to avoid that white space in the beginning.
Brilliant. Thanks for the clarification!
Nice explanation! I also think that it'd be helpful to differentiate between optional/unwrapping and typecasting since they share the same operators which might confuse beginners.
Thanks! I'll write about typecasting in the next article.
Or even better, look up Array on swiftdoc.org: http://swiftdoc.org/type/Array/
I'm not using that. I'm using [this](https://github.com/ashleymills/Reachability.swift).
Sounds like reachability isn't posting a change notification but without any other code it's hard to tell. Wherever you are changing reachability, make sure you are posting a notification. For example, something along the lines of: NSNotificationCenter.defaultCenter().postNotification("kReachabilityDidChange", self)
Thanks guys!!!
No problem, when I was getting started programming 2/3 of the battle was learning the terminology so that I could google (or stack exchange) for answers effectively. Since I was self taught, I'd do things like manually shift an array up so that I could insert a value and other things like that.
If itemSet is an array of structs, then your syntax is off. Try this: cell.textLabel!.text = String(itemSet[indexPath.row].name) Plus if .name evaluates to a string, you shouldn't need the cast. 
 cell.textLabel.text = itemSet[indexPath.row].name
If you setup the way I told you there would be no white space. When ad comes it will push your view up and show the ad at the bottom and when ad is not available it will hide the ad and push your view down. Apple recommends hiding ad when it is not available. I don't think showing white space will cause anything besides bad user experience. If you don't want to do in Apple way, you can hide/show your ad view by corresponding to iAd delegate messages
Nope - you can use virtual machine/hackintosh to run MacOS and test your iOS app on iPhone/iPad simulator. But it's much better to have at least some kind of Mac (Mac mini will be OK) and at least one real iOS device (iPod/iPhone/iPad).
Download the newest file every time they update and replace it with the old one...
I'd recommend using CocoaPods. Then you can just run the 'pod update' command to get the latest version.
Take "ReachabilityChangedNotification" out of quotes. It's a constant provided by the library
Thanks for the vote of confidence :) No repo set up yet; I seem to be starting a new fresh Xcode project roughly every half an hour at the moment as I feel my way round the language and concepts. And I've just stumbled across the Stanford lectures on Swift, on iTunes U - bloody hell, what a resource. Trying to absorb as much as I can in as little time as possible... thanks for the offer of help - I may take you up on it once my code looks a little less embarassing :) Fjords: overrated.
Tell you what. I'll set up a repo for you to use with some UI in place. You can download it and use it, or set up the Github.app to make it easier for me to help you out with other stuff...
I had quite some troubles for the very first time implementing IAP not so long ago. Here below I am pasting one of my ViewController's code for IAP (non-consumable), which is working ok (purchase/restore). Ignore the code about GUI, just look at the purchase/restore code. Because my IAP is non-consumable, there has to be separate "Restore" option (Apple guidelines). class UnlockViewController: UIViewController, SKProductsRequestDelegate, SKRequestDelegate, SKPaymentTransactionObserver { var UpgradeProduct:SKProduct? = nil var UpgradeRequest:SKProductsRequest? = nil var DoneButton:UIBarButtonItem! var EmptyButton:UIBarButtonItem! var ShouldUpgradeAndRestartOnDismiss = false var ProductIDS = Set&lt;NSObject&gt;() @IBOutlet weak var UpgradeRestoreUserMessages: UITextView! @IBOutlet weak var UpgradeButton: UIButton! @IBOutlet weak var RestoreButton: UIButton! let DefaultCornerRadius:CGFloat = 10.0 override func viewDidLoad() { super.viewDidLoad() SKPaymentQueue.defaultQueue().removeTransactionObserver(self) ProductIDS.insert(UnlockMemorizeriumProductId) self.navigationItem.title = MemorizeriumRealAppName DoneButton = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Done, target: self, action: Selector("closeUpgradeRestore")) let euib = UIButton() EmptyButton = UIBarButtonItem(customView: euib) showDoneButton(true) RestoreButton.layer.backgroundColor = DefaultResultsTableColor.CGColor RestoreButton.layer.cornerRadius = DefaultCornerRadius UpgradeButton.layer.backgroundColor = DefaultResultsTableColor.CGColor UpgradeButton.layer.cornerRadius = DefaultCornerRadius UpgradeRestoreUserMessages.backgroundColor = DefaultResultsTableColor UpgradeRestoreUserMessages.layer.cornerRadius = DefaultCornerRadius } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } private func showDoneButton(show:Bool) { self.navigationItem.leftBarButtonItem = show ? DoneButton : EmptyButton } func closeUpgradeRestore() { SKPaymentQueue.defaultQueue().removeTransactionObserver(self) self.navigationController?.popToRootViewControllerAnimated(true) if ShouldUpgradeAndRestartOnDismiss { NSUDER.upgradeMemoToFullVersion() } } private func setUserMassagesInfo(info:String) { UpgradeRestoreUserMessages.text = "...\(info)..." } private func setUserMessagesProcessing() { setUserMassagesInfo("processing") } func paymentQueue(queue: SKPaymentQueue!, restoreCompletedTransactionsFailedWithError error: NSError!) { showDoneButton(true) setUserMassagesInfo("\(error.localizedDescription), try later") } func paymentQueueRestoreCompletedTransactionsFinished(queue: SKPaymentQueue!) { // NOTE: IF successfully restored, this VARIABLE will be TRUE! if !ShouldUpgradeAndRestartOnDismiss { showDoneButton(true) setUserMassagesInfo("nothing to restore, you have not yet purchased \(MemorizeriumRealAppName)") } else { // NOTE: RESTORATION WAS SUCCESSFULL ! closeUpgradeRestore() } } // NOTE: Upgrade / Restore @IBAction func btnRestore(sender: AnyObject) { if self.navigationItem.leftBarButtonItem == EmptyButton { return } setUserMessagesProcessing() showDoneButton(false) SKPaymentQueue.defaultQueue().removeTransactionObserver(self) SKPaymentQueue.defaultQueue().addTransactionObserver(self) SKPaymentQueue.defaultQueue().restoreCompletedTransactions() } @IBAction func btnUpgradeRestore(sender: AnyObject) { if self.navigationItem.leftBarButtonItem == EmptyButton { return } setUserMessagesProcessing() showDoneButton(false) SKPaymentQueue.defaultQueue().removeTransactionObserver(self) if !SKPaymentQueue.canMakePayments() { showDoneButton(true) setUserMassagesInfo("parental control is enabled, upgrading \(MemorizeriumRealAppName) is not possible at the moment") } else { SKPaymentQueue.defaultQueue().addTransactionObserver(self) UpgradeRequest?.delegate = nil UpgradeRequest = nil UpgradeRequest = SKProductsRequest(productIdentifiers: ProductIDS) UpgradeRequest?.delegate = self UpgradeRequest?.start() } } func productsRequest(request: SKProductsRequest!, didReceiveResponse response: SKProductsResponse!) { let products = response.products // NOTE: WE ONLY EXPECT 1 PRODUCT! if let p:SKProduct = products.count == 1 ? products.first as? SKProduct : nil { UpgradeProduct = p let pay = SKPayment(product: self.UpgradeProduct!) SKPaymentQueue.defaultQueue().addPayment(pay) } else { genericUpgradingError() } } func paymentQueue(queue: SKPaymentQueue!, updatedTransactions transactions: [AnyObject]!) { for t in transactions { let singleTrans = t as! SKPaymentTransaction switch singleTrans.transactionState { case .Purchased: SKPaymentQueue.defaultQueue().finishTransaction(singleTrans) ShouldUpgradeAndRestartOnDismiss = true // NOTE: Purchase was successfull closeUpgradeRestore() case .Restored: SKPaymentQueue.defaultQueue().finishTransaction(singleTrans) ShouldUpgradeAndRestartOnDismiss = true case .Failed: SKPaymentQueue.defaultQueue().finishTransaction(singleTrans) genericUpgradingError(custom: "purchase process failed / canceled") default: () } } } private func genericUpgradingError(custom:String? = nil) { showDoneButton(true) setUserMassagesInfo(custom != nil ? custom! : "error happended (is internet connection available?)") } func request(request: SKRequest!, didFailWithError error: NSError!) { genericUpgradingError() } } 
or in swift 2.0 guard let a = a else { errorHandling } a.doSomething() 
thanks :)
enumerateObjectsUsingBlock takes a (BOOL *), a pointer to a BOOL that you fill in if you want to break out of the enumeration early. OP, you'd be much better off iterating through the objects using the enumerate function in Swift. for (index, player) in enumerate(players) { print("\(index): \(player)") }
Ahh - hold up, I think I'm starting to get it. It's the &gt; override var objectValue:AnyObject? chunk that's key - so *that's* how each instance of the cellView can access the properties of the channelData object acting as its data source. Fab :) I deleted all but one set of controls in the cell, but can now dupe 'em as I need: [Imgur](http://i.imgur.com/vLHfaKU.png) I'm barely starting to get my head round Git, too, so I've forked your project so I can at least upload what I've done - https://github.com/howiemnet/MotionControl
After looking through the Reachability source, it is called, so what you have above should work. In fact, I downloaded the Reachability sample project from Github, copy and pasted what you have above into the ViewController class, and ran it on an iPad mini 3 and didn't see any issues. Your `println` calls were fired and showed up in the console. My guess is there is an issue with how you are using CocoaPods and integrating it with your project or something along those lines.
I used the constant but Xcode was bitching to me about how it could not recognize it. I wonder if this is a clue to my problem. Xcode doesn't have any other problem with my other Reachability code.
My next task will then be testing what's exactly causing this. Maybe there is a conflict with another library??? Thanks for the help so far.
&gt; I wonder if this is a clue to my problem. I agree. I'd throw that constant back in there and start troubleshooting. I'm guessing if you get Xcode to recognize the constant you'll get the expected response.
The method you chose is dependent on how related your other class is to the view controller containing the method you would like to call. Highly Related: add a property to the class wanting to make the call to store a reference to the view controller instance Moderately Related: Use a delegate/protocol structure, where the method being called may be common among other view controllers, and all you care about is that the method is implemented by the delegate. Moderately Related: Use a closure as a callback. The reason this is still moderately related is that the view controller still has to interact directly with the class to set the property. Not Related: Use NSNotificationCenter to trigger the event, where the class emits a message, and the view controller monitors for the message, using the method to call as its action.
I feel a better way would be to use a message manager that manages all things message related. Then, create a message delegate that includes a method that is called when new messages arrive and passes the new messages as an argument. Have your main view controller implement that message delegate and then use that new set of passed-in messages however you need to in your main view controller.
Sorry, still learning some of this stuff. How do I get the reference of the view controller? And then I imagine I'd just pass it as an argument in the other classes' construction?
That's fine, but my opinion is that the way I described the structure would maintain more a MVC structure by isolating the message logic and just focus on view-related logic in your controller. Having read what /u/Stephen110 wrote, their options would suffice also. 
How is an instance of the class created? Directly from the view controller? I wouldn't use the constructor to pass a reference to the view controller, just have a public property. (Again, if the view controller and the other class are highly related) // Inside your other class - instance level public variable public var viewController:MyViewController? // where you want to call the view controllers method if let viewController = self.viewController { viewController.someMethod() } // Inside your view controller var myClass = MyClass() myClass.viewController = self Hopefully this makes sense, it's kind of a bitch to type out on mobile. 
guard else is awesome, though I think it's a bit advanced for beginner.
You can probably use NSUserDefaults, it persists data locally &amp; easy to work with. https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSUserDefaults_Class/ 
Looks like a UITableView to me
You have a mac? This isn't ideal, but you could use Sublime on your Fedora machine and then screen share with something like TeamViewer https://www.teamviewer.com/ to compile/test. I wouldn't suggest programming through it, I tried it and it sucks. You just need someone to install TeamViewer on you mac and leave it running
Thank you
Forgot to say thanks for the gold, wasn't necessary, but I appreciate that you appreciate my small amount of help. =)
Basically what I envisioned is the main page will have the "sign up and login tab" at the bottom. But I want the user to be able to swipe left and right while the tabs are still at the bottom. Each new page will have information. edit: thanks, I'll check that out right now 
I see. What you wanna do is use UIScrollView paging to slide these views &amp; have 2 buttons at the bottom. You don't need to use tabs. Your main/container view will have: scroll view, login button, signup button. The scroll view contains the stuff you wanna swipe. https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/UIScrollView_pg/ScrollViewPagingMode/ScrollViewPagingMode.html https://www.youtube.com/watch?v=PGAHR2Ji7jc 
Not completely sure what you mean. How many tabs? Just Sign Up and Login? One of the points to note about UITabViewControllers is that at least one of the tabs should be selected at all times. Which tab is selected while you want the user to be able to swipe left and right? Either way you should make the UITabViewController the rootViewController of the window and put your other controllers (one for each tab) as child controllers of the tab view. It sounds like you want one, or both, of these child view controllers to be a UIPagedViewController. Hope that helps. 
You could assign a tag in IB, and use a switch statement, but this would be a bad programming practice. Functions should have a clear purpose, rather than jamming multiple sets of logic into a single function - so I agree, split it into 2 functions.
Great, thanks. I'm trying to conform to common practices as much as I can.
Get Xcode 6.4 and watch the Stanford iTunes U course: https://itunes.apple.com/nl/course/developing-ios-8-apps-swift/id961180099?l=en
To me the biggest problem with protocol oriented programming and the generics involved is the fact that we can't parameterize on the Self type. For example, this prevents us from creating a proper Functor protocol. protocol Functor { typealias A func fmap&lt;B&gt;(f: A -&gt; B) -&gt; Self&lt;B&gt; // error! Self includes A; no way to re-parameterize. }
Make the rectangle transparent and then fade in alpha when banner is found. UIView.beginAnimations(nil, context: nil) UIView.setAnimationDuration(1) UIGAd.alpha = 1 UIView.commitAnnimations()
Yeah, the old `reverse()` returned an Array, as far as I remember. They've made a lot of similar functions lazy, actually.
Thanks for the help, I appreciate it. 
Try incrementing your App's build number. I had this problem when trying to implement IAP for the first time. Increasing the build number (not version) made the IAP methods magically start working.
I'm in. 
I ended up removing the pod file and added the Reachability file to my project and it works. Seems to be an issue with the podfile. Thanks for the help!!!
Swift beginner here. Why is if a != nil { a!.... } bad code?
Thanks for letting me know about the slack, awesome!
So 10% of us in /r/swift signed up for your thing it would be bad? This statement makes no sense.
You can manufacture an index for your reversed array by doing this: let forwards = [1, 2, 3, 4] let backwards = forwards.reverse() let bIndex = backwards.startIndex.advancedBy(1) assert(backwards[bIndex] == forwards[2]) And, in fact, any Index can be handled in this way; and the ones which are not based on Int can only be handled this way. It seems a little wacky, but it does mean that collections are not limited to being indexed by types where arithmetic is a thing! So, the inventor of the collection is free to invent a corresponding index and define what it means to apply an 'advanceBy' operation to it. I thought I'd mention this for two reasons: * this is not the only place you may come across a non-Int index * by not constructing an Array from the ReverseRandomAccessCollection, you *might* reduce your memory usage. I say *might* because Swift has proven itself to be very clever with the optimisations, so who knows what slick things can happen. 
I really think tuples are meant as a kind of create-it-use-it-destroy-it data type, rather than anything more permanent. In this case, looking at the code as someone who doesn't know the first thing about what is stored in 'fullTracker', I have absolutely no idea what those three values mean. It could be someone's name, height and favourite year! Or it could be the name of a city and an (integer) x,y coordinate pair! Now of course you know what it means, but I can guarantee after finishing this code and putting it aside for 6 months and working on something else, when you come back, you will need just a little reminder of what it means (especially the order of the medication uses and medication uses intended). So, no, I don't think a tuple is a good way to store this. So, the question is, what to use instead. If NSCoding weren't involved, I would probably use a struct. Because presumably an entry in fullTracker is created and not modified (ie it is immutable). But, given that you want to use NSCoding, and NSCoding only handles classes, then I would create a class. It is true you can screw around and manage somehow to store a struct, but why bother when it is so easy and straightforward to store an instance of a class. Even though I was using a class, I would still make it immutable. In other words, there would be an init method which sets all the properties, and then after that those properties can be queried but not changed (ie they have gets but no sets). Furthermore, I'd use an NSDate to store a date and not a String. This is because a String will allow you to put any old nonsense in there, whereas an NSDate will be limited to real dates. And, later, you will be able to format the date in **any** format you like, whereas a String will only ever look like just what it looks like, unless you were to create a bunch of date parsing and formatting code. But, NSDate already has all that code just ready for you to use. One final small note, fullTracker isn't a very explanatory name. I'd consider something like medicationEvents or medicationInstances or anyway something which indicates that it contains multiple instances of something to do with medication. Again, the reason being for easy and swift comprehension by anyone reading this code (which could include you in a few months time). 
I love when a seemingly simple question leads down a rabbit hole. This is the type of knowledge I love to stumble across in this sub (and other programming subs). It's the kind of stuff you don't often find in tutorials or published texts. Thank you!
This is *exactly* my experience. Nice write up!
As someone who finished learning Swift and is starting to learn Xcode this was really inspiring for how overwhelming it can be sometimes! Thanks for the write up!
Very inspiring, awesome write up. My question is however, did you ever have questions when things didn't work out and you didn't know why? There have been many times when I'm working on something and at some point I get stuck and it get's really annoying when I can't solve it out myself and would like to ask someone but don't know who. 
Great tips! Are there any specific Swift tools that you would recommend to a fellow beginner?
Glad you enjoyed it! And ya there have been plenty of times where things didn't work out (especially when I downloaded an example app straight from Github and Xcode threw up a bunch of warnings) and honestly the first thing I do is search google, then I check stack overflow to see if someone there encountered the same errors, if nothing comes up then I would actually post on stackoverflow (after reading some solutions on SO I came to realize that there was not much tolerance for laziness so I made sure I truly couldn't find the solution anywhere else online before posting there) I've spent days debugging things only to find out the solution was super simple. No matter what problem I've faced there has never been a problem that I couldn't solve, you just need to be willing to put in the work. Honestly, it's worth it. Even after finding a simple error caused a big, I usually learned like 20 other things in the process of debugging that made me a better developer. Think of it as a learning opportunity, not a roadblock 
This is pretty true. I thought I finished learning swift after reading the documentation but I realize even now that I probably don't even know half of the language (but that's ok! One thing to keep in mind is that you don't need to know every aspect of the language to build an app, something I wished I came to terms with earlier!)
You have to add a sandbox user in iTunes Connect that is authorized to test the IAP when in Sandbox mode. 
When all else fails, I start to return to the fundamentals. I revisit tutorials about the syntax and the very basics of whatever part of the code I think is causing trouble. It doesn't always fix things, but I always walk away knowing things better and many times I realize my mistake/come up with another way of doing the same thing. 
Thanks for the reply. What is the difference of putting border.strokeColor? instead? 
I see now, thanks so much. 
if year % 100 == 0 { return (year % 400 == 0) } else { return (year % 4 == 0) } It's the same as saying this. Some people use it as shorthand for really simple if else statements.
That's the ternary conditional operator. It's like a condensed `if` statement: if condition { something } else { something else } is equivalent to: condition ? something : something else It's able to do one extra thing than the `if` statement, though: it can return a value. This is actually its most common use. So this line of code: let answer = (number % 2 == 0) ? "even" : "odd" will set `answer` to `"even"` if `number` is even, and `"odd"` if `number` is odd. In your example, it's doing a similar thing. The equivalent `if` statement looks like this: func isLeapYear(year:Int) -&gt; Bool { if year % 100 == 0 { return year % 400 == 0 } else { return year % 4 == 0 } }
That's the ternary operator. To help you understand it, that line is the equivalent of: if year % 100 == 0 { return year % 400 == 0 } else { return year % 4 == 0 } So the expression to the left of the **?** is the condition. If the condition evaluates to **true**, the result to the left of the **:** is used. If the condition is false, the result to the right of the **:** is used. Its just some sugar so that you can write that common style of if-else in one line.
Thanks!
Thanks!
the code first checking if a is not nil &amp; then unwrap it using a! instead of doing that you can do "if let x = a", which will exactly does the same thing &amp; now you don't need to keep having (!) after x because it already unwrapped. The code is now cleaner &amp; easier to read. It also the preferred way to work with optional. 
And to take it one step farther in swift, you can say something like Label.text = SomeOptional ?? "Default" Where the double question mark says use this value if it is not nil and unwrap the optional, or use this other value ("Default") if it is nil Edit: this is called the nil coalescing operator
I imported SpriteKit and that doesn't change behaviors like Foundation does
Most of the really useful books/tutorials are written for Objective-C. Swift is only just over a year old after all. The good news is that exactly the same concepts and APIs are used in both Objective-C and Swift. So that means if you've had prior programming experience you can just look up some 'older' resources that are written with Objective-C in mind (look for some of the more popular Cocoa books on Amazon, for example). Also, there's http://www.raywenderlich.com, which I see you've already found. There are loads of good tutorials on there, such as http://www.raywenderlich.com/46988/ios-design-patterns (yes, this is iOS, but it almost all applies to OS X too, iOS and OS X are more similar than they are different). There's a Stanford MOOC too that's meant to be good; again, it's iOS, but it'd still be worth it. If nothing else it'd help with finding your way around Xcode. WWDC videos from older years are *incredibly* useful, especially the ones where they introduce a major feature, to give you a better understanding of how some of their APIs work, e.g. Core Data, Core Animation, document-based apps, etc. Finally, I'd just trawl Github for some good open source Mac apps to give you an idea for how a more complicated app should look like. Edit: If you want to know things like naming conventions etc. for Swift, Apple's official Swift book is a good place to start, and this guide is also pretty good https://github.com/raywenderlich/swift-style-guide
I ended up figuring this out! The problem is something to do with the fact that the project files were in my Dropbox folder. Moving the folder to somewhere other than my Dropbox folder fixed it. Strange bug!
You should avoid using orientation and idiom checks in favor of size class testing. That will allow you to support multitasking nicely in the fall.
just getting into swift, appreciate this road map I should anticipate, thanks :) took a peek at cocaopods prior and kinda scratched my head and thought "I'll come back to that", but after googling found the following... http://www.raywenderlich.com/97014/use-cocoapods-with-swift posting it as the tutorials I've found on that site have been the clearest most helpful I've found so guessing this will be useful to folks on this thread. if you've programmed any OO before but new to swift, do check out that site, there a few great articles that connect the dots to your prior experience. I got pretty tired of reading tutorial after tutorial, watching some online stuff, and the tutors simply skipping over important details, that site was the first to explain the why of everything it was telling you to do.
I think I will go for it! Thank you!
Thanks for the inspiration!
I understand, decent goals really does help with motivation when it comes to learning. So the question is what are you into, RepRaps, model engineering, dog raising, fast cars, slow boats, mountain climbing or whatever. There is always something that you can tie into your effort to learn something new. So inventory your interests and create an app to support that interest. For example if you are into RepRaps, building a G-Code sender app would be a big challenge or go a step further and make a an entire G-Code / CNC MMI. Put your own polish on something that already exists. 
Dude! Thank you so much! You just helped me realize what I want to build! 
This is in a lot of other languages as well; it is called a ternary operator. Its basically a quick and dirty if / else. var myNum = positive ? 1 : -1 is exactly the same as var myNum if (positive) { myNum = 1 } else { myNum = -1; }
Interesting writeup. One question though, where do you draw inspiration for new apps from?
Seems like you might be unwrapping a nil value. In most cases you want to try to avoid using ! to unwrap. It's much safer to do something like this: if let location = object["location"] as? String { self.resultsLocationArray.append(location) } Something to note, it's not a good design to have an individual array for each value you're trying to use, especially if you safely unwrap like above. You will only append each array if there is a value, so if one object has a nil value, your whole array is going to be off since it will be a value short. A quick and easy alternative would just be saving all the result objects in one array: var parseResults = [PFObject]() query.findObjectsInBackgroundWithBlock { (objects:[AnyObject]?, error:NSError?) -&gt; Void in if let objects = objects as? [PFObject] { for object in objects { parseResults.append(object) } } } func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { var parseObject = parseResults[indexPath.row] var cell:mainCell = tableView.dequeueReusableCellWithIdentifier("Cell") as! mainCell ... cell.profileLbl.text = parseObject["profileName"] cell.messageTxt.text = parseObject["tweet"] ... } Also, with Parse objects, I find it a lot cleaner to use the shorter syntax for accessing an objects values: object["valueName"] instead of object.objectForKey("valueName") 
delayAndRun is a class (static) (it does not have to be of course) method and can be called like this: Helper.delayAndRun(2.0, closure: { () -&gt; () in // your code here... }) So, closure-code will be executed after 2 seconds-delay on main (GUI) thread.
I wouldn't recommend the learn-translate approach. Swift has its own styles and idioms that you will miss out on if you are only translating. The Big Nerd Ranch Guide to Cocoa Programming (5th edition) is 99% swift code. I've been through it and the examples are fantastic. Also I know the authors and they are very attentive to the online support forum with all of the updates to swift that can't be reprinted into the book. http://www.amazon.com/Cocoa-Programming-OS-Edition-Guides/dp/0134076958
Thanks so much for taking the time to make this post! I just started getting into ios development too. How does making money with your app work exactly?
For this app specifically I only make money when people download the app ($0.99 per download and I think I get ¢70 of that per download) 
Thanks! Just purchased. 
You can save another 5 bucks for a final price of 10 bucks here: http://crunchadeal.com/coupon/complete-ios8-swift-course-coupon/
&gt; self.resultsLocationArray.append(object.objectForKey("location") as! String) object.objectForKey("location") returns ***nil*** and you try to force-cast it to String. The better way would be: if let l:String = object.objectForKey("location") as? String { // ... }
You could probably use a UIGestureRecognizer on your ViewController to recognize a swipe down and then call dismissViewController to dismiss your modal
My guess would be that SKLabelNode is blocking the touches from being received by the SKShapeNode. This is odd because SKShapeNode should have userInteractionEnabled set to false by default (so touches should be passed up to the SKShapeNode). Maybe check to make sure that userInteractionEnabled is not getting set to true somewhere...
When you create a subclass, you can *override* the superclass/parent class' method of the same name and arguments. For example, suppose we have an **Animal** class with a method ```walk```. In this method we make the animal walk on 4 legs. class Animal { func walk() { // Walk on 4 legs } } Now we create a subclass of **Animal** called **Human**, however humans don't walk on 4 legs, so we can override the ```walk``` method to fit our need (2 legs). class Human: Animal { override func walk() { // Walk on 2 legs } } The fact that we are overriding to completely change a method here is typically considered poor design. In reality you should avoid overriding methods by creating a good design/structure! It's not just for changing a method completely though. Suppose in our example we create a subclass of **Animal** called **Cheetah**. Now cheetahs do walk on 4 legs, however they also wag their tail, so I can keep the default behaviour of ```walk``` by calling ```super.walk()``` then add some wagging code within the new override method in ```Cheetah```. class Cheetah: Animal { override func walk() { super.walk() // This calls the original parent (Animal's walk method) // Also wag tail } } This is saying: we are going to override the animal method of walk; still do what animal walk does but also do more.
Thank you!
That's pretty much what I had in mind, yeah. What I think is important, also, is to be able to communicate when I'm the person who wrote what I've posted. In general, tags would allow people to selectively block out some kind of posts, which I think might become really important. For instance, there are a lot of beginners' questions on here (which I think is fantastic). I could imagine over the next few months, as Swift becomes more popular, that the volume of those questions would increase. What I'm worried about - and maybe I'm wrong - is that people would get annoyed, and either start downvoting every newbie question, or leaving nasty and dismissive comments. Letting people opt out of the beginner questions might curtail that. To be clear, I don't think that that has happened yet: everything I've seen on here so far has been 100% positive, and I'm really enjoying all of it. But look at [this](https://www.reddit.com/r/programming/comments/35cr6n/real_programmers_can_do_these_problems_easily/cr372r6) comment thread on /r/programming, and you'll see what I mean.
 You'll probably want to use NSTimer: NSTimer.scheduledTimerWithTimeInterval(60, target: self, selector: "functionNameYouWantToRunWhenTimerReachesTimerInterval", userInfo: nil, repeats: true)
Very interesting method. An issue I foresee with that in my case that if they were to pause the timer that may not work. I'm sure I can figure out the math just using one second intervals. Thank you so much this is definitely a solid push in the direction I'm looking to head into. 
1. I was actually following the tutorial link you sent me. Though I was confused with the setBadgeNumbers() he did, so I implemented in my own way... I will take another look at it... 2. Gmail works like this: * I get a notification I got an email. * I open gmail application without clicking the notification. * After reading an email and closing the app, the notification is gone. My app: * I get a notification a task is overdue * I open the application and complete a task. I didnt touch the notification. * Although I completed the task, the notification I received is still there. I still have to clear the notification.
If it's not a problem, there's no need for it. My feeling is that there should be a system in place before it becomes a problem, though. That said, it's probably a lot of effort to implement. It's up to the mods, really.
There may be Swift in their front-end app development, though. The wire-transfer functionality, probably not.
If your code is making a POST request, just use [AlamoFire](https://github.com/Alamofire/Alamofire) or NSURLRequest (I prefer the former.)
Wow thank you!! Just purchased. Great deal :)
I'm really new to iOS development, so I have no idea how to use that. Could you please show me how to? I will deeply appreciate it.
Great news! Are you going to let the rest of us know what it is? 
I have tried using this function but I'm not putting things in right order since I'm keep on getting errors.
Cleaning your project before a build will help clean out any old errors and other cruft. 
You basically just need to add a callback function to your runAction, then put everything you want to have happen *after* runAction completes inside of that callback. For example: func runAction(action: SKAction, withKey: String, callback: () -&gt; Void) { // stuff runAction should do callback() } and to run it: runAction(groupOfActions, withKey: "flash") { () in // Do things after runAction is complete let myScene = GameOverNew(size: self.size) myScene.scaleMode = scaleMode let reveal = SKTransition.fadeWithDuration(2.0) self.view?.presentScene(myScene, transition: reveal) }
Don't put it in a class. As the name suggests it should be global. If you put it in a class you can still access it by ClassName.Global.available
Thanks for the comment. I really appreciate it. UIApplication.sharedApplication.cancelLocalNotification(notification) I do think the function will work once I get the notification I want to cancel. The problem will be how to get the notification that was already sent out. The notification that I want to 'clear' was already triggered. So I don't think I can use this: UIApplication.sharedApplication().scheduledLocalNotifications If I understand correctly, 'scheduledLocalNotifications' will get me list of notifications that has not been sent out yet. So the solution on that post will help only if I didn't get the local notification yet. I just came across [this post](http://stackoverflow.com/questions/8682051/ios-application-how-to-clear-notifications) it sounds like it might work... I will try it out later after work... edit: The answer I found does not seem to work.. I read it wrong...
SOLVED. Answer here: http://stackoverflow.com/questions/31528290/accessing-values-in-swift-1-2-multi-dimensional-arrays
 I'm not getting any results.. :(
So you made it sound like the Table/Collection views handle everything. So for my backend, it's alright to serve upwards of hundreds of items at once?
A nice way to do it is to use the animation api to allow it to fade away. After the progress is filled, do this UIView.animateWithDuration(0.3) { () -&gt; Void in progress.alpha = 0.0 } 
If you're pulling hundreds of images into ram at any given time, you risk being terminated due to memory usage. Probably best to set up something to download them to disk as a cache, then asynchronously load the ones you need to show from there.
No - for your backend I recommend looking into a way to provide a URL for each image, and use SDWebImage to load them asynchronously - it plays very nicely with table views and collection views. 
Just mind that it timers don't fire in the background ;)
It sounds like your loading the images in using contentsOfURL: this is probably whats making it slow, use as suggested SDWebImage or if you are already using AFNetworking/AlamoFire then this comes with UIImageView+AFNetworking/AlamoFire which allows lazy loading of images via: imageView.setImageWithURL(....)
Very nice! I don't really use ReactiveCocoa because it seemed like a lot of hassle, but this makes me wanna learn it because that's awesome!
What were the results when you did *exactly* as i_am_a_genus suggested? Did it compile? did it run? did it work as desired? 
Thank you! This works very well 
Maybe I'm misunderstanding how it works, but shouldn't those declarations in the examples be `var` and not `let`?
Well, if it won't recognise those variables outside of the for loop, then you need to move them before the for loop! And get rid of that tuple! You can just say let total = totalAttempts let successes = successfullAttempts // not exactly the best spelling of successfull ever! It isn't clear whether you want a total for each item in myMedsList or a grand total of **ALL** items in myMedsList. And if I make a guess, of course I'll be wrong. Just to get you thinking, here's how I would get the total of the medicationUsed in an instance of Medication. (*code is untested and written in the browser, so errors are possible*) define this function **inside** the class Medication (so it is a method) which looks like this: func totalMedicationUsed() -&gt; Int { return fullTracker.reduce(0) { (accumulator, item) in accumulator + item.medicationUsed } } Now you could do a similar thing for the other one (medicationProperUsageNumber). Then you could write a function or two which take an *array* of Medication instances and total those up (so you get totals of totals). *Very important: * take this one step at a time. Don't write a huge slab of code and then try to make it all work. Write a small bit, get it working; then write the next small bit, and get it working etc. That will be much easier than creating a large amount of code and having a large number of errors to track down. And you are not just getting errors because it is new: I've been programming for donkey's years and I still do it by writing a little and trying it and so on.
aww the code expired... 
I couldn't do exactly what i_am_a_genus suggested :( I have been trying to figure it out since, but I can't understand how to write down the code properly to make it work. I'm always getting different errors.
Try Stanford's iTunesU course on iOS dev with swift. It's very good and free. 
I use NSOperations a lot, but I am considering making an open source framework that will be more Swift. The idea is to have Futures that are cancelable, along with not only a Futures Queue that works like an NSOperationQueue, but also a Futures Stack that will work like a queue but be LIFO. 
Is this Swift 2.0 compatible? 
Pretty cool. I use a similar tool called [Jibber](http://rebel.tools/). It's not free though. 
The thing is that my two points might not be on the same x or y coordinate so if I make a rectangle between those points it wouldn't really make a line between them that I could check if my object is in between, it would create a rectangle that includes areas also not in between my two points.
Any tutorials you can direct me to for NSOperations? I tried watching the video and downloading the sample code but I couldn't really get the hang of it from the video + the sample code threw an error during compile. 
And still no double-pan keyboard/text navigation .( At least they brought back volume/shutter button...
I haven't even installed iOS 9 on any of my devices yet. There's a bug that won't display any of my image assets "I get a compiler error saying (Calling -display has no effect)" and so my apps aren't runnable on iOS 9 yet. I submitted a bug report and just hope that they can come up with a fix before September. In the meantime, it sucks seeing all the cool new features and not being able to use them yet. 
Another one is: [Flurry](https://developer.yahoo.com/analytics/) For more general (but quite awesome) analytics: [Fabric.io](https://get.fabric.io)
I can't remember exactly wich beta it was, but apple changed this method recently. All early tutorials will use println() and newer print(). The change is that print has now a second boolean variable that you can use to turn on new lines. // from the api func print&lt;T&gt;(value: T, appendNewline: Bool) print("HelloWorld", false) // prints "HelloWorld" print("HelloWorld", true) // prints "HelloWorld\n" i hope this makes things clearer for you. Good luck! edit: typo &amp; formatting
This is correct. This change occurred in Swift 2.0, with Xcode 7. Also good to note that the second parameter defaults to true, so doing print("foobar") will append a new line. Swift 1.0 --- Swift 2.0 println(_:) --- print(_:) print(_:) --- print(_:appendNewLine:false)
Current options i can think of are: * Amazon * Countly * Google * Flurry * New relic 
http://www.raywenderlich.com/76341/use-nsoperation-nsoperationqueue-swift The WWDC '15 video is very extensive, you should know the basics of NSOperation and concurrency before you can fully appreciate the content. 
Yeah, no problem! I've used the other way you mentioned. The one thing I didn't like about that was that their object had to have all those methods that may or may not of returned what you wanted. Lots of as? casting internally, and storage that was loosely typed but not actually generic. Thanks for the feedback!
I can't speak for Bitfountain or Rob Percival, but based on [my own free Swift course](https://www.hackingwithswift.com) I can say that Swift 2 doesn't replace or make redundant any Swift 1.2 knowledge you have – it adds a few things, yes, but [the Swift 2.0 changes](https://www.hackingwithswift.com/swift2) are fairly minor and you can pick them up in 20 minutes or so once you've mastered Swift 1.2. It's also worth remembering that Swift 2 is still changing – even in the beta yesterday some notable changes were made (`performSelector` – yay!) and more changes are likely to happen before the release is final. Although I've written some tutorials for Swift 2 (projects 31 to 35 are all Swift 2), I'll be holding off another four weeks or so before I update the full course – if I'm going to tell people I can teach them Swift 2, I want to be sure it's settled! TL;DR: Learn Swift 1.2 and you'll be fine with Swift 2.
It is a good thing to start learning Swift in general and 2.0 if you understand it isn't finalized. If you can't deal with things changing then 2.0 isn't for you yet. 
Well, I don't want my user to think there is a safari instance running in their app. Especially considering it is only a facebook app authorization. I do nothing with a webview besides that. Not only that, I'm using Parse as my account management tool, and it is what causes it to open.
Good summary of my choices! I’m new enough where any swift in general will be good so I’ll just start learning. Just wondering, are you personally getting into 2.0 right now or are you waiting?
Every tutorial in Hacking with Swift starts with the same introduction, which includes this paragraph that I think you'll find useful: &gt; This book has been written on the back of my personal motto: "Programming is an art. Don't spend all your time sharpening your pencil when you should be drawing." We'll be doing some "sharpening" but a heck of a lot more "drawing" – if that doesn't suit your way of learning, you should exit now.
So are iOS keyboard shortcuts a thing yet? Because I can't find a lick of documentation about it.
I wish Apple to support UISearchController on Interface Builder. 
Congrats! How long did it take for review? I just submitted mine recently. 
I think it took 9 days. I got no rejections
Apples release notes that come with the new Xcode are a good spot
The biggest problem with learning swift is that you go back to other languages and you miss a lot of the cool features.
These are some great resources, thank you!
Great job! Do you use any server info to get the times for the buses from the public transport service or it it stats based?
I've tried both of the courses you mention. I tried Rob Percivals but I didn't really get on with it. In fairness I may not have given it enough of a chance, since as you say, most people on this sub seem to love it. I was taking the Bitfountain iOS 7 course and loving it when the iOS 8 version came out so I switched to that but I did myself a disservice by not finishing it. I go through periods of a couple of months where I'm really keen to learn, and then I sort of lose interest or other things get in the way. I'll be starting the iOS 9 version over the next month. Their courses are very good, and the fact I haven't followed them to the end yet reflects more on me than on the quality of the course. If it wasn't good I wouldn't keep coming back. I tried books, treehouse, Ray Wenderlich and others. I learned far more from the Bitfountain course than I did from them. 
It makes a sense: you may not change behaviour, you only can add new behaviour.
Submitting your first app is a huge milestone, congrats!! I started with. Android development but now do IOS as well and that first app I wrote for android taught me so much that can be applied to all programming languages. TL;DR: Your first app teaches you concepts after that you are just refining your programming skills, congratulations 
Looks great. My only comment would be: If there's a way to remove the ads in your app, you may want to change your screen shots to reflect the ad-free experience. Just for the looks.
For anything scrollable, start with a UIScrollView or one of its subclasses. UICollectionView is handy for a horizontally scrolling list of elements, but you can also use a UITableView if you rotate it 90° with an affine transform (then rotate the cells -90° so they are right side up.) The simpler API of UITableView may be easier to deal with. When the user selects a cell, de-select all the others and do whatever view manipulation needs to be done in the main area.
Why do you have a tap gesture for a cell? 
Can you quickly sketch the UI what of what this thing looks like? If you're adding the gesture to the UIView, the button sits on top of the view and should take over any taps in the button's frame.
You should also conditionally add the buttons or the tap gesture to eliminate this problem entirely.
/u/Dierdr4 I really don't remember why. But it looks like it not being initialized properly was causing the issue. You fixed me up. Thank you very much
iAd definitely works great on iPad. You should check that you have Auto Layout constraints correctly so that the ad is visible. You should also go to the Settings &gt; Developer menu and try setting iAd to have 100% fill rate – by default it's set to fail now and then, and that might be confusing things a little.
Noice, so basically the app name limit is 12. Looks like i'm gonna have to go with a name other than ABBREVIATIONS
Depends how you implemented it. If you go for the simple: self.canDisplayBannerAds = true then it works great, but limited to displaying on the bottom on a per ViewController basis.
Don't use storyboards, but don't use constraints either! The least painful way to create layouts is just pure maths based layouts by setting the views frames
Would this work for adding products to an online store checkout?
Nice. I thought it was stupid and deleted my comment D:
You don't have to screenshot anymore, I added params [PENISPENIS](https://moniker.herokuapp.com/?name=PENISPENIS)
That's... a really good idea
Hey I think your idea is pretty cool! But I think if you're doing this to get better in swift, better be off it coz u will learn more that way, when you are ready with your first app, the next thing is working with a team and learn team collaboration, so that's what I'm looking for. (Just if you're curious, I got my second app approved by apple and it will be in that app store in a week after I collect enough emails, check it out if you want to at http://calkify.craizecorp.com) Thanks
Can you explain the why? I read it twice and while I understand the "what", I'm not sure the reason "why". 
NSUserDefaults for settings and preferences. CoreData for game data. Beware though, CoreData isn't for the feint of heart. There are some 3rd party libraries out there that help make it easier but I'm not sure which have been converted to Swift.
I'm just starting to get into open source and iOS development too, would you mind if I tried to help as well?
Nope, go for it. I haven't done work on it in a while. Last thing I was working on was the creating of a view from the details button on the map page. I was getting an exception and I didn't spend much time on it after that. I have a full time programming job, it can be tough to want to code more after you're already exhausted from coding.
That Swift strings model extended grapheme clusters is quite ambitious compared to most other languages. Internally, strings are stored as UTF-16, I think (since the UTF-16 view's iterator is the only random-access one among them).
this isn't even Swift
Well I think I know where it reverses it. I'm just not understanding the code. What I'm reading is a Function called reverse with an argument allowing a string and for that function to return a string. Inside the function we have a variable named Rst that equals a string. We also have a for loop that will iterate through the string inputted into the function. What I'm not sure of is what's going on inside the for loop curly brackets. Please feel free to inform me of any errors as I'm trying to learn
Shit... I'm reading the documentation and I see two things: For **UITableViewAutomaticDimension** it says: &gt;You return this value from UITableViewDelegate methods that request dimension metrics when you want UITableView to choose a default value. For example, if you return this constant in tableView:heightForHeaderInSection: or tableView:heightForFooterInSection:, UITableView uses a height that fits the value returned from tableView:titleForHeaderInSection: or tableView:titleForFooterInSection: (if the title is not nil). **tableView:titleForHeaderInSection:** says: &gt;Asks the data source for the title of the header of the specified section of the table view. So I need 'title' section in a cell to use dynamic height?... How can I set one of my labels to be the 'title' of the cell? Will update after changing my cell but will take some time...
It works the same way it does in Objective-C: For any `NSObject` adopter or descendent you get the following methods For Free™: performSelector(_: String) performSelector(_: String, withObject: AnyObject) performSelector(_: String, withObject: AnyObject, withObject: AnyObject) So given a sample classdef like class Foo : NSObject { func bar(s : String) { print(s) } } And a sample instance: let baz = Foo() You can dynamically invoke `bar(_:)` like: baz.performSelector("bar:", withObject: "quux")
I think it's also worth mentioning that this code is not a valid code in Swift 2. In the future (when Swift 2 will be released as a stable release) the beginning of the for loop will look like this: for char in s.characters. The main difference is that you can't iterate through String directly anymore, you have to use its 'characters' property. The reason for this change is that Strings don't behave like other Collections, so they shouldn't be treated like one. There is whole post on Apple's Swift Blog about this change: https://developer.apple.com/swift/blog/?id=30.
If you haven't implemented `tableView:heightForRowAtIndexPath:`, your constraints are either wrong, incomplete or ambiguous. Unfortunately that's all one can say without actually looking at the storyboard. 
In these cases I usually take a piece of paper and a pen and unroll the loop: Iteration 0: rst = "M" + "" == "M" Iteration 1: rst = "i" + "M" == "iM" Iteration 2: rst = "k" + "iM" == "kiM" Iteration 3: rst = "e" + "kiM" == "ekiM" As others have said, it's shitty code because it tries to be smart. Don't write smart code, write code that can be understood easily. 
Ah true! Completely forgot about playground. My b about the length of the post. I prefer thorough responses so that nothing is left unanswered. 
There's always VLC - but it's worth noting that (at least last time I checked) GPL licensed code in particular is incompatible with the App Store license - which is why VLC was originally removed from the App Store.
https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/EventOverview/HandlingTouchEvents/HandlingTouchEvents.html
I think that this is a fantastic idea, but I have a question. Why livecoding.tv? They require a flash plugin which is kind of a pain in the ass. Can I ask why you aren't using twitch.tv or YouTube? I've been thinking about doing some streaming and I'd like to know if there's an advantage to the platform that I'm missing.
I'll be there! Hacking with swift taught me that I can actually build an app. Thanks for creating one of the best guides I've ever used!
Will this be recorded. I love to have a copy so that i can work through anything you live stream in detail later on as i probably wont be around for the live stream. 
I'm in the UK too, and if I can stay up so can you! Just kidding :) I'll probably turn it into a Hacking with Swift chapter at some point, and you can follow along there.
Looking forward to this, see you there!
Like I said, I love that you're doing it. I asked more out of selfishness. I've been trying to decide which platform to use for myself and I thought you might be able to offer some insight. Will you post your thoughts on the platform after the stream?
Can you record the session? I don't mind a 30-1 hour YouTube video (unless your voice sounds like a pubescent girl). Anyhow cool idea man. 
It performs the same call, but this is more flexible because you can decide which selector to use at run time, not at compile time.
Strong means you own the object. Weak means someone else owns it and you just have access to it. And unowned is like weak but can also allow for nil values (you don't own it and someone else who does might remove it at any time). 
craa is incorrect. Weak allows for nil values as well. I'll try describe a simple example. Imagine you have a table that contains within it a list of cells. Each cell in the table represents an item, like a file. Say the user clicks on a cell, and you want the cell to resize to show more about the file. To resize the cell, all cells after it must be moved to accommodate for the extra space. In this example, we'll just have the child cell talk to the parent to notify it. If you wanted each cell to have a reference to the parent table object, you would make it unowned. This is because - in this scenario - the table creates the cells and therefore a cell cannot exist without a parent table. However, you don't want a strong reference to the parent object because that's what causes retain cycles - two strong references to each other. I believe this is probably the most common usage case for an unowned reference, parent and child where child depends on parent's existence. As for weak references, imagine that each cell will graphically represent a file in memory. Each cell needs a reference to its represented file. However, each file can be deleted at any time via the a file browser. In this case, your reason for not wanting a strong reference is that the file won't be removed from memory until the cell has been released. Imagine if you have a strong reference to a 4GB file, or something stupid. If the user wants to delete the file, it better be deleted. If you used a weak reference to the file, the field that used to refer to the file would be automatically set to nil when the file is deleted, and you would get the opportunity to do something about that in the property's 'didSet' block. If you used an unowned reference, the cell would just assume that the file always existed, and you would unexpectedly access a nil pointer. The two are basically akin to optionals and implicitly unwrapped optionals. In fact, a weak reference must be an optional class type, whereas an unowned reference cannot be optional. Neither increase the retain count of an object, but weak allows the value to be nil and makes sure you check before using it, whereas unowned assumes it will never be nil.
So I have a main page VC and if you tap a button you get to the 2nd VC. Embedded in the 2nd VC is a container view with a back button. I want it so that when I tap the back button in the container view, it does an unwindSegue to the main page VC. I have been using this as guidance but I am still having trouble: http://spin.atomicobject.com/2015/04/23/unwind-segue-set-destination/ I tie the back button in the container view to "Exit" and select my unwindSegue but nothing happens when I tap the back button. 
Thank you. That makes sense.
A better approach would be to add a navigation VC with your main VC hooked up as the root view controller (all done in the interface builder). Segue to the second VC with a show segue. Hook the back button up in the container view to an IBAction that runs UIApplication.sharedApplication().keyWindow?.rootViewController.navigationController.popViewcontroller() Again I'm on mobile so don't just copy and paste that but thats the general idea 
I thought it worked great. There seemed to be one stream disconnect in the middle, but the chat kept working so I just paused for a few seconds until everyone refreshed. Some folks said the stream was sharp, others that it was blurry; apparently there are advanced settings that I can tweak to make this better, but honestly it's the kind of thing I would expect to Just Work. I can't compare to YouTube/Twitch etc, as I haven't used anything else for live streaming. If it didn't take quite so long to prepare a full project, I'd probably live stream more!
There is nice framework called SwiftyJSON. The official version is for Swift 1.2, but I saw a fork which was Swift 2 ready. EDIT: Here is a pull request with this fork: https://github.com/SwiftyJSON/SwiftyJSON/pull/246
For scrolling and zooming you can use UIScrollView. For drawing you may want to look at Core Graphics, it's fast.
Ray wenderlich has an apprentice tutorial bundle. You can get the first one free for signing up to a newsletter. Also hackingwithswift.com seems to be really good
Yeah Rob's course is excellent. He explains everything and is easy to understand. If you get emails from Udemy, wait until theres a sale, or look online for coupon codes.
Not sure what you mean. Xcode is all you really need unless you're using a dependency manager like CocoaPods or Carthage. Just start reading and getting lost. There's also a shit tonne of example projects and tutorials out there to learn from. Google what you're interested in and see where it takes you. 
From what I know, Swift uses ARC (automatic reference counting). A strong reference will increment that count and will not allow it to be deallocated for as long as that strong reference remains.Weak reference allows access, but does not increment the reference count. When coding closures, you should typically use "[unowned self]" or "[weak self]"to prevent any memory leaks. The difference being that weak can be nil and unowned when you know the variable is not nil. 
Here is a good tutorial to assist as well. http://www.raywenderlich.com/82706/working-with-json-in-swift-tutorial
The rules exist to avoid retain cycles. A retain cycle occurs when a parent has a strong reference to its child (correct) and the child has a strong reference to the parent (incorrect). 1. Strong – default (use unless one of the other two rules applied) 2. Weak – use for references to parent or to items that are owned elsewhere 3. Unowned – used in the same situation as weak but where you can guarantee it is not-nil (like an implicitly unwrapped weak). There's an implicit idea here: for *any* reference, you must be able to call one object the parent and one object the child. Examples: 1. NSView has an array of subviews. The array holds a strong reference to the subviews (these are children) 2. NSView has a superview reference. This should be weak since it is the parent. Unowned is rare. I don't have any straightforward examples since it is normally for private references where you can control how it is used. Like implicitly unwrapped optionals, Swift checks unowned values at runtime, so you'll immediately get an assertion failure if you get this wrong (you won't accidentally use uninitialised memory like in Objective-C).
Www.hackingwithswift.com
Swift strings are confusing as hell. The range methods especially. String/NSString is the only situation where I am happy the SDK has retained outdated code; I'm still using NSString for all string manipulation. I've done pretty extensive testing and found there to be no performance deficit or gain by doing this, it's completely equal, so for the purposes of my sanity, I'll be still switching to NSString when necessary (and then going back before saving). 
Anything which runs inside a Terminal is a command line app, so I would start with that; they can't make a template for every different possible type of app, so you have to settle for whichever is closest. However, to make something like Emacs requires more than simply reading and writing lines of text. You need to be able to address particular locations on the screen. To do that, you could send ASCII escapes to the terminal (I would avoid this) or you could use a library such as ncurses. There may be other more modern libraries than that; I normally work on iOS apps, so am out of touch with the state-of-the-art in this particular style of UI. I imagine googling for ncurses might lead you to other projects which are (or at least claim to be!) better. I hope you keep us posted on how this goes because I'm interested to know how well Swift works on apps outside of the usual Cocoa/UIKit areas, especially those using libraries written in C. Beware that you may run into things that are not (currently) possible to do in Swift, and you may have to write a bit of bridging code in C or Objective-C.
&gt; Here's what I'm thinking so far. -View --UIScrollView --UICollectionView --UICollectionViewCell Yes, I agree with the collection view for the horizontal scrolling view. Am I right in thinking the UIScrollView would be a large vertically scrolling container that contains all your other 'stuff' (like names of things and maybe other collection views)? If so, I would try to use a collection view for that (or maybe even a table view if it is very simple). The reason being that even though it might seem like setting up all the different cells for a collection view is a pain, it will pay off later when you want to change things around. It is much easier to rearrange cells or modify a particular cell (and changing one cell won't have side effects on other cells) than it is to try to find the exact lines of code to change in a sea of code which represents a scroll view's contents. And if you did use a scroll view and did it properly, well, I have the feeling you would have ended up re-inventing a less general version of a collection view! (which is kind of a UIKit version of Greenspun's tenth law).
Actually the first one you tried works fine for me. I created simple example app and my ViewController.swift looks like this (in Storyboard I embeded the view controller in navigation controller): import UIKit class ViewController: UIViewController { private var count = 0 override func viewDidLoad() { super.viewDidLoad() let tap = UITapGestureRecognizer(target: self, action: "tap") navigationController?.view.addGestureRecognizer(tap) } func tap() { print("tap \(count++)") } } 
I would like to help you in iOS Dev. I am pro in Obj C but novice in Swift would that be fine?
Think I just figured it out since its only an hour all I have to do is -3600 seconds from the time calculation. It works but is there a more "elegant" solution?
Yes. My main set up is a Mac Pro, but my on the road set up is a 2015 retina MacBook and it holds it up perfectly.
I guess I'm just new to Swift 2.0's error catching methods. Coming from an Obj-c background, I do understand Swifty source - but I was just wondering about how the usage of 'try' would work.
[Gulps](https://github.com/FancyPixel/gulps)
Yeah, that's gonna be a real bummer
If you are open to using a SDK, you could check out Layer. Their APIs let you integrate in-app messaging with little overhead. They also have a tutorial on how to integrate authorization with Parse
Why do you have an array of dictionaries, where each dictionary just has one key-value pair? Why not just have ONE dictionary containing ALL key values pairs? If you did that, I think it would be more straightforward to correlate the two. Basically, you need to do two loops. Let's say you have an OLD dictionary (which you read from your archive) and a NEW dictionary (which you get from the library). So, you loop over the OLD dictionary, get the key of each item and see if it is in the NEW dictionary, if not, it has been deleted. Then you loop over the NEW dictionary, get the key of each item and see if it is in the OLD dictionary, if not it has been added. There are variations on this. For example, you could construct a Set from the NEW library, loop over the OLD dictionary, for each key see if it is in the Set, if not, it has been deleted, if so, delete it from the Set. Then everything remaining in the Set is a new item which needs adding to the OLD dictionary to synchronise it with the NEW assets. Now I have a question about your archived data, are you archiving structs? If so, how are you doing that? I thought only classes could be archived.
One of my favourite options. Doesn't seem to have an equivalent in Swift. Neither the documentation nor swiftc --help says anything about it. Maybe a bug report would cause it to receive some attention, but then maybe throwing a penny in a wishing well would as well.
&gt; throwing a penny in a wishing well Seems more likely but I did file a radar, will keep fingers crossed
I assume by 'GMT' you actually mean UK time, since GMT and UTC are basically the same thing. Also, from what I can tell, all of your calculations above are timezone-independent anyway (even if you switched timezones, none of the calculations you're making above would change). `NSDate`'s `timeIntervalSince1970` always returns the number of seconds since 1st Jan 1970 in UTC/GMT, so your calculations are probably already okay, without having to do any manual subtraction.
ok but different classes have different wrappers. can you explain what type alias is?
Where does it say it's UK time? It says it's GMT, but GMT is not the same as UK time. GMT is the same as UTC time; they both don't observe daylight savings. Your code is probably already correct; it's just that to display `eorzeaTime` properly, you need to format it with a UTC timezone. Doing something like this should work: let formatter = NSDateFormatter() formatter.timeStyle = .LongStyle formatter.dateStyle = .LongStyle formatter.timeZone = NSTimeZone(name: "UTC")! let formattedTime = formatter.stringFromDate(eorzeaTime)
Technically you don't need another delegate and datasource. You can reference your tableView by the tag attribute, which any view has. Example: In your viewDidLoad: myTableView1.tag = Int.min myTableView2.tag = Int.max and then: func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { let cell: UITableViewCell if tableView.tag == Int.Min { cell = firstTableView(tableView, indexPath: indexPath) } else { cell = secondTableView(tableView, indexPath: indexPath) } return cell } You can do this in all delegate and dataSource methods. If you really want a separate delegate and datasource, you could always use a ContainerView to host another ViewController, which is the dataSource and delegate for you second tableView. **Edit**: I'm bad at formatting...
Type alias is just a synonym for the closure you may type the whole parameters just like you did in your example or create a synonym for your closure so it will be easier to type. It is just matter of style 
Anything is powerful enough if you are willing to wait around.
Now I read it again it does say GMT could of sworn it said UK time when I read it earlier. But still just using my code I've posted it still calculates an hour ahead, however adding your code setting the timezone to UTC corrects the problem without my manual adjustment so I still think that something odd is happening due to this whole British Government trial thing otherwise it would work perfectly without setting the timezone at all, its simply not. But at least I know how to set timezones now thanks!
&gt; did you mean something like this? yes, looks like what I had in mind. I'm not sure why it is contained in a larger dictionary with a key of videoCollection, but presumably this is just a part of a larger data structure. 
My guess is that the exc_bad_access is caused by summaryLabel being nil. You can check this by setting a breakpoint on line 16 and in lldb, do: po summaryLabel I imagine you haven't connected it in the storyboard? I'm sorry I can't offer any help on the other problem except to suggest using the debugger and setting breakpoints and trying to figure out what is going on. My suggestion would be that you should write down the key points of what is happening where (such as "variable xyz contains 42, then function qpr is called, then the table view contains data or whatever), then use lldb to verify each of those. When something doesn't match then figure out what went wrong or think of all the possibilities for what could go wrong and check them (again using lldb) until you find the one which has gone wrong.
What the plan on how this will make money?
I'd help but I'm too new to swift/programming in general to be of use 
&gt; right now I can't afford to pay a sallary, but I will distribute the proceeds of the app equally amongst us That's nice. Looking for people to do 99% of the work for 33% of the pay. Your idea is *worthless* without implementation. Implementation is *everything*.
Yeah - this is where I think I've got stuck; it's how to tie the new table-only class into things. Made sense to me that I just need an object that conforms to the delegate/data protocols, but I can't then drag-to-link/bind stuff from the storyboard straight to my new class, because it's just a *class* not an *instance*. A screenshot or step-by-step (or if there's a tutorial or manual page) would be fantastic.
If you want to call directly UIApplication.sharedApplication().openURL(NSURL(string: "tel://1234567890")) If you want to get prompt and go back to your app after call change tel with telprompt 
Thank you :)
[Ideas are just a multiplier of execution](https://sivers.org/multiply).
I don't care about the promise of money. Practicing is all I care about. 
http://imgur.com/XKe5NVe Just drag a generic "object" over to the left. Once you set it's class like /u/DressTheMonkey described, you can connect it to an outlet in your controller, or set it as the delegate/datasource of a table view.
You can also just store the table views in outlets and compare those directly; there's no real reason to use tags for this that I can see (i.e. just do if tableView == myTableView1).
&gt; The downside of strong is that you may create a retain cycle, where two objects have strong references to one another, or an object has a strong reference to itself. In this case, both objects keep one another alive indefinitely, and waste memory, until one of the strong references is removed. Or until you get a proper garbage collector. :-) 
Yes, this a very good approach too. In the end I think it depends on what your TableViews do and what kind of programmer you are. Decoupling everything into multiple ViewControllers is nice. But can be hard very hard to maintain too, especially for novice programmers. If you look at the code I provided than you can see, that having two TableViews ultimately looks the same as having two different type of UITableViewCells. If you keep your methods small and concise you shouldn't end up with spaghettization... if you do, your methods are not small and concise.... I have used both approaches for my projects and normally use embedded TableViewControllers only, when I reuse them somewhere else. 
If you were writing in Obj C, you'd be fine. With Swift, unless Xcode 7 is a dramatic improvement, then no. Xcode + Swift is exceptionally slow and unreliable, you'll be pulling your hair out of your head with this very underpowered processor. 
Sadly that tutorial hasn't been updated for Swift 2.0, and doesn't have the correct error handling.
Mmm. Valuable to understand both approaches. Thanks :) At least if I separate out my table delegation stuff to separate classes from the view controllers the tables sit in, it'll be slightly less painful when I come to rearranging my UI *yet again* (hey, you know, one of those split view thingies would be cool ... [ponders] ... oh tits all me wiring now needs fiddling with)
I'm joking. I mean these problems exist in Swift (and not other languages like, for example, OCaml, Haskell, Scala, F#) because Swift uses reference counting when everybody else is using tracing garbage collection. 
Is it really a problem? I mean if you fully understand strong, weak and unowned can you still call it a problem? 
&gt; Tracing GC vs refcounting, like almost all tech, deals in tradeoffs. I agree completely. That's why I'm looking for quantitative data in order to draw conclusions objectively. &gt; In exchange you get dramatically lower heap footprint, I've asked for evidence to backup that belief before and nobody could provide me with any. Can you? FWIW, I have constructed [counter examples](http://flyingfrogblog.blogspot.co.uk/2013/10/memory-management-myths-promptness.html) in the past just to prove that the point is at least moot. I assume Swift defers collection to the end of scope? &gt; lower pauses Decrements avalanche giving non-deferred reference counting unbounded pauses. You can work around the problem by doing your own deferral (at the expense of deterministic destruction) but you can also work around GC pauses on platforms like .NET. But, again, I'd really like some quantitative evidence to back it up. Last time I looked into pause times I ported a 50kLOC graphical program from C++ to OCaml and observed pause times reduce by a factor of 5. Turns out the pauses were caused by destructors avalanching when trees fell out of scope. The workaround was so horrific in C++ that we never bothered doing it, switched to languages with tracing GC and never looked back. &gt; and deterministic destruction. Only for single threaded code. For multithreaded code decrements race and the losing thread is burdened with cleanup. Pretty much everything I write these days is multithreaded. &gt; In Swift's specific case, the tradeoffs are strongly skewed towards refcounting because of running on relatively low memory devices, and wanting to be compatible with existing C and ObjC code. I hadn't thought about compatibility before but I'm familiar with all of the other potential pros and cons. Hence I'd really like to see some measurements. 
Sadly the (fairly extensive) data I have is NDA'd. There's plenty of Swift performance benchmark blog posts out there, but I don't think any of them specifically stress refcounting performance. They tend to fall into "oops we broke CoW and are doing O(n) or worse copies" or "oops we hit an edge case in ObjC bridging" long before they hit refcounting being a bottleneck. The unbounded pauses you mention are definitely a thing, but in practice across a *very* large set of applications, I've only seen them matter a couple of times. Empirically, most ObjC and Swift apps just don't churn through all that many refcounted types unless they have something that's accidentally N^2 or worse. I'll see if I can dig up an article on the memory overhead later today. I had one that's public, but seem to have misplaced the link. My recollection is that getting acceptable throughput and pause times required scratch space equivalent in size to the working set.
Okay then. Thank you.
Udacity also has a good Swift course for beginners: https://www.udacity.com/ 
Definitely start with separating the delegate logic into some reusable functions, as it will help you minimize the refactoring challenge in the future. That was the first solution I followed when I was presented with a similar UI requirement, and it's not a bad thing :)
&gt; Why are you comparing Swift to OCaml, of all things? As I understand it they are both general purpose languages. &gt; Are you thinking of using Swift for heavy computation or something? I was thinking of trying Swift under Linux. &gt; I think it's a fair assumption here that someone posting would be thinking of writing iOS, watchOS, or maybe OSX apps. Hence, my post was in reference to Swift vs ObjC, which are basically your only two choices. Can you not use C++ for that? &gt; If you want to talk about RC vs GC on a theoretical level, maybe try /r/compsci. I already know the theory. I'm looking for measurements. 
Yeah, conservative GCs are terrible. I didn't realise that was a conservative GC... 
It was partially conservative. Precise heap scanning for objects, conservative scanning for the stack and for some specially marked buffers that could contain pointers.
&gt; Can you not use C++ for that? Kind of. You won't be able to do anything with the UI with C++, and any libraries that you want to use will require Obj C data types and constructs, so you'll be doing a whole lot of ugly conversions if you want to try to write most of your code in C++ and just use Obj C for UI. If we are talking graphics programming, that's a whole different story.
Someone on Twitter found it for me :) https://people.cs.umass.edu/~emery/pubs/gcvsmalloc.pdf
Wow, thank you so much yes that helps a ton. I thought I would read through these pages before starting a project but if you really insist I guess I will go ahead. My main problem with other tutorials are that I get lost in the middle of it and don't really know what's going on anymore. So I was thinking I would just read and learn what different aspects are in stead of getting lost like in most. I really love your site, I mean I may be new to coding and everything but you have done an out standing job on really getting into detail and basically breaking things down into a ELI5. Thank you so much for your hard work!
I admire your Chutzpah. You'll go far!
If you don't have any original ideas: is there an app you like? I'm sure you can at least think of one non-trivial app, or maybe trivial depending on how much time you want to put in. For example if it's a weather app, make your own weather app and you'll find that new features come easy. The important thing is to ship something and learn all the hard parts involved in making an app from scratch.
Well there will be a second programmer and a ui designer so it won't be 99% of work, I was offering only to those who don't care about money as such but are willing to work on a product which might do them some good and they could learn a lot while doing so.
Not really..
I have done most of the app wire framing and have a basic code ready.
I was looking for something like this. Looks great. I'll check it out and submit any issues I find with it (if at all) tomorrow 
I don't really ever use that feature either. However, there's at least on other type of object that can and is intended to be created in Storyboards: gesture recognizers.
I'd be happy to contribute - but can only do so in my spare time. I'm not so much new to obj-c, but just learning Swift. So that helps! My GitHub account is 'losh11'.
Great! I sent you a pm, please check that, Thanks
&gt; When someone says "I'd love to make an app, I just don't have any ideas," what I actually hear is, "I just don't want to dive in and make something. That is totally my point of view as well. I'm glad someone put words on it. /r/bestof 
Thank you! 😃
I've switched to Swift directly from C#. After a month or two I was pretty much familiar with Swift. Learning (playground, web material, etc.) syntax, Swift specifics, etc. ...it took me much longer to get *really* familiar with Cocoa Touch :). 
When it comes to GUI, where should I look further? Do I need some frameworks like cocoa touch when coding in Swift?
This idea sounds really cool. Ive been learning swift for a little while but still known only basic stuff. I would love to be a part of this if possible but if my skill level isn't high enough thats fine. The idea sounds great and its something I will definitely use.
In Swift 2 the following: enum Direction: String { case North, East, South, West } will be the same as: enum Direction: String { case North = "North" case East = "East" case South = "South" case West = "West" } so you might be able to just use the rawValue. An alternative is to have an array of strings and use the numeric enum's rawValue as an index into the array. That will be much faster than a chain of case comparisons.
Glad you liked the idea! I just sent you a pm, check it out! Thanks
Good point. This is only an app for me so I'll go for the cheeky solutions fubarx and Dierdr4 suggested, but now I see why it's not just a built in thing. Thanks!
Right! The great thing about Swift is that it works with the existing Cocoa APIs that exist for Objective-C (though they are being updated to native Swift), so everything that you might know from developing in Objective-C is probably identical in Swift, aside from syntax. Tutorials on the Cocoa API are obviously everywhere, and several books published within the last few months will talk about the key differences between using Cocoa in Objective-C or in Swift.
1) Not tried, but you shouldn't have any problems calling Giraffe's ObjC code from Swift 2) It has 200+ stars on github, and only open pull request is asking for some examples: https://github.com/unixpickle/Giraffe/issues/6 I think this is a strong argument for reliability
Just read the opened issue, library has some drawbacks: 1) No compression 2) No true color support
Any relation to Aviato from Silicon Valley?
I'm not OP but damn I needed to hear this too....that was awesome
Hmm I'm interested. I've only done basic apps like alarm clock, and calculator on Swift so far.
They sell the dongle that allows you to charge and plug something in. 
That's the exact reason for this tool. It's to show the client that if they choose a name that is too long, it will not look good. Why would you not send them to a tool like this and say "play around" instead of having to show them how to make folders? I build applications for government entities and it would be a lot harder to explain how to create a folder in iOS than to tell them "type your names here and see what it looks like". Also makes for a more streamlined on-boarding experience. However, I am a huge proponent in 'to each their own' so do what makes sense for you and your client base.
This guy fucks
The process is fundamentally the same. prepareForSegue is what you want to pass data forward between views.
So the generally accepted pattern for this is to create a swift file that contains constants. You would then have a list of static constants that returned values for backgroundColor etc. All of the various colors/etc could reference one static value that was red. So then in the future you change red to blue, then all of your view controllers will reference their respective styles from the constant file, which references the one UIColor.blueColor(). 
I was planning to have it all run in Playground, would I have an easier time making it a project?
If you create it like this: class Colors { public class let mainColor = UIColor.redColor() ... (other stuff referring to mainColor inside the class) } then you can refer to it as Colors.mainColor 
That's gonna make it bearable I guess.
Perfect, thank you!
I've done plenty of programming before, from ZX81s to Arduinos, but never had to deal with a full on GUI. That was 3 weeks ago; now I've got a reasonably complex app working. The resources I found invaluable: 1. Ray Wenderlich's tutorials - search for "swift os x ray" and you'll find them 2. This subreddit and most of all 3. The Stanford University Swift / iOS course. It's free on iTunes U (just load up itunes, go to the iTunes store and search for it). **edit: Here you go: https://itunes.apple.com/gb/course/developing-ios-8-apps-swift/id961180099** Honestly, even though I'm only interested in OS X at the moment, the language and the principles are the same, and the guy teaching the course is a terrific teacher. Stands to reason that Stanford have the teachers who are at the absolute top of the teaching game; he absolutely rocks. Clear, concise, well structured. And while I normally hate video tutorials (can't speed-read them), it's absolutely worth watching him if you're new to Cocoa/Swift *and* Xcode, as I was: he assumes you've got some programming experience (basic object oriented stuff) but that you haven't used Xcode, so he shows you all the stuff you need to understand about the IDE itself too. The slides from his presentations can be downloaded separately, and it's easy to seek forward/back through the lectures if he's talking about stuff you're not interested in. I really can't recommend it highly enough. Once I've got something to show I'm gonna track down that instructor (Paul Hegarty) and send him a pizza. (blows me away that you can get a Stanford-quality learning experience for free... what a world we're living in) And while you might want to skip the variables/functions stuff at the start, *don't* - Swift has some funky but elegant ways of dealing with variables that you'll want to know about. You will get absolutely stuck if you don't get your head around Optionals and unwrapping, but the Stanford dude walks you through it without treating you like you've never used a com-pute-or befor. edit: spellig
Well I've already got two people who are interested on the team
Hi! I'm the Dev of YeBoard. It is a UITableView. You can find the source for YeBoard on Git: https://github.com/SamStone92/kanyekeyboad
Because I'm skeptical of this tool's accuracy. The app name length limit isn't based on character count.
I'm not familiar with sprites, but, I would assume you can do this: ninja.position.x += 0.03 or ninja.position.x = (ninja.position.x + 0.03) Just remember ```ninja.position``` returns a CGPoint. When you do ```ninja.position + 0.03```, you are trying to add a CGPoint and a CGFloat, this throws an error. Since you just want to add the x coordinate, you get that from the point (this is a CGFloat).
This worked perfectly thanks (: Didn't realise it would be so simple haha. Thank you so much ^^
Did you happen to get a microphone access alert when you tried to record?
No microphone access request, only notifications request. 
Often a class doesn't need an init() method. But often you do need to do something. Maybe setup a key value observer, or load in in some defaults, or even load something off a server for use by the class.
Can you check your settings under Settings -&gt; Graviato and see if you can enable the mic? I saw one incident yesterday where the mic didn't appear in that list and I'm not sure why it's not presented. Also what iOS version are you running?
No mic option under settings, only Background Refresh. iOS 8.3 (12F70)
You can use init to set up variables for your class. When you have immutable or non optional variables that are for example computed or depend on other classes init is an ideal place to do so. 
I believe you are having some confusion. A class and an object are different things. A class is a way of describing something in code. For example we may want to describe a dog and a human. We could create a class for both. class Dog { let numberOfLegs = 4 } class Human { let numberOfLegs = 2 } We can then later create a Dog and a Human **object** that we interact with. var bob = Human() var rex = Dog() What if we later want to include a cat, a chicken, a sheep and a cow. Using this current set up we would have to define a class for each of them, this would mean lots of typing to define all these classes. OO Programming means we can look at this from a different angle and reduce the amount of code we write (and a bit less time before we get RSI in the wrist.) All of these classes have something in common. They all have a property that means they have a number of legs. So we could define an animal class with this same property, but using the init method we can decide what animal we want when we create the object using the init() method, taking a argument that allows us to define the number of legs. class Animal { let numberOfLegs:Int init(legCount legs:Int) { numberOfLegs = legs } } Now we can create all out different animals easily. var bobTheHuman = Animal(legCount:2) var rexTheDog = Animal(legCount:4) var jessTheCat = Animal(legCount:4) var cluckyTheChicken = Animal(legCount:2) var daisyTheCow = Animal(legCount:4) var shaunTheSheep = Animal(legCount:4) 
It's really neat explanation, something i was really looking for. Seems like it saves a lot of time. :)
Well this was pretty easy after I played with it a bit, for anyone who is in a similar situation and would like to pass a single variable to a new view controller when programing for OS X here is the format. override func prepareForSegue(segue: NSStoryboardSegue, sender: AnyObject!) { if (segue.identifier == "cinvoiceseuge") { //Checking identifier is crucial as there might be multiple // segues attached to same view var detailVC = segue.destinationController as! name_of_your_destinationviewcontroller; detailVC.toPass = whatever_variable_you_are_sending } } Place that in your originating view controller, in your receiving view controller your variable will be called toPass
Weird, I'm sorry for your experience. It I really appreciate you testing the app. I will review the code a bit later and hopefully find the problem
There's a bit more I will add to it later, sorry I had to leave my desk
Oh geez. Not to be a downer, but chances of getting the job without any Swift experience are slim. It'll take at least 3-4 months to get on your feet in the language.
Hey, good for you for applying. I haven't used these guys yet because I'm still completing a previous IOS course, but a friend suggested [Ray Wenderlich for intermediate materials](http://www.raywenderlich.com/store). 
Alerts are really easy to do. Check out this link [here](http://stackoverflow.com/questions/25511945/swift-alert-view-ios8-with-ok-and-cancel-button-which-button-tapped).
Thank you so much! That is exactly what I was looking for.
You are entirely correct. Fmap is a different beast from flatMap. The signatures are subtly different, (a -&gt; b) -&gt; f a -&gt; f b vs. (a -&gt; m b) -&gt; m a -&gt; m b.
Hell yeah. A+ man. Whoever downvoted you is an ass. This stuff is a *huge* value to the older population and people who need to keep track of their medications. I would add a profile option so you can save the medications you are taking, and maybe make a digital pill box with reminders to take which medications each day. And your iAds are not working at the moment. I'm getting the basic "you've got iAds set up now" demo banner. That being said, I believe people would be willing to pay $0.99 to $1.99 for an ad-free version. The UI is pretty good, besides some things like the search not automatically filtering as you type, so the banner ad at the bottom kills the mood.
Users won't think that. For real, they won't. And with SafariViewController, it basically is!
Another great idea, I definitely will be working towards some type of autocomplete soon in the future. 
Yeah, but all it is is a login to facebook. I don't want them to accidentally hit that button and then be taken out of the app only to reauthorize facebook. Sure it won't reappear when I check if the user is logged in already after they re-launch the app, but I really wish there was a way to kill it in that initial instance.
Very slick! Where did you get all the information from?
Seems like all their guides are in Objective C though. Or am I missing something?
te
What key elements of a functional programming language do you feel that Swift is missing? It certainly isn't a pure functional language like Haskell or something, but it seems to provide many of the same features to compose code functionally that other functional languages do.
Very good work. It's nice to see a fellow student pharmacist interested in advancing pharmacy with coding! I followed you on twitter :-)
I think I just followed you back, let me know if I didn't. It's really cool to find another student pharmacist who is a coder! Definitely keep in touch with me over Twitter and let me know if you have any questions or just want to talk. I always love talking with/helping other student pharmacists. Check out my other apps (specifically the immunizations app) because I would love to get your feedback: http://rxv2.com/#oi. Let me know if you'd like to be added on as a beta tester for my apps, I think you'd have great feedback. 
Thanks for the great compliment! I didn't really use very many libraries but I'll list out the resources I used below. The app is completely written in Swift. Swift is really the language I am most comfortable with and I love the language. All of the apps I have out right now are all written in Swift. Libraries/Frameworks * Alamofire * SwiftyJSON * POP (I don't really utilize this one that much at all, only in the onboarding animations. I just included it because I felt like playing around with it, but it is definitely not necessary for any of the animations that I perform.) * Parse (I'm not using it as a database, only using it to track analytics.) * openFDA (This is where I'm pulling all my data from) Let me know if you have any other questions. 
This is what I came up with. Still learning Swift, so there might be some parts that are better, but I think it should be a pretty direct translation. One thing to note is that I converted origin and width to Int, as they are defined as NSInteger in the provided answer. That might not be necessary and you could just make maximumSpacing a CGFloat. Something to consider. https://gist.github.com/tenpaiyomi/74f1d466ab8301c5559f
Nope: http://webmasters.stackexchange.com/questions/304/can-i-have-an-animated-gif-with-more-than-256-colours-per-frame Also, format requires files to be LZW-compressed
When you assign the wallBreak a name it is "wall3", later, when you test the name, it is "Wall3"; these are not the same. I would recommend defining a constant: let wallBreakName = "Wall3" and using the constant in both places: wallBreak.name = wallBreakName and if theName == wallBreakName As for the delay, I don't know, but you should use the debugger to figure out what it is doing: whilst it is 'waiting' for 10 seconds, hit the debug pause button and use the stack to figure out where you are and go back up the stack to figure out how you got there and why it is waiting.
oh wow, I need to proof read more &gt;_&lt; Yeah I understand they are different was just a typo but thanks for picking up on it. Didnt fix the problem though :( Trying to learn how to read the stack now, seems really confusing and I'm not really sure what I am looking at. I edited it to let wallBreakName = "wall3" and changed if theName == "wall3" to if theName == "wall3" to if theName == wallBreak Name but where should wallBreak.name = wallBreakName go?
Thanks for the link!
Looking forward to that :)
I'm just getting "use of unresolved identifier wallBreakName" on the wallBreak.name = wallBreakName line :/ No matter where I place it this is occurring so I'm not sure how to fix it. Which I suppose means I need to declare it, would I just declare it as var wallBreakName = "" ?unsure on how to declare it. Tried it this way and still cant get the sprite to remove :(
I assume the hunks of code you posted above are in a class? So, put the let at the very top. And use let not var, because it is a constant (you will give it an initial value and you never change it). So it will look roughly like this (code not tested): class Whoopie /* may inherit from something, whatever */ { let wallBreakName = "Wall3" func someMethodWhereISetUpTheWallBreak(/* maybe some params *) { /* maybe some other stuff */ wallBreakTexture = SKTexture(imageNamed:"wall3") let wallBreak = SKSpriteNode(texture: wallBreakTexture) wallBreak.name = wallBreakName wallBreak.setScale(2.0) wallBreak.position = CGPointMake(0.0, CGFloat(y)) wallBreak.physicsBody = SKPhysicsBody(rectangleOfSize:wallBreak.size) wallBreak.physicsBody?.dynamic = false /* and indeed more other stuff */ } override func touchesBegan(touches: Set&lt;NSObject&gt;, withEvent event: UIEvent) { /* Called when a touch begins */ for touch: AnyObject in touches { let location = (touch as! UITouch).locationInNode(self) if let theName = self.nodeAtPoint(location).name { if theName == wallBreakName { self.removeChildrenInArray([self.nodeAtPoint(location)]) } } } } } } As far as getting the sprite to remove, you need to break the functionality you want to achieve into pieces (which is what you have to do anytime there's a problem). So, I'd say the pieces are: 1 detecting the user tapped 2 getting rid of a sprite (ie actually removing the bloody thing) 3 detecting the tap was on a particular object So, I'd probably start by setting a breakpoint (using lldb) on the first line of touchesBegan. Run, tap, did it break? If not, the first step is not working. So that is the first problem to solve: hit the books! Then once I got that working I'd move on to step two, removing the sprite. So when I detect the tap (*no matter where it is*) I'd remove the wall. (This is once you are **absolutely sure** you are detecting the tap; it will be exasperating to you if you think the wall removal code is wrong when it turns out it is the tap detecting code.). (note that I'm suggesting removing it *no matter where* the user tapped, so the code for checking which object was tapped will need to be commented out or something. Again, this is for the purpose of zeroing in on what exactly is wrong amongst the 3 major things which could be wrong) So, once you've got steps 1 and 2, move on to step 3 and use lldb and strategic breakpoints (as well as other lldb features like 'step' and 'expression') to make sure the code is hitting the lines you think it should hit and the values are what you think they should be.
I was originally trying to do step 2 and 3 combined, but it makes sense to do it the way your saying :3 So I'm using breakpoints now to find out what exactly is going wrong. I set a breakpoint after let location = (touch as! UITouch).locationInNode(self) and it is breaking there, so it is detecting the touch. I then put breakpoint after if let theName = self.nodeAtPoint(location).name { and it no longer reaches the breakpoint so something is going wrong at this point. Any idea? Step 2 was the main problem I've had from the start, I'm pretty sure step 3 will be incredibly easy I just can't get the damn sprite to remove at all in the first place. I just realised, can I not do removechildrenfromaray since self.addChild(wallBreak) was never done? When I add this in though my program just crashes instantly. Also shouldnt be the issue (at least right now) since the code isnt even getting up this the removechildrenaray line yet anyways.
I've got a small framework called [SwiftSequence](https://github.com/oisdk/SwiftSequence) that I've been working on. It's mainly just implementations of data structures and sequence types from other languages. If that sounds like your kind of thing, I'd love to get some more ideas into it! (It's not a very serious project, I'm mainly just doing it to learn: every time I learn a new data structure, I try and implement it.)
Downloaded it because I like to look up info about a pill before I take it or buy it. One piece of feedback, let's say I look up "ibuprofen", once I find the one I'm looking for, when I tap it. It should open a view that contains all the info about it like Wikipedia. Right now it's all separate sections which makes it annoying to go back and forth when it's everything about one drug. The simplicity in your app is nice and it's really quick!
I don't ask for purity, I ask for the preservation of monotonicity of observation and a high degree of referential transparency. The former is possible incompletely if you restrict yourself to SML-esque structures and styles while the latter is impossible in a profoundly imperative language. It is possible to be imperative and functional, that's definitely not the issue here. If you're asking "what would you like to see?": there needs to be better ways to generalize beyond ad-hoc polymorphism. Nothing in this language composes beyond Arrows and first-order types.
There is a video tutorial on Lynda: http://www.lynda.com/Cocoa-tutorials/Cocoa-Swift-Essential-Training/182675-2.html
I am in a similar boat as you. Do you have any of your own personal ideas you'd like to try and build? If you have any good ideas within the scope of our ability, I'd be happy to collaborate and build something together.
Do you have any restrictions enabled? Settings -&gt; General -&gt; Restrictions -&gt; Microphone
Hey here is my [GitHub project page](http://jasonmccoy.github.io/Catch-Crisis/) Here is my original post when I open-sourced my iOS game written in Obj-C. https://www.reddit.com/r/iOSProgramming/comments/3ei170/opensourcing_my_game_called_catch_crisis/ I was hoping maybe you can port it to Swift? In that post, I also posted all my image assets (worth a lot of money) for free for you to use during this project. Hope you can help the Swift community and it's language grow by working on this project. You'll know the reason why I don't do it myself if you read that post.
Yeah I see what you're saying, but I'm using a product page generator, so I'm not really able to remove that part 
Good point, I'll add that to my list of fixes
I hadn't thought about added a section where you can scroll through all the info in one page. I like that suggestion, I'll try and incorporate that soon. 
I have my existing code in a UICollectionViewController class that sets up the cells so if I do what you're saying will I need to reference it somehow in my collectionviewcontroller?
Yes, you plug an instance of this new subclass into your UICollectionViewController via its collectionViewLayout property. Apple has [an article that covers the process of customizing your layout](https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/CollectionViewPGforIOS/CreatingCustomLayouts/CreatingCustomLayouts.html), which I think you'll find useful.
Could you explain what a context manager is?
Search for CloudKit on the Apple Dev site. Anything to do with iCloud that the developer can interact with for apps, usually is in CloudKit.
What a coincidence :P That's exactly what I want to do! But I've just been scrambling my brains figuring out how. 
You could serialize the data to json and store it that way. 
Do you want to set up a time to talk? You can add me on FB: https://www.facebook.com/aforajn
You could choose an app you like in an area you know well and read all the reviews at the App Store. Check if a wish or critique occasionally reappears. Than address this with your own app. Be sure to understand the user's problem really, really well. It's tempting to concentrate on how to build the app only and to not understand what users really want. From my 16 years software development experience this is one thing in common with (almost) all software developers. But nevertheless you should start with a very small app just to not be overwhelmed by complexity.
Ill post the question over in spritekit, I commented a bit more on each line so ill make an updated post there. Problem was a followed a tutorial for the start of it, and after finishing that I then modified the code to do what I want. So some of it is copy pasting one wall that I made, to make another, etc. Not fully understanding what each line does but having a general idea.
https://www.reddit.com/r/spritekit/comments/3f9mtl/problem_using_addchild_removing_a_sprite_when/
I would make one amendment. It's more personal preference, but I personally think that force unwrapping is a bad practice to get into thus: override func layoutAttributesForElementsInRect(rect: CGRect) -&gt; [AnyObject]? { if let answer = super.layoutAttributesForElementsInRect(rect) { for i in 1..&lt;answer.count { let currentLayoutAttributes: UICollectionViewLayoutAttributes = answer![i] as! UICollectionViewLayoutAttributes let prevLayoutAttributes: UICollectionViewLayoutAttributes = answer![i-1] as! UICollectionViewLayoutAttributes let maximumSpacing = 4 let origin = Int(CGRectGetMaxX(prevLayoutAttributes.frame)) if((origin + maximumSpacing + Int(currentLayoutAttributes.frame.size.width)) &lt; Int(self.collectionViewContentSize().width)) { var frame = currentLayoutAttributes.frame frame.origin.x = CGFloat(origin + maximumSpacing) currentLayoutAttributes.frame = frame } } return answer } return nil } EDIT: Forgot to remove the ! force unwrapping.
I've been looking for the same info recently here is a list of articles and courses: * Introduction to Swift for Non-Programmers https://www.udemy.com/introduction-to-swift/?dtcode=uuQ3QZK3mTKB#/ * How To Make An App with No Programming Experience https://www.udemy.com/how-to-make-an-app/?dtcode=Nr7xqLF3mTTW * An absolute beginners guide http://blog.teamtreehouse.com/an-absolute-beginners-guide-to-swift * Introduction to Swift Programming for beginners http://ios-blog.co.uk/featured-posts/introduction-to-swift-programming-for-beginners/ * https://www.udemy.com/swift-learn-apples-new-programming-language-by-examples/#/announcements * http://www.raywenderlich.com/75601/learn-to-code-ios-apps-with-swift-tutorial-1 
It's all online in the documentation. Here is an example for the [CoreLocation framework](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CoreLocation_Framework/). You don't need to view the header files to see the methods. Apple includes them all in the docs for you and information on how to use them.
If you only started programming, reading Apple's system headers would be pretty daunting. But, if you really want to look at the headers, they're in the Headers directory of the framework that you're using. And there is a version of the framework for each platform, version, and sometimes architecture. e.g. For CGImage.h, iOS 8.4, for the iPhone (vs simulator), it's in the Xcode directory (Probably /Applications/Xcode.app), it's /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS8.4.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGImage.h If you're looking for the definitions (implementations) of the functions, Apple doesn't release those. 
One of the most common problems I see new programmers having is that they get all kinds of architectural advice ("reduce coupling!", "MVC!", "prefer pass-by-value!", "keep classes small and single-purpose!", etc...), but at the scale they're working at it just doesn't matter. The complexity these techniques are designed to help with just isn't apparent in small projects. So they try to apply these things, but without the perspective from failing due to not having them, they're applying them blindly. Years later, on a larger project, they're muddling through some bugs and suddenly have a lightbulb moment "…oh! This is why people said to do that!". TLDR: I don't know of a good way to really *understand* how to structure a program without failing a lot first. (edit) On a less demoralizing note, I've written some things on programming that you might find helpful. I *attempt* to convey the intuitions and structures that cause the rules to be useful: http://dscoder.com/DerivingMap/ https://gist.githubusercontent.com/anonymous/8a163db3f7f3d81d5296/raw/2cece084f2ff261e8a60171bf4ad62ad88af6d1c/gistfile1.txt
Great answer though. I totally agree with you that some of the advice tend to be architectural to a level I cannot comprehend. That's why I was looking for some general advice without the technical getting in the way, like for example "classes are often used when building log-ins to store data about every single user" or whatever (just made that up). But you're definitely right and I will try and fail and try and fail. 
I'm not sure if you released a fix for it, but I was able to load and click advertisements properly in the app without issue. 
Here's a tidbit that might help with the classes vs structs thing: the distinguishing feature of an instance of a class vs a struct or enum is that it has an identity. Consider the number 5: there isn't a particular instance of "5", it's just a value. You can't say "5 is over there", you can't distinguish one 5 from any other 5; its value is its only characteristic. So in Swift, Int is a struct, since numbers do not have meaningful identities. Since each additional feature of something is inherently additional complexity, not having an identity makes structs somewhat simpler than classes (for example it's impossible to write a program that accidentally confuses another part of itself by changing 5 into something else), which is appealing. So you could ask yourself when deciding for a type: "does the thing I'm describing here have a meaningful concept of identity?". Where this starts getting tricky is that people find the simplicity of structs/enums so useful for certain (large, multithreaded) programs that they've put large amounts of effort into figuring out how to write programs without using anything else. This leads to a radically different style of programming (functional programming), with very different tradeoffs than object-oriented programming.
There are a few cases that aren't included in the docs yet (certain NSCalendar methods for example).
I'm in the middle of this book right now and I highly recommend it. I've never done iOS so I can't comment on the differences, but the book explains everything pretty well (including bindings).
I agree that most information about programming in general tends to either assume the learner knows nothing and therefore stop well short of some of these big picture issues *or* assume the learner knows all about how computers work and applications are designed and just needs info on this particular language.
Awesome, thanks! I usually like to browse through filesystems to get a feel for whatever it is I'm using and how it's put together, but I haven't gotten around to looking through Xcode yet. So this will definitely come in handy :)
Also, I just thought I would throw this out there. Would anyone be interested in being more or less of an "online mentor" for me? It sounds a little weird, even to me, but I'm asking because of the way I learn. I like to know every little thing and how/why/in what ways they work together, so that I can use xcode/swift to it's full potential. But that often results in me spending hours sorting through books and online guides looking for one simple explanation, which could probably be answered by an experienced dev in about 30 seconds. Again I know this is a huge favor I'm asking, but in the case that any of you guys have a little free time every now and then, and get enjoyment out of helping a new programmer (although I like to think that I learn quickly :P ), would any of you guys be down? I was thinking maybe we could add each other on skype/email/reddit pm/whatever, and I could just shoot questions your way when I find something? I'm not expecting anything, just thought I'd throw it out there :)
Make a gist so we can look at your code and try to help
Done! thanks
I might mention that there are ITunes course available that will help with Swift. However to elaborate on one of my other posts there is huge benefits to take a computer sciences approach to developing your programming capability. A little bit of knowledge can go a long ways here, I'm not saying a 4 year degree is absolutely required though it will certainly help. The point is to cover yourself with a bit of theory about hardware and software that can be leveraged in your programming design. In other words understanding how hardware and software works is a huge advantage for a Programmer. If you go at this with the intent of just learning Swift you do yourself a significant disservice in the long run. I know many will disagree but this is my perspective, programmers that do well have a solid understanding of both the hardware and software. 
Any sufficiently large and/or old project is going to have dozens of places where it does things well for good reasons, does things well for bad reasons, does things badly for good reasons, and does things badly for bad reasons. We fight a losing battle against entropy, schedule pressure, and human fallibility. To directly answer the question though: in my experience GUI apps are poorly tested or not tested, and libraries/model layer code is somewhat tested. Web browsers, databases, and compilers tend to be very well tested.
As far as I can tell you're requesting data on the main thread which is never a good idea.
Theory is great, but not tangible in the beginning. You can take courses for hours and never touch an app. Building an app and learning a language are two different beasts. You don't need to be an expert to build a compelling Swift app in the beginning. The more complex it gets, the more a language mastery is required. Learning by building, for me at least, is more rewarding and addicting than taking a class. 
Hey, can you point out where, i tried to make sure i'm only using dispatch... on ui changes
Yep I think that's what happens by default. I'm a little out of touch with Swift but this may help: [Walkthrough - Using Background Transfer Service and NSURLSession](http://developer.xamarin.com/guides/ios/application_fundamentals/backgrounding/part_4_ios_backgrounding_walkthroughs/background_transfer_walkthrough/)
This is not something you do in a storyboard. You don't want to create a new storyboard ViewController for each cafe. This is something you do in code. You define a structure that holds the data, in your code you parse it and configure a view accordingly. You should already know how to set up the title of the cafe, it's business hours and so on. So I concentrate on the table map part. There are a couple ways to handle that. The simplest is to provide an image and some meta data, i.e. a click-map that contains coordinates of the individual seats for that image. So you use an image editor to figure out the coordinates of each seat and save it in a list. In your app you use something like a UITapGestureRecognizer to get the tapped coordinate, and then you walk over the list to see if something was tapped. That approach has a problem. To show reservation state or whatever you have to draw over an existing table. You could go all-in on data driven views and you create a data structure that is capable of showing your seat map. You can go from easy to fancy here as well. Easy way you put a grid over every cafe, and you arrange your seats along that grid. Here's some code that does that: //: Playground - noun: a place where people can play import UIKit struct Table { let x: Int let y: Int } var tables = [ Table(x: 2, y: 3), Table(x: 4, y: 3), Table(x: 6, y: 3), Table(x: 1, y: 5), Table(x: 3, y: 5), Table(x: 5, y: 5), Table(x: 7, y: 5), Table(x: 2, y: 7), Table(x: 4, y: 7), Table(x: 6, y: 7)] let cafeWidth = 8 let cafeHeight = 10 let cafeView = UIView(frame: CGRect(x: 0, y: 0, width: 300, height: 200)) cafeView.backgroundColor = UIColor(white: 0.9, alpha: 1.0) func viewForCoordinate(#x: Int, #y: Int, #size: CGSize) -&gt; UIView { let centerX = Int(cafeView.frame.size.width / CGFloat(cafeWidth)) * x let centerY = Int(cafeView.frame.size.height / CGFloat(cafeHeight)) * y let view = UIView(frame: CGRect(x: 0, y: 0, width: size.width, height: size.height)) view.center = CGPoint(x: centerX, y: centerY) return view } // draw the grid for row in 1..&lt;cafeHeight { for column in 1..&lt;cafeWidth { let gridDot = viewForCoordinate(x: row, y: column, size: CGSize(width: 1, height: 1)) gridDot.backgroundColor = UIColor.blackColor() cafeView.addSubview(gridDot) } } // draw the seats for table in tables { let tableView = viewForCoordinate(x: table.x, y: table.y, size: CGSize(width: 20, height: 20)) tableView.layer.cornerRadius = 8 tableView.backgroundColor = UIColor(hue: 100/360.0, saturation: 0.44, brightness: 0.33, alpha: 1) cafeView.addSubview(tableView) } This looks like that: http://i.imgur.com/33NUDOt.png Add a UITapGestureRecognizer to each tableView and you already have a table map that allows you to select tables. Or you combine the first and the second approach and you provide an image with the interior (sans tables) of the cafe and you provide the tables yourself. Create an image, replace one line of code let cafeView = UIImageView(image: UIImage(named: "cafe")) and your cafe view looks like this (pardon my drawing skills): http://i.imgur.com/waFxRhz.png 
Figured it out: If you're having this issue try setting the acceptAction.activationMode = UIUserNotificationActivationMode.Background acceptAction is just the name of my UIUserMutableNotificationAction()
You pass an argument as a parameter. A parameter is part of the method signature, whereas an argument is what is passed to that function. http://stackoverflow.com/questions/1788923/parameter-vs-argument
I haven't used Flinch before, but you should check out [`CIDetector`](https://developer.apple.com/library/prerelease/mac/documentation/CoreImage/Reference/CIDetector_Ref/index.html). Use it with `CIDetectorTypeFace` to find [`CIFaceFeature`](https://developer.apple.com/library/prerelease/mac/documentation/CoreImage/Reference/CIFaceFeature/index.html#//apple_ref/occ/cl/CIFaceFeature)s. `CIFaceFeature` has two properties which might be of use to you: `mouthPosition` and `hasSmile`.
Except, answer should never be nil in this scenario. If answer is nil, I would figure it would be better to have the app itself fail, not try to catch the exception, because something is horribly wrong if a super for an override is returning nil, no?
&gt;get off the main thread when you kick off network requests. Any idea how to go about that ? &gt;Also, checking a server every 1 second is a terrible idea Yes i know it sounds terrible but what's the alternative? bluetooth won't work from outside it's range. the app doens't run in the background so battery life should be fine
Wow thank you so much! This will help me so much. Currently I'm outside so i can't check for myself but I'm wondering if I were to parse the code above. I'm assuming I should parse in the table coordinates and the cafeview size and save it in respect to each venue. Finally I'll just load them back into the code? I haven't played around with the code yet but I was wondering if it's possible to code it in a way that only requires one table instead of 10 as shown above. And have the # of table change accordingly with the number of table coordinates in the database? But all in all thank you so much. Really appreciate it. 
can you remove that text from the HTML manually after the page is generated?
It sounds terrible because it is terrible. I have no idea what the feature is but, users like pull down to refresh. You should *not* be making network calls every 1 second, much less doing it on the main thread. Have you ever done multithreading? I'm assuming no. Search for iOS GCD or iOS multithreading. That said, you shouldn't be doing that first. You should be thinking about how you can not be hitting the network every 1 second. I can't think of a single app that needs to make network calls like that. I wouldn't be surprised if it was rejected from the App Store. Once you got that figured out, then you need to look at putting those network calls on a background thread. 
Great way to think about this is parameter is to a plant as an argument is to an automobile. When writing out a function, it would be called a parameter whereas when you use the function, it's called an argument. Plant and automobiles. Paramters and arguments.
thanks, i'll look it up. &gt; I can't think of a single app that needs to make network calls like that. What if your app needs to check to see if an external condition is satisfied every so often? by that i mean like the dropcam app for instance can let you know at anytime you're in the app if there's movement in the room, the current light level. I (personally) think it'll suck if an app that claims to be a home automation app doesn't detect my lights are off until i pull to refresh. but that's just me This could be implemented with ios push notifications i'm guessing, but i'm taking it step by step first. For now this is a personal app as it's kinda customized for my devices(server) and personal links, when i'm preparing it for the app store i could perhaps give the users an option to choose between periodic updates( they determine the interval) and pull to refresh updates. Thanks! 
Doesn't really help you much here, but I'm planning on making a video series soon on introduction to programming (in swift). If I get off my butt and actually put a few videos out there maybe I'll see if you could give some feedback. 
You should fail gracefully. Providing an experience that goes "oops, let's try again." Is better than one that crashes all of a sudden. A user will be more forgiving if you do that
Did you try communicating with them via resolution center? 
I really hope they can re-review it to be honest. I've been going through these processes for 3 weeks and its getting to the point where people waiting on the app to be released have no clue what's going on. I much prefer the Google style of doing things with the play store..
Thanks a lot, Catfish! I really appreciate both the words of advice and the explanation. That gistfile1.txt is exactly the kind of information I was hunting for, spot on! 
Sometimes they are, but often they are used as explained in the other comments. 
Swift closures are pretty consistent if you ask me...
&gt; created a button, added all the nice "are you sure you want to restore purchases?" Is the button clearly labeled "Restore Purchases?" I'm also not sure, but perhaps the adding a second prompt after the restore purchases button has been activated is where the problem lies? 
It's true that the button doesn't say RESTORE PURCHASES HERE, but what kind of a requirement is that? Other apps use icons for that thing all the time. There is a second prompt after that indicates that purchases have been restored. I also wrote in the notes about the button so surely they could reply with a slightly more accurate response than 'mechanism missing'
No idea, I'm just wondering if the reviewer somehow missed the button even the second time. It does sound like the resolution center is your best bet. I would say don't give up, these things do happen. I'm sure it will get resolved in no time! 
Sorry to bug you further. This code works perfectly in my playground but when I use the code under the ViewDidLoad () { in my view controller, nothing appears. I am really new to drawing stuff so I'm not really sure what I'm missing. 
The UI looks great, nice job!
If you are loading the next view controller with a segue, you could pass the variable to the next view controller in the PrepareForSegue function. I'd provide some code but I'm on mobile. 
There's a series of online free books or courses called Learn Programming the Hard Way. There's one for [Objective-C](http://c.learncodethehardway.org/). I haven't actually taken this course, but I've taken the Python one they have. The classes aim to be a good class for all skill levels (those who have never programmed, to those who need to brush up on their knowledge). Although its not swift, its a course about the language that swift is based on, and might have some architectural rules that carry over. It might be a waste of time if you've already learned a lot of swift and have no intention of learning another language, but this course is designed to prevent "lazy learning" of a language, something that a lot of new programmers (including myself) fall into unintentionally. It might be worth it just to skim the chapters for good tips on structure and functional relations. I have no idea if this is the kind of thing you are looking for, but if it is, I hope it helps!
I see a semi colon or two in that code - someone isn't quite up to the syntax sugar in swift yet.
If the cell is not a ProductTableCell, would that while-loop not run forever?
Yes. It's critical to run the loop until the cell is persuaded to become a product table cell :p
Ohh, thanks!
Can this do &lt;&lt;UnrelatedPart1&gt;&gt;= &lt;&lt;PartA&gt;&gt; &lt;&lt;ParthB&gt;&gt; &lt;&lt;Unrelated2&gt;&gt;= &lt;&lt;PartA&gt;&gt; &lt;&lt;PartC&gt;&gt; like in the original weave and tackle command line app for C?
Maybe not the most useful app in the world, but at least you got something finished and released, so congrats on that! Personally I don't Swift really going very far to bring programming into the mainstream. It will do a lot to help, and is 100 times more approachable than Obj-C, but iOS development is still a hard nut to crack all around. Even coming from something like web development, where you do deal will some OOP concepts, iOS still poses some challenges and requires you to change the way you think.
While I haven't worked with restore purchases personally, I have seen that apps use a button that simply states "Restore Purchases" in many different cases. It's very possible that Apple is picky about button text and does require the exact wording for this.
This is probably the most likely thing that's happened. I feel that that is a design choice however rather than something that should affect submission. I wish they gave more accurate feedback if this is the case however 
haha 'stable'
It's planned to come out with iOS 9 and WatchOS 2 officially, so sometime in September, I believe.
[Use this!](http://appcleaner.en.softonic.com/mac)
I think you should learn swift 1.2 first and then when you have a basic idea of how the language works, you can head over to learn swift 2 (after the stable release). I strictly advise you not to learn in any beta software, sometimes it may drive you crazy with its **bugs**.
The enum isn't the problem. You are trying to asign a String to variable of type Color. car.color = Color.Green is what you are trying to do, I guess. You also don't need the init() inside the enum.
That works. Playground now tells me that the car is {name "truck" (Enum Value)} How do I get the color green to be displayed, instead of Enum Value? Do I need to create a switch() statement where each possible color is assigned a string? It init() inside the enum is just something I was playing with to see how it worked, really.
You can assign a String (or Int, ... etc.) value to an Enum value like so enum Color: String { case Green = "Green" } //Swift 1.2 enum Color: String { case Green } //Swift 2.0 and then use let colorString = Color.Green.rawValue to extract it. 
Since I was also a complete beginner around 4 weeks ago (as in, I had basically zero knowledge/experience with computer programming in general), I feel like I should share my opinion. If you're like I was, and are completely new object-oriented programming, don't waste any time in learning the core concepts of OOP and the Swift syntax. Sure, there will be some differences in Swift 2.0, but if you don't already have a grasp of how the language really works, then the changes in 2.0 are only going to confuse you more. My advice: don't even bother looking at the online tutorials related to "What's new in Swift 2.0" right now. There's plenty of time between now and the official release of 2.0 for you to learn the language, the frameworks, the ins and outs of xcode. Once you do this, you should have a relatively smooth transition to 2.0 once it's released. And also, Apple should provide comprehensive release notes for you to reference when release time comes. Hope this helps!
I would stick with 2.0, as far as betas go it's fairly stable. Besides the full release of 2.0 is not very far away, in September I think. Granted there may not be as many tutorials out there, but I would guess most people writing tutorials have made the switch already and any new 1.2 tutorials were already in the pipe when 2.0 was announced.
I've not found a great way, and finally resorted to reinstalling. Let me know if you solve this issue. I had so many cross linked stuff between the beta and normal versions of Xcode.
I don't have Xcode handy, but I recall there being checkmarks on the viewcontroller settings where you can set the default for the ViewController without code (over on the right panel). Sorry I can't remember the right terminology at the moment...
To answer your question: yes, you should absolutely learn Swift 1.2 now before moving on to Swift 2.0 when it's released. To be honest, you're a complete beginner – this isn't even a question you ought to be asking. Let me rephrase: "should I learn the language you've all been using to make and ship apps for the last year and for which there are lots of great tutorials, or should I install a beta version of the tools that have their own set of bugs, are changing every two weeks, and have very few tutorial materials available?" The answer should be pretty clear :) My suggestion: * Read my free Swift 1.2 tutorial series, [Hacking with Swift](https://www.hackingwithswift.com). * When you get to the end of tutorial 30, read [What's new in Swift 2](https://www.hackingwithswift.com/swift2) * Now continue reading projects 31 to 35, all of which are in Swift 2. As soon as I judge Swift 2 to be stable, I'll be updating the entire site to be Swift 2.0, of that you can be sure. Until then, relax and write Swift 1.2 – the changes aren't that big and will make complete sense once you're familiar with 1.2.
"should I learn the language you've all been using to make and ship apps for the last year" That's one bold implication. If anything, he should learn objective-c then 
I was able to solve the problem by doing this: navigationController?.toolbarHidden = false navigationController?.setToolbarHidden(true, animated: false) Thanks for the help!
Take a look at this Stack Overflow article: http://stackoverflow.com/questions/26207846/pass-data-through-segue
Python is usually the go-to. Swift has a lot of strange complexities to it that can make things really difficult for beginners. There is also the fact that the Xcode IDE for Swift is still a huge mess. Perhaps the toughest thing is this push/pull involved in Apple's developments for app development, with xibs and autolayout and storyboards that are intended to speed up app development for simple projects, but can really be a mindfuck for new developers, and overall I would consider harmful for learning how to program. A good programmer is going to learn how to program *first*, and learn the shortcuts after. Apple encourages the opposite, and it ends up really harming your longterm prospects I feel. 
Sure thing! Also, after re-reading my above post, I need to clarify one thing: "don't waste any time in learning the core concepts of OOP and the Swift syntax." Bad wording on my part! I meant that as in, "Don't hesitate; go ahead and learn the core concepts and syntax now!" If you'd like, I can give you my list of a couple tutorials that have been most helpful to me. Just let me know :)
No there is no way to "initialize" productBarcode without giving it an actual value. A variable whose type is an enum must have a value that is one of the enum cases. Further if the enum case has associated values then it must have those too.
Finally the proper answer to this question!
I think you're extending my argument unnecessarily. There's a difference between "not released" and "released, stable and supported" and that difference is significant. Otherwise, "if anything, he should learn Objective C" would then become "if anything, he should learn C" then "if anything, he should learn assembly" etc, which I shall christen *reductio ad machine codum* – there's a point where something is good enough, and Swift is there. *That being said*: I do think OP ought to learn Objective C. It doesn't have to be pro Objective C, it doesn't even have to be advanced Objective C, but it's naïve to imagine you can walk into a great iOS job knowing only Swift. Don't get me wrong: I love Swift, and all my new personal projects for the last year have been written in Swift, even from the very earliest beta releases. But when I go to my day job my company's major product is written entirely in Objective C and that isn't going to change. I have a team of developers, and when I hire more I simply cannot take on someone without Objective C knowledge – it just wouldn't be feasible. Fortunately for OP, if you learn UIKit / SpriteKit / Core Graphics / Core Image / etc using Swift, you'll be able to move across to Objective C easily enough. So: learn Swift. Make Swift your first language. Get as advanced in Swift as you can. But don't forget that you'll come into contact with Objective C on a regular basis for at least the next three years, and you need to have a working knowledge* in order to be commercially useful. (* "I can read this code, understand what it is doing, and make some changes as necessary.")
Yeah I think that is the issue. Going to sit down tonight and make some changes and resubmit. I've seen other apps that use an icon to say this, but I guess maybe that was an oversight on their reviewer's part. Luckily I have a few other changes I wish to make anyway so this might end up being a blessing in disguise.
OT, but the taken previewpictures from github always make me wonder which sub this was posted in. Great stuff, though, ty!
I went from Lynda.com to Treehouse because of the lack of depth to their tutorials. Half that site is "How to use your phone or camera" now.
You could create an additional enum case (e.g. .None), or make the property optional.
I don't understand. Will you provide: - Sample input. - Basic natural language algorithm. - Desired output (several of them).
From Swift, there isn't an established way to this currently. Your "best" option would be to use something like [PyObjC](https://pythonhosted.org/pyobjc/) and then wrap that in Swift. 
For those of us still learning Swift, what does this mean and why is it a good thing?
Generally you have to signup with the methods provided by Parse (explained here: https://parse.com/docs/ios/guide#users-facebook-users). After this, you have to do a request to /me to get extra info from the user (check here: https://developers.facebook.com/docs/ios/graph). 
Foundation has a built in method for doing this: func enumerateDatesStartingAfterDate(start: NSDate, matchingComponents comps: NSDateComponents, options opts: NSCalendarOptions, usingBlock block: (NSDate?, Bool, UnsafeMutablePointer&lt;ObjCBool&gt;) -&gt; Void) This will call the closure you pass in for each date after the starting date that matches all the criteria. It handles getting this correct for non-Gregorian calendars and such as well.
Hmm, are there any comparable libraries in Swift? I'm looking to do linear regressions and matrix manipulations. Some Googling yielded a statistical library called Sigma for Swift. Do you have any experience with this library?
I do not have experience using that library (nor PyObjC honestly). 
Thank for the clarification!
To add to my original post: I would say I've got a relatively good grasp on the swift language and Xcode IDE. My main concerns now are understanding the ins and outs of frameworks, data storage, stuff like that
Thanks, it was a fun little app to get my feet wet :) Interesting insight. I'm sort of hoping Swift will blow up with iOS 9 and IOFT. 
You should really check out Stanford University's [Developing iOS 8 Apps with Swift](https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099). It's an absolutely phenomenal course that dives very deep into developing iOS apps with Swift. It's completely free and available on iTunesU
I think you went over the max value of an Int16? When you go over the max... Unexpected things can happen... Like going to the minimum value, which is a negative large number. (It is actually not 'unexpected things can happen'. You can tell exactly what happens and why. But too much for me to get into right now)
It is likely that your 'points' property should be of type NSNumber instead of Int. A word of advice - I would look into using a tool like [Mogenerator](https://github.com/rentzsch/mogenerator) (or the built-in code generator in Xcode) to create your NSManagedObject subclasses. Those tools will auto-generate the @NSManaged properties and can help ensure they have the correct signatures. In Swift, the (default) signature you're looking for is probably @NSManaged var points: NSNumber? but your Core Data model file can affect this.
Yes this turned out to be the correct answer ! Thank you!!
A switch works like if/else if/else statements. Say you are analyzing the value of a variable (or constant) that represents the temperature outside. In the case that the temperature is below 55 you can print out that it's cold. If it's 56-70 you can print out that it's warm, and over 70 it's hot. It'll look something like this: var temperature = 43 switch temperature { case 0...55: print("It's cold.") case 56...70: print("It's warm.") case 71...120: print("It's hot outside.") default: print("Invalid temperature.") } You could write it using if statements - if the temperature is below x, then do y, etc. This is a pretty simple example obviously.
Try making one of my free Swift projects: [Hacking with Swift](https://www.hackingwithswift.com). If you start at the beginning and work through all the projects you'll learn the majority of UIKit and SpriteKit, plus some Core Graphics, Core Image, Core Motion and Core Location.
thank you soo much that's what i need 
thanks for the advice 
Glad to help!
Keynote... There is a video from WWDC 2014 to do with prototyping, they have some neat ideas. Always worth a watch. They do it with an iOS app, but easy enough to do with OS X
Could be the new bitcode representation, in which case the app store would thin it down before it reaches your users: https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_7_0.html Other than that… hm. Are your other projects both 64 and 32 bit? That'll add some size.
I am never able to get more than 0 votes here :D
That is totally normal, if you are just started coding, then you can totally skip this or pin it for later. This might be a little bit advanced.
I disabled bitcode in this project. I use cocoapods in this project and bitcode causes build failure. Project's architecture is set to arm64 armv7 and armv7s, so I assume is both 64 and 32bit. But other project has the same architecture settings
It is really annoying. The process is flowed, I get downvotes with no reasons why or how I can improve consequent posts :( 
What kind of social network? 
I hear you, and fully agree. Since there are thousands upon thousands of redditers, the system must work OK. Just takes a bit of adaptation, and because of 'no reasons why', the learning curve can be a bit slow!?
Thank you for reading and for the kind words :)
WIll do!
There's an easy answer to why this is: you're a spammer, as per [reddit's rules](https://www.reddit.com/rules/): &gt; NOT OK: Submitting only links to your blog or personal website. The vast majority of your submissions to here and /r/iosprogramming are links to your articles disguised in self posts. reddit staff in the past has set a guideline having no more than 10% of submissions be your own. You're clearly only here for self-promotion. Why *shouldn't* people be downvoting your submissions?
what is wireframing?
&gt; OK: Submitting links from your own site, talking with redditors in the comments, and also submitting cool stuff from other sites. I suppose I agree with you, but I want to be clear that I feel the problem isn't that OP posts links to his own stuff, it's that he *only* posts links to his own stuff. I like seeing people post their blogs here. I like reading them. I don't want to discourage people from doing that, and I don't want it to go away. I mean, if that's gone, all that's left is 90% stackoverflow-style questions, 5% swift announcements, and 5% links to blogs and stuff that *isn't* your own. (also, and this I'm just curious about, but isn't the linking to your own stuff in a self post a courtesy? So you don't get karma for your own stuff?)
That is my bad, I didn't really read about the rules. Now that I know that I will surely fix this and stop only posting my own blog articles :) However, I think 10% might be too low. Are there any rules about the maximum percentage?
So I'm a little confused as to what's going on in your code. I've downloaded the playground, and I can't understand why you've done certain things. First off, you've got the enum `ResponseError`. Why does this conform to `ErrorType`? This was really confusing: `ErrorType` is the protocol used for `try` `catch` error handling. But you never do any `try` `catch` error handling. I mean, it really looks like you're going to - the `fetchPosts` function looks like it should throw - but then it just never shows up. Then you've got this function: func refreshSession(completion: () -&gt; () ) { completion() } Again, I'm confused, not criticising. I may be missing something here. But... does this *just call a function?* If so, isn't it completely unneeded? I can't think of a way it's necessary. Like, look at this piece of code: refreshSession { print("Refresshing Session") fetchPosts(userId) { (posts: [Post]?, error) in // Display the posts completion([], nil) } } If you remove `refreshSession` it does *exactly the same thing*: print("Refresshing Session") fetchPosts(userId) { (posts: [Post]?, error) in // Display the posts completion([], nil) } Then you've got the type alias `CompletionClousure`. This seems completely backwards to me. First of all, you give a `CompletionClousure` to the `fetchPosts` function... why? Surely the `fetchPosts` function should fetch posts, and then some other function will deal with the fetched posts. Then, there's the fact that both of its values are optional, but it *also* has an `ErrorType` enum. Again, this logic seems backwards: why should the function which takes the array of posts handle errors? Why not the `fetchPostsAndRefreshSessionIfNeeded` function? But on top of that, why do you have an optional error enum? `[Post]` being equal to nil would surely signify an error. Or, throwing a `ResponseError`. But *both*? Then, I'm not entirely sure what you're doing it your logic. So if your session has timed out, you refresh that session... but then you return an empty array anyway. Or, rather, you give an empty array to the `CompletionClousure`. Do you want to keep refreshing your session until you get posts back? Do you want to refresh it only once?
Drawing interfaces so you can make decisions about how you want your app to look and how the user workflow should behave. Sometimes it is just basic outlines of windows and buttons (i.e. "wire" frames). Sometimes it is fully animated, pixel accurate versions of your intended interface in Flash or Quartz Compositor.
The size of the dylib on disk is very misleading: it includes bitcode and all of the possible architectural slices that you might need. When you submit to the store, the bitcode is removed, and your customers only download a single architecture due to the new iOS "thinning" features.
What kind of storage limits does it have and is it required to upload to Dropbox? 
If you want you can send me your Skype name and I will try to answer your questions and help you. I started learning Swift with Beta 1, was a C# developer before and I'm currently studying IT Security.
The storage limits are up to the space on your phone. You do not have to use dropbox at all with the app. It's just a nice way to automatically backup the recordings if you so choose.
Nice. What kind of compression is it going through? As in, how much space does a 30min recording take up for example?
Thanks for the definitive answer, Chris! It's probably worth adding for clarity that bitcode should only be generated when you use Product &gt; Archive; other times Xcode does a check to see whether bitcode would work but doesn't generate any.
Ok I see how that works.
I would spend some time getting used to commonly used frameworks. That will not only help cement some of the basics from those books but will also give you a head start at understanding the pieces of any application that don't necessarily change app to app. Maybe make a basic mapping application to get the hang of CoreLocation and MapKit. Then do some work with CloudKit or [Parse](https://parse.com/docs) (if you want to go external). And look into JSON management, which, in general, is poorly handled by Swift, so look at integrating [SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON). What you should focus on should relatively correlate to what your interests are within Swift programming, or ANY programming really. If it is something that hold your interest, you will absolutely be more receptive to all aspects of its implementation. You know...have fun :D
You gotta give more information about this. Don't just say "I have a social network and I want testers". If you expect people to spend their free time playing with it and reporting bugs to you, you have to show more details. Good luck.
Stick that ish in ViewWillAppear homie. Or even ViewWillDisappear. 
I highly recommend hackingwithswift.com I am currently using it and I love his reaching style. 
Make a calculator and to do app. Both good exercises in the basics.
&gt; deter implicitly unwrapped optionals I think in a lot of cases in 1.2 the force unwraps were done to avoid massive indentation. I hope features like guard will reduce that I'd also hope that as the compiler matures there can be more intelligent detection with warnings etc 
Looks like it gets the gist, it might not be 100% accurate for more complex code but it would be good enough starting point for something trying to convert it. It's worth noting that the converter doesn't take into account the niceties of Swift, like using `if let` to check for optional types or using the shorter versions of the enums.
yes saving a reference to views is repetitive, even with guards. I think this is the result of using an objective-c developed API in a new language (e.g. views are meant to be setup in loadView, not init). Hopefully the frameworks will grow to be more swift friendly over time 
Oh! So you'll just want to write a C function that takes a Block. Those get bridged to closures in Swift. That attachCallback function I wrote in the Obj-C should do just fine in pure C, just without the call to SwiftClass, then. You can call that C function from within Swift and pass a closure, and then call that completion parameter in your C code when it's finished.
Thanks for clarifying - there will now follow a brief pause while I learn about blocks, closures and completion parameters :) Much appreciated - I now know what I need to know, as it were :)
It also has issues if you include the property declarations in the code as well. I believe the "@" confuses the parser.
I really did try to learn Objective-C, several times. Worked through tutorials, got a slider to update a textField and vice-versa, but it all just kept falling out of my head. Too abstract, too much finicky punctuation etc. It says a lot about Swift that a twat like yours truly can bang out a working app after just a few weeks of learning - although that's in no small part down to the kindness of you guys, and the masterful teaching by Paul Hagerty in the iTunes U course. This app's unlikely to find any friends on the App Store as you'd kinda need to have the little Teensy / Arduino interfaces I've built too, but you know, gimme a yell if you're into electronics and I'll let you know what you need to build. App features so far: - can control arbitrary number of disparate motors / actuators etc - super-safe "direct" control of motors with on-screen sliders (won't let you exceed maximum speed / acceleration for the channel) - GUI reflects current position and speed of axis while you're dragging - Cue list lets you build up a list of position "cues" - Cue list lets you set duration / ease-in / ease-out for each cue - When playing back cue list, if the positions / angles allow a subject to be triangulated, it'll calc the subject's position, and derive a pan angle from the position (aka "LOOK-AT") - Only crashes occasionally Next up: - Gotta hook up my hacked Canon lenses so I can control / animate / track focus too - A wired / wireless hand controller would be nice, so you don't need to keep looking at the Mac screen when you really want to be watching the viewfinder on the camera: a rotary encoder and a few buttons and switches - Man, I really want pan *and* tilt. But that's another story 
I got into iOS development thanks to his iTunes U course. He's a great professor. Stanford students are really lucky. 
When you start any project, you'll see a heading that says "Support my work" where you can buy a downloadable copy of the complete series. If you don't want to pay, you can enter $0 for the price and still get the book.
BRAVO!
Woah, that looks amazing!
There are somehow translated automatically and might have cut methods into method, which is quite funny.
Something like this: class MainViewController: UIViewController { @IBOutlet var myLabel: UILabel? //the UI Element in question //the rest of your class } class OtherViewController: UIViewController { var reference: MainViewController? //reference to the main view controller that you set in a segue or something } Now, you can access the label inside OtherViewController like this: self.reference.myLabel
Thank you. I'm a beginner so I didn't understand what you meant by saying start a project. Where is the header that you said and where do I start a project? I appreciate your help. I know I can read your book free on the web but I would be very happy if it could be possible to have it on kindle. 
When you go to any project on the Hacking with Swift website – such as [the very first project](https://www.hackingwithswift.com/read/1/overview) – look for the title that says, "Support my work" then read that text.
I'm on mobile now, so I don't have the code. I can give you some pointers though. You have to calculate and set the initial, min and max zoom scale on the scroll view. Make sure you assign the right size to the scroll view contents. You can use the offset and zoom scale to calculate size and cgrect for the cropping. 
I guess one approach of dealing with it which I have explored briefly is to factor out much of the code and stick it in separate objects used by the ViewController. Often you need to implement some delegate or data source. Since those are just protocols you could initialize the classes for these the way you want and make sure they use non-optional variables.
Do your structs contain reference types? The struct itself may be being copied but just contain a copy of the reference rather than a copy of the referenced object.
In iOS this is relatively simple. I'm sure you've used frame/bounds before - in this case you should use frame because it refers to the superview's bounds. [Here's](https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection) a very simple (rectangular) collision detection algorithm I found in javascript - I'll show you how to replicate it in swift. let rect1 = view1.frame let rect2 = view2.frame if rect1.minX &lt; rect2.maxX &amp;&amp; rect1.maxX &gt; rect2.minX &amp;&amp; rect1.minY &lt; rect2.maxY &amp;&amp; rect1.maxY &gt; rect2.minY { // are touching } Hope this helps!
I'm hugely biased because I wrote it, but try [Hacking with Swift](https://www.hackingwithswift.com) – it's free and hopefully useful to you!
Thank you for the nice words. You dont really have to use T. Since I am not use annotated types, then swift will infer the T type to (Optional&lt;Array&lt;Comment&gt; This can be seen in the screenshot taken from the playground http://prntscr.com/819nkt The idea here, since I am not using an explicit annotation, and since T is a generic constraint, then its type will be correctly inferred to T?
Couldn't you just use a tapGestureRecognizer and attach it to the button when the game ends? Apologies if this is incorrect, I have very little practice dealing with SprikeKit and games. Though I can't imagine it is different...
Any link to the Brad Larson lessons?
 let tap = UITapGestureRecognizer(target: self, action: Selector("replayAction:")) tap.delegate = self replayButton.addGesture(tap) ------------------- func replayAction(sender: UIButton) {if (sender.name == "homeButton") { let myScene = GameScene(size: self.size) myScene.scaleMode = scaleMode let reveal = SKTransition.fadeWithDuration(2.0) self.view?.presentScene(myScene, transition: reveal) } ...roughly
Sorry, I was using the class keyword. Even though I was looking dead at it, I was interpreting it to be stuct. I need sleep
Been there, done that. 
Thank You, but where should I add these lines of code?
Sh*t! You did WROTE Apple's Swift guide? Sure, one more website added to the list! Thanks :)
I like him, makes me want to go to Stanford.
Declare the tapGestureRecognizer at the top of the file. Then add the value of the tapGestureRecognizer in viewDidLoad(). And the last one is a function. Put it where ever it systematically makes sense to put it within the controller's code.
Er, no: I wrote Hacking with Swift. Give it a try and let me know what you think!
Totally misread it. Checking it out now thanks again
Read an article once which equated an Optional's usage to that of Schrodinger's Cat and it was truly enlightening. And Optional is the epitome of the Uncertainty Principle and only on opening the box (unwrapping the optional) do we truly solidify the existence of its value, or lack of one. ? to put the cat in the box, if let to check if it's alive, and ! to confirm its existence. The simplification of it was/is perfect and now I'm not confused anymore :D But I get you completely, and have had that happen multiple times in varying languages. It is pretty great.
Sorry, I was using the class keyword. Even though I was looking dead at it, I was interpreting it to be stuct. I need sleep
Make something with UITableViews. UITableView is used in some form or another in most apps, and you'll learn a lot along the way. Examples: * Todo app * Any reddit/twitter/social media app * Most likely any random app you open on your phone
In my opinion Brad Larson is better than Paul Hegarty. These lessons are from 2010. Most of it are still relevant. Worth watching: https://itunes.apple.com/us/itunes-u/advanced-iphone-development/id407243028?mt=10 and also https://itunes.apple.com/us/itunes-u/advanced-iphone-development/id407243032?mt=10 He is a demigod on StackOverflow. http://stackoverflow.com/users/19679/brad-larson
Unfortunately this related to my lack of experience with SpriteKit. Wasn't aware that uibutton wouldn't be used although it makes sense given the class functionality. Honestly, in your shoes, I would just load a view inside the node as the button which would allow you to attach normal uikit gestures to that element. I mean it's a simple replay button anyway, is there a reason it is a Sprite specifically?
Interesting. One suggestion, maybe put different colored backgrounds on the scroll view and content view to make sure you have the right spatial idea of the layout? And make sure you are setting `contentSize` properly. 
[Swift version of tiling](http://stackoverflow.com/questions/29878371/how-do-i-make-image-based-tiled-background-for-uiview-so-that-it-doesnt-scale) because you /r/Swift :D But seriously /u/Voidref is pointing you in the right direction
Yea it's awesome - I'm going through the iOS 8 course but he just released an iOS 9 / Swift 2.0 course which I also grabbed for $10. Downside to that one is that he's teaching on a beta version of Xcode that's still under active development; apparently some of his code and projects already break with current versions of the beta so he tells you to use older ones. I'm going to wait for the next version of Xcode / Swift to become final before I start learning it since they are still actively deciding how things will work to begin with.
Wow. Moderator and top 0.07%.
Lolz, totally worth it though...I mean when would I get my sword fighting in otherwise XD
Have you considered `UIPageViewController`? It has a curious API, but it works great.
Sorry, what is curious API? Tried googling it. 
The project I work on has 168 swift files currently; if I just make a small change and want to test it, with the previous build cached (i.e. my usual workflow), it usually takes around 5 seconds to build. Unfortunately, not even close to enough time for a sword fight. Not sure what's going on in your project though.
Why do we need the info what are you writing in? You could as well write in brainfuck, what's the point of this useless article?
Sorry; I meant it has an API that often makes people a bit confused, at least at first.
Or, probably better, use if let json = NSString(contentsOfFile: jsonPath, encoding: NSUTF8StringEncoding, error: nil) { return .... } ...deal with error here...
Well, since no one else is speaking up then I will say it - thanks for posting this. It is very helpful for someone like myself who also wants to dive into developing iOS apps and doing so with Swift.
I was going to say the same. 
I would totally recommend Crashlytics/Fabric - great and free service from Twitter
Luckily for you, iOS is really powerful when it comes to fluid object movement and dynamics. If you are doing simple collision detection of views within spriteKit then there is a method for detecting the intersection of any two objects anywhere on the screen. But it doesn't look like you are using spriteKit, so your best bet is likely going to be to use the UICollision methods. Check out this [tutorial] (http://www.raywenderlich.com/76147/uikit-dynamics-tutorial-swift). Probably a bit more intense than you will need, but should still be able to help you out faster than a continued back and forth here.
I prefer Parse. Although it may not be as robust as Fabric, you are typically going to use Parse for the DB or OAuth side anyway and Fabric I've found to be a hefty library to use if you are only going to be utilizing the crash reporting. Just my opinion though, both will work.
After doing that, I can't scroll at all. Just nothing happens when I try to scroll.
[Release notes here.](https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7_beta_5/Xcode_7_beta_5_Release_Notes.pdf)
Yeah! 
I thought it was odd, too. Not a lot of detail about why the author is writing in Pure Swift. I like the idea and it would be interesting to see someone start a GUI toolkit using Swift just as a proof of concept. If I had a better background in creating toolkits I would definitely like to try. I watched Aaron Hilegrass' [talk](https://realm.io/news/altconf-aaron-hillegass-eulogy-for-objective-c/) about the death of Objective-C (hint: no it's not dying). And he mentioned something about functional languages not being good for GUI and that most toolkits are Object Oriented because they are all about simulating button and GUI concepts. I know that Swift has some functional ideas but I don't understand how it is not considered more OO since it does have classes. 
Fabric sounds like WYSIWYG app development, but I'm not totally sure. The announcement blog page seems to be short on details. What was your experience like with it?
Either way, well done. Astonished Apple hasn't integrated one of these into xcode yet. Once you hammer out the details, you should look into making it an xcode plugin.
I'm glad I decided to stay on Yosemite, I've been working nonstop on this app for the last three months and having to go two days with out being able to work on it, or even know when a fix would come would have been frustrating. 
No. That is for the beta version of Xcode. It is to stop if from crashing.
I think that's the next step. I've read tweets from well known devs that were already talking about that.
It stands to reason that as the first port is to Linux and not Windows, that Apple also wants it to take off as a language for web apps.
hahaha - 'It is to stop if from crashing.' 
Grabbing this now, thanks! Here's to hoping Apple fixed some of the View debugging and other memory issues that cause Beta 4 to crash frequently for me.
The world is in desperate need of a web programming language that's type-safe and as friendly as Ruby. I'm super excited for Swift on the server.
I bought it, it is quite pricey, but most of the resources are worth it. If it was a little cheaper I would say buy it, but there are a lot of free resources that you can find. Look for inspiration at dribbble
Delegation, Notifications, Target/Action, and Blocks/Closures to name a few. I would say [Delegation](https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html) is the most important. Apple has a great site titled [*Start Developing iOS Apps Today*](https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOS/) where they cover several concepts in detail. You may also find this long form tutorial on [building an iOS app to track the Moon phase](http://www.cocoascientist.com/luna-displaying-the-moon-phase.html) helpful. There are several core concepts that are covered in detail.
If you think the blog post was about the entire software stack not including any C code or code in any other language then you misunderstood the argument (see my answer above). It was about decoupling *your* code from a particular platform for future portability and the ability to fully utilize the features of Swift.
Apple needs something like the Twitter bootstrap, would make at least prototyping easier.
Ok, I should check that out then. Thanks.
You may still be forced to use spriteKit to detect the real time intersection of views. I don't know of a recognizer which has that ability in normal application builds. I would think, though, that you would be fine, from the UX perspective, to just run the check after touchHasEnded. If the view is in collision when ended then run code. Otherwise let them drag it anywhere, until they let go, they are just dragging an element around.
What do you think UIKit is?
Also try [Start Developing iOS Apps (Swift)](https://developer.apple.com/library/prerelease/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/) for the Swift version of that tutorial
&gt; Functions can access any variable or other function within the global scope. Functions can access any variable or other function within the scope they are declared. This can be the current class and its baseclasses, the global scope, or whatever is inside another function (since functions can be declared inside functions). &gt; Closures can only access variables/functions you pass to the Closure in [ ]'s. Closures have the same access rules as functions, which is why they are called closures in the first place. They are essentially unnamed functions, which can be used in fewer places than named functions but are otherwise pretty much the same.
To add to what has already been mentioned, try to understand what Model View Controller means in a iOS/Cocoa context. Apple has a [great description of MVC here](https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/Model-View-Controller/Model-View-Controller.html). This is important because so much of the other iOS thinking is influenced by MVC. Getting Cocoa MVC helps you understand UIViewControllers, NSWindowsControllers, UITableViewDataSource delegates etc.
Pretty and good UI design isn't quite the same thing though. A good UI design is something that is easy to use and figure out. Quite possible to make something pretty that is crappy to use. Read the Apple Human Interface Guidelines for starters. I read a book called Designing with the Mind in Mind, which also quite liked. Both of these are about good design and not prettyness per say. But good design also tend to be pretty. There is a lot to learn from not related areas like typography and magazine page layout for how to make things look good.
I don't think that the problem is the language itself. Swift is very young language and that's the cause. Just there has been no one to implement it yet (or someone did it but did not openesourced it). PS. How hard is to type with crumb in your keyboard ;)?
Eventually, learning Grand Central Dispatch and asynchronous programming techniques are essential if you want to do anything beyond a basic to-do app. Far too many app developers think it's OK to block the main thread (which freezes the entire UI) while they do data processing. It's a bad habit to get into and one that's pretty easily fixed.
There are good advantages of using libraries. First advantage is that that kind of libraries are maintained by a big community and you can count on their good quality. You can't expect as a beginner to write better code than other senior developers, and that helps your app to be good. You can always look at source of that libraries and see how are they solving your problems and learn from them.
There is one. It's a little language called C#.
Ok so basically if I would wont connect to mysql server in swift. I should create class that implements MySQL client/server protocol. Sorry but I don't understand your last question. Could you explain? :) 
Some important subjects for iOS development (both swift or objective-C) * [**ViewController lifecycle:**](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewController_Class/) Understand how ViewControllers work and what can be done in each phase of its existence * [**MVC:**](https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOS/DesignPatterns.html) Understand how to organize your code and how to connect these layers * [**Autolayout:**](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/Introduction/Introduction.html) Understand how you should design your interface in order to support any iOS device * [**Network:**](https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/WorkingWithHTTPAndHTTPSRequests/WorkingWithHTTPAndHTTPSRequests.html) Understand how to create requests and how to parse data from a API
At the very core of things, you should have a solid understanding of the Model View Controller pattern, and more importantly, be able to actually follow that pattern as you write applications. Writing programs with Objective-C or Swift doesn't necessarily mean you need to be developing iOS or OS X applications. Before you start working with Interface Builder and View Controllers etc. you should start with creating simple command line applications. Let me know if you need any ideas.
Stop blocking the main thread like every single other developer that posts in this subreddit. Jesus christ. I see it everywhere. Use auto layout. Use more than just one fucking storyboard. "Doing everything in code" is less time efficient. If you can do it in the storyboard, do it in the storyboard. It's more maintainable. Join an iOS development meet up. Most of the people that post in this subreddit are hobbyist. Few do it professionally here on large scale apps. The apps I work on, I guarantee most of you use very frequently. If you were to interview with us, and only used the advice from this subreddit to study up, it'd be.. not good. 
Yes, that's what would be needed. Also, you don't have to use PHP. Any language that can connect to MySQL and respond to requests could be used. I've done it with Python and Ruby for two different apps, myself. I do agree though, I hate PHP :)
It was a joke. Your username means 'Crumb in a keyboard' in Polish.
Ok. Originally, I wanted sources for customizing UI elements but now that I think about it, I should follow your advice and delve into design in general to make this app better. Thanks.
[Cocoa Core Competencies](https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/) Not Swift or iOS specific, but a useful list of some core concepts needed for app development.
Instead of ... || 1 || 2 || 3, Do: life != 1 || life != 2 || life != 3... You can prob do it with an array somehow too. "If life in ARRAY" or something
I'm thinking about writing if myself in whole in swift. I wonder if it'll be very complex for me :)
&gt; Functions are a type of closure. The other way around -- a closure is a special type of function, one which "encloses" variables defined outside of it so that it can use them (whereas a non-closure function can only access variables defined within itself or globals). 
Another way is to use a range and contains: if contains(1...3, life) { //...
ITunes U. Stanford iOS development. From last winters term.
You could create it in storyboard. Create a new view controller for your main menu, set it as your initial view. Then for the "start" button create a segue by right click + drag to the games view controller and set what type of segue you want.
hey thanks i created a button. but what should i type inside the function that i created by dragging the button to the code? Like how can i launch the game with code? Thanks so much! :)
Look at these: [awesome iOS](https://github.com/vsouza/awesome-ios) [invision](http://www.invisionapp.com/tethr) [custom controls](https://www.cocoacontrols.com/platforms/ios/controls) 
Per your recommendation, I watched the section on Core Data. Unfortunately it was very brief, and wasn't as comprehensive as I need. It did however provide me with a starting place, so thank you. 
Select your project then the target and look for your project settings list. Search for 'bridging' and you'll find the value. On the right side it has the name of the file. Double-click it and it will show you the name and path (including xcode variables) in the path. If you click on the arrow next to the key you may different values for release vs debug. However, unless you've explicitly created separate targets for simulator vs device, the bridging header paths are by default usually the same. 
Icons8 is great, but if you want real design work you'll have to pay for it. 
It's pretty good, almost every company I've worked at has used it and I've used it in my personal projects. I wish there website was nicer looking, but that's a minor thing. 
This looks promising: http://www.objc.io/books/core-data/
Brilliant, Thanks!
Awesome man! But he did say he would update his videos to work with the new version I believe. 
Can also recommend, I don't have it, but ObjC.io has quality content and they're always up-to-date regarding Swift. They update their books with the Swift updates and as soon as Swift 2.0 finally comes out, it's coming out of prerelease (most likely)
It won't be shitty swift code after I do a pass over it to match my style and make it my own. This tool would just let me test that it works at all without having to remove a bunch of square brackets and add periods and parens. It is more useful for small snippets, than huge libraries, I will grant you that.
Oh snap it works, thanks! Totally not what I was expecting, but I think I get the theory... I take it the lifespan of the buffer's memory is only that of the closure? Any way to retain it when adding it to the array?
The terminology here is somewhat correct. 1. com.company.product is actually the Bundle *Identifier* — this must absolutely be unique 2. The app name seen in the Home Screen is the Bundle *name* — this does *not* have to be unique 3. The iTunes entry for your app is the one that is searched for in the App Store, and is therefore the most important one for visibility, and must also be unique.
Re-read fubarx's response, he says what the bundle name is (actually it's the bundle identifier) in paragraph "1)".
Check out Magical Record. I'll post some code snippets later if you want. Super simple usage.
Why is swift 2 harder to work with core data than 1.2? I'm using it with magical record and its super easy. 
I never said it was harder to work with. I just said he was going to have a hard time finding information regarding Core Data with Swift 2, which is what he specifically asked for.
Hacking With Swift
var firstChar = Array(string)[0]
Thank you for the quick response! I tried your code, and I'm getting an error on the second line: "Missing argument label 'arrayLiteral:' in call." Am I doing something wrong?
This is better than my code. Mine wasn't tested in 2.0 and cryo's code makes use of String's new properties
It works! Thank you very much.
Don't use storyboards.
Might want to look into the Venmo iOS SDK https://github.com/venmo/venmo-ios-sdk
I am also new to coding and I have not started on my own application yet but I can say this. User experience is everything. Users don't generally care about how it was made. Some do but as long as it's organized and you know what's going on, I suggest do it. Just my opinion though. 
Probably not specifically addressing your issue but: IMO, a common issue keeping people from using storyboards are dealing with merge conflicts in version control. i.e. If you and I are both working on an app containing a single storyboard, then it is difficult for us to both make UI changes without conflicts. Because of this, I often break my application up into multiple storyboards. IMO, the best way to deal with an app that has a UITabBarController at the root of the app is: * Make a storyboard for each tab with the navigation controller as the storyboard's initialViewController. * Subclass UITabBarController, and set the tabs by initializing each navigationController from their respective storyboards. * Set the appDelegate so that your Subclassed UITableController is the window's rootViewController. I could probably dig up some sample code if necessary. Edit: Words
The reason is you can't append to an array using subscripts. Straight from Apple: https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html &gt; NOTE &gt; &gt; You can’t use subscript syntax to append a new item to the end of an array. But this works: var chapters:[[(String, String)]] = [] chapters.append([("adas", "asdas")]) let chapter = chapters[0][0] chapter.0
What did you use to install MagicalRecord? CocoaPods wasn't working for me, so I'd like to know of any alternatives. Thanks :)
[Bitfountain.io](https://www.bitfountain.io/) is a free website that has like 200+ videos on Swift. Specifically, their iOS 9 course just launched.
Yeah I used cocoapods. How did it not work for you?
Ah okay. Thank you.
Xcode can't seem to find the locations of the installed frameworks. I also couldn't install Magical Records w Cocoa Pods either so I guess the issue is w Pods (or Xcode). 
How come?
From what I have read, Swift 2 will run on the same systems as Swift 1. Anything above OS X Mavericks and iOS 7.
My understanding is that the app bundle contains the Swift 2 runtime libraries and such, so it can run on iOS 8. At the least, I can confirm my own Swift 2 code runs on my iPhone 5S running iOS 8.
Your understanding is correct. That's how Swift 1 works on iOS 7. I wonder when they'll stop bundling. 
I can't seem to get the uiview within the uiscrollview to scroll. Any ideas?
Thanks, great explanation, you've been really helpful. Unfortunately I explicitly need to construct a two-dimensional C array (`char**` in C, `UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;CChar&gt;&gt;` in Swift), so `NSArray` or `CFArray` wouldn't be much help. (Well, maybe `CFArray`, but I might as well go straight for your last suggestion of `UnsafeMutablePointer` anyway.) One thing I liked about `NSString` is that when you called `fileSystemRepresentation` or `UTF8String`, the generated buffer would survive until ARC destroyed the `NSString`. Fortunately this behavior carries over to Swift of course, so I've decided to just cast the `String`'s to `NSString`. The added benefit is that `NSString`'s `fileSystemRepresentation` returns `UnsafePointer&lt;CChar&gt;` directly, so no need for the closure. The final result works great... Can you confirm that I'm using the correct memory pattern for `UnsafeMutablePointer`? let arguments = ["echo", "foo", "bar"] let argv = UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;CChar&gt;&gt;.alloc(arguments.count + 1) var argi = 0 for argument in arguments { let arg = (argument as NSString).fileSystemRepresentation argv.advancedBy(argi++).initialize(unsafeBitCast(arg, UnsafeMutablePointer&lt;CChar&gt;.self)) } argv.advancedBy(argi).initialize(nil) posix_spawn(nil, "/bin/echo".fileSystemRepresentation(), nil, nil, argv, nil) argv.destroy() Notes: Had to use `unsafeBitCast` on the `UnsafePointer&lt;CChar&gt;` returned by `fileSystemRepresentation`, since `posix_spawn` accepts `char **` even though it doesn't perform any mutations. Also, the `argv` buffer must be nil-terminated, hence the addition.
&gt; The UnsafePointer&lt;Int8&gt; returned by fileSystemRepresentation and UTF8String is part of an autoreleased block. Oh, huh, thanks for the correction. Lucky for me I've always used this approach between autorelease drains. Let's assume I can't count on the safety of this, however. Since `fileSystemRepresentation ` is key (can't use UTF-8 thanks to the joys of HFS+ normalization, and to my knowledge there is no `NSStringEncoding` for that), I would need to stick to using my own storage. This is totally fine, especially since that nice `map()` trick you just showed me makes it a lot less cumbersome to iteratively free the items after the `posix_spawn` call. Edit: Just found `kCFStringEncodingMacHFS`, so that's nice.
1) Watch the WWDC 2015 Video - What's New in Swift 2) Watch the WWDC 2015 Video - What's New in Swift 3) Watch the WWDC 2015 Video - What's New in Swift (Not 100% sure if this question gets answered, but watch it anyway.) Seriously, if you want to develop for Apple's Plattform, read the Developer Documentation and Watch the WWDC Videos, most of time this will eliminate all your open questions.
The built-in multipeer has a limited number of direct connections. If you want wider communication, you need to handle that logic yourself. Think of how your computer communicates with Reddit. It's not talking directly to the server - it just knows the IP address of the web site. Your computer sends traffic, addressed to the web server, and it gets passed along from network device to router to router to router to trunk to router and so on, eventually making it to Reddit.com. Of course, rolling your own decentralized networking is not exactly easy. It's very difficult. What are you trying to get done?
Not trying to second guess you, there might be great reasons to use Core Data in your case, since I don't know your particular problem. But consider whether you actually need Core Data at all. I am saying this because as a iOS/OSX developer for several years I've found when working as a consultant that lots of people coming to the platform assume right away that they HAVE TO use Core Data for storage. That is not the case. Remember if you are coming from a web background, you are likely using a database system because you need to deal with lots of concurrent users. When you create an iOS app OTOH you are making a single user system. Thus unless you have lots of data, and most people don't you don't need Core Data. You can use NSKeyedArchiver and NSKeyedUnarchiver instead. You could even just store your data in JSON files and read those with NSJSONSerialization. These approaches are much simpler to understand conceptually, requires much less code and might actually perform better as well. NSKeyedArchiver also makes it much easier to deal with versioning, in case you need update your format.
Lifesaver! I've been looking for something like that!
this. so much this.
Are you using auto height cells? I had a very similar issue recently where scrolling down I had no issue, but when scrolling back up the cells would be jumpy and shift a lot. The solution was to cache the cell heights. I'm on my phone so otherwise I could give some code examples, but basically as the cells where populated and the height calculated I stored the height in a dictionary. So the next time heightforcellatrow got called I could easily check the dictionary for the cell height. Doing this fixed the issue completely. Just remember to clean up the height dictionary when you remove cells, etc. Good luck!
Thanks for the well put explanation, I see what you mean. Can you suggest any good tutorials/books about using autolayout and adding elements with code?
I'm gonna have to disagree - I work at an app development company with 70+ employees, building apps for some very big clients, and every single one of our projects uses storyboards now. It can dramatically decrease the time of creating UI. If you break them into smaller ones like TheNapman said, you'll be fine. They only get slow if you have too much in a single storyboard. Edit: as far as laying things out in code though, I highly recommend PureLayout. Let me know if you need help with that, feel free to send me a PM 
 I don't use autolayout at all, create all of your UI programmatically by setting the views frame to whatever suits your needs, e.g need a view to fill the top half its parent view? You can just do view.frame = CGRectMake(0, 0 ,parentview.frame.size.width, parentview.frame.size.height / 2) If you really want to use autolayout you can create constraints through code explained [here](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/AutoLayoutinCode/AutoLayoutinCode.html) in the Apple documentation, but there's also some frameworks that can help you out like [this one](https://github.com/marcbaldwin/AutoLayoutBuilder) 
What have you tried to do with NSUserDefaults? let defaults = NSUserDefaults.standardUserDefaults() if !defaults.boolForKey("hasShownTutorial") { defaults.setBool(true, forKey: "hasShownTutorial) // show tutorial }
Someone else told me a cache might be the best idea. The problem that I have is that I kept trying to do it but my code fell short. 
I tried to make it change the initial view controller by using this in that AppDelegate: func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool { // Override point for customization after application launch. let defaults = NSUserDefaults.standardUserDefaults() if !defaults.boolForKey("initialLaunch") { defaults.setBool(true, forKey: "initialLaunch") self.window = UIWindow(frame: UIScreen.mainScreen().bounds) let mainStoryboard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil) var exampleViewController: IntroductionViewController = mainStoryboard.instantiateViewControllerWithIdentifier("IntroductionViewController") as! IntroductionViewController self.window?.rootViewController = exampleViewController self.window?.makeKeyAndVisible() }else{ self.window = UIWindow(frame: UIScreen.mainScreen().bounds) let mainStoryboard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil) var exampleViewController: SecondViewController = mainStoryboard.instantiateViewControllerWithIdentifier("SecondViewController") as! SecondViewController self.window?.rootViewController = exampleViewController self.window?.makeKeyAndVisible() } 
 Yes, but I am not sure if my whole idea on using NSUserDefaults is correct. Should I try to change the initial view controllers once the button is clicked or there is another way on dismissing the tutorial on button click and not showing it on the next launch. 
No sorry. So I have 2 text fields on the same view controller. After typing 5 numbers on the first text field, I want it to jump to the second text field. I'm using this to call the second one, but I don't know how to set up the textField function to do this. self.textField2.becomeFirstResponder() 
I'd think you could something like this: Do { If (textfield1.text.count() &lt; 5) { //make the second text field active } } while (textfield1.text.count() &lt; 5) This is VERY pseudocode and I'm on mobile so I apologise for the lack of formatting and correct methods etc but basically you'd want to keep checking the text field for the magic 5 chars then make the second one active. The problem will be that this is not very efficient because you'd be constantly checking something but I guess unless your majorly worried about how optimised your code is you should be alright. Alternatively you could try something like this: http://stackoverflow.com/questions/28394933/how-do-i-check-when-a-text-field-changes-in-swift
+1, this book is great. I was in the same position as you and this book helped a ton.
Hey, did you ever figure this out? I'm currently dealing with this issue.
I'm working on a simple TODO app, mainly as an excuse to try out the whole "watch people code" thing. https://github.com/pepaslabs/TODOApp
Can't decide. Either a tip calculator , note taker, or weather app. Which one do you think the world needs now?
I was looking for beginner developers in my area to create a little group. Craigslist isnt really my thing and in Meetups, they aren't so beginners so I decided to create an app to find all developers and UI designers in the area and create groups. Because sometimes groups of passionate people become companies and it's my goal to create great things with great people. https://github.com/Inter-x/TheTeam (which is open source for all to contribute) 
I am collaborating on a task manager app but I also have ideas for personal projects like a planner/agenda focused on students during the school year.
I'm working on a visual programming language for iPad/iPhone [github](https://github.com/neoneye/GraphToy/tree/develop) [screenshots](https://twitter.com/neoneye/status/630505373192036352)
Not to be rude, they are all great ideas. But we already have all of those :/
Feel fee to work and give us your input! 
If you did this hard loop then the app wouldn't process events and would probably be terminated by the OS. 
iOS apps in particular don't offer many really new challenges beyond programming in general; the hardest parts are probably: * Figuring out what to build * Understanding people and how they interact with the things you build * Concurrent and/or asynchronous programming * Managing complexity, especially over long periods of time * Security and privacy * (For networked stuff only) Scalability
Oh, and anywhere you have to deal with real world laws, cultures, and languages. So anything related to correct international handling of dates, times, time zones, plurals, genders, names, addresses, or calendars is likely to be hell (though iOS has APIs that help handle many of these). It turns out that the real world is extraordinarily complicated and difficult to model with a computer, heh.
For me it's how often things change. If you don't keep up with new releases, API changes, betas, etc. you fall behind very quickly. 
Learning how to use Xcode and iTunes Connect without pulling your hair out.
I agree. You can spend a lot of thought and apply a lot of elegant designs to your "backend" code. Then come the views... Everything goes to shit because designers want to be unique and you're left hacking the system to death to get it to work. UI is soooo tedious. It's what always stops me from building my own apps. 
Apple's docs on size classes: https://developer.apple.com/library/ios/recipes/xcode_help-IB_adaptive_sizes/chapters/AboutAdaptiveSizeDesign.html However, the iPhones all have the same size class (except the 6+, which uses a different size class in landscape orientation), so you'll still have the same size class layout being used on the 4S/5/6
* Waiting for approval * Provisioning profiles
Oh, huh. I did the same and I'm still having the issue. Oh well. Thanks!
Ah, thank you! unfortunately I'm having an issue using MR with Cocoapods, not sure what the root problem is but it's not working. I appreciate the gist though, it's helpful :)
Is it in the app store? Didn't see a link from the mobile website
Do you have competition already in ios for this service?
Waiting for approval to then get rejected certainly sucks.
A little 'woosh' moment there ;)
There's plenty out there but it's probably buggy and not exactly what you need. 
Realizing the platform you are developing with is still dramatically evolving every year, and everything you know about might work differently on a new version of iOS or on a new device. So not only do you need to be fluent at developing on this platform, there's always a lot of catchup to be played here and there. Not necessarily a bad thing though.
Got it. Thanks for sharing.
Could you please show me how to implement that because I can't do it myself. Thanks.
I am sorry but I am on vacation now and I have only iPhone right now. I am sure someone will step in and write something for you. If not I suggest you to search tutorial or walk through by cocoapods.org and look how people integrates different tutorial components. Good luck
I have not checked your code, but I recommend using this excellent library: [SDWebImage](https://github.com/rs/SDWebImage) Usage example: [cell.imageView sd_setImageWithURL:[NSURL URLWithString:@"http://www.domain.com/path/to/image.jpg"]... 
In your getNewsImageForCell method, instead of using let cell = self.tableView.dequeueReusableCellWithIdentifier("Cell", forIndexPath:indexPath) as! UITableViewCell and dequeuing a new cell, you should use let cell = self.tableView.cellForRowAtIndexPath(indexPath) to get the already existing cell. 
This should help: http://stackoverflow.com/questions/24030348/how-to-create-a-button-programmatically
Yep, you need to change it to where the dismiss button action sets the NSUserDefaults "initialLaunch" value. Can you show the code you have for the dismiss button?
El Capitan has its quirks, like every beta software. My had a problem with updating itself: http://i.imgur.com/VZgAqmc.png (those are recently installed updates in Mac App Store)
Yup - mine did that too. Also this: [Imgur](http://i.imgur.com/5agIagu.png)
Bear in mind that an awful lot of what you learn for iOS works for OS X too (apart from needing to use the NSxxx versions of things rather than UIxxx - there are many differences, but there are more similarities, it seems). I'm writing for OS X but found the free (iTunes U) Stanford iOS / Swift course the most useful thing to get started. Also: http://www.raywenderlich.com/87002/getting-started-with-os-x-and-swift-tutorial-part-1 LLAP, curious hybrid
Id bet money this is whats going to fix your problem so don’t give up on making it work. Heres a little more detail that might help you. You’ll need an empty dictionary. The reason I used a dictionary is because the data for each of my cells has a unique id. I use that id as the key for each of the entries in the dictionary so its easy to look up and check if it exists in the dictionary. Populate your cell height dictionary in **willDisplayCell**. This is because the cell has been layed out and sized at this point. This is where you can get the true height. You can get the height of the cell with something like *cell.frame.sized.height* Then just check the dictionary to see if you’ve added its height and if not, then add it. In **estimatedHeightForRowAtIndexPath** return the height of the cell from the height dictionary. If you are still having trouble you should probably post a gist of your implementation.
Absolutely, balance is key. If there's a better solution than your own and its vital to the app then use it. If it's not complicated or just quick to do, write it yourself. The whole point of these libraries is to save others time writing code. You're able to focus on other aspects of your app and make it better with this saved time.
Yeah, it appears most people just want to use social media &amp; search apps (and sometimes games). A real challenge for iOS developers.
That makes sense. I've seen typealias used a lot in my Swift tutorial, especially with regards to functions. Now I see why a little more clearly. Thanks! :)
Thanks, I'll give that a shot!
OK, you are setting initialLaunch to false with the dismiss button, and setting it to true in the first bit of code. Presumably you want the IntroductionViewController to always display while initialLaunch is true (which is, until they have pressed the dismiss button). The problem comes in with the fact that, if "initialLaunch" has not been set, it will return false, so I would change it to something along the flow of: * Change the "initialLaunch" to be "hasDisplayedIntroduction" * Change the if statement in the first bit of code to: &gt; if !defaults.boolForKey("hasDisplayedIntroduction") { * Delete the defaults.setBool in the first bit of code as well * When the dismiss button is press, defaults sets hasDisplayedIntroduction to true The reason for this is that, on a fresh launch, hasDisplayedIntroduction will be false, so it will display the IntroductionViewController to the user. That works as well such that, until the user presses the dismiss button and hasDisplayedIntroduction is set to true, it will continue to display the IntroductionViewController. Your code would look somewhat like this (ignoring the first method name, I'm not sure exactly where you have it so I just threw it into a function) https://gist.github.com/tenpaiyomi/6ee82098c0a478888c7c
my understanding is that it violates Apple's terms of service. damn. that's pretty disappointing. I was hoping I could develop iOS apps on a linux box by the end of the year.
If your web server is a Mac, you could do it right now. Otherwise, yes, Apple have said they'll support a Linux build of Swift which you could use on a Linux back end.
relevant: https://www.reddit.com/r/swift/comments/3g1ylw/swift_for_the_web/
So I could essentially use the same code and storyboard in my Xcode project and port it to a web app, which would include Javascript, HTML, CSS if I am incorporating the technology to the website? 
No
Thanks for the help. I think that answers my question. I guess I was trying to be C-like by just up-casting one of the operands to force the compiler to do the floating-point division. I can cast both of them.
This is a bit off topic, but I have an idea for a discussion technology. I want to make an iOS app using Swift, but I also want to bring this same technology to a web version. Would it make sense to make two separate versions with two separate technologies, or use something like React Native?
Wouldn't a CollectionView fit better than a TableView for this functionality?
Someone just told me the answer to this recently. I believe that all of the images are loaded at one time and are "stacked" over each other. so that as you slide one away, you are not loading another, but merely removing the slide of the first image that was covering the slide of the second (and subsequent) slides. I hope it helps
Great! Did caching the heights fix it or was there another issue?
Thank you! going through the tutorial now
Oh I think I wasn't clear on what I was asking. I'm asking how to view the "slide show" of images when you tap the tinder cards. To view more images of that one person.
I was able to accomplish this with a separate UIViewController with a UIScrollView and Page Controller hooked up with auto layout. But I would like it to work in a static tableviewcell instead except storyboard won't let me hook it up to the tableviewcell class I have. Actually, maybe I need to hook it up to the tableviewcontroller...
As a user of the iPod 5 which is slow, glitch, and outdated, I can confirm that it's stacked, because sometimes the z of the picture doesn't correspond to the z of the stack.
It did. That was the main issue. 
Thanks for writing! Binary Search Trees fit the bill! Also I was looking at storing these "strings" using core data for scalability.. I will try to experiment and will update this thread with code. 
I'm not sure why but if you use the short-hand if it works. [1,2,3,4,5].map() { $0 % 2 == 0 ? $0/2 : $0 } Your second line can also be shortened to just digit in 
What you're looking for, data structure wise, is a [Trie](https://en.wikipedia.org/wiki/Trie). It might be overkill if you're only dealing with 100 elements, but it's what's almost always used for the "completions" operation you're looking for. I've done my own implementation [here](https://github.com/oisdk/SwiftTrie), but rolling your own isn't too difficult.
The last two values being zero might mean that the data does not contain doubles (with 8 bytes), but Floats (4 bytes each)? The data bytes also indicate this, they contain only 14 bytes (which is kinda weird, cause that's not a multiple of 4 or 8). Edit: Using little endian encoding, the first four bytes in your data are 7.80387831 when interpreted as a float, which might be the type of value you expect?
you can watch them on the wwdc app on your iOS device 
Gonna link HN here: https://news.ycombinator.com/item?id=9950895 Take away: tries are a very nice data structure for this, but using a sorted array + binary search is supposedly faster in many cases.
With 100 elements it will look completely realtime, that should be doable in a few milliseconds. If the dataset isn't gigantic and the algorithms used are ok, this should be easily fast enough to do on the main thread, too. (In general though: if you implement something that takes a while to do, don't block the main thread).
I'm going to test this on the watch to see how the performance goes...
Look into NSDate, NSCalendar, and NSDateComponents. NSDate is a class that represents points in time; a NSCalendar in combination with NSDateComponents allows you to decompose a date into it's components like days, minutes, seconds, etc. I'd recommend reading Apple's docs.
That's not what inline means. What you're doing when you use a higher-order function like `map` is passing a function as an argument. You could define the function elsewhere, and then pass by name. Or, you can define the function using closure syntax in-place. Inline means an in-place function, in this case.
Sweet, thanks for the response! I completely agree with the teach a man to fish sentiment. 
Awesome. I'm just personally curious about the watch. I have the beta on mine. Wanna send over the code you used and I'll run some metrics? (I could write it myself, but who knows what subtle assignments might differ. )
There's a very popular extension called TimeAgo which does exactly what you're asking. Apparently it's part of another project called DateTools now, take a look https://github.com/MatthewYork/DateTools You could write it yourself, but why reinvent the wheel?
I'm about to release a beta version which should fix the issue you are having. If you would like to be included, please PM me an email address to send the invite to.
I'm using a two week free trial from treehouse. It's challenging but has great video tutorials and quizzes. I needed something to push me. 
Sorry not in Swift, but found that just quickly. You just paginate options and check by offset which is selected. Also this is a good resource: http://www.raywenderlich.com/76436/use-uiscrollview-scroll-zoom-content-swift
I highly suggest checking out this Carousel Swift project on GitHub. I've been trying to building a horizontal scroll view as well. The Swift project in this repo need sa little work to compile though check out the comments for some of the solutions. https://github.com/nicklockwood/iCarousel
Yes. Why is this so hard for people to grasp? You want to develop for an Apple platform, you use an Apple platform. Just like if you wanted to develop for an Xbox, you use Windows. It's not rocket science.
I understand. I just didn't want to have to admit that I was going to have to shell out $500 minimum to do it. I was hoping that the shift to open source might be a way to get around it.
As of April 15th you can only get access to the list of friends who have already installed your app. No workarounds, no exceptions. The changes to ~~Open~~ closed graph completely broke one of my apps. Looks like it has broken your idea too.
I don't think you want the `locations` set. Remove that line.
It seems the author has discovered [HLists](https://github.com/typelift/Swiftz/blob/swift-develop/Swiftz/HList.swift). I'm not sure knowing the length of a tuple at compile time qualifies one to say they have even the shade of dependent types, but rather (a limited form of) structural typing. Lifting operations to the type level is cool, but it isn't *that* cool -at least in Swift it isn't.
first of all - congratulations. little remark for your future screenshots: you can press CMD + S to make screenshots without cutting out your screen as you did in your blogpost. The saved images will be saved on the desktop. keep up the work 
Looks cool but layout breaks down after device/screen rotation.