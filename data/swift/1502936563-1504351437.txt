You totally can. There's a few different server side projects out there. There's [Kitura](https://github.com/IBM-Swift/Kitura), [Perfect](https://github.com/PerfectlySoft/Perfect), and [Vapor](https://github.com/vapor/vapor)
I do know about the push method but I would like to keep the navigation of the app so as the user clicks back on the child they go to settings and from settings back to the masterview controller
grazie!
You can push the settings VC and then the next VC immediately after that. The first method call you can set animation to false. The second one to true.
Kitura might be the future for that. https://github.com/IBM-Swift/Kitura
So would I instantiate the vc set a property of it to true and Then transition. And in that vc in view did appear check the property and do the transition?
Mine installed as Xcode-beta.app, and the regular version remained as Xcode.app
Thanks for your reply. So keep searching for an audience that aligns with your own ideals of good design, keeping you motivated this way.
Isn't everything useful to a degree? Even the bad stuff? Haven't you used products that were obviously crap and flawed, but somehow where "good enough" for the problem? Or repurposed a tool for another job it wasn't designated to solve? What I meant is that people who aren't very design conscious, or care about aesthetics, might purchase something based on the highest amount of features or functionality. Not features or capabilities they need right now, but to set themselves up for the future, or a situation where they might need it. They might prefer a tweaked out DJ turntable for listening to music over a Braun turntable designed for music listeners, for example. 
Starting iOS development 
You can do that. I would do it like this inside your master view controller: let settingsVC = SettingsViewController() let otherVC = OtherViewController() navigationController?.pushViewController(settingsVC, animated: false) navigationController?.pushViewController(otherVC, animated: true) Another option is: navigationController?.viewControllers.append(settingsVC) navigationController?.pushViewController(otherVC, animated: true) Try them both out, see what you like best. Warning: Animations for these push operations might be a bit off. Edit: An elegant solution that does not have animation bugs: let settingsVC = SettingsViewController() let otherVC = OtherViewController() let insertionPoint = navigationController?.viewControllers.count navigationController?.pushViewController(otherVC, animated: true) navigationController?.viewControllers.insert(settingsVC, at: insertionPoint!)
I guess that happens sometimes, but at least .NET is now open source and you can read the source if you want to know for sure. Mac is closed source.
I don't know why people are down voting you, since if you're from iOS/macOS you're in a completely different mindset. Swift is a brilliant language for the web, it's type-safe, performant and it's very readable. All of these things are uncommon in the normal world of the web. Type safety is important to prevent confusion and thus bugs. Readability helps here, performing more bugs. Readability comes using named parameters for example. The code is clean and simple, meaning it's still a language that lends itself to new developers like the current web languages. And the future of the web is solely based on performance. You're not waiting &gt;500ms for a web page if a competitor makes you feel less annoyed. And processing time costs money on the web. So faster processing time is better for everyone involved. Because Swift is compiled and generally well optimized, you can achieve really insane benchmarks. I created a webserver that processes like C (using pointers) but uses COW mechanics that C doesn't have. The combination of both made my web server faster than any other I ran on my system. Instead of having a web server feel the heat of WRK's many requests, WRK was having trouble keeping up with the web server more so than the other way around.
Or you are not using its properties and hugging/compression priorities correctly. Once you mastered it, it will be a walk in the park :)
Thanks, I'll have a look at this website. I wanted to avoid explicitly setting size so the UI stretches according to the screen size and orientation. I followed the instructions from the Stanford course to set the constraints and stack views, and it was recommended there to have a look at content hugging priority to adjust it further.
Https://github.com/iledzka/Calculator I didn't set any constraints programmatically though. Feel free to criticise my code.:)
Hi! I learned alot from this tutorial. I can program in swift before without utilizing the strengths of it. Hope you learn from this too. https://www.youtube.com/watch?v=ilQ-tq772VI&amp;list=PLPA-ayBrweUz32NSgNZdl0_QISw-f12Ai 
Thanks 
Ok I'll try this out
Seconded. Vapor is a great tool for backend development, but not for building web clients (the front end/actual websites). It does include a templating tool called Leaf, but it's no alternative to real web development frameworks. I've heard Ember.js is a great web development framework to get into. Personally, my websites are simple enough that I write all my HTML, CSS, and JavaScript myself. But if you want to be a real web developer in today's environment, you'll need to learn a something like Ember.js. And then you can serve the created website with Vapor. 
I've developed iOS but never heard of Swift for web and this is absolutely fascinating
For a sparetime project (not yet production), I use Perfect. I like it. I develop on macOS and sometimes deploy it to virtualmachine running Linux.
We've just benchmarked my HTTP parser against the C ones. It's 50% more performant to use mine from Swift. 50K requests/sec versus 75K requests/sec. I've also written a MongoDB driver (and am working on SQL) for Swift. The performance cost of MongoDB (using MongoKitten) is almost non existing. The requests/second drop to 72-74k and the only significant change is a slight (1-2ms) increase of response delay. From 700 microseconds to 1.7ms. This really makes Swift attractive for big businesses and start-ups alike.
As someone that use to develop web apps (C++, AppleScript...yes AppleScript, perl, ASP, ASP.NET, PHP) the more I play with Swift the more I wish there was a full fledged web environment on par with everything else out there. Something that came with Apache as a default. The language is just beautiful and what I had to do to sanitize code in all these others...is a default. It isn't a hack that changes from version to version. Beyond this, it would encourage me to write libraries that could be used in both iOS and the web. I do a lot of social science and machine intelligence kinds of things (my background is a social science) and I use to have to write software that would work in the field without the internet but there was a lot that I'd just do client server type apps where I let the server do all the heavy lifting. Being able to have the client do work if a server is unavailable and not having to rewrite the code in a different language and HOPE there was nothing incompatible -- or being able to use the validation libraries that the server already does -- but on the client where batches could be uploaded and 90% of the processing is done before it hits it so I could focus on the work that I can't let out of a data center where someone could potentially decompile it and figure out the business logic (this happened with an app I put out years ago and a competitor at another university replicated our work). I want this so I can do safe / secure developement on multiple platforms including the web...
In objective-C it made sense to use delegates a lot because you could fire off all of these events to the delegate - and objective-C didn't require you to implement the messages you were sent, so any you didn't care abour were safely ignored. How does swift handle that side of delegates? Do you need to implement all the methods? Won't it do a dummy-spit if the method doesn't exist? 
The way I like to do a similar pattern in Swift is trying to cast the target object to a protocol and then calling the method if it successfully casts. It makes sense to have a protocol for each kind of semantic _thing_ you can have rather than one dustbin style delegate, especially as you can't have optional methods in Swift protocols.
Apple defines them as follows: * `CFBundleShortVersionString` is public, user-visible version, for example, `1.0.2`. Should be two or three dot-separated numbers that conform semantic versioning. * `CFBundleVersion` is internal version for developer's own use. Docs say it should also be dot-separated numbers, but some devs and even Apple itself does not always follow that. It seems any arbitrary string is accepted. Some simply use build number (e.g. `3305`), some use mysterious digits+letters codes (e.g. `16G29`), Safari uses dot-separated numbers (e.g. `12603.3.8`). App Store and Quick Preview in Finder only display the short version to the user. The build number (`CFBundleVersion`) is not displayed. The build number is not supposed to be reset between versions. Submissions via iTunesConnect require `CFBundleVersion` to be strictly increasing, for example. The standard About window in macOS displays versions as "Version &lt;CFBundleShortVersionString&gt; (&lt;CFBundleVersion&gt;)", for example: "Version 10.1.2 (12603.3.8)". Custom About windows in most software tend to copy that. The second most popular is to display build number as fourth component: "&lt;CFBundleShortVersionString&gt;.&lt;CFBundleVersion&gt;", for example "1.0.2.3305". EDIT: did some more research on `CFBundleVersion` and added clarifications
Obj-C and Swift are not that dissimilar. You don't need to implement all the methods. It's the same as in Obj-C. Any message that are sent and aren't actively handled are safely ignored.
Don't do that. Avoid casting as much as you can. Use protocol extension instead of you want optional methods.
That's not true. Objective-C protocols make frequent use of optional methods, but the callers need to check if the delegate respondsToSelector: before invoking the method. Sending a message to a nil object is fine, and returns nil, but invoking an unimplemented selector will crash the program.
There's a static site generator written in Swift called Spelt, which publishes to S3. It's on the Mac app store as a product, but also open source on Github. 
Yeah, I'm writing a web app with the backend in Kitura exposing a JSON API, and then the front end is written separately in Angular. (And when I'm done, I can write a native iOS front end also in Swift and reuse the server-side model code.)
Make a property enum TableState: Int{ case sports = 0 case news = 1 case traffic = 2 } var currentTopic:TableState{ return TableState(rawValue:segmentedControl.selectedSegmentIndex) } 
For the backend, yes. For the frontend, no.
Sounds cool :)
Am I not now just switching on `currentTopic` instead of `segmentedControl.selectedSegmentIndex`?
It's more then that, Please show what you're switching on and I can show you more techniques to better factor that. 
 let table1Labels = ["L1", "L2"] let table2Numbers = [0, 1, 2, 3, 4] let segmentedControl = UISegmentedControl(items: ["Table 1", "Table 2"]) func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { switch segmentedControl.selectedSegmentIndex { case 0: return table1Labels.count case 1: return table2Numbers.count } } In every tableView method, I would then have to put the same switch. It gets more complicated as the two tables differ more.
&gt; Don't do that. Avoid casting as much as you can. Why not? Surely if he is following the pattern here (is x a foo, in which case call some method we know x's implement) the intent is crystal clear. &gt; Use protocol extension instead of you want optional methods. More info please? 
You and the spacemonkey guy seem to be giving opposite answers?
[https://github.com/njdehoog/Spelt](https://github.com/njdehoog/Spelt)
you could simply mark the methods that aren't required as optional if that is your intent?
This is wrong. Sending a message to an instance which doesn’t have an implementation for that message will cause an NSInvalidArgumentException to be thrown complaining about an unrecognized selector being sent to the instance.
OP (likeaspacemonkey) is incorrect. Messaging nil is always safe (in that it won’t crash your program) but messaging an instance that doesn’t implement the selector you are sending will throw an exception.
I expect Swift to be ready for all your use cases within 4 months. 2018 and forward, Swift will be more than ready for the server. I'll let you know :)
RemindMe! 4 Months
I will be messaging you on [**2017-12-17 19:39:47 UTC**](http://www.wolframalpha.com/input/?i=2017-12-17 19:39:47 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/swift/comments/6u6tty/can_you_write_web_applications_with_swift/dlrlbi4) [**2 OTHERS CLICKED THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/swift/comments/6u6tty/can_you_write_web_applications_with_swift/dlrlbi4]%0A%0ARemindMe! 4 Months) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! dlrlc5m) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
I hope so! I'm thinking of making a change in my world and getting back to app development...even if just get back to managing a team, I'd like to be able to get folks on board with something that I can tell is secure. 
We are working on a cloud application platform you can run everywhere. For more information visit [https://www.appudo.com](https://www.appudo.com).
so something like this: 2.1.7 build 2174 (beta 1) 2.1.7 build 2175 (beta 2) 2.1.7 build 2176 (production release) 2.1.8 build 2180 (beta 1) 2.1.8 build 2181 (beta 2) 2.1.8 build 2182 (production release)
I have reset my build numbers for each `CFBundleShortVersionString` in the past for iOS apps and have had no problem. Whether that is the **correct**, it may not be. So do you do something like: 1.0.0 build 0001 (beta 1) 1.0.0 build 0002 (beta 2) 1.0.0 build 0003 (beta 3) 1.0.0 build 0004 (production release) 1.0.1 build 0005 (beta 1) 1.0.1 build 0006 (beta 2) 1.0.1 build 0007 (beta 3) Edit: fixed typo mentioned by u/hamstergene
I'm at a small company so it's not that granular. More like I create a new feature and push out v2.0.0 b2000. Someone notices something is not quite right, I push out v2.0.0 b2001. They sign it off and I submit that to release. After production something needs fixing urgently, I push v2.0.1 b2010 to testers etc. 
Thanks! that's really helpful. Take a look at [SwiftVer](https://github.com/brightdigit/swiftver) and let me know if it's something which could be helpful or what it might be missing.
OH, if that's what you're doing, I don't think the enum helps you at all. I thought this was more complex than a simple table. solution1: make 2 different data sources. Solution2: let tableInfo = [[ "L1","L2"], [ 0, 1, 2, 3]] func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return tableInfo[section].count } 
&gt; The purpose of my question was mainly to find out other people's expectations in Swift, so I can kind of see where this is going: no one cares to browse source code any more. Maybe something like Jazzy is in my future, if it's compatible with Apple's Markup. Yep, that's exactly the case. Headers have, across the board, fallen out of favour, for several reasons: - They tediously repeat what the compiler could generate itself - People want more interactive docs (e.g. with "see also" links) - They're really easy to mess up (e.g. writing code in the header by accident, causing it to waste compile time by needing to be recompiled in every compilation unit that includes it) Here are some examples of what the Swift community is used to: - http://api.vapor.codes - https://ibm-swift.github.io/Kitura/ - http://perfect.org/docs/ - http://cocoadocs.org/docsets/Alamofire/1.2.3/ 
The problem with having separate protocol for "each semantic thing" is that you still want to have additional, optional methods. Splitting delegate methods into multiple protocols doesn't solve the problem, just look at the UIScrollViewDelegate protocol, how do you split that into different protocols? /u/Instantz's idea is that you have just one delegate protocol that includes all methods, including optional ones. That way, you'll just have a `weak var delegate: DelegateProtocol?` in your delegating class, and you don't have to cast it, because it already has a fixed type. But then you have the problem that the delegate needs to implement all methods in the protocol, but we want some to be optional. You can solve this issue by providing a default implementation in an extension. For example, if you have a protocol `Foo` requiring the methods `bar` and `baz`, but `baz` should be optional (and do nothing by default), you can do `extension Foo { func baz() {} }`. Now, classes that conform to `Foo` don't need to implement `baz`, because there is a default implementation, but they can override it if needed. This way, the delegating class can safely call all methods on its delegate (just call `delegate?.baz()`), without checking if a certain method is implemented through the runtime (the way it works in Obj-C world).
You can provide default implementations for protocol methods in extensions; with that you effectively get optional methods in protocols in pure Swift.
Edit: I've noticed that there is no direct reply for the default Swift pattern for optional methods, so here it is: protocol DelegateProtocol { func foo() func bar() // &lt;- this one should be optional } extension DelegateProtocol { func bar { /* Do nothing here, or provide default implementation */ } } Any class that implements `DelegateProtocol` can (but does not need to) provide an implementation for `bar` - it is, effectively, an optional method of the protocol. Implementing `foo` is required, of course. The delegating class can call optional methods like any other method in the protocol (safely and without casting), because it is just a normal method in the protocol, it just happens to have a default implementation. Another possible pattern I've seen sometimes used is to use closures for call-backs instead of delegate protocols. Eg., instead of having `protocol DelegateProtocol { func foo(); func bar() }`, and a delegating class that has a property `weak var delegate: DelegateProtocol?`, you have a delegating class with a property for each thing that used to be a delegate method: class DelegatingObject { var fooHappened: (()-&gt;())? var barHappend: (()-&gt;())? } Then, the class that was the delegate just sets the callbacks, instead of implementing the delegate protocol, eg. `theDelegatingObject.fooHappened = { [weak self] in self?.doWhatever() }` Doing delegation this way has advantages / disadvantages in comparison to the standard delegate-protocol way. Eg., you can't really force the delegate to set a callback, ie. all callbacks are optional. Memory management is harder for the delegate, because you have to be super careful to not create reference cycles. On the other hand, it doesn't require any protocols, so it's automatically ensured that only the delegating class can call the delegate methods. Finally, this approach is a bit more flexible - different objects can handle different callbacks. You don't need a single delegate object. 
You do need to implement all methods of a Swift protocol. The only time you don't is if it's a Objective-C `@objc` declared protocol. I hope in the future they will allow Swift protocols to be optional, but for now, they can't.
~~&gt; func foo()~~ ~~&gt; func bar() // &lt;- this one should be optional~~ ~~But if they have exactly the same syntax how do you know it's optional?~~ Nevermind. I get it now, people are using the word 'optional' for protocol methods in a completely different way than is meant elsewhere in Swift, which was immensely confusing. &gt;-( There's no syntax for it because it's not real.
Is this AM exclusive? I only use Spotify but if you’d look to add this in the future it’d be something I’d be interested in!
Could you provide an example of that syntax? Searching on Swift and optional provides ... many ... results, none of which seem to have any bearing on this topic :D
https://stackoverflow.com/questions/24032754/how-to-define-optional-methods-in-swift-protocol
That is really unintuitive. Sending a bogus message to nil is fine, but sending a bogus message to a real object isn't? Yikes.
I feel like this title buries the lead, this is Lattner's suggestion.
Not possible
Short answer: if your delegate protocol is declared @objc, then it supports optional protocol requirements. True swift protocols do not support this.
Almost; every build gets a unique number unconditionally, so the last two lines should say build 6 and 7.
Yes! Fixed. Take a look at [SwiftVer](https://github.com/brightdigit/swiftver) and let me know if it's something which could be helpful or what it might be missing.
There is an app currently on the app store called Pocket Points, where you get points for having your phone locked in class. You open the main view and it says "lock your iphone". You hit the lock button on your phone and the screen shuts off. A notification pops up that says "you are currently earning points". When you unlock your phone, it brings you back up to the view that you locked your phone from, and it tells you how many points you earned based on how long your phone was locked. There's no way I could replicate this?
That's interesting. Thanks for taking the time to figure it all out and make it work. But Carthage sure seems a lot easier.
Great explanation! 
Try listening for the `UIApplicationProtectedDataWillBecomeUnavailable` notification. You can set a protection level on files that your app writes to disk. `NSFileProtectionComplete` and `NSFileProtectionCompleteUnlessOpen` will encrypt your files unless the device is unlocked. The `UIApplicationProtectedDataWillBecomeUnavailable` notification is sent when your protected files are about to become unreadable because the device has been locked.
I would assume that observing the events in your app delegate could yield similar results. You act when the app becomes inactive, and then once again when it becomes active again. 
Giving this a try, thanks!
Wait for swift 4 and use the new key value observers
Advanced iOS Bootcamp. Essentials seems like a starter course, which was basically your internship. You're gonna need to master your debugging and optimization skills if you really want to get anywhere in your career. Honestly, I just bought their books and taught myself. Save the 5k into an investment account.
You declared `withVotes` as a `Bool` in your function. It should be declared as an array of `Bool`s, like this: `[Bool]`. Now you can pass in your `shouldInstallCoffeeVendingMachineVotes` variable. In your function you should also remove the brackets in the for-loop, since `withVotes` will already be an array. So, something like this: &gt; func voteCounter(forIssue: String, withVotes: [Bool]) -&gt; String { &gt; var voteYes = 0 &gt; var voteNo = 0 &gt; for vote in withVotes { &gt; if vote == true { &gt; voteYes += 1 &gt; } else { &gt; voteNo += 1 &gt; } &gt; } &gt; let newSentence: String = "\(forIssue) \(voteYes) Tes, \(voteNo) No." &gt; return newSentence &gt; } Edit: idk how to format this on reddit
I completely understand what you're saying and now it makes sense! func voteCounter(forIssue: String, withVotes: [Bool]) -&gt; String { var voteYes = 0 var voteNo = 0 for theVote in [withVotes] { if theVote == [true] { voteYes += 1 } else { voteNo += 1 } } let newSentence:String = "\(forIssue) \(voteYes) Yes, \(voteNo) No." return newSentence } This works! I now understand how those types work.
You shouldn't iterate over `[withVotes]` in your for-loop, just `withVotes` since it's already an array. Then you can just check `if theVote == true` (or just `if theVote`). What you're doing is different, you're iterating over an array of an array of `Bool`, which will be only one item long and it will not give you the results you want.
Your function parameter ‘withVotes: Bool’ should be ‘withVotes: [Bool]’. The data you pass into your parameter must be the same as what the parameter is expecting. In this case, you need to pass an array of Bool, not one Bool at a time. And, your for loop should be ‘for vote in withVotes’ (not ‘for vote in [withVotes]) because withVotes is already defined as an array and the [] are not necessary. Lastly, you could make it a little more readable if you change the parameter in your function to ‘withVotes votes: [Bool]’ so that your for loop reads better as ‘for vote in votes’. The ‘withVotes’ is used when you call the function, which reads nicely, but the extra name in the parameter (votes) is used within the function, so your for loops reads nicely as well.
Oh yeah... good point. I thought I was going to have to build some kind of looping mechanism but removing the arrays inside of the loop fixed that.
[Here's a more near-term proposal for async/await](https://gist.github.com/lattner/429b9070918248274f25b714dcfc7619) (also partially by Chris Lattner), since the big-picture concurrency story is going to take several years. 
think of it like this: sending a message to nil is like shouting into the void, nothing is there so the message floats away harmlessly. sending an unknown message to a real object is like shouting at a stranger, there's a pretty good chance they'll get upset 
You can't override default implementations though. 
But you can't override default implementations. 
What is the argument in favor of async/await vs a goroutines/channels model? I'm not deeply familiar with either aside from reading articles, it's mainly for my curiosity.
Of course you can. Try it. (You don't need the `override` keyword, if that's what you mean).
That is a feature to support Objective-C style delegate protocols, but it isn't very "Swifty". 
You don't need to implement all methods if you provide default implementations. I don't think Swift will ever support optional methods in protocols the way Obj-C did, simply because there's no need. 
It's just that 90% of the syntax-B&amp;D/hoops they are forcing us to jump through seem predicated around this notion that nil objects are super dangerous and are the worst thing ever, so finding them being utterly cavalier about it like this is jarring.
What do you feel are the minimum requirements for a framework like Vapor to be mature to your standards? It would be really useful/helpful to know for me
The manifesto examines both.
You're right... I got about halfway when I wrote that question. Thanks &gt;_&gt;
It's depended on how the date is being used. Show us a snippet of the code where you are consuming the date string. 
I'm confused- is there some sort of data persistence or server involved? 
You'd really need to specify more detail, but without knowing anything about what you're working with, can't you add a new property of type Date which is computed from the current date property using DateFormatter.date(from:) (with the appropriate style set) and then do your ordering based on that? **edit:** Here's a real stupid example: class Dumb { var date: String = "" } extension Dumb { var objDate: Date { get { let df = DateFormatter(); df.dateStyle = .short; return df.date(from: self.date)! } } } var obj = Dumb() obj.date = "01/01/1970" print(obj.objDate) // prints "1970-01-01 06:00:00 +0000\n"
What I don't like about swift is it pulls in a lot of unicode crap by default. (like some unicode conversion library) on linux. Adds to startup and mem costs. IMHO a systems language should be byte only and only add overhead when you request it. Now maybe there are language tricks to make your own classes from string literals but it seems like it's just not a priority of the ecosystem / toolchain. I want to see something that has less overhead and baggage than a c program does. It's also concerning they are still changing the memory / safety model, e.g. with inout and aliasing. Basically - it still hasn't stabilized. The changes look possibly good, but a systems language I want to use has to be both good AND STABLE (e.g. old), to make sure the kinks are worked out, unfortunately. Well, at least my kids might be able to use it! It's also a bummer that there are a lot of traps that exit the entire process instead of raising an exception (cough error) but that could be worked around. Basically, I'm just waiting for other companies like MSFT or goog to get on board - and standardize it like c++ - I don't want to have it be controlled by a single vendor. Really losing patience with MSFT I'm sure they'll do their own NIH language soon.
You're looking for the `reloadData()` method, I believe.
Wrap your different element types into enum with associated values: enum TableData { case label(String) case number(Int) } let labelData = table1Labels.map(TableData.label) You will need to unwrap them with switch only in cellForRow: switch data[indexPath.row] { case .label(let label): ... case .number(let number): ... }
Probably too advanced but you can rewrite this whole thing like this: &gt; var shouldInstallCoffeeVendingMachineVotes: [Bool] = { &gt; var votes = [Bool]() &gt; &gt; (0...100).forEach { _ in votes.append(true) } &gt; (0...78).forEach { _ in votes.append(false) } &gt; &gt; return votes &gt; }() &gt; func voteCounter(for issue: String, with votes: [Bool]) -&gt; String { return "\(issue): \(votes.filter { $0 }.count) voted yes, \(votes.filter { !$0 }.count) voted no." }
If I ever meet you I'm buy you a round.... Thanks a lot that worked first time 
Glad to hear it's fixed! Drinks are nice, but it's probably more helpful for your Swift career to buy [one of my many books on iOS development](https://www.hackingwithswift.com/store) ;)
I'll have to have a look at them to be honest. I have actually used your website a lot. For someone who's done a lot of Java in University and is now a sole developer for a NHS startup, what book would you recommend? I understand a lot of programming concepts, just struggling with swifts quirks or mobile UI? 
You'd do best to work your way through Hacking with Swift, either the free version online or the premium pack – it teaches you a huge range of iOS basics, and by the end of it you should have a solid grasp of where to go in the future. If you're looking for something more advanced, try Pro Swift.
I will look into it. Just my problem is I found all the books are either too easy and for complete beginners or too difficult as thy expect you to have 5 years worth of coding experience. Also keep up the good work - The free version has a few references in my code :) 
and if you only want to reload a specific cell you can use tableView.reloadRows(...) I really like the animation that it uses to help notify the user that something has updated.
Bravo for getting half-way, that *manifesto* is way too long
If you ever want to consider Swift and iOS professionally, I can at least vouch for Pro Swift and his interview + question book. Plenty of interviews expect Pro Swift level competency and often the software interview puzzles I was challenged with can be a combination of some of the easier questions (which can still be tricky) to more. Helped me to get up to speed that much faster.
That's what it does.
Honestly it answered a ton of my questions about the concurrency model they've been talking about for a long time. Definitely worth the read.
I use Apple Music all the time, I will definitely use it
Do you happen to have the link to that video? Or the title. Thanks!
Don't forget your super.viewWillAppear() too!
Literally easily able to be googled and first search has the answer 
Just requested an invite. App looks cool also loved your website. Would live to try the app
Make sure you run on main.
Is creating a new view controller specifically for the tutorial an option? Otherwise I think a set of views that are hidden by default and only visible on first run would be the option to go.
Yeah, tried using a uiview in storyboard but it doesn't play well with a tableview, do you mean creating another view controller? but how do I present it where it doesn't take the full screen and kind of floats above the view? tried searching google but couldn't find the right keywords 
A protocol requirement with a default implementation is 'overridable.' A protocol extension method that doesn't match a corresponding requirement is non-overridable (i.e. it's statically dispatched to the extension implementation if you're calling from a value whose static type is an instance of the protocol).
One way to do it is to put your view inside a modal view controller. Make the background of the modal view controller's content view transparent. Make your view wholly or partially opaque. Use constraints to position your opaque view at the desired location within the view controller. Create a segue to the new view controller of Kind: Present Modally with Presentation: Over Current Context. Now when you trigger the segue, the modal view controller will be presented, but because it is over current context the previous view controller doesn't get wiped out, and will be visible 'behind' the modal wherever the modal is partially or wholly transparent. You can fiddle with the transition if you want something other than the default.
Is this only configured for use with English? Edit: Good idea for a library, though. The expanded code for NSLinguisticTagger etc. is a nightmare to behold.
Beginner here! Currently doing playgrounds on my iPad and have always wanted to do My own apps, games etc. why didn't I start program earlier... QUESTION: any recommendations on beginner programming courses/guides etc?
Adding new features to [math infinite problems](https://itunes.apple.com/us/app/math-infinite-problems/id1244547440?ls=1&amp;mt=8.), such as, the users can earn a trophy, three attempts to solve a problem, reveal the correct answer when no attempt left. Currently, working on the last bit, integrating core data into my app to save which trophy the user has earned. A question, what kind of key-value storage do you use in your app? Hopefully, today I am going to release it. 
Awesome, thanks for making this! Did you maybe post the wrong example for the "Tagging" section? It seems like you ran the tagger over a different sentence?
Looks great. Just requested access.
I'm working on learning swift. I am excited as hell to finally be doing Apple Development. So this month will be tons of tutorials and lots of reading of documentation. Wish me luck. 
Instantiate your floating view controller however you usually do, either with a standard initializer or by retrieving it via your restoration identifier in your storyboard, set its view.frame property to your desired floating size and addChildViewController from your base view controller. Remember to call its related dismiss function. This [link](https://gist.github.com/tomohisa/2897676) is what you want, sorry it's in Obj-C. Hopefully you can still understand this code.
Thanks for noticing! I fixed it.
Some tag schemes aren't available for all languages. For example, NSLinguisticTagger may not support lemmatization for a given language. I'll update the library to add an API to see what functions are available for a given language.
Maybe I misunderstood his question. I took it as though RA_Carson was saying that if you invoked something like a UIScrollVIew you needed to implement every delegate and handle every message they received. That is definitely not necessary. You do not need to invoke all 9 of the delegate methods attached to it.
To do what?
&gt; with area's With area's what? Why are you putting an apostrophe on a plural? Don't do that. English doesn't work that way. &gt; UIIMage It's a UIImage, not a UIIMage. Your code has to compile. So should your English. Look at the enclosing view. Look at your view hierarchy. The solution to the problem is obvious.
It supports lemmatization, tagging, extraction, and filtering. They’re 4 relatively common linguistics / NLP operations. I have more detailed information about what it does and why it’s useful in the readme.
[Here](https://www.youtube.com/watch?v=g1y_98xvL6c) you go!
Thanks!
You are doing something wrong if you have to set the height manually while using auto layout.
I'm not sure what you mean. Those are autolayout constraints, but I'm not using a storyboard. I have already fixed the issue though.
This is great! I didn't know about computed properties, and it seems it was just what I needed. To clarify, is there a benefit to creating a 'Dumb' extension, rather than adding the computed property into the original class?
Microsoft has C#. Pretty good language, but does not produce .o files and has big dependencies. Google has Go - but that language is just a major disappointment. Yes, swift's strings are unicodely-correct to a ridiculous degree. I can live with that. How big is libswift + icu compared to, say, libstdc++?
A syntactic analyser would be nice too. I've written a chart parser in Swift, interested?
Yes, it is AM exclusive for a few reasons – both myself and the majority of my friends all use AM, and there have been many times where I thought to myself "I wish there could be an easy way to see what my friends are listening to right now". Combine that with AM lacking any good listening tracking or social features, I saw a good opportunity to fill that niche. That being said, I've had many other people say the same thing that you did and I would happily integrate Spotify into the app if I could – but unfortunately, I've looked over Spotify's APIs and there's no way to get historical play count information. I *would* be able to get the user's library and what song they're playing (can use iOS for that, don't need the API) but that's all. :\
Awesome, hope you enjoy it! Let me know if you have any feedback or questions.
Hey thanks, I appreciate that! Hope you enjoy it – let me know if you have any feedback or questions.
Thanks! Hope you enjoy it – let me know if you have any feedback or questions.
It sounds like you've made a lot of great progress! It's such a good feeling to build something you're enthusiastic about, isn't it? I know nothing about cryptocurrency, but a quick search suggests that Apple does in-fact allow trading apps. But the important thing to keep in mind (in my opinion) is that the app you're building is what you want and solves a problem that you have. That's what turns a good app into a *great* app. Keep it up!
Thank you for the quick turnaround on access. I just started learning swift but I will absolutely give my feedback from a UX aspect. I listen to music a lot so I'm interested to see how it works for me. Thanks again.
Any chance I can still get this for free?
thank you, it works now. 
Since the image already has trasnparent areas, then: 1.) Fill your context in your transparent blue. 2.) Draw your original image in to it. Now you have a context where all the final transparent parts are blue. 3.) Use your original code to turn all the blue transparent. 
This is just how CoreData is built. I suggest you understand how CoreData stack looks and understand what each part of that stack does. This is a very basic line of code to create a managed object and insert it into the context. The second approach does the some except only under the hood. I personally don't like any CD abstraction libraries (hello MagicRecord &amp; Co.) because it hides a lot of details from you and when things break (because they always do with CoreData) you're left wondering which part broke and how. Using vanilla CoreData stack it's easy to quickly pinpoint the culprit, but with abstraction libraries? Who knows!
Thank you very much for the reply! I am afraid I don't understand what you mean by hiding a lot of details. From what I understand of the CoreData stack, the second approach does exactly what the first one does without hiding anything: it creates an instance of a managed object within the context. Isn't the second approach also considered vanilla CoreData? In the example above, Task is just a subclass of NSManagedObject that ends up having a very simple constructor. I realize that this is only one of many operations involved in CoreData but I can't seem to imagine a situation where an abstraction like this is not beneficial. Could you perhaps show me a situation (or point me towards an example) where avoiding this type of abstraction is beneficial? 
You're correct. The second piece of code is a convenience initialiser for `NSManagedObject` subclass. Apparently it's been awhile since I visited CoreData documentation. 😅 In that case I think this can only be the outdatedness of the documentation.
So here's the thing. CoreData is was not written in Swift, it's written in ObjC (at least it's public interface is), and is an example of something much more inspired by the Cocoa philosophy. 
Thank you, It's solved :D
You don't need a nav bar item since it's already hooked up to a nav controller. Click on the View controller and on the right where you can change atrtributes and such, I think it's the second tab or 3rd tab, you can set it to show the navigation bar, default is inferred, which sometimes doesn't show. 
I tried turning it on and on the storyboard it shows up, but when I run the App there is no navigation bar on the App. This should be right? : http://imgur.com/a/faT0H
^(Hi, I'm a bot for linking direct images of albums with only 1 image) https://i.imgur.com/sstgWe6.png ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dlvo962) 
I'd double check the constraints. With a Navigation Controller the Navigation bar should automatically fall under the status bar.
I'd say install a Linux virtual machine and run Swift there. You can't use UIKit but most of Foundation is there. 
Can you show the other tabs? Also full screenshot would be nice. I'm assuming you are not hiding the navbar anywhere in code Edit: try changing the size from freeform to inferred.
The problem with the second idea (The Task initializer) is that it *doesn't* express what is going on. You fell into the trap yourself when you said, "it is very clear that you are creating an instance of Task." The problem is you aren't *just* creating an instance of Task. You are *inserting* a new instance of Task into a particular managed object context. The former expression is a better description of that fact. Better would be to separate the two concepts into two different methods: let task = Task() context.insert(task) But CoreData has a very poor interface.
Use the Intro to App Development with Swift, App Development with Swift, and the The Swift Programming Language books in iBooks. They're all free. I started learning Swift 3 months ago (from little-to-no programming experience) with the intro book, and I am now using the other two books to expand on what I know. They're really great for learning Swift. I would highly recommend them.
Thank you so much! I'll go check it out!
I wrote a book teaching folks how to make iOS apps using Swift. It’s available for free online and I’m happy to answer questions! You can find it here: [Hacking with Swift](https://www.hackingwithswift.com/read). 
Thanks! I'll be sure to check it out as soon as possible!
Be sure when you open your project to open with Xcode 8.3.3...there was a weak moment when I was tired once and opened 8 by default (vs 7 at the time) and clicked thru some annoying dialog boxes and it tried automatically updating to swift 3... a git reset later and we were back but it was a scary moment nonetheless!
You can use switch
honestly, I just started a few days ago and used things like udacity, codingwithchris, etc. but none have been as good as the iBook "App development with swift". Really helpful!
swift playground on the iPad
If you get rid of all the spaces you can, it becomes 88 chars. for i in 1...100{print(i%3==0&amp;&amp;i%5==0 ?"fizzBuzz":i%5==0 ?"Fizz":i%3==0 ?"Buzz":"\(i)")}
Yeah, man, Core Data's just complicated. It's my understanding that the convenience initializer for managed objects like this one, let task = Task(context:context) is a fairly recent development, which is why it's not reflected everywhere. It's true that the shorter method is more Swifty and easy to read, but, as several have pointed out, it does obscure some of the work of Core Data, and it counts on you to know how Core Data's object management works. ... But at the same time, I do think it's a brilliant way of simplifying in a complex framework. At the end of the day, all you really need to know for the object to exist and persist is the only argument in its initializer: the context! As long as you remember to use that to save or delete whatever objects that context is managing, you'll be AOK. Obviously there's more to it if you end up with a more complex app with a more complex Core Data stack, but for a single model app it's certainly fine.
You should check out Devslopes.com. They just released a new iOS 11 and Swift 4 course and it covers the basics all the way up to advanced topics and some new ones too like CoreML and ARKit. They also give you 10 hours of content free when you sign up! www.devslopes.com
Thanks for you reply! I really like the approach you suggested as I find it follows the object oriented paradigm perfectly. An instance is created, and you store it somewhere. Although one line of code becomes two, the behaviour becomes very explicit.
Thanks for your reply! Your reply further validates my current newfound understanding. Like you mentioned, these abstractions simplify something than can be complicated at times. Since I am still learning the ins and outs, “hiding” some of the more complicated operations allows me to understand better and learn more quickly at the same time. Once I master these basic operations, I will naturally find the need to exploit the library in a more direct manner.
I know of it's existence but that's not Swift, that's just a learning method 
Thanks for your reply! I have to admit that my knowledge on Cocoa is limited and I know I need to read up on it before attempting something more advanced. Is there a specific tutorial/document that worked well for you? Or should I just look around until something resonates?
I’ll be planning, recording, and publishing a video course on RxSwift which I’m super stoked about cause it’s amazing.
Hey, if you go on to www.devslopes.com and create an account, you can enroll for free in their Swift course to learn Swift with the 100 coins they give you from the start. [Link](www.devslopes.com) 
Oh jeez, I can't believe That didn't cross my mind! 
I considered using switch, but I couldn't think of a way that it would condense it much further...
Thank you!!
Thank you!!!
Heh, I'm probably the wrong person to ask, I gave up on CoreData, and switched to using Realm instead.
Learning comes from doing. Sure, follow a tutorial or two to start. But build your own stuff as much as possible. Open source your work and solicit feedback. Join other projects and try to contribute. Good luck!
Thanks!
http://imgur.com/a/QHxCG Here is a screenshot. I didn't change anything in the code, and only made a scrollview. I tried changing to inferred, still didn't worked, although the scrollview still worked (not sure if it's relevant) Thank you for your time and help! :)
If this is not your first programming language. Stanford U have lots of videos for free on iTunes last time I looked
81 chars `for i in 1...100{print(i%15==0 ?"fizzBuzz":i%5==0 ?"Fizz":i%3==0 ?"Buzz":"\(i)")}` `i % 3 == 0 &amp;&amp; i % 5 == 0` is the same thing as `i % 15 == 0` **EDIT:** 78 `for i in 1...100{print(i%15&lt;1 ?"fizzBuzz":i%5&lt;1 ?"Fizz":i%3&lt;1 ?"Buzz":"\(i)")}` **EDIT:** 76 `for i in 1...100{print((i%5&lt;1 ?"Fizz":"")+(i%3&lt;1 ?"Buzz":i%5&lt;1 ?"":"\(i)"))}` 
Thanks for the challenge — it was fun! It took me around 20 minutes. I had to look up NSRegularExpressions to remind myself of their syntax, and I've never had to write a range for a 1-length thing before so 0...0 looks a little weird, but it works! My original plan was to just compare the letters against a constant array of vowel characters, but I realized I also needed a way to know if something was a letter (and not punctuation), hence the second regular expression. I'm not positive if it would handle characters with accent marks, but I'm happy with its readability and simplicity. let input1 = "Hello, World!" let input2 = "Reddit" let input3 = "sequoia" struct English { static let vowelsRegex = try! NSRegularExpression(pattern: "[aeiouy]", options: .caseInsensitive) static let lettersRegex = try! NSRegularExpression(pattern: "[a-z]", options: .caseInsensitive) } func challenge(input:String) -&gt; (consonants:String, vowels:String) { var vowelsFound = [Character]() var consonantsFound = [Character]() for letter in input { if English.vowelsRegex.numberOfMatches(in: String(letter), options: [], range: NSRange(0...0)) == 1 { vowelsFound.append(letter) } else if English.lettersRegex.numberOfMatches(in: String(letter), options: [], range: NSRange(0...0)) == 1 { consonantsFound.append(letter) } } return (consonants: String(consonantsFound), vowels: String(vowelsFound)) }
 func consonantsAndVowels(_ input: String) -&gt; (consonants: String, vowels: String) { let vowels = "AEIOUaeiou" var foundConsonants = "" var foundVowels = "" for c in input.characters { if vowels.index(of: c) == nil { if (c &gt;= "b" &amp;&amp; c &lt;= "z") || (c &gt;= "B" &amp;&amp; c &lt;= "Z") { foundConsonants.append(c) } } else { foundVowels.append(c) } } return (foundConsonants, foundVowels) } print(consonantsAndVowels("Hello, World!")) print(consonantsAndVowels("Reddit")) print(consonantsAndVowels("sequoia")) Took me 10:42. I've been teaching myself Swift, SpriteKit, GameplayKit, etc., for about two months. I had to google "swift tuple with named elements" because I didn't know -- or maybe had forgotten -- that you can name the elements in a tuple. My approach, hmm, it's the approach I apply to every programming problem: I ask myself, how would I do the task myself, without the help of a computer? So: look at each character, if it's a vowel, add it to the vowels array; if it's not a vowel, add it to the consonants array. Well, that's what I did at first. And of course, I got a comma and a space in my consonants array. D'oh! So I had to fix that bug. Do I get the job?
It's not specifically "object oriented." Command–query separation is a fundamental idea in imperative programming.
 let CONSONANTS = "bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ" let VOWELS = "aeiouAEIOU" func extractValidCharactersFromString(_ str: String, validCharacters: [Character]) -&gt; [Character] { var characters: [Character] = [] for x in str.characters { if validCharacters.contains(x) { characters.append(x) } } return characters } func challenge(_ str: String) -&gt; (String, String) { let vowels = extractValidCharactersFromString(str, validCharacters: Array(VOWELS.characters)) let consonants = extractValidCharactersFromString(str, validCharacters: Array(CONSONANTS.characters)) return (String(consonants), String(vowels)) } print(challenge("Hello, World!")) print(challenge("Reddit")) print(challenge("sequioa")) Having never done Swift before this took me a little longer than expected. I'm sure there are better mechanisms to get the range of characters without having to hardcode them... and I found some but they all dealt with CharacterSets and I'm not familiar with how to utilize those nicely. 
love: Optionals 
 func challenge(string: String) -&gt; (vowels: String, consonants: String) { let vowelList = ["a", "e", "i", "o", "u"] var vowels = "" var consonants = "" for rawCharacter in string.characters { let character = String(rawCharacter) if vowelList.contains(character.lowercased()) { vowels += character } else if "A"..."Z" ~= rawCharacter || "a"..."z" ~= rawCharacter { consonants += character } } return (vowels: vowels, consonants: consonants) } print(challenge(string: "Hello, World!")) //(vowels: "eoo", consonants: "HllWrld") Sorry, forgot about symbols last time. My approach is: NSRegularExpression is dog-slow, avoid it at all costs. This just makes me wish Swift had character literals that it doesn't confuse with Strings half the time Edit: See this is what I'm talking about, "A"..."Z" works as a character range but not the array at the top. I know this is because the array is already inferred as a String, but c'mon.
I don't see your naviagtion viewcontroller in the left tree, if you have one make sure that is connected correctly. if you don't want to use a nav vc but still want navbar you would need to add a constraint to the bar to be under toplayout guide. 
This are some YouTube channels I recommend https://www.youtube.com/channel/UCuP2vJ6kRutQBfRmdcI92mA https://www.youtube.com/channel/UCbTw29mcP12YlTt1EpUaVJw https://www.youtube.com/channel/UCysEngjfeIYapEER9K8aikw 
Sure, because in iOS development I do that kind of thing all the time - sort filters characters out of strings. /s In Objective C this takes me a couple minutes using NSCharacterSet. -(NSDictionary*) filter:(NSString*)s { NSCharacterSet* letterSet = [NSCharacterSet letterCharacterSet]; NSCharacterSet* vowelSet = [NSCharacterSet characterSetWithCharactersInString:@"AEIOUaeiou"]; NSMutableString* vowels = [NSMutableString stringWithCapacity:s.length]; NSMutableString* consonants = [NSMutableString stringWithCapacity:s.length]; for(int i = 0; i &lt; s.length; ++i) { UniChar c = [s characterAtIndex:i]; if([letterSet characterIsMember:c]) { if([vowelSet characterIsMember:c]) { [vowels appendString:[NSString stringWithCharacters:&amp;c length:1]]; } else { [consonants appendString:[NSString stringWithCharacters:&amp;c length:1]]; } } } return @{@"consonants": consonants, @"vowels": vowels}; } which is the Cocoa way. Swiftifying it was incredibly annoying and fiddly because of the irritating difference between Character and unicodeScalar and the pointless renaming of things. It took about 3x as long func classify(s : String) -&gt; (consonants: String, vowels: String) { let alphaSet = CharacterSet.letters let vowelSet = CharacterSet(charactersIn: "AEIOUaeiuo") var vowels = "" var consonants = "" for c in s.unicodeScalars { if alphaSet.contains(c) { if vowelSet.contains(c) { vowels.append(Character(c)) } else { consonants.append(Character(c)) } } } return (consonants: consonants, vowels: vowels) } Ok, now for my world wide rant. Text processing is too important to be left to amateurs which is why I used NSCharacterSet. It knows about all the letters, not just the ones Americans use so my detection of letters vs non letters is absolutely correct - because I didn't write some lame heuristic to do it. OTOH, I can't give myself too many pats on the back because I did kind of cheat on vowels because there is no pre-defined vowel set and I couldn't find a nice way to make one by combining/subtracting existing sets. So my solution will fail on things like é which is a vowel but not an ASCII vowel. TBH - I wouldn't use this as a programming test because the actual problem is enormously harder than the one you think you have set.
Can you *show* us the sort of look you're going for? Whether building an example in IB, pointing to an example in another app, or drawing it by hand and taking a picture?
Hate: the cutoff for “if we were going to redesign the language from scratch, how would we do it” shouldn’t have been Swift 3. A tad too many small things should have been changed but will now be part of the language forever.
You’d be surprised. Once you get used to programmatic UI, you’ll never want to go back. It’s so much easier to make the changes you want.
That's the point, I don't want a Navigation ViewController, I just want the Navigation Bar to look like the one of the Navigation Controller! Can you give me a more detailed instruction how I can add a constraint to the bar? I can't thank you enaugh for your help! :) 
In Swift 4: `string.suffix(3)` In Swift 3: `string.characters.suffix(3)`
 let text = "this is a test" print(String(text.characters.suffix(3)))
https://www.youtube.com/watch?v=1j-Frd5snYc basically what this guy said. in your case drag your nav bar to the base vc and there should be a constraint added to the left tree. essentially you want the top of your nav item to the toplayoutguide. it's hard to describe i mostly do it out of muscle memory... sorry. 
So what should it return for "Reneé wants to listen to Motörhead and eat jalepeños on the trip to São Gonçalo"?
Worked great, thanks. Now, what if I want the 4th, 5th and 6th from last characters? Do I use the offset method?
 let vowels = "AEIOUaeiou" let consonants = "BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz" let text = "Hello 123 world!" let filterV = text.characters.filter{ vowels.contains(String($0)) } let filterC = text.characters.filter{ consonants.contains(String($0)) } let tuple = (consonants: String(filterC), vowels: String(filterV)) print(tuple) 
I have been using Elements for a while and it's a lovely product. It's powerful. Only I wished that there was an option somehow circumvent some of the language limitations forced due to Java/.NET. 
hate: lack of linux server support. Swift could overtake rust as the choice non-GC based language for writing web server APIs with just a little bit of work, but last time I looked, it was lacking.
I love you, man.
Not the shortest, but the tuple switch makes for an easier read: for i in 1...100 { switch (i%3==0, i%5==0) { case (true, false) : print("Buzz") case (false, true) : print("Fizz") case (true, true) : print("FizzBuzz") case (false, false) : print(i) } }
Love: * Type safety. Especially nullable types. * Way cool functional programming. * Extensions, especially private ones. I can hang a function on a type without it feeling like a monkeypatch! Hate: * Slow compiler. * Type inference is way too unbounded. Relatively simple things cause the compiler to give up and declare an expression as too complex, or make the module take a huge amount of time to compile. If there were bounds on the search (like C++'s one-conversion rule), it'd be awesome. * When people make operators out of random punctuation. Makes code unreadable to new coders. I should not need to find some module's documentation to figure out what `&lt;-&gt;` and `&lt;=&gt;` mean, and why they're different. I do a lot of Python programming where we use our words.
If you are able to complete this problem relatively easily, how qualified would a candidate be for this position? Side question and don't mean to jack this thread- if someone applied for this position coming from a completely different industry with no formal coding experience (school, boot camp etc) and was completely self-taught, would you be inclined to think he was less qualified than someone with a cs degree. Asking for a friend.
What is it lacking? I had no problem building and running a Swift based web server on Linux. (Although admittedly I did not take it to production)
I have been loving Lynda.com's iOS Development path of courses. 
The suggestion you already got: var pageStatus = "default" @IBAction func segmentControlPressed(_ sender: UISegmentedControl) { switch segmentControl.selectedSegmentIndex { case 0: pageStatus = "unclaimed"; case 1: pageStatus = "complete"; case 2: pageStatus = "cancelled"; default: break; } } is correct as far as it goes, but you need to add a setter to pageStatus so that when it is changed it calls the tableView's reloadData, and in the tableview cellForRowAt ( and numberOfRowsInSection) you have to look at pageStatus and return the appropriate data.
I doubt its exclusively a swift community thing, but Stackoverflow people are serious jerks sometimes I get it, a new person asks a question that has been asked 99999x times and a google search probably would have solved it, but they were once new developers once upon a time ....Reddit community's a lot better/nicer 
Ah, you got it, I've trying to find a way to remove the "FizzBuzz" string as it seemed to be the most obvious waste. Kudos on "&lt;1" instead of "==0", I would have never thought of that...
hate: Optionals
 let input1 = "Hello, World!" let input2 = "Reddit" let input3 = "sequoia" let challenge = { (input: String) in input.characters.reduce((consonants: "", vowels: "")) { results, letter in guard "A"..."Z" ~= letter || "a"..."z" ~= letter else { return results } if ["a", "e", "i", "o", "u", "A", "E", "I", "O", "U"].contains(letter) { return (consonants: results.consonants, vowels: "\(results.vowels)\(letter)") } else { return (consonants: "\(results.consonants)\(letter)", vowels: results.vowels) } } } print(challenge("Hello, World!")) print(challenge("Reddit")) print(challenge("sequoia"))
Thanks, I'll go check it out!
Thank you! I'll be sure to check them out!
Thank you!
PS: Once I load the storyboard, the building and indexing doesn't stop. And every time I load any storyboard file, it just creates new Process called "Interface Builder Cocoa Touch Tool" and basically makes my CPU go crazy. It doesn't happen on a single laptop, it happens on iMac and MBP as well... 
Happened to me too, I was so scared I turned the mac off for a while. Probably gonna be fixed in beta 6 I hope
Well, I posted similar question on Stack over flow and it seems as though people are not having this issue, so I wonder why I'm having it. But good to know I'm not the only one and yes, fingers crossed they'd fix it with the next update
Hackintoshing is an option. That's how I started my love for swift. Had to do a school project and I only had an hp laptop and a really really old Mac mini, i used that to get the necessary stuff to hackintosh. 
Okay I got it, but how can I change the Navigation Bar hight to look same like the one from an embedded Navigation Controller. The left Navigation bar should look right the right one : http://imgur.com/a/hyvna
^(Hi, I'm a bot for linking direct images of albums with only 1 image) https://i.imgur.com/CFriHfL.png ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dlx47kx) 
well, it’s beta software…
For what it's worth, I understand that the challenge is imperfect. However, it's not like our developers aren't presented with equally imperfect real-world requests from product owners. Were this a real interview, I'd give some credit for identifying the fact that there are a lot of edge-cases we're missing, then ask you to go ahead and try knocking out the challenge under the assumption that we're only processing English language stuff, or we're dealing with ASCII.
Sorry, I am a novice. How do I do that?
&gt; If you are able to complete this problem relatively easily, how qualified would a candidate be for this position? Being able to complete the problem relatively easily is only part of the interview process. And actually, whether or not you actually get to the correct solution isn't even a very strict pass-fail. We have hired people who couldn't complete various coding challenges (I haven't been in every interview, and I can't speak to if we've hired someone who wasn't able to complete this specific challenge). Not completing the challenge (in an interview setting, with that live-coding pressure and limited time) doesn't rule out a person. Completing the challenge successfully, likewise, does not guarantee someone the position (I think this one is more obvious because we'll interview more people than we have positions to offer and it's pretty common multiple people are able to complete any given challenge). What I'm typically most interested in is people's thought process (as you'll soon see in some of the replies I stick on some of these examples asking people about parts of their code). For example, identifying problems with the challenge itself (non-ASCII characters significantly complicating the problem) will net you some bonus points... as long as you don't stubbornly stick yourself on that problem, are willing to accept my telling you to ignore that problem for the sake of the particular challenge, and work it out anyway (any extra time spent arguing on it is at best frustrating me, and at worst cutting into your own time to complete the challenge, which I very much want to see you take a crack at). The WORST thing you can do is make no effort, don't share any of your thoughts aloud, and tell me you don't think you can do it. Some decent portion of the time, I'm brainstorming through the solution with the candidate. &gt; Side question and don't mean to jack this thread- if someone applied for this position coming from a completely different industry with no formal coding experience (school, boot camp etc) and was completely self-taught, would you be inclined to think he was less qualified than someone with a cs degree. Asking for a friend. In almost every case, for my company, no. I am a director at my company. I have a generic Associates of Science from a community college, a degree program intended for students to then transfer into a 4-year college. I took programming classes at the community college, and was intending to get a Bachelors in Computer Science, but I hated school, and around the time I would have been transferring to the 4-year school, an opportunity fell in my lap. I believe my boss, a VP, has a Masters in biochemistry or something. We *both* came up through the company strictly as developers. Of the developers I manage, most of them tend to have some sort of computer science education, and some portion of them may have an unrelated background but went through some sort of boot camp. I think these are a good way to get started if you're not very self-motivated. The risk of self-teaching is that it's very easy to develop your *own* development habits, which may or may not even remotely match industry standards. Of course... it's not like college professors typically have a handle on what the industry is doing... but, I do feel like if you're self-teaching with the actual intent of getting a job as a professional developer, you definitely need to make the effort to find out what professional developers are doing, and make sure you're trying to learn those things. Treat at least some of your projects as if you're working with a team developing a product for a paying client.
It's definitely not exclusive to the Swift community on Stack Overflow (in fact, several others are way worse, like C++). But, arguably, the only reason Reddit is better is because user's can't vote to close posts for various reasons, which also means it's harder to identify post quality on Reddit (and the up/down votes aren't quite as used and quite as obvious as on Stack Overflow)... and that's why when you do a Google search, you get Stack Overflow results and not Reddit results.
It tells you absolutely nothing about iOS development. Very contrived. OTOH - I would personally fail any candidate not using CharacterSet as not using it shows they don't know Cocoa to any degree of fluency.
How do you use Playgrounds in your interviews? Is there some kind of "live" mode where the candidates can share their work with you in real time? Or maybe you use google hangouts and they share their screen?
We use Google hangouts.
The point of the coding part of the interview is not necessarily to, by itself, determine if the developer is a master of iOS development. It's to see if they can write code. The coding challenge is also paired with technical questions. Generally, most iOS development specific knowledge can more efficiently be demonstrated by being able to talk about various concepts (ARC, storyboard vs xib vs programmatic ui, autolayout, notifications vs protocol-delegate vs blocks, MVC or whatever other design patterns, automated testing, etc., etc., etc). I can typically get a pretty good feel for a candidate's domain-specific knowledge through this part of the interview. But I can't hire someone without seeing them actually write some code. So two questions... 1) Do you think this challenge is unnecessarily difficult compared to a writing-code challenge that would demonstrate actual iOS knowledge? 2) Can you share with me some live-coding challenges that aren't too complex to do in an interview setting but are closer to something you'd more likely do in iOS? I might also argue that it's important that the challenge isn't something a problem that the candidate is particularly likely to have had to solve numerous times (which is why, for example, I don't pick FizzBuzz, because all that tells me is whether or not this is literally the candidate's first interview ever).
In my opinion, you should try to get 16gb of ram and maybe the 512 ssd. 256gb might be enough, depending on how you use it. The new mbp seems to be really hard to do a manual upgrade if you wish to later on. Yeah, it's a pricey upgrade but running out of memory is really, really troublesome. Source: 8gb of ram feels slow on my old MacBook.
I won't be backing up any icloud files on it. I also won't have any music, games or movies on it. I also have a pretty powerful windows PC, so I was thinking 256GB will be enough because I wont run bootcamp/parallels and download windows. 
16gb ram and 256 ssd (if you can lean on cloud storage)
I currently have 8GB of RAM, and 256GB storage on mine, and I'm disappointed. I'm upgrading to 16GB/512GB tomorrow, and wish I had just done that from the start.
why 512gb?
My current drive (256GB) has about ~30GB free. - Docker (by default) uses a 60GB virtual disk for its container/image storage. It can be shrunk, but then you're losing out on previous images which you'll periodically need to re-download. - Xcode uses a ton of space for the application itself (~12GB), and even more for simulator storage, documentation downloads, application DYSM/archive files - My `~/Library/Developer/` directory is about 14GB, and it's a relatively new installation. - Further, I have a few smaller Linux virtual machines (~20GB in size) that I keep having to transfer to external drives as I can't hold them all. This is (as another poster described), "leaning on cloud storage" - my Photos library is space "optimized", meaning the hi-res versions are all stored in the cloud, and it's still ~25GB. We all know that Apple's premiums for their RAM/SSD storage upgrades are crazy expensive, but as it's something you **can't upgrade** on your own after purchase, it's worth doing IMO. Think less about how much space you need _today_, and more about whether you think you'll feel cramped in 3-4 years. **Note also** that none of the above includes a Boot Camp partition, which you may or may not want.
The shortest answer I came up with is func f(s:String)-&gt;(String,String){let c="AEIOUaeiou";(s.filter{!c.contains($0)},s.filter{c.contains($0)})} which is 106 bytes long (and requires Swift 4). A more readable solution would be: extension String { var vowels: String { let allVowels = "aeiouAEIOU" return self.filter{allVowels.contains($0)} } var consonants: String { let allConsonants = "bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ" return self.filter{allConsonants.contains($0)} } } func consonantsAndVowels(in string: String) -&gt; (consonants: String, vowels: String) { return (string.consonants, string.vowels) } consonantsAndVowels(in: "Hello, World") // returns (consonants: "HllWrld", vowels: "eoo") 
also, don’t use IB
I like this, it's elegant.
Love: it's not obj C. Dislike: substring functionality.
https://stackoverflow.com/questions/40751366/how-can-i-change-height-of-navigation-bar-swift-3 I don't mind helping if you described your app in detail in the post. It's difficult to answer your specific question without knowing your true intentions in the context of your storyboard setup. Lot of ui related things can be found on stackoverflow and YouTube. I highly suggest you look up some tutorials on autolayout or on how to do layout in code. 
Same problem here, I really hope they fix it in Beta 6
It depends on your goals I guess. Do you want a generalist who can muddle through on iOS or do you want an iOS person who rocks the platform? If I'm doing Ios I look for the second. Language is easy. Cocoas patterns are much more than the language used to call them. If you are determined to keep this kind of challenge, have em split digits or punctuation from letters. These are well known and clearly defined sets of characters. Vowels aren't. So to me, the interviewee - your question - or rather the willingness to gloss over the complexities of that question - that tells me you're probably not an A list shop and I personally would be likely to give your opportunity a pass. I also get that you want to see some code. Any code. I personally look for people with multiple languages and platforms under their belt. One language/platform programmers usually suck so for a first question I'll take any language at all. Unless the language I'm targeting is truly novel (swift isn't apart from maybe plumbing knowledge of optionals) I'm generally ok with that.
Code sample compatibility. Lots of interest and examples/blogposts.
Hate: The idea of being a "Swifty" developer. Everyone seems to try and force building apps with the "new" programming paradigms... e.g. Swift apps should only use Structs and Protocol Oriented Programming, even if it doesn't make sense. Love: Type safety and Optionals.
A used one from 2012 and max our the RAM and SSD. Quad i7 of course. This one I am typing on is one of them.
Just fucking do it.
I tried set{code} but it gets error 'unresolved identifier'
&gt; have em split digits or punctuation from letters. These are well known and clearly defined sets of characters. Vowels aren't. If a candidate made this argument to me, I'd be perfectly happy to change the criteria to this, because to me, it's effectively the same problem. Given a string, split it into two defined piles of characters. Yeah, vowels and consonants aren't as straight-forward as the challenge seems to assume they are, however I could simply strip out the words 'vowels' and 'consonants' and even give the groups of letters as 'a-f' versus all the other ASCII letter sets. &gt; So to me, the interviewee - your question - or rather the willingness to gloss over the complexities of that question You could *easily* be working with a product owner or client who, from your perspective as a developer, is over simplifying and shrugging off the complexities of the problem. You could also look at this as a test of [YAGNI](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it). Even outside an interview, you could end up in the same argument with a client who will insist you will only ever see the 21 English consonants and 5 English vowels for the strings you're parsing. And he may still want this functionality (for whatever reason). The business rules could even define the non-English characters as characters that are intended to be stripped out with the spaces and punctuation. At it's core, the point of this challenge is really just to take a collection (in this case a collection of characters), and categorize it into three groups: Group A, Group B, and throwaways. The fact that this is a string means you've got some extra options like regex or character sets... but this could just as easily be an array of model objects that also need to be split into Group A, Group B, and throwaways and the solution would look roughly the same as some of the answers in this thread.
Fair enuf
Thank you very much, I solved it. Next time I'll try to ask my question with more details, sorry for the confusion! Have a nice day, and thank you for your help!
It's out now, better try it ;)
Ahh, downloading now, thanks.
Fixed a bug that caused Interface Builder Cocoa Touch Tool to use 100%+ CPU. (33903288, 33708465) Fixed :)
Finally, I was afraid my mac would burn in flames every time I opened X-code lol 
Wow, this is excellent. I really like the attention to detail on SceneKit, detailing how the SCNNode works, and adding it to an ARKit project. Coincidentally I had an issue with a .scn file for ARKit, and this ended up helping me fix my problem!
Have you followed the [Getting Started](https://dev.twitter.com/twitterkit/ios/installation) section of the documentation, including registering your own application key and secret? Are there any errors or warnings in the console? Can you post your code on Bitbucket/GitLab/GitHub (with your key/secret removed) so people can see it? 
I have a MacBook Pro with Touch bar, 256 GB storage and 8 GB of RAM. I run multiple programs at once like Xcode, AppCode, Illustrator, Sketch, Calendar, Emails, Slack on multiple desktops and it always runs smooth. I'm not sure why I would need 16 GB as many always suggest unless my apps just aren't super powerful. I've built an Instagram clone (50%) on it too and builds and runs just fine. Maybe takes like a couple of seconds. 
I'm working on a Mac app that uses Wii Balance Board (remember those) to measure balance data for Doctors. 
Not qualified to answer this but I do know that you can get the Spotify app for Mac from the Spotify website. No idea what they are doing but I'm hoping this would give you something to Google or look into. 
Thanks, yeah, I could just post the .app file on my site, but payment gateways and anti-piracy/keys is more what I was hoping to look into.
Took me around 5 minutes in a playground. Obviously quick and dirty. And just did it to challenge myself. I've been a professional developer for many years and have been to interviews for "Senior Software Engineer" positions where I've been handed a slip of paper with the FizzBuzz question on it and asked to white board it. Spent more time deciding if I wanted to be clever or just solve the problem (basically noped out of the interview once I read the question). Note to potential interviewers, know your audience. If you are interviewing for a senior level position you might want to change your questions. I agree with you that seeing if a candidate can write code is needed, I typically ask them to write a "makeChange(float)" method letting them define the output. Then I have them refactor it from the quick and dirty into something more re-usable and nice. func filter(string: String) -&gt; (consonants: String, vowels: String) { let c = string.characters.filter { "bcdfghjklmnpqrstvwxyz".contains(String($0).lowercased()) } let v = string.characters.filter { "aeiou".contains(String($0).lowercased()) } return (consonants: String(c), vowels: String(v)) } print(filter(string: "Hello, World!")) print(filter(string: "Reddit")) print(filter(string: "sequoia")) --- (consonants: "HllWrld", vowels: "eoo") (consonants: "Rddt", vowels: "ei") (consonants: "sq", vowels: "euoia") 
In order to be able to publish app outside the app store you need an Enterprise Dev License.
For mac, that's not entirely true. You can compile and build apps to be distributed outside the mac app store without an enterprise account, which I've done multiple times before for free apps. https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/DistributingApplicationsOutside/DistributingApplicationsOutside.html I mainly want to know how to take payments and deliver my app outside the store.
Well, there is this thing called QA, which they should do before releasing this software. 
Literals are just syntactic sugar for creating things. Eg., it does not matter if you create an array with a literal or something else, what you can do with an array depends on the array struct. UIColor just happens to be immutable by design. If you want to have a color object where you can modify components separately, I'd recommend that you create your own, because UIColor is a little cumbersome for that purpose. For displaying a color, add a method that converts one of your colors to a UIColor.
That's good to know, thanks for the link
maybe it has changed. I haven't looked in a while.
Compiler seems much faster in Xcode 9, at least for me. 
I've just rolled my own solutions for licensing, distribution, payments, etc, in the past, but next time I release a Mac app, I'm going to seriously consider DevMate: https://devmate.com
Thanks, I'll take a look at them. I thought there'd be a service out there. Just not keen on the 30% cut for Apple. 
My solution is similar: let vowels = CharacterSet(charactersIn: "aeiouAEIOU") let consonants = CharacterSet.letters.subtracting(vowels) let word = "This is a sentence" let onlyVowels = String( word.unicodeScalars .filter { vowels.contains($0) } .map { Character($0) } ) let onlyConsonants = String( word.unicodeScalars .filter { consonants.contains($0) } .map { Character($0) } ) print(onlyVowels) // iiaeee print(onlyConsonants) // Thsssntnc I could go one step further and factor out the filter/map closures I have but I'm lazy. Working with unicode scalars was surprisingly frustrating...
I actually have the same config as you and I really wish I had more RAM. Many chrome tabs + xcode + photoshop slows the machine down to a crawl sometimes. Add virtual meetings to that (I work remotely) and the presentations and sharing screens becomes a nightmare. I'd definitely advise for more than 8gigs of RAM... If the workflow requirement is anywhere close to what I stated. 
Oh yeah I don't work remotely so I don't need to share screens over the network at all and I don't run a virtual machine either. I do like I listed have many programs opens at the same time but seems fine. 
Interesting, I've been doing some interviews over Playgrounds too. Usually been doing something like having the candidate implement a data structure like a Set or a Stack (was going to try out to see how well linked list works), less so for the implementation but more so to check how they would think about testing some basic stuff. Usually use https://github.com/Quick/Spry. It *should* be easy thus found it and Playgrounds to be a nice quick first interview. Looking forward to seeing what other challenges you have!
Check Weibo for discussion about your app. This is a thing that happens in China.
Why? Computers shut themselves off if they get too hot. 
It's a beta, its not through all its testing. 
&gt;It saves SO much development time, contrary to what many think. I can't agree with this. What that guy did in your video could be done in seconds with storyboards and auto layout. I honestly have yet to see good examples of why NSLayoutConstraints are better than storyboards (aside from source control issues that people claim to have but I have yet to experience). While storyboards were meh when they first came out, they're much much better nowadays. 
Love: - The type system + optionals. - First-class functions and closures. - Extensions. - Powerful control flows like exhaustive pattern matching and guards. - Enums with associated values. - Various syntactic sugars, like ??. Hate: - Enums are nice but still feel clunky in several common use cases. - Generics have no wildcards. - No abstract classes, protocol extensions aren't quite enough. - The tooling is terrible, Xcode is honestly a piece of garbage. Even Xcode 9 Beta's refactoring tools barely work on my project. - The community is less vibrant than Android's, for example check our /r/androiddev .
Price drop alert maybe?
What I did in my first app was create a variable for R, G, and B And had 3 sliders that adjusted the value 0-255 and just added a target to it 
What app? 
I've had some very good experiences with FastSpring.
Is it going to be an Asian flappy bird??!! O godd... I don't know if I can handle another flappy bird game.
The same thing has been happening to my apps over the last 4-5 days as well
I have a huge traffic from Chinese "app review sites". When somebody posted Flawless App there, we got like 130-140 downloads just from one place!
Can you define the order in which I should read those books, I am reading The Swift Programming Language right now. It's my first book that i found really brief and helpful 
Don't start any course before learning swift completely(The Swift Programming Language iBooks version). it's my personal advice
Thanks! I'll keep this in mind!
Check AppAnnie.com to see if it's been featured or you might be able to see if it's somehow jumped in search rankings for key words.
Use FastSpring.com as your payment processor. Add some serial-number scheme to your app. Put your app on your website. Done.
DevMate has been bought by Paddle. They're going to sunset their service eventually. And Paddle is trash tbh.
Same thing happened to one of our apps. We only released last week and came in to work today to see nearly a thousand downloads, 98% from China. I got really excited at first but fabric analytics doesn't corroborate the numbers with user activity. My bet is it's a click farm gone wrong or someones trying to inflate Chinese download numbers. Or maybe I'm jaded because I'm not used to any kind of success with my apps.
Go with this specs. 16GB RAM is definitely far-sighted and you won't regret it. 256GB SSD are enough, if you want to expand it buy an external drive.
&gt; I typically ask them to write a "makeChange(float)" method letting them define the output Since you didn't add a lot of detail, do you mean basically a problem for finding the correct number of coins? Like if I pass in .83, they'd pass out three quarters, a nickel, and three pennies?
&gt; Usually been doing something like having the candidate implement a data structure like a Set or a Stack (was going to try out to see how well linked list works) How much help do you give them along the way with this? Do you expect candidates to come in with enough CS background to know what these data structures are? Short of googling "stack in swift", which likely takes me to a copy-pastable answer, there's a good chance I'd be a bit lost without some help. I typically don't bother with data structures because in my entire career, I've had to implement one of these by hand exactly one time. It was early on in Swift before there was just a library I could pull in... and that code got refactored out before we made it to reproduction (the part of the business rules I needed a Queue for ended up being handled by a C++ library shared between multiple projects and C++ has `std::queue`). &gt; more so to check how they would think about testing some basic stuff. I like the idea of writing unit tests with candidates... but I don't plan on it any more. I will typically reserve this for candidates who fly through the initial coding challenge and tell me they have some semblance of unit testing experience. While we definitely write tests for all of our code, we're perfectly willing to hire candidates who have no testing experience (as long as we don't feel like their adamantly opposed to testing, it's pretty easy to pick up and get in the habit of).
First one is called squaresplit (one word) and the second is square stop (two words)
What's that?
I attempted navigating that site but didn't see anything about the app. Thanks for the suggestion though
I checked that and it said it wasn't featured in the US, however it was "featured in 1 other countries". How do i find out more about this?!? What is it featured on?!
My income could handle it
Do you have any ads in your's? I do but I've made 0$ from the influx in chinese downloads
Go to the `Featured` section of `User Acquisition` and it will tell you which store, and which section of the App Store it was featured in. Someone in the App Review team must have liked something you built and decided to give you free advertising.
Sites like this one: http://appsliced.co/apps?sort=latest Site automatically lists apps with huge price drops... Maybe you lowered app's price and your app got listed on some site. You can check traffic details in iTunes connect. 
I like the conciseness of this, and maximizing built-in Swift functionality. The things I most don't like about this are the abbreviations (`filterV`,`filterC`), the fact that you didn't wrap it in a function, and that if we needed to apply this logic to a massive amount of exceptionally long strings, we've lost some efficiency in that we're check every letter twice (and this becomes progressively worse if we also want to add other groups to filter out). But overall, I'd be pretty pleased with this answer.
Well, look for weird user behavior. Is your app the sort of thing someone could cheaply outsource some repetitive task for? Could someone be gaming a reward system? Or could someone be using a feature of your app to automate some other third party tool? I work in Hong Kong and we see this sort of sudden traffic come out of the mainland every once in a while. Sometimes you struck gold because some celebrity mentions an app (usually on Weibo) and the market rushes it; sometimes someone figures out a scheme to make money or use a tool to exploit something, so they send it to a click farm and one guy in China with 900 phones is now automating some task. See if you can monitor the activity from those accounts for a pattern. Also, the Chinese give everything nick names. The reasoning for that is complicated. Your app might have a completely different and unrelated name in Chinese that you don't know which is why you don't see it on social media. You might consider adding a Chinese service for account creation or authentication: Baidu might be a good shout. Then you could at least tell who some of these users are. Can you tell if they're using the Chinese app store, or are they using foreign accounts? Perhaps the immigrant/expat community had discovered a love for your service all of a sudden. Finally, know that the Great Firewall works in both directions. You may need to VPN into China to get results.
I like the organization of this answer. The best part about paying attention to this sort of stuff in an interview situation, especially if this just comes pretty quickly and naturally, is that no matter how well the rest of the answer looks to the interviewer, you have clearly signaled that you keep your code organized, and it helps readability. But with that said, I believe we've over-engineered our solution by using a regex in a loop to check a single character. If I saw this in an interview, I'd expect we discuss your use of regex a bit. Also, I'm curious about the categorization of y... I'd hope if this were an actual interview you might have asked about how to categorize it and not simply assume it to be a vowel.
&gt; So my solution will fail on things like é which is a vowel but not an ASCII vowel. Only if non-ASCII are input, which as we discussed elsewhere, the business rules could easily say they're not going to be input. ;) My only question about this code in an interview setting, after you no-doubt raised your stink about the non-ASCIIs would be to ask you how you'd change the code if the business requirements specified that non-ASCII such as é or ñ should be filtered out as if they were punctuation.
I'm not a particular fan of the depth at which we've nested things, however, noting: &gt; Well, that's what I did at first. And of course, I got a comma and a space in my consonants array. Assuming I was watching you write this live, I'd know exactly where that extra depth came from. I think the first question I'd ask about this code is comparing these two lines: if vowels.index(of: c) == nil { if (c &gt;= "b" &amp;&amp; c &lt;= "z") || (c &gt;= "B" &amp;&amp; c &lt;= "Z") { For vowels, we're looking for a character in a special string we defined. For consonants, we're comparing alphabetic order of characters (as strings). I'd be interested in hearing the candidate elaborate on the difference or a simple explain as to why not build a "consonants" string like vowels.
Click farms would be my guess, almost every release I have the 1st downloads are from Asia but my typical usage patterns show me that my apps are used in the americas and europe 
&gt; The things I most don't like about this are the abbreviations (filterV,filterC) That's the only thing I'd change, I wasn't pleased with them either. I started with c and v, then vwl and cns, then came up with something more descriptive referring to the filters but were too long for my taste filterVowels and filterConsonants (since vowels and consonants were already taken) then I said fuckit, deliver! so I trimmed them to what they are. But if I had to refactor for readability I'd use allConsonants and allVowels for the constants, then use vowels and consonants for the temps.
I like the `extractValidCharactersFromString` method which extracts some reusable logic. However, in an interview setting, while I'd compliment the organization and extraction of this scenario, I'd expect to get into a conversation about the efficiency of this. (How many times is each character checked?) What I'd be particularly interested in is if you can figure out a relatively minor change to the `extractValidCharactersFromString` method that would allow it to check any number of sets of characters and return all of the completely sorted groups.
&gt; AppAnnie.com I made the account and checked it but now it shows no data or records for being featured. Originally when it said 1 country that was before I had an account. After making it and going into the dashboard, now there's nothing. Do you know why there may be an inconsistency here?
I'm quite sure you could have done a number of things on your third line to create `vowelList` as a character array, but the simplest should just be: let vowelList: [Character] = ... That small change simplifies the thing that bothers me most about this solution (using the iterator item as two different types for functionally the same thing basically). However, that also makes `lowercased()` not work, I believe, as that isn't defined for the `Character` type (as far as I know). I really like this line though: else if "A"..."Z" ~= rawCharacter || "a"..."z" ~= rawCharacter 
I dont think so. There are no in app purchases or anything, and its just a simple game that couldn't be used for anything else than just its own playing. As for the other things you mentioned I'll try to look into that tonight
Interesting site never heard of it! But it's free so im assuming this doesn't apply. (oh boy it would have been nice if it wasn't free for this spike)
If I saw this in an interview, my concern would be that you were going out of your way to show yourself as clever and done at the expensive of readability. This code is particularly dense. I'd be satisfied that it was a working solution, but the rest of the interview would be pretty important. This may have been the first thing that came to your mind, and if so, find. But I would encourage you to self-reflect on this and consider whether you intentionally set out to write a particularly clever solution, and if so I would discourage that in interview settings.
I am never interested in code golf in an interview. The other solution is satisfactory, but runs into the same issue I've commented on with other solutions. It can be inefficient with particular long strings and when needing to check large groups of strings, because you're checking every character twice. However, what I do particularly like about this solution is that it is the first to make use of extensions and identify a string's vowels or consonants as a property of the string itself.
Using "all" is certainly better than "filter", as these variables aren't holding a filter. ;) A filter would take a character and return a bool. let vowelFilter: (Character) -&gt; Bool
No idea. Couldn't see anything when I logged in either.
You'd get a raised eyebrow first with "seriously, vowels?" But ok if that is your "business rule" then you please provide a definitive definition of all characters you calll "vowels" with their Unicode code points so I can define a CharacterSet. Or, I'd have to do some reading to see if there is a nifty trick in Unicode for testing the lower 7 bits (I have an inkling that these are same as ascii with higher order bits indicating the diacritical - maybe - need to look it up to be sure)
Hi FastPathToFit! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/6vbgbh/just_released_say_what_you_see_emoji_please_check/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Thanks I'll check it out 
&gt; then you please provide a definitive definition of all characters you call "vowels" Haha. At this point, I'd be pretty happy, because this is also how I deal with product owners... https://www.youtube.com/watch?v=BKorP55Aqvg
Check out Vapor. I have a web API built in Swift that I deploy to a dokku instance via git push. It's really come a long way.
Oh, I missed that. Why do you say that Paddle is trash? (I don't really know anything about them.)
Yeah. That's the one. Got a little math, a little code structure, and typically leads to refactor opportunities. I don't want them spending 30min actually writing the code. I want to spend 30min discussing what they wrote and why. 
What are the things you feel should have been changed? (I suspect "too many access levels" will make the list.)
Same here. A few of my apps had large spikes throughout this week with 100% of the downloads coming from China. They aren't viewing the product page, just downloading the product.
 var str = "Hello, playground" let allVowels = Set("aeoiuAEIOU".characters) func split(_ string: String) -&gt; (String, String) { let consonants = string.filter { !allVowels.contains($0) } let vowels = string.filter { allVowels.contains($0) } return (consonants, vowels) } split(str) .contains is O(1) because it's a set, so I think this is as efficient as it gets.
Look at your output.
~~I get: .0 "Hll, plygrnd" .1 "eoaou" Is this different from what you expected?~~ Oh forgot the punctuation
Nope, I do in-app purchases and the analytics show that the spike downloads haven’t correlated to app-usage
 let allVowels = Set("aeoiuAEIOU".characters) let allConsonants = Set("bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWYX".characters) func split(_ string: String) -&gt; (String, String) { let consonants = string.filter { allConsonants.contains($0) } let vowels = string.filter { allVowels.contains($0) } return (consonants, vowels) } Fixed it. I think this is the cleanest way to do it, but using a for loop might be more efficient because you can build both strings after iterating through the string only once.
Can I ask why? Coming from java, I can only be grateful that I've been saved from the NullPointerException.
The Objective-C handling of nil values was much more graceful, and allowed equally safe code with much less boilerplate. You got the job done faster, with less code, and just as safe. This'll upset some optionals fans no doubt, but to put it bluntly, optionals (as compared to Objective-C's nil handling) only provide benefits to sloppy programmers who never learnt to handle their own shit. Objective-C's approach instead let competent developers work fast, build in the necessary safety as needed, and not have to suffer needless hurdles slowing them down along the way. Basically optionals make everyone work slower, while only providing a benefit to the bottom rung of programmers who weren't capable of handling that basic level of safety themselves. Objective-C had it right. 
&gt; Working with unicode scalars was surprisingly frustrating Boy you can say that again. I figured I'd bang this out in 3 minutes flat. I wasn't watching the clock closely, but I'm not confident I clocked in under the 30 minute deadline, and about 25 minutes of that was digging through the docs trying to figure out how to make characters and character sets play nicely together(something I've done repeatedly without difficulty in obj-c). Feeling like an idiot i then immediately did the identical problem except with arrays of numbers rather than strings and it took almost exactly the 3 minutes I had originally expected.
That's fair, but in my opinion, if something can be checked by the compiler, it should be. Compile-time issues are easier to debug. Additionally, optionals are self-documenting; if you're using code written by someone else, you no longer need to check their docs (or worse, comb through their undocumented code) to see if you need to check for nil values.
I'm not a language purist or language academic, and intentionally so. My job is to build product. My job is to get it done fast, clean, and maintainable. Optionals only get in the way of that process. It's as simple as that. They have a cost, and that cost far outweighs their benefit. They make the job slower, and they don't result in any measurable reduction in faults. If they *do* result in a measurable reduction in faults for a particular developer ... I would regret hiring them. 
Yea, it's pretty silly to me that something named CharacterSet doesn't play nicely with Character. 
 func sortConsonantsAndVowels(_ input: String) -&gt; (consontant: String, vowels: String) { let vowelsSet = CharacterSet(charactersIn: "aeiouAEIOU") let othersSet = CharacterSet.whitespacesAndNewlines.union(CharacterSet.punctuationCharacters) var consonants = [String]() var vowels = [String]() for char in input.unicodeScalars { if othersSet.contains(char) { continue } let str = String(char) if vowelsSet.contains(char) { vowels.append(str) continue } consonants.append(str) } return (consonants.joined(), vowels.joined()) }
Also have had a huge spike of downloads from China on two of my apps. Highly doubt that they are using it.
Yea im thinking the same thing. 
I've never used UIPageViewController so can't really tell you anything about it, but what I can tell you is that you can also use a UICollectionView to achieve this, or adding swipe gestures as well. I actually wrote a function for this a while back but not sure if it's good... // this is when you don't have a navigation controller and can't really use.push public enum TransitionType { case left case right } public func transitionTo(_ fromCurrent: UIViewController, to: UIViewController, type: TransitionType) { switch type { case .left: let transition = CATransition() transition.duration = 0.2 transition.type = kCATransitionPush transition.subtype = kCATransitionFromLeft fromCurrent.view.window!.layer.add(transition, forKey: kCATransition) fromCurrent.present(to, animated: false, completion: nil) case .right: let transition = CATransition() transition.duration = 0.2 transition.type = kCATransitionPush transition.subtype = kCATransitionFromRight fromCurrent.view.window!.layer.add(transition, forKey: kCATransition) fromCurrent.present(to, animated: false, completion: nil) } }
Over and above all possible technical explanations: I'm in an interview and you're sitting there watching me write code. What's already on my mind is that you're probably sick to death of watching interviewees write these trivial functions over and over, and I want you to like me, so I don't want you to associate me with tedium. With any luck, I'll get the task done more quickly than you're used to, and you'll associate me with positive feelings. I'm already thinking along these lines when you use phrases like "if you finish early, great", and even, "Whether or not the code compiles is not actually that important." So I'm not going to ponder the design for long; I'm going to crank out something that satisfies your input and output requirements. In the interview, I'm trying to demonstrate to you that I am "getting the gist of the problem", as you have emphasized even over clean compilation. I want to show that I know how to think about the problem and how to approach it in code. If I were to take my time with the problem, I would spend a few minutes researching how to do case-insensitive regex with Swift strings, and then do an [aeiou] match followed by a [b-z] match, eliminating the nesting issue in the process. Of course, then the question could remain: why use a specially-defined string for vowels but a range for consonants; the reason is that a range is preferable to a long string, as it more clearly expresses the intent of the code.
/u/Kommmbucha requested this tutorial on basic data modelling in swift with firebase. Hopefully this and the code example will suffice, please comment either here or there and let me know what you think!
Someone might be able to correct me since I've used CoreMotion for about an hour total at a hackathon, but the best way to find total acceleration is to take the magnitude of the vector sqrt(x^2 + y^2 + z^2) since that's a scalar independent of direction.
Yes, access levels. Also I wish that they had changed `func f() throws` to `throwing func f()`. It was proposed but rejected for being breaking with not enough benefit.
This is handy, I'll need to implement something similar soon. I'll just have to think about the best way to change it to find the n shortest paths. 
For what it's worth, `c &gt;= "b" &amp;&amp; c &lt;= "z"` is going to be more efficient. ;)
I'm not OP but I've read the Intro to App Development with Swift first and then App Development with Swift. I've used The Swift Programming Language book like a guide while I worked my way through those books. It's helped a lot.
Also watch and try to follow the Stanford videos, I've been watching them on the bus right home(1.5 to 2 hours) and I've been surprised at how much I've retained from just listening/watching. https://www.youtube.com/watch?v=ilQ-tq772VI&amp;list=PLPA-ayBrweUz32NSgNZdl0_QISw-f12Ai
Try the one I wrote: [Hacking with Swift](https://www.hackingwithswift.com/read).
Hi, thanks for the kind words :) If you'd like to find the n shortest paths to the same destination node: My suggestion would be to create an array of "shortest paths" and adding a new path every time we reach the destination node. After your "n" threshold is met the algorithm shall return the array. If, instead, you'd like to find the shortest paths to n nodes: the idea would be to keep running the algorithm until all the n nodes have been reached (and obviously keeping track of the quickest path for each of the n nodes). Both variants require little tweaks from the article's algorithm: best of luck on your project! :D
When you type `group = [String]()`, you're assigning an empty String array to `group`. This empty array is the value entered the title key. In Swift, Arrays are structs, which means that you're correct in that a copy of the array is stored rather than a reference to the same array. Appending to `group` after assigning its value to the title key in the dictionary will not affect the dictionary. [Read more about the differences between classes and structs here.](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html) In your second example, you modify the dictionary's value for the title key, which achieves the behavior you're looking for.
baseline 
Thanks!
Ah yes, equally safe. So, uh, about that... &gt;/\*You may replace 'Magic' by any object or struct type\*/ &gt; &gt; \- (void)doMagic:(Magic \*)magic { &gt; if (magic) { &gt; /\*\*/ &gt; } else { &gt; /\*\*/ &gt; } &gt;} A fun challenge to those that think they know their Objective-C: pass this a non-nil value that causes the else branch to be taken. No cheating and using a reasonable architecture like ARM64, now! (Hint: it is often not the case that [OBJC_BOOL_IS_BOOL](https://developer.apple.com/documentation/objectivec/objc_bool_is_bool?changes=latest_major&amp;language=objc)).
As you can see I already change the baseline of the bullet icon. However it ends up increasing the height of the line it's in, which is precisely what I'm trying to avoid :/
Yes, equally safe. What matters is developer time, and customer experience. How much developer time is being spent fixing a certain class of problem, and how much user frustration is being caused by a certain class of problem. Optionals do not measurably reduce either of those. Yet optionals come with a high cost in developer time. The cost benefit ratio is a failure. 
I'd be interested to hear where you think a lot of that cost is coming from and whether a lot of it is simply the startup cost associated with learning a new language and not necessarily a modeling problem on Swift's end.
It adds more boilerplate code, and it requires explicit considerations that could have been skipped over as unnecessary in Objective-C. So it's not really about language newbies, because the costs still remain for developers who're familiar with Swift. (I've been doing Swift full time for two years now, and I'm still experiencing the time costs daily). Objective-C nil handling allowed you to write less code for the 90% of cases where extra safety wasn't needed, and only have to write the extra safety code in the cases where it actually served some necessary purpose. But in Swift you're *always* having to go though the nil safety boilerplate, whether there is ever any potential risk or not. And in almost all cases, there was no risk, so it's simply wasted time. In Objective-C a competent programmer would stop to think "if this comes through as nil, there will be pain", so they would write the necessary safety code. And in practice the overwhelming majority of cases didn't fall into that danger basket, so the extra work wasn't necessary, and the product got built faster (and with an equivalent faults rate). The more strict a language is, the more "safe" a language is, the more time cost there is in dealing with the restrictions and extra code required by that safety and strictness. There is always a cost. The belief is that that cost comes with the benefit of greatly reduced fault rates, thus a better end product. But the reality is the kinds of faults optionals reduce were never (or should never) have been frequent enough to justify the cost. Note: This is comparing Swift to Objective-C. Other languages have different sets of problems, and optionals may be a step up for some developers coming from some other languages. But from Objective-C to Swift, optionals have not paid off.
Anything that's "still" on earth is accelerated downwards by gravity. The accelerometer would measure 0 if the iPad is in Space or if it is in free fall. Measuring the "down" acceleration that comes from gravity is how the iPad figures out which orientation it's in. 
You raise some excellent points. I'll respond inline: &gt; It adds more boilerplate code, and it requires explicit considerations that could have been skipped over as unnecessary in Objective-C. In my experience as a grumpy old Cocoa programmer, this lack of explicit consideration is a bug, not a feature. Error handling is an afterthought in Objective-C, relegated to out-parameters of functions, fatal exceptions coming from across framework boundaries, or rampant use of nil as a light step up from boolean blindness. &gt; Objective-C nil handling allowed you to write less code for the 90% of cases where extra safety wasn't needed... If you find yourself in such a position, maybe it would be best not to model the problem domain with optionals. You're absolutely correct that most Objective-C and Swift code definitively initializes a value (say, in -init) and keeps it alive - in that case I see no reason to even have the concept of nullability in those APIs. &gt; The more strict a language is, the more "safe" a language is, the more time cost there is in dealing with the restrictions and extra code required by that safety and strictness. If the argument is that "truly competent programmers don't make mistakes" I'm going to have to disagree with you quite vehemently. Especially in a late binding dynamic language, where the notion of any kind of guarantees of stable runtime behavior is, quite literally, not what the language was built for. Objective-C especially suffers from aggressive cargo-culting of design micro-patterns to work around a lot of these deficiencies in its semantics, so there is boilerplate to be had in both cases.
&gt; In my experience as a grumpy old Cocoa programmer, this lack of explicit consideration is a bug, not a feature. I'm rusty on the history, but I'm fairly sure it was an intentional decision. And one that I think was the right call. &gt; If you find yourself in such a position, maybe it would be best not to model the problem domain with optionals. Avoiding optionals also comes at a time cost. Again, it creates extra boilerplate and enforced structural changes that would otherwise be unnecessary. And sometimes (like in the case of remote data), getting from optionals to non optionals can be an unclear path, thus further complicating the process of avoiding optional properties and vars. The cost increases. &gt; If the argument is that "truly competent programmers don't make mistakes" I'm going to have to disagree with you quite vehemently. Everyone makes mistakes. It's about what *kind* of mistakes they make. The kind of problems that optionals solve are the kind of problems that competent developers didn't (or shouldn't) have. I'm very much a believer in [YAGNI](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it). But safe-by-default languages enforce a pattern of writing safety for every case, regardless of whether any safety checks would've been necessary. It may end up being the case that 90% of the safety code in a project was entirely unneeded, but you're going to have to write it anyway. It's the age old debates about strict vs loose and dynamic vs static. There's languages spread across the entire spectrum, and everyone has their preferred place on said spectrum. I believe that the most efficient and productive languages lie at some shifting point in the middle. There are performance tradeoffs that come with dynamic language features, so some of them get lost to performance considerations, which I'm happy to concede most of the time. But it's frustrating to lose language ease and productivity to [what I perceive to be] ideological goals rather than pragmatic goals. Many of Swift's foundational principles are ideological choices, rather than a response to genuine common problems. Of course Swift has plenty of language features that *do* solve common problems and complaints, and I appreciate working in Swift because of that. Optionals however do not benefit me, they only slow me down. To me they are one of the programming world's rosary beads. They give people a sense of comfort and safety, without necessarily providing any significant measure of improved results. 
**You aren't gonna need it** "You aren't gonna need it" (acronym: YAGNI) is a principle of extreme programming (XP) that states a programmer should not add functionality until deemed necessary. XP co-founder Ron Jeffries has written: "Always implement things when you actually need them, never when you just foresee that you need them." Other forms of the phrase include "You aren't going to need it" and "You ain't gonna need it". *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/swift/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.26
Some feedbacks: * Your algorithm's running time is O(n^(2)log(n)) where n is number of vertices. * You could avoid sorting and replace it with finding minimum in the array, it will bring running time down to O(n^(2)) * Furthermore you could replace the finding minimum with a data structure which can find minimum value in a collection at O(logn). Which will optimize to O(m*log(n)) where m is number of edges.
&gt; and if so I would discourage that in interview settings. Or indeed, almost anywhere.
I have the same problem, you are not alone.
 * if n shortest paths means the shortest path between each pair of vertices, it's better to use [Floyd-Warshall algorithm](http://go/wiki/Floyd%E2%80%93Warshall_algorithm). Which is simpler and running time is O(n^(3)). * If you mean k-shortest paths between one pair of vertices then [Yen's algorithm](https://en.wikipedia.org/wiki/Yen%27s_algorithm)
**Yen's algorithm** Yen's algorithm computes single-source K-shortest loopless paths for a graph with non-negative edge cost. The algorithm was published by Jin Y. Yen in 1971 and employs any shortest path algorithm to find the best path, then proceeds to find K − 1 deviations of the best path. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/swift/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.26
I totally agree with the sorting part. Since the array is always sorted except for the very last entry, I assume it won't take long to sort it (well, depending on which algorithm is used to sort). I understand your first suggestion "finding minimum", but I don't understand the "data structure" one: would you please elaborate more? Thank you in advance. Federico
There are many algorithms that can perform operations such as add/remove/min at O(log(n)), I will list two of them: 1. [Priority Queue](https://en.wikipedia.org/wiki/Priority_queue) - you can find swift implementation here: [Code](https://github.com/davecom/SwiftPriorityQueue/blob/master/Sources/SwiftPriorityQueue.swift). And an example implementation of Dijkstra's algorithm using priority queue [Code](https://github.com/davecom/SwiftGraph/blob/master/Sources/Search.swift#L249). 2. [Binary search tree](https://en.wikipedia.org/wiki/Binary_search_tree). Oh, it should be a balanced one, otherwise it will perform operations worse than O(log(n)), for example [Red-black tree](https://en.wikipedia.org/wiki/Red–black_tree) or [AVL tree](https://en.wikipedia.org/wiki/AVL_tree). Swift implementation: https://github.com/raywenderlich/swift-algorithm-club/blob/master/AVL%20Tree/AVLTree.swift 
**Priority queue** In computer science, a priority queue is an abstract data type which is like a regular queue or stack data structure, but where additionally each element has a "priority" associated with it. In a priority queue, an element with high priority is served before an element with low priority. If two elements have the same priority, they are served according to their order in the queue. While priority queues are often implemented with heaps, they are conceptually distinct from heaps. *** **Binary search tree** In computer science, binary search trees (BST), sometimes called ordered or sorted binary trees, are a particular type of container: data structures that store "items" (such as numbers, names etc.) in memory. They allow fast lookup, addition and removal of items, and can be used to implement either dynamic sets of items, or lookup tables that allow finding an item by its key (e.g., finding the phone number of a person by name). Binary search trees keep their keys in sorted order, so that lookup and other operations can use the principle of binary search: when looking for a key in a tree (or a place to insert a new key), they traverse the tree from root to leaf, making comparisons to keys stored in the nodes of the tree and deciding, based on the comparison, to continue searching in the left or right subtrees. On average, this means that each comparison allows the operations to skip about half of the tree, so that each lookup, insertion or deletion takes time proportional to the logarithm of the number of items stored in the tree. *** **Red–black tree** A red–black tree is a kind of self-balancing binary search tree. Each node of the binary tree has an extra bit, and that bit is often interpreted as the color (red or black) of the node. These color bits are used to ensure the tree remains approximately balanced during insertions and deletions. Balance is preserved by painting each node of the tree with one of two colors (typically called 'red' or 'black') in a way that satisfies certain properties, which collectively constrain how unbalanced the tree can become in the worst case. *** **AVL tree** In computer science, an AVL tree is a self-balancing binary search tree. It was the first such data structure to be invented. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Lookup, insertion, and deletion all take O(log n) time in both the average and worst cases, where n is the number of nodes in the tree prior to the operation. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/swift/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.26
Thanks, I've updated the article with a disclaimer at the bottom 🤗 PS I don't know who is downvoting you: you're 100% correct and you're helping a lot 🤷‍♂️
Thanks, I just wanted to share in case someone will find it useful :). PS Probably my english language makes difficult to understand.
hate: strings love: extensions so I can fix strings \* Swift 4 will fix them for me
Is there a way to mark up the Swift array so it's passed by reference and not value?
Looks great! Got that iTunes feel
Thanks! If you have any requests for features feel free to post them here or PM me.
This would probably be really complicated and difficult, first you would need to learn html, javascript, php and write a program that somehow finds every video on youtube and then somehow finds it's genre. I don't know if youtube has any sort of API for using it's data, but i don't think so. I think you should start with, idk a calculator app?
As drizzletoed explained, your problem is that Swift arrays are value types, not reference types. As an alternative, you could just build your arrays in place: for element in myData { if (element.hasPrefix("_")) { // This is a title, create a new group array to dump following elements. // Set the empty array in the dictionary, keyed as the title. lastTitle = element GroupsForTitle[lastTitle] = [String]() } else { // This isn't a title. Add it to the end of the current group array. GroupsForTitle[lastTitle]?.append(element) } } Also, don't use semicolons in Swift code, and call it groupsForTitle instead, as the convention is to use camelCase for instance names and CamelCase for type names.
The PHP code is as follows : &lt;?php // Input data $total_duration_seconds = 5155; $distance_km = 10; // Calculating decimal value $decimal_pace = ($total_duration_seconds/60)/$distance_km ; var_dump($decimal_pace); // Calculating time pace $duration_seconds = ($decimal_pace * 100 % 100)*60/100; $duration_minutes = $decimal_pace % 60; $duration_hours = floor($decimal_pace / 60); // Format pace $time_pace = (sprintf("%02d", $duration_hours) . ':' . sprintf("%02d", $duration_minutes) . ':' . sprintf("%02d", $duration_seconds)); ?&gt;
OK, we've seen the code, so that's a good start. But, your problem statements are: 1. "I've gotten no luck getting the 00:00:00 counter to work" 2. "the second option also looks extremely sloppy" why not tell us what does work and what doesn't? Is it crashing, is it not returning anything, is it returning the wrong numbers, is it formatted incorrectly? Something looking 'extremely sloppy' is a value judgement; what looks sloppy? Why not show us what it looks like and what you'd like it to look like (ie the 'unsloppy' appearance)? Finally, you are being told 'they' don't like it. I'm guessing 'they' are the customer. Well, if 'they' told you to put this in, then this must be what 'they' want? Sometimes, as difficult as it is, you have to accept that the one who pays the piper gets to call the tune. 
Not working as in the hours, minutes and seconds are receiving the corresponding decimal values but are not getting converted hence the 00:00:00 never gets modified , nothing crashing simply not working.. and I'm looking for opinions, I can actually leave the current pace as it's working but I'd like to hear others opinions on this.
[Here is a good article](http://nshipster.com/wkwebkit/)
I wrote a project that serves as a [nice introduction to WKWebView](https://www.hackingwithswift.com/read/4/overview) – you could start there.
Put your function in a playground (remove the static). Then call the function passing appropriate values. You'll see that _everything_ is 0. I called it with duration of 50_000 and distance of 10. I get 23:00:00 as a result. I think the problems have to do with doing integer arithmetic; try using some floats or doubles and I think things might work better.
Can't wait for this to be out of beta. I am a .Net dev and coming to VS to Xcode I really miss the level of refactoring that VS offers. All we need now is the ability to generate method stubs.
thank you 
thank you
This might help you. Link to the original [question](https://stackoverflow.com/questions/11315416/how-do-i-get-a-random-youtube-video-with-the-youtube-api) Eventhough the website is down meanwhile. "As the owner of http://www.youtuberandomvideo.com/ I just randomly generate a few characters then search for v= and it returns all videos that have a video ID that starts with . Once I have the results I just randomly select different videos."
A couple friends and I just released our first app on the app store. It's called [Stack](https://itunes.apple.com/us/app/stack-find-resources-for-learning-any-topic/id1266983230?mt=8). It's a resource tracking and sharing app that you can chat through. It has a reddit like voting system that allows the best resources as chosen by the community to float to the top of their particular category.
Hi bqmoreland! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/6vmaw8/ive_just_put_my_first_app_on_the_app_store/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Yeah sorry about that, I wanted to avoid listing AEIOU too for Character in hindsight this is probably a cleaner solution let vowelString = "aeiou" let vowelList = (vowelString + vowelString.uppercased()).characters would also let me not repeat the aeiou and drop the string operations in the loop body 
Happened to me too: all my three apps around 60 downloads a day from China. Usage is same as before. So they are not using the apps. Wondering what is going on.
Wow, I used to be so annoyed this wasn't a feature, what a great idea! I wish I thought of it. :)
What does your portfolio look like?
Thanks! I mostly wanted it because sometimes I only use the mouse and I want to change the volume or see which track is currently playing.
Quick question. I'm teaching an iOS development course and have been considering switching to apple's official syllabus next semester. Did you have any prior experience coding? Any knowledge at all? 
The main reason why I use NSLayConstraint is subclassing. Creating the same tableview in storyboards over and over again can become a pain.
I have about 1.3 decades of prior coding experience (HTML, CSS, PHP, MySQL, MATLAB, Fortran). Up until Chapter 4, I've loved this curriculum. Now, the instructions seem to be missing steps or assuming I know more than I do. Also, I can't seem to find a forum of other people working through it, which makes finding answers to the questions more difficult. (Hence, this post.) As far as getting acquainted with the environment, I'd say it's great! 
You would be surprised how much you can do by just downloading the html code of a webpage (which is easy) Have you ever used chrome, right clicked, then clicked inspect element? U can then dick with the html of that page. If u kinda just understand where the information is in that html document, u can just parse it and search for "genre :" or whatever and the data u want is after it. You just gotta find it first. You can use this to get a crap ton of info on the video including a link to the thumbnail, and all sorts of other things
This is great! Nice job.
Look into child view controllers. You can separate the view's logic and put it into its own controller and then just add the view wherever you need it in your controllers.
As someone who regularly hires new/young iOS developers that have limited experience, the ones that have been the most attractive candidates and worked out the best for us are those who have built and published an app (or more in their spare time). Ideally the app should have a couple of screens and actually be of some value, and make some API calls, etc. I will review it prior to interviewing, and during the interview ask questions regarding architectural decisions, decisions that worked out well, parts of the app that you would want to revisit and do differently (I will follow up with why/how). What is next on the roadmap (and how you'll implement it). I may throw out feature ideas, and ask you how you might go about implementing it. A github account is great too. I can review their code, and ask questions, etc. But I feel like the extra effort to get something published teaches a lot about shipping and practical aspects of software development beyond just writing code. I basically do the same for any dev portfolio regardless of platform.
Cool, thanks. How would that work if I wanted to create the UI for the parent view controller non-programmatically? Like in the storyboard or with a xib?
Not particularly different from anyone else's: import Foundation extension CharacterSet { func filter(_ s: String) -&gt; String { let filtered = s.unicodeScalars.filter { contains($0) } return String(filtered.map { Character($0) }) } } func sift(_ input: String) -&gt; (consonants: String, vowels: String) { let vowels = CharacterSet(charactersIn: "aeiouAEIOU") let consonants = CharacterSet.letters.subtracting(vowels) return (consonants: consonants.filter(input), vowels: vowels.filter(input)) } print("sift(Hello World): \(sift("Hello World"))") I also found the `Character`/`CharacterSet`/`unichar` business to be an infelicity.
What 'Curriculum' are you doing? Is it a book? Or like... A full Curriculum? As far as I've read (I'm like half way though) in Swift Programing The big nerd ranch, it's started out very basic and ramped up at a good pace. A little slow for someone like myself as it's my 4th proper (Obviously I'm not counting things like LOLCODE and Brainf@#) language. But I can see it being very good for people stating out with no experience in something like java.
It's nice app, looks great, works well... Except it intermittently disappears from the menu bar. It'll be there one second and gone the next, with no predictability. 
It works well; I use storyboards/xibs as much as possible and have no problems with parent/child view controllers. A recent example is an app where, on startup, I have to allow them to switch between logging in (if they already have an account) or registering (to create an account). About 3/4 of what the user sees is in the parent view controller consisting of branding and a bit of static text as well as a segmented control to choose login | register. Then there's a view in the centre where I switch between displaying (with appropriately whooshy animations) login or register child view controllers depending on the user's choice. Beware, there are a few pitfalls to parent/child view controllers: 1) coordinating the leaving of one child and the arrival of another is a multi-step process and, consequently, harder to get right than calling a single method 2) they were invented quite a while ago and for about the first 3 years they kind of changed drastically as Apple invented newer (usually easier!) ways to do things, or changed their minds about how parent/child view controller relations should work. Thus there are a lot of old examples that are no longer pertinent. 3) just about every bit of sample code I have seen has mistakes in it. This usually has to do with having one or more steps of the multi-step process out of order. For example, arranging the code such that calling the child appearance methods (view[Will|Did]Appear, view[Will|Did]Disappear) occur in the correct order. Please note, I'm not in any way saying this is hard or should be avoided; I _like_ parent/child view controllers and use them much more than most other devs I've worked with and believe that I suffer from view controller bloat and benefit from greater view controller flexibility as a result. 
Agree, and hope you're right. I'm eager but cautious because several years ago (before Swift) Xcode had some refactoring and it never really worked well and after a couple years even Apple admitted that it didn't work well, but they never removed the options from the menus. This time around it looks much more promising because of a lot of work that has gone into tightening up Xcode all around as well as because of the introduction of Swift and the resulting focus on code quality which that has made us all conscious and more capable of, both inside and outside of Apple. So, as I say, I'm eager but cautious. wrt generating method stubs. I realise it isn't the same thing, but have you looked into using custom code snippets as a sort of poor man's alternative? 
It's the curriculum Apple [put out in may](https://www.apple.com/ae/education/everyone-can-code/). There is a free iBook you can download. It is project-based learning, which I really enjoy, and it does a great job of introducing you to the Xcode environment. The instructions just seem to have gotten lazy in the fourth chapter. 
Just add a view in the xib/storyboars and mark it as a subclass of your child view controller.
You can customize the animation and also make it interactive using some API's. Check this link out https://www.objc.io/issues/12-animations/custom-container-view-controller-transitions/ And also the link that is first included in the article. It comes down to just making your own animator object for the animation.
I'm currently developing my first app! It's super basic, for now it will teach me how to count to 999 in Spanish. I'm planning on integrating the TTS and Speech recognition APIs to test my speech and listening abilities. Super excited :)
xcode provides built in localisation, use 'NSLocalisedString' instead of String and have .strings files for each language you support. If you do it all in english, then you can use a service ranging from $10-$lots to convert your english strings into other languages
I have a question about WKwebview is there a way to intercept request and replace it with my subtitute request ? 
Can you check if Spotify is playing a song/if any song is selected?
You can make custom buttons (/components) (inheritting uibutton) that will replace the text for localized text at runtime (in awakefromnib).
I have a few web apps built with rails and react.js/JS. I have nothing published related to iOS/Swift but was trying to get an idea of what someone int he field would be looking for.
Hey there -- Thank you sooo much for the amazing feedback. This is exactly the type of answer I was hoping for from the post. My hope is to have the app I'm working on with the course be published in the next 2/3 months to try and be ready for the January hiring period.
Thanks! Did you use a container few for the example you mentioned with the login screens? If so, were you able to control elements in the parent VC from the child (for example: changing the text of a label in the parent from the child)? Or is that something where you'd need to setup a delegate? Because when I tried to do it without delegates it just crashed with a 'returned nil when unwrapping an optional' error. My thought was that the label only exhists in one instance of the parent and not all of them, but how do I change that? Here's the layout that I last tried with the VC in the lower left being a child of the one on top: http://imgur.com/p3Tv936 Button is supposed to change the text of the label.
I'll do a little testing today. 
Agreed on all points - including that 360iDev is a fantastic conference, and [supporting](https://www.patreon.com/360idev) John and Nicole's mission to have affordable conferences that are high-quality. 
Not sure if he ever ported it to Swift, but Overcast is a pretty impressive podcast app made by one of the guys from Accidental Tech Podcast. 
Thanks ! can you share your journey so far. A brief summary of what you did after learning basic swift. I am learning swift from "The Swift Programming Language book" &amp; i cant find any practice questions on different swift parts i.e (control flow, functions, operators etc)...because there is a vast sea of things to be learned &amp; i am in a dilemma about what things i should learn next like there are views, JSON , WEB etc ..
Depends on how complex you want your app to be. I spent around three months making my first app, mostly in my spare time. It’s not impossible to finish something on your own, but you’re going to have to push yourself. If you want more advice, then feel free to PM me. I went from working in IT, thinking that I’d never learn how to program, to learning Swift, iOS development, and publishing an app. If you’re curious to see what I made, you can check out my app [here.](http://ahapp.co) 
Keep a copy of the unattributed string and track the state in clear, separate variables, thereby saving yourself time searching through a string just to get it back to a previous state.
Will it work if this mention's part will be edited? Cause in android's spannable even user changed text in it you can remove only it
Vaguely related but I've had a few conversations with the author, and he's been a really great help to many in the community. Thanks Brian!
Advice from somebody who has a 9-5 and has made some pretty complex apps by myself that took around 5-6 months or so (working on one right now actually, 4 months in): 1) Don't focus on how long it is going to take. Don't think about the end. 2) Think about the money you might make 3) Turn on rap music to further not give a fuck and think about money. 4) Smoke weed while programming and listening to the rap music to feel like a badass. 5) Keep going remembering nothing else matters besides money, because money is freedom in our society, and you only have 1 life. The older I get the more I realize the rappers were right.
I'm working on app for my high school that allows for students to see their stamps (reward system in our school) and attendance through a Firebase database. Students can compare themselves with other students on the leaderboard. I have also created a room finder. You type in the classroom you're at now and the classroom you're going to to see a map with a marker on the room you want to find and instructions from room to room (also utilising Firebase). Hoping to get the UI nailed, a login system perfected and weekly stats for students to track progress. Obviously not useful to people here but thought i'd share! TL;DR: i made an app for my school to view student data and get directions to a room in the school. 
no, you won't be able to connect like that. Quite aside from whether or not it would actually work, it isn't really terrific programming practise because you've got the parent kind of 'putting its guts on display' and the child rummaging around in said guts; they know too much about each other and inevitably when you changed one, you'd end up changing the other. Although one instance of interdependence isn't the end of the world, once you start down that slippery slope, pretty soon everyone knows everything about everybody else and nothing can change. So, best never to take so much as one step down that path. Yes, using a delegate would work well. As it happens, in the example I cited above, the children did have to communicate with the parent, but there was only 1 'message' each one had to send which was along the lines of "i'm finished and the user cancelled or succeeded with these data...", so what I did was when I received the prepare for segue in the parent, I determined which child it was and I set a property to a function in the parent. The child, when finished, would just call the function contained in that property and the function executing in the context of the parent, of course) would do the necessary work. Either a delegate or such a closure as I described above sounds like it work for you. My general rule is that if I have only one method (as in this case) i use a closure, but if I have multiple methods I define a protocol and use a delegate. However, I'm not advancing that as any kind of state-of-the-art programming philosophy! 
ay doo i feel you doe.
Shiiiieeetttt Edit: lol somebody not making money down-voted us. Poor dude.
When you ain't makin' money, you ain't gettin' no honey.
I don’t have much experience in design or doing mockups, but I’ve seen [Sketch ](https://www.sketchapp.com/features/) being thrown around as a suggestion in the past. It’s designed to do exactly what you want, so it may be an option for you. 
If I'm taking it seriously I'd start with pen/paper and then flush the design out in Sketch/Adobe XD.
If you go into your storyboard and select the *athlete cell* in your table view, then go to the right side panel and click on the attributes inspector (fourth icon from the left, near the top), you should see a field called "Identifier". Make sure that it's not empty, and that it matches the string being stored in your PropertyKeys.athleteCell. 
The frame property defines the size and location of a view within its superview's coordinate system, whereas the bounds property defines the view's size and location within its OWN coordinate system. [This Apple documentation](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CocoaViewsGuide/Coordinates/Coordinates.html) explains the difference with helpful visual guides. You're correct that you should always use frame to layout the position of a subview within its superview. It's rare that you would explicitly update the origin of a view's bounds; one example of that would be when shifting the content displayed in a UIScrollView. For example, if you have a scroll view with frame (0, 0, 100, 100) and the contentSize of the view is (100, 300), you could set the bounds origin as (0, 200) and the view would display the bottom 100 pixels of its content. 
Yeah, that's one of the many problems with the book/download materials (though one one of two major problems, rather than typos, that can keep you from finishing the lab). The notion of the PropertyKeys struct is introduced later in the book, in section 4.7. Basically, it's a struct with a bunch of static properties that hold values that you'll use in multiple places in your code. It can be advantageous, since if you ever need to change those values, there's just one location you need to change them at. Plus you can let autocomplete pull out the correct names for you rather than having to remember some string value… More or less it looks like: struct PropertyKeys { static let title = "title" static let text = "text" static let timestamp = "timestamp" } So it you need to refer to `"title"` a lot in your code (e.g. if monkeying with JSON that uses that string as a key), You can use `PropertyKeys.title` instead so if `"title"` were to become `"book_title"` you only need to change it in the struct's definition. In this exercise, the author is referencing some phantom PropertyKeys struct that was never before mentioned. For the one in step 5, you can determine from context that `PropertyKeys.editAthleteSegue = "EditAthlete"` From that, and the one you refer to above, you can guess that the struct looks something like: struct PropertyKeys { static let editAthleteSegue = "EditAthlete" static let athleteCell = "AthleteCell" // Or whatever identifier you used for the table view cell in IB // possibly other keys } You can either create that struct for yourself, or just replace the keys with the appropriate string. By the way, the other major sticking point is in section 5.7 where the materials you download come with a broken server and a malformed JSON file. Fortunately, [a fellow redditor provided a workaround for that problem](https://www.reddit.com/r/swift/comments/6l80gj/json_problem_in_app_development_with_swifts/).
I will offer two things: * From a development perspective, _complex_ and _simple_ are ambiguous and subjective, and perhaps deceiving. I advise you to not sweat it, and develop apps that meet a need you have. Even if it seems simple, my experience has always been that it will turn out to be much more complex than you first envisioned. * From a usability perspective, simple is _much_ harder than complex. Think about your app's interface from the perspective of your users. Think about how they hold the phone in the hand, how much work they have to do to accomplish a single task (e.g., how many screens they have to tap/swipe/etc), how intuitive the user interface is, etc. I think this is where a lot of developers struggle (and fail), and getting this will go a long way to making you a great developer, which, reading behind the lines, is what you're longing for.
Thank you much! Up until Chapter 4, I've really enjoyed the curriculum, but it seems to degrade in quality markedly in this chapter. I figured the `PropertyKeys.editAthleteSegue` was referring the to identifier `EditAthlete`, so I made that change. Still, something isn't working in the lab. Thank you also for the tip on section 5.7; however, I'm assuming you meant 4.7 (there is no 5.7)? ;)
Oh and I forgot one: 6) Rest easy knowing if you don't make any money you now have a vastly stronger resume for job security in future and you can tell chicks you made an app by yourself and they'll think you're a genius. So you get something from it no matter what.
&gt; I'm assuming you meant 4.7 (there is no 5.7)? ;) Whoops. I meant 5.6. The Restaurant project. 
Ah. Many thanks!
No one should even talk about `NSURLConnection` anymore, much less actually show it in use, especially with `sendSynchronousRequest`.
This. Using some old API and then suggesting two libraries you don’t need at all. 
Oh wow, that's incredible. 
Can confirm, Brian is a legit dude.
I almost stopped reading after seeing NSURLConnection, but I saw it included URLSession and Alamofire. I'd just advise that it's more preferred to do the latter two.
You can make an extension on string to get localized version of string. Make a .strings file and now you can add the different languages. Also I believe Apple provides translations for free if you give them the English text and the language that you want to convert to.
I found the webview to be really bad with cookie updates. It did update cookies for me but not every time.
Make different custom cells for different types i.e a 'VideoCell', an 'ImageCell' and a 'TextCell'. Then use autolayout to size the cells to their content. As for instagram, its a bit more complex because they wrote their own library for efficiently displaying different kinds of content in a list call IGListkit.
Thanks for the reply. I figured that popular apps had the money and developers to build a complete solution in house but I was hoping it wasn't the case. You gave a great suggestion and it's right in line with what I've been researching. I'm thinking that's my best option. Best,
I wrote a blog post about this a while back: http://blog.adamkemp.com/2014/09/uiview-frame-vs-bounds.html
I started making an open source calendar week view library for iOS applications. There doesn't seem to be anything like it yet. It's meant to follow the style of the mac calendar "week" view. You can find it on my [GitHub](https://github.com/EvanCooper9/swift-week-view)
this... exactly what I've been looking for
That’s incredible! I hope my fart app takes off just like his apps. I know what you’re thinking… Another fart app?! Never! Mine is an AR fart app. The future is here!
Hi, I am currently building a SDK to help developers making money from their app WITHOUT ads. So the user will me prompted sometime for a quick survey (when I say quick is quick, like 1 to 3 questions max) user can ignore easily by tapping elsewhere or answering. Developer can reward user if he want to. From our side, we will reward developer with money based on how many surveys had been prompted to the users. Survey are made from client that wants to know things about people. Think about ask your target market or survey monkey, but for mobile. Kind of hard to make this happens in swift, never did a framework on iOS before. And I had to mix c++ with swift for this. 
Great stuff, thanks for sharing!
Ideally there would be a `partition` function in the standard library. But even that would require looping a second time over one of the partitions because one partition would contain everything not contained in the first partition so all non-letter characters would have to be filtered out. If doing things twice is an issue, then this solution may be more satisfactory: extension String { var consonantsAndVowels: (consonants: String, vowels: String) { let allVowels = Set("aeiouAEIOU") let allConsonants = Set("bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ") return reduce(into: ("", "")) { (partitions: inout (String, String), character: Character) in if allConsonants.contains(character) { partitions.0.append(character) } else if allVowels.contains(character) { partitions.1.append(character) } } } }
Download from the url into data and create and image from the data. 
you can't prevent from launching app of course, but just making login screen requesting to server and saving login data would be enough to prevent further interaction for unwanted users
You mean, like a toast message in android? A popup alert with that text? A label on the screen?
I was just joking around making fun of myself as if the best I'll be able to come up with is a fart app. Sorry for the confusion.
Fetch the image in a separate thread and then update the UIImageView witth the fethched image DispatchQueue.global(quos: .background).async { // this happens in background thread let image: UIImage = ... DispatchQueue.main.async { // this happens on main thread imageView.image = image imageView.setNeedsDisplay() // I think this is the correct function } } EDIT : formatting
A label on the screen
Sorry for the really late reply. I started out with the intro book in late May since I had very little programming experience (I know how to use Scratch, and I did a little bit of Java programming in a class I took two years ago but I forgot all of the Java). I went through all of those lessons in the intro to app development curriculum first and did all of the exercises. I also made sure I understood everything in each lesson before moving on. It took me a little over a month to finish them all, but I know I could have finished them a lot faster. It took me so much longer because there were some days where I didn't do anything with Swift (and there was even a week where I didn't work on it). After that, I started to read The Swift Programming Language to build on what I learned from the intro book, and I also started reading the Big Nerd Ranch book on Swift (I didn't buy it, but I read it sometimes at a Barnes and Noble near me. I really want to purchase it because it's a fantastic book, but I'm waiting on them to release a new one on Swift 4 in the coming months before I purchase it.). More recently, I started reading the App Development with Swift book, and I really love how that book separates things into lessons and explains everything. I also recently started going through the Hacking with Swift lessons, and they are really great at explaining everything and teaching you more about XCode. During all of this, I also have been developing a simple password generator app to practice what I've learned, and I just recently finished it. All I need to do is figure out how to get auto layout and the constraints to work in order to have it work on all of the different iOS devices (I'm still very confused about how to get it to work). I have an idea for a macOS menu bar app, but I still need to figure out how to make it. If you're a complete beginner at programming (no experience or very little experience), I would recommend that you go through the intro book first. It teaches you some important concepts in a simple way, and you can finish it pretty quickly. Then, I would recommend going through the App Development with Swift and The Swift Programming language to really build on what the intro book teaches. You should check out the [Big Nerd Ranch's Swift Programming book](https://www.amazon.com/Swift-Programming-Ranch-Guide-Guides/dp/013461061X/ref=sr_1_1?ie=UTF8&amp;qid=1503669959&amp;sr=8-1&amp;keywords=Big+Nerd+Ranch+Swift), too, but if you're going to buy it, you should probably wait a couple of months for them to release a new edition on Swift 4 (if you buy this one on Swift 3, some of the syntax may be outdated when Swift 4 releases). [Hacking with Swift](https://www.hackingwithswift.com/) is also a fantastic resource. While you're learning how to program in Swift, you also need to make sure that you work on some kind of project/app so that you can practice what you're learning, so you should think of an idea for a simple app that you can make. I hope that you find this helpful. If you have any more questions, feel free to ask! Good luck with learning how to program in Swift! I've only been doing it for 3 months now, but I feel like I learned a lot in the last 3 months and that I've become pretty decent at programming in Swift (I still need to learn a lot more, but I'm definitely much better than I was 3 months ago.).
label.text = "output"
Ignoring error handling, reusability, and a lot of best practices, here's a quick and dirty solution let imageURL = URL(string: "https://upload.wikimedia.org/wikipedia/en/a/a9/Example.jpg")! let task = URLSession.shared.dataTask(with: imageURL) { (data, response, error) in guard let data = data, let image = UIImage(data: data) else { return } DispatchQueue.main.async { imageView.image = image } } task.resume()
https://blog.twitch.tv/native-chat-on-twitch-ios-79c1492eca06
Some cool ARKit stuff. Seems to be a really awesome place for this
True. Anyone can launch the app. I can't seem to find any good iOS swift code for LDAP login though. Do I have to use an Objective-C class and somehow shoe-horn it in?
Thanks!
Now it just shows output on screen
Not really, but if you really need pass by reference arrays (you don't) then you can always wrap one in a class. For example: public final class ArrayRef&lt;T&gt; { public var array: [T] public init(_ array: [T]) { self.array = array } } And then you can pass the ArrayRef around and it won't copy the array.
But why, why would they download them? My guess is they want the activity to look suspicious and apple to ban us developers.
Follow !!
I Googled `swift ldap library` and this was the first result: https://github.com/PerfectlySoft/Perfect-LDAP Sounds like it might be what you're looking for?
Thanks but I've seen this. It's a linux CLI project. I don't know how to use this for an iOS project. 
Go to iTunes U and start watching the Stanford video on swift. Each video is 1.5 hour and there are 12 of them. So you should be good to before 4 days :)
segue.destination is of type UIViewController, and if you want to access specific methods or attributes of your instance of AddEditEmojiTableViewController you’ll need to downcast it to that type. As long as you know for sure that segue.destination will always be an instance of AddEditEmojiTableViewController a forced downcast is okay.
Thank you very much 
Are you sure? It looks like a pretty general Swift library, and includes directions for including in your project.
jjuice117 is correct. A segue's 'destination' variable is of type 'UIViewController', which means it is of this type or a subclass of. Rather than using a force downcast here, I'd say it's safer to use 'if let vc = segue.destination as? MyViewController'. The destination will only be unwrapped if it is the type you're looking for. That being said, if your segue is hooked up properly then you can be assured it will be the correct type - I just prefer to be safe. Excuse the formatting, typed this on my phone.
If you have access to an iPad, download the Playgrounds app. Interactive Swift learning that's fun at the same time too :)
Because it doesn't know what kind of class the destination is. If you're using your own custom UIViewController class, then you need to tell it what kind the destination is, that's why you cast it.
I prefer to be safe as well. As a general rule, I never use a bang to force unwrap optionals. It's easy to think "it will always be safe in this situation" but it's easy to forget something and then all of the sudden...Crash! It's safe until it isn't. 
Yeah. There are places, such as this one with the segues, where the 'if let' sort of feels weird to type. I mean, what are you supposed to do if the optional binding fails? If the segue is hooked up properly, it will always work. So sometimes I'm torn... in this situation I may just use the bang because yeah it sort of doesn't make sense to test for the class type. 
Fair, but I find when you start making exceptions like this it's easy to start forgetting where you force unwrapped. As you add complexity this can spell danger. Also, when you add more segues to your VC you have to move to if lets anyway. 
Yeah that's true. In the case of segues, I'd have code to determine the segue's identifier anyway. Then after establishing what segue is being performed, it's safe to bang bang. Kinky.
Lol. Yeah that works. I personally use the 'if let' as the way to identify which segue it is. 
But what if you have two segues with the same destination? Much safer to use the identifier in my opinion. :)
Udemy has a bunch of classes that are less than 50 hours, I just bought 2 of them. They are on sale for $10 right now
Are you referring to the developing iOS apps videos that use Swift or are there Swift language Stanford videos? If it's just the iOS programming videos then I'd point him at the language guide under the [resources page](https://developer.apple.com/swift/resources/) provided by Apple instead (It's in the Swift Programming Language section). Most don't find the Stanford videos beginner friendly and that's a ton of content to try and absorb in such a short time. They also contain a tons of info on how to make iPhone apps which doesn't have much to do with learning Swift.
Haha that seems like a pretty rare case to me. But if I did have that situation I would 'if let' and then check the ID. 
You've only been learning for 2 weeks? I'm jealous haha. But also inspired. Keep it up!
I've been coding for 20 years, but nothing like Swift before. I've done some physics coding but it was all 2D. So when I say two weeks I'm not walking in as a newbie developer. But yea, I'm very excited about getting this far in two weeks. Thank you :)
One thing I noticed in your code is that you're creating methods and using them as getters. This isn't needed. Also, explicitly defining types isn't needed. Still, very impressive.
Habits from OOP web development, I haven't learned any proper training on Swift so I'm sure it shows haha. Learning as I go, thanks for the info!
Link?
 &gt; Link? [Here you go!](https://upload.wikimedia.org/wikipedia/en/3/39/Wakerlink.jpg) --- ^(I am a bot. | )[^Creator](https://www.reddit.com/user/alienpirate5)^( | Unique string: 8188578c91119503)
https://www.udemy.com/complete-ios-11-developer-course/learn/v4/overview https://www.udemy.com/devslopes-ios10/learn/v4/overview Those are the two I bought because of the free stuff that comes with it.
Be honest. You don't know Swift, cramming for four days won't give you much real knowledge. Be honest and show them what you know and you're willing to learn.
I wish Apple would just have built-in code gen for storyboards. Check out R.swift and similar projects, it gives you type safe storyboards and other resources. 
Good bot
Thanks mate. 
Thank you Frungy for voting on LinkReplyBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
thanks a lot for a really comprehensive answer. Just checked "App Development with Swift" and it's a good book by apple, until now I was just reading The Swift Programming language". But there were not any exercises in that book. One more thing, what about the frameworks man they really steal all my attention, though I don't know anything about them yet I still tend to watch and admire them in free time. Like React Native, Ionic, &amp; Phone Gap etc. And I see 70% job openings requiring these framework skills. That makes me question myself am i going the right way. What framework I should learn after basics because they are in great demand these days. PS: I am a CS Student with good C++, a little Java and web skills too..
Sketch is the best option with all its plugins and free ocean of resources 
Hi, Please take a look, this uses backtracking and should be very efficient. class PuzzleGenerator { private(set) var matrix: Matrix private let size: Int private var rowContains: Matrix private var columnContains: Matrix init(size: Int) { self.size = size matrix = Matrix(rows: size, colums: size) rowContains = Matrix(rows: size, columns: size) columnContains = Matrix(rows: size, columns: size) generate(0, 0) } private func generate(_ row: Int, _ column: Int) -&gt; Bool { if row == size { return true } if column == size { return generate(row + 1, 0) } for _ in 2 * size { let value = Int(arc4random_uniform(UInt32(size))) if rowContains[row][value] == 0 &amp;&amp; columnContains[column][value] == 0 { rowContains[row][value] = 1 columnContains[column][value] = 1 matrix[row][column] = value if generate(row, column + 1) { return true } rowContains[row][value] = 0 columnContains[column][value] = 0 matrix[row][column] = 0 } } return false } } matrix = PuzzleGenerator(size: 9).matrix
No reason to apologise, this is a Swift question and Swift is the same whether you are programming in a playground or in the REPL or for a ios/macos/tv/webserver etc etc. And playgrounds are a fabulous place to try stuff and trying stuff is the key to figuring stuff out. So, in that spirit (trying stuff out to figure stuff out), I'm going to write a bit of code which I hope shows what a `() -&gt; Void` means and why it is useful in this situation. Sadly, I've never heard of JIMU MeeBots and don't know what their API looks like, but I'm not going to let that stop me. I'm going to take a guess at what they're doing and why and then we can implement something similar ourselves. What are they doing and why: well, my guess is that they want to allow the dev to move various appendages (as in your example of moving the left foot, left arm and left leg). But, in order to move anything they first have to do a little 'initial setup' and when all the movements are finished they have to do some 'final cleanup'. This is pretty common in APIs; for example UICollectionView lets you do a bunch of item 'fiidding' such as adding, deleting moving, and by wrapping them in a performBatchUpdates it can do the setup and cleanup 'around' the operations you perform. But why do they do this wacky `() -&gt; Void` stuff? Well, let's first see what would happen without that, and why this set of operations are improved by it. Now, I'm going to write a class called 'CheapBin' and you can put rubbish in the bin. But of course, the lid must be raised before depositing the rubbish and lowered afterwards. You can imagine the problems (and maybe, like me you have actually done this) if you throw something into the bin with the lid lowered; OTOH we all know the smell and mess of failing to lower the lid after making a deposit. So, my amateur try at doing something similar in software might look like: //: Playground - noun: a place where people can play import UIKit class CheapBin: CustomStringConvertible { var contents: [String] = [] var isLidRaised = false func raiseLid() { guard !isLidRaised else { fatalError("cantRaiseLid") } isLidRaised = true } func lowerLid() { guard isLidRaised else { fatalError("cantRaiseLid") } isLidRaised = true } func deposit(_ rubbish: String) { guard isLidRaised else { fatalError("cantRaiseLid") } contents.append(rubbish) } var description: String { return contents.count &lt;= 0 ? "&lt;&lt;empty&gt;&gt;" : contents.joined(separator: ", ") } } let cb = CheapBin() cb.raiseLid() cb.deposit("bacon rind") cb.deposit("chicken gizzard") cb.lowerLid() This is kind of ok...it does what I want. But it is too easy to abuse. play around with depositing stuff without raising the lid or lowering the lid when it isn't raised and so on. OK, it doesn't let you, but it would be really cool if it was just plain impossible to do things out of order. Also, it lets you leave the lid raised and go away and allow the flies to feast on your rubbish. So, my second try looks like this, BetterBin: class BetterBin: CustomStringConvertible { var contents: [String] = [] var isLidRaised = false func receiveRubbish(depositStuff: () -&gt; Void) { isLidRaised = true depositStuff() isLidRaised = false } func deposit(_ rubbish: String) { guard isLidRaised else { fatalError("cantRaiseLid") } contents.append(rubbish) } var description: String { return contents.count &lt;= 0 ? "&lt;&lt;empty&gt;&gt;" : contents.joined(separator: ", ") } } let bb = BetterBin() bb.receiveRubbish { bb.deposit("holey sock") bb.deposit("cold macaroni") } Notice how there is no raising and lowering of the lid exposed to me, I just call receiveRubbish and internally it takes care of raising and lowering the lid. So, there's less ways for me to screw it up and wind up with a fly-infested kitchen. So the idea is I want to somehow provide a function (receiveRubbish) where, inside of receiveRubbish I want to raise the lid, then magically get the caller to make one or more calls to deposit, and again magically I know when they are done depositing so i know when to lower the lid. So, I need to let the caller specify a piece of code which I will run after raising the lid and before lowering it. That piece of code will take no parameters and return nothing; the only thing it should be doing is depositing. Looking at the definition of receiveRubbish, you can see it has a parameter of depositStuff: they type of which is () -&gt; Void. This exactly matches the requirement that the piece of code takes no parameters (that's the () bit) and returns nothing (that's the `Void` bit). 
Working on a basic websocket prototype using Starscream. Does anyone know the best way to display the websocket messages?
Crap. I was about to ask where you started from as I'm a complete beginner and was hoping to be pointed somewhere!
Why would this even work? Google translate screws up badly often enough. If you care about a market you need a a human translator. 
I personally learned from the beginning in school which as super helpful. Having a classroom and a teach who can guide you is a great way to learn. That's not possible for everyone though. Some other great resources would be the free iOS app "iTunes U". There are some great Stanford and other classes that teach Swift and iOS. I hear Udemy also has some good courses that start at the very basics of programming. I have some coworkers who are learning from a Udemy course and they seem to like it. 
Love these, keep them coming. 
You could just `print(notification.userInfo!)` or `print(notification.userInfo!.keys)`
CoreAnimation can be a little opaque in this regard. CAAnimation conforms to the CAMediaTiming protocol, which is where time related properties are declared. And as you mention CATransition derives from CAAnimation.
thanks for sharing
I went to DevMountain iOS immersive boot camp and got a job within two months. DevMountain has a practical curriculum, helpful resources, and a pretty good network to get your foot in the door. The bar to get an iOS job is pretty high. DevMountain teaches you common conventions and how to break down problems step by step, so when you get into the real world you'll have a good foundation. It was a lot more fun learning with people with the same mid set. Learning on my own was great to get the basics down, but it's a lot more fun being surrounded by people that are hungry to learn. It accelerated my learning pace. Plus they had free accommodation, which was awesome. 
i let it ran until playground crashed, the loop was executed a couple billion times and nothing happened, is this your code?
Hi, I fixed couple of typos. I haven't run this code (away from the computer) instead with this pseudo-code I wanted to show the logic. Can you try run once more?
You can view the docs directly in Xcode. View &gt; Documentation 
It's extremely confusing and very poorly written. Huge put off, to be honest. I'm certain my life is going to be very hard coding apps using swift. 
Udacity; you can take the courses for free. 
ok, that was fast... the code ran unbelievably fast, thank you so much, i had to fix one or two things, like changing how the subscript is accessed, but that was easy. and now that you showed me the logic it all seems very easy and i feel dumb. thank you anyway
Apple documentation sucks ass. It doesn't tell you what you need to know. They don't explain.
Yes, but the point is that they suck.
Nice! Thanks! 
Glad that it helped.
I'm working on my third Plurasight course and my first Lynda course. Also making progress on two client projects. I'm just a bit behind the schedule because of the beautiful summer weather, lot of hiking and bike tours. :)
Thank you!!
Appreciate it. 
Honestly the problem with Swift is the lack of decent resources. I wonder if the language is worth learning over Objective-C for macOS development. There is almost nothing out there for this scenario, and Apple's frameworks are poorly documented/written about compared to .NET and Java. I tried for a while but the amount of time I spent looking for usable material to learn from was completely destroyed all of my motivation. It's almost as if they don't want you to. 
Are you using Playgrounds? Auto execute tend to lock the code. Turn off auto run.
no im in project development. sorry but how do i turn off auto run, i literally just intalled xcode today sorry
so it seems that my second window or story board? is the one being locked up, my first one is fine, how do i fix this
By default, it is auto run, I think left bottom corner has playback button that you can stop. 
You won't learn Swift in 4 days. Lets be realistic. 
Swift doesn't have this functionality
Ok, what would be the best alternative or is there none? Thanks
There is no alternative, sorry
Thanks :)
decodeObject used to work for Int and Bool on Swift 2.2. To decode the Int in Swift 3 you should use: aDecoder.decodeInteger(forKey: PropertyKeys.age) You can use containsValue to know if the key is present, because decodeInteger does not return an optional, so it must be removed from the guard.
@itsDaco Don't keep it in mind. Forget it as soon as you can. It's terrible advice. 99% of experienced iOS developers don't know Swift "completely", and they code in Swift really, really well. Yes, you should go through the basics, but I have a big problem with saying you need to learn it completely. So the "The Swift Programming Language" is NOT the book to start learning from. It's a reference book. I've spent a lot of time going through the various resources that are out there for beginners. I'd suggest you start with a couple resources. 1: If you are new to programming, and you have an iPad, go download the Swift Playgrounds app for iPad and work through Learn to Code 1, 2, and 3. 2. If you have completed Swift Playgrounds for iPad OR are not new to programming, go to hackingwithswift.com. It is a free online course from TwoStraws. It's really well written and keeps you engaged. He steps you through 40 real iOS coding projects, progressive in their difficulty. After that, you can continue through TwoStraws Pro material (not free, but not expensive). Also use Apple's free books as reference guides. Edit: I just wanted to add a quote I really like on the HackingWithSwift.com website: "Programming is an art. Don't spend all your time sharpening your pencil when you should be drawing." This quote flies in the face of advice like the post from lovemeslowly. Ignore advice like that. It can be crippling.
I do not know your actual code, but sometimes it makes sense to wrap your data in some "loopable" data structure, e.g. creating an array of Integers and then just looping through this array.
Obvious trolling comments. There are many great resources for learning Swift and among the community of developers that have taken it on, its one of the things that most often said about it (1. that there are so many great learning resources and 2. that the Apple documentation is really well done) I won't spend any more time on this. Someone here has an agenda.
The best solution I can offer would be let (a, e, i, l) = (1, 1, 1, 1)
I would use an enum to encode the letters, and then provide a readonly computed property that encodes the point value for each letter: `enum Letter: String { case a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, w, r, s, t, u, v, w, x, y, z var points: Int { switch self { case a, e, i, o, u, l, n, s, t, r: return 1 case d, g: return 2 case b, c, m, p: return 3 case f, h, v, w, y: return 4 case k: return 5 case j, x: return 8 case q, z: return 10 } }`
It's a good thing I didn't start with the swift programming language book, I'm currently using a mixture of hacking with swift and intro to app development with swift.
Hey I'm a new iOS dev so I'm not sure how helpful this will be, but here's my experience: I've had no problem finding out how to do table views, collection views, etc, there are tons and tons of resources on it. In terms of development I have 2 big problems. The first being that there are no really good places to find advanced and higher level iOS Dev resources. The second being that I'm only an iOS developer so when it comes to interviews and white boarding, I almost never get every question right. Learning data structures in Swift is something that I would even PAY for if it were a good resource. I hope you find this useful! If you want me to elaborate on something or anything else please feel free to message me. 
I'm speaking comparative. And no, the resources especially for macOS are thin. Insulting is trolling. Pot, Kettle. 
I’ve recently been struggling with implementing Core Data Stacks to pre-existing projects. So a tutorial on that would be very helpful.
Bootcamps are nothing but structure provided to force you to work 60 hours per week. If you need instruction, it's not for you. The compensation for a skilled instructor is closer to $300k (if you're in the Bay area.) No bootcamp pays their employees this well. So instead you get guys who don't have better options than the $50 per hour that the bootcamp will pay them. So, if you're to pay $15k to be in an environment that will force you to work 60 hours per week for 10 weeks with 20 other people. For many people, this is all it takes to push them to the point where they are employable. But some people need their hand held and all the concepts taught to them. If you're the former, bootcamps are perfect. Not so if you're the latter. 
Clean code &amp; best practices is something I’d be interested in. Protocol oriented programming for networking stacks for example. 
Hi and thank you for leaving a reply. It's really helpful to know more from developers like yourself because I reason that an advanced or mid level developers knows enough about iOS development to be able to find resources that teach about these sort of things. So it never occurred to me that advanced developers might need video instructions as well. So thank you for bringing that to my attention. With regards to data structures, what type of information in particular do you require or would "pay for"? I am not looking to make money off of this, and all my videos are free of course, but I would love to know more.
That is going straight to my to-do list. In Swift or ObjC? And are you looking for a Core Data tutorial as well or just setting up a stack with a pre-existing project? Also, does the iOS version matter to you? Or do you just want the latest and greatest?
Forgot to add that it was Swift. I know the basics of Core Data but it wouldn’t hurt if you did a tutorial on that as well for beginners who would like to learn that stuff. iOS does not matter to me.
Hi, that too is going on my to-do list now. Thank you for your reply. When you say clean code and best practices, they are two completely different topics. In terms of clean code, it's very preference-related, and I mean that what looks clean to me *might* not look clean to you! But are there specific things or topics in this area that might interest you?
Okay, sounds great. I will put that on the to-do list and do a video on Core Data and adding Core Data stacks to existing projects.
Well its more like, I'm a pretty beginner developer, but finding resources to go from beginner to advanced is really hard. There aren't too many blogs on things like higher order functions (so how to use map, reduce, filter) property. I'm not even sure if there are other higher order functions since those three are the only ones I read about. Other things would be good examples of MVC, or other patterns. Things like, how to keep a good networking class, and keep it outside of the view controller. If I wanted to make an app involving Core ML, I know I can download ML files and import them into my project, but what happens if I wanted to train my own data, it would involve a little bit of python and thats something no one talks about. All iOS resources only talk about iOS, but to be a great developer, you sometimes need to know how to use other languages. Most apps need some sort of server side programming, but find a resource that caters towards iOS devs, but focuses on setting up a basic NodeJS server isn't easily found, and usually isn't good quality. A beginner iOS Dev would easily be able to figure out how functions are written in python (or other languages), but maybe not how to split code into separate for server side stuff. I mention server side a lot because I am making an app, and I basically had to ask a friend to 'teach' me how to do this, and he ended up doing most of it, so I didn't end up learning much. An thanks for the free resource! I only mentioned pay, because I was hoping that it would seem REALLY important because I feel like it is! Every single interview I've gotten, I'm told that it'll be an algorithmic and data structure interview. I think a few videos covering linked lists, basic trees, etc in Swift code be really useful! Since all resources I've found so far for these types of questions are in Python or Java, its hard to convert it to Swift. Not because copying python code into swift is hard, but how do I know if its the most efficient way. Also, maybe instead of how to implement basic table views, you could do a video where you try to write the table view method yourself. I was asked that in an interview, and I just didn't know where to begin, but it was impossible for me to go home, and google, 'How did Apple write the table view class, with the proper delegates/protocols'. If I saw a video on that, I would not only know how to use the one given to us, but I would understand it on a whole new level! I hope you like my ideas! I'm really looking forward to watching your videos, and I think it would be really cool if you did things in a very different way than what people do now!
Oh yeah Core Data is a pain!! I always have trouble when I'm trying to Store a custom object in my app, but also if that custom object has another property, which is a custom object. For instance: struct Person { var name: String? var customProperty: Friend? } or something like that.
[Here](https://www.raywenderlich.com/category/swift/swift-algorithm-club) is Algorithms and Data Structures implemented in Swift. Is this what you're looking for? 
Thank you for taking the time to write this reply. It was really informative for me to read it. I have been fortunate enough to work alongside server developers and get *an idea* of how they structure server side applications, such as Node.JS apps with Express. I can definitely put some videos together to teach iOS developers how to write their own servers easily with Node.JS and deploy on Heroku. Would that be of interest? Regarding table views and data sources and delegates: designing your own table views is probably something you never will have to do, but knowing how to do something like that *can* be useful if you want to create your own UI component. So perhaps a tutorial on creating a component like UITableView or UICollectionView that requires its own data source and delegate? I remember creating a carousel component (when it was cool) for iOS and that did require its own delegate and data source, so perhaps something similar? So far I got: * server side for iOS * UI component design with delegates and data sources (like table views) * data structures * design patterns Did I miss anything?
I have gone through most of it, and its fantastic. I actually did forget that Ray Wenderlich has a tutorial on these when I commented, but thanks for the reminder :) these are actually really worth it for anyone who's reading!
Nope you got it. And I think Node.JS + Heroku would be perfect. That's how my friend set it up for me, and so far its been working great. Someone posted here about Ray Wenderlich having a great Data Structures tutorial, and I had forgotten about it when I commented, but if you did one, I would still definitely watch it. If you need more ideas feel free to let me know, ever since I started coding I've been keeping a list of things I wish I could find resources for, so I'll never run out of ideas for you :p 
If you are interested in running Mac OS X under VMWare, note that Mac OS X does not support AMD CPUs. What are you planning to use Xcode for? If you are developing iOS devices, it'd probably be less of a hassle to buy a cheap Mac mini. If you are trying to develop just using Swift, Ubuntu can run Swift.
Hi everybody, I'm here to tell you about my new project: Validator - a suite of tools made for indie app developers. I'm starting with a way to easily distribute your promo codes and generating a nice landing page for your app. It'll be free for those who jump in the private beta and 100% lifetime free for those who share the link and add the #useValidator. Let me know if this comes as shameful promotion (it's a gray area, I think) or have any questions. Thought it could be helpful to many of you. 
Can you not use nested arrays? i.e. myLists: [[MyObject]] = []
I echo the comments of many other posters. I would be really interested in the more intermediate to advanced stuff. The only resources that really do any intermediate stuff are the objc.io guys and nsscreencast. There is a strong chance to fill that niche. Anything Core Data, Core Location, adding an OAuth based login to your app, etc.
Do you want to use xibs/ interface builder at all or do you want to build your UI programmatically?
Nice Website. The design is that of a large company. 
Your best bet is to have a json file stored on a server somewhere. If you have your own, that's good, otherwise look into Amazon S3 as a cheap way to store data like that. Once you have the file there, you can use a URLSession task to download it when it makes sense to within the app, store the data locally, and use it. Check the file periodically (perhaps at launch) to get the updates, and present to the user as you like.
Thank you very much for explanation. I will look into Json then :) Edit: a word
Try to switch on the destination instead and unwrap in the case statement. If needed you can check on the identifier as well in the same case statement.
That's such an odd idiosyncrasy. It seems like Int would be a common data type to archive and I archive. 
Best of luck with your new journey! :D
You should read the Advanced Swift book from OBJC.io
Hi and thanks for the feedback. Really great suggestions. When you say intermediate to advanced, would you rather have videos or articles?
Thank you so much
MacOS runs just fine under Ryzen. Several Hackintoshes have already been made on that architecture.
[removed]
Good bot
You are the 5175^th person to call /u/GoodBot_BadBot a good bot! ^^^^/u/Good_GoodBot_BadBot ^^^^stopped ^^^^working. ^^^^Now ^^^^I'm ^^^^being ^^^^helpful.
Firebase, it is free, it is quick and Google's official tutorials are easy to follow, all you have to do is read one evening through documentation which is pretty short.
Thank you very much. I was using firebase for notification but didnt know I could use it to send data to app :)
In my opinion there are 2 persistant stores out there. One is CoreData, the other one is Realm. Both have their reasons and drawbacks. Here's a post why you should use CoreData: http://sealedabstract.com/code/you-should-use-core-data/ In my Opinion you should use CoreData if you've never used any other wrapper on iOS, simply for the learning experience.
Check the database and in app observe the database for changes and it will automatically update on all devices when you make a change. Edit: Thinking about it again, I would probably use a timestamp and check for the date to display correct data in the app. This way you can make facts for upcoming days/months/years and app will just keep working.
Thanks Larry! 
One other option would be CloudKit. You can store everything on there and it is persistant. So no need to use multiple new technologies
I tend to use Core Data whenever possible. Particularly when coupled with NSFetchedResultsController, displaying datasets of any size in tableviews and collectionviews becomes a breeze, and you get change tracking and animations for free. It's a powerful framework and well worth learning. 
I just recently put my first app back on the AppStore (after an absence of one year). I will look into it. 👍🏻
Hello there, Vandad! I'm doing swift programming just for fun and totally agree with other guys about lack of intermediate to advanced tuts. So all tuts for now looks like this: we've got isolated environment like single view (for ui tutorials) or one viewcontroller, or one class and trying to do things in there, but when I'm trying to apply such technics in my home project, I've got tons on questions immediately. From my point of view it looks like abstractions from examples are starting to leak. It's for sure my problem, I do not have enough experience to figure this stuff out by myself. And if I'm trying to find some projects at GitHub and look into it, its either too simple, or too overwhelming. For example, I didn't found any good tutorials about customized controls. For example, building my own navigation or tab controller from scratch. My guess is that almost every single rich and beautiful app has its own custom stack of controls instead of Apple ones, cause it's just too hard to customize standart controls with animations and all that. Literally yesterday I googled advanced Swift courses, and didn't found any good. So my problem isn't about using advanced API, it's about using it right. And I understand, that for many reasons it may be impossible, but if you will make some "production ready solutions" tutorials, I'll be really happy. 
Programmatically
Thank you so much for your reply, Core Data it is!
Thank you so much for your reply, Core Data it is!
One more thing. Be careful if you start multithreading, as coredata before iOS 10 was not the easiest to handle this with. Since 10 it got easier, but still.. multithreading and persistant stores don't necessary like each other.
[removed]
During WWDC 2016 and 2017, Apple held a few presentations on how to design and prototype using Keynote. Worth considering IMO. * WWDC 2016: Iterative UI Design - https://developer.apple.com/videos/play/wwdc2016/805/ (forward to ~13:10 to skip the intro) * WWDC 2017: 60 Second Prototyping - https://developer.apple.com/videos/play/wwdc2017/818/ 
What do you recommend for the multithreaded coredata handling. I'm using a stack where back ground operation are performed on a child of main context with a type of background private context. When I save, I save these child first, then save the main. Is there a better stack? 
It depends on your requirements. But in general this sounds like the default approach. Just be sure to create every time a new child context. Oh and have one background context to write to disk. From this one you'll derive your main thread context. There are other options in case you need to add a lot of data once.. With iOS 10 you can use the persistantContainer which will create contexts as you describe them.
Ok I create a child context to process json array elements in batches, save private, then save main. And I do have lots wbeservices going on, seems to be working at the moment. What do you mean by writer context? Do you mean before I create the main context, get this background context from the persistent container, then make main a child of that one? If so how do I use it? 
I mean something like this writerContext (writes to disk in background) -&gt; mainContext (display) -&gt; childContext (to edit Data) This way writing to disk will not interrupt your UIThread and everything feels smooth. Writing a lot of data can disrupt this. Thus the extra context.
here's a graphic for better understanding: http://imgur.com/rFRJ8kb Be aware this was for iOS7. A few things changed with 10.
It's a good idea to read one of the Apple programming guides to learn about the life cycle of a view (if you haven't already). Knowing when UI components are drawn and redrawn is important if you want to create views programmatically. Just to create a label, you'd need to instantiate it, set a text and background color, a border style, a border radius, placeholder text, set the delegate, specify the CGRect frame to create it with, then add it as a subview. Plenty more you can do - those are just the bare minimums. You can also draw with core graphics if you want. It ends up being really heavy on lines of code - I personally don't mind it. I usually create my views in a separate file in my "Views" folder and keep all view creation code (or as much as possible) out of my view controllers. 
Note CoreData is NOT a database. It is persistence for an object graph that happens to be backed by a database. Even still, some of the database functionality leaks through this abstraction. CoreData can be useful but if you try to do anything other than the most simple architecture, then you'll probably run into problems. Multi threading, faulting, etc. Also as of swift 3, much of the CoreData API has been parameterized. This is a good thing and if you're only us by swift then it should make your life easier. But it might be confusing at first, and most of the documentation hasn't caught up to this yet. If your needs are simple enough I would recommend looking into NSKeyedArchiver and NSCoding. It's a simple and well understood API and it's shocking how fast it is. 
[removed]
[quicktype](https://swift.quicktype.io) infers types from JSON sample data, then outputs Swift structs and converters (Go, C#, TypeScript and other output languages are supported). We were inspired by tools like [json2swift](https://github.com/ijoshsmith/json2swift/), [Cute Baby](https://medium.com/@nixzhu/cutebaby-json-swift-f1ea6cc87451) etc. that try to do the same thing, but we are taking a more rigorous approach, and so far we handle maps, struct unification, naming, top-level arrays, reserved words, convenience constructors, and serialization better. For example, we generate enums for heterogeneous data, rather than simply falling back on `Any`. We also support JSON Schema, and crawling APIs to unify multiple responses into a single Swift struct hierarchy. We currently lack support for Dates, URLs, or custom options. Swift 4 support is planned. This is a new project and we would love your feedback. Is this useful to you? What can we improve? Please let us know if there's anything we can do to generate more idiomatic code, or what additional options you'd like to see! You can also try our CLI: $ npm install -g quicktype $ quicktype -o LatestBlock.swift https://blockchain.info/latestblock Thank you!
Ok sounds like what I was describing. What I have currently is that graphic minus the top node. So when saving you save from.bottom up right? . If I were to add this to my implementation I would have to save the master context after I save main? 
Your question is akin to "what kind of car should I drive?" It all depends on what you want to do with it. There are lots of different databases out there. Many are SQL based, some are no-SQL implementations, some are simple to use, some complex, some have tons of features, some are super simple, some support syncing to a backend, some don't. Think about what you intend to do with your database, what your content is like, and what capabilities you need. Research with those factors in mind. After all, a Mini Cooper, and a Ford F-750 diesel are both vehicles you can drive, but if all you need is a Honda Accord to drive your family around in, neither will be well suited to your needs.
Suppose you have itemID stored in a String, and you want to construct a URL as indicated. You can do that by using string interpolation: let itemID: String = // already exists; pulled from XML data let urlString = "http://www.example.com/play.m3u/id=\(itemID)" Now urlString has the itemID in the appropriate place, and you can use the urlString to create a URL or URLRequest or whatever it is you need to get the AVPlayer to understand it. 
I tried to use string interpolation. But it shows id = nil
correct. The top node is just to free your UI Thread from the delay writing to disk creates. So if you don't have a lot of data at once, it's no problem without it.
Here is my code: import UIKit import AVFoundation class PlayerView: UIView { var item: Item? override init(frame: CGRect) { super.init(frame: frame) backgroundColor = UIColor.black let id = item?.itemId if let url = URL(string: "http://xample.com/play.m3u?id=\(id)") { let player = AVPlayer(url: url) print(url) let playerLayer = AVPlayerLayer(player: player) self.layer.addSublayer(playerLayer) playerLayer.frame = self.frame player.play() } } required init?(coder aDecoder: NSCoder) { fatalError("init(coder:) has not been implemented") } } Here is something that I see in console: AudioHardware.cpp:1200:AudioObjectRemovePropertyListener: AudioObjectRemovePropertyListener: no object with given ID 0 Item is the NSObject class here. It doesn't show the parsed data and just says id= nil. Idk what am i missing here? :(
SQLite is a viable option. https://www.pluralsight.com/courses/sqlite-ios-apps (Disclaimer: This is a course I did for PluralSight.)
Thank you so much for the response. For some reason I never found enough information on this whole multithreaded core data thing on Google or the explanation over simplifies and doesn't provide good example code. When you call context.save, this is what you mean to write to disk right? Sorry I have lots question, you can point me to a source to read up on if you don't want to write the response.
Do I need to parse the xml again in this UIView?
Hey no problem at all :) It took me forever to understand it, so I know the pain. Context.save doesn't necessarily write to disk. This is only the case, when you do it on the master context, otherwise it just writes into it's above context. When writing to the above context, this is all in memory (fast). Calling Context.save() on your MasterContext will eventually persist the data (write it to disk). I've looked for the blogpost I've used to understand all of this. Sadly it doesn't exist anymore. One important thing. Pass this to your app via commandline parameters: "-com.apple.CoreData.ConcurrencyDebug 1" This way, in case you do something in the wrong thread, you will notice.
This is very helpful I will try to test it out this week. Do you mind if I DM you some questions later on? If not you can just ignore the comment and I totally get it. You seem to be very knowledgeable on this topic. I've made a post here before asking about coredata stack but didn't get any response, very hard to come by people who have actually implemented this. 
Although this is 2 days old the most I can suggest is learn about the larger language features that are different from most languages. For example structs over classes if you don't need inheritance, optionals and why using them is important, protocol oriented programming (although I'm not totally on board with that one myself yet) and why its beneficial, etc. I would be up front and explain you don't have much Swift experience and you just started learning, but then explain what you have learned since you started. 
Of course :) just write me a DM. Might take some time though till I respond (at max few days). Depends on me seeing it, since I'm on vacation right now.
[removed]
Thanks again! Sorry op for hijacking your helper...
Two things I would like to see: -Using Xibs with Swift (do people not use Xib's anymore? I can't find resources on how to do this in Swift for the life of me.) -More advanced networking. Sure people showing how to use URLSession.sharedSession is great but things like: -Responding to authentication challenges -Passing user credentials -Caching user credentials -Posting Those would be great to see. As someone who doesn't deal with networking code ever I'm finding resources on these topics to be very sparse. 
you won't learn this in 4 days. Most people give themselves at least 2 - 8 months before getting their first app out (and therefore displaying a good amount of knowledge, and even then, it's just scratching the surface)
Hi and thank you for the great suggestions. I have done quite a lot of networking in the past and I'm surprised there aren't enough posts on the topic. I will put this on my list.
AMDs require a bunch of patches, not saying it won't work just extra overhead.
force casting is never ok, its a bad habit to do.
then*
Sorry, fixed it :)
Look for iOS projects in general, not specifically Swift projects. Most potential clients don't even know anything about programming languages.
Out of curiosity, Is there a name for that type of design? I've seen Stripe use that kind of design and I'm not sure what it is. Its almost a flat design with some new shadow style. 
This is a good place to start: https://www.youtube.com/watch?v=2fcf9yFe944&amp;list=PL0dzCUj1L5JE1wErjzEyVqlvx92VN3DL5
I generally prefer videos myself. Most of the intermediate to advanced stuff out there is in blog posts which is why you would really have the opportunity to be the intermediate-to-advanced video guy.
Let's see the code where you set the item in the instance of PlayerView. Also, what is the definition of the Item type? My guess is you are not setting item. wrt another question: i shouldn't think parsing xml again is going to help. I would parse the xml once and save everything you need or will need. So, for example, save all the ids for all the videos along with whatever other data might be needed depending on the user's actions. What kind of data structure are you building based on what is in the XML? 
Video linked by /u/peterlcole: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [Swift: Twitter - Headers, Cells, and Footers (Ep 1)](https://youtube.com/watch?v=2fcf9yFe944&amp;list=PL0dzCUj1L5JE1wErjzEyVqlvx92VN3DL5)|Lets Build That App|2016-12-27|0:21:45|835+ (98%)|38,139 &gt; Welcome to the introduction of a very exciting series on... --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/peterlcole ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=dm93t6p\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v2.0.0
For reasons other than my initial question, this channel is exactly what I needed. I definitely plan to watch every video. Thank you for taking the time to reply. Best,
Not a lot to go on. But one thing worth mentioning. If you use protocols to pass the viewModel, Swift often handles them as Structs (might be the reason your timers reset). So create a list of viewModels (have the protocol class bound) and then work with timers etc.
I would do two types of cells. Slider/Timer is different enough that you won't want to jam both UIs into the same cell. Your timers are getting messed up because UICollectionView destroys and reuses cells as you scroll, so the attached timer is getting killed. Move the timers into your controller object and you'll have better luck.
Glad to have helped. I've watched many of his videos and they've all been solid.
Yep, I have the book and I'm slowly making my way through it. The thing is, I'm living pay check to pay check right now, so finding a job is top priority, and the book isn't as dense as it could be, so it takes a lot of time to go through it all, and because finding a job is priority I'm putting off reading it till later. But if there was a source that had the same topics as OBJ-C but a lot more condensed, it would be much more viable for me. Now I understand that most people do have a little more time/flexibility than me, so of course not everyone needs (or even would like) a more condensed resource. Just wanted to give the guy a few ideas on what I would like to see. 
This is a few days late, but I'd check out some of the courses on [udemy,](https://udemy.com) because I've found a few good courses on there if you're willing to spend some money. If you use udemy, I wouldn't recommend paying more than $10 though because they constantly run specials where most courses are $10. I'm also an absolute beginner like you too, and the course I've been following is ["iOS 10 &amp; Swift 3: From Beginner to Paid Professional."](https://www.udemy.com/devslopes-ios10/learn/v4/overview) by Mark Price/Devslopes on udemy. The course is pretty good IMO because it has a lot of content and doesn't rush over some of the basic stuff in Swift (e.g. arrays, loops, etc.) I think they just released a new iOS 11 &amp; Swift 4 course on udemy/[devslopes.com (their company website where they also sell their courses)](https://devslopes.com) so you might want to check that out. **They also have [a YouTube channel](https://www.youtube.com/channel/UClLXKYEEM8OBBx85DOa6-cg/videos) where they've posted over a 100 of the videos from the iOS 10 &amp; Swift 3 course, so I would start there! The videos were posted ~1-2 months back in a big dump, so you'll have to hit load more a few times to find them all.** One last piece of advice, if you are serious about learning to code/make apps, you should start using XCode on a mac computer. Hope this helps! EDIT: I just realized I forgot to mention that you should check out some of Apple's books on Swift Programming on iBooks. They are free and have some great information.
Create a queue and thread that you dedicate to handling CoreData processing. 
I'm already doing that it's obviously not this simple since you have to worry about context consistency. 
&gt; If you use protocols to pass the viewModel, Swift often handles them as Structs I'm very confused by this statement. What do you mean?
I know it's been a few days, but I wanted to thank you for this. It took me a few times going over it to understand, but I think I am finally. I really appreciate your help on here, and I hope someday I'll be able to offer help on this sub the same way.
I highly recommend the podcast 'Under the Radar', which covers topics relevant to your question. https://www.relay.fm/radar
okay that makes sense. Do they usually require you to also know Objective C? 
Awesome I'll check it out thanks 
I have a protocol to which the viewModel conforms to, ofc. But I have a list of viewModels set as my dataSource.
Ok, thanks. How do I move the Timer to VC, though? Through some kind of delegate, which will launch the timer at the push of a button?
&gt; My guess is you are not setting item. Yes, I guess. I'm little confused about this. How can i set them? This is what my Item class looks like: import UIKit class Item: NSObject { var itemLabel: String? var itemId: String? } &gt; What kind of data structure are you building based on what is in the XML? Basically, I'm using the XML to fetch data in a collection view. So now what I want is that whenever I select a collection view It should show a UIView with AVPlayer and play the item with the ID of the XML data that I have fetched in the collection view. This is how the collection view looks like: [Collection View](https://i.imgur.com/8a8LNHv.png) And here is my XML Parsing: import UIKit class ItemsService: NSObject, XMLParserDelegate { static let shared = ItemsService() var items: [Item]? var foundCharacters = "" func parseItems(completion: @escaping ([Item]) -&gt; ()) { parseUrl(urlString: "http://anotherurl.com/", completion: completion) } func parseUrl(urlString: String, completion: @escaping ([Item]) -&gt; ()) { guard let url = URL(string: urlString) else { return } URLSession.shared.dataTask(with: url) { (data, response, error) in if error != nil { print(error!) return } self.items = [Item]() let parser = XMLParser(data: data!) parser.delegate = self parser.parse() DispatchQueue.main.async { completion(self.items!) } }.resume() } func parser(_ parser: XMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict: [String : String] = [:]) { if elementName == "item" { let item = Item() if let name = attributeDict["name"] { item.itemLabel = name } if let id = attributeDict["id"] { item.itemId = id } self.items?.append(item) } } func parser(_ parser: XMLParser, foundCharacters string: String) { self.foundCharacters += string } func parser(_ parser: XMLParser, didEndElement elementName: String, namespaceURI: String?, qualifiedName qName: String?) { if elementName == "item" { let xItem = Item() self.items?.append(xItem) self.items?.removeLast() } self.foundCharacters = "" } func parser(_ parser: XMLParser, parseErrorOccurred parseError: Error) { print("failure: ", parseError) } } 
Are you sure furniture is not nil?
I'm fairly certain it's not. The blue box happens after I select an image. Also, wouldn't the If Let statement at Line 68 return "Choose a Photo" if `furniture` is nil?
So, in parsing the xml, you store the itemLabel and itemId in the Item. I can see a label in the collection view, so your array of Item objects must be working as far as the label goes. When the user taps an item, you must have a piece of code that gets executed; what does it do? How does it create the UIView with the AVPlayer in it? Does it instantiate it? If so, after it instantiates the view, it needs to set the item in the view with the item from your array of items.
If you are thinking cross-platform you might want to give react-native a try. Also if you are building a client app, don't forget about the backend part of your project. If you value your idea 'free', then don't worry about trust, find a college student who wants to build a portfolio.
Learn to program, and tackle the project yourself. 
&gt; When the user taps an item, you must have a piece of code that gets executed; what does it do? I have setup a didSelectItem path like this: func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) { let playerLauncher = PlayerLauncher() playerLauncher.showPlayer() } &gt; How does it create the UIView with the AVPlayer in it? This is the launcher file: import UIKit import AVFoundation class PlayerView: UIView { var item: Item? override init(frame: CGRect) { super.init(frame: frame) backgroundColor = UIColor.black let id = item?.itemId if let url = URL(string: "http://xample.com/play.m3u?id=\(id)") { let player = AVPlayer(url: url) print(url) let playerLayer = AVPlayerLayer(player: player) self.layer.addSublayer(playerLayer) playerLayer.frame = self.frame player.play() } } required init?(coder aDecoder: NSCoder) { fatalError("init(coder:) has not been implemented") } } class PlayerLauncher: NSObject { func showPlayer() { if let keyWindow = UIApplication.shared.keyWindow { let view = UIView(frame: keyWindow.frame) view.backgroundColor = UIColor.white view.frame = CGRect(x: 0, y: keyWindow.frame.height - 50, width: view.frame.width, height: 50) let playerFrame = CGRect(x: 0, y: 0, width: keyWindow.frame.width, height: keyWindow.frame.height) let playerView = PlayerView(frame: playerFrame) view.addSubview(playerView) keyWindow.addSubview(view) UIView.animate(withDuration: 0.5, delay: 0, usingSpringWithDamping: 1, initialSpringVelocity: 1, options: .curveEaseOut, animations: { view.frame = keyWindow.frame }, completion: nil) } } } &gt; Does it instantiate it? If so, after it instantiates the view, it needs to set the item in the view with the item from your array of items. Yes, this is where I'm stuck. How to do that? Can you please provide an example based on this code?
5) Publish your ideas somewhere in a hope they will be implemented
I listen to a small number of Mac/iOS/Swift podcasts, Under the Radar is hands down my favorite!
Great. How much of a time commitment am I to expect (50h?). A ballpark would be good to give myself a checkpoint to make sure I'm on track. Secondly, what's the first step, and a few friendly pointers, you would recommend for me to learn Swift (after reading FAQ)?
&gt;find a college student who wants to build a portfolio. Where do I go about finding them?
What kind of technologies do you expect to use? Is it a cloud app?
It's going to depend on an awful lot of factors... 1. Do you have any prior development or programming experience? If yes, then learning Swift, the IDE, and the various tech required for your application should be a reasonably straightforward step. If not, then you're also going to have to learn how to program and develop an application. The actual coding is often only one part of it; as you've already discovered with storyboarding. 2. What is the *complexity* of your envisioned application? That's where things get, um, complex. Yes, for iOS, you will need to learn Swift, the XCode IDE, and eventually, how to deploy an application to the store, amongst other things. To learn Swift, look on the iBooks Store, Apple have produced a range of free learning books; some of them go from the absolute basics, so you should be able to at least get to grips with how things work before starting on your own application. For Android (which I know very little about), I *think* that that still requires Java. Now, you can imagine that this may mean that you need to develop the same application twice over; which is a bit of a bastard. As for the complexity, if this is some kind of tool that has a range of features that are nominally independent of each other, then you may be able to approach it in a modular way. For example, build the shell of the application, and then fill out functionality as you learn. Going back and improving earlier functionality as your skills improve. Don't forget, software is never "finished", you can also approach it incrementally. Realistically, unless it's a very, very simple application, then it will probably take a lot more than 50 hours. Again, it depends exactly on what it is that you are trying to achieve. Good luck :-) 
Not quite sure why /u/dov69 is getting downvoted, everything he said is very valid. If you wanna find a college student looking to build a portfolio I'd definitely look for a local Universities Subreddit. Many Colleges and Universities have their own Subreddit and I'm sure you could post about looking for a developer for your app. Also if you don't trust someone with your ideas your best bet would be to get an NDA made up and make the developer sign it. 
No. Likely never. Apple's codebases start in assembly and mix in c/c++/obj-c/swift. The higher level you go, the further right you go on that spectrum. The lower, the further left. There very little "pure" code in any one project. C++ is the language of compilers and thus ObjC++ is the language of intermediate level macOS code. A lot of Frameworks use ObjC++ under the covers. And this also comes with the problem that Swift isn't compatible with C++. Now, a similar question would be about the public facing APIs. There is a good change that Apple will work towards rewriting those over the coming years since they want maximum compatibility with Swift for developers. For example, I wouldn't be shocked if a UAPPKit comes out at some point (my bad name for a hybrid macOS/iOS Framework) whose APIs are all Swiftified. 
Looks like you're estimating about a week of back and forth with a dev to achieve an MVP. This implies a pretty small app. If that's the case then it would definitely be feasible for you take on learning how to create it yourself. It may take you much longer than one week but the sense of fulfillment you will get from achieving it yourself will probably be worth more than the app itself in the long run. 
welcome to /r/swift I recharge my karma at /r/rickandmorty :)
Okay, thanks for the answer! That's basically all I wanted to know. The second part of your answer is what I wanted to know: when will they update all the public facing API's to be more *Swifty*? Thanks for the answer!
There are a couple of different aspects here: * Exposing a more Swift-like interface to developers using Apple's frameworks, which they've done a lot of work on. This doesn't require rewriting the frameworks, just adding the appropriate wrappers around the framework's interface. I imagine they're constantly doing incremental work on this. * Apple developing new frameworks internally in Swift. Based on what I've understood, a major blocker for this is a lack of [ABI stability](https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md) in Swift, which has been delayed throughout multiple Swift versions.
Yeah it's a very small app. But there's a lot to learn. It's like a completely new field. It takes years for a surgeon to do surgery, and while you can teach an assistant basic things or how to do one task really well, still takes long. When u can just hire a surgeon to do it for you. 
Yeah
The projects I do usually are completely managed by me, so all they require is a completed product in the end, and they don't care how that happened.
The compiler considers passed protocols often as structs. meaning, in cases where your protocol is not class bound it might be considered a struct and if you use stuff like didSet it will do weird things ;) this could be a reason for your timers pausing (I consider your timers being part of the viewModel)
That's a really good question and I'm full of shame because of not knowing if it's called something. I'm a designer, I *really* should have known. I don't think that it has a name because it is influenced by many past trends. 
Actually, my timer is a part of my cell. It is embed in a custom UIView object that’s owned by the cell.
They've been doing this every iOS release for a while now. Just not all at once. All the headers were annotated for nullability and lightweight generics in swift 2 I believe. The grand renaming came around in swift 3, as did parameterized CoreData. Swift brings a better KVO interface, etc. Note that swift is a rapidly evolving language so it's not always a good idea to swiftify APIs before the dust has settled.
Code structure &amp; when to use certain design patterns are what I usually struggle with. Most tutorials I find have the view controller do everything in the viewDidLoad. But it’s the actual separation of concerns that can be tough to learn. Treehouse has good tutorials that enforce separation of concerns and show you proper code structure, but they’re a subscription based model (understandably). That’s what I meant by best practices :) As for specific topics, networking seems to be the biggest use case, sign up/sign in forms for example. 
I liked everything you said except "C++ is the language of compilers". This sounds like a general statement for *all* compilers, but plenty of compilers don't touch C++. Definitely agree with the rest, though. Swift can't replace everything, but I think Apple will replace what they can.
Do you have basic design skills? Prototype it with sketch and principle and you can present your idea visually to people that you could collaborate with that can actually code your idea. Prototyping will be your biggest asset if you don't have working programing knowledge and you are more big picture focused. Edit - Spelling
That would be a huge waste of money for little to no value. Cocoa is completely reliant on dynamic features that do not yet exist in Swift. The new keypath and Codable capabilities are a step towards that but Swift does not have all the capabilities to support Cocoa without borrowing capabilities from the Objective C runtime. At no time is Apple going to make something available in only Swift. Ever. Really. Objective C will remain a first class language. Furthermore, based on the trajectory, it will not be possible to write a system library in Swift until probably v 7 or 8 based on discussions on the Swift Evolution mailing list. Objective C isn't going anywhere.
I see your point but your analogy is exaggerated. Programming is a very accessible field while surgery is not. I was self taught and now work at my dream company. You can do it, if you want!
I asked this at WWDC when Swift came out about UIKit. They said no.
A delegate would be a reasonable way to do that, yes.
Then you'll also need to write a backend. Might wanna give yourself a few months to learn all this. 
I've been trying to find a halfway decent tutorial on how to build a force directed node map for so long. Thanks!! 
You're very welcome 🤗 Please check out part two [here](https://medium.com/swiftly-swift/the-right-way-to-write-dijkstras-algorithm-in-swift-abb14ce66b00)!
then that is one of the problems. move your timer to the viewmodel. This way it won't be messed up when dequeuing a cell.
Oh perfect! Thanks again! 
Considering they are not using it to heavily in iOS (last time I've checked it was only calculator and WWDC app) I don't think so.
I feel it's free and would help you why not just post the idea and see if someone wants to make it?
I was surprised to read recently that Swift is not really integrated into iOS fully yet. Probably butchering this explanation but Swift apps are deployed with a swift compiler/libs because they're not shipped natively with iOS yet, which is why Swift apps are bigger than objC apps. Apparently there is plans to include it when Swift is more stable but we're at Swift 3 now and it's still not. Makes me question whether I should have relied on Swift when even Apple isn't fully committed to it yet.
A lot of the Obj-C frameworks are in turn written on top of C or C++ frameworks. Core Text has a C API, although it's actually implemented in C++.
I dont wanna be a ball buster, but the idea/desgin/story boarding is the easy part. The actual implementation is the hard part. Akin to writing a to-do list, vs actually executing the to-do items.
Second this. Op says app will be free and will make his/her life better. Share the idea and maybe someone will make it!
You could also override the prepareForReuse method on the cell call super and invalidate the timer
Hi there. Thanks for your reply. I don't know if I understood you correctly by reading between the lines but it appears that you are frustrated with the lack of information on how to structure your project and code as it grows. Is that correct? I have never seen two programmers structure their code the same way. You give your project to any other programmer and (s)he will probably try to restructure it and "make it better" or just plain refactor the hell out of it. What I can offer though is to show you how I structure my applications as they grow and how I move around code to make it clean. Would that be of any help at all? Regarding custom controls: absolutely, that's something that I can do videos on. Any particular UI component that you are looking for?
Thank you for these concrete examples. I then have some things to work with for the channel's next videos.
Great, thank you for this input. Advanced Video Guy. Cool!
Do you live in Europe by any chance? I could recommend you to some recruiters that I know of or some colleagues that I've worked with.
tl;dr use a library
framework*
Thank you! I really appreciate the offer. Unfortunately not, I'm actually in the SF/Silicon Valley area! I've been interviewing a lot/studying a lot, so hopefully it won't be too much longer before I find something. But again, I really appreciate it :)
You’re right, it’s a native element. Jere is the documentation, you should also read a few articles explaining how it works :) https://developer.apple.com/documentation/storekit/skstorereviewcontroller
There were also apps having similar screens before 10.3. They were using a library and I guess just collecting the data for themselves
Seems like if you want to do it in one line, it would be a very long line. https://medium.com/swiftly-swift/dijkstras-algorithm-in-swift-15dce3ed0e22 
Awesome! Thanks!!
&gt; For Android (which I know very little about), I think that that still requires Java. Kotlin is now an officially-supported language for Android development, and it's extremely similar to Swift, so probably a better choice for someone with no Java experience.
Well, the thing is, I actually don’t want it to be invalidated... I want the timer to go on until it is stopped - and each cell to have its own timer. I’ll probably jist put the timer object someplace else, maybe the viewModel or even viewControler.
Ah don't be full of shame. I appreciate you trying to find out. I think that its some sort of new shadowy trend that has appeared on dribbble. Anyways, keep up the good work! Looks great. 
Thanks again for the edit but I have been trying to figure out firebase database since then. I imported all the facts to firebase but when I launch the app I only get the first fact. After that app crashes, and couldn't find a solution for that :( I think I will go without database option. 
Don’t give up! :) You are probably trying to use variable that doesn’t exist or something similar. Make sure to use “if let” checks for the data you download from the web.
I'm currently in the exact same situation.
Well aware of that, such is life! That's why I need to be working with some professionals
That's exactly how I'm wired. I feel like it might be a good venture to learn basic swift/androiddev as well just to bring those ideas to life. Sometimes there's an idea in your head that only you can visualize, it's hard to put into words and explain it to others, and the best way to is to make it yourself. Sometimes programmers can get frustrated because they did what the designer asked, yet he is still unpleased. I totally get that.
Fair point though. What resources would you recommend to learn programming swift/androiddev. I've learnt programming in the past but they were scatter-minded ventures. I felt like I was learning a new language but didn't end up using it and so it was useless. I want a more results-based approach where I can actually just learn what I need to make what I want and take things from there
This is awesome. I've always thought about contributing but it's just so damn intimidating looking at their repository. This definitely takes away a lot of the reservations I had and I may just have to give it a shot. Thanks!
Glad I could help 😄
Only use unowned if you know self will never be nil. Use both keywords for classes that hold a reference to that block so you don't create a retain cycle
I would never write or use that code, but support for Swift 4 Decodable types would be great. While manually implementing `Decodable` is a pain, somewhat accepted practice is to map your JSON directly to `Decodable` types and then use those types to initialize the types you want. Being able to generate those raw responses from JSON would be great. The developer would just need to provide names. For example: { "string" : "string" } would become: struct Whatever: Decodable { let string: String } 
Please explain why we want these and what they can do.
Thanks for clarifying that! 
Very cool I just requested a Beta. I am also in the D.C. Area, finishing up a boot camp. I will be on a two week trip in Peru are there any apps you recommend I use to learn swift?
The Swift standard library has `repeatElement(_:count:)`, so there's no real need for `repeater(value:times:)`, and `repeater(value:)` is probably best renamed to `repeatElement(_:)`. Nice job on staying close to the standard library conventions otherwise, and very good use of `LazySequenceProtocol`. Well done!
Hi Mike! Thanks for muscling through our code review to get that SR about contextual types fixed. I look forward to seeing you in the pull request queue in the future, keep up the good work.
Thank you for helping me along the way! Couldn't have done this without your help 👍🏻
For everyone that answered: I used the resources page by Apple and [this video.] (http://www.newthinktank.com/2017/05/learn-swift-3-one-video/) I was honest and told them that I had just started learning it this week, so they're going to give me a few months to learn Swift and then go on to Artificial Intelligence. Thanks to everyone and their support. I think I will now pay for the Udemy courses since I have more time to get the most of them. 
↑
↑
↑
↑
↑
↑
↑
↑
↑
It's easiest if I let Python's [itertools](https://docs.python.org/3/library/itertools.html) description explain for me: &gt;The [framework] standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure [Swift].
This is an Apple provided piece of functionality that is part of the StoreKit framework. Try having a look at this link: https://developer.apple.com/documentation/storekit/skstorereviewcontroller
Thanks for the feedback! I wasn't aware of `repeatElement(_:count:)`. It looks like it returns a `Collection` rather than an iterator-sequence, so my only concern is creating ambiguity given the return types of the other free functions. I agree with you that it seems like a better fit in name by precedence, but I'm not sure how to proceed. 
Interesting, thanks for the reply!
The core developers don't really like it, either. There was a proposal to remove the .self requirement last year: [SE-0090](https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md). The proposal was not approved for a number of reasons (see the rationale link), but it wasn't rejected either so it will likely come back up again when someone has the opportunity to refine the identified problems.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [apple/swift-evolution/.../**0090-remove-dot-self.md** (master → 55791d3)](https://github.com/apple/swift-evolution/blob/55791d37d89be9492edcf780a7f5302cceab6a00/proposals/0090-remove-dot-self.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dmbg48c.)^.
`group(by:)` reminded me of `Dictionary(grouping:by:)` in the standard library; those two are quite different though in terms of functionality. But it made me think whether `group(by:)` would be better as `Array(grouping:by:)`, to be more similar to the standard library. Might be worth thinking about in general.
I would just pick an idea and try and build it. 
This is a really cool idea and tool! Why did you decide to keep `accumulate`, given Swift's `reduce`?
`accumulate` is like a `scan` in other languages, which is not the same thing as `reduce`. let values = [1, 2, 3, 4].accumulate(+) // [1, 3, 6, 10] `accumulate` is basically a `reduce` that also stores intermediate values.
Totally missed that! Makes sense
https://github.com/lkzhao/Hero looks useful.
&gt; What I can offer though is to show you how I structure my applications as they grow and how I move around code to make it clean. Would that be of any help at all? it would be awesome! it's what I'm struggling the most - figuring out, where new functionality should be added, so if you'll show evolution of app code and structure it would be great. For example: where do you put new animations or how do you refactor some parts out of VC or moving from storyboards to code, basically, everything will be super useful! &gt; Regarding custom controls: absolutely, that's something that I can do videos on. Any particular UI component that you are looking for? Yes, as I said - custom tabbars and navigation bars - when should I use it instead of Apple's ones? How to create it, how to store VC's inside it, how to layout views in it properly, from each one I should inherit (UIControl) and from which one I shouldn't (UIButton), what existing protocols should be implemented and what protocols should be created for most comforting reuse of components. For now I'm trying to build my own tabbar, because I want to add some fancy animations to bar buttons, when user switches from one tab to another and I just couldn't figure out the way to make it with standard one. And other thing is animations. There are a lot of tuts how to build view animations, but almost none how to use it in actual app - how to hide and show views, move views, resize views in context of layout constraints. All that fancy animations of coordinate x of view are completely falling apart in different screen sizes and devices.
If you don't have any professional experience yet, I think it comes down to building projects that YOU want and networking. I met a friend playing IM soccer in college, and one weekend we built a connect 4 app with online matchmaking. A year or so later we met an entrepreneur at a meetup who had a product called Party Tutor. He was looking to build a new app idea he had, and ended up picking us because he liked our connect 4 app so much. (and we were cheap college kids at the time). Because of that relationship, ended up landing a contracting job at an agency, and a few years later a senior iOS position. The hardest part I think about being a freelancer is finding people who are wiling to spend the cash for what your skills are worth. Most people expect you to make snapchat on a under 10K budget. You can resolve this by being very transparent and open about your process. Product owners typically aren't very 'coder' savvy so you have to explain yourself on terms they can understand. (comparing app making to house building is a great analogy) And as far as language goes, if you are freelancing, people typically don't care what language you use to get the job done, conversations are more about what can you get done with X amount of money. IMO, I'd say Swift, its what I use on a daily basis, plus it will speed up your development time. 
I wanted to contribute to Swift regarding a 'bug' with notifications but I think this API is not open source?
What kind of bug is it?
I forget the details but basically iOS doesn't like overly-detailed dates used for setting notifications. If you create a date using timeIntervalSince, then derive the Calendar/date components from it, it won't work as input to a notification. You have to create new, empty datecomponents and copy over only a few fields from the previous date components. I did some testing and documented specifically what's happening so I could fix it but I couldn't find the notifications codebase. I'm thinking it's not open-source like Swift is. Sucks because I really would have liked that on my GitHub resume.
Use one of them any time a block is escaping. When in doubt use weak. You can always use weak safely and it protects you from unexpected retain cycles if the ownership graph changes at a later date. Unowned is **only** acceptable when self owns the block(either directly or indirectly through other objects it owns), but even then you're kind of pointing the gun at your foot. Change the code structure the wrong way and bang. My dev team basically never uses unowned. 
When I see the things people do with swift's pattern matching I get jealous. It seems to be incredibly powerful, but I haven't done anything with it yet except for the most basic things. That said, it did take me a while but I fell in love with map/flatMap/reduce and I use them for most of my array iterating needs now.
`Collection` inherits from `Sequence`, though, and using it has a lot of advantages.
Probably Delegates or ARC
Initializers is a good one, memory management, multithreading, constraints still throw me off sometimes when trying to optimize for all screen sizes, trying to abstract certain logic out of view controller gives me troubles sometimes, and closures (escaping vs non escaping and the different syntax throws me off) 
I'm still pretty new but I just can't wrap my head around enums with associated values and raw values. I can read the documentation and think that the examples make sense but I try to identify situations in my own code where they might be useful but ultimately can't implement them
Use enums in place of indexpaths in tableviews. https://medium.com/swift-programming/swift-enums-and-uitableview-sections-1806b74b8138 
Swift itself xD
Try to make my first own app :(
Structs vs Classes I can use them, but I have absolutely no idea why or when to use each one.
Read up on stack vs heap memory. Before you understand the difference between the two you won't get it. A few things I can tell you without getting too deep into it: * The stack is fast * The heap is slow * The stack has a very limited size * The heap has an unlimited size (your RAM is the limit) * The size of objects on the stack must be known at compile time * Stack memory is dynamic Basically, you'll use heap memory for objects that are either: * long living * large * variable in size In most other cases the heap is sufficient and more performant (aka structs).
What do you mean ARC? Doesn't ARC just mean you don't have to manually manage memory? What do you need to learn about ARC other than like strong reference cycles or something. 
Just do it. Start with something stupid and small. It gets overwhelming when you come up with some grand idea for an app and you've never made an app before. Just start small and get something finished. Then go from there. 
You need to know when to make certain objects 'weak' / 'strong'. ARC does a good job at helping you, but it doesn't "just work." You need to write code in such a way that is conducive to let ARC do its job as efficiently as it can. 
MVC and patterns in general. 
Thank you, I will try to incorporate this!
Have you done the Stanford iOS 10 course? Even the first couple of lectures really helped me understand MVC
Hey, depending on the app I might be able to help out 
CoreData would be much easier for something like this. There are countless good tutorials on this subject, look for the one on RayWenderlich for example. 
Most structs being allocated on heap. Only those with couple properties got on stack. So the real difference between classes and structs is copy semantics and inheritance.
I learn as I go and I'm continually impressed at how easy Apple has made it to develop apps. A little google, a little Ray Wenderlich, and a little intellisense can take you pretty far.
Do yourself a favor and dont use core data, learn how to convert that array of strings to Data and write that data to a file you create on the user’s disk.
It's Foundation, closed framework written in ObjC
Right, that's part of iOS, not part of Swift.
I saw that one but it didn't explain how to save the array, unless I missed it somehow.
Do you mind linking some tutorial how to do it?
[Disk](https://github.com/saoudrizwan/Disk) is one way to do it. Here's a quick snippet I threw together to do it on your own though: import Foundation struct MyStrings: Codable { let name: String let strings: [String] } // Your strings let strings = ["One", "Two", "Three"] let myStrings = MyStrings(name: "SomeName", strings: strings) // Save do { let encoder = JSONEncoder() let data = try encoder.encode(object) let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first! let yourFileName = "MyStrings.json" let fileUrl = documentsDirectory.appendingPathComponent(yourFileName, isDirectory: false) try data.write(to: fileUrl, options: .atomic) } catch { fatalError(error.localizedDescription) } // Retrieve do { let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first! let yourFileName = "MyStrings.json" let fileUrl = documentsDirectory.appendingPathComponent(yourFileName, isDirectory: false) let data = try Data(contentsOf: fileUrl) let decoder = JSONDecoder() let myStrings = try decoder.decode(MyStrings.self, from: data) // now you can access your array of strings let myArrayOfStrings = myStrings.strings } catch { fatalError(error.localizedDescription) }
I have that bookmarked but haven’t been able to go through it as I’ve been working on an update to my app for quite a while. However once that’s finished I’ll definitely look at it. 
Ah, that's unfortunate.
Where did you get that from? I don't think that's true. I would be incredibly expensive to allocate heap memory every time an object is either passed to or returned from a function.
Gotcha, so basically managing who owns the memory of your references?
Thank you a lot for your time. I will use this method.
https://developer.apple.com/videos/play/wwdc2016/416/
Timer is not precise depending on your timeInterval. See more here: https://stackoverflow.com/questions/30983111/swift-timer-in-milliseconds
The answers in there are correct. What you want to do is have each timer only run once, but then calculate the offset for the next timer. This keeps the drift from accumulating. Also 0.01 seconds for haptic feedback seems like it would just be a constant buzz.
It gives haptic feedback when the data given in Array matches with counter in Timer. It checks if they have the same value in each 0.01 seconds because that's how precise the modern music is.
It depends on what you are trying to achieve. Do you really need a persistance layer as complex as CoreData, or can you just write it to a file? Is it just an array of strings? how many? If it's just 10, just go with UserDefaults. Do you need indexes? Do you want to search them. Is there more data?
I started out learning MVC but then had to learn MVVM and RxSwfit / RxCocoa and I'll be happy if I never go back! Maybe just something to look into.
Anyone have a link to a good intro to using Instruments? 
Interesting! Do you know where approximately? I've seen this talk before, I don't remember hearing something of the like.
Absolutely. Because as your app grows in complexity, ARC seems to start loosing efficiency due to that complexity. So learning best practices will make for a better start-to-finish development process. 
Im trying to build GUIs without storyboards. When I first started to learn Swift storyboards really bugged me. I know it seems like it would be easier to do it visually but I am able to grasp things a little better if I do it programmatically. 
Consider using CADisplayLink for more precision https://developer.apple.com/documentation/quartzcore/cadisplaylink
I didn't get to it, but the rest of the book was solid so I expect this chapter on instruments from Hacking with Swift to be the same. https://www.hackingwithswift.com/read/30/overview 
To make it move faster, either fire the timer more frequently, or scroll further when it fires. To make it lock into place, when it reaches the place you want to lock it, then set the timer for however long you want it to remain locked; when that timer fires, it is time to put in the other timer for doing the moving. Or you could have 1 timer, fire it at a regular interval, and have a little state machine (or a flag or two) to tell you if, when it fires, you should move it or not and keep track of where it is and how long it has been not moving so you know when to switch the flags to tell you to start moving it again.
In addition to this good advice about timer inaccuracy, is it possible that you are setting off multiple timers? That would have the effect of making it seem like time is passing more rapidly.
I've found doing it programmatically to be much easier.
It's really easy to do – [here's a guide I wrote](https://www.hackingwithswift.com/example-code/uikit/how-to-ask-users-to-review-your-app-using-skstorereviewcontroller).
Generics
Haha I actually used that guide today to do it. Didn't know this was your site, I have learned a lot from it!
Yeah, I’m definitely not stopping at MVC. Just want to get that down first since it’s what Apple uses. Any resources for MVVM, React, etc?
Jebus. How are you doing this?
What do you mean? Which tools I'm using?
I've actually turned off another timer and tried with only one timer. It gives same result. I also tried it in a fresh new project and still gave me same result. I made sure the same timer is not running twice or more.
I really don't know why but I do too. I have been watching LetsBuildThatApp on youtube (think its Brian Vong?) and he does it all programmatically which resparked my desire to learn swift. I guess coming from web (html/css) has just made it easier to click doing it this way.
For react I recommend the RxSwift book by raywenderlich. As far as mvvm there are tons of articles out there. I don't know of any off the top of my head that hit me and stuck with me because it converted me to MVVM. I was more told we do MVVM and this is how it works so get used to it hahaha
Well, yes. "You won’t need a mac. Any computer will do, Linux, Windows or mac. You will write and test your code on a browser." How? 
Swift is open and there's a version for Linux. They run that on their server and they compile the code you write on the server. You're not going to be developing an iOS app.
I think part of the first issue to address is whether you understand how Timers work. An NSTimer schedules an event on the run loop. The run loop performs its operations, calling scheduled items, seeing if any scheduled ports have provided data, and seeing if any timers have elapsed. Let's talk about that latter portion. Imagine the implementation. There's a constantly running loop that has an inner loop that iterates over the timers. It checks each timer against the current time to see if the current time has passed the timer's scheduled fire time. If that's the case, then it schedules that timer's action on the queue of actions to fire and checks the other timers. It's very important to notice what wasn't said: The timer does *not fire at a specified time*. The timer is merely checked during the run loop and its action is queued to execute *if the current time has passed the scheduled time*. A timer does not guarantee a specific time or period. It merely creates the opportunity. I would almost guarantee that if you logged out the time that the timer was schduled and the execution time in your action callback, that you'd find that that the period meets your expectations. In most scenarios, that's good enough. The run loop executes quickly enough and timers have a large enough period (and require minimal accuracy) that most apps don't even notice. However, there are a lot of things that could cause this to begin backing up and making it *look* like it's not working correctly. If you're scheduling time consuming tasks on the main queue, you may be blocking the very run loop that you're scheduling these timers on. In this case, by the time that the run loop loops, it's some fraction of a second beyond the next scheduled timer. If that keeps up, it *seems* like the timer is firing faster but it's really the run loop being slow and catching these timers at awkward intervals. This can be further exacerbated by scheduling timers with a very small period. NSTimers has a fairly high-level API that obscures these concerns. If you need very fine-grained timings, you should look into other APIs that can guarantee it.
Dispatch group, I have an 90% finished app and I havent got around to it because for some reason im getting imposter syndrome and I dont feel like its going to work...
I agree storyboard really irk the crap out of me coming from using VIM, I haven't delved into doing everything programmatically but I soon will.
Any struct larger than 3 words gets put on the heap. So pretty much anyone using Structs as a way to "improve the speed of their code" is actually not doing so. Most cases where the speed would be gained, the structs need to be incredibly small, e.g. having only an x and y properties. Your model objects that contain a ton of info from your JSON call aren't going to be faster.
why? I use core data for almost a decade and it works like magic. The syntax sucks as any other database language but once you get used it works well.
There is /r/SwiftOnLinux It's a nice, safe and expressive modern language that does not need an interpreter or VM and produces native .o files that just work with the system toolchain and C libraries. The association with Apple is probabaly keeping away many people that would have otherwise been thrilled to have it. Even a relatively small community of non-Apple swift users could easily grow to be bigger than the entire user community of languages like D or Rust - and will enjoy the significant resources Apple spends on it. 
Well yeah arrays, dictionaries and strings (their storage at least) are heap allocated. I'm not talking about those. I'm talking about a `Vector3` of `Int64`s for example. So fixed size structs. I'll have to rewatch that talk. I know that this is definitely not the case for other languages like Rust or C++. This sounds like a performance nightmare.
clip. on. mic!
Thanks for that subreddit link. I try to make friends in the Linux community to use it, but people get wary of apple backing unfortunately.
Ok this is the array I want to save, http://i.imgur.com/sArevW6 There are 2 dictionaries inside the array, first one has key "name" with value (first, second,third), and second dictionary has key "color" with value as array of strings. I need to be able to save this data and also fetch it. What would you recommend to use?
btw I tried to install disk with cocoapods and I got error [!] Unable to find a specification for `Disk (~&gt; 0.2.1)`. Any fix for this?
if it's just those 3 values, use UserDefaults. In case it's more, just write it to disc as suggested above.
Came here expecting Game of Thrones, was utterly disappointed.
By using repl.it or IBM's Swift box. You're using a browser to communicate with a Swift repl on a Linux instance. 
Exactly. This course is for those who don't have any previous programming experience. You will learn how to code and server-side Swift. I'm also launching a kickstarter campaign for a new iOS programming course. For this one, you do need some programming experience. 
Thanks for the advice, my concerns are just that a simple app might not be enough as portfolio. But yes I'll get to work and develop something, in the end the hard part is too complete a project 100%, I'll get to work!
PM me your details/CV
True indeed, really fun too, except IB, IB not fun sometimes :)
In your `numberOfRowsInSection` tableView data source method you can use `UISearchBar`'s `selectedScopeButtonIndex` property to decide which array to use based on the selected index. `UISearchBarDelegate` has a method `searchBar(UISearchBar, selectedScopeButtonIndexDidChange: Int)` that alerts you when one of the scopeBar buttons has been tapped. Give your search bar a delegate, then in the implementation of that function you simply have `tableview.reloadData()`. That should reload the tableView with the right array.
I will do in the next few days - I'm currently on holiday and away from my laptop with the CV on 
Hell, I funded an iOS one and a Swift copy of it. It needs to be updated to Swift 4 but I have 6 courses. Wish I had time to update this now.
IB is tough for me too. I found that life for a lot better when I started doing everything in code.
A video tutorials on MVVM architecture 
Looking forward.
Pretty please? :o)
It will be out once the book’s first chapters are up, will keep you in the loop 👍
I’ll happily inform you once the first chapters are out! 
Mind keeping us updated? :)
When I joined work I was assigned to help with a really cool app, but then suddenly the have moved me to completely new project that is even cooler then the previous one, and I am now developing it myself! Framework still needs polishing, but I will sure do release it on github and post it here :)
Swift is definitely the future of development for Apple products. For performance reasons, Swift’s a really interesting language to be running on the server. But it’s also excellent for memory.
I came here expecting the leaked premiere of season 8. Utterly disappointed.
I would make use of [scrollToItem(at:at:animated:)](https://developer.apple.com/documentation/uikit/uicollectionview/1618046-scrolltoitem) and call it manually on a timer.
James Dempsey has a nice sample project: https://github.com/dempseyatgithub/Sample-UISearchController
This is something I need. Video is nicely shot but audio is a bit annoying. Nothing that will stop me watching your videos though. 
Make sure you've run `pod repo update`
I come from a web dev background as well, and have thought the same thing. I don't think there is much difference between visualizing divs and views.
Apples Swift book or? 
Thanks for the reply. Do you think setting the scroll position to .right and .centered horizontally will give me the desired effect? Just did a stackoverflow search and saw a great suggestion but not sure if it's in line with your advice. The documentation is great. Thank you for the resource. [StackOverflow](https://stackoverflow.com/questions/15985574/uicollectionview-auto-scroll-to-cell-at-indexpath) 
Thanks for the suggestion. I implemented this last night and it's doing well.
It depends on what look you're going for. Centred will move the cell to the middle of the view, as you'd expect. I'm not sure what your desired effect is!
Definitely worded that wrong haha. That IS the desired effect. Thanks again for being helpful. Best,
I don't think people are specifically wary of Apple as much as they don't see why it is relevant to them. Swift is "that language for developing iPhone apps". It is a perception issue. And it can be hard to find any online material about swift that is not heavily "contaminated" by Apple-specific stuff (cocoa? what's that?) 
I am working my way through the new "App Development with Swift", reading an annotating, completing labs. It is nice to start simple, but I want to get coding. At the same time, I am designing the data structure for two of the apps I want to build-- a journaling tool and a publishing coach.
How collections are stored in a file and then retrieved and loaded. Database stuff.
Cool, it worked.
I would love to hear more about "Cocoa is completely reliant on dynamic features that do not yet exist in Swift." I don't know what that means.
- Writing tests - Core Data - Changing constraints programmatically at runtime
I believe the best way to go about this is to just try and do it. I'm currently doing it with a personal project I started working on last week. It's a first time for me as well. I have done some views with pure auto-layout in another project I've been working on for work, but I haven't done a full UI for an app in code yet. I'm using [SnapKit](https://github.com/SnapKit/SnapKit) because I believe it does a much better job at keeping the code readable compared to using Auto-Layout by yourself. So far I'm loving it. However, I haven't gotten into anything super complex yet.
What's wrong with the audio?
People that get turned off of technologies by certain companies founding or being attributed with it really should look at a different profession. I can't live without C#, typescript, tensorflow, etc anymore.
Apple's, yes.
Great one. Just learned to contribute... something I wanted to do but didn't know how to start.
Responder chain. "First Responder" concept for one. For instance, when putting together a menu bar, you can have the "Copy" menu item bound to "first responder" which will be the first thing in the view hierarchy from the currently focused widget up that implements "performCopy:" (or whatever the actual name is). How does that work with Swift's strong typing system? It doesn't. There is no way to say in pure swift the equivalent of if([object respondsToSelector: @selector(performCopy:)]) [object performCopy:self]; But Cocoa's event dispatch uses that. That's one example. Being able to harmlessly message nil - that's another thing that Cocoa does all over the place internally. If that didn't work, Cocoa would constantly crash (so I'm told by a very old Apple engineer). Key Value Coding/Key Value Observing...no such thing in pure Swift. (OK, they just did keypath - in a fairly limited way that requires compiler support - fun fact - once you have a key path, there is no way to get the string representing the path back from it - yeah really). Objective C's runtime enables KVC/KVO. In fact this capability was added long after Objective C was built because Objective C has the dynamism to let anyone write such a thing. You don't have to be a compiler wizard and change code generation to make it work. To kick off a little rant - Codable seems great....until you realize that Codable can be done in Objective C via class property introspection without compiler help - as can many other tricks be done via class property introspection. But Codable relies on the compiler to generate code and there is no publicly available class introspection in Swift as yet. Codable is trivial to build if you have class introspection but the Swift team chose to do the lesser thing rather than the greater thing that makes the lesser thing trivial to do. The greater thing is on the roadmap...like a couple more versions out. Ditto Key Value Coding (KVC) and Key Value Observing (KVO). You can build that feature in Cocoa without mucking with the compiler because the dynamic features you require are there. In Swift, you'll have to wait to see if the compiler team decides to build it (or hack the compiler yourself). At the moment, the Swift team seems more intent on taking out C++ than enabling the dynamic capabilities of the Objective C runtime. I'm sure it doesn't seem that urgent - after all Objective C's runtime continues to do the heavy lifting on the Mac and iPhone. 
Your voice echoes a lot. Seems like a great resource, though. Good luck with it!
TDD and by extension an architecture such as MVVM that facilitates it.
Nice. Thank you 🙏 
This is going to come off as harsh, and I mean for it to a little bit because I am hoping it causes you to rethink how this style can scale in code and the rammifications of teaching this to others. This isn't an animation, its a system call. Take a simple animation like a view falling off screen with gravity. This style means you could never write this kind of animation. "It’s generally a bad idea to modify a view’s frame just for the purpose of animation." Says who? This is completely false and I find the transform to be far worst as it does some magical CALayer business and should be a layer most people ought to avoid if they can. Transform is a horrible property and I wish Apple would just nuke it. For one, updating transform does not update the bounds of a view which kind of breaks scene graph thinking. Apple itself says to use the center property for translation yet the definition of a CGAffineTransform, or any affine transform is a translation, scale, rotation. Writing code like this will cause an uphill battle on all kinds of regards. This article should be renamed to : How to call the system function: UIView.animate, which again I do not recommend. You won't be able to pause and resume animations. Animations should always be one line of code philosophically, or try to. As a programmer I want to think like: Move right in 10 seconds. Scale Out, Bubble In. FadeOut... and should modify properties of UIView that can be relatable rather than losing context into untrackable magic blocks using system layers that shouldn't be touched 
Thank you for your opinion. I'd love to take the time to go more in depth into each of your points if you can spare the time. Would you be able to share an example of an alternative approach? You mention that by using UIView.animate, you relinquish the ability to pause and resume animations. Do you instead recommend the use of UIViewPropertyAnimator to modify the view's `center` property?
I can make 10s of videos from every single one of the sentences that you wrote in your reply. Great stuff, thank you for all the suggestions. I am not very good at coming up with these new materials myself so I'm very grateful for your suggestions.
Best of luck and I hope you'll find a satisfying job soon.
At what level? Intermediate to advanced or for beginners?
Realm is awesome
Great, can't wait to see your next videos!
Your understanding is pretty accurate. Delegation is one of several ways that two objects can interact with one having minimal knowledge of he other. In this case you could reasonably have used a closure instead of a delegate. You could have also just set the target/action on the button. You could have even have used notification center. All of those would work but only delegation or closures would be good choices in this case. I'd probably lean toward a closure here since delegation is generally more often used when the the interaction involves several related functions(think table view delegate), both choices are reasonable. The use of the protocol in the delegate allows the cell to not know about or be tied to any particular table, which is good design in general. Because of this you could easily use these cells in another table. Oh and you're right that self refers to ToDoCell since it's being used in an instance method of ToDoCell. 
Your understanding is correct (like, the way you explained it, you understand what you are doing). How you were to know when to use it? Well, you press the button, something needs to happen. This 'something' can be inside the cell. Give the button an animation when clicked, for example. If it's in the cell, it's easy. But also something outside of the cell might need to happen. With the delegate, you can couple any action to the button click. In this case, it's your ToDoTableViewController. The protocol basically says "anyone interested in this *checkmarkTapped* action? implement me!". So the ToDoTableViewController implements the protocol, and can be informed when the checkmark was tapped. This is actually a good tutorial, showing you *decoupling*. (You could also have a var in the cell, *var toDoTableViewController: ToDoTableViewController?*, and call a function on that object directly. You never want to do that.)
Thanks for the feedback! Closure are the next chapter, so perhaps I'll revisit this when I learn about them. 
Thanks for the feedback and clarification!
Well animation in the end, is the altering of some data over a period of time. For UIView's this would be a frame, color, alpha, or any other property that can change. So a first step would be to get a means of doing work over a period of time... ie: An UpdatableView. To do this you need an update loop. Every application for every system has a means of implementing an update loop. Most systems use timers, others just have a while ( true ) loop until a break condition. In the case of ios I like to use CADisplayLink. I only have a few snippets in objective-c but it is just an sdk call. To make sense of this it is also helpful to have good categories that make ungodly awful looking code like view.frame = CGRectMake( ....... ); so left, top, bottom, right, size, width, height, etc.... In some kind of subclass of UIView this would be like: -(void)createUpdateLoop { if (!self.updateLoopTimer) { self.updateLoopTimer = [CADisplayLink displayLinkWithTarget:self selector:@selector(updateRefreshRate:)]; [self.updateLoopTimer addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes]; } } - (void)updateRefreshRate:(CADisplayLink *)displayLink { CFTimeInterval deltaTime = displayLink.duration * displayLink.frameInterval; [self update:(float)deltaTime]; } -(void)update:(float)deltaTime { // Now we can change data over time, called 60 times a second this.centerY += 10 * deltaTime; //constant velocity } Then, once you have this, you can abstract various animations. Start by making a class that takes a ViewToAnimate. Such as a BaseAnimation. Then you subclass this with something like MoveToAnimation. So a MoveBy once started, records the start position, and the destination position. Then lerps between the two points. Since the BaseAnimation requires a view. This animation just modifies the views frame. In this case, its position. But nothing prevents me from modifying other propers of UIView like width and height or even alpha. #import "MoveByAnimation.h" @interface MoveByAnimation () @property (nonatomic, assign) CGPoint startPosition; @property (nonatomic, assign) CGPoint destination; @end @implementation MoveByAnimation - (id)initWithTarget:(id)target duration:(NSTimeInterval)duration moveVector:(CGVector)moveVector { self = [super initWithTarget:target duration:duration]; if (self) { self.moveVector = moveVector; } return self; } -(void)start { self.startPosition = self.view.center; self.destination = CGPointMake(self.startPosition.x + self.moveVector.dx, self.startPosition.y + self.moveVector.dy); } -(void)updateWithDeltaTime:(NSTimeInterval)dt { [super updateWithDeltaTime:dt]; self.view.center = CGPointMake(self.startPosition.x + self.moveVector.dx * self.normalizedPosition, self.startPosition.y + self.moveVector.dy * self.normalizedPosition); } I can subclass to other types of animations. In the case of a falling object: FallAnimation would have velocity and acceleration properties. Then its update loop, I would move the uiview based on velocity. And then update velocity. There are several ways to code the start/complete states. Through a duration or perhaps some condition like being off screen for IsCompleted. But an animation does need an IsComplete state to stop the update loop I mean you will have to determine what pieces go where in your own code base, but these are the moving parts. A typical organization is for the UpdatableView to have a MutableArray of BaseAnimations. In its update loop, it gets the first element. Calls update on the animation. Checks to see if its complete. If it is calls stop. Then removes the animation from the queue. This will allow for a linguistical control of things like: [someView moveBy:CGVectorMake(100,0) in:10]; //creates MoveByAnimation object and adds to someView's queue. [someView fadeTo:0 in:2]; // creates FadeAnimation and adds to someView's queue. FadeAnimation alters view.alpha If you use a queue, this means you can string them together linguistically. A massive advantage. A pause state could just not process the queue. 
The main problem is ambiguity. Suppose I have class C {} foo([C]) Is [C] an array literal containing the metatype of C (what today is written as [C.self]), or the metatype of arrays of C (today is written [C].self)?
I'll record the next video with a clip on microphone. Thanks for the heads up and kudos!
&gt; if I were developing this on my own, what would have indicated to me that a delegate protocol was necessary? You mean if someone forgot to assign themselves to be a delegate with `cell.delegate = self` IE. You want to guarantee that `delegate?.checkmarkTapped()` does something? A pattern I a lot here is to fatalError: guard let delegate = delegate else { fatalError("Delegate was not set.") } delegate.checkmarkTapped() &gt; Secondly, how exactly do all the pieces fit together? Is my understanding on the right path? Yep pretty good. The `ToDoCell` wants something else to handle what happens with the checkmark is tapped. It doesn't care what or even know what. The `ToDoTableViewController` puts its hand up to say "Hey I can handle that" by conforming to the protocol and assigning itself to the cells delegate. 
Create an array of colors as an instance variable in your VC. let dividerColors: [UIColor] = [.green, .red, .yellow... etc] Then in cellForRow: cell.label.backgroundColor = self.dividerColors[indexPath.row % dividerColors.count]
Honestly, it's a top five feeling for me as a developer when something someone suggested on Reddit works perfectly. Thank you for going above and beyond by not only giving code, but telling me where to place it in a timely and polite manner. Best, 
Anytime!
It *isn't* Nyan Cat?
http://bbcnewstop.blogspot.com/2017/08/taylor-swift-debuts-look-what-you-made.html
yeah
I'm redefining Equatable on my code. Now my types conform to the NyanCat protocol. typealias NyanCat = Equatable extension HTTPMethod: NyanCat { static func == (lhs: HTTPMethod, rhs: HTTPMethod) -&gt; Bool { /* ... */ } }
Nice.
Did you build anything?
Your problem is that you set playerView.item _after_ you initialize the view. The setupPlayer() method is called from the initializer method, so executed _before_ you set playerView.item. No wonder it is still nil at that point in time. Either pass the item as a parameter to the initializer, or don't call setupPlayer() method from there, but call it _after_ item has been set.
Hey, If i remove setupPlayer() from the init then it doesn't load the func. Where should I call that function?
&gt; or don't call setupPlayer() method from there, but call it after item has been set That means "put the setupPlayer call one line below `playerView.item = ...`". Passing it as a parameter in the init as suggested would be my preferred solution though.
Can you please provide an example of how to pass it in init?
I have been trying to learn swift for couple months. And yesterday my app was accepted to app store. It is not very creative but I did this to improve my coding skills. Only language I used was swift. I also have no prior programming experience. So if you really want to learn, just dive in and be determined. Everytime you achive something, you will want to do more. There are lots of free resources on the internet. You can check my app here: -&gt; iFact - Did You Know? https://itunes.apple.com/us/app/ifact-did-you-know/id1276490012?mt=8
Nope, just faking it. Pays well though.
For learning how to code, yes. I think Swift is a very modern language and based on ideas from different other programming languages. Once you've mastered Swift you will switch to another language very easily. As for the building apps/games part, a lot of the things you will have to learn is not specific to Swift. I would suggest that you study the Apple ibook on swift first. Play with it yourself a little, build some small programs. https://itunes.apple.com/us/book/the-swift-programming-language-swift-3-1/id881256329?mt=11 Once you know the language I would suggest that you watch the following series by Paul Hegarty: https://itunes.apple.com/us/course/developing-ios-10-apps-with-swift/id1198467120, however make sure that you understand Swift first. 
Yes.
I actually liked it, it would be better if we could go back and check them again, or if there was categories
How long did it take you learn and build this ?
What did you build?
Thanks, and did you build anything?
Nope or yup?
Yup, nope!
Nice 
Yes, I am software developer at a medium-sized company (~800FTE) and Ive created and worked on a couple of internal iOS applications. Things like booking hours, reserving equipent etc. I also was on the verge of releasing an app-store game but got stuck on the background music sound effects part as I am not musical at all and the friend who promised to do it left me haning. This was before I got my job so the project is dieing somewhere in a folder on my previous mac
Is there any difference between software developer and IT engineer?
I guess that you could say that a software engineer focusses more on the application level while an it engineer focusses on the system level
Seeing that you made this post yourself Roy, I ask my question here. What really are the usage of this project at the moment? You can login to Spotify sure, but after that? 
I've developed 4 in a couple of years!
Lots of apps. A communication app for disaster notification. CVS's pharmacy app. A digital drivers' license app. A file transfer app. Corporate campus app for traveling executives and mangers of an international company. A few. A bunch. I forget.
For example, do init(item: Item?) { self.item = item super.init(frame: .zero) setupPlayer() } You can add a parameter for frame if you need it. And when you create the view, do `let playerView = PlayerView(item: items?[indexPath.item])`.
Yes i have ever built an app. Have you ever built an app?
After spending the last 3 years in client-side javascript land, I just recently moved onto porting that HTML/js app to the AppleTV. Will be using tvOS and no TVML. Management is of course interested in using our 5 year old Objective-C Rest library which is pretty darn ugly - I am starting down the path of starting from scratch in Swift (shh - don't tell them!) So far I am liking Swift - it can be a bit overwhelming at times - especially when you are referencing example code that uses all of the "shorthand" bells and whistles and you are trying to figure things out (like why the hell is this closure missing the "in" keyword, or what in the hell does .dog(let color) mean - which I now know as an associated enum value... its got some weird syntax and super powerful features - I am starting to like it. I really like that Swift 4 has introduced the Codable protocol. I have also become really fond of the [Siesta](https://github.com/bustoutsolutions/siesta) Rest framework.
Thanks for the question. At the moment, it gets your app a token so you can make web API requests (e.g. update playlists, get a user's top artists, change the queue, search Spotify). We don't have a Swift playback solution yet. 
I changed the didSelectItem to this: func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) { let playerLauncher = PlayerLauncher() playerLauncher.showPlayer() } and made some changes in PlayerView: var itemId: String? var item: Item? { didSet { self.itemId = item?.itemId } } init(item: Item?) { self.item = item super.init(frame: .zero) setupPlayer() } But in the PlayerLauncher class' show Player func it shows like this: let playerView = PlayerView(item: Item) view.addSubview(playerView) and here I get the error: Cannot convert value of type 'Item.Type' to expected argument type 'Item?' And even if I remove these two lines from func, the id is still nil.
Of course, did not think about the web API. Thank you 😊
Because `Item` is the type, and you need a specific, concrete instance of `Item`. Like the things you have in your items array. I'm sorry, but I can't really explain how object oriented programming works in a comment.
I guess I need to ḍig in the books for sometime. Thanks for the help! I'll soon find a fix for it. :)
That *has* to be intentional
Building an app, and releasing on the App Store are two very different things :)
Starting from Beginners to Advanced with different videos
Xcode 8 compatible is preferable if, as you said, you are not planning on working on older versions of Xcode. Older versions of Xcode are mainly for developers that want to support old versions of iOS (e.g. iOS 6), but specially for macOS (OS X) application developers, where users do not upgrade as often and older versions of the OS have to be supported.
Yes, about 5 released on the App Store. One is fairly complicated and others are pretty simple.
Ok thanks! 
Thanks for the feedback. I am actually planning that too. I also want to add "add to favorites" option. Don't forget to check the widget :)
Around 2 weeks. 
ecatable symbol...
Does this mean that the Obj-C library is end of life and that this SpotifyLogin library is where to look for new development?
"Don't have to call `-retain` and `-release`" is *very* different from "don't have to manage memory".
&gt; I know that this is definitely not the case for other languages like Rust or C++. Yes, different languages have different memory models. Java and Erlang and Ruby and Smalltalk are all different still. &gt; This sounds like a performance nightmare. How so? Are you seeing actual performance issues stemming from objects being allocated on the heap, or is this just because the memory model is not the same as you're used to in some other language?
NIBs are, for most of my uses, the sweet spot. Easier to lay out than doing everything manually, but without all the extra magic that Storyboards try to inject.
&gt; Changing constraints programmatically at runtime Hint: despite the name, the field called "constant" is the only one that you can modify. :%
Yeah, mainly I mean adding/removing constraints or adding/removing views and updating the constraints of the remaining views. That just sounds like a nightmare to me so usually I'll find a way to avoid doing it.
This is pretty bad advice and will lead to a lot of unnecessary `weak` or `unowned` references. You should only use them when you have a retain cycle, and no other time. Since reasoning about cycles is hard, I usually wait to detect them with the memory instrument in Instruments or the memory debugger in Xcode. Aside from the easy ones, like delegate's and references to superviews or controllers.
How does this compare to Zewo's Venice library?
Thank you for spelling "log in" correctly! Finally, someone who understands separable prefixes. It's almost enough to offset twice declaring how [passionate](https://www.youtube.com/watch?v=Bz2-49q6DOI) you are about writing computer programs.
This looks very cool, thanks for sharing. May I ask: what is your suggested way of logging in on Apple TV? Since there is no browser there, one can't use the regular login flow. Do you intend to support a PIN based login flow like the YouTube app has?
People would just cheat the system and make no money for the dev
What's your goal? The only thing I can possibly imagine is that you're trying to build a bigger user base, and instead of giving out free tickets to random people, you plan to target Swift programmers. I predict: - Swift programmers won't play a game just because it has a "free for Swift programmers" mode, unless they like the game on its own merits (in which case this doesn't matter). - Non-programmers will feel slighted for having to pay, just because they're not programmers. (Would you enjoy playing a game that was free for all Koreans, for example, but required you to pay? Or free for all lawyers?) - These non-programmers will flood places like r/swift and Stack Overflow to get answers to the questions they see. They won't understand the questions, and they won't get any benefit from the answers, so they'll just be blindly copying questions and answers around. This sounds like the world's most expensive CAPTCHA system, and the existing Swift online communities will end up paying the price. It's not even helping to do something useful with this work, like digitize old books. Seriously, just post 1000 free ticket codes on your webpage. It'll be much simpler and more fair for all involved, and you'll have better control over the number of people who can play for free, and you won't inflict these people on Swift forums. Whenever you want more free users, go post another 1000. Or save even more time and recognize that most "freemium" games make no money at all, and this is like asking for strategy advice for the lottery.
Swift is the only *programming language* you need to know, but programming is only a small fraction of the work of building software. Even if you knew everything there was to know about scalpels and how to use them, that wouldn't mean you'd be able to perform surgery.
You need to assign the view controller. 
Make sure the class is assigned correctly
i did. 
it is.
Don't you think some gamers might try learning Swift to save money especially if many freemium games do this?
Pics or it didn't happen
Swift still needs ABI stability before frameworks are a fully viable production-ready option.
Try restarting xcode, this happens sometimes for no reason
Why can't you drag to create the outlet? 
I did multiple times and it still won't work. 
If I knew I would probably be able to solve the problem. I drag and it will not let me drop. 
Okay that file isn't meant to have an outlet from that storyboard element. What element is it? You can check whether the element is set to the correct class (in identity inspector)
Did you use swift ?
Can I know their names? :)
I don't know that library, but for example, IBM's BlueSocket (a fine socket implementation) mixes the system calls Swift wrapper with the higher level implementation. The goal of this package is to provide just the minimal Swift API on top of the system calls, and leave the higher level API design to consumer packages, to enable experimentation without having to redo the system calls, platform-independent wrapper of sockets time and time again. That's why it focuses on minimal API to expose the socket calls in Swift so higher-level packages don't have to deal with C, and it tries to do so as efficiently as possible (e.g. it takes an array buffer as inout for receive calls, so the caller controls allocations and can reuse buffers). Also, epoll and kqueue, not sure if venice has this but BlueSocket doesn't.
This is the most complicated one: https://itunes.apple.com/us/app/topo-maps/id929001708?mt=8
/u/JakeJS has it exactly right. If you can't drag to create an outlet you're story board item probably does not have the right class name. Click on the view in your story board and go to the identity inspector on the right. Click the weird rectangle thing next to the pencil shape on the top. Then you can make sure the class has the same name as your file. Make sure your file is a cocoa touch class and not just a .swift file too.
It's a table view. And like I said, the class is correctly named. 
As stated in the post, the class is correctly named. 
yes itunes.apple.com/us/app/events-near-me/id1114536700
Did you build it with swift? I've been trying to build apps and games with swift but have no apps yet 
What does hacking with swift do? Is it like an actual hacking or teaching swift ?