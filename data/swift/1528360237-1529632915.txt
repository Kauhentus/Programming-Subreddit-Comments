It's worth experimenting with it. But to take this learning exercise even further, you should write an abstraction layer over it and implement various storage solutions, such as Realm, a plain old plist or even a memory store (just a dictionary), to which the rest of your app would be oblivious. For example, you could initialize your app with a CoreDataStore, RealmStore, InMemoryStore or PlistStore instance, all of which implement a Store protocol which requires at the bare minimum some CRUD methods. I wasn't a big fan of this approach until recently when I hit an annoying snag in Realm (an encrypted Realm cannot be accessed simultaneously from the app and an extension), but luckily that section of the app was written with an abstract interchangeable store in mind. In the end the change was trivial but elegant and really saved the day.
Is there a transcript for the video? I don't watch coding videos, a transcript is often much more direct and useful.
Unfortunately there is no transcript for this video but we are planning to write them for the next ones.
Thanks, that would be great!
It's all just syntax, just syntax. Swift dropped the For..Next loop that's been a part of C/C\+\+ forever. No ; at the end of the line. I haven't done C\+\+ in a while, so I can't speak about extensions, protocols, strings, arrays, etc... but it's all just syntax. IMO, most programmers are going to have to know a few languages. I've learned about 12 over the years. Now I focus on Swift and Python as the main ones. To me, it's just syntax. After you've used any language for a while, it's just like riding a bike. I have heard the C#/Swift/Kotlin are looking pretty close to each other.
It's just a way to get the data model back out from the table. It doesn't matter for the narrow scope of this example, but if you want several different views to work with and exchange the data model, they can all conform to this protocol and talk to each other without having to know/care about the exact type of the views that are holding the data.
just an FYI, the layout of the site has updated, and i switched from a react front\-end to a Leaf front end. The site is also running on Vapor 3. If you click on a link and it takes you to the old layout, then try clearing your cache. If you don't know if you're on the old layout or new layout: the new layout has syntax highlighting and a disqus comments section.
Anyone who doesn't immediately know you have hidden an Optional somewhere buried inside your class that will crash if it isn't set is about 99% of all developers. So you must be that one special unicorn.
Maybe? Drilling down into an app install on the simulator, the storyboards are all contained in a folder called Base.lproj (IIRC, this folder is for the base localization... if you localize further, you will end up with either different folders or subfolders representing the UI in various localizations). The files in here have the extension "storyboardc" for me, which makes me wonder if there is some compilation going on. Base storyboards are just fancy plist files, so I would imagine these are compiled in some way before delivery. That's probably listed when you build. Indeed, it is compiled (example from a project I just built): &gt; CompileStoryboard ~/Cocoa/iOS/Distance/Distance/Base.lproj/Main.storyboard The build process then includes this step (bold for emphasis): &gt;LinkStoryboards (in target: Distance) cd ~/Cocoa/iOS/Distance export XCODE_DEVELOPER_USR_PATH=~/Desktop/Xcode-beta.app/Contents/Developer/usr/bin/.. ~/Desktop/Xcode-beta.app/Contents/Developer/usr/bin/ibtool --errors --warnings --notices --module Distance --target-device iphone --target-device ipad --minimum-deployment-target 11.0 --output-format human-readable-text --link ~/Library/Developer/Xcode/DerivedData/Distance-hivoiopgnohmluamoaeyrpjhmebx/Build/Products/Debug-iphoneos/Distance.app **~/Library/Developer/Xcode/DerivedData/Distance-hivoiopgnohmluamoaeyrpjhmebx/Build/Intermediates.noindex/Distance.build/Debug-iphoneos/Distance.build/Base.lproj/LaunchScreen.storyboardc** **~/Library/Developer/Xcode/DerivedData/Distance-hivoiopgnohmluamoaeyrpjhmebx/Build/Intermediates.noindex/Distance.build/Debug-iphoneos/Distance.build/Base.lproj/Main.storyboardc** So Xcode is doing some linking, which I have never understood (e.g. linker command failed), but I would guess that a few things are true: 1. You can't do this outside of Xcode or the command line 2. It needs to be done at build time 3. You probably don't have access to the place where it needs to go 4. Changes in the storyboard would result in changes in the binary that is signed I am guessing about a bunch of this, but this is my impression.
I read the responses on StackOverflow. They are correct. You need to implement a serialization mechanism to encode the array and save it. Apparently it is more complex than you had hoped. Best of luck.
Thxs 
It took me almost as long to reach and understand this post as it did to watch the actual video presentation (which has more context and detail).
&gt;that goes for unsafely using an &gt; &gt;Array &gt; &gt; without checking the bounds as well as using an &gt; &gt;Optional &gt; &gt; without safely unwrapping it. This is only tangentially related, but I'm still shocked that Swift's Arrays don't offer a method to retrieve a value with bounds checking. Even C\+\+ does... Something like `func get(at: Int) -&gt; T?` for `Array&lt;T&gt;`
&gt;why not, I know for certain that the value is going to be set at this point Well, *you* (the author of code) might, but I (the reader of the code, or perhaps even the author, some time after forgetting about it) don't. That's the point of optionals: they express your intent and assumptions directly in code, in a compiler verified way. If you're going to force unwrap with any non\-trivial justification, I would prefer to see a \`guard\` /\`fatalError\` combo that explains exactly why you assume it should never fail.
There is safe access to the first and last elements of the `Array`. If you want a safer way to get any arbitrary element you can use a solution like: extension Collection { subscript(safe index: Index) -&gt; Element? { guard indices.contains(index) else { return nil } return self[index] } 
Right. Exactly. I'm just surprised that this isn't included in the language/standard library/whatever.
Manual Retain\-Release is the non\-arc version version of memory management that you'd needed to use in objective\-c. It basically means you are forced to clearly mark where things are retained and when to release them from memory. ARC has you covered here but it's good to know the history of it. You'd be suprised how many people I've interviewed that have no clue what ARC is. Memory leaks are a big issue and I always ask a ton of questions about them. It's good to know how to spot and identify memory leaks (exiting entering screens over and over shows a spike in the graph), how to diagnose retain cycles by using 'debug memory heirarchy'. Also the typical problems like closures leaking (capture lists, what \[weak self\] does), retain cycles, strong references vs weak. Then, how to fix it, how you can use weak references, how you can nil objects to release them, and then how you can use 'deinit' to validate an object is properly deallocated. If you understand the differences between ARC and normal 'mark and sweep' garbage collection that's a plus too.
I just updated my Hacker News client app, [8chen for Hacker News!](https://itunes.apple.com/us/app/8chen-for-hacker-news/id1308885491?mt=8). Users can now sign in and post comments! It was quite the endeavor due to the fact that Hacker News' official API does not support this. 
Using force/implicit unwrap without good justification is absolutely unprofessional. You're saying "shut up compiler and just crash the app if I or anyone who touches this code isn't perfect". Over hundreds of thousand of lines of code you're bound to make mistakes many, many times. If you ever make a mistake in an important but poorly tested place, your laziness can cost serious money and piss off hundreds of thousand of people. All because you were too lazy or willfully ignorant to use the tools the language provides. Sure you or QA will notice your mistake maybe 97% of the time, but it's not like handling optionals safely is significantly more difficult. if(!(optionalClass!.anOptionalBool!)) { ... } vs if(optionalClass?.anOptionalBool == false) { ... } So you squeeze out 5 characters and risk a crash on some probably non-critical feature? That's amateur hour. On the pro side, when optionals are bing annoying often that's a sign that you're being sloppy. You can eliminate a lot of optionals by doing dependency injection(if num is required, then pass it into init) or setting reasonable defaults(can num default to 0) . The better you get at optionals the fewer of them you have, and the more useful and meaningful the remaining ones are. Going from an optional disciplined codebase back to obj-c or sloppy swift where you have to nil check *everything bleeping thing* just in case is pull your hair out frustrating. 
Because it's slow.
I think I actually rarely access an array by index, it's also not as common since for loops don't use indexes unless you really exist. I still do a bounds check before getting a value from an array when I dequeue a cell. Don't know of many other uses for indexes on arrays.
It’s finally WWDC, which means I’ve finished posting the last article in my [Countdown to WWDC series](https://www.hackingwithswift.com/articles/72/countdown-to-wwdc-18), but – more importantly – my books are available at half price! All my books are included in the sale: Hacking with Swift, Pro Swift, Swift Design Patterns, Server-Side Swift Vapor Edition, Dive Into SpriteKit, and more, and you can even buy one of my two bundles to save even more – visit &lt;https://www.hackingwithswift.com/offers/wwdc18-50&gt; for more information. In case you missed it, I released a site that provides quick and easy examples of what’s new in each Swift version: [What’s new in Swift](https://www.whatsnewinswift.com/). I also published 60 new Swift articles as part of my Countdown to WWDC series – here are some highlights you might enjoy: - [How to upgrade to modern app infrastructure](https://www.hackingwithswift.com/articles/107/how-to-upgrade-to-modern-app-infrastructure) - [The Ultimate Guide to WKWebView](https://www.hackingwithswift.com/articles/112/the-ultimate-guide-to-wkwebview) - [How to use regular expressions in Swift](https://www.hackingwithswift.com/articles/108/how-to-use-regular-expressions-in-swift) - [10 Quick Swift Tips](https://www.hackingwithswift.com/articles/106/10-quick-swift-tips) - [How to check whether a value is inside a range](https://www.hackingwithswift.com/articles/90/how-to-check-whether-a-value-is-inside-a-range) - [Introduction to Sourcery](https://www.hackingwithswift.com/articles/85/introduction-to-sourcery) - [How to use the coordinator pattern in iOS apps](https://www.hackingwithswift.com/articles/71/how-to-use-the-coordinator-pattern-in-ios-apps) - [Server-side Swift: Kitura vs Vapor](https://www.hackingwithswift.com/articles/73/server-side-swift-kitura-vs-vapor) As for the rest of the month, I’m busy attending WWDC right now, while also speaking at both [Next Door](https://nextdoorconf.com/) and [AltConf](http://altconf.com/) – so much to do! If you want to keep up to date as I post new things from WWDC, [you should follow me on Twitter](https://twitter.com/twostraws).
The Stanford courses are good. Also, check out bignerdranch.com. They might have books that you’re looking. 
This doesn't answer your question, but I would recommend not trying to *master* Swift, but instead just learn the basics, then start building apps. I learned far more about iOS development by deciding to build something than by reading books or articles. Also, there are very few *masters* of any programming language.
That’s more what I meant; I also am in no way expecting to be really good at it in a really quick amount of time. A better way of putting it is that I want to think of any reasonable app idea and know how to at least get started with it and how to build a decent amount of it.
This is what you want... [https://www.youtube.com/playlist?list=PLPA\-ayBrweUzGFmkT\_W65z64MoGnKRZMq](https://www.youtube.com/playlist?list=PLPA-ayBrweUzGFmkT_W65z64MoGnKRZMq)
I’m not sure what you mean by a top-level group. Are you just talking about a folder full of gifs?
Yes I believe so. Xcode calls them Groups, right? Kinda confusing to not just call them directories.
Thank you very much!
Big Nerd Ranch is hands-down my favorite tutorial books. I have prior student programming experience and find these books strike the right balance in learning new material vs. giving you projects to complete to prove to yourself you know the new material (IE: I think Stanford iTunesU goes too fast if you’re not surrounded by same-aged college students studying the same thing: a single project encompasses too many discrete aspects of programming and overwhelms; the Apple Learn to Program course goes too slow and you repeat learning familiar programming concepts). That being said the reddit Swift community is very solid and includes contributors who also make learning material. So you’re is the right place ;-)
Thanks for letting me know. Sorry my notes weren't easier to read and understand.
There's a lot of good guidelines raised by others, but I just want to say something about optionals that I see often. The usage of optionals should be used as sparingly as possible. Every optional introduces ambiguity to your code and makes it harder to reason about. Reading this post suggests to me that you've adopted a pattern of deferred initialization, causing an increased usage of optionals. Try to avoid that and running into the case where you're force unwrapping would be far less probable. 
Toss a love to hacking with swift as well. That is a killer step by step project only resource. I need to check out big nerd. 
I started with BNR and liked their books quite a bit. My only concern about their books is that they are both Swift 2.x. Which is kinda crusty given the update speed of Swift over it's first few years. I read a few of Ray Wenderlich's later books and they are fantastic. Not to mention that they have all the books necessary to take you from a noob to mid level software dev.
Their books are actually Swift 3. Still not the latest though.
I love iOS Programming: The Big Nerd Ranch Guide. This is the book I used to learn iOS development in the first place. I loved their tutorial\-based introduction to iOS and all of the unique things about iOS development, like Xcode, Auto Layout, MVC pattern, etc. That being said, the 6th edition is outdated. It will teach you Swift 3 (the latest is Swift 4, and Swift 5 is coming soon). There are important changes in Swift 4. It's also for iOS 10 and Xcode 8, where as iOS 12 and Xcode 10 are coming soon. If you want to use this book, you will have the easiest time using Xcode 8.3.3, which you can download from the Apple Developer site. If you use the latest Xcode 9 with this book, you will probably run into differences that you may not be able to resolve yourself as a beginner.
I hope I didn’t offend you or anything. It’s just these recap blog posts always seem a little “click baity” to me because the original documentation or source video/transcript is just a good or often better (due to more context or specific details that some people might not deem important enough to include in their blog post, but others will find important)
I passed on anything \&lt; Swift 4. You can find value in it, but you'll be learning Swift 3 and then upgrading t Swift 4. I've read a number of BNR books over the years and they are great, but why bother with Swift 3 at this point?
So is this book swift 3 ? Is whatever i do off this book outdated ?
I have that exact same book right now (it's in my face actually I'm taking a break) and I love it. It's truly straightforward and makes you do things "the wrong way" in order to show you "the right way" shortly thereafter, so you really learn (and appreciate) why things are done a certain way. 100% pick up the book.
No, just parts of it would be outdated. However, if you're going to buy the book, why bother having to sort it out? Example: I'm pretty sure that JSON parsing has changed in Swift 4. It's now much different. Codable and other things have changed. I fully skipped Swift 3 because of all the changes and went from Swift 2 to Swift 4 because I didn't want to waste my time with 3. I know that languages change over time, but Swift was changing a lot and so I just waited. Swift 4 has been out for nearly about 9 months now, I bought a few tutorials from Udemy, but TBH, they really didn't dig deep into Swift 4, just Swift in general and I already knew Swift 2. [https://www.hackingwithswift.com/swift4](https://www.hackingwithswift.com/swift4) [https://www.raywenderlich.com/163857/whats\-new\-swift\-4](https://www.raywenderlich.com/163857/whats-new-swift-4) Note: it's a good exercise to convert code from one language to another, I do java \-\&gt; Swift for the exercise, but it's not always a great thing for entry level people. You're spending time learning things that you'll have to forget once you update.
big gay ranch am i right guys?
My plan for the start of the month is see just what I can do with CreateML. Even a Bee-Three engine will make me happy
Trying to get back to IOS development. I stopped for about a year now and i'm sad about that. BTW what's the best book on the market now? I know swift changes very quickly and I want to make sure I develop for IOS 12 and Swift 4.5. :)
Would this be a good starting point to get the fundamentals down? Its only 5$ here lol. Is there any book or pdf youd recommend?
Thanks, It worked! Dates are lot more complicated than I thought.
Groups and Folders are different in Xcode. Xcode's Project Navigator while it looks like a directory browser it isn't one. Also when an application is built the files included in the app aren't placed in the same folders as they may exist in the project directory (and definitely not in the groups). Take a look at the description of "Resource Files" [here](https://developer.apple.com/library/archive/documentation/CoreFoundation/Conceptual/CFBundles/BundleTypes/BundleTypes.html#//apple_ref/doc/uid/10000123i-CH101-SW1) to see how Xcode bundles your files inside of your application.
You can do: let startHour = calendar.component(.hour, from: startingInterval) let startMinute = calendar.component(.minute, from: startingInterval) Assuming that `startingInterval` is a `Date`.
I may be mistaking but I think that’s the default style of the navigation bar if you’re using the large navigation bar option(with larger header). If not, I would assume it’s some sort of extension on Navigation Controller. 
I thought this would be a possibility for this year too. I think this is definitely coming, but probably next year. I just don’t think they’ve had enough time to do what they want to do with it yet. 
StartingInterval is an object. A property of that object is the timeInterval which is a date.
I'm not the most adept Swift developer, but array.randomElement() is honestly a game changer lol.
Yeah, a few of the sessions talked about ci/cd, and some new apis, but no build server yet.. most likely next year 
No one has *ever* asked for an iPad version of my main app. However, I can definitely see some use for it on the Mac. Therefore, thanks to Apple's warning, I'm going to start fiddling around with creating an iPad version so I can quickly and easily convert it to Mac later. No rush, which is nice for a change. 
Thank you so much. 
miotke is right, the translucent behavior of the navigation bar occurs when a cell on a table view or collection view ends up being scrolled to the top of the view, the navigation bar gives you a translucent effect of what is behind it.
if (fieldDefault.value(forKey: "fieldKey") != nil) { field = [fieldDefault.value(forKey: "fieldKey") as! Int] } Also, force unwrapping (using the bang operator, (!)) is not recommended. Instead, you should do something like: if let field = fieldDefault.value(forKey: "fieldKey") as? Int { //Then in here you can use the value field to do whatever you want }
Total newbie here, but this is a welcome change in my opinion: Int.random(in: 0..&lt;10) // or Float.random(in:) 
You will see it as a get only property from other files.
I just finished rewriting my Vapor tutorial site, [www.vaporforums.io](https://www.vaporforums.io) in Vapor 3! it has a new layout/design, as I moved the front end to Leaf (previously react). I'm also working on new tutorials. This month I plan to cover using vapour with Postres/heroku.
Twilio **requires** a dedicated backend server that uses one of their client libraries. The idea is to protect your access key which could otherwise be easily extracted from the mobile app. You can't get the token directly from the app. They do not provide direct REST API access... I have asked them if there is any way to access the API from a Swift backend (e.g. Vapor), but no, it's not, so your best bet is to host a bare minimum backend in one of the supported languages and use it to get the token from Twilio and pass it to the iOS app. The node code to get a token and return it to the app is like 10 lines. You can host that on Heroku for free. 
 #if canImport(UIKit) Is very nice 
Thanks 
You can have different access levels for your property getters and setters. The `public` means that your getter will be available in any file in the defining module and also in any file that imports it. The `file private(set)` means that the setter will only be available in the file it's defined in. What that means for this property is that it will be read-only outside of the containing file and can only be changed inside it's own file.
I have both BNR books (Swift and iOS Programming.) if you’re new to programming in general or have no experience with Swift, I’d recommend starting with the Swift book. You’ll be lost jumping straight into iOS Programming. 
It’s Swift 3 but the move from 3 to 4 was relatively small. I’m surprised BNR didn’t upgrade their books to Swift 4/Xcode 9 but oh well. Most everything you learn in the book will be the same in Swift 4. 
So the only type of fileprivate is (set). I heard of fileprivate before, but didn't know it only had one option. Kina odd they don't just have fileprivate by itself.
You can use any of the access controls for either the getter, the setter, or both. public struct Test { // both getter and setter are internal (the default) var foo1: Int // both getter and setter are fileprivate fileprivate var foo2: Int // getter is internal (the default), setter is fileprivate fileprivate(set) var foo3: Int // getter is public, setter is internal public internal(set) var foo4: Int // getter is fileprivate, setter is private fileprivate private(set) var foo5: Int } You can read more about it here: [Access Control](https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html)
Thanks! The "public static" was giving me an error when combined with fileprivate and no (set). As in this: public static fileprivate var moneyFormatter: NumberFormatter = moneyFormatterBuilder
The problem with that line is that first both getter and setter are `public`, then they are both `fileprivate`. If you want then to be different then one has to have `(set)` added to it to indicate the access level for the setter: public fileprivate(set) static var moneyFormatter: NumberFormatter = moneyFormatterBuilder
Big Nerd Ranch books are great, but as it has been noted this book is for Swift 3. Beginning Swift from Packt Publishing has been updated for Swift 4. The EPUB/PDF/MOBI version is just $10, so not much more than what you'd pay for this BNR book. The Intro to app development with Swift from Apple is a great starter and is free. ;) There are tons of other free resources out there as well. Lots of Udemy courses, Packt has video courses, Hacking with Swift is awesome and completely free to read online (pay to download).
Thank you very much 
Are you trying to download an image from firebase? Downloading a URL doesn't really make any sense. In any case, you will need to create a reference to the place you want to store. imagesFolder looks like that reference. I would check out here for more information on how to download images from a storage reference point with firebase [here](https://firebase.google.com/docs/storage/ios/download-files)
I understand — a few people have told me they really like these because it helps them keep up without having to watch tho 40+ minute video. They know they're getting the high points at least and don't feel like they need everything. Anyway, sorry you had a bad experience.
You should ask your question, and people can answer accordingly whether they know the answer or not. 
Apple docs?
Oh okay thank you sorry. I have question about local notifications. I mean when users gets message and app is running on background. I’ve found everywhere only push notifications, which obviously are notifications sent directly from server. So is there any tutorial how to do it or something what might can help. Thank you 
I did check this and there is a section "Generate a download URL" which i can't seem to understand.
[Apple docs](https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/SchedulingandHandlingLocalNotifications.html) and here's a [tutorial](https://useyourloaf.com/blog/local-notifications-with-ios-10/) 
Can you link the tutorial you are following? In [here](https://firebase.google.com/docs/storage/ios/download-files) it shows to generate a URL, you just need to input the following: // Create a reference to the file you want to download let starsRef = storageRef.child("images/stars.jpg") // Fetch the download URL starsRef.downloadURL { url, error in if let error = error { // Handle any errors } else { // Get the download URL for 'images/stars.jpg' } } } 
Will link you the code and output once i am home, thanks in advance :)
Thank you :) 
Yes thats the best source for sure, and I read that too. But I was wondering if there is a junior friendly kind of a source.
I recommend trying to [read the relevant docs](https://developer.apple.com/library/archive/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/TheAppLifeCycle/TheAppLifeCycle.html) and then asking specific questions about the things you need clarified after you have tried reading their associated docs and googling. If a section gets really into the weeds go back and re-read the first paragraph to regain context. If you still don’t get it, just move along; it’s not worth trying to understand absolutely everything if it discourages you; write some code to experiment with the concept and then re-read. Example: if responders go over your head in “The Main Run Loop”, skip them for now or trying implementing a responder chain yourself to understand how it works. 
I have just been using GameplayKit’s array shuffle functionality for that, but having it built into Array itself is nice, particularly for non-iOS/macOS stuff. 
&gt; Swift 5 (Early 2019): &gt; binary compatibility with future Swift releases Finally
You could try this - assumes a collectionviewcontroller public var imageToUse = UIImage(color: UIColor(displayP3Red: 1, green: 1, blue: 1, alpha: 0.5)) override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. // CollectionView self.collectionView?.backgroundView = UIImageView(image: imageToUse) //UIImageView(image: UIImage(named: "main_background")) (self.collectionView?.collectionViewLayout as! UICollectionViewFlowLayout).sectionHeadersPinToVisibleBounds = true // NavigationBar self.navigationController?.navigationBar.setBackgroundImage(UIImage(), for: UIBarMetrics.default) self.navigationController?.navigationBar.shadowImage = UIImage() self.navigationController?.navigationBar.isTranslucent = true self.navigationController?.view.backgroundColor = UIColor.clear self.navigationController?.navigationBar.barStyle = UIBarStyle.black self.navigationController?.navigationBar.tintColor = UIColor.white self.navigationController?.navigationBar.prefersLargeTitles = false } override func scrollViewDidScroll(_ scrollView: UIScrollView) { if (navigationController?.navigationBar) != nil { self.navigationController?.navigationBar.titleTextAttributes = [NSAttributedStringKey.foregroundColor:UIColor.black] // Had to reset this as it defaults back self.navigationController?.navigationBar.setBackgroundImage(imageToUse, for: .default) } } You will need this extension (or one similar) public extension UIImage { public convenience init?(color: UIColor, size: CGSize = CGSize(width: 1, height: 1)) { let rect = CGRect(origin: .zero, size: size) UIGraphicsBeginImageContextWithOptions(rect.size, false, 0.0) color.setFill() UIRectFill(rect) let image = UIGraphicsGetImageFromCurrentImageContext() UIGraphicsEndImageContext() guard let cgImage = image?.cgImage else { return nil } self.init(cgImage: cgImage) } } Hope that helps... They appear to have the SearchBar embedded into the Navigationbar or have it pinned to the top of a UIView - but this should get you started.
This isn't working for me on an external module
I'm not saying that the `[]` operator should do bounds checking. I'm saying that including a safe, bounds checked, access method to Arrays should be in the standard library. It doesn't make your code any slower if you don't use it...
I’d upvote twice if I could...
Built into all random access collections, I imagine. 
Yea, it sounds like it. I just said Array because that was what the person to which I was replying said.
Separating allocation from initialization isn't a language thing. Its an architecture thing. There is a whole lot of stuff in a VC that you never see. Its in the superclass and also in the view management machinery. Lots of fancy stuff happens to a VC when it is presented and when it is un-presented (think digging deeper in a navigation controller, then backing out). nibs/xibs are more than just layout. This mechanism allows you to specify an arbitrary assembly of objects of any class and then get an instance of that structure anytime you like. Given the platform's Smalltalk inspiration/history, this makes perfect sense and can be useful for loadable bundles (plugins). Finally, I have to tell you I get really fucking tired of the beating of the "type safe" drums. The world has fucking data in it. Data isn't typesafe. Its fucking data. Learn to deal with the fucking data. Its not going to be typesafe. The world isn't that neat and TBH, the endless harping on type safety is comes across as infantile whining. In general, when building any non-trivial system, it is better to prefer data to code. That's why we put pick list options in databases rather than the code. The cost of changing data is about 1/10 the cost of changing code. I use xibs and storyboards a lot and I find them useful. I particularly like that I can have different storyboards for iPad than for iPhone and not need to change a line of code. So there's that. Just my morning rant. I'll go drink some coffee now and hopefully chill.
Here is an example of when you're storing the new image, you get the download URL right after, so you can store it on your database or just hold onto it: Storage.storage().reference.child("imageIWant.jpg").downloadURL(completion: { (url, err) in if let err = err { print("Error downloading image file, \(err.localizedDescription)") return } guard let url = url else { return } //Now you have the download URL for the image, and can do whatever you want with it. // If you want to download the image, do the following: URLSession.shared.dataTask(with: url, completionHandler: { (data, resp, err) in if let err = err { print("Error downloading URL, \(err.localizedDescription)") return } guard let data = data else { return } let image = UIImage(data: data) // Now image stores the image that you download }) }
Here is an example of when you're storing the new image, you get the download URL right after, so you can store it on your database or just hold onto it: Storage.storage().reference.child("imageIWant.jpg").downloadURL(completion: { (url, err) in if let err = err { print("Error downloading image file, \(err.localizedDescription)") return } guard let url = url else { return } //Now you have the download URL for the image, and can do whatever you want with it. // If you want to download the image, do the following: URLSession.shared.dataTask(with: url, completionHandler: { (data, resp, err) in if let err = err { print("Error downloading URL, \(err.localizedDescription)") return } guard let data = data else { return } let image = UIImage(data: data) // Now image stores the image that you download }) }
Here is an example of when you're storing the new image, you get the download URL right after, so you can store it on your database or just hold onto it: Storage.storage().reference.child("imageIWant.jpg").downloadURL(completion: { (url, err) in if let err = err { print("Error downloading image file, \(err.localizedDescription)") return } guard let url = url else { return } //Now you have the download URL for the image, and can do whatever you want with it. // If you want to download the image, do the following: URLSession.shared.dataTask(with: url, completionHandler: { (data, resp, err) in if let err = err { print("Error downloading URL, \(err.localizedDescription)") return } guard let data = data else { return } let image = UIImage(data: data) // Now image stores the image that you download }) }
Yep. Storyboard and xib by default, programmatic if I really need it. Which is extremely rare since I work on corporate apps.
Can’t stand storyboard and XIBs. Always in code. I find it also makes the code much more readable when working with others. Added benefit of simpler merge conflicts as well
I’d be curious to see how different people code their UIViews and manage the layout cycle. I’ve been doing mine the same way for a long time, but Apple provides very little information on the “correct” way to build views programmatically. Every time I work with someone new, I see a different way of doing it.
Been available since Swift 4.1 (I'm using it without the Xcode 10 beta), so not new to WWDC, right?
Can you give an example of what you mean? Are you talking about an XIB being unable to get something from your .swift file or vice\-versa?
&gt; Apple provides very little information on the “correct” way to build views programmatically Because Apple isn't into programmatic view construction. They're into storyboards and xibs. So there's that. 
Agreed. Like, when am I "supposed" to add my constraints? I usually do it in layoutSubviews() in a UIView, or in viewDidLoad() in a UIViewController, but I'm not sure if that's the best way.
Already tried this code earlier and i am getting error "Object does not exist".
I use storyboard to lay out my view controllers and segue connections like a flowchart. Then do everything else in code.
http://layoutkit.org Never Look back. 
&gt;Separating allocation from initialization isn't a language thing. Its an architecture thing. I apologize. I'm not sure what your point here is. I agree that separating allocation from initialization is an architecture thing\- I **can** separate them in most languages. I'm just asserting that you** should no**t separate them. That would be bad architecture, IMO. &gt;There is a whole lot of stuff in a VC that you never see. Its in the superclass and also in the view management machinery. Lots of fancy stuff happens to a VC when it is presented and when it is un\-presented (think digging deeper in a navigation controller, then backing out). Yes, but things happening **to** a VC don't care how we create the VC. I'm just arguing that this: let newVC = FooViewController(isUserLoggedIn: false, backgroundColor: .red) self.present(newVC) is better than: let newVC = FooViewController(nibName: "FooViewController", bundle: nil) newVC.backgroundColor = .red // this can no longer be private and immutable newVC.isUserLoggedIn = false // nor this self.present(newVC) &gt;nibs/xibs are more than just layout. This mechanism allows you to specify an arbitrary assembly of objects of any class and then get an instance of that structure anytime you like. Given the platform's Smalltalk inspiration/history, this makes perfect sense and can be useful for loadable bundles (plugins). I'm not entirely sure I understand fully, but that does sound powerful. Is there something you do with Views/ViewControllers specifically that leverages this concept? Can you do this kind of thing without using XIBs to do your ViewControllers? &gt;Finally, I have to tell you I get really fucking tired of the beating of the "type safe" drums. &gt; &gt;The world has fucking data in it. Data isn't typesafe. Its fucking data. Learn to deal with the fucking data. Its not going to be typesafe. The world isn't that neat and TBH, the endless harping on type safety is comes across as infantile whining. So, because some of the data I encounter wont be typesafe, I should just throw my compiler's static checking out the window? That's a weak argument at best, my friend. It's one that Rich Hickey makes that I just don't understand (and I actually do like Clojure, FWIW). My counterargument to you would be to agree and acknowledge that some things are not able to be statically checked, but given the choice between statically checking something and not, I would never **choose** to not check. I can't see a reason to **prefer** non\-typesafe data when you have an option. &gt;In general, when building any non\-trivial system, it is better to prefer data to code. That's why we put pick list options in databases rather than the code. The cost of changing data is about 1/10 the cost of changing code. That's an interesting point and I think I generally agree. However, the biggest issue I take with XIBs is not that I like code better than data, but the choice of having Views as data forces the rest of my code to be worse. So, for me the choice seems to be "good code \+ more code" vs. "bad code \+ data". &gt;I use xibs and storyboards a lot and I find them useful. I particularly like that I can have different storyboards for iPad than for iPhone and not need to change a line of code. So there's that. You still have to open up Xcode and fiddle with your XIB, right? I don't see that as much different than needing to write some code, but I've never done exactly what you're referring to, so maybe it'd be pretty onerous. &gt;Just my morning rant. I'll go drink some coffee now and hopefully chill. Godspeed.
True. And it makes me nervous that we'll be basically forced to do storyboards eventually. I can envision a time where they add features, but don't document the code side of it so that we have no choice.
Static UI, I use story boards. Dynamic UI's or views, it's programmatic. 
In the same app? Doesn't that feel messy? Or do you write your programmatic VCs basically the same way that the IB versions are written (no custom init, etc)?
Yes, and no not in my opinion. I think it's easier to split up dynamic vs static code and makes it clearer and what is static and what is dynamic. Yes, that is correct. 
&gt; That would be bad architecture, IMO. Why? There are reasons that the VC lifecycle is the way it is. One is deferring memory allocation until the last instant. When you fetch a VC, its usually completely empty until you present it, and then it loads up all the contained components and gives you a hook didLoadNib, viewDidLoad, etc (or whatever - still haven't got coffee) to do some extra initialization if you need it. On a highly constrained device like a phone, this can provide some benefits - like let the system collect any dead objects before allocating yours. &gt;I'm not entirely sure I understand fully, but that does sound powerful. Is there something you do with Views/ViewControllers specifically that leverages this concept? Done any audio processing? I can construct an entire audio processing pipeline with audio units and AUGraph - essentially building myself a music production system in IB and get a new audio rack just by loading that xib. That's powerful. Especially when I want to make changes to the signal chain. &gt;I should just throw my compiler's static checking out the window? Tell me. What checks that you have the correct image name to load for that icon in your IDE? If I mistype an image name in IB, it shows me that the image is missing. What does that for you? IB's checking is "before compiler" checking. So if your goal is to move error handling as early in the cycle as possible, waiting for the compiler to get to it isn't really the best you can do. IB can help you even more. 
I 100% agree with everything you said. Only downside to programmatic view(controllers) is no automatic preview for every device size/type
I agree. You should have the option to do it either safe or fast.
I don't like segues, either (especially the annoying casting in `prepareForSegue`). However... when working with separate xibs for each controller, you can keep most type-safety and still configure your views in Interface Builder. You just have a "normal" init for your controller. class SomeViewController: UIViewController { private let isUserLoggedIn: Bool init(isUserLoggedIn: Bool, backgroundColor: UIColor) { self.isUserLoggedIn = isUserLoggedIn super.init(nibName: "SomeViewController", bundle: Bundle(for: SomeViewController.self)) } required init?(coder aDecoder: NSCoder) { fatalError("init(coder:) has not been implemented") } } The biggest advantage is that you use this controller exactly like you would use one of your controllers that are written entirely in code, but you can still configure the UI in Interface Builder. There are also no type-safety issues in code (the xib can still be misconfigured of course). Having the fatal-error implementation for the `initWithCoder` is ugly, but I found that in most cases, I didn't need or use a proper implementation. Basically, using this approach, you do construct and present your controllers like you would when writing them in code. But you still get to build the UI in interface builder, which I find very useful for some types of UI.
&gt;Why? There are reasons that the VC lifecycle is the way it is. One is deferring memory allocation until the last instant. When you fetch a VC, its usually completely empty until you present it, and then it loads up all the contained components and gives you a hook didLoadNib, viewDidLoad, etc (or whatever - still haven't got coffee) to do some extra initialization if you need it. On a highly constrained device like a phone, this can provide some benefits - like let the system collect any dead objects before allocating yours. That's a good point, but you can still easily hook into viewDidLoad(), etc if you're writing your own VC with a custom init. So, say I have a VC with several subviews. You can make those subviews lazy vars or just make sure they are initialized in viewDidLoad() (as you would with an IB VC anyway). The difference is that you still can pass in the necessary data at init instead of passing it in later and breaking encapsulation. The whole thing for me is having access to a custom init(), really. Not having that means you're writing badly-encapsulated and/or unsafe (able to be used before it's ready) objects. &gt;Done any audio processing? I can construct an entire audio processing pipeline with audio units and AUGraph - essentially building myself a music production system in IB and get a new audio rack just by loading that xib. That's powerful. Especially when I want to make changes to the signal chain. I have not, unfortunately. But it sounds pretty cool. &gt; Tell me. What checks that you have the correct image name to load for that icon in your IDE? If I mistype an image name in IB, it shows me that the image is missing. What does that for you? &gt;IB's checking is "before compiler" checking. So if your goal is to move error handling as early in the cycle as possible, waiting for the compiler to get to it isn't really the best you can do. IB can help you even more. Yep, touché. It's something I hate when I have to use a string ID for anything. The other nice thing IB will do is complain if your constraints conflict, which does not happen if you do it in code. It's still a trade-off because you get the other deficiencies I mentioned earlier (including needing to use a string to spawn a VC), but at least I can now agree that there is some real benefit to the IB approach.
Where are you seeing that error? Is it an error in the download URL completion block?
https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview' I usually use loadView first and then viewDidLoad if constraints are dependent on data not ready at loadView
Funny that in our meeting just a few hours ago, I declared to the team that moving forward, I’ll be almost exclusively be configuring views in XIBs and only write in code the parts that need to be dynamically set. Previously, I’ve only ever used XIBs to make Autolayout constraints and then write everything else in code. The reason is that when I’m working in a team, some devs aren’t really familiar with the view initialization lifecycle so they end up screwing things up. This time, though, I decided that it’s an iOS developer’s job to know that and I am no longer adjusting to another programmer’s laziness. When you have an extremely complex view with scrollable pictures, embedded map and street views, expandable sections, and various kinds of controls, writing the constraints in code takes up so much time—and so does reading it, from the POV of another programmer. But what do views do in an MVC environment done right? Display values without knowing anything about them, and look pretty. They’re dumb components. You ought to be spending more time thinking out your controllers, utilities, factories, operations, protocols, because those are the things that truly make the product work and create value. Life’s just too short for me now to be writing views entirely in code.
I'm just trying to get into Swift and iOS so many things are still foreign to me. Anyone know of a basic example showing the difference between using Storyboard vs programmatically?
I think he means having variables in your code (or static variables) instead of having magic numbers all over the place. 
A big mistake many developers make is using XIBs but not doing the extra effort to have them actually reflect what the views will look like at runtime. If you use IB, you should use IBDesignable and IBInspectable to "extend" the IB view to have it WYSIWYG. For example, if your view changes between different variations at runtime, have an IBInspectable bool that you can toggle and which will change the state as it appears in the editor. If your view doesn't appear as it will at runtime when you look at it in the editor, you aren't using your visual designer's (IB) #1 advantage, which is not having to run your application and see changes reflected immediately. If anyone has some experience working on games with Unity you'll know what I'm talking about.
You add them in loadView, this is exactly what loading from a nib does.
You can use image literals now. Would provide same safety via code.
The random number and element generators are going to be the biggest boon. I can go ahead and remove the absolutely unnecessary "import GameplayKit" calls. Also the synthesized Equatable stuff is cool.
Whoa, TIL.
Why not in updateConstraints()?
I'm still fairly new to mobile app development myself but I don't think you would want the mobile app to have direct access to the database server. I think having a backend application handle requests from the app and looks it up in the database would be preferred. You could always do some sort of "health check" in the mobile app to see if the API exists?
Thanks for your reply. I'm not developing a mobile app, this would run on MacOS via a LAN connection to the server. 
Ideally, you'd want the server to be the gatekeeper to the DB to prevent unauthorized access. Flow would go like this: 1. App requests data from your server 2. Server authenticates the request (token, username/pass, etc) if needed, passes the requested data back to your app 3. App stores data in some sort of cache to be used for sorting, searching, etc. If you just need a basic API server, I suggest using [Node ](https://nodejs.org)with [Express](https://expressjs.com) to get up and running quickly.
I took the same journey as you. It's a heated topic, very religious. People either feel one way or the other \-\- all in code or all in storyboard / xibs. Each side has good reasons for why they do it. Pretty funny I was arguing in favor of writing views code in one of the iOS IRC channels and a guy arguing with me said they had a huge app that was done with storyboards and that it was much better. I bit \-\- it must not have been that complex of an app \-\- he replied that the app was Apple Maps. I felt dumb :) But! That didn't change my mind. I like writing the views as code much more. I can't stand the inconsistencies of where you should be defining colors, fonts, etc. etc. In any event, after 4 or 5 years of objc/swift, I happily switched to React Native, primarily because of this issue. Writing views in code in React Native feels right. The layout code has it's dedicated section in each file, it's easy to read, and it's meant to be modular and reusable.
I'm not an iOS/macOS developer, but when I was learning Swift, Storyboards/XIBs really turned me off. I just wanted to use code for everything, but I couldn't find any good resources for building a UI in code without the other drag/drop visual tools. Are good resources anybody here could recommend?
Are you selecting the object from a tableview? You could set the representedObject of the View Controller you're segueing to as the selected object. From your table view: override var representedObject: Any? { didSet { // This is from my app that uses a split view controller, yours may be different. let vc: DetailsViewController = parent?.childViewControllers[1] as! DetailsViewController vc.representedObject = representedObject } } @IBAction func tableSelectionChanged(_ sender: NSTableView) { if (!resultsController.selectedObjects.isEmpty) { self.representedObject = resultsController.selectedObjects.first } } Then in your other view controller you can grab the data by just referencing representedObject
A studying app using core data 
You might be intersted in , https://www.objc.io/blog/2018/05/22/type-safe-initialization-using-storyboards/ https://www.objc.io/blog/2018/05/29/type-safe-initialization-using-storyboards-2
Is there any reason you posted all the code as images? It'd be great to have them as text so people could copy the code and test it out for themselves.
Yeah, I definitely agree with that. I'm kind of new to medium, so I don't know much about the formatting, but I could only figure out how to code-format one word or line at a time. It looked awful having each separate line be formatted with a white space between each line. Do you know how to format a multi-line block of code?
I don't use Medium at all, what kind of markup does it use?
Unfortunately, with storyboards, you can't actually call your own constructor on your view controller...
If you want to post code in a code block then the best thing to do is put four spaces in front of each line.
That's a fair point. However, if there is allowance to programmatically create views, not providing documentation is just leaving a job half done.
I used he new Reddit code formatter.
Code-only UI here. Too many things break without apparent reason in storyboard. Ever tried to use stackviews in collectionviewcells? You‘re gonna have a bad time.
The code is working as expected. The problem you're having is that you're not incrementing your original array to the next index. Each time your \`for day in 0..\&lt;5\` loop executes, you're assigning dupeArray to the originalArray. I believe this should get it working for ya: let array2D = [[CustomObject]] let originalArray = [CustomObject] let today = Date() var dupeArray = originalArray for object in dupeArray{ object.timeInterval = calendar.date(byAdding: .day, value: day, to: today)! } array2D.append(dupeArray)
My apologies. I would still say the same would apply though, otherwise you would have to have database credentials either compiled with the app or setup on every machine where the app is being used.
I believe it uses normal Markdown, so you can use three backticks e.g. ``` print(“Hello World”) ``` to add a code-block
 \&gt; you're assigning dupeArray to the originalArray. Yes cause I need to append the dupeArray multiple times while just changing the date of the date object in each element of the dupeArray. If you refer back to the code I need to duplicate the originalArray 5 times, modify each elements property and then append it to the array@D.
It doesn't appear to be working, each line is in its own code block rather than being put in a single code block.
[Normal Markdown](https://daringfireball.net/projects/markdown/syntax#precode) uses four spaces in front of each line. The three backticks version is an extension.
You don’t need to though. 
Have you tried using the \`var\` keyword instead of \`let\` when assigning originalArray to dupeArray? Variables declared with \`let\` are immutable, so you may be appending the originalArray 5 times instead of your changes. Try this: for day in 0..&lt;5 { var tmpArr = [] for object in originalArray { object.timeInterval = calendar.date(byAdding: .day, value: day, to: today)! tmpArr.append(object) } array2D.append(tmpArr) }
Ive tried fixing it but the thing is hilariously broken.
It's just an array, not an Array. Stop randomly capitalizing words. 
I am a designer as well as a developer and prefer working visually on UI when I can. You can also iterate faster - small tweaks to the layout or design can been seen immediately rather than after a compile.
Ah, fair enough. Either way, Medium does allow you do use the three backtick approach!
Have you heard of camelcase? Cause it seems like you havent.
thanks for the input! i'll look into this and let you know if i can figure anything out.
Its working for the most part but the date is now not increasing by one day. It remains on the 9th for some reason. My code is exactly like you have it.
They would have to work fairly hard to prevent programmatic view creation, but they could strongly encourage storyboards which I believe would be a fundamental mistake. Its akin to coding to the lowest common denominator and applications forcing tutorials. Everyone starts out simple or a beginner, but invariably they either stop using the product or evolve and they are no longer a beginner. To answer the OP question, XIB unless its a dynamic data driven view.
I saw that and was trying it out, but there's no syntax highlighting! So I just ended up embedding gists for everything. A little bit more work, but it looks a lot better I think.
If you really like creating UIs with code, make it painless with React Native.
I've started to do iOS development on Storyboards for about a month now. I have a sense that it's more restrictive compared to web development (which is not a good thing).
If object conforms to NSCopying then var dupeArray = originalArray.map{$0.copy}
I would wait and submit as an organization if it’s not a burden to do so. Transferring apps is a pain and some apps can’t be transferred at all. See https://support.appmachine.com/hc/en-us/articles/360000012284-Transfer-your-app-to-another-iOS-Developer-Account
Object as in the array or Customobject?
[getting into swift, my first little project in 7 lines](https://imgur.com/gallery/7ylCvfS) 
The session covered everything new since 4.0. Synthesized Equatable was in 4.1 as well
Or they consider that api to be more or less private. Obviously there is a capability that the tool relies on. But maybe the api isn’t meant for you. It is clear what Apple considers best practice. It’s their platform. Maybe from their perspective you’re doing it wrong.
A couple questions: don’t your viewcontrollers get kinda messy with all the controls created in code, followed by a ton of constraints? Second, wouldn’t designing your UI take a lot more time, because you have to run the app every time you change a constraint to make sure it works? That’s primarily why I use storyboards. Is there an auto-compiled preview or something?
Yep. When designing. When matching a design. When a person is standing over my shoulder telling me how to tweak the view. I don’t get paid per line of code- but f I did- I’d do it programmatically.
 extension Array { mutating func mutateEach( _ body: (inout Element)-&gt;() ){ for index in self.indices { body( &amp;self[index] ) } } }
I think that that’s asking too much of Interface Builder. It’s really just a tool for defining the anatomy of a view, not simulating all of its dynamic behaviors upon runtime. That’s the stuff you write in code.
I’ve always heard that, which makes me wonder.. Does that mean most of the stock iPhone apps are built with storyboards? Notes, Calendar, App Store, Reminders, Clock, etc?
I agree, it’s definitely a big improvement. 
They just want to make it easier for New programmers. 
Are you using any specific library to do constraints in code? E.g. Yalta, SnapKit or similar. I also do my UI in code, but can't seem to find the balance between _light_ and _enjoyable to use_.
On YouTube buildthatapp. He builds most if not every app in code.
 Swift Package Manager.
Some people prefer stone knives and bearskins, too.
Because [in the documentations](https://developer.apple.com/documentation/uikit/uiview/1622512-updateconstraints)it says: &gt; It is almost always cleaner and easier to update a constraint immediately after the affecting change has occurred. For example, if you want to change a constraint in response to a button tap, make that change directly in the button’s action method. You should only override this method when changing constraints in place is too slow, or when a view is producing a number of redundant changes
I don't think anyone could ever count the number of bugs that have been written due to misusing arc4random() over the years.
Have a look at GnuStep.org. Haven't looked at it in several years myself, but it's an Obj-C re-implementation of AppKit and Foundation.
Swift was designed. C++ was accreted.
Find a better college.
&gt;C++ is ugly asf and the syntax is unnecessary. It's a steaming pile of needless complexity. It's such crap that it makes Java look good.
&gt; just having learned C++ makes you a better developer Nope. It causes brain damage.
I mean... if that is how you view gaining knowledge, I guess that’s up to you. 
it's not gaining knowledge, it's wasting time, throwing good money after bad. C++ is a dismal relic.
I don't think it's necessary for `previous` in your doubly-linked list example to be `weak`. Whatever API you use to remove items from your list should clean up links in both directions, removing all references to deleted nodes in the process.
I prefer to create view in loadView() function: override func loadView() { view = ControllerView() } As documentation says you don't call super: https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview View's init calls functions that add and setup constraints
Sometimes it might get discouraging too you are right, I will try to take it a little easy thanks .)
Me. I don’t use SBs for over a year. I like the full UI control that I have. Once you get into the anchoring system it’s smooth as butter. 
Yes in the download url completition block.
I would recommend using a lot of protocol/typealiasing Protocols don’t have to be completely in depth, just the functions and properties you use. For example: protocol MyButtonProtocol { func addTarget(...) } Then you can do conditional typealiasing for types based on the environment you are using (plus conditional imports.) In fact Swift 4.2 adds a canImport() import directive which can be handy for if something can be imported for the target.
I think tried this up until you a second person on a team. Merge conflicts in those file are terrible. 
Unfortunately Mint is typically used to distribute iOS tools, like SwiftLint, while Swift Package Manager, Carthage, and Cocoapods are used for distributing frameworks.
WWDC 2018 has a video on high performance autolayout. They do discuss bits with programmatically initing views etc. It’s really interesting and basically goes *”Use IB, but if you can’t, here’s some things to remember.”*
 Like [this](https://imgur.com/a/ehIZH8u)?
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/3ClRUcx.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20e0dpkpc) 
The verbosity of auto layout code made me write a thin wrapper around the most common auto layout operations. E.g., view.centerWithinSuperview(\[.horizontally, .vertically\]), [view.place](https://view.place)(.leftOf, view: otherView), etc. Makes things a whole lot simpler.
Yup, pretty much. The main hangup is setting the icon to center in the empty space across device types. 
I create views programmatically. Every each views. I do not use storyboards nor .xib files. I also do not use AutoLayout, not that I don't like it, but I find the 'manual layouting' easier to debug.
[Here](https://drive.google.com/file/d/1Wpkw7nfgJMLzhnaFt5BwuefY-XPQ_Azc/view?usp=sharing) this is the main storyboard file so you can see how I did it. You can't set a stackview's background, so you have to put it in a view. You can also set the stackview to fill and manually set 1 of the view's properties and the others will auto-adjust. Look at the constraints that I put on each view to get an idea of how it works. 
Second this. He’s good!
PositionDavor does not confirm to encodable and decodable protocols/ or NSCoding. It doesn't know how to serialize it and store it/retrieve it. You can read all about it [here](https://hackernoon.com/everything-about-codable-in-swift-4-97d0e18a2999) If you don't want to go through the process of that, you could store each point that you need as a string. UserDefaults.standard.set("0", forKey: "xPoint") UserDefaults.standard.set("0", forKey: "yPoint") I would advise against it though. Learn about NSCoding, and the Codable protocols.
Restart Xcode if you haven't already, and your computer. I would check out [here](https://www.bignerdranch.com/blog/designing-for-size-classes-in-ios/) for more information on how to use size classes. [This](https://designcode.io/) book/class goes everything UI and has great information. I would recommend checking this out, as class variations is a part of the curriculum 
Ah, that’s specifically what I’m looking for. Barring SPM adding a dev dependency section, would be nice to have some other tool to manage the same.
IB is still pretty awful for long term projects that require a team of people to work on. I'm not sure what changes they could make to it to make it usable. To me it is a prototyping tool and not much else. 
Cool Thank you very much
I doubt Apple actually uses storyboards/xibs in their own apps.
It’s quite slow especially with Swift to have this on all the time. It just maxed out my fully expanded MacBook every time. I do it from time to time but it also requires me to write extra code to trigger the layout in IB. I honestly don’t take the effort anymore. It saves enough time just to do the layouts themselves. Probably having all view code in a separate project might help.
You'd be getting that error if the file doesn't exist on Firebase, check if it's there. If you could post what your code looks like that would help too :D
First, I'm not a lawyer, I've just been sued before in my lifetime. Imagine you've created an all consuming awesome app that millions are playing and you're racking up purchases and ad revenue like angry birds on steroids. No imagine that an idiot is playing your mind altering game as he's driving a car, runs a red light, and bashes into school bus full of kids and it explodes. Somehow the idiot and his phone survives. Then that idiot not wanting to pay for the damages to the school bus and kids hires a lawyer to sue you for distracting him while driving his car. You go to court, and somehow the idiot wins, and the jury awards him 10 gazillion dollars in damages. Okay, you say \- he can have all the money I ever made from the game \- but you signed up on the App Store as an individual. Sorry, your house, your car, your bank account, AND 20&amp;#37; of your future wages you make working at a job are all now his because that's the way liability works in America. Yep you might be able to file personal bankruptcy but some of that debt may not be dismissible. This story is extreme but I'm just trying to drive home a point: DO YOURSELF A FAVOR \- START A CORPORATION OR LLC. I've just been through this, it took about 30 days from start to finish. I opted for an LLC, because it's less restrictive than an S Corp, and requires less paperwork overall. One of the best, no BS and free resources I found to work through this was: [https://www.llcuniversity.com](https://www.llcuniversity.com)
I think you are looking into a old documentation version. Check the same framework in this link https://developer.apple.com/documentation/gameplaykit 
"Everything that you're absolutely certain about, I was also absolutely convinced of too, some decades ago. Then experience taught me that I was full of shit, and just wasting everyone's time." I'm not sure this has happened to you yet. You are the one who is DEFINITIVELY reducing software programing to a trivial mechanical task. You are shitting on the legacies of Sussman, Dijkstra, Kay, Wadler, and many others who directly contradict you with volumes of excellent evidence and experience. I looked at your code. You only demonstrate one real platform; Objective-C and Swift development. You are competent, and I would not feel scared to try and maintain your code, but much of what you have written is far from excellent. I maintain that you and I aren't talking about the same thing. I still don't believe that you could whip up some good C++ or Haskell code right now, and you've demonstrated nothing but a megalomaniacal claim about your programming prowess while simultaneously disregarding decades of nuanced discussion by people who HAVE written great code, much better code than the code you demonstrated.
Backup your phone, dig into the app bundles, report back. Pretty sure they do
&gt; I'm not sure this has happened to you yet. It has, kid. You'll get there eventually too. Or at least we all hope so. Otherwise we just hope we don't have to work with you. &gt; You are shitting on the legacies of Sussman, Dijkstra, Kay, Wadler, and many others who directly contradict you with volumes of excellent evidence and experience. Nope. You don't understand what you think you understand. &gt; I looked at your code. You only demonstrate one real platform; Objective-C and Swift development. On the Github repos you seen, sure. As I said, I've been programming for over 30 years. I've worked my way through tens of languages, and been in the business for many times longer than Github has existed. There's also much more of my own code on Github, just under previous employers' accounts rather than my own. &gt; I still don't believe that ... Look kid, I'm really not interested. Arrogant, over confident young programmer dudes are not interesting. You believe massively big things. I don't. You believe that the big thinkers of programming agree with your big things. I don't. And I really don't care that you believe those things, or that I don't believe those things. Let go of your ego. Stop thinking you're big shit and your job is big shit. It isn't. Programming isn't what you think it is. The faster you learn that, the faster you stop acting like a dick, and stop accumulating embarrassing statements that you'll regret in decades to come.
WOOHOO!!!
I think it just means that the programming guide won’t be updated, so any changes made to the Framework won’t be reflected in that. 
So to prevent conflicts I always had my teams use multiple storyboards of related views. In a given sprint I’d maybe once a year have more than one person ever even touching the same storyboard file during a sprint. If people are always stomping by on each other’s view work then it might be time to refactor the storyboards into multiple flows.
Wow, thank you so much! 
I’m on the core team. Anything in particular you are interested in?
Yeah we switched to the one storyboard per vc approach to do the same thing. 
Not true internally. Most Apple apps create views in code. 
I have to disagree- stackoverflow is the best community ever when it comes to getting help with a problem for free. although you should try and adapt to the way stackoverflow posts should be structured and done. good luck 
Challenge accepted. A quick file search of /Applications on my mac reveals virtually no storyboard files but Safari, Xcode, Mail, iTunes, Garageband, Contacts, Calendar, Numbers, Pages, Preview, Quicktime Player, Reminders, Activity Monitor, Airport Utility, Disk Utility, Grapher, Keychain Access, Script Editor, Terminal, Xcode, Instruments.... all loaded with nib files. Not only do they have nib files - they have localized nib files for different languages because that's yet another advantage to separating code from presentation - you can tweak layouts for different languages. For instance, German takes 40% more space than English and you can make more room for things accordingly. So, no. That's bullshit. Apple absolutely does NOT create all their views in code. 
Don't. Store then in a common data object and reference the object. This is an actual perfect case to use a singleton. Simply reference it and set or access the data within it. It can't screw up. You only have one view controller on the screen at once. 
yes, woohoo!! :)
Hands down, check out Hacking With Swift. Written by Paul Hudson, it’s a fantastic beginners book to iOS development using Swift. He’s also super easy to communicate with via email and he’s all over this Reddit for support/advice/etc. 
Dude, you do realize that _you_ are being arrogant and overconfident by summarily _shutting down_ possibilities based on your limited fucking experience. You are the epitome of uneducated and arrogant. You have no idea how old I am, you write wrappers for other more complex libraries and you think you can whip out great code in any language? You demonstrate nothing but being an arrogant uneducated prick. Did you read any of the authors I mentioned? Do you have any rebuttal that writing good software is extremely diffucult? Do you only write wrappers around things that better programmers write? You are making assertions about how programming works and all I see is some standard looking mostly imperative wrappers on one platform in a pair of closely related languages. You sir, are making an extraordinary claim and presenting less than ordinary evidence. I think I'll trust Gerald Sussman and Sean Parent before I trust you truly stupid and unbacked claims.
I will. Have you read anything by Matt Neuburg? I'm reading a sample of iOS 11 Programming Fundamentals With Swift and it seems to be pretty well written and informative. 
&gt; Dude, you do realize that you are being arrogant and overconfident by summarily shutting down possibilities based on your limited fucking experience. My experience is not limited. It is longer than your entire life. &gt; You have no idea how old I am I know exactly who you are. I googled you when you got uppity before. Look, I've put up with you for long enough. You're an unimpressive developer, with an unimpressive history, and very embarrassing ideas about programming. You're not of any use to anyone here, and certainly not of any use to me. &gt; Do you ... Do you .. Do you ... Do you ever shut up? Stop crying into your panties. This whinging is unbearable. Honestly, this childish tantrum is absolutely, utterly unbearable. Goodbye. 
I was thinking this was r/iosprogramming. Storyboards/nibs are used more rarely on iOS by Apple. A quick look through the simulator shows that Calendar, FaceTime, iBooks, Mail, Reminders, etc, don't use storyboards or nibs except for their share sheets. However, Safari, Contacts, Messages, and some other apps do. 
Here's a sneak peek of /r/iOSProgramming using the [top posts](https://np.reddit.com/r/iOSProgramming/top/?sort=top&amp;t=year) of the year! \#1: [2018 Roadmap to iOS Development](https://i.redd.it/ix44k24k9ik01.png) | [47 comments](https://np.reddit.com/r/iOSProgramming/comments/82w6qa/2018_roadmap_to_ios_development/) \#2: [Petition: Change the official name of "Xcode" to "Xcode (not responding)"](https://www.change.org/p/tim-cook-change-xcode-s-official-name-to-xcode-not-responding) | [53 comments](https://np.reddit.com/r/iOSProgramming/comments/8lc6vz/petition_change_the_official_name_of_xcode_to/) \#3: [Imagine if we had to pay extra to access the App Store. Join the fight for Net Neutrality today! Please! It's so easy to help, and every bit counts.](https://www.battleforthenet.com/) | [8 comments](https://np.reddit.com/r/iOSProgramming/comments/7ernwr/imagine_if_we_had_to_pay_extra_to_access_the_app/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
&gt;Storyboards/nibs are used more rarely on iOS by Apple. You base this on - what exactly? &gt;Most Apple apps create views in code. Why would Apple - which uses the same IDE, many of the same libraries, etc....have different approaches depending on the platform? More to the point, why do you think they continue to push this tool if they don't believe in it? Makes no sense. I understand that understanding what IB really does is not intuitive. There's a lot of power in it that isn't readily obvious to people used to conventional "GUI builders". IB is much more than a UI editor. Its a general purpose object graph editor with some enhancements for mocking UI. If you don't want to use it, then don't. I find it helpful. It keeps me from shipping stuff with broken images and conflicting constraints and it saves me time (that shitty schema editor for CoreData OTOH....).
Been waiting for good tutorials. Laracasts is great, so you've got some living up to do.
As someone else pointed out, Apple does use xibs extensively on macOS. In iOS, however, Apple only uses them in about ½ of their applications. I agree with the reasons presented here: https://gist.github.com/EricShapiro/da69cea54da39a9429fe3616ceca78d8 We have one app that's cross-platform iOS+Mac. We can share views and even entire screens between the platforms with just a little bit of extra code (inheriting from NSView instead of UIView, for example, or NSViewController instead of UIViewController). We have other views that are shared between different iOS applications - all we have to do is reference the same source file in both projects, using injected behaviors or #ifdefs to control the minor differences. We sold one app to 10 different clients, each skinned with a different look, different fonts, and slightly different features. In code we could change all 10 apps at once, but if we used separate xibs for each we'd have to make 10 different changes. We do use storyboards and xibs in other apps. They make visualizing the user interface a lot easier, especially for new programmers on a project. And they're good for designing the app initially as well. 
It's very funny how some people get angry with me when I say that optionals and force-unwrapping are things you should really really really try to avoid yet intuitively at the same time a lot of people just feel that especially Storyboards are too much based on loose sand. Interface Builder: + Can layout and test how things work 99% WYSIWYG, also change the device size with one click, very powerful + That's why it's always faster than program, run the app, find a layout problem, repeat, try iPad, find new problems, repeat no matter what code advocates try to tell you. If it's slower you just don't know your tools + Better separation of layouts and code, UIViews tend to be lighter + Direct feedback on what screen does what + Test animations by enabling disabling constraints and see if they would work + Gives immediate warnings and errors if you have errors in your layout - Storyboards have no custom init's (but XIB's do), prepareForSegue is very brittle - IBOutlets can possibly not be connected, no compile-time warning or error if this is the case - IBOutlets with ? are cumbersome, IBOutlets with ! will crash your app. Both approaches suck - Rendering the complete UI (including code side layout) is (haven't tried Xcode 10 yet) slow - Reusing view code is cumbersome because you need to turn on live rendering that makes your machine slow or kind of guess what it will be like run-time Code: + Building generic screens (like a list of objects that have their own tablecell in a generic way) cannot be done without using code + Always a good constructor + Reusing code no penalty + No IBOutlets no ! or ? + Easier to re-use styles (though things are getting better for colors!) - To see the results of your code you need to run the app - No immediate feedback about warnings or errors while typing your code - NSLayoutConstraint is somewhat cumbersome, but it did improve and libraries exist My ideal would be compile-time checked IBOutlets and Storyboards that support segues that cannot be triggered without passing in the data required by the init of the ViewController. If that would be the case I would not touch coded views unless I had to do some kind of Enterprise-y app that would do a lot of CRUD on different types of data, so a pretty boring looking app that requires generics. I actually migrated an application like two years ago that was just that from Storyboards to code and it made making new screens so much easier because I could basically re-use 90% off the other screens. Another good reason would be some kind of super custom rendering that just doesn't work well in IB. Actually that same application used a sort of Material like shades on all the cards including TableViews and it had a ton of code to make it look well (anybody that attempted something like this knows what I'm talking about). Forget about IB then. I'm doing an application now that is kind of hybrid with a lot of HTML based screens and a few core screens that need to be performant that are native and done with code because I wanted everything to be "tight" instead of that IBOutlets loose sand structure. While the UI is much easier to drive from code I really hated doing all the small tweaks I needed to, putting chins on stuff to make it look nice for iPhone X etcera. And I have a pretty nice handcrafted AL library that makes AL code look like written English, so it's easy to write to code by itself. Also the UI really isn't that complex compared by previous apps. If I compare it to doing HTML / CSS layouts I can take a webpage, then start fiddling with CSS and HTML until something works and then save or copy that. But I start in "code" mode. JavaScript is freely accessible up to the point I can replace complete functions while the page is running and then call them. This kind of freedom can never exist with Xcode / Swift / iOS for obvious reasons but a way to easy tweak layouts while being in Debug View Hierarchy would be super great to test all kinds of stuff while you are creating your layouts in code.
And it becomes fun when I try to do the same in code?
Actually Android has statically checked designable screens if I'm correct. Of all the things worthless about Android things like R are actually better than iOS. R.Swift and SwiftLint are the two only CocoaPods I always install without even thinking it over once.
Not OP but I successfully created a number of AUv2 Instruments and effects a few years ago. I've made many MANY recent attempts to do the same with AUv3 and although I've often gotten my AUs to work both in the App that includes my AppExtension/AU and the AUv3Host demo, I have never successfully created an AudioUnit that works in MainStage3 or Logic Pro X (these apps are up\-to\-date and at least appear to support AUv3). These attempts include starting from scratch by adding an AppExtension and Framework and then proceeding, and also simply changing the demo projects so they have a different manufacturer and related items in the associated plist. It really feels like I'm out in the weeds without any way to tell me how to proceed. I'm a very competent C/swift programmer with moderate Objective C experience, so that isn't the problem. I was really hoping some salvation was coming from the Dev Conference, but no joy. ... So the question is: are there any useful guides to help me figure out what's wrong? The AppExtension Guide and the AUv3 examples aren't cutting it. 
StackView's "don't really exist" at runtime. Remember that when trying to configure them. 
Another approach: * UIView with background color * UIImageView and UILabel nested inside this view, top and bottom of both anchored to enclosing view * Then add the horizontal constraints, add the 20px paddings * Select them both, make them equal width and then adjust one of them to 0.5 or 2.0 so they occupy 1/3 and 2/3 of the width * Make sure the image mode is set to true size otherwise it'll stretch or fill
OK. Fine. Honestly - what is your goal with hounding me about this shit? Use them if you like them or don't if you don't. I like them and I think they have benefits and I think a lot of people saying they don't use them most likely are lazy and don't want to do the work of learning the tool. Not every tool fits every use case and if you have a better way or special requirements - then do something else and more power to you. Sheesh.
[LMGTFY](http://lmgtfy.com/?q=Swift+package+manager)
If you click the link, then do `command`+`f` for GameplayKit, and click that, you'll see the new documentation.
I would recommend some of the books releases by Objc.io. I’m going back and reading the one on Core Data and learning a lot!
It's an old version of the docs and is no longer going to be kept up to date. A quick google search turns up the most up-to-date gameplay kit documentation: https://developer.apple.com/documentation/gameplaykit
Swift by Sundel; iPhreaks; 
I prefer to use storyboards and XIBs, and I'm no newb. I think VCs should contain primarily *application logic*, NOT a giant hunk of layout code. (This can be mitigated somewhat by putting this logic into extension methods in another file.) Layout should be as declarative as possible. I'm not a fan of React Native, even though I think it's an impressive technical achievement. What I do like about it is the way it declaratively specifies the views. I would love to see something like this come to native development using Swift instead of JavaScript.
Any book from objc.io
Any syntactical wrapper can make the default Apple style simpler given how verbose the latter is, to be sure. I still find it extremely difficult to make the case for purely programmatic views over static XIBs + dynamic view code, however. Building views are simply too fast with IB, and when another dev comes in asking “what does the X screen look like and how is the view hierarchy organised”, an XIB shows instead of tells, unlike code. It’s literally the benefits of empiricism screaming at your face.
I’d go 100% code if I could, but sometimes it looks like Apple makes your life harder if you don’t use at least one storyboard, or one XIB... I know it’s more graphical and easier to do quick demos using them, but it feels like nothing beats describing what you want...
You don’t want your app to access the SQL dB directly. You have to go through some Python code or anything that’s more web-oriented. Don’t have sufficient time to explain why but it’s a security reason. There were APIs in the past for that, but they haven’t been updated in a while. Accessing python from swift is fairly easy, using NSURLConnection or something similar. One main advantage is you can separate the server where the python code resides and the one hosting the DB. The first can be open to the world and the second seen and accessible from only the first server.
@gwaeronx and @superezfe I ended up on the other with the warning from that page see the link in: &gt;**Getting Started with GameplayKit** &gt; &gt;GameplayKit covers many aspects of game design and development. For deeper discussions of the game design patterns you can leverage with GameplayKit, along with tutorials that illustrate building games with GameplayKit features, see [GameplayKit Programming Guide](https://developer.apple.com/library/archive/documentation/General/Conceptual/GameplayKit_Guide/index.html#//apple_ref/doc/uid/TP40015172). It's just a bit confusing. It sounds like the consensus is, "hunt around a bit and be careful," and it's not the, "it's going away next version," problem I was worried about. Thanks for looking guys, greatly appreciated. 
hey see me reply to you @gwaeronx above, Thanks!
Swift Unwrapped. 
That's what I'm taking away from this, thanks for the reply. It's just a learning curve with Apple.
Thanks for your work! I really enjoy AudioKit and how powerful it is. My current project involves running MIDI (w/ callbacks) on an AKSequencer; for some reason I'm having a hard time understanding how all the parts interact together to output what I'm looking for.
Thank you!
Looks like there is no 1 single book but Projects sold on Amazon. Kinda inconvenient to buy 30+ books
Also this nasty bug when multiline text-views would send everything completely out of bounds in IB but work fine once the app was running. Glad they fixed that.
Funnily enough I'm actually trying to fix midi. The current midi is like an amalgamation of things found around the internet, it needs some more fundamental work. 
Interesting; thanks for sharing. Do you recommend I continue to work with that or go another route outside of AudioKit?
What exactly are you trying to do?
Just started the development of a companion app to an FX Payment Software for a client in UAE. 
Thanks for the suggestion.. are you saying to make the entityArray (in this case) a singleton? 
There is an annotation directive you can you to tell the compiler to generate a Swift function that conforms to C conventions. @_cdecl("foo") public func foo() {} From C++, you would be able to call the function like it was a C function. Obviously, you can't get fancy with your function as it can only support stuff C can do. That said, you might have an easier time using Metal from Objective-C since you can mix C++ with it directly. Using Objective-C++ probably has a lot less impedance than using Swift in this case. 
A great resource is the example projects. There are a few that use AKSequencer and these can provide useful models for how to put together 'the bigger picture'. Check out: [SequencerDemo](https://github.com/AudioKit/AudioKit/tree/master/Examples/iOS/SequencerDemo) - a basic model for AKSequencer [AudiobusMIDISender](https://github.com/AudioKit/AudioKit/tree/master/Examples/iOS/AudiobusMIDISender) - you won't be able to run this project without doing all the Audiobus boilerplate stuff, but it uses callbacks extensively and the readme has some tips. [MIDISequencer](https://github.com/AudioKit/MIDISequencer) - this uses Cem Olcay's MIDISequencer which is build on top of AKSequencer [MIDIFileEditAndSync](https://github.com/AudioKit/AudioKit/tree/master/Examples/iOS/MIDIFileEditAndSync) - this gives examples of how to edit the contents of tracks in your sequencer
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [AudioKit/AudioKit/.../**MIDIFileEditAndSync** (master → 1268534)](https://github.com/AudioKit/AudioKit/tree/12685344dba4d0dacafaac465e62973814c4040b/Examples/iOS/MIDIFileEditAndSync) * [AudioKit/AudioKit/.../**SequencerDemo** (master → 1268534)](https://github.com/AudioKit/AudioKit/tree/12685344dba4d0dacafaac465e62973814c4040b/Examples/iOS/SequencerDemo) * [AudioKit/AudioKit/.../**AudiobusMIDISender** (master → 1268534)](https://github.com/AudioKit/AudioKit/tree/12685344dba4d0dacafaac465e62973814c4040b/Examples/iOS/AudiobusMIDISender) ---- 
&gt;Hands down, check out Hacking With Swift. Written by Paul Hudson, it’s a fantastic beginners book to iOS development using Swift. He’s also super easy to communicate with via email and he’s all over this Reddit for support/advice/etc. All his books are on sale for half\-off for WWDC. An especially good deal if you get one of the "Packs": [https://www.hackingwithswift.com/offers/hws\-50](https://www.hackingwithswift.com/offers/hws-50) [https://gumroad.com/l/swift\-power\-pack/hws](https://gumroad.com/l/swift-power-pack/hws) [https://gumroad.com/l/swift\-platform\-pack/hws](https://gumroad.com/l/swift-platform-pack/hws) I'm not affiliated in any way; just a happy customer.
Anything that involves AppKit needs to be rewritten. In fact, the only frameworks that might be fully functional on Linux are the ones you linked to. How easy it is to Port depends on how heavily you rely on Apple’s frameworks. If you weren’t designing it with cross-platform compatibility in mind, you probably use quite a lot of those. 
I second Fireside Swift. The fact that they don’t always have all the answers and the humble approach they take were really encouraging to me when I was first starting out. They are very relatable and helped me understand some of the fundamentals. One of my learning approaches has been to read/code on a new topic at home, then listen to a Fireside Swift podcast on the same topic while exercising or driving that same day. Really helped drive home the concepts!
Essentially a metronome that allows you to vary the tempo for each measure, and use a callback with MIDI to generate associated sounds. I create 'measures' with a struct, assign them location, beat and tempo info in a 2d array, and create a sequencer track with appropriate length. However, when I play the sequence they don't play back audio as I would expect.
I've done it the other way around. Like using Swift code to execute C++ code. I remember it being a pain to be able to pass the type between the code. This may be of help , but it may not, however I am pretty sure I used the same ( or similar ) method as this guy here -&gt;http://www.swiftprogrammer.info/swift_call_cpp.html
There's a library but I haven't tried it yet https://github.com/naleksiev/mtlpp
The vast majority of apps will never make any real money. Many have high hopes, but the reality is that most don't even earn back the fees. Personally, I'd just submit the app. Have people login so that you can contact them thru the account or get their email. Then if it's a run\-away hit, open an LLC and start running two similar apps, have he people move over to the "new and improved" one that's under your LLC.
The app is for an established social media / dating site with 160k registered users and about 30 new signups per day. My business model is subscription. But the subscription part won't be live until July. I know my users could sue me that's why I'm quit worried to release it with my name on it. At the same time, I just want to get it out there since this have been delayed many times.
Thanks. I know. I already have a single\-owner LLC from the state where I just moved from.
Here's a project I forked that bridges C++ to Obj-C, then on to Swift: https://github.com/shirakaba/iPhone-libmecab I barely understand anything that's going on (the C++ is labyrinthine and I'm not an Obj-C programmer by nature), but it does what's needed, if you want to take a look.
I'm not sure how someone would win a lawsuit, but I can see your point. I'm not thrilled about how Apple puts people's names on the app store. People post links here in this forum and it links to their real name. I get that fraud can be committed, but you wouldn't see this in a lot of other platforms. I guess it's a small price to pay if you're sure you'll make money at it. Didn't you have something setup for the site you have now? I guess anyone can have a site, but it had to be registered to someone or some company. They could have sued you already without the mobile app.
I am currently using the LLC company that was formed on my previous state. So I have to deal with transferring this company to the state I live now... then get DUNS. So it's gonna take a while that's why I'm thinking of submitting the app now to get things going and just convert later. At the same time, I just read the new GDPR rule prompted new lawsuits to FB and Google. I guess I should transfer my LLC first and get DUNS.
Pretty sure iOS doesn't allow sending texts, period.
Your question is more of an iOS or macOS question. As there is nothing stopping swift from sending a message containing a mp4 file. Just unclear what your target platform is and method of delivery. Assuming it’s iOS check out the messages framework. It’s how iMessage extensions work. https://developer.apple.com/documentation/messages
+1 for [Swift by Sundell](https://www.swiftbysundell.com/podcast/). Just started catching up with it, and I like it a lot. [The author's](https://www.swiftbysundell.com) other podcast [Stacktrace](https://stacktracepodcast.fm), together with [Guilherme Rambo](https://github.com/insidegui), although not Swift-centric, is also excellent. One of the very few podcasts for which I have notifications enabled.
That was way back in the early days of Swift – I need to find a way to get Amazon to take those down, because they are _old_, and you're not allowed to update them. I switched to a complete book version shortly after, and have only done that since: https://www.hackingwithswift.com/store – note that if you go to https://www.hackingwithswift.com/offers/wwdc18-50 you'll find they are all half price for the next 48 hours or so.
Thank you! I'm glad you've enjoyed the books so much, and I look forward to releasing lots more books, videos, and apps soon :)
I'm glad to hear it!
I’d stick with ObjC, or ObjC++ to mix with C++. The bridging cost going to Swift will quickly impact performance in you C++ code.
Thanks for the comment, I appreciate it!
I'm currently learning server side Swift with Vapor and there's a tutorial near the end that seems to do this. The server app is split into a backend to talk to the db and a front end converting to JSON. I think I'm on the right track, thanks for your help!
Yeah, dividing between back and front end like this, no matter the language, is the typical path chosen for this kind of application. You’re welcome!
Firebase and core data are two different things. Firebase is used for real time database storage as well as regular storage on the cloud. Core data is saving everything on the device. You can use both of them together to give the best experience to your users. I wouldn’t use firebase for storing videos. Store videos elsewhere as the file sizes are too large and you will run out of space. Instead you could do something like save the videos to the users YouTube account and then save the link of the YouTube video to firebase real time database. YouTube is just an example, you could probably find something else that is cheap and private. 
Firebase encompasses a number of different Google products \- one of these is [Cloud Storage](https://firebase.google.com/products/storage/). This one *is* designed to uploading user generated photos/videos. Of course, at some point you're paying for storage which is more expensive than Youtube, but it will also be a lot more flexible than using Youtube! 
Just hear learning Swift, but I was am also an established small business owner. 100% submit it through a LLC especially if you already have one. You may find it impossible to get sued now, but there is always dumb enough with a lawyer to find a way. Your app may not be very likely, but having that extra cushion to protect you financially is worth the price difference. 
I create all of my views programmatically using the Layout Anchors API for Auto Layout. The storyboard editor has always been a little glitchy, and when you have constraints in code it's a lot easier to see what's changed in version control. Most of my apps have custom skins, so it's a lot more consistent to keep my layout in code when most of my custom components are in code as well.
`if assetNumberTextField == loaner.loanerAssetNumber` this looks like it is comparing a text field to a string, it should be something like `if assetNumberTextField.text == loaner.loanerAssetNumber` Also unless `loaner` is a variable in the class's scope, it is not available in `checkInButtonPressed` because it is not created until you've called `checkInAsset`
ELI5: what’s that good for?
No, but you can use the share sheet to embed the video into a message. 
Got it. And I setup the twilio code script on a lightsail instance which word very well. I guess my question is on the iOS side. I am failing to see what code block from the app sends the room and user information and what specific code block receives it to generate a room.
The ELI5 answer is that the Swift runtime won't be included in every app because the compiled Swift application code will be able to speak with the OS. The longer explanation: https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apple/swift/.../**ABIStabilityManifesto.md** (master → b6b6680)](https://github.com/apple/swift/blob/b6b66805754dda5ac5add7deed6a8b7bf02cde78/docs/ABIStabilityManifesto.md) ---- 
That will save lots of megabytes for each app, right?
Thanks for the reply. Leaving out the `.text` was just a mishap on my end when writing it out, thanks for point it out. So I created a variable of Loaner(the CoreData entity) like so `var loaner = [Loaner]()` with that I'm receiving this error `Value of type '[Loaner]' has no member 'loanerAssetNumber'`. I have confirm that there is an attribute in the CoreData model for `loanerAssetNumber`. 
Yes. Your app will be reduced to your assets and application code.
Isn’t layoutsubviews possibly also called more than once in the lifetime of the view? To me the documentation just says to be aware of the fact that update constraints can be called multiple times and to write your code intelligently. Which you should also do if you setup constraints in layoutsubviews. 
The view controllers could sign up for the object's change events, preferay using NotificationCenter and NSNotification: https://developer.apple.com/documentation/foundation/notificationcenter?changes=_4
Vapor with Postgres/Heroku tutorial would be so helpful. Thank You.
Is it generally better to use NotificationCenter than KVO?
yep, deploying to heroku tutorial is planned for next saturday!
awesome! can’t wait.
Stuff I'm loving: - System library targets (SE-0208) - `@dynamicMemberLookup` (SE-0195) - `hash(into:)` (SE-0206)
Can anybody that watched it give a tl;dw ?
Here's a summary of some of the changes: [What’s new in Swift 4.2?](https://www.hackingwithswift.com/articles/77/whats-new-in-swift-4-2)
The new hash protocol is seriously amazing. Letting people write “good enough” hashable types without thinking about the mechanics is insanely awesome 
Definitely! Notifications are far more robust of an API. They got more love from Apple.
Any plans to release metal programming books?
You access an attribute from a coredata object by using "object.value(ofKey: "attribute")"
that type is not a core data entity, it is an array of entities. if you want to find one that matches you could do something like (might be wrong, just typing on mobile) ‘loaner.first(where: { $0.loanerAssetNumber == someText })’
I occasionally try the Storyboard/xib route, but if it's something I intend to keep/use/maintain for longer periods of time, I invariably resort to rewriting views in code at some point. It's a struggle between wanting to write less code, so as to have less to debug, versus working in a code base comfortably. On an infinite timescale, any actively-used and worked-on personal project will become as IB-free as feasible. Maybe I am using Interface Builder wrong, but it just never seems to scale nicely for me. I feel like it's much, much simpler to compose several small view controllers in code than in the storyboard way. On the flip side, layout does grow my view controller code by – rough guesstimate – some 25% or more. It's not ideal. Though, I am really fond of [Chris Eidhof's auto layout DSL](http://chris.eidhof.nl/post/micro-autolayout-dsl/) – and it's so small, one can ostensibly write it or a variation of it in a few minutes. Additionally, if I try to go all-in on the IBDesignable stuff, the whole thing turns unbearably slow. It becomes a sort of *resistance point* for when I have to open Interface Builder for one reason or another. "Oh no, it's going to try to transmogripile something and something's going to get stuck *again* or whatever, yada yada yada." Maybe I'm reaching, but it also feels akin to the "single source of truth" principle – in code all my view and layout is captured in one file, preferably grouped in one section of that file. It's not always a *happy* section, but it is what it is.
It's all about &gt;!allCases!&lt;
I'm a big fan of the [Random Unification (SE-0202)](https://github.com/apple/swift-evolution/blob/master/proposals/0202-random-unification.md).
Tried that #if check for simulator in Xcode 10 but it didn’t work. I was hoping I could check for a ton of environments like TestFlight open / closed beta etcetera
I have a network abstraction layer, where I have a method that calls my backend (Parse in this instance) and provides the room id (I generate a new UUID for each call) and user identityt (the objectId of my PFUser). The Parse cloud function then calls the Twilio API via their Node library, provides the room id and user identity and passes the Access Token returned byTwilio back to the app. I also have a Twilio abstraction layer in my app, where I ask Twilio to connect to a room with the room id I have used for the access token and the access token that I got back from Twilio via Parse. I also send push notifications to the users being called via Parse. In terms of code, here is the code for requesting a token via Parse: enum GetTokenError: Error { case parseError(String) } func getAccessToken(roomId: String, completion: @escaping (Result&lt;String, GetTokenError&gt;) -&gt; ()) { let parameters = [ "identity_name" : PFUser.current()!.objectId!, "room_name" : roomId ] PFCloud.callFunction(inBackground: "get_access_token", withParameters: parameters) { response, error in if let error = (error as NSError?) { log.error("Could not call get_access_token : \(error.debugDescription)") completion(.failure(.parseError("Could not make a call at this time: \(error.debugDescription)"))) return } guard let token = response as? String else { log.error("Response is not a (JWT) string") completion(.failure(.parseError("Could not make a call at this time: response is not a JWT string"))) return } log.verbose("Got Twilio access token: \(token)") completion(.success(token)) } } Here is the Parse code that gets the token from Twilio Parse.Cloud.define('get_access_token', function(req, res) { const AccessToken = require('twilio').jwt.AccessToken; const VideoGrant = AccessToken.VideoGrant; const twilioAccountSid = '###'; const twilioApiKey = '###'; const twilioApiSecret = '###'; const identity = req.params.identity_name; const videoGrant = new VideoGrant({ room: req.params.room_name }); const token = new AccessToken(twilioAccountSid, twilioApiKey, twilioApiSecret); token.addGrant(videoGrant); token.identity = identity; res.success(token.toJwt()); }); And this is the Twilio code to connect to the room enum CallRoomError: Error { case alreadyConnected case connectionFailed(NSError) } func connectRoom(id: String, accessToken: String, onConnect: @escaping (Result&lt;(), CallRoomError&gt;) -&gt; ()) { guard room == nil else { onConnect(.failure(.alreadyConnected)) return } let connectOptions = TVIConnectOptions(token: accessToken) { builder in builder.roomName = id if let audioTrack = TVILocalAudioTrack() { builder.audioTracks = [audioTrack] } if let videoTrack = self.videoTrack { builder.videoTracks = [videoTrack] } } self.onConnect = onConnect self.room = TwilioVideo.connect(with: connectOptions, delegate: self) }
Create table view with grouped style. let tableView = UITableView(frame: .zero, style: .grouped) The default plain style causes the headers and footers stick while scrolling. 
Haha well now I feel like an idiot, thanks so much! Can't believe I missed this on my google search. Just tried it and it works perfectly. 
I believe that this code is inside your custom View Controller that is a subclass of TableViewController. Usually when you override method in a subclass you want to call that exact method in superclass to do its job first, and then add functionality on top of that. It looks confusing because same method setEditing is used in both TableView and TabelViewController
&gt; @dynamicMemberLookup (SE-0195) &gt; We wanted a safe language so badly we forgot how nice Objective-C was. I'm just kidding I love Swift and I don't remember last time I had the chance to use Obj-C, but sometimes I feel like we ended up losing a lot of nice features (but gained some really nice ones too)
I usually put my all my constraints in viewDidLoad() of a UIVIewController, or in constructor of a UIView. 
The ViewController code can get long, but it's not what I'd call messy most of the time, of course, beauty is in the eye of the beholder, but here's a quick example: final class FooViewController: UIViewController { private var viewModel: FooViewModel! private lazy var tableView: FooTableView = { let table = FooTableView(self) table.translatesAutoresizingMaskIntoConstraints = false return table }() private let searchBar: UISearchBar = { let searchBar = UISearchBar() searchBar.translatesAutoresizingMaskIntoConstraints = false return searchBar }() override init() { super.init() title = "Foo" viewModel = FooViewModel( self, itemReceiver: tableView, searchBar: searchBar ) } required init?(coder aDecoder: NSCoder) { fatalError("init(coder:) has not been implemented") } override func viewDidLoad() { super.viewDidLoad() // WARNING: TableView MUST be added first for the navigation bar's title to shrink correctly view.addSubview(tableView) view.addSubview(searchBar) searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true searchBar.widthAnchor.constraint(equalTo: view.widthAnchor).isActive = true searchBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor).isActive = true tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true tableView.widthAnchor.constraint(equalTo: view.widthAnchor).isActive = true tableView.topAnchor.constraint(equalTo: searchBar.bottomAnchor).isActive = true tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true } And, you are correct. I have to actually load the view to make sure the constraints work. It's the major downside to doing things programmatically. I write extensive unit and UI tests anyway, so it's not the end of the world, but it would be nice to have the constraints checked before that point.
That seems reasonable to me and what I commonly do. The OP saying they used layoutsubviews and I was questioning why not use update constraints. I use update constraints when I feel like I need a little extra organization. 
I don't. So far I'm just specifying the constraints in viewDidLoad() if it's a ViewController, and layoutSubviews() if it's a View. It definitely adds a lot of code, but it's worth it to me.
I see. Sorry for not understanding in the first place. Agreed, it all depends on the task you have at your hand. 
Thanks, after more playing around it looks to me that it's not something that works in Xcode 9.2 simulators.
Good question. Drop me a line. I’m going this direction too, serverside swift / vapor for the win, 
Thanks. I'm just going to form a new LLC. Btw, do you know if I can use a UPS Mailbox as a physical address for LLC?
This probably belongs in r/iosprogramming. The traits are used for major layout changes beyond what autolayout would do on its own. For example, you might want to hide or show views depending on the trait regular vs compact. Having said that, the huge limitation of size traits is that they don't differentiate between portrait and landscape on an iPad - they're both "regular" size. In general I find it easier to implement `func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator)` in your viewController and hide/show/move views there. 
posting a series of blog posts on [HealthKit](http://learningswift.brightdigit.com/category/healthkit/) and [What's New from WWDC 2018](http://learningswift.brightdigit.com/category/wwdc-2018/) 
I'm curious about this. What do you mean by "studying app"?
I add them in the view's init method. I've minimized my use of VCs, and started putting my view code in actual views. Often my views are mostly just init and a viewModel didSet.
Not if you do it right. If you just use apple's APIs directly, then yea it's going to be wildly verbose. However, if you pick a good 3rd party autolayout lib, your constraints can be very concise and still quite readable. If you spend a bit of time writing convenience init methods and categories on the common views, your styling code can also be very concise and still quite readable. For most layouts I only have to run the code a couple times. The designers should give you values for padding, fonts, etc. We're not designing anything in xcode, we're just translating photosop to code. On the flip side, all your view code is in the view file, not split between the view file and some XML somewhere which I find to be quite messy.
My recommendation is the Hacking with Swift books, they are up to date. I found the Big Nerd Ranch books also workable but some modern swift features have moved on. Finally the Apple official book on App Development covers a range of topics but a little slower.
Yes and no. The IRS doesn't care, and using it for mailing was your public forward facing address, you're okay. Check and see with the state you're in if they allow it. Most want a physical address because of state and local sales taxes. and it must be tied to a physical address, even using a registered agent, there wasn't a way around it for me. 
I wouldn’t recommend doing this for an enterprise project as it’s very new and relatively unstable compared to older languages and frameworks. 
No. You should look up Janie Clayton's book.
So the user could make mini quizzes to study for tests and I use a struct for the question asked and the awnser and I make an array of that for the whole quiz 
Great, thank you for the clarification. I'm still working at understanding CoreData. I apprecaite the help. 
Awesome, thank you! 
&gt;18 comments You can popup a pre\-formatted message including a video and text but the user has to press 'send' him/herself
thanks for the tip, i looked into it and found a singleton to be pretty much perfect for what i was doing! thank you. the actual problem i had was solved by doing a 1-to-many relationship with another entity as opposed to setting my attribute to a [String]. so thanks for sending me down the rabbit hole.
Nope, never. I find that interesting though. Thanks for sharing. 
IT is getting there though. It really comes down to how critical the site is. In any event the long term looks really good so there is a payoff to starting now. I can see Swift becoming "the" site development language.
It would be a dream to have a remote job that pays a San Francisco salary while I live in TX
Welcome to software engineering
Yeah companies seem to offering remote work to save money, rather than to hire the best developers in the world.
It's not a problem as long as they're paying for it.
version 4 is new?
&gt; I probably should add that this isn't the best place to be asking such a question. I don't need the best place. 
Its possible, but you will probably want to try to look for full time traditional employment with a remote only (or remote-supporting) company instead of freelancing. I always found freelancing was what you described -- either greenfield MVPs or totally abandoned legacy code. 
I’m not sure what the advantage of this is over lazily asking for permissions when the user tries to do something that require them. To me the negatives outweigh the positives. It seems too distracting because the first thing your users would see when they open the app is this modal asking them for something rather than something useful. I also don’t like that you have to present this view controller to ask for permissions then present another one from iOS to actually have the user grant them to your app. Finally, if a user explicitly denies one or more of these permissions without realising how the app uses them, their experience will be made worse if they end up wanting to grant them in the future because this has to be done in Settings.app. 
Unfortunately I teed to agree with this 
As for the server side, yes it's very new. 
I now what you’re talking about, but it hasn’t to be this way. You need to find a company that is used to work with remote employees and that want you to be part of the team. It’s not easy to find, but they are out there. Another workaround for this issue is to hang out in slack channels with other freelancers.
Any particular favorite channels that you’d recommend?
Productive meetings with clear communication and understanding of direction. Then deliver and check the work on merges.
It's* possible it's = it is : /
I've worked both as a freelancer and as a consultant, and yeah, that's usually the case. Where I work now however, we have multiple offshored developers that are a part of the team in every sense. They participate in sprint meetings, are active in the Slack along with the rest of the team etc. We're actually looking for another iOS remote to join the team, so pass me a PM if you want to hear more :)
Tise, a classifieds startup in Norway with ~350k users is looking for another iOS remote to join the team. Not slave wages, but not SF wages. If anyone's interested feel free to send me a PM (not a recruiter, I'm the person you'd be working with on iOS)
I read all the docs and got hyped right before Vapor 3 got released, can't wait to try it out when all the resources get updated.
I just changed my code and made it work exactly how it is explained in Firebase documentation. The image gets uploaded but the app gives error that the object does not exist. Mind giving it a look again please // Upload image to firebase let storageReference = [Storage.storage](https://Storage.storage)().reference(forURL : "gs://snapchatclone\-20dca.appspot.com") var data = NSData() data = (UIImageJPEGRepresentation(imgView.image!, 0.1) as NSData?)! let imageName = "\\(NSUUID().uuidString)" self.imagePath = "UserPosts/\\(imageName).jpg" let childUserImages = storageReference.child(self.imagePath!) let metadata = StorageMetadata() metadata.contentType = "image/jpeg" childUserImages.putData(data as Data, metadata : metadata) // Generate download URL let imageRef = storageReference.child("UserPosts/\\(imageName).jpg") imageRef.downloadURL(completion: { url , error in if let error = error { self.presentAlert(alert: error.localizedDescription) } else { print("Download URL is \\(String(describing: url))") let downloadURL = url self.performSegue(withIdentifier: "receiverSegue", sender: downloadURL) } }) } } }
/r/digitalnomad/
Hello! It is great that you want to join our community The first thing you need to read is the great book “Swift programming language” which is available for free at iBooks Then “using Swift with Cocoa” which is also available for free on iBooks After it there are a lot of great resources on the web like Ray Wenderlich Tutorials or appcoda Apple Developers portal is also a great place to study but you need some experience in swift and cocoa to use documentation at Apple Developers portal for 100% If you have any questions feel free to contact🖖
I liked Rob Percival's Udemy Courses when starting out with iOS Development. Also, Devslopes makes some excellent video courses as well. If you learn better by book, I would recommend "The Big Nerd Ranch" and their book on iOS development. If you want a subscription based platform (with the advantage being continuous updates), checkout teamtreehouse.com. I'm on mobile RN but I can add links to the mentioned resources later if you want. :) GL on your development journey, Swift is a solid first language IMO. :-)
Print(“Hello World”)
ruby being of version 2x and python 3x also very new for server side?
Yeah, my point was (maybe not to well offered up) that forums and such associated with the libraries you intend to use would likely give you a greater range of opinions that are reasonably up to date.
I hang out in the CocoaheadsSthlm slack, a meetup group for iOS developers in Stockholm. :)
Version numbers don't reflect the actual stability of the language. Python was created nearly 30 years ago and it only reached version 3.x while swift was released less than 4 years ago and it's already version 4.2. Again, Version numbers don't reflect the stability/ maturity of a language in ANY way
https://www.reddit.com/r/swift/wiki/index
After the replies in this thread, I now put the constraints in init as well. That seems to be the most correct for constraints that wont change during the View's lifetime.
It won’t compile
I second the Angela Yu course! Get it when on discount; a great value. 
I think it is 9.99 through Groupon. 
It is possible, it just isn’t as easy as working together as a team or working solo remotely. Teamwork is hard under the best circumstances. Most successful teams work hard to make it a success (the team, not the project) but most don’t really try. There is a widely held belief that great teams happen naturally. They do but rarely. When the team is spread across locations and time zones, it is even harder for a team to be great (the team, not the project!) so if they’re not actively trying to make it work, it might not. Of course, teams that think great teamwork happens naturally may also think remote members don’t require extra work because they don’t think teams require extra work. Some types of projects lend themselves to remote workers more than other types of projects. Projects that require long whiteboard idea sessions are harder with remote team members, support for legacy code may be easier. The good news is that almost every company does some sort of remote work now whether it is dealing with clients or vendors or team members, so they’re all (slowly?) getting better at it. Every project I’ve been part of for the last 3 years has had at least some remote work. I’m currently working with team members 2 time zones away (not bad) and 7 times zones away (very tough).
I agree, this does seem possible.
Keep in mind though that The Big Nerd Ranch books for iOS are a little outdated now (using Swift 3 instead of Swift 4, Xcode 8 instead of Xcode 9, etc).
I’d highly recommend Duc (David?) Tran’s “Total iOS blueprint” course - very thorough and he’s a pretty likeable guy! 
Python would make a better first language.
You should follow the free Stanford iOS programming course that’s available in iTunesU. It takes you through the basics of Swift and the iOS SDK. It does assume a bit of programming knowledge first though, so if you are a total beginner perhaps work through the Swift Playgrounds tutorials on iPad first. You should look at the Swift Programming Language book from Apple too, also free. 
To start I highly recommend the Apple official Swift guide book. 
The biggest issue I see with running Swift on Linux is that there is no way to recover from fatal errors; this may not be a problem for an iOS app, but it arguably is one on the server. You'll have to build your own system on top of it to deal with any necessary work: restarting your server / container, adding a load balancer (so one crash doesn't block the whole system for everyone), write a default 500 page, find some way to clean up zombie processes / close DB connections / whatever you might have to do etc.
When you're uploading the image are you adding a ".jpg" to the end of the string for the image? That can be causing the error you're getting.
I very much enjoy working with [BrightFutures](https://github.com/Thomvis/BrightFutures/). It seems to offer more granularity (different GCD queues), but is otherwise fairly similar. BrightFutures does futures akin to Scala and Rust, so the ergonomics are more familiar for people from those backgrounds.
If you have access to an iPad, the [Swift Playgrounds app is very cute and fun](https://developer.apple.com/swift-playgrounds/). Also free.
Just solved it, changed some code and the downloadURLwithCompletion block had to be executed in putData completion block then it worked :)
 How about ```swift print(“Hello World”) ``` 
I picked up the course for £10, thanks for this. I really like the way it’s taught. Quite slow, but comprehensive. Thanks for the help!
Thanks for the advice &amp; warm welcome! 
Look at Vapor.
I am currently following a udemy training to learn Swift. It's a pretty easy going course and it teaches extremely well, also explaining the basics of xcode etc. I'm not entirely sure if I'm allowed to post the link etc. here cause it's a paid course (and I don't want to get kicked out for advertising), but feel free to drop me a message if you'd like a link to the course. I think I've paid a tenner for it. 
Yeah I’ve just started on this one, thanks! 
First off, congrats on choosing a first language! There are a ton of resources to learn Swift on, but be sure they're updated to Swift 4.1 (and soon 4.2). The most updated resources are the Apple tutorials, [Ray Wenderlich](https://www.raywenderlich.com/category/swift), and /u/twostraws books in [Hacking with Swift](https://hackingwithswift.com). Another great resource are the Big Nerd Ranch books, however some updates are needed soon, so I'd probably go with the above for immediate absorption until changes are made. Swift is a fun language to use, so good luck and keep plugging away!
The Big Nerd Ranch guide's for Swift and iOS development, Angela Yu's Udemy course, and Ray Wenderlich's books/tutorials are really good. No question about it those are the best resources available IMHO. Off course there is the documentation by Apple, but I assume you will look those over anyways. An affordable option if you have the discipline is to take a Udacity course. I have heard good things from a few people in the industry about that Nano degree.
We use futures for a lot of things in the project I work on. I have to say I’m not a fan. They have their place like networking and similar tasks but when you try to wrap UI functionality and hiding and showing elements based on their results it gets messy and confusing. I think if I’d come across them in a different way I’d have less dis stain for them but that’s not the way it worked out. 
I had a similar impression when I first got introduced to Promises / Futures in front\-end web dev. Some of that might just be that async UI programming can create a lot of wonky UI state. I think I prefer futures to things like callbacks/delegates because they're better at managing state internally (e.g., I may call a function a dozen times, but when a future is resolved, its handlers get fired once), but that still leaks, especially when you're doing UI stuff. That said I think they work better within a full\-on observable paradigm, so maybe it's just the weirdness of Swifty APIs mixing with old C/Obj\-C APIs?
So you use private APIs?
they do reflect it. 
There's a "commute zone" around Silicon Valley where people do exactly what you say, but not in TX. It creates a technology "dead zone" because anyone any good in that zone, works in Silicon Valley. If you try to startup a company in that zone, you either pay near the wages of Silicon Valley or you don't get the talent. It also raises the home prices in that zone.
lets build a swift web frame work :)
Thanks for taking the time to elaborate in depth. I agree, with all of it.
Thanks! I just looked for the Buenos Aires NSCoders. Great community.
Thank you so much this extremely helpful! One last question I am trying to understand how to assign the users to there own cell in a UICollectionView, have you run across a tutorial or sample code for that?
I've been using vapor (2, unfortunately haven't migrated to 3 yet) for several months now and it's been running great. I really want to recommend packaging it up in a docker container though, as swift is unfortunately still rather finicky in which system packages it requires on Ubuntu. But if that works out, all of it runs rather nicely.
For that purpose you’ve done the right thing imo. There’s no need to create a protocol to be inherited for each VC you need to apply the Texture. Your base VC with the Texture definitions is the way to go, then subclass it as you need. But that’s my opinion 
Just some suggestion. If Angela asks you to copy and paste the codes, try typing them first to help you understand the process. That's from my experience. 
I would have done it like you did. Can't even think of a *good* way of doing that with protocols. But maybe it is possible?
FWIW, I would put that textured background in a view class instead of the view controller. I'd make some sort of \`TexturedContainerView\` that I could reuse as the container view for my view controllers. Then I'd override loadView on my controllers and use whatever custom view I made.
It doesn't really seem as though you're looking for answers as much as for people to confirm your own preconceived notions. I have 4 years experience with Ruby, with a couple of minor projects in languages like Java, Scala etc., as well as recent Swift backend experience, and I can absolutely attest that, whatever Swift's merits (and there are definitely a lot of strong selling points for Swift), the stability is nowhere near comparable, nor is the breadth of the library / tooling ecosystem.
This is the answer that makes the most sense. Doing it with protocols would be pretty convoluted, but using a derived UIViewController is going to be brittle as soon as you subclass UIViewController again, and then want a class that does both things.
4 years? less than me
It's possible, comes down to a preference I guess: protocol Colorable: class { func setColorBackground() } extension Colorable where Self: UIViewController { func setColorBackground() { view.backgroundColor = .red } } final class ViewController: UIViewController, Colorable { func viewDidLoad() { super.viewDidLoad() setColorBackground() } } 
I agree, this does seem possible.
Thanks, just what I was looking for. 
one of my favourite sessions. 
She truly developed that course to be a masterpiece from the start. There were only a few times going through it that I had to do some outside research on topics she discussed. She is a great teacher and really knows her stuff. 
My favorites are: Fireside Swift, The Learn Swift Podcast, SwiftCraft and Swift by Sundell.
"Ability to create custom code snippets for any language and reuse them whenever needed." Does this mean I can use python code in Swift ?
Clearly you've learned less in however many years you've been developing than Tainnor has then...
Clearly you should learn logic
Yes you can, if any error appears just fix it
Yeah, that is a way of doing it. But is it *good*? You will have to have `setColorBackground()` in every view controller that wants that background. But maybe that's fine? But I would prefer just to subclass.
You came to this sub to ask a question, whether there were any issues. People are telling you the issues, rather than telling you what you want to hear. It's such bizarre, immature behaviour. Think about your actions for a moment.
Anyone been following this? Sounds more like it’s open to major health software companies rather than third party app developers.
Hey all, I know this is an older post, but I wanted to let everyone know how I resolved this. It turns out that the issue might be caused by other applications accessing your playground files and the playground spinning off in an infinite loop waiting to regain control of the file.... weird. If you are working on a playground stored in a directory which is replicating your work to iCloud, DropBox, or using a backup service like Time Machine, playground will spin off into Neverland. To resolve, I've created a directory called "\~/scratch" and excluded it from all of the above type services. I save my playgrounds in that directory only. This is working for me. Please let me know if this doesn't work for you. I'm very curious.
If you put 4 spaces in front of each line in your post it will show up as a code block. Right now a lot of your post is unreadable.
Were you able to find a fix?
Thank you for having a title with this format. I hate when people have titles "How to..." but they're asking a question instead. I can verify that this issue has been fixed for me when not using a syncing service. 
It's better, at least in Swift. Swift is a protocol oriented by design, and these kinds of functionalities are exactly what composition should be used for. As soon as you'll need additional functionality that might differ between your subclasses, inheritance will fall apart.
Unfortunately no. I even tried cloning my project and the reference project on a different computer and having the same issues. Tried posting on Swift forums, summoning Paul Hudson, even asking the seniors at work but haven’t discovered a fix yet.
There's also the known bug of having a Playground set to autorun and making modifications to it, causing it to lock up. The fix for that bug is to turn autorun to manual by holding down on the play/stop button at the bottom left and selecting "manual", then restarting Xcode and reloading the Playground.
Honestly, the best one is whichever one suits your needs and way of working. Try reading through [this article I wrote](https://www.hackingwithswift.com/articles/73/server-side-swift-kitura-vs-vapor) – it provides a broad overview of the top two. Both Kitura and Vapor continue to evolve, and I know the Kitura team are working hard to fill in many of their gaps.
Thank you, I will!
Twostraws is right. Vapor vs Kitura is mostly personal preference. Vapor I feel uses swift features very cleverly, and in some ways I feel is cleaner to write than Kitura. Vapor’s async stack relies heavily on Futures and that part of it can be confusing and ugly, but theoretically offers scalability gains (though whether those gains matter to you is not determined). Swift’s eventual addition of async/await may make that significantly better, but async/await is pretty far off still. 
Vapor 3.0 by miles now.
Vapor seems to be the favorite from what I can tell. 
You should do some Googling for "background threads", "Grand Central Dispatch", and "main thread runloop" \- you'll find a pretty good number of solutions/discussions. As a quick example: [https://stackoverflow.com/a/29564713/88111](https://stackoverflow.com/a/29564713/88111)
Timer()
Timer !!
thanks for the tip! this bug is annoying as hell.
I just started looking into server side Swift again and I really enjoy Vapor
Where was this mentioned? Couldn’t find it on the Apple website or as a WWDC session title.
You're probably going to have to post more code that demonstrates the issue. Right now it's tough to tell where the error is occurring.
&gt; Boolean toggling. Simple but powerful function to toggle Bool value toggle() is now a part of Standard Library. Good grief. I saw that proposal but didn’t think it would make it past review. It’s one of those things that’s small, and doesn’t necessarily hurt, but kind of sets a low bar precedent.
Thanks for chiming in. I had originally attempted to just run manually, but I was still getting lockups. The only thing that seems to quell the problem for me is getting file access out of the picture. I've dug a bit more into this today. As I understand it, playground uses an IOS simulator in the background to perform operations. If someone can verify that, it would be awesome. My next idea was to isolate the background process and see what happens when we kill it. Will Xcode restart the process? 
Yep Questions should be questions!
Probably `PlaygroundStub_macosx_XPC`.
Sorry! Uploaded my code.
For better formatting you should preface each line with 4 spaces. That places the code in a code block.
MacOS? iOS? What kind of elements are you trying to create tooltips for? Any code so far? There's not enough information here to really help you out. All I can do for now is point you in one direction that might help: [Simple mouseover effect on NSButton](https://stackoverflow.com/questions/6094763/simple-mouseover-effect-on-nsbutton)
&gt;Supports of multi-cursor editing in Source Editor, which allows you to quickly edit multiple lines of code simultaneously. I’ve been waiting for this for years, finally they included it.
Sorry again lol, I’m not great at this
You almost have it, just remove all the backticks (the `)
Your code is pretty close to the example that Google has for the Sheets API, maybe take a look at where it differs from yours and see if you find out why it's not working. Or at least give them some feedback that you're having an issue: [iOS Quickstart](https://developers.google.com/sheets/api/quickstart/ios?ver=swift)
var score = 0 var gameActive = true func increaseLabel() { DispatchQueue.main.asyncAfter(deadline: .now() + 5) { score += 1 self.scoreLabel.text = "\(score)" if gameActive { increaseLabel() } } } 
Sorry; iOS 10.3 is the minimum target. I've tried implementing the code given in the libraries that I've tried, but all are pretty much too outdated to work. I'm not sure what else to try at the moment
Here's a playground example for you: import Cocoa // Make and show a window let window = NSWindow( contentRect: NSRect(x: 0, y: 0, width: 400, height: 400), styleMask: [.titled], backing: .buffered, defer: false) window.orderFrontRegardless() // Make a text label view let label = NSTextField(labelWithString: "") label.autoresizingMask = [.width, .height] // label resizes in both width and height label.frame = window.contentView!.bounds // label starts same size as window's content view label.font = NSFont.systemFont(ofSize: 40) // bigger text // add the label to the window window.contentView?.addSubview(label) // var to track current score var score = 0 // create a scheduled timer to fire every 1s, calling the block given afterwards Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { // this is the code that the timer runs every second (_:Timer)-&gt;Void in // the Timer object is passed in, but we ignore it score += 1 ; // increment the score label.integerValue = score // set label's text to be the current store } 
I played around with both - Vapor and Kitura, and liked vapor more. However, it all depends on your needs. I personally like that deploying to vapor cloud is easy and I have never had any problems. 
Better go lecture your friends or children.
When you call the sleep method it puts your app goes to sleep which means it wont respond during that time, which is why we don't use it. In order to perform repetitive task we use Timer. You can also use Grand central dispatch for this, but I would suggest you use Timer for your job. See /u/nielsbot's comment on how to implement Timer. 
[CocoaControls](https://www.cocoacontrols.com/search?q=Popover) could be where you need to check. The link I sent is the search results for the keyword *popover*. 
You should also consider the community they’re attracting and building around them. The more traction a framework gets, the more packages will be built by third parties, the more help you’ll be able to get from the community etc.
In the end it's one of these things that you can understand where it comes from in terms of people working on UIs, but I'd rather wish they'd have thought of a more elegant way to solve the same problem instead of now having mutable booleans. It also means that people will write ``` myView.myCheckbox.toggle() ``` instead of ``` myView.toggleCheckbox() ``` which IMHO is questionable design anyway (law of demeter etc.)
How do you want to activate the tooltip? Long press? Toggle or checkbox? Some other way?
As cliche as it sounds, write an open source project. Try to make it using generics, high order functions, protocol-oriented, etc. I recently started working on a project (although via work and not open sourced) where I had to build a UIView subclass that represented a k-ary tree and created a tree data structure using genetics and did a lot of swift that I never even really messed with. There are some pretty good functional programming concepts in Swift if you dig deep enough!
A simple button tap would suffice, with the tooltip arrow pointing towards the tapped button.
I learned a few interesting bits and pieces from [CodeWars](https://www.codewars.com/) (coding kata). I still get the most value from a good book, blog or YouTube tutorial followed by a small project to put it into practice though.
Quizzes and stuff will make it so you stay good at taking quizzes - if they were good for practice we’d probably take a lot more of them. If you want to keep you app skills sharp you need to do things that are part of app dev. If making a whole app is too much - make a (or several!) specialized UI component(s) - design is how it works, not just how it looks! Make something that isn’t part of the stock ui kit: a turn knob, a range selector, a time range picker - or find a ui component on GitHub and without looking at their source make a duplicate (or make it even better!)
Thanks for this, I like this idea quite a lot as i am going to be learning sketch to create screens for a new project i have an idea for so i could start creating the assets i would like for it as i go rather than when i have finished creating all of the screens.
Then on a button tap just use this method: [insertSubview(_:aboveSubview:)](https://developer.apple.com/documentation/uikit/uiview/1622570-insertsubview) To insert a view containing the tooltip above the view (object) that the tooltip relates to.
I'm from germany and work as a fulltime iOS\-developer. Could I make some extra money with this remote jobs? Or to ask in a other way, are there smaller remote jobs which I could accomplish beside my fulltime\-job?
I've used AMPopTip and have been pretty happy with it, it's been updated for Swift 4.
Why don't you teach others? 
Very cool. it seems like the creation process would be a large part of the experience as taking the quizzes. it may also help to be able to serialize and share quizzes somehow through social media. How are you saving the quizzes?
I was under the impression that they worked like a personal cloud device. You write an app the connects to the device via BT or WiFi and you read the info as if it were a cloud device. You're talking about these kinds of things: [https://www.amazon.com/Lightning\-External\-Storage\-Expansion\-Certified/dp/B01ETA52AE](https://www.amazon.com/Lightning-External-Storage-Expansion-Certified/dp/B01ETA52AE) This is a "personal cloud device" : [https://www.amazon.com/Promise\-Apollo\-Personal\-Storage\-Device/dp/B074VLM34L/ref=sr\_1\_3?s=electronics&amp;ie=UTF8&amp;qid=1528988568&amp;sr=1\-3&amp;keywords=personal\+cloud\+device](https://www.amazon.com/Promise-Apollo-Personal-Storage-Device/dp/B074VLM34L/ref=sr_1_3?s=electronics&amp;ie=UTF8&amp;qid=1528988568&amp;sr=1-3&amp;keywords=personal+cloud+device) So you take a chip with WiFi, here's the famous $9 computer with WiFi, you add storage and you have everything you need.: [https://getchip.com/pages/chip](https://getchip.com/pages/chip) Write an app to connect to that device and pop in a microSD card.
We also use AMpopTip and it is definitely recommended
Or contribute to existing OS projects...
Good idea but I don’t really have anyone to teach, and more importantly i am new enough that i wouldn’t be confident that I am not teaching bad habits/practice. 
AudioKit might be of help for you. 
*Asking for the time, getting a blowjob* of help? :D
&gt;Will look into it, thanks.
Thanks for your input this looks pretty cool, too. What I was referring to is something like this: [https://www.sandisk.com/home/mobile\-device\-storage/ixpand](https://www.sandisk.com/home/mobile-device-storage/ixpand) You can simply plug that into the lightning port of the device and it comes with an App and can somehow automatically backup photos &amp; videos for example. So somehow it must be possible to store data directly to that storage.
At first I wasn’t sure what method I should use to save it, I decided to try core data but stumbled upon many difficulties, I later decided to use NSKeyedArchiver which I’m fairly new with, but it made it very simple to store any NSCoding classes which include Strings,Arrays,Structs etc. it encoded the data and wrote it to the archive, and when I want to retrieve the data, it decoded it. While this isn’t as flexible as core data and may be slower it still persists the data Here is a good article on the topic [article ](https://medium.com/yay-its-erica/using-nskeyedarchiver-to-persist-data-976ab2f28006) 
If you want the event to happen exactly every second, you’ll want to create a timer that checks say every 100 milliseconds if a full second has passed yet. If you use the examples here where the timer fires every second, you will not get accurate results as the timer will fire any time after that second you specify. That’s why you want a higher speed timer and keep an eye on delta time.
When you set the `isHidden` property of an arranged subview of a stack view to false, the stack view remove that it from the `arrangedSubviews` array, and thus exclude it from the layout process. However, it will NOT remove it from the `subviews` array, therefore keeping it alive. If you want to release hidden view, call the `removeFromSuper` view method of the subview.
You can buy one and check, but I'm pretty sure they work the way I outlined. I don't think Apple allows data transfer any other way, but I could be wrong. A small BT/WiFi chip is all that it would need.
What does your AppDelegate file look like? Particularly the applicationDidFinishLaunching method.
Current object crashes upon loading the class
Swift is the best language I have ever used, but it's not the simplest. I would recommend learning to program with Python and then Swift after that.
I'll check that out! Would you say I could create a quality app with python itself? I'm a visionary more than anything, coding will probably be challenging to me but I really want to create apps and profit of my ideas. I have 2 friends willing to invest in a specific app idea, if I'm in over my heard learning this I'll probably reach out to programmers to join our little team. 
Avoid force-unwrapping and implicitly-unwrapped `Optional` values whenever you can. They have their uses but they can create a ton of bugs unless you use them very carefully. That often takes knowledge and experience. Some background: Suppose you have some value, say you're converting strings to integers. All is good if you convert "two" to 2 or "zero" to 0 but what happens when you convert "Bob" to an integer? It doesn't make sense to give a bad conversion a value because how will you know if it's a bad conversion or an actual value? You could use some special value but that gets messy. Instead you have extra data that indicates if you have a good value or no value. Swift wraps that up into an `Optional`. You can have an `Optional` of any other type, for example an `Optional&lt;Int&gt;` is an `Optional` that holds an integer. You can "unwrap" an `Optional` to get the actual value, checking to see if it's good or bad. A bad `Optional` is `nil, a good one has an actual value. You can also use an `Optional` without first checking it, that's what force-unwrapping or implicitly-unwrapping does. This can be very bad since there might not be an actual value inside! It will cause a crash or other undefined behavior. Generally, Swift uses a question mark for safely unwrapping and an exclamation point for force-unwrapping. If you see a lot of exclamation points then that's a warning that unsafe things may be happening. As I said, there are ways that force unwrapping can be pretty safe but it generally takes experience to make sure that's happening. There's one other use for the exclamation point and that's the "not" operator, it turns a `true` value into a `false` one or a `false` value into a true one. So not all exclamation points indicate danger.
Python is a great language with many uses but it really can't be used to create apps for iOS. You'll want to learn Swift for those.
You can use Python to learn basic programming and, later, Swift to write apps.
This doesn't make too much sense to me now, but hopefully I can comment back in a few weeks or so with a total understanding. I started a doc with a list of tips though and this is the first one- thanks!
In 'loadOven()', you need to make sure that 'data' isn't null. 'init()' allows you to pass 'nil' as 'data', so you need to check that before unwrapping (using '!'). How are you calling this? Any error messages?
I'll give you an example, feel free to ask questions. struct SemesterGrades { var firstTest: Int? var secondTest: Int? var thirdTest: Int? } This is a `struct`, a structure, it holds values. I've named it `SemesterGrades`. I know there will be 3 tests so I've added them to the structure but they don't have any actual value yet because the semester just started. At the end of the semester they will each have an integer value indicating the test grade. Because they can be empty I've made them `Optional` integers, `Int?`. The `Int` means they hold integers and the question mark means they may be empty. By the way, `var` stands for variable, something that can be changed. If it was `let` then it would be a constant, something that can't be changed. `var firstTest: Int?` means "a variable named firstTest that holds an optional integer". If I wanted to check to see if the first test has been completed I'd do something like: if firstTest != nil { print("First test was completed") } This checks to see if the variable `firstTest` is not equal to `nil`, a value that represents empty. So "if firstTest is not empty then do something". You put what you want to do inside the curly brackets. Now this really isn't that useful. Most times I'll want to get the value inside the `Optional` container if it has a value. I can use "conditional unwrapping" to do this: if let firstTestValue = firstTest { print(firstTestValue) } This checks `firstTest` to see if it's empty, if it's not empty then it sets `firstTestValue` to the contents of `firstTest`. Then it does whatever you put inside the curly brackets. I'm printing out the unwrapped value there. If `firstTest` was empty then nothing will happen, it will check to see it it's empty and then move on if it is. We could just ignore all of this and force-unwrap the `Optional`. That's fast and easy but it can cause crashes. It looks like this: print(firstTest!) If `firstTest` holds a value then that value is pulled out and printed. If it doesn't hold a value then the program crashes. Not good! Sometimes you know for absolutely certain that an `Optional` is holding a value and that's why we even have force-unwrapping but it needs to be used very very carefully to avoid crashes.
Hey you've got a knack for explaining things
This code is crashing when calling try! let realm = Realm() seems to be fixed after I deleted the database and started over was a weird bug and I changed the init to be non optional and the default class to be initialized
What type of an app do you want to create?
&gt; ult class to be initialized Seems to work fine now 
it just returns true
Actually you can just set the `tolerance` timer of the property for that.
Most of the Jobs listed here are full time Jobs. But if it's part time, there's usually a notice in the ticket description that the Job is part time.
Thanks! I've done a fair bit of professional tutoring in a bunch of science and math topics so that helps.
Add some log calls so you can see what methods get called. If you can't read the logs via Xcode, log to a network server. We've used [NSLogger](https://github.com/fpillet/NSLogger) for this locally or 3rd party log servers when we need to send builds to end-users. 
Sweet. That’s a nice tool. Thank you 
my goal is to make an app for finding travel buddies. not like a carpool app or anything, this is for international go-getters. since so many millenials are taking their time having fun before starting careers, and don't have a lot of money, i want the app to be like a tinder for travel groups. the mark-up on a lot of other travel related expenses for singles is actually quite significant, so the app would serve to get everyone involved better deals on hotel rooms, tours, excursions, or even roommates for an airbnb. i know the quality of the app design will be a major factor into whether this would take-off, so down the road i'd get someone more experienced on board, but i also know prototypes are necessary and i have to start putting this into motion. if it's a gritty, shitty designed app, people won't feel safe on it. 
No semicolons hey
Learn functional programming and protocol oriented programming
what lmao
While the point about the strong reference from the `subviews` array is correct, removing the subview from the superview might not be the best way to get OP's intended behavior. Another option is to create multiple static prototype cells with their own identifiers, instead of just one that hides/shows certain subviews.
If it's crashing right away and you don't have a paid developer account, the app might just be expiring every week. 
i will try that out. 
Are you sure you're actually reusing cells and not creating new ones on scroll? You can use Instruments to check the number of cells in your app and make sure that number isn't increasing. 
I was not thinking about how to solve his problem but only the reason of the leak. Now that I think about it, I agree with you :)
&gt; Best way to keep skills fresh without a full project? If you don't do "full project" you likely won't keep the "full project" skill fresh. If you don't do "full project" but rather subsets you will keep those subsets fresh. But not the "whole project" skill.
And what is your question? (The string of the textView is a read-write property. You can get the old value, append a suffix, and set it again.) 
So do I just receive the old value, /n, then add a new line?
Long answer: try it! Short answer: YES There's also a call to scroll the UITextView, since it inherits from UIScrollView.
In that case, **don’t bother writing a single line of code.** Go buy Sketch and start making interactive prototypes of your idea and showing them to people. It doesn’t have to be pretty, but your time is better spent thinking through the idea itself. 
Really? Yeah I don’t have a paid account. Why would it do that?
i'm still interested in coding, but you're right it might be better to put my effort towards that first. 
You can set Xcode to wait for your app to launch before attaching to it.
I agree with the person that said Swift is not the simplest. However, I would say that you can use Swift in a way that doesn't go too deep into the complex bits of the language. In fact, I'm pretty sure that's part of why Apple chose to make it the future language for their products. I'd suggest watching this video from this year's WWDC conference. It's aimed at folks who are looking to build their first app (which it sounds like you are?): https://developer.apple.com/videos/play/wwdc2018/203/ The best resource I've found for learning basics of iOS development (that includes Swift) is https://www.raywenderlich.com/ As for your questions: Why do I like Swift? I love the compile time guarantees of the type system. In particular, I love generic types because they allow me to write flexible, yet well structured programs. What do I create? With Swift - iOS apps. Sometimes I create quick programs to do automate some work, or do something silly. I usually use Python for those. I'm hoping to start making embedded systems soon too. That'll be with C.
Are you using the default storyboard setup? If the main interface name doesn’t match your project file the app will crash on launch.
Would that cause a memory leak?
Please don't, never store data in a singleton. This might look a good and easy solution but it never is. Using a singleton can have a negative effect on your shared state (more info [here](https://www.swiftbysundell.com/posts/avoiding-singletons-in-swift)). If you want to store data in a shared object, try using dependency injection. This allows you to easily test your code. Don't get me wrong, a singleton can be usefull but they should be stateless (APIManager that will perform a given api request).
It works most of the time. It only crashes if I haven’t launched the app after a few days
How do do that? Is there a setting?
That’s not an app problem. Sounds like you run your app on your phone without paid Apple developer program membership. In that case provisioning profile for your apps is valid for only few days after building them and installing on device. That’s why, after few days, you need to build it again to make it work
That’s to prevent random people from distributing apps. See https://apple.stackexchange.com/questions/310050/is-there-a-way-to-code-sign-ad-hoc-ios-apps-for-longer-than-7-days-in-xcode
This course is where I started. Once I was done with this I moved on to Ray’s tutorials. Both are very good!
No body is out there to help me improve my code ?
And completely wrong from the start. Swift does not use a garbage collector at all, it uses Automated Reference Counting (ARC). A garbage collector is a separate process that runs and periodically sweeps through memory, detecting unreferenced memory and "collecting" it, making it available for reuse. Reference counting is NOT a separate process, it keeps a count of every time the memory is referenced (retained) or un-referenced (released) and when that count drops to 0 it frees the memory. Classifying ARC as garbage collection is absolutely misstating the type of memory management and gives the completely wrong impression of the entire process.
But that’s the point of stackviews. Setting it to hidden is meant to keep it so it can come back later
Because the calculator app doesn’t crash every time you use it. 
- Order of operations can be quite different between what is expected in a calculator and in a programming language. - The REPL environment is not necessarily the most friendly to simple calculation. - You would have to significantly censor what you could do in the environment so that you don’t expose dangerous functionality that could be abused to compromise the entire operating system. - Requiring someone to have knowledge of programming in order to use the calculator is severe overkill. There are many more reasons this idea isn’t the best. Now, should the calculator app have some sort of limited programming environment in order to allow more complicated computations? Perhaps, but it would have to be carefully designed and purposefully integrated into the app. Just exposing the Swift REPL environment would be severe overkill and bad in many ways. 
To be fair the same could be said of Playgrounds. There’s a major bug with automatic run but if you avoid that by turning it off and running manually then Playgrounds are decently stable. 
When was the last time you used a calculator or calculator app? I find them horrible from a usability perspective. 
Ah I see. Damn. Apple knows how to get them $$$
Because literally everyone knows how to use a calculator. You're not going to get the same results giving people a playground
I can't tell if this is a joke or not. Your grandma wants to calculate the tip at a restaurant and you throw her into a Swift playground? Seriously?
She can use the calculator in spotlight for that. 
Well since it’s the first beta of Xcode 10, I’m not surprised. Have you reported it to Apple?
Yes, I hope it gets fixed. I seem to use #error quite frequently and this is a sore point in 10. Using a snippet for it now ..
First question - UITextFieldDelegate is what you are looking for. You will need to run checking on the text that is being inserted using shouldReplaceCharactersInRange. You could also change the textfield keyboard input type by clicking on it in InterfaceBuilder and in the properties menu there is a Keyboard Type option. The Keypad keyboard doesn't work in simulator. Second question - [This](https://learnappmaking.com/pass-data-between-view-controllers-swift-how-to/) article covers it pretty well on how to pass data between view controller. 
I use them often enough. You may find them that way but many people are familiar with their current UI and they work decently. To suggest a change this wide-reaching will take much more planning, thought, discussion, and testing than the few simple questions you've posed here.
You are right. Reference counting is distinct from garbage collection. In any event I refuse to visit blogs posted this way so I really don't care what he says. It just feels like a half-assed attempt to generate visits at the site. 
I knew who posted this before I even checked lmao
try `Debug` &gt; `Attach to Process by PID or Name...`
Darn. Thank you. 
As far as whether ARC is a type of garbage collection, I think it *is* but it's not useful to refer to it that way. The pedantic answer is yes, since it is automated memory management and object reclamation, it is a type of garbage collection, but it is also very important not to confuse it with the types of tracing garbage collection used in Java, dotNet, or in Objective-C back in the Jaguar time-frame, so the practical answer is that it is not the type of Garbage Collection everyone expects when using the term. But outside of vocabulary, what's the big difference? In Swift you will have to think more about your model and object graph. The cyclic references (like the dog and owner example) are a design problem. They are real problems for the way Swift manages memory with ARC, because it can't detect those problems at runtime. You have to spot the problems when debugging with Leak detection tools, and then change the your object design to make it explicit who owns what references, and who is just using them if they exist. You will have to think deeper about your object graphs with Swift (in order to decide which references are strong and weak), but that is something you as a developer *can learn* and *can do* directly. With something like tracing Garbage Collection, the problem is still there, but it's not important anymore. The computer has enough information to deallocate items when they aren't in use. But the tradeoff is that when you are using a GC runtime, it's performance is out of your control (even if you *know* what needs to be deallocated). You'll be fighting to optimize performance issues that you may not be able to deal with. For things like audio or video processing, the delay with GC may be unacceptably slow and not at all related to your object graphs. If you are interested in why Swift doesn't adopt a Garbage Collector, this thread on Swift-Evolution two and a half years ago when Swift 3 was being hammered out explains some of the design decisions behind it: ["What About Garbage Collection?", Response 6, Chris_Lattner, Feb 2016, Swift-Evolution](https://forums.swift.org/t/what-about-garbage-collection/1360/6 )
You mentioned the word 'joke'. Here is one about Chuck Norris: &gt;Some people like to eat frogs' legs. Chuck Norris likes to eat lizard legs. Hence, snakes.
Bad bot
I'm working on Obsidian, a Native iOS client for Questrade(a big Canadian investment company). I making it completely in swift. Should be released soonish. Compared to their current app I think mine will be a big improvement for simple things. You can take a look at Obsidian here [https://obsidian.elislade.com](https://obsidian.elislade.com)
You don't even give us the errors that it is throwing.
&gt; You don't even give us the errors that it is throwing. There are no errors related to what I'm trying to do. 
Control-drag again but make it an outlet instead of an action. Then you can reference it in your vc. 
No such luck. When I do that, it creates: @IBOutlet var LoginButtonTapped: UIButton! And then when I do: LoginButtonTapped.enabled = NO it errors out with "Expected Declaration." 
No such luck. When I do that, it creates: @IBOutlet var LoginButtonTapped: UIButton! And then when I do: LoginButtonTapped.enabled = NO it errors out with "Expected Declaration." (Same thing with "LoginButtonTapped.isEnabled")
LoginButtonTapped.isEnabled = false
&gt; LoginButtonTapped.isEnabled = false Same problem. "Expected Declaration." 
Make sure you've placed your definitions correctly in the class. This should help: class ViewController: UIViewController { @IBOutlet weak var loginButton: UIButton! override func viewDidLoad() { super.viewDidLoad() } @IBAction func loginButtonTapped(_ sender: UIButton) { loginButton.isEnabled = false } } Also make sure your connections for the button are correct (in the Connections inspector).
Thanks. Ok that looks like some progress. At least the thing doesn't error anymore and the build succeeds. But now there's a different problem. 1. The button is still enabled. (It's tappable and changes highlight when pressed.) 2. Pressing the button crashes the app with: Thread 1: Fatal error: Unexpectedly found nil while unwrapping an Optional value
I think you need to post the code to your ViewController.
 import UIKit class LoginViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view. } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } @IBOutlet weak var loginUsername: UITextField! @IBOutlet var loginPassword: UITextField! @IBOutlet var LoginButtonTapped: UIButton! @IBAction func LoginButtonTapped(_ sender: UIButton) { LoginButtonTapped.isEnabled = false } 
import UIKit class LoginViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view. } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. } @IBOutlet weak var loginUsername: UITextField! @IBOutlet var loginPassword: UITextField! @IBOutlet var LoginButtonTapped: UIButton! @IBAction func LoginButtonTapped(_ sender: UIButton) { LoginButtonTapped.isEnabled = false }
If you show the Utilities pane (View-&gt;Utilities-&gt;Show Utilities), while viewing your storyboard and having the login button selected, you should be able to see something like this: https://imgur.com/a/y6cax7C. If not, there's where to look.
Ok so I had Utilities already shown, and I went to the area you mentioned. I do have the "Touch Up Inside" connection defined, but there's nothing defined in "Referencing Outlets." 
OK! So I did a little guesswork and created a link from the referenced outlet to the view, and it ALMOST works. The problem is that the button is enabled until you click it, and then it goes disabled. That's not quite the behavior I'm looking for. 
Did you not ctrl-drag from the login button and create an outlet? Try that, and you should be all set. 
I did. Figured that part out. See here: https://www.reddit.com/r/swift/comments/8re56i/working_with_buttons_swift_4_xcode_9/e0qs6h5/
Try moving the `loginButtonTapped.isEnabled = false` to your viewDidLoad method.
Not to nitpick but calling arc garbage collection is actually somewhat accurate. People on the rust team call the borrow checker a form of gc as well.
Well HOT DAMN. Thank you! That's exactly the fix I was looking for. Have gold, on me. Would you mind kindly explaining how the code would differentiate between several input elements on a single view? They're all referenced exactly the same (for example, the username and password fields are all referenced as "UITextField" elements and I don't understand how the code knows WHICH "UITextField" to associate with the variable. Can you also explain why the isEnabled attribute wasn['t working when placed outside a function? Thanks again! 
Thanks for the gold, happy to help. As for your questions: You reference different elements through the variables (usernameTextField, passwordTextField for example) you create, the UITextField is just the type of the element. As for why the code didn’t work outside the function let’s just say that code needs to be in functions in order to be executed (this is not completely true, but for the most part it is). Not sure what language(s) you have prior coding experience in, but I’m sure you can find similarities there. If you want to learn more about Swift and iOS development I can highly recommend the following two books from Apple available for free in the iBooks Store: Intro to App Development with Swift App Development with Swift Good luck with your app!
&gt; You reference different elements through the variables (usernameTextField, passwordTextField for example) you create, the UITextField is just the type of the element. I don't think I'm being clear about what I;m asking. So I have two text fields, and when I control-drag them into the code it generates these lines: @IBOutlet weak var loginUsername: UITextField! @IBOutlet var loginPassword: UITextField! What I'm trying to understand is, how does the code know which UITextField gets assigned to the "loginUsername" variable, and which UITextField gets assigned to "loginPassword"? 
That’s done through the referencing outlets that’s created when you ctrl-drag. If you look in the Connections Inspector you will see all of your outlets there. You can also hover over the gray circle in the left gutter of the source code window (where the line numbers are) when using the Assistant Editor and having both your storyboard and the code for the VC visible. Try it out and you’ll see. 
Is creating two separate `Drivers` by filtering for errors and filtering for my desired model the best or only way to do this?
&gt; That’s done through the referencing outlets that’s created when you ctrl-drag. If you look in the Connections Inspector you will see all of your outlets there. You can also hover over the gray circle in the left gutter of the source code window (where the line numbers are) when using the Assistant Editor and having both your storyboard and the code for the VC visible. Try it out and you’ll see. Ahh haaa. THAT makes things a little more clear. I'm so not used to things being "hidden" away like that. I expect to see defined variables sitting in the code, but I think that makes sense. Thanks. So I have another question if you have some time. Since I have the login button disabled and the goal is to only make that enabled when text is entered into the fields, I'm having trouble figuring out what the next steps are. I found [this](https://stackoverflow.com/questions/30225833/make-a-uibutton-inactive-if-no-text-is-entered-in-a-textfield-in-swift) which seems simple enough, but once again we run into that damn apparent syntax problem which makes that not work anymore. - I've changed the class declaration to "class LoginViewController: UIViewController, UITextFieldDelegate" - I've set both loginUsername.delegate and loginPassword.delegate to "self" inside of the viewDidLoad function When I enter the line: if !loginUsername.text.isEmpty { } XCode pukes and says: - Expected expression, var, or let in 'if' condition - Value of optional type 'String?' not unwrapped; did you mean to use '!' or '?'?
Thanks for the info, i'll look into it! 
flatMapLatest?
That's like saying if you throw out a candy wrapper when you're done eating it then you are collecting garbage. Well, yeah but "collecting" implies multiple items not a single one. The larger category is memory management. ARC is a form of memory management and so is garbage collection. Garbage collection involves an active collector going around and sweeping up references to dead memory that's sitting around. ARC is using an accounting system to detect dead memory as it becomes unused. They are very different in both implementation and how they perform their purpose. As I said, there's been a trend in the last decade or so to call all memory management as garbage collection but I feel it's a misnomer that encourages confusion.
For game development I’d highly recommend Unity
Your biggest obstacle will be UI development: I don’t really know how you’d get an equivalent to Interface Builder on Linux. I’m not sure how you would get code signing either. You can get familiar with Swift by installing the compiler in WSL, though. 
So would Mac In The Cloud or a VM be my best bet?
SpriteKit is excellent too, what do you prefer about Unity? 
The biggest thing is you can export for both iOS and Android a huge market you miss for games. I also find all physic related items much easier to make. Another thing is current Unity tutorials seem to much more extensive than SpriteKit. Overall Unity is a more powerful/efficient game engine. For anything besides a game I would recommend Swift/XCode though. 
Good luck trying to get OSX running on a VM. It is possible but I had difficulties enabling virtualisation in my BIOS. I eventually went with Macincloud. Approximately $90 AUD gets me 5 hours per day of Mac use for 3 months. It works well enough but you can’t just plug your iPhone in to your computer and have the Mac OS recognise it. It is also a bit laggy with our reasonably fast (for Australian standards) NBN connection. Although I have been happy enough with this service it would be much better programming on a real Mac. 
Yeah I figured it was the cross platform support. I think it just depends on your motivations for making a game. Fair points :).
I'm not sure what cocoa bindings does, but from my expeirence this type of problem in a tableview is a dequeue issue. You have to make sure you are resetting the values in your tableview cells every time they get brought onto the screen via the `cellForRow` dataSource function. Now, you also need to keep track as to what bookMark was favorited. This would typically live in some array of models, which i would assume would be `[bookmark]` for you. So now that that you updated the specific `bookMark`'s `isFavorite` property in your array of bookMarks. You need to query that array in `cellForRow`, grab the bookmark, typically using the indexPath.row, and set the UI element on the cell that represents favorited. Remember if the indexPath.row is not favorited you need to set it to notFavorite to disable the star.
Um, this is a Swift programming sub. Not a Cocoa one. You might want to ask somewhere else so you have the best chance of getting answered.
Some notes you might find useful: 1. It's free. 2. You need to know Swift already. 3. It uses the real Core Graphics API, not a simplified version. 4. The Subscribe button only works on iPads with Swift Playgrounds installed. 5. I might make some more if enough people benefit from this one.
I'll take a look at it in a bit. Real question, how do you find time to do all of this? 
I get asked that a lot, and I try to be as clear as possible: https://twitter.com/twostraws/status/1005827881103028224
http://online.swiftplayground.run/
Sooo.... any links for us who *don't* have an "ipad with playgrounds installed"?
Sorry to inform you, that’s how `prepend(_:)` works (and has since iOS 9, as it’s equivalent to `Play Next`)
Er… no. I mean, this new thing is literally designed for Swift Playgrounds. I have different material if you want to learn somehow else, such as [Swift in Sixty Seconds](https://www.hackingwithswift.com/sixty) or my [online book](https://www.hackingwithswift.com/read).
So "swift playgrounds" in xcode and "swift playgrounds" on ipad are completely different and incompatible? Wonderful. Apple's famously unambiguous naming strikes again.
Great article. Sadly few people concern themselves with memory management in swift (or other languages except C++ and C).
[https://www.vaporforums.io/viewThread/49](https://www.vaporforums.io/viewThread/49) :) 
[https://www.vaporforums.io/viewThread/49](https://www.vaporforums.io/viewThread/49) :)
I know this question's been answered, just to also say, you can reference the button using 'sender' in the about method. sender.whatEverMethod()... as you can see sender is your UIButton type. 
I wouldn’t describe SpriteKit as excellent. There are many components, which do not work, are poorly documented or are very limited. SKShapeNode, the lighting/shadow system, navigation graphs, subclassing of SkEmitterNode, SKEffectNode, GKGoal.followPath(),... I have no comparison to Unity though. 
Excited to check it out! Just recently bought Hacking with Swift and Pro Swift. I'm about a quarter of the way through the first one and I'm really enjoying your approach so far! Thank you for all you do!
If I use that through Docker, is there a way to do interface building?
I need to pick this up. I stupidly missed your recent sale and given that I'm not doing this professionally anymore, I wait for these sales! Either way, you have some of the best and clearest books on Swift out there! Thanks for continuing to write because we need folks like you doing this (if you are old enough to remember the old Inside Macintosh series...you probably realize how bad documentation use to be!!!)
Very cool! What was your experience building a swift playground book?
They are the same, any changes you make on one platform will be reflected on the other, if you have iCloud Drive enabled.
who warned you against it, and why? i'd be interested to know the reasons. i just built a hackintosh for less than 700 euros, and the first thing i did was to install xcode. dont worry, hackintoshes are great. you just gotta have the right hardware though.
What’s wrong with sharing a blog post on Reddit?
How can I tell if my hardware is okay? I've got an i3, 8gb ram, gtx 950 with 6gb ram, and 1tb HDD. Think i could hackintosh that? I was just told they aren't reliable and need constant updating.
Stack overflow can be a great resource, you just have to phrase your question in a way people on the site like it. It's a largely negative site from a pure sentiment standpoint. Going to SO and filtering for swift, you will see that many questions have 0 votes, and if they do have votes its pretty much always multiple down votes. The negativety is ridiculous IMO, the community isn't friendly to less knowledgable programmers, and in fact is down right adversarial some times. Makes me not want to post questions as much.
Sorry, which components straight up don’t work? I didn’t have that experience at all. When did you last use it? 
I am currently developing a game with SpriteKit. I hoped for a fix in iOS 12, I have not confirmed it for all my issues, but since there was no talk for SpriteKit or SceneKit, I am not very hopeful. SKShapeNode seems to work fine, when I first tested it, but as my game got more complex and I used more SpriteNodes, bugs appeared. For example a simple red square, but when a node moved next to it, a shape moved through the fill color. Very weird. I also read, that a simple square uses something like 2000 vertices. I think they are fine if you don‘t fill them, paths and borders seems to work fine. For squares use SpriteNode with fillColor. SKLight when I added more than 6 lights to my scene, the other lights turned off or flickered.
yeah i think you should be good, head over to [https://www.tonymacx86.com/](tonymacx86) to get started ! well they aren't reliable if you have crappy hardware, and you dont have to update if you dont need/have to. im on 10.13.2, and it works fine, thats not a big problem.
They are not the same at all; this playground book won't work with Xcode's playgrounds.
I'm glad it's all proving so useful :)
If you email me I could set you up with the sale discount – paul@hackingwithswift.com.
I tried it about six months ago, and gave up because it seemed like too much work. However, I went to WWDC last week and spoke to several of the folks behind Swift Playgrounds – they gave out several examples, and inspired me to give it another shot. I should probably write an article about the experience…
Oh I see, what does Apple mean when they say that you can “enable Xcode on your Mac to edit and extend the same documents that are on your iPad” then? They said this on their website and in the Swift Playgrounds app description. I haven’t used Swift Playgrounds ever so I don’t have any practical experience :/
Okay, I'll check it out. Thanks.
You'll have to ask Apple! For historical reasons, the two playgrounds editors support quite different features. Helpfully, Apple's docs show you exactly which features work on which platform, so you can pick and choose as needed.
It’s not how it’s supposed to work
It likely is. Apple has had 3 years to correct this peculiar behaviour but haven’t. I really think that’s how they want it to work. 
Well the Apple engineer I spoke with and used my code level support ticket on says it’s not the intended behavior I hope he is correct because it’s a bizarre way to want it to work
Weird. Well at least someone there has confirmed it’s not intended, so maybe it’ll be fixed before iOS 12 ships. 
Try the Vm solution. I have an i5 with 8gb ram of which I allocate 4 gb to Mac Vm, it runs okay. You should be able do your practice projects on it. Also setting up VM is easier than setting up dual boot hackintosh. Good luck on learning iOS. 
Thanks. Any links you could send me for getting started?
Yeah I thought [the talk this year at WWDC](https://developer.apple.com/wwdc18/402) really showed how much it’s grown. I really want to get into creating one now.
As long as it’s not explicit memory management, and ARC is not, the term “garbage collection” is correct. Also, it’s not central to garbage collection that it take place on a background thread or use a specific algorithm (like mark and sweep). 
If you're doing Swift, then you would do LoginButton (if you're referencing the button, don't name it an action), LoginButton.isEnabled = false.
Thanks Paul! I always wanted to learn more about CoreGraphics and SwiftPlaygrounds seem like a great medium
It’s an accepted use of the term at this point in time, however it’s a usage that has crept up over the years. Long ago in a galaxy far, far away people wouldn’t use the term “garbage collection” for reference counting, automatic or not. It was reserved for a specific type of memory management where a separate bit of code would run occasionally to sweep through to find referenced memory and reclaim it. Whether the method used was mark and sweep or something else. Reference counting would traditionally be checked at regular points during code execution, say when memory was dereferenced or at the end of a scope. It would check locally and not sweep through a large amount of unrelated memory. It can be combined with other memory management techniques, of course, but in its pure form it’s quite different than traditional “garbage collection” I would argue that the older usage is more apt but I’m obviously fighting an uphill battle with how many people have accepted the new meaning. 
^The linked tweet was tweeted by [@LouisDhauwe](https://twitter.com/LouisDhauwe) on Jun 16, 2018 19:39:06 UTC (295 Retweets | 817 Favorites) ------------------------------------------------- I created a proof of concept Xcode for iPad! Code is compiled on a Mac, which acts as a remote server. Generates an .ipa that is uploaded by the Mac, the iPad then installs it. 🚀 [Attached video](https://video.twimg.com/ext_tw_video/1008071382205390848/pu/vid/960x720/4naeFNi0e_pfI4X3.mp4?tag=3) ------------------------------------------------- ^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •
It is a crude way to generate traffic to ones personal site. What makes if offensive is that all we really got was a link with nothing presented by the original poster to make one thoughtfully consider visiting his site.
Cool work, it's a great proof-of-concept and a fantastic idea. I'd love if Apple went in a similar direction or at least didn't get in your way as you implement it. I looked at some of your work on GitHub too, very interesting. The shims between AppKit and UIKit are a great example of the type of work necessary to reduce the differences between the frameworks and unite them.
Apple is working on it, they already announced iirc that will be released in January 2019. * https://m.imore.com/marzipan
I seldom find that self-proclaimed "amazing" things are amazing, but, jeesh, this really, really is. Having been the owner of multiple iPads (and having lost interest) I'm in that "iPad is for consumption" camp, but this would kind of make me reconsider that position. Really cool. Thanks for sharing. 
You could lower case the input and check to see if it contains the word Hello? func responseTo(question: String) -&gt; String { let questionLowercased = question.lowercased() if question.contains("hello") { return "Why, hello there" } else { return "That really depends" } } responseTo(question: "Hello there!")
Super cool. While this may “work”, I’d be cautious of how productive you could actually be, typing on a glass screen seems slow and clunky. Also, there are a lot more tools associated with development than just Xcode (e.g. Terminal apps, Git Apps, graphic design, dragging files from Finder into Xcode). I just so see how this could ever hold a candle to the regular desktop experience. That’s not to take away from this demo, it’s amazing they got this working, but I only see simple Apps ever being practical within this environment.
I would love this. I have tried removing to my computer to do work on the go from my iPad Pro but I have trouble finding a connection that doesn’t lag. I have also tried using Dringend which does a similar setup but don’t care much for it. I would love if Apple came out with this and baked in cocoapod support.
Pretty much this. I used to code on a tiny Android phone. I thought it was great...until I went elsewhere. 
https://developer.apple.com/documentation/multipeerconnectivity
I was talking about the IDE on an iOS device, not about unifying the frameworks. But, yes, that's also going to be very interesting. 
\&gt; typing on a glass screen seems slow and clunky Most people who use iPads to be productive already have iPad physical keyboards I'd say.
Apple's "no private APIs" rule is a common source of confusion for new developers. The rule has nothing to do with accessing remote APIs, like Hacker News public or private APIs. When Apple talks about private APIs, they're talking about private iOS system APIs that are intended for Apple's software only. For example, there is a system API that will tell you what apps are installed on a device. The API is private, so only Apple apps (like the Settings app) are allowed to use the API, while third party apps from the App Store are not allowed to.
The absolute right way to do it is like this: import Foundation func responseTo(question: String) -&gt; String { let hello = "hello" let range = CFRange(location: 0, length: hello.count) let comparison = CFStringCompareWithOptions(question as CFString, hello as CFString, range, .compareCaseInsensitive) guard comparison == .compareEqualTo else { return "That really depends" } return "Why, hello there" } This uses `CFString`, which `String` is toll-free bridged into. `CFString` is a core implementation which is much more powerful than `String` and so you can do more with it, such as true Unicode-safe case-insensitive string comparisons. Here I cast the `String` objects into `CFString` and then compare them with `.compareCaseInsensitive`. I only compare the piece of the strings from the start to the length of the "hello" string, doing more than that is a waste. If the two strings compare equal then the result matches `.compareEqualTo`.
` You use the NSJSONSerialization class to convert JSON to Foundation objects and convert Foundation objects to JSON. A Foundation object that may be converted to JSON must have the following properties: The top level object is an NSArray or NSDictionary. All objects are instances of NSString, NSNumber, NSArray, NSDictionary, or NSNull. All dictionary keys are instances of NSString. Numbers are not NaN or infinity. Other rules may apply. Calling isValidJSONObject: or attempting a conversion are the definitive ways to tell if a given object can be converted to JSON data. `
If you put 4 spaces in front of every like of code when posting here then they will be properly formatted. What type of objects are we talking about? Are they [`Codable`](https://developer.apple.com/documentation/swift/codable)?
This has been done before. So I don’t know why it’s so revolutionary. Codify. This was done 7 YEARS ago
It's intended either for peer-to-peer Bluetooth, WiFi, or all devices connected to the same router=wifi hot spot. If you want to connect over the whole world, you'd do better with libjingle iOS since you have to create an endpoint, advertise the endpoint, browse for existing endpoint, connect to an endpoint, and have a protocol for bi-directional data transfer. Multipeer Connectivity uses Bonjour for the advertising and browsing.
[Swift Package Manager Project](https://github.com/apple/swift-package-manager) &gt; The Swift Package Manager is a tool for managing distribution of source code, aimed at making it easy to share your code and reuse others’ code. The tool directly addresses the challenges of compiling and linking Swift packages, managing dependencies, versioning, and supporting flexible distribution and collaboration models.
I've been aware of it. My questions was: in ruby I can install a package via "gem install package1". How can I install one in Swift via its Package Manager?
When we talk about Swift and package managers we're talking about installing packages of code (libraries, frameworks, etc.) into our projects so that we can use that code to build programs. With RubyGems you're talking about installing both code and complete programs. So right now, in Swift, you install packages in a per-project basis and not in a per-system basis like in RubyGems. You also only install code packages, not application packages. Now, if you want something more like RubyGems et al. you are looking for something like [APT](https://en.wikipedia.org/wiki/APT_(Debian\)). There really isn't any major application package distribution program out there that's specific to Swift.
thx
You just have to search, they aren't in a central location. There's a few sites that collect and list them. Here's one: [Swiftpack](https://swiftpack.co) There's also a ton on [GitHub](https://github.com/topics/swift-package-manager).
where does Swift Package Manager fetch the list of the packages from ?
I use tutorials from raywenderlich.com . There are other sites like "big nerd ranch" and "hacking with swift"'. It would help if you have programming knowledge in some other language.
To be fair, you were talking about both things, unless you edited your post :)
I would kill for that document browser in Swift Playgrounds.
It don’t, you have to manually provide the URL.
Am I missing something here? Why would one want to develop software on an *iPad*?
This looks super awesome. There is a similar app on AppStore already: Dringend - Development Environment for iOS Apps by SquaredTiki https://itunes.apple.com/gb/app/dringend-development-environment-for-ios-apps/id822329054?mt=8 So can't imagine you would have issues releasing. Nice work!
for each package?
Same reason why you want to write an email on your phone or ipad. 
Software development is a fundamentally different task compared to something simple like writing an email. iOS just isn’t built for software development.
Oh dang I think you got further than me then. I just used SpriteKit and my game was just one of those basic space shooters. Shame, how’s the ramp up for Unity, I was worried it’d have a steep learning curve just because it’s a third party cross platform thing (different conventions etc.).
I’m fully aware of this, I could have worded it better :)
This developer has created a terminal app (OpenTerm), a text editor (Textor) which are both open source, and there is a great git app called Working Copy. The iPad Smart Keyboard is pretty capable. I’m not saying this is better than a desktop experience, but I think it would be nice to be able to take an iPad on a trip and still get work done.
Of course, I meant that the "similar direction" thing was referring to the proof-of-concept, not the frameworks. That's why they are different paragraphs.
Yes, for example here's how to load Alamofire, a popular networking framework: [Alamofire: Swift Package Manager](https://github.com/Alamofire/Alamofire#swift-package-manager) &gt; adding Alamofire as a dependency is as easy as adding it to the dependencies value of your Package.swift dependencies: [ .package(url: "https://github.com/Alamofire/Alamofire.git", from: "4.0.0") ]
If you put 4 spaces in front of every line of code when posting here then they will be properly formatted.
Have you tried `self.view.backgroundColor = .white`?
I have and it had no affect. I don't think the view is loading at all. I am not sure why. 
Open up the [view debugger](https://www.raywenderlich.com/98356/view-debugging-in-xcode-6) and see what's there. 
A lot of people seem to like [CocoaPods](https://cocoapods.org) but I think I am favoring [Carthage](https://github.com/Carthage/Carthage) more.
Sure, I’m not disagreeing that you can’t get work done, it would just be very inconvenient. Maybe for some simple String changes or light development. This is awesome what this guy did, it looks great, but from a practical stand point, there is no way this would ever over take development from a computer. I can see myself installing this, trying it, get annoyed at how slow it is to do things, then uninstall.
Not sure why you’re being down voted. You’re right. I want to stress that what this guy did was awesome, but comparing an composing an email to writing applications is quite the stretch. It’s clear people are in love with the idea of it and that’s it. Until they try it they won’t realize how slow and impractical it would be to use.
I can clearly see that a lot of effort went into making that, and the fact that it works is really cool, but I just can’t really see why there would be demand for this. On twitter the author was hyping about the fact they can finally replace their dev environment with an iPad. Why? I just don’t see the point. You will never have an open filesystem + cli utilities available on iOS. Those are essential for any serious software development.
A few things: - you need to activate the constraints returned from `constraints(withVisualFormat:options:metrics:views:)` - a UILabel's size (`intrinsicContentSize`) is based on its content, so with no text they all have a size of `.zero` - The default nil background color properties results in a black background, and the default text colour is also black so even with content it is not visible 
Have you ever written code? It's nothing like writing an email.
Functions marked as `@objc` are still pure Swift. It's a flag to the Swift compiler to compile the function in such a way that Objective-C code can access it. Your timer code can be in Swift, but the underlying framework classes are Objective-C so they need assistance bridging the two.
You just instantiate it using Timer(). Here's some info to help ya https://medium.com/ios-os-x-development/build-an-stopwatch-with-swift-3-0-c7040818a10f The code may be slightly different in swift 4, but they're usually not so different where you can't figure it out using autocomplete
Which one are you trying to avoid: writing Objective-C code, or having any references to Objective-C? `@objc func` does not mean that the method is written in Objective-C, it means that Swift emits Objective-C metadata for this class and method to make it accessible to the Objective-C runtime. This is required to call a method using a selector. Blocks and Swift closures are interchangeable, so the block overload doesn't imply anything specific to Objective-C.
Yes and no. Just use the blocks based version. It doesn’t rely upon the ObjC runtime environment. It’ll work on Linux :3 But you should learn the basics of ObjC because 1. Swift evolved from it and share many of the same foundational concepts: ARC, GCD. 2. Most of Apple’s frameworks are/were written in ObjC and will need to be backwards compatible. 3. Until it has its own runtime engine swift will be heavily relying on it for dynamism 4. Designed to be bridgeable thus many apps are mixed 
Dringend was ok, but is now basically abandoned by the dev so I wouldn’t recommend it at all now. 
Codea apps compile directly to apps and have been written on the go by multiple people. Look at Starsceptre, Cargo Bot. MapMan was written using Pythonista and compiled into an app for the App Store. I’ve written several just using my iPad. The tools are all there, but unfortunately there are people who still think the iPad is just a consumption device, or won’t ever be good for things like software development. Just because it doesn’t work for you, doesn’t mean it won’t work at all or for other people. If there was a full XCode editor for the iPad I’d never turn my Mac on except to compile and build. 
Thank you so much your your help!
Thank you for your clarification. Seeing the objective c reference honestly scares me cause I’ve spent so much time learning swift and come so far I’m afraid to touch objective c and have to start all over at this point. I’d like to do as much as I can only operating in swift just so I have a clearer understanding of my app I am building. From your comment it seems like I might be making a big deal out of nothing. 
Technically you do have a \*somewhat\* open file system, and this author has also made a terminal app as well. A lot of it is based on the Files App and companion API for apps to incorperate the files browser in their app. I know its not the same and won't be for a while, but the foundations are starting to be laid.
Completely agree with this. I think that Dev is working on other projects so unlikely to be back either. This looks promising.
Just curious, with the Terminal app, can you ‘cd’ into a project directory and work with git?
Let’s look this the other way, why wouldn’t you want a tool that can give you an opportunity to tweak your code on your iPad or iPhone? Nobody is forcing you to code a whole app that way but I would really like to for example try a solution for a bug that popped in my mind while Im at a friends house. 
With a great intelligent code generation/auto-completion feature (that had a good UI/UX) it would be even better. I know that's no small feat, I couldn't come up with a great idea, but I would be interested in seeing what a designer could think of.
How are you going to debug and monitor an app at the same time you are using it? How would you do that on an iPad screen or (god forbid) an iPhone? I would be a naive solution at best.
Amazing! Unfortunately, Apple will never approve it. If there is no rule to block that, they will pull one from the hat.
You can cd in the file system, but I don’t think he’s implemented Git yet. I’m sure it’s on his list. 
This is definitely the sort of thing you can use Swift's [Codable](https://developer.apple.com/documentation/swift/codable) protocol for! Write an implementation of Codable for the type of the objects, and you can encode and decode entire arrays of objects the same way you'd encode or decode a single object. When you use the [JSONEncoder](https://developer.apple.com/documentation/foundation/jsonencoder)/[JSONDecoder](https://developer.apple.com/documentation/foundation/jsondecoder) classes, you encode to and decode from JSON Strings.
So if OP posted a link to a blog that wasn’t his own you’d read it and have opinions, but because OP posted his own blog you are offended? 
Swift has a runtime already FYI, it just has a different one than objc 
Not sure: wasn't there a version that used blocks for completion for iOS 11 and above?
What version of Xcode are you using?
I already changed the view background to white and it still wont show. 
9.4
Biggest pro is offline usage. I have a web app that’s great but without a net connection becomes less than great so we had to go the iOS route. 
Here’s the thing, if your app can be a website, Apple might not accept it in the App Store. As such, if you choose to go the native route, make sore to implement at least a basic smartphone feature, like showing something on a map and open its location in Apple Maps. 
did you set some text? i tried and those 2 changes seemed like enough
Interesting, it clearly wouldn't load from the App Store, so you make the code on the iPad, you send it to your Mac, your Mac compiles is and you run it on your iPad. I wouldn't mind seeing the code for that, looks pretty damn cool. Don't know if I would ever program on an iPad, but still pretty damn cool.
Thanks for the post. I felt that it’d be nice if you drilled into a few of your statements with some explanations or justifications. IMO, the accepted answer [here](https://www.quora.com/Why-would-Apple-introduce-new-programming-languages-e-g-Swift-instead-of-embracing-an-existing-one) sums up the ‘Swift: Because why?’ question pretty well. &gt; I understand most seasoned developers’ frustrations with Swift. It is by far not an easy language. Definitely, not the easy-to-learn language that Apple wants you to believe it is. I have a C++ and more recently a .NET background and didn’t find Swift that hard to pick up. It has a lot of features I wish were a native part of the .NET ecosystem like optional monads, non-nullable defaults, tuple-based dictionaries instead of KeyValuePair etc. What typically trips up newcomers to Swift in your experience? (It’s certainly not without quirks, but I haven’t felt the need to run screaming yet). My biggest concern with the future of Swift comes from a comment Paul Hudson made in [this Sean Allen video](https://youtu.be/Zj6EOJ3W1TE) recently where he mentioned there weren’t that many Swift developers inside Apple itself; most were still Objective-C based. Maybe they’re waiting for ABI stability before fully committing to Swift, but if Swift is the future, I’d hope for a big changeover happening now (or soon‘Ish).
Hello, Any 3D object can be a button. you just need to perform a hit test on the sceneView (SCN Hit test, not AR) and get the name of the node that is "touched". 
Hacking with Swift!
Thanks for recommending my site! /u/schrodingers_cat314: you can find it online here: https://www.hackingwithswift.com/read – it's all free, and all updated for Swift 4.1.
Super beginner here. With that out of the way... maybe there’s a way you can set the bottom constraint of the text field against the keyboard when it’s active and then against the top of the screen. That way no matter what device, it’s always centered between the keyboard and the top. 
You haven't set self.view anywhere. If you're creating the UIViewController programmatically you should implement loadView() or set self.view explicitly. 
This was a great read. Memory management is becoming more niche as we are increasingly coddled by Swift, but don't stop writing stuff like this as it's still useful and interesting!
I think I say in the video (thanks for watching, BTW!) that it will all change hugely in the next 12 months. Many, many people at Apple will be trained up on Swift once ABI stability happens – there's going to be a huge pivot.
See https://developer.apple.com/documentation/uikit/uikeyboardwillchangeframenotification and for an example with animation https://stackoverflow.com/questions/26316597/using-only-uikeyboardwillchangeframenotification-notification
Yep, you did indeed say you expected a big shift once ABI stability was achieved 😀 I guess I’ve been underesting how big of a deal ABI stability is for Swift adoption at 'Apple scale'. Thanks for the response (it’s good to get it right from the horse’s mouth).
I have just [posted series](https://learningswift.brightdigit.com/category/healthkit/) on how to integrate HealthKit and read your heart rate. Take a look and let me know if it's helpful.
Apps: Work offline Support push and local notifications Get their own home screen icon Can be faster and more interactive Can use Bluetooth LE Can get location updates in background Can support watchOS and tvOS Can support iCloud Have access to Contacts and Calendar Have access to the camera and mic Easy to charge money for in any country Web sites: Cheaper/easier to develop Can be updated at will with 100% compliance Work on iOS, Android, Windows, Mac, etc 
I don't think it's possible for Apple to have a large share of Swift developers right now, with the company having so much Objective-C code still to maintain and evolve. That would be the Microsoft's way, with their products being the framework and language graveyards.
Yes I tried that and now it works. No idea why background color didn’t work.
What would that look like. Implement the set.view of the view controller ? 
&gt; The ViewModel will flatMap the Single into an Observable No, please don't do that. Single is ObservableConvertibleType so you should just do `.asObservable()` on it to convert it to Observable&lt;E&gt; For error handling, you should just use the `catchError` before you create your driver In catchError block, you get the opportunity to handle the error and then return an Observable. If you failed to handle the error. Just return Observable&lt;E&gt;.never() so you will never get a next event on your driver which messes up your table view.
Move your view setup code into an override of the loadView() method and put a line at the top `self.view = View()`. See https://developer.apple.com/documentation/uikit/uiviewcontroller/1621454-loadview
I’ve been using design + code. As a total newb with no experience, it’s been helpful to give me tools to get what’s in my head on to “paper.” Now instead of “how do I do all the things?” I can ask better questions and know what I’m working towards from a UI perspective. 
I am a hands on learner rather than a book learner so I used YouTube videos and followed along in Xcode to get the hang of the interface builder. There is also a free class on iTunes U from Stanford that goes over some tips on the interface builder in the second class I think. I would watch the first one too in order to get a feel for it. I came from a C++ background too and never learned any object oriented program until I started learning Objective C and Swift.
**Sorry, this page isn't available.** *The link you followed may be broken, or the page may have been removed. Go back to Instagram.*
thank you.
Alright. Thanks. Ill check it out. Also, If I need to add three buttons next to each other. Do I have to create 3 nodes or I can use one node and then depending on which part is tapped, I can run a different function?
I'm going to interpret the broken link as the actual commentary. It's more amusing that way.
cache the pages content and hierarchy while online, use the cache while in offline.
Thanks! I also saw Swift Designing Patterns, which is kinda what I'm looking for.
&gt; the impedance mismatch between the language and the Cocoa/CocoaTouch stack This is the biggest issue with Swift for me. Cocoa was built around the features of Objective-C: dynamic runtime, delegation, and graceful nil values. Swift's optionals feel like a hack added only to work with Cocoa's nil values. I'm not sure they are something that would have been added to the language if Apple hadn't needed that interoperability. I enjoyed Dominik Wagner's post. His criticism was fair. Swift code is rarely elegant; but I think that is largely because it is interfacing with so much Objective-C code. What is idiomatic Swift? What would UIKit look like if it was written from the ground up in the language? I'm hopeful that we [may find out one day](https://daringfireball.net/2018/04/scuttlebutt_regarding_ui_project). But overall, though current Swift disappoints me somewhat, it's not a serious problem. Few languages are seen as "pure". Dominik mentioned Ruby and Lua. So many more programmers though use C++ and Java, which have compromises and complications.
I dig this - thanks!
Also, serves as an understatement on OP's trustworthiness.
I think it's time to stop slamming Ray Wenderlich for good there's some seriously good stuff in here. This subtly and playfully touches a lot of best practices I have been advocating over the year without overcomplicating things. It's also very good thing to *demand* that all mockups or designs you get include states like empty, loading, error and success where applicable. And what to do with the keyboard. Last but not least: guard let `self` = self else { return } _I didn't knew that_
How is Objective-C opinionated? I don’t get that part. It’s super tiny and yet super powerful. If you just have good features that work together you don’t need tons of features (yes, this is a dig at C++). 
&gt; I understand most seasoned developers’ frustrations with Swift. It is by far not an easy language. Definitely, not the easy-to-learn language that Apple wants you to believe it is. I come from a C# background using mostly just Unity3D, I picked up Swift super fast... am I alone or is this article writer simply one of those that struggle with this specific language? 
&gt; Get their own home screen icon Web apps can get this too. I was quite surprised how well the Google Voice web app worked with iOS back when Apple banned the Google Voice app from the App Store temporarily. 
I would be curious to see what percentage of native apps currently in the App Store require internet connection for actual functionality. A lot of people seem to be adopting the model of getting information from a central server. 
Nope if the only thing the post contained was a link I'd be just as pissed off. Think about it such posts waste your time and bandwidth when they don't even offer a summary of what the link explores.
If you've followed [my series of posts on HealthKit](http://learningswift.brightdigit.com/category/healthkit/) here is the next one on the changes introduced by WWDC 2018 such as [HKLiveWorkoutBuilder](https://developer.apple.com/documentation/healthkit/hkliveworkoutbuilder).
&gt; I think it's time to stop slamming Ray Wenderlich for good Wait, was this happening?
I've seen it happening from time to time. Most things are a bit too basic for my taste but I used some of their guides as simple was exactly what I needed. Like the push certificates one with the PHP test script. They changed it though, a pity.
Ray Wenderlich is a god
Hey, thanks for the info. Not sure how that works quite yet. Still so much to learn. 
Don’t do this. This is a bug in swift and it’s not intended to working.
/r/iOSProgramming 
Awesome!
[Basic auth is bad](https://softwareengineering.stackexchange.com/a/291030/22564). I use [OAuthSwiftAlamofire](https://github.com/OAuthSwift/OAuthSwiftAlamofire) myself. It's not easy to get working. The app [Charles proxy](https://www.charlesproxy.com/) (cost money) is great for intercepting network traffic. 
&gt; Basic auth is bad. Yeah but it works. And for an application that has less than 5 users, it's more than sufficient. &gt; I use OAuthSwiftAlamofire myself. It's not easy to get working. Thanks, but I'm looking for as native a solution as possible. 
The backticks for reserved-word identifiers? [it's documented](https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html) here under the "Identifiers" section: \&gt; To use a reserved word as an identifier, put a backtick (\`) before and after it. For example, class is not a valid identifier, but \`class\` is valid. The backticks aren’t considered part of the identifier; \`x\` and x have the same meaning.
The site isn't loading for me, so I can't read it yet but aren't there some things that are better done with Objective-C? I mean, couldn't you use Swift as sort of a front end application language that ties in multiple components together? Some libraries being swift, some being Objective-C?
And if I remember correctly they said they were going to ‘fix’ this soon
Unfortunately, the `Authorization` header has some special behavior that can prevent directly setting it like that from working correctly, per [this documentation](https://developer.apple.com/documentation/foundation/nsmutableurlrequest). There other ways to make sure it's set: * Create your own `URLSession` instance, with your own `URLSessionConfiguration`, and add your `Authorization` header as one of the `httpAdditionalHeaders` on the configuration. You have to do this before initializing the `URLSession` with the configuration, as changes after init have no affect. However, this only works if your credentials never change, and will add the header to every request. * Create a `URLCredential` and add it to `URLSession.shared.configuration.urlCredentialStorage`, but you'll have to look up how to manually create a `URLProtectionSpace` to go along with it, which is annoying. Setting a credential like this means `URLSession` will automatically retry your request when it gets an authorization challenge and return the credential for you. * Implement your own `URLSessionTaskDelegate` for your `URLSession`, and implement the `func urlSession(URLSession, task: URLSessionTask, didReceive: URLAuthenticationChallenge, completionHandler: (URLSession.AuthChallengeDisposition, URLCredential?) -&gt; Void)` method, which gives you a chance to again, create your credential and return it, but without the need to create your own `URLProtectionSpace`. Having your own delegate just for a single method is a pain in the ass though. * Use Alamofire, which implements all of the `URLCredential` logic for you. To get the response status code, you need to keep a reference to your `task` and, when it's complete, access it like this: `(task.response as? HTTPURLResponse).statusCode`. P.S. You can get `Data` from a `String` without an optional: `Data(string.utf8)`. 
I knew it... I knew people would be doing this when they implemented it. Been doing this by hand myself. It’s kind of wrong, but so comfy...
But the user has to know how to manually create them, right? I don't think most users know they can do this. 
I can't believe I've never noticed this property. Thx for sharing
Did you find an answer for this? I read they should be in the teacher guide, but I definitely do not see them.
But c++ is object oriented 
Nope, I don't see them anywhere. 
So annoying..
[removed]
[Sharing data](https://stackoverflow.com/questions/9425706/share-data-between-two-or-more-iphone-applications) between apps is pretty limited for security reasons. Had you considered integrating with [Files](https://www.spaceotechnologies.com/integrate-files-app-support-ios-11/) or external storage providers like Dropbox, OneDrive or iCloud Drive to accomplish something similar?
Years ago I came across a great solution. Put the text field inside of a UiTableView and let the system take care of it automatically. I worked hard on a custom scroll view for a larger screen, then gave up and put all the data entry field inside of a table view so that it would be automatic. I then made switches, pickers, sliders, etc... that fit into the table view cells. Works awesome.
Thank you! I thought about that a bit after I posted, that i probably can't share data directly with the voice memos app. Files is definitely a possibility, much appreciated!
can I use them on Linux?
 guard let this = self else { return } Much cleaner
Ray didn’t create this article though, Keegan Rush did. But I do agree, Ray is elite.
Sure. I think it's new-ish... in the old days you just assumed your timers would fire reasonable closely to when they are scheduled... but now timers are made less accurate to save battery.
Carthage is probably the closest to work on Linux but to install it requires Xcode and I think there’s some other dependency on Xcode too
I thought it might be newish too, but the page you linked to says it was introduced in iOS 7. You can use CADisplayLink for some timer needs too, within reason.
Thanks a bunch for this. Are those other examples publicly available?
In your lessons so far, have you read about arrays and how to iterate through them using “for - in” loops? If so you could put the scores in arrays “[[single,triple,single],[triple,triple,bullseye],[single,single,single]]” Scores could also be represented by enums with values single, triple, bullseye etc. (this might not make the code smaller but would in some way be more clean) BTW. Great to see someone totally new to this actually doing it! Keep it up :-)
That looks to be in lesson 14 where it covers arrays so I haven’t learned that as of yet. To me it looked to repetitive so I thought maybe there was ways to simplify but looks like there is when I get that far along. I utilized everything I’ve learned so far I think. Thanks :)
This was very interesting to me: In fact, I could not find any type that did *not* conform to `AnyObject`: struct SomeStruct { let a: String } enum SomeEnum { case a(withAssociatedValue: Int) } let a = SomeStruct(a: "wat") if a is AnyObject { print("yes, \(type(of: a)) is AnyObject") } let b = SomeEnum.a(withAssociatedValue: 5) if b is AnyObject { print("yes, \(type(of: b)) is AnyObject") } let c: ()-&gt;() = { print("no") } if c is AnyObject { print("yes, \(type(of: c)) is AnyObject") } let d = true if d is AnyObject { print("yes, \(type(of: d)) is AnyObject") } This prints: yes, SomeStruct is AnyObject yes, SomeEnum is AnyObject yes, () -&gt; () is AnyObject yes, Bool is AnyObject
Optionals are very important in lots of situations that have nothing to do with Objective-C. They would certainly always have been part of the language. Not very much Objective-C code makes use of the full dynamism of the runtime. Meanwhile, those dynamic capabilities inhibit reasoning by the compiler or programmer. Swift will eventually have better runtime dynamism (including reflection), but it will likely be opt-in.
Edit: Any type in Swift can be bridged into an ObjC compatible object using `_SwiftValue`, which boxes the value: https://github.com/apple/swift/blob/master/stdlib/public/runtime/SwiftValue.h
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apple/swift/.../**SwiftValue.h** (master → 9f30ed6)](https://github.com/apple/swift/blob/9f30ed6952f4819bf93e8fd4e0590d965322d86b/stdlib/public/runtime/SwiftValue.h) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e0x3fj3.)
Be careful about using the footer or header view for these loading and error states. It does work until you want to use the those views for actual headers and footers alongside errors/loading state then you start having to work around it in messy ways. Alternatives include using error/loading states as cells in the table view, or displaying a static view above or in place of the table view. 
Even though it’s in lesson 14 why don’t you try implementing it before ? 
I was just following the lesson guide in the order it suggested. They all lead on to one another and seems fairly intuitive so far. I will get there soon enough :)
You should start here: https://developer.apple.com/videos/play/wwdc2018/413/
None yet. I just started learning it :)
[removed]
Lesson 0: Learn how to paste code on Reddit :p. See “formatting help”. 
Look into the following library: https://github.com/hackiftekhar/IQKeyboardManager This solves most of the keyboard issues. Keyboard behaviour can be a real pain in the ass.
Why are you setting videoGravity to rawValue of AVLayerVideoGravity.resizeAspectFill? (which is String IIRC) How does it even compile? player.videoGravity = .resizeAspectFill Is the correct way. If it doesn't help - see [these answers](https://stackoverflow.com/questions/37266429/video-played-with-avplayer-has-grey-line-to-top-and-sides-on-iphone-6s-plus) - maybe they will help with your problem.
Tried to do so, but the videoGravity property is String -&gt; Xcode forces me to cast videoGravity to rawValue
&gt; but the videoGravity property is String Sorry, missed the fact that you were using `AVPlayerController` (I thought you were setting `videoGravity` on `AVPlayerLayer`), it's `videoGravity` has in fact a String type, you are correct. Why are you using `AVPlayerController` though, if the player isn't even full screen? You should probably only use 'AVPlayer' with it's `AVPlayerLayer`.
I haven’t read Apple’s EULA, or ToS, or whatever for the Developer Program but I’m pretty confident that this violates one or more clauses in it. 
Shortcut to this lesson: Preface every line of your code with at least 4 spaces to put it into a code block.
Just tested it with `AVPlayerLayer` instead of `AVPlayerViewController` \- no changes :( BUT I also tested the same code on my old iPhone SE with iOS 11.2 on it and there were no borders, but when I launched the same code again on my iPhone 8+ with iOS 11.3.1 on it - borders appeared again. Some mystic shit going on
Check out [https://fastlane.tools/](https://fastlane.tools/) and more specifically [https://docs.fastlane.tools/getting-started/ios/screenshots/](https://docs.fastlane.tools/getting-started/ios/screenshots/). 
Seems to be the problem only appears on iPhone+ devices, no? Have you looked into solutions mentioned on [stackoverflow](https://stackoverflow.com/questions/37266429/video-played-with-avplayer-has-grey-line-to-top-and-sides-on-iphone-6s-plus)?
I already fixed the issue and updated the post with solution. Thanks!
You can take screenshots and switch the language with Xcode UITests. https://medium.com/xcblog/ios-localization-and-internationalization-testing-with-xcuitest-495747a74775 https://developer.apple.com/documentation/xctest/xcuiscreenshot
Preface every line of your code with at least 4 spaces to put it into a code block. It will be better formatted and more readable.
Why not work upstream? The Swift team is pretty friendly. There's work to be done for Android within the official Swift project but not many interested parties within the Swift world. &gt; Google already makes use of LLVM compilers for native Android development with C/C++. That’s why, from an Android device perspective, there is no difference in libraries compiled from C/C++ or Swift code. None of this makes sense.
I'm trying this approach right now, but I can't figure out a way to properly size the footer views. The article "cheats" by hardcoding their size, which means the texts and loading spinner are not centered correctly on anything besides the iPhone 8+. What is a good way to make sure the texts are always vertically centered? Bonus if they don't jump around from canceling/activating the searchController.
Just curious; what the new iOS book cover Swift 4.2, or wait to go over 5? Also, will you have chapters on the new ARKit stuff, and Create ML? Thanks!!
\`\`\` three tickets work? \`\`\`
I'm not sure I understand your question, however I will take a shot at it. If you are unhappy with the transitions that is provided by the default segues. You can create your own segues and use [UIViewControllerContextTransition](https://developer.apple.com/documentation/uikit/uiviewcontrollercontexttransitioning) and you can implement your own animations for segues. However, I think you are better off using a UITabBarController
test ``` test test ```
They don't, not like they work on other versions of Markdown. One tick works within a line but then it doesn't work well on subsequent lines. The only real way to do it here on Reddit is four spaces.
what you're looking for is MKLocalSearchRequest and MKMapItem: (https://developer.apple.com/documentation/mapkit/mklocalsearch/request) (https://developer.apple.com/documentation/mapkit/mkmapitem) The response(s) you get from MKLocalSearchRequest will contain an array of MKMapItem which themselves each contain an MKPlacemark; it is inside the placemark where you can extract your latitude &amp; longitude coordinates as a CLLocationCoordinate2D object. This should help get you started; I've left the actual coordinate extraction up to you. have fun! func searchForLocation(from string: String) { let request = MKLocalSearchRequest() request.naturalLanguageQuery = string let search = MKLocalSearch(request: request) search.start { (response, error) in guard let response = response else { return } let mapItem = response.mapItems[0] } }
Berlin, something dealing with audio, 3D graphics, or both.
I'll have a go with that, thank you very much! :)
If anyone wants to explore a full featured blockchain client written in Swift you can checkout some of the work we do https://github.com/O3Labs/OzoneWalletIOS We work on the NEO blockchain though. Let me know if you have any questions. Working with blockchains can be a beast, but its very satisfying
Yeah sorry it got late yesterday. I’ll try again. Yes I want the functionality of the tab bar controller but in my own implementation. I have a menu sliding in from the left where I can choose the Vc. I was first thinking of switching the root view controller but now I realized it makes more sense for the menu to be the root view and just switching out the child views.
Who's been who's = who is or who has 
This worked like a charm. Thank You! Also, If you can, please help me with this: [https://stackoverflow.com/questions/50942327/remove-location-from-firebase-geofire-swift](https://stackoverflow.com/questions/50942327/remove-location-from-firebase-geofire-swift)
Thanks for sharing!
I'll take a look at it. Note: you should try to fix your keyboard error because it will give you a great insight on how certain things work in iOS development. You solved your issue by patching it with a library (that's fine, for now) but you don't have insight on why it happened. If you want to become a better developer, you must understand how the basics work. Applying libraries is not that hard, so it's better to look at the core of the issue then trying to resolve it with a library. Don't get me wrong, you can use libraries (I do use IQKeyboardManager on almost every project) but don't use a library for everything because it acts a layer on certain core features.
Thank you for the feedback. I'll try and look into it. Well, actually I did solve the keyboard problem a bit. Also, please please please help me with that Location problem. It has put my project on a hold.
Just need to make the TextView accessible to the button press which may just mean defining it outside the ViewController. 
I have a similar navigation setup with [SideMenu](https://github.com/jonkykong/SideMenu). My architecture is like this: * The window root VC is a UINavigationController * AppDelegate has a method `func goTo(view: UIViewController)` described below * My SideMenu data source involves giving a reference to the AppDelegate so that each menu entry makes a call to `app.goTo(view: choice)`. Here is what `AppDelegate.goTo(view: UIViewController)` looks like: func goTo(view: UIViewController) { guard let navController = window?.rootViewController as? UINavigationController else { return } // If the top view controller is the same type as the parameter, do nothing. if let topViewController = navController.topViewController, topViewController.isMember(of: type(of: view)) { return } if let presentedViewController = navigationController?.presentedViewController { presentedViewController.dismiss(animated: true) } navController.popToRootViewController(animated: false) navController.pushViewController(view, animated: false) } You need to dismiss any presented view so that it doesn't carry over to the next VC. I use `popToRootViewController` because you can't push the same VC to the navigationController multiple times, so this guarantees that wont be an issue. Instead of passing around a reference to AppDelegate, you could just extend UINavigationController to have this method. Then it's just a matter of getting the navigation controller from within your VC and calling this method.
Selling anywhere else as a PDF? (dont want t download as epub file and would prefer to have on my comp (Would buy hard copy but live in Japan :/ )
You should post some of your code, it will help people to better advise you on what can be done to solve your issue.
ok i addad the code you need to understand this problem... sorry :D
If you preface every line of your code with at least 4 spaces it will be displayed in a code block. It will be better formatted and more readable.
Thanks :)
-_-
Ok good to know but i still dont have my answer
Hey thanks for your response. I solved it now with one main vc with the menu and then just adding the child views and replacing them. Btw I remember your SideMenu framework when I was looking for adding a Menu before I decided to do it myself for learning purposes. Good job :)
SideMenu isn't mine. I just linked it for reference. Glad you got it worked out.
 if let popoverPresentation = viewController.popoverPresentationController { popoverPresentation.delegate = self popoverPresentation.barButtonItem = sender } I'm really not understanding what's going on here, specifically with .popoverPresentationController but what I would try let storyboard = UIStoryboard(name: "Main", bundle: nil) if let viewController = storyboard.instantiateViewController(withIdentifier: "PopoverID") as? Popover { viewController.modalPresentationStyle = .popover viewController.delegate = self }
Only on Apple platforms, with Swift 4 and up, because of bridging. See SR-6715.
What doesn't make sense about that quote? From my understanding a (standards-compliant) compiler could never produce some output that would have a "difference in the compiled libraries from an Android perspective". An ABI is an ABI, and that's that. Is this what you mean?
So this should be done in another extension?
I'm not sure why but this forces my popover to presented full page modally instead of as a popover.
Well that's something else. But here's what's going on, or at least I think it is. if let popoverPresentation = viewController.popoverPresentationController { popoverPresentation.delegate = self popoverPresentation.barButtonItem = sender } so `popoverPresentation` is not the same as the `viewController`. when you do `popoverPresentation.delegate = self` you are subscribing to another Protocol which is not the one you created. You want to cast the `viewController` as a `Popover` and then you can subscribe to the protocol with `viewController.delegate = self`. The `if let` I wrote instantiates a new ViewController as Popover.
iPhone 1 users do.
\&gt; make sore to implement at least a basic smartphone feature, like showing something on a map and open its location in Apple Maps What, why?
It’s on sale right now at Packtpub.com!
But you could edit your post to add the four spaces ;)
i don't recommend to learn throw mobile development
App Store guidelines. One of the first in fact: if your app can be a website, then it shouldn’t be an app. 
It looks like you’re not initializing your myFoodFoot object. You’re declaring it’s type, then trying to retrieve instance properties. 
Thanks for the reply. Now I'm having an issue trying to figure out how to initialize an object that uses a protocol as its type, since protocols don't have constructors. Can you give some guidance? This was my new attempt at getting this to work: protocol MyFoot { var left: Int { get } var right: Int { get } init() } extension MyFoot { init() { var left: Int { return 0 } var right: Int { return 1 } } } struct Feet { func theGoodOne() { var myGoodFoot: MyFoot? myGoodFoot = MyFoot() print("\(myGoodFoot?.right)") } } let f = Feet() f.theGoodOne()
Ill give it a shot, but for now ive got it working with a dictionary.
Thanks, I got it working. Im prolly going to switch over to codable soon tho since thats best practice.
The objects are not codable. With another users comment I was able to get it working with dictonaries. Im going to implement codable once the project is more complete.
You cannot use initialisers in protocols. You need to conform the protocol for a struct or class. After that you can use the left and right properties. 
Right, you’d want to use a type that implements that protocol. If you want your struct to conform to the MyFeet protocol it would need a colon followed by the protocol name following the struct name. struct Feet : MyFoot { ... } That said, your protocol is a little clumsy. I’m not sure what you’re going for, but I would expect it to look more like: constructors. Can you give some guidance? This was my new attempt at getting this to work: protocol MyFoot { var left: Int { get } var right: Int { get } } extension MyFoot { var left: Int { return 0 } var right: Int { return 1 } } struct Feet { func theGoodOne() { print("\(self.right)") } } let f = Feet() f.theGoodOne()
This is very situational and differs per app. If you want a solution where waiters of a restaurant can take orders and send them to the kitchen then an app will work perfect as it doesn't have to be publicly accessible. If you want a solution where cutomers can review the food, then it makes more sense to have a website as it's cross platform but it also saves the hassle of installing an app, only to rate 1 meal and then remove it again. I'd say, just take the aim of the app/site into account. 
Why’s that? Genuinely curious.
A protocol is an abstract interface. You cannot directly create an object of that protocol. Rather, you have to create an *object of a type that conforms to that protocol*. You also don't need to declare 'init' as part of the protocol. That is the default of the object inheriting the protocol. protocol MyFoot { var left: Int { get } var right: Int { get } } extension MyFoot { var left: Int { return 0 } var right: Int { return 1 } } struct Feet: MyFoot { func theGoodOne() { print("\(right)") } } let f = Feet() f.theGoodOne() //Displays '1'
The problem is that you are directly presenting the popover. *Therefore no segue is being performed.* Your code in 'prepare(for:, sender:)' is never being called and the delegate is not being set. One option is to set the delegate at the point that you load the popover view controller. @IBAction func GoForwardButton(_ sender: UIBarButtonItem) { let storyboard = UIStoryboard(name: "Main", bundle: nil) if let viewController = storyboard.instantiateViewController(withIdentifier: "PopoverID") as? Popover { viewController.modalPresentationStyle = .popover viewController.delegate = self if let popoverPresentation = viewController.popoverPresentationController { popoverPresentation.delegate = self popoverPresentation.barButtonItem = sender } else { assert(false, "modalPresentationStyle is .popover") } present(viewController, animated: true, completion: nil) } }
I was going through the swift docs and it says (link provided below for reference): Because it’s a type, you can use a protocol in many places where other types are allowed, including: * As a parameter type or return type in a function, method, or initializer * As the type of a constant, variable, or property * As the type of items in an array, dictionary, or other container I wanted to have an object that uses the protocol as a type, so my entire struct doesn't need to conform to the protocol. [https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID275](https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID275)
Yes, that is all correct. But the one thing the docs don't say is that you can directly allocate an instance of that protocol. Once you have an instance of an object that conforms to that protocol, you can treat it as a type of that protocol. But it must be created first. You can, for example, do the following (assuming the rest of the code I posted stays the same: let g: MyFoot = f // type of a variable or func footFunc(foot: MyFoot) {} // parameter type footFunc(foot: f) or var footList: [MyFoot] = [] // type in an array footList.append(f)
OK, I've got it now. Thanks for the help!
That might help people to answer the question, sure. ;-)
So just add random Apple Maps, that you can also do from a website?
Because you learn only a part of language and how to solve mobile issues, and does not achieve its(language) full potential
$10 PDF [https://www.packtpub.com/application-development/learn-swift-building-applications](https://www.packtpub.com/application-development/learn-swift-building-applications) 
Swift is made for Mobile, Mac OS and now server side. It was built for that purpose.
agree with you, buddy! Starting from command line programs is a good base helped me to understood fundamentals of language:)
Make sure you add the entitlement to your .plist
Good to know. Thanks :)
I have this problem every time I build the app. I don't know how to fix it! :c
That URL isn’t valid, hence it’s crashing when you try to force unwrap
My guess is it’s the space in your location string. You’ll need to escape that
I have this problem every time I build the app. I don't know how to fix it! :c
And do you know how could I fix it? I'm really new in programming! Sorry for the ignorance 
Sorry, I don't understand so much, could you give me more details on how can I fix it?
What is in the variable URL if you print it? It’s probably malformed and returning nil so when you force unwrap it with the ! Mark it crashes. I would avoid using ! Whenever you can. 
If I try to avoid the !. It tells me "Value of optional type 'URL?' not unwrapped; did you mean to use '!' or '?'?" Honestly I don't know how can I solve this
I have this currently: let sampleData = [ ["Privacy","Control who sees what you share on Facebook, and manage data that helps us personalise experience",["Review a few important privacy settings", "Learn about your privacy on Facebook", "Manage your location settings", "Control face recognition"]], ["Account Security","Take actions to make your account more secure",["Review a few important privacy settings", "Learn about your privacy on Facebook", "Manage your location settings"]], ["Privacy 3","Control who sees what you share on Facebook, and manage data that helps us personalise experience",["Review a few important privacy settings", "Learn about your privacy on Facebook"]], ["Privacy 4","Control who sees what you share on Facebook, and manage data that helps us personalise experience",["Review a few important privacy settings"]] ] And in my numberOfItemsInSection: if(collectionView.tag == 1){ return sampleData.count }else{ return 3 //what to set for this??? } Even if I count the data in the array, I still get a static number of rows for each of the inner collection view. This is my current progress: https://gfycat.com/WanBlankCoqui
Look into using a guard statement. Basically you would say guard let url = URL(blah) else { shit went wrong print some error } 
You might need to escape the coordinates at the end. This article would be helpful: [https://useyourloaf.com/blog/how-to-percent-encode-a-url-string/](https://useyourloaf.com/blog/how-to-percent-encode-a-url-string/)
A couple of things: 1. Your api key is still visible in the debug area to the left of the console under url. So I'd take care of that when you can (remove this post, resubmit, etc). 2. You're appending a string to a base request that *already* has lat/long arguments so the url ends up being [base]/forecast/apiKey/(lat),(long),(lat),(long) 3. I'd have the location parameter as a CLLocation2DCoordinate or something similar and use string interpolation instead to append to the url. e.g let urlString = basePath +"\(location.latitude),\(location.longitude)" I personally just think that's easier to use than manually typing in a string and removes a lot of the guesswork. 4. Call the url constant something else within the forecast function instead of just "url". Not only is it not descriptive of the actual type (it's a string not a url) but it's too vague. Not to mention it may cause conflicts. 5. Try not to force unwrap. You could do something like this for the URL(string:) method: guard let forecastURL = URL(string: urlString) else {print("Error! URL Invalid!") return) Let me know if any of that helps.
Hi, thank you for all the tips, I started a couple of days ago in programming and honestly I don't know near as someone experienced. So the 2. Should I remove the .append? I don't know how can I change what you recommend on 3. And I already changed what you recommended in 4. and 5. And I did't knew that the api key was still visible. I hid the post!
Ok so your URL needs to look like this: https://api.darksky.net/forecast/[key]/[latitude],[longitude] Right now, your base url looks like this: https://api.darksky.net/forecast/0123456789abcdef9876543210fedcba/42.3601,-71.0589 Which is exactly what you need to make a network request, however, that won't work if we append more coordinates to it. So your baseURL should look like this https://api.darksky.net/forecast/0123456789abcdef9876543210fedcba/ So when you append the lat/long your url will be correct in order to make a request. Friendly advice? I wouldn't jump straight into network calls, I'd get the basics/intermediate stuff out of the way (like optionals for example those are the '!' and '?' you see when you don't handle them correctly). I recommend you go through the exercises at exercism.io for swift as an example and then come back to network requests. Network calls need a decent amount of knowledge to get right (not a ton, but a solid understanding of most Swift concepts) including optional handling, GCD, Serialization, etc. which can be very overwhelming for a new programmer.
Good, i think (beginner here) that the next steps are: -if you are using a tableview inside a view, you should resize the have that desired gap on each side -color the background of each cell and the tableview background to the correct color -round the top of the first row of each section -round the bottom of the last row of each section 
Why is there duplicate data in `sampleData`? Why not use a table view? I’d start by making some data structures: struct SettingsItem { let title: String let description: String let children: [String] } Make as many instances of `SettingsItem` as you need, put them in an array, and return that array’s `.count` in the collection view’s `numberOfSections`. Then the `numberOfItems` would be `return items[indexPath.section].children[indexPath.row]`. 
When did you last take the Stanford iTunes U course? In the most recent course he has a lecture where he works with dragging and dropping between apps and saving documents and using them in the Files app. To save you some time, [here](https://github.com/BestKora/CS193P-Fall-2017-DEMO/tree/master/EmojiArt%20L16/EmojiArt/Supporting%20Files) is someone who uploaded all of the demos from the course if you just want to skim around?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [BestKora/CS193P-Fall-2017-DEMO/.../**Supporting%20Files** (master → 3085e20)](https://github.com/BestKora/CS193P-Fall-2017-DEMO/tree/3085e20d6eb24ae085725f9c20434796912ab72a/EmojiArt%20L16/EmojiArt/Supporting%20Files) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e119l2s.)
There is no numberOfItems only numberOfItemsInSection, so I cannot get indexPath in this method
I realized that and updated the code just as you were replying. My bad. 
I am not worried about the UI for now, I am confident I can solve that. Do you know how I can dynamically set the inner collection view data? I can only set it in func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int { but however this method doesnt have indexPath, so I cant get each of the data I want
Section.indexPath?
Instead of try? ......... , Use do { try ......... } catch { print(error) }. If you use try?, you lose the error information and can’t find out what is going wrong.
Look at the string that you’re giving it and figure out why it’s not a valid URL
Ok but I still dont get how to do it. So will there only be 1 collection view? Or nested collection view? If only 1, the number of data (sampleData.count) will become the number of section, then the cells of the collection view, will be the number of children of sampleData?
Pretty much. Or push notifications. I guess the thinking is that on a website you can’t do turn by turn. I don’t know, they’re just picky sometimes. 
Why would there be multiple collection views? A collection view has sections, which in turn have cells. Seems like the perfect use case for what you have here. Although a table view would fit the bill even better. Yes to the other question. 
I have the decoder in a guard statement, returning the localised error if it’s caught. Is that the same thing, or should I specifically put it into a do {try}?
OK thanks. I thought the way to do it is having nested, where the section you are referring is the number of cells of the outer collection view, then a second collection view for the inner collection view.
You could compose your data as a string (with the correct delimiters to make it an CSV file), and then use NSStrings [writeToFile:atomically:encoding:error:](https://developer.apple.com/documentation/foundation/nsstring/1407654-writetofile?language=objc) to write it out as a file the user the can upload. 
I have at some point had either a UITableView/UICollectionView inside a UITableViewCell. All I did was to make the cell itself the delegate/datasource, then you can simply implement the methods there.
But can you nevertheless import them for use in private, non published projects?
Look up let build that app on YouTube he has great tutorials on collection views
I would definitely go with collection views, on section per data section.
i'm not arguing, but after teaching 'mobile dev' they run to stackoverflow because don't understand language itself
It's like teaching Java through Android dev, seems not a good idea
Random generator with throw fatalError ? :)
Every time happens to me😂😂
By the way do you use Test or TDD?
Wrong kind of Swift. This sub is the programming language, not the "remittance service provider".
I hate those, I don't know why I keep including them in all my classes.
Or just avoid `String` altogether because it's not the tool for the task. Instead, use [`URL`](https://developer.apple.com/documentation/foundation/url): import Foundation var url = URL(string: "https://api.darksky.net/forecast/key") url?.appendPathComponent("lat,long") print(url) // Optional(https://api.darksky.net/forecast/key/lat,long) It will automatically escape the URL properly for, as well as provide an easy way to add onto the path.
Just a reminder, if you post pictures of your code you make it much more difficult for people to help you. Instead, post the actual text of the code. Remember that putting four spaces in front of every line will format the code into a code block, making it much more readable.
The type of `URL?` is actually `Optional&lt;URL&gt;`, the question mark is just syntactic sugar. You can read up on `Optional` here: - [The Swift Programming Language: Optional](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330) - [`Optional` type reference](https://developer.apple.com/documentation/swift/optional) The best way to solve what you're asking is to use optional binding, which means you test and unwrap in one step: if let url = URL(string: someString) { // use the unwrapped url here } This tries to create a `URL`, which makes a `URL?`. It then tries to unwrap that into `url`, if it succeeds it runs the code in the curly braces. Even better is to use a [`guard`](https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID525) statement. These are like an `if..else` statement but they only use the `else` part and have to return (or break, continue, throw, etc). They're great if an operation could fail and you want to return if it does. guard let url = URL(string: someString) else { // we failed so return return } // use the unwrapped url here 
Yes, the no private APIs rule is for apps in the App Store, so you can do whatever you want to your own phone. Also, almost all apps published on Cydia for users with jailbroken phones use private APIs, since Apple doesn't control Cydia.
Well, I added what you recommended, but in the "let request blabla" it gives me the error "Argument labels '(String:)' do not match any available overloads" &gt;`static let basePath = "`[`https://api.darksky.net/forecast/74cef972bcaa1659e2b201ceed0f2dc5/`](https://api.darksky.net/forecast/74cef972bcaa1659e2b201ceed0f2dc5/)`"` &gt; &gt;`static func forecast (withLocation location:String, completion: @escaping ([Weather]) -&gt; ()) {` &gt; &gt;`var url = URL(string: "`[`https://api.darksky.net/forecast/74cef972bcaa1659e2b201ceed0f2dc5/`](https://api.darksky.net/forecast/74cef972bcaa1659e2b201ceed0f2dc5/)`")` &gt; &gt;`url?.appendPathComponent("98.279281, -181.58162540000001")` &gt; &gt;`print(url ?? &lt;#default value#&gt;)` &gt; &gt;`let request = URLRequest(url: URL(String: url))` &gt; &gt;`let task = URLSession.shared.dataTask(with: request) { (data:Data?, response:URLResponse?, error:Error?) in` &gt; &gt;`var forecastArray:[Weather] = []` &gt; &gt;`if let data = data {` &gt; &gt;`do {` &gt; &gt;`if let json = try JSONSerialization.jsonObject(with: data, options: []) as? [String:Any] {` &gt; &gt;`if let dailyForecasts = json["daily"] as? [String:Any] {` &gt; &gt;`if let dailyData = dailyForecasts["data"] as? [[String:Any]] {` &gt; &gt;`for dataPoint in dailyData {` &gt; &gt;`if let weatherObject = try? Weather(json: dataPoint) {` &gt; &gt;`forecastArray.append(weatherObject)` &gt; &gt;`}` &gt; &gt;`}` &gt; &gt;`}` &gt; &gt;`}` &gt; &gt;`}` &gt; &gt;`}catch {` &gt; &gt;`print(error.localizedDescription)` &gt; &gt;`}` &gt; &gt;`completion(forecastArray)` &gt; &gt;`}` &gt; &gt;`}` &gt; &gt;`task.resume()`
The way I replied your other comment is ok? Or it stills being bad? Thanks for the tips, all helps
Yeah I know, your advice is right. Just is boring for me reading hours and hours, but when I go and try to do something is more funny until you don't understand any of what you write
The y-axis is the vertical axis. So the nodes you’re adding should be above and below the current node. Also, I believe the units are in meters, you you trying to add a node 3m away from the current one. 
We built our first Swift app for macOS, https://matchday.basement.studio it's built using Swift for the ui/frontend, and nodejs to handle the api (which was also a challenge, because we're using socket events instead of direct api calls.)
Well if you're having fun with it I don't want to dissuade you. However, if you keep trying to tackle more advanced material without knowing the basics you might get burned out. Either way, if you need help with anything just send me a PM and I'll respond when I can.
I highly recommend these books: 1. The Swift Programming Language 2. App Development with Swift These books are available on Apple Books for free!
Couple of questions for you: 1. Why go to all the trouble to store data in the cloud? Why not store it on the device? 2. And if you are going to use the cloud, why not just use CloudKit? Isn't it less work and free instead of $$? 
 This seems to work: import Foundation struct Weather : Codable { let summary: String } struct Daily : Codable { let data : [Weather] } struct Forecast: Codable { let daily : Daily } let basePath = "https://api.darksky.net/forecast/74cef972bcaa1659e2b201ceed0f2dc5/" func forecast (withLocation location: String, completion: @escaping ([Weather]) -&gt; ()) { guard var url = URL(string: basePath) else { return } url.appendPathComponent(location) let request = URLRequest(url: url) let task = URLSession.shared.dataTask(with: request) { (data:Data?, response:URLResponse?, error:Error?) in guard error == nil, let data = data, let forecast = try? JSONDecoder().decode(Forecast.self, from: data) else { return } completion(forecast.daily.data) } task.resume() } forecast(withLocation: "40.71341,-74.006909") { $0.forEach { print($0.summary) } } // Mostly cloudy throughout the day. // Mostly cloudy throughout the day. // Mostly cloudy throughout the day. // Partly cloudy throughout the day. // Mostly cloudy in the morning. // Clear throughout the day. // Mostly cloudy throughout the day. // Mostly cloudy throughout the day.
Yeah without knowing all the basics is pain all day, but I think if I keep practicing and sometimes I read, I can beat them! Do you have any book that you recommend reading? Thank you very much for your help!
I’m just learning myself and the books /u/coders0029 are suggesting are a great starting place. I’d also recommend [Hacking With Swift](https://www.hackingwithswift.com/read), which is available online for free, as well as the Ray Wenderlich.com Swift Apprentice, which you can get the first chapter of by email as a daily news letter. These are the resources I’ve been using and I’m about 30% of the way through my first original Swift app. 
Wow, it seems easier that way! In the maincontroller.swift I put this `Weather.forecast(withLocation: "98.279281, -181.58162540000001") { (results:[Weather]) in` `for result in results {` `print("\(result)\n\n")` `}` `}` } But says that 'Weather' has no member in forecast. Sorry for asking so many times
Is there any list/documentation on the available APIs? Would love to explore them :)
That's because my version of `Weather` only has `summary` as a property. How is your version defined?
Most of the time for navigation, I use Coordinators mixed with SwiftGen 👌
I dunno... That would leave me awake at night wondering what actually fixed it.
Did you see the example has on the Mobile Hub panel? Download that, and run on simulator. It's a great example.
Can you link that to me? All the examples for Mobile Hub that I tried used the built in Auth UI.
Just doing a quick skim and I noticed in the Project Settings Section you have short terse lines about things then images of Xcode project creation, terminal, finder, and finally a code snippet (Podfile). When there are instructions to go along with the picture they appear below the picture and are very terse. Personally, I like to have descriptions above the images so I know what I'm looking at instead of wondering what the picture is trying to tell me. Also I find it very hard to differentiate between the images and the single lines of text between them. A little more vertical whitespace or some treatments to call out the separation would be great (might be hard to do as a github markdown page). You also have some very large sections of code with little to no description of what you are doing (i.e. The above code is all about LoadPlaceData.swift.). What is the main topic you are trying to teach me, using Parse, using Location APIs, using Map annotations, all of the above? If you aren't teaching me about something maybe you can get away with sections of code that I don't need to know about, but I'd rather see complete tutorials teaching me about everything you are doing so I can choose what to gloss over because I already know it. As a general thought step back from what you've written and think about who you've written it for. I see a lot of assumptions made in your tutorial, like having cocoapods installed and knowing what it does. Maybe you are writing for an audience that already knows this stuff, but if you aren't I can see someone easily getting lost in your tutorial. This is a problem I see with a lot of tutorials out there they assume a users level of knowledge, or they gloss over things they think the user doesn't care about (Ray Wenderlich is the worst for this). You don't have to explain everything, but including links to other resources would be very helpful. You have a before getting started section that would be great to have links to things like cocoapods.
What difficulties did you encounter? Because my experience is rather the opposite. Have used Core Data almost effortlessly the past two projects. On the subject of @leogdion social media idea, you could also conform your structs to codable and export, i.e. encode, them as a JSON for sharing across the web. 
You mean [this](„App Development with Swift“ von Apple Educationhttps://itunes.apple.com/de/book/app-development-with-swift/id1219117996?mt=11) one? 
pretty cool. is it possible to use firebase or something to host the data? 
Oh yeah. My bad. Also the nodes that are being displayed are answers. It basically provides extra random answers and requires you to pick the correct one. I got the randomising all worked out. I just am not sure how to remove the existing node and add a new one with a text from the randomising algorithm I created. Can I remove all the existing nodes and add them again using the stored positions? Also, will this allow me to add the correct nodes in the correct places? FYI: The name of the original node is the same as the key of the nodes position stored in the dictionary. Hopefully there is a way to compare this before adding the node so they get added in the correct places.
It's a bittersweet feeling for me. Sweet because it finally builds, bitter because I usually have no idea which change actually fixed it. I don't do mobile development anymore (javascript now), but I have never had this experience more often in my career than when writing Obj-C/Swift with xcode.
Big Nerd Ranch books, Angela Yu’s Udemy course, Lets’s Build That App and Code With Chris on YouTube. Code with Chris helped me get over my biggest conceptual hurdle as he talked a bit about why I needed to learn what I was learning, that was especially helpful for me just starting out.
That feeling when you’re fixing bugs for hours then it doesn’t compile at all and you’ve to go back to the previous state and lost hours of “work” #feelsbadman
I'd start with the official [Swift book on iBooks](https://itunes.apple.com/us/book/the-swift-programming-language-swift-4-1/id881256329?mt=11) which is completely free. After that, I'd take a look at some playgrounds to get comfortable with Swift concepts, like those found [here](https://github.com/uraimo/Awesome-Swift-Playgrounds). After that, I'd try to work on your own simple app (like what you're doing with this weather app of yours) and try to nail down some more abstract concepts like design patterns, data structures, and UX/UI design in order to impress employers. Try to focus on clean code, and make sure you're learning every step of the way. If you get stuck, take a step back and try to analyze exactly what your code is doing and why. Let me know if that helps.
&gt;#feelsbadman Hey there! Trying to create a hashtag? Make sure you use the '\' [escape character](https://en.wikipedia.org/wiki/Escape_character) like this: \#feelsbadman By itself, the '#' character will [turn your text into a header](https://www.geektron.com/2015/09/how-to-format-a-hashtag-on-reddit/)! --- ^See ^how ^people ^are ^using ^this ^hashtag ^on ^[Twitter](https://twitter.com/search?q=%23feelsbadman&amp;src=typd&amp;lang=en) ^and ^[Instagram](https://www.instagram.com/explore/tags/feelsbadman/?hl=en) ^^Hashtags ^^fixed: ^^1272 ^^| ^^Sub ^^with ^^most ^^fixes: ^^r/AskReddit ^^| ^^Reply ^^'stats' ^^to ^^see ^^more ^^fun ^^stats!
Thank you **bot**
The month is almost over and I still haven't started but I would really like to try working with Core ML image classifier just to test it out see how good it is? Is it fast? So many questions I have about it 
This isn't really a Swift question. And this doesn't seem like a great way to accomplish your goal, whatever that may be. Why do you want to remotely trigger an action? What is the underlying problem you are hoping to solve? Where is the file located? If it's in local storage, and you are modifying it while the phone is connected to your computer, you can look at [GCD to monitor the file](https://www.cocoanetics.com/2013/08/monitoring-a-folder-with-gcd/) via [Dispatch Sources](https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/GCDWorkQueues/GCDWorkQueues.html). If the file is in iCloud, look at using a [File Provider extension](https://developer.apple.com/documentation/fileprovider/content_and_change_tracking/tracking_your_file_provider_s_changes/tracking_changes_to_documents). If it's in dropbox or something else, look at that service's API. Or, if large files and/or performance isn't a concern, you could just use an NSTimer and reread the file every second or something.
How would you change a file on your phone from your computer? If I were to try to write an app with a "remote control" to take pictures, one solution would be to set up a small webserver within the App that serves a webpage with a "take picture" link. You can navigate to that webpage with any other device (that's in the same local network), and click that link. The app then has to detect that that link was clicked, and can take a picture. If you want to write an app that acts as the remote control, I'd try something like getting a connection up between the devices with WebSockets. There are a bunch of libraries for that, and the API is usually pretty simple. You can use the WebSocket to send a "take picture" message to your app. If you want to be able to trigger picture taking from anywhere over the internet, you need to set up a server. In that case, I'd use push notifications to trigger the picture-taking (i.e., the server triggers a push notification that the app handles. How the user gets the server to trigger the notification is a separate problem - you could have the server serve a webpage, for example.)
Multiple storyboards. Group related functionality in each storyboard. 
I just want the phone to take a picture (from my own custom camera app). So in simple terms I just want to be able to maybe click a button on a webpage, and then have my phone take a photo from the specific app. Then I want to just read the UIImage or w.e photo data it gives me back and store that back onto my webpage. 
I second the Angela Yu course
Kill the storyboards🔥🔥🔥
You're doing it wrong. You should never be more than a couple minutes from a working program. If you've gone so far into the weeds that you can't even compile for hours, you've really screwed up and just because it compiles now doesn't mean it isn't full of latent logic errors.
Loading VCs from xib/storyboard for the first time is noticeably slower than making them in code and changes are harder to review and harder to notice mistakes. You can also see it easier what constraints would be removed if you are removing a view. If you keep in mind that views need 4 constraints for their position and structure your code into blocks of add 1 subview, set constraints for it wherever possible then it will be easy to read. (Or if you are using self sizing stuff, like UILabel, those can calculate the 4th parameter from the 3 you set.) For navigation, I prefer coordinators. Until Xcode translates storyboards/xibs into code at buildtime and if the users' first impression is important to you, I would stay that building UI from code is the only way to go.
By definition, any API listed in the [Apple Developer Documentation](https://developer.apple.com/documentation/) is a public API, and any API not in those docs is a private API.
And when you need to switch from one to another, you instantiate them in a ViewController?
Is there any benchmark or an article about your statement? Also - I don't really agree with you on this. It is much easier to join a new project and see all the screens visualised, rather then needing to dig through the code to see what's what.
Nvm. Got the correct answers displaying in the respective nodes. Just the replacing of the original node that needs to be done.
Correct: no certificates or profiles for a free developer account. You should still be able to side-load for a short period of time. Connect the device to your Mac and change the signing settings to install under your personal developer identity. You should be able to run the program on your device, which will install it.
i cant connect it only thru xcode the 4k has no usb port.. Now it says i hit the limit for the app creations which is 10 didnt know there was a limit now i have to wait a week .. aggrivated
I actually just purchased the Angela Yu course. Is there any supplemental resources you would recommend or would it be best to finish that course from beginning to end and the. Start on another course/book?
Wouldn't it be stored in the cloud so you can share it with others or get access from other devices? The other concern is the size of the data.
[Here](https://developer.apple.com/documentation/foundation/url_loading_system/fetching_website_data_into_memory) is an example from Apple. It also includes a nice part about your question, &gt; What's the best method to parameterize the HTTP response code and look for a 401 vs a 200? It isn't perfect, but it is a nice little way to only check if the request was successful and accepted. You can also edit it a little to handle other codes differently as well. This stuff is pretty hard and I have to use it all the time. I hate it because I can't seem to get a complete grasp on it (specifically completion handlers!!!), but I can at least make simple requests now. It does get better! Hope this helps.
Are you connected to the same network or are you expecting to run this over the internet? Have you looked at using sockets?
&gt; NetWorkManager I think you mean NetworkManager &gt; let Json = I think you mean let json = ... Basically, make sure your english spelling of names/var etc is accurate and also make sure to follow a good swift style guide and respect the Swift API conventions. Any established style guide is probably ok, the key is to pick one and be consistent. 
Ok thank you for the insight. Are these such huge mistakes as to eliminate me from candidacy for this position?
I don't really have time to look at it more but that's what I noticed right away after opening one file. I'm sure you've probably noticed, but a lot of software engineer are very particular about attention to details. This kind of stuff might seem like OCD, and it kind of is, but at the same time it feels good to make things picture perfect, sort of like sleeping in a clean bedroom instead of a messy one :) 
I briefly looked at your ViewController code. Things that I noticed immediately: - Your git commit messages are not helpful. - You have at least one spelling/camelcase problem. - You have implicitly unwrapped variables. - You crammed all of your delegate/protocols into one class. - Some of your functions seem excessively long and could be refactored. - Some code could be refactored out of the view controller.
&gt;you have implicitly unwrapped variables Can you show me where? This is very interesting for me.
After reading a few of your files I have doubts that it was messy. To me, messy means code is not straightforwardly readable because code is in multiple subclasses and therefore multiple files. This however seems to be the norm when dealing with other developers who have come from backgrounds such as .Net, Java or straightforward C/C++. Hell I've had arguments with PHP developers and Ruby developers on naming conventions and code organization. My experience aside. When dealing with other developers you have to bear in mind that they will often have a differing opinions as to how to write code. As a point in case your file: **MapViewController.swift** is using too many if - else statements between lines 32 - 49 which could be better handled by a "switch" clause. But that is my opinion. Honestly I believe the code I pointed out will be just fine. It is just an opinion. Having said that I know for a fact that there are other people who treat their opinions as fact either because it is something that was etched into their psyche by a poor instructor or through some painful work experience in their past and they just cant let it go. My point here is that their opinion should not matter to you. Having said that; if they have sway in this job that you want to be in, then to me you have two choices... Your first choice is to accept their criticisms and use it to "improve" your code: you need to learn how to write code in the style of another person, not necessarily to make your code work but to make it work in a way that other person expects. Your second choice is to ignore the criticism (despite what others may say and how they may react in this thread: your individualism is sacred... never ever let another opinion corrupt it unless you want it to). Keep writing code in the manner that you expect code to be written and improve your own processes or algorithms. F--k other opinions. Now lets face the facts: you did not get this job. It is because one or more s--thead hates how you wrote your code. The bad thing has already happened. I say just move on and find another gig or better yet find a way to fund your own gig. Be proud, move on and leave them be. It is because they rejected you that they are not worth your time, blood, sweat, tears and piss. Let them eat s--t.
I did a *very* quick scan and noticed that your use of spaces is very inconsistent, particularly around “=“ signs, and also commas and brackets. You also have some inconsistent line spacing patterns and plenty of egregious indentation issues. These issues would not disqualify you. But they would make me concerned about how detail oriented you were which I would suss out via other questions. I would wonder “This is an interview and your chance to make a good impression, why wouldn’t you just make sure your code looks good?” If I got the feeling that you’re just junior and didn’t understand why this is important to people, no big deal. If I’m otherwise impressed with you, It’s easily corrected. If this is the only info that my HR Rep sent to me, I’ve probably got other candidates who solved the problem and code looks better, so I’ll just start with them first. 
Ok thank you for your feedback. I will try to implement some things you mentioned.
I would say that this is generally a code smell: var something: Type! You probably would want to do something like: var something:Type = Type() In your implementation if one of the variables were called before the viewDid load function it would crash your app.
Thank you for your feedback. I was just confused as to what is messy code because as you said to me what I wrote is fine. I just want to improve and it’s hard to understand somebodies opinions. I thought that making a project without storyboard and using MVC would be enough but I guess it’s not.
Ok I will do that from now on. I did this for the tableview and just set it in view did load. But I will just make it this way. Thank you for your comments.
I was given 3 hours for this project so something’s i had to rush. But I understand that = spacing is very important. Thank you for your feedback. I will try to improve on this.
Thank you for explaining this. I couldn't correct you but I have read that as well. However, using the code I have I am able to show the popover on iphone in simulator and on a device... for whatever reason. The edited code gives me a full page modal presentation instead.
No, it’s not at all necessary to store data in the cloud for sharing to be possible. The data sounds pretty small. So, the questions stand. 
Learning Swift with #teamtreehouse 🐸
Holy shit. That's a huge source of errors. Tutorials are for learning how to do something, like learn a library or a concept, not how to code. They often warn you that it's not production code. And, yes.
After briefly browsing your code, the first impression when I open some of your files is that of a "wall of text", and also inconsistent indentation. On top of that, your code feels like procedural code (read: "C" code) wrapped into classes, which is not a particularly good way of writing object-oriented code. Ideally you want to spread logic between classes to ensure task delegation is clear. So, as a quick example, instead of writing something to the effect of: doSomethingTo(A) doSomethingTo(B) doSomethingTo(C) You shroud strive to organize your code so that you can do stuff like: for thing in [A, B, C] { thing.doSomething() } These could turn out to be logically identical, but the first is not the ideal style of object-oriented code, because if you decided to change what `doSomething` means for `B` only, then you change the source of `B`, not of `doSomethingTo` (which would require internal `if` statements).
I’d like to add to your answer: When you’re reading code you want to understand what it means very quickly. For that your brain will parse the code, looking for patterns and trying to identify the juicy parts of it. If the code style is not consistent your brain will stop for some milliseconds and you just don’t know why. Imagine you’re reading a book and commas sometimes are preceded by spaces and sometimes are not. Sometimes full stops have a space before. A bullet list sometimes has spaces after the bullet point or not every item starts with an uppercase letter. This will prevent you from reading it as fast as possible. Most of the times you’re writing code for you or someone else to read it and change it with little context. For that it should be easy to parse like I mentioned before. 
Ok so I got rid of the IBAction code and instead called the popover view controller from the prepare(for:, sender:), like this: func prepare(for segue: UIStoryboardSegue, sender: Any) { if segue.identifier == "PopoverSegueID", let sender = sender as? UIBarButtonItem { let viewController = segue.destination viewController.modalPresentationStyle = .popover if let popoverPresentation = viewController.popoverPresentationController { popoverPresentation.delegate = self popoverPresentation.barButtonItem = sender } else { assert(false) } } super.prepare(for: segue, sender: sender) } func adaptivePresentationStyle(for controller: UIPresentationController, traitCollection: UITraitCollection) -&gt; UIModalPresentationStyle { return .none } Now the really odd thing that seems to happen is that calling it from the segue makes the popover present full page modally on iphone ( does show up as popover on ipad) but calling it from the button shows it as a popover in both ipad and iphone - I have no idea why. Second, my issue still remains. I think I now set the delegate but on ipad, the button in the popover still does not make the text bigger in vc. I've updated the full code link above with this as well. Could you take a second look?
So I should create another class to manage my tableview data then the class the tableview is in? Do you have any examples? 
Do you have any idea what the second way of programming is? Is that a pattern? 
You can use storyboard references and segues. If not then I prefer to use a Coordinator.
If I received a project with a single obvious warning it would probably be an instant rejection for me.
Ok thank you for the feedback.
&gt; You should never be more than a couple minutes from a working program. Sometimes it's not possible. If you need to rip out the data model or disassemble the UI to refactor and rebuild, then, well, you're going to be more that two minutes from a functioning app.
DRY
I haven't looked into the tutorial, but I've seen others that do a custom backend. I thought self hosting of a custom backend was a cheap alternative to an AWS, but I guess a level of cloud is free. So isn't it just one of several options that a dev has for storing data? I'd imagine that each option has some advantage. As far as the data size goes, I'd imagine it was just test data to show how to set things up.
Use Swiftlint.
I tried with that in maincontroller.swift: forecast(withLocation: "98.279281, -181.58162540000001") { (results:[Weather]) in for result in results { print("\(result)\n\n") } } And when I try to build it gave me the error: "Thread 1: EXC\_BAD\_ACCESS (code=2, address=0x7ffee48b4ff8)" in the following line in the Weather.swift: let task = URLSession.shared.dataTask(with: request) { (data:Data?, response:URLResponse?, error:Error?) in If I remove the code of the main controller.swift, it works flawlessly, but with that it don't work :(
So when I’m the lead on positions and reviewing sample projects like this there’s definitely some basic requirements: As others have said, make sure everything is spelled properly and follows whatever the “popular” style guide is for the language you’re working at. You **can** deviate from the style guidelines or do inventive solutions to things, but clearly explain in comments why you deviated. So I can see the thought process behind it. Do **not** have *any* warnings left in the code. Any code projects like this I’ve ever done myself, or given to others, were all too small to justify any warnings not being corrected before being sent over. Turn on **all** warnings that your development environment supports. Install and use a linter like swiftlint, follow its recommendations unless instructed otherwise by a provided style guide from the employer. Do double check every line, remove extraneous unused code. If sending a entire git repo with history, clean that history up (or better keep it clean through multiple commits **with** well described commit messages) And in general recognize that you got very far in the process if you got to a sample project point, good job! Refine your technique based on the feedback and good luck on your next try! Recognize as well that **your** sample project may not be the only reason behind their decisions, because there are very likely a lot of people involved including other people who may have been interviewing. So don’t be disheartened, it sounds like you did well. And just remember there’s always more to learn in IT fields, and never stop learning or refining. 
Well, in the MVC world, that would be your model. In a tutorial, sure, put them all into one. But, classes tend to grow, not shrink, so putting into separate classes only gives you flexibility in the future. (And, this digresses, but MVC is an architectural pattern, not the 3 classes for your application.)
I edited one file to show you how you can be more DRY (Do not Repeat Yourself) - it's a principle that if you find yourself doing things multiple times you should probably abstract it out into a function call. In this example you are creating multiple views with all the same settings, I combined them into one function that I called multiple times. I also stored all the views in one `Dictionary` and added them to the parent view in a functional manner. Take a look: https://github.com/colgraff/Burrito/blob/master/NoStoryBoard/PurpView.swift
Thank you so much.
No problem. I actually cut the line count down a lot but then gained a few more because I formatted your constraint method calls a bit. It's worth breaking up method calls into multiple lines if it makes the call more clear. I'd rather have a call take up 4 or 5 lines with one parameter per line instead of having it all on one very long line. Visually, it's much easier to read and understand if it's split over a few lines. That helps debugging and seeing the flow of the code and it makes it easier to work with.
Well I never really used core data much so what I did was put the array of structs as binary data and it was a mess. I didn’t think about conforming the structs to codable and now that I think about it your method would’ve been very good if I decided to turn my application into quiz sharing as it would’ve been easy to share it in JSON form. 