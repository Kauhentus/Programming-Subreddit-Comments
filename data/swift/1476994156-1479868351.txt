I can see that, the product I found many years ago did have a crack product and it did a run around for a while. However, the same could be said about encryption, it's a run around in circle thing. I read a post about what one guy did, he made it so that the code had almost no readable strings and did a bunch of things that made it hard to use.
I'm very new to Swift, can someone explain why he's using forKey: kCIInputWidthKey This is for the halftone example, the docs say the parameter is *inputWidth*, how can you tell by looking at the docs that the key needs to be *kCIInputWidthKey*
One [brew](http://brew.sh/) away, you mean :)
Here's an extension: extension Double { public static var random: Double { get { return Double(arc4random()) / 0xFFFFFFFF } } public static func random(min: Double, max: Double) -&gt; Double { return Double.random * (max - min) + min } } let rnd = Double.random(min: 0.1, max: 1.0) print(rnd) 
Yeah singletons are frowned upon when used in the wrong way because cleanup/reuse becomes weird. Like for example if a user logs out of your app, it's a lot easier to just remove references data than to mess with cleaning up a snowball of singletons you've made. Every app does have one singleton called the AppDelegate, some people like to put references to shared data there. I.E. DataManager can be reusable instances that you can create and destroy instead of being a singleton but you gotta keep a reference to it somewhere. Passing along data can also be used but I personally like my ViewControllers to know nothing of each other and have some bigger, puppet master of an object, control the flow of my apps. This makes things like making it to an arbitrary spot in the app from a push notification a bit easier. cheers, happy coding!
Swiftybeaver is not free
rxswift is awesome. I'm currently using it in a project.
Found this while reading the Swift Monthly magazine: https://github.com/DrewKiino/Atlantis
How?
Thanks for the response. I have tried a number of times to follow the code from the tutorial but due to the fact that it is written in an older version of swift, therefore half the APIs have deprecated thanks to the massive syntax changes and the ever-changing language design.
Here's a sandbox in a browser you can use i found helpful for quick tests https://swiftlang.ng.bluemix.net/#/repl protip: hit the play button at the bottom to get results
yup perfect cases for singletons. Things that you're for sure always going to need and only need one of. I have a router for screen changes that's a singleton so I would to Router.shared.moveToSomeScreen() and it would handle that.
I really like this idea, but then how do I have refresh methods for each table of each view while still doing the initial fetches within AppDelegate, would I not have to duplicate fetch code for each views fetch job? With a Singleton I'd be able to fire a fetch from anywhere but from what I'm reading your idea seems like the best approach Edit: Should make it more clear, by "fetch" I mean getting the JSON data via url and sorting it + loading it into CoreData, each some someone does "Pull to refresh" in a certain table I'd need to do a new fetch, but if I've done the initial fetches in AppDelegate so its all ready as each view opens, I would then need to duplicate the fetch code for a "refresh" method in each individual view
 @IBDesignable class ArrowShape: UIView { override func drawRect(rect: CGRect) { let context = UIGraphicsGetCurrentContext() CGContextSetFillColorWithColor(context, UIColor.whiteColor().CGColor) CGContextMoveToPoint(context, rect.width / 4, rect.height / 4) CGContextAddLineToPoint(context, rect.width * 3 / 4, rect.height / 2) CGContextAddLineToPoint(context, rect.width / 4, rect.height * 3 / 4) CGContextAddLineToPoint(context, rect.width / 4, rect.height / 4) CGContextFillPath(context) } } var view = ArrowShape(frame: CGRectMake(0, 0, 100, 100)) view.backgroundColor = UIColor.clearColor() @IBDesignable class LineShape: UIView { override func drawRect(rect: CGRect) { let context = UIGraphicsGetCurrentContext() let spacerHeight = rect.size.height CGContextSetLineWidth(context, 2.0) CGContextMoveToPoint(context, 0, (spacerHeight / 4.0)) CGContextAddLineToPoint(context, 0, 3 * (spacerHeight / 4.0)) CGContextSetStrokeColorWithColor(context, UIColor.whiteColor().CGColor) CGContextStrokePath(context) } } var line = LineShape(frame: CGRectMake(0, 0, 100, 100)) line.backgroundColor = UIColor.clearColor() Place this code in playgrounds. You'll see a quick view and show results option on the right side. Click either one of those to see the shape. Play with the numbers and give it a go. This is Swift 2.2 or lower code. Might be a good exercise to try and convert this Core Graphics code to Swift 3.0. 
First, look at enterMoneyAmount?.text. The ? Here is called optional chaining. enterMoneyAmount is an optional, so the ? means try to unwrap this optional and get the .text property if enterMoneyAmount is not nil. As for the ??, this, I believe, is called a null(nil?) coalescing operator. In the context of your question, if enterMoneyAmount cannot be unwrapped with optional chaining and ends up being nil, the value on the right of the ?? operator will be assigned to the variable. 
Would using the below code help? I'm a swift noob... String(format:"%.2f", someNumber) if someNumber was 10.1234, the 2f would make it 10.12. You can change that to 1f and it would be 10.1 and so on. You can probably do a little bit more math to get the answer that you want. 
These are older C APIs that user key/value semantics. kCIInputWidthKey is a constant that is set to the actual string the implementation uses to do whatever it needs to do with the value (in this case "inputWidth"). It's there to ensure you don't accidentally misspell the string (if the key was "inputWidth" and you typed "inptWidth" it would not work, this helps prevent you from doing so). It's similar to using a dictionary. The docs could do a better job of pointing you toward the keys. If you look at the [docs for the initializer](https://developer.apple.com/reference/coreimage/cifilter/1437894-init) which takes parameters, you will see a [link](https://developer.apple.com/library/content/documentation/GraphicsImaging/Reference/CoreImageFilterReference/index.html#//apple_ref/doc/uid/TP40004346) describing the available filters (the value provided as the name string). Each filter has a list of parameters which correspond to the filter. The constant the author used is just a convenience provided for commonly used parameter keys for all of these filters. There is a list [here](https://developer.apple.com/reference/coreimage/cifilter/1652559-filter_parameter_keys).
Rewritten with IFs if (enterMoneyAmount != nil &amp;&amp; enterMoneyAmount.text != nil) enteredAmountString = enterMoneyAmount.text else enteredAmountString = "" if (Double(enteredAmountString) != nil) enteredAmount = Double(enteredAmountString) else enteredAmount = 0; As you can see, it's much more compact using nil coalescing operators.
Two of the three implementations of doubleCurrentScore() don't compile. They're assigning to a local constant created by the if-let and guard-let statements. They could use self.userCurrentScore on the left hand side of the assignment to fix it. Or they could use another name for the local constant. If simple code samples in a blog post don't even compile, I'm unlikely to take the rest of the blog seriously. At least throw them into a Playground to give them a quick test…
Look the code below (CGFloat) and use it like this: let randomNumber = randomMinAddMax(0.1, max: 0.9) Helper methods: static func random01() -&gt; CGFloat { return CGFloat(drand48()) } static func random01Max(_ max: CGFloat) -&gt; CGFloat { return max * random01() } static func randomMinAddMax(_ min: CGFloat, max: CGFloat) -&gt; CGFloat { return min + random01Max(max) }
If RxSwift or ReactiveCocoa isn't an viable option I'd look into KVOController by Facebook: https://github.com/facebook/KVOController
Writing a protocol with delegates methods, assigning the delegate, creating the delegate property, calling the delegate method. Four locations which you have to write code. If you are, for example, wishing to pass an object back to the presentingViewController, delegation is the heaviest possible method. KVO, Rx and NotificationCenter are all quicker, involve less code, are less error prone and add code in fewer locations.
I would dive into the RX stuff. It's an incredibly useful pattern that's being used in a lot of different languages. I come from Android and it's really taken over the landscape. I'm really surprised it's not being used more in swift, it's definitely not as popular. 
Even if you're using something like NotificationCenter, you still need to define the interface. Usually that's a comment somewhere that says "use MyConstants.MyEventName, and in the userInfo dict, pass keys 'foo' and 'bar' with the values..." It's less code, yes, but I'm not sure how it's "less error prone". Having the compiler check the types of my delegate methods tends to identify problems quicker and easier. 
Unless you are a big company or your app does something really important, I don't think you should care about small server down times. OFC if there are too many of them, you should consider another server hosting service.
I think this is exactly what I'll do, just go with an "unable to refresh at this time" sort of message and if it happens too often (or for too long, more importantly) than I like I'll switch providers. I'll look into true load balancing systems for the hell of it, but I guess I can live with infrequent, short outages here and there
Terrible time to be posting GitHub links ;)
I use chameleon in all of my apps just about!
Let me know if you have any questions! (I'm the author) You can read Hacking with Swift online for free, but the e-book comes with various extras to help make it easier.
Is there that much difference? Serious question. 
Hello! Do i have to purchase the book in order to get the tutorial videos? 
Thanks
url: https://github.com/matteocrippa/awesome-swift
You da man. I'm gonna try that and report back. It can be done both at the window or view level. In the window everything changes to dark including the window bar at the top with the three colored buttons which is not what I wanted, so I changed the view.appearance and voila! all controls changed to dark without any additional coding. Thanks. Approved answer. Where is the checkmark? Oh, here it is ✅ √ 
 var currentIndex = 0 while currentIndex &lt; characters.count { // ... currentIndex += 1 } Come on guys, this is what a `for` loop is for. You know better than this. var characters = Array(word.lowercased().characters) // ... let character = characters[currentIndex] If you're first casting a string to an array and then subscripting it using integers, you might as well just iterate over the characters. Also, there's no need for `var` here, since you're not mutating it. if currentIndex == characters.count { currentNode.isTerminating = true } Since this code is inside a `while currentIndex &lt; characters.count` loop, we already know that it will be executed once, at the end of the loop. There's no need to check it on every iteration, just put the assignment below the loop. if currentIndex == characters.count &amp;&amp; currentNode.isTerminating { return true } else { return false } Really? I think we've all been there, but this is raywenderlich.com. Are you really encouraging people to write code like this? :( currentNode.add(child: character) currentNode = currentNode.children[character]! I don't really like the `!`, but it's understandable. There is a way around it, though, which is to let the `add(child:)` function return the node it adds: func add(child: T) -&gt; TrieNode { let node = children[child] ?? TrieNode(value: child) children[child] = node return node } Now you can replace the earlier code by currentNode = currentNode.add(child: character) Lastly, guard !word.isEmpty else { return } ... guard !word.isEmpty else { return false } I guess this is a matter of opinion, but what's the reason to treat the empty string as a special case? The trie can handle it just fine (it will simply mark the root as terminating). Preventing the insertion of `""` seems like a silly thing to do. Here's my revised version: https://gist.github.com/anonymous/1c9d5a277907d57875a85dde0a3ed08d
I'm no expert on this subject, but I thought Swift had an advantage of being a thread based compiled language. Swift was much faster than all the others, except Go, so what advantage does Swift have over Go? And based on the tests from Realm, why would anyone not just use Go? Why do we see so many popular setups not written in Go?
Hey Teddim, Thanks for the feedback. I took a look at your implementation and I admit it looks really good (in fact, I had something similar whilst experimenting for the post). I'd like to discuss this with you further. Let's consider your implementation of `insert`: func insert(word: String) { var node = root for character in word.lowercased().characters { node = node.children[character] ?? node.add(child: character) } node.isTerminating = true } and the current implementation in the article: func insert(word: String) { guard !word.isEmpty else { return } var currentNode = root var characters = Array(word.lowercased().characters) var currentIndex = 0 while currentIndex &lt; characters.count { let character = characters[currentIndex] if let child = currentNode.children[character] { currentNode = child } else { currentNode.add(child: character) currentNode = currentNode.children[character]! } currentIndex += 1 if currentIndex == characters.count { currentNode.isTerminating = true } } } Whenever writing these articles, I always take a step back once in a while and ask myself, "Who am I writing this for?", "What concepts do I want to address?" # 1 Node Traversals Your way of handling node traversal is very delightful, but in my opinion, having a non `Void` return type for `add` obscures the concept a lot: for character in word.lowercased().characters { node = node.children[character] ?? node.add(child: character) } "For every character, check if the character is within the `children` property. If it's there, unwrap with nil coalescing. Otherwise, add a new node, and assign the return type of `add` to the current node" My issue with the above is the last bit. Generally, I wouldn't expect an `add` type method to return a value. This comes off as a code smell to me. The only time I've encountered a reasonable case for a return value for an `add` method is doing "Tail-end insertion" for linked lists, which is not what we're going for here. # 2 Readability versus Terseness Your version is terse, but the readability tradeoff is unfavourable, especially considering my target audience - beginners. A concept I really wanted to highlight is node traversals, which is one of the most important concepts for algorithms. Back when I was doing school, my data structures and algs professor would always say: “The concept of pointers is always a hit or miss upon the new students. Some people pick up right away, some find it extremely challenging to understand.” - Gladys M. While Swift hides the notion of pointers, node traversals is essentially pointer arithmetic. I want to make this clear to the readers: if let child = currentNode.children[character] { currentNode = child } else { currentNode.add(child: character) currentNode = currentNode.children[character]! } Every step is concrete and easily explainable. It also doesn't rely on subtle side effects of a non `Void` `insert` type method. I agree that the forced unwrapping is undesirable. ________ Good catch on the useless `var` and the matter with the `for` loop. I really appreciate the time you spent writing feedback; It'll be invaluable to my progress as a writer / programmer and I'll make sure to improve upon what I hear. Cheers, Kelvin 
Working with a startup for an app called Swop that is hopefully going to change the way people connect and share contact information. It's all Swift top to bottom and has been a blast to work on. It's out there now in the app store, but still in public Beta.
man, i was about to migrate my apps to Swift 3.0 and now i'm thinking otherwise....
awesome. when it's done, i'd be happy to beta test.
These questions have to do with iOS programming, and not with Swift. Yes, I understand you will be writing the code in Swift, but view controllers, buttons and NSTimers (which are used to do an action after a time limit) are all phenomena of UIKit and Foundation. You need to start at the beginning and learn how to use them properly; there is no shortcut. From your first question, it is clear that you haven't yet studied view controllers and application architecture enough. The first place you should look is the Apple docs, then google will be your friend in finding books, tutorials, courses etc regarding writing iOS applications.
Working on a fitness tracking app for people with movement disorders. They're able to test central nervous system health at various times each day and chart their on and off times. Started in objc but new classes being written in Swift. 
I say return nil and use guard let statements to manipulate the data. Mainly because of logic. When you have an error you want to return nil because nil isn't something you can operate with. You can still operate with an empty array even though it doesn't contain any elements and what if you're supposed to get an empty array back? Treating an empty array like an error will make your intentions a bit difficult to understand in the long run so it's best to return nil when there's an error. 
It use fasthttp (Go) and several Go framework use it which is quite fast than the Go http
Do you have github repo when it's ready?
Thanks for the responses. Thinking about it, yes, it would make it easier to understand if the method returned nil. I can see an argument for rethrowing the error, but my worry is I'm going to end up with a large tree of error throwers, so I guess I'll just log it at point of failure and return nil.
Agreed. I never use this function for anything approaching DBL_MAX but I should have been more clear.
[How about something like this?](https://gist.github.com/oisdk/7def2aa5a3499ec6cbe87d6b40620dc7) public class Trie { var isTerminating: Bool var children: [Character: Trie] init() { children = [:] isTerminating = false } public func insert(_ s: String) { var node = self for c in s.lowercased().characters { if let next = node.children[c] { node = next } else { let next = Trie() node.children[c] = next node = next } } node.isTerminating = true } public func contains(_ s: String) -&gt; Bool { var node = self for c in s.lowercased().characters { guard let next = node.children[c] else { return false } node = next } return node.isTerminating } } let t = Trie() t.insert("abc") t.insert("ab") t.contains("ab") // true t.contains("abc") // true t.contains("a") // false t.contains("abcd") // false
And you don't need the `()` either: ints.sort { $0 &lt; $1 } Of course, you don't need the anonymous arguments either: ints.sort(&lt;) And you don't need the `&lt;` either :) ints.sort()
Fair point on having `add` return something possibly being unexpected, but let's have a look at the `insert(_:)` method on Swift's native `Set` type: mutating func insert(_ newMember: Element) -&gt; (inserted: Bool, memberAfterInsert: Element) This method does something similar to the trie's `add` method, and it still has a return value. However, it returns a tuple with named parameters, so that increases readability. We could try something like this for the `add` method: @discardableResult func add(child: T) -&gt; (added: Bool, node: TrieNode) { if let node = children[child] { return (false, node) } else { let node = TrieNode(value: child) children[child] = node return (true, node) } } Using `@discardableResult` is a good idea here, because the side effects of this function are the most important - you want to make sure the child is added, and you may or may not be interested in the return value. Now, the `for` loop can look like this: for character in word.lowercased().characters { node = node.add(child: character).node } Which I think looks great. After all, the pointer manipulation is quite clearly done in the new `add` function (and I agree that this is important to not skim over). If you feel like this is too brief, you could also do something like for character in word.lowercased().characters { if let child = node.children[character] { node = child } else { let child = node.add(child: character).node node = child } } Which is pretty similar to your original approach. Of course, the `add` method is designed in such a way that this last snippet is more verbose than necessary, so you could show beginners several approaches to solve the same problem. Cheers!
You're right. Just wanted to make it clear, the shorthand version may confuse some . 
It's a little bit over the top with that thick accent of yours, other than that great video.
Ok, I can see that. With encryption you can use a known method where as if everyone knows the obfuscation, it has no value. I don't know how that product from the past did encryption, or if it would even work with an iOS app or not. I guess if it were viable, Apple probably would have done it already. 
OpenGL is an even better example for a C library you'd want to use from Swift. There's simply no way you could recreate that.
How true!
Why use a class? You really want to use value semantics so that your data structure behaves like others in Swift. If you want better performance, you could take the extra step and implement copy on write. For reference, [here's my implementation of a Trie](https://github.com/Zewo/Zewo/blob/master/Modules/HTTPServer/Sources/HTTPServer/Router/Trie.swift), used in Zewo's router. [Example usage](https://github.com/Zewo/Zewo/blob/master/Modules/HTTPServer/Tests/HTTPServerTests/Router/TrieRouteMatcherTests.swift#L9-L27).
And what to think of `guard personName in vipList else`...
I've had professors in university with much worse accents. Yours is perfect and understandable. Great video.
You would copy everything above the node that you're writing to (unless your trie is uniquely referenced, in which case there should be no copies). If you think this is bad, consider that writing to an array would copy the entire thing. 
I wrote the article in the first link. Can you be more specific about what's not working? I'm pretty sure the code is fine; you should literally be able to use my entire view controller and be OK.
That's where the cost outweighs the benefits. I worked with an `enum` based binary search tree before. It looks great, and looks delightful, but doing even 1000 insertions took the playground over 5 minutes to run (I didn't bother waiting for it to complete). After that debacle, I decided to embrace reference semantics for data structures. Value types in Swift have their place almost everywhere in Swift, but when a structure gets big enough, it's a fantastically bad investment.
Do you have an example or repo which is faster?
If performance becomes an issue, use COW.
I was just playing around with [Metalbrot playground](https://github.com/jtbandes/Metalbrot.playground), I don't have actual numbers yet, so take it with a grain of salt.
Javascript/CSS and Java/Go will still be use at some place to solve different set of problem. 
A little more information about how you're implementing it would probably help the writer. 
Check the swift wiki in the sidebar.
I get so tired of reading questions like this. 
I agree. Folks need to develop their Google-fu before just dropping the, "direct me to the best learning material" question and expect answers. 
Im working on an app that is about Amino Acids
I'd just skim [The Swift Programming Language](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/), and then try using it, keeping a window open to [bugs.swift.org](https://bugs.swift.org) so I can tell what's intentional or not. If you don't know how to program, I'd learn to program first, and then learn Swift second.
thanks i figured it out after reading a bit on it
Yes certainly! Find a brigade close to you and go and meet them. https://www.codeforamerica.org/join-us/volunteer-with-us
Thank you! We can't wait to make it embeddable so other people can make interactive tutorials :) 
The differences in swift 3 are not that drastic and intellisense should help you.
If you already know basic programming like vars, loops and conditions just go straight to develop an app. This site has been an extremely valuable resource for me: https://www.raywenderlich.com/ 
* Make it fully accessible. * Make date ranges selectable by holding and dragging. * Add a date picker mode with infinite vertical scrolling. * Add a day mode supporting overlapping time blocks. * Add views optimized for larger screen sizes.
Thanks for the feedback. Just some questions. 1. What did you mean by making it fully accessible? 2. Dragging date ranges. Now i will definitely do that one. 3. Could I have some more clarifications in the date picking? 4. The day-mode will be a separate control. This sounds more like a `ScheduleControl` than a typical calendar. 5. Concerning the views optimized for larger screens. The calendar is 100% customizable. You can add any view you want to it. Thanks for the feedback. Could you explain #1 and #3 some more? Again Thanks. 
Music to my ears :)
Can you show us some code you wrote? It's impossible to figure out like this what's going on.
Currently working through AppCoda.com's beginning iOS 10 book. It's one of the best development books I've used. Highly recommend. Note that it is not a free resource, but you can find codes to get the price down to $30 or so.
[This](https://developer.apple.com/library/content//documentation/General/Conceptual/WatchKitProgrammingGuide/index.html#//apple_ref/doc/uid/TP40014969-CH8-SW1) should be of some use. Have a look through the other related pages too.
Actually, [http server](https://golang.org/pkg/net/http/) from the standard Go library also shows pretty good results in this benchmark for both 20 and 20K concurrent connections: $ wrk -t 1 -c 20 -d 60s --latency http://10.10.xx.xxx:8090/json Running 1m test @ http://10.10.xx.xxx:8090/json 1 threads and 20 connections Thread Stats Avg Stdev Max +/- Stdev Latency 184.22us 454.59us 23.62ms 98.13% Req/Sec 122.55k 5.11k 131.55k 94.18% Latency Distribution 50% 138.00us 75% 171.00us 90% 235.00us 99% 790.00us 7324567 requests in 1.00m, 1.12GB read Requests/sec: 121873.55 Transfer/sec: 19.05MB $ wrk -t 1 -c 20000 -d 60s --latency http://10.10.xx.xxx:8090/json Running 1m test @ http://10.10.xx.xxx:8090/json 1 threads and 20000 connections Thread Stats Avg Stdev Max +/- Stdev Latency 129.80ms 30.71ms 431.32ms 89.75% Req/Sec 80.65k 30.66k 151.46k 59.87% Latency Distribution 50% 124.18ms 75% 132.75ms 90% 144.37ms 99% 272.21ms 4716665 requests in 1.00m, 737.25MB read Requests/sec: 78547.15 Transfer/sec: 12.28MB These tests load network subsystem, while [fasthttp](https://github.com/valyala/fasthttp) excels at [http level](https://www.techempower.com/benchmarks/#section=data-r12&amp;hw=peak&amp;test=plaintext).
1. I wrote an iOS tutorial that includes a watchOS segment. It transfers a small amount of data from phone to watch, and might help you. You can try to jump in at that part [here](https://www.hackingwithswift.com/read/37/8/communicating-between-ios-and-watchos-wcsession), but you might prefer to start from the beginning. 2. I can recommend following [Kristina Thai](https://twitter.com/kristinathai) on Twitter; she delivers lots of watchOS talks, and you might find them helpful.
Mostly agreed except of few points: &gt; Go is not object-oriented (although it has a few constructs to make it feel that way) Go supports object-oriented programming. Actually, the majority of existing Go code is written in object-oriented style. See [this answer](https://golang.org/doc/faq#Is_Go_an_object-oriented_language) from the official Go FAQ for details. &gt; Go uses pointers extensively Pointers in Go give fine-grained control for memory allocations and copying. Proper pointers' usage may significantly reduce RAM, CPU and GC overhead. Again, see [this FAQ section](https://golang.org/doc/faq#Pointers) for details.
Apple likely has no interest in doing it. They are moving the other way with their own software. See https://techcrunch.com/2016/06/22/apple-unencrypted-kernel/
I wonder why someone couldn't make an encryption system for iOS/android apps. It might be an issue that Apple doesn't allow it. What Apple was doing with the core was probably close in concept to what I've seen done in the past. With all the investment in mobile, I'm wondering what the larger companies do about this in order to keep others from catching up so quickly. Imagine Uber vs Lyft, if they decompile their code, they could find something that they've overlooked and cause all kinds of problems. Just seems odd that it's so easy to get the source code and it's such a rich market that there's no protection.
Like [this](https://developer.apple.com/library/prerelease/content/documentation/General/Conceptual/WatchKitProgrammingGuide/index.html#//apple_ref/doc/uid/TP40014969), maybe?
The thing to remember about Rx or reactive cocoa is that while it's less code you have to write, it adds a TON of code you didn't write / probably don't understand. Now you've got a dependency on a third party and have more code to maintain in the future. You writing those 5 lines of code in four places may actually be more maintainable and future proof, and any future iOS developer on the project will know those first party patterns.
Hi, well first i don't think it's smart to show user's password. You can load the user's data from the data you saved in the core data. You need to make IBOutlets from the labels in the controller, and then if the data is static you can load it in the viewDidLoad function like this : If you have label named myLabel then the code should look like this myLabel.text = "your text loaded from the core data" 
/r/watchosprogramming
Dictionary subscription looks like this: dictName[keyObject] Just like it was in modern objective C syntax.
Ok so maybe the video was an older one. I didn't actually try it out, just saw in a tutorial where it said you had to use NS in stead of Swift in order to get the objectForKey.
Sometimes you do need to cast swift foundation struts to their equivalent NS objects to use methods of your choice, but as swift getting more mature I found this practice to be less needed. The only remaining casts in my code to NS objects are for some methods in NSData and NSString, and the former shouldn't be necessary once I figure out how to deal with Data struts in C functions.
By "fully accessible" I mean using the UIAccessibility framework to make the calendar usable by disabled (blind, etc.) users. See [Accessibility on iOS](https://developer.apple.com/accessibility/ios/) for more information. You can see an example of infinite scrolling in the iOS calendar year view (the most zoomed out mode). This could be implemented separately from the calendar control itself but using the calendar control in UICollectionViews cells. (It may make more sense as a separate project.) There may be other non-standard calendar modes that only make sense on a larger screen: for example, a week mode showing details for multiple days.
Create a delegate protocol named something like SegmentedControlCellDelegate with a function named handleSegmentValueChangedTo(value:inCell), add an optional property to the cell of type SegmentedControlCellDelegate and have the valueChanged IBAction call delegate?.handleSegmentValueChangedTo(...,self). Have your view controller implement the new protocol, and in cellforrowatindexpath, assign the delegate property to self. Then you can figure out which cell called the delegate method and act appropriately. Does that make sense to you?
Get an editor and write Swift code there. (You can use vscode for highlights and setup autocomplete if needed) Compile on shell and run it. Understand memory management in swift. Learn all the language basics here only. This is hard but focused way to learn any language. Then pickup Xcode and learn the parts of it. Create a storyboard with a view having few objects and see how the file looks like in xml with all bindings. (This is important to know how this work in background). Learn about segue and GCD. Pick one UI control at a time and understand it's hierarchy, it will help you in learning common parts of base class. Understand how MVC works.
Not upon first read through, but I'll do some googling and see if I can.
Everything is here from Apple: https://developer.apple.com/library/content//documentation/General/Conceptual/WatchKitProgrammingGuide/index.html 
I don't think Swift is a good language for people learning to program. Personally, I think Apple is delusional if they think it's a good language for beginners. The syntax is already as complex as C++'s. The language is not terribly well-documented, and doesn't have a spec or a second implementation. The language is so new that the syntax is still changing pretty significantly every year. You don't have to try hard at all to run into compiler bugs. It has many features which (while perfectly fine on their own) are shared with almost no other programming languages, like its memory model, or its string API. These days, a programming language alone isn't good enough for most people. You also need 47 frameworks to do something "useful". You probably know those for HTML/CSS already, so a language environment that took advantage of that knowledge would be a lot easier for you than one that also requires you to learn about iOS and all of its SDKs. Imagine a non-web-developer saying "I just want to put stuff on the screen -- I need to learn HTML, and the DOM, and all these different versions of CSS, and then I have to test in every browser because they're all different, and now I need a CSS reset, what?" I'm not saying you shouldn't learn Swift, but perhaps be realistic about your goals. Are you trying to simultaneously (1) learn to program, (2) learn the Swift language, (3) learn to use Xcode, (4) learn iOS frameworks, (5) learn iOS development, and (6) design, architect, and implement an app? That's a lot to chew on. This problem is not unique to Swift, but you shouldn't let Apple's feel-good videos set unrealistic expectations for you. The iPod was 10 times easier to use than the competition, back in its day, but iOS app development is not somehow magically 10 times easier now that Swift is here. Even if Swift syntax was 10 times simpler than Objective-C syntax (and it's not), dealing with language syntax is just one tiny piece of developing an app.
https://benchmarksgame.alioth.debian.org/u64q/go.html
Don't turn it into studying. Think up something fun or interesting, break it down into a series of small steps that you've seen or are pretty sure are possible, then just google the shit out of each step. It makes it way more fun when you have a goal that engages you. 
Not really. I prefer compile type safety over run time in almost all circumstances. A shorthand notation for creating the above would be nice, I suppose.
now i found the problem. i did the image loading async, and forgot to set the text outside of the async task. now it works. 
That would be terrible
I knew you post that link. http://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=swift&amp;lang2=go https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=go&amp;lang2=rust We don't need to look at solving problem with complicated code is the point.
This is probably the best way forward, I'm mainly looking for some kind of list so that I know what to expect. Example, when you go with a 3rd party product, you want to know if it'll get the job done before you have too much time/money invested. Much like Swift on the server, it's new, it looks great, it's just a matter of will it get the job done and what does it NOT support that might be needed on a server. Kinda surprised about objectForKey as those seem pretty common. I thought blocks, KVO and other things were pretty big deals in iOS cocoa dev.
Declare your class as `final`: you no longer need the `required` keyword, and you get a performance boost too.
I almost always use storyboards mainly because I don't like my view controller being overcrowded with code. The only time I would use constraints in code is if I'm resetting the size of something or if something is visible based off of an if statement. 
Samesies
Could you please give an example of objectForKey not working? 
&gt; mandatory for every single class I write if I NEVER use it? Of note, it's not mandatory for every single class you write, it's mandatory for every class *which implements NSCoder*, usually transitively (e.g. UIViewController).
I used to do all layouts in IB, but after the app started getting really big, it seemed harder to maintain. I made a decision to do everything in code (Purelayout). Obviously there's a lot more code, but it's more maintainable in my opinion. It's also easier for someone coming in to understand what's going on. Just by looking at the code rather than jumping around in the storyboard. Not to mention every time you look at a storyboard Xcode would want to build, etc. just less problems overall. With that said I think storyboards are great for smaller applications. Overall I guess it's just a matter of opinion. Edit: As far as I know you can do anything in code when it comes to layout and constraints. 
Yeah I can imagine. If it doesn't have to be Swift then an easier language to learn might be Python. Sure, you won't be building fancy iOS/macOS apps with Python but the language itself is pretty simple, documentation is great and at the beginning you only worry about writing code that runs in a text terminal. With Swift you have to basically learn not only the language itself but als how to build iOS/macOS apps. And that last part is actually the really complicated stuff.
The code isn't even tabbed or monospaced. Really terrible layout for a topic [that's already very well covered](https://www.google.com/search?client=safari&amp;rls=en&amp;q=gcd+swift+3&amp;ie=UTF-8&amp;oe=UTF-8)
starting out don't worry about every framework. I find it useful to have a little project and learn when you need a roadblock, I personally can't retain theory that I haven't put into practice so I have to develop as I'm learning. Starting out its often useful to take an example project and adapt it because you will be reading existing code, writing you own code and learning on te fly at the same time. ---- The approach of learning deep theory is also valid but I kind of have to take a hybrid approach, I'll learn enough to get started, start developing then go back and refresh and deepen my knowledge with theory that's now anchored with practice. rinse and repeat.
Playground is really slow and unreliable sometimes. Try toggling the Play Icon on the button left.
For anyone interested here's a link to one of the videos @ 11:00 he's getting into the constraints, but his other videos show all the setup. Several of them have no storyboard at all. https://www.youtube.com/watch?v=4rNtIeC_dsQ
I've been told the same thing several time, there is nothing you can do in storyboards that you can't do in code.
Are you running it in release mode? Try that first - benchmarks without optimizations are very inaccurate. 
Recompiles everything every time!
The problem I have with this kind of compile-time "safety" is that in 99% of cases, people (including me) will just blindly accept the Xcode default (as shown here), and that doesn't offer any advantages over a run-time check. Essentially, it still *is* a run-time check. It's just that the compiler forced me to write it out in longhand. When something doesn't work, and there's a big button that says "JUST MAKE IT WORK", people will press that button, even if it's a bad idea. This is how the manufacturer of the thing wipes their hands of the incident. "You asked for it" -- even if you don't (or can't) fully appreciate the consequences of what you asked for. This is the "Take the batteries out of your smoke detector at 3:00 AM" approach -- for now, I can get on with my life, and I'll deal with any other problems later. Do I have any code paths that use NSCoding to instantiate this particular model? I have no idea. I still have to test the sucker to find out. Or trace through every possible instantiation path. If somebody later writes code that takes advantage of it being NSCoding (or sticks it in a nib), it'll still compile fine but start to crash at runtime, and "compile type safety" isn't going to help me one bit. At the very least, *if* you advocate for compile-time type safety, then you should also advocate for never using `fatalError()` to signal "not implemented" for required protocol methods, because it defeats the whole point of your stated goal.
I had an app idea in my head and that kept me motivated. Literally learned Swift as I went on making it. If you know what you want to make, I'd suggest starting right away.
Why not just use nibs, then?
Strange, my GCD code wasn't able to print which ends in 600ms. Love to see how you make it working and swiftc commandline? 
Here's what I had. `triesQueue` is for running the work in parallel. `totalQueue` is for making sure only one thing is incrementing `total` at a time. `semaphore` is for making sure the program doesn't end before the work is finished. let strsize = 10_000_000 let tries = 100 let longString = String(repeating: "a", count: strsize) var total: Int = 0 let triesQueue = DispatchQueue(label: "tries", attributes: .concurrent) let totalQueue = DispatchQueue(label: "total") let semaphore = DispatchSemaphore(value: 0) for i in 0..&lt;tries { triesQueue.async { let data = longString.data(using: .utf8) let base64 = data!.base64EncodedData(options: []) let count = base64.count totalQueue.async { total = total + count } } } triesQueue.async(flags: .barrier) { semaphore.signal() } semaphore.wait() print(total) 
[screenshot: adding protocol and optional parameter](http://imgur.com/ozWHRf7) I think I've got the first part. I named the method for valueChanged for segmented control to be VoteChanged. Does that seem correct according to what you were suggesting so far?
What you're saying makes sense - can you post the code?
In regular iOS projects I use storyboards almost exclusively (unless I am building a framework in which case I will do it in code but in those cases it is simple views that just tend to take up the full extents of a given). Recently I started doing custom iMessage sticker packs and in that case I do all layout in code. I tried storyboards and it was not working out how I wanted it to. Though it took a little extra time to learn how to do more complex layout in code it made it much easier in the end to get the results I wanted. As for advantages for either one, it really depends on your use case and your own personal preferences. The only way you will now which is best for you is to try both and see what you think.
Using CleverError's advice, I have updated my code above with GCD which end up using 1GB memory peak. Share in your repo would be ideal.
I would go so far as to say that multithreading is cheating - just need to use strings correctly.
Can someone explain what this means to someone without a lot of server background? It seems to mean that Server side Swift is going to get more things that it didn't have that other established systems have, and this would mean that it could be use for larger, different projects. What will this add to Swift Server that it doesn't have now?
Current server-side Swift apps (which at this stage are pretty uncommon) rely on interoping with low-level, platform-specific C libraries to perform all the essential things that server-side code does (ex. networking, security, sockets, HTTP). Once released, server-side apps can call these new Swift APIs and not have to rely on all that "hardcore C stuff".
The big four united. Awesome! I downloaded all four frameworks and tested them with basic stuff like routing, static folders, templates, databases, etc and they all provided a robust ecosystem for coding server apps. I liked what I saw. Right now Swift on the server is ready for production and next year will be even awesomer.
"Ready for production" [is a stretch](https://www.reddit.com/r/swift/comments/58bawr/who_is_actually_using_server_side_swift_in/d8z3wer/). It's fine for non-critical tasks, but it's really not ready to be the backbone of any serious server.
I mean, a terrible way to do this would be to define "not in" as: `text.unicodeScalars.filter { $0 == "@" }.count == 0`
Of course, there's more than one way to do this. But, I think the most straightforward would be to use the index method on the characters of the string. index is a method of the Collection protocol which will search _any_ collection for an element; it returns an optional index indicating either the location of the first match or nil of no match. There's an example of using this index here: https://developer.apple.com/reference/swift/string.characterview (look for "Marie Curie"). 
Is it really necessary to create a second workspace? Why not just open the storyboard in a second _window_ of the first workspace? The advantage to using just 1 workspace would be that then you only have 1 list of projects/files to maintain rather than 2.
On phone but I thought I checked if there was such an option earlier. Where do you find that feature/menu item?
Why not? What's lacking? I see no problem at all building Wordpress, Facebook, Twitter or even the same Apple Store in Swift on the server as it is right now. So, what critical tasks it's not ready for?
Read that comment I linked
Suppose you are in the workspace Xcode window. In the Project navigator (the list on the left), if you click a file, it will open in that same window (of course). But, if you alt-click it will open in the same window in an Assistant view. And (drum roll) if you shift-alt-click it, Xcode displays a wacky popup containing a kind of abstract representation of Xcode where you can choose one of a half-dozen or so places to open the clicked file. If you _carefully_ single click in that popup, the text will explain what the rather abstract picture means. In particular, if you click on the black panel at an angle on the left, it should say open in new window. Double-click that to actually open it in the new window. The reason i emphasised 'carefully' earlier is that I find it is too easy accidentally to double-click and suddenly you have a new window or tab. It is also possible to navigate that popup with the keyboard. N.B. some of this behaviour depends on your preferences. Open Xcode preferences, choose 'Navigation'. edited to add information about preferences 
Really excited about this. I've written a ton of backends and always end up resorted to (proper) PHP. Though it's always solid as a rock I've been wanting to graduate to a more "correct" language forever. I spent decent chunk of time looking into node js, python, and ruby. None of them seemed like huge wins to me vs PHP. I would love to though just focus on one language (minus the DB), really, really get to know it. Having proper swift on the server combined with native swift apps seems like a dream. 
Cool, thanks for this. To Apple, wtf designed such an intuitive UI? And fix the damn zoom in storyboard on macos. Shit. 
I think IB is good for noobs, but programmatically is better approach overall. Just make sure your layout code is clean. Recently I'm trying to find more organized method to do layout, here is a example. view.arrange( loginLabel, passwordLabel, button padding: .verticallyCentered(horizontalMargin:10) ) 
Sounds good.
Besides that you should use `contains` for this, it's also always preferred to use `isEmpty` over comparing `count` to zero.
&gt; "hardcore C stuff" :D
Copy pasta errors in it lol
Seriously, 8.0 is the first time I've experienced what people refer to when complaining about Xcode crashes. 
and font used for the code ... argh
It's been worse before, I think Xcode 3 or 4 still has the crown for worse version. It crashed if you looked at it funny
Well, at least I'm always thankful I arrived to iOS dev so late :D
Ok, wait, this was announced 10/25 and you've downloaded and tested them? I can't even find on the page the four frameworks what are they. It does look impressive the so many are moving so quickly on this. I'm no expert on the low level server stuff they need, but TBH, the "under the hood" tech involved here is not new, so it should just be an issue of taking the well known, well tested C stuff and writing the API part for Swift. Look forward to seeing more info on this. 
i would probably do ```try? get("A") ?? try? get("B") ?? try? get("C")```
Ah good point. 
Yeah... just tried that and that works and conceptually its better than a second workspace. But holy cow. Is it me or is this the most un-Apple way to do this?
I especially love the flawless and superb SPM integration! Oh wait. 
Ugh Xcode 3. That's back when I actually liked Microsoft Visual Studio better...
UICollectionView
Current server-side Swift platforms are just wrappers written around C code. This is a project to rewrite the low level C code in Swift. 
So, a push for low-level Swift code, hmmm. A few things A. I imagine this is going to be extremely cumbersome to write. int* thing = 4; in C becomes var thing: OmgDontUseThisSoDangerousUnsafeInsanePleaseDontUseThisForYourOwnSafety&lt;DangerousSuperDangerousType&gt;(noWhyAreYouDoingThisPleaseStop: 4) in Swift. Not an exaggeration, either. You'd have to write thousands of lines of `Unsafe` code with all the extra work to box/unbox pointers and memory in Swift. B. If they are going low-level for extensive server APIs, I can't imagine they are going to limit it there. I wonder what other unannounced low-level projects are being worked on? I'd love to see some serious low level rewrites of macOS software. 
Ok, I misunderstood. I saw the Vapor and other videos. When I saw the headline "new API announced" I though this would be something in the base that would be shared by all the other offerings.
What if you want to set other types? HTML, RTF, for example?
aren't those just strings? you can pass string, image, url and color through UIPasteboard: https://developer.apple.com/reference/uikit/uipasteboard#1654275
 Cool. Doesn't apply to mac thought. 
Totally. Do have a look at the navigation prefs because if you set things right, then you can double click a file in the file list to have it open in a new window. Or you can use File-&gt;New-&gt;Window and then navigate to the file you actually want after the new window appears. I don't know if you've seen it, but for the last several WWDCs, Kevin Cathey has done presentations on various aspects of Xcode, and he always has some pro tips, and he always covers that wacky popup and how to use it. I think that is a tacit admission that it is difficult. But, presumably in a year or two we'll all be writing Swift in Xcode on our ipads and beaming the app to our 'slab of perspex' iphones for testing and presumably setting breakpoints by speaking them to Siri on the apple watch. At that point in our future programming lives, we shall (nearly) join Doc Brown in saying, 'where we're going, we don't need windows.'
I'm not familiar with that method in particular, but googling tells me that it's a method on NSObject. Your variable is a Data, not an NSObject.
Go to the Xcode menu and choose Open Developer Tool &gt; Simulator (Watch).
http://masilotti.com/ui-testing-cheat-sheet/ Is a great place to start.
THANK YOU!!!!!!! Seriously you have no idea how frustrating this has been. All these tutorials talk about editing schemas, and selecting the iPhone 5s and trying to add a watch, or that you have to launch the phone simulator, then go to Simulator -&gt; Hardware -&gt; Device (which it isn't in). That being said any chance you know how to get the watch simulator to pair with the phone simulator? Apples error says to go to the Xcode devices window but there's no option in there to pair that I can find. EDIT: I got it working, I deleted a lot of the extra device things I made based on the other tutorials I was trying and I'm able to pair. 
No, HTML and RTF are structured types. The fact that they can be represented as text is no more relevant than the fact that PNG and JPEG can both be represented as bytes.
"Well yea ios development can be overwhelming specially for beginners," This. When it comes to learning Swift and iOS development there is so much that you have to absorb all at once before you can really start to make progress. I had zero programming experience when I started learning Swift, in the Swift 1.2 days, and it was incredible tough at times to not let my frustrations get the best of me, One thing to consider is switching up your learning resources. I know it took me at least a half dozen resources before I found the ones that were just right for me. Sometimes it can be frustrating to drop $20 or $30 on a book or course only to have it not be what you wanted. But its not worth trying to keep using them if they really dont work. Trial and error will be a big part of your learning journey when you are doing it all on your own. But you will get there if you keep at it!
Hi! Thanks for your feedback. How about this approach? https://github.com/devxoul/Fallback/pull/1
OH MY GOD I got it. Not sure why this idea didn't come to me earlier, but I just put the cell group and index.row into defaults, and set that as the title for the defaults for the of the TimePicker. Thanks for the response, time to figure out how to actually implement notifications :P
Then you miss the possibility to catch a possible error. You just know something failed, but not why. It might work in some situations, but isn't a universal solution.
Amazing list
Yea I have a similar question. Ive always never used the storyboard (nore even put code in my viewcontroller). What is it used for? Right now i do everything from scratch and its a lot of work...
Retro Game inspired by hyper vanguard force using force touch and having proceduraly generated missions.
When you say "everything from scratch" what do you mean? Is it anything like what was done in the video links I posted? There's a few tools that help with layout. I'm looking at constraints right now but I'm still a bit new to swift. Someone posted a few 3rd party layout tools.
The problem, presumably, is that you aren't able to stick a view above the tableview when it is all inside a tableviewcontroller? You've got a couple choices: 1. Create a UIViewController subclass (I'll call it TagTableViewController). Inside the tagTableViewController instance's view, put your instance of ParTagPicker, and put an instance of a UITableView. Make tagTableViewController the datasource/delegate of the table view, implement all the necessary code. Yes, you lose all the stuff UITableViewController does 'for free', but you gain the ability to have the parTagPicker above the table view. 2. Create a UIVIewController subclass (I'll call it TagTable2ViewController). Inside the tagTable2ViewController instance's view, put your instance of ParTagPicker and a container view. Set up the container view to contain your UITableViewControllerInstance (ie you are making the table view controller a child view controller of the tagTable2ViewController). Your table view controller continues to manage the table view, probably the TagTable2ViewController manages the ParTagPicker and performs some coordination between the two. Personally, I quite like the second. It does require a little extra fiddling to get it set up, but I think it is less work in the long run. The biggest advantage is that it is an obvious way to split up the functionality and not just dump everything in a massive view controller. 
No i mean i literally delete that view file. If i want a button, i make images for it and do the clicking of it through touches began,moved, ended, etc (which sucks). i guess my question is, can you incorporate things from that file into a scene file?
I think it started out good and then the level making business never worked then the image asset packing was changed in every version and broke apps. I still like it but I sure with it was cross-platform.
Ok, I don't know about that. Maybe someone here knows more about that.
I don't understand your question. The iOS device has the sensors on it that can detect sound. Swift as a backend wouldn't have direct access to the sensors. Why wouldn't you just use the iOS device to listen to the sensor and then connect to the back end to record the results. Seems like a straight forward distributed data collection app with backend. Swift as the backend shouldn't have any problem with that. A simple data store is all that is needed.
Got the first code (KJFFLWTREPRP), app keeps crashing when opening it. 
Do not worry about the power of the Mac mini. It is strong enough to allow you develop even complex applications using the Xcode. Although, it would be recommended to have enough memory. Something that you can add later on.
Cool, I'm okay with making upgrades as necessary, $500 is just a big leap for me to get started but it sounds like it'll be worth it. Thanks!
Haha yes i know. I meant it can run complex applications in the simulator
Also don't forget it's 100$ a year for developer account (only if you're releasing to app store)
Looks good. I was trying to think if it could allow greater control in each `catch` block to do some logic on the error and change the flow. Perhaps the error type could encapsulate a swift error while also encoding some control flow logic. For example, get("A") could throw a FallbackError with with an `error` property as well as a `type` such as `continue` or type `break`. That way the flow could be controlled by the errors, and skip the the remaining `catch`s and proceed to the `finally` 
You are welcome! 😊
Huge range. Depending on the level of experience, location, and industry, anywhere from $40k - $120k USD annually in the U.S. plus standard full-time benefits. In typical cities with a bachelor's degree and some hobby experience, $65k-$80k is probably in the normal range. If you've been involved with successful releases for big companies, you could possibly double that as a team lead. For one-off projects or contracting work, hourly rates can range from $60 - $120 (without benefits). If you're represented by a big consulting firm working on an important project, it can double. If you're working for an H1B-heavy contracting firm or overseas, you'd be lucky see half. I've found glassdoor.com to have the most accurate information. Search for specific companies and filter by "iOS" or "mobile".
Cool thank you so much for that information!
Onboarding is a good idea! Also, crashing is bad -- I have my own reporting tool, but only use it during alpha testing. Just like the guy above, would you be willing to un-install and install 1.0.2? Are you on iOS 10? Thank you!
That's a question I'd be very interested in to hear answers to as well. 
Are you on sierra?
See http://stackoverflow.com/questions/40298656/xcode-8-1-missing-10-12-1-sdk-when-trying-nstouchbar I'm getting the crash as well...
There is a thread over at [r/iphone](https://www.reddit.com/r/iphone/comments/58n7yw/new_app_discovery_thread_for_october_21_2016/?st=IUTF21YI&amp;sh=a799c454) 
There is a thread over at [r/iphone](https://www.reddit.com/r/iphone/comments/58n7yw/new_app_discovery_thread_for_october_21_2016/?st=IUTF21YI&amp;sh=a799c454) 
building [Moodnode](http://moodnode.com) 's ios app with swift
Ok. That did the trick, just make sure you've got today's Sierra update (build 16B2657) and the update of Xcode 8.1 (build 8B62) and you should be good to go. In XCode &gt; Window, there's an option to show the TouchBar. Happy experimenting!
Thanks for the link, I didn't know about this thread.
I looked at the thread and it looks like a general promotion thread. This is one way to get people to download your app, however, it's not really marketing. Marketing would be an analysis of your product and the market that you are trying to reach. Then come up with a plan on how to execute that plan. Most can't afford to have this done, so they opt to try it themselves. I've always been interested in what people do and how well it works.
Working on a catalog of swift packages intended for server-side Swift development http://swiftpack.co. I've written a github crawler that indexes only packages that can be used for for backend development, basically meaning that they'll compile on Linux.
Try running a Facebook ad to you're targeted audience.
Whats in your podfile? 
[https://github.com/danielgindi/Charts](https://github.com/danielgindi/Charts) In my pod file: pod 'Charts' then a I do a pod install and get : Installing Charts (3.0.0) Open my project and get the warning to "Convert to Current Swift Syntax? The target "Charts" contains..." If I convert it, there are 999+ errors. Any help would be great.
Hrmm, that sounds like it should all work. This is partially the reason I moved to Carthage, because it just works all the time.
Have you updated to the latest cocoa pods? You could try using Carthage - CocoaPods and Carthage can coexist, and it might make it easier to transition over. 
Damn, that actually worked! I forgot about updating cocoaPods itself. 
Hey, I've created an app using tvOS back in june, so using swift 2.3 and xcode 7, and it worked similarly to installing an app to the phone. Unless Apple changed the process drastically, you should be able to open your project, connect to the apple tv, choose your device instead of a simulator in the toolbar, and the program will install on your apple tv. Are there any errors popping up during the process? Is the compiler giving you a reason it isn't able to install?
RandomKit v2.0.0 has been released with support for Swift 3 and includes other changes. Generation of `Int` values would cause an overflow if `max - min &gt; Int.max`. Now you can create a random `Int` within *any* range, regardless of the distance between `max` and `min`. RandomKit is also now Linux-compatible.
Do you know what the general pricing for that is?
Marketing your app is very hard. I've done it and been successful. Once you know the key to marketing for apps, it becomes a lot easier to get more downloads. Heck, when I first started I was only getting 100's of downloads. I have around 43M downloads + under my belt.
I believe Charts is now swift 3 on the main branch. In the project navigator click on the Pods project, click on the Charts target, go to build settings and search for 'swift'. You'll see something called 'Use Legacy Swift Language Version'. Make sure that is set to no. Also, consider adding this to your podfile. It basically does the above process for you automatically every time you run pod install. ```post_install do |installer| installer.pods_project.targets.each do |target| target.build_configurations.each do |config| config.build_settings['SWIFT_VERSION'] = '3.0' end end end``` 
Do you mind sharing how you started? I mean if i got 100 downloads i'd be freaking out! What did you do when you first started out?
You can actually do both `(0 ..&lt; 10).random` and `Int.random(within: 0 ..&lt; 10)`. Most of the protocols have `Type.random-` as part of the style.
You decide how much money you want to put into it. If you put more money in, you get more impressions, which equals more downloads if you have good content. Try a small amount like $10-$15 and see what happens. That's at least a couple thousand impressions. Should result in a few downloads at least. If you do advertising right, your audience will work for you, and share your content so you don't have to pay so much for ads.
I've this at the bottom of my Podfile: post_install do |installer| installer.pods_project.targets.each do |target| target.build_configurations.each do |config| config.build_settings['SWIFT_VERSION'] = '3.0' end end end Also, check that you're on the newest coaoapods version.
surely you mean sierra? el cap is previous version of macOS
Yes! That is what I meant. I'm losing track.
Specifically Sierra 10.12.1
Just opened-sourced my [iOS game](https://github.com/JasonMcCoy/BOOM-Bound) for both iPhone and iPad which is currently in the App Store. Check it out! [BOOM Bound](https://itunes.apple.com/us/app/boom-bound/id1169358607?mt=8) is a Fast-paced, Real-time, Strategic Movement and Pattern mobile game. The goal of the game is to have the player maneuver his/her character in and out of deadly explosions to get to the beacon on the other side of the map. These levels have been refined, played and battle-tested over and over many times giving the perfect balance of difficulty and enjoyment. Edit: Sorry, didn't know this was for Swift-related projects... This is a game built using Unity.
Awesome! So I tried this last night and it totally worked! Thanks! I was probably following the wrong tutorial, but this worked great! Thank you(:
Hope this is helpful! I add this to every project now, and as I work through the App, I know exactly where I am in the App LifeCycle.
I think there's already a few apps that do this. Try searching the app store for 'hotkeys'. and you might find something.
Just a couple of nitpicks: 1) Disappear is misspelled in several places. 2) viewDidDisappear calls viewDidAppear on the superclass.
Add a return to your default case. The function know that there are some possibilities where a cell won't be returned. Your function doesn't know that there are only two cases in the tableview cell. So, you could add a default case that returns a cell, or change this to an if-else for the logic. 
That `?` is probably a placeholder for a character in an unexpected encoding (or erroneous garbage data). Go through the `dataWithColumn` approach you described and when you convert to a `String`, either try a number of different encodings or use the `String.decodeCString(_:as:repairingInvalidCodeUnits:)` method, specifying `true` for `repairingInvalidCodeUnits` to replace invalid characters with the Unicode "invalid character" symbol.
A few style pointers: - It's not necessary to explicitly refer to `self` unless you're inside a block and want to refer to the outer self. - Swift style prefers to avoid redundant class and type names in variable names, so `viewControllerLifeCycleState` could be renamed to `lifeCycleState` - It's not necessary to explicitly refer to enum type, so `viewControllerState.initializing` could be changed to simply `.initializing` So this: `self.viewControllerLifeCycleState = viewControllerState.initializing` could be rewritten as this: `lifeCycleState = .initializing`
Could wrap the logging in `#if DEBUG` ... `#endif` Or use the new logging infrastructure introduced in macOS Sierra / iOS 10, given that that's supposed to be very low cost. Though I've yet to try it myself, so I'm not sure whether they've got it all neat and tidy in Swift yet (at WWDC they were saying the Swift API was coming soon). 
Hey Mazen, Thank you for responding. What I need to do is create a swift file class named Calculator,Has public variables of the type float called numerator, denominator and total. Has a method called 'Add' that returns the sum of numerator and denominator and sets the total variable. Has a method called 'Divide that returns the division of the numerator and denominator and sets the total. The 'Divide' method should contains a 'try/catch' to ensure that dividing by zero is addressed. This is what I have so far: import UIKit class public Calculator_"=" var numerator : Float var denominator : Float var total : Float func Add();-&amp;gt; Float { total = numerator + denominator return total } ; func Divide(); -&amp;gt; Float{ do { total; "="... class ViewController: UIViewController { 
You register each xib using the method you've already mentioned, but use different reuse identifiers. Then in your cellForRowAtIndexPath method, you decide which xib to use.
Alright but what about being able to collapse second level comments?
thank you!
thanks it works now, though i had some weird bugs which were fixed by using the storyboard with multiple prototype cells instead of my xib/nib file. 
A i5 MBP from 2015 will do fine, thats the one I use on a daily basis. The 2016 models are quite a bit pricier and don't really add much. 
As an aside to this: if your getting into programming and development as a whole, I promise you'll have a minimum of 5 things open all the time. 
Could each cell have a collapse button and the action be tracked and implemented using a tree in the code.? 
I've been using the 11" for years and it's just fine for programming.
Nope. And I usually have Safari (with a couple of tabs), Mail, Xcode, Reveal, Tower and an iOS simulator open at the same time.
New 13" has speaker grills which the previous 13" did not have. 15" did have them though, that's probably a large reason why you noticed a difference in quality.
I'm still doing all sorts of development on my MBP 2011 17" with no issue including parallels for .NET dev and having no issues. If you are looking for a small laptop like the 13", a good docking solution might be a good idea for when you are at home or work and need to work for long periods of time. 
Maybe it depends on what you're used to. I do 99% of my programming on a desktop. I have a 15" MBP and it feels super cramped. I spend all my time hiding and showing the sidebars and inspectors and assistants.
The monitor shouldn't be a problem, my parents have an old 2010 iMac lying around that i can use. I'll most likely take the RAM up to 16, given that its quite an expensive machine, and i'm counting on it lasting me at least 6 years.
Oh oh, what games? I love arcade stuff!
Yeah fuck that guy for having an opinion. 
Thanks for the suggestion! However the pre-order tree transversal seems to be a bit much for me. Do you happen to have code you could share with me?
This seems to deliver some of the benefits of JSX from React, which is most welcome – very impressive!
Ok so I will toss my hat into the ring. Ram is fine at 8 gigs esp with the compression they do with ssd. I suggest get the new base 13 then get a nice array of displays to dock when your doing ui work. I rock a old 15 retina that I am retiring for a new 15 when it shows up. My so is going to be rocking the 13 base. For anything code related you could as people have said use a m3 12. Xcode is a giant text pad or sublime 3 on roids. The compile is all that is CPU hungry. The new dif compiling cuts that down even more. So get what you can afford and will let you accessorize. Then build something that changes the world. Remember a machine is just a hammer does not matter how fast or shinny it is you have to swing it just right to build something. So build something and don't worry about your machine. 
Yeah, the base 2016 MBP should suffice. My usage isn't too intense. I make small(for now) Xcode projects, Music on garageband and word processing/spreadsheets/presentations on iWork. As for the RAM, been working 4 and have had little problem so far. And since i need the machine to be light, i thinks its a solid choice. And while the touch bar seems quite interesting, i don't really need it. Thanks for the reply.
Yeah. I gotta say the 4K dual support on tbolt 3 or 1 5k is what sells me on the 350 more the new machine. I don't have those yet however the price on those displays plummet. The machine I rock now is locked out from this goodness of pixels density. This is mostly for comfort and vanity. But if you can't have a little comfort staring a screen for hours then why be in the industry :) 
You absolutely go for the bigger screen. Don't even think twice about that one. You can do some googling, there is data out there that says bigger screen for sure improves programming output. 
SquareSplit by Electrostatic Games https://appsto.re/us/v61Xbb.i And Square Stop by Electrostatic Games https://appsto.re/us/l0HNeb.i Tell me what you think!
Cordova. Or a Cordova derivative. 
Saved! This could be really cool for learning Swift! 
Yes! I'm glad you see the resemblance :)
Sadly iOS 
I'm usually on a late-model 2011 MBP, upgraded to 8GB RAM. XCode and Safari are always open and smooth. I never have problems. More screen would be nice, but I can take this anywhere with no issues, and have gotten great at using "Spaces" with the 3-finger swipe. With only the information that you posted, you're going to have power to spare. Enjoy!
I feel like you could take things ever further with optional named arguments and enums being used to enforce safety. 
Shame this isn't a feature of Swift. Swift integrated into Numbers would be amazing. 
agreed. I upgraded to an iMac due to the lack of screen space on the 13"
Yeah that's good enough for programming. Programming really doesn't require anything very special - most of it is personal preference.
Yes! It is probably the only major problem with the computer.
What do you mean? Sounds interesting. 
Nah, other text would be if the user wished to define a custom (nonstandard) attribute, a semi stringly-typed escape hatch (so to speak). e.g. link(rel: .code, type: .Other("source/python"), href: "./embedded.py").render() As for enums, to be frank, thats the sort of thing where you really need to use code generation to do it efficiently. 
What's the rendered string of that line? That will help me understand. 
 &lt;link rel="code" type="source/python" href="./embedded.py"/&gt; I apologies if its not completely semantically correct, its been a while.
Ah I totally see it. No it's my bad, I only did python in school and I've never used it on the web so I didn't recognize rel="code". This is great. Even just "code" to .code is one less thing you could mess up typing 
If there are more than one, and you want to delete them all: comments = comments.filter(){$0.id != "123theIDyouWANTdeleted"} If you're targeting a certain object: if let index = comments.index(of: "123theIDyouWANTdeleted") { comments.remove(at: index) } If you're just referring to a way to remove objects that have duplicate IDs, there's a few ways to do it -- a FOR loop would work, or just turn your array into a set and then back into an array. 
i did, but no one has replied.
Keep creating, reading, searching. Apple's documentation, SO, Github, Apple Dev forums, etc. Yeah, sometimes you'll invent the wheel before you knew it existed. But that's okay!
Check out swiftyJSON. 
Second! My work is looking to make something like this. We do a lot of wi-fi hotspots so an easy way to manage them all would be nice.
Thanks for the review i thought 10 was a good price but not even a demo was provided.
No need for 3rd party frameworks. Read this how-to-json guide from apple. https://developer.apple.com/swift/blog/?id=37 Try out their code in a playground. Read the documentation of the used methods. Ask if there is something you still don't understand.
(I have no idea if what I am about to say is interesting or bollocks...) I have never _not_ been a developer, so I don't know. But, I wonder if you have actually tried doing the necessary setup for that entitlement string? It could be that you'll get a message saying you have to join the dev program, or it could be that it works. Again, I don't know the answer, I'm just wondering if you explored any further than getting the error. You may be surprised or disappointed, but at least you'll know. So, you can either sit around and hope someone else answers for you, or you could just try stuff. Usually it is best to just try stuff because you end up learning other things, even if what you set out to discover turns out to be impossible. TL;DR: you can wait for someone to give you a fish and eat for a day or you can teach yourself to fish and eat for a lifetime.
Thank you for your response! I am looking to delete the comment with the same id and the least amount of levels (Comment is 1 Comment of comment is 2 Comment of that comment is 3)
Yep, it's pretty much an 'oversight', especially since it tries to connect to a tracking API. I'd say avoid, maybe also report for spam.
Simplifying Mutual Funds investment for a client.
I think you can benefit a lot reading this post of Orta Therox of Artsy http://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/
That doesn't help how. 
Their examples are easy to figure out. Heck, I figured out how to use swiftyJSON... the trouble the last time I looked was swift 3 compatibility needed pull requests that weren't accepted yet. 
brilliant will give it a read! 
You could try again, they might have missed your question.
Oh fuck, the refactoring features barely work in Objective C. At this point they just keep breaking more stuff with every release. 
No higher-kinded types
Like a Pokémon? TIL there are over [100 species](https://en.m.wikipedia.org/wiki/Swift) of swifts. So yeah, they've evolved quite a few versions. 
(wonder why this question got downvoted... huh) Yep, a Keyboard Maestro-esque utility is what'd be ideal; a utility that sits on the status bar out of the way, just providing a set of keypresses/macros/applescripts when certain applications are active in the foreground. I'm guessing that if it can be done, it will be done by someone. But as to whether Apple will allow it (ie let it on the Mac App store and not actively break it with OS updates) I guess that's another matter. I emailed Craig Hairdo at Apple (whatubout legacy apps, dude?), he has yet to reply. Man, I just want to be able to use After Effects and Blender on my Mabook, and the sticking point is not graphics or memory or CPU, but the keyboard. You need a way of using a numeric keypad. Up until Sierra, there was a simple way - a util called Karabiner let you use Fn + UIOJKLM&lt;&gt; in the old traditional "accountant's Thinkpad" way - but it's now broken. Yeah, you can plug an external keypad in but that kills portability and spontaneity. Might as well carry a mouse around with me too, if I've gotta plug shit in. As an aside, I wonder if Apple will release a separate keyboard plus Touch Bar for use on Mac Pros - that'd certainly help adoption of the new HID. As it is, most software companies are going to be looking at a reasonable amount of work to add this alternative input method that's only going to be of use to a relatively small chunk of their customer base. (edit: spellig)
They should have called it Albatross: http://www.famousscientists.org/how-far-can-birds-fly-without-needing-to-land/
I thought it was a swallow.
I'm starting Hacking with Swift today, absolutely no programming experience. It's using swift 3.0 so i'm not sure if that will matter. How do you suggest learning together? like sharing where our projects are at?
I suggest you setup a github repository and use Skype to stay in touch. 
Build successfully Create an archive of your project Extract .app from archive Create .ipa from your .app (Manual) Use ifunbox to install .ipa (using USB) 
Yup. This. The second you get into async areas, the current try/catch system falls apart
Explain?
But result types are so much easier to ignore or overlook. I appreciate both not having my code cluttered up with error checking and the ability to coalesce multiple error handling blocks into one.
I think I saw a proposal for swift 4 where you can specify the types of errors that can be thrown!
Giving this a go, but having two issues straight out of the gate: 1. Swift versions of app AppleScript dictionaries are not compiling. 2. Of the Adobe Creative Suite apps, only AfterEffects appears in the list of available apps. 
FWIW the reason typed throws isn't there currently is that it's one of those features that causes huge problems for unsuspecting library authors, but they tend to only realize about five years too late. It turns out predicting what sorts of errors you'll encounter N major updates in the future after M big refactorings and a new backend and whatever other changes is deceptively difficult (partly because people tend to think "well I'll just be really careful with the initial design and we won't need to make any major changes to it!").
I think you're pointing out the wrong issue. `try/catch` is fine - Swift is just missing better support for callback-style async. If Swift could have even `async/await` it would be much cleaner. Are you saying you would like promises to be built into the language itself? Have you worked with coroutines?
Sure thing!
Except ScriptingBridge is crap in ObjectiveC, and even more crap in Swift. A native third-party Swift-AppleEvent bridge can provide multiple benefits over SB: * Proper support for optional/keyword parameters in commands. * Better integration between Swift and Apple event type systems. * Static glues have no initialization overheads (SB takes 10-15 seconds to generate a dynamic glue for Adobe Indesign), and can be easily amended to fix any faults in the app's dictionary. * Users aren't utterly reliant on useless idiots at Apple to fix known defects and omissions that have plagued, frustrated, and ultimately driven away SB users over the last decade. Scriptarian's Apple event bridge is pretty lousy (as first attempts usually are), but here's the docs for my SwiftAutomation bridge which both speaks Apple events correctly and takes full advantage of Swift's particular featureset: https://hhas.bitbucket.io/
This looks like a (somewhat simplified) Swift port of [Hiccup](https://github.com/weavejester/hiccup), which I love, because Hiccup is one of the few libraries I've ever used which is perfect in both design and implementation. I wish custom tags were easier (so I could use it for XML), and I wish it had the id/class shortcut, but otherwise this looks great.
Thanks for choosing Hacking with Swift – let me know if you hit any problems! (I'm the author.)
exactly! yes, i like those ideas and will explore that. i appreciate the suggestion :)
very valid points. thank you so much for the suggestions! i agree with you and ~~will~~ did make those changes
Xcode is absolute trash. While I don't blame Cocoapods, it really is a very poor package management system for probably the richest sector of programming in the world. I really wish Apple would do something to implement a superior system. Do/try/catch isn't the superior option to Result. I almost want to go write my own development cocoapod that wraps all of Apple's throwing functions into a Result. I hate how Xcode imports everything and it clutters the autocomplete system. There's no reason for Xcode to suggest that I should autocomplete with Darwin POSIX code that won't even compile on an iOS target. If I want Darwin POSIX code I should have to import it. There's a happy medium between Java's 80 import statements on each file and Swift's `import EVERYTHING`. I feel too restricted to type safe things. I wish there was an option to be non-type safe if you wanted to be. Protocols, protocol extensions, structs, classes and interoperability with ObjC are ... unsatisfactory. I always start each project trying to be a good Swifter and write everything with structs and protocols but after the 40th "you can't override/declare/inherit/apply protocols/extensions/structs" failure I always give up and go back to good old towers of inheritance through subclassing. They really need to back port features to ObjC. Not being able to use Swift features because your iOS base classes can't support them is incredibly frustrating. Initializers are too burdensome. I now take an approach where I don't even bother with initializers. I regularly just create my own `setup` function that does what an initializer would do and declare all my variables that can't start with a value as implicitly unwrapped optionals. That or just create static functions that return the type that would be created in an initializer otherwise. Things are a bit too academic in Swift. There are four types of ranges. There would be two, but only having two would limit you from using the value 2^(64). There was literally no other reason to duplicate the Range code base other than to make it possible to include the value of 2^64 in your ranges as sharing the code for `0..&lt;2^64` would disallow `0...2^64`. One number that has likely never actually been used in the entire history of Swift (other than a shorthand for really-big-number via Int.max) was important enough to the team to duplicate the Range code base. 
Yes, I'd like to see promises/futures as the default style of handling asynchronous calls. 
While there are a lot of big problems with swifts compiler etc. The thing that bothers me to no end is nil. F your proprietary version of null Apple. 
Nifty! And I'm not sure, but `(html [:div#foo.bar.baz "bang"])` is just so darned convenient in Hiccup. Swift doesn't really have a syntax that allows that, though. Off the top of my head, maybe an optional unnamed initial parameter, like this? link("#foo.bar.baz", attributes: ["rel": "stylesheet", "type":"text/css", "href":"./style.css"]).render() // &lt;link id="foo" class="bar baz" rel="stylesheet" type="text/css" href="./style.css"/&gt; I just came up with that in 2 seconds and haven't tried writing a program with it, though, so I have no idea if it's a *good* idea or not.
1920x1080 is standard, Apple TV 4 doesn't support 4K. I think it'll scale down for 720p and 480p. So I *think* you just need to provide a 1920x1080 image, and it'll do the rest.
Yeah, I agree, I really like the idea (and payed $10 for it) and I really hope he keeps developing it. I think $10 is a pretty fair price for it, even in the state it's in, but... If the *first* thing I notice about this app is that it's more than twice the size than the developer claims that it is, I'm bound to get confused. I can't see *any* reason for a developer to claim a thing like this if it's not the truth. Then I notice that it's kinda slow, but hey, it's a work in progress, so I really don't mind that. And it's probably faster if I compile it first... Oh, the second claim about the app *"Scriptarian can compile your scripts into native executables"* is ***also not true***. I seriously can't understand why you would advertise features that isn't working in the state you are selling it. And apparently it will work in the next update, then please *write that it will work, not that it actually works*. I *still* think that this is a great idea, and worth my $10, but it really needs some tweaks on how the developer is trying to sell it. **First**: don't make obvious false claims ("it's less than 150 Mb" when it's actually 412 Mb), write that "in the next update it can compile scripts into executables" instead of claiming that it can. **Second**: The example scripts that come with the app really doesn't showcase it's possibilities. I'm not that interested in getting a second way of seeing how big my local iTunes music folder is, when I can just right click the folder. Another example was change transparency in iTerm-terminals. Thats a so much better example, so more of those! And that brings me to... **Third**: there are nifty automator scripts out there! Show examples of how those would look in this swift version! I've seen one where you can search on a specific web page for what you have in your pastebin - those are things that would make me much more interested in trying things out in this app. Lastly, I understand that developers need to get paid and all, but I also noticed that the idea, sort of, is to have users share clever scripts with other users. I think that is pretty crucial for an app like this, and I'd say it would be a better idea to share this for free for a while, without the compile feature, with it's early bugs and problems that are inevitable. Get some people to share stuff, get feedback, ideas. Then charge us $10 when there are some cool scripts, with more features. Then I won't mind that it's 400 Mb.
https://developer.apple.com/tvos/human-interface-guidelines/visual-design/ Read this. Design around 1920x1080, for now. 
I really wouldn't - thats still the same old callbacks with just a tiny bit of syntactic sugar. I want my asynchronous code to _look_ synchronous, but not behave like it. We've achieved this at [Zewo](https://github.com/Zewo/Zewo) by using [libmill](http://libmill.org) (single threaded coroutines) which has worked well, leading us to clean code and great performance with easy scaling. I hope that Swift adopts a similar model to Golang or Erlang rather than Node. The creators of Swift seem to agree^(_citation needed_).
I'm new to Swift, so I never used 2. I do have some exposure to ObjC. I do like Swift better than ObjC--I also appreciate Apple's efforts to keep the APIs similar. I LOVE Swift's `switch` statement. I have to say I find myself using `switch` more than if/else, which I find to be more concise and clear to read. I'm not a fan of optionals. It feels like I keep having to use `?` and `!` everywhere (despite my best efforts), but that may be my lack of experience talking. It'll be very interesting to see where Swift is at next year.
XCode is very dated and could definitely use some modernization. Have you tried JetBrain's AppCode? I've been tempted to try it out, but it doesn't look like it has an interface builder. 
Yep, it silently failed on all Adobe Illustrator, Photoshop, InDesign OMM too, along with MS Word, Excel, Powerpoint, and Outlook. OTOH, it did find Adobe Acrobat okay, so I reckon it knows how to search subfolders okay. And it reported a parsing error on GarageBand and one other afterwards. **[long boring technical background]** It's possible Scriptarian's glue generator is doing something foolish, like not asking each app for its dictionary via the standard API but instead trying to fish out an .sdef file directly (not all scriptable apps use .sdef files; even if they do, you shouldn't spelunk the .app bundle yourself). Another reason may be that Scriptarian's dictionary parser craps out on larger and/or "imperfect" dictionaries, which are most common amongst Carbon-based apps (which have completely bespoke scripting implementations that are much more 'flexible' in their designs). Though even Cocoa apps that provide their AE support via standard CocoaScripting framework can have dictionary flaws that cause less robust/over-ambitious parsers to barf on bits they didn't expect. Scripting Bridge's `sdp` glue generator often craps out like this (and its error reporting is totally useless too), so it's hardly a unique problem. Basically, the _only_ information in an app dictionary that an AE bridge can safely use are the command, parameter, class, property, and enumerator names and their accompanying four-char-codes, because that's all that AppleScript ever uses. Everything else is there for documentation purposes only, and the completeness and correctness of that information varies accordingly. AETE and SDEF dictionary formats were never designed to be full, formal IDLs, and all that "class" and "type" information is nowhere near to being sufficiently comprehensive or accurate to construct a fully working interface. And Apple never provided app developers with a full and formal spec to adhere to when designing their scripting interfaces, so all developers could do was write something and test to see if it worked with AppleScript or not. And AppleScript's own dictionary parser is both extremely forgiving and not a little quirky, so any parser that tries to be more strict or which doesn't know of those quirks will invariably fail whenever it receives a dictionary that doesn't meet its [incorrect] assumptions. This is also why scriptable apps are always a pain to learn even when you do know how AEs work, because even a 100% accurate dictionary can't tell you the exact forms of specifiers which will/won't work in each command. So if human users have to figure out all the details by trial-and-error and asking others for help, what chance does software have? .. Incidentally, early versions of py-appscript also tried to be clever and use app dictionaries' extra inheritance/membership/type information to improve its detection and reporting of user mistakes by only allowing users to construct specifiers and commands that the dictionary said were legal. Good idea in theory; big failure in practice. It didn't do anything to improve user safety because scriptable apps _already_ reject invalid specifiers and commands, but it did stop users performing lots of perfectly legal operations that worked fine in AppleScript. Appscript subsequently ditched that design in favor of mimicking AppleScript's own behavior right down to its most obscure, undocumented quirks, which still took a couple years of ironing out in real-world use to get 99.9% right. So the criticisms I make of other developers' crappy AE bridges are most the same criticisms that me and my users aimed at my first crappy AE bridge until I threw out in disgust and redid it from scratch. **[/boring]** That said, even when Swiftarian does manage to generate an app glue, its functionality looks severely limited. All the Standard Suite commands are obfuscated over, and there's no guide to what their Swift equivalents might be, so you're pretty much guessing how to make/move/duplicate/delete elements, and even more stuffed if you need to pass any extra parameters while doing so. Standard get and set commands are likewise obfuscated, and don't appear to work on anything other than a single property. Most of the selectors used to construct specifiers (by-index, by-name, by-range, by-test, etc) look to be missing too (I saw `first`, `last`, and `all`, and that's it). As is the ability to apply a single command to multiple objects at once. If the idea is to get all elements and iterate over them one at a time as in JS+DOM then that is going to have terrible performance implications, as sending lots of simple AEs to perform a job is massively expensive compared to sending one complex AE that does it all in one. (AE IPC was designed to do very coarse-grained messaging on very high-latency classic MacOS systems, and its performance profile still skews accordingly.) Folks who want to get an idea of how Apple events' various query forms and commands are represented in AppleScript and [should] translate to Swift syntax might find the following comparisons useful: https://hhas.bitbucket.io/examples.html Honestly, I could spend hours and hours rattling off a list of fundamental design problems in Scriptarian's application scripting support that make it a non-starter as a real AppleScript replacement. But I've learned from experience there's really no point doing so unless the original developer is interested in listening learning from their mistakes, throwing out their first attempt, and doing it over again – and seeing as MattR already blocked me on Twitter and refunded my $10, I think that answers that. :( Maybe I'll have a word with Mark Alldritt sometime. His excellent Script Debugger editor already has an impressive and highly polished feature set – its one big problem is that there just aren't very many AppleScript users left to buy it. But a version of SD that does "scripting and automation" in Swift… I'd pay $100 for that in a heartbeat (and it'd still be a steal at the price).
I work on a fairly large app and are currently in our busy season where we favor stability above all. We planned to _start_ migration early February. Shiiiiiiiiiit
AFAIK, you can keep a certain version of Xcode and compile your old app version with it. Long term though, you should probably migrate.
Can i join you guys
Whats SO ?
Just converted a project -- the new syntax is great! Don't be afraid! ... unless you're like /u/crdnilfan and mid-huge-project.
Agree, syntax is good, but it seems with the generally unsuitable state of Xcode &amp; Swift at the moment, mere syntax is the least of an iOS Devs worries :(
noone is forcing you to migrate to newer xcode...
He said answer some questions, not ask some questions.
if you can do that for some random json api w/o a tutorial then you can do real paid for work. You might not be all that productive at first but you'll probably be able to do enough to make hiring you a breakeven proposition for the company for the first 6 months or a year while you get progressively more productive/experienced. For a junior in hot job market that should be good enough for least some companies to be interested.
Rarely here as well. Mostly when I want to break up a method with a bunch of jumbly logic without making the code accessible to other methods in the class. It probably would have been better in a separate util class. I could have also defined a couple closure within the method to get the same effect. But I went with nested funcs
Mandatory { curly brackets } irk me a bit but I understand why they did it and I can cope with that.
I usually do the same thing; take a small project and migrate it, mostly out of curiosity. Other than some changes with the way I interact with nil, and a hidden containerView issue, it was hassle-free.
Nested functions and nested closures are equivalent, only the syntax is different.
Is this with Swift 3 or 2?
Good point, this is Swift 3.
Awesome! I'll give that a try today.
Thanks for the doc!
Scriptarian 1.1 is now available with a fix (as well as improved app compatibility, performance improvements, and more).
Thanks for this video! I've been looking into using vapor for a personal project, and I'm glad the framework is starting to get some tutorials! Could you do one on database relations?
I would like to share my thought.. the code you have written in swift uses c style programming.. where as swift is known as functional programming.. you haven't used more powerful swift features like closure,lazy var, extensions,generators,sequence type. Maybe if u use this you will get different time and space complexity 
I definitely love Swift on the server, just need an idea to develop a whole app to test it. Perhaps a blog engine hosted on Heroku using Postgres?
Definitely! See my comment above about the simple web app I'll be showing how to build.
If they're nested inside `a`, then I'd say they're part of the unit `a`. Any variables you define inside `a` have the same issue.
Awesome! Looking forward to it! I'm a big fan of your site btw, i've been using it to learn obj-c and swift for years. I suggest it to all my friends who want to learn the language.
Op's not saying that you should "optimize" it - in fact, quite the opposite of what typically would be considered optimization - where a developer writes code closer to how the machine will read it. Swift and C constructs are at different abstraction levels, and if you use Swift in the way it was intended (at a higher level), maybe the compiler can do all the heavy lifting of optimizing, perhaps better than a human developer. That's the theory, anyway. Swift is designed in such a way to look very much like a higher-level language (Python, JavaScript, etc) but perform, basically, like C++ or better.
Hey Ray, love your website, it has become an invaluable place to learn Swift. Thanks for your contributions to the community.
You are right. I will definitely keep tweaking it and make it more *Swifty* while I go along learning the finer details of the language. (Which BTW I really like.) The nice thing is that I now have a baseline to compare all changes with.
Do you use storyboard? Then try this http://stackoverflow.com/questions/30301519/use-of-different-mode-like-scale-to-fill-aspect-fit-aspect-fill-to-handel
Awwwwww yeah, you gotta get swifty.
VimR with NeoVim backend: https://github.com/qvacua/vimr
I am currently finishing the last update to my [Put A Bird On It](https://itunes.apple.com/us/app/put-a-bird-on-it/id1166314424?ls=1&amp;mt=8 ) customizable sticker app. After that I will probably knock off a second sticker app before getting back to transitioning the rest of my existing projects to Swift 3.0 and building up my portfolio and GitHub for my job hunt. Edit: I am going to leave these 10 promo codes for a free download of that app right here. WHLWTJTW7E76 NAXK9JR6HXR3 76FXJWFRMWY4 YFHAMP7HLA3N NK77WJPEATX4 6F9M4RFPFLMP XMX9RW6WT4WR HWMWKLTE4F7H FAJRN69YTTLL M4EP9KWAXPN6
If we revisit this analysis in, say, two years, it will tell a more interesting tale. i.e. Apple will have more opportunities to **write new** apps and libraries in their hot new language. I can't fault them for not rushing to **rewrite old** apps and libraries just for the sake of dogfooding Swift. Even if Swift is absolutely stable and production-ready, if it ain't broke (and you can maintain it with "old" tools) then it doesn't need a rewrite. IMO.
Obviously rewriting from scratch an existing library doesn't make a lot of sense from a practical point of view. However, if Apple doesn't use Swift internally it also means the closed source part of the toolchain will have a lot of bugs, see how buggy is Xcode 8 with Swift for example.
Work hard and do share your results.. we will be waiting.. :))
Building a "Condom for your sex tapes": https://rumuki.com (a tad NSFW) Uses RxSwift heavily, just migrated to swift 3, seems like MultipeerConnectivity works smoother in the new SDK.
It's not like the OS is pure ObjC either. There's *a lot* of C/C++ code. Again, for historical and performance reasons.
Password Manager :-)
Can you elaborate on that?
It is really annoying. 
You should probably read the actual article. The point is that Apple uses Swift in too little places, nobody claimed Apple doesn't use Swift at all.
&gt; if it ain't broke (and you can maintain it with "old" tools) then it doesn't need a rewrite Nail on the head. I would expect any company, not just Apple, to take the pragmatic approach to Swift integration: if the app is working well enough, then it has a lower rewrite priority than newer apps. I would make the assumption that one day all apps will be in Swift, but not quite yet.
They're working on it but no real solutions yet https://forums.developer.apple.com/message/178157
Turning off "Find implicit dependencies" from Edit Scheme -&gt; Build solves this for me on my Swift projects. No more full project recompilations. It needs to be turned back on after clean or for archiving.
It needs to support SPM as well. The SPM generate xcode project only half works. I get that this is a bit of a transition phase, but xcode is in a really bad state. I just gave up with it and jumped to visual studio code and Vim. Where feasible. 
For saving my app settings, plists are enough for me. I just don't know how to access and read them properly without having to read them multiple times in different view controllers or using UserDefaults.
The lack of upgrade path from PaintCode 1 is why I don't use it.
I would email them. They are very reasonable people and will likely work with you. Have emailed them a few times, and they have always helped me out. 
At the time, I did. Full price for PaintCode2. An additional $100 just wasn't worth it.
I got 20% discount for my paintcode 1 license (bought through macheist in 2014). I emailed them. 
The issue was different, the today extension couldn't add my group in the entitlements file (as it was already noted in the OP), and I also had to manually add the entitlements file for my today extension at "build settings" -&gt; "code signing entitlements" (edited into the OP)
Swift isn't usable in processes that use the old Objective-C runtime (fragile ivars, setjump-longjump exceptions, old runtime API). The only processes left that use that runtime are 32 bit apps on Macs. There are unfortunately a decent number of apps that never ported to 64 bit, either because they're effectively unmaintained (games for example), or because their authors didn't think it was important. Frameworks can introduce "overlays" (Swift wrappers basically), which is how things like the class-&gt;struct switch for many Foundation types in Swift 3 could happen.
Change it from a subscription model to a one time fee and you have yourself a customer.
I'd love to have this but not at $100. I just wouldn't use it enough. 
Try the free trial. I use it for all graphics in my whole application. All icons, menu buttons, etc
&gt; Am i doing something wrong? Yes; read the "formatting help" on how to paste code ;)
It's really hard to judge what a good build time is for you. It really depends on your CI/CD pipeline. I'll give you a real life example that I worked through two weeks ago: I work on a shared codebase with 4 targets and various dependencies and cocoapods integrated with each one. The codebase itself is large, easily 100+ files and resources. After migrating to Swift 3/Xcode 8, each target took about 10 minutes to archive. I have a CI pipeline set up on Bitrise, and for the tier we pay for the maximum time allowed for a build is 45 minutes. (~10 minutes * 4 targets) + anywhere from 5-8 minutes to set up Cocoapods on the VM + ~2 minutes to upload to HockeyApp pushed us over the 45 minute limit. I needed to do something to get our build times down. I followed the guide I linked above to log the functions that were taking the longest to build. I noticed some pain points: concatenating strings with `+`, creating huge (20+ key/value pair) dictionary literals, etc, all of which were causing functions to take 10-15 seconds to build. Breaking down the more complex expressions, I was able to get even the largest functions in my application to compile in under 1 second (I think my max was about 800ms). This shaved 10 minutes off of my total archive time for all 4 targets.
Agreed, I think they alienated many customers with that decision. I would have appreciated even a small discount, but full price again for comparatively few new features, in a short space of time, just felt like a cynical money grab.
I would strongly recommend [Hacking With Swift](https://www.hackingwithswift.com/#pricing). The author, Paul Hudson, has been refining the book over the past few years and there is in an incredible amount of lessons, tutorials, and villains. It is well worth the money. He also has other books, like Pro Swift, that continue from that book so there is a huge collection of material from him that will give you a few years worth of learning material. If that doesn't seem like the right fit you can check out the Resource Section on my [Manitoba.ninja](https://manitoba.ninja) site for other recommendations.
&gt; A web app in Vapor is called a Droplet. I wonder if architects realize that these cutesy names only make things more difficult for people, as we have to learn new vocabulary for their library, for things that already have perfectly good names. In Objective-C it was passable because we had no namespaces, but that's no longer a problem in Swift.
You can still use swift 2 it's not that much different from 2 and if you're up for spending a little bit of money I recommend Mark Price tutorials on udemy 
If you want to store things available at compile time (app configuration, like server URL, etc) you should have either a Constants class or a .plist file (reading from a plist file is almost a one liner). On the other hand, if you want to store things generated during execution (like storing user preferences), UserDefaults is perfectly fine, it's secure enough. Furthemore, if you want to store sensitive information (like a token or password) you should use the keychain.
@16:40 @ 17:00 he fixes it... something about "it's no longer an NSObject..."
&amp;gt;A web app in Vapor is called a Droplet. Not to mention that DigitalOcean has already coined this term. Any time I see "Droplet" I think of DigitalOcean. Not sure why they chose the same name. 
&gt; that will give you a few years worth of learning material. Well, *years*...
Agreed. It's overpriced to begin with. If it were at a $30 price point I would upgrade but I am now stuck w a version 1 that while neat, I never had the chance to use in any real project. 
llbuild is new, and not currently used for Mac/iOS projects. It's possible that Xcode could switch to it in the future, but nothing like that has been announced that I'm aware of.
It looks like a subscription, not monthly, yearly maybe. I have bought versions 1 and 2, and I had to migrate code to swift 3, at least I would like to have swift 3 support in beta stage not two months later, plus pay 80% of the full price. Not helpful for me. 
Meh. I'm super disappointed in POP. Apple's support just isn't there. POP just doesn't work whatsoever with UIKit. 
I think it would be really powerful if anyone could add challenges for others to complete. That way it could be quickly populated with an even wider range of topics and skills.
Xcode 8.2 beta is much better in this regard. My whole team switched as soon as it became available.
Okay, thank you for this. I think I'll start looking more into UserDefaults.
Just putting the finishing touches on my real-time "therapy" app, Expresso. I started the project last week at a Hackathon and after winning a couple honors and getting lots of positive feedback, I'm trying to deploy soon. The idea isn't novel, it's essentially an anonymous chat application for students to vent about the stress they experience in their lives. I was motivated to create the app after a student at my university committed suicide from jumping off the 26th floor of a building. As long this app can help a single person, I'd say the grind was completely worth it. 
This is such an unique idea for an app! I wish you the best. The website and UI look amazing! I requested a beta :)
Microservices -&gt; rain
Stopped watching at 0:17 [Closures are reference types](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html#//apple_ref/doc/uid/TP40014097-CH11-ID104)
Like others have said. You can upgrade. Just email them. 
Then you should be disappointed in UIKit, not in POP.
Oh please. What's toxic about pointing out MattR is charging folk real money for a product that's fundamentally unfit for purpose, and that when this is pointed out to him he runs away and hides? His work is seriously flawed, but in theory fixable; his attitude, however, is not. As a power user (graphics pro) I've been trying to deal with exactly that type going on 20 years now, and they're the reason I finally rolled up my sleeves and taught myself to software myself: cos it's the _only_ way I could make sure the job's done right and _never_ have to deal with such arrogant, insecure, martinet assholes again. It's taken me a fuckload of hard work to learn how to it myself it too, cos I'm not a natural at this crap, but I've done it anyway and my good software has stomped their bad software into extinction as a result. And the #1 reason why my work has succeeded is because I know how to _can my ego_, _listen to my users_ every time they tell me my work sucks goats, and _genuinely thank them_ to for all their time and trouble and assistance in making it right. Users may not know or like me as a person, but they fucking adore what the tools I build for them empower _them_ to do. .. Meantime, millions of so-called "professional" programmers who can't take criticism from their own users—the _real_ domain experts—without throwing a ginormous shitfit in their diapers are the single biggest fucking blight on this whole benighted cowboy fuckup industry, and the #1 cause of why so much of the world's software today not only fails to solve users' original problem but shits a whole Imperial fuckload of excitingly inventive _new problems_ all over them too. So any special snowflake programmers who don't like my attitude can go spin, because I am exactly what you make when you piss off users long and hard enough. Congrats, _you_ created _me_, and you absolutely deserve it too. I only hope in future I can give many more users the tools to stomp all over your pathetic crap too.
I'm just starting to look into POP but it's so new it's not surprising there are gaps. Swift 1 had gaps, Swift 3 has gaps, that doesn't mean it's not getting better every year.
Not at all. In fact, that was one of the best patters that I saw people using when Swift was still in beta and I still use it to this day. It doesn't work for classes like `UITableViewController` or `UICollectionViewController` (or any class that conforms to the protocols for free), but I always encourage my team to abstract out delegates into their own extensions to keep the methods grouped together, especially for things like view delegates and analytics.
Nope, that's wrong. For value types, you get a copy of the original instance. Whereas for references, only the address is copied. That's why you must implement the NSCopying protocol for classes if you want to copy them - or if you want to ensure a deep copy is done for class type properties. See also: https://developer.apple.com/swift/blog/?id=10
ok thats a nice answer thank you i will try it. since you seem experienced, i set the estimatedRowHeight to 500, when will i encounter a problem? is there a limit to how long the cell can be? or does setting a value simply trigger a dynamic cellsize option? 
As the other poster said, I definitely do this too. However I'm not a professional. Though I find it kind of bothersome when there are like 4 files for one view controller, so sometimes I just keep the extensions in one separate file, with extensions for each protocol. I was coming here to post something similar that I will ask as an add on right now. When organizing code in a single class, is there any pattern that good coders like to follow? I put my interface builder outlets at the top, followed by other variables, computed then those with defaults then optionals. Then view did load/ did/will appear/disappear.. then just a fairly random but clustered groups of methods for particular features. What is the most appreciated practice of ordering code when you guys are reading someone else's code?
Just use an AVPlayer. You can have multiple instances playing at the same time. 
UITableView only knows the actual heights of the cells for which it computed the height, which are only the visible cells; it doesn't known the actual heights of all the others. So the table view doesn't know its total height. That's what the estimatedRowHeight is for: so that the table view can estimate it's total height without actually doing the layout for every cell. Afaik the only thing where you'll see that in the UI is with the scroll indicator, because it's position is computed based on the total height of the scroll view. If, for example, you set the estimatedRowHeight to 5, but your cells are actually 100pt high, the scroll indicator will move down too quickly (because the estimated total height is too low), and then jump back up a little when the table view knows the actual height of the cells that became visible. Anyway, setting the estimatedRowHeight on the table view is mandatory when you want to use autolayout in table views' cells, but it's not a big deal if your estimations are off.
It is absolutely not wrong. We just said the same thing. Assignment in swift is a swift managed copy operation. For value types, the value is copied if necessary. For reference types, the reference value is copied. Assignment always copies something. It is what gets copied that is the difference between reference and value types. 
Cmd-click and shift-cmd-o go a long way towards making either organizational scheme usable.
Yeah wow does a big storyboard ever get slow. I learned that the hard way. Your last line there just may have been eye opening. Where in Xcode is the symbol drop down? Because that sounds useful as hell. A year in and Xcode still makes me feel lost sometimes.
A picture is worth a thousand words... http://imgur.com/a/2sz7I
Great tutorials!
Thanks :) I'm mostly writing them to learn, but it's great to hear that somebody found something interesting in them!
ELI5 please, what's PusherSwift?
It looks like "Pusher" is a cloud/SAAS pub/sub service, and this is a library for using it from Swift.
Apple's left arm isn't taking to it's right arm. My gripe is with Apple as a whole here. The list of UIKit/Obj-C features that Swift can't operate with and the list of Swift features that UIKit/Obj-C can't operate with is bewildering. It's both team's jobs to make the two talk together, (and Apple's development team as a whole) not one or the other. 
You could use UIScrollView and re-invent the wheel if you need some really custom logic, or use the UICollectionView which is built on top of UIScrollView and will allow you to populate as many views as you want with a lot of built in functionality. Edit: UIPageViewController is applicable, though a little more unwieldy IMO. Simple placing a container into your main view and then a navigationcontroller would work as well.
https://github.com/garnele007/SwiftOCR 
Well, pub/sub services has nothing to do with developing swift apps directly. Just google "pub/sub service". Pub = publisher, sub = subscriber. If I'm right, the client "subscribes" to a channel with the help of a mom (message oriented middleware) where an "publisher" can send a message to everyone who is subscribed to this channel. They will than get a "push notification" of the publishment. Hope this helps. 
Dude, very helpful :) I don't need much, just a little bit helps!
I wound up using AVPlayerLayers
You can create your own miniature memory scope using `autoreleasepool`, like this: for _ in 0 ..&lt; 100 { autoreleasepool { // do complex work here } } That will release all your RAM after each loop iteration completes, rather than when the whole loop / method completes.
This is pretty useful
This aaronr_90 from the future which is now in the past. It doesn't look like it worked. Ram usage increase with every loop, up to 3 gigs. 
Holy crap you're awesome. I had a function that converted the image to an [unsafemutablepointer](https://developer.apple.com/reference/swift/unsafemutablepointer), which do not deallocate their memory once they go out of scope. All I had to do was add: imageData.deallocate(capacity: width*height) at the end of the function. Edit: Lots of formatting. 
I disagree with such criteria. It states a wrong view over the importance of learning the fundamentals and how they can be explained. &gt; regurgitates what the official Swift reference guide say Describing basic concepts (even an array literal) doesn't allow a lot of space for different interpretations. So yes: the Swift programming guide, the current article and many other Swift books are covering the basic concepts pretty much the same. The viable criteria is how comfortable the author can explain these concepts, provide edge cases, warn about potential issues. &gt; is really basic After years of Stackoverflow and equivalent platforms answering I noticed that considerable problems appear because many developers have big gaps in basics. I'm sure that articles that describe in an interesting and detailed way the language fundamentals are not only useful, but necessary. Especially that Swift is a new language and a solid knowledge base still has to be created. 
Thank you! There is always room for improvement :) I've highlighted the part where the article asks you to think about a few questions and separated them so you actually give them a few seconds not just "parse" them. The purpose of this article is to get you in the algorithmic mindset. I've also added a short conclusion and made the page easier to scan. 
&gt; I personally don't like the approach in the article, for no specific reasons really. I'm starting to feel protocols are becoming a huge circle jerk in the Swift community. They're not used to solve problems, they're used cuz protocols. The code gets insanely complicated for little value. Good luck getting someone else to maintain it, I know that inheriting a protocol/generics-ridden code base makes it really harder for me to get into the original programmer's mind. I really hate how Swift Protocols mixed with generics are starting to become this language's preprocessor macros. Sure, the end syntax is pretty, but you've lost an insane amount of time writing this, the compilation times suffer, and the code complexity breaks the roof. Macros got extensively used, and they devs started rebelling against them because maintaining them is hard. History is repeating itself with protocols. He says it himself: &gt;Of course we make a protocol for this, we’re Swift developers. Protocols are usually our first attempt at solving each problem we face. If protocols were chocolate sauce, we’d put it on everything, even steak. That’s how much we love making protocols. I think a lot of Swift dev should stop, and think about the value that going this way brings to their code. Sure it will be elegant *in the end*. But is it worth it? I often doubt it.
Apple Pencil note taking on existing maps. I'm using Realm and Esri's ArcGIS Runtime for iOS.
Why not: defer { imageData.deallocate(capacity: width * height) } as soon as you allocate the pointer?
There are some major tradeoffs between IB vs in code. IB becomes less easy/practical when you've got half a dozen developers,100k lines of code, and a lot dynamic/data driven/config driven UIs. What you see in IB and what you see on screen often bear little resemblance to each other, and you've got more issues w/ merging and w/ updating xcode versions in sync since IB updates your xml files. And if you want to see really DRY alutolayout code check out jmfieldman/Mortar. The most concise I've seen. One line expresses any arbitrary constraint, and often many constraints in one line. Some quick examples: //set veiw1's edges to view2's inset by 10 on top/bottom and 5 on left/right view1.m_edges |=| view2 ~ (10, 5, 10, 5) //set buttons sides(left/right) to view2's sides inset 5 [btn1, btn2, btn3].m_sides |=| view2 ~ (5,5) 
Then why not call it "Yet Another Overview of Swift Fundamentals"? "Mastering Swift" makes it sound like there will be something new or advanced on non-obvious here.
Nice question ☺. I agree that somehow "Mastering" may be interpreted as learning advanced topics. In the current context it means learning and becoming better by diving more into fundamental details. I actually plan a series of articles prefixed with "Mastering Swift:" that describe fundamental things, but in a more detailed overview. The first article was this one: [Mastering Swift: essential details about strings](https://www.reddit.com/r/swift/comments/56t1gl/mastering_swift_essential_details_about_strings/). 
I just finished getting that working, but I haven't found many good documentation sources. Might be a good topic for http://stackoverflow.com/documentation/ios10/topics
I mean, it's cool, but I have to ask: why extend a standard API to be non-standard when the usage could just as easily have been wrapped in another class? You can have an AppSettings object with real properties rather than having to call set with two parameters. In just as much work. And more readable for newcomers to the codebase.
Check out NSRunningApplication, it may have what you need
Thank you! This is exactly what I was looking for!
Thank's for this. 
Listen, I already have problems with the mistakes I **do** know I'm making to be concerned with the ones I don't.
I think it would be best to keep the values seperated. It makes no sense to load a bunch of values that you don't need (in a certain view or class). As for loading or keeping a variable: it depends on your application's flow. There is no golden path; it depends on how often you need it, and how often it changes. Personally I have always loaded them each time I needed them, but simply because my architecture allowed me to.
I agree
Keep them separated, otherwise you would have to implement fancy migration paths once you decide to remove or add a setting. Then create a thin wrapper around NSUserDefaults that automatically saves and loads from NSUserDefaults when you change a setting. Then use dependency injection (a fancy word for "assign it to a variable in the viewControllers you create/load"). public class Settings { fileprivate enum Keys: String { case timeout } public let userDefaults: UserDefaults public init(userDefaults: UserDefaults) { self.userDefaults = userDefaults let defaults: [String : Any] = [ Keys.timeout.rawValue : 30 ] userDefaults.register(defaults: defaults) } public var timeout: TimeInterval { get { return userDefaults.double(forKey: Keys.timeout.rawValue) } set { userDefaults.set(newValue, forKey: Keys.timeout.rawValue) } } } I would recommend against it, but you could also turn that into a singleton. Not relying on singletons will make testing easier though. 
There's one or two RayWenderlich screencasts by Sam Davies that targets iOS 10 notifications: https://videos.raywenderlich.com/screencasts 
Did you know how to do it previously? If so here is an example in iOS 10/Swift 3 we did in a meet up in my local Peruvian Community. https://github.com/IOS-Dev-Peru/DemoNotificacionesLocales Let me know if you need any help. Upvote? &lt;3 
&gt; but if you're extending a thing that you don't have the source to (say, you extend directly on NSObject), you would need to put the memory for the property somewhere else. And would that be very hard to code into the compiler?
&gt;Swift is claimed to be the first protocol-oriented programming language Which is pure unadulterated bullshit. First - its the wrong term. Misusing language no less. The concepts of this "protocol orientation" is actually called 'Traits' in every other language and was pioneered over a decade ago in...what else?...Smalltalk. The original papers are [here](http://scg.unibe.ch/research/traits/). Some Traits implementations account for properties. Some don't. Still roughly the same idea. [PHP has had traits](http://php.net/manual/en/language.oop5.traits.php) since version 5.4 (couple years). They work a bit like Categories work in Objective C only you can attach them to any class. Of course, one could whip up Traits for Objective C in no time with a little digging into the runtime and using +initialize. Sorry, I get pretty fed up with people who hype "innovations" that are well established under new names.
glad you found it helpful. exactly as b_t_s said, for a project with a team, IB isn't realistic. merge conflicts become a nightmare. enterprise apps are built with programatic constraints, period.
It's not difficult to code (as MrJules pointed out, you can do it yourself with ObjC associated objects), but it is very slow relative to how fast loading a property normally is. (edit) You could make it faster by including an extra pointer in every object to attach the "extra" storage to, but this would cause every object to use more memory, regardless of whether it had any added properties, and most wouldn't.
As a single developer on a small project, I can understand. Often I'll tick a checkbox in IB and all of a sudden I've got x,y coordinate changes in the XML. I don't even want to imagine what it'd be like for an enterprise app. :)
Currently working on an update for my game [BOOM Bound](https://itunes.apple.com/us/app/boom-bound/id1169358607?mt=8) and a release to the Google Play store. Here are the changes: FIXING: - Fixed a critical bug where users couldn’t move on level 17. - Various Bug fixes and performance improvements. - VASTLY reduce the game size by over 80%! ADDING: - Added a share feature upon losing a level so you have a change to get a free Retry. - Added various fluid animation for the menus and buttons. - In-app purchase!
Nice! Thanks for the share!
What happens when you debug it? Does the code to load the login page get executed again when the user comes back to your app?
So glad to see his few are white background. So hard on your eyes
You might expect that. Sadly, I'm finding employers demanding everything be done in Swift for the past year. Some of these employers are scrappy startups with very limited means, and they're still demanding Swift even though the upgrade cost from 2.x to 3 is substantial and who knows what it will cost to get to 4? AFAICS, Swift adoption at this stage and earlier is an outstanding way to build technological debt very quickly.
Why? I don't think compiled code belongs on the server. It makes deployment and updates in cloud hosting environments slow and expensive. I think I would be more inclined to go mover dynamic like Erlang - which allows hot swapped code - for a performance critical server in production.
I think its too big and complicated. It has too many "things" in it all kind of similar but slightly different. I prefer simple languages with rich libraries. Also, the compiler takes 2-3 times as long per build/run cycle as Objective C compiler. I feel like I spend half my time waiting on the IDE. Also, enforced static typing is annoying. I'm all for optional type annotations. But sometimes I want full on dynamic duck typing. And optionals. Ugh.
Love the idea, I look forward to trying it
I'm working on a big upgrade to my first app, weatherTunes. The version in the store now was me learning to code. The version I'm working on...well it's the same, but with more knowledge. I'm making it free and upgrading its weather forecasting to make it more useful in a daily basis. 
You can use an extension, provide a default implementation in an extension, and provide type-specific implementations in conforming types. You don't say what problem you have with that ("the compiler doesn't like it" is not useful!), but at a guess, you're using the `override` keyword. That's not necessary – you're not overriding anything, you're providing that instance's implementation of the protocol method. What gets called in which circumstances can be a little unexpected if you aren't familiar with the mechanism. If you know the concrete type, then that type's method gets called, if it exists – otherwise the default implementation gets called. If you don't know the concrete type, then the default implementation gets called. [More information in this article](https://nomothetis.svbtle.com/the-ghost-of-swift-bugs-future).
Was it free? I've been using [this](https://www.raywenderlich.com/store/2d-ios-tvos-games-by-tutorials) tutorial and it's been great so far but it's not free. It's now in Swift 3. 
Java is different in that you deploy already complied archives. In a cloud environment like AWS, you will likely either build a disk image, then launch new machines to replace old ones, or compile in place on each machine. iOW it's gonna be more like C++ than working in java. Sounds cumbersome. FWIW I develop my server code in PHP usually, not because I like PHP but because the deployment model is so easy and lean. I mostly build web services to support mobile or angular apps - no HTML templating - so your ability to change assets without compiling get me nothing i don't have. I agree about the Friday thing. :)
Thanks for the pointer, that's an interesting article. Here is what I am doing: I have an appDirector used to transition between views with two simple methods, showView(_ name: String, with: message?) and goBack(with: message?). The message is used to send data back and forth between both views (just like a NSNotification). In the showView method I create the view based on the passed controller, I use the last controller in the stack as current and transition from current (slideLeft effect) to new. If there is a message it will be passed to the new controller (here I want to use a common method "notify" in all viewControllers) When hitting a back button I am removing the last controller from viewControllers and reactivate the previous controller (slideRight effect) passing any message back if any. Before I was creating NSViewControllers but when added the new "notify" method as an extension it told me extension methods could not be overriden. Then I created a protocol but then the appDirector told me NSViewControllers don't implement "notify" methods. Now I decided to subclass viewController with NotifyController and it works both ways but it doesn't call the "notify" method in the previous controller. Now I tried your solution and it does the same, it works but doesn't notify the previous controller popped from the stack even if the debug messages pre and post the call are printed and the notification is happening somewhere (it is not erroring out) it is not showing in the controller or the debug console. So unless the transitioner is messing up with the controllers in the stack I really don't know what's going on. All the help would be highly appreciated.
"Declarations from extensions cannot be overriden yet" That's the error I get when I try to implement the method in every class.
OK first thing I see is your implementation of notify in subclasses doesn't match the protocol definition (`String -&gt; Void` vs `Void -&gt; Void`) this worked for me class CustomerController : NSViewController { override func notify(_ message: String) { print("Customer") } }
To be honest I'm stumped, I have it working so I suspect there is something else going on in your project but I have no idea what that could be 
Xcode 8 so not a beta version or anything. This is the full code I have in my playground, have I misunderstood or done something differently? protocol Notifiable { func notify(_ message: String) } extension NSViewController : Notifiable { func notify(_ message: String) { print("extension: \(message)") } } class CustomerController : NSViewController { } extension CustomerController { override func notify(_ message: String) { print("Customer: \(message)") } } NSViewController().notify("test") //prints "extension: test" CustomerController().notify("test") //prints "Customer: test"
Well, the only difference is that I am overriding inside the CustomerController class definition (your empty curlies) and not in an extension, so let me try that just in case.
This book is great. Definitely worth the price!
Your article is definitely right. After enough debugging and console printing I pinpointed the problem. Going back in the controller stack they get instantiated as NotifyController and not as each Customer or Vendor controller so they invoke the notify method of the parent class and not in each instance, which didn't have any output so I couldn't see it. So it worked forward when instantiating the appropriate controller but not backwards when popping the common super class from the stack. The fix must go in the appDirector. Now, before applying generics and passing the instance type, is there any other elegant solution to that? ~~In other words, how can I know the running type of an instance so I can downcast it to its instance type? Right now for testing purposes I am using an ugly switch/case and it finally works both ways but the app will have a billion forms and I don't want to do that. If I use type(of: controller) I get NSViewController and not CustomerController.~~ Weird. It now shows the correct running type once added to the stack so the goBack method does not need the switch. Getting closer, now just need to get rid of the switch for the initial instantiation when showing the view for the first time. 
This is what I ended up doing: protocol Notifiable with func notify class NotifyController : NSViewController, Notifiable with func notify Refactored all nsviewcontrollerclasses to derive from NotifyController class Overrode func notify in all my classes Customers, Vendors, etc &lt;&lt; this works Then in the appDirector I still haven't managed how to call notify in the instance but at least it works and doesn't complain. Thanks for your help.
Swift algorithms aren't a thing. Algorithms written in Swift are a thing. Learning algorithms in Swift isn't too practical. The books that you would learn from are written in other languages. Not to mention, Swift's absolute type safety will make it much more difficult to learn algorithms. At times where you're struggling with the concepts of the algorithm, you'll be stuck spending an extra amount of time fighting Swift's type system. I'd start with Python. Python is extremely easy to program in and thus makes learning algorithms much easier. This was a really good book: https://interactivepython.org/runestone/static/pythonds/index.html
good advice, thank you for the book I'll check it out 
Update#2: After watching some porn I decided to use a Dictionary&lt;String,Any&gt; instead of a custom class for messages. So string works, dictionary works, classes don't work as it bitches about extensions not overridable. Dictionary wins for now, at least I can convey more information than a simple string, grabbing the message name from the dictionary itself. Not bad. Now it's bitching again about not seeing the running type "notify" method, something I already had fixed, but debugging and testing a million options always fucks up everything and I never know the precise rollback point. Oh well.
Just go through this: https://www.raywenderlich.com/90971/introduction-mapkit-swift-tutorial ...and then watch this: https://www.youtube.com/watch?v=oTsg-uJfxD4
As far as I can tell, neither Kitura nor Perfect allow one to do this (an ugly if/then nest is required): drop.post("/login") { request in guard let json = request.mustHave(parameters: "email", "password") else { throw Abort.badRequest } ... } That alone determined my preference for Vapor.
Nice article despite what the basement dwellers say. 
Have you heard of containers? 
This looks to be exactly what I need! Thanks so much!
Good advice, though I'd use enums rather that structs for namespacing, as it doesn't allow you to accidentally instantiate it. Also, I'd rather go with a computed property `homeLoginButton` instead of a function, but that's not super important.
The kerning on that logo makes me feel a bit queasy. 
Swift isn't like C++ where you always need a capture list. I think there's are only two situations where you *can* use a capture list: 1. You want to capture a class instance weakly or unowned 2. You want to capture a member variable (e.g. self.x) directly without creating a reference to its owner (e.g. without a reference to self)
There could be many reasons, I'm afraid the best answer is to get good at using the debugger. Even if you could solve this problem easily without it, this kind of problem will continue to visit you for the rest of your programming career (this prognostication is based on my loooong experience as a dev). One thing to look into: where does that index path come from? Looks like it is at the top of the loadImage func? Consider how much time (in computer time, not in human time!) passes between that index path being passed into loadImage and the time it is used in the reload (don't forget that loading the image takes eons in computer time). Is it possible that that index path no longer matches the data that that image belongs to? What you could try is to recalculate the index path of the cell once you have the image and are back on the main thread using some data which is not going to change (like model data).
do you know an good example for a tableview which displays images in its cell from json? something that works really stable? half an hour before i posted this i posted about the example i am using but as you see here i struggle to make it work nice with json. i am searching for a clean example as a base. Maybe you know a blogger who wrote an article? 
Before they were given the name traits, it was a design pattern that said to prefer defining behavior in interfaces to achieve polymorphism rather than using inheritance trees. The concept goes back way longer than even your post implies. 
iOS 7 compatibility? Yikes.
African or European?
I'm glad I only have to support N-1.
I regret being a programmer whatsoever.
Looking at the docs the iOS 8 limit is for swift, objective c is still iOS 2 The swift limit seems like an updated version of the previous iOS 7 limit for swift 3: http://stackoverflow.com/a/24010399
As far as I'm aware, you don't need begin and endUpdates() there. Just the reload method is fine. 
It was this one! I actually managed to find it, been using some of the other tutorials on their site which are really good.
Nah it wasn't but I had been looking at their stuff, do they have much on specifically working with games?
You can wrap the new version in an if #available statement and then have the old version in the else statement. See [this](https://www.hackingwithswift.com/new-syntax-swift-2-availability-checking). 
Correct.. the method itself says reloadrowatindex
You seem quite new to programming so I'd start elsewhere. Apple's Swift book is a reference book, not a book for new programmers. Check out Big Nerd Ranch's Swift book.
I used it, of course, the problem was that I couldn't have the old version using Swift 3 so. My solution may be pretty silly but I ended up wrapping Objective-C *convertRect* method, putting it in fallback and it works great.
Try making the tableview and cells both transparent and setting the background color of the view controller to the color that you want?
Sorry, I don't know any good articles or blogs. You have mentioned several times that the data are in json format, but this problem has to do with getting data out of an array. The best way to tackle this problem (really, any problem) is to divide it into completely independent parts. So, for example, in this case, I would make the first part the bit which loads JSON into an array. At that point, assuming the data in the array are correct, then JSON has left the building...nothing else is affected by the fact that JSON was the original format of the data, the format is now objects or structs or however you have chosen to store them in the array. Then the next bit is to make sure it displays without the images. Then maybe do the image stuff, but when an image arrives, just reload the entire table (yes, i know: horrible, but it is just a temporary step in your journey to get it working completely correctly). If reload the entire table each time an image arrives works, then you have really eliminated a large number of possible sources of bugs. Then switch to the reloading just the row containing the image. You also need to ensure only one thing is happening at a time. For example, make sure you are not rearranging or adding/deleting rows whilst images are being fetched. Use the debugger to make sure the index path is correct in each place it is used. Debugging is kind of an art form, and is more of a feel-your-way kind of thing than a follow-a-cookbook kind of thing. So, roll up your sleeves and smash some bugs. 
When I first read that sentence I thought you were asking someone to explain their *licensing agreement* terms and definitions. If that's the case, I wouldn't even trust most people on the internet to explain the thinking of a lawyer Fortunately I think you mean you're looking for the explanation of the keywords like "init, self, deinit,override, etc." I am glad that you have a basic understanding of what each means in English, but it is not easy to explain and it is going to get much harder. Why? because the language writers want to keep the number of keywords as small as possible so each of these special keywords may each take on different meanings when used in different contexts or places. Generally, that's a good thing. The fewer *special* words reserved for use in the language means the bigger collection of words you, the programmer, can use without worrying about what context you are using them in. For example, `let` seems to have a simple usage to set a named constant, let x = 53 and `if` is pretty widely understood keyword used to judge a condition for truth before executing (or skipping) code in curly braces: if x == 53 { ... } but there's another context using both of these keywords together, sometimes called the `if let` context, if let x = x { .... } in this case, it will unwrap the content of an optional (if not nil) and execute the code in the curly braces with a temporary, shadow constant. How in the world would a new programmer figure out that usage? They wouldn't, and that is why swift evolution is considering adding something like an `unwrap` keyword to address the simple uses of the `if let varname = varname` situation. But that doesn't answer your question right now. Just remember, as you are reading the Swift 3 book, you really have to learn the contexts of what you are trying to do, before you can be sure the keywords and operators you are using will make sense in that context. If you have a specific issue, feel free to post it here, but writing about what each keyword does in each context would be a book into itself! not just a reddit response.
What you just described has nothing to do with traits
I wouldn't advise a complete beginner in Swift to start with the BNR book today, the book was well written when published. However, today a beginner will be completely stuck with error messages related to the Swift 2 language (in which the book was written). The price of having a fast evolving language like Swift is that books and materials become obsolete in a few months of their publications. Hopefully this will change after Swift 4. I would recommend Hacking with Swift which is free to read and fully updated to Swift 3.
Thanks for recommending Hacking with Swift!
Wait, you can maintain iOS 7 compatibility with Xcode 8? How?
[removed]
Just enter deployment target manually and it starts working. However, since they are different runtime, it's not possible to use the iOS 7 simulator or debug using a device. You have to install .ipa to check if it works at all. And, well, no frameworks for you. They compile but Apple won't accept iOS 7 apps that use them. So, instead of Carthage or Cocoapods you'll have to copy the libraries. It can suck. It took me 10 hours to get SDWebImage working.
Yeah, should've sticked to 2.3
thank you for the explanation! And yes!! other than printing the book out and doing hella highlightings underlining and circling with different colors of pen, I also write down new terms that I see that the book used on a different notebook. But there are some that just throws me off completely. And Im actually taking my time on reading, analyzing, and understanding what each lines of codes do before moving on to the next. However, just when i thought I understood it, the book got a way of making it harder lol like i thought i knew what get does, until one of the code about protocols said.. protocol ExampleProtocol{ var simpleDescription: String {get} mutating func adjust() } 
So thats why i felt like the book explains so fast with little explanations! Thank God i spent a good amount of my time watching videos online during the summer time and it really helped, and still watching hella videos about the same thing over and over again to completely grasp it before i move on. Yea i actually tried reading BNR and i like the way it teaches better than apples swift3 book lol BUT too much errors for me to rely on.
So as long as we stick with manually added static frameworks it should archive and export just fine, never thought it could work like that, cool. Too bad our team enforces a zero warning restriction on commits, and no one would want to deal with pre iOS 8 UIWindow frames and orientations...
Tried that. Let me rephrase my problem: Whatever colour view I put behind the cells (strong colour), despite them being clear, the views under do not appear. The clear parameter for the cells seem to resolve to the popover's diffuse transparency directly (see the screenshot). I wonder if there is a solution without me forcing custom colours for the background of the cell AND the highlights which seems to me like a terrible solution. Edit: wrong, the views behind do appear. They just appear multiplied which is weird because I haven't done any layer masking. https://i.stack.imgur.com/2RPC4.png
The message in the original error you posted on SO indicates a possible issue with nib linking. I seem to recall having a similar issue a few weeks ago with this symptom, but it looks like you've checked that end already. Are you using a UITableViewCell subclass of your own? I haven't used search controllers myself, but is it possible that it could be interfering with a custom cell subclass? 
BNR are working on a Swift 3 version of the book to be released imminently. Wait a while! 
No subclass and no nibs for this controller. 
`{ get }` isn't necessarily a clue to the compiler, it's simply part of the protocol requirements. It's for the compiler, but also for implementers and users of the protocol.
(Rod, you don't need to put your name, Rod, in your comment. Reddit automatically includes your name, Rod.)
&gt; Maybe I'll have a word with Mark Alldritt sometime. His excellent Script Debugger editor already has an impressive and highly polished feature set – its one big problem is that there just aren't very many AppleScript users left to buy it. But a version of SD that does "scripting and automation" in Swift… I'd pay $100 for that in a heartbeat (and it'd still be a steal at the price). Do let me know if anything comes of this. I've recently gotten very interested in scripting my Mac, and Scriptarian came at a time I was frustrated at the JavaScript for Automation bits and looking for something nicer. It's sad to see it's not what I was hoping for, but you clearly know what you're talking about and I trust the people you trust.
I've read through this, and I'm not sure how this helps. Apple's own frameworks use MVC, so even if there were a better way, fighting the system might not help. (Look at how few people write OSX/iOS apps in non-ObjC/Swift languages, for example. There are better languages, for many tasks, but that's outweighed by the increased difficulty in interfacing with the OS.) I'm also not sure how this is an improvement. They [claim](http://clean-swift.com/clean-swift-ios-architecture/) that we think the problem is &gt; Maybe the problem lies in the client? They just don’t understand how development works. &gt; - They don’t know how complicated that thing is. &gt; - They need to stop changing requirements. &gt; - They should focus on functions, not UI first. &gt; - If only they had asked me to do that 2 months ago while the code was still fresh, it would have taken less time. and promote the "Clean" architecture as a solution, but then in [describing](https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html) it, they admit that the core of the system should be &gt; ... these entities are the business objects of the application. They encapsulate the most general and high-level rules. They are the least likely to change when something external changes. Basically, you still need to pick something fundamental to build your software on. You just need to do a better job of picking something that is not likely to change! Yeah, all you need to do is predict the future. With current languages and environments, there are *always* going to be changes that users can request in one simple sentence that take a lot of work to implement. You can shuffle around the labels on your architecture diagram, but any time the user aims for the bullseye, it's going to hurt. &gt; For example, you would not expect these objects to be affected by a change to page navigation, or security. No operational change to any particular application should affect the entity layer. That's great, as long as users only ever request changes to "page navigation, or security". (Seriously, when's the last time a user asked you for a *security* change? Is he serious?) What about the other 90% of changes they request, like "we found out that this relationship is actually N:M, rather than N:1", or "we thought this field would never be longer than 100 characters, but it turns out sometimes it can be up to 10 million (and we still want it to run in under 2 seconds)"? Business people deal in business entities, and so by definition their changes are going to be changes at the level of business entities. You're still not going to be able to say "But you said those were not likely to change!" 
You need to add constraints between your scroll view's children views. Is this way the content size will get calculated automatically. Left Scroll View Margin - Label - Label - Button - Right Scroll View Margin This would work for horizontal orientation. In the same manner you can do it for vertical. If you dont want to use autolayout then you need to set content size manually. The easiest example would be to set it to 1200. Should work. 
Thanks for he reply though 
No. Don't relax. Developers need to be responsible for their bullshit. This is such a huge issue in gaming and I really don't want to see it spread. I say this as a working developer.
OutlineView? Here is a cool tutorial for MacApps: https://www.raywenderlich.com/123463/nsoutlineview-macos-tutorial
NSOutlineView isn't available on iOS. I would recommend just creating "indented" cells, and using the insert/delete methods for table view cells to update things dynamically as your users expand/collapse the parents.
Not anyone - everyone. Not Xcode 8.1 - Every Xcode.
*noted Thank you!! :)
Udacity has a new (free) course on creating a real time chat app with Firebase for iOS https://www.udacity.com/course/firebase-in-a-weekend-by-google-ios--ud0351
Not problems with syntax highlighting - problems.
Converting an old ROM MUD from ANSI C to Swift 3 on Linux! It is really fun writing Swift for CLI things too!
I am having the same problem building a huge ass invoice using a scroll view, I can scroll while running it but not while designing it. I hate it that Apple uses X axis from the bottom and it only shows the end of the document, I have to manually adjust it for every section I am modeling right now with controls, once I'm done I set it back to normal. How can I scroll in design view? What am I doing wrong or how to fix that behavior? \* MacApps just in case.
Maybe try out his channel on YouTube first? He has a ton of videos, some are a few months old but I think watching some of his videos would help understand his teaching style. 
There is no rush to get into swift. Right now it is a work in progress and should mature in 2 - 5 years. 
You need an object to become the `UITabBarControllerDelegate` (generally you can just subclass `UITabBarController` and become the delegate) and then implement `tabBarController(_ tabBarController: UITabBarController, shouldSelect viewController: UIViewController) -&gt; Bool`. When you want to show your alert, just show the alert and return `false`, otherwise return `true`.
Working on an invoicing app (MacApp), a document manager (MacApp) and a blog (Swift Server). Just finished the best porn consumer of all times (MacApp) to download feeds from Imgur, it's fucking awesome. Also use it for downloading images from /r/EarthPorn and /r/Space and using them as my desktop wallpaper on a daily basis.
Another issue is the scroller starts at the bottom of the document so I am trying scrollView.scrollToBeginningOfDocument but the app crashes in a ball of flames. So, how to scroll to the top of the document in MacApps?
It seems like shouldselectviewcontroller doesn't exist and instead there's a function that is called after the tab is selected but doesn't give you the option to make it not selected. I just subclassed UITabBarController and selected that class as the controller for the tabbarcontroller on the storyboard. Would this make any difference or is it just something with swift 3?
Swift is pretty great and their migration tools do most the work and it's not that hard to handle the different versions. At least, it hasn't been for me. Edit: to clarify, I meant that on my projects it hasn't been difficult. I wasn't tooting my own horn.
It will take you less time and effort to write in swift and fix it later than it will to do everything in objective c.
I've been [very critical](https://www.reddit.com/r/iOSProgramming/comments/5aaq1u/such_a_bad_place_right_now/) of the recent state of Apple's toolchain on this sub: I'm far from their defender... but on what basis are you implying that they're '*going to break it again*'? The Swift team have always said that the 3.0 API changes were planned as a one-off. I've lost count of the number of times this has been addressed on this sub. Realistically, no new release is going to be 100% plain-sailing but, as of yet, Swift 4.0 plans don't include *any* source breaking changes. Criticise them for things they've done, or planned to do; but can we please not criticise them for doing something they've **already said they're *not* going to do**?
I suggest you carefully check the integrity of your development environment, because tab bar controller's delegate method should select view controller is there and has been since iOS 3. 
Hey, Did you use any guides to migrate? I am new to iOS development. I want to migrate our company code from swift 2.3 to swift 3. What references would you recommend? Thanks.
Just make a button that triggers the insert and delete rows at index paths methods on the table view
Swift is being managed as a general open-source project these days. It might change again in incompatible ways, but it will be because the public review process decided to. We probably shouldn't blame "Apple" for any changes, any more than we should blame Dropbox for changes to Python, or Salesforce for Ruby. 
I did not use a Guide. It's pretty simple: 1. Check your Podfile, are there Updates available to the Pods? Most Pods have a Swift3 Branch. Update them. 2. Your Code: Let xCode transform your code. That was pretty much what I did, it worked immediately after that.
It is a bit biased (because it comes from Vapor) but it matches my own experience. Server-side Swift is definitely faster than Node.js and a lot faster than Python, PHP, etc. https://medium.com/@qutheory/server-side-swift-vs-the-other-guys-2-speed-ca65b2f79505#.rd7m6ndob
Awesome library! You can contact Natasha from NatashaTheRobot (https://swiftnews.curated.co) to be featured in her newsletter! You can also speak with her directly on Twitter!
I'd say that is actually more of a problem with object mapper, which has no notion of mandatory properties in json. You have to deal with every property possibly being nil separately because every property actually can be nil (depending on the json which probably comes from the network so you shouldn't assume anything about it; object mapper can't give you any guarantees about which properties are there after parsing). One thing you can do (which kind of defeats the purpose of ObjectMapper unfortunately), is mapping from the ObjectMapper model class to another model class which has non-optional properties. You can convert to the class with non optional properties just once after loading your data; you can see it as a validation step. If one of the mandatory properties is missing, you can't convert and just fail early and show, for example, some error screen. If validation succeeds, you can use the class with the non-optional properties afterwards. The huge obvious downside is that you basically need to duplicate your model code. Unfortunately, adding guards everywhere is probably your best bet. If you're willing to invest the effort, you can also solve this problem by using a JSON framework that supports model classes with mandatory properties, like Freddy; or use a more light-weight library like SwiftyJSON, and do the validation + object construction step yourself (the same idea I described above); this saves you from declaring your model twice and gives you more flexibility in general (although requiring more code).
Natasha the robot? Thank you. I will contact her. (added Natasha to the list)
Depends on how much experience you have with programming. Either make the same app like a week later as the guy made in the tutorial or make an app from your own idea.
https://robots.thoughtbot.com/streaming-audio-to-multiple-listeners-via-ios-multipeer-connectivity This does it between iOS devices in the sample project. Pretty close to what the mac would do I assume. It's also in Objective-C. 
I have no clue what I am doing.
I wholeheartedly recommend Ray's tutorials, they've saved my sorry ass a thousand times and most of them are updated for Swift 3. https://www.raywenderlich.com/
Does it in Objective C too. Ooops! Syntax highlighting doesn't even recognize `self`? Time to restart Xcode again!
I started with [Hacking with Swift](https://www.hackingwithswift.com/read). You build ~30 or so example applications and I think it explains the iOS environment quite well. 
That's nice for you. 
Soon you'll have to buy macbook to make android apps.
I'm a PHP developer myself, and I've recently begun learning Swift. I used [Developing iOS 9 Apps with Swift](https://itunes.apple.com/us/course/developing-ios-9-apps-swift/id1104579961). The course is pretty much geared toward teaching Swift, but keep in mind this was back in early 2016, so this targets Swift 2. Regardless, it is still a good watch for learning Swift basics. 
Ray's tutorials are very good. For a good book I'd recommend appcoda.com. They also have some free tutorials but they are a bit outdated. The books are uodated for swift 3, xcode 8 and ios 10. 
The Swift documentation from Apple is really nice. Do you have an application in mind that you want to create? I find that's the best way to teach yourself a new platform. Questions arise as you go, and you can search for specific answers. As opposed to following something that may or may not be geared towards your goal.
It's a delegate method.... Look below.. just make sure that your tab bar controller in the storyboard is of `CustomTabBarController` or whatever you choose to call yours. class CustomTabBarController: UITabBarController { override func viewDidLoad() { super.viewDidLoad() delegate = self } } extension CustomTabBarController: UITabBarControllerDelegate { func tabBarController(_ tabBarController: UITabBarController, shouldSelect viewController: UIViewController) -&gt; Bool { guard let index = viewControllers?.index(of: viewController) else { // not sure if there is a case when this wouldn't exist, so just for safety, we'll return false return false } if index == 1 { let alert = UIAlertController(title: "Nope!", message: "You can't select this tab... sorry!", preferredStyle: .alert) let okayAction = UIAlertAction(title: "Okay :(", style: .default, handler: nil) alert.addAction(okayAction) present(alert, animated: true, completion: nil) return false } return true } } 
Great delivery as usual from Ray. Didn't know about Fluent and will take a look at it, seems interesting even if I like my data naked spread over the cold metal of relational sql. Bring moar!
Look up devslopes.com. I've been going through the class, they have an updated Swift 3 and iOS 10 class, but I started with the iOS 9 and Swift 2.2 class and have enjoyed it. 
&gt;contains a number of Strings, Ints and enums **all of which are optionals** I'd say this is the problem. Should it be valid to have a HomeData full of nils? Possibly(bummer), but probably not. It looks like ObjectMapper supports making them non-optionals and even lets. I'd suggest using sane default values in your mapping() method, where possible(0, "", [], etc). Otherwise, let it blow up(mapping() throws, look at the section on ImmutableMappable in the docs). If any non-optionals without sane defaults are missing, then you don't have a HomeData. And for the truly optional, then use if let, guard let, optional chaining, or ?? default as appropriate
Wow thank you all for your help! I will go through each and this should be more than enough to get me going! :)
Release to Google Play Store? Which of Swift cross-platform library do you use?
What are you talking about? Swift is an open-source language with a complete Linux implementation.
[sarcasm ](http://www.dictionary.com/browse/sarcasm) 
Swift 3 is going to be forward-compatible. That is, they promise they won't break Swift 3 sources when Swift 4 is out. So, it's probably a good time to start learning. I've been dabbling in Swift 2 and the programming experience is really nice. There's less boilerplate code and thus code gets more expressive in general. Furthermore, server-side frameworks in Swift are getting traction, and maybe it'll soon be a worthy full-stack language that can compete with established languages such as Java. At least it'll fill a similar niche that .NET does for Windows (server code and desktop code using similar tools) and the same general space that Meteor is trying to tackle. The only other competitor in this league (full-stack native machine code language), IMO, is Go. However Go is much older but hasn't gotten much traction, nor even much backing from its creator, Google. 
You could just throw that table on there and then figure out the point on which it is tapped and use that point to lead to more information.... But you have to remember that you're making this for a mobile device. That may work on an iPad, but there is almost definitely a better way to do that. So you have to ask yourself.. how useful would this be to students if they were just panning and zooming around the table. What do you want them to take from the table? Would it be better in a set of table views, maybe a collection view for the 2d tables? I can picture my mobile computing prof saying big C Context!. That said, if they have to know this chart exactly, it might be useful to have a view controller that presents the image in its entirety. In that case, you should embed it in a scrollview, with an imageview inside that holds the full image and enables scrolling and panning over the whole thing. You could even provide a toolbar to pan to specific areas. Then figure out the areas of the image you want tappable. I would probably overlay a series of buttons or uicontrol subclasses, maybe just with a low alpha background or a border color to show 'you can tap here', each one given a frame that denotes the pixels you want tappable for that item. These would link to a second view controller and pass the data for that item onto the second view controller. And no I wouldn't use mapkit, don't need it and it will complicate things. You'll have to grab all the pixels for each point you want clickable. The scroll view should resize to the image's size, so the pixels should be the same. I think. Load them all into a csv with columns like this: originx | originy | width | height. There are csv parsing libraries, but it actually only takes a few lines of code: let file = Bundle.main.path(forResource: "frames", ofType: "csv") let rects = [CGRect]() do { let fullString = try String(contentsOf: file) let rows = fullfile.components(separatedBy: "\r\n") for row in rows { let values = row.components(separatedBy: ",") let x = CGFloat(values[0]) let y = CGFloat(values[1]) let w = CGFloat(values[2]) let h = CGFloat(values[3]) rects.append(CGRect(x,y,w,h)) } } catch _ { print("couldn't open file") } Probably some errors in that but you get the idea. Good luck!
Thanks everyone for their comments and points of view. I'm not against learning Swift, I'm just afraid that if I start learning it then it will be too different a year or two from now. I want to be a part of the future of our ecosystem, and all these comments give me lots to think about! I'm going to start working on some of my projects in Swift and start to learn the language.
Personally, I was only able to get so far after reading the books and doing the tutorials. If you're near a city, check for meet ups or [Cocoaheads](http://cocoaheads.org/)
You got lots of good suggestions already. I'd strongly suggest looking on iTunes U for classes there. The biggest problem with Swift right now is that it is evolving swiftly 😎( couldn't help myself). So a lot of stuff is outdated on the net. Further best practices haven't been decided upon. So a lot of stuff isn't really up to snuff on the net. Beyond all of that when somebody tells me that they are a PHP programmer I get nervous. PHP barely passes as a programming language and it also appears to be the playground for programmers with no formal training. I'm not sure if this is you or not but if it is so a sequence of formal education in CS might be in order. Sometimes the goal is to unlearn bad habits and to put you on the road to functional and OO programming.
Thanks for the thoughtful reply! We have decided that we will try to implement the information in a collection view. Now, to figure out how to create a custom layout... 
I tried to use Firebase this summer. Their Documentation was Absolute Garbage.
I know this is an old thread but I'm hoping someone in-the-know sees it....does anyone know if the source code is available to tinker with as you go through the book? I know I'll have the source as I type it out following the tutorials, but sometime I miss something or slightly mess up the syntax somehow, etc. So I just wanted to ask, after not finding it through a web search. That said, awesome material! Highly recommend both Paul's books.
I looked into Firebase recently, can it be used as a content management system?
Hmm yep worth a try I think, although as I said in the other post I would end up needing two classes per model, one with optionals and one without. I think I might be able to engineer that logic better though. Thanks for your input. 
yes. you can pretty much do anything you want.I found a CMS example on github https://github.com/eralha/firebase-cms - it's angular not swift, but it should give an example of how you can do it 
I'm a experienced software engineer, fullstack by trade, in the last years mostly backend (using PHP). I recently switched to iOS/Swift for a project and I couldn't be happier! The [Stanford University Course] (https://itunes.apple.com/au/course/developing-ios-9-apps-swift/id1104579961) is great - I highly recommend it! Also check out [raywenderlich.com](https://www.raywenderlich.com) - it has great iOS resources. The last few years as a backend engineer I've worked on some super performant systems and PHP is not the best language for that - if you're like me you'll love Swift and iOS development! Don't forget to have fun! 
Hi, thank you so much! It's working now. It's all not clear for a 100 % yet but I think I will just go through the whole project again after I finished it. Also thank you for the fast response. In future I will write you a reddit PM or at Twitter. And I had the right class at first so this was correct: class DetailViewController: UIViewController { But then the other error confused me. And I thought ok it wants to set vc.selectedImage = pictures[indexPath.row] so it doesn't know the variable pictures since it's in the ViewController.swift file. So I thought I extend ViewController and all errors where gone. But that explains it. 
You perform what are called segues between view controllers. From what I understand you want to perform a segue from your stat screen to the summary screen when a table view cell is selected. I'm on mobile right now but, you'll want to look up "Storyboard segue", and the delegate method table view(_: didSelectCellAt:) Let me know if you need more info
I doesn't skipped anything. What you mean exactly by paragraphs? The code snipets on the site? I read all of it. Sorry if this is a stupid question :D
I read it online on the site :) Is there a book to buy? I'm a bit confused with the site anyway because it has this advertisments but everything I have done so far was free. Guess I will read the site's faq soon :P edit: nvm https://www.hackingwithswift.com/#pricing
So do you have any resources on doing so...?
Hey ya'll! I've been exploring the new rich notifications in iOS 10. I made a quick app that uses the Giphy Api to send a random gif locally. Take a look and let me know what you think. https://github.com/themisterholliday/giphyRemindMe
How is this different than [][] ... ?
You won't need to manage nested arrays, and you get the benefits of the MutableCollection protocol, as well as computational functions like calculating determinants and binary operators (in the case of storing number types). Managing a matrix (Array&lt;Array&lt;T&gt;&gt;) in any language can be a *little* confusing, but it gets worse when you try to manage an array with more than two dimensions. MDArray solves this problem in Swift by moving all of the storage handling to a single type whos elements can be accessed by a single index. The MDArray type uses a single storage array (Array&lt;T&gt;), and maps its valid indices to the elements of storage using row-major order. With MDArray, a 3x2 (row-major) matrix could be defined as var M = MDArray&lt;Float&gt;(shape: [3, 2], repeating: 0.0) instead of var m = Array&lt;Array&lt;Float&gt;&gt;(repeating: Array&lt;Float&gt;(repeating: 0.0, count: 2), count: 3) To access an element of M, you only need a single index (array of Int) let element = M[1, 1] // instead of something like M[1][1] This may not something everyone needs for their code, but when you start considering multidimensional arrays with 3+ dimensions, it really comes in handy. let N = MDArray&lt;Float&gt;(shape: [2, 3, 2, 2, 4], repeating: 0.0) I also included a way to get the nested array version of any MDArray through the use of the following functions vector() -&gt; Array&lt;T&gt;? matrix() -&gt; Array&lt;Array&lt;T&gt;&gt;? multiArray() -&gt; Array&lt;Any&gt;? [edit: formatting &amp;&amp; code correction]
I'm sure that there is a way of finding out within Xcode's preferences but on the off chance there's not, there's a built in app on macs called 'digital colour metre' which tells you the colour of the pixel under your mouse. I think it's under the utilities in apps or just search in spotlight for it 😊 
Stab in the dark: could it be a zero-length [implicit animation](http://stackoverflow.com/a/21041810/7107001)? It seems like others, in the past, have run into animation on this property when they don't want it, so if iOS 10 doesn't seem to animate it, perhaps they just made the implicit animation take duration=0.
/u/teddim is stating that `[][]` is not a valid Swift *type*. The type for an array-of-arrays is `Array&lt;Array&lt;T&gt;&gt;`, or `[[T]]`. Indexing into this uses two calls of the subscript operator `[]` (i.e. `[][]`), but that by itself is not a Swift *type*.
This sounds awesome and I'll have to check it out. Thanks!
For some reason it works when I change alpha instead of color though
And apparently it wasn't obvious for me. Do you want me to apologise for misinterpreting you?
Why is this downvoted? When talking about a type you don't refer to it by how you access one of it's elements, you refer to the type. The type is not [][], it's [[T]].
Yes? Do what you want, it's your life. 
[removed]
This should be the best resource: https://www.uraimo.com/2016/04/07/swift-and-c-everything-you-need-to-know/ Articles and QA: https://medium.com/swift-and-ios-writing/using-a-c-library-inside-a-swift-framework-d041d7b701d9#.4hkifp9fi https://www.quora.com/On-Swift-for-Linux-can-I-call-C-or-C++-libraries By book: https://www.objc.io/books/advanced-swift/preview/ By various Swift projects in Github, including Vapor, Kitura, Perfect and Edge https://github.com/SwiftOnEdge/Edge
That looks really great but you might need to rebrand to have family friendly copy. "Sex tapes" might trigger an App Store rejection. Make it about privacy, Apple loves that shit. 
A water tracking app that intelligently calculates how much you need in the day via activity and weather. It also intelligently notifies a user to remind them to drink only when they are under the goal pace. (I know there are a billion water trackers and mine is quite different.)
This looks awesome. I've only been working with python for like two months, but I'm already sick of reading it. This looks much nicer. W * x + b is much more readable than tf.matmul(W,x + b). Can I subscript an MDArray with ranges? Can I put custom structs into each element? 
Thanks, that's a very valid point! I have no experience in this regard but have been a little worried about it, I'll try to think of an alternative!
https://www.andyibanez.com/nsuserdefaults-not-for-sensitive-data/
there seems to be a copy on write proposal
Yes from that website : https://www.natashatherobot.com You can also contact this one to be featured in his newsletter : https://andybargh.com/ 
Mind you, you may need to fix some bugs because Xcode needs to be hocus-pocused back into existence. That is more-or-less code from memory
Hey OP, are you saying that you are having trouble populating the tableViews in real time? Such that it works fine when you have predetermined data (or provide a mockup), and need it to function the same when you're actually using the app? If this is the issue then it seems like you will want to have a model class defined to hold your data (which it sounds like you already do since you're able to display everything just fine with mock up data) you'll want to have separate data structures for your "summary" view that you also update in real time when you update your "main" or initial view with the stats formatted in whichever way you need. In terms of UI infrastructure, you'll need a couple different viewControllers on top of what you have now. You'll need one for the summary table view, and one for the actual displaying of summary data. The summary table view will need to be transitioned to somehow from your initial viewController using a segue. Then you'll probably want to make sure that all of your viewControllers are embedded inside Navigation controllers so that you are back to go back and forth between them nicely. You could also look into using a UITabViewController if you wanted to use tabs instead of navigation.
Thank you for the answer! Unfortunately, the code does not work.
ok simply changing it to var.. i expected that to cause bugs but its fine! 
Why it's different, I could only guess (and probably guess wrong). However, I did find this nugget that at least could help you make your classes printable: https://www.reddit.com/r/swift/comments/2it7rv/where_does_the_printobject_method_go_to_for_my/ Edit: it appears that the protocol changed in Swift 2, and is now called [CustomStringConvertable](https://developer.apple.com/reference/swift/customstringconvertible).
I've started so many personal projects and finished very few. There's still value though! You're learning, and you can always keep around those old code bases for reference and honing your craft.
Well for me personally, I obtained a developer job at a services company so that I can touch all kinds of different parts of iOS programming. I would highly recommend Objective-C as a lot of projects are using both Obj-C and Swift. 
Hey @swiftonista, I'm one of the Vapor devs and wanted to address a few of your concerns. On the lines of code, it does look a little hefty for such a simple table, I think the idea is that the lines of code don't increase too much when you have more complex models that are used in real life applications. On the dynamic language part, unfortunately yes, we do have to be a little bit more explicit about stuff. I recall some work being done on reflection apis in the swift language that we intend to take full advantage of when they're supported. This will likely have a big impact on making model code easier. On the "Droplet" name, the intent is for it to be a service container that is a collection of the various tools you'll be using not the name of the actual web app. For the `drop` in a database application, I agree, it does come off as a little comedic, but these things happen. Unfortunately, naming is hard, some people like fun names thematic to the organization, some people like desciriptions as plain and accurate as possible. We can't win em all. (One could always typealias names they disagree with though :) In the meantime, if you like the rest of the stuff (or don't), or have other suggestions, we take feedback really seriously and would love to hear your ideas. Happy Swifting! \- Logan
Thanks for the explanation. I poked more stuff in your site and I definitely liked what I saw, I like your style, you know your stuff, you're a genius. Bookmarked for future reference.
Nifty.
The core team promised not to break things only *at best effort*, and offered a versioned compiler as the path forward until the ABI is settled in Swift 4.
Changes would hardly be as drastic as 3.0 anymore. It had broken seriously mainly due to the huge pile of API diffs thanks to the newborn API Guidelines, and the intentially rushed pool of breaking changes (albeit a few still having missed the 3.0 mark). The core language and the standard library is fairly stable now.
Oh, "Chris"! I was wondering there for a second if the Church had decided to start teaching people to code… 
There's actually copy on write for arrays and dictionaries. 
Lol OMG !! God dam auto correct!! 😅😖. I mind aswell leave the title as is and not edit. For amusement purpose lol 😂
Just got done with my first sticker pack check it out any feedback is much appreciated. https://itunes.apple.com/tt/app/katpack/id1158673306?mt=8
oh? Christ has returned and making videos?
Great to hear!
You're missing tableView.beginUpdates() and tableView.endUpdates()
I had put it before and ran it , didn't see any change so thought it was pointless. Are those two lines compulsory? 
So -- the best way to see this for yourself is to [open up a playground and run it.](http://i.imgur.com/l9yflVF.png) First is the word var. That tells the compiler that the value of each variable may change. If you use the word let to declare your variable, that means the value of your variable cannot chance once initialized. 1. An string that has been initialized to an empty value (""). This is different than a string that has a nil value. 2. A type of string (an optional) that can either be a string or nil. Right now it's nil. Later it may have a string value, but not ever required to. The best way to think of optionals for me is that an optional String var is different type than a non-optional—that is an optional can be either the declared value or nil. A non-optional must be of the declared type. 3. An unwrapped string that must be initialized. So, if you're writing an iOS app, the viewcontroller view did load func must assign a value to string3. The exclamation mark on declaration is telling us that string3 must have a value and cannot be nil. 4. A string that has been initialized to a value "string." I'm new to swift too, so if I got something wrong, I'm sure someone will correct me. Good luck!
a good one, already watched it.
I think my favorite quote about senior and junior devs came from someone here on Reddit (wish I saved it). But it went something like this: &gt; The difference between a senior developer and junior developer is that a junior developer will see code on Stack Overflow and copy it, while a senior developer will see the same code and adapt the principles to fit their program.
oh, yes :) But that is normal to learn by copying (at the beginning). Senior engineers have a special wisdom on adapting others code :)
The one very simple trick is don't ;) Use a third party library that does file system caching because that's the "correct" solution. A simple in memory cache will crash your app when you scroll down far enough to be OOM(out of memory). A smarter cache(look at NSCache) will dump cache when you hit OOM, but then scrolling back up will have to re-download all the images. Better but not great. A disk cache fixes all these issues, which is why that's what a lot of image/networking libraries do, and why there's no good reason to write your own from scratch. That said, if you're doing this purely for self education, not real world use, then yea, you can stick them in a dictionary as they load, or use NSCache, which is basically a dictionary that will dump its contents on OOM.
They are all different. &gt; var string: String = String() This is a variable called `string`. You are explicitly telling the compiler that its type is `String`. You are creating an instance of `String` (which defaults to a zero length string `""`), and assigning it to this variable. Since Swift can see for itself that you're assigning an instance of `String` to the variable, you don't need to tell it what the variable's type is. You can drop the `: String` bit. &gt; var string2: String? This is a variable called `string2`. You are explicitly telling the compiler that its type is `String?`, which is an optional. This means that the variable can either hold an instance of `String`, or nothing at all (`nil`). When you use this variable elsewhere in your code, you'll need to account for the fact that this variable might not have a value. &gt; var string3: String! This is the same as the previous variable, except the optional is implicitly unwrapped. This means that the variable might not hold a value, but you aren't forced to deal with that possibility – the code you write can just assume that there's a value. If it does so and there isn't a value, then your code will crash. Implicitly unwrapped optionals are useful to use for properties when you can't always assign a value to the property when its class is being instantiated, but you're certain that after a certain point, it will definitely have a value. The most common case is when you have a view controller with outlets – the properties aren't assigned when the view controller is instantiated, but they are assigned a value when the view loads, so all code from `viewDidLoad()` onwards can assume their presence. If there's any doubt at all about whether a variable will have a value when you're using it, then you should use a normal optional declared with `?` and account for the `nil` case instead of the more dangerous implicitly unwrapped optional. &gt; var string4: String = "string" This is the same as the first case, except you're using a literal to initialise the string. Strings are so widely used that there's a quick way of creating string objects – just write the value and surround it with `"`. Numbers, arrays, and dictionaries all have these shortcuts, known as literals. Again, the compiler can see you're assigning a string to it, so you don't need to tell the compiler `: String`. 
Quick follow up question on implicitly unwrapped variable declarations.. Can someone tell me if I am incorrect below? 1. My understanding is that this is a guarantee that this variable will have a value, but it does not have a value when it is declared and thus must be given one before it is used. What is the advantage to declaring variables this way? 1. So IBOutlets are all declared this way. When a view controller is initialized, it will call the init(coder) method for each of these prior to viewDidLoad. If I am creating a UIView subclass, and it will contain some labels or subviews that I would like a reference to, and I would prefer to do so in code than with an Xib. How do you, personally, declare these subviews as class variables so they can be referenced later? Should they be weak, or does it not matter because this is the only view to have a reference to them? class MyView: UIView { var titleLabel: UILabel! var titleLabel = UILabel() weak var titleLabel: UILabel! var titleLabel: UILabel = { // return configured UILabel } } 
I am a teaching assistant in PHP, which I'm terrible at, but the students are completely new to programming. This drives me nuts. I try and try to explain.. "Absolutely use google, stack overflow, blog posts to help you, everyone does it.. but you have to go through each line and make sure you know whats going on" As soon as something doesn't work from copy-pasting over and over, you'll have no idea whats wrong and you're screwed and have to go through it all over again. And PHP is not easy going at all about tiny errors.
What quality video are you recording?
Nice project. Perhaps change the code from var identifier :String var inputs = [String:InputA]() var bias :Double? var output :Double? var error :Double? to var identifier: String var inputs = [String: InputA]() var bias: Double? var output: Double? var error: Double? 
As an iOS developer and former theoretical physicist, let me emphasize just how much everybody should take on this point of view. It was always incredibly fascinating when my PhD advisor would look at me and say "I don't know" when I asked him something. We'd both agree to spend time over the next handful of days and meet again early the next week to discuss what we've learned. If you aren't in love with learning what you're doing then you're probably in the wrong career. "I don't know" excites me and makes me want to go study for hours.
"I don't know" is a shameless answer in my culture (I'm from Ukraine). When you let this at school, university or at work ... people would tell that you are "bad pupil", "lazy student", "candidate for firing"...
Ah you're correct, as soon as you assign to a new var you get a copy. https://developer.apple.com/swift/blog/?id=10
AFAIK this broke in iOS 8.3 and has not worked since. I solved the issue by defining a custom UINavigationBar subclass that included a UIView that I managed directly. But you have to be careful about modifying the internal view hierarchy of any UIToolbar instance, as this changed in iOS 10 and could very well change with any subsequent release.
Thanks, I thought there must have been something I did wrong, but it's good to know it's just something that's changed since iOS 8
Looks very interesting, but how does the video end up on both devices?
If you said that to me in an interview, I wouldn't hire you.
If you construed that I think custom solution is required for every unique problem, I did not mean that. I mean that some problems require deep knowledge of the subject to even understand. I would expect pros to use theoretically sound and canonical methods.
I just replied to the root comment you did, but want to address this as well. Something I did was retype letter-for-letter everything I found on the Internet regardless of whether or not I was going to use the code verbatim. I never saw this outright suggested by any resource, as they often prioritize efficiency, but I do think that, in an age where new programmers have access to so many random snippets via Stack Overflow and the like, it helped me process what I was doing much better than I would otherwise. 
It does work in spyder if there is accompanying documentation, but it's a lot less useful. Like you can't click on an object and find out what it is, only on the class or function. So if I'm trying to see what the hell was returned from some function, it doesn't tell me, where as Swift I can see what I got back and what methods are available to it. Might be something to do with swift being type safe. Admittedly, I'm also much worse at python so sometimes interpreting the documentation is tricky.
Fixed it, i just had the height wrong, thanks anyways.
Since you can do it easily with a NSAppleEventDescriptor, then just do it that way. Reality doesn't care whether you like it. Neither does macOS.
Perhaps you can use a [temporary exception entitlement ](https://developer.apple.com/library/content/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/AppSandboxTemporaryExceptionEntitlements.html). I have sandboxed app in the store that does just that. That app uses NSTask to invoke `/usr/sbin/screencapture`. I was skeptical that it would pass review, but half dozen versions later it's still getting approved (hope I didn't just jinx it). 
Interesting. I was thinking more consumer and couldn't think of what I as a regular person would use it for. That makes sense. 
I'm getting some conflicting constraints messages now and the corner radius isn't working but that fixed the whole cell being way too long issue, guess I gotta get in the habit of doing constraints manually, in the past auto has always worked great, I guess when you wanna be more specific Xcode can only be so smart. Thanks for the tip, will play around and hopefully I can get things working properly, consistently now! Edit: The corner radius on the avatar image, I'm guessing it means the constraints I have now are making the size bigger than the image its self meaning the corner radius IS working, but isn't clipping the corners as its beyond them. Anyway again thanks! Never thought to try just going manual considering it was working perfectly for the image version of the cell
"Fake it until you make it"
Blaaaagh, I'm suffering through someone doing that right now
The most common approach is probably `var string = ""`.
For the avatar image, set its constraints to the top and left edges of the cell. Then add height and width constraints for the image.
when I need a help\advice, I always as my co-founder (he is experienced iOS &amp; Mac OS engineer. And it always looks like: "Explain me like I'm 5 y.o." Then I Google (also, it's difficult to read tutorial in English, you know the words but the context doesn't come to your brain).
Ok then maybe I should rephrase my question.... Is there a way to do it using either core graphics or accessibility API ? I dont think just because something works you should stop there, I want to compare what options I have available to me and whats the most reliable / flexible.
It's not like you can't put extensions in a library, though. Those two concepts are completely unrelated.
You can test what happens already, just create an extension and implement an existing function. I just did it and the compiler favours the extension. 
the readme could use some images. :)
100% agree. thank you! I'll update for the next commit. Do you have a github account I can credit?
But.. Isn't a temporary exception supposed to mean just that? That it is not permanent? I'm not sure I would get one today for invoking *pmset*, perhaps you asked for this at the right time a few years back and didn't get blacklisted because you were not messing around with stuff. I wouldn't be worried if I was you tho.. For now. Next macOSes, we'll see how it turns out.
Yep, I would also need the same kind of entitlements for this as I would for invoking the shell I suppose. Some kind of temporary one like /u/csexton described. Still, I can't believe the number of apps in the MAS that make use of these commands. Them having all a temporary exception seems like a weird move from Apple, to say the least! 
Fibonacci is basically never used in real life. I think when people write things like this, what they really mean is "integer performance microbenchmark". With double-precision floating-point, how big a Fibonacci number can you make before the precision loss of Binet kills you?
Meh, cosmetic changes. 
oh, you mean to mark it, yeah, that'd be cool! thanks!
You're extending your own type (i.e. from the same module) rather than the standard library or `Foundation` (i.e. from an external module).
What did you expect, full rewrite after looking at the code for two minutes? BTW, class -&gt; struct is a bit deeper than cosmetic.
Ray to the Rescue™ https://www.raywenderlich.com/124490/cocoa-bindings-os-x-tutorial
You need to set the vertical center constraint.
No need for the `: CGPoint` in your second line, either.
Thanks it worked! 
I see that hex board has improved!
yes, most certainly. I agree. If I was rebuilding it from scratch, I'd start doing in a different way. And what do you mean by code smells?
Yeah, I decided to finally put it online. How are things?!!? Finding people I know IRL is not something I expect for Reddit!
I can't complain. I was surprised to see your GitHub on my front page! 
&gt; It will not break any code. It can. For instance, if the developer implements `getMonth()` and returns `0` for January, then Apple implement `getMonth()` and return `1` for January. No matter which implementation takes precedence, you can get incorrect results (e.g. if your code calls that method vs if Apple's code calls that method). Generally speaking, it's not a problem in practice. The chances of Apple implementing methods with the same name as yours are quite slim. Certainly not enough of a problem to warrant completely avoiding extensions. 
Good catch. 
You're right, it could technically break your code. It won't stop me from using extensions, though :)
A bit off topic but here's some pseudocode http://m.imgur.com/gallery/UV7BEys 😜
&gt; That's not a cast. Good point! Corrected. &gt; … it needed to ignore factors that would require addressing in a real program. So is it really so clear? Hmm. We might have to agree to disagree here. My goal with the blog is not to write "real programs", but to present explanatory examples with as little distracting context as possible (hence the name "Figure"). An example including general support for `Collection` would add the noise of generics, generic constraints, and the non-trivial `Collection`-related protocols — all without adding any value to the concepts at hand. While fascinating, that's just not a trade-off I'm interested in making for this blog.
I am not a Swift expert, but I suspect `static var gViewController = nil` at the top of the file and then `gViewController = self` in your viewController's initialization code would do the job. Note that this would work only if you have exactly one instance of this viewController and it never goes away.
Great design! I'm downloading it. But I would Blue and White instead of Blue and Grey.
Thank you again. If I do that, the static var gViewController = nil throws an error: "static properties may only be declared on a type"
static var gViewController : UIViewController = nil maybe
set clipsToBounds to true on your image view.
Didn't seem to work im going to keep messing around with the constraints 
The iOS SDK isn't available on Windows, so no.
No Xcode, no SDK, no iOS apps. Period. The language gets ported, the libraries will probably *never* be ported.
I'll check it out!
This might sound "conspiracy theory'ish ", but unless Apple completely gives up on OS X they will force developers to use OS X to write iOS app. And as soon as someone figures out a work around Apple will close the work around. And that is the way Apple wants to keep it. So, just accept it, if you want to develop for iOS you will need a Mac. 
A workaround would mean breaking the signing system, and they have every right and reason to shut that down. It's Apple's platform, nobody has the right to expect them to hand the crown jewels over to the competition.
you could download Xcode and push apps to AppStore, using hackintosh for ages... stop searching for excuses
avoid anyone who think like that, even your family members... this weird mentality is cancer. saying "I don't know" is the first step to learning
clickbait title lol try Lets Build That App channel on YouTube, following this channel enables you to get a job right away...
Lol click bait. Awesome thanks for the YouTube channel! 
&gt;Given the new Swift for Windows compiler that's come out, is it feasible to test your code on your own idevice through itunes, or on an emulator, and call it a day? That is a very confused question. The Swift compiler for Windows isn't for iOS development if that is what you are asking. Now if you question is is Swift on Windows viable that there is a loaded question. Swift is heavily under development and frankly isn't exactly viable anywhere. However if you want to start learning Swift running it on Windows is possible but honestly if you want to stay away from Mac OS then Linux is the way to go right now.
The question is: what do you *want* it to do? Dealing with being able to zoom and page images like photos works can be a bit tricky.
Future reference, please take a screenshot with your mac instead of taking a photo of your screen with your phone(At least it looks like a photo taken with a phone and an Android phone at that, yuck). Thanks. 
I was able to get the images to page and Im using another library called NYTPhotoViewer to display the full image. I was able to get the image to show as intended, I had to change a few constraints. 
good to hear!
&gt; is just my customer address and phone number considered to be PII Are you really asking if your phone number and address can identify you as a person? Yes, of course.
I'm still a scrub in swift but here is my take: Think of viewDidLoad as your constructor and basically anything you want your program to do as it starts to run the first time, you put it in viewDidLoad. So any variables that you want to initialize as your program runs, you put it in viewDidLoad I'm not aware yet of init(). If anyone sees anything wrong in what I did, feel free to correct me
A small project to make the Swift mailing list more accessible -- Luath https://github.com/kerrmarin/luath
viewDidLoad is only for viewControllers, and like it says, it is only called once the view tree of subviews has been initialized by loadView, which usually loads from a .xib or a storyboard (although you can create your view hierarchy programmatically there). People often @properties of a viewController before it is loaded, so the setters have to check, and only go on through to the U.I is the view hierarchy exists. Similarly, viewDidLoad must copy the value of the properties into the U.I. loadView is moderately expensive, while init and initWithNib Bundle are comparatively lightweight and cheap.
Just download the latest Xcode and build to iOS 10 and test? If you're not testing on iOS 10 devices then don't assume it will work. 
This means that /etc is really a symbolic link (or symlink) to /private/etc. A symlink is like an alias for another file (or, in this case, a directory). The whole /private directory is something MacOS does for special files. They make a symlink here from /etc -&gt; /private/etc so that things look like how Unix normally looks (things expect /etc/hosts to be the name of the file). So, since one is an alias for another, you can really access the files either way, but /etc/hosts is more canonical. For the most part, you can ignore that /private exists.
There are 3 kinds of shortcuts in OS X. That's a symbolic link (or symlink), which specifies a different name to look for when you try to access a file (or directory). So, that's basically saying that the OS will look for files that belong in etc in private/etc instead. You can have a symlink that points to anywhere in the filesystem with an absolute or relative path. It can even point to a place on a different disk through the mount point. There are also hard links, which is when you have two separate files that refer to the same data on the hard drive. Unlike symlinks, a hard link has to be on the same filesystem as the original file. Finally, the Finder also has what it calls aliases, which point to a file like a symlink but will update themselves to the new path if you move the original file. These only work within the OS X UI and not the terminal or any UNIX-based programs. 
NSManagedObject with setValue method is exactly what I was looking for. That's how CoreData does it. Here is a fine article explaining it all: https://appventure.me/2015/10/24/swift-reflection-api-what-you-can-do/
If this is a large project that can't be refactored overnight, download Xcode 8.1 and install it side by side with Xcode 7.3. Follow the answers in [this stackoverflow thread](http://stackoverflow.com/questions/37945376/use-xcode-7-with-ios-10) to create a symbolic link to the latest SDK so you can debug on an iOS 10 device (a real one, not an simulator) with Xcode 7.3. Migrate to Xcode 8 when you have extra time. If the project is small enough, download Xcode 8, learn the changes and migrate right away. Old syntax of the swift language will become unavailable with the Xcode 8.3 release next year.
A disk cache lives on the hard disk(flash/ssd), so it won't cause OOM(the memory we are talking about in OOM is RAM.) You have a lot more hard drive space(16 to 128gb) than RAM(1.5 to 2gb). Hard disk is a bit slower than RAM, but it's fast enough to look like the images load instantly. Personally, I use AFNetworking for HTTP requests, and that gives you a category on UIImgeView setImageWithURL:placeholderImage: which does the whole disk caching and placeholder thing for you automatically. SDWebImage is basically the same thing without all the other networking stuff AFNetworkign comes with. There's a swift one called Kingfisher that does the same and has support for prefetching images really easily. I'm sure there are a dozen other options as well.
Just at a quick read, it may be strictly illegal in some countries to do what you're asking with firebase. I don't know the laws of your country, but firebase itself makes no claims to their compliance of information security. 
Hey :) yeah you're right. Sorry, the docs were a little out of date. I've updated them now. If your API key is wrong or you don't provide an API key you'll get a 401. Thanks for pointing this out!
These articles may be good but they're really hard to read. The webpage only shows about 50 columns of text in the source code, no matter how wide I make my window, or how much I zoom in/out. (My Commodore 64 was slightly worse, but 6502 assembly language didn't take as much horizontal space.) I just don't have the brainpower to manage 4 or 5 different horizontal scrolling divs on screen at once. It's great that it's also in a repo, but the code has no comments, and the commit message is just the title. Why not put your comments in comments, and just make the repo the blog? It'd be a lot easier to digest.
No worries - hope you're enjoying the new job ;)
I have never used this and have no experience with it, but couldn't you add multiple AVSessionOutput objects to the session and create a custom output which only stores the last 30 seconds?
Thanks! Feel free to open an issue in GitHub and I'll look into adding that list when I get some time :)
&gt;We have around 20K lines of Swift code in around 180 files. The project relies on 24 pods 😥 of which none uses Swift. We are currently in the process of reducing our Cocoapods dependencies drastically. Dear Lord
Swift discourage the dynamism, thats why reflections are poorly implemented, and that why mapping libraries sucks, but they have a reason to so this, you get more errors thrown on build time instead of runtime.
I don't even think it's worth it. Not to mention that Swift 4 isn't final. You'll have to port to Swift 3.1, 3.2, 3.3 and Swift 4. Totally irrational to port a project of that magnitude away from stability. 
24 pods... A true Frankenstein of an app.
making an array of functions and using a loop to iterate through seems really cool to me. It never occurred to me that it was possible. 
Everyone's being really dramatic about Trump getting elected
Assuming that there's any single universal paradigm that's always the right choice. Functional, OOP, procedural, MVC, MVVM, these are tools in a tool box, they all have their place. No, reference types aren't bad, and no, value types aren't inherently superior, and no, dynamism isn't inherently worse than static code. We make *programs*, and programs are judged by how well they solve the problem.
Tech is a notoriously hostile environment for women and minorities and there has been a real focus on correcting those cultural issues. The election of a candidate who has vocally shown disrespect to those groups raises concern. In a situation that is a bit uncertain for everyone, especially those who have been directly derided by the president-elect, Natasha is providing reassurance. Aside from the fact that no industry should create a hostile environment for anyone, we also limit our possibilities when we don't work with people different than ourselves. I'm heartened to read Natasha's words and am glad for what she does in our community. Keep it up Natasha!
if it's going to change this much this often and require this many ports, there's a good argument it's not ready to be the primary coding language for iOS apps. It may be simpler for a beginner to pick up, but it's a huge PITA to have to rewrite your whole app to Apple's whims every year if not multiple times a year. These guys lost 2 weeks of development time, and judging by the reviews of their app they ended up with a number of bugs/lost functionality at the end of the day anyway. In some ways it's their own fault (24 pods!?) but 20k lines of code isn't THAT much, either...
This list of usual suspects will, hopefully, be obvious; but I've also seen them repeated almost everywhere I've ever worked: - **Repeated blocks of code** that could be made into methods/functions. Obvious, easy to fix, there are no real excuses for this. Made even worse when those blocks of code each have a *slight tweak* that could be much more succinctly represented by the parameter of replacing function. - **Everything's a string!** No, it isn't! Most often seen with numeric values, dates, times and wannabe enums. Convert to and from the most appropriate type at the **earliest** and **last** opportunity e.g. during JSON (de)serialization only. - **Everything's a dictionary!** Similar to the above, I see this a lot when developers deal in data from web-services. Some Devs just accept the dictionaries that `NSJSONSerialization` has handed to them and manipulate the data only at the point of requirement, you could say this is a *lazy* approach in both the technical and non-technical senses. This may seem easy, but it really isn't: failing to use the type system makes your software more error-prone and sprays a mess of type conversions *all over* your app: *nasty*. Plus, by failing to use Swifts type system, you're also insulating yourself from related language features such as generics, delaying your own learning. Make dedicated classes and structs to represent your data model, and use them. - **Massive ViewControllers**: Learning to think in terms of loosely coupled, single responsibility is undoubtedly a major challenge on a developers path but once you crack the mode of thinking, things become so much neater and easier to reason about. **Honourable mention**: I once saw a developer JSON serializing data to pass it between parts of the App *internally*. Not persistently, not inter-process, but just plain old method calls between classes. When quizzed on this, his answer was that it was 'more efficient' to pass a single string parameter, than lots of individual parameters. How does the phrase go? *"I don't even..."*
Which part looks unconventional to you? Half this stuff is in the stdlib already! :-)
Isn't Swift 4 supposed to be backwards-compatible at the source level?
That list makes me pretty happy with my habits so far, I think all I'm guilty of from that list is using dictionaries straight from json, but I'm gonna need to change that to store things using CoreData, if I wasn't to need CoreData what would be a reason to not just use a dictionary? Appreciate the response
Absolutely, and Swift 3 is already promised to be able to live alongside your Swift 4+ code.
Think about intention: - viewDidLoad() is the place to complete the loading and configuration of the view managed by the UIViewController. viewDidLoad() will be executed when the UIViewController gets presented (or, alternatively, when it's view property is accessed for the first time). Examples of things you can do here: Create a new view programatically, add new auto-layout constraints. - init() is the place to complete the initialization of the class itself. Whatever you put in here will be executed as soon as you instantiate the class. Examples of things you can do here: Subscribe to a notification, initialize a data source... In previous versions of iOS there was a very important distinction: UIViewControllers could unload their view under memory pressure conditions and as a result, viewDidLoad() could get called multiple times during the life-cycle of a single UIViewController instance (as opposed to init() which only would be called once). As iOS devices grew in memory, I believe that the view unloading was removed as the memory benefit was smaller than the cost of destroying and recreating the views.
It might take a while to get used to it, but in the long term I believe that it is easier to maintain: Pure functions without side effects have their functionality so well encapsulated that are easier to manage as you don't have to worry about unseen dependencies.
Hi, it might look complex to you if you've never dealt with it before - but functional programming is a major part of Swift and you'd be doing yourself a disservice if you were to ignore it. For example - look at the hugely popular RxSwift lib https://github.com/ReactiveX/RxSwift
Use many exclamation marks!
"This tutorial requires you to use a Cocoapod called..." NO! no no NO! :)
I don't trust them for that. Even going from swift 2.2 to swift 2.3 wasn't seamless
Did they ever claim that though? What you're mentioning is completely unrelated.
I'm not saying that they claimed that, I'm saying that I don't trust them not to make source level changes from Swift 3 to 4, especially since ABI stability was a goal for Swift 3 and got delayed. Of course ABI stability is not the same as source level compatibility, I'm saying that it's not the first time they've went back on what they said: https://github.com/apple/swift-evolution/commit/06b69a6e51a71a462c268da60b51a18966dba31b . I'm not saying it's a bad thing or a stupid decision, as it might have been a long term problem for the language, just that I don't trust that Swift will remain source compatible this year.
Oh, then you have misunderstood me. There will definitely be source breaking changes from Swift 3 to 4, but Swift 3 code will still be usable in Swift 4 projects. I don't think the details of how this will work have been worked out yet, but this is what they have promised us.
The plan is for Swift 4 to have a stable ABI though, so Swift 3 code should be the only "odd one out". And codebases with both Swift 3 and 4 would be a bit harder to maintain, but it does make for a way smoother transition to Swift 4 next year.
In the UICollectionViewCell subclass, try overriding "prepareForReuse." Try doing whatever cleanup you need to the animation there.
As opposed to dragging SDKs into Xcode? Trust me, I've seen my fair share of Cocoapods screwing stuff up in production, but it'd be much worse without it. Unless you're advocating Carthage instead, which most frameworks are available on. 
Thanks for this post. There's a dearth of real world examples using FRP libraries in apps. I've started to use ReactiveSwift in my apps and it does a great job reducing the complexity of calling functions that take multiple closures as arguments. It turns a deeply nested tangle of code into something linear and readable. Hope to get a repo out soon with an example.
Defining vars to be optional when calling code always sets a value and then using if let everywhere that its used. Either set it in an init() or give it a default value. Don't confuse the code reviewer and don't add unnecessary code.
Objective-C is open. The compiler is part of Clang.
You can use swift 2.3 in a swift 3 project
I'd like to be open to your suggestion, but honestly I just have a hard time "seeing" what this would really look like or knowing how to write for it. A web page article has an understood flow like an opening paragraph, the content and a summary - an obvious means of attaching screen grabs where necessary, etc. Are you aware of any examples of a repo blog like you are proposing so I could get a bit more familiar with the idea?
Awesome! I'd love to see the results if you wouldn't mind sharing :)
Hey, that's a pretty sweet idea! So essentially you can define a bunch of hashtags each generic for a specific type of picture, and then add all of them with a single press?
p.s. Anyone interested in advanced typography in their app, let me know. We'd love to enhance the library further for new clients interested in this stuff. 
Here's some code in a slightly different case than the OP. func showAlert(_ notification: Notification) { let userInfo:Dictionary&lt;String,String?&gt; = (notification as NSNotification).userInfo as! Dictionary&lt;String,String?&gt; let alertString = userInfo["alertMessage"] let passengerId = userInfo["passengerID"] if let sound = userInfo["sound"] { if sound != nil { SoundManager.sharedInstance.play(sound: sound!) } } if let passengerIdValue = passengerId { if passengerIdValue != nil { let selectedPassIndex = findIndexFromPVID( passengerIdValue! ) tableView.selectRow(at: selectedPassIndex, animated: true, scrollPosition: UITableViewScrollPosition.top) This snippet is invoked from this notificaiton post. "Message" and "visit" are ALWAYS set in code. NotificationCenter.default.post(name: kSepsisScoreAlert, object: nil, userInfo: ["alertMessage": message, "passengerID": visit.passengerID]) You don't have to declare the Dictionary to have an optional value from the key/value pair in the first place. Adding the "if let..." code implies that you may not get a passengerId which is wrong. If your code always sets to a parameter to a function, there's no need to declare that parameter to be optional as it never will be.
+1 I think this is a unique idea. I entered my email for beta as well.
`if let`, `guard let`
I'm pretty sure that doesn't unwrap an optional value.
My understanding isn't that 9 would drop it, but that all versions after 8.2 will drop support as well (so if there is an Xcode 8.3, it would not support it either)
The `if let a = b[c] { if a != nil { ...` pattern confused me. I don't know if I've ever needed an `Optional&lt;Optional&lt;X&gt;&gt;`. They're certainly pretty rare. I'd say if you're doing that, and you're not trying to do something a little crazy, you're probably making it more difficult than it needs to be.
Not anymore. I have a project that I put on hold that uses Swift 2.3, so I guess whenever I come back to that it'll have to be a rewrite. 
If history is any indication, you've still got 6 months until 8.3, as well.
Why do you think that?
I think people these days don't realize how fast paradigms die out, once we figure out a really good one. Your comment sounds just like my friends in the 1980's saying "Some of us like assembly, and some of you like those new-fangled compilers, and they're both equally good for writing applications. It's just what you know and like." In the areas where we found the Right Answer, the other answers have been dropped so universally that they're already forgotten. When's the last time you wrote a program for a computer that didn't use two's-complement? One day you're going to tell your kids "Back in my day, some people thought Electron and React Native were a good idea..."
Yes, pods and libraries are the reason why I still use 2.3... but maybe not for the next project.
&gt; WHLWTJTW7E76 I redeemed the first one and I'm sending those cute birds out to my friends! 
Making my Telegram bot library [ZEGBot](https://github.com/ShaneQi/ZEGBot) supporting more APIs.
How about trying aspect fill?
For the longest time we had KVO and NSNotificationCenter (before it got improved at all), and they were both kind of lousy in their own ways. It's a shame. This feels like an area where we want somebody to come along and make "NSNotificationCenter done right", but NSNC is so deeply embedded in the system frameworks I'm not sure how much you can do now.
A good rule is that if you declare a variable to be optional, then nil should be semantically meaningful. Don't just handwave "I guess it could it be nil if something goes wrong" and then pass around what amounts to a time-delayed error message.
did you look at the exception being thrown? I have been using and supporting the Decodable library for all my JSON needs lately, it's great: https://github.com/anviking/decodable 
Because updating is expensive on existing projects. Early adoption of swift is the fastest way to build tech debt I've ever seen.
Wouldn't a quick profile show that dev that they were full of shit?
Its doesnt work if I dont typecast, its throws the error "Initializer for conditional binding must have Optional type, not 'Any' ". How can I fix this?
yes
I was spend two days to upgrade my project to swift 3 since I downloaded Xcode 8 one week after. My project contains 3 custom frameworks, over 20K lines.
Oooh, that's so beautiful it definitely looks like sorcery.
I probably should've added that everything is written programmatically. Everything online about constraints (and everything else...) only shows how to do it with storyboards. What's the best way to use constraints programmatically? 
very cool.
Have you seen what's happened to certain members of the video game development and journalism community in the past couple years? There's probably some slim overlap between that and the Swift community, even though the software development community as a whole seems to on the right path with respect to inclusion and diversity. If that kind of regressive ideology and behavior starts to be more acceptable throughout the U.S. though, there's a danger than trend could be reversed which gives people legitimate right to be concerned. Not trying to paint you T_P with any brush, but belittling other's justified concerns is one of the tactics of the regressive right and gamer-gate dudebro bullys. How long until reasonable regard to inclusion and diversity in any community is painted with the SJW label, somehow derogatory these days, and demonized? I wouldn't label the growing fears of anyone who lives or works in the U.S. today as simply "drama".
Not the same situation but related: I had gesture recognizers added to each cell in my tableview and got it working for iOS 8 &amp; 9 but it didn't work running on iOS 10. I made some attempts at debugging the problem but in the end went with a single gesture recognized added to the tableview instead which did the necessary hit testing in the shouldBegin method (or whatever its called). FWIW
You can build with the old Xcode, then test on iOS 10 by drag installing the ipa of archives builds. You can do that in the Devices window in 7 even though those devices are not supported for direct install &amp; run. To submit to the store have both Xcode 7 &amp; 8 installed, and after building the release archive, quit 7 and launch 8, the same archive will be in 8's Organizer window where it can be submitted. This has been my workflow since 10 shipped &amp; that submit error started happening.
Interestingly enough cocoapods _just_ hit 1.0 a few months ago. 
I recently did it the other way, linking the iOS 9 SDK from 7 into 8 and adding the build settings to specify Swift 2.3. My project, and many Pods, built without a hitch. Once exception though: I did have to downgrade AlamoFire since the Xcode 8 savviness added in v3.5 was problematic (ironically). Any code that uses the presence of swift 2.3 as a test for the iOS 10 SDK will be in the same boat in fact, making this a stop-gap measure at best (and perhaps makes the solution suggested by tonyunreal a better one).
Not to be that guy but I'll be that guy. SwiftyJSON is great for more traditional JSON key/val parsing. JSONJoy is awesome for full object mapping that you can extend in all sorts of fun ways. Overhead to using and learning both but once you are into it you can do some cool stuff. Both Swift3 happy.
But this just says: you can use swift 2.3 in a Xcode 8 project. When using the legacy setting, all the code needs to be swift 2.3.
Hi, thanks for the input. It didn't even occur to me. I'll definitely be more cautious with the next article. 
Swift also has a runtime to interact with objc and the osx stufff like apple events. It's also not bad but it's actually a lot better, just slower and less secure if done wrong.
Facebook has discovered an alternative to notifications, see [Flux](https://facebook.github.io/flux/docs/overview.html#content). The intro video is good. I use it sometimes my apps.
Have you tried `UIViewContentModeTop`?
I agree that SwiftyJSON/object mapping libraries can save a lot of time and frustration. No shame in using them! You'll end up with more readable source code too. 
Thanks for your input. Cocoapods has been the most common manager I've seen, but based on your comment (and dov69's) it seems the reason for that is simply because it was there first and people are stuck there. Definitely going to get a little more familiar with Carthage now. 
Does anyone have a guide or solution to how this kind of information should be stored? Is this an encryption issue or does it require a whole different solution?
So I am braced for the "extensions are evil" posts that are going to inevitably come now that 80% of the tutorials out there are using them indiscriminately. In the meanwhile if you want to use in your own code name spacing goes a long way. One way is to use prefixing like `pre_` which is kinda ugly but a lot of the reactive libraries do this on all UIKit extensions. Another way is to add name spacing via lazy getters. So for instance if we wanted to add pow to integers we could use: struct IntMath { let value: Int func pow(exponent: Int) -&gt; Int { if value &lt;= 0 { return 0 } var output = 1 for _ in 0..&lt;exponent { output *= value } return output } } extension Int { var math: IntMath { return IntMath(value: self) } } Then you can call: ` let output = 3.math.pow(exponent: 4) ` In this case if apple ever adds a math getter to int it is REALLY unlikely it will be your custom structure so you will at least start seeing some compiler warnings. Compare that to: extension Array { func sorted() -&gt; Array { return self } } Which can basically ruin an entire project, and is perfectly legal. 
I don't have any specific code or routines for this, but I thought about how they would do something like this for a security system. Basically I looked into recording video, checking areas of the recorded frames for changes (motion detection) and then dump the video that changed into a different file. The game plan that I had was a recording window, just like what you talked about, running thru that at whatever speed I could while setting a timer. The timer would help to adjust to the amount of time needed to look at the frames and account for whatever time was needed to write a 2nd file. Again, I never wrote any of the code, just got into making the general game plan and have actually dumped screens (frames) based on certain events. The game plan was to start with a timer so that you know where you are in a stream. Maybe have a high priority thread that was doing the primary time, streaming. Pull from that as needed for the window that you want to record. Basically a buffer of a certain size that could be block written if needed to account for loss of power or loss of storage space. The storage would be basically an array of frames or groups of frames if you wanted to make it every X seconds for the cutoff. I don't know if the recorder has something for how much of a buffer it would have. Might want to see if there is something related to file size and then calculate the file size needed for 30 seconds.
Thank you, you've understood my problem, and hopefully I'll be able to put your suggestions into practise! I may be back for more help on this in future!
Did you find anything out? I'm seeing 5 seconds just to save a simple record with one numeric field.
Yes a strategy like this might work. As I said in the other reply- if I can figure out a seamless stop / start and restitch, a strategy to just record 30 second chunks and discard the oldest chunk after each 30 seconds passes might do the trick. Thanks 
I've used the delegation pattern a lot, but it's falling out of preference to me. The more complicated my projects get, the less I like having code that interacts with other code in five places (protocol declaration, protocol conformance, delegation set, delegate method call, delegate property definition). There is no 100% direct coupling, but there is still single purpose coupling all over the place. FRP improves this in some ways. A lot of times, you can just write code in the parent class and that's it. But it's very non-standardized so it's easier to forget what you did and what you're relying on without bouncing back and forth between child/parent classes. 
Hm yeah I hope these things get improved over time.
Ill check this out thanks
Hi! I'm Mauro, one of the Katana's developers. We are aware that there are many things we can improve (and add) to Katana but we are actively working on it and every feedback is welcome! We are using it to create applications that are meant to go in production, so typesafe code is definitively one of our goals. We are really looking forward to read what people outside Bending Spoons think about Katana, what are their use cases and how they think we can improve Katana. For any feedback, idea, fix or issue report we'd love if you can open an issue or send a pull request! 
Hello, I'm Luca, one of the developers behind Katana :) as Mauro said we really appreciate your feedback. I think it would be really cool to cooperate and solve these issues together. 
Hey Danappelxx, I'm Andrea, one of the Katana's developers. I think your comments really makes sense, in fact I already opened a pull request that changes the static method to compute the next state, introducing an equivalent instance method. That was there for legacy reasons that now are no longer valid. Here the link to the PR: https://github.com/BendingSpoons/katana-swift/pull/68 Thanks again! We will keep working hard to improve the framework, any help is appreciated.
IUO should only be used when a) you actually know it's safe, the compiler just can't tell (i.e. I just check some condition that guarantees it), b) when using Interface Builder, as it generates them for you, or c) when crashing because it's nil is desired behavior, like during development as you build up surrounding logic.
Seems like the HTML/XML rendering and the image attachment stuff could be split into separate libraries. Anything that makes dynamic type easier is great, but does it do anything for those of us using Interface Builder? I'd love to be able to set my font styles and use them in IB while also being able to use them in code.
This looks great! I love the fact that this flavour of Elm inspired architecture seems to be catching on. Any differentiating points/benefits compared to [ReSwift](https://github.com/ReSwift/ReSwift)? From a first glance, it looks like Katana dispensed with the whole concept of state reducers. 
I think I found my answer- turns out switching the file being recorded to without any frame loss to is built in on macOS: &gt; func startRecording(toOutputFileURL outputFileURL: URL!, recordingDelegate delegate: AVCaptureFileOutputRecordingDelegate!) ... In OS X, you do not need to call stopRecording() before calling this method while another recording is in progress. If this method is invoked while an existing output file was already being recorded, no media samples will be discarded between the old file and the new file. ...
The app review reference: https://developer.apple.com/app-store/review/guidelines/. Make sure you read the text on this page (without necessarily going to the detailed sections). That should give you some sense of comfort that you know what the reviewers want. App review times are down to a day (http://appreviewtimes.com/) so you'll get quick feedback. No big deal if you get a rejection - just address the reviewer's concerns.
Hi thank you for your guide. I sort of succeeded to get logs by using a stand alone LLDB in VM. But I have failed to run remote server in VM. I tried for days. every search results I found is for iOS. Do you have any idea to do that for Mac apps?
I'm looking contributions of any kind! Please feel free to make critiques or open up issues. I'm not a sensitive person :)
Why not try the BSD C API?
The appropriate question I should have asked was can I use this from Swift?
Found this: http://swiftrien.blogspot.com/2015/10/socket-programming-in-swift-part-1.html And this: http://stackoverflow.com/questions/33436288/how-to-use-socket-in-swift-connect-send-and-get-message And this: https://github.com/robbiehanson/CocoaAsyncSocket And this: https://www.appcoda.com/socket-io-chat-app/
I greatly appreciate you finding these resources. I had actually seen the last two but I wasn't trying to introduce a dependency when I don't understand the underlying library. The first resource you provided is great, like /u/Brianmj suggested, I didn't know you could make C calls like that in Swift code. Is it pretty common practice to forego the Foundation socket library in lieu of this C implementation?
Use the libraries to learn how they work with sockets then create your own or trust the one provided. C libraries are common, like SQLite for example, so use them as needed or port them to pure swift if necessary or for learning purposes.
It almost seems like the C implementation may be the way to go even if I am unfamiliar with the language. I had no clue C was supported to this extent in Swift. But then again I never had the requirement to do something like this until now. 
I used this to learn about the Unsafe APIs since there's not much on it https://www.uraimo.com/2016/04/07/swift-and-c-everything-you-need-to-know/ But that was written during 2.x. Some stuff has changed in 3.0 like UnsafePointer&lt;Void&gt; is replaced by UnsafeRawPointer and there are new APIs for casting like withMemoryRebound. But it should get you up to speed, and the IDE should be helpful pointing out changes from 2.0 to 3.0
Good question. We've actually been pushing more and more away from IB for a number of reasons. You can learn more about this here: https://www.raizlabs.com/dev/2016/08/ib-free-living-without-interface-builder/ A number of developers believe that IB is the mobile equivalent of what WYSIWYG Ui was doing on web platform tools about a decade ago. It lets you do a lot of basic things but then it over-complicates and obscures your true understanding of what the software is doing. 
How are you feeling about swift server? I was thinking about using it for something soon.
How are you feeling about swift server? I was thinking about using it for something soon.
Tried [searching for source code](https://github.com/search?l=Swift&amp;q=socket&amp;ref=simplesearch&amp;type=Code&amp;utf8=✓)? [socketio](https://github.com/socketio/socket.io-client-swift) looks like a good place to start.
Correct, great explanation! Also, it is not correct to say that the view knows all the app state since there is a way to "filter" the app state with only the pieces of information that are needed in the view. With this separation, the view won't change if you change the state or anything else. If you look at the tutorial (work in progress) https://github.com/BendingSpoons/katana-tutorial-swift we develop a UI without any logic or app state. This is very very handy in my opinion. PS: there are no "controllers" anymore (at least no like the ones we are used to in ios development)
I think it's worth noticing that I copied entities from another project. I'll probably will try recreating them but I'm not sure it has to do with this fact.
That post you 'followed' is specifically about dealing with different sized integers; a Date is not a different size of integer, it is a completely different thing. CoreData has no trouble dealing with dates and numbers, there must be something wrong with your model or your model classes. I suggest you follow some CoreData tutorials because they will certainly cover how to handle dates and numbers. For example: https://www.raywenderlich.com/115695/getting-started-with-core-data-tutorial https://www.raywenderlich.com/tag/core-data 
This is related to the [Specification Pattern](https://en.wikipedia.org/wiki/Specification_pattern) and was discovered by Microsoft, but it doesn't deal with validation error messages. I have made a swift implementation of it, [github](https://github.com/neoneye/SwiftyFORM/blob/master/Source/Specification/Specification.swift)
Even if I don't approve of your language, I wonder for quite a while now if I'm the only one seeing more and more web-dev-inspired frameworks and tools for iOS development or if I'm just in a biased bubble. I'm talking about CocoaPods, ReSwift, some testing libraries, and so on. I'm happy about the testing libraries and I know some people that are really happy with reactive Swift programming, so I don't judge, I only observe and wonder.
I appreciate the links. Your example (and the pattern described in the wikipedia) definitely has some useful features my implementation doesn't. And also common criticisms for anyone interested in those.
Looks like keyword bloat on something that basically already exists to me. I don't like keywords just for silly syntax sugar. For variables, use property observers. For everything else, go event oriented. 
You can declare a delegate (protocol) in ViewA that has a function like protocol ViewADelegate { func didSet(withValues valueDict: [Any : AnyHashable?]) // or whatever type you want } In ViewA, when the user taps the "Done" or whatever call the delegate delegate.didSet(withValues: ...) In ViewB, create an extension to handle the values extension ViewB: ViewADelegate { func didSet(withValues valueDict: [Any: AnyHashable?]) { // do something with valueDict } } 
You CAN override `prepareForSegue`. The destination is available at that point for you to set set ivars or call functions on it.
If you want to do something when a variable changes how about a custom setter for that variable?
Example please
Normally I dislike this answer, but seriously: RTFM
Thank you! 
You also have willSet which is called right before a change. 
Precedence? You mean position? Labels make the call more expressive and clear. Labels also let you overload functions, methods and initializers using the same argument types. Consider a remove at index method. In other languages, you have your remove(Int) and that's it. No more overloads can have that signature. In swift, you can define several, you may want remove(at:), remove(before:) and remove(after:). All defined with a int index. 
Sorry, what book?
https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ Also available as an iBook https://itunes.apple.com/us/book/the-swift-programming-language/id881256329?mt=11
&gt; Labels make the call more expressive and clear. Debatable, any decent compiler can give you all the semantic information about the call without the need of this, if that's the feature (labels) main purpose. &gt; you have your remove(Int) and that's it. No more overloads can have that signature. In swift, you can define several, you may want remove(at:), remove(before:) and remove(after:). Hmm, I'm not sure if is very useful, but more cosmetic. The same can be done by just suffixing the label with the name of the function: `remove(at: Int) -&gt; removeAt(Int)`. Is matter of taste. I think labels are more useful on lazy evaluated languages or partial evaluation. A few cases: I would have a method `add(a: Int, b: Int)` which can be called like this: add(b: 6, a: 4) Which would be ordered automatically given its parameters add(b: 7) Which would return a partial expecting the remaining `a:` argument Also useful in cases where parameters already have default values. Hence my questioning of them in Swift. 
Thanks! 
Been playing around with a playing card generator: * https://github.com/Zbeyer/CardGenerator Still have a few bugs to work out.
search for barSpace here: https://github.com/danielgindi/Charts/releases/tag/v3.0.0
Labels also allow you to have an arbitrary amount of default arguments at any position, including in the middle of the argument list. func doStuff(a: Int, b: Int = 5, c: Int) doStuff(a: 1, c: 2) They also allow variadics to work at any position since an argument label will end the variadic, such as in `print`: print(1, 2, 3, separator: ", ", terminator: "\n")
The delegate pattern works when both objects (ViewControllers) are already instantiated. It doesn't seem like that's the case here. You do need to pre-set the Picker values using the selectRow() function or setting its datasource. It seems like the seque suggestion from love2code might work better. You'll have to wire up the segue in your storyboards though. So, instead of instantiating the storyboard, do a performSegue(). UI's are confusing and complex to do well... and server guys wonder why we can't get 90% test coverage... 
You're probably printing the function itself, rather than its output, but it's hard to tell without seeing any code.
Let the compiler just infer the type. It's less needless boiler plate this way. One exception being if you need to hold a reference to an object as it's super class type, such as `let vehicle: Vehicle = Car()`
&gt; Maybe, but I want my code to be readable without the use of an IDE. Not sure why? Modern compiler design (which I believe Swift being one) is coupled with IDE support, is there you want it or not. There is not value resisting this trend. &gt; but not really for functions with multiple parameters. An example please?
What's your use case? And what do you think is missing? 
I'm working on a unique game that deals with Donald Trump and his wall. And the reason I say unique is because there isn't something like it out there in the App Store. It's not one of those build the wall high, nope. And certainly not another Flappy Bird clone. This is a unique game. I plan on finishing it in a week when I go on my week off vacation from work.
&gt; But the arguments are still ordered, is the same as they are not there. That's also true of whitespace. That doesn't mean it's not tremendously useful to have in the source code itself. &gt; Nah, that's not what I want It sounds like you're proposing labels/parameters in any order, and the ability to omit some (for currying). I'm not sure how you propose to implement that without dictionaries. It sounds pretty much like the definition of dictionary to me.
Since you're the one asking why it is how it is, I think the onus is on you to provide an example of how it would work *without* labels. Would you just smash them all together in the function name? myDataStructure.replaceFromToWith(a, b, c) This seems pretty awkward to me. It's perfectly valid Swift, so you could write that way if you wanted to, but I haven't seen any program that does. Personally, I find it much harder to read that than a version using normal labels: myDataStructure.replace(from: a, to: b, with: c) 
I am sorry, but I do not find any real value in this argument. &gt; myDataStructure.replace(from: a, to: b, with: c) &gt; myDataStructure.replace(a, b, c) This is perfectly readable to me once a read it from the docs (that one time), or the IDE told me, repeating the same labels for the sake of arguable readability already is redundant and a burden. I mostly don't care nor need to remember the name of the arguments but the semantics of the code. Such cases only appear when I want to override the order of the call (which in Swift you can't). I already found some value on labels in Swift when you are skipping default arguments, there is that though. Thanks for your insight none the less. 
Read into the delegation pattern that is used throughout iOS.
Are you trying to file a bug report? Try bugreport.apple.com or bugs.swift.org. If I had a dollar for every Swift compiler bug I ran into, well, I couldn't pay my rent that way, but I could buy lunch every day.
Works when wrapped in array initializer: ``` return f1(arrCopy) + [Int]([val2Arr]) + f1(arrCopy) ```
I can't see how this is not a compiler issue. I tried the following, it works. It's literally the same object I'm returning there :/ edit: OH GOD REDDIT CODE FORMATTING, gimme a sec... extension Array { func returnSelf() -&gt; Array { return self } } func f1(_ arr: [Int]) -&gt; [Int] { var arrCopy = arr let val2 = arrCopy.removeFirst() return f1(arrCopy) + [val2].returnSelf() + f1(arrCopy) }
It's a known bug: https://bugs.swift.org/browse/SR-1914
I've chatted several times with Aurelius who heads AudioKit and he's a super nice and helpful guy who's clearly very passionate about audio. If I was going to do anything audio related on iOS, the first thing I would do is go look at AudioKit and interact with it's community.
Is UICollectionView close enough to NSCollectionView that it would be feasible to make this available for the Mac as well?
I know that. I want a way to click some icon somewhere and show me all my TODOs and FIXMEs so I pick one and it sends me right to the editor, just like in Eclipse or Android Studio.
Use the search, Luke! …it will show you the list of your "TODO"s in the project and allows to click them.
Do you want it to build on discourse forum?
Do you want it to build on discourse forum?
Not bad, but that's limited to a file. Is there a way to have them all in one place and from there click and go to any file anywhere in the project?
That's the closest to what I want and exactly how I wanted it, listing the files and the references to TODOs. I'll use that for now while Apple implements that as an area in XCode activated with an icon. Thanks for the tip.
I remembered all server frameworks use some kind of socket library. Search in github for Perfect, Kitura, Vapor and Zewo, all of them have a socket library. I am playing with BlueSocket from IBM right now and that's a solid piece of code.
All these taken already??
Migrating my app to from swift 2.2 to swift 3. Wondering if any from Apple actually tested the migration. It's an absolutely horrible process
Just published a daily fashion app called DailyThread that I have been working on in my free time with a couple of friends. Feels good to have it published! [DailyThread](https://itunes.apple.com/us/app/dailythread-weather-based/id1169815134?mt=8)
The interface builder? Oh wait, you said fun
https://www.reddit.com/r/iOSProgramming/comments/5dotpe/the_answer_to_all_how_do_i_start_questions/
Hello! Sorry to hear you're having trouble. Can I recommend my own tutorial series? It's all updated for Swift 3, it's based around building practical projects, and it's completely free to read online. You can buy a download version if you want, or follow the series online. You can find it here: [Hacking with Swift](https://www.hackingwithswift.com/read). I come by /r/swift regularly, so let me know if you hit any problems and I'll do my best to help!
www.hackingwithswift.com/read
I wouldn't hesitate to second the recommendation for Hacking with Swift. The Apple doc is great but it doesn't really cover iOS. The language is really only about 25% of it the iOS frameworks are were all the "magic" happens. Frankly to write basic apps you can probably get by with basic variable creation and flow control. The Hacking with Swift series uses a nice layered approach to teaching concepts of the language and iOS frameworks. It really is a great series and since you can read it for free there is no harm in giving it a shot. I know some people suggested Ray Wenderlich. Although this is a great resources as well I wouldn't suggest it as a starting point especially since it doesn't provide a guided progression. Once you have made it through Hacking with Swift it will be invaluable for filling in some of the areas that weren't covered in the book. Of course Ray has books as well and I believe most of them have been updated for Swift 3. I however have not tried them so I can't really speak to them. 
Made this over the summer: https://appsto.re/gb/mf-Pfb.i - everything's in Swift 3 except for iCarousel.
Thanks for the link! 
There is currently no way to get Swift up and running on Windows You can run it on Linux, but you can't develop apps on Linux Your best solution might be a hackintosh
Get a used MBAir and start reading some books. You can use Xamarin on Windows but you're surely to run into more problems with less community support. 
VLC?
There are various projects to run *Swift* on a Windows machine, but there's no (official) way to run an *iOS toolchain* on Windows, and likely never will be.
There's a VLC library?
Hmm. This could be a good option. I'm worried it will be very heavy for what I need, but I'll look into it, thanks.
That looks like Kitura code to me, albeit a little out of date. `request`, `response`, and `next` are parameters to the `handler` closure, which in your code is being passed using trailing closure syntax. `router.get("/")` is a route, which means that closure of code you provided will be executed when the user navigates to "/" on the Kitura server.
wrt creating an array for hashtags or the file: you should send a JSONObject which 'looks exactly like' the JSON you want to come out the other side of JSONSerialization. So if you want JSON which represents a dictionary with strings for keys and arrays of ints for values, then you should put in (literally) a dictionary with strings for keys and arrays of ints for values. The second question needs more info and more accurate info. Some advice: when saying the error you are getting, say the full and exact error message, not some indecipherable extract like 'extra call'. Also, I doubt it is Xcode complaining, and it is very important to know what is complaining. I think it is probably the Swift compiler but it could be the runtime. It _could_ even be Xcode, but calling stuff is usually a compiler/runtime activity; Xcode only complains about stuff to do with creating the code/interface. Last bit of unasked for advice: playgrounds make a fantastic place to, errrr, _play_ with stuff like the json encoding. Just copy your lines of code into an empty playground, dummy up some data to feed in and see what the result is. It is very quick to dummy up lots of different formats of data and see the results. 
Thanks
I was expecting more of "It's a closure", but this helps too. 
I fixed it, here's the working [playground](https://dl.dropboxusercontent.com/u/12910849/Queue.playground.zip).
Have you tried out https://github.com/johncsnyder/SwiftKitten? I stumbled across it earlier today, but it hasn't been updated in 8 months. There's also AppCode: https://www.jetbrains.com/objc/. I know there are Vim and Emacs plugins for Swift too.
Would it just be more productive to code apps exclusively for Android then? 
for this code var newTodo: [String : Any] Alamofire.request(todosEndpoint, method: .post, parameters: jsonString, encoding: JSONEncoding.default) it says "extra argument 'method' in call. It does not like my jsonString. It does instead like the type [String : Any]
i wonder how i get my jsonString to the Type String: Any so Alamofire can work with it. 
see: https://github.com/Alamofire/Alamofire Look for the section, "POST Request with JSON-Encoded Parameters"
I think it is the external name for the parameter when you call the function, so it reads more natural 
there is a book that once you read it you should not need a video anymore, additionally for some stuff there are wwdc videos. Also there is an iPad app where you can learn it too.
You should really read the Swift Language Guide. It explains this stuff wonderfully
When the app opens it always open maps with default coordinates. 
In the above you've created a location for the map but not ever set it on your outlet-connected map.
What steps I should follow to do that? Thanks for the quick reply 
Check out the MKMapView docs. There are several functions to do it like setCenter and setRegion. 
It looks like it. I will post another batch of promo codes when I release the next update later this week so if you really want to get it with a code keep your eyes open.
Glad to hear your enjoying it :)
Use wwdc videos &amp; iTunes U courses 
What font are you using ?
https://developer.apple.com/library/content/documentation/MusicAudio/Conceptual/CoreAudioOverview/Introduction/Introduction.html
lol wat? That's their main reason to exist; what did you think they were for?
There comes a point when it's not even worth proving.
Don't forget to validate longitude and latitude values. Anything outside of the valid ranges (-180 to 180 and -90 to 90 respectively) will crash the app. I've been bitten by that one recently!
Did not work, but thanks for the input. 
Is the initializer called at all? Put a break point there to see. How is the view created? The decoder initializer is primarily used when restoring views from serialized data. 
That was in the first comment suggestion, I did it but to no avail! 
I added that in my required init, did not change anything. 
I haven't used Realm but have used both CoreData and SQLite. Of the two I now prefer CoreData, though it kind of depends on the situation. If you've done anything with relational databases it isn't a big jump to CoreData. You won't be storing arrays. Databases don't really work like that. You have these entities that will have a set of attributes, each attribute is one little data point. So for your trip entity, it will have a few attributes like destination, date created etc. A trip might be related to a set of images, but you don't know how many. This is a one to many relationship, terminology that core data also uses. You store the images in another table, with one column referencing the trip the image is associated with, and a second column housing the image, or a binary representation of it. That table stores all the images from all the trips. The column that references the trip is called a foreign key, as in it is a key to locate a specific row on a foreign table. CoreData works similarly. You create these entities, give it attributes and then give it relationships. Your trip will have its normal attributes and a relationship to the Pics entity. So each core data instance of trip can have a set of pics it is related to. Pics might just have a single attribute, the binary data for the image. In fact CoreData will write the code for you to define these entities after you set it up in the data model. Though you probably just want to store the pics in the regular photo library and hold a reference to the identifier in your pics entity.
A few thoughts: First, you should be able to link to objects that can be identified in the application hierarchy from Interface Builder. I don't recall offhand where the App Delegate object is located, but if you're using scenes, then it's under the "Application Scene". There may be some additional setup, but I'm not familiar with it due to the next thought. If you're properly annotated properties with `@IBOutlet`, you may want to check the inspector in IB and make sure that your App Delegate object has the appropriate custom class (by default "AppDelegate" in new projects). Putting interface elements into the App Delegate is a poor design decision. There are plenty potential concerns that get hung off of the app delegate. It will simplify code to have it properly encapsulated. Having a view controller is proper encapsulation. I haven't watch the tutorial, but I strongly expect that most if not all of the code added to support the UI could be moved into the automatically created view controller class.
I'm not sure what all the `as? NSObject == true` is for, but why not just remove all the redundancy? For the last block, for example: let x = self.filterToggleDict![ToggleManagerConstants.kOpenCorrectives] as? NSObject == true mapsAndAssets.isOpenECVisible = x mapView.mapLayerForName(kPGESAPNotificationEC).visible = x 
You want A-Z first, then numbers after?
Refactor stuff. Something like this: func updateMaps(for configInfo: GisConfigInfo /* &lt;- whatever type your gisConfigInfo.kGEMSMaps is*/, toggleDictKey: String /*&lt;- whatever type your ToggleManagerConstants are*/) { var exists = self.filterToggleDict![toggleDictKey] != nil mapView.mapLayerForName(gisConfigInfo.kGEMSMaps).visible = exists mapsAndAssets.isGridLayerVisible = exists } foreach (configInfo, toggleDictKey) in [ (gisConfigInfo.kGEMSMaps, ToggleManagerConstants.kMETGrids), (gisConfigInfo.kMaintenancePlat, ToggleManagerConstants.kMaintenancePlat (gisConfigInfo.kVegDataLayer, ToggleManagerConstants.kLocationInformation), (kPGESAPNotificationEC, ToggleManagerConstants.kOpenCorrectives) ] { updateMaps(for: configInfo, toggleDictKey: toggleDictKey) }
It's most likely your tap gesture recognizer covering the button. Tap on the tap gesture recognizer in the storyboard and deselect "cancel touches in view." It will hopefully work after that. 
Have you created an action for the switch so you can switch your bool variable?
Ive sorted it now. I thought I connected the switch up but apparently not. Thanks for the help
What if you try it like that: button.addTarget(self, action: #selector(buttonAction), forControlEvents: .TouchUpInside) and then func buttonAction(sender: UIButton!) { print("Button tapped") }
I prefer the way "learning by doing". Just think about something not too complicated what you want to build and just start. Google the different steps you need to cover to create your project and you are learning the language by actually doing something you want to do. I am not a big fan of following tutorials that create apps and stuff I don't want to build just to learn something. Monstly this ends in copy pasting the code and not understanding anything :) So I believe creating something you want to create increases your willingness to learn. Although I also would recommend those tutorials of Ray Wenderlich.
I am a beginner on making applications and most of the time apple docs are not helpful.
I am a beginner on making applications and most of the time apple docs are not helpful.
&gt; If you only need to save locally, look up CoreData. I also believe, don't quote me on this, but Firebase works with CoreData for offline storage as well. If you need to save remotely, look up Firebase or Kinvey. I highly suggest Firebase though as Google has improved it a lot and Kinvey can be a pain in the a#@ if you don't fully understand the core of it. ~ */u/Mark_teh_z*
Oh ok.... Thanks I guess?
I learned some functional programming from this [video](https://www.youtube.com/watch?v=swz9fzL3QB8). Maybe it will help.
Try using the designated UIButton init instead of the `frame:` version, the one that takes a button type.
There's a couple parts that sound kind of misleading. One. While it's true that DRAM *latency* has increased less than 10x from 1980 to 2010, this ignores bus width, and caches. The net *performance* improvement is far, far greater. You're not fetching one byte at a time, and you're usually not even hitting the RAM. The L1 cache in your phone is many times bigger than the entire DRAM of your PC in 1980 (though we didn't call them "PCs" yet because the IBM PC hadn't been created yet). This effect isn't like multicore. You don't have to do anything special to take advantage of it (though there are things like SIMD and GPGPU which can make it even faster for some cases if you do). To a program, it just seems as though main memory is much faster than it really is. Your Mac Pro's memory is way more than 9x faster than your C=64's. Two. NSArray is "a bunch of pointers", but iOS/OSX has for a few years now used tagged pointers, so things like `NSArray&lt;NSNumber&gt;` were not actually chasing pointers to walk the array. And in Swift, `Array&lt;MyBigComplexClass&gt;` still needs pointers, of course. It's not like there's some magic that enables Swift to avoid the heap. Swift is more flexible here, but this particular problem is one that was already 'fixed' for the most common case. 
Thx
I'm really not sure how to make it any clearer. Look at your function definition. Look at "Listing 1". Make your function definition look like one of the three in Listing 1. You say you see how they look different, so make them look the same.
Appears to be an issue with auto layout. There's a Debug View Hierarchy button (on the bar right above the console, 2 left of the cursor-like 'Simulate Location' icon). When you go through it, you can find your RatingControl view. Right-click it and print its description. You'll see a frame with 0 width and 0 height. So, even though you tap on the button, the superview is not actually there to receive it and pass it down to the button view. The reason is, you haven't given a relation between your RatingControl view with its superview, nor with its red button view. First, in your IB, set your RatingControl's leading and trailing margins to be equal to its superview (UIStackView). Replace your UIButton init code with: let frame = CGRect(x: 0, y: 0, width: 44, height: 44) let button = UIButton(frame: frame) Then, add the following code after your addSubview: button.addConstraint(NSLayoutConstraint(item: button, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 0, constant: frame.size.width)) button.addConstraint(NSLayoutConstraint(item: button, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 0, constant: frame.size.height)) addConstraint(NSLayoutConstraint(item: button, attribute: .leading, relatedBy: .equal, toItem: self, attribute: .leading, multiplier: 1, constant: frame.origin.x)) let constraint = NSLayoutConstraint(item: self, attribute: .height, relatedBy: .greaterThanOrEqual, toItem: button, attribute: .height, multiplier: 1, constant: 0) constraint.priority = UILayoutPriorityRequired addConstraint(constraint) Hope that helps.
I disagree with Number 9. There's no point to do an iteration to generate an array, only to iterate over it again, do a bunch of checks, and remove half of them. It also takes 3x more peak memory than necessary. Just do: `Array(stride(from: 0, to: n, by: 2))`
I asked on SO and got this answer, if anyone has anything to contribute I would really appreciate it! http://stackoverflow.com/questions/40731112/how-do-i-set-specific-y-position-width-and-height-without-diving-into-code/40731472?noredirect=1#comment68690116_40731472
You should be able to run straight from Xcode. What are you building?
Guard allows you to check for conditions you are looking for. So say if myVar is 5, I'll return hello. Or else for any other input (including empty string whatever) I would return bye. Then I would do &gt; guard let myVar = 5 //Conditions I want &gt; else { return "bye" } &gt; return "hello" Edit: http://stackoverflow.com/questions/30791488/swifts-guard-keyword/30867175#30867175 This explains so much better than my example. 
yikes. surely not all those programmatic constraints are necessary. 
You're right. Only the bottom one relating the height of the RatingControl view and the red button view is really necessary to solve this problem.
Yeah I tried all the suggestions but couldn't get it to tick. I'll do some other lessons and hopefully one day I can come back and finish this up. Would help if Apple updated their tutorials hehe. Cheers. 
Number two is very bad.
Hey, congratulations on finishing up the app. I ran into this too, and ended up using https://github.com/chuckhoupt/jekyll-apple-help . I had some slight issues getting the help loaded into my app, but it worked out perfectly in the end. There are also a couple paid macOS apps to create the help if you don't like Jekyll/markdown.
Gaurd appeared in early versions of Hamlet; she was Hamlet's younger sister who only made one appearance and spoke a total of 13 lines. She came on right after Hamlet finished the 'to be or not to be...' speech and explained what it meant. Shakespeare eliminated the part after tryouts because the actor was having trouble with the dress, and, besides, it cost too much to pay someone just to show up and recite 13 lines.
1.: Or just do `square(square(5))`? I'm not sure I'm a fan of adding math functions to number types in an extension specifically; the standard library doesn't do it either. Extensions as a whole are super useful of course. 3.: I just found it funny that the "Ok code" is imho the ugliest of all the "bad" examples :-D 6.: In the "beautiful" code, I don't think a `default` case in that switch is even allowed? At least, it'll produce a compiler warning. I think OP should remove it. Also shows an additional benefit of using enums. 9.: I'm a huge fan of functional style programming, but the reasoning is bad. I think, in general, you *should* write "boring" code, boring code is good because it's easy to understand and doesn't do anything unexpected. On the other hand, code that "makes you look smart" is the opposite; it invites code-golf with all kinds complicated expressions. Writing code that "makes you look smart" should not be your goal. (That being said, there are plenty of reasons for functional style programming - imho, it's usually makes the intent clearer and the code more concise). 10.: This doesn't demonstrate the value of closures at all. In this example, you could just nest the `sum` function wherever you want and get the same result (without the $0 shorthand, which is a questionable benefit).
Can you elaborate? edit: Alright, I can see that CFPlugin is actually ported to Swift CoreFoundation. So I guess I should be able to follow [Plug-in architectures](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/LoadingCode/Concepts/Plugins.html) from Apple. Is that what you were referencing?
You can try storing the data in a persistent storage, like [CoreData](https://developer.apple.com/library/content///documentation/Cocoa/Conceptual/CoreData/index.html), feed the table view the total number of entries via [`tableView(_:numberOfRowsInSection:)`](https://developer.apple.com/reference/uikit/uitableviewdatasource/1614931-tableview), and fetch entries one by one only when needed on [`tableView(_:cellForRowAt:)`](https://developer.apple.com/reference/uikit/uitableviewdatasource/1614861-tableview) You can page requests to fetch a limited number of entities at a time on CoreData using [`fetchLimit`](https://developer.apple.com/reference/coredata/nsfetchrequest/1506622-fetchlimit) and [`fetchOffset`](https://developer.apple.com/reference/coredata/nsfetchrequest/1506770-fetchoffset) properties of the [NSFetchRequest](https://developer.apple.com/reference/coredata/nsfetchrequest) class, though I never tried using these so I can't give you more info.
do you have examples? thanks for the answer!
Go for it! There are some good courses on Udemy and they're having a sale. What have you got to lose?
If you want to become an iphone developer then start with Swift only. Using a language like Python would be easier but would take more time. If you give that time to Swift, you will learn it anyways. So, you won't have any advantage going through the longer route as your goal is clear.
Its a pretty easy language to learn if you have the right teacher. Sadly most of the tutorials assume you already know how to program, so its going to be difficult to find good things online. Learning java first might be beneficial since there are so many resources to help you understand as a beginner . Also expect it to take you at least a year to understand Edit: i do agree with other people that if you're attempting to just make apps, it would be fastest to just learn swift, but also a lot harder
Freelancer and give me the work :P
I think it's a great first language. Very clean syntax, has some very modern features, and of course you can build iOS and macOS apps with it. That being said, as you gain more experience, and assuming you want to get a job as an iOS developer, I'd strongly encourage you to learn C and Objective C. I'd put more priority on Objective C, but being comfortable with C is also an asset. Of course, focus only on Swift now while you get your feet wet but keep that thought on the back burner.
Swift is definitely the best choice for a new programmer. It reads like english. It doesnt use silly short words. It's likely that, completely naive, you could tell me what a block of code is doing just by looking at it and guessing. After learning some ruby, a decent amount of python and php and (mostly) Swift in the last year, I find myself wanting to do everything in Swift. 
I am editing my portfolio right now. Got NDAs on some projects can't talk about all my apps. What kind of app do you need?
Thanks for the details. I will probably go for Upwork then ;) 
&gt; Its a pretty easy language to learn if you have the right teacher. Either you have a very high threshold for "pretty easy", or you have a drastically better teacher than any I've ever had (and I have a computer science degree from one of the top universities). It's got as many keywords as C++. The (only) compiler has more bugs than GCC 2. The documentation is ambiguous, and behavior is defined in many cases by whatever the compiler does (that doesn't crash it). What languages do you think are *not* "pretty easy to learn"? I'm proficient in a couple dozen programming languages, and there's only 2 that I can think of that are even in the same ballpark as Swift when it comes to high complexity.
[removed]
No i do agree, im just trying to not scare him off. I suppose im suggesting he get a professional class rather than figure it out on his own, for exactly the reasons you explained. The other thing is swift is only complex if u harness all its capabilities. Using something like sprite kit isnt too bad if you keep it simple, which he is probably trying to do
Absolutely. Remember that server frameworks mostly deal with sending stuff to the client via http (other protocols too), so whatever you send it will be received and interpreted on the browser. You can use any imaginable graphic library on the server to produce images and send them to the client like jpegs, gifs and pngs, or you can use libraries on the client to produce the graphs on demand, including SVG, canvas, etc. Go for it, I'll guarantee you all the fun in the world.
Thanks for the reply! That last line may have been sarcastic but if not I agree! I'm not a super experienced coder, only in Swift really, so I'm not even sure exactly what I'm looking for when digging on google. Do you have any recommendations for libraries I should read up on? Some of the things I'd like to do are drag elements, highlight or dynamically resize the elements when interacted with, add something like a CAShapeLayer that I can update the path, and display important labels when certain elements are selected, as well as have a few simple buttons. My knowledge of web front end is limited, so even the names of some libraries would help. There are some pretty python charting libraries, but the interface I'm thinking of would be so customized that I think I might get stuck being restricted to existing charts. Thanks again!
How long did it take for you to start getting regular clients? It took me a while before things became consistent. Also, do you count Github as a "portfolio"? 
BlueSocket is a breeze. Playing with it I could create a chat app in no time with users and rooms, then I created a small app to send text from one device to another which I do a lot coding on the desktop and researching on the laptop and it was also easy. Now I have a Socket.framework I can drop anywhere I need a socket connection. IBM guys are wizards, rock solid. Recommended. \* https://github.com/IBM-Swift/BlueSocket
Yep, different but the app is great! Side by side with safari and one of the many playground/swift tutorials. Much more accessible than many languages.
Hey TheJon2014, thanks for doing this. It would be awesome if you did a retrospective that describes on what points you differ with Adam's ECS model.
Would it perhaps be better to learn objective-C as opposed to swift initially? As swift is based on objective C?
The second just returns a boolean as it seems that playgrounds only prints the values that are to the most right in the expression. So when you move it to multiple lines it just moves the boolean expression to that next line. if you want you can just assign the array that's outputted to a variable. Then just print that.
Both expressions return an Array, of course. It looks like "Playground" can only display one result for each line of source. You'll see that in the 3-line case, it returns Bools for the comparison line, and Characters for the `sorted` call. For the 1-line case, it shows the Bool comparison results, but there's no place to display the `sorted` result. I'm not sure how it decides what to display in the right column, or why it picks the closure here. If you find this confusing, you can always run Swift from a Terminal window, and it will always display the final results separately (as `$R0`, `$R1`, etc), though not as prettily.
Haha.. No, I don't think a baby can start running and jumping without walking. As you can't start making big programs without making small ones first. However, a baby can learn Chinese before learning English, despite the former being a difficult language. And Swift and Python are two languages. It's the concept of communication (or programming) that is important and if a person wants to work in China exclusively, would you suggest that person learns English first or Chinese first for good communication skills? Also, the resources have improved a lot for the newer languages. Swift has playgrounds and multiple resources (as do Python or other languages). So, I think OP would not face the same issues you faced during your first stint with programming. Besides, Swift is also not a very complicated language (not as easy as Python, I agree but definitely not as complicated as C or C++) so I don't think OP should go through Python, iff OP is clear on the final goal -&gt; iOS apps.
Awesome, this was a massive headache for me on an app I worked out. I'll have to try out the new functionality and see if I can clean things up a bit.
Yes I was looking at some javascript libraries, specifically one called Fabric. It didn't seem that difficult. Thanks for the reply, I'll check out those recommendations.
I use SwiftLint for other purposes, but it will show TODO and FIXME items in the warning area.
Took me about 8 months to start getting regular income out of this. I started May 2015. Consistently getting work and money since Jan 2016. At first it was very sporadic, but it's pretty slow to start on Upwork. Your profile is all that 90% of the clients care for. Once you get over couple hundreds hours billed over a few projects, they become much more likely to respond. If you are decent it's really easy to start getting quality work at decent rate, because (surprise, surprise) most of the coders on the site are super bad and there actually is demand for good developers. It's getting people to respond to you at all in the beginning, when your profile is empty, that is the hard part. In the first few months I was spamming the new postings for ios only apps with at least mid-level budget with applications daily. Out of 10-20 application, 1 or 2 would respond and out of 20-30 applications that would actually get a response, I would score 1 or 2 contracts. The Rising Tallent and Top Rated badges actually work - definitely started getting more responses to the applications once I earned them (basically by having good feedback) Once I approached 900 hours people started contacting me with requests to apply for their proposals, but most were low quality noise - $200-400-600 contracts. Speaking of the low quality noise contracts for a few hundred bucks - stay away from those or they will haunt you. I was in some exclusive program for better performing freelancers, that is supposed to get you better paying clients with consistent work, haven't checked since September, but it was suggesting me completely unrelated work. GitHub and StackOverflow don't matter much initially, but are much more helpful to get good clients once you have some feedback. Lots of reputation spamming on SO due to this.
Better off trying to find somebody to learn it with. People pay me quite a bit to tutor iOS, don't think many would be willing to do it free for a stranger. 
i am young so its a little bit hard for me to pay... do you accept games? I can give u battlefield 1 I would rather learn swift then to have this game 
[Go here](https://itunes.apple.com/us/course/developing-ios-9-apps-swift/id1104579961) and this will get you started on your learning journey. It uses Swift 2, but it won't be difficult to apply what you learn to Swift 3. It is also helpful to have an idea for an app you want to build; this way you don't spend time learning things you don't need to learn. 
That's what makes them the best programmers. Unfortunately the average programmer isn't as well adept at learning from reading the manual; that requires quite a bit of intuition and a natural ability to learn through reading. I actually don't have this ability; I watch videos for the most part.
Right on. I just submitted my first translation of a 4 kyu problem to Swift. 1 down, 2,348 to go...
I'll teach! 
&gt; Source: am Steve Wozniak Want to sign my Apple //e?
🍎-Woz