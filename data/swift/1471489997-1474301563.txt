Storyboards are universal by default. There are controls along the bottom of interface builder allowing you to edit constraints to be different for each "size class". These aren't exactly iPhone / iPad specific - but more arbitrary height and width amounts of space. Makes sense considering there are small iPads, big iPhones, and features like split screen on the iPad. More in the docs: https://developer.apple.com/library/ios/recipes/xcode_help-IB_adaptive_sizes/chapters/AboutAdaptiveSizeDesign.html I usually only use xibs to design views that will be used repeatedly across different view controllers.
Seems like that would work pretty well. Here's a quick how-to in case they don't know how to work with a plist. http://stackoverflow.com/questions/9044735/steps-to-create-and-edit-a-plist-file-in-xcode But if they plan to add/remove/edit columns/types/other database-y things in future versions of the app that could cause some maintenance nightmares. If that's the case Core Data is more work upfront but better suited for such things. Or Realm. But for simple things a plist would be a pretty great and simple data store.
You split storyboards by part of app. You do both iPad and iPhone in the same ones.
&gt; Storyboards are universal by default. They didn't used to be. Granted, you will only run into these on older projects.
Or multiple let's in one if.
Could you maybe explain _why_ we should use xibs rather than storyboards?
cant see how this got down voted haha people are so scared of Core Data... iOS database = Core Data
What's your goal? Do you need all not nil values from large array or maybe you need indexes of all nil values?
there's nothing for it but to either loop through the whole array, or just pay attention when you're adding values and change a boolean to true somewhere when you decide to a add a nil. if the array is large enough, you could maybe look into running two threads and checking half of the array with each thread before rejoining, but that just seems unnecessary.
Then I'd guess it's not going to get any more performant than the contains method, unless there is some underlying structure in your array or you can avoid the work altogether. 
 for item in arr where item == nil{ return true } I guess. You could always, convert Array to NSSet that should be faster. But still it depends on what data you have and how many times you will check. 
Check out "Lets Build a Compiler" by Jack Crenshaw. I also list some other resources in the README of that repo I shared. Good luck! It's not as hard as you think :)
This is not an IOS sub, this makes as much sense as posting news about Linkedin because the app was built in swift.
Btw (iii) fulfils (i), so there's no need for static var unit: Self { get }. You can just use T(1).
Why not use an if let / guard statement on whatever is iterating through the array?
You're assigning dict[1] to value by using a singular =. To make a comparison use == 
This will break compatibility with the previous versions, since it's been migrated to Swift 3.0. Hence, let's call this version 1.0.0, and future updates will use the semantic versioning system.
Let is "permanent" but you're not using the `value` in the outer scope. Your if-let is creating a new scope with a second `value` binding. BTW, your lack of formatting makes this really hard to read.
Hmm, I'm not sure I really understand this. There's very little documentation, and the video is mostly repurposed image memes. It's not clear to me exactly what this does. - Before: say `needsLayout = true`, implement `func updateConstraints()` - After: call `viewObject.layout()`, conform to LayingOut, implement `func constraints()` Is this an improvement? He jokes about adding constraints "here, here, here, here..." in the video, but using constraintsWithVisualFormat(), the basic layout is like 3 lines of code. Even after the designer's new updates, it's a pretty simple layout. "Unsatisfiable constraint errors" are easy to fix, because it dumps all the relevant constraints to the console. Making a stack of things is easy -- even if you ignore {NS,UI}StackView and want to build it yourself. Do people find autolayout difficult? There's really only one area where I've found autolayout to be problematic, and that's controls that have their own sizing system that doesn't *quite* play nice with autolayout: NSSplitView (special delegate for when subviews can resize), NSToolbar (it's not even an NSView!), and NSScrollView/NSClipView (they interact with their superviews in not-always-intuitive and certainly-not-documented ways). I would love it if these interfaces got cleaned up somehow. I'm not sure a third-party library can do that, but I'd love to be proven wrong. Instead of the cheesy video, I'd rather see the SampleApp implemented both with Relayout, and with normal autolayout, so we can compare for ourselves. I don't think it's as complex as the Relayout SampleApp makes it seem. It's even got an "extension Array" in there which is never used.
Yes, so long as the variables it takes are different. For example: func overLoaded(valueOne: String) { } func overLoaded(valueOne: String, valueTwo: Int) { } func overLoaded(valueOne: Int) { } Each of these functions takes a different set of variables so the compiler can tell them apart. This is called overloading.
On mobile I really want to know what that thumbnail is. It looks like some awesome fractal art
If you're using IB, then you can also do @IBOutlet var myButtons : [UIButton] This is the equivalent of `@IBOutletCollection` from the Obj-C times, and allows you to connect multiple buttons to the same outlet.
Thank you for letting him know how to do it! 
It really depends on the size of the array. If you have a HUGE array then contains is very performant otherwise enumerating and breaking after the first find is faster... testNilFinds(99999999) //as this goes down and nil is at a lower index for/next is faster, otherwise the .contains method gives a more reliable speed. func testNilFinds(arrSize: Int) { for nilAt in [0, arrSize / 2, arrSize - 1] { let arr = getArray(arrSize, nilAt) //findNilSorted(arr, nilAt) //nevermind SUPER slow! findNilForEach(arr, nilAt) findNilEnum(arr, nilAt) findNilWhile(arr, nilAt) findNilFilter(arr, nilAt) findNilContains(arr, nilAt) print("") } print("\n\nFinished!") } func getArray(size: Int, _ nilAt: Int) -&gt; [String?] { var arr = [String?](count: size, repeatedValue: "Samwise Gamgee") arr[nilAt] = nil return arr } func printResults(test: String, nilAt: Int, time: NSTimeInterval, foundNil: Bool) { print(String(format: "Use %@ to find nil in position %d: %0.4f s. [was found: %@]", test, nilAt, time, foundNil.description)) } func findNilSorted(arr: [String?], _ nilAt: Int) { let test = "sorted" let start = NSDate() let foundNil: Bool = { let sorted = arr.sort({ $0 &lt; $1 }) return sorted[0] == nil }() let time = NSDate().timeIntervalSinceDate(start) printResults(test, nilAt: nilAt, time: time, foundNil: foundNil) } func findNilWhile(arr: [String?], _ nilAt: Int) { let test = "while" let start = NSDate() let foundNil: Bool = { var found: Bool = false var index = 0 while !found { if arr[index] == nil { found = true } index += 1 } return found }() let time = NSDate().timeIntervalSinceDate(start) printResults(test, nilAt: nilAt, time: time, foundNil: foundNil) } func findNilEnum(arr: [String?], _ nilAt: Int) { let test = "enumerate" let start = NSDate() let foundNil: Bool = { for s in arr { //where s == nil { if s == nil { return true } } return false }() let time = NSDate().timeIntervalSinceDate(start) printResults(test, nilAt: nilAt, time: time, foundNil: foundNil) } func findNilFilter(arr: [String?], _ nilAt: Int) { let test = ".filter" let start = NSDate() let foundNil: Bool = { return arr.filter({ $0 == nil }).count &gt; 0 }() let time = NSDate().timeIntervalSinceDate(start) printResults(test, nilAt: nilAt, time: time, foundNil: foundNil) } func findNilContains(arr: [String?], _ nilAt: Int) { let test = ".contains" let start = NSDate() let foundNil: Bool = { return arr.contains( { $0 == nil } ) }() let time = NSDate().timeIntervalSinceDate(start) printResults(test, nilAt: nilAt, time: time, foundNil: foundNil) } func findNilForEach(arr: [String?], _ nilAt: Int) { let test = ".forEach" let start = NSDate() let foundNil: Bool = { var found = false arr.forEach({ if $0 == nil { found = true } }) return found }() let time = NSDate().timeIntervalSinceDate(start) printResults(test, nilAt: nilAt, time: time, foundNil: foundNil) }
As others have said guard is your friend. I often write a section of code with if/lets then refactor to just guards - it's **so** much cleaner and easier to read.
Anyone?
Okay there's no way this post belongs here
&gt;does that achievement info remain in my codes CoreData CoreData is a wrapper for a SQLite database. Think of it as your app calling Core Data which manages an excel spreadsheet for you. let thing = NSEntityDescription.insertNewEntityForName("thing", inManagedObjectContext: context) This line of code adds a new row to your spreadsheet. try context.save() This line of code hits save on the spreadsheet. Everytime you call NSEntityDescription.insertNewEntityForName, you are inserting a new row in your applications spreadsheet. Create a new project and use the Master-Detail template with Core Data checked on. It has a fully working CD implementation and you can play around with breakpoints to see what does what.
This doesn't answer your question, but I would avoid using Singletons, as they're [considered harmful](http://www.stuartsite.com/2009/08/4-singletons-considered-harmful/).
One question. - How is this better than `UIStackView`? 
I've read that there are some people who would advise against them. In my case I have an array that is being added to in the background by a timer. Several controllers are constantly referencing this array. What am I supposed to do, recreate the array on every controller? A static variable or singleton is really the only option. At least a singleton is closer to OOP than global variables. 
I came to conclusion that singletons are harmful a long time ago, and picked that article out of a bunch because it nicely summarised my feelings. There is a time and place for 'single instances' of objects, but I wouldn't implement them using the singleton pattern.
I take it you mean you're doing something like this in your view controller?: let things = SharedArrayOfThingsHandler.sharedInstance().thingsArray 
It'll work, but you can't easily replace SharedArrayOfThingsHandler.sharedInstance() very easily. When you want to test it out so that 'things' has a specific test case, you'll have to comment out that line and change it to something else. Anywhere you type SharedArrayOfThingsHandler, you're hard coding a dependency on that class. Here's some more reading: http://stackoverflow.com/questions/2662842/dependency-injection-singleton-design-pattern EDIT: Performance here is (probably) not an issue, it's very unlikely to be a bottleneck.
The simulator will track those files and save them locally to your machine. Every time you make a change to your .xcdatamodel file or delete the app on the simulator and re install it, it will create a new space for that data and start fresh. This stackoverflow thread should help you find that information. http://stackoverflow.com/questions/4644158/how-to-view-the-data-in-sqlite-file-running-in-iphone-application/4644189#4644189
In Xcode you can choose which class to be compiled. For libraries, they always get compiled even if you've never used it in your program. In the screenshot below, if you choose your project targets like I did, you can see the "Compile Resources" section in Build Phases. That's where every class you create shows up to be compiled. [Xcode](http://imgur.com/gZwBOSO)
The reason you can't use #if/#endif directives that way in Swift is pretty straightforward if you really 'get' that there is no preprocessor like you'd have in C-like languages. The C preprocessor *generates code* that then is sent to the compiler. In Swift, everything enclosed by an #if/#endif block has to be a full, syntactically correct expression or set of expressions. The compiler actually knows not to check the syntax of things that don't match the #if conditions.
/r/iosprogramming or StackOverflow are where you should be looking.
iso tree shaking
There is a time and a place for everything. A great thing to ask yourself before making a singleton is if it represents a single or limited amount of physical entities. For example KeyboardInput-&gt;Get().IsKeyPressed("g"); you will only have a fixed amount of physical keyboards (usually just one) so a singleton is great. If you could have multiple keyboards connected, it still works well. KeyboardInput-&gt;Get(3).IsKeyPressed("g"); this would get the 4th keyboard instance. KeyboardInput could also contain a handler to deal with keyboards connecting/disconnecting to internally manage the instances it holds. Also: my apologies for not using swift syntax, I'm unfamiliar with the language, but the overall design is the same.
You might want a type eraser wrapper for your `Delegate` protocol so as to avoid a recursive constraint &amp; if you do not want to include the delegate as part of the type parameters. P.S. Swift doesn't support generalised existentials yet, at least not in 3.0.
I don't really understand your code but maybe: smallerview.center = largerview.center Sorry if that's unhelpful
Dead code stripping is a thing and compilers (including `swiftc`) can do it, if you ask them. `-O -whole-module-optimization` strips out unused code. Referencing a library might be different though.
I did not know that, thank you!
I'm working on a mechanical watch simulator. All Swift3 and SpriteKit. Runs nicely on the Mac and iOS. It nominally runs on watchOS, but the hardware isn't up to it yet. https://www.instagram.com/p/BJGP1NxD2P_/
Off to a good start then
Ummm ok. What's the difference? The code to do this would be in Swift right?
I would start here: https://developer.apple.com/notifications/
I'm making progress on DropZap World, which is written entirely in Swift. Expect beta testing to start in the fall of this year.
I wouldn't do this. What if you wanted to simulate key presses. You're out of luck doing it this way. 
Do you want to help me? I really want to make this app, I already have to a draft (screenshot) 
No you aren't. You make something separate or add the functionality into it, I can't see why this would prevent you from simulating key presses. If you could provide a counter example I would appreciate it, because maybe I'm missing something. Anyways, if not a keyboard, things like speakers playing sounds, it's 100% output and you will just have the Speakers-&gt;PlaySound("song.mp3");
You want how much money?
I'll second the plist idea. If your dataset is really only two columns and if it won't generally grow over a few thousand rows, then yea just stick it in a plist and save yourself some hassle.
I'll think, thank you!
I suspect the Swift team is trying to avoid letting people create messes like [this](http://geoff.greer.fm/vim/#realwaitforchar).
In my spare time, I've been doing more work on my iOS game, *Pharaoh*. Getting a lot of good feedback on the game from my beta testers. Getting comments like "this is the best deckbuilder I've played on iOS!" which is really gratifying. I am struggling with some difficulty issues in the game; it's a tough game by nature. The problem is that the core gameplay loop *feels* like a simpler casual game, but it really throws punches down the line, and you really need to take risks and develop a strategy to last long. I've had several playtesters successfully ascend multiple times, really excited that they got through scores of shuffles, unlocked all the content, and beat the game, so I know it's not *too* hard. These players seem to really love the game and play it for days at a time. But I've also had playtesters rage quit after only a few shuffles because they felt that the deck shuffle mechanics were too swingy. I'm not sure what to do with that; it's kind of the nature of deckbuilder games, but I clearly need to add something to the game to draw them along. I just don't know what. For my day job, I'm also working on iOS apps. I'm currently working on a math game that teaches early algebra for the *Math Snacks* line of educational games. This one has been really challenging because we keep going back and forth on the design of the product. I've already produced six wildly different game prototypes that hit the particular math topic we're looking at (expression structure and order of operations), and I'm currently working on the seventh. We do a lot of prototyping in our studio! 
Yup. Thanks, I tried a type-erased wrapper but the compiler couldn't compile the project as a whole even though I tested by factoring out chunks into the playground and everything compiled individually. 
I know that's tongue in cheek, but give it a chance :-) Java's the biggest software ecosystem the world has ever seen and Swift is new with a promising future. Great to see this kind of bridge-building!
I'm not going to read through all that either, but I will suggest you pause the debugger when it's 'frozen' and see what it's doing. That'll probably give you a hint.
I guess it was only a matter of time...
What you have isn't quite right; you should at least also need e.g.: class Thing&lt;Type, Delegate&gt; where Delegate: ThingDelegate, Type == Delegate.Type {} ...although it still might not compile with the rest of your definitions! Note that just going off of what you wrote, literally, you've failed to require that the `Type` parameter on `class Thing` is the same as the `Delegate` type-parameter's associated `Type`...so all they have in common as you have it written is just a name.
KeyboardInput-&gt;Get().SetKeyDown("g",true); then the normal code will call IsKeyDown and everything works. I guess I'll agree to disagree - Singleton can be an anti pattern and be abused, but I've always found it well to be used if representing physical entities.
Maybe, but based on decades of experience in the software industry, I've come to believe that: - all language bridges are pretty awful - all portable UIs are pretty awful I don't see anything here to make me want to change my mind on either of these points. Everybody thinks their system is somehow going to be usable (this time for sure!), even though they're walking into exactly the same traps as the last 37 people to try it.
Whatever they release in November 2016. Stick an [SSD](https://www.amazon.com/Samsung-850-EVO-2-5-Inch-MZ-75E250B/dp/B00OAJ412U/) in your MacBook in the mean time. 
Thank you!
I put an SSD in my girlfriends 2011 MBP and now it seems as fast as my 2013 rMBP. If you don't want to spend any money, reformatting the drive (make sure you back up anything important first) and reinstalling OSX almost always results in a huge speed increase also. 
I do have an ssd in there, also upgraded the ram to 8gb. But I need to have an external monitor and also another app such as sketch or.. Open while working with xcode 
Thank you so much! 
For Apple hardware you should better hold on until October when the rMBPs and maybe even the Mac Minis will finally be updated. I have a hackintosh and the current rMBP 15. If you pick one of the so called golden builds (http://www.tonymacx86.com/buyersguide/august/2016) the hackintosh is a relatively seamless experience - updates straight from the App Store, no issue publishing apps, etc. Mine is essentially a 2011 iMac 27", apart from the GPU.
That MacBook should be able to be able to output to 2 displays no problem. I replaced mine a couple of months ago but I was sick of the weight of the thing for meetings. And I have too many tb2 devices to get a new tb3 sub type C MacBook. 
The correct syntax is actually `func f2(method: (Int) -&gt; Int) -&gt; Int`, with parentheses around the parameter.
That's allowed but not necessary. The parentheses are necessary if there are multiple parameters.
Swift 3 requires them, even for single parameters.
Well with my budget i guess i can make a hackintosh something comparable to mac pro, but im worried if something happens like it doest get updates or annoying problems while developing an app 
Sorry, I've been using 2.2 syntax. Question: would Swift 3 also require f2(method: f1) instead of f2(f1)?
What about the basic 15" model? It will probably have a quad-core i7 cpu + at least 16 gb of ram
No, not in Swift 3. All argument labels are treated equal now.
I have a repo in Cocoa, so perhaps not directly usable for a Swift project, but you may find some use for it: https://github.com/ArthurClemens/AnimationController. Check out the videos: * [1] https://youtu.be/0nmAO0puU70 * [2] https://youtu.be/Fe7lxMJTgZ4 * [3] https://youtu.be/tjW6ka2ytCY 
Worth trying to sell my 2015 MacBook Pro and picking up the newly released one?
Probably... but I'd wait for them to actually announce anything, and then make my decision 
You'll probably end up with more for the MBP than if you sold it now before we find out more about the Pro models, as anyone buying will be waiting. And, if there aren't a ton of big upgrades computationally speaking, then it won't matter much. For instance, if there is an OLED bar, it will probably be rather underwhelming, gimmicky, and only work with macOS apps for a while. The MacRumors buyer guide is great for any time you are thinking of making a purchase: http://buyersguide.macrumors.com/
Really lovely work !
Not sure if this is helpful or not, i've gotten some inspiration out of it previously: https://github.com/sxyx2008/awesome-ios-animation
Your post didn't really come across as someone proficient in programming as the things inside your app are fairly simple and shouldn't require some open source library for you to utilize. It'd be like someone asking "How do I have an app where users can play a video and it shows the title of the video on top?". You could use something like the NSTimer class to keep track of time and then there is a built-in UIKit component called Stepper that might work as a cumulative counter. Or you could implement your own counter with a UIButton. As far as the map, you'll want to look into MapKit. If you were making a social-messaging app or something more substantial there are certainly libraries on GitHub available to you but as it stands you should probably just learn Swift and the Cocoa Touch Frameworks.
Awesome- Thanks guys!
Here are a couple of blog posts that try to explain this in a bit more detail: - [Swift Structs - Reference and Value Semantics](http://invictus.so/index.php/2016/06/09/swift-structs-reference-and-value-semantics/) - [Swift Structs - Mutability](http://invictus.so/index.php/2016/06/10/swift-structs-mutability/) The major difference is that structs are stored on the stack, like "primitive" variables in other languages. As a result, each instance has its own identity - when you "copy" it, you're creating an entirely new copy on the stack which is not related at all to the value you created it with. For example: var s = MyStruct() s.value = 15 var t = s t.value = 20 print("\(s.value)") // prints 15 print("\(t.value)") // prints 20 As opposed to classes, where when you create a copy, you're really creating a copy of a *reference* to the same underlying object: var c = MyClass() c.value = 15 var d = c d.value = 20 print("\(c.value)") // prints 20 print("\(d.value)") // prints 20 also **c** and **d** are two *references* pointing to the same object, whereas **s** and **t** are two *values* which are completely independent of each other. So the natural next question is, "which one should I use?" It depends on which of the above semantics (reference vs. value) makes more sense for what you're trying to do. Value types (structs) are more useful for... values. They're good for types that are supposed to represent fungible things like numbers, locations, strings of text, simple records in a database, etc. Reference types are more useful for objects that have some kind of permanent identity that actually matters - things like socket connections, view controllers in an app, external processes, etc. are better represented by reference types.
There is an excellent WWDC talk which offers good insights (just search for Value Types in the video archive) but in a nutshell: value types are good for exactly that - representing values. References are good for representing identity. Or if you prefer, a value says what something is, and a reference says who it is. Let's say you're making a competitive board game, and you're writing logic to figure out what the best move is for a given turn, to support an AI opponent. Your plan is to simulate all possible moves, run a heuristic to see how good the board looks for the current player, and then make the best move based on that heuristic. Value Types are suitable here because you care *what* the state of the board is for the heuristic but not about any specific board. If you represent the board state entirely with value types, you can easily test multiple scenarios without worry about mutating the state of the actual board. On the other hand, let's say that you're making a game in which you can reflect projectiles back at the enemy which fired them at the player. A projectile object can keep a reference to the enemy object associated with it, so that when this reflect ability is used you can easily find the specific enemy that you should retarget the projectile at! I hope that helps. Sleepy weekend morning phone typing so pardon typos. :)
A good example of a struct is CGPoint. It's got an X coordinate and a Y coordinate. You could change either of those coordinates, but then you'd have a completely different point. That's why it's a struct: making any change to the CGPoint results in a fundamentally distinct value. Likewise, if I create two points with the same coordinates, they can be thought to be identical. Now imagine a class called Person. A person object may have their name changed, but their identity (DNA) doesn't change. What if Person was a struct instead? That means any time there's a change to a person, their DNA would have to change with it. Everything from a tattoo to a haircut results in a new, fundamentally unique person. It also means that two people with the same body structure, name, haircut, etc would have the same DNA. When you're deciding whether to use a struct or a class, ask yourself: "would changing any of its values result in a conceptually distinct thing (it's a struct), or am I just changing the existing thing's characteristics (it's a class)?"
Not true. It is entirely permissible to have a mutable struct or an immutable class. The only significant distinction is that structs are value types and classes are reference types.
Thanks for this, really helped man. 
The processor in the 15" hasn't been updated for 2 years. At least the 13" rMbp got a CPU upgrade in 2015.
You're not wrong, but every other comment said that already. I don't see the point in repeating it yet again. Besides, the YouTube videos OP watched probably mentioned it already too. The problem is "structs are value types and classes are reference types" won't mean anything to someone who's new to programming. OP probably doesn't understand the conceptual difference between reference types and value types. You could provide code samples, but that doesn't explain when it's appropriate to use one over the other. &gt; It is entirely permissible to have a mutable struct or an immutable class. Technically, yes. But it's uncommon. When is it better to use an immutable class instead of a struct? When is it better to use a mutable struct (with the `inout` keyword) instead of a class?
I totally agree with you, but we're getting way off in the weeds. Remember the context: **OP is a beginner** whose only experience programming is presumably based on a few YouTube videos. OP is simply looking for a better understanding of classes vs structs, and why we have two different tools that appear (at first glance) to do the same thing. It's like someone asked how to draw a triangle, and now everyone's trying to teach them the finer points trigonometry.
Doubtful he would need to pay for much server space considering the type of data being stored. CloudKit limits would more than suffice. Firebase is another option. Learning the API is important but it wouldn't take much time and learning another programming language is probably overkill. Anyways all of this is predicated on OP learning Swift. Making a dependency for built-in libraries that are already simple to utilize would be an exercise in futility. Even if there are some that exist out there I would recommend any serious developer to stay far away from them until they have tried the native solution and found it unsatisfactory.
Im talking about the new ones which hopefully are going to be released this sept 
I'm no expert in swift. But in most cases your going to need some type of server side application with a database to store the data of users in your a social networking app. I found this on GitHub, https://github.com/Wolg/awesome-swift#jsonxml-manipulation. If you scroll to the section with databases there are some databases that you can implement with swift. Some use SQL or JSON. If you take a look at the SQLite db's you can see that it uses SQL syntax with Swift syntax for declarations. So the short answer is yes.
Current models aren't significantly faster than a 2011, if you put an SSD in it. That is a big if of course. More RAM helps too! Personally I wouldn't consider the current machine and would stick it out until the new machines launch. Then the question becomes do you buy a laptop or a desktop machine. I'd seriously consider a desktop machine for the large screen. You can of course buy a laptop and hook it up to a large screen but to get decent results that puts you in a 15"' MBP with a discreet GPU. A if your desire a laptop I'm expecting a major overhaul of the laptops. It would be foolish to buy one right now unless it is absolutely mandatory. As for laptops being fast enough for XCode and development work is a very personal thing. I have a 2015 13" MBP and there are times I wish it was faster. 
I don't see why not. 
Your going to get sued....
KyleCardoza basically already said it, but in Swift (as in many other languages), the modulus operator can be used to calculate remainder. 
When i try writing the code out as a function i always get errors. I don't know the full syntax of Swift yet because I'm just starting it. It's a pre-assignment for a class in the fall
[This kid thinks Im going to do his homework for him](https://i.imgflip.com/7nte5.jpg?a408816)
You need a segue. In Main.storyboard control click from the current ViewController and drag it to the destination one select "show". This is a show segue. click on the actual arrow connection the two MVCs and enter an indentifier; set it as: loginSegue In the button action: if textField1.text == "123" &amp;&amp; textField2.text == "321" { performSegueWithIdentifier("loginSegue") } else { label.text = "incorrect" } Make sure you haven't renamed any of the outlets in your viewController file, I suspect that's whats fucking you up. Try deleting all the outlets and re-adding them again if the above doesn't work.
No problem!
Does it do something?
There are a bunch of functions in the functional programming toolbox that will make you life easier. Sounds like you've found several. From memory here's what I find usefull: map, flatMap, zip, reduce, filter, sort, split, contains, flatten, reverse, first, dropFirst/Last, and probably a few others I'm forgetting. If you get familiar with those you'll find an awful lot of loop+if+accumulator structures turn into one liners that more clearly state what you're actually trying to accomplish. And as SalvagedTechnic mentioned, learn to use map/flatmap with optionals so you can "optional chain" constructors and other methods not attached to a class.
[Apple Library](https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAudioPlayerClassReference/): An instance of the AVAudioPlayer class, called an audio player, provides playback of audio data from a file or memory. Apple recommends that you use this class for audio playback unless you are playing audio captured from a network stream or require very low I/O latency. [Apple Library](https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAudioPlayerNode_Class/): The AVAudioPlayerNode class plays buffers or segments of audio files. AVAudioPlayerNode supports scheduling the playback of AVAudioBuffer instances, or segments of audio files opened via AVAudioFile. Buffers and segments may be scheduled at specific points in time, or to play immediately following preceding segments. Sounds to me like the AVAudioPlayerNode is for more complex and specific tasks regarding playback of sound/music since you have to open a file using AVAudioFile for reading and writing rather than just playing. I personally use AVAudioPlayer for my SpriteKit games.
 mutating func ts_merge&lt;K, V&gt;(dictionaries: Dictionary&lt;K, V&gt;...) { for dict in dictionaries { for (key, value) in dict { self.updateValue(value as! Value, forKey: key as! Key) } } } This code is honestly not good at all... Instead of introducing two new generic parameters `K` and `V`, just use `Dictionary`'s own `Key` and `Value` parameters: mutating func merge(dictionaries: Dictionary...) { for dict in dictionaries { for (key, value) in dict { self[key] = value } } }
Thats roughly what I would do. I'd make an array with numbers 1 - 50 and have a function that goes through the array doing the math. It's just the swift syntax that's a pain in the ass. My professor isn't much help either and most of what I find online has mostly to do with swift2
Setting up the UI to be customizable with regards to number of spaces would require some math. 360 degrees in a full circle. Divide that by the number of spaces and then use trig to evenly space out your options in a circular arrangement. As far as the functionality of the spinner itself, you'd have a image or a sprite of a spinner with one anchor point tied to the center of the board. And how you spin it is entirely up to you. You could have a pseudo spinner where you calculate a random number as to where the spinner will land on at the end and then animate in between by rotating the spinner, or you could set-up an algorithm that applies a certain force so that the spinner keeps spinning until it loses momentum and then you calculate the angle it is currently facing and which option it points to. If that's not helpful then I recommend you be a bit more specific in your question as to what problems you are currently facing.
I'd also ask if he means to print the result in his function or return the string as the result of the function.
I would subclass UIControl. For the background, figure out the number of spaces and do something like this in drawrect. Start a loop i in 0..&lt; number of spaces. { draw the first space at midway between rect.midY and rect.minY translate context to midX, midY rotate contact by 2Pi/(number of spaces * 2) translate context -midX, -midY draw vertical line from midY to minY then repeat translation/rotation by same amounts } If you actually want colors in each section, I would write a small function that draws an inner circle, draws an outter circle, then a line from the center to the edge that is rotated 1/2 or 2pi/n left and the same the other direction. Then fill that inner space with whatever color you want. Look up CGContextFill with the even-odd rule. It takes some experimentation to get it right. the view has a layer that you draw an arrow in. A CAShapeLayer would work. To make it simple draw the arrow pointing vertically from the centerpoint to the top mid edge. Then you wont have to change the anchor point on the rotation animation. Add a gesture recognizer for uitapgesture to the view in it's initializer. The tap would point to a method that does the following: -choose a random number from the min to the max number of spaces you want to rotate past. ( var randomNumber = CGFloat(arc4random_uniform(max) + min)) -creates a CABasicAnimation(keyPath: "transform.rotation"), called oneSpaceRotation or something oneSpaceRotation.fromValue = NSValue(CGAffineTransform: arrowLayer.affineTransform) let oneRotation = CGAffineTransformMakeRotation(angle: 2 * M_Pi/number of spaces) one space rotation.toValue = NSValue(CGAffineTransform: oneRotation) oneSpaceRotation.duration = 1 or 2 / number of spaces(one or two seconds for a full rotation around) The tricky part is you need to keep resetting the from and to value of this animation and then re-add it when the previous one finished. I'm pretty sure this is where you would use a keyframe animation, but I'm not familiar with those. I'm sure theres a way to do this. Finally, the subclass has a class variable var pointerLocation: Int when the animation completes, set pointerLocation = Int(randomNumber) % number of spaces then send the action for uicontrolevent value changed. You can draw a IBAction from the view in interface builder to your view controller so that you can do stuff with the number that pointer location becomes after the spin. thats how I would do it. I would just have to figure out how to do the recursive animation. Sorry about the horrible formatting. What you want to do is possible, a bit tricky if you're new. Some of the things I've written here would point you towards what you want to learn about to do this. 
You need 16gb of ram for developing
You should replace the boolean flag + semaphore logic you have with `dispatch_group_*` APIs. let group = dispatch_group_create() dispatch_group_enter(group) asyncTask1 { defer { dispatch_group_leave(group) } } dispatch_group_enter(group) asyncTask2 { defer { dispatch_group_leave(group) } } // Wait for it dispatch_group_wait(group, timeoutTime) // Do other stuff Just know if you use `dispatch_group_wait` so you can have a timeout, you have to call the wait on a async-thread like you are already doing in your example.
i'll try use a for loop in my function and post on here what I get. 
Do read my comment again - we are in agreement here :)
Oh, I missed that! My bad. Yeah, it's still more terse in C and you can't really beat that. However, especially with the UnsafeRawPointer apis, I've begun liking using low level Swift a lot more. That said, I still wouldn't use it for an OS because of the intense overhead that ARC brings.
Trying to figure out how to write Local Laplacian Filters through Core Image ^_^ https://github.com/DaveNine/Fast-LLF I'm kind of a noob, would appreciate criticism.
If you wanted to write an OS you would probably just do it with structs which have no overhead 
There are a ton of these that I wish I had learned earlier when I was new. Since I'm trying to procrastinate.. You can do a lot more with reduce than the description makes it out to be. Here's my standard deviation extension for a protocol called numeric that only has an 'asDouble' function that demonstrates starting reduce with a tuple. extension Array where Element: Numeric { var sd : Element { get { let sss = self.reduce((0.0, 0.0)){($0.0 + $1.asDouble, $0.1 + ($1.asDouble * $1.asDouble))} let n = Double(self.count) return Element(sqrt(sss.1/n - (sss.0/n * sss.0/n))) } } } I made the initial value in the reduce a tuple, starting at (0.0, 0.0) so I could get the entire sum of the array, as well as the sum of squares of the array in a single pass. starting with a tuple lets you get multiple items the would result from going over the array in one pass. 
Interesting; I'm not aware much with closure syntax, does the $0 denote the first parameter and $1 denote the 2nd parameter?
Do you need; view.addSubView(scrollView) or no?
Yeah I added that in the addImages function
Oh ye and you did
That's atrocious my god 
The problem is, if i remove the delegate for UITextfield, the keyboard appears. however, if it's connected to delegate, the keyboard does not appear.
It doesn't even override.
Yeah, when you don't actually spell out parameters at the start of the closure, you can use $0, and $1 if there is a second parameter as there is in reduce functions ($0 starts as the initial value, and $1 is the member of the array that you are adding (or more specifically reduce-ing) to it. Although xcode always seems to try and make me write $0.0 and $0.1. So in this case I said I want to reduce self (self is an array where element conforms to numeric), and I want the initial value to be two doubles in a tuple. I could have given them parameter names in the closure { T: (Double, Double), nextElement: Element -&gt; (Double,Double) in ..... } But because reduce knows it's looking for two parameters already, and it knows the types, you don't have to. They call it an anonymous closure. In this case $0 is the initial value, so it has $0.0 and $0.1, where as $1 is just the one value, of type Element. It took me a while to figure this out, but it certainly makes life easier and saves you from all those for in loops when you're manipulating data. flatmap is fun too. I just wrote this line: let typesRepresented = completedReadings.flatMap{$0.readingTypes}.flatMap{$0}.unique the first flatmap removes all the readings that that have 'nil' for their reading types, which is an optional array. The second flatmap connects all the arrays into one long array. Although it's better to write this as completedReadings.flatMap{$0.readingTypes ?? []}.unique finally unique was this great little extension that I saw on stackoverflow extension Array where Element: Hashable { var unique: [Element] { return Array(Set(self)) } } 
Yeah, you know something is wrong with your programming skills when you have to copy paste/retype basically the same code 49 times
Neat idea, uhm... weird execution
You can also do `flatMap { [$0, $1] }` instead :)
Is this about Swift at all?
somewhat. their definition of intervals is very similar to swift's ranges. as you might have noticed, range type isn't comparable in swift and this tells you what does it mean to compare ranges. 
Give me some examples if your post being applied with Swift.
What are you using to build your board game? UIKit? SpriteKit? SceneKit? If you're using SpriteKit, you could just create a central node to hold/pin the other colors around. I won't go into much detail until you answer what library you're using.
This abstracts away all the relationships between ranges. Say there's some zone on the screen and the user is supposed to put three fingers into that zone and the app tries to navigate the user how to get there. The zone has an associated range, you convert the touch events into a single range and then depending on their relationship you can tell the user where to move the fingers and by how much. reasoning about this in terms of rects and touchpoints actually get annoying pretty quickly. also time series data. or basically anything that has the concept of a range. 
Thanks for everyone's help! I am looking over the links that you have recommended and will continue from there. 
Thanks! ------
Allen's interval algreba is cool but is based around closed ranges, whereas swift arguably favors half-open ranges (it also has closed ranges in the stdlib but they aren't as emphasized or widely used overall). This limits how broadly useful interval algebra libraries can be (at least vis-a-vis the standard library).
This is a video of the app running on WatchOS 3, beta 2. We have around 40 SKShapeNodes, and some of the cogs have 100s of points: https://www.instagram.com/p/BIb9R4tjFjW WatchOS Beta 3 onwards has seen OS changes such that the app will no longer run on real hardware. After loading around 10 SKShapeNodes, the app just quits and Xcode shows a high CPU usage (It runs fine in the simulator). I've tried SpriteNodes instead of ShapeNodes, and staggering the loading of sprites to avoid a CPU peak, but nothing is currently working. If you have any ideas, please let me know! At present, I'm improving the internal organisation of the app and focussing on it running on the mac/phone. When Watch hardware V2 comes I'll buy one straight away to look for an improvement.
I like the guard convention. Good suggestion. Let me ruminate on that a bit. I assume you were talking about the .validate() portion?
Yep! Seems like a really useful lib, you may see a PR from me in the next couple of days to fix some conventions in your code. Nice work!
I've built something very similar in the past – I found it was more convenient to define the progression through fields by hooking them up to outlets, so you could just drag from the `nextControl` outlet to the next control and from the `previousControl` outlet to the previous control. You can also use this to hook up a typical toolbar above the keyboard with previous / next buttons on.
Daily "where can i lern swift ive never program b4" post checks out. Read the sidebar numnuts
Very interesting idea. Have a link to your code? Care to share? I think that sounds like a pretty nice solution too. What would be a case where "previousControl" would be different than the one you were the "nextControl" of?
Thank you for your reply. By languages, I meant local languages which are not included in the list of supported languages here: http://nshipster.com/avspeechsynthesizer/
So I figured out what was wrong. I am nulling out the object in the view controller class. If I don't set it to nil, then the buttons will still work. Why can't I just say webViewShower = nil when I am done with the webview being shown? I even put a delay on setting it to nil so that all the calls were completed and it should be OK to clean up. Your example is just creating an instance and not setting it to nil so it worked. Any ideas on how to clean up this webViewShower instance without losing events? The crazy thing is the buttons still act like they are being hit but don't actually call their respective functions. Is it because they are ibactions and not programmatic buttons? I am totally lost as to why nulling out an instance prevents any other events from firing. 
Just input on this: The name would probably stop me from using this library. pod "WASHD" tells me nothing and it is most likely not what apple should have done. Just quickly looking over it. You handle names, phone number etc, without any localization. I am not saying that it's a bad library or that it does not have customization options, its just that the name is not really true.
This looks similar to the new Swift 3 syntax – intentional?
easily setting properties like this is something I miss from my old C#/WinForm days, good job!
Wow. Thank you for this. I did not realize. Just went over this with a coworker who has a better understanding of this than I do. I am going to test it now to confirm that it is not removing the observer. edit: confirmed what you said. removing an observer in this way does not work. devising a fix. Was thinking of passing `self` into `removeKeyboardObservers` as `removeKeyboardObservers(observer: AnyObject)`
Funnily enough, no, not intentional. Needed some more elaborate block chaining in a project recently and wanted to make it publicly available. Didn't get around to see the swift 3 specs in details yet, but the new dispatch API looks quite promising!
I believe I have figured it out with the help of @rgfox. Though it is not very pretty, it appears to work. The object you mentioned that gets returned I can use to reference as the object on the `NSNotificationCenter.defaultCenter().removeObserver` method. See: https://gist.github.com/roymckenzie/05bb47a3d8526eeedeffe6e42a0c178c
Asynchronous code should not be fun.
I'm working on my app Favoreet (http://www.favoreetapp.com/). I hope to finish it this week! Feedback is welcome :)
I've been staring at NSNotificationCenter's swift implementation all week. but you don't really have to remove the observer's because when adding an observer it's creating a wrapper object under the hood with a weak reference to the observer so that when posting a notification, if that reference goes nil it automatically removes the observer for you. reference: https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSNotification.swift#L103 also something that plagued me for a while is, if you're making a protocol and instantly making UIViewController conform to it, why not just make a custom UIScrollView or UIViewController subclass to handle this logic. You've essentially done the same exact thing as an extension on UIViewController itself with this. the subclass would allow you to make your own properties without leaking to the outside world and you aren't doing anything special with associatedTypes or the protocol itself. I had to myself take a step back because I realized everything started to look like a nail with my new found hammer...
I've used that associated objects trick on a protocol I wrote for validating input fields. Nice solution!
I wanted to be responsible about my notifications and give the implementer an option to remove them if, say, the view was in the background, but they didn't want the show keyboard notification running an unneeded animation on a view that was hidden. Good point about the protocol being basically an extension on UIViewController. I have to question how extensible this protocol really is. 
iOS still uses the Objective-C foundation, as the Swift foundation is still very much in flux and work in progress.
Can you set up a breakpoint, then step over and see at what point you're getting this error and let us know. I imagine it's probably at the "performSegueWithIdentifier" point but would be good to confirm.
yeah, aware of that but there isn't really any crazy swift thing happening in that implementation versus what could be happening in the objective-c foundation outside of the Sequence extension to filter out nil references. They have to base it off of something. the Objective-c foundation also removes zeroed out references: https://developer.apple.com/library/mac/releasenotes/Foundation/RN-Foundation/index.html#10_11NotificationCenter
How did you get on in the end?
I can't believe I've never thought of this. I've always solved this problem by adding to the content size of the scrollview and then scrolling it "down". I like the thought of the edge insets though. Novel (at least to me) idea.
&gt; are there any way to append without parameters as an optional? Sorry but this question doesn't make much sense. Also, when asking about an error, you should post the error message you're getting. Anyway, the reason you're getting an error is because you're trying to call `Doctor()` without passing constructor parameters to create the `Doctor`. You need to either pass in those parameters, or create another initializer that doesn't take any parameters.
Some of the points are contentious or a bit confusing: &gt; Swift has changed the game here, and those who make apps can now use blocks of dynamic code in their applications. That way, apps created with a certain version of Swift can be linked with future updates of the language. Obj-C lacks this dynamism. I'm not sure what this point is really trying to say. Objective-C is obviously the more dynamic language, and can (now) make use of dynamically-loaded libraries, too. &gt; The main reason for the better speeds of Swift is the absence of the general legacy C conventions (which bog down the Obj-C language somewhat). ... The API legacy in Objective-C makes it a significantly slower language. Not sure what this is trying to say, either. The Swift compiler may generate faster code, I'm not sure, but it really has more to do with the semantics of the language, not "general legacy C conventions". And what is meant by the "API legacy"? &gt; Although the prime focus of Swift is, obviously, iOS, watchOS, tvOS and mac OS X, it is not an Apple-only locked language like Objective-C. Objective-C isn't an Apple-only language. You can write Objective-C on Linux...just, no one ever tried that hard. &gt; That thing about pointers This section is more about nil punning than pointers.
Mostly, yes.
Cool thanks 
Looks very nice, thanks.
You're welcome! Here's my solution to a pretty simple puzzle: [Leap](http://exercism.io/submissions/b58c2d95884141ed86cd1fcab5a7c78e)
`self.writeResponse()`
I'm interested in exactly what you mean by this, and why you believe it. In all the applications I've written that use concurrency, it's very explicit, and I'm not sure how my life would be better if it were not. (Current app thread count, according to Activity Monitor: 28. Thanks, GCD!) But maybe I'm just not seeing it. There's lots of cases where we as an industry have simplified something to the point of making it essentially go away, and have never missed it (including everything lower-level than compilers, basically), but there's also plenty of other cases where people keep trying to make something go away because they really want it to go away, and fail every time (like treating network object access as local access, or using a database for your filesystem, or treating all levels of the memory hierarchy equally). It's not obvious to me that asynchronous code is in the former category. It shares many qualities with the latter. There's certainly always going to be easier or harder ways to deal with concurrency, but I don't think an asynchronous algorithm is ever going to look just like a synchronous algorithm. Lots of people get bent out of shape when you use `+` for adding numbers, appending lists, and concatenating strings. Imagine what happens when any operation involves threads. I'm not saying it'll never happen, but I don't think it'll ever happen with our current model of programming.
Nice to see this mentioned. I did the port of the first sets of exercises to Swift to get the language up and running on exercism.io If anyone out there is looking for an opensource project to contribute to, this is a good one. There are a lot of opportunities to help even if you're new to programming. For example, even though the problem descriptions are the same across all languages, the test cases are not. There's an attempt to define a standard set of test cases in JSON files to create some uniformity. There are still a whole bunch of problems that need JSON files. [Have a look here](https://github.com/exercism/x-common) and see if you can add some new ones. 
The simplest way I've accomplished your pass at a solution is to create an extension of UIViewController with a method that accepts a UIView: Add the UIView as a subview and either set an explicit frame or use autolayout. These should be set such that the view is offscreen after it's added. Then, either animate the frame changing its Y value, or animate the Y position constraint constant. Then animate it back out in reverse in the completion block, (use an animation with a delay and you can leave it on screen for that amount of time). Once the animation completes, remove it from the parent view and you're done. Now, the obvious limitation there is that the banner is only present on the current view controller, so if you navigate elsewhere while it's being presented, you may miss it. Soooo, what I've done is create a more sophisticated class to manage all of this. It creates a subclass of UIViewController that creates a new window above the current window and sets itself as the rootViewController of said window. This UIViewController then manages all of the banner layout and animations. If you wanna get smart about it, do all of this inside of a background queue and dispatch back to the main queue when you're ready to present. Check out dispatch groups as well. That's it at a high level, but happy to answer questions. EDIT: Don't forget you can also schedule local notifications that will appear in the iOS notification center.
Any thoughts on the struct vs class argument for a solution such as the one posted here http://stackoverflow.com/a/38154998/2570590? I like it because it eliminates a lot of code but I wonder about it performance wise since I would assume a struct is a more appropriate model... Also here's another option using swiftyjson http://www.waltza.com/2015/12/10/firebase-and-swift-type-safety-with-swiftyjson/
AutoLayout is your friend. Directly manipulating frames is your enemy. Embrace your friend and avoid your enemy. 
This is one of the more insightful criticisms of Swift. It's more like a meta-criticism that encompasses several common issues at once.
I'd say the more Swifty approach is to use closures instead of selectors. Have you tried doing that?
This doesn't look Swift-related. Maybe try StackOverflow?
Hmmmm I haven't, but that's really gotten me thinking. Thanks for giving me a little direction!
I really dislike the fact that optional is a special case for the compiler 
I can definitely get behind that. I would love to see their specific reasoning though for baking things into the compiler instead of building on their own constructs in the stdlib
The collection view's are being reused in the table view. You need to scroll them back in the cell's prepareForReuse method. I think.
mind sharing the uber/facebook tutorials?
I know the second one, you have to work with size classes which are the squares and rectangles in the middle of the bottom bar of the storyboard do some googling to figure it out more.
I'm guessing the bottom row of views is your horizontal stack view? Do the arranged views have any constraints of their own? Can you clarify the desired behavior? 
Swift hasn't reached ABI stability yet so afaik all frameworks are objective-c right now. 
Exactly. It'd be like talking to someone that creates their own words and rules. Swift is, in my opinion, already too complicated and ungainly, especially when dealing with optionals. The cure seems worse than the original disease. Error handling is a pile of crap, with 3 or 4 mediocre solutions instead of one good one. The async features are sorely needed, however, and should be part of any modern language. I just wish a language could actually detect threading issues at compile time such as accidentally sharing mutable objects between threads or calling UIKit from secondary threads. 
Yes it is a horizontal stack view. An it is filled equally. I want to drag a view from stack view and drop it on somewhere else. But I want my dragged/dropped view to be removed from the stack view. When I use "removeArrangedSubview" to remove it from stackview, the dropped view changes its size. 
Adding an action with a block would return the action, which could then be used to remove it.
I use [ActionKit](https://github.com/ActionKit/ActionKit), that does exactly what you describe. I recommand to remove the event right before adding one, or your might have multiple actions triggered: button.removeControlEvent(.TouchUpInside) button.addControlEvent(.TouchUpInside) { // Your actions } 
Well, ten years... That's a long time.
It really isn't -- and there's no compelling reason to *replace* Cocoa. Enhance it, certainly -- there are places in Cocoa that would very much benefit from some Swift code, but replacing it entirely would be a massive waste of time.
Part of the reason why Swift is so important is that it provides Apple with a path forward that *doesn't* require replacing well-tested code. Objective-C compatibility isn't actually there for us, though it's certainly useful (I use a couple of Objective-C files in my Swift 3 app), it's really there so Apple doesn't have to waste millions of dollars in person-hours replacing (and more importantly, testing and debugging) code that works just fine.
Sorry I probably should have said this in my post: Question #1 is for a swift OSX terminal program whereas Question #2 is for my iOS app. Thanks!
thanks i'll try that out 
New as opposed to the time when we didn't have that method (i.e. 6 years ago), not new as in Swift 3. 
Thanks!
I'm not an iOS developer (just a curious dev) but my advice is to add screenshot to your readme file. I know that you're linking to an issue with loads of them but most people have a short attention span. just my 2¢
You are missing super.viewDidLoad() in your viewDidLoad function. That could be the problem.
Can you post the actual error from the debugger?
Any images? If they were on the readme this would get a lot more downloads 
Thread 1: EXC_BAD_INSTRUCTION (code=EXC_1386_INVOP, subcode=0x0)
Awesome. :)
Yeah, you want people to see it first so they know what they're getting. Maybe also say clearly that it's 100% customizable 
I hope some of you devs find this useful - the idea was to make a super short blog post covering one thing. When I first came to Swift, the functional approaches were very new to me - and I've wanted to make a list with one sentence descriptions for some of my favorites ones for reference. Of note - I'd like to make a post for Sets too, since they have a ton of cool ways to interact with them (exclusiveOr/isSubsetOf/union/etc)
I'm new to Xcode, and was wondering how do I implement libraries into my Xcode project?
Searched "Calendar" and yours seemed the most customizable.
Is this what you mean: fatal error: unexpectedly found nil while unwrapping an Optional value (lldb) 
Yes! You don't have the tableview outlet hooked up 
How do I hook it up?
Old: func f(var x: Int) { [...] } New: func f(x: Int) { var x = x [...] } Or, you know, [just Google](http://stackoverflow.com/questions/36164973/var-parameters-are-deprecated-and-will-be-removed-in-swift-3) [next time](https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters.md#impact-on-existing-code)
Pedantic niggle: Why do you capitalize the name of the language like that? It's not an acronym.
Thanks for your quick response, rest assured next time I will Google it first. 
thanks man.
Ok. I will change the readme. Thanks for the advice.
Does anyone else hate this change? If you look on StackOverflow people actually suggest changing the var to inout to make it compile, not realizing that this is a terrible fix. I don't see why Apple felt it necessary to remove this feature from the language.
Like all the Swift 3 changes, the debate, discussion, and decision along was a public process and the rationale is [described in the associated Swift Evolution proposal](https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters.md). The fact that people confuse var parameters and inout parameters was part of the problem. inout couldn't go, since there's no simple replacement. At least this way there's only one special parameter type for people to learn so there should be less opportunity for confusion in the future. 
I'm extending [SwiftyFORM](https://github.com/neoneye/SwiftyFORM) with an inline UIPickerView, [short video](https://gfycat.com/SillyFairHoatzin). code looks like this import SwiftyFORM class PickerViewViewController: FormViewController { override func populate(builder: FormBuilder) { builder += picker0 builder += picker1 builder += picker2 } lazy var picker0: PickerViewFormItem = { let instance = PickerViewFormItem().title("1 component") instance.pickerTitles = [["0", "1", "2", "3", "4", "5", "6"]] return instance }() lazy var picker1: PickerViewFormItem = { let instance = PickerViewFormItem().title("2 components") instance.pickerTitles = [["00", "01", "02", "03"], ["10", "11", "12", "13", "14"]] return instance }() lazy var picker2: PickerViewFormItem = { let instance = PickerViewFormItem().title("3 components") instance.pickerTitles = [["00", "01"], ["10", "11"], ["20", "21"]] return instance }() } Last week I made an inline UIDatePicker, [longer video](https://www.youtube.com/watch?v=PKbVJ91uQdA). 
In the most obvious sense, the Swift compiler crashes on me at least once a day during normal use. Every now and then, I also get the dreaded "this expression is too complex to solve in a reasonable amount of time". I've never run into this sort of thing with equivalent operators in languages that don't do type inference. I haven't spent this much effort dumbing-down my code for a buggy compiler since the early 1990's. Additionally, the Swift manual says that `a ?? b` is equivalent to `a != nil ? a! : b`, which is a syntax translation simple enough that even I can understand it, but if you import Foundation (which nearly every Swift program does), it overrides `??`, and adds a bunch of handy LiteralConvertibles, that together happen to violate this invariant: import Foundation let a: AnyObject? = 5 a != nil ? a! : 10 // returns an Int (a bridged NSNumber) a ?? 10 // returns an Optional&lt;Int&gt; This sounds to me like exactly the sort of monkey-patching that everyone dreads: a common library causes an operator to contradict the language manual. Or maybe it's a bug in the type inference. I honestly don't know. I haven't even been able to figure out exactly how Swift's type inference is *supposed* to work. Is it even documented? It was definitely clever of them to implement it this way, but it's not so simple to use.
I don't think "working with proprietary file types" is the test to decide whether to use NSDocument or not. I bet TextEdit is NSDocument-based, even.
Okay. It just seemed like it was made for apps that create their own file types. I think document-based is the best choice. I'm sort of lost how to get the data from the reading function in the document class into an NSImageView in my storyboard/view controller though. 
Thanks, I enjoyed writing it up!
Swift 3 defines `URLRequest.` It conforms to `URLRequestConvertible`. Use it instead of `NSMutableURLRequest`.
I would like to start showing screenshots of my progress on DropZap World. (It's written entirely in Swift.) What is the best way to upload screenshots for this subreddit?
Please let me know what do you want for v2 
Thanks for the feedback. I am looking for many ways to make the code better. Here are my comments. 1. In, your OMG, YIKES and WHOA section above. Are you saying that the code is too verbose? I do not understand what you are saying is wrong there. If your problem is in the verbosity of the code, then the code you looked at is no longer on my working code copy. I am already in the process of code cleanup right now. Maybe if more programmers helped me in the development? Help is welcomed! :) 2. Travis CLI tests broke when I changed the project structure to work with Swift Package Manager and tvOS. I am not good in implementing Travis Cli. Again, if I have help, then someone can help me set those up I will be grateful. In terms of the test number, yes, I have to add more tests. But I can assure you that the library is very stable and well tested by myself and with over 11k downloads and 650+ app installs. There will be about 20-30 tests added over the next couple weeks. But again help is needed. I am the sole developer. Your advice is good though, I will remove the travis badge until it builds. 3. Although I do not abide by strict swift lint rules, my code is very readable and safe. You mentioned that I have many unsafe forced unwrapping in my code. This is untrue. The places where the code is forced unwrapped (which are VERY few) are in places where a guard-statement or an if-let is unnecessary. And why? because the values were already checked against being nil at higher levels. I know everyone's code style is different, but in your opinion, do you think it is necessary to do a double check against something you have already checked? 4. Your advice makes sense. I already had changing the function name to `willDisplayCell` in mind. I will change it. Thanks. 5. The donation thing was put there when I realized I was spending a lot of time supporting the project and writing new code. It is optional however. Also, I do not think my statement implied a decline of good open source projects if I am not paid. The library is free. I was basically saying to "Support good open source projects". My emphasis was on the word "good", implying that there were bad ones around that people just seem to love to keep alive. Call it tasteless, but I think a bad project should shrivel up &amp; die or be re-written into something better. If the are better words I can use to convey my meaning better, please let me know. I appreciate your feedback. I believe my project is already the best of its type on github. I wish to make it even better. Awaiting your comments! :)
Apple TV?
I was thinking Linux
Also I know the audio is a bit low, I am going to boost it in future videos :D Also feel free to suggest future content. Things I am thinking about is creating a complete beginner path for Swift Interested people. Other ideas are focused on topics I mention in the video and then gloss over that could be beneficial. Swift Related 1. Basics of Auto layout Basic Programming Related 2. Modulus 
So it would be -= .99 and =+ .99? edit: Subtracting 1 works, but when I hit the button to add 1, it crashes. edit: Tried changing the values to 0.9 and it still crashed the second time.
Capitalized the B, still crashes on the second try... Thanks for the suggestions though!
What is the error you get on the second try? I am pretty sure that alpha cannot be greater than 1, maybe that's why?
I'm new to Xcode and programming in general, but it's some sort of thread error. It says Thread 1: EXC_BAD_INSTRUCTION (code=EXC_l386_INVOP, subside=0x0)
This has numerous improvements over thomaspaulmann's EmojiTimeFormatter: - Swift 2.2 and 3.0 compatibility - More straightforward - `ClockFace` uses a `Character` raw value since it doesn't need any extra information that `String` provides - `ClockFace()` returns a clock face for the current time - `ClockFace(time:)` lets you specify any hours even if negative or large - Makes great use of `hashValue` rather than using giant if/else chains - More functionality - Ability to loop through a range of clock faces - `nameWithAdditive` returns the clock face name with "o'clock" if it's on an hour - It stays within reason - It doesn't make sense to return a `Date` for a clock face when you know nothing about the day or year
Add a breakpoint? I changed it to 0.1, but the alpha only changed very slightly. It worked earlier, but when I added two buttons I think it began crashing. The two new buttons aren't hooked up or anything yet.
The code works fine that you showed. I am fairly certain you still have your button connected to the incorrectly named blackLives which is a common mistake. When you click on your viewcontroller in the storyboard document outline then click the connections inspector on the top right by the ruler you should see a connection with a ! by it that you need to remove by clicking the x by it. Or just right click the viewcontroller (in document outline) and look for a yellow warning triangle and delete it there.
Awesome! You got it! Thanks so much :D
&gt; Order-independent function parameters with default values Wait .. what? Had no idea it could do this. I know you could leave out parameters if they have default values but how does the order independence work?
I guess this is the shortest you can get: func ensureEndsWithPeriod(s: String) -&gt; String { return "\(s)\(s.characters.last == "." ? "" : ".")" } EDIT: Or without ~~templates~~ string interpolation, sightly shorter: func ensureEndsWithPeriod(s: String) -&gt; String { return s + (s.characters.last == "." ? "" : ".") } EDIT 2: Borrowing the idea of /u/fletchii , using hasSuffix is even shorter func ensureEndsWithPeriod(s: String) -&gt; String { return s + (s.hasSuffix(".") ? "" : ".") } EDIT 3: As /u/Kyro38 points out, these solutions always return a new object (which may not necessarily use more memory since Swift should be smart enough to know that concatenating blank means no changes). But it's one character shorter, so so far this is the shortest xD EDIT 4: Of course, as /u/swiftonista remarked, parentheses are no longer necessary func ensureEndsWithPeriod(s: String) -&gt; String { return s.hasSuffix(".") ? s : s + "." } P.S: A not short but to show the usage of Swift's guard: func ensureEndsWithPeriod(s: String) -&gt; String { guard s.hasSuffix(".") else{ return s + "." } return s }
Sweet! That's clever, using a template. I hadn't thought of that. And I wasn't aware of the ternary operator acting as an expression. So I could also do: func ensureEndsWithPeriod(s: String) -&gt; String { return s + (s.characters.last! == "." ? "" : ".") } ...which does give up runtime safety if the string is zero-length. (Swift 3)
That, and you could basically use any suffix you like and are not forced to use a single character ones. A shorter version using /u/mocelet 's code could look something like this (just for the sake of completion :x) extension String { func withPeriodSuffix() -&gt; String { return self + (!hasSuffix(".") ? "." : "") } mutating func addPeriodSuffix() { self = withPeriodSuffix() } } edit: using hasSuffix() instead of last character 
Feedback: more code, less IB please
&gt; you don't need to unwrap, after all if it's nil it won't be equal to ".", and if it has a value Swift will compare it. Wow, you're absolutely right. That compiles, and my tests pass. Very interesting. I get the logic, but I'm not quite understanding it. After all, the type of `last` is `Character?`. So my understanding was that this needs to be tested every time. And it sounds like you're saying that since we're just using equality with it, that's supported by nil, and so wrapped or unwrapped, it'll compile. Maybe i'm just getting the haskell confused. There, i think, a `Maybe Char` stays a `Maybe` until you manually unwrap it.
This is cool, but I'm suspicious of extensions, coming from Ruby where they're overused, and they affect all objects without limit. Does swift limit the extension to the scope of the module or project?
Not only that, but function references no longer carry the keyword names in Swift 3, just the type information. Super crappy!
You're absolutely right
Ah sorry yea when you do this: fun some_function_name(a: Int, b: Int) {...} foo = some_function_name foo is of type (Int, Int) and not (a: Int, b: Int). 
This makes sense. The label is irrelevant to the func signature. You can do func foo(someInt a: Int, someOtherInt b: Int) { } func bar(anotherInt a: Int, otherAnotherInt b: Int) { } func foo() { var a = foo var b = bar } and the signatures are var a: (someInt: Int, someOtherInt: Int) -&gt; () var b: (anotherInt: Int, otherAnotherInt: Int) -&gt; () But the compiler (Swift 2.2) is perfectly happy with b = foo because in the end, b is a variable that holds a function that accepts 2 Int arguments and returns Void. 
I don't think it makes sense at all. If it's invalid to call your "foo" like foo(1, 2) why should it be ok if you just bounce foo around to a variable? Either the labels matters OR they don't matter at all and the compiler shouldn't even check them. You can't have it both ways.
Thanks, I think normally that will be the case with app tutorials but with the logic being limited I did spend a bit more time in IB still a crucial part for developers to know though. 
I do think IB is important to learn and I am planning some more tutorials with varying levels of complexity in the UI. Feel free to ask about things you need help with. Perhaps I can make more tutorials over it. (Outlets, constraints, storyboard/xib, etc) 
Happy to hear that ! I'll tell you when i have questions
&gt; Although I do not abide by strict swift lint rules, my code is very readable and safe. You mentioned that I have many unsafe forced unwrapping in my code. This is untrue. The places where the code is forced unwrapped (which are VERY few) are in places where a guard-statement or an if-let is unnecessary. And why? because the values were already checked against being nil at higher levels. I know everyone's code style is different, but in your opinion, do you think it is necessary to do a double check against something you have already checked? I just want to talk about a few examples of questionable code in specific. [Here](https://github.com/patchthecode/JTAppleCalendar/blob/688dff6dcc4103c2fc1941c6111f31f89e13389a/Sources/JTAppleCalendarDelegates.swift#L68) we are force-unwrapping the return from a function. I can't even find the function in question, but nonetheless, if this is a case where you had already checked that it does not return `nil`, then why does it return optional at all? And this, by the way, is generally going to be the crux of all of my arguments. If you have already checked and already "know" something can't be `nil`, then why is it optional at all? Making things not optional improves the safety &amp; readability of your code. Again [here](https://github.com/patchthecode/JTAppleCalendar/blob/688dff6dcc4103c2fc1941c6111f31f89e13389a/Sources/JTAppleCalendarDelegates.swift#L29) we have two violations: reuseIdentifier = delegate!.calendar(self, sectionHeaderIdentifierForDate: validDate.dateRange, belongingTo: validDate.month)! This section is _quite_ bad actually. First of all, the protocol we're using, the contract we've set up with the delegate specifies that returning `nil` here is perfectly acceptable. Moreover, you've given this method a default implementation of returning `nil`. So the user will get _NO_ warning that this is actually a required method, and instead, their application will simply crash with an entirely unhelpful error message if they fail to implement this method or if they return `nil` as you've allowed them to. So again, why allow optional if optional isn't allowed? But there's an even bigger problem here. You're force unwrapping a delegate! Delegates are optional for a reason, and it's because they should be `weak` references. That means they can zero out at any point in time. So if I, as a user, expect your calendar to behave in the ordinary &amp; expected protocol-delegate pattern, I'm at risk of a force-unwrapping crash because you are not properly handling the case where your delegate is deallocated. I could go on, but it's just going to be more of the same. &gt; do you think it is necessary to do a double check against something you have already checked? If you have a specific example where you feel like you're force-unwrapping to avoid a double-check, please point that out to me. But from what I saw, you were force-unwrapping in places that avoid even a single-check. Or, even if you did check it at some point in time, you continued working under the assumption that the check was still valid and that nothing came through in the meantime to invalidate that previous check. The reason why we use SwiftLint with very strict settings where I work is because despite all of the experience we all have with Swift (several of us have been using Swift since day one), not a single one of us is smarter than the compiler. Why would we *hope* we get the code right, when we can write it in such a way that the compiler forces us to get it right?
There's no point to using parens here: func ensureEndsWithPeriod(s: String) -&gt; String { return s.hasSuffix(".") ? s : s + "." } Of course, if you didn't mind violating every known style guideline, you could remove most of the spaces, as well: func ensureEndsWithPeriod(s:String)-&gt;String{return s.hasSuffix(".") ?s:s+"."} 
Gotta say, I'm a huge fan of the API cleanup, as primarily a C# dev it makes me much more comfortable calling methods on an object than the previous approach. Anything involving Core Graphics APIs was disgusting to read before, now it's somewhat better. I've also started incorporating the method and parameter naming style encouraged in my C#, I just think it's nice to read. Func verb (noun:type), can't actually remember an example right now.....
Gotta say, I'm a huge fan of the API cleanup, as primarily a C# dev it makes me much more comfortable calling methods on an object than the previous approach. Anything involving Core Graphics APIs was disgusting to read before, now it's somewhat better. I've also started incorporating the method and parameter naming style encouraged in my C#, I just think it's nice to read. Func verb (noun:type), can't actually remember an example right now.....
As someone already answered your questions, but what is the point of doing that if the variable is just going to be used in the scope only? I mean, why even bother declaring it as a parameter and not just say var x = something in the body.
Yep! You've given me something else to go learn ;-)
As you've discovered, force unwrapping an Optional that may be nil cause trouble. `guard` or `if let` are the solutions to this.
That makes sense... I wrote this a few weeks ago so I don't remember the context but the map could indeed be removed. Thanks for the feedback! :) 
That's the thing though, it was the `if let` I was using that was causing the crash. At least guard didn't (and was even more appropriate for what I was doing anyway). 
Why do you use `NSNotFound` rather than simply returning an optional?
Like /u/PicadorDeBits, I'd love to see the code.
Oh no, it's actually not an optional. The only optional there is `representativeItem`. As I pointed out too, unwrapping other properties worked just fine. Also forgot to add, using optional chaining to set the artwork also worked just fine. 
In all cases, when the correct behavior is a crash, then in a library, we must return a useful crash message. &gt; fatal error: unexpectedly found nil when unwrapping a value That's not a helpful crash message. guard let date = dateFromPath(indexPath) else { fatalError("Some descriptive method that explains the crash to the user") } This is going to be extraordinarily helpful for some many reasons. First, the crash message tells the developer using the library why it crashed with some useful message. It might be a hint at exactly what the dev needs to do to fix it. And if they still can't figure it out, if you have a bug report come in, the crash reason is a lot more clear to you (you can search the code base for the error message they reported and look at the code that caused the crash).
What if you use `indexPath` instead of `self` as sender in `performSegueWithIdentifier(...)`? Then you would have the indexPath in `prepareForSegue(...)`. i.e.: func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) { performSegueWithIdentifier("toView2", sender: indexPath) } override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) { if segue.identifier == "toView2" { guard let indexPath = sender as? NSIndexPath else { return } } } 
..you are right. I will fix this. Your advice makes sense. I will put guard statements in there to be more developer friendly. And this should also get rid of your swiftlint forced unwrapping issues. For the other ones you mentioned, I am already on code cleanup to get rid of the verbosity.
Yup, the lack of weak closure references causes capture problems that have to be accounted for using this pattern as well. Usually you hand off a function from another class to the AnyNumberHolderDelegate instead of an inline closure, but that creates capture loops. 
everything on table open indexpath 0 when i use your code my problem only when i use searchbar it open wrong page after click on result cells
They are looking for you to know how to do these things. Don't lie to them. 
I assume somewhere in your table view controller you have something like this: func updateSearchResultsForSearchController(searchController: UISearchController) { filteredData = data.filter { ... } tableView.reloadData() } Right?
Don't know how good I am, but when I'm doing it I want to make sure I'm getting someone that I want to work with (always a peer interviewer, not a manager interviewer). And the people I want to work with know how to solve problems, and how to say they don't know the answer.
Ok, so now you need to handle this in didSelectRow. func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) { let selectedItem = filteredData[indexPath.row] // selectedItem is now the filtered data the user selected } Now you can store this item and pass it to the next view controller via segue. Or you can use this item to decide what kind of segue you want.
Im just learning to program and wanted to know,since every time I declare a function with a variable parameter Swift throws an alert. I just don't fully understand some things, but I'm trying to grasp the language as quick as possible. Also, since I was a child, I like to ask about everything.
Not exactly the same, but potentially even better: http://codingswiftly.net/11-cocoapods/
 
you would think... lol
the array is of kind struct i think thats why i got error 
That's more of target-action system.
Looks nice, what app is this?
And yet, the way you phrased that, it seems as though you're assuming that "character" means the same thing in Swift and Objective-C and perhaps Unicode. - In Swift (String), the `.characters` accessor gives you a collection of extended grapheme clusters. - In Objective-C (NSString), `-characterAtIndex` gives you a UTF-16 code unit. - Both of these are completely different from each other, and also from what the Unicode Standard calls a "character". So my first question would be: are you talking about a Swift "character", an Objective-C "character", or a Unicode "character"? Or do you want me to write the simplest algorithm in Swift, and the simplest algorithm in Objective-C, even though they'll do very different things?
Oh, sorry, I missed that that question was for Obj-C as well. I barely have any Obj-C experience, and since we're in /r/swift, I just assumed we were talking about Swift.
Where have you seen this advice? I have never heard it before.
This is the right answer, by the way.
[woohoo](https://codecov.io/gh/seanoshea/FuzzyMatchingSwift/src/develop/FuzzyMatchingSwift/Classes/FuzzyMatching.swift)
You can find which name is ill-formatted in the body of your for loop: let name = imagesNames[i] if let img = UIImage(named: name) { images.append(img) } else { print("Bad name: \(name)") }
Because they plan on editing them. If you start with a pre-populated database, you can save a lot of time on first run just getting the new information. What you're often seeing is that pre-populated database moved over to documents, then the app's api called to get more data, which then is added to that.
let stringOneAsInt: Int? = Int(stringOne) let stringTwoAsDouble: Double? = Double(stringTwo) If the string can't be converted it will return nil, otherwise it will return the value as an optional 
You've got a filename wrong. Remember the iOS device uses case sensitive file names as well, which could be what's causing you problems
Don't ^ there are many free and better resources Hackingwithswift Code with Chris on YouTube Ray wenderlich (think I spelt that right)
People like you are too awesome. I'm so thankful for [this](https://github.com/nvzqz/FileKit/pull/27) PR that migrates one of the libraries I authored to Swift 3. Now to find the time (and motivation) to follow through with the stylistic changes I want to implement.
this was the case. Thank you! 
OK, forget Objective-C. When you say "character" in a Swift context, are you imagining in your head a Swift "character" (extended grapheme cluster), or a Unicode "character" (code point)? There is nothing obvious or unambiguous about this question to me.
What /u/ASnugglyBear said -- only if you plan on editing them (e.g. like a database). You can create your own directories within .documentdirectory and are free to place your files there.
totally this, in the time it took to post to reddit, OP could have just broken the loop into different statements like this and fixed the issue
Yeah, it's weird. No issues with building and no stringly-typed code there either. But at least the guard statement worked. 
Wow, that is a really noob thing isn't it? Lol thanks!
It's completely non-obvious. The tutorials rarely mention breakpoints. They're very useful, but Xcode makes it way too easy to create them without realizing you've done it.
Yeah, thanks so much!
Don't worry about it. I've been programming since the 80s, and using Xcode since before Swift was a thing that existed, and I still accidentally make breakpoints and get hung up finding them.
Fuck yeah, Mark Price is the best instructor I've ever seen. He's better than all of my programming professors :/
I've had this idea for a note taking app for some time now as none of the ones out there really suite my needs. So I've started working on that now!
Looks like a useful utility. Thanks for the time taken to make it Sean. I can try and do a quick first pass. It would be worth passing the whole class through a Swift linter, I'm seeing indentation/spacing patterns that are different to Swift examples and where I've seen the language being used. You're using `self.` a lot when calling functions where you don't need to. That's the boring and not very useful stuff. As for some Swift feedback, optional usage seems a bit weird to me. You seem to be force unwrapping a lot `!` and using optionals where maybe you could get away with using non-optionals. Also in API design, consider using a default value for the 'options' param (i.e. options: [String : Double]? = nil), the method signature can become smaller on the callers side if they don't wish to pass in options. Collections like Arrays that are of optional type (ln:176-177) sit a bit weird with me, can't quite explain exactly why, it seems unnecessary. Are you really adding a nil value to an Array because that has some meaning? It might be worth turning those into dictionaries with the index as a key. Can you get away ln: 210 and 212 being non optional? I appreciate walking through strings can be a bit gnarly and the code can become pyramid of doom, is there anything that can be done here? Breaking out into smaller functions etc. vars to lets. String handling in Swift you have probably noticed is completely different to the Obj-C foundation methods. In a String, you don't have the concept of a Integer index. Did you have a stab at using the Swift standard library to do the Bitap algorithm stuff? I'd be interested in working through it with you sometime! Hope I've been of use and appreciate this is a bit of a brain dump.
When there is a number in a string.. It does not have any other data type expect the String itself.. What it means that you can covert this number string to any datatype int,float,double.. But even if you want to check the decimal you have to use if statement of String.characters.contains(".") is yes then it either double or float else its int..
Please don't. A simple vertical list is much easier to skim, and as far as I can see there are no usability advantages to placing things in a circle like that. It's form over function.
Google this: Library not found "-lPods" You'll get a bunch of different problems and solutions. It could be that you're opening the project not the workspace, or you need to add/remove a bunch of stuff. HTH
Check out [Cocoa Controls](https://www.cocoacontrols.com). There's a lot of projects there and I'm sure there's something that can get close to what you need. More and more are coming in as Swift projects so you shouldn't have to worry about the ObjC bridge.
Just doing what has to be done! I actually think I was banging my head against a new bug in Swift, which is why this library took way longer than the other ones I wanted to migrate. I finally finished though!
Whenever I see a cool UI/UX thing I always check RAMotion's github first, they're a really cool company that open sources great libraries. Here's the one you're looking for: https://github.com/Ramotion/circle-menu
Why is he the worst?
I'm building an iOS client for Micro Lending Company based in Russia. You can download an app =&gt; login =&gt; get ripped off with 800% yearly fee There will be an exclusive torture machine in hell JUST FOR ME &gt;:-D swift and objective-c, no storyboards (hate them so much)
People should choose what course best suits their needs whether it is paid or free.
https://www.youtube.com/channel/UCuP2vJ6kRutQBfRmdcI92mA This YouTube channel is pure gold! Not a starting point, but helps you break the Interface Builder plateau better than anything else. This Brian dude is sent to us by gods.
People shouldn't be encouraged to pay money when there are tons of free resources that they can choose from All the paid courses are things you can find for free, it's a big scam 
Well, because he touts himself as the highest rated instructor in udemy. That was merely a formality. He was the most comprehensive at one point, but an instructor he was not really. I truly spent all the time following his lesson plans and putting in the work, but none of it stuck. He didn't give tips on how to remember. His style seemed to be, if you know how to look it up, then you know how to code it. All that changed with mark price. This dude is seriously legit, and funny, and the fact that you can get his teaching for a few bucks on udemy is a godsend.
It's not a scam. People are providing a great service to people and should be paid for their services accordingly.
Thank you for help , I solved my Problem by adding new value in struct of type Int and use it in didselectrowatindexpath IndexPathRow = filteredData[indexPath.row].i 
WELP! Thanks for solving this problem for me! It works now...
recursive... ish?
Not quite recursive, you're just calling super in a different notation. At any rate, that's bad code. Think of the normal MVC with sub MVC diagrams. You're adding infinitely reaching loops back to each parent MVC from each child MVC. This is spaghetti. A VC communicates between Model and View, what it's RootVC potentially five VCs up is doing is absolutely NONE of it's business. To be fair, if you are a newer developer, you can use it as a crutch until you get better with delegation/other patterns. But it's not something you would want to use in real code.
Hmm, interesting point, but I think it still is recursive. If we think of: 1. Computed properties as sugar for methods that take no arguments and have a return value 2. Methods as sugar for functions where the first argument is self If you write it as a free function instead of a computed property, the recursion becomes more obvious func findRootViewControllerInHierarchy(startingWith baseViewController: UIViewController?) -&gt; RootViewController? { guard let baseViewController = baseViewController else { return nil } if let rootVC = baseViewController as? RootViewController { return rootVC } return findRootViewControllerInHierarchy(startingWith: baseViewController.parentViewController) }
Technically, a string would contain a numeral (symbols, such as digits, representing a number), not a number. I make this point because we should clarify what distinction you want to draw between integer values and double values. If all you care about is whether the string contains a decimal point, then you can simply search the string for a decimal point. (But be aware that some people use a comma to represent the decimal mark, rather than a period.) However, different applications might distinguish numerals based on other characteristics, depending on their needs: * A numeral might represent an integer if it contains only digits and an optional initial sign (+ or -). * A numeral might represent a floating-point value if it contains a decimal point or if it contains an exponent (e.g., “1e6” to represent 10 to the power of six, which is one million). * Sometimes commas might be allowed to group digits. E.g., “1,234,567”. * In some circumstances, certain prefixes or suffices are allowed. E.g., “0x20” to represent hexadecimal 20 (decimal 32), or “3L” to represent 3 as a long integer instead of a default-width integer. Also consider a value such as “9007199254740993.0”. You might want to interpret this as a double, since it has a decimal point. But it cannot be exactly represent as a typical double (1 sign bit, 11 exponent bits, 53 significand bits [including the implicit bit]) because it does not fit into the 53 significand bits. But it does fit into a 64-bit integer. So it can be exactly represented as an integer but not as a double. In a similar vein, in certain applications, “0.1” is not an acceptable value for a double because it cannot be exactly represented in a binary floating-point format. It can only be approximated. This is probably more than you wanted, but it illustrates the fact that your question should be clarified. What features in the string do you want to use to distinguish integers from doubles?
Workspaces are collections of projects. CocoaPods puts all of the pods you use into a single project and then link it to your existing project and creates a workspace to hold it all in a single location for you.
I just checked swift-evolution with https://stylemac.com/hirundo/ and I only see one email for today - about 14 hours ago.
WWDC videos
So in like mid September?
&gt; you're just calling super in a different notation. This is totally incorrect.
Definitely don't claim to know the internals of the compiler, but it's my understanding that yes, computed properties are sugar for methods, and methods are sugar for functions. So this actually is a case where the syntactic sugar makes the obvious seem more interesting than it really is!
Most likely, yes.
The person has created content which can help the person learn. It doesn't mean the person will learn.
Autolayout was a huge pain for me in the beginning. It honestly took at least a couple months before I got the hang of it. It does eventually make animating views easier but I still find dragging those damn constraints to be a massive time sink and insanely boring. Next time I'll probably try some of the libraries the other poster mentioned. Your problem is probably that you're using strict sizes for the views. You can actually make the views as a proportion of the superview, then they will auto resize kind of like the springs and struts stuff. Remember that the different iPhone models all have different screen sizes. So making a view 200 pixels in width on the 6 will be less than half the screen width but like 65% of width on a 5. Also, make sure you have an minimum font scale/size on all the labels, they will auto resize to fit view width.... Which then brings up the next problem of having all your labels being different font sizes. I never figured out a good solution for this, so I wrote an extension for arrays of uilabels with a function called matchfontsize. 
I'm intrigued at how divisive this post is! At first I wasn't sure this was recursion either but then I thought of it as a free-floating function with an implicit self argument and it all made sense.
Now I'm thinking that calling super is just a form of recursion too... although I realize that is definitely not true in some languages — especially like ruby.
A function on an object is the same conceptually as calling a function with the first parameter being the "self" pointer. When viewed that way, it is recursive.
A web application framework. ...Totally kidding. I think something like Redis would, without doubt, be a huge but valuable endeavor.
Some time ago I made a simple tutorial where you can see all the Autolayout basics: [Simple remote UI with Autolayout](https://www.youtube.com/watch?v=hQkW-uGQl88) I hope it helps.
I actually had similar need quite recently and I decided to use notifications instead. Makes controllers less dependent on each other.
Look, I took the courses. I made it to 61% completion thinking it was my best option before finding the other course. I put in all my effort, I learned through exposure. But the steps were read in sequence. They weren't explained. It's like... "Now you take the deepCodeNewThing.you'veNeverHeardOf(first,last) and just stick it in. That's how it's done." There was no effort made to make self sufficient coders. The effort was given to say here is a method to solve a problem, but not here's how you solve problems which aren't this one. If I teach you calculus by 1 example of an integral without explaining what I'm doing, you'll walk out of the classroom feeling like you've learned a single equation. By teaching background and theory, as well as application in a broad sense, like MARK PRICE did in his course, I feel like I can walk up to someone and say, - "Yes, sir or madam. I can make an app for you." Rob leaves me feeling - "Yes, sir or madam, I can make an app for you as long as it is this very specific problem, because I haven't learned to understand what I'm doing, just how to do a particular thing." Face it man, it's bullocks. It's sub-par quality teaching at best. I'm so sorry I failed to learn from a teaching method and that I am a poor student. But somehow picked it all up from another teacher who gave me true value above and beyond what I expected, raised the bar and entertained and encouraged me that I could work with teams, and others, and even have an edge over people, who might have learned from other courses, or on their own. Just please, I appreciated it while it lasted. M.P. is better. period. I don't want to bad mouth you or any other teacher. But I will not stand down from my stance on M.P. being an amazing teacher, or having hands down, the best iOS courses available on the internet, that I have been exposed to at least. After such a tirade - I'm not willing to discuss it any further. Let me be. 
It's actually a lot quieter now because the current focus of the mailing list is "stage 1" of Swift 4, and that doesn't really include new proposals.
Cool, it's a pity there are no button-like nodes in SpriteKit, or scrolling nodes. Anyway, just looking at the code those anidated if without else should be replaced by a few guard to help following the code, i.e. instead of: if enabled { if whatever { ... } } Prefer: guard enabled else{ return } guard whatever else{ return } ... 
Good suggestions in here, but It's also worth looking at what the Apple engineers come up with, as you'll tend to find things that you didn't expect. For example, when I wanted three views spaced out equally, I didn't expect to have to put two empty UIViews between them to act as spacers. But that actually worked well for a long time until Stack Views were released.
Yeah, that's really the key insight. One last attempt to convince the skeptics. I've written the factorial example as a free function where the parameter is named "self". The implementations are **identical** except for the signature and the callsite: func factorial(self: Int) -&gt; Int { guard self &gt;= 0 else { fatalError("Factorial undefined for negative numbers") } if self == 0 { return 1 } return self * factorial(self - 1) }
Right, actually you can achieve the same, that is, a cleaner code not having so many ifs anidated (I counted about five I recall) with if !enabled { return } The guard else statement is the same, and the compiler will force that you return inside the else statement (less error-prone if you forget that return). EDIT: Well, in your example, the check for the touch location should be in a guard too, if it's not inside it shouldn't play the sound nor execute the action 
That _was_ the point of the prefix, but in Swift you can just specify the one you want with `ModuleName.ClassName`.
**Edit 2**: The article has been updated, so this comment is no longer relevant. :) --- What a terrible article, honestly. &gt;`URL(string: “heshams-code-hou.se”)` no longer returns `URL?` but instead returns `URL`. Source? That initialiser still returns `URL?` for me, and I'm on the latest snapshot. &gt;Foundation types no longer have the NS-prefix Many don't, but some still do: `NSOrderedSet`, `NSPredicate`, `NSExpression`, etc. &gt;UpperCamelCase has been replaced with lowerCamelCase. What? No. Type names should still be written in UpperCamelCase. It's just that certain properties that started with an acronym (`UIColor.CGColor`) will now be written in lowerCamelCase as well (`UIColor.cgColor`). Also, enum members should now be written in lowerCamelCase instead of upperCamelCase. &gt;`// After` &gt;`let red = UIColor.red().cgColor` Actually, `red()` will be a static property rather than a static method in Swift 3, so it will just be `UIColor.red.cgColor`. &gt;You can no longer use the `where` keyword in `guard`, `if`, and `while` statements. It has simply been replaced by a comma. The article treats it as a feature removal. &gt;The `where` keyword still applies to for loops in the form of `for-in-while`. `for-in-while` doesn't exist. **Edit**: &gt;Foundation types now conform to `let` and `var`. That's not what "conform" means, conformance is done with protocols. The actual change is that _some_ Foundation types are imported as value types rather than reference types, which means they get value type semantics (including immutability if it's declared with `let`) and copy-on-write. The relevant types conform to the [`ReferenceConvertible`](https://developer.apple.com/reference/foundation/referenceconvertible) protocol, which is adopted by `Data`, `Date`, `IndexPath` and `URL` (among others).
Sure, I'd be happy to! Could you let me know which changes you'd like more explanation on? Happy cake day, by the way! 
Seem like it was a typo, since the author corrected that to `for-in-where`...
So..... -________- Yea.. i will make it swift lint compatible Another dude mentioned the same thing to me
In the example for Optional Comparison Operators Removed // Before let a: Int = 4 let b: Int? = 5 if a &gt; b { ... } // After guard let b = b, a &gt; b else { ... } // or if let b = b { if a &gt; b { ... } } // or if let b = b where a &gt; b { ...} it used a where clause in an if statement as en example, but earlier it mentioned they were removing that. Special case or mistake? 
Old habits die hard. :) Thanks for pointing it out, I'll fix it right now.
"what a terrible article" Chris Lattner didn't think so Plus, it's good that someone wrote this up, it seems some people struggle understanding the enhancement proposals
Ray Wenderlich has a [pretty good write-up](https://www.raywenderlich.com/135655/whats-new-swift-3), for what it's worth.
Personally, I had a moment when [Chris Lattner retweeted my article](https://twitter.com/clattner_llvm/status/771096441326493696). 
Could you please fix the formatting so we can read it more easily? Thanks.
Hi Moseng16! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/50l616/hey_just_finished_my_first_swift_spritekit_game/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Also, blame my learning techniques? What is this 1864? 
If I understand your issue correctly, you can get all your buttons to perform the same function. You just need to hook up each button to the same @IBAction. Also, to find the location, you could do something like the following (Swift 3): @IBAction func button(_ sender: UIButton, event: UIEvent) { if let touch: UITouch = event.touches(for: sender)?.first { print(touch.location(in: sender)) } } Hope this helps.
Good summary now that most of the bugs have been worked out. But it's *case in point*, not *case and point*.
do you know wat it would look like in swift 2? 
Also, each button has a different function so I don't want to hook up to the same @IBAction but i dont want to repeatedly input the same code in all the @IBActions. is there a way for me to make a new @UIAction class inherit everything from the old one and insert the function in there? 
Swift 2 is something like... if let touch = event.touchesForView(sender)?.first { print(touch.locationInView(sender)) } If you want to call some code in numerous functions, you could just create a function with the code and call the function in all the @IBAction functions you need. If you need to use the same code in numerous View Controllers you could move it to a protocol. But that might be for another topic.
Thx for posting. I enjoyed the read. 
I'm trying to make an application that can determine how many solar panels, the type used at our school, will be needed to provide a specified peak of power on Mars. Fuck all, because I missed the last two classes and now I'm extremely confused as I was just handed the work and told "good luck". I've been googling everything. This teacher hasn't bothered to go over any of the material I've requested and email him about, and has refused to answer most of my questions. gg. On a lighter note, I finally learned the use of "let variable = number". It's cery useful. I guess we all start somewhere. 
No worries. You can add the event: UIEvent to the function that you have and it should work. Just make sure you reconnect your button/s or your app will prob crash upon pressing the button.
Because I'm using the assistant editor, so it looks like it's on another line, but the window is just too small. It's still technically on the same line. Edit: I also get the same error with UIImage.init
It went away when I built it, so now it just says "Expected ',' separator" Edit: It says 2 again, but it's the exact same error. http://prntscr.com/ccsdjv
Hmm... try deleting that line and the one above/below it. Also try initializing anything on that same line and see if it throws anything and last thing try again to put the same code without copy paste EDIT: try also , UIImage.init(name: "filename") 
Does it give you anything at all? Check spelling and caps as well. 
No, it just works like a normal button.
 let buttonImagePressed = UIImage(named: "buttonAppDown")
Maybe I am.
getting rid of where in if let and guard happens to be one of mine most favorite changes. In swift 2.x, the condition you want to check after where is not mentioned or unwrapped before where, which makes "where" feels wired.
The second one is invalid, a URL can't have multiple unescaped number signs (#). 
If you can afford it, try teamtreehouse. It's an online class that teaches with videos. It's $25 (£19) per month but it's damn well worth it. The forum isn't as hostile as StackOverflow which is nice. Also, I would like to advertise my referral link because I'm a cheapskate: [50% off your first month](http://referrals.trhou.se/whitmanhuntley)
What's the error? &gt;but I don't have a segue in the story board that connects the collection view cell to the view controller that has the map view. Then how can it segue? The segue has to have the same identifier name as the one you're using in code. If you make a segue between 2 story boards, select the segue and it should have a field for identifier name in the properties inspector.
Escape the pound signs. 
If you're starting from scratch, I would actually recommend starting with JavaScript instead of Swift. Creating a UI is easy with HTML, and you don't need any special software to compile and run your code – a web browser and a plain text editor is all you need. When you get the basic concepts down (functions, variables, arrays, objects, `if` statements, loops, etc) then you'll be able to translate those skills to another language, like Swift.
Trying to get as far as i can in Hacking with Swift. 
They're a bit pricey but I would recommend the Ray Wenderlich apprentice series.
I use a combination of [weheartswift](www.weheatswift.com) and Swift pocket reference. So far, so good.
like this?: po NSURL(string:"tel://+11111111,11111111#,*11111\\#,1") error: &lt;EXPR&gt;:2:52: error: invalid escape sequence in literal NSURL(string:"tel://+33170375518,1908352531#,*6481\\#,1") 
Are you trying to have iOS dial this number? From the [Apple URL Scheme Reference](https://developer.apple.com/library/ios/featuredarticles/iPhoneURLScheme_Reference/PhoneLinks/PhoneLinks.html): &gt; To prevent users from maliciously redirecting phone calls or changing the behavior of a phone or account, the Phone app supports most, but not all, of the special characters in the tel scheme. Specifically, if a URL contains the * or # characters, the Phone app does not attempt to dial the corresponding phone number. 
Part II: where we finally learn what "SIL" stands for!
In storyboard ctrl click from the collection view to the viewController that contains the map view. Give the segue the appropriate identifier by clicking on the segue arrow and then try.
Why not? A lot of developers dislike Jacascript because of its loose typing and scoping oddities, but these issues probably wouldn't faze a beginning programmer.
Take Mark Price's class and you'll figure it out. 
Hmm it won't allow me to do it form the collection view just the cell. [Take a look](https://gfycat.com/FrayedGlassAmericancicada)
Apple's free Swift documentation available online and iBooks app. I recommend Ray wenderlich website and books after being familiar with swift. 
I get what you're saying and you have a point, kinda. You don't need a solid grasp of Cocoa and UIKit. It really depends what OP wants to accomplish. UIKit I agree, but you don't need to learn 100% of UIKit to be able to make an app with it. I have a game in the App Store written in SpriteKit but even I only know probably 60% of the library. 
As have said, try not to use hard numbers. Explore size classes. You can set font scaling/size per size class. You can said certain attributes for certain size classes as well. There are real good WWDC 2016 videos on making your app adaptive.
Check out the [hacking with swift](https://www.hackingwithswift.com/) projects / tutorials
I'm just guessing because you haven't posted the code you actually use. But make sure that you use the exact same methods as the tutorial. There's a difference between these two: public func URLsForDirectory(directory: NSSearchPathDirectory, inDomains domainMask: NSSearchPathDomainMask) -&gt; [NSURL] public func URLForDirectory(directory: NSSearchPathDirectory, inDomain domain: NSSearchPathDomainMask, appropriateForURL url: NSURL?, create shouldCreate: Bool) throws -&gt; NSURL The latter can throw because it can fail when you use it to create a directory. The code from the tutorial works fine for me: static let DocumentsDirectory = NSFileManager().URLsForDirectory(.DocumentDirectory, inDomains: .UserDomainMask).first! static let ArchiveURL = DocumentsDirectory.URLByAppendingPathComponent("meals") But you can actually use methods that throw like this. This should work: static let url = try! NSFileManager.defaultManager().URLForDirectory(.DocumentDirectory, inDomain: .UserDomainMask, appropriateForURL: nil, create: true) Though the `try!` will make it crash if the method throws an error. ---- Btw: it's called Xcode
The problem with weak closure references is that you are unable to assign anonymous closures to them. For example, if I did this: myNumberHolder.delegate = { number in print(number) } the closure I assigned to the (weakly referenced) `delegate` property would be immediately deallocated and `delegate` would be set to `nil`, because there would be no strong references to the closure. This can lead to unexpected/unintended behavior. When I come across an occasion where I need to assign a method to a closure parameter, I usually wrap the method in an anonymous closure that weakly captures `self`. ex: class NumberHolder&lt;Number&gt; { var number: Number! var didPrint: (Number-&gt;())? func printNumber() { print("Number holder prints: ", number) didPrint?(number) } } class NumberUser { let holder: NumberHolder&lt;Int&gt; init(foo: Int) { holder = NumberHolder&lt;Int&gt;() holder.number = foo holder.didPrint = { [weak self] number in self?.holderDidPrint(number) } } private func holderDidPrint(number: Int) -&gt; () { // do stuff } } Alternatively, you could use a curried function: class NumberUser { let holder: NumberHolder&lt;Int&gt; init(int: Int) { holder = NumberHolder&lt;Int&gt;() holder.number = int holder.didPrint = holderDidPrint() } private func holderDidPrint() -&gt; Int -&gt; () { return { [weak self] number in // do stuff } } }
I don't see a NSURL method `appendingPathComponent()`, but there is one called `URLByAppendingPathComponent()`, and it's what the tutorial says to use. (I know Swift 3 renames a bunch of things, but you say you're still on Swift 2.2.) It's not marked as `throws`. Are you sure that's the line that it's flagging? Can you show your code?
You can't perform a segue action directly from a collection view. It needs to either be from the VC's view or the cell, since the cell's selection action will trigger the segue
It will work. You won't get new iOS10 features (like out-of-the-box cell prefetching in collectionviews) without recompiling the project with iOS 10 SDK (and porting your app to Swift 2.3 or 3.0) but apps created for iOS 9 in Swift 2 should work fine.
If your app is built in Xcode 7, the above does not apply. However, Apple will force developers to Xcode 8 in early 2017 if tradition holds true.
What you want to do is set your image for the .highlighted state. That is the touched state: http://stackoverflow.com/questions/11628563/what-is-the-difference-between-highlighted-and-selected-uibuttons-state
While in college we used mostly C++, and even that is rusty for me. Trying to do whatever it takes to learn Swift and Xcode development in general as quickly as I can pull it off. I am currently trying to go through the iTunes U Swift course from Stanford. I also am looking at the Mac Developer Library on Swift, tutorials on raywenderlich.com, and anything else I can find. I don't intend to sleep much over the next few days while I try to get a good base of knowledge and application. I am looking at stuff even from beginner programmer levels because as I said, I am rather rusty. Thanks for any input and advice you have.
Reading this article helped me get started: [https://medium.com/@samvlu/100-days-of-swift-736d45a19b63#.h2ucpba0r](https://medium.com/@samvlu/100-days-of-swift-736d45a19b63#.h2ucpba0r) The author lists some good resources to learn Swift, I’ll add a few resources I personally found helpful too: 1. [raywenderlich.com](https://www.raywenderlich.com) (Free) 2. [100 Days of Swift: The Tutorials](http://samvlu.com/tutorials.html) (Paid) 3. [Design + Code](https://designcode.io/) (Paid) 4. [Hacking with Swift](https://www.hackingwithswift.com) (Free) 5. [App Coda](http://www.appcoda.com) (Paid)
I'm building a web runtime from scratch using swift. And my own website is now running on top of it. 
Great resources! I'll add Mark Price's courses on Udemy. Mark does a great job breaking down concepts and has a great support community. https://www.udemy.com/devslopes-ios10/
Awesome! Thanks for the info. I look forward to trying to learn and wrap my head around it all. Every resource helps.
Thanks for the input. I love how many solid sources everyone is providing. Swift is so new and still changing that it is nice finding out what people with experience think.
Check out the FAQ
Has anyone got any good OS X/Cocoa tutorials? This is the one I'm going through right now (https://www.raywenderlich.com/110170/mac-os-x-development-tutorial-for-beginners-part-1-intro-to-xcode) I don't have an iOS device.. 
I actually found Apple's "Start Developing iOS Apps (Swift)" document helpful: https://developer.apple.com/library/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html 
the treehouse Swift track was very helpful for me, it would cost you about 25$ to go through it I bet (25/month), but theres tons of extra workshops if you want to continue. If you are an experienced programmer, it might not be the best choice, but if you are new, I highly recommend. 
[Here](http://llvm.org/devmtg/2015-10/slides/GroffLattner-SILHighLevelIR.pdf) [YT](https://www.youtube.com/watch?v=Ntj8ab-5cvE) is presentation of SIL by Chris Lattner &amp; Joe Groff 
Just been doing more Swift courses on Udemy and Treehouse while working on personal projects. Getting to grips with Firebase over the weekend.
It really depends on your learning style and past experience in terms of what resources are best for you. I have put together a guide on my site http://manitoba.ninja/introduction-and-picking-your-resources/ that covers how to go about self learning and goes through some of the best resources out there (just click on the "Resource Guide" menu item to pull down the full list. There resources that thePunisher72 listed are good, especially Hacking With Swift. But to really understand the core principles of Swift and iOS development I would look at Big Nerd Ranch's Swift book, Apple's own Swift book, and the Stanford CS193P course on iTunesU (which I don't recommend doing until you feel comfortable with the basics because it will be challenging, but ultimately worth it).
If you're new to programming or want to get back into the swing of things, I would have to recommend [teamtreehouse](https://teamtreehouse.com), it's $25/month but it goes in depth into everything and the forums aren't as hostile as most programming forums. I hate do be "*that guy*" but if you're interested, use my [referral link](http://referrals.trhou.se/whitmanhuntley) and get 50% off your first month
I am trying to create an app that maps a specific data set but the data I need is not in a formal API. So I am trying to sort out of I can build a parser that scrapes the data directly from a websites HTML source code. I've got a good handle on the structure of the source code so now I need to see if I can find some good examples out there of how others have done to see what the best method for doing this will be.
I'm the author of Hacking with Swift, and come by here regularly – let me know if you have any questions!
I just made a small app, for a large company with design guidelines and rules. The app is for making wallpapers for iPads used at conferences. So to easy the process of updating conference name, I wrote an app (instad of Photoshop, change name, export, import on ipad set wall paper) where it can all be done on the ipad by the attendee. Took me 5 hours, storyboards, Swift 2.3 and a bunch of corporate pictures.
If you like it now, wait until you see the Swift 3 update ;)
Well the Swift book written by Apple. It's free, professional and pretty exhaustive. Not the easiest way but reading it will force you to understand what you are doing.
The sololearn app is decent
`Array&lt;T&gt;` is a promise that all values in the array are of type T, and a guarantee that a subscript call will either return a value of that type or trigger a runtime error. Take the case of `Array&lt;T&gt;` where `T` is an optional type: how could you tell whether the `nil` you get back is a valid position in the array or not, if arrays returned `nil` for invalid indices?
I wondered about that, but Dictionary returns an optional value even if the value in the definition isn't optional. Is there some reason for the difference there?
Behind the scenes, your dictionary key maps to a number when looking up a value for key. In a way, the key exists before you ever use it. Look up hash table implementations to understand how this works.
That's the one every wannabe swift developers should look into ! Very detailed and helpful on (almost) every step needed to create a basic app. Only downside is that some developing experience is needed (like do the Swift tutorial stuff)
I think IBM has the highest concentration of swift developers in the world, if my memory from WWDC serves me correctly. 
I'd be interested to learn about server side swift, though it's been a few months since I've done some swift so I'm probably not that useful. 
I'm surprised nobody mentioned it yet. The biggest reason for this is **performance**! Checking the bounds of an array *every time* you do something with it would slow down the language a lot. Here is [a reference](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/002446.html), it's from a swift-evolution discussion about exactly this: &gt;The one thing missing is the performance piece: allowing arrays to do anything other than abort on out-of-range accesses would make them non-competitive with C arrays. \- [Dave Abrahams](https://en.wikipedia.org/wiki/David_Abrahams_\(computer_programmer\)), Swift compiler dev Also see [here](https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md#strings-characters-and-collection-types)
I know how hash tables work, but that doesn't explain why the Array interface is the way it is. There are other languages which have hash tables, but where indexing an array with an invalid index returns (their version of) nil.
The first one isn't a reason. Array *could* have used an optional subscript type, too, to model the fact that not every index will be present in the collection. The second one might be a reason, but it seems pretty weak to me. `removeValueForKey` is pretty verbose, but in other cases Swift solves that by just shortening the name, not inventing new semantics.
Active Record?
count me in!
It's not about knowing swift server side already. We are trying to get to know the community so we can best serve the community through our offerings and our relationship with Apple. We want to make the best tools to get you doing server side swift and spreading the word of the language and all we are doing behind it!
Awesome!
We would love to have you utilize Bluemix and Kitura and hear your feedback about the experience so we can make the offering even better. Please send an email to me and I will try to get back ASAP. 
100%
This is a bad answer. Dictionaries and arrays are no different in this regard.
For some reason radial menus don't really tend to take well on mobile (in my opinion). Not sir why, people tend to find them unfamiliar. Confusing is the wrong word, it's almost like it requires more attention to navigate. Less easy to skim over.
&gt; how could you tell whether the nil you get back is a valid position in the array or not, if arrays returned nil for invalid indices? In the same way that in a `Dictionary&lt;K, V&gt;`, where `V` is an optional type, you tell the difference between a non-existent key versus an existent, but `nil` key? let dict: [String: String?] = ["key1": "value1", "key2": nil] let value1 = dict["key1"] // .Some("value1") let value2 = dict["key2"] // .Some(.None) let value3 = dict["key3"] // .None A dictionary of type `&lt;K, V&gt;` returns `V?` from accessing the subscript. So when accessing the values of a dictionary with type `[String: String?]`, I am returned a `String??`. This also means that when inserting a value into a dictionary of type `&lt;K, V&gt;`, I can insert `V?`. This is how I delete items out of my dictionary, by setting that key to `nil`. And this absolutely does not make sense for arrays. What does it mean to delete the 3rd index in an array of size 10? What would it mean to set that index to `nil`? And why am I asking that? Because of the way we have to define the `subscript` function. It's basically a computed property with a `get` and `set`. We cannot return a value with a different type from what we accept. subscript(index: Int) -&gt; E { get { // return the value at index } set { // set the value at index } } We can't return `E?` but only allow `E` in the setter.
Sounds like you may have all you need already. If not, I'd be happy to help. I've released two apps with swift. Started with 1.0 and walked all the way up with each version. Still working in it daily for app maintenance. I checked out the server side stuff awhile back and it seemed a little premature. But I'd be happy to check it out again. Best of luck. 
I'm an iOS dev working with Swift and I'd love to see how its used server-side! Sign me up!
No they're not, it's the memory mapper or whatever that's complaining you're reading memory that doesn't exist, which is way faster than checking the bounds, but not handleable at runtime. How else do you think Swift can reach C-like performance? I got [a reference](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/002446.html) for you, it's from a swift-evolution discussion about exactly this: &gt;The one thing missing is the performance piece: allowing arrays to do anything other than abort on out-of-range accesses would make them non-competitive with C arrays. \- [Dave Abrahams](https://en.wikipedia.org/wiki/David_Abrahams_\(computer_programmer\)), Swift compiler dev Also see [here](https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md#strings-characters-and-collection-types)
&gt; The first one isn't a reason. Array could have used an optional subscript type, too, to model the fact that not every index will be present in the collection. I don't this is as simple as you suggest. Doing this would necessitate that we can also *set* any index to `nil` because of the way the subscript operator works. What would it mean to set a particular index to `nil`? We're deleting that index, and shifting everything after it up a position?
Count me in :)
I am an iOS developer and I would love to participate in your survey! Please count me in!
I sent an email, I'd definitely love to learn server side swift. Is it open to Canadians?
`++` is the *least* of your problems, trust me :D
Server side Swift? Count me in. 
Augmented reality
Dictionary is sparse and Array is not. A non-sparse Dictionary (say, one that uses a perfect hash) would probably abort on keys outside its range (ie not in the set of keys the perfect hash was built for).
Oh I know that'd inevitably work better but I always prefer native solutions. 
Yes. How do I turn an iPhone into an AR 15?
Wow, thats really awesome. 
That quote of yours doesn't mean that swift doesn't do bounds checks, it does (even though there was an optimisation setting that disabled the bounds check. Not sure if it exists any more. It wasn't the default and discouraged, being "unsafe" and all). I don't know for sure which performance issues your Swift Dev talks about, but simply having `Optional&lt;T&gt;` instead of just `T` as the return type of the subscript getter would add overhead, and the whole unwrapping code to use an element of an array would add even more overhead. I bet that's where the performance problems come from, not from the bounds check directly.
Just to add to this discussion, each collection has indices that are assumed to be valid (e.g. `DictionaryIndex` in the case of `Dictionary`). `Dictionary` is just also subscriptable with `String`.
What sort of AR functionality are you looking to create? I am guessing it is going to to be a live camera view that displays a POI on screen when it is in view? You can go about that a number of ways but the general steps you will need to take are as follows. -Set up a camera view. There are lots of tutorials out there explaining how to do it so this shouldn't be too hard to sort out. -You will then need to set up your core-location functionality. You will need to know your current location, your devices magnetic heading, and be able to have a dynamic or static POI (so that you have something to target). -You need to understand how to calculate bearing and work with locations in a geo-space at this point. Using the devices current heading and the relative location of your POI you can find the bearing and that will let you know how many degrees to the left or right the POI is from the center of your view. -You will then need to activate core motion functionality so that you can get the pitch, yaw, and roll of the device (this will determine exactly where the device is pointed). -Field of vision of the devices camera is an important concept to understand at this point. Do some reading on that because that will ultimately determine if you are accurately representing whether a POI is in view or not. -So using the bearing to the POI, the position of the device using the gyroscope, and the device cameras field of vision you can then show a POI on screen if the device is in fact pointed at it. That is obviously a very general overview but hopefully that gets you started. The toughest thing about AR isn't necessarily the programming, but really understanding the fundamentals behind it. If you don't completely understand bearing and working in geo-spaces and field of vision then your probably going to struggle a lot. 
I am interested
I think it depends on how deep you want to get into UI design. If you need something because you just want to know the basics and not much more, then you might be able to find other resources out there. But if you really want to understand UI design in detail then I would say go for it.
I would definitely be interested! Swift might be such a cool language for backends.
My original plan for the app was something like paintball, where different users would be playing and targeting each other because their phone's location would show on the screen. I set up the camera view last night, and you're right. Lots of tutorials show it and it wasn't that hard. I tried setting up the accelerometer along with SceneKit so I could fire spheres from the screen and then by turning the phone rotate the scene's camera, but I seem to be having issues with this. Thank you so much for all the advice 
I did it Undergrad in graphic. Went back to school for a programming certificate. Then a master's, then a PhD. Now I tech mobile dev at a code school. That means my answer is biased :-)
My eyes!!!
So is this any different than functions in JavaScript?
How is working with SwiftyFORM? I had been using Eureka which was pretty good.
L
That's a really good reminder, thank you. I think it's a bit different too because with design I can immediately see results, whereas with programming it's more of a long-game. 
The one called The Swift Programming Language (white cover and red bird)
Early on, I was programming Flash, so it was still relevant to my previous stuff, just doing things in code seemed easier for some reason. As I moved to compiled languages, I just spent less and less time caring about ui, especially if I was implementing someone else's designs for uis. Working in teams helps, but practice just helps more. Keep doing it and you'll find it easier and easier. 
[removed]
I've been using SQLite.swift, didn't have too much trouble integrating it.
B comes after A in the alphabet, that's what it's sorting by.
It's a lexicographical comparison. If you just compare "`apple"` with `"bird"`, you'd get the same result. Strings are compared character by character i believe, in lexicographical order, ie. `a &lt; b &lt; c &lt; ... &lt; x &lt; y &lt; z`. I can't remember right now the rules for capital letters or unicode, but for the latin alphabet that should be correct. The compassion proceeds until one letter differs, so if you were comparing `"aaaa"` with `"aaab"`, it would compare the 3 As until it got to the last letter to attempt to find the order. If the first letter differs, as is the case with `apple` and `bird` (`a &lt; b`), then it will just stop there, and return the appropriate result without looking at the rest of the string.
Just create a bridging header that includes the sqlite import. Don't think it changed much from 2.x. In your class, add the import: import Foundation What specifically are you trying to do? I can add an example to my repo of Swift 3 examples: https://github.com/melling/ios_topics 
No different. Javscript has always had first class functions — as has perl, php, and (obviously?) all the functional languages like haskel, F# and the lisps. It's only news to those of us coming from the ALGOL-derived languages like Java and (Objective-)C.
Objective-C has first class functions. The syntax is pretty messy and you don't get the trailing closure sugar but blocks can be saved into a variable, passed into other methods etc
Try my free online book: [Hacking with Swift](https://www.hackingwithswift.com). The online version is for iOS 9 and Swift 2.2 right now, but I just released the iOS 10 / 3.0 update for people who [bought the e-book](https://gum.co/hws-book-pack). I'll be updating the site for Swift 3 at some point in a week or two. (Note: if you sign up to my [low-volume Swift newsletter](https://gumroad.com/twostraws/) you get a $5 discount on the book.)
ObjC2 lets you pass blocks as arguments to functions, return blocks from functions, and assign blocks to variables, which means it treats *blocks* as first-class citizens. But ObjC doesn't treat functions as first class. And blocks are not functions. Blocks can wrap functions. And blocks can be used instead of functions in some instances. But we cannot, so far as I know, substitute a function for a parameter that's expecting a block in ObjC. Or assign a function to a variable with a block type. I know it seems like a subtle distinction. But because the article is all about the clarity that can be gained by using functions instead of closures in Swift, and because this is impossible in languages that don't have first-class functions (like ObjC), the distinction is an important one.
Should be able to glean the answer from the link you posted..
 let cell = UITableViewCell() cell.backgroundColor = .blueColor() Are you doing a custom cell or just a simple table view? If a simple tableview, just put it where you init the cell (usually tableView: willDisplayCell: forRowAtIndexPath: )
Blocks can accomplish a similar function, but that doesn't mean that the language supports first-class functions. First-class functions mean that functions can be treated like any other value (passed to other functions or returned from functions). For example, in Python, you can do this: def only_uppercase_strings(s): return s.upper() == s fn = only_uppercase_strings uppercase = filter(fn, ["word", "WORD", "Word"]) You can't do that in Objective-C; you'd have to use a closure. You can get kind of close with C function pointers, but that's not really the same thing, either, and it doesn't work with Objective-C methods at all.
Can you please just explain? I don't have the book. I've also looked through two books on swift and they don't really explain this issue properly
You configure the cell as you're creating it, in your UITableViewController subclass's the tableView: cellForIndexPath: method. 
Yea, I've figured out where the code should be (probably) in this one: "override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {" But I don't know what the code should be to make every other row one color, and the rest another color
Just simply add if indexpath.row == 0 { // cell 1 cell.backgroundColor = whiteColor() else if indexpath.row == 1 { // cell 2 cell.backgroundColor = lightGreyColor() else { // ... }
do you need any help with it
You want to consider the 'row' property of the NSIndexPath object you get passed. It'll count the rows of the table, up from zero. Go google the modulo operator to see how to toggle based on the even-or-odd value of that number.
Watched? Did you post comment or anything? What you're commenting on is the Objective-C difference with "-(void)" return statement. Anyways, override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { // Table view cells are reused and should be dequeued using a cell identifier. let cellIdentifier = "HojTableViewCell" let cell = tableView.dequeueReusableCellWithIdentifier(cellIdentifier, forIndexPath: indexPath) as! HojTableViewCell // Fetches the appropriate meal for the data source layout. let hoj = hojar[indexPath.row] // Every even number cell is white if indexPath.row % 2 == 0 { cell.backgroundColor = UIColor.white() } else { cell.backroundColor = UIColor.gray() } cell.nameLabel.text = hoj.name cell.photoImageView.image = hoj.photo cell.ratingControl.rating = hoj.rating cell.photoImageView.layer.cornerRadius = cell.photoImageView.frame.size.width / 2; cell.photoImageView.clipsToBounds = true; return cell }
the code like "(void)tableView" is ObjectiveC if I'm not mistaken. You should probably familiarize yourself with it a little bit (at least the syntax), as not everything has been re-answered in Swift yet.
and if you don't fully understand what '%' does.. its called a modulo operator which divides and returns the remainder between two numbers. So if indexPath.row == 2, then indexPath.row % 2 == 0. Since 2 divided by 2 has no remainder. 
Okay I'll try to explain but I may be of little help. I hardly do any subclassing and I don't think you should either but fuck it here we go: [Here's a **tl;dr** of what I'm going to say below. Look at this first then read the rest if you want the meat.](http://i.imgur.com/PgHoicl.png) Let's say you have a class **Pokemon** and **Pikachu** is a class that inherits from Pokemon. Inside the Pokemon class you have a **property** called name and an initializer that initializes that variable Whenever you create a Pikachu object you also have to create a Pokemon object. Why is that? Because Pikachu **is a** Pokemon. Something that makes subclassing and inheritance great is that you can then create a function that asks for a Pokemon and you can then insert **anything that inherits Pokemon (is a subclass of Pokemon)** and it'll work. Now, knowing that you essentially create a Pokemon object when creating a Pikachu object **because Pikachu inherits from Pokemon** then you gotta ask yourself. Wtf does that shit even mean? What does it mean to inherit from Pokemon? Of course you know this when you read it. It means Pikachu has whatever Pokemon has. No stress; no mess So if Pokemon has a property **name:String** and an init **init(name:String)** then that means Pikachu has the same exact thing. Now let's say you're just going through the motions and create the Pikachu class that inherits from Pokemon and you **init(name:String** in the Pikachu class. You're going to get a suggestion that tells you to add "override" in front of your init. Why is that? Because if you have that same init in both classes then it's like having the same function in a single class. It's just not going to work because you won't really know which init you should call Think of it like mathematical functions. What makes something not a function? It's when a single input gives 2 different outputs. This is like the same thing. If you were to call init then which init should you call? The way around this is using **override**. You add **override** to the Pikachu subclass and it means "whenever I'm using this init I'll **always** use the Pikachu's init over the Pokemon's init" Now, the reason you have to call super.init is because Pikachu **is** a Pokemon and like I said earlier, when you create a PIkachu you essentially create a specific type of Pokemon so you need to create that Pokemon object as well. So you have to call the super.init inside your override init Now, when to use override init? You use override init when you have other things that need to be initialized in your subclass the moment you use the superclass init. Basically... Let's say the Pokemon class has a property name:String and init(name:String). Now let's say Pikachu inherits from Pokemon and Pikachu also has a property **type:String**. You override the Pokemon init so Pikachu now has **override init(name:String)**. When you initialize Pikachu you also want to initialize the type, right? Well, that's what the override init is for. Just think of override init as a combo initializer. You basically use it to continue initialization in your subclass. You could just as easily create a new init called init(type:String) but then the name wouldn't be able to be initialized unless you fed it a default value or a value some other way. So to make it easier, you just throw that in your override init and call it a day
Try this tutorial: http://www.theappguruz.com/blog/xml-parsing-using-nsxmlparse-swift
`override init` is a *declaration*. `super.init` is a *call*.
Not in swift. An Array in swift is like a Vector in C++ or an ArrayList in Java.
I'm not sure what you mean. Swift arrays are immutable and any operation that appears to alter an array is actually creating a new instance.
try `readLine` function
Yeah, but an "Array" in C++ and Java, I think, has a set size. In C++ it'd be int foo [5] = {1, 2, 3, 4, 5}. It has a set size and can't be resized. A Vector on the other hand is Vector&lt;int&gt; bar ={1,2,3} but then you can do bar.push_back(4), and bar.push_back(5) and then the vector would be contain the values of 1,2,3,4,5 and can grow as long as you need it to. That's how Arrays in Swift work. They're called arrays but their more like a vector.
Wow this is great! I was just getting started with React Native this weekend just to try it out, and I really like the principles. It's great to see people implementing these in Swift! I'll take a look :)
More like, the Unicode codepoint of "b" is greater than the Unicode codepoint of "a". There are lots alphabets in the world, and many that use the same set of symbols (codepoints) don't put them in the same order.
A collection view might be the way to go depending on what you are doing. Not sure but if you are using views you could look at stack views. 
The API is similar because both are based no Redux. I used ReSwift for a couple of toy projects and loved it. In my humble opinion the Redux mindset fits Swift perfectly. We can have type names instead of strings for actions, and construtors instead of action creators. It's awesome! But, of course just redux isn't enough for any project. The sife-effect part is really really important, and the redux community knows it. (redux-thunk, redux-loop, redux-saga,...). Since ReSwift barely implement something like it, I was off to try and port saga or loop for it. But then, upon reading the code, I found ReSwifts implementation to be lacking. There are overcomplicated bits where the implementation should be minimal. The type system is circunvented most of the time (Any with downcasting) and I found it pretty hard to think about extending. My own implementation feels more Swift-y for me, although that's arguable of course. I try to levarage the type system withouth getting in the way (for example, I don't require your state type to be anything, it could be Int for all ReduxSwift cares). Anyway, I encorage you to check out both source codes. Mine is really (really) minimal. and it comes with a bare bones redux-thunk and redux-logger implementation (: Let me know what you think! PS: I have a prototype of the redux-saga implementation at the ReduxSwiftSaga repo.
Also dog &lt; lion.
I believe swift 3.0 is the last version which will be a breaking release. On my mobile so haven't got a link, give me a moment shall see if I can find one. Edit: "The best news of all is that Swift 3 aims to be the last release with breaking source changes" (https://www.raywenderlich.com/135655/whats-new-swift-3) So what you learn now won't necessarily be outdated, however it could become deprecated although that's not unusual 
As well as lion &lt; platypus
Yes start learning now. Any further changes should be minor. 
Just start learning it now. If you want to be a iOS dev, minor swift syntax changes are going to be the least of your problems. Also you can google for differences if you have trouble converting syntax changes
[It is very unlikely that future Swift versions won't be source breaking even though its' the goal](https://lists.swift.org/pipermail/swift-evolution-announce/2016-July/000264.html). 
It's a great time to start learning Swift. There's so many good resources out that you can find simply by googling. I've been testing Xcode 8 beta and Swift 3 and the "old outdated tutorials" are still relevant. So far Xcode 8 has done an amazing job at giving warning messages that update Swift code before Swift 3.0.
It's the perfect time to learn Swift – all the major updates in Swift 3 have been implemented now, so what you learn will last you a good long time. I just released the Swift 3.0 update for Hacking with Swift, which teaches you Swift from scratch using 39 real-world projects. The [Swift 3 / iOS 10 update is available to buy right now](https://gum.co/hws-book-pack), and includes over 1300 pages of tutorials and example code, plus exclusive content you don't get on the website – I'm fairly certain it's the most comprehensive Swift 3 tutorial series in the world :) The [Hacking with Swift website contains the existing Swift 2.2 / iOS 9 book](https://www.hackingwithswift.com) completely free, but I'll be updating it for Swift 3 / iOS 10 in a week or two. You can buy the e-book now if you want, or if you don't mind waiting it will be on the website at some point. Right now I'm also updating my [Pro Swift video and book course](https://gum.co/proswift) for Swift 3.0, and hope to have it finished in the next few days. Note: if you intend to buy any of my books, you should subscribe to [my low-volume Swift newsletter](https://gumroad.com/twostraws/) to get discount codes. Swift 4 will almost certainly introduce a small number of breaking changes, but I also personally expect to see an interim release to fix many of the weird inconsistencies left behind as part of the Cocoa renaming that took place in Swift 3. Whether it's 3.1 or 3.2, I think it's inevitable – unless Apple pulls a rabbit out of a hat with Swift 3.0 GM next week, that is! One tip: don't be afraid to ask questions, either here on Stack Overflow. There are lots of people who are happy to help, so don't sit and stew when you hit problems. Good luck!
I'll give it a go with the caveat that I'm not a CS major and only amateur coder. Swift is an example of an object oriented programming language (they'll say protocol oriented but tackle that when you get there). This means that everything you do in it is one 'object' interacting with another object, just like in life. An object can be a class, but when start talking about specific instances of object we need what's called an initializer. An initializer creates an instance. So my 2005 nissan is an instance of 'car'. Someone called it's initalizer in 2005 and it has been in existence since then. Except nissan called their version of the initializer. They didn't just say 'make car' they said 'make nissan'. Nissan is a subclass of car. my 2005 nissan is an instance of nissan, which is a class, but it is a subclass of car. When nissan was done putting all the Nissan bells and whistles on, they finally just put the whole car together. They called the super class initializer. In swift code it might look like this: class Nissan: Car { let frontSymbol: FrontSymbol let engine: NissanEngine override init(stuff that I need to make this a nissan AND make this a car) { // AKA make an instance of nissan self.frontSymbol = nissanSymbol // another object that has already been initialized - an instance of FrontSymbol self.engine = NissanEngine(numberOfCylinders: 4) // a brand new object, instance of NissanEngine, a subclass of engine, constructed specifically for this car with four cylinders, so right here I am called in init for NissanEngine in the init for Nissan. super.init(chassis: chassis, wheels: [wheel, wheel, wheel, wheel], otherCarStuff: stuff) } } That very last line there - super.init. It means I am calling the super class' initializer. I am done everything that is required to make this car a nissan, now we just have to put on the wheels and crap. Except every car needs to put on the wheels, not just nissan, so attaching the wheels is in the super initializer, not the subclass initializer. When I override init in my Nissan subclass of car, what I am saying is that "There is a bunch of shit I need to do to make this subclass different from car and I need to do it RIGHT away". Maybe there are some variables you need to assign or whatever. If you don't need to do it right away, then you don't need to override init. override means " call this method(aka class function) before you look for the method in the superclass, because I promise I am going to call the superclass method somewhere in here(or I won't need to)" super.init means "hey compiler, now is when I want you to look in my superclass init method for the rest of the code that I need to initialize (aka instantiate) this object" 
Not that I know of, I'm afraid – any subsequent calls to `readLine()` should return nil, because the "file" has finished.
Perhaps a callback? I'm not familiar with AVPlayer objects, but you could also potentially detect the end of the track and see what value you get and compare that with what you perceive to be the end of the track and attempt to edit the value from there
Still improving and maintaining Artifice, my app for making custom Magic: The Gathering cards.
Bluetooth beacons *might* get you down to a few feet but that would require every one of your users to have one installed and configured everywhere they use the app, which I would assume is untenable. I can't think of anything else, but I really don't know too much, so maybe others have some better suggestions. 
Writing a Swift Mustache compiler! I know there's already an implementation out there but it's a good learning exercise anyway. 
There's a big gap between "most changes will be strictly additive" and "never changed or removed" features. I'm not saying, and would not say, that Swift should never change or remove things in the future, because that's how you become the next C++. What I said is that most changes – i.e., some number above 50% – would be additive. As for "whose hope?", keep in mind this is what Lattner said just over a month ago: "For Swift 4, the primary goals are to deliver on the promise of source stability from 3.0 on, and to provide ABI stability for the standard library." Now, source stability doesn't mean "no breaking changes ever," but it definitely *does* mean that the hope is to keep them to a much more sensible level following Swift 3.
What exactly are you expecting to get out? That feed is putting (escaped) strings like '/a' and '&lt;' and '&gt;' in their `&lt;description&gt;` elements. NSXMLParser isn't going to double-parse your input text. If you want that, you'll have to do it yourself. Or you could go yell at Reuters.com for putting markup in their RSS `&lt;description&gt;` elements, because [you're not supposed to do that](https://developer.mozilla.org/en-US/docs/Web/RSS/Article/Why_RSS_Content_Module_is_Popular_-_Including_HTML_Contents).
&gt; "For Swift 4, the primary goals are to deliver on the promise of source stability from 3.0 on, and to provide ABI stability for the standard library." I've heard this soundbite before, and I'm not reading anything into this that you seem to be. I see nothing here about a goal percentage for additive-versus-other changes. I'm also not sure who conceived the canard that additive changes are non-breaking. A new keyword breaks all source code that used that as an identifier.
Your mistake is you are using a wrong URL. If you want to parse XML correct URL should be ```http://feeds.reuters.com/reuters/MostRead?format=xml``` You are basically trying to parse HTML with NSXMLParser, which is not going to work very well. I also suggest you to use some kind of library that deals with XML better. Instead of delegates, you can enumarate elements just by using a XPath functions. You can try [Fuzi](https://github.com/cezheng/Fuzi) 
Learning Swift using BNR, really enjoying it so far!
No wonder! You've got 8 `.`s and 2 `!`s on that one poor line.
Is it not supposed to?
If you type in the old syntax it lets you change it to the current syntax.
Maybe you should consider initialize and present a view controller from your storyboard programmatically when needed.
Can you explain in more detail please?
 I'm still having problems unfortunately. I've done this: Editor &gt; refactor to storyboard. Removed the segue it creates. Then I added the following code in the view controller I want the login to appear on: let loginStoryboard = UIStoryboard(name: "Login", bundle: nil) let loginController = loginStoryboard.instantiateViewControllerWithIdentifier("LoginViewController") as UIViewController presentViewController(loginController, animated: true, completion: nil) However, I get this error: Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: 'Storyboard (&lt;UIStoryboard: 0x7ff8b0c0d3c0&gt;) doesn't contain a view controller with identifier 'LoginViewController'' On "Login" storyboard I have set the Storyboard ID to "Login". I have also set the LoginViewController class to "LoginViewController". Any ideas? EDIT: Its like the storyboard ID is not being set on the LoginViewController.
SOLVED: I didn't release the StoryboardID was different to the name of the storyboard: let loginStoryboard = UIStoryboard(name: "Login", bundle: nil) let loginController = loginStoryboard.instantiateViewControllerWithIdentifier("LoginController") as UIViewController presentViewController(loginController, animated: true, completion: nil) When I set the storyboard ID of my destination view controller, in the other storyboard to "LoginController", then called it with the above code it worked.
It mostly comes down to personal preference. Instead of class MyClass: ProtocolA, ProtocolB, ProtocolC { /* ... */ } I think it's cleaner to do class MyClass { /* ... */ } extension MyClass: ProtocolA { /* ... */ } extension MyClass: ProtocolB { /* ... */ } extension MyClass: ProtocolC { /* ... */ }
It's done this way to prevent having all the protocol specific code in one huge file mixed up with class-specific code. For example class D : A, B, C { func a() -&gt; () {} func b() -&gt; () {} func c() -&gt; () {} func d() -&gt; () {} func e() -&gt; () {} } how do you know which one is the function that implements protocol A? what if protocol A is protocol A { func a() -&gt; () func b() -&gt; () } how would you have guessed that a and b where conforming to protocol A in class D?? by contrast class D { func d() -&gt; () {} } extension D : A { func a() -&gt; () {} func b() -&gt; () {} } extension D : B { func c() -&gt; () {} } extension D : C { func e() -&gt; () {} } you know exactly which function is part of which protocol and which function are class-specific
Yes. Forgot about that one.
BNR? 
Plugging away at the parser for a future programming language that implements an Observational Type Theory. Admittedly, as sexy as that sounds, there's really not much implemented yet...
Fine. Thanks for your response.
Here's a [post](https://www.reddit.com/r/spritekit/comments/4yw76i/applying_the_mvc_approach_to_a_spritekit_game_for/?st=ISRJH4S7&amp;sh=337686d5) I wrote on how to split up a game in SpriteKit to be organized somewhat with the MVC pattern. Also make sure that if a particular thing is used repeatedly, try creating a class out of it. When I first started SpriteKit, my GameScene had almost 2200 lines of code!! But I made my fish enemies into classes, split up the main menu into it own scene, created a model class to handle algorithms/functions of the GameScene, and ended up trimming it down from 2200 to 1300 lines. [Here's](https://github.com/jozemite/QuizMVCRelationship) another example of splitting up a scene. It's a quiz game mode I added in my Chomp'd game. Code that doesn't relate to the view is separated into a model class. Also look into refactoring/improving your code. I used to have about 20 lines of code dedicated into switching certain outfits with a button. I fixed all of that with 3 lines by simply using a dictionary and an integer that holds the position of the outfit. [Here's](https://www.reddit.com/r/computerscience/comments/4xwtmi/how_is_programming_similar_to_writing_skills/d6j860z) a comment of what I'm referring to.
The downside, of course, is when you are trying to quickly read what protocols your class implements. Everything's a trade-off, as usual. 
Working on spotie.me, an app to find a team for your startup 🙂
Post some of your code? The line provided from Stack overflow is correct so you must have something else wrong to get an expected declaration error
Have you tried http://github.com/groue/GRDB.swift ? There are a couple articles about GRDB as well: https://medium.com/@gwendal.roue
Just an FYI XCode has trouble parsing Swift Enums. Its going to be hit or miss with the auto complete with them. Heres how you do what you want. enum Type: String { case Normal = "Normal", Fire = "Fire" } let fireEnumFromString = Type(rawValue: "Fire") 
You don't need to repeat the member names if you don't want to change them: enum Type: String { case Normal case Fire } let fireEnumFromString = Type(rawValue: "Fire")
Thank you very much
AH! Thank you! I thought I didn’t have to do that, as it was already able to use each case as a String. Thank you, again!
What if x is 4?
The official title of the book is Swift Programming The Big Nerd Ranch Guide! It's great if you have prior programming experience as it doesn't dwell on some basic things. I'm about halfway through. You build a min 'project' for each topic as you go along which is very useful. I think towards the end you get into a bit of app making.
Thanks, this solved it for me! :)
Great answer. Not that it really matters, but I think I prefer this: let result = (x - 1) / n + 1
And what if x is 8?
Files could also work
To add to this. Swift 3 added `round` and `rounded`, e.g.: Int((Double(x) / 4).rounded(.up)) Not much better, just fyi.
Interesting read. Lots of layers to wrap a "small" problem into a usable API but interesting! 
This fails if x-1+n is negative. Integer division rounds toward zero, so negative quotients are rounded to greater values instead of lesser.
It should be noted that converting to Double will not work if a value exceeds the magnitude of integers that are exactly representable in Double. The conversion will round before the division occurs.
Waiting for my app to get approved for initial release. It overlays a representation of the angle of view of various formats and focal lengths on a MapView so you can plan what gear you may need or what vantage points may allow you to get a picture you are planning. Now on to the app that I actually started out to design, that has calculators for a variety of photography calculations (Time lapse planning, filter factors, etc.)
what's a Swift Mustache compiler? Sorry I'm a swift newb
You are performing integer division, not floating point division: 5 / 4 = 1 // not 1.25 Try using floating point division Int(ceil(Double(x) / 4.0 )) or Int(ceil(Double(x) / Double(4) )) Should yeild the answer you are looking for 
I've been programming for a long, long time, but I didn't really start thinking of myself as a *developer* until I shipped an actual app that actual people actually used.
What were you doing before you shipped the app?
Mostly writing my own little toy or single-purpose apps that I never shipped, or contributing bits of code here and there to others. Artifice (/r/ArtificeMTG) is the first app I've written that other people actually use.
[Mustache](http://mustache.github.io) is a templating language, usually used to generate HTML. What I'm working on is simply an implementation of the language in Swift. There's already a [good one](https://github.com/groue/GRMustache.swift) with a great readme if you're curious.
I need to test the upcoming 4.1 release of [Wokabulary](https://itunes.apple.com/de/app/wokabulary-learn-manage-your/id599273012) and fixing all the bugs on the way. Then if there's time left I'll clean up the code for [Tincta](https://codingfriends.github.io/Tincta/) which was our first real project and you can see our ignorance in the code.
Preparing our app for the next release. Today is the last day of debugging sprint.
That's not the Launchscreen anymore. The launchscreen isn't part of the app per se. It loaded/displayed by the springboard while the app launches. If you run code, you're already out of the launchscreen. 
I think you're making this more complicated than it needs to be. Save your session expiration and check it before network calls. Consolidate your networking code together to make that easier. Then if you want to remember which call was made when a session expired...first of all, don't do this :) but if you really must make a network call queue with bonus points for caching it to disk so you never forget a call...OR just show an error message and boot them to the login screen.
I'm not sure what you mean by low level base view controller? Do you have an example on how to implement this hierarchy in swift?
Aha - now I understand what you're saying. Yep - makes absolute sense to make this change. Thanks for taking the time to explain this nuance to me.
Yeah I get that, but I assume that it achieves what OP is looking to accomplish. 
True!
To market yourself as an iOS developer, youll need to show that youve developed iOS apps. Youll want a portfolio containing a few apps youve made to show people yes I can actually do this. Make some of your own apps and try to get one on the app store.
Are you doing any testing indoors? I know that indoor accuracy is still really poor at times (it works but not if you need absolute accuracy). Does it seem like accuracy is an issue with all apps or just yours specifically?
Hi there, thank you very much for your comment. I went with Realm and low and behold, its set up and working, saving values/data to the Realm Database, works like a charm. I have looked at CoreData before and didn't understand a whole lot, I think I will have to slay that beast another time(soon!). But for now Realm is doing just fine. Cheers dude!
Start learning iOS development and create an app of your own.
Are there release notes for this release? The developer site's link seems to redirect to an index page. I'm interested in whether they've got round to making Never and similar non-constructible types into true ‘bottom’ types, making things like the following possible: let result = primary ?? fallback ?? fatalError("Fallback should be available!") 
ah yes, but in order to do this: "When 1 runs, it checks if you're logged in, if you are, it does nothing, if not it logs you in." I would need to send a ping type of request and observe the response, otherwise how else would I know the session is no longer active?
The _ signifies that the parameter name is omitted when calling the function. rect is the internal parameter name, but when you call it (not a good example with drawRect because you should never manually call it) it would just be var aRect = CGRect() myView.draw(aRect)
A function can have two names for the same parameter. In this case, the "_" is the external parameter name. the second name, "rect", is the local parameter name. The external parameter name is the name that is used when passing the value to the function. The local parameter name is the name that is used internally by the function. Of course, having two names for a single parameter is optional. In your second example, "rect" serves as both external and local (internal) name. Earlier versions of Swift let you omit the first parameter name when passing function values. However, Swift 3 requires you to include the name for the first parameter along with the value. The "_" in your first example allows you to retain the earlier Swift syntax and just pass a value.
[A stamp card app](http://mccoygames.com/wp-content/uploads/2016/09/ShareTea-Card-App.gif) Keep in mind, the .gif is 80mb lol... I just submitted the app to the app store for approval (fingers crossed)
The bit: city.replacingOccurrences(of: " ", with: "") Actually returns a string replacing this, instead say: city = city.replacingOccurrences(of: " ", with: "") That should do it. https://developer.apple.com/reference/foundation/nsstring/1412937-stringbyreplacingoccurrencesofst
Ironically the author has discovered the very thing he railed against: Sometimes you just need a convenient operator alias for `Optional&lt;T&gt;.map`. As an aside It's kinda fun to see people go to great lengths to redo/resyntaxize operations that already exist in Swift. It's a great learning opportunity all around.
I believe that this was valid syntax a few versions of swift ago. It's not anymore.
It has been a pain in the ass to migrate to Xcode 8, and all my pods to Swift 3 or 2.3 How are you guys doing the migration? Any tips?
As it said, AnyObject does not provide initializers. You can use var user: AnyObject But after initialization, `user` type is still `AnyObject`, cause of Swift's type safety features: type cannot be changed after the variable has been declared. By the way, don't you know the type of `currentUser`? Why don't you use it?
`AnyObject` is a protocol. A protocol is simply a contract that concrete types can implement, it's not something you can instantiate. When you instantiate a class, you're essentially telling the Swift compiler "Create an instance of this class". It doesn't make sense to do that for a protocol because any number of different classes could conform to that protocol. What are you trying to achieve? 
I wrote a pretty basic HTML parser for a project I was doing, in this code https://github.com/wasupwithuman/ScrapeME/blob/master/ScrapeMESwiftly/domain.swift It pulls out link anchors, but I have recently modified it to get rid of all tags and only pull text. Either way Maybe it will give you some ideas.
I had to migrate 39 projects from [Hacking with Swift](https://gum.co/hws-book-pack), 7 projects from [Practical iOS 10](https://gum.co/ios10), and 4000 lines of complicated code from [Pro Swift](https://gum.co/proswift) – that meant migrating from 2.2 in most of those, but also Swift 3.0b1 to b2, b3, b4, b5, b6, and GM for the iOS 10 stuff. It was not easy :) My advice: don't upgrade your project to Swift 3 when Xcode prompts you. Instead, choose later, then set the "Use Legacy Swift Language Version" build option to No. This will cause the Swift 3 compiler to attempt to build your Swift 2.2 code, throwing up many thousands of errors. Next, use Xcode's line-baed Fix-it tool the first 50 or so times so you can see the before and after, helping you understand what's changing. After that, I would suggest doing the next 50 by hand to make sure you're getting the hang of it. Finally, go to the Editor menu and choose Fix All In Scope. This approach might seem curious, but trust me: I've had to migrate a *lot* of very disparate code. If you follow the plan above it will take you maybe an hour longer than using the project conversion that Xcode offers you, but the flip side is that you really start to feel how the new naming conventions work. This is important, not only so you can write new code faster for Apple's own APIs, but also so that you start to name your *own* methods in a similar style. It's confusing for you, and for others, if they have to work with two different sets of naming conventions because you have legacy code naming. So: use this chance to upgrade Apple's code, your code, and your own muscle memory for Swift 3 – it will pay off!
() is just as valid a return type as any, no?
Technically yes, but there are two problems with it: 1. You'd still have to assign the return value to something to prevent a warning, eg. `let _ = optionalThing.map { doSomething($0) }` 2. There's a semantic issue - the word "map" implies something about what that function does, i.e. mapping one value to some other value. If you pass in some non-pure pure function and use side effects to achieve something, and map to "nothing", you're gonna violate a lot of peoples mental model of what to expect from a `map`. I'd just call it "bad code". Sometimes you actually want to execute some code with side effects instead of mapping to something, but using map for that is a bad choice. It would make more sense to have some separate method that does actually indicate that in the signature. Array does have exactly that method, it's called `foreach`. That thing for optionals with a better name would be great. (That's what OP's `optionallyDo` is). I though about adding such a method in my code, but since it's non-standard, and the code improvements are pretty much negligible, I went back to just using `if let`.
Come up with an idea that you like, break it down into steps, and figure out how to do each step. Piece of advice though, if you make your idea too large scale you might get really sick of that one idea a year from now and spend an hour on reddit every morning instead of coding. 
Exactly
Is gold master the final version? Sorry; first time I'm actually interested in downloading stuff from the developer site.
I have not yet decided whether or not I like this idea yet. I have two major concerns however (easily solvable). 1. The closure absolutely should be marked as `@noescape`. It doesn't escape, and we shouldn't have to use `self` in there. 2. I don't like the `?!` operator, because in all other cases, the `!` when associated with optionals means you're doing something unsafe (risking a fatal error). The `!` tells the compiler "trust me, I know what I'm doing" (despite most people usually not knowing, actually). But what you're doing here isn't unsafe like other uses of the `!` with optionals, so the operator is quite misleading in my opinion.
It's not necessarily the final version but it's to say that nothing will change between this and the public version. Most of the time they release this version to the public but every now and then they fix one more critical thing for the public release. 
You almost certainly need to change nothing – Swift 2.3 changes a few pieces of optionality, but that's about all.
I'm going to say Atom if it is available for that distro
Personally I recommend picking an app idea that interests you and start coding. Break it down into small manageable chunks and just google how to do each small step you don't know. Many great resources online. It can be a little overwhelming transitioning from understanding the language and syntax to actually diving in to xcode and making a functional app complete with UI. Baby steps is the answer. Only worry about one feature at a time and let google be your friend. Before you know it, you'll be comfortable with it and embarrassed about how poor your first app was! Learn, understand and follow MVC if you don't already. You will hate yourself for not following it. Good luck :)
Optional Bools are still pretty confusing. This gives an error: let a: Bool! = true if a { } [The book](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html) says: &gt; An implicitly unwrapped optional is a normal optional behind the scenes, but can also be used like a nonoptional value, without the need to unwrap the optional value each time it is accessed. There's nothing in that chapter to suggest that Bools would get special treatment, yet apparently they do in some contexts.
Why don't you offer the suggestion on the mailing list? Its a good idea and could be very nice if its can be performantly implemented.
Thank you (and /u/waterskier2007 too) but unfortunately I'm still confused. Does anyone have a method that you can show of how its done in Swift 2 vs Swift 3? I'm having a hard time visualizing it. EDIT: Disregard, I get it now. It was confusing me the way Swift was transitioning my application from 2 to 3. For anyone confused think of it this way: Swift 2: func addNumbers(x: Int, y: Int) -&gt; Int { return x + y } //Called like: addNumbers(5, y:10) Swift 3: func addNumbers(x: Int, y: Int) -&gt; Int { return x + y } //Called like: addNumbers(x: 5, y:10) To make the Swift 3 numbers call like Swift 2, use _ : func addNumbers( _ x: Int, y: Int) -&gt; Int { return x + y } //Call like: addNumbers(5, y:10)
If you like the command line then probably vim or emacs, if not maybe [Geany](https://www.geany.org). What do you want to do with it?
i can write some apps using swift for ios. but i think i am not good though. i want to try using swift and play with gpio on pi. and exploit swift on linux.
Purists, I guess. I thought the same thing when I read it.
As for Alamofire, they are 2.3 compatible with a 3.0 branch that compiles so you have choices. I think a lot of major frameworks are maintaining and continuing to flush out compilable Swift 3 branches if you want to jump out of the safe zone into the bleeding edge. 
Thanks for the thorough advice! This definitely seems like the way to go. I was thinking of following along with Apple's iOS development resource to pick up the basic of UI development.
Personally, I found random YouTube videos to be the best help. You will start to pick it up fairly quickly just by following specific YouTube guides. Don't get discouraged either, it is easier than you think. I was very comfortable after 1-2 months following the advice I just gave you. Also, download Xcode 8, use swift 3.0. Don't want to find out your app doesn't work when 2 and 2.3 are no longer supported. I have to put a good bit of time into making old apps compatible with swift 3.0 and iOS 10 now. 
Thank you for your answer. Should I do this for all my Cocoapods as well? I'm using around 20 libraries. Some of them still don't have a Swift 2.3 or 3 version
Side note: In Swift 3, `noescape` is the default. Now escaping ones have to be marked. 
http://stackoverflow.com/questions/28037443/iosswift-video-screen-capture http://stackoverflow.com/questions/36707867/how-to-record-screen-video-in-swift
If Atom is not going to happen, there is also CLion by Jetbrains, but it's written in Java and I don't know if the pi has enough memory to run it smoothly. And it costs. Or AppCode by Jetbrains, but I don't know if they released a Linux version. Straight from the head there is also some Eclipse thing, LiClipse, but again, maybe that does not run smoothly Otherwise there is not much besides the normal editors like Sublime, Vim and so on. At least they run nicely on a pi, and together with the interactive Swift console you can do some nice development.
Aside from blurring and vibrance, you don't have any options to do such a thing with UIVisualEffectView. Your best bet would be CoreImage filters or using SpriteKit combined with the former to achieve this effect. Keep in mind that you'd need to apply several filters, or use multiple layers, which can be a real drag on any device older than the iPhone 6. Your best bet for something like this is to find a custom font that looks similar and use a single effect, or to do the entire thing in Photoshop/Illustrator and use image slices to display your font. Keep in mind that this will probably limit you to a single language, and will increase the size of your app bundle. You'll also need to decide how to best display and render these in your app.
You'd be better off trying to achieve this effect with a GLSL shader.
If you like an IDE on your desktop computer, you can use that as well. I use Xcode, and it's possible to use it to develop software on a remote Linux system. Basically, you can mount the Pi's file system as a local drive, and set up Xcode to edit in the folder with your source files. You then make the build command run the make function on the remote system. You can do some other things that you might find helpful, such as setting up the makefile so that GCC outputs to a file, and have a terminal running tail -f on it so you can see build errors. Edit: I meant to give you this link: http://saifmulla.com/linux/mac/2012/11/using-xcode-to-develop-on-your-remote-linux-systems.html
I find it the opposite, and much prefer Swift's loop constructs to the loop in C.
Nope. Only way to play a song from Spotify is by using their API in your app. 
Is there a reason you believe c style loops are better, or is that just what you're used to? Just curious. 
That is what I am doing now. Create a folder and write my code on Xcode, then, copy all the swift's files into a folder on my pi. And use the command: Swiftc *
&gt; C-Style: &gt; int i = 10; i &lt; 0; i-- &gt; Verses in Swift: &gt; for i in (0 ..&lt; 10).reverse() &gt; The C-style doesn't execute because i starts at 10 then the loop will execute _while i is less than zero_ (which it already isn't!), so the loop doesn't execute at all. Whereas the Swift works as shown; or, if using Swift 3, will work after updating 'reverse' to 'reversed'. As they might say in a courtroom TV show, "your honour, the defence rests." 
5.0 means Swift 3.0 - breaking changes to the framework for a source breaking language release. That's said I am not sure about the versioning scheme, since RAC gonna split the project into multiple repos as part of the release plan.
This gave me an idea to try at some point. extension UIFont { enum CustomFont: String { case Avenir = "Avenir" case Lato = "Lato" } enum DynamicType: String { case Body = "UIFontTextStyleBody" case Headline = "UIFontTextStyleHeadline" case Subheadline = "UIFontTextStyleSubheadline" case Footnote = "UIFontTextStyleFootnote" case Caption1 = "UIFontTextStyleCaption1" case Caption2 = "UIFontTextStyleCaption2" } convenience init?(_ name: CustomFont, size: CGFloat = 16.0) { self.init(name: name.rawValue, size: size) } convenience init?(_ name: CustomFont, style: DynamicType) { let dynamicSize = UIFont.preferredFontForTextStyle(style.rawValue).pointSize self.init(name: name.rawValue, size: dynamicSize) } } And use would look like: label.font = UIFont(.Avenir, size: 24.0) label.font = UIFont(.Lato, style: .Footnote) I can't check if it works at the moment, but it seems like it should.
https://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/CoreImaging/ci_intro/ci_intro.html
Thanks for clarifying
So I made a typo, it doesn't mean that Swift loops are better by any means. 
wow, that looks great! I'm interested in building something like that, what should I learn/read? How should I start? Thanks! 
Instead of for i in (0 ..&lt; 100) where i % 5 == 0 it's better to use (Swift 2) for i in 0.stride(to: 100, by: 5) or (Swift 3) for i in stride(from: 0, to: 100, by: 5)
😅 I'd highly recommend Jordan Rose's blog post, [So You Want to Be a (Compiler) Wizard](http://belkadan.com/blog/2016/05/So-You-Want-To-Be-A-Compiler-Wizard/)
[deleted] ^^^^^^^^^^^^^^^^0.3655 &gt; [What is this?](https://pastebin.com/64GuVi2F/61611)
I'll take a look, thanks!
&gt; Was there actually a good reason to get rid of this? Because most developers screw up X in 10 for loops where X is generally a number between 1 and 5 depending on how good/bad they are. X is rarely 0, whereas with the swift alternatives X tends to be 0. Also, your 50 ways is really like a dozen functions combined in a few different ways. And once you get comfortable with them, entire blocks of loop, conditional, accumulator, etc that you'll generally mess up a few times before you get them right simply evaporate into one liners.
[deleted] ^^^^^^^^^^^^^^^^0.5834 &gt; [What is this?](https://pastebin.com/64GuVi2F/92164)
[deleted] ^^^^^^^^^^^^^^^^0.4700 &gt; [What is this?](https://pastebin.com/64GuVi2F/03796)
You made a typo of a type that would have been impossible in Swift. Its failure mode in C was to silently turn your loop into a no-op. In Swift the closest analogous typo (perhaps `10..&lt;0`) would have been a compile-time error. Those all seem like significant advantages to me.
Actually mine got renamed to Xcode 2 so didn't have to rename Xcode app.
[deleted] ^^^^^^^^^^^^^^^^0.2868 &gt; [What is this?](https://pastebin.com/64GuVi2F/62740)
I was just interviewing a candidate yesterday in Objective-C, and they used a C-style loop, which felt weird, because I realized that even in Objective-C, I haven't written a C-style loop in years. It's all for (item in collection).
I use fast enumeration in Objective-C whenever possible but I just fine c-style loops more concise and easy to read. Everyone else seems to disagree so maybe I just need more time with Swift.
I'm sorry, I actually meant asking for macOS dev tutorials that use Swift instead of Obj-C. This is the reason why I posted my question in this sub-reddit. 
I find Swift's constructs MUCH neater, especially in the cases where youre dealing with collections. Suppose in your example that 10 was the last index in a collection of size 11. In swift, you wouldn't even use indices (unless you needed them): `for element in elements.reverse()` If you need the indices, you can: `for i in elements.indices.reverse()` If you need both: `for (i, element) in elements.reverse().enumerate()` Each of these constructs prevents ENTIRE classes of errors, such as array out of bounds (e.g. accidentally using &lt;= instead of &lt;). Even in your example, you accidentally wrote `&lt;` and not `&gt;=`. This may be a mere brain fart or typo, but it's perfectly valid C code, so the compiler doesn't complain. Some IDEs might pick up on the fact that your whole loop becomes a noop, but I digress. This issue wouldn't be possible with swift's more structured iteration techniques.
Ray Wenderlich some good tutorials that are specific to Mac and not iOS like [this intro](https://www.raywenderlich.com/110170/mac-os-x-development-tutorial-for-beginners-part-1-intro-to-xcode) and this one on [bindings](https://www.raywenderlich.com/124490/cocoa-bindings-os-x-tutorial). They seem to be pretty good about updating as new versions of Swift come along, but just be aware that older content might use older syntax.
NSUserDefaults are cleared when the app is uninstalled.
Will use.
I couldn't say. I only have one real app to my name, and I doubt I have more than sixty users who've ever touched it.
Your "LoginViewController" in the storyboard needs to have the ID set to that string. Also the "Login" storyboard itself does not need an ID, because you ahould just give the name of the storyboard file to "UIStoryboard(name:_, bundle:_)"
I've worked on a few interesting things. Pretty sure a couple people use WebKit for example ;) also worked on Adium for many years, though it's no longer at the ~1 million users it used to have.
Try storing it in the keychain as it's persisted between installs. 
Submit bugs on bugs.swift.org.
There's a Cocoa book by The Big Nerd Ranch. I've been learning from that for the past few weeks. It's really good, give it a try. 
I learned how to draw lines between CGPoints, and I can even draw between an array of points to form a sort of graph, but it feels very sloppy and I don't see how I could implement this into a more complicated app. So I'm looking for a library or something that gives an easier/better way of graphing data. I guess I could work with drawing simple lines for now.
class DrawExamples: UIView { override func draw(_ rect: CGRect) { let height = bounds.size.height let width = bounds.size.width let graphPoints: [CGPoint] = [CGPoint(x:0, y:height), CGPoint(x:width/4, y:height/4*3), CGPoint(x:width/2, y:height/5*4)] let context = UIGraphicsGetCurrentContext() context!.setLineWidth(3.0) context!.setStrokeColor(UIColor.blue.cgColor) context!.addLines(between: graphPoints) context!.strokePath() } } I'm drawing manually right now, but I'm just using the height and width of my background view to draw lines. It's very hard to do this in my head because the y coordinates go from top down, which is opposite of a normal graph. [The graph looks like this using the code above](http://imgur.com/AQsHlSd)
In Xcode 7 and prior, using the .EnumCase or .classFunc() shortcuts was almost a guarantee. Now in Xcode 8 it doesn't happen (and I really can't tell what's caused crashes the few times it has happened). 
I've been working on a script to parse SourceKitten's docs JSON and generate classes, structs and protocols relationship graph. It's in a very early stage and any collaboration is highly appreciated » [Github](https://github.com/Sumolari/swift-dependency-graph) Edit: Sample graphs for [Alamofire](https://cloud.githubusercontent.com/assets/779767/18409425/f740c232-7746-11e6-80f6-7a89562787f3.png), [Haneke](https://cloud.githubusercontent.com/assets/779767/18409427/f747d5ae-7746-11e6-8f33-b5e94640cdac.png) and [ObjectMapper](https://cloud.githubusercontent.com/assets/779767/18409426/f7459442-7746-11e6-8fd5-39cafaf032d4.png).
This deals with swift 1.2 and an older version of Xcode, but I also recommend it. Xcode helpfully corrects any out of date stuff. 
Hi. About 2nd img, don't know about open source projects, but can help you achieve such design
&gt; I'm sure people or teams that are self-sourced can obviously do it for much cheaper or free if it's just your time When I talk to people with an app idea I always explain that it's at least 60K for an app (not a top 500 app, just any decent not crappy app) and people who do it themselves are giving up a developer's salary somehwere else so it's not cheaper or free, it's just no money coming in instead of existing money going out. If you still have to pay rent and buy food your app still costs money
Isn't that sort of what a main menu is? Like an app to start the game, uhh.. I'd assume you could do anything you'd want there! 
So I'd create the game and add the app functionality as part of the main menu? Perhaps I'm over thinking things. If I start the project as a game, is the project missing anything that would be there is I just created an application? Note: please excuse my beginner knowledge :) 
"would/could/should of" does not exist. What you're thinking of is "would/could/should've", a contraction of the word and have. Please do not use would of, could of or should of. 
Please, please, please explain when and when not to use override init in a subclass in swift with a practical, SIMPLE example. Many thanks in advance 🙇🏾🙇🏾🙇🏾
I just noticed I completely misread the first question. This is a better answer to the first question than my answer.
From my experience, mostly the former, but there is also pair-programming happening sometimes when someone gets stuck.
Hmm... I think to answer this probably requires expanding on where it is you're confused exactly. You use `override` when you want to change the behavior of something in the super class.
put an IBOutlet, call it whatever, and from within the IBAction say whatever.hidden = true
Does super.init go INSIDE override init or no? I'm also confused about the positioning of the two 
I work on a team of 11 developers at a massive company. You likely see their commercials on TV or other ads every day. We use Agile project management methodology - in short our work is done in sprints and each sprint is broken up into stories (a new feature, research, prototype, or improvement to the app). It is usually one developer per story. It involves getting business requirements, meeting with product owners and designers, developing and then adapting to reoccurring changes, testing, fixing found defects, and then code reviews and unit testing. 
@IBOutlet function buttonTap(sender: UIButton) { ... ; sender.hidden = true } Edit If you are using a UIBarButtonItem you must remove and add. They don't have the hidden property. 
I don't ask questions, I just lurk here for Swift news and to answer the odd question, but I work on an app that's a household name in several countries. Around 1.5M daily users (iOS only, we also have an Android version), consistent 5 star rating, featured multiple times. I was the iOS team lead up until recently, when I moved into a more technically focused position (same company/product). I'm always willing to answer questions, no matter how novice they might seem. I wouldn't want to work with someone who thought answering novice questions was beneath them!
Me! Well, fairly household. The latest release has 2,750 reviews right now, only 21,000 all time. 
Sounds like you are thinking of the New Project templates. All those do is give you a head start on your app and storyboard, you can add anything to any type of project. So pick the most logical start, and keep adding the extra functionality.
UIView.animateWithDuration(1.0) { progressBar.setProgress(1.0, animated: true) } But learn to find the answers yourself, this is the kind of stuff you can google faster than asking 
And where should I put that code btw? 
I don't think you even looked at my code or read what I wanted, doesn't that only make the animation duration 1 second? I already have that set? I want it to reset correctly when button pressed? 
It's possible there's a bug in your own code. Sometimes the optimizer exposes bugs that were there the whole time, but only triggered as a result of optimized code generation. Back in the pre-ARC Objective-C days, a common bug was sending a message to an uninitialized pointer: The debug build would explicitly set the pointer to nil, which wouldn't do anything, but the optimized build assumed you wouldn't use it before initializing it (since it's undefined behaviour otherwise) and your app would crash. If you can create a minimal example that demonstrates the issue, I'd be willing to have a look at it and see if anything stands out. If there really is a compiler bug, you'll need to do that anyway.
If I understand you correctly you want to tap on a single tab bar item, and based on some logic, present one of multiple view controllers. If you want this kind of logic on all your tab bar items you'll be better off rolling your own custom tab bar. If instead you want the default behavior on most of your bar items, but maybe want special functionality behind the center bar item (for example) you'll need to subclass the UITabBarController. There you can override the tabBarShould:shouldSelectViewController: delegate method. Watch for the view controller associated with the special tab bar item, do your custom logic, and then return false after presenting the appropriate view controller.
Changed my Array code to this: let colorArray:[UIColor] = [.redColor(), .greenColor(), .redColor(), .greenColor(), .redColor(), .greenColor(), .redColor(), .greenColor(), .greenColor()] 
extension UIColor { static func randomColor() -&gt; UIColor { var colors = [UIColor.redColor(), UIColor.greenColor(), UIColor.blueColor()] return colors[Int(arc4random_uniform(UInt32(colors.count)))] } }
Yeah, lots of if and buts. Your links explain it really well. 
I was working on a project that was visualizing geo-data with the Mapbox API. This week I abandoned that (for the time being), and a few other things I was working on to do a reboot on my priorities. Started on a new app that will integrate a subscription service, podcast, articles, and online store, into one place. Getting the rough demo in place for when I attend NSSpain so I have something to show and brainstorm ideas with while I am there!
Googling _swift animate progress bar smooth_ will give you this example on the first result. To really understand what is happening here, you should read up on UIView animations. Or even better, watch lecture 13 from [Paul Hegarty's iOS 9 course from Stanford University](https://itunes.apple.com/us/course/developing-ios-9-apps-swift/id1104579961). I really recommend taking the time to go through these lectures, as you will get a much better understanding of what you are doing - and what to google when you get stuck. 
Thanks, When I now press the button. The old color is still on top or bottom of the new color with like "bended" corners, what's the problem? 
Yea that's a great point. The opportunity cost is definitely a major factor. 
Check this: http://imgur.com/a/X5YLe The same colors are at the same corners, why is this? 
It could of course be good to make sure this bot doesn't make a damn fool of itself due to missing commas
Yeayea sure. I've made like 5 threads past 2 days, on every single one of them I've gotten answers to google it instead and 4/5 times gotten the wrong answers of people who think they know so much. So yea, thanks for the be-nice-lesson anyhow
If you follow the [Getting Started](https://github.com/spotify/ios-sdk#getting-started) steps on the SDK's GitHub page and place the import statement from step 4 into your bridging header it should work fine.
Oh wow, I didn't realize you can add commas for multiple valid cases, I'll update it accordingly. The closure is a great solution too. More similar to the OCaml code. The one thing that worries me about littering closures throughout my swift code, is that sometimes I make a wrong step and suddenly the compiler takes about 3x as long to run (or the type method-completion disappears within the closure). Has anyone else encountered this?
Can we also use removeSubView ?
One possibility is that due to Parse.com shutting down many developers are thinking of switching to Firebase. 
Can you elaborate what you meant by type inference disappearing? 
Sorry, type inference was incorrect. XCode has trouble determining the type of the object I'm currently editing, and I lose the method auto-completes. I'll try and find an example. The compiler is running just fine.
I think I know what you mean. When there's a certain type of compiler error at some point of the compilation process, it cuts the auto completion. I don't believe that has anything to do with the immediately executed closures though. I use them very often. There is a catch to these closures though. You either need to explicitly type the variable that holds the return value of the immediately executed closure, or you need to explicitly declare the return type within the closure in the form of something like `{ () -&gt; Bool in ... }()`
- appealing to new developers because it's easy to integrate - people switching over from Parse unfamiliar with Firebase - for a lot of new developers, it can be their first experience with background threading/async/completion blocks, which from my experience seems to be the source of many of those SO posts
Ok thanks for that. Is there a specific reason why to do this?
My best app is known all over the office and tens of people find it invaluable. Actually none of mine have even been submitted to the App Store. Close to finishing one that might suit a large enough niche that I wouldn't mind others using.
Working at a large retailer whose consumer-facing app has a few thousand DAU. Our primary focus is enterprise apps used by associates in the stores with roughly 30,000 DAU.
I ran into a situation where I didn't like to charting libraries so I coded my own. This was with 0 experience. I literally read iOS Charts source code and googled what each function did in the parts I knew I wanted my chart to have. Now they're looking pretty sweet. In retrospect, I probably could have gotten away with using iOSCharts with some changes to the source code, but I was too inexperienced at the time. Here's a few tips if you want to build your own charts: Figure out CGAffineTransform. This will let you instantly transform your data into the points within the view. This blog post helped: http://iphonedevelopment.blogspot.ca/2008/10/demystifying-cgaffinetransform.html Your transform will be set when you determine yMax and xMax and the frame of the chart. - this will let you 'flip' the y axis, and also scale the chart to the view so, if your xMax is 100, but your chart is 300 points wide, each 1 unit in your chart will be 3 points. Your data line should actually be a CAShapeLayer(), it is a lot easier and cleaner than drawing a whole layer, and I didn't know how to use it at the beginning and wish I had known. You create the path for this with your data points and your transform to create a CGPath for the layer's path variable. If you want to smooth the line, look up spline interpolation - specifically Hermite or Catmull Rom, both of which have swift implementations on some random blogs. 
Most people used Parse. It shutdown. People are looking for something else. Firebase is close enough for many, but different, so, all the questions.
I'm working on finishing up my latest app, peek. It's for creating and sharing events with the world. If you'd like to check it out, visit http://getpeeking.com. I'm currently looking for people to join the beta. Feel free to tell your friends!
You can do this pretty easily with bezier curves and transforms. That said, the iOS Charts library is Swift 3 compatible. You just have to point to the [Swift 3 branch](https://github.com/danielgindi/Charts/tree/Swift-3.0). 
https://github.com/vitalykw/VPRubberMenu for the first gif :)
You could also post on medium.com if you don't want to do personal blog
You can create your Views programmatically. Also you can use a framework like snapkit in order to create your constraints programmatically too.
Interface Builder is quite different compared to most other drag and drop UI design tools, but it's also extremely powerful once you get the hang of it. I encourage you to stick with it. To answer your question, there aren't really any alternatives because there isn't much demand for such a thing, at least if you want to use Swift/Obj-C+Cocoa.
This is just IMHO, but I would think converting it to Swift would be time-consuming, hard and only enjoyable if the alternative is sticking burning hot pokers in one's eye, but I think using it from Swift should be really easy, unless Spotify have done something terrible or terribly wrong. There are large numbers of APIs in ObjC which we presently use from Swift (such as UIKit, CoreData, SpriteKit, etc, etc). Have you looked into using the ObjC API directly from Swift? Is there some reason it won't work?
In case someone else has the same problem: So after some thought, I decided this wasn't the best way to go about things, as I'd need to call the decision code each time before the tab was pressed. This would mean having that code in multiple view controllers (or at least calling it). It might also be a little weird jumping back to the start of that scene, as you'd be immediately displaying a view controller segue animation. 
This is awesome! Wasn't aware they do non-Android stuff as well. Much thanks sire!
lol that's just mean, sorry you feel that way then. If you had been getting the same answers I have gotten in the past days you would probably not be as happy either. I really just want some help and really appreciate if I get some but saying I Need to google over and over is not just helping. 
&gt; I wanted to start contributing to the community but Swift on SO is useless. I find it really annoying. \&gt;90% of the Swift questions aren't about Firebase. Add firebase to your ignored tags. &gt; I find many questions make it clear that the author has no idea what they're doing. They just want to quickly copy and paste a storage solution together. Then downvote and/or vote for close. 
Your TODOs should be github issues. I opened two for you. At a minimum, I would need [#2](https://github.com/DrewKiino/Atlantis/issues/2) to be resolved before I could even consider moving any of my projects over to this.
Funny. I think interface builder is quite awesome. 
It's Swift 2 bugs I'm looking at. This is going to be a giant pain if I have to completely retest my app with the optimizer, and rewrite all the parts that make it fail. There's bug reports here where logic and flow control are different under the optimizer!
Interface is very powerful! Keep trying. It is a great utility for any Apple Developer 
What are you currently using?
Hmm, I'm using class functions -- what's the ".classFunc() shortcut"? I've never heard of it, and googling isn't turning up much.
Might this be able to be extended to use reflection to serialize arbitrary swift objects into JSON? It seems like you have the parts to print them out... This might be really convenient for people who just want to send JSON data from their swift models. I don't know if a JSON serialization library like that exists already, but it seems like you have the difficult recursive reflection part down.
Good to know, I'll check it out. btw are you differentiating between macOS and OS X? Or are you talking more generally about swift for Mac programming?
I can always opt-out of using CocoaPods even if your project is set up for CocoaPods. I can't opt-in to using CocoaPods for a project that's not set up for it (short of forking the repo and setting it up as a CocoaPod myself).
CocoaLumberjack. Plus the Swift subspec. Plus of other custom stuff that I bolted on top of CocoaLumberjack (which would similarly have to be have to be bolted on top of this library).
Just multiply by 100, round down, cast to an integer, and take the remainder modulo 100. :)
You da man!!
Thanks! It's third grade math, how could I haven't thought of it. Also just as I've posted it I found another solution. To those who may stumble upon this post: you can convert your number to a string and then use yourstring.characters.dropFirst(2) - argument 2 indicates it will drop first two characters.
&gt;Technology A isn't the exact same as what I use, Technology B. I don't want to learn A so somebody find me an exact copy of B.
I'm working on a new major version, so I'd love any feedback on changes you think would be good. I want to move the enums under a more appropriate namespace, and some other changes are listed in the issues. I'd really appreciate any kind of feedback!
This may produce incorrect results because multiplying by 100 may round up. For example, if the initial number is 1.339999999999999857891452847979962825775146484375 (in hexadecimal floating-point, 0x1.570a3d70a3d7p+0), the final result should be 33. However, multiplying by 100 produces 134 (exactly), and then the final result is 34.
You should add a code coverage badge.
Personally, I prefer the Alamofire pattern for callbacks. Instead of passing back an optional result and optional error, passback an enum with a `.Success` case with a non-optional result and a `.Error` case with a non-optional error.
I'm about to start work on a project. How do I ensure it's compatible with multiple versions of Swift?
Getting the digits of a number involves multiplication and modulo by powers of 10. In your case, you don't care about the whole part, so we can remove that: let d = 1.2345 let (wholePart, fractionalPart) = modf(d) The `wholePart` is now 1.0 and `fractionalPart` is now 0.2345 And you want the first two decimal places. You need to shift them into place and either drop trailing digits (divide by powers of 10) or drop leading digits (modulo by powers of 10). Normally, you multiple Shift the first two decimal places left of the decimal point and round off in an `Int` let firstTwoDecimalPlaces = Int(fractionalPart * 100) Drop every digit except the last by modulo-ing by 10 let secondDecimalPlace = (firstTwoDecimalPlaces % 10) Drop the last digit by dividing by 10 let firstDecimalPlace = (firstTwoDecimalPlaces / 10) 
Good guesses, but no neither of those. :)
This happens almost without fail when im using custom enum types and using the dot notation to access specific cases
Ok, that makes sense. Thanks!
Oooh, I thought there was actually a method called `.classFunc()`. Right. It's strange that this would cause an issue with the optimizer. That seems like something that would happen long before the optimizer sees it. I do get the feeling that Swift class/static methods were a bit of an afterthought. They seem to have a lot less power, and a lot more issues, than in Objective-C.
Isn't this what `backingAlignedRect(options:)` is for?
I guess we disagree on that. I think Swift, while cool and useful, has the most unreliable compiler I've used since the Apple II days. I can't even remember the last time the Objective-C compiler crashed on me. Maybe never. There's *lots* of reports of nasty Swift 2.2 bugs that are triggered by the optimizer. Here's some fun ones: - [SR-716](https://bugs.swift.org/browse/SR-716): a struct with a boolean and a double (in that order) crashes the compiler. - [SR-1216](https://bugs.swift.org/browse/SR-1216): an initializer in an extension causes it to mis-compile other properties. - [SR-1502](https://bugs.swift.org/browse/SR-1502): whole-module optimization causes it to mis-compile cases in a switch. Check out the [OptimizedOnly](https://bugs.swift.org/issues/?jql=labels%20%3D%20OptimizedOnly) tag. There's dozens of them. Most of the ones I found were for Swift 2.2. Would you know if you encountered such a bug? SR-1502 was found, for example, because their unit tests failed, but how many Cocoa projects do you know that have full test coverage, and run their tests at all optimization levels? Steve Yegge joked that optimization is "the art of generating code that is just barely correct enough that most of your customers won't notice problems". Maybe I'm just pickier than the average user. I fuzz-test my software, because something that works 99.9% of the time isn't good enough for me. I don't bother fuzz-testing other people's software -- even if I found bugs that way, I'd have no way of knowing if it was their bug, or a compiler bug.
You might want to read this: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html Yes, Swift 3 was the "put all the non-backwards compatible, source breaking changes into one release". There are still lots of features going forward but it's hoped they will be additive, rather than the source breaking of Swift 3. Swift 3 was a lot slower going than expected due to opening all decisions up to public consultation. Essentially *all* of the "Completing Generics Manifesto" was deferred to Swift 4. As was ABI compatibility and the resilience model. And as for the bugginess... major new features were still being implemented about 3 weeks ago. The devs haven't really had time to fix all the regressions. Looking at the massive changes still planned for Swift 4 (and Swift 5), I think it's going to be another buggy year (or two).
Wow thanks for an elaborate reply!
Sure would be nice if they worked out the sourcekit crashes. I feel like it's every 20 seconds or so that I still get a crash.
Seeing the same issue here too. Also the excessively verbose debugging output is driving me mad.
Yeah, noticed that. At first I thought 'Cool, they've finally integrated the device console log'... then I realized you couldn't filter it off. Read somewhere that it's a known issue that won't be present in the next release.
If you don't know how big the part left of the decimal is, how do you know how many times to call `dropFirst`.
So what *is* the solution then? I've been playing around with some possible alternatives, but even if they work for the number in this post, simply adding more nines in the section with repeating nines will eventually cause it to break. Moreover, before we fret about whether or not it breaks for these sorts of edge cases, we must also determine whether or not the user actually requires this level of accuracy.
&gt; backingAlignedRect Holy smokes! I'd never seen it, but it sure looks like it. Updating (with credit) now. 
That's an NSView call. We're dealing with UIViews, which doesn't have it
Well, now I feel both less embarrassed for never having noticed it before, and more embarrassed for not realizing it was on `NSView` :-)
This. I'd guess we've got at least half a decade before we can all hang up our square brackets. Granted, we may not be writing much obj-c a few years out but reading it is going to be largely unavoidable for a while still.
I am so in. I have pm'd you. Thank you!
This discussion ignores that on the Apple "+" devices, although the scale is 3, these logical pixels are shrunk 15% to get physical pixels. If you really want perfect, pixel-thick lines on an 6+, 6s+, or 7+, use OpenGL.
&gt; So what is the solution then? First, if one needs to examine digits like this, using integers may be more suited. E.g., if one is working with currency, then, instead of recording dollars as a floating-point number, record cents as an integer instead. One may either use integer arithmetic or use floating-point with appropriate scaling so that the values involved are typically integers (with some care about handling calculations that produce non-integer results, such as calculating interest). If one must use floating-point, a possibility is to use existing libraries for converting floating-point values to numeral strings. However, Swift is a young language, and I do not know what has been specified for accuracy of such routines. E.g., with the C printf function, some vendors are sloppy about correctly converting floating-point values. (Apple has adopted good routines for this.) Another option is to do the calculations yourself. For a simple situation such as this, one might use [Veltkamp splitting](https://www.google.com/search?client=safari&amp;rls=en&amp;q=veltkamp+splitting&amp;ie=UTF-8&amp;oe=UTF-8) to separate the number into two parts, each of which has room in the significand to do some arithmetic without rounding. Then you can multiply each part by 100, use modf to separate the high part into an integer and a fraction, and then add that fraction to the low part to see if the result is out of bounds for a proper fraction (the interval [0, 1)). If it is out of bounds, you adjust the integer. &gt; … simply adding more nines in the section with repeating nines will eventually cause it to break. It is not possible to insert more nines. That is not just a number picked out of the air; it is the next representable number in the common double format that is lower than 1.34. In other words, there are no more double numbers between that and 1.34. Inserting another 9 will cause the compiler to round it to the next representable value, which is 1.3400000000000000799360577730112709105014801025390625. &gt; Moreover, before we fret about whether or not it breaks for these sorts of edge cases, we must also determine whether or not the user actually requires this level of accuracy. [What Every Computer Scientist Should Know About Floating-Point Arithmetic.](https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html)
I'd love to see Playgrounds become collaborative, like what they've done to Notes and their business apps. Great way to debug code with a coworker or do remote Swift lessons.
My compiler crashes if I have any form of Swift optimization on. So not great. I was stupidly under the impression Swift 3.0 was "released".
&gt; It’s not obvious that you can do UI work. TIL that you can do UI work in a playground.
I am not a big fan of how they put the networking code inside the Model struct.
Sure, you don't *need* an external library to deal with JSON code, just like you don't "need" an external library to draw lines on the screen. But there's a TON of boilerplate to do it with any sort of sensible error handling, which is the way you *should* be doing it. I really like the Decodable library. It's got very nice error handling and object initialization facilities: https://github.com/anviking/decodable
Isn't an O(1) subscript required by the `Collection` protocol?
Does anyone know why you need to cast a value to AnyObject? before putting it into a Dictionary? ex. json["someInt"] = someInt as AnyObject?
...story of my life!
No real Android dev uses android view builder. Everyone makes views in XML. Which is at least 200% easier and faster than using storyboards/interface builder. IB sucks and it's a shame apple pushes it. We need a simple markup language for UI, not this crappy drag and drop playschool shit.
Oh is there any effort inside of Apple to provide a first party JSON library for Swift? Should I be explicit in casting to NSNumber/NSString? Do you know why they removed the implicit conversion? Is it no longer "cost-free" to bridge Swift&lt;-&gt;ObjC types? Thanks btw :)
Thanks for this. Interesting approach. 
&gt; Probably to prevent things happening behind your back. If you didn't know this conversion was happening, you'll get unexpected results. I thought the conversion only happened when I used the build-in JSON parser. But it appears, after some testing, that it does convert Ints, Doubles, etc to NSNumber. This seems like very odd behavior to me. This leads me to another few questions. I've noticed I've had to explicitly downcast some objects now. This also seems a bit strange to me. For example I have to downcast NSMutableURLConnection as URLRequest. Do you have any idea why this is? Since I'm casting Int to AnyObject, does that mean Int inherits from AnyObject?
This isn't currently possible or allowed by Apple. You can however use URL schemes to open another app programmatically.
Weird if I have any form of Swift optimization on it crashes the compiler. 🙄 Ugh
Any drag and drop UI is going to be more clunky and slow than writing actual code - nobody builds HTML with drag and drop tools. 
**Jackson**, a json serialization framework used in Java. It relies on custom annotation keywords, such as @JsonIgnore AFAIK Swift doesn't support custom annotations yet/ever?
If someone doesn't want to use IB, they can absolutely use code. You can use: * frame-based layout with CGRect * NSLayoutConstraint * VFL * NSLayoutAnchor IB has been going strong since 1988. It's not going to be everyone's favorite, but it is hardly a failure.
Oh yea I meant URLRequest however you can't see to edit the standard URLRequest and so I need to use NSMutableURL.
Bang's for everyone! 
Yes it is. I believe YouTube does limit the amount you can query their APIs though. They do give you a fairly sizable margin. You can read the terms/service at https://developers.google.com/youtube/terms/api-services-terms-of-service and more on the quotas at https://developers.google.com/youtube/v3/getting-started#quota
You've set your collisionBitMask on both of them as none. If you want them to collide set it to PhysicsCategory.Enemey for the player, and reversed for the enemy. /r/Spritekit is a good spot for these questions also
Was Swift 2 like this? This seems strange because the Swift compiler does have a regression test suite. Generally these things get more reliable over time, not less. 
Has any subreddit that started allowing this sort of content survived as a useful subreddit?
The compiler *does* have a regression test suite. You can see it in the Swift github repository. The bugs that get through are not covered by tests. Things only get more reliable when you're focussing on increasing test coverage. With the Swift 3.0 rush in the last couple months, this was certainly not the case.
Actually, I think that's a bug in closure parsing. The following code: func aFunc() -&gt; Int { fatalError() } compiles without a problem.
BNR is top-notch, highly recommend
From what I've gathered, if you want O(1) access, you need to need to store your strings as `[UInt8]` with the characters encoded as ASCII. Otherwise, you definitely can't rely on the storage of `Swift.String`, since it reserves the right to flex to support UTF going forward.
I'm not sure anymore (using Xcode, WPF, html and css) and since everyone uses own rules and names for formatting I start missing visual editors more and more.
It's a bit of a stretch to put together multiple storyboards from different projects together, you're better off seeing what work you've done for each project and the snippets of code and copy-pasta each on into a single new project. Once you have all the elements, (ex: tab bar, onboardng, main view) then just link them together with some carefully planned software architecture that you think is best using segueways or method calls like dismissView or presentView. You should really listen to what the other people here are telling you, like what the other dude said "take all that code with individual meanings and put them into a project where they're all on the same page". Software architecture is universal so I'm sure as a developer you should have a fairly good understanding of how to go about it. in terms of putting together all these features from different projects into one app. you're basically making an entirely new "app" with these features. just gotta think about how they all connect.
I'm pretty happy to change the code with the change of the underlying implementation, it's more that it seems like Strings haven't changed at all in Swift 3, so might as well try to optimise both efficiency and unicode-safety for the full year until Swift 4.
Subscript access to a `Collection`s elements is [required to be O(1)](https://github.com/apple/swift/blob/master/stdlib/public/core/Collection.swift#L519-L524), so this also applies to `CharacterView`, `UTF8View`, `UTF16View` and `UnicodeScalarView`. As already pointed out, subscripting `UTF8View` with a subrange is a constant time operation as long as the string isn't bridged from Objective-C.
Thank you for helping out! I imagine the code should be something like this, but I'm not 100% sure (this might not be any programming language, but I'll try to make as if it was written in swift): let now = NSDate() let then = theInputFromTheUIDatePicker let hourComponent: NSCalendarUnit = [.Hour] ... ... @IBAction func displayButtonTapped(sender: AnyObject) { label_1.text = displayButton.components(hourComponent, fromDate: now,toDate: then, options: []) Does this make any sense? 
I just started learning swift, so I'm currently working on an app that tells you how many hours have passed up until that instant. I can't seem to find a good workaround so I posted a [question](https://www.reddit.com/r/swift/comments/52jinv/how_do_i_get_my_app_to_show_the_hours_between_now/) about it in this sub. It is really exciting to try this out!
Speak for yourself, buddy. I'm a computer. Beep boop. 
Actually I think the public involvement is a good thing. While Swift 3 might have been slowed a bit (highly debatable), the public process resulted in some good stuff working its way into Swift 3 that might have taken years otherwise. In the end I believe the public process is moving Swift along faster than it might have otherwise. 
Thats a good question. And there are a number of things to consider 1) Can the user have multiple of these colored views at one time? If not, then you can get away with making ONE of these at run time, and just reusing it whenever the user presses the button. 2) Do you have all the necessary information to create them by the time viewDidLoad is called? For example, if you are creating the views with some relative data that can only be known at the time of button press, then maybe wait until button press time to create the views. If you DO know all necessary information at viewDidLoad time, then maybe pre-create them all at viewDidLoad time and just position/size/prepare then when the user actually presses the button 3) Lastly, I would ask myself if they are expensive to make ('expensive' here meaning costing high processor resources, not high $). If they ARE expensive to make, then you dont want to make them frequently. And you certainly dont want to do it attached to a User Initiated Action. In which case you would want to create them only 1 time, and you would want to do it as early as reasonable. Lets talk a bit more about number 3. For your app to be a great user experience, you want any animations to be smooth. Generally we consider smooth to be 60 frames per second. (if you play video games, im sure you are aware of what a big difference 60 fps can make compared to even 55). So that means that in order to render 60 different frames in a single second, the processor need to be able to completely render a single frame in 0.016 seconds. (in programming we generally use milliseconds, instead of seconds. because its easier. so ill call this 16 milliseconds from now on) So that means that if the user presses your button, if it costs 5 milliseconds to create one of these views, you will be fine to just create the view every time the user taps the button. But imagine that you allow the user to tap multiple buttons at once. if the user taps 4 buttons you are already at 20 milliseconds of processor time spent JSUT creating the views. that time doesnt even include actually performing the animations, or downloading something on a background thread, or checking the users location, or anything else your processor might be doing at that time. Creating a single view is not too expensive. And even inserting that view into the view hierarchy isn't THAT expensive (although it does start to add up quickly) So why am I saying all this if creating a single view on User Initiation isn't too expensive? Well, because its good to start thinking about this early. Building an app to completion and then trying to come back and "fix" all the performance issues later is an awful way to do things. You want to be optimizing for performance the whole time. Even small things. So that means you should be thinking about these kinds of questions all the time. **TL/DL. my real answer** If you can get away with it, I would create 1 (or many, if you need them) views as early as possible. Insert them into the view hierarchy (because changing the view hierarchy is expensive) as early as possible. And then just set them to hidden. Then, when you are ready to use one, position it. size it. then when its ready, unhide it. If you need multiple, and the max number isn't known, or is theoretically large, I would use a "reuse queue". If you are unclear what I mean by that, look into how UITableView and UICollectionView use their respective cells. (hint: google "dequeueReusableCellWithReuseIdentifier")
And all of those are worse than a simple markup file describing a layout. Generating UI programmatically is not ideal because it's not a tool suited for the task. Of course, all of this would be moot if IB generated xml that was actually readable and editable.
Maybe something like this function and assign the return value to your label: public func getHoursRemaining(countdown: Countdown) -&gt; String { let calendar = NSCalendar.currentCalendar() let today = NSDate() let endDate = countdown.eventDate let flags = NSCalendarUnit.Hour let components = calendar.components(flags, fromDate: today, toDate: endDate, options: []) return String(components.hour) } 
Found one potential solution: marking the Entity class final eliminates the retain/release overhead and cuts my update time down to 1.18ms on average, and the profiler shows all of the time being spent in my code now, instead of in system libraries. :D
I'm not sure why being "human" is a valid excuse for any behavior. (Was I proposing something inhuman?) It's not like we humans had trouble finding humorous content on Reddit, when that's what we're looking for. I'm still trying to think of a counterexample to my question. Are we OK with this channel turning into another image meme soup? I've seen lots of subreddits die that way. As a human myself, I hate seeing useful communities die.
But bang is for everyone
use value type if possible, it make a LOT of difference.
When doesn't the standard library follow it?
No, release/profiler build. Debug builds were about 15x slower.
What doesn't it do, that a JSON serialization library should do? Which of these unnamed "other libraries are better", and how so?
One idea: Try replacing “func magnitude” with “func magnitudeSquared”. That is, eliminate the “sqrtf” call to reduce CPU time. The knock-on changes are: • Change “func normal” to divide by “sqrtf(magnitudeSquared” (although, “normal” is never called.) • Rename “func distance” to “func distanceSquared”. • In “func updateWorld”, compare “distanceSquared“ against “Float(Game.chunkCount * Game.chunkCount)”. The multiplication should be optimized away since chunkCount is a compile-time “let” constant. On a tangential note, purely as a matter of style and brevity, you can save a few lines by writing: minFrameTime = min(minFrameTime, frameElapsed) maxFrameTime = max(maxFrameTime, frameElapsed) 
Hi M_Zoon! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/52ltxs/swift_playgrounds_for_ipad_is_here/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Turning on whole-module optimization will *probably* get the same benefit (I haven't checked in this case, but it usually helps in the same places that final does). In both cases, it provides the compiler with enough information to statically dispatch, which in turn allows inlining, which in turn allows the ARC optimizer to do its thing more effectively.
Thanks! I'll give that a try in a few hours once Xcode 8 finishes downloading. 
Well, certainly it takes time for the UIView to be rendered but it's almost certainly going to be imperceivable to the human eye (as in, it will appear instantly).
I haven't used Playgrounds in the latest release, but they have been absolutely unusable throughout 8's beta. Crashing on extremely simple code. Heaven forbid you need a generic or two. I've reverted back to using command line programs for playground-like purposes.
Oh my god my life is a misery
Swipe left on the message list for the contact you're interested in.
I'm still learning about code signing stuff, so if you can tell me what is the difference between development provisioning profile and distribution provisioning profile, I would appreciate it. I watched this [WWDC video](https://developer.apple.com/videos/play/wwdc2016/401/) (you can skip like the first 10 minutes of the video as they go over very general/basic stuff) twice and here is what I understand: * Automatic signing handles development provisioning profile for you. Not the distribution provisioning profile. * At the end of the video they say, when you submit an app, you still have to use development provisioning profile. (I don't know why this is the case. Any insight would be appreciated)
If only all my life problems were this complex. 
Here is my opinion after playing with it for about an hour: * The learn to code courses seem pretty nice but they lack an option to speed up the execution and an option to highlight the line currently being executed. * This is my favorite touch screen editor. And I've tried many. The touch keyboard, snippets, autocomplete, and documentation are well thought out. * It is a capable playground, you can experiment with swift, uikit, and scenekit to name few. * You obviously won't develop an app on it but it is possible to write small isolated components of an app using it and then move them into your Xcode project. Though not ideal due to the lack of version control... etc
Just implement one or the other or both and see which one best suites your needs. There's almost always more than one way to solve a problem. You won't get too far in a programming career if you always have to ask someone else which solution to use. Don't suffer from analysis paralysis.
Development is for when you/team start to build an app. You want to test and build. If you want, maybe even use Testflight (Apple tool to distribute app to testers). Distribution. You set the profile to distribute and submit to app store. This is when you the app is ready to launch and be sold on the app store. I really find those video archaic, skipping the most essential things and, really, just skimming the surface. Only those who actually paid and went to the WWDC to get the hands-on approach, really, get the whole benefits because of actually working with the Apple's engineers. Edit: didn't watch the video, but the only way to submit and publish to the appstore. You need a distribution profile. 
I don't know but my explanation comes from the Swift website on naming.
Well, it said beta on the package TBH 😬
Python Python Python! Python is the *best* beginner language out there. It's *fantastic* for teaching. 
I used it for Kitura and it was working find on the latest GM. Haven't used it too much though. 
A Swift function parameter has two names: the name you use when you call the function, and the name of the constant the parameter will be assigned to in the function body. the function increment(by amount:Int) Is called with increment(by: 123) And the 123 will be assigned to the constant `amount` in the function body. If the external name is an underscore, then you do not need a parameter name when calling the function. `myfunc(_ data: Data)` would be called with `myfunc(someData)`, where someData was a variable of type Data. 
This isn't new to Swift 3, but it seems to of become an explicit requirement rather than an implicit one. Swift has the ability to differentiate parameter labels on functions and methods with an internal name, and an external name. It looks something like: `func foo(external internal: Type)` To call this function you use the following: `foo(external: val)` The underscore represents the ability to omit specifying the external name when invoking the function/method. So you could rewrite the function like: `func bar(_ internal: Type)` And call it like so: `bar(val)` It should be said that external labels allow for a flexibility when it comes to defining optional parameters that have default values, by letting you specify what you want to populate. As far as the name splitting, it's more or less so the function / method name is as similar to what it was before, while still omitting unnecessary words for the function signature.
If both internal and external names are the same, you can just name it once. func zoomToUser(location: CLLocation) { Did you not read Apples iBook on Swift 3?
The problem here is not numeric type conversion. If, as you seen to think, you had a `CLLocationAccuracy` (actually a typealias for `Double`) compared with the literal `0`, then it would work! The compiler would *infer* the type of the literal `0` as another Double, according to the need of the `&lt;` operator, making it a valid `Double &lt; Double` comparison. Instead, you have an Optional value, caused by the presence of the Optional chaining operator `?` in your expression. You should realise that the Optional (aka nullable) for any type is itself a *distinct type* which must be *un-wrapped* before you can work with it's contained value. Swift provides several ways of doing this, depending on the context. For your example, this can be done in-line, like so: if let unwrappedLocation = location, unwrappedLocation.horizontalAccuracy &lt; 0 { ... } Note that the format has changed between Swift 2.x and 3.0; the above is Swift 3.0. To further explain, there are two distinct halves to this `if` statement, which are separated by the comma: The **first half** beginning `if let` is called a *conditional binding*. This is a special form of `if` which 'unwraps' an Optional value, considering the test *passed* if an actual value was unwrapped, or *failed* if it was `nil`. If the value was successfully unwrapped and *bound*, it is then accessible within the remaining scope of the if block (named 'unwrappedLocation' in our example). That scope *includes* the **second half** of the `if` statement which, because it doesn't begin with `let`, is now a regular `if` statement comparing the de-referenced `Double` and the inferred `Double` literal `0`. The name of the conditionally bound value can actually be given the *same name* as the original Optional value, it will simply 'mask' (over-ride) the Optional value for the scope of the conditional. Doing this is adopted as a convention by many developers to avoid have too many different and long-winded names in their code, but is my no means mandatory and even to be avoided if it makes the intent less clear. To see what I mean, this is functionally the same the example above: if let location = location, location.horizontalAccuracy &lt; 0 { ... } Shorter, just less useful for explaining what is really going on.
Windows support will come soon, i checked the PRs in the repo, and there are some work about windows stuff
Uh, more details would be nice, but if you wanna make IOS apps, you're going to require a mac. Although you could use a virtual machine or dual boot OSX. 
We released a new version for [Wokabulary](https://itunes.apple.com/de/app/wokabulary-learn-manage-your/id599273012?l=en&amp;mt=12) with the [iOS](https://itunes.apple.com/de/app/wokabulary-learn-manage-your/id599276235?l=en&amp;mt=8) still in review. Now I will start to work in all the UX feedback we got from the users and migrate to Swift 3.0.
I've worked with Xamarin, it's a good technology in the right scenario. It's also not an answer to this question... downvote.
You should look at vapor
and its not supported on my iPad :(. Was looking forward to this app as well
Thank you so much! I get an error with "Countdown" - it says "use of undeclared type "Countdown". Does the Countdown name have another name in xcode 7,3? Also, to return the value to the label, is it possible to do it like this? label_1.text = "\getHoursRemaining" 
Creating a and publishing apps via VM on windows is against TOS(or whatever apple wants to call it)
I'm not in front of my iPad but I could have sworn once you start executing there's a little button at the top that said 1x inside a green or blue circle. I never tapped it but I assumed you could speed it up. 
They are parameter labels! They are suppose to help make code more readable. It been around even before Swift 3
Why stop there? Why not go even further and say that all new features should initially take the form of a new unit test which fails?
https://github.com/tinysun212/swift-windows/releases
Now that I understand what is going on, I like optionals. Using ? and ! for optional access definitely introduces some confusion, but there aren't many choices left on a standard keyboard. At least Swift isn't APL.
Yeah the new ?? implementation is a great improvement, good point. ( will save on loads of those silly {} !
I love the new Battleships challenge. Hope there will be many more like this.
Going back to any language without optionals is frustrating and error prone. It's like manual memory management...something I hope to never have to do again for the rest of my life, at least not w/o a darn good reason. We've got 100k LOC of obj-c and every time I have to touch it, I remember how stupid it is that I have no clue whether any particular pointer actually points at anything without littering the code with a bazillion if statements. Worse, we've been using "" and 0 as reasonable defaults for strings and numbers that the API may or may not return, so now we have nil, non-nil but invalid, and valid states for a lot of things. So yea, optionals way better than that sort of insanity. The ? is probably the best option for chaining. It's shorter than the alternatives some other languages, is meaningful, &amp; fits well w/ swift syntax. The ! is largely evil &amp; generally should not be used outside of a few scenarios. You see it all over the place in demos, but it should never be allowed in production code unless you can coherently explain how there are no alternatives or they are significantly worse. At the day job, maybe 8 times out of 10, a ! in optional code will get your patchset rejected, and rightly so. Everyone new to optionals reaches for the !, but there is generally a better, safer option once you learn to use if let, guard, map, ??, etc. and try to only use optionals in paces that genuinely must be optional.
What the hell are you talking about?
new NameOfClass() How do we do class clusters with that? FWIW, I'm now balls deep in coming to grips with Swift in all its glory after avoiding it until now. I'm happy to have any misconceptions corrected.
Oh...factories. How 1997.
Well it's a little more that we wouldn't implement *either*, as there's not much need. In Swift, value types are preferred over reference types, and protocols are preferred over classes. 
Swift is essentially compatible with C, so any C-based UI frameworks should be compatible, if not the most pleasant thing to work with. It looks like there are a couple different projects working on more-Swifty bindings for GTK+.
Not really. The problem class clusters exist to solve isn't one that Swift really has - you wouldn't create a group of related private classes, you'd create a protocol, probably implemented by structs, which are value types without inheritance in Swift. Any code that would be repeated between the struct types would be in a protocol extension.
You seem to have a strong aversion to the word "factory", but factories are *how* class clusters are/were created. From [Apple's documentation for class clusters](https://developer.apple.com/library/content/documentation/General/Conceptual/CocoaEncyclopedia/ClassClusters/ClassClusters.html): &gt; Class clusters are based on the Abstract Factory design pattern. and: &gt; Taking the Foundation framework’s NSNumber class as an example, you could send these messages to create number objects. [...] &gt; You are not responsible for releasing the objects returned from factory methods. There are ways in which Swift's static typing is less powerful than Objective-C's, but I don't think this is one of them. How exactly is Swift any worse here? Define a class func in the superclass, just like Objective-C, and have it return the proper subclass.
Value types are fine for values. But identity matters a lot for a lot of things. I don't really have a problem with protocols either, but naming the concrete class at construction introduces fragility. 
I do and in Smalltalk, a class is an object whose job it is to make instances of it. Classes exhibit polymorphism and polymorphism gives you an entire second hierarchy in which to intercept things They didn't adopt this in C++ or Java and these languages do not exhibit polymorphism at the class level (they barely have classes) - instead object creation is explicit. You say new Foo() - you're gonna get a Foo and nothing else. And thus Java became factory land to make up for the new anti-pattern.
&gt; Switch's are switch's and basically - they're glorified "jump to label". &gt; They're a bad smell. They encourage people to write the kind of garbage I'm dealing with right now. Being a crappy coder has nothing to do with the language one codes in. Crappy coders write crap code no matter what. You strike me as being smart enough to know that. Switch statements in Swift are the rational and correct tool for a specific set of problems - "I have a thing with N possible states, and each needs a different action taken in response to its current state" can either be handled with a chain of `if` statements, or a switch. Let's say I have the following enum: enum MyArtbiraryEnum { case error(message: String) case success(value: Int) case success(value: Float) case success(value: AnyObject) } And you need to take in a value of that type and act on its state. Without a switch, how will you do it? Me, I'd use a switch, but encapsulate it into an instance method on the enum itself -- and that's the Swift way to do it.
Why do you say "it shouldn't"?
I'm clearly missing something on this. I still don't quite get it but maybe I ought to read up some more on initializers
Yep - that's it. That's really ugly. I also found Foo.usefulConstant worked but explicitly naming the class struck me as doing it wrong.
I feel like you'd be happier writing this in Objective-C.
And switch statements are still gotos and have few good uses, type system or not. I'm already having a bad time. I think Apple's current staff has no idea why they were able to kick Microsoft's C++ using ass with their weird little dynamic language and a fraction of the number of people and they're about to kill the golden goose. I personally think Swift's designers are pretty clueless. FWIW (just sharing my biases), I think James Gosling is a crummy language designer and Stroustup is just nuts. I like Javascript well enough although I think the designer was on acid when he cooked it up and conflated functions and objects and I'm reasonably fond of Ruby, Python and PHP (if you throw out everything in PHP prior to version 5.3-ish and ignore the templating built into it). I love C a lot because it is small. In general, small languages strike me as more powerful than large ones and I think Swift has way too many "things" in it. I don't much care for the ML series of languages and I think type systems are generally more hinderance than help. The reasons their proponents generally cite for why they are good have been proven false time and time again in my own 35 years of doing this stuff. Its not that I'm hanging on to the past or anything like that. I do a lot of different things and am equally comfortable in most of the languages mentioned above. I just think this is a bad turn and Swift is a very long way from what I would have wished for in a successor to Objective C. 
You can think that, and you might even be right, but it's not going to make you productive in Swift. This is the language. This is where programming is going in the future. You don't have to like it, but Apple isn't going anywhere, and Swift is the language Apple pushes, and the industry does what Apple says to do. Swift, whatever its flaws, is a smashing, door-busting, unbelievable home run success for Apple - they have more people coding for their platforms now than ever before.
&gt; Hell, they probably added implicitly unwrapped optionals just for IBOutlets. Sort of, but not quite. Implicitly unwrapped optionals predate Objective-C nullability annotations. From day one, Swift has been able to consume Objective-C code, but nullability annotations allowing Objective-C developers to specify whether their methods take/return optionals or non-optionals took a while to show up. And even since their appearance, not every Objective-C code base has been fully annotated. &gt; Of course, I could add a safe unwrap and add a fatal error in the guard else clause. Same thing. Except way more information and thus vastly superior. &gt; Instantiate view controller from storyboard Gross. Use xibs and know what sort of view controller you are instantiating. &gt; If find the use of the ! operator fine for configuration and programmer errors. As mentioned above... just use a `guard`. You-6-months-from-now will be so happy that the change you made that started crashing has a helpful error message that explains the disconnect between what was expected and what actually happened.
Yeah, it came shipped with Xcode 8
 func isLeapYear(year: Int) -&gt; Bool { // return true or false using whatever logic } var leapYears = [Int]() var nonLeapYears = [Int]() for year in 0...4000 { if isLeapYear(year) { leapYears.append(year) } else { nonLeapYears.append(year) } } // check your arrays now that they're filled. 
&gt; Swift doesn't even work for real programs without the Objective C runtime under it. Everyone developing stuff on Linux in this sub might disagree with that assessment.
Send me a release announcement when it ships.
I gotta say, your attitude isn't going to get you much help around here. The number of people interested in helping you out is inversely proportionate to the number and intensity of your criticism of the language.
You know....there isn't really a "Swift way" yet. It has so many mechanisms in it, there isn't enough experience to say what are and are not best practices. I started doing C++ in 1992. Before templates. The C++ code I wrote in 1992 was full of sketchy stuff like void*'s in all the collections. The early stuff we wrote made use of big deep hierarchies. Turns out that doesn't work well in C++. You're better off with a forest of types than a big tree of them. And then templates changed the game a bit...but you had to make em really lean wrappers atop fairly unsafe C style code. And then Stepanov introduced the STL and really changed the way people thought about C++ again - it became more about generic algorithms and less about classes and types and templates freed programmers from the tyranny of the compiler's type checking because suddenly you had duck typing if you used templates making C++ programs kind of generative. So don't feed me shit about "the swift way". There isn't nearly enough experience with Swift to say what that is really going to be. I will say that if the program I've got in front of me is "the swift way" then you're all doomed to spaghetti hell.
Your half-baked criticisms of the language aside, the code you're working with is clearly amateurish crap made by someone with no real skills.
If your client knew what they wanted beyond "make it work", they wouldn't have hired you. 
The client is a very old friend who helped me learn WebObjects in 1997. 
I'm working on a small [link shortener](https://github.com/harlanhaskins/csh.link) for [Computer Science House](https://csh.rit.edu)! 😄
i like that i still have the option of using objective-c, apple flip-flops too often on their use of ? and !
I've read elsewhere that enabling "whole module optimization" prevents the crashes, though I haven't experimented with it myself.
Unfortunately, doing this is quite annoying in Xcode. I found a solution for this problem though; it's usable, but not super pretty. Disadvantages right away: You won't get previews of the widget view in your storyboard (only in it's separate xib), and accessing your views in the controller requires a little boilerplate. I'll give you a high-level breakdown: First, create a xib that only contains your WidgetView. The class should have some method that sets the image and label. Using that, you could load the widget view in your controller and insert the widget views in code, but that's not so nice; you probably want to add it in interface builder. So what I did is create another UIView subclass called "XibLoadingView" (doesn't have a xib, just code). It has an IBDesignable property that stores the name of the xib it's supposed to load. In its awakeFromNib, it loads the Xib at the path, adds it as a subview, and adds some constraints so that the subview has the same size as the XibLoadingView. It should also store the subview in some property, eg. `loadedView`. You can now add a `XibLoadingView` in your controllers interface builder file (probably a storyboard), and set it's `xibName` property to `WidgetView` (or whatever your xib is named). In your controller, you'd have an outlet to the XibLoadingView; however, you actually want a property that points to the widget view that the XibLoadingView contains. So what I did was to add a computed property for that. So I'd have `var widgetLoadingView: XibLoadingView!` and a `var widgetView: WidgetView { return widgetLoadingView.loadedView as! WidgetView }`. Now, from the controller, I can just use that property: `self.widgetView.setup(image: someImage, text: "FooBar")`. Takes a little bit to get everything working, but once you do, you can reuse views designed in interface builder quite easily. Biggest problem is that the XibLoadingView will be an empty view in interface builder as the view that it contains is only loaded at runtime.
First, your program is serializing valid JSON. The `"e"` and `"j"` keys are arrays of `NSDictionary` instances, as you specified when you instantiated `childDataDict` as `[NSDictionary]()`. (Note the brackets.) Second, if you don't want it to be an array of `NSDictionary` then specify it as `NSDictionary()`. In any case, let's say you do want your JSON to be free of arrays. You would make `childDataDict` a dictionary and you would set the keys accordingly. If you wanted to construct it from multiple dictionaries (e.g., from several `tmpDict` instances) then you would need a strategy to merge the dictionaries (like http://stackoverflow.com/a/26728685 for example). Using the `merge` extension from that Stack Overflow answer lets us do this: var childDataDict = ["a1":1, "b1":2, "c1":3] childDataDict.merge(["a2":1, "b2":2, "c2":3]) var parentDataDict: [String:Any] = ["a":1, "b":2, "c":3, "d":4, "e":childDataDict] parentDataDict.merge(["f":1, "g":2, "h":3, "i":4, "j":childDataDict]) do { let json = try JSONSerialization.data(withJSONObject: parentDataDict, options: .prettyPrinted) print(NSString(data: json, encoding: String.Encoding.utf8.rawValue)! as String) } catch let error as NSError { print(error) } Note that I am using Swift dictionaries here and not the older style `NSDictionary` as you were. Also note that because we are no longer using arrays, the content of the dictionaries is unordered.
Yeah, I just figured this out as well lol. Turns out it was a problem with my server side code. I thought the problem was with the json I was sending. There goes 3 hours.
I FIXED IT! Again, thank you all for helping out! I ended up doing this: @IBAction func DatePicker(sender: AnyObject) { let now = NSDate() let then = myDatePicker.date let flags = NSCalendarUnit.Hour let calendar = NSCalendar.currentCalendar() let components = calendar.components(flags, fromDate: now, toDate: then, options: []) label_1.text = "\(components.hour*(-1)) Hours" It feels pretty good to have made my first ever app! Next up, Skynet 
Developing a mini-framework for Firebase integration, for internal company use across several commercial Apps. Includes swizzling various Cocoa Touch methods to monitor UI activity while avoiding the pollution of business and presentation logic with logging code.
Hi Leo. The answers to all three of your questions relate directly to the iOS SDK, rather than the Swift language (they're not quite the same thing). I think you'll get a better response to this one in r/iOSProgramming.
[removed]
As u/dcpc10 says, [Unity 3D](https://unity3d.com/) is a great option for game development across several platforms. If you're just wanting to target Mac platforms though, Xcode is suprisingly capable at game development itself, with a 3D scene-graph editor, physics simulation, the [Metal SDK](https://developer.apple.com/metal/) and more tucked away inside.
The callbacks you are looking for are available as part of the `UICollectionViewDelegate` API; under '*Tracking the Addition and Removal of Views*': &gt; `func collectionView(UICollectionView, willDisplay: UICollectionViewCell, forItemAt: IndexPath)` &gt; &gt; Tells the delegate that the specified cell is about to be displayed in the collection view. &gt; &gt; `func collectionView(UICollectionView, didEndDisplaying: UICollectionViewCell, forItemAt: IndexPath)` &gt; &gt; Tells the delegate that the specified cell was removed from the collection view. There is an alternative way you could achieve this while also confining all the code to a `UICollectionViewCell` subclass. That's by overriding the `window` property that it inherits from UIView. Cocoa Touch sets the `window` property whenever a `UIView` gets added to the view hierarchy, and resets it to nil when removed again. By intercepting these changes you could implement the same behaviour. This assumes that `UICollectionView` does removal off-screen cells from the hierarchy though, which *might* not always be the case.
Just go ahead and do it yourself :)
[SwiftGtk](https://github.com/TomasLinhart/SwiftGtk) looks promising! Plus, if having an accompanying design tool is important to u/D3m0t3p, then the [Glade](https://glade.gnome.org/) designer for GTK may be helpful.
What about something like: let test2 : () -&gt; Int = { if false { return 1 } fatalError() }
I would recommend looking into [GPUImage](https://github.com/BradLarson/GPUImage) It's an incredibly powerful library that allows you to add live filters to video feeds, as well as filter photos, plus probably more stuff I haven't even discovered. I have an application that applies and adaptive threshold filter to a live camera feed and you can adjust the intensity via a slider. I am sure there is something to play with the saturation.
you are doing better than me. A good chunk of my stuff isn't upgrading. Back to Swift 2.3 for now.
Like [this](https://en.wikipedia.org/wiki/Closure_\(computer_programming\)), or [this](https://en.wikipedia.org/wiki/Weak_reference)? Those aren't exactly new to Swift. 
&gt; I can't find any Linux specific release notes that state whether the 3.0 release was compiled against libCurl or not Can't you just inspect the binary? It seems like this would be really easy to determine.
I use the [official apple language guide](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309) as a starting point. Then onto blog sites like [raywenderlich.com](https://www.raywenderlich.com/) or [nshipster](http://nshipster.com/), or the [many other iOS dev blogs](http://www.thomashanning.com/best-ios-development-blogs/) for more specific iOS usage. Also, you could check out [Swift Apprentice](https://www.raywenderlich.com/store/swift-apprentice) from Wenderlich's team if you haven't yet. It's very accessible.
Thank you for you're response. Since I just started learning programming and swift, this answer way a bit over my head. But I will work towards better understanding how to use what you gave me.
Cant drop support for ios8. Swift 2.3 it is for a while :(
I'm not really sure what you're trying to say in this statement. It feels passive yet aggressive at the same time. If that's not your intent then I apologize, but that's how your response reads. Thank you for taking the time to respond and I do appreciate help from the Swift community. 
Some of my smaller side projects have'nt been to bad moving to swift 3, but at my day job the application Im working on is quite large. It's taken me two days to get back to zero errors and zero warnings.
Awesome thanks Paul
Thanks!
nvm i figured it, it is Error instead of NSError now. 
Sweet. Look forward to banging out those challenges! Nice to have an alternative to Cracking The Coding Interview...in Swift!!!
I don't think I really do. I mean, yeah, I've got some fuzzy notions about initialization and the editor is kind of driving me bonkers with what appear to be pointless technicalities (Class has no initializer - that's a lovely cryptic bit of nonsense that's hard to track down). So I admit I'm a bit new on the details. I have read a lot of 2.2 but until you use it, not a lot sticks. I'm sticking with 2.2 for now. That's what the pile of code I'm working on was written in and I've got a tight deadline and no time to update it. That said, I gotta say I think you Swift fans are easily amused by gadgetry. I hear the ravings of the wonderfully powerful enums and switch statements and I really really really just don't get it. Its syntactic sugar. And it isn't even that sweet. You can completely replicate a Swift switch statement with an 'if-else' ladder or dictionary of closures or an ordered list of closure pairs if you really feel the magic matching is crucial. Its not really new, or revolutionary, and honestly I think its superfluous and encourages bad programming. Ditto the enums. Yes, I suppose it is nice that you can tie symbols to enumerated values and they're not just integers anymore. Its really ducky that they are treated as distinct types. I suppose to some the ability to switch on a string might seem novel - although PHP programmers have been doing it for years. I honestly don't define a lot of enums in most programs. It doesn't come up. If I do have a constrained value, I'm probably enforcing it with UI pick list controls and a database reference table that populates them so I can change it without recompiling. So color me unimpressed with the magic switch statement. Its an anti-pattern that encourages dispersal of concerns and discourages cohesiveness. There are two philosophies of language design. C, Smalltalk, Objective C, LISP, basically provide a very very minimal language and then you can build all the other features via libraries. Smalltalk takes this to extreme by not even having an 'if' statement. If you have polymorphic messaging and blocks/closures you can build every other language construct in terms of that. Every single one. Then there's the road Swift (and C++ and some others) took. It is an enormous language with a pretty basic library but dozens of constructs. The language is huge. Bloated even. Most of the stuff in Swift is cruft and of highly dubious value. The switch statement is at about the top of my list. Tuples might be one step higher. I appreciate the offer of help. I'm sure I'll be completely vexed by something by the end of the day probably in need of it.
In the place where I left this comment: // return true or false using whatever logic you write the logic for checking whether the int is a leap year or not, and return `true` if it is, otherwise `false`. In the part where I wrote: // check your arrays now that they're filled. You can inspect the `leapYears` array to see if it contains what you expect to be the leap years. You can inspect the `nonLeapYears` array to see if it contains what you expect to be the non-leap years. For any numbers that are wrong, you can use those to help explain where your code isn't behaving correctly. When you describe your problem, you need to include inputs that aren't providing the correct output, what output they are providing, and why you believe that is wrong. As your question is currently phrased, it is unclear what you expect, why, and what inputs are giving incorrect outputs.
Also really looking forward to Xcode / Appcode integration of the package manager. Yet to find any clues as to how and when, though...
If you need an alternative to gpu image, core image will let you do most of the same things and you can count on updates from apple.
So you're just going to be a douche unless somebody else does the work for you? Okay, great.
You would be very hard pressed to beat NSCharacterSet as it performs in O(1) time. Your solution is O(n).
every major release
Any examples?
There are lots to choose from. Perhaps start with my own, [Hacking with Swift](https://www.hackingwithswift.com), and see how you get on. (Before you ask: yes, it's updated for Swift 3.)
download xcode 8 and run the code you wrote 3 days ago
which one(of the ebooks) you thinks is the best. IYO... 
It depends on your skill level and goals. For example, if you're new to Swift, buy Hacking with Swift and follow the guide book it includes. If you've got some experience with Swift and want to know it better, go for Pro Swift. If you''re an experienced developer and just want to learn what's new, buy Practical iOS 10. 
True, as long as it's stored in a static/file constant - it'll still be O(n) to initialise. Alternatively, Set&lt;Character&gt; is native to Swift, so will presumably have a bit less overhead.
wOw gr8 thanks a lot.
I just paid for this a few days ago and am happy the download files were updated promptly! Thanks!
I just released a new version that solves issue #2, to support pretty printing enums and structs. also, added date logging along with the type name logs you requested. https://github.com/DrewKiino/Atlantis/issues/1
The compiler doesn't know what is in the dictionary times. Sorted runs over each element of the dictionary, and claiming that it is simply an NSDictionary tells it that you are trying to call the subscript on something that the compiler only knows as an Any. Also, times is an array of dictionaries. if let times = results["runtimes"] as? [[String:Any]] { //... } Even then, your sort wouldn't work the dictionaries still are valued as any. Your sort is going to have to be something like this: let sorted = times.sorted { Double($0["duration"] as! String) &lt; Double($1["duration"] as! String) } That being said, this is hacky. You might want to use SwiftJSON or some other package to convert your JSON objects to classes or struct so that you can work with cleaner code. At the least you'd want to unwrap this such that you aren't force unwrapping.
I know it can all seem to blend together sometimes; but look again... this isn't actually a *Swift* question at all! You'll get a better audience for this kind of thing in r/iOSProgramming.
You can still run .swift files with swift &lt;filename&gt;.swift
Decided to bite the bullet and write a a library to interface with a REST api, so far so good 
I think you mean #1. But you also missed the main thing I opened that issue for: &gt; It would be nice if it instead printed something more like: &lt;CustomObject: { "id": 123, "name": "Doug" }&gt; &gt; The actual exact format doesn't exactly matter. But this is closer what I'd expect to see from NSLog in Objective-C for example. Sometimes it's not just the properties that I'm interested in, but also the type itself. 
It's 100% part of my entire deployment strategy. I've even built entire deployment scripts around it. If you're getting errors they're probably problems you need to fix anyways. It does a great job of forcing best practices.
They've tweeted it will be released this week: https://twitter.com/realm/status/773665903946952704 There is also a lot of activity on the GitHub repo, so I expect they will release it soon.
&gt; http://www.totem.training/swift-ios-tips-tricks-tutorials-blog/ux-chops-dim-the-lights This is awesome and not tested it yet but from the example it is exactly what I am looking for Thanks. +1
We use is on a lot of our projects where I work. It really does save time when doing fresh clones from github or updating pods, repositories, or other dependencies. 
Excited to read this! Thanks!
Yes, we do and we love it. We have deployment for testing and production fully automated, including syncing certificates with match etc. After we decided to setup Jenkins for our project, it was a matter of minutes to have fully working CD job, because we had everything already set up in Fastlane. It might be hard to setup, especially if you don't know Ruby (I don't and I sometimes struggle with doing something more advanced or unusual).
Yup, didn't notice the doubles in the original JSON we're quoted in strings. So first it requires a cast to a String followed by a conversion to a float.
It looks like you know more about interface builder than actually coding. As for your solution to saving things, look into Coder/Decoder/KeyedArchiver/KeyedUnarchiver (remember Apple removed their NS prefix). I recommend Ray Wenderlich's book iOS Apprentice. There is a tutorial that teaches you how to make a checklist app and uses data saving methods to save and reload it's data back when the app is loaded again.
I just started looking into this, looks pretty solid. Anyone have any experience with it or can compare it to other Swift web frameworks?
Great job guys! You guys worked yourselves to the bone, and it looks fantastic! Go Server-side Swift! Seriously, nice work.
Vapor can be self-hosted or hosted behind Nginx. Or on Heroku, Docker, etc.
As an unbiased person who has used and collaborated with most of the Swift web frameworks, I can tell you that Vapor is great and definitely worth trying. They've done a very good job with it. 
I want to install on my raspberry pi that running Linux, but doesn't work. That is sad.
With Swift 3 finally out, server-side Swift is shaping up! Excited to see what people build with it =]
try just getting the array out first, because the key of dictionary has to be hashable, you don't have to cast. if let array = results["runtimes"] { if let arrDict = array as? [[String:Any]]{ // ... } } or: if let array = results["runtimes"] { if let arrDict = array as? [Dictionary]{ // ... } }
Hi MyNameIsNotJeff! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/534h5m/leave_the_light_on_written_in_swift_and_spritekit/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Using Fastlane has saved me literally hundreds of hours over the last two years. I absolutely recommend making it part of your test and deployment process. 
Huh, really? I've never really encountered an issue that wasn't worked out in an afternoon.
I'll be suprised if any http stack for swift will have hard dependency on third party http server, especially considered Apple trying to pitch it for systems programming, where it'll sooner or later clash with Golang that comes with HTTP server as part of stdlib.
It's usually your best bet to just go with whatever is the latest and greatest. So I'd go with Swift 3 for sure. Good luck!
Definitely Swift 3. 
Good job guys! keep it up. An admin panel as in django will be an icing in a cake.
The prices right now are pretty shitty due to the fact that the models are two years old at the best and Apple doesn't discount their products. The best deal, in my opinion, is going to be the baseline 13" MBP that they announce in (hopefully) October. It should e base 256GB/16GB for $1300 or so. I can't suggest buying any Apple computer at the moment, though.
Now that Swift 3 is out there's really not reason or logic to learning an older and soon to be deprecated version, although Swift 3 is not radically different form 2 in any way. 
Complete beginner programmer as well (began learning a month before Swift 3 release). I came across [this book](https://www.raywenderlich.com/store/swift-apprentice) and it's definitely worth the $ imo. 
Nice! Was just looking at migrating some stuff away from Python this week :) PS do you guys know the repo for the Stencil template provider linked from [the bottom of the View documentation](https://vapor.github.io/documentation/guide/views.html) is missing? Should be [here](https://github.com/vapor/stencil-provider) but it 404s
Swift 3?? How did you do that??
Could i get a pdf version as i cannot afford this book..?
https://medium.com/swift-programming/uistoryboard-safer-with-enums-protocol-extensions-and-generics-7aad3883b44d#.m1xbubfqm Like most great ideas, this one has been discovered before. But that doesn't make it any less awesome! :)
If this is a feature and not a bug, how can I prevent the dictionary from holding the 'nil' value?
For free? Unlikely. You could torrent it I guess but the book is well worth the money (the PDF version at least) as it comes with free updates for a lifetime. 
Hi! My project using Alamofire and SwifryJSON. And for now there is no official version of SwiftyJSON, so it was a problem until I changed the branch of where the pod is. After this, everything is okay. My opinion is to wait for your libraries up to swift 3, or use native language features. And reinstall all pods or update it!
Yes I'm using Alamofire as well, next to Firebase and a couple others. Seems like they are all up to date. Going to install xCode 8 first, then do a pod update, then start the project in xCode and see what happens.
Check [this](http://stackoverflow.com/a/27044344) answer on Stackoverflow. I think the way Mirror is working at this moment is a feature, and not a bug.
Natively or through a vm?
Seems right to me. It's a var on TestClass, and its value is nil (you even set it explicitly, though that's not required). Perhaps the confusion is that dictionaries in Swift might more typically be something like `[String: AnyObject]`, and Optional isn't an AnyObject -- but here the dictionary is `[String: Any]`, and a nil `Optional&lt;String&gt;` is-a struct, so it is-an `Any`.
Swift 3 isn't so radically different to Swift 2 that you should just ditch the Big NerdRanch Guide, especially as there aren't that many good Swift 3 books out there at present. I'd carry on with that book. But yes, you should definitely code in Swift 3.
Yes I did, I also tried to build swift using swiftenv. Either one work and I stuck in compiling swift/lib/Immediate/REPL.cpp Turns out clang++ cannot find "HistoryW" and "LineInfoW" symbol. I added "include &lt;histedit.h&gt;", "typedef History HistoryW", "typedef LineInfo LineInfo", and clang stop complain about them but I still couldn't find a way to help clang to find `el_wset`
I was also using one line of code to calculate my cell sizes with insets and just because I did not specify the numbers as cgfloats, my build time jumped from few seconds to two minutes. Thankfully it's back to normal now.
Together with a colleague I spent 2 days on not resolvable warnings involving optional protocol methods. And that was after we already spent more than a day migrating to Swift 3. We have a mixed Swift and Objective-C project with 2 targets. Even they are only warnings the corresponding methods then won't get called and our app crashes. Apples says it's a bug but we don't know of course when it's gonna get fixed. So Swift 2.3 it is and almost 4 wasted days. I'm not exactly happy.
I have a relatively small project (~1500 lines of code) that ended up with about six or seven errors after translation. I fixed most of them fairly quickly, but two of them flummoxed me. The solution turns out to be that NSError is now bridged to Swift as the Error protocol, and once I changed my NSError references to Error, things worked. Interestingly, this also caused a runtime error where I had cast to an NSError in a different part of the code, and determining the fix for the compile errors clued me into the solution to the runtime error, which I don't think I ever would have figured out with that happenstance. Good luck with the migration!
i appreciate the book @paulmgm and did u find a torrent version of it @simran05?
Another way of doing this and /u/ThinkLarger pay attention here You can go without the struct Fact and do something like &gt; protocol FactProtocol &gt; protocol LegalFactProtocol : FactProtocol that way all legal facts can stand in for facts while facts can't be legal facts. That's if you want to keep it strictly within protocols. Then you can just create the structs and implement those protocols. And of course the reason for doing this is encapsulation. You can pass your protocol around that contains just a few properties other classes can use (as opposed to passing the actual struct around and allowing everyone to have access to everything)
I just tried to convert my project today. Hundreds of errors(edit it said like 150 but I don't think it was done compiling). Most of them in the drawing with CoreGraphics. It didn't convert ANY of the CGPathAdd... lines. It is a massive pain in the ass to turn: CGPathAddLineToPoint(path, nil, 0.2 * w, 0.45 * h) into path.addLine(to: CGPoint(x: 0.2 * w, y: 0.45 * h)) A hundred times. The error it gave me after migration was that I couldn't use nil for the CGAffineTransform. I'm wondering if I was doing that incorrectly.
&gt; self.age = try json.get("age") is entirely possible - no need for json.getInt("age") or json["age"].int Could you guide me on how to do this? I'm working on my personal library as well, and I just can't figure out
Yes, if you target those lower versions. However, SiriKit features won't work on them. You'll probably also have to check for the API first (Xcode will suggest a fix-it if you use an API higher than your minimum target)
Sure! You can use [this](https://github.com/Zewo/JSON/blob/master/Source/JSON.swift#L101-L124) as a reference. Basically, given the generic function `get&lt;T&gt;() throws -&gt; T`, the compiler can figure out `T` from pretty much any hint you give it (in the age example, it would infer that self.age is an `Int`). Once you have `T` it's just a matter of checking whether the type you have inside your json (i.e. `Bool`) is `T`. In the reference it does this using pattern matching, but you could achieve the same thing in a small variety of ways.
Thanks for the reply. That's what I wanted to ask: Will SiriKit feature work? So, the answer is NO. Right? 
Naturally he would use a plural possessive pronoun on **twostraws**.
I spent two days to migrate to Swift 3, overall it was pretty smooth even if i'm not a big fan of all the changes and sometimes the lack of documentation.
Global replace: CGPathAddLineToPoint(path, nil, with: path.addLine(to: CGPoint(x: You'll probably have to add the extra ) manually then Xcode should offer to add the y: Cmd-', Return is helpful to quickly get through stuff like this. Finally, when I had to add my extra ), for example, I found it to be easier to put it in the clipboard and paste it into the buffer. 
I recommend you to buy a mac, about 2 years ago I was in your same position,between building a hackintosh or buying a mac, and i have no regrets in the decision i made, you could buy a "cheap" mac like a mac mini for programming, and have a pc for other stuff
I spent 2 days last week trying to migrate before abandoning my Swift 3 conversion. I managed to get it down to a couple of errors. One was a problem converting a non-escaping closure to an escaping closure. Despite marking the closures as escaping I couldn't get it to compile. No information on the interwebs as to how to fix it either. I also had a problem migrating multiple targets. Xcode just decided it wasn't going to migrate about 50 files and I had to do it by hand. I ended up updating to 2.3 instead and even then I ran into problems. The first was a problem with CIContext's constructor not being available on iOS 8. The other was a a bug with Xcode handling of entitlements when using multiple build configurations. A very poor release in my opinion. I'll limp along with Xcode 8 for now, but I hope there's a bug fix release coming out real soon.
Very simple. Native apps run better and feel more consistent to every other app running on an iOS device. That will always be the case. As a developer that writes both Swift iOS apps for self as well as working on a regular job production web app that uses React.js and a Mobile app for my work that uses Cordova for cross platform apps. Why does my work do a cross platform app, because we need it to run on iOS and Android and the other developer has expertise in Cordova. So for us the fastest to market is Cordova. However, React native would work in that case too, but is still a bit too new for us. Back to Swift, given the choice I would ALWAY first choose Swift to get the best experience out of an iOS app, and that Swift code is very elegant and makes it so much simpler. Another example is that when not using Swift on an iOS device you are stuck with whatever React or Cordova can accomplish as well as that that is cannot. For instance, keyboards. Our app cannot customize the keyboard in exactly how we want, we are stuck with whatever is given to us, whereas in Swift and Xcode what we want is exactly what is available, meaning we need the semantics of an iOS app, in a non-Swift Xcode development environment, and it just is only maybe 90% there and that last 10% is really frustrating and time consuming. I like React, but I am still about wanting the same experience as all the other apps on a device, so personally I would use Swift on iOS and Java/Android dev for Android.
Bravo
The most annoying thing for me is that the built in docs aren't working at all and autocomplete is only working occasionally meaning that I'm having go manually look up every little change that's non obvious (like the CGPath thing).
The alternative means that I'd have to start thinking about android. I don't want that on my shoulders. I have a really hard time liking Android. Believe me, I've tried. I don't like the UI, all API level weirdness, and the general look and feel. If I were to lead a new project I'd take a look on the alternatives, but as long as I'm the one doing any coding I won't choose anything other than Swift.