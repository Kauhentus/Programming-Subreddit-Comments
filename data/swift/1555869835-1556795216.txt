Swift is my first programming language, and I‚Äôm just getting started. This is my first guided tutorial on hackingwithswift.com, hence the simple name ‚Äúpictures‚Äù :) Thanks for you answer though, I hope when I‚Äôm a little more experienced I‚Äôll be able to understand the code you just gave me and apply it!
One piece of advice : use mono-spaced fonts in your code editor. You‚Äôll thank me later üòâ
I'm not trying to be a dick, but I don't want to give you the answer. This is a great exercise that you should be able to do on your own. Figuring it out on your own will also help improve your skills on researching and learning. Here are a few pointers on how you can do it. * Research and learn how to do something (anything) when a button is pressed. * Research and learn how to set the background color * Research and learn how to create a random color. Then, put it all together.
__I like how reddit etiquette forces you to clarify you're not being a dick, when simply asking a question__
Great advice) Coz researching and copying code are main developer skills)
Swift now also runs on Windows native.
`var postData = [String]()` `override func viewDidLoad() {` `super.viewDidLoad()` `let ref = Database.database().reference()` `ref.child("D/").observe(.childAdded, with: { (snapshot) in` `let post = snapshot.key as? String` `if let actualPost = post {` `self.postData.append(actualPost)` `}` `print(self.postData) //returns correctly with data` `})` `print(self.postData) //returns empty` &amp;#x200B; That print at the bottom returns empty, very new to Swift, not sure what to do.
And if you don't know any of the services on the device you can use an app like light blue explorer to scan for and identify them easily.
You can do backend dev on linux/mac MacOS apps
Hey, I'll help you troubleshoot your code. I'm trying to get better with Swift myself. I'm not so fluent in Swift but I can tell you that you'll need to import UIKit (to change UIColor) and GameKit (for the random function). I'd be curious to complete it myself and willing to help someone learn along the way.
I‚Äôd say importing GameKit to do this is way overkill.
But only basic vim settings are working. My vundle based plugins for example won't work :(
Yup me too. Xvim holds me over, but one keyboard shortcut from Open in External Editor, and things can get serious.
I guess in Swift 4.2 you can stop usingGameplayKit to call arc4random_uniform() and just use the random() method on numeric types now. So that's neat.
Both
Depends entirely on the company. For your job you need to know the latter. For the interview you may or may not need to know a lot of the former.
You‚Äôve always been able to use arc4random in Swift without importing GameKit
Oh okay. Well I've been importing way too much then. I appreciate it.
Just drag and drop icon in the tabbar (change order).
Lol did u try using ib with git and using the same file with multiple members? Conflict hell, plus is pretty damn hard to follow the changes
Yes we use git. That‚Äôs not different than using a .swift file with multiple members. You‚Äôre gonna end up with conflicts. I agree on difficult to follow changes but I have never once in my years of programming (since 2013) had to ever look back at a storyboard/bob file and follow the changes or even look back to older versions.
Good job but thats just u
Lol its different af
I work with a lot of iOS developers. We have over 30+ people on the iOS app. I have never heard anybody ever talk or complain or ask for help regarding storyboard past changes/differences.
Yeah its important when something happens. Not saying that its something i do daily lol. Its like saying i never used a database backup
Like I said in another comment, if you have several people working on the same storyboard/nib file, sounds like an issue with the team. I see ALL conflicts since I manage the CICD and jobs fail if there are conflicts. Only a single time was it related to a storyboard in 2 years.
This really doesn‚Äôt support why we would be better off not using them just because there might be a single rare instance you might check a previous change and storyboards are bad at it. It seems to me like such a rare case that it doesn‚Äôt support using programmatic over storyboards.
1. App architecture (MVC, MVVM, etc) 2. Language specifics (Google swift/objc interview questions) 3. A bit of problem solving 4. Study the company‚Äôs app (eg. If they‚Äôre using maps, sockets, AVFoundation) 5. Design patterns (Coordinator, strategy..)
You sound old school. Sometimes u gotta learn new tricks. If i was the only one defending ib i would be a bit concerned and listen lol
Every company is very different, and most want to know what your experience is and how you think, not what you crammed for a few days before the interview. Be yourself, and be honest. If it‚Äôs a good fit, you‚Äôll do fine. If not, it wasn‚Äôt a good fit. I‚Äôll tell you what *not* to do, unless they explicitly mention it, don‚Äôt talk about what Pods or Carthage libraries you know. Any dumbass can blindly use a library they don‚Äôt understand. If they‚Äôre hiring you for development skills they want to know you can develop, not assemble other people‚Äôs work.
And don't share photos of code, share the text.
It doesn't, that's just being very very polite. The response was pretty obviously respectful and didn't need any disclaimer.
Google wants its own Android/Material UI everywhee instead of a UI that platform users expect, which isn‚Äôt the right priority, and god knows what Facebook is using these days. Spotify is probably repurposing web interfaces, etc. So, not great examples of companies OR UIs. For that matter.
Yep, you just needed to import Darwin. In fact, you can trim it down more but that's usually enough.
No one ever does everything in IB. The hallmark of IV is creating view hierarchies that are, IB parlance, ‚Äúwired up to code‚Äù Anyone who thinks otherwise doesn‚Äôt really know IB Zander hasn‚Äôt bothered to know it, much less USE it. Last time I checked, Android dev has nothing like it. Do you know, without looking it up, what exactly a XIB loads and produces?
I‚Äôve worked in both environments and the more complex a view hierarchy, the more non linearly difficult it is to create it in code.
You know this how?
Non-linear, huh? I guess Facebook with 100mb of code and 40k classes was impossible to build.
 Maybe I should have said that differently. I didn‚Äôt mean that I thought anyone was actually doing everything in IB without any code, that‚Äôs not even possible. I just meant that some things can‚Äôt be done in IB visually and would need to be done in code. This code could be implemented in the subclass linked to the XIB. I wasn‚Äôt implying it couldn‚Äôt be done directly in conjunction with IB just that it couldn‚Äôt be done in the IB itself.
The Pods thing can be a double edged sword. I got rejected from a job because I told them I‚Äôd never used CocoaPods‚Ä¶ Why? Because I‚Äôve always written my own libraries and have never had a reason to copy/paste code with CocoaPods. Some companies just don‚Äôt care about your experience and just want to tick off boxes.
Yeah, memory warnings doesn't seem to be reducing anything. After watching a rewarded video and closing it (requesting a new one). The memory graph shows that it's holding onto 3 web views (1 for the banner ad loaded, and the other 2 I'm assuming for the first rewarded video and then the next one). &amp;#x200B; At this point I've also noticed that the memory doesn't go back down after the video finishes playing. When the video starts playing I get around a 50mb increase and after closing the view it doesn't go away. &amp;#x200B; I'm 99% sure that my implementation cannot be so horrid that I'm introducing these leaks. I just followed their steps into integrating. [https://imgur.com/wCehuXa](https://imgur.com/wCehuXa)
If someone dinged you solely on not using CocoaPods then that's not a place you want to work. It's a simple thing to pick up and something that a 15-minute review would get you up to speed. To not hire someone because of that almost certainly means there are far more issues at that workplace because of their terrible hiring practices.
I did web front end, wordpress/magento/drupal for like 2 years. Then i was torn between going ruby or objc next investing on a bootcamp and i went with objc. I did it to expand my skillset rather than specialize on web. I dont regret it and i would not change my decision if i had the chance. Web dev knowledge comes useful for mobile cause in the end even an app is some kind of website (or more like a website IS an app). Ive been coding objc in corporate for 3 years and now i ve caught up with swift for 1 year. I think the background on web is great cause its still very relevant when you do anything on the internet. Even on swift you might need to deal with html to create nsattributedstring. Also on top of that, you ll be more useful when dealing with the backend, or even better, might be able to do some backend work. Now im some kind of full stack. I can code a swift ios app AND also a node js backend. I would like to believe that i made myself a more attractive candidate who could fit and be impactful in any team. And i do believe that im at this point thanks to taking the leap of faith to make a career switch into mobile dev. If u are considering so, its not a bad choice at all. Having multiple perspectives helps a lot, makes you more open minded, and understanding. Just stay humble and u ll be great.
This is a great idea. I can't help but feel as though subtitles would be much more effective.
What does you mean?
As a hearing person, I‚Äôm intrigued by this. It‚Äôs a foreign language I don‚Äôt understand. i‚Äôd love to have subtitles so I could follow along. :)
It was American Sign Language.
Yes, I don‚Äôt know ASL
Yo, I think this tutorial would be a lot better if you actually had a mic. The hand gesturing sometimes got the point across, but most of the time it just looked like random movements.
Remember I was deaf I was not good with voice at all. But I will hire ASL interpreter after youtube monetized our channel. üòÅ
That why I am try to get ASL interpreters after youtube get monetized our channel!
I know both. I‚Äôm just saying storyboards aren‚Äôt as bad as people make them sound.
I agree it would be useful to have subtitles, especially for Deaf and HoH people who don't use ASL ‚Äî like people from the rest of the world.
You are kidding, right?
Deaf community used this American Sign Language as well. HH could be involved that ASL too, if they don‚Äôt hear as well. There have close caption in that videos for heard community but I still need hire ASL interpreters after youtube got monetized on this channel then I will hire and paid them for their work! :)
Only *North American* Deaf communities use ASL. It's a bit exclusive to people from other English-speaking countries where they might use BSL, ISL, Auslan, NZSL, SASL, etc.
Oh right. I really want to help those people in the world . But it suck because I never understand those kind of language. I grow in the America that what I use American Sign Language. But my goal is help Deaf/HH to grow win WWDC20 scholarships in next years! WWDC19 is not my goal but my goal is next years! I have so huge plan this years for teach swift language!üòÅü§ò
The thing is, the it has the icons wrong for their respective tabs... :)
For example: I have a map view tab with a map icon, but on the tab bar side, it doesn't show a map icon, it shows the icon for the other tab car (which has the thermometer.) So I can switch the like you say by drag and drop but they keep the wrong icon.
Okay, fair, but why? It takes 2 lines of code to register a nib to a TableView/CollectionView, why would you rather not have to type 2lines of code (one if you create an extension).
Its more about the way he stated it most likely. I can see people thinking sometimes it makes sense not to write your own library when you can get what you want or most of what you want from a third party library. It shows inexperience to say why copy someone else's code in response to a question about cocoapods.
I've been learning RxSwift and I quite like it. Setting up a data source as a driver is easy. You can also use bind to, but I'm not sure which is better (bind or driver). Unfortunately, there are not many good resources out there with enough real app examples to teach beginners like me (I'm not even a coder, but a UI designer learning code). The learning curve can be quite high, but I can see many benefits with it. Especially for someone coming from React, where everything is reactive and declarative. Lately I've also tried ReSwift, because I've been learning React and in React they use Redux. I like the unidirectional data flow of ReSwift! And I'd like to combine it with Rx, but I'm not sure yet which parts I should use Rx for, and how to handle things like the View Model. Now I wonder is it a good idea to use ReSwift in combination with RxSwift? Does anyone have experience with this? Which part would you use RxSwift for and which not?
For me, nibs and storyboards are annoyingly slow to load and hard to interrogate if you need to track something down. You can‚Äôt just do a project-wide text search if you‚Äôre looking for something. Clicking around to find a constraint‚Äôs values takes more time than I‚Äôd like to waste
Honestly it's hard to say, it all depends on the employer. Programming tests during interviews are an incredibly shitty way to evaluate someone but they're currently the norm. #2 in my personal opinion is far more valuable than #1 for most dev work. While algorithms are important, you'll be doing #2 for 99% of your day to day dev work. And as others stated, don't mention 3rd party libraries. There's a crisis of sorts in the software dev world where a lot of newer people are relying on third party libraries with the "if you're writing a lot of code, you're doing it wrong" attitude and it's biting everyone in the ass. A few years ago I had to rewrite an entire system because the previous dev used so many third party libraries that not only did his system barely run, but he couldn't manipulate it to do what the business needed because everything was tied to dependencies.
+1 for not mentioning pods/third party libraries. Where I currently work that was one of the things they hammered on, they asked me if I used them and I said something to the affect of "I'm familiar with them, but I don't use them because I don't like to rely on dependencies unless absolutely necessary." That was exactly the type of answer they wanted because too many of their past people relied so heavily on third party libraries.
nothing. i am from HK.
cool
I think you‚Äôre in the wrong sub. Try r/iOSProgramming.
That's true, this isn't Swift specific.
I'm really happy something like this exists, more power to you! Now you got me thinking: what do deaf people generally prefer, reading, or watching people signing? Are there benefits to one versus another? Idk, for example, is one faster, more expressive, etc. than the other?
Thanks for this noticed! Remind: We are remake string - integers (string - integers will make more shorts and spit to new two short videos about integers and bit integers) I don‚Äôt want people get confused thought long videos (that what course have mixed so this new video have more better and more short videos so that what I am going remake to make people will understand what actually means. (If they have watched this videos then they don‚Äôt have to watch it) I am make more short videos each tutorials! :) I was born a deaf and I know those deaf community in Kansas for many years. I believe deaf community prefers listen with Sign Language because ASL is beautiful and more face with an feeling when sign language was begin. This ASL is not prefect English like this grammar English. (I am still learn English) I believed Deaf community prefers this ASL than English as well.
I am not kidding. I born and I was become deaf But I have cochlear when I was 5, I was not really understood when they talk to me, I was good with hear to kind of the sound. (I can hear when police or emergency vehicles sound, Train and other few things as I know.) Yes, that is correct! :)
I don't mean you're kidding, I mean the other person.
Oh right.
I apologized about that you don‚Äôt understand ASL but I will be happy if you know some deaf community then you can share to deaf community then they could join to learn this swift language!üòÅ
Your coworkers properly encapsulate?...jealous... I'm currently refactoring a file that has four different classes (two unrelated) into one code file.
I've never once ran into this, I seriously don't know why others make this claim. I understand not following the changes but conflicts? I never once had this happen.
Interesting! Are English in ASL different languages? That might sound like a stupid question, but for example, braille is just an encoding for English letters, that's still the same language. It's like cursive vs print writing. Is ASL just another way to encode English, or is it very different as a language?
Here example of ASL &gt; https://youtu.be/vJY0t2FuquM :)
All sign languages are completely independent of spoken/written languages with the exceptions of things like Signed Exact English (SEE) which is arguably just English but with signs instead of spoken or written words. There is usually no correspondence between the spoken language of a country and its sign language: for example, all English speaking countries have their own sign languages. This is because the local sign languages developed independently in each country, sometimes even down to independent Deaf communities within the same country; if those community-specific variants have died out but some of their grammar or vocabulary remains in use, those contribute to local sign language dialects, of which ASL (American Sign Language) has many. Most countries have their own sign languages, too. For example, the US and Canada share ASL but have very different accents. Quebec has LSQ (langue des signes qu√©b√©coise). Both ASL and LSQ are based on France's LSF (langue des signes fran√ßaise). All the European countries have their own sign languages, too. In Britain, they use BSL (British Sign Language), which has two main descendants: Auslan (Australian Sign Language), NZSL (New Zealand Sign Language); there are also others, such as SASL (South African Sign Language). These four languages have a degree of mutual intelligibility with each other, especially NZSL and Auslan, but are still distinct. These languages form the BANZSL family, The LSF-based sign language family is almost entirely mutually unintelligible with the BANZSL family, meaning that Deaf people in America would not be able to communicate easily with Deaf people in Australia without using English. However, Deaf people who travel might learn a little IS (International Sign), an artificial language like Esperanto, which is mostly useful when going to international Deaf-related conferences. On the other hand, sign languages being visual means that speakers of mutually unintelligible sign languages can usually use gestures or visual descriptions to make rather complex ideas well understood; compare that to us hearing people who, if stranded in a foreign land with an unfamiliar tongue, are usually ill-equipped to communicate more than the most simple and basic of messages.
That has little to do with using CocoaPods, there are tons of frameworks, libraries, and packages out there to use that are not CocoaPods. Just because someone hasn't used one package manager doesn't mean that they avoid third-party code entirely. It's far too specific to draw that conclusion.
Thanks for the write up, much appreciated! From the outside looking in, I think it's a shame there are so many different signed languages. The target demographic is already so small, and to have it unnecessarily fractured even further along geographical lines is quite unfortunate.
As another outside (I'm hearing), I agree that it's a shame that the boundaries are so limiting. However, the rich history of each sign language reflects the diverse histories of the different Deaf communities in each country, reflecting different attitudes to the world around them. For example, an important element of a sign language is iconicity, which is the extent to which a describe replicates or gives a visual description of something or some action. For different reasons, certain sign languages are more or less iconic than others; ASL tends to be less iconic because of a perception that iconic signs lend credence to the misapprehension that it is simply English with gestures, whereas BANZSL family sign languages tend to be more iconic ‚Äî but the way each country's Deaf communities iconically *represent* the same concept can be **very** different, using different cultural queues. To illustrate this, whereas English speakers inherit a lot of cultural queues from Britain by virtue of the origin of the language, and practically the whole world consumes American media so is familiar with American English expressions, Deaf users have really only have their own immediate communities with whom to communicate ‚Äî prior to the modern age of media, captioning, subtitles, and high-quality English-language education for Deaf people, the only cultural queues many Deaf communities had to work with were specific to those communities, their experiences, their own histories, and the people within. This is, obviously, no longer *strictly* true for *every* Deaf person, but it does still remain true for some communities (especially with a lot of older people who haven't necessarily benefitted from some of the higher quality education afforded to Deaf children these days, although still far from adequate in most cases) and so the different sign languages often reflect this. Some signs can also show you how the dominant culture, Deaf or not, thinks about different concepts. The JSL (Japanese Sign Language) sign for 'family' looks like a little house formed from other signs that, individually, would represent different family members ‚Äî the Japanese kanji character compound for 'family', ÂÆ∂Êóè, also happens to include the kanji for 'house' ‚Äî your family are the people in your house. The NZSL sign for 'family', on the other hand, places more emphasis on the fact that a family is a group of people, the sign appearing similar to other signs that signify multiple people in one place. Another example is that ASL has a lot of signs that are really just fingerspelt (that is, spelt using a manual alphabet). As ASL uses one hand to sign its alphabet, signs that prominently use alphabetical signs feature prominently. However, BANZSL languages have two-handed alphabets; therefore, alphabetical signs are used much less often by comparison. In ASL, the sign for 'okay' is literally 'o' and 'k' signed one after the other; in NZSL, it's just a thumbs-up sign. On the other hand, NZSL users mouth the English word corresponding to the sign they're signing, an artefact of the audist education favouring lipreading, but ASL users don't do this so much. However, Deaf communities aren't really limited. Like I say, auxiliary languages are an important aspect of any sign language, so Deaf Americans and Deaf British people can always revert to writing if needs be, perhaps even basic lipreading. Plus, like I say, it's relatively easy for Deaf people to figure out what other Deaf people are trying to say through the use of gestures ‚Äî because their own languages are visual, working out what someone else is doing visually is somewhat easier than hearing people trying to work out what their completely different-sounding languages mean.
I‚Äôm still a beginner when it comes to iOS development, but wanted to share my experience implementing the coordinator pattern. I learned a lot during the process, especially about core iOS concepts like delegation and protocols.
This issue makes sense in the context of expense-to-compute variants derived from the same data, that needs caching to achieve good performance. I think it's just a bad (overly simplistic) choice of example. On a side note, I'm curious to learn how RxSwift solves this problem.
I was super excited about Result, but then I started using frameworks based on NIO and ended up just using Futures instead of callbacks. Interested to see where they are used going forward.
This implied, "You like storyboards because you haven't been doing development long" trope is extremely rude.
I think it's interesting they opted for a Result type where the right type must conform to Error. A similar concept exists (and has existed for a while) in Haskell called Either, which is the same concept but without constraints. It's common to use one branch to indicate failure (just like Result), but it is not required. I wonder why this design was chosen. To some extent, I think removing choice from the programmer can be useful because it encourages consistent practices. On the other hand, I think having choices can be powerful when used correctly.
AFAIK You can still use Swift.Error as the Failure type and catch any type of error. And any type can conform to error so the choices aren‚Äôt limited.
No one in their right mind would quote the Facebook app as an example of something to be proud of.
From memory it was considered as an alternative approach but the result type was seen as more of a standard in swift currently &amp;#x200B; Hopefully we will get anonymous sum types instead of needing to decide which specific enums go into the standard library
I don't really share that sense of attachment to regional languages and such. Im bilingual, and although I appreciate what bilingualism has brought to the table for me, I'm totally okay if my other language gets replaced over time with a more popular one. The history of it is interesting to me as a "oh that's a neat thing to know about", but I'll give it up in a heartbeat for more international cohesion. Just imagine what the internet would be like if it wasnt (for the most part) divided up along language barriers. Chinese internet is essential a while seperated beast, even though it is interconnected (well, mostly, thanks great firewall üôÑ), it's unapproachable to the rest of the world (poor Google translations aside) Regional languages are an artefact of, well, regions. They're doomed to fail, practically no new languages form, but tons disappear. As communication becomes more global, you don't have the isolation that's necessary for these diverging languages to form. Everything is destined to converge eventually, and I don't really feel any need to resist that at all
Result enum has been used for years, so it's nothing new.
You would need to do some work but the standard sharing action sheet can share a file (on mobile and forget the class name) The realm instance will have a file url you can pass to this class and it will let you share it via email / whatsapp / whatever the user has installed
Why are people still using Alamofire in 2019 to make the simplest requests? Also why are your request/response/endpoint/method packages assymetric? They should look like this: protocol ApiCall { associatedtype Request associatedtype Response static var suffix: String { get } static var method: HTTPMethod { get } } This way if you have a user struct, you can reuse it in multiple ApiCall's request/response type.
Right, but now it‚Äôs in the language. So it may actually be useful across frameworks.
Here's a hint: which one prints first? Why?
Alamofire is optional. You can opt for the URLSession based implementation. The reason why Alamofire is still an option is because it comes with handy features like retrier / adapter (which is out of this project's scope). You're making a perfectly good point about request/response being asymmetric. The library is under development and we're working on it as we speak. Although I'm not sure about static suffix and method attributes. The suffix should be dynamic in some cases. \`/api/v1/users/&lt;id&gt;\`
I was just describing how the communication style comes off in an interview... i wasnt making judgements about CocoaPods or any other package manager or any person who prefers not to use a library for thingfs they feel they can build better.
Interesting article :) I‚Äôm also using the coordinator pattern in one project in my daily job. One thing regarding the coordinator protocol: do you think it makes sense to have a more abstract view controller as the root of a coordinator instead of defining a navigation controller? I wonder how you would handle an application with multiple navigation flows, e.g. not only push/ pop but also multiple tabs.
This is unrelated to coordinators, but I noticed on your blog you made a video about interactive table view headers. I'm about to do the same thing in one of my apps, but I was going to use UITableHeaderFooterView instead. Did you find that your way worked better? I already have some non-interactive headers using UITableHeaderFooterView that I want to make interactive so I don't want to refactor them if I don't have to.
It‚Äôs better than conforming to error. You can create an error enum with associated values and on failure wrap whatever data you want in the error case.
If you want to return a value of either one of two non-Error types there's nothing stopping you from defining an enum for that.
Omg please break that apart to severs storyboards. You can select several and I think from Editor &gt; Refactor to Storyboard. It will make a new storyboard file with those view controllers you selected.
You could compute a checksum of the image and compare it to a checksum of the stored image. This would require you to compute checksums and store them in firebase beforehand
Helps massively when using version control too. With one big storyboard, two people can't work on it at the same time.
Hmm maybe that‚Äôs why people I was arguing with last time always complain about storyboard conflicts and not good to use? Because they have them all in 1 file. Shows how much they don‚Äôt know and yet want to argue against using them.
Good shout. The only challenge is that the image will be user based hence might have different background and even MD5 would not be consistent. Thanks anyways.
Ah yeah that is a much more complex problem to solve
We were 3 People and had a storyboard per feature but still facing this quite often. (E.g if you have a new feature to implement it is very likely that at least two ppl are working on it). And one storyboard for each VC is also not really how they‚Äôre meant to be. We moved away from SB (ofc also with some drawbacks)
I've seen so much confusion around getters and setters in Swift, that I wrote up a post just for it. You'll feel right at home, because I compare/contrast against Java. [Stop writing getters and setters in Swift](https://github.com/amomchilov/Blog/blob/master/Stop writing getters and setters in Swift.md)
I can tell. Advanced programmers don't even use storyboards. That storyboard look hideous.
You can make any UIView clickable. Add a GestureRecognizer to it.
You can. [https://stackoverflow.com/questions/33658521/how-to-make-a-uilabel-clickable](https://stackoverflow.com/questions/33658521/how-to-make-a-uilabel-clickable)
No - ASL is not a foreign language!!!!
Why are you guys upvoting this?? Stop with the inspiration porn!! You dont know what he said in the video- I know many Deaf people who are developers who actually have jobs. I am ASL fluent and this guy signing in the video is so horrible. It is not ASL, it is SEE (Signed Exact Sign). Also he usually complain about discrimination in his other videos.
my understanding is yes, because you can cascade from case 1 to case 2, and so on.
Hold... I never talk about that inspiration porn? I don‚Äôt like sex stuff because I was Christian. It was disgusting. I grow up in Kansas School for Deaf (I quit since 6th grade transformation to Heard school) I use American Sign Language as well at KSD. I am not complain because I just let them go. I don‚Äôt need take lawsuit to against them for discrimination. I want to be good mature person. Well do you want me stop teach swift language in that deaf can code then it alright.
I wouldn't hold my breath. Swift has always been rather on the "make people give things names" side of programming language design.
You are correct, that is rude if it came across that way. I was just trying to ask if he had been developing for a long time and still preferred storyboards because in my experience there was a point when it was more work(IMO) to create layouts visually than programmatically as the views became more complex. Also possible that I just didn‚Äôt know how to use storyboards as well as I thought
&gt; [Optional] has done wonders in reducing run-time errors I'd be curious to see some evidence for this. In my experience, it's simply a different style of programming. I've never had any bug in any shipping Objective-C application which was caused by an unexpected nil.
If you have two people working on one feature, you probably don't put them both to work on its visual layout. Put them to work on the same function, and you're going to get conflicts there, too.
r/gatekeeping meets r/swift.
C's switch has fallthrough, too. In fact, that's the biggest complaint about it.
https://developer.apple.com/documentation/vision/classifying_images_with_vision_and_core_ml
Far easier to handle conflicts in a function though
Highlyyy recommend. That‚Äôs how I did it. I watched maybe 2 or 3 of his videos (about an hour to hour and a half of content) and that was all it took to be able to do programatic UIs myself. It comes real fast if you already know your storyboards and also autolayout is so much easier with code!!!
lmao this guy....
Are you asking about behavior, or performance? Swift's switch can have arbitrary matches (by calling arbitrary functions), so it cannot be O(1) in the general case. As to whether the optimizer can ever make it O(1), there's no way to know. It might try, or maybe only on Tuesdays, or whatever. BTW, just because C/Java require constant integer cases, there's no guarantee that they're O(1), either. None of these languages make any performance guarantees about switch statements. Back in the 1990's, compiler classes tended to teach lookup tables as the pinnacle of switch performance. They have a lot of limitations, though. They don't work well for non-contiguous values -- binary search is another popular choice that works well. Lookup tables can also take more memory than a simple if/else, when there's not many values. Indirection also tends to wreak havoc on caches and speculation. They also can be problematic for further optimizer phases which could eliminate the structure of the switch entirely -- it's *much* easier for a peephole optimizer to rearrange an if-statement than a lookup-and-jump. TLDR: Compiler optimization is a deep and complex problem, especially with modern CPUs. If you need a lookup table, then make a lookup table. You might discover, however, that it's not actually better than a switch-statement with the compiler's default optimizations.
Then you've never shot yourself in the foot with NSArray isEmpty (note that \[nil isEmpty\] is false, which is why everyone tests array.count &gt; 0 instead).
I‚Äôm a software engineer at Facebook and I‚Äôve worked at Google and Spotify. Not one of these companies ever used Storyboards or nibs. Code views by hand or don‚Äôt bother coding at all is what my iOS mentor used to say
I agree, oh well
Your PDFClass is not connected and thus nil?
The compiler's inliner is free to eliminate the calls to ~=, and then the optimizer can do whatever it wants with the remaining code, including converting it into a lookup table or a conditional move or whatever. As u/nextnextstep says though, exactly what to convert it into is not at all obvious.
I use UITableViewHeaderFooterView and add a delegate to handle the interactivity.
Paul Hudson has an example of the using the coordinator pattern with tab bars that may be helpful. https://www.hackingwithswift.com/articles/175/advanced-coordinator-pattern-tutorial-ios
I‚Äôve operated with this programmatic-only mentality for a while now, but recently got my code challenge rejected because I did‚Äônt use storyboards. They said I had ‚Äúcode bloat.‚Äù Ha!
connected? I have a container view and it is selected in the properties tab.
Hey, D3afYE. I was understanding what actually you did say to me. I found out that I was shocked because a few months ago that I used ASL since I was young boy when I was in Kansas School For Deaf. Lot Heard community kept told me that my sentence did not make sense. I was disappointed about that lot of comment about my English was terrible about that videos so my friend message me on Facebook. (he was heard person.) he help me thought English so this two months was bit improve English so I found out that SEE is basically sign prefect in English. So ASL action like it ASL was not prefect in English sentences well. For example, ASL could say ‚ÄúI in hospital‚Äù with face with feeling so English could say ‚ÄúI am in hospital‚Äù so I understand about this. I apologize about this, but I hate to see those heard community that kept said that word: ‚ÄúI don‚Äôt understand what do you try to say,‚Äù or ‚Äúplease fix your English‚Äù in a few months ago. That why I improved my English while I was read a book.
Swift switch statements don‚Äôt fallthrough by default or require break statements
You don‚Äôt instantiate Outlets, you instantiate classes, you should be calling DocumentClass().setDocument() and doing the logic of giving the PDFClass the pdf inside the setDocument function.
Couple of things jump out at me-- that \`!\` in the parameter in your \`setDocument\` method on line 34 in \`NoteTakingViewController\` doesn't need to be there. You are just declaring that that method will take a parameter of the type \`DocumentModel\` (you can declare that parameter to be *optional*, but you don't need to force-unwrap something). At best, it's doing nothing at all, at worst it's part of either this problem or one you haven't encountered yet. So that's one thing. &amp;#x200B; That empty circle on line 14 indicates that your IBOutlet to the \`PDFClass\` hasn't been connected. Go back to the storyboard to make sure it's connected as you expect it to be. Most likely, that's the cause of your crash. You mention that it's in some kind of container view--you want the actual \`PDFClass\` UI element to be what's connected to the outlet, not its container. &amp;#x200B; Does that help?
I‚Äôve never read about the Coordinator pattern, but I just refactored our main app‚Äôs Launch behavior to use something similar. However, I made ours event driven and internally driven by a state machine. I also have used a similar pattern to control navigation of an series of steps that can result in multiple errors.
You can‚Äôt do layout testing in code without running that code in all the separate device sizes. You can‚Äôt look at landscape and portrait of the same device side by side unless you run two instances of the simulator. You can‚Äôt do playground-like sessions of running UIs with programmatic view hierarchies.
I dont have a document class. I have a document model that is in a collection view. When you tap on the pdf image, it should then take you to that pdf in another view. I ask this on [stack over view](https://stackoverflow.com/questions/55800499/a-passed-data-model-is-coming-out-as-nil-even-though-in-debug-i-was-the-var-get) and did what the guy said but it still gives me the same error.
I didn‚Äôt say it couldn‚Äôt be done. Just that it was significantly more cognitive burden, especially to those who didn‚Äôt write the code and/or weren‚Äôt already familiar with it. To say nothing of debugging visual issues for different size screens, for example, when they might be of the same size class but different physical point dimensions.
is the project small? zip me that and I'll fix it for you, literally just took out my laptop for this lol
Good apps strive to be much much smaller than that. Looking at and using the Facebook app, which I think everyone‚Äôs intuition would say gets most of its content from the net by fiat, can you even imagine why it needs 100MB downloads? Really? And according to you, no resource binaries for their view hierarchies.
Learning the tools and why they were created and how they‚Äôre used is an important way of understanding why the frameworks are they way they are.
I think that storyboard chart pretty much shows why you shouldn‚Äôt use ib beyond quick and dirty prototypes (and, dev friends, don‚Äôt let your dev friends be lazy and get suckered into that kind of ‚Äúcoding‚Äù)
but they can, so I think this is why it‚Äôs O(n)
Hi, As other people have already stated the problem is not with your setDocument method, even though the signature should be something more like: `setDocument(to document: DocumentModel?)` The problem is that your `PDFClass`, which should be named `pdfClass` since it's actually a variable, is marked with an @IBOutlet decorator. These are used to connect views from your Storyboard to your code. You can learn more here: https://www.youtube.com/watch?v=dVYTmGZmHEg (just some random youtube video that seemed to explain it). So to summarize, it's not your `validDocument` that is nil, it's your `PDFClass`
its under 15MB. How do you want it?
Just zip it and upload it to a google drive or something unless you got it on github
Re programmatic: have you looked at WWDC seasons? At least check out the most recent autolayout session that involves stack views. That will give you a good start at least in latest methods of doing view layout in code.
UIPopoverController that changes alpha as it's dragged up.
I'm a designer learning how to build an app in Xcode. I've been doing tutorials from Design+Code and have gotten a decent handle on using Storyboard and laying out my interface, but am still a little unfamiliar with the language used in Storyboard and Swift. Because of this ignorance, I'm having trouble googling how to build this card overlay swipe effect. &amp;#x200B; If anyone could point me to a good resource for how to learn this (a tutorial achieving a similar effect would be ideal!), or what phrases I should include in my search, that would be extremely helpful. &amp;#x200B; Another noob question: Should I be using a Container View for this card if it has multiple states? Some of the objects inside will change when a different state is set.
Could use an enum to handle states and on the drag action load them.
Then you dodged a bullet. You don't want to be working somewhere that believes Storyboards are the better option.
Thanks for the quick reply! I'll look into that presentation controller. Should I wrap the contents from the overlay's view controller and then place it onto the view controller with the circle and two cards, so it looks like [this](https://i.imgur.com/MvLZzW3.png) in the view controller? Tapping on the grey cards will dictate the content that shows on the card overlay.
Actually no... you won't be able to do that with the approach I suggested below... hmm... Will there always be 1 circle, 2 cards and then the big draggable card? Use a table view to handle the circle + 2 cards and add a single UIView in the bottom that extends to the edges and use a DragGestureRecognizer on it.
First, you need to learn how to code. It's complicated stuffs. The fact you're asking a very vague question tells me you have zero experience coding.
The card list is made using a Collection View placed inside of a scroll view and the cards are placed in dynamically from a Data.swift file. The user can tap on the circle icon, goes through a quick form, and creates a card in the list (they're contacts). Then, when the user taps on that card, the overlay moves up and shows the contact details. Getting the collection view to work was a huge pain in the ass. Can I keep it?
https://bitbucket.org/einreinhof/enginote
Get rid of the UIScrollView in the back, you don‚Äôt need it. Try what I suggested, make your collection view take about 70% of the screen and make a uiview with drag gesture on it I haven‚Äôt tried making a footer gesture recognizable but I‚Äôd be crazy enough to say you can even make that UIView a footer and it might work too
Wow you're right, I don't need that scroll view. Huh. Thank you, I'll try out your method!
Yes you are right.
I'd create a small struct. struct Sections { var pinned: [Name] var recent: [Name] var remaining: [Name] } Then store everything in that struct. To access it, you could create something like extension Sections { func name(at indexPath: IndexPath) -&gt; Name { let sections = [pinned, recent, remaining] let section = sections[indexPath.section] return section[indexPath.row] } } Then you can finally just do var sections: Sections = ... ... ... func cellForRow(at indexPath: IndexPath ... { var name = sections.name(at: indexPath) ... }
Computational complexity really isn‚Äôt that important for this use case. Remember that you can only really compare the growth in complexity for big-o notation, not the actual time between each measure. For example, you might have one function that is O(1) and another that is O(n). For n = 1 the O(n) could be vastly faster than the O(1) due to constant factors which are not included in the notation. Even at n = 10 or n = 100 the constant factors might weigh in favor of the O(n). What big-o notation tells us is how the complexity of an algorithm grows as n grows. A O(1) will be the same complexity for any n, an O(n) will be linearly more complex as n grows. For `switch` statements this means that most will still be pretty quick because they‚Äôre usually under a dozen or so cases and each evaluation is usually pretty fast. It may matter if you have a lot of cases evaluating in a tight loop but it won‚Äôt matter much under normal use patterns. And you can always use some sort of indexed collection instead of a switch if you really absolutely need the speed. However, that‚Äôs often premature and over-optimization. Use a switch first and profile your code to see if it is necessary.
First issue : `error: Build input file cannot be found: '/Users/sungkim/Desktop/enginote/EngiNotes/Views/test.storyboard'` The project has a reference to it, delete it. Second issue: @IBOutlet weak var pdfViewerView: PDFViewClass! is trying to set a UIViewController as an Outlet, wrong, the viewer should be of UIView class, in this case PDFView class. Third issue: Your NoteTakingViewController having isInitialViewController, it should be the Navigation Controller. Your NoteTakingViewController also had an ID of NoteTaking and it was never finding the VC when instatiating the Storyboard. Added a UIView as an outlet, instantiated proper PDFView() class, added it as a subview to UIView and gave it the document and fixed.
I sent you a PM so you can give me write access to push the fixes
Seconded. I literally never had bugs in Objective-C that optionals would have solved. Those kinds of bugs were completely foreign to my coding style. I've never seen any real evidence that optionals reduce fault rates. It's always only anecdotes, and almost always anecdotes that make me question the developer's abilities to write inherently clean and safe code.
done, you can remove the access now!
How do I programmatically get the Realm file from in the app data to attach that to the message? Thanks for the reply!
No we won‚Äôt do that. We will throw a new architecture instead. /s
Custom UIViewController transitions: [https://www.raywenderlich.com/322-custom-uiviewcontroller-transitions-getting-started](https://www.raywenderlich.com/322-custom-uiviewcontroller-transitions-getting-started)
And I work at one of the top 4 banks in the US. Developers are free to use whatever they want. Whether it is storyboards or programmatic.
It‚Äôs not about believing it‚Äôs the better option. It‚Äôs about convenience.
So the outlet is connected or not?
Storyboards are not more convenient, unless you‚Äôre incompetent.
Oh how edgy. Look guys this guy fucks and is better than everyone. If you keep acting like this nobody will remember you.
Its not about being edgy, it‚Äôs about knowing how to do the damn job properly. People who believe Storyboards are better or more convenient do t know how to do their jobs properly (if they‚Äôre even professionals at all). Nobody will remember me? I‚Äôm not on Reddit for reputation building, that‚Äôs for sure. This sub isn‚Äôt a reputable joint for skilled professionals.
Plus before I start these videos, thanks to my friend for fix grammar English so then I going to sign language with perfect English. That is why. I used ASL for many years but I tried of people kept telling me to fix grammar English. So that is why I ask my friend to fixed before start videos to make an English sentence look good with ASL.
/r/gatekeeping. You‚Äôre not a professional if you use storyboards. Nobody will remember when you die asshole.
Here's a sneak peek of /r/gatekeeping using the [top posts](https://np.reddit.com/r/gatekeeping/top/?sort=top&amp;t=all) of all time! \#1: [On a post about their dog dying](https://i.redd.it/yoxbfwh3nm921.png) | [1198 comments](https://np.reddit.com/r/gatekeeping/comments/aeky3m/on_a_post_about_their_dog_dying/) \#2: [Unsure if this belongs here](https://i.redd.it/aqmqzr1bxvd21.jpg) | [674 comments](https://np.reddit.com/r/gatekeeping/comments/alyba8/unsure_if_this_belongs_here/) \#3: [Anything &lt;$5 isn‚Äôt a tip](https://i.redd.it/s8ulclj18cq11.jpg) | [5553 comments](https://np.reddit.com/r/gatekeeping/comments/9lktoe/anything_5_isnt_a_tip/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/afd0dd/blacklist/)
&gt; Nobody will remember when you die asshole. Classy. Yes, I'm gatekeeping. I'm intentionally gatekeeping. Because I did web for a decade before I moved to mobile, and I can see what a trash pit web has become due to lack of gatekeeping. I hold iOS and macOS developers to a higher standard. Perhaps you might want to check my Github account, so you can remember me next time. It's the same username.
Why be such an asshole? There's definitely a better way to say that without raining on his parade. As a fellow deaf, you should be more encouraging rather than demeaning him. Shame on you!
he obviously didn't get it, you could have shed more light onto the matter instead....dick!
I'm developing an iOS App that allows users to make multi-party swaps. [https://crowdswap.com/](https://crowdswap.com/)
Nicely done! üëçüèº
Are you seeing something I'm not? I don't see any `isEmpty` method [here](https://developer.apple.com/documentation/foundation/nsarray?language=objc). When I type this in Xcode, it says "No visible @interface for 'NSArray' declares the selector 'isEmpty'", and the build fails. Yes, I think it's safe to say I've never done this. I've got about 500 source files here which contain a reference to `NSArray`, and in none of them did I call `isEmpty` on any of them.
Stop. You are confusing him more.
Hmm, my bad, looks like NSArray isEmpty doesn‚Äôt actually exist, precisely because it would be dangerous due to messaging-nil-returns-nil combined with nil-is-false. Still, similar problems exist, notably [nil isEqualTo: nil], which evaluates to nil and thus false.
This guy deserves a star
we have anonymous product types so it doesn‚Äôt feel like a huge stretch
Honestly intrigued, why do you hate storyboards? And how do you build your UI, with a framework to make constraints or just using NSLayoutConstraint?
Could you link the WWDC talk?
Presumably the one OP is talking about is this one: [WWDC 2018 Session 715: Introducing Network.framework: A Modern Alternative to Sockets](https://devstreaming-cdn.apple.com/videos/wwdc/2018/715o2fzpdzzzf5f0/715/715_hd_introducing_networkframework_a_modern_alternative_to_sockets.mp4)
Take a look at the framework [Hero](https://github.com/HeroTransitions/Hero) . It should be easy to archive that transition with it.
https://www.google.com/search?q=uiimage+multipart+form
&gt; Will I be able to replicate this entire function Yep. Capture the image (AVCaptureSession is your friend) and then convert it to a UIImage, and upload that
You'll have to excuse my stupidity here but the report is set up that the user can theoretically add any number of documents. So am I correct in thinking each image captured will have a new UIImage object created, can these be stored in an array since the user has the option to remove an image from the form once added, as well as adding more images if needed?
Bad bot.
I think you should not prefix file name with folder name when opening files within your bundle.
1. Are you sure the sound files are being bundled? 2. I would get the sound file by doing something like ‚Äúlet urlPath = Bundle.main.url(forResource: "input", withExtension: "mp3")‚Äù
I think I've already tried without the folder name, but it could be that in addition to something else.
1. I have put the sound files inside a folder called 'sounds' inside the Assets.xcassets, is that enough for it to be bundled? 2. I'll try that. Thanks.
Another wild guess is to check if your file has its target set to the app target.
How do I do that?
Not the OP but if you're doing what I think you're doing then yes. You could also use a UICollectionView to store the images and show them all on screen.
Ok. I think I might have solved the issue. It seems it can't (or shouldn't?) live in the Asset catalog. I instead made a group in the project itself and came a step closer. Still not working, but this error I think I can fix myself. Thanks for the help!
&gt;Right now I can use the Organizer in Xcode to get export my app data and see my own Realm database. &amp;#x200B; How does one go about doing this? I found the Organizer under the Window menu but I can't figure out how to make it do anything.
Thanks. That is the one I'm referring to. I liked to talk. It seems like the right tool for what I want to do. My hope is that some person far smarter than me has made a tutorial about using it for real time communication (TCP sockets essentially).
Problem solved! The main issue was that I had put the sounds folder inside the Assets.xcassets, instead of in a folder in the root of the project. I'm pretty new to programming (started in March this year). Now I feel stupid for not realising this simple solution sooner. I thought that since the Assets.xcassets worked with my image files it should work with my sound files too. My mistake.
Yep!
What‚Äôs that?
You don't need a timer here. Just use \`slider.setValue(index, animated: false)\` , and wrap this inside an \`UIView.animateWithDuration\` to control your animation duration
I suggest you use Github to search for code samples. For example, search for nwconnection, then select Code and Swift. Here's a good one: [https://github.com/agnosticdev/NetworkConnectivity/blob/c51f7a0b8f9b0733b52bd2ddbd0425b6e5d6fbbb/Sources/NetworkConnectivity/NetworkConnectivity.swift](https://github.com/agnosticdev/NetworkConnectivity/blob/c51f7a0b8f9b0733b52bd2ddbd0425b6e5d6fbbb/Sources/NetworkConnectivity/NetworkConnectivity.swift)
Thank you
Bug bounties I believe, where people find/document vulnerabilities found in other software/applications/etc. for a reward.
You could use NSStream to connect to create a socket, I'm not sure if it uses the new Networking under the hood, but overall, you the consumer of the framework shouldn't really be too concerned with how the Socket code is implemented. You could even drop into CFNetwork if you want even more fine grain control. Or use a library like Starscream, to make working with stream a much nicer experience.
Interesting! Thanks :)
I honestly can not thank you enough! Learned a lot from reading over your fixes. Now I just need to read up on how to only have the pdf be shown in the UIView. How long have you been developing for iOS?
In addition to this, the true big O complexity for a switch case is O(1), because it‚Äôs always a constant number of steps. O(23456) is still O(1).
Yes thank you! I learned some things and I am self learning because my school sadly does not offer iOS programming, only android.
Cool thanks! I will get around to watching that video
Who said I hate storyboards? I said his storyboard is hideous. Once you learn how to code without it, you'll stop using it. Making constraint is actually pretty easy by code. You know that right? If you don't know how to make constraints by code, you shouldn't be coding.
3 years give or take, also what do you mean ONLY in the UIView? That's what it's doing now isnt it? o\_O the only other items are the navigation :o
Who said I hate storyboards? I said his storyboard is hideous. You need to know how not to use storyboard when you need to create views dynamically. Don't tell me you've never done it?
A `switch` statement is not O(1), it is O(n) without optimization. This is because each `case` needs to be evaluated until a matching one is found. You're essentially finding an item in an unsorted list. Now, it can be optimized in various ways and it might be optimized behind the scenes but you shouldn't depend on that. As always, write a simple version, profile it, see if it needs manual optimization.
Don‚Äôt feel dumb! I‚Äôve been programming in Swift for the past year and even I don‚Äôt fully understand the assets system. Good job!
You scale by drawing a UIImage with a NSRect into a CGBitmapContext, then extracting a new UIImage from that. UIImage has a call to convert to JPEG, with a parameter for the JPEG quality. The result is an NSData. NSFileManager has a call that gives you a file URL to a directory where you can write the NSData. Some directories are auto-recycled. ( Caches for example. ) NSURL has calls to control whether the file is saved in backups to iCloud. Here's my code for directly capturing an image to a file. It's in Objective-C, because that's what I think in, but it at least gives you an idea of the order of the system calls you'll need to make: #import "CameraBoss.h" #import "CameraPreviewView.h" #import &lt;AVFoundation/AVFoundation.h&gt; NS_ASSUME_NONNULL_BEGIN NSString *const CameraErrorDomain = @"CameraErrorDomain"; @interface AVCaptureDevice (BookScan) + (nullable AVCaptureDevice *)boo_frontCamera; @end @implementation AVCaptureDevice (BookScan) + (nullable AVCaptureDevice *)boo_frontCamera { for (AVCaptureDevice *device in [self devices]) { if ([device hasMediaType:AVMediaTypeVideo] &amp;&amp; AVCaptureDevicePositionFront == device.position) { return device; } } return nil; } @end @interface AVCaptureStillImageOutput (BookScan) - (nullable AVCaptureConnection *)boo_videoConnection; @end @implementation AVCaptureStillImageOutput (BookScan) - (nullable AVCaptureConnection *)boo_videoConnection { AVCaptureConnection *videoConnection = nil; for (AVCaptureConnection *connection in self.connections) { for (AVCaptureInputPort *port in [connection inputPorts]) { if ([[port mediaType] isEqual:AVMediaTypeVideo] ) { videoConnection = connection; break; } } } return videoConnection; } @end @interface CameraBoss () @property(nonatomic, readwrite) BOOL isPreviewing; // Communicate with the session and other session objects on this queue. @property(nonatomic) dispatch_queue_t sessionQueue; @property(nonatomic) AVCaptureSession *captureSession; @property(nonatomic) AVCaptureStillImageOutput *stillImageOutput; @end @implementation CameraBoss - (instancetype)init { self = [super init]; if (self) { _session = [[AVCaptureSession alloc] init]; _sessionQueue = dispatch_queue_create("session queue", DISPATCH_QUEUE_SERIAL); } return self; } - (void)takePicture:(void (^)(NSData *__nullable jpgData, NSError * __nullable error))handler { AVCaptureConnection *videoConnection = [self.stillImageOutput boo_videoConnection]; [self.stillImageOutput captureStillImageAsynchronouslyFromConnection:videoConnection completionHandler:^(CMSampleBufferRef imageDataSampleBuffer, NSError *error){ NSData *jpg = nil; if(imageDataSampleBuffer) { jpg = [AVCaptureStillImageOutput jpegStillImageNSDataRepresentation:imageDataSampleBuffer]; } handler(jpg, error); }]; } // If we need to, continue configuring the preview layer. - (void)configurePreviewLayer:(void (^)(CameraPreviewView *cameraPreviewView))callback { if (nil == self.sessionQueue) { dispatch_queue_attr_t attr = dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_SERIAL, QOS_CLASS_USER_INTERACTIVE, 0); self.sessionQueue = dispatch_queue_create("Session", attr); } dispatch_async(self.sessionQueue, ^{ if (nil == self.captureSession) { self.captureSession = [[AVCaptureSession alloc] init]; } self.captureSession.sessionPreset = AVCaptureSessionPresetHigh; AVCaptureDevice *cameraDevice = [AVCaptureDevice boo_frontCamera]; if (cameraDevice) { NSError *err = nil; AVCaptureDeviceInput *cameraInput = [[AVCaptureDeviceInput alloc] initWithDevice:cameraDevice error:&amp;err]; if (err) { NSLog(@"%@", err); } if (cameraInput &amp;&amp; [self.captureSession canAddInput:cameraInput]) { [self.captureSession addInput:cameraInput]; AVCaptureStillImageOutput *stillImageOutput = [[AVCaptureStillImageOutput alloc] init]; if ([self.captureSession canAddOutput:stillImageOutput]) { [stillImageOutput setHighResolutionStillImageOutputEnabled:YES]; stillImageOutput.outputSettings = @{ AVVideoCodecKey:AVVideoCodecJPEG, AVVideoQualityKey:@(0.95), }; [self.captureSession addOutput:stillImageOutput]; self.stillImageOutput = stillImageOutput; AVCaptureConnection *videoConnection = [stillImageOutput boo_videoConnection]; [videoConnection setAutomaticallyAdjustsVideoMirroring:NO]; [videoConnection setVideoMirrored:NO]; } AVCaptureVideoPreviewLayer *previewLayer = [AVCaptureVideoPreviewLayer layerWithSession:self.captureSession]; previewLayer.videoGravity = AVLayerVideoGravityResize; CGAffineTransform t = CGAffineTransformMakeScale(-2, 2); previewLayer.affineTransform = t; dispatch_async(dispatch_get_main_queue(), ^{ CameraPreviewView *cameraPreviewView = [[CameraPreviewView alloc] initWithFrame:CGRectMake(0, 0, 480, 640)]; cameraPreviewView.cameraBoss = self; cameraPreviewView.videoPreviewLayer = previewLayer; cameraPreviewView.session = self.captureSession; [cameraPreviewView.layer addSublayer:previewLayer]; callback(cameraPreviewView); dispatch_async(self.sessionQueue, ^{ [self.captureSession startRunning]; }); }); } } }); } @end NS_ASSUME_NONNULL_END
Not localized...
Oof
To copycat Rust \*ducks\*
I have a genuine question. What should be the correct way ? ü§î
The PDFViewerView, is meant to show the pdf and there is meant to be a stack view with drawing features (Still trying to figure all that out) then above that is the navigation bar. When I run it, the pdf covers the stack view even though I have constraints on the PDFViewerView. I guess I just need to figure out how to keep it within the frame of the PDFViewerView.
A good question! In my mind, the correct way would be the easiest to read.
The first one hands down. Fewest lines of code, simplest to understand, and most commonly seen across code based. Also, the Init method is going to cause errors if you try to use it in a Value type. It should at least require it to be a class, but even that is going to create confusing compiler errors when trying to use it on a value type.
Reusable xib ^/s
I was actually disappointed that Swift's native Result seems less good than the Result I have been using for years: https://github.com/antitypical/Result For one, the error variant gets type-erased. In addition, the built-in has fewer useful methods.
I was really excited about native Result, but it's still not as useful as https://github.com/antitypical/Result, so I feel a bit ripped off... (Obviously we can continue using the external dep, but I thought I was going to shave a dep off my list)
We were debating on what accomplishes ‚Äùreusability‚Äù but yes, very correct.
I like the second from the top üò¢
I am using second from top, because the less code in ViewDidLoad is better for me and I don't like configuring UI inside some functions just to use first from top case.
I don't know about ObjC, but I've seen it over and over again in Java and C++. I've done it, my colleagues have done it. Having a compiler force you to deal with nil/null everywhere it could possibly show up is a godsend. Maybe I'm a mediocre developer, but why not use tools that will help me write better code?
But doesn‚Äôt the first one cause a compilation error (because you‚Äôre trying to modify a `let` variable)?
That‚Äôs only a constraint problem, when I added the uiview I made it 0 on all sides just add the other view below it
this is how ive been styling a majority of my buttons to have borders and add NSAttributes to my text. Is this a good way to go about it? func functionName(button: UIButton){ //style Button Here. }
No
And, more importantly, it‚Äôs collapsible!
No because it is a Reference type. I would definitely advise researching the difference between Reference and Value types :).
I think it's on the roadmap. It is certainly a nice feature if you know when to use it and don't use it when you shouldn't. I've fixed multiple bugs related to system frameworks (mostly on older macOS versions but even in XCTest on iOS12) with the Objective C runtime that would've needed fixing per usage otherwise and could've been easily forgotten to use the fixed version, especially with multiple developers working on the same codebase.
Nope. The variable in question `UILabel` is a reference type. It‚Äôs properties are still `var` so you can change those but you can‚Äôt change the overall variable, meaning, you can‚Äôt say `let label = UILabel` then say `label = UILabel` somewhere else I mentioned at first that it‚Äôs a reference type because I‚Äôm pretty sure this only works with reference types. For value types, if you initialize it using a per statement then it automatically makes it so you can‚Äôt change *any* of its properties.
I would completely disagree and almost always choose the second box. Matter of opinion
Probably yes. A function is a decent idea and you could also consider providing a new well named initializer through an extension. But I only like that for a very specific and commonly reused styling, not something generalized.
Yup, matter of opinion :) However, I'm curious, what advantages does the second box have to offset the negatives I see: 1. More lines of code 2. Another mental step to understand what is happening 3. Risk of placing other logic inside the closure that is only executed lazily
That assumes that it is a property on a view controller. If that is the case, I agree with you. But if someone is using it inside a method/function, I would definitely go with the first.
Storyboards are much better tbh. If not storyboards then you probably would want to inherit from UILabel and override values there. I know many people would say this is overkill or something but swift is OOP language and everything is and should be a type.
I use something similar to the second second option, but it is a function and I move the code into a separate file postfixed with \*UI.swift. So if I'm working on ChatViewController.swift, all the code to create UI elements will be in ChatUI.swift, but the layout will still be in ChatViewController.swift. The challenge is always the whole "Separation of Concerns" principle. But, it does make changing UI look and feel easier when I'm told to change colors and fonts. I'm not looking thru a giant ViewController, but a smaller UI class. (and the ViewControllers are smaller).
What the heck is going on with the third one?
It‚Äôs set up for the 4th lol
Benefits: 1. It‚Äôs collapsible, so it cleans up my code 2. If you define any intermediary variables, they will be killed by ARC, so it can save memory 3. Useful if you ever declare a class property because you can do a lazy initialization instead of altering properties in the init method Side note, this code is very beautiful. If you don‚Äôt understand what‚Äôs happening, the curly braces define an inline method, and you return the class type, and the two parentheses call the method. So it‚Äôs a one-time function.
let title = MyRedCenteredHelloWorldLabelWithoutNeedlessOptimization() &amp;#x200B; there one line
Woke :o
Yeah I use programmatic constraints (or just setting frames if it‚Äôs a small view), but only for small or very dynamic (too dynamic for storyboard) views. I assumed from your strong reaction that you hate them. My bad.
Definitely matter of opinion, fine points on both sides. I generally use box 1 too, but box 2 isn't so bad and I have seen it in respectable code bases as well. The benefit of box 2 is that it pulls initialisation and configuration into the same scope and it is pretty clear what is going on in that block of code. Box 1 looks simpler but, in reality, it has to sit inside some scope -- probably a function. That adds complexity: does it actually get executed? when? is this hard to find among lots of other config? So I think box 2 does have merits.
Yes, I understand what is happening :). Fair enough on point 1 and 2 (even if they are minor to inconsequential to me). If we are talking about class properties and not just inline code, then I absolutely agree with you that the second box is best.
I am basically using the second one, **BUT** with lazy var. I like that the styling directly goes with the initialization, makes it easy to find.
Yeah, I tried to C++ reason in Swift, I have to review it/
Yeah inheritance... Nah
Not to ruin the joke, but the Then framework on Github provides a clean way of doing this https://github.com/devxoul/Then/blob/master/README.md. I saved my own version of it as a snippet (it‚Äôs only one file, like 50 lines) so I can quickly add the Then protocol to a project without importing the whole framework.
Already too dynamic with objc
And the documentation includes Promises because of course it does.
Yeah... yet another reason I made my own version :P
First is the worst, second is the best, third and fourth aren‚Äôt invited to the post-race party.
Fewest lines of code isn't always easier to read if you really cram 100+ characters per row over and over. I would say lowest character count is generally easier to read. Even if it adds a line or two. Just eyeball it though. There's no hard and fast rule.
&gt;If you define any intermediary variables, they will be killed by ARC, so it can save memory This is a moot point because it's true in 1 as well. ARC is smart enough to determine when a variable is last used and will therefore release it immediately after its last known use.
Awesome! Will take a look :)
I don't miss the dynamic features we had in obj-c and I especially don't miss he bugs they caused
I just assumed that was the cause since it was a UILabl
It doesn‚Äôt make much sense to make it lazy if it is added to the view in viewDidLoad for example. Lazy should be used on optional views that might not be added to the view‚Äôs hierarchy.
Planning a new project that I want to build doing some Tutorials that I think will help me get there.
So variable a, b, c, I, t, and y....
I mean, you could apply stupidity to anything and make it worse. Like writing a whole function on one line with 30 semicolons. That's not what people mean when they say "fewer lines".
Just being pedantic.
ahh mb fam haha
Haha all good. But yeah fewer characters is generally more readable. Sometimes if people aren‚Äôt overly familiar (looking at your ternary conditional operators, and list comprehensions) it can cause issues. But Swift is general is good about that stuff so /shrug
I read somewhere that when you use XIBs/StoryBoards/whatever, it's essentially the same as using lazy var fields on your VC. They don't get built in the init() call, but some time later, like in loadView() or one of those... So if you create your VC and pass it around or modify it before presenting it, you're delaying the memory consumption and UI computation. Obviously that's a rare edge case. At least in my experience.
I still wouldn't. I like the mental grouping of doing it the second way. I do the same thing in much of the Rust and Swift code I write. If calling a constructor is not enough to finish configuring an object, I group the init+config into a block so that the result is just the final object I want to use for the rest of my function.
Hmm, that makes sense but I think it is something to consider only when you have view with a lot of subviews.
Boo. Second way provides valuable contextual grouping. The "cost" of three trivial boilerplate lines is worth it. Basically your brain is able to read it as let foo = { // Generate a useful object }() // The rest of your function uses foo. The first approach bleeds configuration of foo into your function that probably just wants to *use* a foo.
You can easily do the same by simply adding blank lines above and below that block of code
&gt;29 comments Can you provide an example of such a block? I'm curious.
u/ragnese gave the answer already. Based on that we‚Äôve just decided to stick with lazy var all the time instead of judging per case, as it doesn‚Äôt have a downside, but makes the code more consistent.
\- pending tests (this is the equivalent of compiler warnings) \- readable CLI output without all the noise \- useful test reports in other formats \- dynamic tests that can be created at runtime \- parameterised tests (easy to do with the previous point) \- shared contexts \- automatic test discovery on linux \- etc.
A major gripe I have with storyboards is that when I want to change, for example, a font that's used in several places, I'm stuck looking through every storyboard and making sure that _every-single-font_ is changed. Using subclasses of UI elements seems a tolerable workaround/solution for that. Can do the layout in storyboards and styling in the subclass. Another, in my opinion, reasonable approach is doing the styling in `@IBOutlet`'s` `didSet`.
üíØ % agree
They sure [are](https://i.imgur.com/Br00TCn.gifv)!
The smart-ass answer is always the best answer!
Personally I like to use the second example to lazily init UI elements in the view controller. I ‚Äòcustomise‚Äô the element there, because it‚Äôs almost like shorthand for creating a new subclass for your desired element.
What‚Äôs the benefit of using this over the second example in the OP? It‚Äôs the same number of lines, and only slightly less clutter.
Yes I agree, I was limiting the discussion to inside a function/method
Yes
Configuration stuff is in the closure, actual using the object is outside the closure. The framework should actually cut down two lines. It‚Äôs really not that helpful. Honestly, I don‚Äôt use it that much. It‚Äôs nice in theory, but can quickly get messy if you nest too many of those calls
Yeah just figured out the constraints. Now I need to figure out how to draw it above the pdfView. [Here](https://imgur.com/a/1FaYx5I)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/WDaGWJ7.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)
Agree but different people learn differently.
Isn't `@warn_unused_result` the default since Swift 3?
not necessarily, everything is constraint oriented, the issue in the picture is the view is 0 on all sides and the toolbar there is on TOP of the UIView with 0 on left top and right and a height of 40, hence why the UIView shows behind the Toolbar, just make the toolbar 0 left top right 40 height and the UIView 0 on all sides (top being attached to the toolbar, not the view controller)
I hope not. It should be a property in a UIView subclass, that's loaded into the VC in loadView. There are good reasons for the VC's view to be lazy loaded and a constant uilabel property is not lazy loaded.
Is there a transcript? I'd love to read what you have to say on the topic.
Mmmmmhhh that's a good feedback... I get my knowledge from the Apple Swift documentation... but I guess I can create a blog counterpart as well.
Yeah, it can be difficult to follow a video and having a transcript gives the best of both worlds. People can watch the video and/or read the transcript to get the most out of your tutorial. I know, personally, that I am much better at reading stuff than hearing it. And code in a video can often be small and blurry, making it difficult to read.
Mmmmhhhh good insight... I will follow your advice and publish an article counterpart.
The number of operations is N (N=constant) but the big o complexity is constant (O(1)), because you‚Äôre only doing a constant number of steps. It‚Äôs just a mathematical technicality. O(1 million) = O(1)
One of the later tutorials I want to create is on Xcode instruments. A tool I believe is far underutilized by developers and poorly covered in the iOS community. I do think those demonstrations would be best done through video but what says you?
Videos are certainly good when the information is mostly visual, such as demonstrating a tool or a portion of a UI. For programming it tends not to be as good since people might want to copy-paste code to try it out on their own, or they might want to be able to go back to a certain portion of code a few times while they understand it.
Mmmmhhh got it. I now see where each have their strength.
Thanks for the insight by the way!
If I code a `switch` using 10 cases or I code a `switch` using 1000 cases they will not have the same time. The `n` value varies between the two usages, it is not constant. More cases means that you, on average, have to go through a linearly-increasing amount of cases before you find the proper one. Therefore it is not a constant amount of O(1), but a linearly-increasing amount of O(n). Lets try it out: switch value { case 0: return 1 case 5: return 2 case 6: return 3 case 9: return 4 } It will take anywhere from 1 to 4 evaluations to find the value. Our n is 4, average complexity of 2. switch value { case 0: return 1 case 5: return 2 case 6: return 3 case 9: return 4 case 3: return 1 case 1: return 2 } It will take anywhere from 1 to 6 evaluations to find the value. Our n is 6, average complexity of 3. switch value { case 0: return 1 case 5: return 2 case 6: return 3 case 9: return 4 case 3: return 1 case 1: return 2 case 7: return 3 case 4: return 4 } It will take anywhere from 1 to 8 evaluations to find the value. Our n is 8, average complexity of 4. So as we increase n our complexity increases by 1/2 * n. O(1/2 * n) is the same as O(n)
No problem. I don't want to put down videos because they can be very useful tools. However, they aren't always the best tool. Having a transcript makes a video a lot more useful. It's also a great way to organize your thoughts for the video, write the transcript first and then do the video off of it. If you change it up a bit in the video then just edit the transcript to match. You'll often find that your video will be a lot better since your thoughts will be more organized in the first place.
Ditto. At the bottom of every controller I have a `// MARK: - Subviews` section, where I `lazy var` all the potential subviews. Then there's one consistent place to go looking for subview declaration and instantiation in every controller. ``` lazy var todayButton: UIButton = { let button = UIButton() button.setImage(UIImage(named: "todayIcon"), for: .normal) button.onControlEvent(.touchUpInside) { [weak self] in self?.scroller.gotoToday() } return button }() ``` I do them lazy because there's often variations in view tree configurations, so not every subview will be needed every time. It also means that they won't be instantiated until they're needed in the controller lifecycle, which is helpful for weird edge cases where too-early instantiation can accidentally pick up incomplete controller state values.
I don't think there's any question that we'll get better reflection APIs in the future (in fact, you could write some of them yourself now that some of the runtime structures are locked in the ABI). I doubt we'll ever get something as error-prone as passing a function name to `performSelector:`, or method-swizzling (at least by default).
yeah thats actually true. It sort of kill two birds in one stone. Do you have a developer blog yourself?
No, I don't do much programming outside of professional situations. Just a bit of assistance here and there when people ask for it, as well as mentoring and running sessions at my company. Outside of that I try to avoid programming and instead have other hobbies, too much can burn you out fast.
I like my way üòõ https://mackarous.com/dev/2019/1/23/a-better-syntax-for-configurable-initializations
&gt; ARC is smart enough to determine when a variable is last used and will therefore release it immediately after its last known use. It can do that, however it probably does not do that: [Guarantees about the lifetime of a reference in a local variable](https://stackoverflow.com/a/48975011/887210)
What if you just have a label in the view controller? You want me to make an entire class that subclasses UIView just to have the label in it? lol &amp;#x200B; All you could've said was to use the \`lazy\` keyword.
YOu're changing a property of the object, you're not changing the object.
Idk if you're joking but that's just stupid; barely any difference (like OP's) and just adds a wrapper that's not necessary.
&gt; Box 1 looks simpler but, in reality, it has to sit inside some scope -- probably a function. That adds complexity: does it actually get executed? when? Literally the exact same time as box 2.
I personally just setup the UI in the view controller. All theme properties like colors or fonts are located in 1 place so if I need to change them all, I just change 1 thing.
Syntactic sugar isn‚Äôt stupid, it reduces boilerplate. Less lines of code is a win if you are utilizing these kinds of initializers often
Styling in the storyboard is a bad idea. If something doesn't look good later or need to change a color/font, you'll have to go through every single view controller and change them. &amp;#x200B; I use storyboards but I don't use them for UI customization, just constraints.
I'm a real amateur, and just learning and playing around with Swift. I don't necessarily want dynamic features either, but if not let's leave Cocoa and Objective-C behind. If Swift is the future, I hope Apple will develop a new API based on idiomatic Swift, whatever that is. Objective-C seemed really simple and pure, and Cocoa seemed based on really clear principles that came from the language. Swift seems a jack-of-all-trades with a lot of features included because they needed to interoperate with Objective-C, not because they wanted to emulate those patterns. I don't disrespect the past, it's just that if Swift isn't dynamic, then Cocoa feels like an impedance mismatch with the language.
You should get into it mate. Who knows, your love for it might grow. My goal for this channel is to make programming more understandable, so that you're not just blindly using libraries like most developers out there.
wait never mind, it seems like you do this professionally as your comment remarks.
You changed my mind. I'll look into it later.
&gt; If you define any intermediary variables, they will be killed by ARC, so it can save memory It only saves memory for as long as the containing function would take to finish, which should be on the order of microseconds.
Yeah, professional programmer. I do a lot of internal training and such. Just no blogs or anything like that. I try to keep programming to work and the occasional side project. Too much of one thing will drive you mad, my hobbies and entertainment are usually pretty far from programming.
Likewise, I do carpentry as hobby. What's yours?
I'm formerly a chemist but that's tough to do much of at home so I cook instead, it's nearly the same thing!
lol thats actually true... cooking is an intelligent activity when one probes a little deeper. It gives you a base of virtues that permits one to become a scientist.
Measure ingredients, handle tools and instruments, follow a detailed method, experimentation with different materials and proportions. It is pretty analogous with chemistry, especially if you do some of the more technical types of cooking such as baking.
Came here to say this. I love `Then`
Hi Travgalax! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because ‚Äì generally speaking ‚Äì compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/bgpttz/hello_guys_this_is_my_first_game_design_you_can/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
 struct objc_class* UILabel = objc_getClass("UILabel"); struct objc_class* NSString = objc_getClass("NSString"); struct objc_class* NSColor = objc_getClass("NSColor"); strict objc_object* title = objc_sendMsg(UILabel, sel_registerName("new")); objc_sendMsg(title, sel_registerName("setTitle:"), objc_sendMsg(NSString, sel_registerName("stringWithUTF8String:"), "Hello World")); objc_sendMsg(title, sel_registerName("setTextColor:"), objc_sendMsg(NSColor, sel_registerName("redColor"))); objc_sendMsg(title, sel_registerName("setTextAlignment:"), NSTextAlignmentCenter);
First, define "correct".
You underestimate my abilities of blocking a thread for seconds at a time.
I miss dynamic features every day. I've written far more bugs making my own layers of dynamic capabilities in Swift than I ever did using the standard, simple ones built into Objective-C, and similar languages. If you don't miss dynamic features, then don't use them. That's the same thing you should do with any language features that you don't need. There's already features of Swift that I never use. Right now, when developing for Apple platforms, we have the choice of a low-level unsafe legacy (but dynamic) language, or a higher-level safe and clean (but mostly static) language. For building systems that need dynamic features, this is a lousy situation. Swift reads like a love letter to static languages. That's fine for some types of programs, but not all. You can't even write AppKit itself in Swift.
Okay, looks like I wasn't clear enough. You are also supposed to separate the VC from the V in MVC. Just like how you are supposed to separate the VC from other Cs. And split them up into logical pieces. But you don't just have a single UILabel in your VC. You have to add it to the view hierarchy and setup your constraints. And the requirements can easily change so you need to add a couple more things to it and your VC will be 200-500-1000 lines in no time.
I thought this would rhyme.
Protocol master race.
Is box 4 really an opinion or is it just a nice-to-have ?
This is true, but you should still use lazy, you cant always think of a UIViewController as being the main screen, it could be added as a child, therefore using lazy means itll only be initialised if and when the VC's view is added to a view, which may never happen.
That‚Äôs why I said *a* way. :) That said, though, knowing the ‚ÄúCocoa way‚Äù, and that most certainly includes Foundation, of doing things is practically a must if you want to be effective. It‚Äôs fairly easy to discover when you‚Äôre fighting the way Cocoa does things when you understand the philosophy. I remember when I was learning the APIs and on multiple occasions was pleased that I could accomplish many things quite easily in a handful of lines of code only to discover a week or a year or multiple years later that the Cocoa folks at Apple had already had s single line solution for those things all along.
I would has made the last graphic a bash shell in a green text terminal window.
That shouldn‚Äôt ever happen in a shipping app.
I think [this](http://www.swiftkickmobile.com/building-better-app-animations-swift-uiviewpropertyanimator/) is exactly what you're looking for, though this article is a little bit dated.
Yeah but cooking helps not just with chemistry however, I think science and engineering in general greatly deals with following specific instructions. A developer documentation is a classic example
I like your stile best to have them lazy loaded. Here `[weak self]` could be `[unowned self]` because the button will never outlive its view controller and thus, self not optional.
This is what I do since I can collapse them.
Sadly nothing, because my workplace greatly underutilizes me due to my job title. I can't even try and pick work out of the bug list without getting yapped at. At home though I'm beefing my Unity skills back up and working on a game.
Or you can just default to using lazy vars and never have to consider it. Most of the time it will be the same as using lets and some of the time it will be slightly better.
Sure. But there are still two points where the block has slight wins: 1. If you have temporary variables used to initialize `foo`, they wont pollute the namespace of the surrounding function. 2. If you have to call a mutating method on `foo` to initialize it, but that's the only time it should be mutated. E.g., let foo = { var foo = Foo() foo.mutate() return foo } Turns something that almost had to be a `var` into a `let`.
Sure. The first file I opened in my recent iOS app has this: let timeout: Double = { let timeoutResult = state.settings.getIdleTimeoutMinutes() switch timeoutResult { case .success(let timeout): return Double(timeout.rawValue * 60) case .failure(let err): logger.error("%@", err.localizedDescription) return Double(Constants.defaultTimeoutMinutes.rawValue * 60) } }() Then I use the timeout value in the rest of the function to set a timer to fire an event.
I do the same, except I don't use MARKs
I use lazy vars as well, but better put them inside a custom UIView which your ViewController uses. This separates the actual view code from your VC and not just the viewDidLoad
People in this post keep expanding the scope of what we‚Äôre debating :). I was choosing between the 3 options in the original image. Yes, if we are talking about initializing a value type or we require temporary variables, the block starts to look much more attractive. Of course that also opens up alternatives like separate methods, extensions, etc.
I'd love to see some tutorials on this and really just on Xcode in general. I'm pretty sure I'm using about 2% of it's capabilities right now, and I'm sure there are plenty of people in a similar boat (I would guess that if you don't use it professionally, you miss out on an awful lot because it's not like there's any good documentation out there now). &gt; I do think those demonstrations would be best done through video but what says you? I agree with thisischemistry, video plus transcript is best. A great example of this are the lessons from [Point Free](https://www.pointfree.co/episodes/ep55-swift-syntax-command-line-tool). They've got a video and a full transcript including code plus timestamps so you can go to the appropriate part of the video if you just want to follow along with a section of the transcript.
That's merely a matter of syntax, not performance. Defaulting to fallthrough or not makes no difference, as either can trivially opt for the other behavior.
&gt; A switch statement is not O(1), it is O(n) without optimization. This is because each case needs to be evaluated until a matching one is found. You're essentially finding an item in an unsorted list. To clarify, this is referring to a switch statement in Swift (or Ruby, or Lisp, or ...). In languages like C or Java, the cases must be constants, and so the set of values can be sorted at compile-time.
All sorts of optimizations can happen behind the scenes, in Swift too. However, there are no guarantees and many times a switch statement is O(n) in those languages too. In fact, even when the cases are turned into a sorted lookup table they are most likely still accessed through a binary search which is average case O(log n). You can achieve O(1) if you can convert the switch statement into a lookup table where all possible values are indices. However, this may take quite a bit of space when the cases vary widely in value. All of this is optimization, which is why I said "without optimization" in my comment. For small switch statements that are not used in a tight loop I wouldn't bother optimizing, even if I did consider optimizing the statement I'd first profile the code to see if it was worth the effort.
&gt; I would say lowest character count is generally easier to read. Perl says, "no".
You've got a small typo there. In your second-last code snippet, you conform SomeView to `Configurable`, not `InitConfigurable`.
Higher kinded types
The ability to completely exclude the objc runtime on apple platforms
Yeah, timestamps are wonderful to have. Bonus points if they are clickable to open up video at that point or if the video has a way to click on an annotation to jump to the appropriate part of the transcript.
post your code and show us where you‚Äôre stuck. Id write the code for you at my contract rate of $125/hr
99.9% of Cocoa frameworks are written in Objective-C or C. Much of that code started in mid 1980s. Apple isn‚Äôt going to rewrite working library code. I think ObjC runtime is here for a long time.
I don‚Äôt expect them to rewrite everything, I want the option to exclude it. (ie. no cocoa at all)
I don't understand why the FeedModel() array is not providing the UI Picker with values? Is the syntax incorrect?
I don't understand why the FeedModel() array is not providing the UI Picker with values? Is the syntax incorrect? Please take a look at my update I posted
Can you post what the FeedModel code looks like?
This would only be possible for command line-style binaries, for what it's worth.
Oops! Thanks! Great catch.
It would also benefit libraries. I just had an incident where using `Array&lt;UInt&gt;` was 7 times slower on Mac than Linux (same laptop). I‚Äôve converted to `ContiguousArray` to mitigate the slowdown caused by `NSArray`.
Dang
If Apple is serious about server swift, they need to do that. Apart from "import Darwin"/"import glibc" for really "low level" stuff, one should be able to use the same Foundation on all platforms. It's kind of a mess right now
You never get a callback that the models has been downloaded. Do that and reload the pickerview.
Not use 100% CPU all the time
That more precisely the Swift language. Of course the compiler would have to follow along.
While compiling, it *should* use 100% to get done as quick as possible,
at least make an option to turn it off with an argument like come on I don‚Äôt want 100% CPU being used 24/7 when compiling
Why are you setting the layout.itemSize in you sizeForItemAt? That‚Äôs the whole point of that method. You are returning the size, so the collection view and it‚Äôs layout know the size for each item as it‚Äôs getting created.
But... 24/7? How big is your program? :p. But yeah, the compiler could be more efficient.
I just posted an update. Please have a look
Is the compiler pegging your CPU while building, or is the IDE pegging your CPU while editing/indexing?
Fair enough about choosing between the actual options offered. Though my answer is still the same- I always do #2 because sometimes the block will help readability. I rather always do it than sometimes do it and sometimes not because consistency is important for readability, too. Ergo, my answer is the same. :)
Yea there's definitely an impedance mismatch between swift and obj-c/cocoa. Where I work we have a lot of legacy obj-c that's moderately painful when you have to work with it, but 95% of the time now we're in swift only land. And in swift land I don't miss the dynamic features. There's still some impedance mismatch with cocoa(I'd love to see a CocoaV2), but it's not that bad especially if you're doing coded UIs. I'm not saying there shouldn't be support for dynamic features. When they're the right tool for the job it's great to have them available, but I I'm happy that in swift they're generally not the default tool for pretty much anything. Sometimes the static way is marginally more work, but when you've got tens of devs banging away at the same feature for years, static techniques tend to reduce the amount of foot sooting you encounter as compared to dynamic.
Interesting question, I‚Äôm not a compiler expert so these are user view comments. 1. Probably the most important is to get compiler support on all platforms to an equal status. The reasoning is pretty simple I don‚Äôt want to see Swift become another Objective C, basically an Apple only tech. It is about the right time to encourage a wider adoption of Swift which would vastly increase the talent base. 2. Pay attention to the standard library! This can mean several things, performance always being one aspect. But I‚Äôd also like to see more functionality borrowing what ever isn‚Äôt supported already from the C++ and Python standard libraries. Basically refresh the library for performance and maybe even obsoleting some of the old Objective C approaches if that is the way to better performance. 3. Build in more capabilities with respect to math. Consider Julia and Python with Numpy as examples. In part that means more math convenience functions but it also means lower over head solutions to arrays and such. Consider how Numpy turned a language known to be crap for performance into a reasonably powerful technical programming platform. 4. Keep enhancing the interpreter to make it a better place for cross platform scripting. Again the goal is wider adoption. However when fully fleshed out I would expect to see Swift scripting to replace BASH. In fact I would totally love to see this happen. The candy here would be the ability to compile important or performance related scripts when the time comes. This might not be as easy as I think it will be, but Mac OS and even iOS with BASH gone would be a great long term play. 5. Slightly related make Swift a fully supported scripting language for iOS! That is as a scripting language for apps. More so for users to script their own programs. Playgrounds are almost there so it isn‚Äôt like this would take much effort on Apples part. It would require a change of attitude. 6. Some of my desires let‚Äôs say are to see a focus on the simplicity of Python and its large standard library. I‚Äôm not a fan of the school of thought that standard libraries and core language functionality should remain small. Fat isn‚Äôt the answer either but an expanded library, more Swift native (Swifty?), would be welcomed. To get to this point maybe what we need is a Swift ‚ÄúBoost‚Äù like solution where new library and language features can be fleshed out over a wider population before being included in the Swift standard. Not that the current situation is bad but somethings really require a bit of testing. 7. Maybe this should be number one, but look towards C++ and the good results had there by standardization! Yes a lot of headaches but on the other hand a standardized Swift give the industry something to trust and promotes independent development. In other words I can see Swift benefitting in the same way that C++ did by becoming ‚Äústandardized‚Äù. Frankly it would be a huge help in seeing a successful Swift outside of Apple. Sadly it would be successful because it would no longer be seen as an ‚ÄúApple‚Äù technology. However it is the only way I see for Swift to break into the many niches in which C++ is entrenched. In any event off the top of my head concerns! To be honest for the little bit of programming I do these days I would reach for Python first and maybe C++. Swift is the first language in a long time though that has me considering it for general use. I know that some of my suggestions like standardization May cause some to barf but from my perspective it is mandatory for the long term. I fully expect C++ will remain an actively supported language well after I‚Äôm dead and gone and that is due to a well respected standard.
Marzipan and other initiatives could do much to obsolete older ObjectiveC code. I understand the original posters concern though it is obviously a bigger deal than he may realize. I never could stomach Objective C and the verbosity of Next Step. Frankly being able to write reasonably complex apps and never see the nonsense of NS / Objective C would be very welcomed.
I assume you're presenting all of this natively to the user. In this case, yes, it is quite easy. Adding images would involve using an instance of a `UIImagePickerController`. User could import either a library image or take a photo with their camera (you can disable one or the other if need be). Data is returned via the delegate methods, at which point you can scale down your `UIImage` in size and, if need be, on quality for file size purposes. If you need to show a binary input as a checkbox, there are libraries on Github for that. The easiest thing on iOS would be to use a `UISwitch`. A `UITextField` can handle the single line input. Additional images, as stated by others, can be managed locally as an array of `UIImage` objects. You can take them the same way as above: `UIImagePickerController`. Now, for your upload: Is it to a service endpoint? Or is this loading into a web view? If an endpoint, URLSession or a networking library like Alamofire can deal with your upload to your API. If a web view, you can take your data and upload via JavaScript methods to your web view instance.
Maybe it is me but the concept of an array should be native to the language! Why one would need to include anything NS related is beyond me. I can understand supporting NS, it is basically mandatory for Apples systems, but arrays of basic types like Integers should not be any ‚Äúheavier‚Äù than in any other language. This makes me wonder what is Apple doing with the bridging to NS? You would think that the compiler seeing a simple type would generate a simple array just like C would. This bridging to NS is one reason why I would rather see more native solutions in the Swift Library. Maybe native isn‚Äôt the right word there but I do think that Apple sometimes has taken the easy way out by just mapping to old and slow NS code.
How i can solve my problem with the resize?
Marzipan is based on UIKit which goes back to before 2007, and itself is probably all ObjC too :)
At the moment Array is a thin wrapper around an internal representation. On apple platforms the internal type is NSArray, and on Linux it‚Äôs ContiguousArray. All of the Foundation types are also NS bridged on Mac with their own implementation for Linux. I‚Äôm not 100% sure about Dictionaries, but I expect them to be backed by NSDictionary and Mac. I understand the need for bridging when interacting with cocoa or apple Foundation but objc message passing is much slower than method calls. When writing cross platform libraries it would be nice to have the option to only use C/Swift rather than ObjC for consistency (and speed)
speed. That thing is slow as hell.
I‚Äôd like to do kernel development with Swift. I know there are some projects out there already but I‚Äôd love to see the compiler support building without a runtime or C library natively.
why this is bothering you?
How large are you talking about? Array on non-apple platforms are always backed by ContiguousArray
Better auto completion
Performance is the main factor for me
That seems like a problem imo. I don't know. I just know that it is standard practice for Array classes in standard libraries to be non-contiguous, because at some point you can't allocate a contiguous array of N bytes because there might not be a free, contiguous slot that large. NSArray, std::vector, and Java's ArrayList all do this.
Create a localized file as [usual](https://swifting.io/blog/2016/11/20/27-localize-your-strings-swiftly/), then try this code: import Foundation enum Language { case `default`, english, italian } extension Language: CustomStringConvertible { var description: String { switch self { case .english: return "en" case .italian: return "it" default: return "" } } } extension String { func localized(language: Language) -&gt; String { guard language != .default, let path = Bundle.main.path(forResource: language.description, ofType: "lproj"), let bundle = Bundle(path: path) else { return NSLocalizedString(self, comment: "") } return NSLocalizedString(self, bundle: bundle, comment: "") } func localized() -&gt; String { return self.localized(language: .default) } } English localization: "Hello" = "Hello"; Italian localization: "Hello" = "Ciao"; Here's how it works if your default is English: print("Hello".localized()) // Hello print("Hello".localized(language: .default)) // Hello print("Hello".localized(language: .english)) // Hello print("Hello".localized(language: .italian)) // Ciao
std::vector is guaranteed to be continuous (for non bool)
Oh, TIL. Scratch that. I can confirm this for the other two tho, as that's been the case for NSArray forever and I did double check about ArrayList
Good to know about ArrayList... i didn‚Äôt think memory was still that limited. I‚Äôve been stress testing my code with ~500MB ContiguousArrays. Most practical applications will be under 2MB
This is not accurate. Array *can* be backed by an NSArray, but usually is not. The slowdown is from having that possibility, not from it being present in that case.
If you look at the stdlib source it‚Äôs currently ‚Äúif objc NSArray else ContiguousArray‚Äù
You need to mark your function @objc As a side note - syntax has changed A LOT since 2.2, it's probably a good idea to use 4.2 or jump right to 5 if you're just learning - less confusion when you do eventually move up
Its part of the realm configuration object: &amp;#x200B; `let realm = try Realm()` `print(realm.configuration.fileURL?.path ?? "No file url, probably in memory realm")`
 Started learning Swift/App dev December last year, yesterday got my second app in the AppStore. My first app was a customizable calculator, and this new one is for taking notes/making lists... I don't know how much more cliche my learning journey can be lol! All my resources came from here, stackflow, and YouTube, I'm truly thankful to the people generously offering their help and sharing their knowledge. Hope my app is structurally sound as I will be learning to add cloud-sync features to it after a family vacation. Any critics or suggestions from the Pros here would be greatly appreciated! :) [https://itunes.apple.com/us/app/quickli-mini/id1459479510?ls=1&amp;mt=8](https://itunes.apple.com/us/app/quickli-mini/id1459479510?ls=1&amp;mt=8)
@IBAction and @IBOutlet already mark it as @objc
Use .dateChanged(datePicked: )) no need to use VC.dateChanged, that's trying to make it infer whatever ViewController is
The improved generics implementation in the compiler was implied...
Improved error messages when using closures. Many times an error within a closure will not be reported, but you'll get a bizarre error at the at the boundary of the closure.
For me, it stops autocompleting if I make 1 single mistake. That‚Äôs annoying. Yesterday I accidentally used a semicolon instead of a colon when I made a new dictionary. I didn‚Äôt notice until I kept writing and autocomplete would not do anything. Xcode wasn‚Äôt even telling me there was an error. The entire text just became 1 color and I was thinking ‚Äúnot this shit again.‚Äù I kept hitting escape to show autocomplete suggestions but nothing. Finally I decided to build and the error showed up.
It‚Äôs made more complicated by the fact that Array backing stores are conditionally a private NSArray subclass. So ‚Äúis this an NSArray‚Äù becomes a somewhat ambiguous question. The main source of overhead other than the branch for backing store type is the ObjC runtime checking for weak references and associated objects during deinit. I have a PR up to fix that in most cases, but it needs some help on the ObjC side to get the full win while being correct in edge cases.
Thank you very much for you help, you guys have been an amazing help.
Thank you very much. Credit to the SDK here, there's so much less code to write than the Android version of this app.
What is a good language to start learning before learning Swift? I would love to just start learning Swift right now but I do not own a Mac.
I think you're going about this the wrong way. Accessibility options exist for a reason. You should try to work your UI in such a way that even if the user has bold text enabled it should scale properly.
Yeah, I saw that and tried to install 4.2, but Xcode won't let me use it as I have an older version... bummer
I tried it and it returns: "Argument of '#selector' does not refer to an initializer or method
Compilation speed.
Wow... thanks for such wonderful feedback. I'm looking at Point Free right now, it seems like a good resource but I will check out their videos and see for myself. It seems that my hunch that there is a need for tutorials on instruments as well as Xcode in general was correct. I currently have a tutorial series in line for Core Data, I want to simplify it and show that it is simple. Do you think I should jump to instruments right away or do Core Data first?
How do you think you‚Äôre going to write any platform app except for a command line executable without it?
You can use Foundation without ObjC
I won‚Äôt, the goal is to write high performance libraries for Mac. Rather than fast on Linux and 5-7x slower on mac
Swift, it isn't.
You can't. Apple frameworks are still in Objective-C because of Swift limitations and the effort to convert them.
You missed 7 hours of conversation about this
They are different tools for different problems, thats like asking in what ways is a hammer better than a screw driver ...
I‚Äòd say safety. Strong static typing and optionals basically built into the core of the language, the latter of which also have really nice syntax
In which areas, swift is chosen over python?
Honestly they're two completely different languages used for entirely different purposes. But if I had to pick something, being able to extend enums in Swift can make code much cleaner and more adaptable
Who cares? Pick one and use it. The very question is pretty much meaningless. Do some research and come back with a list of stuff that you care about and we‚Äôll tell you how to use Swift to accomplish it. Do the same somewhere that people do Python programming.
Thank you.
This is awesome.
I don‚Äôt know if your trolling or trying to setup a joke, but swift right now is for mobile (iOS) development there are some server side implementatios of it but to the best of my knowledge (and I very much could be wrong I‚Äôm a mobile developer not a web developer) these are hobby projects
Honestly, the Compiler is ok. It has things that could be better, but it's ok. What I want to see is an emphasis on tooling. I want refactoring tools similar to what Objective-C and Java have. I want autocomplete that doesn't hiccup every 3 seconds.
I don‚Äôt know if your trolling or trying to setup a joke, but swift right now is for mobile (iOS) development there are some server side implementatios of it but to the best of my knowledge (and I very much could be wrong I‚Äôm a mobile developer not a web developer) these are hobby projects
I'm not trying to troll you at all. I just know swift is used for iOS development and other than that I'm clueless. Therefore, I asked the question which is better python or swift. Probably should've googled it myself. Thanks anyway.
You'll need up update Xcode first for sure. Current GM is 10.2
I tried reading up on this, but I fail to understand when that would be useful. Also, isn‚Äôt that already possible by using closures? (I have only read a little bit on this, so I‚Äôm certainly not well-versed in higher-kinded types)
That's what I saw, only problem is I'm running El Capitan (Macbook Pro mid-2009) and there's no way for me to update Xcode for a newer version. The last supported was 7.3.x which is what I am running... Too bad I guess, I'll eventually upgrade my set up probably with a hackintosh! In the mean time, this will have to do... smh
I‚Äôd say that a post asking for ‚Äúimprovements in the compiler‚Äù doesn‚Äôt ask for language improvements.
Thanks!
Stronger, more powerful and most important, static, typing. Maintaining large programs in python is difficult without a very fine grained test suite, which is difficult to ensure coverage on.
This is an Xcode issue, not a compiler issue. The fact that the error shows up when you actually build the project shows that the compiler is good at this part, at least for your case. :)
Thank you.
HKT are super cool. The basic premise: you can define type constructors which take other type constructors as parameters. This is contrasted with generics/parametric polymorphism, with which you can define type constructors which take other *types* as parameters. The reasons for supporting HKT are flexibility and expressivity. I believe state transformer monads are an example of HKT in action. (I'm sure there are other uses; I just happen to be dealing with monadic state lately for a project so this is on my mind.)
FWIW I would prefer Swift to Python for backend web development. Building anything large in an untyped language is... painful.
Python is also "strongly" typed, by most definitions. It's the static vs dynamic distinction that matters here. (But I wholeheartedly agree with you that type safety is great and Python suffers for not having more of it.)
I don't get it. Is there an issue with compiling??? I've compile a million times already and this question doesn't make any sense to me.
Asking open-ended questions in forums without any effort to provide a good basis for discussion.
``` @discardableResult public func &lt;~ &lt;T&gt;(object: T, function: (T) -&gt; Void) -&gt; T { function(object) return object } let label = UILabel() &lt;~ { $0.text = "Hello, World" $0.textColor = .red $0.textAlignment = .center } ```
What‚Äôs up with the ‚Äúexit zero code‚Äù (probably got that wrong) error that just works if I build again?
Google has a team working on Swift for Tensorflow. Tensorflow being a machine learning library and machine learning is dominated by python. Perhaps this is the context in which OP is asking?
I'd like a hygienic macro system, like Rust. The ability to use a procedural macro to manipulate token streams at compile time is so neat. It's so much nicer than C-style preprocessor macros.
How will they touch the platform? File system? Network?
How are you loading the items? Are you copying from the app and pasting into something else or are you copying from somewhere else and pasting into the app?
The compiler already does. The C library dependency is due to the standard library, not the compiler. See [https://github.com/apple/swift/pull/21358](https://github.com/apple/swift/pull/21358). Hopefully that will get revived again.
Care to share?
1) Interesting. What under/un-represented platform(s) do you consider important (in some order)? It seems that the Windows, android, and Linux support is reasonably well at this point. FreeBSD was supported on an earlier release but does not have someone championing it. 2) This seems specific and vague at the same time. There is active work looking at the performance issues as well as the flexibility and usability of the standard library (e.g. continuing evolution of the string API). What do you see as "Objective C legacy" that is in the standard library? 3) Have you been keeping up with the developments planned for the next release of Swift? Steve Canon put forth an evolution proposal to improve the math utilities. That in combination with the other work should enable better auto-vectorization to kick in from the LLVM side. This obviously would be limited to whatever LLVM can already do. Are there concrete things that you have measured to be slow and have a way for that to be emitted to have more desirable performance characteristics? 4) What makes you believe that there are limitations to the interpreter for cross-platform usage? It is true that there is an inherent limitation on Windows which does not allow you to specify an interpreter using a shebang like approach, but the creation of a file association and naming the scripts with the \`.swift\` extension would allow you to do that. 5) This seems to be a request to Apple, not a request to the Swift community, developers, or foundation. 6) I can understand the desire for that expanded standard library. However, you have to remember that the standard library is always going to be present, even if you are targeting a space constrained system (e.g. embedded). You really do want the standard library to be as small as possible. Shipping additional high quality libraries does solve the problem of the "batteries included" philosophy. The boost model could work (and was recently discussed on the forums). There was a similar discussion recently about the tradeoffs in increasing the standard library and providing supporting libraries recently with a pitch to add an argument parser to the standard library. 7) I think that this is putting the carriage before the horse. C++ standardization arose out of the need due to multiple competing implementations. There was a C++ prior to the ANSI/ISO standard. Due to multiple implementations, a "standard" was constructed. Furthermore, the way that the Swift Evolution works, there is already a committee which steers the language, which has the same purpose as the C++ standards committee. Absolutely, C++ is going nowhere anytime soon. It is evolving again and the language is supported on nearly all platforms and is a great language for many domains. But that doesn't detract from what Swift offers.
You have a very narrow view of libraries
Please, just fix the bugs. I've run into a dozen different compiler bugs, and I've had to rewrite sections of code because the obvious way (to me) caused a swiftc crash, or didn't generate working object code. It's not even a mystery where they are -- there's a ton of good bug reports on bugs.swift.org, and a couple projects where people fuzzed the compiler and auto-generated hundreds or thousands of cases. I really don't care about any new features until they can make it more reliable.
I need this!
Diagnostic quality around closures is going to take some real engineering. Swift's typing rules for closures are so... bizarre. The first set of rules were structured to be far too conservative in all cases except when the body is a single expression. When the closure body is "complex", the compiler backs off and sets up a constraint system that's structurally weird but happens to reconstruct a type in about 50% of cases. Otherwise, the constraints it sets up do more to convince the diagnostics machinery that the closure's type is correct and therefore the surrounding expression must be incorrect. This means that errors in a closure body can wind up cascading outward to unrelated expressions. There's historic reasons for this technical debt in the constraint system - a big obstacle is that one of our typing rules is that we can infer `inout` on closure parameters. I suspect fixing this the right way will involve some subtly source-breaking proposals, unfortunately.
Caveat emptor: I'm speaking from my experience working on the compiler for a few years now, not for Apple. &gt; 1. Probably the most important is to get compiler support on all platforms to an equal status. Getting a new platform up with our existing infrastructure is not an easy task (mostly because there's zero documentation), but it's also not extremely hard. The truly challenging part is getting broader platform support working (stdlib, corelibs, etc) because you probably have a target triple baked into LLVM, and it's a matter of defining a toolchain to point us to the general layout of the ancillary bits of the platform. To highlight great work here, Saleem has been doing a bang-up job bringing up Windows support as a good template for others. There are still some structural issues in this approach. For example, the ABI is not well-defined on big-endian platforms, and there are a pile of codegen correctness bugs in IRGen that still cause trouble for the S390x folks at IBM. &gt; Pay attention to the standard library! This can mean several things, performance always being one aspect. One thing I would like to see in this area is a community-maintained benchmark suite. We currently measure compiler perf against a set of common OSS libraries and have things like the compatibility suite. We could use that same infrastructure to make sure that stdlib primitives and optimizer changes aren't, like, massively regressing NIO across versions. &gt; Build in more capabilities with respect to math. Steven Canon has got your back! &gt; Keep enhancing the interpreter to make it a better place for cross platform scripting. 100% agree. Swift as a scripting language doesn't see much love. Even basics like the REPL are missing basic functionality like being able to reset the REPL without quitting it, ask for the type of a value, see documentation. Basically, I'd love to see somebody go in and bring us up to feature parity with the Julia language's REPL. &gt; Maybe this should be number one, but look towards C++ and the good results had there by standardization! This is one that is much more complicated because it involves a lot of politics. By "standardization like C++" you're probably referring to Apple ginning up a formal specification and submitting "ISO-Swift" or some such thing. Not having a specification is certainly a hindrance to a bunch of structural things - it's literally impossible to have a 3rd-party Swift compiler right now. But it also provides Apple with the flexibility to keep the language in line with their expectations and it's frankly probably not a good idea to write down the semantics of the language as they exist today. Swift still has some emergent behavior as part of its implementation that ought not be set down in stone forever. Honestly, I don't see too many benefits from standardization of C and C++. It certainly lets us compiler folk point to something to end arguments, but even that's not true 100% of the time (see the endless threads about GCC/Clang optimizations "introducing UB by accident").
I've brought this up a few times. One source of trouble is that it will break the model we have at work for incremental builds in a horrific way if we don't severely curtail some features of macros. It's still something I definitely think will eventually work its way into the language.
If you are able to reproduce a bug, even an existing one with your projects, please don't hesitate to write a bug report that duplicates another. Sometimes, your project or report winds up finally providing the information we need to squash these bugs.
Even with bare metal targets in this patch, we rely on libC being there for the runtime. Finding a way to restrict Swift to allow for `nostd`-esque targets is still very much an open problem.
Agreed that the patch alone is insufficient. I don't know how plausible that really is. Even with C, a freestanding environment does not require a libc implementation but does require certain functionality to be present. I imagine that at the end of the day, you will still need a subset of libc present - malloc/free/abort are needed in some form.
So they won‚Äôt even touch intrinsic data types? Okey dokey.
Who are you man? Seriously?! We need to have a chat one of these days :o
I‚Äôll check that out and give you some feedback!
If you‚Äôre OK with leaks (not every embedded platform, but certainly some), you could write a naive bump allocator with free as a no-op. Turn off ObjC interop. Stub the dynamic casting and demangling endpoints to be no-ops/return NULL. Turn off reflection metadata. If you‚Äôre feeling ambitious, teach the optimizer to specialize as much as possible to reduce runtime metadata materialization. Naturally, a bunch of the more dynamic parts of Swift go away, but you can shave your executables down to the bare bones and still have the core language available for these kinds of targets.
could you elaborate a bit more? I'm pretty new and not familiar with UIView and how that works, I tried creating a UIView but it doesn't have an animateWithDuration method, I guess I'm just having trouble picturing how you envision this working
Hahaha. Why? I‚Äôm curious
The hacking with swift slack group is another great place to get help - https://join.slack.com/t/hackingwithswift/shared_invite/enQtNDUyMDc2MzM3MzAzLTNkYTg4ZjA3NmMyNzhiN2IzNjUxOWJmODg1YzRkYjMwMmY0YzA5MDFkYWFhMjVhYWU2NGRjMzMwZTdiMDZlYzI
I have a superstition about `unowned`. Even though technically you're right, I've still run into enough weird crashes over the years, that don't make sense and seem impossible, that I tend to just go with `weak` instead, even when it shouldn't be necessary.
I don‚Äôt think it‚Äôs possible to detect paste event if it‚Äôs not in your app, so it‚Äôs a no.
Interesting! Out of curiosity, what's the biggest issue it creates? Is the incremental build issue due to the *existence* of macros, or would incremental builds work fine as long as no macro definitions had changed between builds? My concern is that, between now and when a macro feature would be introduced, lots of specific language features will get proposed &amp; implemented to solve issues which procedural macros could also address. Basically lots of use cases for macros would be obviated by one-off solutions, and we'll end up with a much larger language rather than having a language feature enable library solutions.
It‚Äôs a static method of UIView which means you don‚Äôt have to instantiate an UIView to use it. It allows doing simple animations by changing a an animatable view‚Äôs property value inside it‚Äôs block. UIView.animate(withDuration: 2) { // Update property here }
ARKit
Would you be able to elaborate a bit more?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/h_n] [What improvements would you like to see to the Swift compiler?](https://www.reddit.com/r/h_n/comments/bh5x4n/what_improvements_would_you_like_to_see_to_the/) - [/r/iosprogramming] [What improvements would you like to see to the Swift compiler?](https://www.reddit.com/r/iOSProgramming/comments/bguvme/what_improvements_would_you_like_to_see_to_the/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
It says the link is no longer active, thank you for the suggestion though!!
Use ARKit
Yes. That happens to me as well. PM me if you find a solution.
ARKit can precisely measure device motion using accelerometer, gyroscope and video data. Combined with its ability to find the planes including floor surface, you can find device position relative to that plane. Delve into ARKit documentation and related wwdc videos to get started
That might happen sometimes, but it's also possible that the closure contains code that could not possibly be correct. Generally, when I have a closure with a compile error that I can't spot quickly (because the compiler error usually doesn't help), I'll put the code inside the closure into it's own function to see the real error.
abstract classes
Since Apple doesn't have a calendar, Jtapplecalendar is probably going to be your best option unless you want to create your own calendar.
Try this: Auth.auth().currentUser?.uid
Hit-testing on a horizontally detected plane may be what your looking for all.
Looking forward to the release
What I find funny about UISearchBar, is that it doesn't support Dynamic Type (i.e. in the Settings app, users can configure a large font). I've recently hacked on that a bit: [https://github.com/bvankuik/BetterDynamicTypeSupport/blob/master/BetterDynamicTypeSupport/BDTSSearchBar.swift](https://github.com/bvankuik/BetterDynamicTypeSupport/blob/master/BetterDynamicTypeSupport/BDTSSearchBar.swift)
I'm not sure if this is a compiler thing, but *hot code reloading*. If something ever drives me away from UI programming in Swift, it's the lack of this.
That‚Äôs a good strategy. Let me also say, I‚Äôm not trying to justify why things are broken here, I‚Äôm just telling you why this happens. Emitting diagnostics, unlike a lot of things around strongly-typed languages, has zero theory to fall back on. It‚Äôs an incredibly poorly understood topic, which makes our architecture pretty unique in a way. Our semantic diagnostics are based around a depth-first traversal of a broken expression tree and recovery through a partial constraint system. This means there‚Äôs a pile of special cases that try their best to dig out an error and can do so pretty successfully in a lot of cases. But fundamentally, where we can signal semantic errors to kick the diagnostic machinery in gear matters a lot here. Hindley-Milner-style type reconstruction algorithms only fail along applies. A closure rarely serves as an apply boundary in Swift, and when it does we often have reconstructed the parameter type from the apply arguments but haven‚Äôt inferred the return type correctly because the body is too complex. Unfortunately, if we have inferred a return type, it‚Äôs semantically ambiguous whether it‚Äôs wrong or the outer expression consuming it is wrong.
&gt; Something I would really like to do though is work through some files and focus on rewriting them into really clean, conventional, and efficient code. That's a good idea. I'm sure the people who [print out traces and highlight every memory allocation](https://twitter.com/johannesweiss/status/989537627782205440) aren't the type of people who would care enough to have written good code thus far.
Is is a static property? User is a class type. Not an object.
Good stuff! I like to use a UITextField and an @objc #selector in that case to substitute textDidChange.
I don't know how I landed on this several days old thread, but I'd be happy to explain how that bit of code works. It can be useful to know how to chain things like this and what maps/filters/etc can do. pictures = items.filter({ $0.hasPrefix(‚Äúnssl‚Äù) }).sort() First we'll talk about `filter`. Filter is called on a collection and accepts a block of code to run as a test condition. It will then iterate through each item of the collection on which it was called and perform the specified test. If the test condition returns `true` then the item will be kept and if it returns `false` then the item will be rejected. In this case it will loop through each string in items and call hasPrefix("nssl") on it. $0 is a variable that represents the first argument passed to your block of code. In this case it's the string you're testing. If the string fails the test (returns false for `hasPrefix("nssl")` then the string will be rejected. All of the strings that pass (`true`) the test will be kept and returned as an array. After the filter selects all of the correct string and returns an array of those string the next bit of code will be executed. In this case, it is the sort() method. This will sort the resulting strings into order and will return that sorted array. It is then assigned to the variable pictures. If we were more explicit with the code we would end up with something very similar to what you had: pictures = [] // This is essentially your filter() for item in items { // $0.hasPrefix("nssl") if item.hasPrefix("nssl") { pictures.append(item) } } // response is returned pictures.sort() // and sorted Let's take a convulted example and assume you have a farm with a bunch of different kinds of animals on it. Some weird government bureaucrat needs to know the names of all of the goats you have on your farm and they need to be sorted alphabetically and their names need to be written in lower case. let names = [] for animal in animals { if animal.isGoat() { names.append(animal.name.lowercased()) } } names.sort() We can rewrite the above as: let names = animals.filter({ $0.isGoat() }).map({ $0.name.lowercased() }).sort() Much like filter() executes a condition and either accepts or rejects an item based on that condition, `map` accepts a closure (block of code) to run on each item. Whatever result is returned by that code is collected and returned in an `Array`. So, in the above example we are filtering out all non-goats and then we loop through each goat calling lowercased() on their name property. This returns the lowercased name for the given goat and those names are then gathered and returned. After this occurs they're then sorted() as the final method in the chain. Here is what the values might look like in memory (with some pseudocode) Assuming: animals = [ Goat:Frank, Cat:Joe, Dog:Gus, Chicken:Hank, Chicken:Saul, Goat:Harry, Goat:Adam, Cat:Rufus ] After `filter({ $0.isGoat() })` executes we're left with `[Goat:Frank, Goat:Harry, Goat:Adam]` After `map({ $0.name.lowercased() })` executes we have: `['frank', 'harry', 'adam']` And, finally, after `sort` we will have `['adam', 'frank', 'harry']` Sometimes the line length of your code can get kind of long when you're chaining multiple things. It's generally a good idea to add some line breaks to make it more readable. let names = animals.filter({ $0.isGoat() }) .map({ $0.name.lowercased() }) .sort()
Is there a way to send the errors I send the console entries I get on iPad (x) to a specific server Server or database (y), so I can see in realtime what's going on on x while looking at y? &amp;#x200B; Might not be clear ask questions if it isn't! üò¨
What Mac(Book) do you have? You really should update to the latest macOS and Xcode version you can first. As for writing backend code serverside and only having containers in the cloud people usually use Firebase.
Also for just cloud logging: try SwiftyBeaver
I've found the answer, I left it in the original post. Feel free to translate it to swift, if you can!
Great, I'll check that out! &amp;#x200B; I currently using a MacBook Pro mid-2009, with El Capitan, which doesn't let me go higher than 7.3.x for Xcode. Apparently, Xcode 8 is supported but I tried and it won't even update to 8... I will definitely try and get Xcode 9 running with some tweaking, like a few people suggested here tho!
It would be copying from the app and pasting into a web browser. I was hoping there was some service-like way to do it, but I might be out of luck...
It was kind of a longshot, but not looking forward to copying and pasting a couple hundred lines at a time :(
Xcode 8.2.1 is compatible with macOS 10.11.5 and newer. Xcode 8.3 needs 10.12.0
Yeah, that what I saw, I‚Äôll try to do it manually instead of running the update inside Xcode!
Yeah, that what I saw, I‚Äôll try to do it manually instead of running the update inside Xcode!
Any switch is logically equivalent to if elseif. What the compiler makes of it might be something totally different. I have seen find-lookup-jump implementations for switch statements so it really depends.
Thanks! =)
Can you only code swift on macOS/OS X? I‚Äôm a 14 year old beginner and I‚Äôm interested in developing an IOS app, but I don‚Äôt know if I can without a MacBook that runs macOS.
What do you mean, apple doesn't have a calendar? IT has a calendar app and the Health app uses a calendar. So, I'm not sure what you mean?
You should have a relevant image at the top, so reddit displays that instead of your github profile picture. And if you want to post your articles in multiple subreddits then you should at least crosspost then, so the conversation about them channels to 1 place instead of being split up.
So did you attempt to google anything? What did you find? https://stackoverflow.com/questions/36414637/how-can-i-make-calendar-view-in-swift
How can I crosspost it?
Have you tried using a computed property for returning just the piece you want? Such as var airingSchedule { return //The path you would want to return } From what i know you cant skip over something like that when using Codable. But you can have it returned in a nicer fashion like so. &amp;#x200B; Best of luck!
Yeah I considered that but what I want to know is if it‚Äôs possible to ‚Äújump‚Äù keys while parsing. I still want to know if it‚Äôs possible (doesn‚Äôt look like it). I have settled for using JSONSerialization for now.
old reddit: https://web.tresorit.com/l#d8S6nLZBN5HyDBXXFYaj9Q new reddit: https://web.tresorit.com/l#DvUl8Pvsni5npdLihr2ufw
Thanks for the explanation! I can absolutely understand that it can be extremely hard, or even impossible to diagnose the ‚Äûcorrect‚Äú error. Way harder than doing type inference on correct code. Unfortunately that doesn‚Äòt change the fact that it can be a bit frustrating at times. Recenty I wrote a small API that uses quite a bit of generic constraints. It was quite interesting: first time I tested some calls that violated some constraints, the errors that were generated were excellent - it contained the specific types with the constraits that they violated, shown at the exact spot where I‚Äòd hope that they show up. Later, I addes some overloads and changed some other minor stuff, and it seems like I hit a breaking point somewhere in the compiler: now, when I violate some constraint, it‚Äòll just tell me that some key path is abiguous, even though the keypath is correct and there‚Äôs a problem with some other parameter. I guess it tries to figure out the overload, assumes the incorrect parameter is ok, but then gets stuck in a dead end when trying to determine the type of the key path, because there is no way the constraints can be satisfied at that point...
Desktop apps are not required to go through the app store. There's even big commercial apps that don't.
[raywenderlich](https://www.raywenderlich.com)
thanks! appreciate the info
What is the value of testing a codable model struct, when the models don‚Äòt have any logic and I don‚Äòt want to test Swift‚Äòs JSONDecoder?
If the app is open source anyone can clone the git repo and run the app on their own device (installation via Xcode)
&gt;You want me to make an entire class that subclasses UIView just to have the label in it? Yes. Presuming you're doing some flavor of MVC, is the C a ViewController? I'm guessing the answer is yes. I'd argue that no is a better answer but that's debatable. However, assuming C==VC, and you have business logic in your VCs, then you really *shouldn't* be creating any labels in your VCs. If you are, then your architecture isn't MVC, it's just MV. There's a whole lot of "MVC" that's really MV. It's not wrong per se, and it's maybe even preferable for really trivial cases, but you should be aware that you're writing MV and not think it's MVC because "it's got some Models and some ViewControllers".
Use real ad units. Pro-tip: make sure the reviewer will be able to see the ads, i once got rejected because i checked the box with advertisment ID but there were no ads visible.
Or, create an archive from Xcode, open it in finder, and distribute the app package you find there.
Jesus fuck, can you type sentences at above a 3rd grade level?
is this also true for iOS?
It's significantly more complicated on iOS. There are ways to distribute apps off the store (e.g. for testing, or internal use at a company), but it's not as freeform as macOS.
Thanks for the hint, I didn't know about that.
You're testing you parsing logic, is it working in a right way, did it parse all the values correct.
Unless I‚Äôm doing it wrong somehow, the app only lasts one week on your device. You have to keep putting it on each week.
`removeFirst` returns the element(s) removed. It mutates the underlying array, so `paragraphs` will have the array of strings you're after.
And if you don't want the first element, you can use `paragraphs.dropFirst()` or `paragraphs[1...]` to get a slice without the first element.
Just calling \`removeFirst\` without assigning the result worked for me. Thanks. And calling \`dropFirst\` also works.
For iOS apps, you can either publish them to the store, or sign them with an Enterprise certificate for ad-hoc distribution, but that requires your participation in the Enterprise program. Please note that the rules of distribution for the Enterprise program are such that you are only allowed to distribute the app to members of the same organization. So, you're not supposed to distribute enterprise apps to outside users. Your other option would be to allow people to download the source code and compile it themselves to put on their device using their own dev accounts.
Codable doesn‚Äôt let you ‚Äújump‚Äù values like how you are wanting, but you can get essentially the same result as what you are wanting by manually writing the ‚Äòinit(from decoder: Decoder)‚Äô for AiringData instead of letting the compiler synthesize it for you. This would let you read the nodes array during the decoding process and change how it is stored in your model so you don‚Äôt have to go through the extra step when using it.
I did this with a little app I wrote for some friends and distributed it through Testflight. They had to provide me an email address which I then added into my developer account under testers, then they could install the app through Testflight. [https://developer.apple.com/testflight/](https://developer.apple.com/testflight/) I believe you have to be at the $100/year developer level to do this.
Correct. Didn‚Äôt used to be this way, but has been like this for a few years now. The certificate being used to test an app on your own device expires after a few days, or even a few hours in some cases. To get around this you need to actually ‚Äúarchive‚Äù your app, and code-sign it using a provisioning profile. I believe you can now self-sign without a developer account, though I‚Äôm not certain about that.
I use SpriteKit. The physics are just a bit off, but with some dedication, it should be a quick fix and coding for it will become relatively easy.
Anything specific regarding the "a bit off"? collision detection? or physic calculation in general? Also thank you for replying :)
you'd have to renew it every 90 days.
If that is your goal, then instead of hardcoding 50 lines of XCTAssertEqual(repo.id, 3081286) repeating all the values from your mock network request, wouldn't it be much easier, less fragile, and just as effective to decode-then-encode twice, and check to make sure you got the same value back?
&gt; We will use it to mock network request and speed up our test by faking real network request. "Mocks" and "fakes" are different types of objects used for unit testing. A mock *mocks*, and a fake *fakes*. Also, speed has nothing to do with it. You remove the network from the test in order to isolate the SUT -- that's what makes it a *unit* test. Even if your network were so fast that the mock was somehow slower, you still wouldn't use the real network for a unit test.
thanks for the reply - alright good to know
Ah, I didn‚Äôt properly connect ‚ÄúApp Store‚Äù in the title with ‚ÄúiOS App Store‚Äù, but yes, if it‚Äôs an iOS app it may be more straightforward to build &amp; deploy individually unless OP has a developer account, and then TestFlight may be a good option.
Got it. Try to look into ‚ÄòAccessibility‚Äô section, maybe it has something like that. Just a guess.
About accessing enum associated value: https://stackoverflow.com/questions/31359142/how-to-access-a-swift-enum-associated-value-outside-of-a-switch-statement So it doesn't make sense to do `f.associatedValue` because it most case the associated value are different. But something like this can be achieved using reflection... So there is no more ways to access enum associated value other than the three I listed...
Also, I‚Äòm effectively writing a test for Codable if I‚Äòm testing the parsing logic like that. If we had a custom decoder and wrote a CustomDecoderTest, perfectly fine. For my part though, I‚Äòd leave the default JSONDecoder untested and pretty much just assume it works.
I had a `UICollectionView` which, when you moved between landscape and portrait the items would change size. `UICollectionView` inherits from `UIScrollView` so it would try to keep the `contentOffset` consistent across the change. Instead, I kept the `IndexPath` of the top item, and the ratio, from 0.0 to 1.0 of how much of the item was scrolled off the top. Once I had the new layout, I'd reset the `contentOffset` to that `indexPath` and ratio.
What are* all the different ways
&gt;The important thing here is @testable import, which makes possible to access to internal fields of SearchResponse inside the Testing target. Generally avoid doing this. When writing tests, they should only poke the public API of your objects to verify their behaviour. Letting implementation details slip into the test target via `@testable` it becomes too easy for team members with less knowledge of the domain to start trying to test your internals, making one of the main benefits of tests (refactoring) difficult as you now have to start changing your tests.
That SO question is crazy. The whole point of associated data enums is that you can‚Äôt compile any code that accesses data that doesn‚Äôt exist.
Checkout their open source project [IGListKit](https://github.com/Instagram/IGListKit). Might give you a better idea of what they‚Äôre using. In short, it‚Äôs probably a collectionview.
OP is talking about a desktop app though. This only applies to iOS
Yeah, this is probably the case. \`UITableView\` is just a really simplified version of \`UICollectionView\`, complex layouts usually need the later, I suppose all the big apps use collections instead of table views for their feeds.
The main concern for me is the keyboard offset. Have you got experience on that? By right you resized the view to fit the keyboard. The visible area is reduced. After that what am currently doing is a guessing game, offset by the keyboard height - statebar. Which does the job but sometime give me strange results. ie when inner view is bigger than visible area.
This one should work: https://join.slack.com/t/hackingwithswift/shared_invite/enQtNDc0NDUyODgxMzUxLTU3OGFlNTJhNTg1M2U0OWRlNTE3MmRlNWE1MWM2MjU1MzU0MmE5NTY0YTc0N2MxOGJiMDJhYmYxM2ZiNmE4MGI
Width should matter. Height should not.
You can instead have the app upload an image, and then have a Firebase function get triggered to analyze the image against everything else in the bucket, and then notify the app when it‚Äôs done. This would be faster (processing) than having the device do it. If it‚Äôs time critical, use http functions because triggers are not immediate execution (could be up to 10 minutes before they fire). Then you could bring in ml or anything else you want because you‚Äôre doing it in the cloud function.
Thank you!
How can you override what a user prefers? Years of teaching. You are asking the question wrong, user will always have a preferred languished, but you can still choose which language you want to return as base or force a language inside the app... but user will still prefer their phone language instead of what you might force them to have...
You could use a pragma (active compilation flag) in a scheme not to initialize the sdk. You could use a different target and not link the library nor initialize... You decide
No, their names are: - `collectionView(_:numberOfItemsInSection:)` - `collectionView(_:cellForItemAt:)` - `collectionView(_:layout:minimumLineSpacingForSectionAt:)`
You seem to be asking two questions here. To answer the second, you don't need a Mac to learn or use Swift. The first is a giant can of worms and you're going to get a bunch of angry internet programmers complaining about any answer that anyone proposes. I'd say Ruby or Python, but I fully expect 17 people to show up and call me (and my dog) rude names for even suggesting that.
You can use Swift on almost any computer, but developing iOS apps is another story.
I answered this when you asked something similar the other day. You don't need a custom framework or override to do this: [My answer](https://reddit.com/r/swift/comments/bgur14/how_force_nslocalizedstring_to_use_custom_locale/eloc3bf/)
Using a boolean \`NO\` should work. I'm fairly certain both would work but I'd stick with the \`NO\` :) &amp;#x200B; Source: I work on the Firebase iOS SDKs.
thanks, that was helpful. I'd got sidetracked trying to figure out how to use Calendar - Foundation. And I hadn't realised your initial comment implied Apple has not Calendar object / class. So that threw me off a big. Thanks for coming back with that link though. I'll dig into it for sure.
I agree with you. Just wanted to add that there is at least some value in testing provided frameworks: If you're upgrading to a newer version of a framework, and your tests are still green, you at least know the new version didn't break anything. Probably depends on how much you trust a framework. I would probably trust Codable. And many times other tests that test some logic might eventually provide enough coverage if not mocked away.
You can also do a adhoc export, this creates a ipa file. Which you can give/send to your users; they can then install it on their device using iTunes.
https://github.com/NSExceptional/SwiftForumsStyle
https://github.com/NSExceptional/SwiftForumsStyle
Ahh yeah didn‚Äôt catch that for some reason...
[Here it is!](https://github.com/NSExceptional/SwiftForumsStyle) Feel free to submit PRs to improve it :) I feel like the whole forum needs an overhaul... Apologies for the lack of comments and organization, I've only been working on it in my free time
Be ma friend? I work on a super app that uses a lot of your stuff ;)
Hello. Started to learn Swift. Has anyone ever watched LinkedIn Learning videos on Swift? If so, how good are the classes? Thanks!
REALLY???? Facebook app??? With Groups, Comments, Messaging, Live Streaming,.... REALLY???
It will affect only my strings not the ones from custom framework
awesome, thanks for the tip!
this might be an option. I just want to compile a quick app for 2 friends to use on their macbook pro.
Anglea Wu on Udemy was great fr me.
I‚Äôm just excited for pandas data frames in swift. I followed all of the instructions for running TensorFlow from the github repo, and it won‚Äôt run. Is it updated for swift 5 yet?
Nerd, thank you for the expanded answer. I understand how the logic works, but why does this work so well as opposed to value or object for my default key?
I would love to read a book, whit lots of good examples and swift code to follow and learn! :)
What do we think about this RELATIVELY NEW deep learning language??? It's relatively new... obviously... we don't have CLUE!
I think it's awesome! Does that help you to write your book?
Definitely. Thanks.
Great. I‚Äôll do this. I am also planning to focus nicely on fundamental and recently impactful ML concepts that have been relevant for decades. I hope this will help too.
Thanks!
Nice. Pandas dataframes are definitely cool. Unfortunately I also failed using them in Swift 5 (maybe it is not yet updated for Swift 5). But I think most of the things will be working by 2020 (time I‚Äôll publish the book). üôÇ
Great, thanks! This is used with the Stylish extension?
Well, it just saves a conversion step that you can let the language handle for you. If you know that what you are reading in was an Int that was stored, then the language will do the conversion for you if you specify that it should. But if you just use `defaults.object(forKey:)` then it returns something of type `Any` which you not only have to cast to your type, if you do it with the `as?` operator, what you get back is an optional that you then need to unwrap (note that you can avoid this optional by using `as!` if you are confident that the casting will succeed, but if you're that confident, you may as well just use `defaults.integer(forKey:)`. Does that help?
That makes sense, one should understand what he/she is using, but don't waste too much pages on explaining the real hard stuff (e.g. the mathamtics behind backpropagation). I think your book will be much more interissting, if there are a lot of examples one can build in swift, because there are not somany good books about that (at least I think so), but there are a lot of books about ML concepts.
I used these one to implement IAP in a recent app we‚Äôve been working on at work. It‚Äôs very good and straight forward. But make no mistake there is a lot of than what you need to do after using the tutorial. If you‚Äôre using Auto-Renewable subscriptions, you still need to validate the receipt you get from Apple. Send it to the server and determine the expiration dates. For Non-Renewable, I used Swift StoreKit pod only because this is up to you the developer to implement your self. Apple doesn‚Äôt do anything for you like providing you with a receipt. You have to determine your purchase and expiration dates by yourself. Swift StoreKit does all this for you. Hope this helps mate. Cheers.
Take a look at RevenueCat: https://www.revenuecat.com/
In order to set the datasource and delegate, you can either do it through the dragging method you're describing, or you can set it to self in the ViewDidLoad function in your table view. &amp;#x200B; I think you should be able to give each tableview separate IBOutlets in the View Controller (TableView1 and TableView2, for example), then set their respective datasources to' self' in ViewDidLoad. &amp;#x200B; I've never tried it, but it's how I would try it if I were doing what you're doing. LMK if that works!
Here callback is a parameter to the takeMeToWH() function, if you want to access it outside its scope you need to keep a reference to it. Define a callback variable of type RCTResponseSenderBlock? in your class and assign it the callback. @objc(TbtNavigation) class TbtNavigation: NSObject { var callback: RCTResponseSenderBlock? @objc func takeMeToWH(_ callback: RCTResponseSenderBlock) { ... self.callback = callback } } Then you can call it in navigationViewControllerDidDismiss() func navigationViewControllerDidDismiss(_ navigationViewController: NavigationViewController, byCanceling canceled: Bool) { self.callback?(["this will be called if it has been assigned the callback"]) }
What's the problem?
Thank you so very much. You just fixed an entire day's worth of struggling for me.
Federated Learning
Why would you need to make a whole new app just for what amounts to a countdown timer?
Well that would only be a small part of the app, but my idea was that each section would have a countdown for their own unique time limit. Ex: English 45 mins, math 60 mins, etc... I think this would be very easy for a student taking the test.
Are you allowed to bring your phone with you into the exam?
No this is purely for practice. It is needed for a project in my cs class.
Taking a look at the latest Instagram release, it looks like they are using a page based setup or custom navigation entirely. The top and bottom bars could very well be built into a custom navigation controller. The Stories section is probably a collection view. Since it is not pinned to the top, I‚Äôd be willing to bet it‚Äôs just another cell in the table view that composes the main screen. Along with the stories cell, they have cells for each post, as well as advertising posts.
[Try this](https://learnappmaking.com/timer-swift-how-to/), particularly [this section](https://learnappmaking.com/timer-swift-how-to/#creating-a-countdown-timer).
Ok. Got it. Feels like people want to see recent advances in NN research in this book. I‚Äôll take care of this.
Starting to work on new project - video editor. It's going to be much like InShot app .. it's going to be a ton of work. Guys at InShot did amazing work.
Great, excited to see how that comes. Good work mate!!
Exactly. Then, in your delegate methods, use If sender == view1 { ... } Else if sender =- view2 { .... }
Create separate IBOutlets for each of the tableview, then identify which tableview is being used in the datasource/delegate method. I have screenshoted the process here : https://imgur.com/a/7Tz0o1g Hope this helps!
I got an idea üí°. How about explain basic topic and then giving a real-world example of it. For instance, 1st explain CNN and then give an example of it such as image classifier in Swift for TensorFlow. Similarly, explain RNN and then machine translation code. What is your opinion on this? Would you like to read book like this?
Where is bar defined? Why is there only one constraint on import? Does import have an intrinsic content size?
&gt; And even better yet, lets say that # is also a character you would like to display unescaped, in that case just double it: That‚Äôs not necessary for the example given in the post. Only if you need to display the sequence "# would you need to add another #
Yeah, this sounds good. I would suggest you to make the book more practically oriented, so every chapter is focused on one small programming project, with theory involved in the begining. For example, the first chapter could be about CNN how they work and then programming a simple image classifier, while explaining how the frameworks works implementing the CNN and working together. The second chapter could be about RNN as an addition to the normal CNN. And the third one maybe about how to be more mobile oriented, eg. some data which can be collected via an app. You could eg. use regression on the data how the user uses the app. Eg. build some ML stuff with sample data, of how long users look at pictures on instagram form different categories, and then build a suggestion system out of it. :)
Hey, Aleykopp69, just a quick heads-up: **begining** is actually spelled **beginning**. You can remember it by **double n before the -ing**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey /u/CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". And your fucking delete function doesn't work. You're useless. Have a nice day! [^Save ^your ^breath, ^I'm ^a ^bot.](https://www.reddit.com/user/BooCMB/comments/9vnzpd/faq/)
Hey BooCMB, just a quick heads up: I learnt quite a lot from the bot. Though it's mnemonics are useless, and 'one lot' is it's most useful one, it's just here to help. This is like screaming at someone for trying to rescue kittens, because they annoyed you while doing that. (But really CMB get some quiality mnemonics) I do agree with your idea of holding reddit for hostage by spambots though, while it might be a bit ineffective. Have a nice day!
Hey /u/BooBCMB, just a quick heads up: No one likes it when you are spamming multiple layers deep. So here I am, doing the hypocritical thing, and replying to your comments as well. I realy like the idea of holding reddit hostage though, and I am quite drunk right now. Have a drunk day!
Hey, BooBCMBSucks, just a quick heads-up: **realy** is actually spelled **really**. You can remember it by **two ls**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Thats a bad article, you shouldnt make timers for actual time.... you should save a date and us a timer to check the amount of time passed since that date ...
&gt; you shouldnt make timers for actual time.. Given OP is a CS student, perhaps you could expound on why not?
Thanks for pointing that out! can you give a quick example?
Most examples are contrived. Paul Hudson has an example in his article about it here: https://www.hackingwithswift.com/articles/162/how-to-use-raw-strings-in-swift
When you add timers, no matter what queue you add them too, there is always a chance of missing a cycle, by saving the date the timer starts and using the timer to compare now to the saved date will give you the exact time the timer has been going.
I know nothing about Sleipnir, but I‚Äôve used Quick/Nimble extensively on some projects. I like it fine for BDD Rspec style testing in Swift. But when given a choice, I always choose vanilla XCTest. One can do BDD style testing using XCContext, and I am a person who prefers primitive testing tools, as that type of constraint leads me to actually writing better code. (Rather than rely on frameworks to make it easy, I want my tests to drive me to make better decisions when designing. So in order to make it easy, I have to make better choices.)
Yeah, realistically the chances of you needing more than one # are really tiny, but I guess it's nice to have once a year!
And ### for that once in a lifetime event :)
Yes! You should use Stylus though, not Stylish. https://www.reddit.com/r/userstyles/comments/6lqap5/psa_stop_using_stylish_if_you_dont_like_your_data/
According to the single responsibility principle, your VC shouldn't be delegate/dataSource to tableViews, they should be separate objects from your VC.
It‚Äôs used if you need to reference something but don‚Äôt want to risk a memory leak from an extra reference. In my mind it‚Äôs most useful in contexts where you *know* the object will still be around, otherwise it‚Äôs more risky than using weak.
It means that you property must be of type that conforms to the protocol.
I use it when I‚Äôm sure that the object should be. Otherwise I‚Äôll get crash as a quick ‚Äúfeedback loop‚Äù and knowledge that this part of code doesn‚Äôt work like I designed it in my mind.
From the [Swift programming language guidebook](https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html): &gt;ARC tracks how many properties, constants, and variables are currently referring to each class instance. ARC will not deallocate an instance as long as at least one active reference to that instance still exists. &gt; &gt;To make this possible, whenever you assign a class instance to a property, constant, or variable, that property, constant, or variable makes a *strong reference* to the instance. The reference is called a ‚Äústrong‚Äù reference because it keeps a firm hold on that instance, and does not allow it to be deallocated for as long as that strong reference remains. &amp;#x200B; &gt;However, it‚Äôs possible to write code in which an instance of a class *never* gets to a point where it has zero strong references. This can happen if two class instances hold a strong reference to each other, such that each instance keeps the other alive. This is known as a *strong reference cycle*. &amp;#x200B; &gt;Swift provides two ways to resolve strong reference cycles when you work with properties of class type: weak references and **unowned references**. &gt; &gt;Use a weak reference when the other instance has a shorter lifetime‚Äîthat is, when the other instance can be deallocated first. \[...\] In contrast, **use an unowned reference when the other instance has the same lifetime or a longer lifetime.**
It's not used often. It should be only used when that block has low amount of code and will be used a lot, so reference counting measurably impacts performance. Otherwise use this instead: \`\`\` { \[weak self\] in guard let self = self else { fatalError() } ... } \`\`\` This does the same but it's more clear that not having \`self\` at the start of your block is an unfixable problem and crashing is the best course of action. This avoids the rare scenario where the same memory address gets reused by a different object of the same class and you get an unwanted behaviour.
I know. We built some camera things on our apps at work, and the Android folks had a much harder time adding it in. (And that‚Äôs not counting bugs cropping up on specific hardware models on specific OS versions)
This is not a good answer, I think you need to either re-read the question or get a better understanding of the differences between `weak` and `unowned`
The memory address won't get reused in Swift like it would in Objective-C. The runtime keeps that memory address marked until all 3 reference counts (strong, weak, and unowned) go to 0. It will deinitialize the object (call `deinit`, release properties, etc.) when the strong count goes to 0, but the pointer stays alive so it can lazily clean up weak references to that object.
What I like about this sub is how peeps will immediately, without gilding or mockery, tell you if your post is wrong. I mean lots of subs do that, but in here the post responder is actually correct most of the time.
The problem with these posts and why I respond like I did is that these responses are detrimental to new devs. It teaches bad habits and doesn‚Äôt explain things properly or even correctly
That‚Äôs exactly why you‚Äôre so valuable to this place. I‚Äôve been the totally incorrect OP several times. Each of those times I instinctively scoffed at the poster saying my code was bunk. Every single time, that poster was 100% correct. This place is a solid resource.
Don't NSObject subclasses (like all of UIKit) get managed by the ObjC runtime?
It is a good answer. Unowned is not often used because it's prone to errors when you need to implement a change months later and you completely forgot about using unowned instead of handling the case where the captured object is deallocated.
I rarely if every use `weak` I almost always use `unowned`. Don‚Äôt say that `unowned` is not used often because that‚Äôs your experience. If you are having trouble using `unowned`, it‚Äôs due to the way you are using closures.
I like how you completely ignore my reasoning and just say "you are wrong because I use unowned"
Your reasoning doesn‚Äôt make your statement correct. You say that unowned is rarely used. That‚Äôs wrong. *You* rarely use unowned is not the same statement. This, and the fact that you didn‚Äôt answer OP‚Äôs question means that your post was not a good answer
Both `weak` and `unowned` are used to prevent retain cycles. `Weak` is safer - if the object goes away, the variable becomes nil which can be tested for. If an `unowned` object goes away and the program accesses it, it will typically crash or corrupt memory. For that reason, use `unowned` only if you know for certain the object will not be destroyed before the closure. Some programmers prefer using `unowned` because the variable won't be an optional and so you don't need to check it for nil within the closure, but it really needs to be used carefully.
I'm not a solo dev, my statement is also based on the code made by people who I've worked with. I pointed out that the question is wrong and explained why. OP didn't give extra context to the question, so I assumed he already knows what unowned is, he just doesn't know why people use it over strong/weak.
A `enum` is best used when you have a limited set of single values that you want represented. A `struct` or `class` is better when you have a wide range of values that you need to represent. For example: enum ConnectionState { case closed, waiting, ready, error } There are only four options there and each one is pretty different. You could represent them with a `strut` or `class` but then you would need a lot of work to make sure you could only have those four values, that the compiler could verify you've covered each value in `switch` statements and such, comparing values, and so on. For example, a `switch` will give you an error if you miss a value when comparing an `enum`: let foo = ConnectionState.closed switch foo { // error here: Switch must be exhaustive case .closed: print("c") case .ready: print("r") case .error: print("e") } And Xcode will also fill in the missing cases if you like. There are a lot of other features but you're best off looking at all the types and comparing them yourself. [Enumerations](https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html) [Structures and Classes](https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html)
I‚Äôve worked on large teams in iOS for over 10 years, in Swift since day 1. All of the teams I work on understand how cycles work and rarely use weak. Again, your subjective experience wasn‚Äôt stated as such. You were stating that one way is better than the other and that‚Äôs not what OP asked for.
Yes, it's basically that weak is an optional and unopened is a non-optional. However, the unowned can actually still be nil, so care should be taken: it's more like an implicitly unwrapped optional with h. For that reason, weak is much safer as it forces you to handle the nil case properly.
The unowned won't be nil if the object it points to is deallocated. It'll point to free or reallocated memory, which is even worse because it can lead to subtle memory and data corruption that's hard to track down.
You can always solve it with `guard let \`self\`= self else { return }` , but still sometimes you just know the closure will exist at the same time as the retained object, and there's no way it doesn't get deallocated with the object itself, I don't see using `unowned` as something wrong, but it should be used carefully.
Probably not useful for IB. But this is a good tool for understanding autolayout issues printed to the console! https://www.wtfautolayout.com enjoy :)
I use it when I‚Äôm absolutely sure it never can be nil because it is used in a class that will always retain the reference when the block will call. Examples: * animation blocks * ReactiveKit bindings
&gt; If an `unowned` object goes away and the program accesses it, it will typically crash or corrupt memory. No, unlike `unowned(unsafe)`, `unowned` is still memory-safe. It's guaranteed to crash if you try to use it and the object is deallocated.
Interesting. Thanks.
So I think it‚Äôs been explained well enough here. I‚Äôd like to tell a story. I once had to fix an app that another company had made, but they went out of bussiness. I had to run through the app and the crashes, and tell where the app was not good. Then I would have to fix it. It took me a while before I understood where all the crashes were coming from. The app did network calls, and used unowned self references in the closures. So when you refreshed a list and quickly went back to the previous screen, the reference to self would be nil, and thus would crash the app. I had some issues with finding these crashes, as I was always testing in the office, with high-speed wifi. I wasn‚Äôt able to reproduce any of the crashes until I was outside somewhere with pretty bad internet, and I tried it again. It crashed all the time. So point of the story: don‚Äôt use unowned unless you know what you‚Äôre doing; and always test your apps on bad internet!
Enums in swift are a lot more powerful than that, though. You‚Äôre more describing enums in languages like C#. Enums in Swift are [tagged unions.](https://en.wikipedia.org/wiki/Tagged_union)
**Tagged union** In computer science, a tagged union, also called a variant, variant record, choice type, discriminated union, disjoint union, or sum type, is a data structure used to hold a value that could take on several different, but fixed, types. Only one of the types can be in use at any one time, and a tag field explicitly indicates which one is in use. It can be thought of as a type that has several "cases," each of which should be handled correctly when that type is manipulated. Like ordinary unions, tagged unions can save storage by overlapping storage areas for each type, since only one is in use at a time. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/swift/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
A good example for when you should use enum is the Result enum that has been recently added to Foundation but have been used for a while by many people. It uses associated values to describe different outcomes without overusing optionals. With having 2 optionals in a struct/class, there would be 4 possible combinations of them being nil or not but only 2 of them are valid, which the enum reflects way better.
Unless it introduces a heavy performance hit then going for "hard to use badly" code is recommended. Using unowned can mean that some change months later will introduce a crash which is possibly rare enough to slip through testing but not rare enough to not affect multiple users.
Don't forget to add a button that she can use to ask you to give her attention. I did that. Trust me on this.
This is so freaking hilarious, to whoever created this bots! &lt;3
Of course they are, I kept it simple and only talked about one use of them. That‚Äôs why I said to go to the documentation and read more about the features. I also purposefully left the door open for other people to jump in and provide their views on the topic.
No, it‚Äôll just crash
&gt; I wasn‚Äôt able to reproduce any of the crashes until I was outside somewhere with pretty bad internet, and I tried it again. It crashed all the time. Use the Network Link Conditioner. https://developer.apple.com/download/more/ https://download.developer.apple.com/Developer_Tools/Additional_Tools_for_Xcode_10.2/Additional_Tools_for_Xcode_10.2.dmg https://download.developer.apple.com/Developer_Tools/Additional_Tools_for_Xcode_10.1/Additional_Tools_for_Xcode_10.1.dmg https://download.developer.apple.com/Developer_Tools/Additional_Tools_for_Xcode_9.3/Additional_Tools_for_Xcode_9.3.dmg You know about this, right?
&gt; a low amount of code What? I'm not sure you're doing this properly.
Yeah I do now. I looked it up as soon as I had the idea it might be network speed related.
I relate to this strongly. Our code has a lot of `safeObjectForKey` in it as the devs tunneled into dictionaries. The problem here is that if *any* dictionary key returns nil, there is a big problem with the data and you should stop immediately, not tunnel in to the next key. So, they did exactly that, tunnel in to the next key and in the case where the data was nil, they added `safeObjectForKey` and didn't see that there was anything wrong with that. Once you have bad data, you need code that reacts accordingly, you don't create and use what amounts to a band-aid and go past the issue. You directly respond to the nil data case as soon as the code encounters it. This is the perfect case to break up the dictionary key access over multiple lines of code, validate each response before continuing and either issue an error or handle the error if the data is nil.
&gt; That‚Äôs exactly why you‚Äôre so valuable to this place. 100% I see /u/LKAndrew's username and am confident that the response will be helpful and accurate.
So it‚Äôs like an implicitly forced unwrap?
JSON parsing is pretty quick, so the majority of the time spent is probably in the URL session. `URLSessionDownloadDelegate` *is* the right way to do it, because its superclass, `URLSessionDelegate`, has a `progress` property of type `Progress`. This progress object can then be passed to `UIProgressView.observedProgress` to keep the progress view updated automatically. AFAIK, there's nothing to hook into to get the progress of `JSONDecoder.decode()`, unless you implemented all your own initializers for your `Codable` structs and had them report progress, and that would pretty much defeat the purpose of using `Codable`.
One possible solution is to use an activity indicator showing the user that something is happening. Make sure to keep the indicator on the main thread.
Unless the download is huge or the connection really slow, the random delays are from the server queueing requests, preparing the payload or network routing, etc. In other words, those aren‚Äôt things you can really get the progress of. What you should do is show an indeterminate indicator, like an activity spinner, so the user knows that something is happening. Make sure the UI updates on the main thread and if the parsing is slow then do it in the background. Plus render the content as soon as you can and fetch images asynchronously when needed.
Uhhh... I think you mean `URLSessionTask`, not ‚ÄòURLSessionDelegate`: https://developer.apple.com/documentation/foundation/nsurlsessiontask/2908821-progress
It does not work. I am not the one who is calling print("Hello".localized(language: .english)) it is the included framework which does that...
I agree with the others. Check out the UIActivityIndicatorView class. The delay you are seeing is from the remote server, and a UIActivityIndicatorView is clear to the user that the app is doing something. If you showed any type of progress bar, and the request takes less than a second, then it will look more odd than just an indeterminate view.
I'm planning on making my first app. The API I'm gonna use only provides XML. I don't anything about XML. Anyone know of good resources online? Anyone wanna teach me?
Correct. Thank you.
Tl;dr: without ‚Äúunowned‚Äù or ‚Äúweak‚Äù, ‚Äúself‚Äù will never be deinitialized/deallocated causing memory leaks, which affect app performance
Following a Udemy course on iOS 12 development and using swift. Trying to plan out my career idea for leaving retail and getting into software development without qualifications and how I go about doing that in Manchester, UK!
Enums are useful every time you have mutually exclusive possibilities. Struct means ‚Äúthis AND this‚Äù Enum means ‚Äúthis OR this‚Äù
What‚Äôs the framework? Are you certain what method they are using for localization? How can you be sure?
No clue what that is, care to describe it?
Its a 24-48 hour challenge to create a game from scratch based on a theme. And people from all over submit their entries.
I don't think there is one but that is a very cool idea if there isn't one it'd be a fun thing to try and organize.
There are all kinds of game jams all the time, I‚Äôm sure someone does a mobile jam. You probably won‚Äôt find an iOS specific game jam because mobile game engines are mostly cross platform and nobody wants to write common game systems for a jam in a language that‚Äôs not useful for game dev.
Ahh, so just a normal programming challenge thing.
Thank you for your answer. But I don't see how you would transform in a custom object what you get from your `URLSessionDownloadTask`? `JSONDecoder.decode` takes an argument of type `Data` and I have no Idea where to find this with a download Task
I'm saying that the download task will provide the progress of the *download*, but not the progress of the decoding, and that's probably ok, because decoding itself should be pretty quick. Have you timed it?
It is a third party binary framework.. Maybe I was not clear, forgive me. The problem is that they are using NSLocalizedString. I need to override it somehow
Use a spinner. Everyone loves MBProgressHUD.
It's*
This isn‚Äôt necessarily true. You don‚Äôt need unowned or weak for a closure to be released from memory
Perfect, explanation. Thank you kindly :)
Normal, usually this means they‚Äôre going to reject it again
Oh seriously, wish I knew this earlier lmao. I guess I just waited all this time to submit it again. They wouldn't even clarify the issue with me though.
You don't require a Mac to use and learn Swift. If you're interested in learning Swift, then it's a perfectly fine language to learn programming with.
I've waited 2 weeks for a re-review before. If this is the apps first approval expect to wait a bit. Updates are reviewed much faster.
Oh okay, thanks boss.
That‚Äôs unfortunately normal too haha. App review will really test your patience.
You need to place 2 views as subviews for your scrollview with frames and background colors as you want them. Then if you want to fix the problem that when you pull you still see what is behind the scrollview, you need to add two more subviews at the back of your scrollview (behind it) one at the top and one athe bottom of the screen. If you give them a height of at least 200 px you should be ok. Hope you understand it helps, cause I'm on mobile. Otherwise I can help you more once I am my Mac. One additional thing you could do instead of the views at top and bottom is detect the pull direction top or bottom and change the scroll background color to match the color you want.
[http://lmgtfy.com/?q=swift+label+break](http://lmgtfy.com/?q=swift+label+break)
Why do you have a scroll view behind a collection view? This is bad practice stop. Put 2 UIViews in the background, any further view (a single UICollectionView in your case) on top set background color to = clear and you‚Äôre done.
Even when I use a labeled break, it still doesn't allow it inside a closure.
Add a completion handler to the function.
Thank you! Because I directly use a collectionView controller. I think I'm lost in the hierarchy there. I think don't know how to put that view behind the first cell.
Thanks man. I updated the question and added the video. I think I don't quite understand the hierarchy of the view. Searching some tutorials about it!
You need to return something from the closure. Think about it this way: if you were calling a function inside a loop, how would you break out of the loop? Do the same (or similar) thing.
Perhaps a for loop isn‚Äôt the best approach to going about this, perhaps a while loop or a closure would be better
The collectionView delegate is also a `UIScrollViewDelegate`. You can implement the `scrollViewDidScroll:` function and adapt whatever approach you chose: bounds, transform, mask, etc. About the layer floating at the front, you can draw it deeper by setting the `zPosition` property to something negative for example. But I wouldn't mess with the "private" hierarchy of the collectionView. A simple way: A transparent UIView set as the collectionView background view, with `clipToBounds` set to `yes`, and your blue view as a subview of this view. You can then change its `frame` or `transform` in the `scrollViewDidScroll:` call.
The problem here is that `observe` is an asynchronous task. I assume this is Firebase, so this means that this is probably going to the network to get the value you need. I could be wrong, but this closure could also get executed multiple times, in case the value you're observing changes later on, so you might consider `observeSingleEvent` instead. But back to your question... I can think of 2 things. The first is solving your problem with code, the second is solving your problem by re-architecting. The first thing you can do is factor out the inside of the loop. perhaps write something like func snapshotExists(chatId: Int, completion: (Bool) -&gt; Void) { Database.[...].child("chatGroup\(chatID)").[...].observeSingleEvent([...]) { (snapShot) in completion(snapShot.exists) } } Then you could do something we're the completion block calls the next iteration. So func checkAllSnapshotExists(startChatId: Int, maxChatId: Int) { snapshotExists(chatId: startChatId) { exists in if exists { // whatever you'd do if startChatId &lt; maxChatId { checkAllSnapshotExists(startChatId: startChatId + 1, maxChatId: maxChatId) } } } } //somewhere else checkAllSnapshotExists(startChatId: 1, maxChatId: 10) With this approach, `checkAllSnapshotExists` will keep getting called until it finds the first one that doesn't exist, and also up to 10. This will be super slow, and isn't great. Worst case, you'll be making 10 network calls in a row, which is pretty bad on mobile. So my second suggestion is to have a secondary structure in your Firebase database that contains this same data, so that you can query all of it (and not more than that, like the idea of "just get everything") in just one call. I think that this will be the best solution. I gotta run now, but happy to answer follow up questions
Does the TestFlight review reflect much on how the App Store review will go?
Little to none. Basically just means you pass basic validation, they don‚Äôt check for usage or internal APIs or anything like that afaik. We‚Äôve had builds get approved to TestFlight that have been rejected in App Store review.
Thanks!
Same and I‚Äôve had builds pass TestFlight but eventually fail App Store review for using Firebase cocoapod. They are doing something with locations I believe, I don‚Äôt remember now either locations or calendar(?), but something that requires a permission param in your info.plist. Had numerous builds pass without it but eventually they catch it. Not the first time I‚Äôve heard of it either.
This doesn't work when you're trying to jump from the scope of a closure to outside of it. It doesn't even make logical sense that this could work, if you think about how closures work.
woudn't be just as an infinit UITableView?
&gt; https://reddit.com/link/bigew8/video/akibdpwt93v21/player Since a collectionView inherits from UIScrollView, it **is** a UIScrollView, and a UIScrollView is a UIView, so you can use UIView's insertSubView atIndex
In my experience, it doesn't mean they're going to reject it again. It could just as easily get approved. All of my builds that've got stuck "In Review" have eventually been approved. But if you're impatient, you could reject the build yourself, then resubmit it, to get it back in the queue again, and presumably get a different reviewer, who will do the job in a sensible amount of time.
I was actually thinking of doing that. But then again, I might catch myself in the same scenario I am in now. I guess I‚Äôll just wait a bit. I doubt it‚Äôll go up to a month. Unless something is seriously wrong.
From what I‚Äôve seen I‚Äôm guessing when it goes in review it‚Äôs assigned to a person and out of the queue... and possibly something got side tracked and it got forgot about or you never know since we are all humans if that person had to leave unexpectedly. On any case send an email to Apple and explain it‚Äôs been in review for a week, it will most likely get approved ASAP after they read the email.
I‚Äôve emailed them 2 times about this issue. Both times saying ‚Äúwe have an agent on the case. app review times are complex. we will review your app‚Äù stuff like that.
Not quite I would like a flat styled upickerview not necessarily a table view that loops
What I would do is add it as a view behind the collectionview and update its constraints in scrollViewDidScroll, so that it lines up. But this looks like a task for the first cell, what exactly goes wrong when setting it as a background on the first cell? If it shows when you bounce, you could disable bouncing for the collectionview. Also, please try to name your variables appropriately. It makes your code easier to read, for you and for others.
If your app is in review for a month, contact a doctor
It seems UiTableView is your guy here. You simply need to wrap it into a component that would behave more or less like a picker (how much it would resemble a picker is totally up to you since you are the author).
Other scenario could be that your app got flagged by X reason. In that case it wouldn‚Äôt matter if you submit again. Since the app review process is a bit of a black box to all of us, it‚Äôs difficult to say, but it could be going a more complicated process, jumping between different teams, etc. If you are certain that your app follows all the guidelines, I wouldn‚Äôt worry about it!
There is an option at App Store where you can submit a inquiry about app status. Apple will reply you within a day or two.
You‚Äôre super fun at parties right?
You are *not in a for loop* inside your observer closure. The original for loop has almost certainly already completed a long time ago before the first call to your closure happens.
Ok so I'm not sure if I'm doing this the way you said but it's giving me an error "Ambiguous use of 'animateWithDuration'", have you ever had that? Also saying 1. Found this candidate (UIKit.UIView) but I'm not really sure what that means, I tried putting a UIKit in front of UIView but it doesn't change anything override func viewDidAppear(_ animated: Bool) { UIView.animateWithDuration(2.0, animations: { self.slider.setValue(index, animated: true) }) } }
Yes, that's the method to use. Several points here: - Call super before anything else on viewDidAppear - Weakify your self inside your closure - Fix your method name with this last swift version syntax UIView.animate(withDuration: 0.3) { [weak self] in self?.slider.setValue(index, animated: true) }
Thanks. So I decided to chuck the viewDidAppear since I'm already overriding viewDidLoad and don't see why I shouldn't put it in viewDidLoad instead but here's what I've got for the animation code to actually try and get it to consistently move but it seems to go only from 1 to 50 and then stop (full slider range is 1-100). Not sure what I'm missing but it seems like I might need the timer to keep iterating through further? Or at least some kind of while loop I think. The resizeable/track stuff is just custom images for each side of the slider for color and texture, not sure why it's moving off but I can worry about that later. UIView.animate(withDuration:2){ let range = self.slider.maximumValue - self.slider.minimumValue let increment = range/100 let trackleft = #imageLiteral(resourceName: "SliderTrackLeft") let trackleftresizeable = trackleft.resizableImage(withCapInsets: insets) self.slider.setMinimumTrackImage(trackleftresizeable, for: .normal) let trackright = #imageLiteral(resourceName: "SliderTrackRight") let trackrighttresizeable = trackright.resizableImage(withCapInsets: insets) self.slider.setMaximumTrackImage(trackrighttresizeable, for: .normal) switch self.slider.value { case self.slider.maximumValue: self.sliderState = .Decrementing case self.slider.minimumValue: self.sliderState = .Incrementing default: break } switch self.sliderState { case .Incrementing: self.slider.setValue(self.slider.value + increment, animated: true) case .Decrementing: self.slider.setValue(self.slider.value - increment, animated: true) } }
Thank you so much for taking the time to write this response, I‚Äôll be trying your method once I get out of school, and I might try to do what you suggested about getting all the data in one call, I know very little at networking so thank you for that suggestion!!
Your code must be kept in didAppear, didLoad doesn't mean your controller is displayed, only that it's view has been loaded. An your UIView.animate block should only contains your setValue part
Thank You so much for posting this :)
[removed]
That‚Äôs got to be frustrating.
Wow a quality post quick take out the Pepe memes!!
Swift allows for type inference in certain contexts so it can be possible to omit the type. &amp;#x200B; \`hour\` refers to the variable defined above \`let hour\` &amp;#x200B; the print function takes in \`Any\` type which does not have a function or variable called \`hour\` &amp;#x200B; the \`func component\` call has a signature of \` func component(\_ component: Calendar.Component, from date: Date) -&gt; Int\` &amp;#x200B; when passed \`.hour\` as the first argument, Swift is actually inferring the type to be \`Calendar.Component\`. So if you execute \`print(Calender.Component.hour)\`, it will work because you are giving the full type information.
The first input of the component function is of type Calendar.Component, so you don't need to type the enum name there. The parameter type of print is Any, so you need to type out Calendar.Component.hour
I figured it was something like that, so I tried Calendar.current.component.hour and was confused why that didn't work. Why is it that I had to use Calender.Component if I may ask?
Thank you!
I got it. Thanks.
Could you tell me where the Calendar.current.Component comes from? I looked it up in the documentation and I couldn't find it. Why is Component a property of current here? A bit confused. :)
`current` is a static property of `Calendar` with type `Calendar`. [https://developer.apple.com/documentation/foundation/calendar/2293438-current](https://developer.apple.com/documentation/foundation/calendar/2293438-current) `component(_:from:)` is an instance function of `Calendar`. [https://developer.apple.com/documentation/foundation/calendar/2293299-component](https://developer.apple.com/documentation/foundation/calendar/2293299-component) `Calendar.Component` means the nested type named `Component` inside `Calendar` [https://developer.apple.com/documentation/foundation/calendar/component](https://developer.apple.com/documentation/foundation/calendar/component)
Ohhh. So, because current is of type Calendar, that means Component is part of it. I get it, but that is so confusing! :)
It appears that .current makes Calendar to become kind of like a Singleton...?
 `component(_:from:)` and `Component` are 2 different things.
Define "didn't work." I'm also almost positive that .hour doesn't actually have any arguments, and the method you pass it into is just using it as a flag to know what to pull out of the Date object.
You can have multiple Calendar instances but .current is the one representing the current settings on the device. &amp;#x200B; You rarely need to use a different calendar.
:)
copy that my friend
Why do you want this? Is your designer designing with Android components? If yes, then you should probably use the iOS counterpart of the basic components (s)he uses. The couple people that might use both platforms won't get confused that the components look slightly different but people who only use 1 platform will not like the "copy the android design 1:1" way.
Saying, "It broke" doesn't help anyone to help you. If you have issues, you should strive to give as much information as possible, including what the actual error messages you're getting are.
thanks
You don‚Äôt need to bother about such things. Since your *framework* project is referenced in you *app* project both targets will be built and put in the same place. This means that the linking process won‚Äôt fail and your *framework* will be bundled in you *app*‚Äôs bundle. Did you experience any issue ?
https://developer.apple.com/design/human-interface-guidelines/ios/overview/themes/ You can browse through this to help you identify the required elements.
I just don‚Äôt like the appearance of a wheel, I do however want the pickerview behaviour though.
You can enter mobile games in Ludum Dare. There is not, however any kind of "app jam" where you're given a topic and told to create an app in a weekend, at least not that I'm aware of.
Ha. Indeed, it is.
Thank you! üëç
I assume you are talking about a swipeable tab bar like these - https://medium.com/@droidbyme/android-material-design-tabs-tab-layout-with-swipe-884085ae80ff iOS doesn‚Äôt really have a direct equivalent to that control in the standard library (there are external libraries that could in theory do it). While you could in theory use one of those libraries - I don‚Äôt think that‚Äôs the best approach; instead of trying to figure out how you can port the exact interface from an android app to iOS you should instead be looking at what are the standard design patterns on iOS and how to best present the information in your app through the iOS design language. When you try to do direct ports, or exact shared designs, between iOS and android it tends to result in apps that don‚Äôt feel native and well designed on that platform and won‚Äôt be as well received by users of that platform who are used to the typical design of that platform (this is equally true with people trying to port iOS apps to Android). Spend some time going over the iOS guidelines from https://developer.apple.com/design/human-interface-guidelines/ - and then try to determine how to best build the functionality of your app within those guidelines.
See I was getting that sense from not finding a decent tutorial on the topic, but I see large apps like YouTube or Netflix using that design, so figured it was probably okay. I‚Äôll look through that page though, thanks.
As a general rule of thumb, use Google‚Äôs apps as a guide of what not to do when designing apps for iOS - they tend to blatantly ignore the guidelines whenever possible to make things that look and feel like android. I understand why they do this from their perspective - but generally their apps do not feel like native iOS apps. Netflix doesn‚Äôt really use this design element, although something somewhat similar. While I‚Äôm not saying there are never cases to use custom design elements (or maybe even ones borrowed from Android) - it‚Äôs something that you need to be evaluated within the context of the app. Custom controls like that are generally not as out of place in certain situations where there is a heavily custom full screen interface (like say Netflix or a game) as it is with a more standard utility app (like say the Gmail app which feels terribly out of place on iOS)
Who is the certificate holder for publishing these?
Ah I see, I didn‚Äôt realize that google ignored apples design guidelines. I‚Äôll look at how other apps handle what I‚Äôm trying to do and see, thanks
For your first example: in Swift, structs have default initializers whereas classes don‚Äôt. If you write an initializer for your class with the same naming as the struct initializer it will work just fine. For your second example: unlike, say, BASIC, Swift is case-sensitive, which leads to ambiguity if you declare a variable that has the exact same name as a struct (or class, or enum, or function...). This is why types usually start with an uppercase letter. e.g. struct Foo { let bar: Int } let foo = Foo(bar: 3) // no error struct foo { let bar: Int } let foo = foo(bar: 3) // error I‚Äôd recommend getting started with the Swift book, which you can find [here](https://developer.apple.com/swift/resources/).
`var few = foo(origin: bar(x: 2))` should be `var few = foo(first: bar(x: 2))`. &amp;#x200B; You will need to create a custom initializer for `struct foo` if you want to use `foo(first: bar(x: 2))` in your second question.
&gt; from C++, the main difference between structs and classes is that classes can be made private This does not apply to Swift at all. One of the primary differences between `struct` and `class` in Swift is that a `struct` uses value semantics and `class` uses reference semantics. This means that a `struct` will be copied when it is passed whereas a `class` will pass on a reference. If you mutate a copy then the original will stay the same, if you mutate a reference then all references to the original will reflect the change.
I transcribed origin into first from some other example code incompletely. Sorry about that. As far as the second question...is it that more than one property requires the init function?
&gt; From what I know about OOP from C++, the main difference between structs and classes is that classes can be made private Every language has its own conception of "OOP" -- especially C++. Swift is not C++, and this statement makes no sense in Swift's conception of OOP. &gt; Can anyone help me understand why structs are allowed to do this when classes aren't, and what is up with that second variable? Or perhaps just a link to some documentation that would help me understand this a bit better? Where did you look? The chapter called (surprise surprise) "[Structures and Classes](https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html)" answers all of these questions.
This is great stuff. I especially love seeing projects making use of ARKit and CoreML. Experimentation in the ML and AR spaces is so exciting!
Thanks man!
Thank you!
Thanks buddy
You're welcome and I hope it helps! I'm happy to help more if you need!
As it is, you can either use the default initializer (`foo()`), or use `foo(first: bar(x: 2), second: 1)`. You can't just initialize one property of a struct without creating a custom initializer. I'd recommend creating custom struct initializers in an `extension`.
I thought this was overall pretty good, but I think that it is missing the ‚Äúwhy‚Äù factor. I think it‚Äôs important to explain why should I make this walking protocol when I can just make a human and horse class as they are here without the protocol?
I can‚Äôt wait for async await. In the meantime promise kit will be my first choice for async.
I don't understand the example where he does: let result = keychainData(service: "UserData") .flatMap(makeAvatar) .flatMap(save) switch result { case .success: break // continue on with our program... case .failure(KeychainError.notFound(let name)): print(""\(name)" not found in keychain.") case .failure(AvatarError.invalidUserFormat): print("Unable to generate avatar from given user.") case .failure(FileSystemError.readOnly): print("Can't write to disk.") } I mean, what is the exact type of `result` in this moment? It seems to me like it should be a kind of union type, at least for the failure side of the enum. Something like `Result&lt;Void,KeychainError|AvatarError|FileSystemError&gt;`? Oh wait, I'm not seeing that he chose to return `Error` as the failure type for every function. Sure, that's all well and good. But in the real world, many functions will have different `Failure` types. In that case, wouldn't it be nice if Swift actually supported union types? So that you could still do `flatMap` AND get the compilers help with making sure you've dealt with every error possible?
Good job trying to make the concept understandable, but Protocols are never blueprints. Those are Classes. I would define them more as *certifications*, as in contracts that entitle you to certain capabilities. You as a Protocol define your minimum requirements, properties and methods, a contract, that you will have to fulfill to be able to implement this protocol. A blueprint is another thing.
What‚Äôs your modalTransitionStyle
Maybe I got it wrong, but I think you should present the UINavigationController in the transition, not the UICollectionViewController.
The proposal says, that because it's just syntactic sugar for closures, there are no guarantees on which queue the code after \`await\` will be called on. A foresee a lot of \`await DispatchQueue.main.async\` to be all around your code.
Dear god, why does he use an ultra-light font?
It can be looked at as, "a blueprint is something you can make an instance from."
You can learn the syntax of the language on your iPad. Get a cheap virtual machine ($5 month from DO) and ssh in with your iPad. Get a cheap Bluetooth keyboard to help typing.
You can learn Swift at Ubuntu (https://swift.org/download/). I never tried so I can not help you with it.
Exactly, and you can‚Äôt make an instance from a Protocol
I tried, and it was awful. Just take any Mac. You need at least i3 processor.
it is a "present as popover" instead of "present modally"
Your Failure types can be different, as long as they conform to the Error protocol.
Is it like navigation controller branches of if it presented modelly or pop-over? In other words, once presented modally, there is no navigation controller since the original navigation controller does not count.
tested and got it resolved, thank for reminding me
Yes, a controller that is presented via a modal transition should be seen as stand-alone, kinda like if you had set it as the root view controller of your Storyboard ; except it will keep a reference to the UIViewController which presented it (with presentingViewController). But it will not be a part of a UINavigationController or UITabBarController or whatever container controller the presentingViewController is a part of.
You're welcome :)
Okay sure, but if you only depend on that protocol then you can't do an exhaustive switch to make sure you've handled all errors. So I'd still prefer a union type.
Maybe it is me eye but i see nothing jerky in that vid
This would still be far better than what we currently have. Also if it is the case that the last function called in the chain is what defines the dispatch queue it would be trivial to write a queueSwitch function that takes a generic and a que and just call that right before performing ui logic or whatever.
If you have an iPad get Swift Playgrounds.
You can run macOS on vim. This is what I do. Or get Ubuntu 18.04. Install sourcekit-lsp for vs code. But sourcekit-lsp is not stable. And lack of some features that U can find in Xcode. But still doable.
I know that if you check the frame of an animated item using UIView.animate immediately after the animation is triggered, the frame will be set to the new frame, as the animation in that scenario is done out-of-process for performance reasons and so on. I‚Äôm relatively unfamiliar with UIViewPropertyAnimator, but my first take is that animator?.stopAnimation() stops the animation but snaps the property to the end value, or that the call to startAnimation starts from the previously set value (which may be the intended end value of the previous animation) regardless of what the user sees. Does that sound possible? That would explain why a re-trigger would snap to the end value of the previous animation before starting the next, appearing jerky.
Yeah, if you want the compiler to catch when you‚Äôve left out an error condition, then you‚Äôre right. You can type your variable as Error and then use a single switch to iterate across the different error types, but it‚Äôs going to make you add a default, so you won‚Äôt be alerted to the fact that you missed one of your error cases.
It got confused as the right side is also \`Int?\`
Because `item["videoId"] as? Int`, you told it that you want it cast to `Int?`. First of all, please post text and not images. It makes it much more difficult to help you if you post images of code. Second, try to avoid `Any` at all costs. It has value but most uses break the strong typing that is a core tenet of Swift. Third, what are you trying to accomplish here? I assume some sort of JSON parsing. Perhaps include more code and we could help you find a better solution than this kind of mess.
Page view controller perhaps? https://developer.apple.com/documentation/uikit/uipageviewcontroller Or maybe a horizontally scrolling collection view?
what app you use for ssh for iPads ?
Do you really need to write an accordion table with uiviewpropertyanimator?
I use Terminus and it‚Äôs been working well so far
I was actually looking into that, I just wasn‚Äôt sure how to have headers for my pages so it‚Äôd be clear what the pages were, you are cool and nice dude!
You can learn Swift without all the app building stuff, it will be pretty pointless though. Why? Because you'd only learn Swift. You'd spend months now only learning Swift. That will bore you out and you won't learning the actual thing: creating iOS applications with Swift. Where's the difference? If you just learn Swift you will only learn about it's language specific things. Swift alone is not very powerful though so you won't be solving any significant problems along your way, thus learning even less. You can try out perfect.org but there you will learn to create server side Swift, also not really what you're looking for. My best advice would be to use the time and get better at programming itself. Pick up a scripting language like python or nodejs. Solve common problems. Read from files, write to files, cut information out of strings/files, parse an url and read information out of it, organize files, write a cli. By the time you can go full Swift you will see that a lot of things in programming are the same all over and over again and really just differ in their details. You will find yourself over time asking the right questions. Eg. a beginner might google "how to spam to facebook". An advanced programmer would probably google things like "facebook api docs", "python http request", "python parse and stringify json" and so on.
&gt; You can run macOS on vim. No, you run vim on macOS, not vice-versa. Perhaps you're thinking of a VM or hypervisor.
Congrats on posting but this is really not a Swift post. I'd post this somewhere else, probably somewhere iOS app related.
Each of your view controllers in a tab could live inside of a navigation controller. That would give you the traditional iOS navigation bar in which you could set a title. Im not sure if that‚Äôs what you mean by ‚Äúheader‚Äù though
Yeah like some sort of indicator that other pages exist, that‚Äôs a good lead though, I‚Äôll look it up and update you on if that does the trick
I just watched a video and I think I‚Äôll just use the dots that indicate to you what page you‚Äôre on and you just swipe into them? It doesn‚Äôt seem like good design from the perspective of knowing what page you want to go to and skipping a page? I‚Äôll mock it out and see how I feel about it...
I'll be honest. You NEED both Mac and Xcode for learning iOS Development. There are so many things to learn and practice for iOS Development, and knowing only syntax won't help you at all. You don't need fancy $3000 Macbook, you can easily find some used decent machine for around $700-$1000.
If you‚Äôre using tableviewcells there‚Äôs an easier way to change their height and have it animate smoothly. You can find an example in the commit history for one of my projects.... https://github.com/numutracker/numutracker_ios/tree/v1.2/Numu%20Tracker/Views/releases Check the didselectrow in the controller and watch for frame changes in the cell. UIPropertyAnimator in my experience so far has some wonkiness involved. I‚Äôve been experimenting with it on yet another project to animate sliding views and had lot of issues with trying to reverse auto layout animations. Eventually I realized I didn‚Äôt need to reverse them, just stop them without completion and replace them with my other animation. Much easier that way. Huge mess of currently unorganized code here: https://github.com/amiantos/aeongarden/blob/ui-refinements/Aeon%20Garden%20tvOS/AeonViewController.swift
https://www.reddit.com/r/swift/comments/bfif3n/where_to_code_in_swift_without_ios_development/?utm_medium=android_app&amp;utm_source=share Now you can even write Swift code in Linux and Windows as well.
Do you have any idea how the day view on the calendar is done? Because that has the day indicators at the top and you can swipe through the days
Yes, that's exactly what happens! But I'm not sure how to work around this behavior. Is there some way to access this intermediate state of TableView? Or maybe I can do it without UIViewPropertyAnimator at all?
Instead of the lines you have [here](https://github.com/sidyakinian/redditExpandableTestCode/blob/6aaa50ec537d221ce73ddc8d8243239464e27a93/TableVC.swift#L52-L53), what happens if you simply use `tableView.reloadRows(at: [indexPath], with: .automatic)`?
It is indeed JSON parsing, and the videoId is either a string or an int, depending on the client that sent it (yeah I know). But the videoId could also be nil. This first checks if the videoId is an int and tries that, then checks to see if it‚Äôs a string, and optionally maps it to an int. I just thought the warning was funny.
But the frameworks for iOS and MacOS?
Promisekit is a big fat mess at this point, give this a try: [https://github.com/google/promises](https://github.com/google/promises)
Just buy a second hand Macbook from 2012
Why would anyone make a property represented as several types? That just seems like they're asking for trouble. Is there possibly a versioning system that would allow you to differentiate between version A with `Int` and version B with `String`? I'd at least make several versions of `struct` with the different representations and try them one after the other. Much better than a mess like this. Also, why use a JSON parser that returns `Any` when we have now have `JSONDecodable` that doesn't do that? It's a lot easier to do JSON when you decode into concrete types instead of anonymous blobs of `Dictionary` properties.
Thanks, already solved, edited post
yeah i was afraid that was the case. i thought maybe if i learn swift alone i would be caught up and just learn xcode but they seem to go hand in hand? *sigh*
Thanks for your suggestion! Solved, check out edited post
what other things do you need to know for ios development? is it the UI building stuff you mean?
thing is macs hold their value pretty well, even something from 2012 can still cost almost $400-500 it seems, i rather wait and use that money towards a new one
That not correct. Ive bought several old Macs. I live in a small country. You can get a 2012 Macbook pro 13 for 200,-
Exactly. UI is maybe even the most important thing nowadays.
Xcode is just an IDE. If you know how to use any other IDE it's pretty much the same. Just learn any IDE and get familiar with debugging/break points.
honestly the reason i want to try it. always wanted to make things work well and look nice, and i thought i wanted that in being a web developer but i thought maybe i should give ios a try instead. i guess i'll go back to working with python and maybe understand some concepts more
Both Python and Swift are considered as the simplest languages to learn. It is up to you which one you‚Äôll choose
I honestly don‚Äôt know. It‚Äôs can probably be done quite a few ways
but all the aspects of making an app is not available, and most are saying its useless to learn without it :/
This sounds like a homework question
I wish they thought swift while I was still in college. I am just an old programmer trying to get back into the interview game.
We're saying just learn any programming language and IDE well while you're waiting, and it will all transfer over to Swift. The hard part of programming is not memorizing syntax or where buttons are in an IDE - it's the logic and problem solving behind the program. Right now focus on learning some design patterns (at least MVC) and try to program anything with a GUI. Try making a small app with a GUI in JS or Python. Once you learn this stuff it'll be pretty easy to switch over to swift/iOS development since you're just doing the same thing with slightly different syntax.
You can use backtracking. One way to do it would be to flatten the lists into one long list, then recursively loop through the list to combine them. I haven‚Äôt tested this code out, wrote on my phone, but something like this: ``` func combine(_ flattened: [Char], all combinations: [String], current combination: String, i: Int) { if combination.count == 2 { combinations.append(combination) return } for j = i ..&lt; flattened.count { combine(flattened, combinations, combination + flattened[j], j+ 1) } } ``` You may find this of use (and the other articles): https://medium.com/leetcode-patterns/leetcode-pattern-3-backtracking-5d9e5a03dc26
I would disagree actually: Contrary to popular belief, Swift is not an iOS/macOS app development only language. I prefer Swift for coding a *ton* of things that aren't iOS apps, mainly because the language is just plain well-designed. The main problem is really compile times and module management. But to be fair, all the tutorials focus on iOS dev, so you already have to know programming so you can translate your skills over to Swift to do other things. To learn GUI app development, if you're on Windows, I recommend learning .NET with C# to get yourself started, and trust me, a lot of the skills would transfer to Swift very easily.
Look, if you can build a hackintosh with your actual machine.
Got you. Thanks so much for that.
This looks really cool. Do you have a roadmap? I'd be interested to know what features you're planning for the future.
Not super generic but you should get the point. Also I didn't use recursion since you mentioned flatMap: &amp;#x200B; func getAllPermutations(_ lettersArray: [[String]]) -&gt; [String] { guard lettersArray.count == 2 else { return [] } let firstArray = lettersArray[0] let secondArray = lettersArray[1] return firstArray // iterating through every element from first array .compactMap { firstArrayElement in // iterating through every element in second array and combining it with element from first array return secondArray.compactMap({ firstArrayElement + $0 }) } // combining all arrays with reduce .reduce([], +) }
This is pretty much a generic transpose: func transpose&lt;T&gt;(_ input: [[T]]) -&gt; [[T]] { guard !input.isEmpty else { return input } var output: [[T]] = [] input.forEach { (outer: [T]) in outer.enumerated().forEach({ (inner: (offset: Int, element: T)) in print(inner.offset, output.count) guard inner.offset &lt; output.count else { output.append([inner.element]) return } output[inner.offset].append(inner.element) }) } return output } usage: let letters = [["a","b","c"],["w","x","y","z"],] print(transpose(letters).map { $0.joined() }) // ["aw", "bx", "cy", "z"]
You can also solve this problem by just having two nested for loops and looping through the arrays and sub arrays. I am just trying to do it in one shot using flatMap. But thank you for the advice I will look into it.
Thank you. I am just wondering what does the .reduce method do here?
Thank you very much will look into this implementation.
?? Is used Incase the left hand side is nil so it will default to the right. But it‚Äôs not supposed to be nil or optional on the right hand. You basically have nil ?? Nil. How does it know what to do.
what about AwaitKit? (which builds on top of PromiseKit): [https://github.com/yannickl/AwaitKit](https://github.com/yannickl/AwaitKit)
what makes Google's implementation of promises better than PromiseKit?
The left side of the `??` operator is of type `Int?` The right side of the `??` operator is of type `Int??` which determines the type of `videoId` . Why is it type `Int??`? Because the `Int.init(description: String)` initializer returns an optional. You should only use the `map` method with a transform function that returns a non-optional. Since videoID is expected to be an `Int??`, then an `Int?` will be autocast to `Int??` therefore never needing to evaluate the `??` operator.
I think it's happening because the right side is also optional (rather, the optionality on the right matches that on the left). Try this in a Playground or REPL: let a: Int? = 1 let b: Int? = 2 let c = a ?? b c == 1 // evaluates to 'true' Weird warning though. &amp;#x200B; Also, remember that mapping a String to Int would return an Array of Ints, i.e.: let a = "1234".map { Int(String($0)) } // what you have crashes Xcode for me... not sure why :P a == [1, 2, 3, 4] // evaluates to 'true' It's fine if that's the intended behavior, but just something to keep in mind.
Interesting. I‚Äôll definitely take a look. What makes promises a big mess? Just not in the loop on that
PromiseKit is old and has evolved a lot over time to the point of becoming bloated imo. &amp;#x200B; But outside of my personal opinion, PromiseKit makes you use promises in a way that deviates from common promise usage and to something that is more akin to the library's own idea of how promise synthax should be used in Swift. &amp;#x200B; Google/promises has an API that is closer to more commonly used promise usage, its API is notably very close to the Future/Promise api synthax used in Apple SwiftNIO project which has Apple's own implementation of Promises.
Cool! Glad you figured it out. Animations are one of the bigger annoyances I've experienced in my iOS developer journey! Very finicky and lots of different ways to handle them.
&gt; We're saying just learn any programming language and IDE well while you're waiting, and it will all transfer over to Swift. Looking at r/swift today, which posts would you say have content which would "all transfer over to Swift" from any other language? - I don't understand why Swift tells me "Non-optional type 'Int?'", item is a [String: Any] - Optional, throws, Result, and async/await - Passing arguments [basic question from a C++ programmer] - Accessing enum arguments? - Why is "unowned" often used in closures? And those are just the Swift-related ones. You're definitely not going to get a good understanding of NSLayoutConstraint or NSViewController from "a small app with a GUI in JS or Python".
Dude with untypable name is trolling you, or giving such bad advice it's indistinguishable from trolling. Spending a couple months learning Swift will put you ahead of 99% of r/swift. Plain Swift is just as powerful (or more so) compared to plain Python or plain Javascript. You can absolutely "solve common problems, read from files, write to files, cut information out of strings/files, parse an url and read information out of it, organize files, write a cli" just as easily with Swift as any of the others mentioned here. Untypable name is somehow trying to argue that you need Xcode or AppKit/UIKit to do anything worthwhile, but also simultaneously that you should spend your time using some other programming language that doesn't use Xcode or AppKit/UIKit at all.
You should work on your tone when code reviewing. Although correct, it‚Äôs condescending as fuck.
lol I apologize about that. I'll fix it in the next episode
Wow... you are actually right... Let me ponder on that for a moment. and thanks for the correction.
Also a good point... jeez I stand corrected yet again.
Just here or in other places too? I review quite a bit and text is often difficult to get tone across. This one is a bit matter-of-fact, sure, but I don't see much actual condescension in it.
What a horror our educational system is, that occasionally a homework question can correlate with a task one needs to accomplish in real life. Or that a person asking a question online will take the time to simplify it to its basic form, just as a textbook author might.
I wouldn‚Äôt recommend something from 2012, but many devs still prefer the 2015 MacBook Pro to the current ones
That code escalated quickly
One of Swift big features is weak types and type inference. Also I don‚Äôt see OP even mentioning Any so what even bring that up?
&gt; First of all, second, third. They‚Äôre pretty blunt ways to structure comments ‚ÄúWhy have you X when you can do Y‚Äù comes across quite assumptive. Some people just may never have heard of certain approaches. Maybe consider ‚Äúwhen do you did X, there‚Äôs an approach in Swift, Y, that actually allows you to do X in a safer and easier way‚Äù. And I catch myself saying ‚Äúcouldn‚Äôt you just‚Äù and I often replace it with ‚Äúcould you try this‚Äù. It‚Äôs not an exact science but when I read your comments I felt sorry for the person who asked the question!
Have u tried Codable? Gets rid of the JSON parsing nightmares for the most part
"non-optional type 'Int?'"... Well is it fecking optional or not?
Weak types is not a Swift feature at all, in fact Swift is very strongly-typed. Type inference is not weak typing, it's just a way to have the compiler figure out the correct type for you at compilation time. The title itself mentions `Any`: &gt; I don't understand why Swift tells me "Non-optional type 'Int?'", item is a [String: Any]
oh god i feel stupid, i really have no idea. but thanks. then i *should* continue learning swift as much as i can?
UI looks great. Nice work!
Swift works on Ubuntu Linux. Download Linux and vscode there should be a swift plugin
Enumerating answers is a tried-and-tested method of breaking down a response into manageable parts. By segregating the response into sections you allow each part to be better digested and understood. It's similar to Fowler's [FunctionLength](https://martinfowler.com/bliki/FunctionLength.html) where you break everything down in to smaller, more functional parts. When I made the statement "Why would anyone make a property represented as several types?" it was pretty obviously not directed at the OP but at whoever designed the API, since the OP says themselves that it's due to different client implementations. It was a statement of frustration over the number of times we've all seen similar API and how difficult they make programming at times. I then went on to talk about a possible better way to handle this, one that the OP might not have thought of. It was a teaching moment, not a judgement of the OP. So, yes, I was blunt and I could have probably added some sugar to sweeten up my comments. However, I thought that a simple matter-of-fact answer was sufficient. Thank you for pointing out a better way to handle it.
As u/mikemags1 [pointed out](https://old.reddit.com/r/swift/comments/bj3yyk/i_dont_understand_why_swift_tells_me_nonoptional/em5jz67/) it's a bad compiler error due to the mismatch of the types around the nil-coalescing operator. Sometimes trying to fit everything into one line can cause more problems than it's worth. You often end up with a statement that's difficult to read just how the compiler is going to interpret it. When an error comes up you end up scratching your head at the cryptic one that pops out. Breaking it into lines with explicit types will help the compiler interpret it in the manner you intend and help you figure out the logic better.
see, i dont know anything about that. does it just run on my windows like nothing?
Weak types exist in Swift, so they are a feature. I did not say type inference is weak typing. You've gone off on a completely condescending tangent for absolutely no reason. JSON objects are inherently String to Any. So your point is completely invalid.
Sometimes you need to be more than just ‚Äúmatter of fact‚Äù when successfully conveying criticism. You can justify your breakdown as much as you like, I‚Äôm just stating it came across to me as comments I would not like to see in a code review - regardless of accuracy. Taking the time to care about how your comments impact others is just as important as the contents and correctness of them.
https://swift.org/getting-started/#installing-swift You can‚Äôt run it on windows. It‚Äôs MacOS or Linux only right now.
Weak vs strong typing is a spectrum, many languages have elements from across it. However, you would be hard-pressed to find many people who would find Swift to be a weakly-typed language. Can you give any examples of why you would consider it to be so? You can easily have JSON in Swift without the use of `Any` through protocols, type composition, and other features. Using a `Dictionary` of `[String: Any]` is only one way to go about it. When the title mentions using `Any` in this way it's not really a tangent to talk about the alternatives and good programming practices involving the type. That's why I asked for clarification and then followed up with a comment of using `Decodable` as a way of avoiding it.
Every one you just listed would. Passing arguments, enums, closures, throwing exceptions, threads, and optional types are all concepts that exist in other programming languages. What makes any of those concepts special in swift that you couldn't find out by reading the documentation for a few minutes? Yes. You're not going to learn the specifics of NSViewController, but if you learn how to program GUIs using frameworks and their documentation, then you should be able to pick up any framework and be up and running pretty quickly. How is MVC different in Swift than in another language?
would your pattern end at "cz"? or continue onto "wa" ... "zz"?
End at cz
please explained, how is this what you were looking for? the result is not the same as the result you expected in your question care to show modifications if any to make this work?
Nice, I never thought to do it this way.
It‚Äôs exactly like the error says. You‚Äôre declaring your target twice in your pod file. You can tell by the indentation. You can remove the inner one, do a pod install, and it should fix it for you.
The crash is likely happening when you force unwrap `dateString`. While I don‚Äôt know the data you‚Äôre working with, as you‚Äôre already returning an optional Date, I would ensure dateString isn‚Äôt nil with a guard let and, if it is, return nil. Safer for now, and then you can figure out why it‚Äôs failing.
I would look at the `dateString!` part
to add to what others are saying, why are you returning an optional if you are force unwrapping date?
You're right. I never used **aDate** after assigning value. Would it be nice if I did like this? struct MyJson: Codable { let id : Int? let dateString : String? var realDate : Date? { get { var aDate = dateString if (aDate == nil || aDate == "" || aDate == "0000-00-00 00:00:00") { aDate = ‚Äú2019-01-01 00:00:00" } let dfStart = DateFormatter() dfStart.dateFormat = ‚ÄúYYYY-MM-dd HH:mm:ss‚Äù dfStart.timeZone = TimeZone(abbreviation: ‚ÄúUTC‚Äù) let dStart = dfStart.date(from: aDate!) return dStart } } }
Getting a 404 on the Github link...
Thanks, I forgot to make the repo public Fixed it!
i would rewrite it something like this struct MyJson: Codable { let id : Int? let dateString : String? var realDate : Date? { get { let dfStart = DateFormatter() dfStart.dateFormat = "YYYY-MM-dd HH:mm:ss" dfStart.timeZone = TimeZone(abbreviation: "UTC") if let dStart = dfStart.date(from: dateString!) { return dStart } else { return dfStart.date(from: "2019-01-01 00:00:00") } } } } there is no need for the aDate variable or even checking to see if dateString is valid because .date() will fail if it isn't. if .date() fails, then you return a date with your default "2019-01-01 00:00:00", which you know is valid.
You're exactly the reason I don't post on this subreddit. Too many assholes.
Not meaning to be an asshole and miss the point of the article ( but i'm going to go ahead anyway because I love regex) but your email validation doesn't allow for all possible addresses: [https://regex101.com/r/QJOsk6/2](https://regex101.com/r/QJOsk6/2) &amp;#x200B; IMO when the data format is so varied, like phone numbers or emails, a simpler regex validation is better, with true validation done through reachability or verification.
True! The only reason to use backtracking is if you have any N number of lists or N sized combinations.
: means that what follows is it's type. if you type that as is var videoPreviewLayer: AVCaptureVideoPreviewLayer you declared a variable named "videoPreviewLayer" of the class AVCaptureVideoPreviewLayer without instantiating it &amp;#x200B; if you want an instant you would call &amp;#x200B; let videoPreviewLayer = AVCaptureVideoPreviewLayer()
Put that code in ViewDidLoad()
I apologize, which inner pod are you referring to?
Actually I didn‚Äôt carefully compare my result to their expected result. I misread what they wanted and coded a transpose instead of the permutation they were looking for. I‚Äôll edit my answer to fix this as soon as I can. Thanks for pointing it out!
`private let blurEffect = UIBlurEffect(style: .light)` `private lazy var effectView = UIVisualEffectView(effect: blurEffect)` &amp;#x200B; `view.addSubview(effectView)` `effectView.frame = view.frame` &amp;#x200B; Then if you want to add stuff, on top of the view, you just need to `effectsView.addSubivew(...)`
&gt;... Can I create a new view and put all my elements in there and just add that as a sub view to effects view? Would that work?
That should work.
The app crashes because: **Do not add subviews directly to the visual effect view itself, instead add them to the -contentView.** &amp;#x200B; This is what Xcode said in the console.
I‚Äôve never messed with this but my intuition would say instead of adding it to the blur view then, just try to add it to blur view.contentView or something along those lines
If you want to develop something for iOS and MacOS, then you will have to use a Mac computer with XCode. But frameworks like Foundation, Core Foundation, Dispatch do work in Linux and Windows. Some of the third party frameworks that rely on the above frameworks should also work.
There was a ‚Äúdo ‚Äòtarget‚Äô‚Äù loop and another identical ‚Äúdo ‚Äòtarget‚Äô‚Äù within the same loop. That second one could‚Äôve gone.
Is there an official swift discord? Or at least a discord for swift devs? I find discord the best way to chat and learn
Interesting! Can you elaborate on how to do ‚Äútrue validation‚Äù ?
You send them a code via email or SMS.
Ah of course, thanks. I still see benefit in using types as well as performing true validation. You can pass a lenient Email type around that does basic validation before you do true validation to make sure the user entered their own email correctly.
Use `effectView.contentView.addSubview(_:)` instead.
Great direction. Using light structs to add more specificity to custom types is a stellar way of leveraging Swift's type system ‚Äî one step up from `typealias`, which is better to display intent than to constrain usage. The Foundation type `URL` is probably a good example of this in practice.
This üëÜüèº An example of the custom init process if you haven‚Äôt already found one: The ‚ÄúEncode and Decode Manually‚Äù section in this post https://hackernoon.com/everything-about-codable-in-swift-4-97d0e18a2999
sorry, i mean VM.
[removed]
ok so I've played with it a bit more and have it like this right now. My question is how can I configure the slider to keep moving indefinitely? I tried wrapping it in a while true loop but that didn't do anything, and for some reason the slider will increase to max value when the while loop is set to slider.value&lt;slider.maximumvalue but it won't even run when I change criteria to slider.value&lt;slider.maximumvalue + 1. Going back to earlier i could use a timer with a really long duration but it seems like you think i don't need to do all that? And from what i'm reading online, apps don't respond to events until my method exits. Is that true from your experience i.e. would I not be able to stop the slider movement with a button press? override func viewDidAppear(_ animated: Bool) { super.viewDidAppear(animated) while self.slider.value &lt; self.slider.maximumValue { switch self.slider.value { case self.slider.maximumValue: self.sliderState = .Decrementing case self.slider.minimumValue: self.sliderState = .Incrementing default: break } switch self.sliderState { case .Incrementing: UIView.animate(withDuration:1){ [weak self] in self?.slider.setValue((self?.slider.value.rounded())! + 1, animated: true) } case .Decrementing: UIView.animate(withDuration:1){ [weak self] in self?.slider.setValue((self?.slider.value.rounded())! - 1, animated: true) } } } }
Heh, the image is slightly off. Because both sets are technically infinite, the depiction must be conformal - but then the inner subset must touch the edge of the superset.
&gt; Dude with untypable name is trolling you, or giving such bad advice it's indistinguishable from trolling. Shut the fuck up asshole. &gt; Plain Swift is just as powerful (or more so) compared to plain Python or plain Javascript. You can absolutely "solve common problems, read from files, write to files, cut information out of strings/files, parse an url and read information out of it, organize files, write a cli" just as easily with Swift as any of the others mentioned here. Laughing so hard I'm about the break a lung. Go do it lmao. I'll wait. &gt; Untypable name is somehow trying to argue that you need Xcode or AppKit/UIKit to do anything worthwhile, but also simultaneously that you should spend your time using some other programming language that doesn't use Xcode or AppKit/UIKit at all. You didn't get what I said at all. Shut up, fuck off and go solve some common problems with Swift. I'll wait.
IMO, your Dictionary class should just be a wrapper around your database. When you want to get and put things into the dictionary, if should just do some operation to the database. And it shouldn't be a static variable. You should actually pass the object to whatever classes and functions might need to use it.
\&gt; Too many assholes. &amp;#x200B; Says the guy coming in here throwing baseless accusations, and attacking the guy telling you how/why the question could be valid.
It happens to all of us ;-)
Good start, but what's with the guards? I don't see where OP asked for the function to return something different (i.e., not permutations) if one input happened to be zero-length. BTW, this is a great example of how Swift's type system, for all its complexity, still isn't powerful enough to represent many common situations. What we really want to return here is "a `[[T]]` where each inner `[T]` has `.count == 2`". If we were able to declare that, the compiler could inform us that we're trying to return a value of the wrong type.
How do you figure? The length of a `Swift.String` is declared (on 64-bit platforms) as `Int64`. RFC 2821 defines the max path length to be 256 characters, so if you have a longer email address, you can't send or receive messages there using SMTP.
&gt; as you can see the `isValid` function is private because it would **never** be needed outside Why not? But I guess he had a change of heart, because a couple of screens lower, apparently that's OK and we have `static func validate` which is non-private ("internal" by default, right?). &gt; You might say that some of this examples adds unnecessary complexity, but remember that you will be writing code that is impossible to break and that‚Äôs something you can‚Äôt argue about. The comment in the code points to a website which brags that this approach "99.99% Works". Call me crazy, but if it fails 0.01% of the time, that's not "impossible to break". [In our business, one in a million is next Tuesday.](https://blogs.msdn.microsoft.com/larryosterman/2004/03/30/one-in-a-million-is-next-tuesday/) The first comment here found 3 mistakes already.
Hmm, yeah you're right. They are not correct and might not even be necessary as an optimization. I'll take them out, I threw this together to replace my other, incorrect solution ASAP. That's what I get for rushing it! Honestly, I can see such a refinement in the type system being useful but it's not necessary here. I'd rather code a solution that takes a definite two parameters rather than a single nested array, it's really explicit that we're permuting two arrays and doesn't need any annotation other than the two parameters to indicate this.
I‚Äôm working on a macOS app (current working name Veronica) that would let you do text editing, like replacing multiple things at once (easy to convert JSON to Swift objects), diffing, formatting (with an automatic format detector), sorting lines and removing duplicate lines (I‚Äôm adding more features as I go. It will be an app for developers, to make our life easier. As an iOS developer, it‚Äôs not very easy for me to make it work, it‚Äôs all just a bit too different to write code comfortably. I‚Äôm having to ask very basic things on StackOverflow, but they‚Äôve been very helpful. If anyone wants to beta test it, send me a pm!
Using delegates is a bit outdated and does not really scale well, let's say you have three navigation possibilities from a certain screen, should you create three delegate methods then? Or three delegates? Also it might be a bit tedious to add a fourth navigation. An alternative is to use enums instead. Im doing that in Zhip: https://github.com/OpenZesame/Zhip If you are switching on the enum somewhere in the Coordinator the compliler will help you remind you about missing navigation scenario (as the compliler would help you when you add a new method in the delegate protocol, but not yet implementet it, but cases are more Lightweight than methods). Using associated value for cases carrying data between scenes (Selected Movie, Selected Book) is a great way to model the parameters otherwise passed to a delegate method. Another benefit of using enums is that you can - using a Mirror (reflexion) get the name of the case, even with it having an associated value, which you can use to make extreme Lightweight Analytics tracking of user intentions, automatically!
Nice! I agree with you about delegates -- they definitely get cumbersome and verbose, especially if you always include the sender in the parameters. I decided to use delegates for the sake of this example to intentionally try to exclude other communication patterns, in case a super-beginner was trying to wrap their head around it, and laser-focus in on the relationship specifically between the Coordinator and the view controllers. Thanks for posting your example. I haven't used enums in that way, but it sounds sort of similar to how [OKCupid uses Commanders](https://tech.okcupid.com/command-patterns-and-uicollectionview/) for CollectionView actions. I'll check out your project this afternoon!
This is beautiful. Do you have an article or something that you based this navigation approach on? I'd love to read more
I like the idea of creating custom types like this. But I don't get why everyone gets all crazy with extensions. Why would you put domain as an extension on Email?
That one might be a silly example, but one I use a lot in my currency types is for formatting for humans or server communication Something like `money.humanFormat` returns `"R$ 3.141,59"` and `money.serverFormat` returns `"3141.59"` Also I have a `init` that guesses what decimal separator user have typed. (In Brazil we use comma, but some users type a dot)
I see no reason whatsoever why those would be in separate extensions, though.
Hey there, I'm struggling with finding up-to-date material on macOS programming and specifically Core Data. If it's not for iOS, it's deprecated ‚Äì including apple's own documentation. If the latter is not true, I still can't make heads and tails of it. **Could you point me to where I can find hands-on, practical advice on how to implement Core Data in such manner that CRUD functionality is taken into consideration? I'd like to emphasize the U, update part.** My problem is so very basic, that I cannot get over not having this figured out yet. I'm using a `NSTableView`, I want to add some strings, maybe possibly perhaps a date and subsequently be able to edit the objects in such a way, that the changes persist once they are "Sent On End Editing". I don't really care anymore whether it's best done with a `NSArrayController` and binding or completely programmatically, or some hybrid or whatever else approach that eludes me. If you know of any viable way to do this, please point me to it ‚Äì or to any resource to sufficiently fill my knowledge gaps. On a side note: does anyone know if Paul Hudson's/ u/twostraws book or the associated Udemy course is covering this? Thanks for your help, It's becoming a sanity issue over here üòÉ
Working on a walkie talkie app using airpods!
Actually I have, let me share it soon, its a draft on medium. Will have to check that, will share link here tomorrow.
PromiseKit is a great start to manage your async code but if you're working on a highly event-driven application and like FRP (functional reactive programming), look into RxSwift.
Looking forward to it
To answer in a nutshell - if you have experience in coding in another language (in a professional environment) and during this year you familiarised yourself with the development stack sufficiently- go for a junior position. If not, please consider a graduate position - you‚Äôll save yourself a lot of time in interviewing and you‚Äôll be on a good track to learn a lot in the coming year. The reasons why: Hiring somebody for a list position really depends on the job listing itself more then anything else. I‚Äôve seen senior position offerings with 2 years requested but also junior listings with 3 years of experience. There is usually an expected number of years of working experience (and companies usually would allow you to replace up to half of those with formal postgraduate education) and this should always serve as the main guidance (along with the salary offered, assuming it‚Äôs listed). When recruiters ask for X-years of experience they they are actually asking for certain qualities in a candidate. The first year of experience assumes you‚Äôre familiar with the commonly used stack (Apple and third party) - and are able to work in a team without observation. The second means you are capable of developing complex features on your own. The third already has implications that you should have experience in being able to architect a complex application. When asked for 5+ it usually means you should be able to mentor people effectively and be comfortable to start coding with a very short (read a couple of weeks) introduction to a somewhat documented codebase of say 250k+ lines of Obj-C and Swift (not including commonly used third party libraries) I‚Äôm answering as a developer and interviewer.
This is just beautiful. Someone writes a post about something they learned and wants to spread the knowledge. Then they get a reply (a positive reply!) on how to take it things further and better and people give examples and discuss things that are similar and also beneficial and this is all happening regardless of where they are in the world. I just wanted to take a moment to appreciate this:). I fucking love the 21st century.
That‚Äôs the default in Objective C. You can declare them as required. In fact, if you look at table view data source you‚Äôll see that there are required methods on the protocol in ObjC.
you can have optional methods in swift, you have to prefix your protocol and method with @obj and prefix the method with "optional" - note that supplying default method through extension does not make it an optional method
While protocols in Swift are similar in some ways to protocols in Objective-C, the language is really designed to use them differently. You can see a few of the WWDC videos which talk about protocol oriented programming ( [https://developer.apple.com/videos/play/wwdc2015/408/](https://developer.apple.com/videos/play/wwdc2015/408/) and [https://developer.apple.com/videos/play/wwdc2016/419/](https://developer.apple.com/videos/play/wwdc2016/419/) amongst others in [https://developer.apple.com/videos/developer-tools/swift](https://developer.apple.com/videos/developer-tools/swift) ) to learn more. &amp;#x200B; In Objective-C, one of the most common uses of protocols is to define delegates which make sense to have optional methods if customization is not required. However, in Swift, protocols are used with extensions and generics as a different (typed focused) programming methodology. Rust offers similar (and somewhat more focused) functionality with traits. Much like OOP had a wave of adoption, it seems that protocol oriented programming is the latest systems level programming language paradigm that is gaining acceptance. Having all methods defined in a protocol be required makes more sense with this paradigm since it is guaranteeing a complete contract in the protocol type which extensions and generics can operate with. In a way, optional protocol methods are an anti-pattern in Swift. &amp;#x200B; It's a lot of buzzwords and it took a while for it to sink in with me on what the heck is the point of it. Two things that helped me is 1) to think about protocols along with protocol extensions and generics as the complete package for protocol oriented programming (it isn't just about protocols alone) and 2) I took some time to go through examples in Rust and then come back to Swift, and it started to sink in more.
You CAN have optional protocol methods in Swift! Create a protocol extension with default implementations of the methods you want to be ‚Äúoptional‚Äù
Not only does it run on Windows now, you can even get it in convenient MSI form: http://dev.azure.com/compnerd/windows-swift
Whoa, a job intersecting my favorite imperative language with my favorite functional language! If only I were planning to leave academia right now hahaha.
If you ever get the urge! Feel free to drop me an email or a Reddit dm! Kenny@functionalworks.com Keep enjoying academia!
https://www.objc.io/books - I believe some of them are in playground form
[removed]
If you want only Swift and remote hit me up!
The provided materials are indeed for beginners. But you can make your own experiment to play around with any aspects of Swift programming in Playground for iPad, including all the things you have mentioned. You can even make your own full blown game with it.
I think this comes very close but doesn't outright state it: Swift has "protocol" and Obj-C has "@protocol" but these are actually pretty different constructs. There's a bit of overlap but they're not the same.
I‚Äôm interested as well. Can‚Äôt go through the project now but I‚Äôm assuming you use a closure, and the vc calls it and passes the enum to the coordinator? Either way, looking forward to seeing your approach!
[https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html)
If you have docker installed, you can run a dockerized container which has Swift 5 in it. Then you can write some command line apps. &amp;#x200B; [IBM-Swift-Ubuntu](https://github.com/IBM-Swift/swift-ubuntu-docker)
This can't work. When calling UIView.animate, if using this method, you'd have to use the completion callback (aka: UIView.animate:withDuration:completion) to wait for the animation to be finished to launch the next one. But there is a much easier way to do that. You can use instead UIView.animate( withDuration: 1, delay: 0, options: [.autoreverse, .repeat], animations: { [weak self] in self?.slider.setValue(self?.slider.maximumValue ?? 0, animated: false) }, completion: nil ) which will do your base animation, reverse it, then repeat it
Ok found it, remember it is a draft, so might contain typos and it is unfinished, so will be kind of a "cliff hanger": [https://medium.com/@sajjon/5ebf32e9083a](https://medium.com/@sajjon/5ebf32e9083a) I have since removed the automagic Analytics tracking, but you can find it in this commit: [https://github.com/OpenZesame/Zhip/blob/ffea93762ff1989342000bd1d507cd626400fe13/Source/Application/AnalyticsTracking/TrackableEvent.swift#L19-L26](https://github.com/OpenZesame/Zhip/blob/ffea93762ff1989342000bd1d507cd626400fe13/Source/Application/AnalyticsTracking/TrackableEvent.swift#L19-L26) Which using reflection on a protocol, if it is an enum, to find out the name of the case, allowing for super easy lightweight analytics tracking - "piggybacking" on the enum cases used for navigation - to track the user's choices. You could actually also pick up the associated value using the \`Mirror\`, but I did not want to do that since this is a cryptocurrency wallet app, thus might contain sensitive data (which is why I decided to remove it the tracking altogether.) The analytics event is used by the \`stepper\` here: [https://github.com/OpenZesame/Zhip/blob/ffea93762ff1989342000bd1d507cd626400fe13/Source/Application/Navigation/Navigatable/Stepper.swift#L22-L28](https://github.com/OpenZesame/Zhip/blob/ffea93762ff1989342000bd1d507cd626400fe13/Source/Application/Navigation/Navigatable/Stepper.swift#L22-L28) &amp;#x200B; Bot sending the Navigation choice to the \`Coordinator\` and the Analytics event to the \`Tracker\`.
Fireside Swift Podcast Episode 1, Optionals [https://www.firesideswift.com/?offset=1520907202031](https://www.firesideswift.com/?offset=1520907202031)
A couple months ago a write a Swift playground tutorial for protocols oriented programming and dependent types. Here is the [blog post](https://medium.com/@andre_videla/protocol-programing-part-1-2d-spaces-5b1e60d9aa4c) Here is the [playground](https://github-production-release-asset-2e65be.s3.amazonaws.com/164170437/a631bc00-127d-11e9-8c6e-a40e0d4b41aa?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20190502%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20190502T080425Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=6ce0e9527353d948dd8a02a98667f8ff704aeb1ea1c48890b532782abbfe2651&amp;X-Amz-SignedHeaders=host&amp;actor_id=2827096&amp;response-content-disposition=attachment%3B%20filename%3DPlaygroundBook.playgroundbook.zip&amp;response-content-type=application%2Foctet-stream)
I was working on an update/new version/rewrite of an older game of mine called Shade Slide. &amp;#x200B; It's a tile matching puzzle that is free to download and play. The difficulty of the puzzles scale with the ability of the player. &amp;#x200B; [https://itunes.apple.com/us/app/shade-slide/id916923964?mt=8](https://itunes.apple.com/us/app/shade-slide/id916923964?mt=8)
Thanks, that looks really useful and definitely something I need to learn more about.
Exact same use case in my app. Have a singleton with the property of last location. Send notifications when these update. Then in consumers just read that property. No protocols needed.
Very helpful clarification.
Can you provide a piece of code describing your case? Its not clear what kind of protocol you‚Äôve made and how you are trying to use it
Objective-C is dynamic and its runtime doesn‚Äôt care if a method exists or not, it‚Äôs resolved at runtime and if the method doesn‚Äôt exist and you don‚Äôt ‚Äúcatch‚Äù the method call, you crash. Pure Swift has to know that a method exists, since it‚Äôs a static language hence you can‚Äôt have Swift protocols with optional functions. Marking a protocol with @objc opts you in the ObjC behavior and you can make functions optional, though that comes with other caveats.
Please use protocols and Dependency Injection. You should inject whatever instance conforming to some LocationService protocol in the init of your ViewModel / Controller. And let the stored property be of type LocationService protocol, so that it is a mere implementation detail that it was the Singleton Instance of some type they was injected. Might be a good idea to mark "protocol inheritance" of the LocationService protocol to"AnyObject" and let the stored property be "private weak var locationService: LocationService?" Alternatively you can skip AnyObject protocol inheritance in the declaration of the LocationService protocol and do this: "private weak var locationService: (LocationService &amp; AnyObject)?"
See my question on StackOverflow there is my code : [https://stackoverflow.com/questions/55933283/location-service-as-a-singleton-in-swift-get-stuck-on-when-in-use](https://stackoverflow.com/questions/55933283/location-service-as-a-singleton-in-swift-get-stuck-on-when-in-use)
Ok I did the same thing now I think it is more easy and faster like this. And I don't really understand what other says with dependancy injection.
Thx for ur answer. But I don't really know what does dependancy injection does ?
Dependency Injection is a Programming Language (at least for Object Oriented Languages) agnostic idea. If you Google it you will get some million search results :)