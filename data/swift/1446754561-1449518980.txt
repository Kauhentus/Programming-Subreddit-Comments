Awesome explanation! 
Thanks! That makes sense
It means, don't care. It's Haskell pattern matching syntax.
messaged you a question!
I would send you an image but I already just deleted the pic. I will do it over the weekend. But my constraints were leading, and from up top. I had a height and a width constraint too on the image. there were leading constraints from my labels next to the image. The subtitle label was set to "0" lines and before I download xcode 7.1 everything work perfectly. The cell would stretch n stuff. Now in 7.1, the height of the cell is static and the label just builds upwards.
I tried that but I get an error when I use glClear saying I can't use a GLubyte type in a int32 field which is weird because I used GL_COLOR_BUFFER_BIT
`{(placemarks, errors);)}` is invalid closure syntax. It should look like this: { placemarks, errors in /* … */ } This will name the first parameter `placemarks` and the second parameter `errors`. I recommend [reading up on closures](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html).
You have a syntax error where you're trying to pass a completion handler block in. If you look at the class reference for `CLGeocoder`, you'll see that the completion block has the following type: typealias CLGeocodeCompletionHandler = ([CLPlacemark]?, NSError?) -&gt; Void So it's expecting a block like this: { (placemarks, error) in // Your handler code here } You seem to have skipped any logic for your handler and put a spurious closing parenthesis in there. Take out that extra `)` and put in the logic for your handler. 
In your example, you can also use a `let` statement to match any value, and at the same time assign that value a name for convenient use: case (let x, 0): print("(\(x), 0) is on the x-axis") 
Im still confused. Do you know how I can fix this though?
Nice, although I would like to remind you that it's spelled remainder :p
Do a recursive preorder traversal, runtime is 2^(log3(n)), which is actually significantly less than O(n). For the test input 18446744073709551615, which is 1.8\*10^19, the worst case ops is 1.1\*10^12. I'd be willing to bet, as well, that you could prove that there are many solutions to any given input, probably a large percentage, meaning your runtime is quite a bit better than that still.
You need to use convertPoint: on the parent uiview
don't care? You realize that it crashes the app and closes it.
There's really no direct way to do this. None of the background modes iOS supports will do exactly what you are looking for. The closest background mode would be background fetch, but there's no guarantee when that's executed. Timers setup on the background thread expire roughly 10 minutes after the app has gone into background - so that's not gonna do you any good either. Push notifications won't fire any app code until the app is opened. Local notifications are the same (with both local and push, users can interact directly from the alert and trigger small amounts of code, but again, no guarantee that they will even act on the push/local alert) Is there any reason you couldn't store the last time the user opened the app and calculate whether the value should have been reset and what its value should be now? Here's info on background modes: https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/BackgroundExecution/BackgroundExecution.html
You could create a counter that will increment in that way the variable gets an overflow every week - if the value becomes 0 you can reset your stuff ;-)... No, serious: you could use a supporting app that is called via cron every week that will modify i.e. Some value in a file or make an interrupt on your other application - you might know the pid.
I'd use the native NSJSONSerialization class. Here's a link to a blog that has an example - it's pretty straight forward creating json out of swift objects: http://sketchytech.blogspot.com/2014/06/json-and-xcode-ios-swift-basics.html?m=1
Sorry i am new to Swift. Not able to get why jsonArray is specified in code mentioned in link. Any simple tutorial to understand this better. I am using SwiftJSON for converting json received from server to object for use in app. Just need to do reverse with option to exclude few variables if needed.
Your question is sort of vague. NSJSONSerialization should be straight forward in converting an object to a json object. You should post the code of your attempt and we can help you from there. Here is another example if you didn't understand the first link the Stephen110 posted: http://stackoverflow.com/a/28203056/4684652
Thanks. I am following same link: Got these two functions in each object: func toMap() -&gt; [String: AnyObject] { return [ "id": NSNumber(integer: id), "resolution": NSString(string: resolution) ] } static func toDictionary(photoObjects: [MyObject]) -&gt; [Dictionary&lt;String, AnyObject&gt;] { var dictPhotoObjects: [Dictionary&lt;String, AnyObject&gt;] = [] for photoObject in photoObjects{ dictPhotoObjects.append(photoObject.toMap()) } return dictPhotoObjects } Now when i do NSJSONSerialization.isValidJSONObject(dictPoints) which comes from toDictionary func, this returns true. Is this approach correct? Now i need to have these functions for each object class, right? Can i directly send dictPoints as POST parameter in server request.
Found this link: http://blog.mailcloud.com/technology/apple-swift-code-strong-type-object-serialization-to-json/ .. Seems like this is very generic code which i can use. Any suggestions.
&gt; http://sketchytech.blogspot.com/2014/06/json-and-xcode-ios-swift-basics.html?m=1 This example is outdated and will give newbies fits. It's Swift 1, not Swift 2. It does not use do/try/catch for NSJSONSerialization.
No problem. Good luck!
Sounds like you are halfway there: you tried a gesture recognizer and touches began/moved and in both cases, the problem is it applies to the screen or main view and not the individual labels. But it _did_ apply to the object you set the gesture recogniser or touches began/moved to, right? Which means if you could just somehow put the gesture recogniser or touches onto the labels, you would hit pay dirt. Well, you could do either or more! * You can create a gesture recogniser for each of your labels. * You could create a label subclass and implement the touchesBegan etc methods and do what you want. * You could change from using a label to a UIButton and you don't have to subclass it, you could use target/action with events such as Touch Drag Enter, Touch Drag Exit and others. * You could keep your current gesture on the main view and use maths and geometry (!!!) to figure out which label is being dragged over * You could keep your current touches Begin/Moved code on the main view and again use maths/geometry to figure out which label is involved Which one you use depends on what kind of work you like doing. Personally, I'm not so hot with the maths and geometry so I avoid those if possible. I'd probably investigate the UIButton approach first. It seems the most natural because buttons are for actions, whereas labels are for showing stuff to the user without the user interacting with them. Having multiple gesture recognisers seems like extra overhead, so I'd put off looking into that. Or, ultimately, you could discard all built-in controls and start with a custom subclass of UIView, use drawRect to place your strings (representing the hours) in the view and then either have a gesture recognizer or touches method(s) to find out where the user is dragging and calculate which string they are over, and thus know which hour they are choosing. 
Couldn't a silent push notification wake up the app though? IIRC that was the reason the silent pushes were introduced, e.g. when you mark an article on your iPad a silent notification gets pushed to your iPhone and the article is downloaded before the real notification is shown so that you can start reading right away. 
oops. thank you!
Great question... The reason is that all nested functions are actually closures, not true functions, as they are dependent on scope. Trying to overload a "function" in this context is actually the same as trying to redeclare a variable of the same name.
Hmm, I see, thank you! This will require some meditation.
If it helps clear it up a bit, take the following example: func aFunction() { let aVariable = "It's a variable within aFunction" func insideFunctionTest &lt;T: ProtocolA&gt;( obj: T ) -&gt; String { return aVariable } } Since `insideFunctionTest` captures the scope within `aFunction`, the compiler must treat it as a closure. Overloading is not just limited to top-level functions mind you, just non-nested functions; you *can* overload methods, since doing so doesn't involve capturing scope: struct AStruct { func methodTest &lt;T: ProtocolA&gt;( obj: T ) -&gt; String { return "It's an implementation of Protocol A" } func methodTest &lt;T: ProtocolB&gt;( obj: T ) -&gt; String { return "It's an implementation of Protocol B" } }
I'm probably using the term incorrectly then, in which case I will edit the post and Gist to clarify. I took 'optional binding' in a quite general sense, encompassing both the use of 'if let' as well as function calls which 'may be bound to one function or another' depending on parameter constraints. I can see that one happens at runtime and another at compile time, making them quite different mechanisms, so if there's a better term to describe the arbitration between differently constrained function calls, I'd love to hear it... trying to find if there's anything in the Swift book, now.
For the easiest case (labels are arranged in a single row/column) there are only very few steps needed: 1. create a rect between the start of the UIPanGestureRecognizer and the current point of the gesture 2. for each label, check if that rect intersects with the frame of the label Or in code: var panRect = CGRect.zero @IBAction func didPan(sender: UIPanGestureRecognizer) { let touchPoint = sender.locationInView(self.view) switch sender.state { case .Began: panRect = CGRect(origin: touchPoint, size: CGSize.zero) case .Changed: let width = touchPoint.x - panRect.origin.x let height = touchPoint.y - panRect.origin.y self.panRect = CGRect(origin: panRect.origin, size: CGSize(width: width, height: height)) default: break } touchView.frame = panRect var matchingLabels: [UILabel] = [] for label in labels { if CGRectIntersectsRect(panRect, label.frame) { matchingLabels.append(label) label.backgroundColor = UIColor.orangeColor().colorWithAlphaComponent(0.3) } else { label.backgroundColor = UIColor.clearColor() } } } The UIPanGestureRecognizer is added to self.view of the ViewController. The labels are added to this view as well. `labels` is an array that contains your labels. And I added touchView for debugging purposes to show which area is currently covered by the pan. Looks like this: http://i.imgur.com/YgRGfWg.png Red is the `touchView` for debugging. Orange are the labels that were touched by this pan. If your labels are arranged in a way that doesn't allow you to create on rect for the whole pan it gets a more complicated. And of course you have to the logic of how times should be stored. But now that you know how to detect the swiped area, you should be able to figure that part out yourself. ----- EDIT: I was actually overthinking. No need to create a CGRect. Just add each label when its frame contains the touchLocation of the UITapGestureRecognizer. var selectedLabels: Set&lt;UILabel&gt; = [] @IBAction func didPan(sender: UIPanGestureRecognizer) { let touchPoint = sender.locationInView(self.view) switch sender.state { case .Began: selectedLabels = [] for label in self.allLabels() { label.backgroundColor = UIColor.clearColor() } default: break } let unselectedLabels = Set(allLabels()).subtract(selectedLabels) for label in unselectedLabels { label.backgroundColor = UIColor.clearColor() let labelFrame = label.convertRect(label.bounds, toView: self.view) if CGRectContainsPoint(labelFrame, touchPoint) { label.backgroundColor = UIColor.blueColor().colorWithAlphaComponent(0.3) selectedLabels.insert(label) break } } } Result: http://i.imgur.com/VtOfIuK.png 
On the bottom cell's origin? let separatorPoint = bottomCell.convertPoint(bottomCell.bounds.origin, toView: bottomCell.superView) isn't giving me the correct values either
You probably want Mantle. 
Maybe because the function is never called.
you are welcome, please rate my course on udemy and any time you can ask me about swift. My email is selcukhaan@gmail.com
Have you tried making an entire new playground, copy over the code into it, and then save it as a different number?
I started a brand new playground and it gave me the error immediately.
With a new name? Is the code up to Swift 2.1?
Yes I deleted the parameters for simplicity. Ive tried loading other scenes with that exact same method and every single one works except for GameScene.
Yes with a new name. Xcode is up to date so i am guessing it is 2.1. ~~I have to confirm, i am on my ipad now.~~ --- addon: yes it is 2.1
Merely converting it to Java would not be sufficient, since it would still be using all the iOS classes and methods. You'll have to rewrite it.
I'm going to say it's the GameScene then. Have you tried to add a new file with the same name and just copy the code over and delete the old GameScene? Tried quitting xCode? 
ELI5 What can you use this for?
Your radius of the physics body is 125*.1 Try a larger radius?
http://www.bash.org/?244321
It didn't work. I have asked stack, but I'm not getting any helpful answers.
Code is just a set of instructions for a computer to follow. But different computers, and different applications, need their instructions to be written in different languages. While there are technical reasons for this, a lot of it comes down to cultural reasons in the same way that people from different countries speak different native languages. Swift is an upcoming and growing language that can be used, for one example, to build iPhones apps. On the internet, if you want to communicate with the largest audience, you will most likely be writing in English. In the same way, if you want to write code for the internet you would probably want to do so in Javascript. In fact, the Swift programming language cannot even be used to write web pages. This tool is like a one-way Google translate going from the Swift programming language to Javascript. If you wrote a game for iPhone and wanted to include it on a website, this could make that process easier because you could re-use some of your existing instructions-set without re-writing it in another language. 
&gt; Right now it's certainly not at a place where you would use it for production applications. As is, it does handle all most basic data types, collections, most control flow, and functions. The hope is down the road, it will be in a place where iOS and OS X developers will be able to write web or node apps with it, using Swift. We're hoping to attract some great engineers who will help move it forward. 
That looks like it would do exactly what I was attempting! One thing that I'm not getting, though, is self.allLabels(). Is there something more I need to add to get access to this? Google doesn't seem to be aware of that function, either. Thanks! // update For reference, I solved it with the following: private var labels:[UILabel] = [UILabel]() override func viewWillAppear(animated: Bool) { for v:AnyObject in self.view.subviews { if v is UILabel { labels.append(v as! UILabel) } } } @IBAction func didPan(sender: UIPanGestureRecognizer) { let touchPoint = sender.locationInView(self.view) switch sender.state { case .Began: selectedLabels = [] for label in self.labels { label.backgroundColor = UIColor.clearColor() } default: break } let unselectedLabels = Set(labels).subtract(selectedLabels) for label in unselectedLabels { label.backgroundColor = UIColor.clearColor() let labelFrame = label.convertRect(label.bounds, toView: self.view) if CGRectContainsPoint(labelFrame, touchPoint) { label.backgroundColor = UIColor.blueColor().colorWithAlphaComponent(0.3) selectedLabels.insert(label) break } } }
This is how Swift appeared in the beginning. 
Thanks!
I had this error after migrating to Swift 2.0, along with other errors. It turns out that once I fixed the other errors, this error went away.
If you don't have a background in Swift and are just looking to accomplish this one task, you may want to use AppleScript or JavaScript instead since they have a much shallower learning curve. That said, this could be accomplished using Swift via the [Scripting Bridge API](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ScriptingBridgeConcepts/Introduction/Introduction.html). Either way, you will want to start by viewing the scripting dictionary for Pages via the Script Editor application's library.
Thanks for the writeup, it was a good read.
would you know using the code below how to set the page size to 3" x 1"? tell application "Pages" activate set thisDocument to make new document with properties {document template:template "Blank"} set thisDocument tell thisDocument set body text to "*" &amp; strSerialNumber &amp; "*" tell body text set font to "IDAutomationHC39M Free Version" end tell end tell end tell
I wouldn't, and we're starting to stray from the scope of /r/Swift. If it were me, I would create a template in Pages to minimize the amount of code needed. Details on how to manipulate templates can be found in Pages's scripting dictionary, as I described in my other comment.
There's Hockey and Crashlytics ( fabric.io ) Both solutions use your ad-hoc distribution channel, so it's not as seamless as TF.
My team uses testfairy.
I think this is a bit of a cop-out, because plenty of other languages support Unicode, yet have much friendlier API's. E.g., instead of Swift's `.stringByTrimmingCharactersInSet`, Python and Ruby have `.strip`.
That function is still never called anywhere in your code.
strip seems less friendly to me; it doesn't say what it does. Does it strip whitespace, punctuation, characters present in the argument, or something else? Does it strip all of them, or just at the ends (trim, to my ear, implies only at the ends)?
&gt; E.g., instead of Swift's .stringByTrimmingCharactersInSet, Python and Ruby have .strip. I like that one of the first results I got for "Ruby strip" was [Why does strip not remove the leading whitespace?](http://stackoverflow.com/questions/20305966/why-does-strip-not-remove-the-leading-whitespace) on stackoverflow. Turns out that non-breakable spaces are not removed by `.strip`. Guess what. `.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceCharacterSet())` trims non-breakable spaces as well. But hey, ruby has a solution for that problem as well. Just do `.gsub(/\A\p{Space}*|\p{Space}*\z/, '')` and your non-breakable spaces will be removed. Much friendlier indeed. 
Glad it's not just me that has been having issues with TestFlight this week. Going to be sticking with it, but it's been a frustrating few weeks (Xcode upgrade issues as well)... Spoke to a couple of ex coworkers, and one of them is using Diawi, could be worth a look?
It worked! Thanks a lot :-)
let me guess, there is no pay and your contribution would be the idea, and your co founder just has to implement it ;)
That depends on what you want to do. Are you a hobbyist? Do what's most fun. Do you want to do it for a living? Focus on one until you get a job. Nobody wants to hire somebody who's an amateur at both. Loads of organisations want to hire somebody who is good at one. 
Yes that's the point. I want to work for a company. In my country it's better to know both. But I'm thinking to move to Germany. So yeah I guess being professional at one is the better idea
Us too. Honestly, since Apple bought them testfligh has just been useless to us.
Another option is the following one: pantSum.text = "\(pantUdregner())"
pantSum.text = "\\\(pantUdregner())" Turns out inserting a backslash is hard
What do you mean? Your answer is exactly the same as mine.
He comes
Great job! I've always wanted to get better at chess. :) I find it strange that it says "Click &gt;" on the one screen. Clicking is a mouse thing...so if suggest changing it to "Tap &gt;"...although I'm not even sure where that gesture would take you so it might make more sense to describe the destination instead. 
Thanks for the reply! This button shows the solution step by step. I thought it would add a bit of humor. But, really, you're right it's something out of the computer experience.
Thank you so much for this explanation, feels like I just got a mini college education. I thought this entire time you were misspelling memorization. 
You can get boob jobs everywhere 
I think rather than a segue problem, you might have a different problem (or two!?). Normally a missing segue would cause a failure to move from one view controller to another. A bad segue would probably move to the wrong view controller or present the right view controller in the wrong way (such as by presenting it modally rather than pushing it on the navigation stack). It doesn't sound like you have any of these problems (whew, you may exclaim at this point!). Sounds more like your tableView is either missing its data source and/or delegate (which would usually be the view controller) or perhaps there is an outlet connection from the view controller to the table view missing. What I would do in this situation is go off to another completely separate directory and create a new project, using one of the builtin templates which has a table view (such as the master-detail application). Then I'd run it (make sure it works; ie never trust what the tools claim: always verify!). Assuming it does work, then open the storyboard and examine the connections between the table view and the 'other stuff' I'm sure you'll see an outlet and a data source and a delegate. Then compare the connections in your storyboard and supply the missing ones. This would be the appropriate time to put in a little 10 second plug for enabling and using source code control. Xcode gives you a check box to turn it on when you create a new project (or you can google for 'git init' to learn how to create one on an existing project), then you just have to make sure to commit on a regular basis (ie a few times an hour when actively producing code). I cannot tell you how much time having source code control saves me every week. Even though I've been programming for a really long time, I *still* rely on SCC to get me out of my self-created scrapes. 
[Here's](https://youtu.be/_NfijT6mt6A) a SwiftyJSON tutorial, but idk how Youtube's API works or what it returns 
&gt; the code-behind It's because you're applying Microsoft-centric patterns to an entirely different world. Read up on [MVC](https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html) and the various other patterns that are used in Cocoa.
I switched from C# to iPhone development about six years ago, and yes compared to Visual Studio, Xcode sucks ass. However, it's gotten much better in the last few years. Unfortunately Swift language support is still lacking in some basic areas like refactoring. Try AppCode from JetBrains. It's a good IDE. Still any Swift IDE is playing catch up to ObjC, and Visual Studio beats them all, but personally I really enjoy working with the iOS environment. I did ObjC until this last summer and made the switch to Swift 2. It's good, reminds me of C# in a lot of ways, and it's better if you go whole-hog and don't try ObjC compatibility. And yes patterns are different, but read up and learn the Apple way and you'll get used to it.
Thanks for the very thorough and helpful reply. It turned out I hadn't connected my UITableView properly to the view controller's delegate and data source. I will certainly check out how I can use source control with Xcode, it's quite frustrating to spend several hours trying to fix something that used to work, but not being able to go back. Also I think it would be great if there where two distinct subs for swift, like it is with python, and learnpython. I imagine it can be quite frustrating for seasoned programmers to constantly see beginner questions like these asked. 
Yes, but why doesn't Xcode automatically create an instance in the associated UIViewController? It knows i'm going to need it. Same concept goes for new .swift files for each UIvc that i add.... Thanks for the reply
Definitely. I'm using the native language for each. Didn't bother with ObjC because i figure Apple is gonna drop it when Swift starts to get mature. And yes Xcode does seem to suck compared to VS. Thanks for the reply
So I've experienced some bugs...I'm pretty sure once after hitting try again it switched from black to white. And then another time no matter what it would select the piece to move but wouldn't let me select the place to move the piece to...so it wouldn't do anything.
Yes, it is always difficult to go from a known, comfortable tool (in your case, Visual Studio) to an unknown one (Xcode). It is made worse when the former is really really good and the latter has significant deficiencies (note that when I'm dealing with Xcode bugs and shortcomings, the phrase 'significant deficiencies' is not even in the long list of phrases I hurl in its general direction). And the huge differences in the capabilities of the tools can sometimes conceal real, important, necessary differences. In this particular case, it is true that Xcode could, as you say 'create an instance' of your button in your view controller. But, then at runtime, you'd have **TWO** instances of the button, the one which has been loaded from the storyboard (which at runtime is a nib) and the instance which Xcode 'created' in your view controller. That would be wrong, because you only really want one instance of the button. So, it can't automatically do that. What about automatically creating an outlet or a target/action. Well, as u/JavaNut13 has said, sometimes you don't want one or the other or either. Also, it isn't always clear what the container of the outlet or action should be. Imagine if you had view inside a view inside your view controller, and you drop the button inside the most deeply-nested view. It is possible that that view should contain the button's outlet. Or it maybe that you do want it in the view controller, and those views are just 'dumb UI' container objects. There's no way for Xcode to know. Similarly, although Xcode could create a new swift file for every view controller you instantiate in interface builder, that also wouldn't necessarily be correct. For example, I might be doing something terribly specific and wonderful and I actually want to define multiple view controller classes in *one file*! Again, no way for Xcode to know. So, sometimes (way more often than there should be, I admit) there are *real* bugs and deficiencies in Xcode and sometimes what seems to be a deficiency is actually an intentional point of customisation where the developer has a choice to make. 
That's really cool!
The relevant bits are as follows: typedef NS_ENUM(NSInteger, A) { AX = 1, AY, AZ, ... }; In swift: case let .c(a): // a has type 'A?' p.m(a) In ObjC header: -(void)m:(const A*)a; In ObjC .m file. -(void)m:(const A*)a { ... } 
Why does the objc code want a pointer to the enum? Enums are value types. Fix that, and (safely) unwrap the optional, and you should be good. 
Because I want nil as a possible value to be passed into the method.
If you're interacting with ObjC, I'd use the ObjC convention of having a "none" or "default" case (equals 0) in the enum rather than trying to wrangle unsafepointers. As the name implies, you should keep their use to an absolute minimum. But if you must, p.m(&amp;a) will probably do it.
Is `a` your optional enum (I assume `Dir?`) or an `UnsafePointer&lt;Dir&gt;`? It should be the former.
In the Swift code above, a is of type A?, where A is the NS_ENUM imported from ObjC.
I recently made a simple scraper. I used Kanna (github), and it's Xpath feature. Really useful. 
The &amp; doesn't work giving the same error as before. Taking it out leads to: Cannot convert value of type 'A' to expected argument type 'UnsafePointer&lt;A&gt;' 
Wow, are you a wizard? Yes, you pretty much divined the entire structure of the code that I currently use. Thank you for the comment, and I'm relieved at least to know that it's not a fundamental error that I've made with my entire approach and needs to be refactored from the ground up. Your suggestion makes sense, for whatever move I make I'm just returning a new instance of valid move indicators that will themselves return new instances ad infinitum until I "run out" of jumps. Mild refactor of what I've got currently but it should work, but it has a 100% advantage over my current approach since it DOESN'T work. Thank you!
Ah! I forgot that &amp; simply won't work with a constant (even to convert to UnsafePointer rather than UnsafeMutablePointer). Try var b = a p.m(&amp;b) If that doesn't work, I give up. ;)
Okay, so I didn't give up... went to my computer and wrote it out on the playground and here is what I got: enum A: Int { case One = 1 case Two = 2 } func takesAPointer(value: UnsafePointer&lt;A&gt;) { print("Success!") } let aConstant: A = A.One var aNonOptional: A = A.One var aOptional: A? = A.One var aNil: A? = nil // takesAPointer(aNonOptional) // Error: Cannot convert value of type 'A' to expected argument type 'UnsafePointer&lt;A&gt;' // takesAPointer(aOptional) // Error: Cannot convert value of type 'A?' to expected argument type 'UnsafePointer&lt;A&gt;' // takesAPointer(&amp;aConstant) // Error: Cannot pass immutable value as inout argument takesAPointer(&amp;aNonOptional) // Success // takesAPointer(&amp;aOptional) // Error: cannot convert value of type 'inout A?' (aka 'inout Optional&lt;A&gt;') to expected argument type 'UnsafePointer&lt;A&gt;' // takesAPointer(&amp;aNil) // Error: cannot convert value of type 'inout A?' (aka 'inout Optional&lt;A&gt;') to expected argument type 'UnsafePointer&lt;A&gt;' takesAPointer(nil) // Success if var unwrappedA = aOptional { takesAPointer(&amp;unwrappedA) // Success } So the compiler should be happy with non-optionals or explicit nils. Take the if-let construct I suggested earlier and just change it to if-var. If that's not working, my guess is your ObjC code isn't being translated correctly on import or something. In that case I really do give up! Edit: I see you figured it out it while I was posting. Great.
Wow! This happens every time you hitting "try again"? Because I'm trying to repeat it and I can not get it. Which version of iOS is running on your device?
Do yourself a favor and try not to compare another language to Swift. Just be a blank piece of paper and learn from scratch. It will be harder to learn by comparing it to some other languages. Swift and Apple Frameworks are not difficult to learn...provided that you let go of whatever you are bringing with you. 
Yep, that is the best solution. Just add a `None = 0` as the first case of the enum, and pass that instead of `nil`. Using pointers here is really unnecessary and a bad idea imho.
Nice work.
Doesn't happen to me. Once click is done, it fades and I can't tap it anymore. Working for me on iPhone 6Plus latest iOS. 
You aren't winning any friends by disagreeing with those who are offering help. "Hey, guys. Will you help me?...while I disagree with you..."
[Reddit Sync is to blame.](http://i.imgur.com/TkHXAYg.jpg)
That is certainly a valid approach, is there a specific area that you are concerned about? Are you looking to persist this data anywhere? 
``CellForRowAtIndexPath`` has really two mechanics, both of which are necessary for constructing a cell. The first is that a cell is created, and the second is that a cell is reused. When a cell is reused its taken from the reuse queue and then its returned to you so that the system doesn't have to allocate a brand new cell, which is expensive. Within that method you configure your cells. What the method ``willDisplayCell`` does is that it gives you a chance to wipe away details of a cell before a new cell is to be drawn for that row. If you reuse cells and a cell was selected before, put code in this method that will remove highlights, or anything that indicated thats its selected. 
It's not super evident in the demo gif I posted but it's there alright. Just made this new demo where you can see it a little better - http://i.giphy.com/3o85xlpVwTU0mOMQ5q.gif
Looks neat but that's not parallax 
3D != parallax... 
Before your animation block: * Deactivate the constraints that position it in the center * Activate new constraints that position it at the top Inside your animation block: * `label.setNeedsLayout()` * `label.layoutIfNeeded()`
thanks, will take a look
It is better to use SKActions than NSTimer in SpriteKit games. SKActions get automatically paused, when you pause the scene, etc.
As Sherlock Holmes said, "It is a capital mistake to theorise before you have all the evidence. It biases the judgment." You have already decided that, 'the transition has already been made to the ad scene". I don't see any evidence for that, and I also don't see why that would cause the invalidation not to occur. The trouble with theorising like this is that it blinds you to possible other causes, which could include the *actual* cause, or in other words, "it biases the judgment." I would set to work with the debugger and set some breakpoints in the delegate method to make sure I'm reaching it, and then set a breakpoint in the pauseScene to make sure I'm reaching *it*. If I don't reach them, I'd ask myself why, and I'd try to think of *all* possible reasons, even humdrum ones like, misspelling names or nil pointers (unlikely in Swift, but should be checked nevertheless). The thing that looks odd to me is GameScene()...what is that? Is that a function or method which returns an instance of a GameScene? Or is it a constructor for a GameScene? If the latter, there's your trouble. If the former, it would be better to name it without an initial uppercase letter in order to avoid just this kind of confusion.
How many different backgrounds do you have? If there aren't many, try to preload them when the game starts.
I've been building my first app with a friend. I often find myself searching for answers but never have a good way of validating what I find / come up with. I'm up for something like this. 
This sounds like a great idea. ramshackleYT's idea of a slack channel could be really helpful for all of us to share resources etc.
If be up for a slack channel! 
that's what I was trying to do but I was using a single background node which changes the texture by running 1 of the 6 different SKAction backgrounds but I wasn't able to make it wait until 1 was done loading and then switch to the next SKAction.
xCode uses a much more sophisticated and flexible system than what is found in Visual Studio, that is also why it is more complicated. I think the confusion is that a lot of other systems I believe this is the case with VS, puts everything into the view. That is simple but not very flexible. All look, feel and behavior code is thrown into one object. With Cocoa, your buttons are not owned by the view controller. The buttons are part of the views. In many GUI toolkits you would add your behavior code to a view subclass which naturally would have references to all the buttons, textfields and what not it contains. But in Cocoa behavior is not stuck in the views but in various controllers. Your button could be referenced from just about anywhere in principle using an outlet. It doesn't need to be one particular view controller. Your xib or storyboard represents a view, but multiple view controllers or other controllers could in principle load this view. Your view could thus be attached to a number of different controllers. So you could attach different behavior to your view depending on different contexts. One and the same controller could also be setup to load different views and different times or the same time. Thus if you insist that one particular view controller needs to represent every possible UI element you got then there would be no way of achieving this sort of mixing and matching. This also has to do with separation of concerns. Why should a controller know all the details about how your view is made? It ought to only know about those GUI components it intends to interact with. I am not sure I managed to convey the point here and not just sound like I am rambling and ranting. I probably isn't clear to you what I am talking about or why you would ever even want this given that you are probably thinking that you have managed fine without this sort of things already for years. My own impression for working with Microsoft tools in the past though and comparing to Apple stuff is that Microsoft stuff is very easy to use as long as things are simple. Apple stuff has more of a learning curve but scales better. You can use it to deal with much more complicated problems and reuse functionality in ways that is difficult to achieve with the typical straight forward Microsoft approach. My advice is to learn Cocoa design patterns. Apple stuff unlike Microsoft stuff isn't something you easily jump into and just start hacking away with with some examples. You really benefit from understanding concepts and design philosophy. 
Count me in
You can do exactly the same as with C# in xCode using the Cocoa framework. You can if you want create a button in code and interact with it right away. But nobody does that and coding examples will seldom show you how to do that. There are many good reasons for that. In Cocoa one tries to use the Model View Controller design pattern to separate responsibilities into different objects. Your view object is what the user sees and allows them to manipulate your model object. However since model objects and view objects in Cocoa philosophy should be possible to make independent of each other and they should be reusable, we use controller objects as a glue between views and models. Controller objects translate actions in your view to actions your model object understands. If you wanted to do like C#, you would subclass a UIView and in its initializer you would start creating and adding buttons, textfields etc. Then you could manipulate them right away. But this would mean you would be adding behavior code into a view object which would not make it reusable with any model object. Also we don't want to create GUIs in code. In C# as far as I know code generators are used to create the GUI creating code. That is not how we do it in the Apple world. Instead GUIs are resource files of type nib (created from xib files) which are loaded at runtime by controller objects. A benefit of this approach is that you don't have to waste memory on representing views until user actually looks at those views and those views can be unload from memory at any time as well. With code generators your view code is always there it can't be loaded and unloaded on demand. But the consequence of this is that your view controller can't start doing stuff with its button, textfield etc references right away. Those references are just placeholders until your view controller has loaded the view. When a view controller loads a view it tells the loader to make it the "owner" of the view. The loading code will then look for any outlet connections made in the nib file and assign those to your IBOutlet references. Once that has been done, the callback viewDidLoaded is called. It is only now you can to stuff with your buttons etc because only now do you know that they actually exist in memory. In principle you can load any numer of nib files in your controller. Your outlets don't need to refer to GUI object the same nib file. So you could load multiple views and compose them together at runtime. So in short: The key here is that UIViewControllers aren't visible things like C# forms and views are not created in code but loaded and unloaded on demand. So you got callbacks that tell you when a view had been loaded and you can start doing things with it. You might wonder why this way of doing this is some infrequently encountered. The reason is that languages like Java, C# and C++ doesn't have any dynamic typing. It is very hard to connect code with objects created at runtime. That is why code generators are preferred. With Objective-C/Swift however method names, properties etc are known at runtime so you can GUI loading code can start assigning buttons and labels to outlets at runtime easily.
Usually Documents also be sure to [exclude the files from being backed up by iCloud](http://stackoverflow.com/questions/12936960/ios-copy-sqlite-database-and-excluding-it-from-icloud)
No one has mentioned it, but I think you should really have your own service that provides that info and then consume it with your app. You will have much easier time crunching data and your app won't be doing a lot of work for no reason. You also get to define your own protocol and consume it in whatever way you want. Another benefit is that if yelp changes api and it breaks your app, you will only really need to change the service implementation as oppose to rolling a new release and putting that through submission process.
switched everything over to SKActions. Still working through some adclick related issues but should be easier to solve. I'll post back at the end of the day any updates. 
As you use SKActions now - you can just pause the entire scene with paused=true if someone interacts with the ad
This was a great read and exactly what I want to see more of in /r/swift. As someone who is also not super accustomed to functional programming (but interested in moving that direction) I still find the shift method in this example a bit odd. I wouldn't say that a distance is a circle. So let safeDistance = Circle(radius: 1.0) looks strange to me. I would say that safeDistance is a constant and that you have two safeZones which are circles with a center and a radius equal to safeDistance. Ditto with weaponRange. The shifting around makes it harder to read to me. Is there a reason you don't want var position: Position { get } in the Region protocol? Also without reading the code it's not clear if Rectangle(width: 1.0, height: 1.0) should contain Position(x: 1.0, y:1.0) or not. Is it centered on 0,0 or is one of the corners on 0,0? Which corner? You have to read the contains function to find out. If you add a position to each Region then you can make this explicit in the initializer like this: Rectangle(center: Position, width: Float, height: Float). Now anyone creating a rectangle knows the center is the position, not one of the corners. I'm guessing this exercise was to mimic the functional approach as closely as possible and that's why shift was used. But I'm curious if there's also a preference for shift. If it's about storing less state in the structs, then I'd like to hear why having a position and radius is worse than just a radius. Also if the original blog post author reads this, the links on pages like this: http://kelan.io/code-snippets/regions/6-protocol-extensions/ don't work because they are relative.
I would start by looking at the APIs for Yelp and Foursquare and find what endpoints return the data you want. If you're looking for venue information, for example, these endpoints might be: https://api.foursquare.com/v2/venues/VENUE_ID https://api.yelp.com/v2/business/BUSINESS_ID Then try authenticating and fetching data against the endpoints. No UI, just make sure you can communicate with the APIs you want. This is usally where I start when working with a new API. How are you determining what venue data to show the user? Is there a search field to input a name (e.g. Bob's Burgers), which you'll then pass onto Yelp and Foursquare APIs? If so you may want to look at the search endpoints for those APIs, where you pass in some term and a set results is returned. The collection of `Venue` structs is good approach. Is the `Venue` built up with data from both Foursquare and Yelp APIs? Then you might then think about how to assemble your model of a Venue from two information sources, Yelp and Foursquare. For example, maybe a Venue has `numberOfCheckins` that comes from foursquare and `reviews` or `stars` that comes from yelp. It sounds like you have a good approach. Start with something basic, like table view and one API call and work up from there.
I just set up LetsLearnSwift.slack.com! This is a really cool idea. Happy to invite whoever wants to join!
I am down for joining in. 
Not sure what a 3d file is, but your question is pretty vague. So Instagram, Twitter, Vine, Facebook, etc aren't real apps?
I think the question is, (simplified) how do you go from "Hello World" to Twitter?
Just as a heads up, I've done research on to both of those APIs. Make sure you properly use their branding, and attribute content. Also Yelp forbids you from blending their reviews with other content providers.
Thank you very much for valuable information. In my app I'm using API for weather forecast with XML output but output is updated irregularly so I have to always download XML and parse XML element with update datetime information and based on that rewrite XML file or throw it away. But Haneke looks great solution for caching images I'll try it. 
I'm totally interested in this!
The "piece of paper" approach is called "lazy evaluation". Most languages take the "top to bottom" approach, but there are certain languages like Haskell which evaluate everything lazily—none of the expressions are evaluated until they're actually needed, so code may run in a different order than it looks like it will, and some code may never be run at all if its result is never needed. (The unusual design of Haskell, where you can never modify anything that already exists and can only return new values, makes it possible for the language to work this way.) Swift doesn't normally evaluate things lazily, but you can ask it to lazily evaluate certain operations on arrays and other collections. For example, this statement will give you a copy of the `names` array with the names converted to uppercase: let uppercaseNames = names.map { name in name.uppercaseString } This will do the same thing, but lazily—the names will only be converted as they're needed by other code: let lazyUppercaseNames = names.lazy.map { name in name.uppercaseString } The way this is done is by using different types—`uppercaseNames` is an `Array`, but `lazyUppercaseNames` is a `LazyMapCollection`. The `LazyMapCollection` holds on to a copy of the original `names` array and the conversion you want to perform on it, and performs the conversion at the moment you ask for a particular element. Because `Array` and `LazyMapCollection` belong to different types, you have to choose which one a particular method supports—you can't just pass a `LazyMapCollection` anywhere an `Array` is expected. On the other hand, both of them conform to the `CollectionType` protocol (they're both "things that have a whole bunch of elements you can access by index"), so you can write a generic method which can handle either one. There are other cases too where code doesn't run in strictly linear order. For instance, many APIs take "completion blocks" which are run later, after some operation that takes a long time has finished. The Grand Central Dispatch APIs (which start with `dispatch_`) are all about running code in the background, outside the main flow of control in your app. So is `NSOperationQueue`. None of these things are magical; the calls themselves still run sequentially, but the sequential code they run cleverly arranges to have something happen later, out of sequence. So in short, when you're reading Swift code, the code almost always reads top-to-bottom. But there are certain features which effectively change that, and over time you'll learn to recognize them.
Fixed- My issue was not only pausing but un pausing correctly. I have a pause menu in my app and when the user paused the game and then clicked on an ad when the player came back the game would be unpaused under the pause menu. I was not able the game was not able to tel whether the game was paused or not so when it unpaused, unwanted things happened. I read this and it sounds simple but the pause screen was in my `GameScene.swift` file while the ad functions were being handled in a different class in `GameViewController.swift`. Using SKAction fixed my issue of the scene being pause correctly but for the game to determine if the scene was paused or not, I just had it check if `skView.scene!.paused` was paused or not, in `GameViewController.swift` before I paused the scene with the `bannerViewActionShouldBegin` function, and then act accordingly in the `bannerViewActionDidFinish` Thank you for your help.
Awesome, thank you! 👍
The problem here is that you released your work under the terms of a license you don't understand. There's nothing wrong with what AnyStream's developers have done; as long as they've fulfilled the license/copyright attribution requirements, they're free to monetize the app. They're not even required to contribute their changes upstream back to you. [Here's a tl;dr of the license you might find useful](https://tldrlegal.com/license/mit-license). If you don't want people monetizing your work, keep it in-house. Even the strictest of licenses - the GPL - permits the sale of software. 
Yeah, I just felt backstabbed after helping the guy - who is a noob - by email for a month with compilation issues... It just sucks to be me I guess. I also feel bad for people who have bought the app. Thanks for looking at it !
&gt; I want to be able to run a block with escalated privileges I'm afraid that it's never been possible to run individual code segments with different privileges; a process either is root or it isn't, there's no changing that during runtime. The only way to run segments of code as a different user is to spawn a new process, which is a good thing, as partitioning code like this is important for security. `NSAppleScript` is one way to spawn a new process with administrative privileges, but it doesn't provide for any sort of control over the process once it's spawned. Apple's recommended method is to install an XPC helper that `launchd` spawns as root; this allows you to control the helper via an `@objc` protocol that it implements. [See Apple's EvenBetterAuthorizationSample for a full example](https://developer.apple.com/library/mac/samplecode/EvenBetterAuthorizationSample/Introduction/Intro.html) (which is written in Objective-C, but can be implemented just the same in Swift).
It could be made significantly less verbose, though...
It might not be exactly what you're looking for, but you can change your license to be something that requires others to be open source, too. For example, the [GPL v3 license](https://tldrlegal.com/license/gnu-general-public-license-v3-(gpl-3)).
I'll be happy to join! (to mentor, I guess?)
You say you are 'currently calling the Reddit API and getting the results.' Now you have the goal of moving that networking code out of the VC - this is an excellent idea for two reasons: 1) don't contaminate this VC with code which doesn't belong there, 2) make the loading code shareable. But, I don't understand why moving it to the RedditService class (which I think is a perfectly fine name, btw) would change/affect the asynchronous setup it currently exhibits in your VC. Broadly speaking, I imagine it currently looks like this (this is pseudo code and I can't really remember how NSURLSession works, so don't expect it to paste and execute!: func doDoThatVooDooThatYouDoSoWell() { myNSURLSession.dataTaskWithURL(myRedditURL) { // completion handler // get the data from the response, turn it into JSON, parse the JSON, pull out the interesting data, store in array containing desired data types, then myArray = ... // array full of desired data types } So, notice the technique which NSURLSession has employed there: they can go off and do the fetching, but once they have the response, they have no idea what you want to do with the data - that is up to you. So, you have to tell it what to do with it (turn the data into JSON, parse the JSON, pull out the interesting data, store it in the right data types and assign it to myArray) in the completionHandler closure. Well, we could say the same about the RedditService: it can go off and do the fetching, it can turn the data into JSON, parse the JSON pull out the interesting data, but then it doesn't know what to do with it - that is up to the caller. So, we should use the same technique, pass a closure to do the assigning to an array. Something like this: Inside VC, in whatever function you want to do the data fetching from: ... redditService.doDoThatVooDooThatYouDoSoWell { (myArray: [MyRepeatedObject]) in self.myPropertyForStoringTheArray = myArray /* dispatch to the main queue to update the UI */ { self.tableView.reloadData() } } And that requires changing the method doDoThatVooDooThatYouDoSoWell inside RedditService to deal with the closure: func doDoThatVooDooThatYouDoSoWell(myClosure: /* appropriate type signature goes here! */) { myNSURLSession.dataTaskWithURL(myRedditURL) { // completion handler // get the data from the response, turn it into JSON, parse the JSON, pull out the interesting data, store in array containing desired data types, then myArray = ... // array full of desired data types myClosure(myArray) } There's a couple blanks for you to fill in, and it doesn't handle errors (as a first go, I'd just return an empty array, then make it more elaborate if necessary), but I think it should give you the idea. Good luck.
If you're using storyboards copy and paste the custom cell in your other view controller and use it as usual. 
you are very welcome, i am glad i could help! :)
Awesome! How do I join?
I'm down for this as well. PM me
Linker error means a file is not being located, as in the directory to it is broken, etc. Evident by "library not found". Usually to fix stuff like this, you would have to go to the General section and try to do stuff with "Search Directory Paths" etc. Have you tried creating a new xCode project?
Create a subclass of `UITableViewCell` with a xib file. In the xib file, layout the table cell how you wish. You can add outlets for labels and such and connect them to your subclass. Then, for each view controller that will use the table cell, register the xib file with an identifier. I might do this inside viewDidLoad. In the example below, `CustomCell` would be the name of the xib file. override func viewDidLoad() { super.viewDidLoad() let nib = UINib(nibName: "CustomCell", bundle: nil) self.tableView?.registerNib(nib, forCellReuseIdentifier: "CustomCellIdentifier") } There are a few other `register` methods on `UITableView` that you can use to register cell subclass classes or header and footer views. Assuming iOS here, but same tactics would work for OS X. You'd just need to dig a little deeper in the xib to find the correct view.
Sounds cool, weather apps are fun. Just curious, are you saving the XML to disk to represent (something like) the latest forecast? You might be interested in `NSCoding` and writing a `Forecast` or `Weather` or some other model object directly to disk. [This page](http://nshipster.com/nscoding/) has an example midway down of a Book model class that implements NSCoding.
Nice! I'd like to contribute. Anything you have in mind that you'd like to see added? 
&gt; I'm at a point in my learning journey where I can't comprehend how performing simple mathematical operations inside of a function or setting variables makes good program. It doesn't seem like you know much about making apps or programs, or it doesn't seem like you've made any attempt to make an app in xCode (since we're talking about Swift). We don't go create complicated things from mathematical equations, we use functions, classes, enumerations, types, etc. We use these functions and manipulate them in order to work with what we want to do, we don't go making math formulas. We might use some math but the math isn't what makes an app an app. Most of these functions give us access to do specific things we want, and these functions are made by Apple. For example, lets say I want to make a game in Swift for the iPhone. I start a game project in xCode (the IDE: Integrated Development Environment). xCode will prepare the environment for me automatically. I don't need to make functions or anything saying that it will be a game, the project is already prepared as a game, that means all I have to do as the game developer is write the code for the game to work how I want it to work. xCode will prepare 2 files for me: The GameViewController and the GameScene file. The GameViewController will run code to prepare the app as soon as it launches, and it looks like this: class GameViewController: UIViewController { func viewDidLoad() { //Anything in here will prepare when the app starts let skView = view as! SKView skView.showFPS = true } } As you can see, I didn't have to make any complicated mathematical equations to tell the app to show the frames per second, all I did was access the property of the SKView class to tell it to show FPS or not via dot notation. My point is that we access for the main part, functions that Apple already made. These are other functions that we use that were made by Apple: //What to do when the user first touches the screen func touchesBega(...) {} //What to do when a touch is being moved fucn touchesMoved(...) {} //What to do when the frame updates func update(....) {} //Whether to hide the status bar override func prefersStatusBarHidden() -&gt; Bool If I want to make objects move in the game, all I do is access the SKAction class and its functions like this and decide what I want it to do. func addEnemy() { var enemy = SKSpriteNode(imageNamed: "Dog") addChild(enemy) let moveAction = SKAction.moveToX(100, withDuration: 2) let removeImage = SKAction.removeFromParent() enemy.runAction(SKAction.sequence([moveAction, removeImage])) } Like I said, we access functions from classes etc. to do what we want it to do, again, no mathematical equations required. From there on, we just write more code to do what we want it to do. It's mostly about accessing functions. This code will save a high score into the app. NSUserDefaults.standardUserDefaults().setIntegerForKey(highScore, forKey: "HS") NSUserDefaults.standardUserDefaults().synchronize() **So what I'm trying to say is, we make simple things into complicated apps via function access and classes, not mathematical equations.**
Hope the following will help understanding what is going on as your description is a bit confusing for me. The first thing what confuses me is this: as far as I got with APIs and iOS / Android apps is, that the API is the "man in the middle" between your app and your database. Do you got your system running like that ? If you want to have a stable environment for your app and data Parse is a good way to get started and maybe stay there for longer. Hope this helps. 
Just some things to think about: * Have you considered coming up with a custom table view cell that shows all the relevant info? This seems like the cleanest approach based on your description * If you go with the custom table view cell, you can add buttons however you like. Be careful though, as these buttons may be difficult for users to consistently hit. * I would say it probably makes more sense for the user to be taken to an "edit" view when they tap a cell in the table corresponding to a task. Here they will change the countdown timer, task name, description, etc. * If, on the other hand, you are trying to "nest" table views, this is a bad idea (and I don't think it's possible). However, you can use sections/section headers to achieve a similar effect. 
Very informative and well-thought out. Thank you very much sir.
Just what I needed to read, thumbs up!
Thanks for this! I will try it tonight when I get on my development PC.
There was a nice update on twitter by Joe Groff (apple engineer working on swift) on twitter. The issue with comparing dynamicType to Type.self seems to be an issue https://twitter.com/jckarter/status/664185379365392388 Follow this radar for updates on it. https://openradar.appspot.com/23487272
[**@jckarter**](https://twitter.com/jckarter/) &gt; [2015-11-10 20:58 UTC](https://twitter.com/jckarter/status/664185379365392388) &gt; @ifnottrue Seems to be a bug type-checking "".dynamicType. This works: &gt; &gt; let x = "".dynamicType &gt; x == String.self ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Some other ideas to consider for breaking things up: https://vimeo.com/140037432 His github with the history of changes is here: https://github.com/andymatuschak/refactor-the-mega-controller /u/DressTheMonkey already answered your other question a bit. Since it's asynchronous, you're going to need to pass in a callback or setup a delegate to handle things when the data is returned, but separating out the network code is a good start.
Swift 2.1 just came out about ... a couple weeks ago, might be why there is no book yet on the latest version of Swift. I would get that old book, because when you try the code out on xCode, it will let you know immediately what you're doing wrong, as in the code you're using has to be a bit different. Not all of Swift changed, only a few things FYI so a lot of the code still will work. I bought a book by Ray Wenderleich to make games for iOS 8. I waited and waited until the newest verison of xCode and iOS9 came out, and when I finally updated, of the 1500 lines of Swift code, only like 1% of the code was outdated, so everything else was still fine. 
I find that online courses jive much better with my learning style. Try udemy, or lindora, etc. There are great classes on there that allow you to code multiple projects in conjunction with great explanation via the videos.
Cocoa Programming for OS X: The Big Nerd Ranch Guide Doesn't say Swift in the title but that is the language used throughout. 
Ohhh okay. Well my point was that an old one wont be different by TOO much, but that one is.
Is it a good idea to learn Cocoa through Objective C and use a mixture of that and Swift in my projects where I can?
The code just doesn't work anymore, they changed how you're supposed to write it.
That's too complicated for a fucking asshole like you.
I tried Objective-C with them. Didn't go well. Terrible at explaining things or emphasis the importance of things.
&gt; it generates is often faster at runtime than that generated by the Objective-C compiler (for a number of reasons). That was the original promise but how is that really in real life? have this be tested yet? 
I can just imagine the negotiations: Apple rep: "For this exclusivity, we'll clear all other albums out of the store for 1 month and we'll only sell this album; and dedicate one month's live streaming to nothing but the track's of this album." Taylor's rep: "Not enough, Apple, stop clowning around; we need something major" Apple rep: "OK, we'll pay Taylor Swift 3.6 bazillion jillion dollars." Taylor's reps: "ha ha ha ha ha ha ha ha, Dr Evil...Errrr I mean, Apple, that's a ludicrously tiny amount of money in this day and age for an artist of Taylor Swift's ability." Apple rep: "OK, we'll name our new programming language 'Swift' in her honour" Taylor's rep: "Now that's more like it." Edit: insert newlines to decrease senselessness; 2nd edit: rearranged to conform to Freud's theories of Jokes and Humour
Correct me if I'm wrong, but this applies to objects stored in an array. It's looks neater than a for loop. But I think it may be highly subjective. Thanks for the tip OP. 
I think Swift is a great, modern language, and love how clean it is while still acknowledging and trying to solve age old issues like stability with optionals, encouraging the use of const values unless you actually need mutability, and so on. It's a bit like if Rust and Java or C# had a child, which I think makes a really attractive and useful language, taking native compilations and code safety concepts from Rust, and simplicity from Java or C#. For me, a language like this is more interesting than both Rust and Go. Of course, it's in large because it fits my needs better than those two. While it's cool to have your stability checked already by a compiler and not relying on a garbage collector, these aren't paramount to my code, and I just don't tend to run into major headaches that Rust is supposed to solve. I guess Rust is best for things like operating system components, like device drivers, or embedded systems. And Go just seems too specialized for networking code to be very useful for me. I know there are other projects, but it seems like that is taking something Google is working on and forcefully trying to steer it in a different direction. So in short I like that Swift is using modern concepts, lessons learnt from decade old headaches, as well as compiling to native code. This is not common to see in a high level language (C#, Java, ...) and clearly another nice thing about it. I'm only a bit sad that Apple happened to be the guys behind it. They aren't known to be the people who have a long term, well supported, open source vision for their products, even when they sometimes open them. I think I'd be happier with an open source reimplementation of the Swift specification as a community effort, getting that compiler compatible with Swift code and libraries.
If you really really wanna do that, why not write a `with` function? Aka. func with&lt;T&gt;(object: T, closure: (T)-&gt;()) { closure(object) } with(progressBar) { $0.hidden = false $0.usesThreadedAnimation = true $0.startAnimation(nil) } But then again, first thing I wanna do with this code is replace `$0` with a more descriptive name, aka `progressBar`. with(progressBar) { progressBar in progressBar.hidden = false progressBar.usesThreadedAnimation = true progressBar.startAnimation(nil) } Full circle. Maybe useful if the `progressBar` in the `with` is something very long? If it is, you're probably doing something else wrong though.
On another thought, I got excited with this because with Swift you can bring features you miss from other languages.
XCode has an automatic code converter that should work for most code. Edit&gt;Convert&gt;Convert to latest Swift syntax
Exactly. Moreover, I think Apple being behind Swift is very reassuring. Many languages languish because there are no incentives to work on them. Or simply because the contributors, who lack corporate backing, have not enough time to dedicate to language. Swift, however, will be one of the most important piece of technology to a massive corporation. So we can rest assured that it will be maintained and will evolve quickly.
Fair call; I didn't mean to downplay Apple's undeniable contributions to Open Source and even used some of them when putting together the 'modern' Objective-C build environment for Linux. Rather, my wariness of Apple is because their sheer power means they don't need to be generous, and can afford to make their Developers lives difficult when it suits them. Apples engineering rocks, but several bad experiences of 'Apple arrogance' in App Store reviews over the years, their buggy iTunes Connect portal and the ever-painful code signing and provisioning processes are examples of things which Apple easily have the resources to improve but don't, because the simply *don't have to*. This capacity for them to be totally indifferent *could* have held Swift back; so back to my original message which really chimes with yours, I'm really happy that my fears were dispelled... and that in Swift, we see the potential for a bigger and more relevant bridge to other platforms than Objective-C ever managed to be.
OP posted a link with the thing he's trying to achieve. It really is about replacing a single name with something short (ideally nothing, but that can't be done in swift afaik). That he uses an array literal is more of an "implementation detail".
will there even be a swift supported ide on linux? can't think of one as appcode is mac only and visual studio is windows. might take longer than expected to be somewhat usable. 
Okay, here's a question, OP. Something I totally don't understand about this. WHY would you open source this? If you didn't want this to happen, why would you put it out there and explicitly give permission for people to "do this to you"? Because it seems like you just fundamentally don't understand open source, on a technical OR philosophical level.
What's wrong with mine?
&gt; open source etiquette 101 Okay, well, here's the lesson: It's totally not. If your license allows people to sell your product, then you've blessed that activity. You've said you're fine with it. *Said it*, out loud, explicitly. If you don't want people to sell your work, don't open source it with a license that allows that. Then if they do, that's theft and you have legal recourse. BTW, assuming they followed the terms of the license and included the MIT license notice, they're NOT selling it "as their own". They're selling it, with a notice that it's either open source itself, or derived from open source works. There are projects that open source for noncommercial purposes, and sell licenses to the same project that allow resale. That's a very viable business model, people are making money with that approach.
Yes, I'm excited! Go is great, but swift just _feels_ more natural to me. Hard to put my finger on (I could ramble but this isn't the place).
Nothing =) In terms of syntactic sugar the only difference between with(object) and [object].forEach is the dot and the shape of brackets. I was thinking about object.with to get rid of the brackets, but you can't do that with a protocol.
I'm fairly excited. I can see Swift being very useful for a lot of the things I do. I'm a bit concerned with how Apple is going to handle it, but if Swift gets good community support it has the potential to be amazing. 
Really? That's awesome!
Awesome! PM me your email and I'll shoot you an invite.
Sure, that'd be awesome! Just PM me your email and I'll send you an invite.
Yeah but AppCode is a variant of IntelliJ IDEA right? Which is easily ported given that it is based on Java. I don't think this will be an issue. JetBrains will port it because they will know there will be no xCode to compete with. Only problem is probably that Linux users are a bit cheapskates and anti non open source, so JetBrains might be in doubt about the profitability of porting it to Linux.
I am excited. I was really excited about GNUStep back in the day, but seeing how it never gained momentum I lost faith and I am resigned to the idea that KDE or Gnome will dominate the Linux desktop in the foreseeable future. The most realistic way to get Swift into Linux use today would be to create a Swift wrapper for Gtk or something wouldn't it? I mean I would love to see a NeXTSTEP like API for Linux, but wouldn't that mean creating a whole separate desktop system next to Gnome and KDE? Or can you think of a way of piggybacking on Gnome or KDE? You know like using a NeXT like API to program Gnome apps. If I didn't have two kids and a full time job I'd love to help out on SwiftStep ;-)
JetBrains already have a Linux 'native language' IDE in Clion; I wonder if they would rather port the Swift syntax module from AppCode, into that. Though to be honest, the distinction is rather slim; having used many products in the JetBrains suite it's clear they're all designed in a highly modular and cross-platform way, under the hood. Even an entirely 'new' product for platform agnostic Swift is probably viable for them.
I agree, they do leave much to be desired. Hopefully Apple will expand them as Swift becomes more and more mainstream. To address a few of these specifics, in the meantime: &gt; abs - what if INT_MIN is passed? I assume you mean `Int.min`, since there is no `INT_MIN` in the Swift standard library. Passing `Int.min` to `abs()` actually results in a compiler error (nice, right?), but as always, you must account for the runtime possibility yourself. &gt; assert - is message to stderr or stdout? is newline required? Since `assert()` should never fail in a final product, only in your own testing (or that of others using a library you're developing), the file it prints to shouldn't be a consideration. You can generally count on it being standard error, though. &gt; print - buffering? libc stream compatibility? IO ERROR HANDLING? &gt; readLine - IO ERROR HANDLING? Both `print()` and `readLine()` are intended for programs whose standard IO will be a TTY (or debug console). If you need anything more specialized, use the traditional libc APIs by importing `Darwin`.
I'm expecting Swift for Linux right after the FaceTime protocol specs are released.
This is great, thank you! I actually picked up a book on algorithms recently. I have little problem interpreting most of the examples from C, C++, whatever, but having a guide dedicated to Swift is very helpful. 
Actually when I initially made DisposeBagProvider it was only constrained to UIViewControllers. I've found myself having to use it in other places as well though, hence why I constrained it to AnyObject. Thanks for sharing your custom operator, I just might use it as well.
Hey bud, not Swift related. If you'd like to share your source code that'd be cool, but this is spam.
Go has an ecosystem? 
Good to hear. I didn't intend to imply that people go to Linux because it is cheap, although I can see it came off as that. A lot of that has to do with idealism and an anti corporation attitude. Which in moderate doses is health IMHO. But I assume that there will be some similar attitude in Linux land as in Android land. Selling software on iOS is considerably easier than on Android despite Android being much bigger marketshare wise. I think people get used to getting stuff from Google for free. Apple users have been used to paying moderate amounts for quality shareware and apps for a long time. They are more used to the idea that you got to pay for software. But as far as I understand Ubuntu and others have created store concepts and perhaps this will warm linux users to paying indie developers for quality software.
Sure that makes sense? Adopting Clion I mean. Swift calls into Objective-C code most easily and secondly to C. There is no way to call C++ code apart from exporting C symbols. I assume AppCode supports Objective-C++ if it supports Objective-C. That means C++ should already be supported through AppCode. I mean if you write C++ which you want to use with Swift wouldn't it be natural for you to wrap it in Objective-C by utilizing Objective-C++?
Yeah, just as soon as I'll get started.
Sure thing. thank you!
Hello, 1. Your data should be kept in a custom data structure or structures. Most likely it will be a class (as opposed to a struct or enum or tuple for example). If it is multiple structures, it may _use_ arrays, but is unlikely to be one huge array. Even if you think you can squish and bend your data into an array or dictionary, you have such a large amount already, and that amount will only grow, that having a custom structure with custom logic is the right way to start, so that it is easy to understand and change in the future. 2. There is no such thing as passing data from one storyboard to the next. Everything boils down to view controller to view controller. It is true that you may have a view controller instantiated from storyboard A passing data to a view controller instantiated from storyboard B, but where they were instantiated from only affects the instantiation (the 'birth', if you will), not the rest of their activities (the 'life', if you will). Basically, to pass data from _any_ object to _any_ other object (so this includes two view controllers), you have to have a source for the data (which could be a property or method of the first view controller) and you have to have a destination for the data (which could be a property or method of the second view controller), and you call the methods or get/set the properties. Normally, when talking about view controllers this is done either after instantiating the destination view controller, or in the prepareForSegue: method. 3. 'Does Swift do this automatically...'. I think it is more appropriate to think of it being UIKit or Cocoa which is possibly getting rid of view controllers rather than Swift. Although it is true that ultimately it is the language which technically releases the memory, it is the toolkit which instructs the language to do so. It is impossible to answer this question with a firm YES or NO, unfortunately, the real answer is, 'IT DEPENDS'. For example, you wouldn't like it very much of the toolkit/language released a view controller the user is in the middle of using, i think? So, how do you tell the toolkit/language that a user is in the middle of using something? Well, by keeping one or more strong references to it. So, if a view controller has no strong references, then the toolkit/language will get rid of it. Keeping track of the strong references and making sure you are not referencing something you shouldn't be is a substantial part of ensuring your app performs well, and is too large a topic for me to just summarise in a sentence or two. If I may just offer one piece of unasked for advice; I'd consider carefully the burden of creating and maintaining these 100-ish view controllers and the accompanying storyboards. And I would seriously consider if there isn't a way to organise the data such that you could have just 10 or so view controllers which were generic and could handle multiple pieces of data. For example, suppose you wanted to make a maths quiz type of app. You are going to present the user with an addition problem and ask them for the answer. The wrong way to do it is to have a view controller for the problem '1 + 1', and then another view controller for '1 + 2' and then another view controller for '1 + 3' and etc. Well, you can see this is completely out of the question because I've heard a rumour that there are an infinite number of integers which means I would need to create an infinite number of view controllers. The view controller generic way to do it is to have ONE view controller for the problem 'm + n' and you can feed it the m and the n and it knows how to present the _actual_ values of m and n (rather than the names 'm' and 'n') to the user and get the user's answer and use arithmetic to figure out if the answer is correct. Good luck 
Thanks eviltofu! I'll have a look at that.
As long as they release some sort of CLI compiler (like javac or rustc) then IDE implementation is not too hard to add. 
&gt; How? what was wrong ?? please let us know :) 
I was setting my delegate wrong. I was setting it in the viewDidLoad before the match was even created. So I created GKMatch object in class scope and when a match was created I set the match to that object and made that object the delegate when the match was created.
If it is a multiple choice kind of quiz you should look at UITableViewController perhaps.
Thanks davidmatousek! I'm already looking into that custom class. Singleton. Now there's a new term I haven't come across before posting here! I'm onto it!
It does involve multiple choices - but let me explain the whole process: 1. The user starts of with "entering" (my apology - I'm not at all familiar with the correct lingua franca yet...) data into x number of fields to describe the threat and give details about it. 2. Once the threat is defined/described, the user goes through a predefined set of 28 metrics that need to be rated. Each metric can be assigned/rated with a value of either 1, 2, 3, 4 or 5. The user can't progress to the next metric until the current metric has been rated - no "blanks" allowed. The user can also not jump around and rate metrics in a random order - he has to follow a fixed path, hence all the view controllers, one after the other. (As I said before, each metric is on a separate view controller, and each metric has a title, definition, three considerations and also unique definitions for each of the five rating values that can be assigned - which makes for a lot of information that has to be displayed to the user). 3. The user is presented with a result. Now the user has to make a decision based on these results, and he has two options: retire the threat (stop), or do a vulnerability assessment (go to point 4.). 4. Repeat point 2 for the vulnerability assessment - this time for 26 metrics. 5. The user is presented with a result. Now the user has to make a decision based on these results, and he has two options: retire the threat (stop), or do a risk assessment (go to point 6.). 6. Repeat point 2 - this time for 18 metrics. 7. Get result of the assessment, and result with all data associated to it gets saved in a risk register for future reference, etc. Nothing can be permanently discarded. I've already started working on a dictionary for all the information that needs to be presented for each metric - your comment about using less view controller makes perfect sense, and the way I see it I will be able to reduce the view controllers that contained the metrics detail from 70 to 3 - yah! Like I said, I have (EXTREMELY!) limited experience (I started exactly 6 days ago...), but what I've seen from online courses, the UITableViewController will be the thing to use to display that risk register I've mentioned. 
It's not working... wait, the conversion working but the code and IAP nope.
ohh !! cool !! glad to know that you finally found the issue ... :)
Hi! I remember you and your logo from /r/italy! I have something similar in an app i'm writing and planned to do a tutorial on it, so i had some time to think about what to include in this kind of projects. I've seen you've implemented IBDesignable, why not implement IBInspectable too for some of the parameters that define the uiview appearance like the colors, thickness and animation duration? A lot of people would like that, easily configurable directly from interface builder. And also, what about implementing [UIAppearance](http://nshipster.com/uiappearance/) too to have some default colors aligned to the current superview/application defaults? Good luck with your project!
I would recommend to read the Screenshot section of the [iTunes Connect Developer Guide](https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/About.html#//apple_ref/doc/uid/TP40011225-CH1-SW1) again. &gt; When creating screenshots to be posted to the store, follow these guidelines: &gt; &gt; - Don’t place the screenshot inside an Apple device image. &gt; - Always remove the status bar from screenshots to present a cleaner look. iTunes Connect expects screenshots of dimensions that exclude that area. ---- Seriously, if you haven't done so, read the iTunes Connect Developer Guide. It's way longer, but it will actually contain everything one needs to know. 
Removing assert() and similar is literally the only difference between -Ounchecked and -O. That's what the "unchecked" part means. It removes the checks.
Funny because i was going to write something very similar this week, now I don't have to :) Thanks for sharing, I'm hoping it will work perfect
I was just writing about all the things I had to do. I wasn't trying to be the only source someone needs but instead, an outline of the process.
How do I go about signing in? It requires a password too 
Well, i generally find that it helps to understand the language you're trying to write code in.
Actually very funny. Interestingly, Taylor Guitars swung some such deal with Ms. Swift in real life. Seems she did or does a lot of her song writing on a Baby Taylor acoustic guitar there is now a Taylor Swift Guitar made by Taylor seen in most of her other endorsements.
True. I have nothing against tutorials, but when it comes to submitting things to the App Store, you need to really understand things and get the complete information from the documentation.
thanks a lot !! this is very helpful :)
But hardly in this case. 
In your opinion. It does eliminate repetition. 
Yes, 'the stepper seems to have it's own value separate from the text field' is exactly right! When you look at the situation from the stepper's point of view, you can see that it knows nothing about the text field, and nor should it. It is up to your app to make the necessary 'connections'. So, as you know (because your code sample uses it), the stepper has a value property. That property is not only gettable, but also settable. So that means whenever the user changes the text field, you need to update the stepper. And whenever the user changes the stepper, you need to update the text field.
Hi Rudy69, I hope my library will help! Since you wanted to develop this feel free to take a look in my code and open an issue if you find any bugs. It's still on development so any help is appreciated.
Yay, our branding is working! Anyhow thank you very much for the suggestions, they are very useful. I will implement IBDesignable as soon as I have time and I will take a look into UIAppereance, I never used it. If you see other things that you would implement differently feel free to write me here or in private. Thanks!
The Swift books from Apple are not specifically for either iOS or OS X so they are a good start if you already know programming. If I were you I would just learn a minimum amount of Objective-C. It isn't that hard. It will make so much more resources available to you. Remember most of your time spent as a Swift developer will be spent learning APIs and not the language itself. Likewise with Objective-C. Learning the language is quick. It is learning the APIs and tools which takes time. A couple of simple rules to get into Objective-C. If something has a @ in front or is enclosed by square brackets [], then it is Objective-C specific. Everything else you read is plain C99, which you likely already know. Almost all concepts in Objective-C exist in Swift as well so you want directly waste your time. You will learn concept that matter in Swift as well. The only difference is the syntax for those.
Hey thats weird. Can you check again? Looks like something went wrong.
Awesome. Ill use that for my next app. Thanks!
Easily done via Bluetooth, as long as you can send the data for example via a microcontroller (which is overkill) you can interpret the data in the iPhone and decide what to do with it. (As to buying a button ... You can create your own)
He's a friend of TODO
He's always leaving dashes about the place like some kind of chump. WHAT THE HELL ARE YOU TRYING TO TELL US MARK. O... hai mark! https://youtu.be/5utc5TOPNbo
It fails at runtime, which is all 5HT-2a is saying.
MARK's always trying to help everyone out... Let them get to where they are going. TODO is an irresponsible bastard that sheds responsibility at every opportunity.
Hey all! So, /u/MichaelGrenade really got a few of us thinking that a Slack community full of Swift developers of all levels could be really fun and useful. It would allow all of us to get together and ask for advice, help, or share best practices in real time. It would also be a great place for developers to meet and discuss potential partner projects. So, after talking a bit with /u/Mark_teh_z and /u/danappelxx we decided to do just that. Come join us at [slack.letslearnswift.io](http://slack.letslearnswift.io) and let's get to work together!
Come join us at [slack.letslearnswift.io](http://www.slack.letslearnswift.io). We'd love to have you!
I think the first one probably shouldn't be allowed, but the compiler is failing to see through the array accesses to diagnose it.
I used this tutorial just yesterday http://www.appcoda.com/in-app-purchase-tutorial/ to implement a shop in my game, with several different IAPs. Works just fine :) Just did a few changes for Swift 2. 
loololololololollllllll
 if let index = pageViewController.viewControllers.indexOf(viewController) { print("found at index: \(index)") } else { print("not found (seems unlikely)") }
As an exercise for myself I did a small re-write to make Adapter more re-usable, say you wanted to do this with more than just the Person struct. protocol CollationSelector { var sortKey: String { get } } class Adapter &lt;T: CollationSelector&gt; : NSObject, CollationSelector { let val: T init(val: T) { self.val = val } var sortKey: String { return val.sortKey } } struct Person { let name: String } extension Person: CollationSelector { var sortKey: String { return name } } let collation = UILocalizedIndexedCollation.currentCollation () let people = [ Person (name: "Anna"), Person (name: "Sara"), Person (name: "Alan"), Person (name: "Sam") ] typealias PersonAdaptor = Adapter&lt;Person&gt; let objects = people.map (PersonAdaptor.init) let selector: Selector = "sortKey" var sections = [[PersonAdaptor]](count: collation.sectionTitles.count, repeatedValue: [PersonAdaptor]()) let sortedObjects = collation.sortedArrayFromArray (objects, collationStringSelector: selector) for object in sortedObjects { let index = collation.sectionForObject (object, collationStringSelector: selector) sections[index].append (object as! PersonAdaptor) } let groupedPeople = sections.map { $0.map { ($0).val } } groupedPeople
Array index getters are functions, so the result of each getter is created as a separate variable (no aliasing). If you call the array index twice it invokes the function twice and create two separate variables. When the inout function is complete, the separate array index setter function is called to store the value. Remember: inout is "copy to new location on the way in and then use the appropriate setter to save it to the original location on the way out".
I'd say brand new apps are good candidates to be all in swift. As of 2.0/2.1 Swift is much better than it was in 1.0/1.2. I'm about to launch my first app written entirely in swift. :D
Phew, thanks. So not all is lost :-)
You cannot get the page number from the page view controller; you need to keep track of the page number yourself. A possible way to do that is to have each view controller which you are going to give to the page view controller implement a protocol which has a property or methods to set and get the page number. And when you instantiate a view controller (as a result of the page view controller asking you for a page) you can set the page number into the view controller. Then when the user asks for the page number, you can get the page number from the view controller.
I had built my Page View Controller from this tutorial: http://swiftiostutorials.com/ios-tutorial-using-uipageviewcontroller-create-content-slider-objective-cswift/ The difference is I have removed the Page Indicator since I do not want to show them in my app. Sorry for bothering with this. I am newbie to Swift and have been trying to figure this out since yesterday and it is kind of urgent!
I still think you can do it by adding a property called currentPageNumber, and everytime you change the content of the 'child view controller' you update the currentPageNumber to reflect the page number represented by that content.
Thanks!. From quickly looking over that tutorial, it seems to achieve a different result. I think that example will only work for the mp3 files that are specifically loaded into that project, as mine pulls from the user's music library.
Yes, I just noticed that :) I think your solution is actually much better (at least for me). However, I also noticed that your code on github has some dependency to JailCoder. Might be a good idea to unpatch project and make it more general.
The App Programming Guide for tvOS uses the term Parallax Images
Tried your suggestion and got it working today using a xib file. Thanks again.
I've had guys work on my iOS project at work who had no prior knowledge of any iOS development. We did it in Swift. No problem. Using Swift for iOS development doesn't really feel very different. Since the libraries are made for Objective-C, your style of programming remains quite similar. Seriously, don't worry. Objective-C is a bit of a waste of time now. Why spend time writing it in Objective-C now when you have to rewrite it in the future to Swift anyway. People are not going to want to maintain an Objective-C app in the future.
I co-developed an app in Swift 1.2 and it was released in August. Since then I've been working on my own project with Swift 2.0/2.1. It has a t
Sorry about that :). Anyway, since I started developing this new app in Swift 2.0/2.1, it has almost felt like a new language. The language has so much more substance to it with protocol extensions, the error catching mechanism but the biggest change for me has been guard/defer. For a long time I found myself fighting with optionals which led to using implicitly optionals way too much. With guard, optionals are much easier to work with and now I almost never use implicitly unwrapped optionals unless it is one of those rare situations. So yes, you should do it :)
basically title method compares the title of the row in "titleForRow" method is the title you're looking for. this method is used when you have a static number or rows and know the title of each row I was pulling data from a server and using that data as the title so I didnt know the title of the row so I had to base it off of which index was pressed 
Yes, my game is universal. Looks good on all devices and positions itself correct. BUT my game runs on landscape mode only. If you wanted your game to also work in portrait, I'm not sure how you would do that. You would have to make it detect that it's in portrait and adjust the positions of the objects correctly which would be time consuming. I would just stick to a single orientation. Flappy Bird is portrait, Angry Birds is landscape, Cut the Rope I think is landscape, etc. They don't change portrait. 
Perhaps I misunderstood what apple required. I tried to submit an app for Ipad and it required my app to function in both landscape and portrait to be compatible with the upcoming ipad pro's multitasking features.
Heheheh your method name is dimissvc not dismissvc
What drives me up the wall is that I am the mother of all proof readers. I can spot a double space a mile off; I can glance at a whole A4 page of closely typed text and my eye falls straight on the single misspelt word 2/3 of the way down the page. And yet when it comes to coding I can lose bloody hours looking for a mistake before eventually spotting that I've typed "NSViewContoller" right at the bloody top
Try veasoftware tutorials. 
Swift is the future on iOS. Why would you write in a legacy language? Bloggers and books made the move to Swift in June 2014. So, the majority of iOS 8 and iOS 9 examples are in Swift. Come June 2016, iOS 10 will be the third major release that will be blogged using Swift. Apple only released its Apple TV examples in Swift. They want you using Swift. Don't be surprised if iOS 10 examples are only in Swift. 
Really? That's stupid; why would they want a game to be also used in multitasking?? I'll have to look that up; I haven't heard anything about it. Was it a game?
I had a game for iPhone I was working on and was going to build it for ipad too. Maybe I should build it as a "universal app" instead of iPad. I'll try it again and see if i get the same message.
I think that's what they probably meant. Can you send me or show me what they told you in the message? I don't want to submit my game only to be denied with the same message.
For purely anecdotal data, I requested my team attempt new projects in Swift. We just had our first one ship. The feedback I received was very positive, despite the perceived obstacles of a "new language". This was a team usually working with C, Obj-C, Python &amp; PHP. Learning can be invigorating, even better when someone is paying you to do it. The Sprints were planned accordingly, and some original parts were rewritten later as knowledge started to crystallize. 
This is really neat, and is going to make building quick automation tasks much nicer!
Very cool project! Thanks for sharing this - I'll definitely be reading through it when I have some time tonight.
Thank goodness! I almost fainted thinking that I had to make my game portrait, because that would look stupid.
Cmd-] to indent, Cmd-[ to outdent. It's not considered refactoring, so it's under the Editor &gt; Structure submenu.
Thanks.
Another lost soul who hasn't heard of [AppCode](https://www.jetbrains.com/objc/)... Try it out &amp; be enlightened
awesome!!! thank you, and looks dope!
Im on mobile, so this won't be the best formatted reply. 'For (kind, numbers) {}' loops over each pair in your dictionary 'interestingNumbers'. In the first iteration of this for loop this pair is : ' (kind = "Prime", numbers = [2, 3, 5, 7, 11, 13])'. The second iteration this will be the second pair: '("Fibonacci", [1, 1, 2, 3, 5, 8])' and so on for any following iterations. Note that 'numbers' is an array of integers. Now onto the nested for statement 'for number in numbers {}'. Here 'number' will loop over the values in the array 'numbers'. So for the first pair '("Prime", [2, 3, 5, 7, 11, 13])' your first 'number' is 2. This will move on to 3, then 5 and will eventually reach 13. Now you move back to the outer loop, the pair becomes the fibonacci pair, and numbers will loop over the values in the fibonacci array ( 1 , 1 ... , 8). These for loops move on untill all dictionary pairs have looped through their 'numbers' array. In other languages you would usually write something like 'For (keyValuePair in interestingNumbers) { string kind = keyValuePair.key; Int[] numbers = keyValuePair.value; }'
This makes complete sense... I was having difficulty visualizing how the key value pairs were showing up in the loop, and in which order. I appreciate your detailed response - thank you!
cmd+a then cmd+i. Great after a cmd+v. 
Your can make a protocol, `Foo`, have your two types conform to it (by extension if needed) and make an array of type `[Foo]`.
Foundation has a parser called NSXMLParser which can be used from Swift. There are also other, open source, XML parsers. 
An enum is better than a protocol in this case because if you only plan on two types, you'll have to be explicit about handling them.
Thanks for the feedback, I fixed the problem :)
Really not really.
DEAR PEOPLE FROM THE FUTURE: Here's what we've figured out so far ...'l So it turns out Facebook's Graph API has what we need. You'll need the groups ID, and the album ID of the groups photos. You also need to have a token to access it, even though it's public content. I used my personal profile's. From there, you can find a URL that give you JSON data (by clicking Get Code and using the URL in the C-URL tab) that contains, among other things, an array with separate URL's for every photograph in that album. That's where I am right now. There's a line or two you need to get image data into an image VC from a URL string, but I want to populate a larger gallery, so I'm trying to find out how to put an array of URL strings into a collection view or something. If it's unclear what I mean, let me know, and I'll post some screenshots. Also, we are brother now, /u/StealthBrian. https://xkcd.com/979/
**SOLUTION** I had built the page view controller using this tutorial: http://swiftiostutorials.com/ios-tutorial-using-uipageviewcontroller-create-content-slider-objective-cswift/ 1. Make sure your Parent View controller conforms to UIPageViewControllerDataSource &amp; UIPageViewControllerDelegate 2. In the function createPageViewController(), set the delegate and datasource for the pageController to self 3. Use the following delegate method: func pageViewController(pageViewController: UIPageViewController, willTransitionToViewControllers pendingViewControllers: [UIViewController]) 4. Use this code in the above delegate function: if let pageItemController = pendingViewControllers[0] as? UIViewController { print(pageItemController.itemIndex) // THIS IS THE CURRENT PAGE NUMBER }
Do this 
I saw :) Glad I was able to help out a tiny bit
Not at home so can't check, but it's not really an emulator, but a simulator. It does not emulate a whole virtual device as android does, I think it runs the code / simulates it on top of OS X. Could be wrong though. 
Somewhere around 1-2 gb I'd say
Just checked, the simulator itself uses very little RAM (&lt;300 MB); apps use as much as they use on the actual device, so that depends. The one I'm running right now (a small-ish app) uses 40MB. It's really Xcode that you should worry about if anything; that one uses 2,6 GB on my machine right now.
The simplest approach would be to use NSUserDefaults; at least I would do it. bool didBuyItem: Int = 0 //code where user bought item didBuyItem = 1 NSUserDefaults.standardUserDefaults().setIntegerForKey(didBuyItem, forKey: "BoughtItem") NSUserDefaults.standardUserDefaults().synchronize() When checking if he can buy it. if NSUserDefaults.standardUserDefaults().integerForKey("BoughtItem") == 1 { //disable buying } I mean, at least in the small simple sense. This will save the data into the app. To make it run faster or check faster, you could make an array of strings (the keys) and just do a loop for example. for key in keys { if NSUserDefaults.standardUserDefaults().integerForKey(key) == 1 { // } } 
Nice! Instead of having a separate function to render trails, have you tried getting the same effect by rendering only the simple particle and giving your background triangles color a small alpha value? 
Thank you! :D
I think it does what you're saying. There are two types of fireworks in the code. A simple burst, that then flares out for the last 1/10th of a second (producing a twinkle - which isn't shown in the video - I need to update the video). That is simply a diamond particle (made of two triangles) that moves and changes color. The other type, that has the long trail (aka plume), is again a diamond particle, but also some triangles behind it with lower and lower alpha values and smaller size. I never draw any connected lines or polygons. The distance between each dot in the trail is .02 secs. If you make that delay longer you will see the trail become dotted and flicker (The flicker is ugly). I made one attempt at having a polygon (connected) trail but didn't like the look compared to how it is now. (it was flickering and I need to figure out why) Also I'm drawing everything at the same z level - I'm not trying to 3D anything. And I probably should just be drawing points, not triangles, but haven't tried that yet.
Do not fully trust the simulator. In fact, test it out on real devices.
The problem in my scenario is I can't afford a iPhone. Hence this scenario. :)
Actually what I meant was if you set your background color to (0.0,0,0,0.0,0.1) for example instead of providing an entirely new image each frame, you draw your new particles at their new locations on top of increasingly dimmer ones from the previous frames, providing the streaking appearance. Of course you'd still have the dotting appearance if you're using solid colored triangles and the movement per frame was at all significant.
[removed]
I'm planning to spend at most (before shipping + tax) max of (preferably) $600. CPU = i5 Quad Core Motherboard = unknown (no overclocking intended) Gfx Card = stock i5 cpu's gpu RAM = 16 gigs PSU = 500 to 600W? Case = H440 (red/black) 
OH, I see. I just tried it. Doesn't look too bad. That's a neat trick; I can see some screensaver/visualizer type things doing that. I don't think I will use that as the primary fader (because it's a blunt hammer) but I might use it just to smooth out the frame transitions a bit (and eliminate some small flicker). EDIT: actually, it breaks the twinkle out effect. Those have to flash and end immediately. Oh well!
On iOS, it's not an emulator. It's a little confusing to think about, but it works something like this: when you compile and run on the Simulator, your code is actually compiled for the CPU in your computer. It's not "emulating" iOS. It's kinda like a port of iOS to the Mac. The Simulator doesn't use up a whole lot of juice because of this, but...the VM emulates Mac OS X. So, I'd suggest getting a computer with 8 - 16 GB of RAM for good performance. 4 is kinda pushing it, but it shouldn't be too bad. I wouldn't go below 4GB. Besides, you can never have too much RAM.
CoreData works well once you finally get it all set up but it is a huge pain, especially when you want to change your model later on. On my next project I'm going to try [Realm](https://realm.io/)
&gt; I think writing your own chess logic would be much more fun than just writing a graphical interface for one. Apple has sample code for a Four In a Row game using GameplayKit. &gt; Agreed! I just don't have confidence in my abilities to build a professional-level chess engine. I'd like to have the ability to evaluate a position and alert the user to when there is a tactic available.
I have spent the last two weeks thinking about making a chess app in Swift, and I don't know why. I'm trying to distract myself by working on an entirely different project, but it's not working – I want to make a chess app! I need a support group or something :) My plan was to use GameplayKit, as /u/angrydance said. This lets you create a simple chess AI without too much work. Effectively it makes every possible move, then makes every possible subsequent move, then makes every possible subsequent subsequent move, etc, and evaluates the final position – something I'll come back to shortly. Now, you can imagine the problem: naïvely there are probably 50 or 60 moves a player could make, and there are probably 50 or 60 their opponent can make – for every one of the 50-60 the first player made. So just to simulate all possible results of one white move and one black move, you're looking at 3600 moves. To get any sort of meaningful AI – i.e., one that has a chance of beating the player – you need to be able to look two of your own moves + two of your opponent's moves ahead, so that's 60 * 60 * 60 * 60, or about 13,000,000 moves. (NB: To repeat, this is an extremely naïve estimation; it's past midnight here!) 13,000,000 moves isn't impossible, or even hard if you're targeting OS X. But it's not going to be a great experience on iPhone, that's for sure. As an added complication, "evaluates the final position" is where things get interesting. See, GameplayKit asks you to give the player a score after a move has taken place. Chess doesn't have scores, but it does have relative ratings of pieces. When you report back the score to GameplayKit, the more accurate your assessment of the relative strengths of the players, the better the results you'll get. As a trivial example, you might say "well, white lost three pawns and a bishop, so we'll call that six points." But would your algorithm be stronger or weaker if you added points for players who have castled? Or if you added points for players who have kept both bishops? Or if you subtracted points to players who have doubled pawns? Or if you considered a queen worth 10 points, or 8, or 12? Etc etc etc. This is where the interesting challenge is, because if you can make your heuristic smarter you might not need to add another * 60 to your list of simulated moves. I think you can see why chess engines are so highly protected – these kinds of heuristics are trade secrets! Plus they are developed from scratch rather than using something like GameplayKit, so it's easier for them to discard moves that are likely to be poor, and thus prune the search tree and save time. Wow, sorry, I wrote all this completely off the cuff when I saw that some other sorry soul out there has Swift Chess on the brain. I may have written utter gibberish above, so please accept my apologies in advance. Now: I need to go to sleep and stop thinking about Swift chess games.
You don't have to write things from scratch, instead you can leverage the open source work done by others, like gnu chess for example: http://savannah.gnu.org/projects/chess/ Good luck, guys! :-)
Figured it out var Pieces: Array&lt;MyCustomClass&gt; = Array&lt;MyCustomClass&gt;() init() { let gb: MyCustomClass = MyCustomClass() gb.Height = 10 self.Pieces.append(gb) }
Yup! One small pointer is to not be explicit about type declarations - the Swift compiler infers and its usually pretty obvious to the user. For example, instead of var Pieces: Array&lt;MyCustomClass&gt; = Array&lt;MyCustomClass&gt;() you can do var Pieces = Array&lt;MyCustomClass&gt;() or even var Pieces = [MyCustomClass]() Also, variable names are preferred to be lowerCamelCase rather than UpperCamelCase, but that's just a matter of preference.
No matter if it is value type or reference type in Swift, initialiser has to be explicitly called to construct an instance, or an initial value has to be supplied before you can read the variable. `let` and `var` are pretty much the same, except the fact that with `let`, the value (e.g. scalar value, entire struct) or the reference stored (but not the properties through the reference) cannot be mutated.
&gt; Swift doesn't play like this. The equivalent of MyClass instanceName = new MyClass(); in Swift is simply let/var instanceName = MyClass() &gt; I'm not using the let operator because I just want a new empty instance of the class. You should read through the class section in Apple's Swift book again. 
I've been experimenting with it and its not bad at all. Dependencies are a bit of a pain compared to other languages, especially if you end up building a binary (you have to do some framework linking). [This talk](https://realm.io/news/swift-scripting/) from a few months ago gives a nice introduction to plain old scripting, but doesn't dive into making cli's.
&gt; just a matter of preference. It's a platform-wide convention, so it's a bit more 'important' than simply being just another way to do things. *Don't fight the framework* includes following Cocoa conventions.
This is correct but needs an example (: Declare &amp; initiate with let/var: let myClass1 = MyClass() // cannot be reassigned (or modified, in the case of struct (value type)) (because let) var myClass2 = MyClass() // can be reassigned later (because var) Declare first, then initiate with let/var: let myClass1: MyClass // compiler ensures that it will not remain uninstantiated myClass1 = MyClass() var myClass2: MyClass // same thing! myClass2 = MyClass() // ^ 
Right, that's correct - I just didn't want to in argument over style.
Apple includes a Chess game with OS X that's open source (GPL). http://www.opensource.apple.com/source/Chess/Chess-311/ Its interface is in Objective-C, so you can use its classes directly in Swift as-is. The chess library it uses is written in C.
Nice work! 
 let myStruct = MyStruct() myStruct.myIntProperty = 1 BAM! You cannot mutate the struct. (Value Type) let myObject = MyClass() myObject.myIntProperty = 1 Works since `myObject` is just a reference. (Reference Type) let myObject = MyClass() let anotherObject = MyClass() myObject = anotherObject BAM! You cannot change the *constant* reference defined with `let`.
Or just var pieces = [MyCustomClass]() The type annotations are optional mostly. Edit: I see now that someone else already made this exact point :p
Hey guys. When working on my apps I noticed that I create a lot of simple choice screens where I have a table view populated with choice items and if a user taps a cell it will change some settings. I created a generic view controller for those kinds of screens. You initialize it with an array of choices, an optional current choice and a choice handler that will be fired once a user taps one of the cells. You can then present it in any way you like. Hope you find it useful.
I'm working with CocoaAsyncSocket right now to do just this and it works very well. I have the server send out an empty "heartbeat" packet every few seconds to all clients, which respond with an empty acknowledgement packet. This keeps the connection alive since data isn't being sent regularly enough otherwise. 
Thanks for pointing it out. Its a very small project, but it was useful to me so I though I will share with the community.
Thanks for posting this. I have just started with Swift and am trying to do a simple calculator. Actually I have done the code portion now I am trying to work on a good looking interface that works in all orientations and on all devices. Although this video moves pretty quickly it might help me figure out the issues I am having. 
I read the md and glanced at some of the code. Some of these are very convenient, but I'm not a big fan of all the globals added in EZSwiftExtensions.swift. 
Decide if you want the PDFs local on the device or hosted remotely or some combination of both. Then use one of the two techniques here to display them: http://stackoverflow.com/questions/2832245/iphone-can-we-open-pdf-file-using-uiwebview For iOS8+ use WKWebView instead of UIWebView. If you've built a few apps before this might only take 2 cups of coffee.
That tutorial was written in 2014, which would be on swift ~1.0. There have been many changes to the language since then. If I were you, I wouldn't just copy verbatim. I would take what's in the tutorial and rewrite it yourself, and you'll easily spot what changes need to be made. It's been said a million types before, swift is an evolving language. Things are going to change, and things will break.
Your link is 403 for me but my guess is the example is using an old version of swift. There were some significant changes between 1.0 and the latest version which would stop code from compiling. &amp;nbsp; The unwrapping an optional is something you need to be aware of anyway. basically by adding the ! after the URL you've told the compiler that the url will always have some value, but at runtime it didn't (typically this will happen if you called `NSURL(string: &lt;some invalid url string&gt;")` because this is a failable initialiser, i.e. it returns an optional value) &amp;nbsp; this example came up in google when i searched for swift 2.0 web view: https://github.com/vandadnp/iOS-8-Swift-Programming-Cookbook/blob/master/chapter-basics/Loading%20Web%20Pages%20with%20UIWebView/Loading%20Web%20Pages%20with%20UIWebView/ViewController.swift
Hey, many thanks for this. I've tried posting similar questions that get removed after only a few minutes. 'Preciate ya!
There were some changes to the language. However, that's not really a problem. Just go to Edit -&gt; Convert -&gt; To Latest Swift Syntax... and it should update the code to a compilable state.
I never drink just one cup... amateur...
I would be grateful, please put it github and share me.
No. Learn swift.
Sure it seems backwards, but to me this actually benefits readability. Just the fact that it's a guard statement immediately tells you the purpose of the conditional.
I think one big problem, is the swift standard library is very small so you get very little out of the box, especially for working with strings, regular expressions etc, which is important for scripts. Of course you could import Foundation, but so much of that is not made for quick and dirty scripting but for more long lasting code as method names are quite long but very readable. Also while Swift string manipulation is very correct and well designed to avoid making mistakes it is also very cumbersome to use for that very reason. So much scripting is about doing quick and dirty string manipulation. There is no such things as quick and dirty string manipulation in Swift. I think a library could possibly be written in Swift though which made it suitable. But personally I prefer Julia for scripting. A lot more stuff out of the box and you can do a lot of typical scripting stuff very fast.
NSDataReadingOptions.DataReadingMappedIfSafe should solve the problem, if I understand your error correctly. Remember that you're really interacting with Objective-C when you work with NSData and the like, so sometimes Swift seems to need a little help deciphering things. 
Just to add to this, Apple did announce that Swift will become Open Source eventually. Who knows what we'll see when this happens! 
This seems to be closer, but is throwing an error on this line: webView.delegate = self Cannot assign value of type 'ViewController' to type 'UIWebViewDelegate'
Thanks for the feedback. I haven't realised there was fatalError() before, thanks for pointing it out. I removed some of the stuff. Could you link me the string subscript blog post link?
That would be me :) After that I figured that it was faster to just use prnt instead while debugging at least. You should be delighted that I removed that piece of code :) Any other solid feedback are welcome
Why post this after your stack overflow was already answered? But I might suggest you use `arc4random_uniform(max - min) + min` instead. 
Yes, you can use Ruby on Rails to create an API. I would recommend something like Heroku (https://www.heroku.com/) as a hosting service. Super easy to use if you know how to use Git. You can set up endpoints on your Ruby on Rails server, as well as a web front end if you would like, or if you're more familiar with JS, you can just send queries to the endpoints. In iOS you can use NSURLRequests to hit those endpoints and get nice pretty JSON or XML formatted responses. Edit: Some videos to check out on this subject. https://www.youtube.com/watch?v=36M2BSA2LYk https://www.youtube.com/watch?v=nbVQpbVNnzw
Check out Facebook's parse service if you don't want to program it yourself. Otherwise, yes, you have to use something like rails or node.js to build a json api.
`UIImage`, like almost all objects in in Swift, are managed by [Automatic Reference Counting](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html). This means two things: * You cannot deallocate them manually. * Given the proper coding practices, the compiler will insert reference counting routines to ensure they are deallocated at the appropriate time. The reason yours are not being deallocated is likely due to a "reference cycle," in which two objects that maintain strong references to each other prevent each others' reference counts from being decremented, even after you've stopped using them. Example: class MyA { var image: UIImage var B: MyB } class MyB: { var A: MyA } This issue can be resolved by changing `B` or `A` to be a *weak* reference: class MyB { weak var A: MyA } If any of your classes have closure properties, you must also ensure that these closures do not capture strong references to the class that stores them. For more info, check out the documentation linked to above.
Yes, what else would it do? Figuring it out automatically isn't really a generally solvable problem. 
Personally, I think Swift has a big future in this area. The typing system makes your code safer, while not getting in your way... blablabla. There's a lot of reasons why Swift is nice, though I doubt it will become extremely mainstream. I'm expecting the same kind of popularity in web development as Scala has - probably a little more. Server wise, there are a lot of libraries that can do basic routing. My favorite (I'm a contributor, so I'm biased) is [Taylor](https://github.com/izqui/Taylor), which has support for parameters, middleware, wildcard routes, and quite a bit more. Unfortunately it's not documented as of now but we're working on it :). If you have any questions, feel free. Database wise, I'm actually working on a driver for MongoDB (aptly named) [SwiftMongoDB](https://github.com/danappelxx/SwiftMongoDB). It's built on top of the MongoDB c driver, which is production ready, but SwiftMongoDB itself most definitely isn't. It's very simple and fairly well documented, though, so I definitely recommend checking it out. I'm actually working on an example app right now for it - it'll be open sourced soon! I would really appreciate contributions to the library itself, I'm juggling a lot of things right now, so any help is great. Web-framework wise, I'm working on one right now called Mast, but it's so early in development that I'm not even going to give a link. The idea behind it is that every component is interchangeable, and Mast is just the linking. I.e. Pick your own orm, networking, etc libraries, and have the rest of your code be the same. Regarding foundation... It's a pain to completely get rid of it. For example, you have to implement your own NSData, and then make it work with all the Swift standard types. That said, I have hope that apple will make the transition easier, for some reason.
OK, you probably have a point, I'm just excited :p But as I said, ask any questions. But there is probably nothing in the code that is any complicated.
Congrats, but /u/cryo is correct in that this is not Swift related, so I've had to remove this. If you'd like to post your source code that'd be fine, for example.
Its is not like this choice is permanent. Making the wrong choice is allowed. Go with Swift if you want to. If it doesn't work out, you could always look at other languages. I jumped a lot around when I started programming. I was doing Basic and Assembly in the beginning but never really learned them properly before I got into C programming. The Swift playground is a great place to experiment and learn. If you find Swift too complicated there are other ways to learn the logic of programming: Game Maker, Scratch, CargoBot. Which are game oriented and simple. Then there are special programming environments geared specifically towards learning like Racket. Smalltalk was a programming language originally designed for children to learn programming, so it is quite simple. Smalltalk inspired Objective-C which further inspired Swift syntax wise. So smalltalk is also an alternative. Don't be afraid to experiment and try out things. What ever you do, you will likely be learning something useful that will benefit your Swift programming.
Do you have your Node.js server in production yet, or did you do performance tests? I was the same way when we started a backend for a client in ruby on rails a couple months ago - everything was fun and super easy - but now it's starting to sink in that everything is just REALLY slow. When we decided on rails all we could find online were posts that were like "yeah, rails performance isn't good, but you're never gonna notice in the real world and if you do, there is x, y, and z which makes it fast again", but even implementing all the stuff we found everything is still slow as hell. For a new project we've now switched to Elixir/Phoenix, which, even though the project isn't finished yet, is in some cases waaay faster than similar stuff in rails (the complexity of the projects is very similar). 
Got it in production, it receives data from another service via SOAP, compares it to the data in "his" own DB. I don't need to use all RESTful features, I just need GET and POST requests and for the case I use it, it is perfect! Super reliable AND fast. 
You might want to try Scala, as [it looks like Swift](http://leverich.github.io/swiftislikescala/) and several robust frameworks are available, like [Play!](https://playframework.com/) or [Scalatra](http://www.scalatra.org/). 
We've been developing an open-source back-end application server for Swift. https://github.com/PerfectlySoft/Perfect It has Postges, MySQL and SQLite connectors and I'm almost done with the MongoDB work. It's currently the backend for a few apps which are in beta. We are waiting on the Linux version to drop so we can do the final bits of work to get it running there and deploy to the real servers (i.e. not Mac minis).
You can also try looking at the free iBook offered by Apple on iBooks. I believe it's up to date.
&gt; Even though client is non optional you are trying to obtain it by accessing an optional server. The server may be there or it can be nil, so you can either get the client or nil if server is nil. Right, I see what you're saying. So therefore if an instance is Optional, ALL of it's properties will be returned Optional when accessed EVEN if they themselves are restricted to be non optional types internally? 
Thank you, that seems like a good idea. I'll test it out to see how much harder it makes the experience and see if its worth it.
Thanks for the tip! I will try it out tonight. I remember thinking of doing this way back when but I totally forgot
&gt; Even though client is non Thanks :).
Nice work. I'd be interested in the Linux version for sure.
If you don't care about performance and the arrays are small you could write: let array1 = [1,2,3,4,5] let array2 = [5,6,7,8] if Set(array1).intersect(Set(array2)).count &gt; 0 { print("There is at least one common element") } else { print("No common elements") } You first transform the arrays into sets and then use the intersect method to get common elements. If the resulting set has more than 0 elements that means that the arrays do have a common element. If the arrays are very big and you need faster performance you could use: extension CollectionType where Generator.Element: Equatable { func any(body: (Self.Generator.Element) -&gt; Bool) -&gt; Bool { for element in self { if body(element) == true { return true } } return false } } let array1 = [1,2,3,4,5] let array2 = [6,6,7,8] let set2 = Set(array2) print(array1.any{set2.contains($0)}) // prints true if array2 contains any element from array one This approach should have higher performance since in the worst case scenario you only iterate once through each array. Edit: Didn't know that array has a "contains" method (thanks u/foBrowsing) so the extension is unnecessary and you only need: let array1 = [1,2,3,4,5] let array2 = [6,6,7,8] let set2 = Set(array2) print(array1.contains{set2.contains($0)}) // prints true if array2 contains any element from array one For those wondering as me, "contains" is a default implementation on the SequenceType protocol which Arrays conforms to.
SwiftMongoDB looks great! I'll have to take a closer look at it when I get some time. It certainly seems pretty reliant on Foundation though, so I do hope Apple makes that transition easier for us. At the very least, some sort of native binary data type like NSData. 
Thanks! Believe it or not, 95% of the use of Foundation in SwiftMongoDB is to cast from C strings to Swift strings. MongoDB actually uses its own format called BSON, and the driver around which SwiftMongoDB is built does all of that work for me, so there's literally 0 NSData dependencies.
Great job! Maybe you could use [SwiftMongoDB](https://github.com/Danappelxx/SwiftMongoDB) as the MongoDB connector? There's already a lot of work put into it, which should make it easier for you :)
Oh, I just realized the NSData I saw was actually in the SwiftyJSON dependency. But I guess if you're not using that initializer you could probably just remove it entirely.
I haven't done this but, possibly have a look here. https://developer.apple.com/library/ios/releasenotes/General/ValidateAppStoreReceipt/Introduction.html it outlines how to validate receipts both locally and via server communication.
Looks awesome, thanks! I just finished building my own using a paging scrollView.
The easiest way to do this is using the `contains` method: let array1 = [1, 2, 3, 4, 5, 6] let array2 = [6, 7, 8, 9] array2.contains(array1.contains) // true What this does is checks if `array2` `contains` an element which `array1` `contains`. However, performance is an issue here. This is `O(n*m)` (worst-case), where `n` is the length of `array1`, and `m` is the length of `array2`. That means that for every element in `array2`, you're going to iterate through the entirety of `array1`. (unless you find a match, in which case it stops early) This isn't an issue if your arrays are sub-100 elements, but for anything larger, you might want to consider a `Set`, which has `O(1)` lookups. For instance, this method: let array1 = [1, 2, 3, 4, 5, 6] let array2 = [6, 7, 8, 9] array2.contains(Set(array1).contains) // true Is `O(n+m)`, because you only iterate through `array1` once (to create the `Set`), and once through `array2`. The `contains` method on `Set`s is `O(1)`. In fact, if you're doing this kind of thing with your data a lot, it might be best to start off with a `Set`. It's worth bearing in mind, though, that a `Set` will ignore duplicates, and its elements have to be `Hashable`. 
The main pain point that I see is not having stack traces all the time like python/java. Just having an illegal instruction trap, and maybe a single line to stderr, is not helpful. And the whole process dies AFAIK. I'm sure you could roll your own arrays/numbers/everything and have them generate nicer exceptions that don't kill the process and include a stack trace. But that takes a fair bit of investment. Or you'd have to have a multi process server and handle things like database connection pooling differently, in their own daemon. And on fatal error, dump core so you can debug it. I think if you have a persistent daemon process that can amortize the overhead of JVM, java would still be more productive. However if you have lots of processes being started rapidly or running at once, swift seems like a very good contender to replace c++.
Actually, `(Set(array1).contains)` isn't a closure: it's just an expression which returns a function of type `Int -&gt; Bool`. That means that `Set(array1)` is only called once. You can test it like this: var c = 0 func makeSet(a: [Int]) -&gt; Set&lt;Int&gt; { ++c return Set(a) } let array1 = [1, 2, 3, 4, 5, 6] let array2 = [6, 7, 8, 9] array2.contains(makeSet(array1).contains) print(c) // 1
This looks awesome, I'm excited about it! Two questions: 1) How does Perfect handle concurrent connections? I'm on mobile so I haven't had a chance to dig through the source too deeply. Does it dispatch each incoming connection to another thread, manage its own concurrency on a single thread, or block until the previous connection is finished? 2) It looks like everything builds on top of Foundation.socket for networking. In order to run on Linux, how will we remove that dependency? What other options exist for connecting to TCP sockets? (this might be an ignorant question)
In many cases, Foundation just wraps CoreFoundation functionality.
Which is hugely valuable it's what most iOS and Mac developers know. 
Well, mine is all done excepting a few more test cases. It will be interesting to compare the results though. I don't deviate too far from the API provided by the Mongoc lib.
I don't deviate much either, but I am ensuring that all the c types are wrapped in Swift-like, object orientated code :) I guess we'll see, then!
Most Mac developers will have at least a modicum of familiarity with CF. Pretty much the entirety of Foundation is "toll-free bridged" to CoreFoundation, and in many instances Foundation builds directly on top of CF according to what I've heard over the years. You can pretty much use either in place of the other in most situations. For example you can create a CFString using CoreFoundation calls: CFStringRef aString = CFSTR("Hello world!") And then use Cocoa methods on it. let length:Int = aString.length Or you can create your string in Swift ... let aString:NSString = "Hello world!" And then use CF calls on it. let length:Int = CFStringGetLength(aString) This is just an example of interoperability. I'm not suggesting you use NSString methods through Swift on a CFString. Best to use the most native API for the job. If working with Swift Standard Library strings see count(), the length call on an NSString, or CFStringGetLength for CFStrings. The greater point is that much of the implementation of Foundation is already open-source as CoreFoundation. The argument could be made that in some cases Foundation is just a glorified wrapper. Don't get me wrong, I love Foundation, and would love to see it open sourced, but it isn't necessary for server side apps. see also: http://ridiculousfish.com/blog/posts/bridge.html
If I understand you correctly, you should just make a Bool, and save it in NSUserDefaults. To be save, you defaults it to false: let defaults = NSUserDefaults.standardUserDefaults() defaults.registerDefaults(["purchased": false]) defaults.synchronize() Then you set it to true if the user buys the IAP (or restore previous purchased IAP), and checks if it is true for each of the features you want to give them. You can also send a NSNotification if you want the game to be updated as soon as the user buys the IAP.
OK, good point. At least for when you release the app to the public.
Touché, sir. I cleaned up the examples, a bit.
What do you mean use the keychain? I've only ever used NSUserDefaults.
Removed. Please direct this to /r/SwiftJobs.
That looks really cool. Great work :) 
Swift is fine to start with, but tutorials are a bit scare in comparison to some other languages. Using the playground feature in Xcode will be a good way to grasp the syntax and basic operations of the language. If you're still not certain, you could start with Lynda.com Foundations of Programming: Fundamentals. It's a short course done in JavaScript, but a lot of it carries over to Swift. Here's a link: http://m.lynda.com/JavaScript-tutorials/Foundations-of-Programming-Fundamentals/83603-2.html?rp=http%3A%2F%2Fwww.lynda.com%2FJavaScript-tutorials%2FFoundations-of-Programming-Fundamentals%2F83603-2.html
But I'm not sending updates. I'm releasing an app update. Those who have paid, will automatically have access to the locked content. Those who have not paid, it will be locked for them.
[This. Don't do this.](https://github.com/mozilla/firefox-ios/blob/master/Utils/Try.m) There is a reason this doesn't already exist: it is incredibly inefficient in Swift and will dramatically affect your runtime and memory usage. 
You may be interested in my SwiftInterval proof of concept library: A multi-interval type with arithmetic calculations and inclusive/exclusive borders: https://github.com/Kametrixom/SwiftInterval
I didn't write it. I just posted this. If I'm looking at it correctly that adds some type of Java-esque try { } catch (exception) { } right?
UIToolbar! This is exactly what I need. Had no idea it existed. Thanks for the reply!
If you're familiar with accessing Objective-C APIs from Swift, I highly recommend this series of tutorials: http://tutsplus.com/tutorials/search?utf8=%E2%9C%93&amp;search%5Btopic%5D=&amp;search%5Bterms%5D=CocoaAsyncSocket&amp;button= Even if you're not making a game, this will help.
There is no exception handling in swift. The try/catch in Swift 2 is a very different concept than what Mozilla is attempting here.
Messages that are thrown in Swift by "throws"-declared methods are *not* exceptions. They do not crash your app. You cannot attempt to catch them from 10 classes up the chain (or do the classic "hey lets just wrap didFinishLaunchingWithOptions in a try/catch and we'll never have to worry about exceptions again!"). A throw in swift is simply a message, and it *must* be handled by whomever is calling the method. **Basically, it's a piece of control flow, not a fundemental manipulation of the runtime.** Throw in Swift is intended primarily as a replacement for passing error objects by reference into methods that may fail and then checking their value afterwards. Instead of saying (roughly) `[connection startRequest:request error:&amp;error]` and then check `if (error == noInternetError) doSomething(); else if (error == timeoutError) doSomethingElse();` you call startRequest inside a try `try { startRequest(request) }` with startRequest declaring itself throws, and then you `catch noInternetError { doSomething() } catch timeoutError { doSomethingElse() }` This is simply a way cleaner implementation of an existing design pattern. 
Making your own barcode scanner literally takes 15 minutes of coding :/ and itll be probably the fastest your gonna get without going to C Just make AVCaptureSession and add a meta data output of barcode.
Have you tried inserting `NSLog()` statements at key points to see which of them are hit at what times?
Oh, as one small addendum, I'd also add that this new pattern adds compile-time enforcement of behavior, which the old pattern did not. This code safety and compile-time checks are something Swift as a language focuses heavily on. 
Not sure what I was thinking with that. Moving it outside of willLayout fixes it. Thanks!
 &gt;Making your own barcode scanner literally takes 15 minutes of coding :/ That's a bad thing to say to someone who is trying to learn something. This could discourage them. 
Thank you!
I checked GitHub before and there were I guess 3-4 NN libraries there. However most of them had one thing in common. No documentation and no usage scenario except basic XOR training. I believe that if you can document this library and show some real world example such as usual handwriting recognitions for MNIST database or image recognition from a real image instead of raw data, it will make more sense. Because whenever I start to read those articles I stop when I see that famous circles and arrows. I will appreciate if you can document it better and make it visual for people like me. I also have one feature request. Please add a way to serialize training data. So that we can train once and then use it later when we need it. 
Thanks for the feedback, I'm definitely working to provide great documentation and real-world examples! I want it to be understandable and usable for absolute beginners, yet powerful enough for more advanced users. Can you explain what you mean by 'serialize training data?' After a training session, the network's weights are returned so they can be used later. Is that what you meant?
[Where do they call it exception handling, exactly?](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html) This is the only place the word "exception" is used on the entire page: &gt;Error handling in Swift resembles exception handling in other languages, with the use of the try, catch and throw keywords. Unlike exception handling in many languages—including Objective-C—error handling in Swift does not involve unwinding the call stack, a process that can be computationally expensive. As such, the performance characteristics of a throw statement are comparable to those of a return statement. It is a *fundamentally different feature*, despite the similar syntax, and, exactly as I said above, try/catch in swift is **nothing but control flow.** All of this is escaping the salient point anyway: that Mozilla should not be forcing an intentionally-removed feature from obj c into Swift. I think we can both agree that what they are doing in the linked piece of code is exceptionally bad.
Not to mention they put it as a class, whereas it would have worked just as fine in a C-style function.
Cool. I have independently decided to learn machine learning and Swift seperately, this could be a nice connection between the two. I won't have time right now, but will keep this bookmarked for when I hopefully do :)
What I mean by serializing is saving training data to some dictionary,file etc. For example with tesseract you can train OCR for any font once and you can load it later on. Because most examples I see do the training and save it in memory and do the recognition for demonstration purposes. However if your training data is large it can take quite time and memory.
Currently the neural network returns the weights as an array of Floats, so the developer can store them however they want (file, Core Data, etc). However, I do plan to implement writeToFile() and readFromFile() methods for those that find it convenient. That will probably be the next feature I implement.
Well, if you truly only want color to be set on initialization (as your questions states), you should just define it as immutable (with let). It is not "politically incorrect" to do it that way, and the compiler is not going to attempt to change it back to a var. I'm not sure what that even means. 
Using let is definitely the correct option for this, according to your problem description. It's less verbose and more correctly restrictive (private allows you to change it anywhere in the struct).
I hope this will be a great entry point for someone first learning Swift and machine learning together. I'm particularly interested in feedback from people who don't have prior experience in AI - I'd like to know how Swift AI can help them grasp the concepts more easily and lower the learning curve. I've got some good documentation and examples in the works that will hopefully help, too.
There is a debugMode flag on the shared crashlytics instance which you could turn off
Are there any advantages to this over using the [Bolts framework](https://github.com/BoltsFramework/Bolts-iOS)'s Task classes?
I have not been using Bolts framework, so I don't know how those classes look like... I guess that the advantage is not having to include a large framework to use async programming utilities. My implementation is, I think, pretty lightweight in comparison with any large framework. 
We use node in production. It's at the core of everything we do. My previous company was also entirely built on node and riak. (Wouldn't recommend riak). I have a lot of experience doing node performance analysis as well as debugging. That said I love swift so I can't wait for it to be open. I could see myself using it for personal projects for sure. 
I like that's it's a lot more streamlined than PromiseKit -- there's a lot of stuff in PromiseKit that I never end up using. It doesn't look like it's quite set up to handle passing failures in a chain of promises, which is one of my favorite features of promises for reducing redundant error handlers on multiple async tasks. Here's an example test you can drop in your unit tests for how I'd expect it to work, but currently just times out. func testChainFailure() { let successTask: () -&gt; Promise = { return Promise.fulfill("shortSuccess") } let failingTask: () -&gt; Promise = { return Promise.reject("shortFail") } expect { testExpectation in successTask() .then({ result in if let result = result as? String { XCTAssertEqual(result, "shortSuccess") } else { XCTFail("Incorrect result type") } return failingTask() }) // Remove this part and it passes. // I'd expect this and any other onSuccess handlers // to be skipped until reaching an onFailure handler. .then({ result in XCTFail("Expected skip to failure handler") return successTask() }) .then({ result in XCTFail("Expected call to failure handler") testExpectation.fulfill() return result // Final error handler should be called }, onFailure: { error in if let error = error as? String { XCTAssertEqual(error, "shortFail") } else { XCTFail("Incorrect result type") } testExpectation.fulfill() return error }) } }
man, I'm really having a hard time understanding part of the topics at the moment, I'm new in swift and we were already given with this kind of problem and we have to pass this tomorrow. I'm so screwed. I'm hoping if someone could help me code this activity. these are my codes so far, and honestly i don't know what I am doing. but i hope you guys can help me. any help would be greatly appreciated. Thanks! code so far : http://swiftstub.com/999647870
Hi Alex, looks like you've already got a head start, but you can find a completed swift-based bubble sort algorithm at the following location. Feel free to compare this to what you've already developed: https://github.com/waynewbishop/SwiftStructures/blob/master/Source/Factories/Sorting.swift At first glance, I saw the closure parameter for your "mySort" function, but did not see its implementation. In other words, you'll also need to write a trailing closure implementation when calling the "mySort" function. Feel free to also check out http://shop.waynewbishop.com, as this could be helpful for future assignments. Hope that helps! 
On Mobile and have no code but look up "transformable attributes" - that will get you what you need!
If you have any ideas to make development easier, I'll be happy to code them in my spare time :)
Blobs are bad.. OP should try to avoid these
Oh why is it bad? It seems like an integer array is relatively light, and I don't think OP is using it as relational data! Not arguing just want to learn. :)
Il let you know =) I just started learning Swift Development about 6-7 months ago. This just made my life a whole lot easier.
FaceTime wasn't a stunt... they were sued and lost and thus couldn't open source it. This thread on Apple's Swift form is the latest info ( I know of ): https://forums.developer.apple.com/thread/26404 "ChrisLattner Nov 18, 2015 1:23 PM (in response to jawbroken) Yep, it is still on track to release by the end of 2015. -Chris"
It's great to see so many projects in anticipation of open-source Swift! I'm really looking forward to using some Swift on linux. Just took a quick look through the code there: why are you using `AnyObject` for JSON? Wouldn't an enum be safer? (especially since you're parsing it yourself, so there's no need for casting)
This looks like a really cool project. This reminds me a lot of Scala, except Swift doesn't have the huge learning curve of Scala. I can see Swift being used since it offers strong Typing, actual object/struct creation, and has first order functions so its well suited for the reactive web. If Swift can gain the ability to create actors, streams, and have a world class threading system Swift will start to carve a niche for itself. 
http://richardallen.me/2014/11/28/popovers.html that last part is important and necessary since you are trying to present a popover on a non-iPad device. 
Im exited. Only a month to go!
Nice work! I have one suggestion though - be more consistent wrt to code conventions. For example, top level constants (from one module) are defined in - [lowercase snake case](https://github.com/PerfectlySoft/Perfect/blob/master/PerfectLib/JSON.swift#L29) - [uppercase snake case](https://github.com/PerfectlySoft/Perfect/blob/master/PerfectLib/AJAXObjectDriver.swift#L28) - [camelCase](https://github.com/PerfectlySoft/Perfect/blob/master/PerfectLib/Net.swift#L28) These are just from a cursory glance. Can't wait to get home (to play with it, not to find stuff to complain about lol)! Oh yeah. I noticed some Foundation imports. Will this require GNUstep or Cocotron on Linux, or will you be providing your own compatibility library to take care of the Foundation dependencies?
I'm excited about this! Following you on Twitter. I'm looking forward to working with Perfect. 
One thing that PromiseKit does that's missing in your solution is type safety - you always pass `Any` to success handlers, even though it's possible to pass the correct type using generics (e.g., if you pass a closure that returns an `Int` to `async`, the closure passed to `onSuccess` should need to have `Int` as it's parameter type). This would remove the requirement to cast all the parameters all the time. If you're doing this as an exercise, adding that functionality would definitely give you a lot of experience with generics :-)
Wow. Impressed just at the thought of this. Looking forward to hearing more about it [ followed on Twitter as well :) ]. Great work all around &amp; can't wait to try it! 
That strikes me as similar to a problem I was having with scene kit. I solved it by subclassing SCNView and putting this in the init: super.init(frame: frame, options: [ SCNPreferredRenderingAPIKey : SCNRenderingAPI.OpenGLES2.rawValue ]) ...forced the SCNView to use OpenGL instead of Metal and it worked. Not sure if you're using SpriteKit or SceneKit, but look into forcing OpenGL.
What's wrong with [LetsLearnSwift](http://slack.letslearnswift.io/) and [swift-lang](http://swift-lang.schwa.io)? The fact that they don't have a fancy website?
SpriteKit, but I'll try that 
If only it was a v-neck and black.
It's basically telling you to create a collection of the names and their associated values. Create a function that is a bubble sort to search for whatever the user wants. And honestly, if you're new to Swift, why is this assignment so ... not for beginners? Is your professor overestimating you guys?
Do you have plans to making the server and client more linked together? Right now they share code, which is great, but on the client you're still sending web requests to the backend instead of doing something like what parse does (it wraps all the web requests for you) or what meteor does (same thing but more advanced). If you think this is worth pursuing, I'd be happy to help out :)
This is fantastic. You built the one thing many of us wanted out of Swift since it was announced it was going to become open source. My on,y question is, does it have/is it going to have a dependency architecture a-la-RoR gems or even Cocoapods? Many of us will want to integrate existing Swift libraries into this or built new ones.
I think the white looks nice, but I'd buy 2 if they were black.
This is great ! Keep on working on it, will play with it soon. This is what swift community is waiting for, thank you very much :-)
[This](https://i.imgur.com/vhTUQ.gif)
???
 **UPDATE** : already solved it! http://iswift.org/playground?yGrDAn
I'm having trouble with the closures. but I was able to implement it now. But i'm still trying to digest it. I find closures a bit confusing lol
If it's simple data such as numbers, use NSUserDefaults. A tutorial is on YouTube for sure.
Depending on your level, functional swift is an interesting read. 
We do have an ORM layer which is in-progress. The goal is to have it generate model code/classes from your database tables along with server-side JSON handlers. So for example in your client you might make a User object and set its firstName. This would pipe through to the server using a JSON web request. While on the server you would make a User object and set its firstName and it would talk directly to the database. This way you would have all the same Swift model objects which are shared between client and server but they would have different "drivers" beneath them. I think that's what you are talking about. We have a prototype of this system in the repo, but it's a little ad-hoc at the moment and needs some more design work before being reimplemented.
Similarly, isn't the name of the template framework "Mustache" instead of "Moustache"? You may want to edit those class names that contain that name before people start deploying it.
Yes. I would recommended it for intermediate or higher level
Also a redditor released a swift cookbook. I bought it but haven't had the chance to read it. Looks very practical
Wow, I was waiting for this for months. Really excited to play with it.
Very interesting, but you may be opening yourselves up to headaches down the road by promising (or at least *implying*) perfection ;)
I think a swift physical book might not be a great idea. The language is still evolving so it would become obsolete. An ebook is good though as they update with language changes. The objc.io books look good. Couldn't really get into the functional one, but I'll back the advanced swift book next pay day. Programming in Objective C by Stephen Kochan helped me get started. Once you get the basics sorted one of the fastest ways to improve is start contributing to open source. Most project owners are friendly, and welcome ideas.
If you are new to iOS and mobile development in general, I would recommend The Big Nerd Ranch Guide. Its current version is for Objective-C but they at about to release the Swift version. For me, more importantly than the language itself, the book was precious for the concepts for the platform 
I originally learned off a Sam's Teach Yourself iOS in 24 hours book, but I found that the new Swift book + online tutorials are pretty good for getting up and going. What level do you consider yourself? have you done software development before? that will affect my suggestion. 
How about Ray Wenderlich's [iOS Apprentice](http://www.raywenderlich.com/category/ios)? I have found his tutorials to be updated and quite precise.
Currently going through this same one and it's been very helpful. 
I know you are asking this in the Swift sub but it really depends on your goals. If you want to learn iOS development as a hobby, Swift is fine. But if you want to do this professionally you should also be learning Objective-C, as there is a ton of legacy code out there in Objective-C that won't be changing anytime soon (if ever). ### Objective-C Books * Big Nerd Ranch's iOS Programming * Big Nerd Ranch's Objective-C book * Programming in Objective-C by Kochan * Pro Objective-C by Lee ### Swift Books * I'd pick up all 3 books by the [objc.io](https://www.objc.io) guys - they are great if you are serious about honing your craft. I'd tackle these after you have a handle for Swift syntax. * Big Nerd Ranch and Stephen Kochan are coming out with Swift books in the next quarter or two, I'd absolutely pick those up (note BNR has a book on Cocoa Programming that is done in Swift if you have any interest in OS X development) * Apple's Swift 2.1 book is fantastic, but it won't teach you iOS programming paradigms, merely syntax and Swift paradigms (which is super valuable in its own right). ### Other Worthwhile Books * Cocoa Design Patterns - Buck &amp; Yacktman * iOS Auto Layout Demystified * Effective Objective-C 2.0
Pixelmater is good. It has layers and is excellent for resizing things (to make all the various icons you'll need). Frankly, I use Keynote to do a lot of my graphics too. It's good for building up a graphic up from simple objects and text.
I have wondered this my self. I have enough to worry about learning as to make it pretty and I am no where near an artist. 
[removed]
Have a look at [Sketch.](https://www.sketchapp.com)
Thanks! I'll give it a go tomorrow and get back to you!
You should post this on https://www.reddit.com/r/swiftonlinux too.
Moustache is now Mustache - everywhere in the code and docs reference, website, etc. We considered trying to get the Mustache to spell it correctly (it's Movember!), but I guess we'll change cause Perfect is only hours old. Thanks for the suggestion!
Posted - thanks for the suggestion! (Though just noticed, it was already there - d'oh - the new post has more in depth requests).
As an American who dislikes most Britishisms, I have to give it to y'all on "haitch": it makes no sense to have no 'h' sound in the name of the letter h, and haitch solves that problem. Good work Brits. 
This series is pure awesome. 
Is this a competitor to for instance https://github.com/alamofire/alamofire ?
It's an alternative. You wouldn't use the both of them together, generally speaking. We hope that Haitch is as popular as Alamofire one day but we're not really competing. Haitch has specific design goals, as does Alamofire.
Wow thats rude man, this person has over 10 years of experience writing Swift iOS apps. learn some respect
Right? These questions are more what you'd expect on a midterm exam for iOS dev 101 ... "What is UIWindow?" ... Edit: I never said "if interviewing a senior developer", not sure why people are assuming this. They would be inappropriate for any level of developer.
I thought you should at least ask what 1) What is MVC? 2) How do you break an a giant storyboard into smaller storyboards? 3) What is version control? 4) How do you use unit tests? 5) How do you automate GUI testing? 
Scrap the tutorial and show an animation when the app has launched. Start with the side bar visible and animate it out once the app has launched. To make it more visible you can slow down the initial hide animation (to 1 second or so) until the user has used the side bar for the first time. Or you don't show the initial hide at all after the user has used the side bar. The side bar should obviously be reachable via a menu button (hamburger icon if you insist) as well.
I think you could also read the OP as "As a senior iOS dev, here is how I would answer some iOS interview questions you might see." I think he is viewing this as "how would a senior dev answer some of the more basic questions?" That being said, I agree, these are very basic questions...
I second this. Tried to pick it up for a project about a month ago and had to go through a bunch of hoops just to realize that they had changed things without updating the documentation. Good luck if you follow through with this
I find that asking these types of questions isn't that telling. These questions should be taken and put into sample projects for the interviewee to solve. Anyone can answer these correctly, but it doesn't make them a valuable developer to your team. The proof is in how that developer uses the knowledge to solve a specific problem. For example, none of your questions ask "What is a Singleton pattern?". This is the most misused pattern a developer can take. It's a magic bullet solution that will turn into spaghetti in larger projects. Keep in mind, Swift is just a language with syntax. Knowing the language doesn't mean you are a proficient developer.
Most of those would be terrible questions. Version control and GUI testing are two topics that can be learned in a few hours; neither of them are relevant to someone's programming ability, and it would be a waste to reject a good programmer because they don't know version control. #4 is strangely worded, to say the least, but could be an OK questions. For #2, many large projects don't touch storyboards or XIBs at all. #1 is fine, but when I interview, I prefer to frame a question that encourages the use of a specific design pattern without outright telling them to do it, rather than just asking them what the design pattern is. I want to see how a candidate thinks about a problem, not responds to rote memorization. My mom could answer "what is MVC" if I gave her a definition and an hour to memorize it, but she couldn't implement it. That's an important distinction.
Heh, t's the best to see questions like this... No offense to all you iOS people of course. :P &gt; Darwin notifications So, I assume you're referring to libnotify? I think that was actually a BSD invention, not Darwin... It is a very Apple-like API though, isn't it? Very polished for something so low-level. Unfortunately, you won't find anything like libnotify outside of the BSD and OS X. The Linux kernel offers something similar-sounding ("inotify," I think), but they're in no way interoperable. Fortunately, there are plenty of APIs that are guaranteed on every platform, Swift included: 1. Named sockets; i.e., `send()`, `recv()`, and their relatives. With sockets, you create a special type of file that other processes may message you with simply by writing to it (if they have permission). This has the benefit of being the most translatable across platforms (or even networking). [A nice intro to this here.](http://beej.us/guide/bgipc/output/html/multipage/unixsock.html) 2. POSIX IPC. You can manage sets of semaphores via `semctl()` and `semop()`, which is most efficient if you have high contention. There is also `msgsnd()`, which provides for more extensive messages similar to libnotify. There are very few things that *aren't* available in Swift; anything you can read the manual page for in Terminal will word just the same in Swift, barring `va_args`. The only real hurdle is needing to re-learning how to use pointers, since Swift treats them quite differently.
&gt; it would be a waste to reject a good programmer because they don't know version control I feel there's some kind of oxymoron in there. This day in age with GitHub and the likes, version control should be in the tool belt of any programmer. 
That's what I was getting at really. I'm a senior iOS engineer and regularly interview for junior, intermediate and senior levels. I would find using questions this foundational to be a little wasteful of the (quite limited) time you get to spend with a candidate. That said I guess it depends on your concerns as a company and your expectations of new developers.
It is a very good quality course. Probably shouldn't be your only source of knowledge, but if you have some experience in programming/object oriented programming it'll be a great starting point. 
I think it's really great and even a bit entertaining ;). But it's not a course for beginners in programming, strong OOP fundamentals are necessary.
Yeah, these questions let you filter out terrible candidates. However, the goal of an interview is to separate the candidates that are great from the ones that are merely okay, and this type of question won't do that. As someone who regularly interviews iOS candidates for my large corporation, I've eschewed such pinpoint-knowledge questions in favor of the interview being a case study where I present a real, albeit simple, problem that I had to solve once, then get the candidate to come up with an algorithm, talk about performance and other concerns, then write some APIs for the boring parts and actually implement the interesting part. It gives me a nice cross-section of how the candidate thinks, approaches problems, and turns abstractions into actual code.
Definitely Sketch... if you have no artistic ability, and depending on the goals with your app financially, maybe find a friend who does and would want to work with you on creating your app! Offer him beer, money, or whatever.
If you already have some understanding of coding, they're a great way to learn Swift and the iOS frameworks. Paul's been part of the NeXTSTEP/Cocoa/Objective-C/Swift/iOS world for a very long time, and he's taught hundreds of students so far. If you've never written any code before, this is *not* the place to start. 
Hire an artist.
An extension on Int for a trivial operation and treating Ints as Bools. You wouldn’t pass my interview even before I told you that you have a bug and that the joke is not funny.
And easier to read. This is the version you want to show in an interview. After you got this right you can discuss a clever version if you want to show off.
&gt; "What is a Singleton pattern?" Singleton is a fancy name for a global variable.
&gt;An extension on Int for a trivial operation Why do you think Swift allows extensions to all types? &gt;You wouldn’t pass my interview You're not qualified to employ me. Neither is anyone else who asks for "fizzbuzz". 
&gt;I prefer the old-fashioned if-elseif-elseif-else I hate that. I've seen far too many methods that go on for 80 to 100 lines because someone builds a rats nest of if-else instead of breaking it into separate methods. I very rarely use else at all.
But this is in the context of FizzBuzz. There are only 4 possible states, so there's no point in extending existing classes.
Wrong. A singleton is a class that only has one instance. It's an entirely appropriate pattern in some situations: the NSApplicaiton instance, for example.
I'm phone posting so I can't post links but I would suggest hackingwithswift or the iOS Apprentice course you get from signing up for raywenderlich.com newsletter. Team Treehouse for paid and it's only $25/month if you swing it. 
I never ask FizzBuzz in interviews, but it is what we are discussing here, on your suggestion.
&gt; there's no point in extending existing classes. I didn't extend any classes: Int is not a class. I extended Int because it's convenient to do so. 
Your hostility to one of Swift's more convenient features still disqualifies you. There's a reason why Chris decided to allow extensions to all types. Think about it for a bit and see if you can figure out why that is.
Food for thought, every bit of code that has ever been submitted to [the daily wtf](http://www.thedailywtf.com/) compiles with no errors and was coded by programmers who were able to answer interview questions like the ones in the video. Always puzzles me how the industry at large is incapable of identifying good developers. It has a lot less to do with knowledge of a framework or syntax and everything to do with knowing how to structure your code to ensure it is easily maintainable.
&gt; am I interviewing to be allowed to interview you? Nope, you're already disqualified. BTW, what kind of reactions are you used to getting with your "you wouldn't pass my interview" dick-waving?
I recommend Waqar Malik's book, ["Learn Swift on the Mac For OS X and iOS"](http://www.apress.com/9781484203774) He's a former Apple DTS engineer, which makes him highly aware of how beginners tend to go wrong.
&gt; BTW, what kind of reactions are you used to getting with your "you wouldn't pass my interview" dick-waving? It’s the first time I try it. It wasn’t meant to be offensive, but I see it can come across as harsh, sorry about that.
If you use the doc comment `///` it will appear when you Opt-click on your types and methods and in generated documentation. All the details here http://nshipster.com/swift-documentation/
That's what I keep hearing. I'm currently at a university for computer science so I know how to program. Should have mentioned that in the post haha. Thanks for the input, I'll definitely be going through the course now! 
Make sure your top-level project directory is initialized with a git repo ($ git init), then run the following in terminal: $ git submodule add https://github.com/Alamofire/Alamofire.git Then follow the instructions here, Embedded Framework: https://github.com/Alamofire/Alamofire#embedded-framework
can you explain why? what're the benefits of using a pageviewcontroller over a collectionviewcontroller? i'm just trying to understand 
Only the most recent version of the course is in Swift, but Paul Hegarty is the professor for the course. The only drawback is that it's in an older version of Swift, but one can always use the tools in XCode to update the code. I watched the whole course and found it excellent. The only thing I wish he covered is Core Data since that's a big part of many iOS apps.
Good luck! If you find that you want to learn Objective-C, the materials for the previous version of the course taught in that are available as well. You'll probably want to supplement the material with learning about Core Data. If your university has a Lynda.com subscription, I'd recommend going through their Core Data videos. They're in Objective-C, but you'll get the basics.
Reactive Extensions has an awesome port for Swift [RxSwift](https://github.com/ReactiveX/RxSwift). It's not promises per se, but it is an asynchronous, functional pattern for delayed tasks. With Rx, you can return any number of values, you can handle both hot and cold observables (essentially, deferring start of a task to when subscription happens) and there is an extremely rich set of operators. It's worth comparing and contrasting how another tool deals with similar problems.
The article makes a confident statement as if it were indisputable fact based on flimsy induction and no proof. That feels like an easy post for traffic. A better comparison would be to look at how Apple deprecated Carbon for Cocoa, not by comparing the deprecation of a programming language to something like mobile phones which are obsolete in a matter of a year.
Carbon wasn't deprecated for 12 years and it was just a transitionary API from Mac OS to OS X. Core Foundation is a C API, GCD is a C API, but Objective-C won't be supported? 
I completely agree, if I may, I'd like to add that: 1. He taught the latest Swift version available at the time; * He even updated all the projects to Swift 1.2 (available on the [course website](http://cs193p.stanford.edu)); * It's a fantastic starting point for anyone interested in iOS Development; Cheers! :)
I did exactly this recently (but in obj-c). Just include the UITableView inside your UICollectionViewCell. Have your UICollectionViewCell's subclass implement the UITableView delegate methods. You can set the UITableView height to be the same as the UICollectionViewCell. In the delegate method, just specify row height for each item and your tableview will manage the scrolling automatically. 
Let's suppose in the Company entity the toMany relationship to the Entity Employee is called 'employees'. If you look at the swift file for Company, you should see (it may not be _exactly_ this, but kinda close): @NSManaged var employees: NSSet? so just by accessing this employees property, you will get a *set* containing the employees. i emphasise it is a set because very often what you want is an array because you may want to count on the order of items and that isn't possible with a set. So, what you probably want to do is take that set of employees and sort it and store the result in an array. wrt good references to learn Core Data, that is hard. Apple have a couple of sample apps (I think they might be something like a Book/Author tracker and a recipe management?) but they are old and they are written in Objective-C and Apple's examples are never terribly good. The other reason good references are hard is that at one time (about 4-5 years ago) absolutely _everyone_ created a Core Data tutorial and most of them were wrong or bad and the creators should have felt bad. Also, Core Data best practices have changed, a lot, over the years and most tutorials/examples don't get updated. 
Unfortunately I can't as am pretty sure my company will kick my ass if I do. If you want, I can whip up a sample project with this setup in a while. 
You should do this. However, the *whole thing* **IS** beyond the scope of a novice Swift developer, but it is also beyond the scope of an experienced Swift developer! So, what you need to do is break it into smaller pieces until you find some pieces that are *within* the scope of a novice developer and work up from there. You ask, '...are there ways to go about it through using storyboards and such' Not sure what 'and such' refers to, but do remember that storyboards only do UI and only do part of the UI at that. You also need to think about information organisation, storage, retrieval and management. Frequently people use CoreData or sqlite in an app, but it seems like you probably want a centralised data store? In that case, you are very likely talking about using a web service and having your app communicate to that. You could roll your own or you could investigate Apple's cloud services or there are other companies offering similar services. Naturally, you have to write different code depending on which one you pick. So, that brings up another aspect of writing a 'big app' which is doing a certain amount of isolating of one part of the app (data storage/retrieval) from another part (user interface) from another part (app functionality/flow). The single biggest challenge in writing 'big apps' is organisation. That's the reason we do architectural design and the reason things like object-oriented programming and MVC exist. So, in addition to getting buttons to appear and writing switch statements and reading/writing data, you need simultaneously to learn to think at the 'next level up': the architecture level: what components will be used, how will they talk to each other, how will one component be protected from changes in another so that changes in one component don't have a deleterious ripple effect throughout the whole app. It all sounds big and maybe imposing if you look at it 'whole'. But if you start small and aim for a kind of 'snowball effect' then it works. I can't remember who said it, but I'm sure it was someone who knows about writing large systems said, 'All large working computer programs started as small working computer programs.' 
that would be more than perfect! thank you so, so much!
Wrong. Apple has the biggest Obj-C codebase in the world. They're not going to take a couple years off from new product development to convert it all.
Ok, so I've noticed that it only has one prototype cell for the image, which is great. but what about the other cells? I noticed you put the cell height to 250f, how does this ensure the other cells with much less content don't have a bunch of extra white space for no reason? 
you can change the height of each row dynamically. It needn't be 250.0f. Let's say you want the first row to be 400.0f. Then just do if(indexPath.row==0) return 400.0f; The tableview will take care of that. 
`notDivisibleBy` rather. That's another problem with the code: its use of boolValue is too magic and non-obvious. 
Not yet, I'm 4k in debt and I haven't received any paycheck since September, hence this delay
I second Team Treehouse, though some of the content is out dated (what with minor syntax differences in Swift 2). Great resource though!
Yes its completely overblown and over engineered solution to a simple problem. Give me sqlite any day!
DressTheMonkey, thanks for taking the time to respond. I really appreciate it. This really helps give me an idea of what I'm looking at, so I'll have to decide how I want to go about the whole thing. Fortunately, my specialty is breaking things down to the micro level and reassembling as a complete whole. That said, with your words of wisdom, I'll now weight whether or not I should just make a browser-based set of files (since I'm infinitely more knowledgable in web coding and standards). Thanks again for the response! -Dave
yeah kind of. I'd love to have the menu in the background and the text moving left and right while sliding. 
True. I'm sure the next version will use Swift 2.
So, why is swift suddenly making the jump to big data/server stuff? Whats so good about it for it to be catching on like this?
the idea isn't bad in itself, once Swift is open source (god knows when that will happen) they'll adapt the code for Linux and it will be way more useful, and Swift isn't that slow, it's actually pretty fast.
That's not ridiculous. 
Use the debugger; set some breakpoints; examine some variables; step to follow the action (or lack thereof). Almost certainly it is one of two things (I can make this generalisation because almost every bug is this), 1) you intended to tell it to do one thing, but the code you actually wrote tells it to do something else, and therefore it isn't doing what you want, or, 2) you *have* written exactly the right thing, but that code is never getting executed because some other piece of code isn't working correctly.
Well there are many great server languages and frameworks that are significantly faster than a scripting language like PHP, the JVM or Go come to mind and even other scripting languages. However I don't think people choose PHP because of its speed.
Looking at that I can see cocoa being deprecated in favor of a more swift native framework. 
A couple of reason, I suppose. The easy one is that they like Swift. They like it enough that they want to be able to develop the front end and the backend. In that case, after doing all the work, they can make it available to anyone allowing it to become a much bigger project. Currently, it won't be able to run on most servers, but when Apple announced Swift 2.0 they announced it would be opened sourced and they were going to make a Linux compiler. The biggest reason Apple would do that is because they intend to have it run on servers themselves. That makes Perfect a project that can benefit from Apple's own plans. Finally, there are a lot of people out there who want to "learn how to make apps". They may only know a little about programming, but enough succeed in a dev bootcamp or similar online class. They come out knowing quite a bit of Swift, but not much else. Currently, if you decide you want to build some back end, that means learning another language or teaming up with someone who already knows. But if you can write a small server app in Swift that connects to a SQLite database and just servers a handful of API endpoints, suddenly a new developer can be building a network connected app which much more ease. The biggest reason to do this has nothing to do with advantages on the server though. The most likely reason is the most obvious one: If they succeed at all, if there is anything that they're doing that makes sense in the Apple ecosystem, they'll be a GIANT acquisition target for Apple. This is how you buy a yacht.
Thanks for the quick reply. Struct ran through my head as well but ill admit I kind of just skimmed that part in the swift book. I can go over the documentation, but now lets say we have 5 uitextfields is there a way to write a struct that would take the string in title and make that the name of the object in the array?
It's too early to say how useful it may be on the server, as it's not actually available yet, but let me tell you why I want to use it. I mostly do server side stuff in Java for a living, and a traditional server setup tends to be a large web application providing a number of web services over SOAP, bundled complete with all its library jars, wrapped in a web framework (such as Spring), running in a servlet container or application server, running inside a JVM, running on an OS running inside a virtual machine, running on some hardware at a cloud provider. All these levels of abstractions are useful for managing complexity of a problem, but they also create complexity, and they don't always help performance for all kinds of work loads. An alternative for all this is running a REST microservice written in a natively compiled language, without middleware or a jvm, running inside a number of docker instance running on an OS in a VM at the aforementioned cloud provider. Google's golang is gaining traction for this purpose, but I find it a bit bare bones. Very bare bones, actually, it lacks syntactic features you expect in a modern high level language, and seems more designed to be a replacement for C than for Java. I would really like to use Swift for this purpose instead. It remains to be seen how well ARC will work for a server type work load. Both the theory and measurements tend to favor GC on the server. 
The problem with ARC is not small memory leaks. You have to prevent circular references by hand, but you can create memory leaks in a garbage collected language if you're careless too. Reference counting as a concept doesn't scale as well as GC. You might be interested to read [this](https://www.quora.com/Why-doesnt-Apple-Swift-adopt-the-memory-management-method-of-garbage-collection-like-in-Java/answer/Jon-Harrop-2)
Looks nice, does it stop you from recreating the NSFormatter instances each time you format a value?
It does. Keeps one instance alive. Only recreates when you change a type (e.g. decimal to currency). 
It also soon could be used to write OS, to power nuclear reactors and jet planes. Journalism, ugh...
I don't know if I understand your problem correctly but as far as I understand you would like to create a screen with multiple textfields like an Register screen or something like that? Than Store the entries and do something with them when a button is clicked or should the button store them? I would suggest to use a Dictionary with predefined keys like FirstName, LastName, Birthday and so on. If you want only to store the strings of the TextFields, add only the StringValue to an Array. Storing an Whole UI Item is not such a good idea cause it needs lots of ram. Use a TableView to display many TextFields and represent them as a DataSource array.
Everything you need to know is [right here](http://lmgtfy.com/?q=iOS+push+notifications&amp;l=1).
Publishing it to the store?
Awesome man, getting that far is one hell of an achievement IMO. 
I'm enjoying the Complete iOS 9 Developer Course on Udemy. It's currently on sale for cheap (Like I paid $12 a couple days ago, it goes up every day until the sale ends). So far it's really been helping me along, and it's a ton of friendly video. Watch on one computer, work simultaneously on the workstation. Edit: I'm fresh to programming, I just know some basic web stuff and I've been learning Python. So far Swift has been EXTREMELY approachable to me after learning the basics in Python.
Cool, thanks for sharing. You're right in it looking basic, but I think it's pretty neat and polished for a first release. How long did it take to build? What sort of features are planning for version 2.0? I also see there's an android version, did you build that as well? 
I started building it in June, but really didn't spend that much time on it from June-August. At the beginning of September, I started working more than full time on it, and I released it at the end of October. You'll have to wait until 2.0.0 releases to see what features I'm adding in :P I don't wanna make any promises I can't keep. But it looks good, trust me. The Android App was made by someone else.
Thanks! I'm on it, specially learning Swift!
Sorry man, it's a private repo and I won't be making it public any time soon. Feel free to ask me any questions you might have. I'm still a beginner though. If you ask questions on here, there's a good chance that /u/brendan09 will answer them (if he's available, of course), and he's always really clear in his answer (he's a pro dev apparently).
Thanks, will do!
Just realized this was posted in /r/swift. I usually post my questions in /r/iOSProgramming and that's where /u/brendan09 answers them. I don't know if he's as active in /r/swift . Either way, there are a ton of helpful people on both subs.
That's the intention. There shouldn't be anything that gets in the way or anything you don't need.
how about this? for x in 1...100 { switch (x % 3, x % 5) { case (0, 0): print("FizzBuzz") case (0, _): print("Fizz") case (_, 0): print("Buzz") default: print(x) } }
I still believe it would be too simple for the App Store, but it's a good learning project none-the-less.
Ive had very very simple apps accepted. Weight conversion, very basic calculators (x/y = z) type things).
Just as a thought, going through the app submission process is quite painful and is worth learning. Provisioning profiles, test flight, the 99 icons you seem to need, the multiple screen shots etc. The code is fun, the admin is not.
Adding to this, any concept you learn in Swift is probably present in some form or other in another language. Once you know it in one language its a hell of a lot easier to learn a new syntax for the same concept than it was to learn the concept initially.
I would only submit it if it looks a bit more polished. I mean, congratulations on making and I know how it feels to i it but I think your next step is to at least make it seem less plain or "cheap" like changing the color of the navigation controller, improving the buttons, a black background, removing the "optional" that is being displayed, etc. and then maybe add iads. Then try to submit it to the App Store if you can so you could learn the entire process needed to submit an app. I'm not trying to sound harsh. Congratulations on it! I remember when I first finished my first app. I got up, felt very accomplished, went to celebrate, and then went to learn how to put it in the App Store. I submitted my first app made in Objective-C, [Smartwrite](https://itunes.apple.com/us/app/smartwrite-english-lessons/id935877679?mt=8) about a year ago and although it sucks major ass, I decided to create it to learn the entire process needed to put an app into the app store. I don't even release updates for it. All the app does is fix the most common English mistakes by replacing common errors. Then I made my first app in Swift called [Primality](https://itunes.apple.com/us/app/primality-prime-checker/id943697952?mt=8). All it does is it tells you if a number is prime and tells you the divisors of the number. Both equally as shitty apps anyhow, but Smartwrite alone has netted me over $400 already. I went several months without doing anything productive and decided to get serious with Swift. So I started learning SpriteKit to make 2D games and my first game will be out soon. More about my game can be found here on my [website](http://www.jozemite.org).
No worries. :P I'll keep it on my phone and see what the updates are, when they are finally released. It's interesting to see what other people at a similiar level are building. I really like how the menu slides only half the view across. Cool, I was just curious if you'd built the android app, at how transferrable the skills were if switching to Android dev. Are the 2 apps alike, and did you do any collaboration with the other dev? 
Thanks for the detailed reply. Hadn't heard of the UIAppearance API, interesting but a bit more global than I'm looking for. I'm happy to hear a similar solution worked in your favour this gives me a bit more confidence in moving further down this path. I was thinking of creating a CSS file like structure and then parsing that and converting it to the addStyle calls in the example code. So it would be possible to write: .button-default:active { color:red; } Making use of the UIAppearance API this might be possible too: UIButton { color:blue; }
turns out i just had to remove precision 
I thought this was going to be the golden ticket, and although it did allow the code to build, it still doesn't work. Below is the attempt where I put the readHandler into an array, but I tried it without doing this and the result is similar. lldb) p self.readHandlers[0] (MTInputReadHandler) $R1 = 0x00006080000030f0 { NSObject = { isa = 0x00006080000030f0 } readHandler = 0x0000000100001620 } Here's the actual call to setup the callback read proc. Arg 4 is the refcon argument that needs fixing (&amp;readHandlers) let err = MIDIInputPortCreate(client.ref, name, readHandlers[0].readHandler, &amp;readHandlers, &amp;portRef) This returns noErr. At the MIDIPortConnectSource call the mtInputPort is still correct: (lldb) p self (MIDITest3.MTInputPort) $R4 = 0x000060800004a200 { ObjectiveC.NSObject = { isa = MIDITest3.MTInputPort } portRef = 27963464 sourcePortRef = 0 readHandlers = 1 value { [0] = 0x00006080000030f0 { NSObject = { isa = 0x00006080000030f0 } readHandler = 0x0000000100001620 } } MIDIPortConnectSource returns noErr, so at this point it looks like everything is ok. Hit a key on the MIDI keyboard to invoke the readproc handler. breakpoint set in the read proc: void midiRead(const MIDIPacketList *pktlist, void * __nullable readProcRefCon, void * __nullable srcConnRefCon) { MTInputReadHandler *me = (__bridge MTInputReadHandler*)readProcRefCon; readProcRefCon _should_ be 0x00006080000030f0 But instead it's (lldb) p readProcRefCon (void *) $5 = 0x00006000000550e0 So still stuck. I'll go back to the documentation to see what I'm missing. (edited to get the code and the commentary separated, and to make things more clear.)
try interviewing instead ;)
In a different run (so the addresses aren't the same) when I hit the breakpoint in the read proc I tried this in the debugger: (lldb) p *((MTInputReadHandler**)readProcRefCon) (MTInputReadHandler *) $0 = 0x0000608000002500 And 0x0000608000002500 is correct! So what's getting passed into the readproc is actually a MTInputReadHandler** Now the compiler is complaining when I try to cast readProcRefCon to a ptr ptr... Oh well, I'll keep trying. 
After some web searches and moving 'const' around I came up with something that works: void midiRead(const MIDIPacketList *pktlist, void * __nullable readProcRefCon, void * __nullable srcConnRefCon) { MTInputReadHandler * const *mh = (MTInputReadHandler * const *)readProcRefCon; MTInputReadHandler *me = *mh; [me handlePktList:pktlist]; } I don't know what '__bridge' means (xcode offered to insert it so I said ok) but I had to take it out to get the code to compile. When I get a cleaned up form of this I will post it somewhere, because there aren't very many helpful examples of this on the web yet. 
If someone ports it to the relevant platforms and writes libraries for the relevant tasks (bridging Android's UI APIs for example), sure.
Probably not. For an Android app someone would have to write a compiler into Java byte code. That's a whole lot of work, so it's possible but I wouldn't anticipate it. You'll probably see web frameworks, I believe there are some already. But I don't see them getting large traction. Swift doesn't have the features that would be useful for a web application. For example: Node has the event driven model for somewhat easy concurrency and makes it easy having to know one language for both client and server side development. Golang and Elixir have lightweight threads/processes that are highly concurrent and parallel that allow them to handle large amounts of simultaneous connections. Those lightweight threads/processes are much smaller than an operating system thread so you can have hundreds of thousands of concurrent operations. You could probably write something like libuv for Swift that allows Swift to work at a higher level of concurrency than opening threads or using GCD, but node still would have its language appeal. Swift is perfect for what it is, but it's not a language that fits all use cases.
/r/hackintosh If OS X installed and XCode runs, I don't think you'll have an issue submitting.
Technically if apple finds out you're submitting on a hackintosh they'll term the account as its against their ToS. But for educational purposes it's a good way to learn. When you're ready to push your app to the App Store buy a Mac even if it's a base model mini 
Just submitting. It's still a legal Grey area as the EULA for OS X says it must run on Apple hardware 
&gt;Just submitting. It's still a legal Grey area as the EULA for OS X says it must run on Apple hardware Ah, weren't some hackintoshers taken to court? I heard the hackintoshers won. Anyways. Might as well get an old Mac Pro or some cheap piece of equipment then. You don't need to worry about hardware when submitting. Just for testing and development! I cannot digest the prices and what you get when it comes to the current lineup. Who knows! Maybe something I throw in might click! And I'll make money where I don't need to worry about money :)
The hackintosh court thing was different but that was awhile ago. There was pystar as well but they didn't last when apple went after them Ultimately apple won't go after a individual using it to learn it's just bad PR and it wouldn't be worth it cost wise. But once you try getting into their walled garden it's their rules and part of the developer agreement at that point as well hehe And yes going used or refurbished is a good way to go but even then iMacs are pretty cheap but solid computers for example but if you build to order it gets out of hand real quick :-)
Depending on the system and the memory kind yea it's a bit pricey but even 3rd party is still up there :-/ 
&gt;Depending on the system and the memory kind yea it's a bit pricey but even 3rd party is still up there :-/ Yeah. I heard that some of them have soldered RAM modules these days! :(
Yeah, They are doing a custom interactive transition delegate. Very easy to do. They are taking a screenshot of the main content viewcontroller, then pushing/presenting the menu view controller on the stack. The screen shot will stay on top until the transitioning delegate is finished, then the top view controller will be popped off the stack. Search through the Apple sample code from WWDC, and there are some really good lectures/videos about it.
I'm someone who used machine similar to yours Probook 4440's, running Yosemite 10.10.3 for learning iOS development, apart from Apple EULA mumbo jumbo that clearly states that OS X is suppose to run on Apple Hardware, there is another downside that is the inability to test latest beta OS X, Xcode builds. I was running Clover still I had to cross my fingers every time I updated my OS and pray everything goes right. Generally to run newer versions of Xcode you need a fully updated system. Being a developer you have to be on top of the game by being the first one to implement new features in your app, 3D touch for instance. I bit the bullet and bought myself a rMBP. It's an awesome machine.. TLDR: If you are serious about iOS, and want to actually make some cash on AppStore, get yourself a mac. Even if it's a used mini.
Android runs on Dalvik, not Java. It's not compiled to Java byte code.
You are correct, though it will eventually be compiled directly to dex with the new Jack compiler.
Wow thank you so much the the detailed reply. I am using it as a project to just see what I can learn at the minute and in its current state have no plans to make it available for others - I only just learned how to swipe left and right! I totally agree about the look of it: I think that the next thing I will start learning about. At the moment the layout tools I find quite overwhelming so why not start there eh?! 
I've been looking for jobs the last couple of weeks. Most job specs I've seen talk about objective c with swift a nice to have, but the companies which are starting new apps are writing them in swift so I would say you'd be able to talk with those companies and experience counts as well so having apps to show is a big plus 
Hrm why though? You don't address my points. I don't see Apple moving to Swift backend either. If you look at the job listings for backend positions you'll see Java, Ruby, Python, Go.
New technologies take time! I think people forget just how new Swift is. Python for example has been around a very long time comparatively. 
 &gt;With Swift being open sourced, could it be used to make Android apps and desktop apps such as a social networking website? Sure it could be used as such. Someone would have to build a native tool kit and a bunch of other library interfaces specific to Android. As far as desktop operating systems / social networking, which platform are you talking about? You can already target Macs with Swift. On the Linux side of things you would most likely be able to do web back ends fairly quickly. I say this because I believe Apple has an unstated goal of running Swift for some of their web services . How quickly this will happen depends upon what exactly Apple releases. As far as desktop apps go, on Linux I actually think we will see a rapid adoption. Well rapid for open source, mainly because it is a better solution than C long term. Beyond that the common C++ code bases (QT) are very dated and really aren't employing modern C++, so there is a logical argument for vectoring away from C++. I can't really predict what the Linux community will do here. The only thing that comes close to the power of Swift, commonly use in that world, is C++. There is good reason to believe that something that is similarly powerful, but easier to deal with, would be rapidly adopted. I really see a rapid move towards Swift in the Linux world. 
It sounds like the bezier path is created from the model? if thats the case then it shouldn't be done in the view component, so view controller would make more sense. You can still keep the view controller a bit cleaner by having another class / extension perform the actual conversion, but it sounds like the MVC way would be for the view controller to provide a bezier path to the view
I have a class that inherits from the UIview called "x", which creates a UIBezierPath, and calls the func drawrect to draw it, and then i have a func in the viewcontroller, that creates another path and i call it from the class "x", to draw it too.
Its good to try to make sure the view doesn't know much about the functionality of the view controller. By having the view ask for the path it couples the view to that view controller It might still be the responsibility of the view controller but it would be better to reduce coupling by having the view controller set the path, or have the path provided by a datasource rather than a specific view controller
You need to look at where you're setting up the constraints.. It's prob in storyboard but this framework may have set them up programmatically so idk. Cntl+F the project and search for "NSLayoutConstraint(" and see what comes up. 
&gt;Could be a strong argument for business logic to be written for applications in one common language. Siiiigh, node.js was touting this and still is touting this, yet no one picks node.js jsut because you can write your stupid validation rules in javascript on both front end and back end..............................
Spaghetti, clusterfuck, etc is and old principle in a lot of old codebases. In what effin world "lets crap on our codebase" is a good thing? I don't get what you are saying. Why is it even remotely good?
Yes, I recently got a job at a software house as an iOS developer. I know Swift very well but very little objective-C. I also don't have any commercial experience in iOS. Where I am it is hard to get a decent iOS developer because most jobs are developing for Windows so that probably helped me. The company is also very young and working only on new projects so they don't have to worry so much about legacy objective-c code
Maybe I'm missing something, but can this deployed yet? Or is that only once swift is officially open source? Am I wrong in concluding that as of now it's only available to build apps with a localhost? Great work guys!!
You're definitely limiting your prospects if you don't know ObjC. But if you're OK with that and find something you like, then it's not a problem.
Kind of a different use case, but OK...
Rule of thumb is that if you don't have to do it in a ViewController then you don't do it in a ViewController. So if you're in doubt already, separate out whatever you can. In this particular case both setting up the bezierpath points and the drawing itself are for the View layer of MVC but calculating the path itself could happen in a completely separate NSObject. It doesn't need to be something that inherits from UIView to be a View layer class. Often setting up paths for beziers is highly mathematical and you basically only need to input a CGRect to output the data you need to draw.
You might want to look at Parse for this. It's a BaaS db solution but is extremely easy to set up and work with. I use it with production apps I have released and never had an issue. It's not the best at everything but sounds prefect for what you need. Also has a great price tag -&gt; Free (unless your app gets really big). It's free till you pass the 30 requests a second mark which means you have big traffic. -- If parse isn't going to be integrated, I would personally use your Game Center approach since you've already got it up and running anyway 
ll look into parse. The only issue with Game Center is that it wouldn't actually "back sync" the scores right away because of the authentication. "Back sync" meaning, syncing the game center score to the user device if its greater than the locally stored score.
This is not the right use case for Keychain. There are actually multiple ways to store data in iCloud. There's key-value storage, document storage, and CloudKit. CloudKit looks like the best fit for what you're doing, but the [iCloud Design guide](https://developer.apple.com/library/ios/documentation/General/Conceptual/iCloudDesignGuide/Chapters/Introduction.html#//apple_ref/doc/uid/TP40012094-CH1-SW1) describes them all. The CoreData based solution is infamously flaky. I've never used GameKit so I can't say too much about it. I'm surprised if there's no way to sync scores back to the device. It also has all the GameCenter based sharing for free.
There is a way to sync the score back. You have access to the player top score property. The issue is that it will only sync after auth in the app, and that is notoriously flaky. 
If you know cocoa + swift sure...if you just copy paste swift code into apps, that's another story. Can you explain the moving parts of view controllers, storyboards, core data, NSURLConnection or AFNetworking? You're probably going to be able to get a job. Can you do git, cocoapods, navigate the appstore release process? Even more likely
Do you think it would be possible to drop Foundation dependency in the future?
I'm currently interviewing in San Francisco. Out of about 10 places I've talked to only 1 uses exclusively swift. Most use a mix and one or two is sticking with Obj-C for now. The swift only place does require you know Obj-C though. For example you might need to modify a Obj-C cocoapod or something along those lines. Above the languages, you kneed to know about run-time analysis (big-O) and efficient/appropriate algorithms and data structures. Most places will weed you right out in online coding exercises before you even make it to an interview. If you know swift then learning objective-c should come quite easily to you. For the most part they use the same frameworks and work the same way, just different syntax. There are exceptions to this of course. 
It depends on if you have other programming experience and your knowledge level. When I interview I don't care about apps in the store, I care about your general software development knowledge and problem solving skills. Attitude is important too; if you only have two years of Swift experience understand that you are as junior as they come, don't expect to be treated as a senior dev. You have a lot of dues to pay, bugs to fix, etc.
I am currently typing this on a hackintosh and I have submitted one app. So, yes you can!
It can be deployed on Mac hardware (for example, we are running Mac Minis in production) - but until Swift open sources and we port to Linux, you can't run it on classic server infrastructure (or a virtual machine, for example). You can definitely develop with it immediately, however, and use raw Mac hardware to serve, if you have an unused Mac hanging around.
When I hire iOS developers, I ask a lot of Swift questions – specific, technical stuff. That doesn't mean hard, instead it's rather simple things like "can you explain the difference between map and forEach?", or "what's the difference between weak and unowned?" Now, I posted a comment on this thread already saying that my team uses Objective-C almost exclusively, so you might wonder why I ask Swift questions. And the answer is fairly simple: I believe any serious iOS developer must be looking at the latest, greatest stuff from Apple – whether that's iOS 9, Apple TV, Apple Watch, or Swift doesn't really matter, as long as they can show me they carve out some portion of their time to keep on top of what's new. So, if they can talk at length about what's new and exciting in iOS 9 but have decided that Swift isn't for them right now, that's OK – the key is that they have some sort of excitement in them to embrace new technology. This means anyone who says, "oh, I don't use Auto Layout," or "I haven't tried size classes," or "I don't see the point of adaptive layout," or similar have literally zero chance of getting a job out of me. These things aren't optional any more in serious development. Regarding the specific question you asked: knowing Swift is of course not enough to get a job, because Swift is just a language. You need to know the platform, and as you've made a couple of apps already I guess you do know some of iOS – probably UIKit, maybe some Core Graphics, and perhaps a few other frameworks. If you know Swift, a company can teach you Objective-C. If you know Objective-C, a company can teach you Swift. But what they won't want to teach you is UIKit and other frameworks (or, worse, basic computer science concepts like arrays and OOP), so your best chance of getting a job is to make more apps, and force yourself to use more frameworks and/or components until you feel comfortable. These apps, preferably available on the App Store (and doubly preferably available on GitHub), are the best portfolio you could ask for.
youre going to run into authentication issues with just about any option. At that point you have to put atleast some burdon on the end user to make sure that if they want their scores synced correctly, therye signed in. 
Understandable, just trying to be the as unintrusive as possible. I should add its not a requirement for my game. It just has always bothered me when my score isn't synced across devices.
So cool! Thanks so much. I'm SO gonna set up a custom API asap with these tools!
Yes, you should invalidate the timer after you're finished with it :)
Use Instruments, it can tell you what objects are creating the memory usage.
I wrote a program to simplify the process of transcoding videos using the HandBrakeCLI command line program. In the process I wound up with a program that can do much more. This is my very first Swift app hopefully not my last.
Android also has the NDK for C code already. If Swift does get used in Android, it will almost certainly be compiled direct to ARM binaries, not run through their JVM. 
Can't tell much with this, but newJSONvalue seems problematic. I'd investigate your JSON parsing code. In your sample I don't see where you're calling NSJSONserialization but perhaps look there. Ultimately you're looking for something maintaining a reference that ARC doesn't know to clean up. Your timer is repeating, and I assume is only created once so you should be ok there. Are you subscribing to any notifications or refer to self in any closures. Might check those. 
Does my [instruments.trace](http://www.reddit.com/r/swift/comments/3uo8xt/can_someone_help_me_debug_my_instrumentstrace_i/) help? 
Well done! The description is a bit confusing on your site, maybe prop the reply from here to there. Props to you sir, well coded! 
This swift tutorial from the Apple Developer Docs walks through a star rating implementation: https://developer.apple.com/library/prerelease/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/Lesson2.html#//apple_ref/doc/uid/TP40015214-CH5-SW1
I think you are making a memory cycle in the closure when referencing self. Try adding [unowned self] in the closure.
The Foundation Framework part of GNUStep, layered on top of modern Objective-C in Linux, remains a very powerful development platform. However, I can't really share your enthusiasm for GNUStep style UI at this point. Frankly, it looks awful nowadays and I can't really see how it would have stood up to too much 'UX' scrutiny back in the day. Too many floating panels to manage manually, and too many vertical menus making odd use of screen real-estate for my liking.
JetBrains are surely best placed to deliver a Swift supporting IDE on Linux. AppCode is a customisation of their fully cross-platform IntellIJ IDE, and includes a Swift engine which an educated guess would suggest is already written in Java, making it *relatively* trivial to port; as long as the underlying compiler toolchain is there.
If you take a quick look at this image([Image!](http://i.stack.imgur.com/I9r3n.png)), you will see the arrow pointing to call tree, are you using call tree instead of the default ? EDIT : make sure leaks is selected in the top pane once started. If so on the right of that is a little settings button when u press on a call if you press that there are like 5 tick boxes in the same area tick all but the bottom one. this should then show the calls that are leaking, double click them and they'll take you to the code.
Thanks. I'll work on the web page and try to clarify it. I'm more of a programmer than a writer.
Not much to that. /////////////////////////////////////////////////////////////////////////////// // awakeFromNib /////////////////////////////////////////////////////////////////////////////// override func awakeFromNib() { registerForDraggedTypes([NSFilenamesPboardType]) } /////////////////////////////////////////////////////////////////////////////// // draggingEntered /////////////////////////////////////////////////////////////////////////////// override func draggingEntered(sender: NSDraggingInfo) -&gt; NSDragOperation { return NSDragOperation.Copy } /////////////////////////////////////////////////////////////////////////////// // prepareForDragOperation /////////////////////////////////////////////////////////////////////////////// override func prepareForDragOperation(sender: NSDraggingInfo) -&gt; Bool { return true } 
 override func performDragOperation(sender: NSDraggingInfo) -&gt; Bool { var fileCount: Int = 0 // Accept dragged file names and put into the jobs container if let board = sender.draggingPasteboard().propertyListForType("NSFilenamesPboardType") as? NSArray { for item in board { if let fileName = item as? String { // fileName is ready } } } } return true }
Alamofire and SwiftyJSON use NSJSONSerialization btw
Btw, I realized there's another answer here that's instructive, and it's triggered by your comment "I've got quite a few variables to check and convert" I skipped over this at first because this immediately sounded like a "how do I format with leading zeroes". But actually you already had a perfectly good working solution that answered that question. So your complaint about "having too many variables to check and convert" sounds like it is less about wanting a more correct solution but that you think you'd have to repeat your code for every variable? So it sounds like the problem is not getting the correct answer, but maybe not understanding the benefits of functions? Actually, for either correct solution, you can simply have a function you call that that takes an integer and returns a string. Then put either your code or char_ques code in it. 
Also i think his code has a little bug, because if the value of the forecastDay is 03, it will make true the statement adding a 0 to 03, being the final output 003, and not 03 that is what you would expect.
Try adding it right after responseJSON {. I am on phone so hard to explain. You need to do this for each closure that gets called (or eventually gets called) by the timer.
I'm glad it's helpful! How many hours? A *lot*. Many hundreds, for sure. I wasn't keeping track very closely, mind you – the only way to get quite such a large amount of work done is to dive in and not stop until it's done. It also needed a major update when Swift 2 came out a few months ago. The book was paid for at first, but enough people bought it that I considered I had made my money back. So, now I give it away for free, and people are welcome to contribute to my running costs by buying the downloadable book. They can pay $0 if they want, but a few bucks here and there add up so I'm most grateful for any contributions.
Yes... a function.. that's what I need! To give a little more detail, I'm trying to construct a url to pull weather forecast images whose filename is encoded with various date / time parameters. I'm going to have a go at writing a function that can do the conversion for me. Thanks again for replying
Thanks very much for this! Will look at it in more detail...
Yea I think i paid for that book even though I didn't need it. Still I felt like I got more than I paid for. Just curious what are you doing now? Mostly teaching or do you run your own dev shop?
True, tested in playground. Sorry then. 
If you would like to make games for iOS than Swift is a good choice. But the road is long and hard. Given your question I can see that you don't have much programming experience. First of all Swift is not a program, it is a language. And no, it cannot run on Windows at this time. Using the Swift language your can write apps for iOS given you have sufficient knowledge of programming and iOS frameworks. I suggest starting with programming basics and then slowly move on to more advance topics like object oriented programming and Cocoa Touch frameworks. Good luck!
NSNumberFormatter is better. Use minimum integer digits = 2. Then StringFromNumber on the number. 
C# (C-Sharp) is the language you will want to learn for Windows. Download the Microsoft Visual Studio Community Edition which is free. Should be plenty of books for writing games using C#.
That's actually my While Loop What i'm asking is why does this code execute: for var i = 0; i &lt; todo.count; i++ { print(todo[i]) } Shouldn't this not work because i'm incrementing i before printing out the results? Because if I increment in the while loops before printing the result it doesn't work. 
In the for loop, `i` increments after the print. So the for loop is equivalent to your first while loop. This [image](https://upload.wikimedia.org/wikipedia/commons/0/06/For-loop-diagram.png) shows the order in which a for loop is executed (A is `var i = 0`, B is `i &lt; todo.count`, C is `i++`, D is `print(todo[i])`). So the code (D) in your for loop is executed first before the incrementing (C) happens.
Also, *just in case* you don't know — you can iterate through the elements in the array like this: for todoItem in todo { print(todoItem) }
No you're are mistaking how the two different loops work. In the For loop in your example the increment isn't applied till all statements in the braces are executed. In your while loop, however, you are incrementing index and then trying to print todo[index]. This is probably throwing array out of bounds error. var index = 0 // index while index &lt; todo.count { // condition index++ // increment print(todo[index]) } To get the while loop to work the same as your For loop you would increment after the print statement. var index = 0 // index while index &lt; todo.count { // condition print(todo[index]) index++ // increment } 
ok, I found the reason that I need to add ! NSURL(string: "http"//maps.apple.com/?saddr=" + " \(myAddress.text!)" + "&amp;daddr=" + " \(myRemAdd.text!)") Thank Kennyjmeyers and LOLC4T.
A little correction here for potential newbies trying to make sense of things: NSURLs are not inherently optional, and no types are. The NSURL initializer is optional/failable meaning it could return nil if the parameters are invalid.
Technically, the `"\()"` mechanism is built for printing, not data correctness (and definitely not URL encoding). You need to ensure that special characters are converted to the standard percent-escaped format. `String` offers the following method for this: let myAddress = myAddress.text.stringByReplacingPercentEscapesUsingEncoding(NSUTF8StringEncoding) &gt; NSURLs are optionals in Swift *Any* type can be wrapped as an optional, and it is never required for individual types to be. In this case, you're seeing them because `NSURL(string:)` is a failable initializer, and this example is a good demonstration of why. The `String` method above can also fail if given an incompatible text encoding, so it will also produce an optional. I recommend starting with [Apple's description of Optionals](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID330) so that you know how to properly handle them.
Yeah I get it now thanks :) 
Is this code to activate sky net?
Bahaha
doesn't seem to change anything :( This is what I have now: func getDnsData() { Alamofire.request(.GET, dataSourceURL2!).validate().responseJSON { [unowned self] response in switch response.result { case .Success: if let value = response.result.value { let json = JSON(value) let json1 = json["dns"] let geo = json1["geo"].stringValue let ip = json1["ip"].stringValue self.dnsIp.title = "DNS IP: " + ip self.dnsName.title = "DNS Name: " + geo } case .Failure: self.dnsIp.title = "No Internet Connection" self.dnsName.title = "No Internet Connection" } } } 
Good catch. Updated my post.
One correction: The `\()` mechanism is for string interpolation, not just for printing.
Not sure about that, though I could be wrong. For `CustomStringConvertible` in the standard library module, it says: /// This textual representation is used when values are written to an /// *output stream*, for example, by `print`. `CustomStringConvertible` even used to be named `Printable`, but they may have changed that in order to expand it's scope. What makes you say that that about string interpolation?
"We've got to stop Skynet. We just need to access the source code and..." "B-but Captain... it's re-written itself... *in PHP*..." "... Actually these Terminators aren't so bad. Tough but fair, I'd say - we shall learn to live with them."
Hah, I actually don't think it's so bad to write in; [I was more thinking like this](http://cube-drone.com/comics/c/ingeniuty-of-sorts). The real problem with PHP is just that it doesn't have any real semantics or conventions, just piles and piles of APIs... Which gets pretty bad when you have have millions of amateur programmers deploying projects with it.
Yea, I don't know PHP well but I'm sure it has a much worse rep than it deserves. It does make for a good programming joke punchline though :) http://imgur.com/7FLqOqY
https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html#//apple_ref/doc/uid/TP40014097-CH7-ID292
I'm a full-time iOS developer for a media company. I make apps in my spare time too – I'm not a teacher, though.
Absolutely would rather duplicate the tests. Internally we have started using a simple framework for running a group of tests on an object. This way we're not actually duplicating the test code, but still getting the coverage I want. 
I only have 3.5" floppy (Macintosh formatted). Sorry. 
I like that lol 
Are you sure you connected your outlet for the webView correctly ? Did you use storyboards to create the webView or did you create it programmatically ? I tested this little bit of code and it works fine. http://imgur.com/Eqw1h8E
It's important to bear in mind that the accumulator parameter in `reduce`'s closure is copied on *every* item in the sequence being reduced over. [See this post for details](http://airspeedvelocity.net/2015/08/03/arrays-linked-lists-and-performance/). A lot of these functions have linear-time implementations, unfortunately the `reduce` versions usually make that O(n^2 ). One other thing I saw: your `flatMap` is a little bit off. In the standard library, the signature isn't: (elements: [Int?], transform: (Int) -&gt; Int) -&gt; [Int] it's: (elements: [Int], transform: (Int) -&gt; Int?) -&gt; [Int]
Make sure that the view that your UIWebView is in has its class set to the name of the view controller Swift file where you're writing the "loadRequest" code. EDIT: here's what I mean. Change the value of "Class" to your view controller's name. http://imgur.com/mtAcXcz
FWIW, for a `groupBy` where `n` is small it may be hard to get a difference, actually; if a difference is going to pop out at all it'll probably show up if you run a benchmark against increasingly-larger `n` (e.g. 10, 100, 1000, 10000). For the rest, I've been sending people to your blog before if they need to get some ideas about how to use tuples and enums; for this post I'd have to add caveats, is all.
Hi there :) Thank you for your work, it helped me a lot!
These look really cool. I wrote a compiler in Swift that compiled to LLVM, so I may try to rework it using LLVM.swift. I agree that learning LLVM was really interesting!
Thank you, this is helpful. I am looking for some projects which incorporate Swift optional chaining since I am one of those people who learn by doing. Once I do it a few times, I'm sure that the light bulb will go off and it will become second-nature.
It shouldn't 
Huh, interesting, you're right. I was kind of expecting the compiler in combination with the uniquely-reference stuff to figure that out, but it's too hard it seems. My point about lazyness still stands though, replacing the `map` version with an actually lazy `array.lazy.map({ $0 + 3}).reverse().prefix(3)` makes it... well, arbitrarily much faster (linear vs. constant time). Eg., array with 10 million elements 1,7s vs. 1,3ns. 
10MB is a lot, that can't be just some JSON data. Are you doing stuff like playing sounds or showing some images in the UI? Also: if (response.result.value != nil) { let json2 = JSON(response.result.value!) Use guard / let instead of forced unwrapping. Sorry it's a bit of pet peeve ;)
This process is like waiting for Christmas morning. I keep checking iTunes connect ever hour even though I know it will be about 5 more days.
Take it your still waiting? 
yeah.
First app? I wonder if that has an impact
good thought. The two things I have made have gone from 'in review" to "ready for release" (or whatever the statuses are) in about 2 mins. I suspect actual big apps take somewhat longer.
You must be the author. :) Thanks for the link! Glad my stuff could help along the way.
The iTunes Connect app for iOS has Push Notifications for review status changes ;)
You still have to check though. What if the push notifications suddenly stopped working :p
The construct I suggested for your `groupBy` is a response to a similar issue. When you do the `if var x = collection[y] { update(x,foo); collection[y] = x } else { collection[y] = createX(foo) }`, you would naively expect both `var x` and `collection` to have strong references to the underlying collection storage. Thus when you update `var x` you would then trigger the a copy-on-write logic, which is obviously a bit silly in this context. In theory this should get understood by Swift's optimizer should -- and hopefully will, someday, if it isn't yet -- but in the interim it makes it hard to do much with nested collections without a bunch of explicit boxing. Doing them through the `if let _ = ac[h]?.append(o) { } else { ac[h] = [o] }` as of 2.0 seemed to skip the copy, but I haven't re-checked this for 2.1.
Go to Xcode settings, themes, and look at what blue means.
Thanks, I've just updated the post. Also thanks for the flatMap note.
Happy coding mate.
Yup! Definitely workspace. 
Nope. It doesn't. Everything works as I expect. But it gets treated as an error type (color coded white). 
Here is how you can save an image asynchronously in Swift: requestImage("http://www.asdf.com/89asdf.gif") { (image) -&gt; Void in let myImage = image } func requestImage(url: String, success: (UIImage?) -&gt; Void) { requestURL(url, success: { (data) -&gt; Void in if let d = data { success(UIImage(data: d)) } }) } func requestURL(url: String, success: (NSData?) -&gt; Void, error: ((NSError) -&gt; Void)? = nil) { NSURLConnection.sendAsynchronousRequest( NSURLRequest(URL: NSURL (string: url)!), queue: NSOperationQueue.mainQueue(), completionHandler: { response, data, err in if let e = err { error?(e) } else { success(data) } }) } Its included as a standard function in my repo: https://github.com/goktugyil/EZSwiftExtensions 
First you need to figure out if it is just some random nonsense, or an actual problem. Random nonsense being like outdated build artefacts left from a previous build. To do this, hold down alt and choose Product-&gt;Clean Build Folder.... Click Clean, when that finishes, then try a Run. Sometimes I also delete the app off the simulator but I have no idea if that does any good or not. If that doesn't work, and you get the same error, well, you gotta figure out what is causing it! So, there's probably two ways, forward and backward. Backward is where you take the error reason and try to trace back to what caused it. Forward is where you comment out all the changes you have recently made until it runs again, then slowly uncomment things until it breaks and you identify the line that is causing the problem. After that, if it still isn't happening, post the exception you should be getting when it crashes, and maybe someone can help you from there.
Thanks for the response! I was under the impression that the code was okay since the build was successful, but I guess not. I tried both of your other suggestions and they didn't help, so I'll try going through the code now. Thanks again!
Just passed app review - 7 days.
This. Just passed, 7 days.
Yes, what I need to accomplish is having the user submit data from five text fields. I want to store that data in a group to later call three of the five strings to populate each table cell. Each cell will is from a different data grouping thus keeping (ie) John's favorite colors, Jane's favorite colors, Jim's favorite colors, etc on their own cell. I have the table, segues, layout and data source set as an array of strings. I think either the struct or dictionary should work. Thanks for the suggestion will continue to read up on capturing UITextField data and storing it in an array under a different name each time to not conflict with previous info.
Just a heads up on your website - "Can be helpful when trying to square root a large number as you can check the highest square it can be **divide** by. " I think you have a typo there. Shouldn't it be **divided**?
Well, the main NSWindow is simple; you don't even need to connect it yourself. The following will work from anywhere in your App: NSApp.mainWindow In general, your Storyboard just needs to have an instance of the object you are trying to trying to connect. In the default app template, this would be the "App Delegate" object. You should be able to control+drag connections directly into the body of your code, where it will insert the new instance variable declarations for you.
This is a really fabulous discussion of the difficulty of doing dependency injection with Storyboards -- something I've personally struggled a lot with in the last two years. I still find myself using nibs for iOS and OS X development because storyboards are so cumbersome. I also really appreciate the discussion of testing. In the past, I've been a bit aghast at the lack of appreciation of unit testing in the iOS and OS X communities (granted my perspective may be skewed), and it's really heart warming to see someone describe the exact same perspective and concerns that I share when I'm developing apps in swift. Thank you so much, from the very bottom of my heart for writing and sharing this. 
I just started working with Google Places autocomplete as well! I'm actually using an objc wrapper, although I'm coding the app in Swift, because a lot of the Swift repos focus on prebuilt UI and I needed something 100% custom (no UISearchBar). My gut tells me you won't be able to find something that fits your exact popover needs so best bet is to find a nice wrapper for the API and roll your own UI.
How accurate are you finding it to be? Also, how are you measuring it if you're not using the camera? 
All these serialization libraries(objectmapper, cereal etc) suffer from the same reason. Due to limitation in swift language you can't add custom init by extension which limits the usage of these libraries. That is why I stopped using them until swift language removes those restrictions.
Apple published a book on Swift. Start solving real life problems with your Apps. Call yourself whatever you want. All the best!
And it's iOS, not IOS :)
Huh, thank you for telling me. I'll change it as soon as I have access to it. 
Well... what exactly do you want to do? Just apps as in non-games? Sounds like a good start; might take a while and I wouldn't put off on reading them because then they will become irrelevant if you wait too long.
This
also you know you can write documentation for your own classes as well. [post from about this about a week or so ago](https://www.reddit.com/r/swift/comments/3ow16h/fun_with_swift_structured_documentation/)
2-3 Apps = Jr iOS Dev? W/O knowing anything about your background, my experience says that many apps published means you would have, at best, 12-18 months worth of experience. That is, of course, assuming the apps you've published are of a high enough quality, and that your approach to development was professional. I would say JR. Devs should be somewhere between 3-5 years of exp. Then again, like was said earlier, make solid apps that fill a void and you can call yourself anything short of Steve Jobs.
Time is a bad measure of ability or experience. Demonstrating ability with apps in the store or via GitHub is a better measure. 
This is the nicest I've used (pulled out https://github.com/hkellaway/Gloss)
&gt; https://developer.apple.com/videos/play/wwdc2012-402/ This is great! Thank you!
Sure, my pleasure. &gt; I guess NSApplication is new to 10.10 Heh, far from it; it would've been part of the original NeXTSTEP implementation in the late 80's/early 90's! You just don't usually interact with it directly, although you may know it as the object responsible for initiating `applicationDidFinishLaunching` and any other `NSApplicationDelegate` methods you implement.
I did. I'd recommend Ray Wenderlich's series of books. He basically takes you from knowing no iOS developer and Swift at all to writing a lot of fully useable apps utilising a lot of different parts of iOS API's. 
Pretty clever! I do like the Abstract Factory pattern you've outlined. That makes it a bit more manageable than your previous post since you've isolated all view controller instantiations in a single class. I'm loving storyboards because of the GUI element though. Like I've said before - looking into a well structured storyboard can give a strong sense of what the app's screens are. If you fully commit to using the storyboard as a tool - using @IBDesignable/@IBInspectable and making sure you expose your customizations in the storyboards as much as possible, it can be a powerful development blueprint. Looking forward to what's next :]
Rails developer for 6 years. Started learning iOS development and then switched jobs to be an iOS dev full time. Now I do mostly C for cross platform development, and the popular native languages for each platform, but I'm heavily learning Swift because I like it so much. I've been out of the web world for 3 years. I attempted to do some web work recently and quit immediately. "I have to do what to make two things align properly in a browser?!" I also attempted to write a Ruby script recently. Type systems are so nice. I have no idea how I wrote safe code in Ruby. 
Just start building your apps. When you get stuck go to any length to resolve your problem using best practices. You'll be surprised how quickly you'll become capable with the language.
I'd respectfully disagree. I've been a career programmer for over 20 years. Unfortunately recruiters equate years of experience with skill. Programming is programming, no matter what the language is. A person with 10 years of programming experience with 1 year of X language is probably a better programmer/problem solver than the guy with 3 years total of X development only. It's the 80/20 Pareto Principal. 80% of what you need a language to do can be accomplished by having a firm grasp of 20% of all possible things it can do. I *firmly* believe this. The key is to learn the right 20%. You'll pick up the obscure 80% when you need it. Most iOS apps are not rocket science. They are either stand-alone utilities or REST apps where the backend server does the "heavy lifting" and returns what needs to be returned. Hell, I created a Reddit client iOS app in like 3 days because the REST API does all of the work. I just do call-and-response to it all day. If you asked me how to make the backend that Reddit uses, I'd be stumped 😅
Well Xamarin already did it for C#/.NET. There's money to be made by whoever builds and supports a Swift to Android compiler.
There are already [Ubuntu 14.04 &amp; 15.10 binaries](https://swift.org/blog/swift-linux-port/) ready to [jumpstart](https://swift.org/getting-started/) this! :)
I hope we are going to make more progress in a couple of months than from the beginning up until now!
[removed]
Awesome. This finally is going to move many programmers off of c/c++ style undefined behavior, integer overflows, and memory corruption. And subtle exception throwing returns. I really liked rust when it came out, but it has a very high cognitive load to pay all the time. Swift is very very easy and can still drop down to c performance for critical areas.
yeah 404 for me at the moment. Maybe making repos public takes some time
Yes, it's already getting hammered and it doesn't seem like the GitHub repositories are quite ready for consumption yet. I've also been looking forward to this day! Finally a modern, general purpose language that has really strong backing, feels good to code in, and is not just The New Cool Language of the Year, but already makes business sense to learn as well. These stars don't align very often at all IMO and I'm really pumped because of this. Btw, Microsoft is said to be working on a Swift compiler.
Archive.is mirror guys! https://archive.is/L0J97
It might help to set the timer to nil after you invalidate. timer.invalidate() timer = nil
The news crashed the site.. Oh Apple.
They're up now!
optimist - they're just working on adding windows support that will be rolled into apple's repo pessimist - they're working on a swift-with-.net-interplay-and-other-stuff compiler a la "embrace extend extinguish" (though i don't think they're in a place to do this sort of thing here)
Not that you are necessarily wrong, but why do you think Swift couldn't at least take a sizeable chunk of the C++ market? I know Swift is still not as high performance and some thing require more control over memory layout than Swift can give. Still having done C++ development for over 13 years I can't think of many things I have done which could not be replaced by Swift. The main obstacle for the work I have done would be lack of ports of libraries to Swift. Certainly game engine developers are going to stick with C++ for a while longer due to specialized tools, and performance requirements.
Does this means that now it's possible to create iOS apps on PC? If yes how, where?
I think it is the latter. Something that will make it easier to port stuff to .NET. A lot of things in Swift doesn't fit naturally with .NET, so I think it will have to be a sort of look alike and not exactly the same.
 [swift/stdlib/public/core/Optional.swift line: 111](https://github.com/apple/swift/blob/master/stdlib/public/core/Optional.swift) @_transparent public // COMPILER_INTRINSIC func _diagnoseUnexpectedNilOptional() { _preconditionFailure( "unexpectedly found nil while unwrapping an Optional value") } It's like seeing under the skirts of a thousand unsatisfactory flirts.
If Swift's performance gets up there, then *yes*. Can I write a 100,000 connection service in Swift? Maybe not. Hows the asynchronous programming model for networking in Swift? Probably not there yet. ASIO is pretty damned good for C++, and it's being standardized in 2017 (likely? Not sure if it's 100% yet). In time these things could get better. There's a lot of "hard systems programming" you're just not going to be able to do in any language that has Garbage Collection yet. I *love* higher level languages and have shipped systems that use Erlang and Haskell etc, but some stuff can't be done reliably enough in them. C++ is full of good predictability if you use it properly. Go *failed* to get C++'s market share, and instead took some of Python's for the same reasons Swift probably won't make a dent in C++. Time will tell :-). Rust has a chance at getting some of the C++ market, but I find the language uncomfortable. Jai looks neat as heck, but it's very fringe. Do not get me wrong. I'm quite excited that Swift is out there now. We just need it on the BSDs too ;-)
Does that mean we are going to be able to write server-side code in Swift and host it on Linux in the future?
Really hope to see KVC/reflection would be somehow addressed. They are neither on the Swift 3 list nor the out of scope list. :(
There's also the libraries problem. C++ has decades of tried and tested libraries that can do everything imaginable at your fingertips. Swift has, well... a few pretty shitty Apple libraries and not really anything else. And as people do come towards the language, new libraries will become available, but it's going to take many years before they are as battle-hardened as the C++ equivalents, and for many companies, you simply can't afford to take risks like that. 
I'm really looking forward to convert thousands lines of Swift 2 code to Swift 3. /s
This limit comes from the fact that required initializers (which have to be implemented by subclasses) can't be made in extensions. Just moving it to the base class declaration fixes it. I'm not sure why they do that though. It would make sense for required initializers to be allowed in extensions.
If i can ask what makes you like it so much? what makes it so good?
Impressed it happened, and the overall plan / website / etc. all look great. However, I am seriously not feeling the proposed Objective-C -&gt; Swift naming strategy. I honestly think the decision to special-case the naming convention for the first argument to a function is one of those regrettable design decisions that made a certain amount of sense at one time; this would have been terrible: // using 2.1 syntax func documentForURL(url url: NSURL) -&gt; UIDocument? // ^ 4 URLs (count 'em!) ...but the suggested approach is IMHO not actually any readability improvement in any case where a method would wind up ending in a preposition: - `func addLineTo(_ : CGPoint)` - `func addLine(toPoint point: CGPoint)` (or something analogous) ...and it's leaning too heavily on choice of local variable names to preserve readability. So while `let document = documentFor(locationOfDocument)` is reasonably self-documenting, once you actually adopt functional-ish idioms you'll wind up with a lot of `documentFor($0)`, which requires more prior-API-familiarity on the reader to follow-along. It gets worse IMHO once you start using these methods themselves in functional-ish idioms; e.g., this doesn't look nice at all: - `coordinates.forEach(path.addLineTo)` // ? - `documentLocations.map(documentFor)` // ? ...I mean if you know the methods it's OK-enough, but if you don't you're left hanging and it no longer reads like grammatical english due to the trailing preposition. Anyways, in writing actual Swift-Swift I have *rarely* felt there to be any readability or clarity gain from taking advantage of the unnamed first-argument capability, and the asymmetry in how the first argument gets named is a constant annoyance. If you're willing to adopt a more-sophisticated renaming you should seriously consider having the renaming address the Objective-C/Swift naming convention mismatch, and let Swift have a simple-and-consistent argument-naming rule. Finally, WHATEVER YOU DO, *PLEASE* add a "gerund filter" to your name heuristics; `func reversing() -&gt; UIBezierPath` is a horrible, horrible name.
It's just clean. Very readable, very writable, and has plenty of coding shortcuts that aren't hard to comprehend. Its integration of tuples, for example, immediately changed how I approach handling data from place to place.
Funny, that function isn't even being used. It's content was just copied to `_getOptionalValue`.
Why would anyone want to do this?
I'm hoping myself. Would make what I'm doing a lot easier to do.
interesting thanks, what language would it replace for you? seems like people want it to replace c++ or objective c
I really don't understand this proposal. Removing operator (especially the optional one, a syntactic sugar) because it might be hard to understand for beginners is, for me, very questionable. If this approval won't be revoked, I'm pretty sure people will implement those operators themselves and just drag&amp;drop them to their every project. Or maybe custom operator will be removed too...
You can make OS X apps on PC though. Or at least command line tools.
Oh please "a few pretty shitty Apple libraries", that says everything about how much your rant is worth listening too. There is quite a lot of very well thought out libraries from Apple. I've programmed C++ for +13 years and I can tell you a lot of the C++ stuff I had paled in comparison to the stuff offered by Apple. Cocoa itself has been tested and polished since 1989 so I think it is older than pretty much any C++ libraries you are using today. There was Objective-C libraries for server side development before Java was even invented. The first web browser was made in Objective-C. 
How is it sensible to remove half of the information? To force everyone to create totally distinct dataSource instances? 
Anybody get it going on CentOS?
I guess this monstrosity continues to be a thing: struct MIDIPacket { var timeStamp: MIDITimeStamp var length: UInt16 var data: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8) init() init(timeStamp: MIDITimeStamp, length: UInt16, data: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)) }
Ah okay, so you just want to turn `tableView(_ : numberOfRowsInSection)` into something like `numbersOfRowsInSection(section: Int, tableView: UITableView)`
Just quick info that I just installed Swift and clang flawlessly using the [supplied instructions](https://swift.org/getting-started/#installing-swift) on the popular Linux Mint 17 distro. I thought it should work well enough with the Swift Ubuntu 14.04 binaries given that this distro is based on that LTS release, and sure enough... :) Now I'm hunting for a syntax highlighting text editor. It still feels kind of alien that this is even possible, and resources like these are still scarce for obvious reasons. :D It'll quickly get much better, of course. I think I'll go with [Visual Studio Code](https://code.visualstudio.com/). It gives me better performance than Atom.io, and I kind of like it especially now that it got its Marketplace. It also, surprisingly, comes with built-in Swift support, although (so far?) rudimentary. My God... Visual Studio Code... Swift... Both on Linux. What is the world coming to!
yep; that's what I was getting at
Most of the C style languages don't have named parameters.
&gt; Not in the future. It's just happened. Not yet.. the Foundation library isn't complete. For example, take a look at NSURLRequest: https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSURLRequest.swift 100% unimplemented.. trying to use any of it will just error out.
So?
you're exactly right; and yet they are able to implement multiple interfaces and provide clear readable and easy to understand method names.
&gt; Ray Wenderlich Will look into this thanks.
It'd be a lot more surprising if a GNU-based distribution like Ubuntu shipped with GCC's biggest rival. :) On that note, I wonder whether the public interest in Swift will have any impact on the popularity of Clang/LLVM in general.
Yeah, fwiw I have had to write some Swift-that-can-be-used-with Objective-C, and have found you get nicer code by abusing the `@objc` to have a different name entirely. // sample: @objc(componentRegistry:managementPolicyForComponent:) func managementPolicy( forComponent component: Component, inRegistry registry: Registry) -&gt; ManagementPolicy // versus: func componentRegistry(registry: Registry, managementPolicyForComponent component: Component) -&gt; ManagementPolicy ...which either you like or not, but I find it more readable in Swift, and thanks to `@objc` the Objective-C API users still get something at least somewhat idiomatic. Thus applying this to some of the UIKit APIs, they'd possibly come out looking like this: // not great, but consistent with what follows func numberOfSections(inTableView tableView: UITableView) -&gt; Int // I don't like it, but opinions can differ func numberOfSections(in tableView: UITableView) -&gt; Int // my preference: func numberOfRows(forSection section: Int, inTableView tableView: UITableView) -&gt; Int // I don't like it, but opinions can differ: func numberOfRows(for section: Int, in tableView: UITableView) -&gt; Int // a possibility: func cellForRow( atIndexPath indexPath: NSIndexPath, inTableView tableView: UITableView) -&gt; UITableViewCell // I don't like it, but opinions can differ: func cellForRow( at indexPath: NSIndexPath, in tableView: UITableView) -&gt; UITableViewCell ...and so on (plenty of ways to adjust it, but the general idea is pretty clear). I'd like to see some transformation applied like this; it's really a bit weak that the common UIKit-level Objective-C delegate/datasource protocols wind up the way they do in Swift.
Read up on creating a hackintosh. It's basically just running Mac OS X on a PC. At least you could get your feet wet writing code for iOS using XCode.
I think the AutoComplete is actually part of the swift package too. It should work on other compilers.
cs193p， you could find videos on iTunes U or website.
They released a Linux version today
Not from this. It's just what's needed to write the bare minimum of server software
Same here. It could have been worse though. Hopefully this won't be too painful.
Ah i had thought it was GC'd interesting!
thank you!
If only the files were actually there... Firefox can't find the file at https://swift.org/builds/ubuntu1404/swift-2.2-SNAPSHOT-2015-12-01-b/swift-2.2-SNAPSHOT-2015-12-01-b-ubuntu14.04.tar.gz
Just built a hackintosh with a quad-core i5, 32g RAM, a 512GB SSD and a GTX 970 for about $1200. Took a Saturday. Saved about $3000 over a similarly-spec'd mac pro.
If you make a game with that sprite kit knowledge...and it requires a server to do something you need in your game, like multiplayer, or high scores or chat, you will soon be able to write that server in Swift instead of another language.
Thanks. I was just about to look into logging frameworks and yours looks promising.
Oh its definitely meant to replace ObjC. I don't think having it replace something like C++ was really a consideration :)
`results` is defined inside the `do` clause. It sounds like you're trying to use it outside of it.
I think one of the problems they're trying to fix is that the operators really *look* like a C/C++/Objective-C preincrement/predecrement/postincrement/postdecrement but it's really a prefix/postfix inline operator. This means that it is similar but critically different because its effect is applied in lexical order during the expression (neither "pre" nor "post"). It's not syntactic sugar, it's lying.
May also want to check out Activity Tracing! https://www.objc.io/issues/19-debugging/activity-tracing/ Currently you have to go through obj-c interop to use it with Swift, but its cross platform (ios/osx), supported by the OS and works across XPC. 
And you can expect xcode-level autocomplete in those editors soon, too! (Thanks to SourceKit being open-sourced). If you want to do it yourself, [SourceKitten](https://github.com/jpsim/SourceKitten) warps it in a framework, and wraps that with a cli. The guy that made it actually had a talk where he implemented it for Atom.
Rumour has it that a version of Xcode running on a iPad pro is in the works. 
what do you get with hackintosh that you dont with ubuntu et al ? will you be able to access the apple store? 
I wonder if (on Linux) they're going to deprecate their Foundation Kit implementation and just bridge to Apple's.
Current implementation in Swift doesn't look complete. 
Not 100% sure, but I think this is the project? ... and reason ;-) https://dev.windows.com/en-us/bridges/ios &gt; start writing your next great Universal Windows Platform app in Visual Studio using Objective-C So they'd need [UWP](https://msdn.microsoft.com/en-us/library/windows/apps/dn894631.aspx) support in addition to what we already have. I assume by implementing some sort of extension of Swift (like C++/CLI?) to let people import .NET namespaces? Wouldn't bastardize Swift code per se, only if trying to interoperate with .NET. Hmm, maybe? Because surely they aren't going to port the UWP.
MacBook Air is $899, what are you talking about $3,000 to do entry level development? 
Removal of ++ and --, what?!
Aha, that explains it... Your page is almost responsive, but the language selector is obscured on mobile, and because that part looked visually broken, I scanned past it. Might want to take a look at that. iOS/Chrome.
Consider following code. var number: Int? = 5 if var number = number { number += 1 } print(number) // It is still 5 This creates confusion because some people might think, it will modify the original variable but it won't. I had recently a bug like that in a code base because it used to work in old versions of Swift. At beginning I also didn't like this change as I think more about it, I like it and I am glad they do it.
Ok..Well it's not gonna put itself into Android or Ubuntu Touch apps. Someone has to take what is here and start making it where other people can use it as such.
I'm kinda sorry for all the people that put a lot of work into open sourced package managers (cocoapods, carthage etc.) and now this is going to steal the show. I guess no software lasts forever. 
On the bright side, they can take their expertise and contribute greatly to the SPM project. The whole reason CocoaPods came about was because we didn't have anything like it. Now their is an officially sanctioned, open source solution that the community can help shape. 
Yes there seems to be a huge effort by Apple and also IBM to push Swift's usage for server/system development. Eventually this will lead to web development frameworks/libraries and what not coming out of the ecosystem pretty soon. By open sourcing the language and stdlib, Apple has shown a great commitment towards creating a "programming language for the next 20 years".
Extensions are your only option as far as I know.
Interesting, I'd never thought of doing that. That's definitely confusing to read. Seems like an easy thing to check for in the compiler though, and give a warning.
Whoa, this is cool—check out the [commit history](https://github.com/apple/swift-package-manager/commit/f0a5106f3449c22ec27df3776b819d039de5877d)... Looks like it was written by Max Howell, the dude who [wrote Homebrew](https://github.com/Homebrew/homebrew/commit/29d85578e75170a6c0eaebda4d701b46f1acf446)! Mattt Thompson of NSHipster has commits littered in there too, I had no idea these guys were at Apple now. 
Licence to use Windows??? The majority of traditional computers come with Windows pre-installed, and the cost of the Windows licence isn't usually passed on to the consumer, as it's made up for by the installation of bundled crapware. So no, in real terms, Linux is not cheaper than Windows.
Not to be snarky, but you get OSX. The best OS ever built, in my opinion. And I have a significant investment in Mac software and workflows. Most of the software I depend on doesn't run on Linux (Creative Cloud, mainly, plus the Omni utilities, 1Password, etc). I love Linux as a server OS, but I could never get a desktop environment working that would replace my OSX system. For a while, Apple was doing a good job being competitive with their tower pricing, but the new Pro is just off the charts ridiculous. I'm not spending $4k on a PC. And with the non-upgradeable Macbook line, where you can never increase the RAM or storage... forget it. If I wanted a tablet, I'd buy one. My 2011 Macbook Pro and my 2008 Mac Pro, which I can still take apart and upgrade, are going to last as long as I can breathe life into them, but unless things change in Apple's hardware openness and pricing, looks like I'll be hackintoshing from here on out. :(
youll need the libraries installed, i would assume they dont have a redhat based distro package, yet but id be surprsied if they didnt have one very soon
I agree swift is a fantastic language, but I still wonder if something like Python might be a bit simpler for getting people started. I think the semantics of things like how an Int is different from String.Index can get in the way of things like grasping how for loops work. That said, the immediate rich feedback in playgrounds is a real boon I'm sure. I'd love to hear about the experiences people have had with teaching swift to absolute beginners!
Not so sure about that. From what I can tell, it is Swift only, so if you ever want to pull in ObjC you'll have to go back to an existing package manager. Also, it was unclear to me if you can include resources besides code and how it would integrate into an Xcode project as appose to a pure Swift module.
Whats wrong with `for n in numbers` ? The ++ operator is being removed in Swift 3 also ;)
ELI5? (5 weeks into learning Swift)
There's a Swift package for Sublime Text. That's a great editor
I recently read the "Function Programming in Swift" book by objc.io (https://www.objc.io/books/fpinswift/) and wanted to try to approach a problem a little bit more functional more than I would have. I caught myself yesterday modifying CGRect like a pilgrim... so I threw together Rekt. My goal was to expose function on CGRect that allowed for chaining functions together that so that I didn't need to keep a mutable CGRect in my code - I feel safer with a immutable CGRect that I know won't change anywhere :) Critique it. Praise it. Enjoy it. &lt;3
I hope so. I like Clang a lot better than GCC.
CS193P is iOS development only, I don't think OS X is getting mentioned at all.
Yup, remembering this tweet from Max: https://twitter.com/mxcl/status/608682016205344768?lang=en Glad to see his expertise is at hand with Swift!
[**@mxcl**](https://twitter.com/mxcl/) &gt; [2015-06-10 17:07 UTC](https://twitter.com/mxcl/status/608682016205344768) &gt; Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off. ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Foundation Kit is what I meant indeed.
Great to see Mattt is now at Apple and working on awesome open-source stuff. Dude just disappeared since June 2015 without any updates after being probably the most well-known iOS developer. Sometimes i wondered if he pulled a "_why" on us. 
Seems like the same thing will happen the addition of Xcode UI testing. I guess that is the fate of 3rd party projects providing what should be core platform capabilities. Similar story with app stores. 
To be fair, it was *just* released. Check out [SPM Future Features Proposal](https://github.com/apple/swift-package-manager/blob/master/Documentation/PackageManagerCommunityProposal.md#future-features). Looks like they want to provide everything you want and way more.
Well, what were you expecting? Everyone wants to have "Repositories contributed to: Swift" on their GitHub page. Only thing I'm surprised about is that Apple's actually merging all of them.
dead link. with IBM, that figures.
We're working on our server issues at the moment.
http://swiftstub.com Also runs swift in the browser. 
Thanks, that's the kind of feedback I was looking for. I'm primarily interested in exploring swift as a server-side technology (where memory leaks, even small ones, most certainly do matter...) and circular references, closures etc are the sort of thing that I felt could get one into trouble. What you get in return of course, as you said, is predictability. 
&gt; There is already a Swift 2 compiler for .NET. really? &gt; especially when you consider the extremely weak IDE support Swift has outside of Xcode. I'm looking forward to seeing Swift support in Visual Studio or VS Code :)
I have a small gripe with you saying every Swift update is code-breaking, because I upgraded three apps to Swift 2 in literally less than a minute.
Just set the image mode to aspect fill and add leading, trailing, top, bottom constraints to the image. The view will take the size of the image view, and it will resize even if you change the image inside the imageview.
Apple offers a free downloadable ebook for learning the basics of swift. https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ Their developer resources are also generally excellent. Good luck!
&gt; In any case, as a desktop developer Swift isn't going to be used because Apple breaks stuff when they update the language and on very large projects that can be a significant problem - especially when you consider the extremely weak IDE support Swift has outside of Xcode. They're already aware of backward compatibility problem and planning to have better support for it in Swift 3, I'm not sure how good it is gonna be though. Also probably some of the IDE's out there will support Swift at some point, give community / companies some time, after all it just became open source yesterday :) 
You mean with this `RemObjectsSilver` we can develop native apps for iOS? inside Visual Studio?!
It's a method to bolster up your github profile/resume. People (well, idiots really) are doing it for all popular projects. It's annoying.
Are your other physics bodies also edge based? Edge based physics bodies only collide with volume based bodies. SKPhysicsBody(edgeLoopFromRect: rect.size) vs SKPhysicsBody(rectangleOfSize: rect.size) 
If you have a machine running OS X, there's some courses on iOS development using Swift on iTunes U. I'm just starting one offered by Stanford, and it seems like it will already be pretty awesome!
It won't help in interviews if you can't say shit about what you actually contributed.
:thumbsup:
Read the FAQ for resources. You could also visit the new swift.org website. The easiest way to learn swift is still on a Mac. You can just download Xcode and you are set. With Linux you will have to build everything yourself which may be hard if you don't know linux.
I wish there was a way to downvote someone's github pull request
You seriously don't see a [FAQ link](http://i.imgur.com/1LxBiW6.png)? Also, depends what you want to do with it. Do you just want to learn the basics? Than the [Apple Swift Documentation](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/) is well worth a read. You can also download the iBook by Apple. What do you want to do with this language? Create games? Then you will need to learn SpriteKit (2D games), or SceneKit (3D games). Non game apps? Then you will need to learn a lot of different classes for that. 
You're going to need to learn A LOT for that.
I get it, but what about the constraints of the view? Does they matter? Just top-bottom-trailing-leading-width but not height, right? Must the image clip to view or it doesn't matter?
~~Though I agree with the sentiment, that's Nadav Rotem. He manages the Swift performance team at Apple, so I don't think he's just trying to "waste progress"...~~ Edit: Nevermind. As /u/fluchtpunkt pointed out, Nadav Rotem just accepted the request.
Thanks for writing this. It's something I wanted to do but didn't have time for.
betting it'll be much faster than node since it's sitting directly on the socket and there's no scripting
Are they by any chance releasing their online code by any chance? Would really like to see how their interpreting it through a browser. 
It looks like this was the issue, I used: SKPhysicsBody(edgeChainFromPath: rectangle.path!) However, now only three of the four sides of the rectangle work...
ARC is *basically* the same model as C++ smart pointers, which is a very well-understood, battle-tested solution to memory management. People who work mostly in languages with mark-and-sweep garbage collection like to make a big deal about possible memory leaks due to circular references. In practice, you only have those if your ownership rules are not well thought-out, which is not that hard to get sorted. On the flip side, a cycle-detecting garbage collector doesn't keep your application from accumulating stale references to no longer needed objects. You also have to deal with the unpredictable timing of the collector, and you can't depend on it to run in any bounded timeframe, so you can't use collection to free external resources. So Java code ends up with a bunch of silly little "close" methods for anything that holds an external resource, because you can't just close file handles in the destructor, for example. 
Not really, though. Silver is a different language from Swift.
thank NSCFType. i already resolved the issue. yes, you are right. But it seems that try! is not as good as using do/catch. Any there is no need to generate a subclass for using the entity in this app. 
Now that Swift has been open-sourced, is Perfect already able to run on Linux, or are you guys still working on getting that set up? I don't see any sort of guides for running Perfect on a Linux machine yet, so if its ready, I'm just not sure what I need to do to get started. Thanks!
There are specific instructions for Ubuntu 14.04. I managed to get that working on a Vagrant box. The specific instructions are in https://github.com/apple/swift/: &gt; If you are building on Ubuntu 14.04 LTS, you'll need to upgrade your clang compiler for C++14 support and create a symlink: &gt; &gt; sudo apt-get install clang-3.6 &gt; sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-3.6 100 &gt; sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-3.6 100 &gt; &gt; Hope that helps.
Just wanted to say thanks to you guys at IBM for making something like this. Exactly what I was wishing for.
The "speed" of node isn't how close it is to the hardware, but it's concurrency. It can serve hundreds of thousands of requests because it doesn't block on blocking IO and uses an event loop model for concurrency.
Thanks, but I'm not building my own binaries. I'm using the snapshot. 
Oh, wow, thank you for the response! I'll take a look at the mailing list.
Any plans on merging this with the Swift project?
The code is actually sent to a server running a Docker instance, where the code is run, and the results are sent back.
Free course from Stanford University on iTunesU. https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099 This is how I got started and now I can't put it down.
No, the Swift project already has https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSJSONSerialization.swift. That's probably for the best too since most existing code already works with NSJSONSerialization. My hope is that Apple and the community can improve the performance of bridging so that it isn't so expensive to just use theirs, but until then, there's always JSONCore.
Not much. It does basically the same thing NSJSONSerialization does, but faster. It also gives you back strongly typed value types instead of the bridged reference types you get from Objective-C APIs. For most applications this is probably a micro optimisation, and you should stick with NSJSONSerialization. If you find yourself needing to parse an enormous JSON payload though, this might save you some cycles.
The Swift team is more-or-less reimplementing Foundation in Swift with Swift 3.0. source: https://swift.org/about/#platform-support That should negate any bridging related performance issues ... still I'm kind of curious about the issues you were running into with bridging as I've found it sufficiently performant for hundreds of thousands of objects in my apps. Not that I'm using a lot of JSON, but definitely a lot of bridging.
Expecting there to be strong IDE support outside of Xcode seems foolish when it was just made available for non-Apple platforms this week. Java had very little IDE support when it was released, for example. Pretty sure the same is true of just about every language under the sun. Kind of hard to build tool chains without languages to build them around. Given Objective-C's history insofar as compatibility goes, I'd wager things will be improving for Swift on that front. It is a very young language and is evolving very rapidly. The source level changes haven't proven a deal-breaker for me. Apple's migration tools have done 90% of the lifting in the majority of my code. I suppose if your off doing some Black Hat voodoo then it might be another story.
I remember encountering a similar bug months ago and thought maybe it was my code. Now that you bring it up, it's making me think it could be a possible bug. Not at home now but would be worth looking into this more.
The IBM one is also iOS compatible which is nice
&gt; These breaking changes are on trivial to you because the IDE automated it Wrong. I actually moved a couple of small projects over by hand in before I knew migration tools even existed. Do you really think other tool developers can't write a few regular expressions? Is project-wide find-and-replace beyond your talents as a programmer? &gt; The tooling issue is a valid complaint. No it isn't. A lot of developers don't even use IDEs. Xcode works on OS X. Other IDE support will come with time. =] &gt; We had C++ IDEs pretty quickly as well, back in the day. C++ was released in 1983. Turbo C++ didn't ship until 1990. Swift isn't even two years old. Can you name two or three cross-platform high-quality IDEs available for C++ in 1985? &gt; Eclipse, Netbeans, and Visual Studio And Visual Studio is available for which platforms outside of Microsoft?
Yep. I was trying to get that to work and now I can make my own sheets pop out of windows now. This was extremely helpful.
We will take a look at the error. It could be a bug in the Sandbox that needs fixing, or a Swift issue. Right now we don't really have a way to take in user input, but that's something we are looking toward for the future.
I'd be surprised if you encountered a web API with a payload large enough for it to be a problem. Since the data has to go over the wire, people (rightfully!) keep payloads small. Years ago I worked on a project which included an enormous inventory system. The app included a database in its app bundle, but they wanted to be able to send out updated inventory databases to the apps without a resubmission to Apple. They weren't very techy, so their solution was to send down a 15MB zip file containing a JSON file which would replace the database. I would probably use a library like this if I had bad requirements like that again... Or maybe I'd just write it in Objective-C, which you can see from my graphs is almost 3x faster than JSONCore. This project is niche. I wrote it experimentally to see if I could parse JSON faster by bypassing bridging. When it turned out I could, I just kept going. If people find it useful, cool, but I certainly don't think it's better than or is a replacement for NSJSONSerialization. In fact, since libraries tend to expect `[String : AnyObject]`s as the result from JSON, rather than the nested tree of enum values you get back from JSONCore, I'd recommend avoiding it unless you know you can get away with it!
to be fair one of my old bosses would think that particular PR is valid.
In CoreFoundation you can create two buffers (C arrays of `id`, really), one for the keys and one for the values. You can then call `CFDictionaryCreate` to create a `CFDictionaryRef` with the keys and values. It was a really fast function. WAY faster than creating an `NSMutableDictionary` and calling `setObject:forKey` for as many items. I've now got a similar problem with Swift, but it's made more complicated because of how `Dictionary` works with regards to value types. According to Instruments, a considerable chunk of the CPU's time is spent in `Dictionary`'s subscript set. Project is open source and the performance test is included, feel free to let me know if you get a different result!
Maybe it will, they've also said they're porting across the reference typed collection classes too, so it really depends on if they'll keep it returning reference types (i.e NSArray) or make it return native Swift collections. My money's on reference types though, since that's the only way `[String : AnyObject]` will continue to work, since `AnyObject` requires a reference type. They'd want to make sure they keep the APIs as similar as Apple-platform-provided Foundation. As for bridging performance, you're absolutely correct! Bridging is really fast, so fast that it renders this library mostly academic. For most people's applications you won't notice it at all.
You have to fetch the object and then call delete
So what you're saying is you're a bit of a stack junkie? =o I gather you're correct regarding reference types from what little I know of the subject. Still, I was basing my comment on the notion that a native Swift Foundation would provide a lower overhead than bridged access to Objective-C and Foundation that in-turn calls C and CoreFoundation, but I'd have to research the bridging mechanism a bit more before I could say for sure. Swift &lt;-&gt; Swift &lt;-&gt; C is probably going to be faster than Swift &lt;-&gt; Objective-C &lt;-&gt; C, no?
The view just needs x and y constraints, so you could for example center it both vertically and horizontally, or you could just add top and leading constraints, it really depends on what you want to achieve. No width/height constraints because it will take them from the imageView, but if you want to load the image from code and not in in storyboard, you must put a placeholder image in the imageView, otherwise storyboard will not know the size of the imageView and will start complaining. Clipping the image shouldn't matter as it resizes automatically and it shouldn't go out of bounds.
It's exciting days for all of us, isn't it? Myself I'm looking through their collection code to see if I can find further ways to optimise my use of `Dictionary` :)
swift is open sorced and ported to linux!!
That's a good idea.
why do I do to reclaim results is a array? results is already an array which stores the data for "Users" print (results.last) works. it will print the output as exactly I want in the output window. But I just don't know how I could separate the attributes and display them. 
Try out [this](https://developer.apple.com/library/ios/documentation/Swift/Reference/Swift_StandardLibrary_Functions/index.html#//apple_ref/swift/func/s:FSs8readLineFT12stripNewlineSb_GSqSS_) perhaps? Maybe it doesn't work there?
The last few days I've been reading/following the Language Guide https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html While writing a swift file with lots of junk Foo's and Bar's to exercise all the aspects of the language I encounter. I've also been doing small tests linking obj files from C and Swift. Very exciting stuff calling C from swift, swift makes it super easy. I've also been trying to see if I can reduce runtime dependancies. It looks like if I switch linking from swiftc to gcc I'm able to forgo unused `libgcc_s`,`libgm` and `libstdc++` dependancies which makes me happy. swiftc seems to want to link to all those libs even if they're not used :/ I've never done iOS programming before, I'm doing this on the Linux version. 
From our lead architect: "When I was looking at Foundation last, NSString and especially NSUTF8StringEncoding was not implemented yet." So there's that, I suppose. But we could create a much better error message. I'll work on that for our next push. Thanks for the feedback!
Have you tested against [owensd's json-swift](https://github.com/owensd/json-swift)? I know when I was trying to make my serialiser faster, his was the version I was trying to beat. (well, trying and failing)
I so wish the Swift programming guide was available in print form! I think it's an excellent piece of work, just unfortunate that I can't get it in my preferred medium for study: paper.
Ugh. This shit is punishing Apple for open sourcing their project.
Thank you.
It's been a hobby of mine for the past 16 years. Just toying around with graphics (particle systems, model loaders). I've never done anything significant.
https://twitter.com/_matthewpalmer/status/673088953356947456 "Everyone teasing about the pedantic PRs on the #SwiftLang repo: the first non-@clattner_llvm commit was a typo fix" http://pic.twitter.com/ro6oCCS5Lv
[**@\_matthewpalmer**](https://twitter.com/_matthewpalmer/) &gt; [2015-12-05 10:38 UTC](https://twitter.com/_matthewpalmer/status/673088953356947456) &gt; Everyone teasing about the pedantic PRs on the \#SwiftLang repo: the first non-@clattner\_llvm commit was a typo fix &gt;[[Attached pic]](http://pbs.twimg.com/media/CVdK1chU8AA0IFr.png) [[Imgur rehost]](http://i.imgur.com/Uhv5cqK.png) ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Forced myself to write a menu bar icon control app for my Insteon home automation equipment. I have a background and education in programming - so it wasn't a huge stretch. It's a beautiful language and I can't say that about many of them. 
Swift will soon be running mission critical server side apps where performance is very important. It sounds like performance isn't too important for you which is good but many problem domains require "to the metal" performance.
Note that the file you linked is completely empty and has NSUnimplemented() instead of real implementations. There's some great talk on swift-corelibs-dev about NSJSONSerialization right now. https://lists.swift.org/pipermail/swift-corelibs-dev/
@foBrowsing, thank you. Feedback is much appreciated. I've gone ahead and marked the most recent answer correct as it seems to explain what is really going on here. Also, you suggestion for a Patricia Trie is duly noted. Certainly seems like a worthwhile optimization. Furthermore, do suggest using any other data structures for a spell checker? Trie seems like the way to go but given the enormous amounts of memory they consume I'm having second thoughts.
the language gets updated too often currently, your hard copy would become obsolete every few months. It will make sense to have it in paper once 3.0 is out
Here's my quick-and-dirty version of the first half of that article in a lazy form: https://gist.github.com/oisdk/a4a10bebbf084d17bb96
As expected. 
You can unwrap it safely using the "if let" clause: if let firstNode = firstBody.node as? SKSpriteNode, secondNode = secondBody.node as? SKShapeNode where ((firstBody.categoryBitMask &amp;amp; PhysicsCategory.Monster != 0) &amp;amp;&amp;amp;(secondBody.categoryBitMask &amp;amp; PhysicsCategory.Walls != 0)) { monsterDidCollideWithWall(firstNode, wall: secondNode) } 
Yes, thank you. That worked!
That's not the output, that's just telling you what each line evaluates to. The print function always appends a \n to the end so that the cursor drops down a like every time somethings is printed. Incase you weren't aware \n means new line. 
Anywhere worth working, that is.
You're a programmer
Probably no where in the near future. OS X will still be the only platform for iOS development for a long time I'm sure. However, swift in Linux means you can write Linux applications with swift! So front-end and back-end code can be written in the same language which is awesome!
Which will be useless for iOS development due to lack of iOS SDK.
I read the free ebook when it came out, and then I converted one of my apps from Obj-C to Swift. Took a little work and some occasional googling, but it wasn't terribly hard.
I wrote a few simple Obj-C Apps for iOS and learned programming in school and now at university. When Swift was released I didn't really have to do learn anything, nevertheless I had to get used to the language. So now I'm a basically playing around with Swift. Basically trying simple stuff in the playground just to see how it works. But now Swift is also released on Linux I get to try out what works with Linux and what works differently 😄.
So? There would be plenty of legitimate uses for AppCode on Linux, assuming Swift takes off for non-iOS things. I wouldn't imagine Apple is ever going to support iOS development outside of OS X. I don't think they've even said anything along those lines. 
which is exactly my point. Why would you want to write/run swift apps on linux? It offers no advantage over C# or Java.
It's far from entirely useless. I have written some apps in C and made them into command line interface apps which can deploy on windows/osx/linux. So on OS X they have a cocoa UI on top of them, and have UI's in other languages for their linux/windows UI's. The UI is trivial in this case compared to what the command line app does so it saves a lot of time that way. Of course, now, the command line app could be written in swift.
At the very least swift is a language many people in the apple ecosystem have liked and possibly more will find uses for it outside. I'm personally interested to see the future of it on the web. 
I have a background in Java (AP CS), and I've dabbled into other languages. I started reading Apple's Swift Documentation, and I've learned a lot in the past week. The only tricky concept was optionals. When I didn't understand something, I would find other tutorials about the subject (ie. Swift's function parameters) I guess the OOP background really helped me. 
I mean, I guess I see why *you* wouldn't want to. I happen to love Swift's features and syntax and would definitely prefer it over C# and Java, if I had a choice.
One reason is that iOS and OS X developers could use it for their web back-end. Marco talked about wanting to do just this on the latest ATP.
You can't write to your bundle. Use NSSearchPathForDirectoriesInDomains to get the path to the documents directory and write there.
&gt;&gt; Your claim was that C++ had world-class tooling available &gt; Quote the statement you're referring to. I am about 109% sure you are inserting words into my mouth. And now begins the backpedaling because you can't find a single IDE released within two years of C++'s release date, even if you engage in historical revisionism on the date, but more about that in a bit. You redefined IDE to include text editors as was convenient for your argument that C++ had good tooling out of the gate. About that ... if Emacs is an IDE then Swift has an IDE on Linux. Of course you already demonstrated that you'd hold Swift to a higher standard: &gt; "We're not in the early 90s anymore" You were pissing, whining, and crying about tooling, saying such things as "We're not in the 90s anymore", citing a lack of cross-platform IDEs for Swift on par with the likes of Eclipse, NetBeans, Xcode, and VisualStudio as justification for your own impatience on the matter of tools. &gt;Secondly, C++ was released in 1985, not 1983. "The C++ programming language has a history going back to 1979, when Bjarne Stroustrup was doing work for his Ph.D. thesis." [source](http://www.cplusplus.com/info/history/) "In 1983, it was renamed from C with Classes to C++" [source](https://en.wikipedia.org/wiki/C%2B%2B#History) The book, *The C++ Programming Language* was released in 1985. Perhaps that is what you're thinking of. =) &gt; Thirdly, Borland C++ for DOS' IDE was just as terrible You're the one citing Borland as an example of high quality tooling. BRIEF is described as a text editor by Wikipedia and Epsilon is some kind of Emacs clone. So basically you're substituting one text-editor for another after I called you out for calling Emacs an IDE. &gt; I didn't know an IDE didn't count if it wasn't developed by the compiler maker. You have stock in a straw company or something? Care to quote me? No? I didn't think so. To be honest, this is so off the mark that I can't even tell what it was said in response to. &gt;IDEs for C++ did exist, with full support for the tooling, very soon after it's commercial release Right. About those ~~text editors~~, I mean IDEs you named.. * Brief: classified as a text editor on Wikipedia. * Epsilon on MS-DOS systems: a text editor modeled on Emacs * Epsilon on Windows: same as above * CodeWright: initially released in 1991 (6 years after your C++ release date) * UltraEdit Studio: based on UltraEdit itself initially released in 1994 (9 years after your C++ release date) * SlickEdit: initially released in 1988 as a character mode editor and still (3 years after your C++ release date) So you criticize the Swift open source project for not having fully modern IDEs available on all platforms within a week of release when it took these simplistic so-called IDEs years to support C++? I lol'd. &gt; You'd have to have been pretty clueless to know about the Swift Language changes and not know about the tooling that automatically converted it in Xcode Did you even read my what I said or are you just trying to be daft? I said I corrected my code based on the output of the compiler and static analyzer. I was aware that an update had been released, I wasn't aware of the specifics of the update, and based on toolchain output, I was able to adapt my project rather easily. So basically I did it without paying fuck all of attention which kind of destroys your argument that it is some massive hassle. Granted, it isn't pleasant. The folks behind Swift are aware of that and are working to address it. At the same time, people are also working on tool support. And it didn't take years. &gt; Can you lie any harder? I've not lied once. You on the other hand have intentionally misrepresented what I've said in an effort to construct bizarre straw-man arguments. Predicated on that and your similarly bizarre need to categorize to my experiences as lies for the fact that they aren't conducive to your arguments, you can kindly go f*** yourself. :)
please help. I have tried to follow some online examples. But it seems those are not working . 
That looks AWESOME! 
Personally I wouldn't test with a jailbroken device unless it's that's your target demographic
No app will cause your device to lose your jailbreak. It's not possible for them to mess up your device, if that's what your asking. As for developing on a jailbroken phone it's fine, the jailbreak won't cause any issues and if it happens to cause an error uninstall the tweak causing that error.
[removed]
Hi, Sebastian (SwiftyBeaver project creator) here. Thanks for mentioning! Any feedback is appreciated and I am here for comments or questions. Thanks again &amp; I'm looking forward!
Happy to help! I usually use a BSD or MIT license myself, but there aren't many patents involved in my work. =p
Yeah, this is my perspective.
Ah, thanks :)
It definitely is. I also went through [Big Nerd Ranch's Swift preview book](https://www.bignerdranch.com/documents/swift-prereading-assignment.pdf) for the basics. 
Thank you for this affirmation. It put a much needed smile on face.
OK, that makes no sense, but thanks.
Great, thank you.
Ok, thanks for the help! I edited the main post with the code. It's working but I have no idea how to create the image I have in my mind. I wanted to try adding circular gradients that slowly "float" around but I am having trouble figuring that out. 
So, let's see where we stand. "It's working...". Well, that sounds like good news! I haven't run your code, but it looks like it might create a green/blue gradient, then animate that to a blue/blue gradient? "...but I have no idea how to create the image I have in my mind." I'm finding that hard to understand, unless you mean that the circular gradients slowly "floating" around is what you have in you mind. Let's assume you want these circular gradients floating around, and that's what you want to figure out. So, the first thing I would do is break it down into multiple parts, because in programming, unlike in real life, a big target is much harder to hit than a small target! One obvious breakdown would be: 1) draw a gradient circle which sits still, 2) make the gradient circle slowly float. As far as 1 goes, I don't have a lot of experience there, and a bit of Googling suggest that CAGradientLayer can't handle radial gradients. There is NSGradient, but it seems to be available only for MacOSX. Or there is CGGradient. And there might be something to be done with CIFilters. So, as far as the gradient, you'll have to google around and see what is available (don't forget that using a playground is a fast way to 'try stuff' !!!!) Whichever way you get the gradient circle, I would recommend putting each circle into its own view. Because that nicely isolates a gradient circle into its own object and views have loads of methods to manage them, and very easy animation methods (much easier than layer animation). So, I would use view animation to have them float around. Here again, a little googling will yield loads of help in view animation, including moving a view (animating the frame). 
Last week Swift got open-sourced and all commits became public. Using a tool called 'Gource' I visualised all those commits. So you're basically looking at people changing files.
16 years of tinkering... You've got a lot more background than most CS graduates. 
Pretty much read it cover to cover the first week after it was released to get a lay of the land. Then I just started using Swift instead of ObjC and use the book as reference. 
So excited for these to continue popping up
There's a chapter on the new framework in iOS 9 by Tutorials. http://www.raywenderlich.com/store/ios-9-by-tutorials?source=chriswagner
I too am new to app development however this actually makes perfect sense and is really good advice your shouldn't dismiss. Why would you want to test your code on a modified platform that most of your users won't be using? Sure the jailbreak might not impact your app, but what if it does. What if hypothetically there is a bug in your code that is hidden as a result of some change the jailbreak made. You don't see this during testing, so you attempt to submit the app. Your best hope is that Apple finds the bug and rejects the app before it hits the store. If not then you stand to receive a lot of negative reviews for releasing buggy software. Negative reviews can directly translate into lost sales. Ultimately it boils down to the level of risk you are willing to take. You state that you are a new programmer so frankly at this stage I wouldn't worry about it. As long as you can connect to the device and execute the app then have fun. When you get the point that you are thinking of putting an app up on the store I would seriously recommend you test on as many different devices (include OS versions) as possible, and I would be careful to not rely on devices that are modified by a process external to the Apple update process. You really don't want to introduce new variables into the mix when you are talking about a commercially available product. You want your testing to performed in an environment that will mirror your user's as closely as possible. Full Disclosure: I am unfamiliar with how jailbreak apps work. Perhaps they are less invasive than I believe them to be. I am mostly basing my opinions here on the assumption that they would have to at least provide support for running unsigned apps which means changing the mechanism by which an app is loaded. If they are injecting themselves to this level then there is a chance they could introduce code that could mask issues with an application. Having said that my regardless of how intrusive the jailbreak app is I would still avoid testing my apps on a jailbroken device, just as I wouldn't submit an app that has only been tested in the simulator. Just remember you generally only get one shot at establishing a reputation, we should always strive to make sure it is the best impression. Ensuring that our products are as stable as we can make them will go a long way to fostering a positive reputation. Users are far more willing to accept that some features haven't been implemented than they will be if they are implemented poorly or don't work.
Do you know of any other tools like this that similarly visualize graphs like that?
If I was feeling ambitious (or even competent) I'd consider writing bits of Unix userland in Swift just for the hell of it...
How do I compile this thing on OSX? `swift build` does't work
First the web frameworks, next the world. 
Understand data structures and algorithms as well as time complexity.
There is also [Julia](http://julialang.org/), which is very easy for beginners, full-featured, open source, and very fast.
Some more background would be useful to effectively answer your question. As it stands, I'm inclined to agree with others' comments about learning data structures and algorithms, big-o notation, and likelihood of using different platforms. I think it's crucial to note that the language itself is only a small aspect of things. Unless you're venturing off the beaten path a lot, good languages tend to stay out of your way and not require a lot of obscure or intricate knowledge about how things are done. In my experience the real investment of time comes with learning frameworks and libraries; be it Boost, the Cocoa &amp; CocoaTouch frameworks, or even a language's standard library.
Is there an article on the history of Swift? Looking at this it seems like somebody's pet project at first. 
This seems quite keen! Thank you for sharing your project and experience!
Ive literally just started on hackingwithswift. But i cant do much because finals right now, but was going to focus on that over winter break. Once i finish that, i was planning on working on an app my friends wanted me to do for iOS because im the only one with a mac. The reason im asking is because theres so many languages that interest me, and I always jump around thinking "oh javascript is important" "oh wait but i need C for embedded systems" "but what about webapps". My problem is i keep wondering if im wasting my time learning a certain language that i decided i should just stick to one, ignore my other thoughts, and go with it. So then I just decided swift because of this project my friends were interested in doing. Was wondering if i could expand that into a career or use it for other platforms now with open-source (which doesnt seem likely). So maybe if i learn swift ill be able to learn other languages with a little more ease? I am learning java at my uni, but all the stuff swift uses like UITableView and so many more it seems overwhelming. Theres so many! So much work to do over break. 
To generalize there are two different ways you approach building your experience either by generalizing or specialization. Again I'm generalizing but normally medium to large companies tend to favor specialization over generalization. Smaller companies such as agencies or startups have a greater need for generalization. You'll most likely want to become what might be termed a T-shaped engineer. That being a deep knowledge in one field, with some generalization. My suggestion would be to find a field you like, iOS development if that is your interest, and start building experience in it. While you are building experience in that specific field read both in your area and outside of it. For example read iOS blogs such as Mike Ash's blog or Natasha the Robot's blog then keep your eyes open for other interesting topics. A lot of outside knowledge helps shape what you do in iOS development. For example many people have taken their side experience with functional programming and applied it to Swift and some people are starting to take ideas from CQRS with Flux/Redux and apply it to iOS architecture. Starting to get long winded. To be straightforward, there are plenty of job opportunities in iOS development. I constantly hear from recruiters looking for experienced iOS engineers. It's a good field right now and one that you could build a great career in specialization. But a bit of general knowledge is good, so do some of that too. You'll always be learning and never come to a point where you master it, so don't feel bad if you feel like you don't know enough, just keep at it.
Thank bluebx. It works. Thank you so much. but now i have an new error. 2015-12-06 21:35:34.508 ContactPicker[2466:236089] [CNUI ERROR] Person selection predicate is set but the delegate does not implement contactPicker:didSelectContact:. The predicate will be ignored. &lt;CNPhoneNumber: 0x7a83a2a0: countryCode=us, digits=8885555512&gt; 2015-12-06 21:35:40.614 ContactPicker[2466:236170] plugin com.apple.MobileAddressBook.ContactsViewService invalidated How to resolve this issue? and I also don't see it shows in the tableview.
Have a look at [this answer from Quora](http://qr.ae/RbP3Oy). It mentions [LiClipse](http://www.liclipse.com), Sublime Text, Atom, Vim and a proposal for Jetbrains.
um lol html and css aren't even programming languages dumb ass. So yes to make a native application you will need either by learning swift straight of or learning objective c then learning to use swift
I am in the exact same boat as you. Started hackingwithswift, got overwhelmed, became busy with finals and other coursework, and now I have a lot to work on during this break. Shall we work together?
Chris Lattner's Homepage at : http://nondot.org/sabre/
I've started using this pattern a lot, especially in UIView subclasses. Even if my usage doesn't always fit the usual reasons to favor lazy loading, I find it leads to much cleaner code structure, since the configuration of each subview sits directly under it's declaration. My initializer needs only to add the subviews and nothing more. Would love to hear thoughts on whether there are any downsides to this approach. For example: lazy var nameLabel: UILabel = { let nameLabel = UILabel() nameLabel.font = UIFont.appFontGothamMedium(size: 13) nameLabel.textColor = UIColor.appBlackColor() return nameLabel }() lazy var dateLabel: UILabel = { let dateLabel = UILabel() dateLabel.font = UIFont.appFontGothamLight(size: 11) dateLabel.textColor = UIColor.lightGrayColor() dateLabel.setContentCompressionResistancePriority(1000, forAxis: .Horizontal) return dateLabel }() lazy var subtitleLabel: UILabel = { let subtitleLabel = UILabel() subtitleLabel.font = UIFont.appFontGothamBook(size: 13) subtitleLabel.textColor = UIColor.appBlackColor() subtitleLabel.numberOfLines = 0 subtitleLabel.userInteractionEnabled = true return subtitleLabel }() override init(frame: CGRect) { super.init(frame: frame) commonInit() } required init?(coder aDecoder: NSCoder) { super.init(coder: aDecoder) commonInit() } private func commonInit() { for view in [userImage, nameLabel, dateLabel, subtitleLabel, commentLabel] { view.translatesAutoresizingMaskIntoConstraints = false addSubview(view) } }
I've done quite a bit of interviewing and I ask questions in three categories: 1. Basic development skills: OOP principles, patterns, unit testing, etc 2. Core platform components: for iOS this might be about NSURLSession, UITableView, delegates, blocks, GCD, etc 3. Problem solving: write code on the whiteboard that does X. Number 1 &amp;amp; #2 is all about what you already know. You can't fake it, you either know or don't. I don't expect you to know everything, it just gives me a sense of your level and experience as a developer. #3 is where you can shine or flop. I want to see how you think. You won't be familiar with the challenge I give you; I want to see how you solve a problem. For this it's important to talk it out. Thinking quietly for ten minutes the writing a good solution on the board is worse than struggling with a problem vocally and talking it out with me, trying something, seeing a problem, then trying something else. So, TL;DR: know your basics, know your platform, and think out loud... 
Do you do all your programming vocally by the whiteboards? This stupid practice has to go. 
I think you missed the target of the exercise: it isn't about programming. It's about communication **and** problem solving skills. I usually do the whiteboard to explain strategies or thoughts to my colleagues, and believe me, it helps a lot to work effectively. 
how is someone going to make a career in iOS development without programming languages. (@)_(@) 
You're an idiot. I asked if HTML/CSS/Javascript was needed, not if they're programming languages. Learn to read before making a stupid, non-essential comment.
As for the web frameworks in Swift, there are also: [Swifter](https://github.com/glock45/swifter), [Perfect](https://www.perfect.org/), [Tailor](https://tailorframe.work/) and [Taylor](https://github.com/izqui/Taylor).
AppCode doesn't support Linux. You can [upvote this ticket](https://youtrack.jetbrains.com/issue/OC-12853) to make it happen.
There is a [issue](https://youtrack.jetbrains.com/issue/OC-12853) for that.
It would be very helpful if you could post your error. Btw. There are free iOS Starter Videos from the Stanford University. They should help you as well. 
It's an annoying practice yes, but it's usually to see how someone tackles problems. Once you're in the hiring shoes, you start understand the need for it. 
The playground is not console output. The playground displays values in a different way, including displaying special characters like \n (newline). The debug output is not the console either. Run the program in an actual shell to see the actual output.
Don't use an optional array. Also, you can just inline initialize it (and then you don't need the type annotation): var appleProducts = [AppleProduct]() 
At the swift level there probably isn't any difference. However variadic parameters are necessary to interface with legacy C or Objective-C code. Thanks to variadic parameters you can still call C's printf without extra conversions on your part.
Perfect, thank you!
Because they are 1. Rarely used (especially since you also rarely need C-style for loops). 2. Non-obvious, especially to beginners. 3. Not much shorter than x += 1. 
Well that's true. The only time I use them is in for loops.
The logic for this function is: - if we have 2 valid (non optional) ints, return their sum - otherwise return nil The return type Int? means that the function can return either an Int or nil, in the x + y line, you have 2 valid ints so are returning their sum. Any other state (i.e. either of the inputs are nil) means you cant sum them, so return nil. You don't need to force your response to be an optional, the compiler will handle that for you
Your `guard let` statement has ensured the values of `optionalA` and `optionalB` are not nil. They have been re-defined as non-optionals by the 'let' You can prove this by command hovering overing over `x` and `y`. Their types will be `Int` as apposed to the `Int?` parameters.
Great! I wasn't sure if I misunderstood something, or if the compiler did something behind the scenes. Thank you!
Why would I use this over the free XCode, or even the JetBrains backed AppCode which is $9 more?
`Wrapped` refers to the type of thing which the `Optional` wraps. It's a `typealias`. An example that might be a little easier to understand is an `Array`. If you want to write a method on arrays that returns the second element, you might write something like this: extension Array { func second() -&gt; ??? { return self[1] } } The `???` refers to the type of thing returned. What should go in there? Well, it turns out that `Array` has the `typealias` `Element`, which refers to whatever thing it stores. So you can write this function like this: extension Array { func second() -&gt; Element { return self[1] } } And if you use it on, say, an array of `Int`s, it will fill in the type correctly: [1, 2, 3, 4].second() In the case of `Optional`s, the `Wrapped` `typealias` works like this: let x: Int? = 2 // Wrapped == Int
IBAction is syntactical sugar so Xcode knows that this function can be connected to a UIControl. Besides that it's a regular function. And functions have nothing to do with the responder chain. I'm not sure what you want to do, please post code. 
Sorry for being vague. I'm very new to swift/xcode [here](http://i.imgur.com/PnYE0ml.png) is a snapshot of my code/story board that should help explain. It's a text field that I connected to the ViewController as an action. When the page loads I want the field to be selected and therefore have the keyboard appear. Thanks for the help!