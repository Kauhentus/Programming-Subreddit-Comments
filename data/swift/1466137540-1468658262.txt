Sure, but I want to be clear: I'm a *rank* amateur, it's mostly simple-minded boilerplate wrapper code, it's a *long* way from complete, and I have *never* tried to use it with Swift or Xcode, because there's no Objective-C bridging yet on non-Mac platforms - but it's open source, so have at it, and if you can get some use from it, then I'm happy for you. You'll need to install ObjFW from its git repo (https://webkeks.org/git/?p=objfw.git), too, and of course GTK+ and its development headers, before it'll build. https://github.com/KyleCardoza/GTKKit
If the table view is a direct subview of view then you can use the visual format language API: tableView.translatesAutoresizingMaskIntoConstraints = false var constraints: [NSLayoutConstraint] = [] let views = ["tableView": tableView] constraints += NSLayoutConstraint.constraintsWithVisualFormat("H:|[tableView]|", options: NSLayoutFormatOptions(), metrics: nil, views: views) constraints += NSLayoutConstraint.constraintsWithVisualFormat("V:|-30-[tableView]|", options: NSLayoutFormatOptions(), metrics: nil, views: views) NSLayoutConstraint.activateConstraints(constraints) If this is not the case then you can always revert back to initialising the constraints directly: tableView.translatesAutoresizingMaskIntoConstraints = false NSLayoutConstraint.activateConstraints([ NSLayoutConstraint(item: tableView, attribute: .Leading, relatedBy: .Equal, toItem: view, attribute: .Leading, multiplier: 1, constant: 0), NSLayoutConstraint(item: tableView, attribute: .Trailing, relatedBy: .Equal, toItem: view, attribute: .Trailing, multiplier: 1, constant: 0), NSLayoutConstraint(item: tableView, attribute: .Top, relatedBy: .Equal, toItem: view, attribute: .Top, multiplier: 1, constant: 30), NSLayoutConstraint(item: tableView, attribute: .Bottom, relatedBy: .Equal, toItem: view, attribute: .Bottom, multiplier: 1, constant: 0) ]) Hope this helps!
'Working on' may be the operative word. I've been working on a Cocoa backend for IUP as time allows. My repo is here: https://github.com/ewmailing/IupCocoa IUP is a cross-platform _native_ GUI library written in C, with the idea that other languages can create bindings to it. It has native Windows, GTK2, GTK3, Motif backends, but unfortunately no Cocoa, which is why I'm working on it. As for Swift, here is an example of somebody else already getting IUP+Swift working on Linux: http://www.allbasic.info/forum/index.php?topic=428.msg4578#msg4578 IUP has an interesting API design. It isn't classical Object Oriented for very good reasons (all the native backends may not have compatible OO models or be OO at all). So when I squint really hard, I see something that resembles Protocol Oriented Design, at least as close as C can get. I'm interested in eventually building a Swift layer that explores these ideas. 
I'm just commenting for the R&amp;M reference. Not what you're looking for but check out React Native and Xamarin.
There are two differences between a Websocket and a normal socket. 1) a Websocket requires a special HTTP handshake and 2) a Websocket exchanges data as frames. A normal socket does neither of these. And it is impossible to instantiate a normal socket over http without using Websockets. The full Websocket spec https://tools.ietf.org/html/rfc6455
Couldn't this be the result of one of the changes that Swift 3 introduced? Try selecting a toolchain for Swift 2.2 and see if the problem persists. Either that or try creating a new project in Xcode 8 as opposed to opening one you created in previous versions.
I think the [Electron](http://electron.atom.io) library from github could also be interesting for the GUI part. They use the Chromium web engine and HTML / JS for the GUI, would be interesting to see how well this works together with Swift.
Glad to hear Christian Laettner's doing well these days. 
Actually, it seems you can add phone numbers to the block list programatically. But it must be a full phone number, no wild cards to block a range or match area code, unfortunately.
The functionality to do If let thing = stuff, it = what { } from Swift.
Sounds like talk around the dinner table is really boring
Are you serious?
&gt; "TCP isn't cool so we reinvented it... over HTTP!!!!111". WS is explicitly built upon TCP (it was [originally called TCPConnection](http://www.w3.org/TR/2008/WD-html5-20080610/comms.html#tcp-connections) back when it was just an unspecified placeholder for something the HTML5 WG wanted to include). &gt; More seriously, it probably exists out of necessity to reach all browsers which may be behind 'port 80 only' firewall configurations, as are typical in business. There's that, and also the ability to upgrade from a regular HTTP connection and a security model (e.g. same-origin restrictions).
I love this course. The only thing I would be worried about would be the base knowledge needed to get started. The Stanford programming fundamentals course on iTunesU might be good for that. 
Gross. I loath js stuff like that, sorry. I'd rather write assembly than deal with html and js on a real platform.
Oh man. Again, js solutions have no interest ti me. Xamarim (mono) looks okay but I think at that point I should use Java. Xamarin may disappear at any moment.
Weekly dose of #Swift, #iOS, #appDevelopment articles and resources right into your email. Subscribe and join the club.
[removed]
I know. I'll do it if necessary, I just wanted to make sure there wasn't a better option.
Hi Third_beach! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/4okb0m/review_of_app_development_of_swift_by_apple/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
You don't need to learn obj-c to use the framework in your swift code, just as you didn't need to learn it to use apple's APIs (which are also written in obj-c). You can view a generated swift "header" and never need to see the obj-c code if you don't want to. 
No 
Make a free developer account at developer.apple.com. You can download Xcode 8 beta from there. There's nothing to lose, and it's working great for me so far!
Instead of waiting? Yes you should. 
Don't wait. It's not going to change that much, and , in software development, change is constant. You need to get used to it.
Do you know any good videos or tools I could use to learn? I have a 10 day free trial to Lynda.com but they only have videos for swift 2. 
https://www.hackingwithswift.com
In the most part, no. Just a bunch of Google foo. Know what you want to accomplish, and ask how to do it e.g. Just google “how do I do x in swift”. It's surprising just how often that simple query will give you a usable result. StackOverflow is also handy. Stuff I'm certain you're already on-top-of. Unfortunately I'm speaking from the privileged position of being a long time developer with lots of experience in multiple languages so it's easy for me to translate concepts between languages, which may not be the case for you if you're new to software development. Sorry it's not much help.
 git checkout &lt;lastworkingcommit&gt;
How is this related to Swift? This is clearly an API issue and not a language-issue. Please visit the appropriate subreddit.
How is this related to Swift? This is clearly an API issue and not a language-issue. Please visit the appropriate subreddit.
&gt; a Swift-native wrapper for GTK+ on Github, Oh god, please no. Same goes for Qt bindings for Swift. We got a new language - can't people just design a new modern UI framework that's not based on wrong assumptions from the 90s? 
&gt; StackOverflow is also handy. Stuff I'm certain you're already on-top-of. nope I'm starting at zero I have no idea what I'm doing I just have a a pile of notes that I have jotted down whilst working at my minimum wage job for the past 6 years of applications that I would like to create.
[removed]
[removed]
I think you have access to all videos ever uploaded. 
Have you tried making your view controller a delegate of the wheel? Normally data shouldn't go to the storyboard at all but from an object like your dial to a VC that has been designated a delegate for it.
An excellent starting point. You've actual work to do, and therefore motivation! Effectively you're going to learn in the best possible manner, by translating your ideas into reality. A couple of key questions; 1, What are your graphic design skills like? Can you use PhotoShop or Inkscape for example?, 2 Do you understand the basic principles of programming? Can you break a problem down into smaller parts? For creating iOS applications graphic design skills are an important factor. Personally I was lucky, my first career was in publishing as a designer and I've programmed since I was 12 so I had a head start there too. Remember though, that you're never too old to learn. As an absolute beginner you'll need to go through about 6 months to a year of frustration before you’ll just get it. After that it'll become progressively easier. As to where to start, I'm afraid I'm probably not quite the right person to ask. I was self taught (aka I read books) for about a decade prior to the birth of the Internet, long before online resources were commonly available. Hopefully someone with more recent experience can point you in the right direction. Also, I should pay more attention to the subject of the post. 
XCode 8 is reported to be a bit buggy ... at least what I'm seeing from reputable tweeps on Twitter. I'd learn with Swift 2.0 and code in 2.0 until you do something that you are building to ship. Basically ALL of your learning tutorials out there are in 2.0. That is a mountain of information. This includes the official Apple Swift book, which is something you definitely want to be reading. The changes aren't so great that you can't swap around the bits that are different. But there is a vast amount of commonality and you really want to get a handle on that. The materials out there in 2.0 will help you achieve that. I would honestly forget about 3.0 for the time being until you've got the fundamentals down.
Until you give your rate to a potential customer and he goes "oh, come on, coding is easy. I just don't do it myself because my time has more value than just typing the codes". True story, 6 months ago. Have that happen to you and then we speak about "elitism".
You can do lines off if you have a referenced starting point of the jump
Hi there, I'm using applyImpluse at the moment to make my player jump. Reference starting point of the jump = player.position? Also whats the code for lines off?
And by "2.0" you mean "2.2" or 2.3
The language changes are easy to deal with now. The API's will become less verbose but will be familiar if you know Swift 2.x. I would go with Swift 2 and use the syntax converter in Sept. There are several thousands blogs and dozens of books in Swift 2. http://www.h4labs.com/dev/ios/swift.html http://www.h4labs.com/dev/ios/books 
Adding the a new subclass just insta crashes my IDE lol
AnyObject is only classes. You'd want Any to go to a value type like Bool If your dealing with obj-c the AnyObject is probably a NSNumber, so casting to that and getting the bool value would also work. 
tupleArray.map { ($0.0, $0.1 as? Bool) }
In case anyone is interested in this topic, I was able to submit a Swift 3 build to iTunes Connect, so that seems hopeful at least
There's a lot of Obj-C only pages...IF you're option+clicking inside Xcode. For example if you option+click UIAlertController, you'll get an Objective-C page with no option to change to Swift. If you google UIAlertController you'll see Objective-C, Swift, or both. 
Python got them from Haskell though (where it'd be `[x * 2 | x &lt;- [1..6], even x]`), so call them Haskell comprehensions, or even better: list comprehensions. But yeah, I'd also like see something similar in Swift.
... That is nowhere near as readable as a list comprehension. A map embedded in a flatMap is considerably harder to read than a comprehension which reads plainly in English. Swift is being designed to be easy to learn and write good code in. Combining multiple higher order functions is not readable or easy. Comprehensions are. 
&gt; That is nowhere near as readable as a list comprehension. http://i.qkme.me/3s3k1d.jpg &gt; Combining multiple higher order functions is not readable or easy. It took me literally 15 seconds in a playground and I haven't touched swift code in months.
In years past, when submitting for review. If it was made with a beta version of Xcode or on a beta version of macOS the app review fails. 
It's going to get denied. Apple won't accept submitted builds compiled from a beta SDK, because, well, it's a fucking beta. As in, not done. It's pretty unprofessional that you're willing to subject users to that sort of headache as well.
Oh. Well thank you.
That's not the problem here, because `Bool`, `Int`, `String` etc will all be implicitly bridged to (and from) their Objective-C reference-type counterpart.
That's great, clearly you're the superior programmer. I have a very good education and a good job where I'm considered to be quite good at Swift and I would not have thought have using your code to solve this problem. Comprehensions make it obvious and simple.
The official swift programming language book has a good explanation. https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html
 let dateFormatter = NSDateFormatter() dateFormatter.dateStyle = NSDateFormatterStyle.MediumStyle for object in objects { self.users.append(User(date:object.createdAt, userId:self.users[object["userId"] as! String]!, url: object["linkURL"] as! String), title: object["title"] as! String) } self.tableView.reloadData() where users is: var users: [User] = [] and User is a struct with those members
https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003137.html I used to do some Python, and list comprehensions can be really handy. But I don't think they really add much, and it doesn't seem worth the cost of every programmer learning them just to have slightly nicer syntax. They're also not recommended for anything complex in Python, because the code becomes difficult to scan/understand at a glance. I think map, filter and reduce have the same potential pitfalls. You can make really clever one liners that transform an array, but it's usually best to break them up into multiple operations for clarity.
I wrote a free online book called [Hacking with Swift](https://www.hackingwithswift.com). Take a look and see what you think!
&gt; 1, What are your graphic design skills like? Can you use PhotoShop or Inkscape for example? I have used PhotoShop back in High School, so I understand the basics. My wife is a commissioned artist so I can always ask/have herd things for me &gt;2 Do you understand the basic principles of programming? I have had a semester of a Visual Basic class and I tried to learn Python about 6 months ago so i've completed multiple lessons on the basics but I have no idea how the basics are useful every time I learn what a float is I feel as if it's meaningless.(I know it's not)
Yes, but please take it slow – a lot of people ask me "how long will it take to read the whole book?", then set themselves the goal of 1, 2, or even 3 chapters a day. That's a mistake: read at the pace that suits you, go over things twice if you're not sure, follow the challenges and test yourself – do all that and you will remember far more :)
For me, The best course of Swift is "CS193P iPhone Application Development" of Standford University. IT has doc, videos and examples. The teacher is very good! http://web.stanford.edu/class/cs193p/cgi-bin/drupal/
Except it works fine when you switch to Any, in both Swift 2 and 3. It may be a bug that the Swift 2 compiler doesn't realize it can implicitly bridge in the case of a tuple. In Swift 3, [implicit bridging is gone anyway](https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md). Swift 3 gives a much clearer error message: "Bool is not a subtype of AnyObject."
Weird, because it works fine for me. Edit: no, you're right; my (iOS 10) playground wasn't showing any errors because it was crashing behind the scenes. Hmmm. 
This course is really great! Blut it's very hard, I'd even say too hard if you never coded before.
I think it's probably a bug, because as you pointed out, it should be possible to cast `Any` to `Bool` (and if it isn't, the compiler should complain).
no worries, next thing to check out is Stanford’s lecture on iOS programming avaliable on iTunes U. I wish you the best.
I'd agree that if you have never coded before CS193P is not the place to start. Try working through Hacking with Swift, and reading through Apple's own Swift book first. Then give CS193P a go (and if you really want to learn how to code that is a course you absolutely should do at some point).
I just read this on hacking with swift:"Swift 3.0 is changing pretty much everything, and your code will almost certainly refuse to build until you make the necessary changes. Seriously, if you thought the jump from Swift 1.2 to 2.0 was big, you ain't seen nothing yet" worries me
[removed]
You're right. I didn't notice the first check somehow. 
Nothing against "Hacking with Swift" and other iOS dev resources, but since you're new to coding overall, I'd learn the Swift language itself before trying to dip your toes into actual app development. Here are a couple of great books that will help you: * Swift Programming: The Big Nerd Ranch Guide * Swift Apprentice (from raywenderlich.com) These are not "online" resources (though you can get e-book/pdf versions of both), but they are, in my opinion, two of the best teaching-oriented guides to the Swift language. And if you're new to coding, you're really going to need that foundation. In my view, the Big Nerd Ranch book is the better overall guide between the two, but the big advantage of Swift Apprentice is that it will receive updates through Swift version releases (assuming you go for the pdf, which is the smart option), and it's also a very good Swift guide.
if you have an iPad, try out the new Playgrounds app. it's part of the iOS 10 beta. 
I'm fairly certain that this isn't possible for the same reason as up casting an array is not possible, because it would lead to a type system hole. 
I find pythons list comprehension in general to be poorly suited to expressing complex tasks in a readable manner. To be frank I really do not enjoy nested operations in that order. Also an alternative approach is do design a permutation extension method and use that if you find the existing approach insufficient. 
Here here! Can't stand JS GUI's. I'd rather write Cobol on a 1980's HP mainframe
Just as a programming language. Swift isn't mature enough, where it makes sense to write a kernel and operating system on top of said kernel. Not to mention that it's still very much beta, and likely doesn't work outside of an Ubuntu or OS X environment very well at all. 
I have gone through this course and for a beginner it is not a bad choice at all (and it is free which many will see as a plus). At the time I took they were still updating some of the course to Swift 2.0 syntax, which should be done by now. (The fact that it is 2.0 vs 2.2 syntax isnt a big deal but with Swift 3.0 coming out in Fall I might caution people from not learning with materials updated to Swift 3.0...it depends on the person and their comfort with programming). Because it's free there is no harm starting it and seeing how it works for you. But I would also say that the Big Nerd Ranch book, Hacking with Swift, and then into the Standford iTunes U CS193P course seems to be a much better route for a beginner to take based on my own experience, and what many others here and elsewhere have said.
EDIT: It works! the following sort worked perfectly: self.userList.sortInPlace{ $0.date.compare($1.date) == NSComparisonResult.OrderedDescending } Great! That works, thank you! Right before self.tableView.reloadData() i added this: self.userList.sortInPlace{ $1.date &gt; $0.date } It almost worked...it sorts way better than before, but still not perfect for some reason. Please let me know if you have any suggestions for this final piece of the puzzle. Thanks again! 
It's even linked on their site :) http://www.ios.uplabs.com/
I don't care about money really I just want to have things that I thought of come to life. I will charge for them because I know that expecting software for free is ridiculous and destructive. &gt;I presume you have a Mac etc. I actually just bought my first Mac (2011-late Macbook Pro SSD and 8GB Ram) a month ago, I've been learning OS X and I can't believe I have been trapped in windows hell my whole life.
Noob here, is there a reason for not using guard ? from my newb opv, If you use the guard, wouldn't that help you save many lines of codes ? since the value returned won't be optional and can be used everywhere?
http://blurrrsdk.com is another source of Swift for Raspberry Pi
Thank you so much 😁
You should check out all things new in Swift 3. They are primarily on apples Dev site. In addition, watch the videos from WWDC. https://developer.apple.com The Swift playgrounds are great to begin learning Swift. https://developer.apple.com/swift/blog/?id=35 http://www.apple.com/swift/playgrounds/ 
There's no general consensus. Some like it, some don't. The future of developing in Apple's ecosystem is Swift, but some devs are stuck in their ways and will use any shortcoming as an excuse to avoid adopting it. 
What about this trying this http://stackoverflow.com/questions/10105666/clearing-the-terminal-screen, basically sending the right control character. Control characters are heaps of fun to play with, you can build pre-gui’s :-)
Thank you!
When views are loaded from a storyboard or nib, iOS creates instances of all the objects in the UI file. Where these objects are hooked up to outlets, iOS uses Key-Value Coding to assign each object to its outlet. The error you are seeing here is that you've hooked up an outlet during development, but now that iOS is loading the UI file at runtime, it's trying to assign the object to the outlet, but the outlet doesn't exist any more. This often happens when you create an outlet then delete it from your code later without removing it in Interface Builder as well. 
That's not a view controller, that's a `UITableViewCell` subclass. Your cases are all screwed up. Use title case for class names – this should be `ItemListCell`, not `itemListCell`. Use headless camel caps for properties – it should be `var image1`, not `var Image1`. That last one is part of your problem – the error message says that the outlet it's trying to hook up is called `image1`, but you've changed the name of that property to `Image1`. Change it back. The other problem is that you seem to be instantiating a `UITableViewCell`, not your subclass. You should change the class for your table cell back to your subclass. 
I'm glad you're enjoying your Mac, a good solid choice for development. But try to be platform agnostic. Prior to Swift programming Macs and iOS devices was probably the most painful thing I have done. Weirdly development for Windows and the web was far more straightforward. In terms of software development for all platforms the Mac is great. I use mine for native iOS, Android, Windows, &amp; Web. Something I can't do on any other hardware platform, at least not easily. 
Thank you. The code works fine now, the case was the issue. My friend is just learning swift and is used to other languages. He said it was fixed and was the uppercase that fixed it. 
You could use a timer that updates your life variable
Thank you I'll try it when I'm home. I appreciate the help. 
Realistically, most if not all of these changes shouldn't bother you at all. Many of them are strictly additive, meaning they won't break any code, only yielding additional functionality, and then most of the rest are for more complex things that won't concern you in your time of learning the basis of the language. Looking at [the Swift 3.0 Implementation Proposals](https://swift.org/blog/swift-3-0-preview-1-released/), the only real changes I see that could potentially concern you are the removal of `++` and `--` (which Xcode will easily fix for you) and the removal of C-style for-loops (i.e. `for (int i = 0; i &lt; 10; i++)`) which some outdated Swift tutorials may use. TL;DR It won't affect you hardly at all, and if it well Xcode should warn you.
According to the annual, fun to read [Stack Overflow Developer Survey](http://stackoverflow.com/research/developer-survey-2016) Swift has for the past couple of years been among the most loved and fastest trending languages.
Been an Apple user since 1978 and one thing i have definitely learned is... never say never.
Objective-C is far too useful as a glue language, perfect for tying together C, C++, and assembly code and literally thousands of third-party libraries that shouldn't be replaced because there's no benefit to doing so. Swift will be the important language for high-level app development going forward, but Apple will probably never, ever deprecate Objective-C/Objective-C++, because way too much of their platform relies on it.
Keep a variable called lastUpdateTime. Every update loop, get the NSDate and compare to lastUpdateTime to get deltaTime and a new lastUpdateTime. When you encounter a lost life scenario, add your penalty NSTimeInterval to lastUpdateTime and store as a getWellTime. Every update loop, check and see if lastUpdateTime is later than getWellTime. I recommend Ray Wunderlich's SpriteKit e-book (don't get the paper copy like dummy me did). 
2: [best intro I've seen](https://www.hackingwithswift.com/read/0/12/optionals). If you're an extreme beginner, I'd recommend going through the entire curriculum! 3: hardware knowledge if important if you're doing anything more than a fun side project... it'll come in time.
Having a compiler to proofread your code is pretty handy.
Core Foundation is in C and will always be in C and has toll-free bridging with Foundation (Cocoa). I don't see how Objective-C can go away.
Certain people seem to have the idea in their heads that Apple can somehow only support one language, and that it's somehow worth replacing decades of extremely well-tested code in favour of the New Hotness language.
I can't speak for everyone but my team likes it because of the type system that catches a lot of errors before you run your app, it has some neat functional properties, optionals and it has less noisy syntax than objc. All of these combined with protocol oriented programming allow you to write safe, concise, general code that is flexible and easy to read. There are a few things I do miss about objc runtime but our code quality has definitely gone up. As for stability, Swift will be stable starting on Swift 4 but xcode has tools that minimize the pain of migrating. You can also follow and take part in the development of Swift on github and subscribing to swift-evolution. The community is making a huge impact on the direction if the language.
Sorry you're sitting at 0 points as I write this. I'm a huge fan of Swift and I think it's one of the best languages (if not the best). But using a young language, that changes regularly, doesn't work outside of Apple platforms, and doesn't have an established set of full-featured packages for every task is exhausting. It is totally valid to not want to participate in that.
I have sloshed through 1/2 of the Codecademy course for RUby in the past few days. Can you suggest any other resources? I find myself confused with if loops, and array iteration. 
To answer your first question about the AmazonAd framework and why the project can't find it: If you go back to `Link Binary With Libraries`, right click `AmazonAd.framework`, and click on `Show in Finder`, where is the framework located? It will probably be in the location you dragged and dropped it from. Your compiler can't find the framework if it's located in some random directory (e.g. Downloads) unless specified in `Framework Search Paths` under `Build Settings &gt; Search Paths`. An easy solution is to move the framework to your projects root directory. Then you can import the framework via drag and drop into `Link Binary With Libraries`. Then edit your `Framework Search Paths` and include `$(PROJECT_DIR)`. &amp;nbsp; To answer your second question about the `sharedRegistration` class method: Just by looking at the return type of `instancetype`, the `sharedRegistration` for `AmazonAdRegistration` returns a singleton (created once and persists until the app ends) of type `AmazonAdRegistration`. It then calls the `setAppKey` function on that singleton. Since your project is in Swift and the framework in Objective-C, you'll have to create a bridging header and import the necessary Amazon headers there. Once you build, you should be able to call this from your AppDelegate: `AmazonAdRegistration.sharedRegistration().setAppKey("key")` 
I'm also slightly worried about the vastness of the Swift language. Rewind back 1.5 years, Swift 1.2 had a fairly small set of features. I hope they stop extending the language and instead continue the trend of polishing and tweaking the existing features.
Sure, but Foundation on Linux is still incomplete and GCD is super incomplete. Swift on Linux is a pretty bare bones thing compared to Mac... For now. 
The reason why ++/-- are confusing is because of how they act in complex expressions.
Score can be a UILabel and then you can set the frame to go in the corner 
Apple can support multiple languages, but they can also unilaterally decide--at any time they choose--not to support, in their app stores, software written in anything but Swift. Objective-C *can*, for all intents and purposes, disappear (which is to say, only be maintained and used behind the scenes by Apple). And the thing is, they could have solid grounds for making such a unilateral decision, if they were to reason, for example, that Swift code is less crash-prone (and therefore a boon for users in the form of app stability), easier to review upon submission to the app store, etc. I could see Apple making this sort of decision once Swift is stable (so basically, after Swift 4). Objective-C could genuinely have only a few years left as a third-party development language.
Trying using Auto Layout to pin the UILabels to the corners, use Controllers to update the labels.
Go look at the /r/ObjectiveC/ dead. There is spam right now as the latest post, next post is 8 days old.
Yes, because if it's not on Reddit it must not exist. 
For Mac apps, sure. You can readily distribute those on your own. For iOS apps? Not so much. The jailbreaking community is very minor. The fact is that the Swift compiler catches entire categories of bugs, and that, unless people are coding to a standard several times worse than what's seen on average in Objective-C, Swift pretty much *has to be* less crash-prone straight out of the box.
There are people coding in Objective-C outside the macOS/iOS/tvOS/watchOS world. I should know, I'm one of them. Also, yes, the compiler catches certain types of bugs - but the users just invent new kinds of mistakes. No language can *ever* be as smart as its users can be stupid. I should know, I've made every category of coding error I can think of at some point or another.
It is just indicative of how well Swift has taken over with a certain segment. I have been iOS developer for 6 years now, EVERY job I get sent my way is Swift. Companies with proven running products in Obj-C are asking for Swift and often cases rebuilding entire apps. Not small companies. Anyone under 30 is Swift and only Swift. All the major apple developer sites are all Swift. 
i like it better than objective c but some of the syntax i really hate. hopefully they make it better.
3.0 changes that of course, and is due to be finished in a few months.
3.0 is better but seems needlessly ugly compared to Python I agree. 
I've done a lot of "Introduction to ..." talks both on ObjectiveC and Swift. I pretty much assume that any/all talks on ObjectiveC will turn hostile at some point. There are just too many WTF moments in ObjectiveC coming from people with experience in any other language. Basically, if you think ObjectiveC is cool then you are suffering from Stockholm syndrome. My intro to swift talk are generally met with bemusement, which is more typical of an "into to &lt;language I've never seen&gt; talks. Some parts are still very rudimentary (e.g. error handling is a shit-show in Swift compared to C# and Java, generics need a lot of work in Swift 2.x, etc), but it reads pretty well until you get to closures (that takes some time, but they are ok for people). Having used Swift and ObjectiveC, I really like Swift better (but it probably wont ever crack my top 5 favorite languages anytime soon).
Will do. Regardless, thank you for starting me on the journey! 
Old Objective-C hands who haven't switched yet hate it because they are now beginners at half their job. It was really horrible for people in their mid to late 40s in many ways. Swift is taking off not only in Apple circles, but in FP circles as "man, they're doing lots of stuff right" 
After re-visiting some older code, I was able to figure out that I needed to set my categories variable to var categories: Array&lt;CKRecord&gt; = [] as well as rearrange some of the brackets in my fetch function. I needed to place the calling of the fetch function outside the function (silly mistake) and finally close the viewdidload method after calling fetch(). func fetch() { let publicDatabase = CKContainer.defaultContainer().publicCloudDatabase let predicate = NSPredicate(value: true) let query = CKQuery(recordType: "Dining", predicate: predicate) publicDatabase.performQuery(query, inZoneWithID: nil) { (results, error) -&gt; Void in if (error != nil) { print("Error" + (error?.localizedDescription)!) } else { for result in results! { self.categories.append(result) } NSOperationQueue.mainQueue().addOperationWithBlock( { () -&gt; Void in self.tableView.reloadData() }) } } } fetch() }
Silly mistakes are the worst....
It's really important to understand what Tiobe is measuring: Search traffic queries If you have a language taught in schools...even if people aren't using it outside of schools, it's artificially inflated. The converse is also true: it's artificially lower for 'non-industrial' languages &gt;The ratings are calculated by counting hits of the most popular search engines. The search query that is used is &gt;+"&lt;language&gt; programming" &gt;The number of hits determines the ratings of a language. The counted hits are normalized for each search engine for all languages in the list. In other words, all languages together have a score of 100%. Let's define "hits(SE)" as the sum of the number of hits for all languages for search engine SE and "hits(PL,SE)" as the number of hits for programming language PL for search engine SE. Possible false positives for a query are already filtered out in the definition of "hits(PL,SE)". This is done by using a manually determined confidence factor per query. A query such as "Basic programming" also returns pages that contain "Improve your basic programming skills in Java". The first 100 pages per search engine are checked for possible false positives and this is used to define the confidence factor. If this factor is 90%, then only 90% of the hits are used for "hits(PL,SE)".
Sorry I don't have a solution for you, but from a user perspective I like your UI better than the effect you're trying to achieve. 
Thanks so much... back to work then!
Doesn't say much
Yeah I do see that at some point companies will start to shift their codebase from objc to swift because of the pressure from apple. And any new company would be wise to start writing their code all in swift. I think with my question I wanted answers to both those aspects: 1. Do companies hate it enough to put pressure back on apple that they will not write their code in swift? 2. How does the general programming community like the language? 
I definitely had a few WTF moments while learning objective c initially, but given that Apple has excellent documentation, it really didn't seem that intimidating. Objc+apple framework documentation &gt; android documentation
Game Center ~~doesn't exist~~ was removed but gamekit the library is still very alive and working for multiplayer [here's a tutorial for a gamekit multiplayer game](https://www.raywenderlich.com/60980/game-center-tutorial-how-to-make-a-simple-multiplayer-game-with-sprite-kit-part-1) it says Game Center in the title but only uses the gamekit libraries.
Okay. Fair enough. In order: 1. No. 2. There is no "general programming community", but the overall response of the various groups is generally positive, especially since the language went open source.
As others have mentioned, create a developer account, browse through apple documentation (most of it is still foreign even after publishing my first app), and at least in my case - tutorials. Bitfountain.io got me started in a wonderful way; they walk you through a number of apps through code and explanations.
Documentation for some languages really needs some designers to work on them. I think if the tech industry wants to attract more diverse candidates, the documentation pages need to look less scary.
I was going to say less 'reddity' but then realized that over time I've begun to start liking the UI of reddit. But my love ends at familiarity.
Clearly I'm not in the FP circle :p
I solved my problem following this advice: http://stackoverflow.com/questions/35162023/acces-nsdocument-from-viewcontroller Essentially my problem was that I was trying to access my data model at the wrong time (something I already knew, but the correct place to access it isn't in Apple's NSDocument programming guide or API reference). The correct place to access it is in viewWillAppear()
You want to offload computational work to a background thread to keep the UI responsive, right? At least with GCD, the idea is simply to surround the work you want to offload with a dispatch_xxxx() { } call block, and hand it a function to call when it finishes. I haven't used it with table views, but I'd recommend the free tutorials on ReyWenderlich.com, they're quite easy to follow. Grand Central Dispatch https://www.raywenderlich.com/79149/grand-central-dispatch-tutorial-swift-part-1 NSOperation https://www.raywenderlich.com/76341/use-nsoperation-nsoperationqueue-swift 
closure helps you write multiple codes of line and pass them around to be used in a code. ex: Closure as function argument: func testingFunction (someValue: int, closureExample: { //closure begins //do some work here to be used later } //end of closure ) //end of function declaration { //function code goes here } ------------ **An advanced example: closure as a function** var someThing: Dictionary &lt;Strings, operation&gt; { "+": operation123 ( { //Closure begins (value1: int, value2: int) -&gt; int in return value1 + value2 }) //closure ends "-": operation123( { //closure begins (value1: int, value2: int) -&gt; int in return value1 - value2 }) //closure ends Of-course the above example we still needs to define "operation" as enum, but you see how closure works
I love little stuff like this, especially when it's applicable to OS X apps. iOS gets the spotlight 99% of the time these days so it's really nice when people take the time to poke around at AppKit and post about their findings.
Gotcha, thanks for the clarification 
NSOperation is a bit more abstracted for the user, and is supposedly easier to implement, while GCD gives you more direct control. I've only used GCD myself and find it accessible enough... I'm not sure which would be more suitable in your case.
No problem. It's always fun to play with the betas as soon as they come out but a decent number of changes will happen over the next few months so it wouldn't make sense to accept apps to the store that could break with the next update.
I know this tutorial but it's in objective c and i'm looking for something done with swift.
The fact that the Game Center app was removed in iOS 10 doesn't have anything to do with this.
Neither does Xcode 8 for me, so far :)
Interesting question, here is my explanation for it. So dogs will still be a value type even though "Dog" is a reference type. Here is proof. So first of all you have to make sure you include initializer for the class as this code will not run without the class having initializers. Now in this case that you have shown above, it is true that both dogHouses will have a dog named Grape. However if you are to remove all the "Dogs" from the array of dogHouse1, then dogHouse1 will be empty, but dogHouse2 will have Grape still in the dogs array. Now for the second part of the proof. If you were to make both of them into classes and you did the same as I did above then both arrays will turn out to be empty as dogHouse1 and 2 are both reference types now. Hence I conclude that in your example DogHouse and the array inside are both value types. If anyone sees a mistake in my answer please do correct me. Thanks
Value types can have reference semantics, and vice versa (i.e. is not pure in the sense of functional programming). Take the standard library collection type as an example: they are all value types and behave like value semantics, but uses reference semantics underneath for copy-on-write. In your case, your dog houses itself has value semantics over its *collection* of references to dogs (the combination of dogs), but has ultimately reference semantics on the dogs themselves (the unique identity of dogs across different versions of combinations).
Did they post it and then remove it? The latest I see is Interactive Playgrounds, which has id=35.
Thank you so much! I should have known basics like that by now, but the way you put this answer instead of just giving the code made me think through it and actually understand it. :) Thanks!
I switched last week. The new documentation is pretty spotty, and I get occasional xcode crashes, but the swift code translator/updater worked well.
I find the WWDC Session [Understanding Swift Performance](https://developer.apple.com/videos/play/wwdc2016/416/) from last week very instructive. The reference/value types, protocols and generic types are discussed, and their implementation with existential containers, protocol witness tables, etc. is shown. From minute 36 onwards, reference properties in value types are mentioned.
This really puts nice perspective to the current situation. Thanks a lot. I'd never thought of language and library being different. Now that I think about it, they really are... Interesting. Interesting indeed. I've been doing many interviews lately, and so I'm forced to go back to practicing and polishing my programming skills. And I keep seeing these CS topics. Reminds me how much I had forgotten about the roots of all development. I should've paid more attention in college.
Most people can be very good programmers and, in fact, very good with any skills. While proper geniuses do exist, they are ver very few. Generally speaking, all of the experts of our world were forged by many hours of practice and frustration over mistakes. While it does in fact take a long time to make any expert, thinking that this is an ability few people have is absolutely elitist and prejudiced. A lot of people who would be excellent programmers just had no idea how to get started. That's why I think your conviction is flawed. Even if you argue that an iPad is far from being accessible, the Swift Playgrounds will still give a huge amount of people more accessibility to programming than they ever thought they had. And your argument of the sleazy client is not exclusive to software. If you ask most people who work directly with clients you will hear the same stories, be them photographers, bakers, designers, architects, constructors...
Maybe you would know... would it make more sense for the query to be dispatched to the main queue or just the table reload? 
&gt; So is `dogs` property considered as a value type or reference type `dogs` is an array. Array is a value type. Simple as that. &gt; // dogHouse1 &amp; dogHouse2 both have *their own references to the same instance of a Dog* named "Apple" &gt; // Now both doghouses *continue to* have *their own unchanged references to the same instance of a Dog, which is now* named Grape
I know, and I wasn't really replying to your comment :)
There is no inherent "purpose" to value semantics. If you add a reference-type property to a struct, you are not violating any set-in-stone rules or principles. You're just making a value type with a property that has reference semantics. And the fact of the matter is, that reference-type property *should* work as a reference type no matter where it's used. So if there's any principle at play here, it's simply that *things should work as advertised in any context in which they are present*. Class objects shouldn't be given value semantics just because they've been attached to a struct. That would be absurdly difficult to reason about.
You might want to add a predicate... let calendar = NSCalendar.currentCalendar() let now = NSDate() let components = calendar.components([.Year, .Month, .Day], fromDate: now) guard let startDate = calendar.dateFromComponents(components) else { fatalError("*** Unable to create the start date ***") } let endDate = calendar.dateByAddingUnit(.Day, value: 1, toDate: startDate, options: []) let predicate = HKQuery.predicateForSamplesWithStartDate(startDate, endDate: endDate, options: .None) And use that `predicate` to generate your `sampleQuery`. It should give you all the readings for the day. More information [here](https://developer.apple.com/library/ios/documentation/HealthKit/Reference/HKSampleQuery_Class/index.html#//apple_ref/occ/cl/HKSampleQuery).
I haven't found anything so far, but this project https://github.com/DaRkD0G/Easy-Game-Center-Swift installing now: anyways, still looking for good tutorial. Thanks in advance!
&gt; Now you have to think, should this thing I'm creating be a struct or a class? How am I going to use it? How might someone else use it? Personally, I don't think this aspect of the problem is so bad. I just always use a class. Problem solved. No extra thinking required, and I have yet to run into any situation where it's led me astray. The real problem with this complexity is that sometimes other people (including the stdlib) get it "wrong". More than once, I've had to write a class whose only purpose was to wrap a built-in, because I wanted to use something in a way that Chris didn't think I would. With mature languages, we've got third-party style guides, and books with titles like "...The Good Parts", because programmers have realized that every language has parts which are just complexity which doesn't justify its own benefit. I think that history will show us that Swift structs, and any use of enums beyond the trivial case, will be the bad parts that experienced programmers learn to ignore, at least for non-realtime/kernel programming. Apple is pushing Swift as easy-to-learn, yet it has almost 100 reserved words already. (That's roughly the same as C++11, though each language has different reserved words in different contexts, so it's hard to compare exactly. They're within 5%, though.) Swift may end up being seen as popular or not, but it's certainly not simple.
&gt; ObjC is a great language, but far too nerdy / wordy. Technically, that's more of an API issue than a language issue. Sadly, many or most of the nomenclatural simplifications they're making with Swift could also have been done for ObjC, had they wanted to.
Optionals are so inconvenient; I know how this code works, I don't need the compiler to bug me.
Objective-C is better at everything...
Just ask a question about some trivial API/SDK-related problem that could be answered by reading the docs. This subreddit is full with that shit it's not funny anymore. It feels like /r/UIKitBeginners or whatever. 
The fear of switching from Swift 2.x to 3.x was overblown?
Try to define where that three seconds is spent. You can just create an NSDate before the call and then compare the duration when CloudKit returns vs the duration when the main thread is called. You may find this has nothing to do with the UI and queues, and everything with the query and/or the data retrieved.
I just remove ? or add ! until it compiles.
I have a swift project and it didn't update it despite indicating it would. I found that it would tell me in the code that something changed and prompt to change it from 2.x to 3.0 and then after I changed it it would indicate it was wrong. Maybe 7 and 8 can't be on the same system.
I'm sure the Swift team doesn't like this, but here's how I feel: Swift has grown too pure. I feel like they are continuously pushing towards purity and perfection of programming implementation instead of usability. Who actually uses the string subscripting API instead of just let word = "string".map { $0 } As an academic myself, I completely understand the urge to have something so perfect and complete. But as a daily programmer, I feel hacky and dirty having to use the map to convert the string to an array.
That was quite literally me when I first started learning Swift
`Array(s.characters)`?
Thank you, I don't have a developer account. Any idea when the public beta -if any- be released?
It's not about the language and its docs. I have no problems with language specific beginner questions (I'd love to see them posted here actually). What gets me though are those UIKit/Cocoa questions that have nothing to do with Swift but are nonetheless posted here because "lol how can I maek iPhone app". For a language-specific sub this one here is pretty bad at discussing the actual language. I mean if I wanted to read through endless "how can I make button invisible" posts I could as well go to Apple's own developer forums ...
It's a rite of passage, like sprinkling `&amp;` and `*` around in C.
Are you already using MongoDB? If you're not, I'd caution you that *MongoDB* is as bad as it looks. You can't paper over the limitations of MongoDB, even with the best interface library in the world.
...plus, I can't tell you about it now, let's meet up somewhere after work.
…I'll bring along the NDA for you to sign so you don't steal my completely original idea that nobody's ever thought of before.
Or stack overflow. Lol, I'm one of the people that ask hella stupid questions. Mostly about MVC. People helped though. 
HealthKit is giving you timestamps using the UTC timezone. You're then discarding that information when printing the time out. The date formatter will presume you want the time formatted according to your current timezone, so will convert from UTC to your timezone. The time you print out is in UTC and the day is in your local timezone, which is why they disagree. What you probably want to do is use a date formatter to output the date and time as well. This will convert it to your local timezone as well, making it match up with the day of the week. You shouldn't convert an `NSDate` to a string and split by spaces to get information out. Get the components of the date or use a formatter. 
Try Option-click instead.
I haven't run 7 since I added 8, so I don't yet know about switching back and forth.
You picked the worst possible example to make your case. Strings are that way for very good reasons. If you didn’t speak a language that conveniently fits into ASCII you would have a different opinion.
&gt; Expression was too complex to be solved in reasonable time; consider breaking up the expression into distinct sub-expressions.
I have it done, it's working, now looking to implement it within the game.
To get the range for a day look at HKStatisticalQuery instead of HKSampleQuery
shiiiiiiiiiit
What happens if you put "_ in " (no quotes) at the front of the closure?
"[HELP] How do I download and parse JSON??!!" [adds link to his/her Stack Overflow post of the same question.]
In response to the course developed by Apple as an option, this may be a concern. &gt; Students are expected to have prior programming experience, such as programming with Java, C++, Objective-C, Python or Ruby, in an introductory programming course. I'm sure some will, but most 11-15 year olds probably won't. Unless I'm totally wrong about the kids you'll be teaching!
This is a case where Swift is still a young language, doesn't have a well supported std library. `import Foundation; print("Hello, playground 12 kj2k 2323 232 kj23".componentsSeparatedByString(" ").filter(){ guard let hello = Int($0) else { return false }; return true })` Here's one in Python3.x `list(filter(lambda x: x.isdigit(), "Hello, playground 12 kj2k 2323 232 kj23".split(" ")))` Both outputs, `["12", "2323", "232"]` p.s. idk what's wrong with urs ¯\(°_o)/¯
Yeah I saw that book but reviews while positive indicated it was out of date. Thanks though! Do you think I might have a better chance looking at some more recent iOS stuff and then filling in the gap between iOS and OSX as it comes up? I'm a cs major (done mainly web) so have some experience just not with mac ecosystem specfic systems before so, I'm not totally sure how to approach it. 
Almost all of the kids I'll be teaching won't have had any prior programming experience. Some probably will. I should also mention that we don't have access to Macs, so I can't use Xcode. I wanted to see if i could find an online resource like CodingBat because they could use it from PCs. If I can't find anything I may just stick to Javaand CodingBat because it worked so well last year.
In my game I want my character to be able to climb up ladders and fly whenever they get a power-up; how do I do that in Swift?
You can also put the parens around just the argument to map. if let s = s, case let xs = s.characters.split(separator: " ").map({ Int(String($0)) }) { ... This has something to do with an ambiguity between the trailing closure and the body of the if statement. Chris Lattner recently made a proposal to eliminate this problem on guard statements which was rejected. That proposal is here: https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md It also discusses the fact that these ambiguities are present for if and while statements. So, it seems like it is an ambiguity with the grammar rather than a bug with the compiler, and the workaround is, as you discovered, some kind of bracketing to eliminate the ambiguity.
It's Swift 1. It's going to be quite different. 
&gt; With a trivial implementation sure, but surely we can cut down on that. You can by making strings into rope-ey structures and increasing the number of allocations so that grapheme clusters become atomic (because you'll have to heap-allocate non-trivial grapheme clusters). And then you try to add tailored grapheme clusters and you're fucked because those depend on the locale used while interpreting the string. &gt; Maybe not to O(1) but O(n) is pretty terrible. O(n) is perfectly sensible, unicode strings are streams, get over it. 
Just launched on Product Hunt too :) https://www.producthunt.com/tech/swift-jobs I built Swift-Jobs.com to make it easier for Swift programmers to find jobs. I believe Swift is the future - we’ll see it go from just iOS, macOS etc to the server side - and we’ll see an explosion of both demand for Swift programmers and supply - especially as Apple is pushing the education side of Swift so strongly. Anyone can post a vacancy for free, it’s a great way to get exposure to a rapidly growing, highly targeted audience of extremely talented people. We also offer the option to pay for a promoted post - getting your vacancy a lot more exposure on the platform. Users can be kept up to date with the latest jobs by following our social channels or subscribing via email. We are very open to user suggestions, comments and feedback - in fact, we actively promote it. In the future: - An iOS app is in the works. - Focus on on-boarding new vacancies - we really aim to get a broad coverage of jobs on the site and go far beyond it’s current US base. - Develop the audience and start to build a community. - Provide informational pieces on the blog. **Edit /u/foulplay2 thank you for the gold :D **Edit Edit: If anyone wants the latest jobs in their social feeds, we post all of the jobs to the following: https://www.facebook.com/theswiftjobs/ https://twitter.com/theswiftjobs https://www.linkedin.com/company/13185056
Swift 3 is actually out, together with Xcode 8 beta.
It's a great app, surprisingly good. I think the author could be experiencing a big when typing parentheses. A simple diagonal drag on the j key inserts it for me. The two finger gesture on the keyboard to move the cursor is great. Really shines when using this.
I thought it was just a preview and not the full release, or am I completely wrong lol
I really love the website design.
Thank you, I really wanted to try and make something a little different and use some cool CSS stuff :)
Cheers. Will there be search / filter options eventually? For example filter by location?
Hacking with Swift has a ton 
&gt; Except almost always they're not. Text is a stream, always, that's its conceptual semantics. &gt; We could have different implementations under the hood for when it's ascii at runtime and then you could get O(1). Would be pretty nice. No, going back to mangling strings would not be "pretty nice", it would be lazy and broken. Stop treating strings as arrays. If you want to conveniently work with byte arrays, ask that API and byte array literals be added to the language.
I know for a fact that it's not so radically different as to be unusable (I've read it). Again, anywhere there's a difference, the Github repo they set up to deal with errata will show you what to do instead. This is, quite honestly, the only resource OP is likely to find in the near-term regarding OS X development in Swift.
Maybe. But if the performance is bad enough then bug free doesn't matter. Depends hugely on the use case. 
Why is it a "stream"? It's order dependent, but so is a list. You can jump to a certain page of a book, so clearly it's NOT a stream. 
Yeah, I'm in that slack group along with Zewo channel.
Just use Rust! /r/rust
&gt; you should damned well want it to crash, and crash hard I heard this argument all the time. That makes sense for debugging or test code, or hacking something together, but since when crashing, for ANY reason on prod, is a remotely ok thing?
When the alternative is corrupting user data is one example when crashing is preferred.
Use the Keychain.
You can use key chain and touch id (for compatible devices) Here is a tutorial for both - https://www.raywenderlich.com/92667/securing-ios-data-keychain-touch-id-1password
From the [documentation](https://developer.apple.com/library/ios/documentation/HealthKit/Reference/HKSampleQuery_Class/#//apple_ref/occ/instm/HKSampleQuery/initWithSampleType:predicate:limit:sortDescriptors:resultsHandler:) :) &gt;limit | The maximum number of samples returned by the query. If you want to return all matching samples, use HKObjectQueryNoLimit.
He's not choosing for `queryItems` to be optional. It's an optional array of `NSURLQueryItem` on a `NSURLComponents` object. Sure, he could have used optional chaining in the example. But is that really the behavior you'd want (i.e. a malformed, likely invalid URL)? He's force unwrapping it because, if it turns out that he can't append a query item to the array for some reason, it makes sense to crash. There's no graceful exit from that.
The keychain looks like a great way to store a user's credentials, but I'm not quite sure how to use it to store my one set of credentials in the app without directly hardcoding them into the app. It's my understanding that in using the keychain I would just hardcode in the app some code that would store these credentials into the keychain, and then just access that when needed in the app? That could work, but I'd still have those credentials hard coded into the app.
If you're using a single set of credentials that will be distributed with your app and shared by all users, there's no good way to keep this from the user. I can run my phone network through a proxy and inspect the traffic, even if you're using HTTPS. Amazon issues temporary credentials via their Security Token Service to address this exact use case. More straightforward is to just use a user registration system so every user has their own credentials, which you then store in the keychain.
read it from a file encrypted with your key
Needs a button to perma-hide any "salary not disclosed" posting. Not doing your homework to learn what the market is paying? Expect me to operate at an information disadvantage where you ask me for salary history (hahaha no) but don't want to reciprocate? No thanks. But enjoy your hiring pool of folks who have been coders for a few dozen weeks!
I go through phases with force unwrapping. Sometimes I work hard to avoid it, and I end up hating my code; sometimes I use it freely, and I end up hating my code. Unsurprisingly, the answer is that there's a sensible middle ground: force unwrapping is there for a reason, and if you spend too much time avoiding it you'll just make your code a mess. I had a [Twitter conversation](https://twitter.com/jckarter/status/745300061588852736) with one of Apple's Swift engineers just yesterday about the use of try/catch and optionality in Swift's file handling, and his response was this: &gt; "IMO people make this hard on themselves by avoiding try! and !. If you know you have a file: URL, use it." Now, clearly "I know it's safe!" is the anti-thesis of Swift's safety, but it re-enforces the idea that there's a middle ground – you need to exercise some discretion.
My wife is tired of me saying that I found a part of my CS education useful as a general life attitude: never check for an error condition you can't handle. Meaning, there's no point in determining the state of something if you're unable to recover from it. Obviously (if you're not insane or trying to score debate points) that's not an excuse to ignore real issues, and it presumes you have up till that point done your best to design in a way that you don't find yourself in many circumstances where you can't deal. But there are some things - like, say, memory corruption due to radiation or hardware failure - that it's just not reasonable to try to cope with in all conditions. So if you're using a flexible module that has a property that's optional - because in most or many uses it makes sense for it to be so - in a situation where you know it can't possible be undefined, what makes more sense? To test for a condition that couldn't happen outside catastrophic non-recoverable situations? Or to override it and save the complexity? I think you can make good cases both ways; code changes, and maybe down the road someone expands this in a way that it's not impossible anymore. There's a lot to be said for letting modern compilers optimize away unnecessary checks. But there's also something to be said for the idea that less code is better code, and code you don't write doesn't have bugs in it. tl;dr I'm ambivalent on this, but I concur that if the language allows you to override it and it's reasonably well designed then there are likely circumstances where it's a valid choice.
Wonderfully useful. Thank you so much for contributing this.
Yeah, you need to work on your parsing. Several postings list a city but no state.
Cool. There is such a dearth of beginning Swift material on the net.
The presenter/developer didn't make it optional; the API designer for `URLComponents` made it optional. That makes sense because not all URLs have query strings. The presenter knows he has a `queryItems` (because he just created it), so he's justified to use the force unwrap. If he got a URLComponents object passed from somewhere else, then he should unwrap with `if let`.
Anyone use AppCode exclusively for app dev now? Xcode sucks so much and I've found AC is pretty stable. The fast navigation is reason enough.
But that's an extremely specific case where you know exactly what the implementation of the function does. In this light, my point stands, because you don't make any assumptions if you know exactly what the output is in 100% of the cases.
Yeah I don't see any other way you do this and preserve the sanctity - such as it is(n't) here - of that single login. Not to mention, what happens when that server changes the login? Your app becomes completely non-functional until such a time as the user updates it? There was a time when that would have, at best, been a few weeks before you got an update out. And maybe that day will come again.
&gt; Now, clearly "I know it's safe!" is the anti-thesis of Swift's safety, but it re-enforces the idea that there's a middle ground – you need to exercise some discretion. I think the key is that you have to be honest with yourself when you're designing a piece of functionality. If you're just running through things willy-nilly, assuming the best outcome without considering all possibilities, because your main goal is just to write easy/quick code, then you're allowing delusions to drive development. That's not a good thing. But if, on the other hand, you're genuinely saying "Yes, the code should behave this way, and I would fully expect the app to crash if it didn't," then that's when forced unwrapping is meant to be used. And the thing is, if/when other people read your code, you're relaying important information to them with that kind of design. You're telling them "this is supposed to work, and the app is supposed to crash if, for some odd reason, it doesn't." Using safe unwrapping techniques in those situations actually gives other people the wrong idea about how your code is supposed to work. If I see an optional chain in someone's code, I understand it not as "this is supposed to work in every situation," but as "it doesn't matter if this works or not." If the latter is not true, though, and it actually *does* matter, this code delivers the wrong message, imparts faulty meaning to others (and to oneself upon looking at the code again at a distant future date). I think a lot of Swift programmers have developed this notion that the safety features of the language should always be used in order to minimize the chances of a crash happening. And what they forget in the process is that all of these ways of dealing with optionals *carry valid meaning* in practical code.
The overview is good but now its a bit old and shows some out of date examples. This other thread shows some more up-to-date resources for Swift development. 
Can you add filtering? As a guy with minimal professional experience, most of my time job searching is wading through "42+ years of experience and CEO of Apple" posts. 
Firebase Core and Admob, Core the only one crashing, might be fine with Auth and Database if it doesn't use Core, but I haven't tested it. 
`resourcePath` is a plain string just like `bundlePath`, which both represent file paths to their respective directories. `bundleURL` is an `NSURL`, and correct, the `file://...` is the absoluteString representation of the URL when it's printed to console.
No. It doesn't even have its own disk persistence API.
tldr：ABI's fault
I agree with this. Unless the OP is new to programming, then it's not too difficult to figure out what needs to be changed even if it isn't updated.
Force wrapping is fine when you are confident in the assert. Just think of this type of unwrapping as an assert. 
Why not just use the db adapter from C/C++ and wrap a swifty interface around it? If you're on linux and want an ODBC interface why not just use unixodbc? This is kind of how I expect things to progress. See Kitura's chttp-parser: https://github.com/IBM-Swift/CHttpParser/ for an example of the C library wrapping https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-ID17 Gives an overview of the C interop has available And IBM already did a similar thing for db2: https://github.com/IBM-DTeam/swift-ibm-db 
Hi tranwarrior! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/4pepja/i_made_my_first_game_ever_in_swift_and_i_love_it/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Woot. Just downloaded Xcode 8, and my project is working fine with just FIRDatabase &amp; FIRAuth
Woot. Just downloaded Xcode 8, and my project is working fine with just FIRDatabase &amp; FIRAuth
For start to end, look up the Stanford course on iTunes U
Woot. Just downloaded Xcode 8, and my project is working fine with just FIRDatabase &amp; FIRAuth
This has been done now! Wasn't used to the US system. Cheers :)
I imagine that game is just very cautious about the memory it uses. There's no way to skirt the limit, as Notification Center widgets were not intended for this sort of thing.
/u/teddim replied for Swift, but if you're interested in the "solution" in other languages D has something called Uniform Function Call Syntax: any function with at least 1 parameter can be called as a method, where `foo.bar(baz, qux)` will statically be transformed into `bar(foo, baz, qux)` if `foo` doesn't have an intrinsic method matching the requirements, so `mergeSort(array)` could be called as both `mergeSort(items)` and `items.mergeSort()`. Python and Rust have a limited version of that feature (only works to use a method as a function): an instance method can be accessed through the class/type in which case they'll behave as a regular function taking `self` as an explicit first parameter e.g. (in Rust) struct Foo; impl Foo { fn bar(self) -&gt; u8 { 3 } } can be called as either `foo.bar()` or `Foo::bar(foo)` (and yes `Foo::bar` can be moved around as an `fn(Foo) -&gt; u8`)
Any API can be made swift compatible. Essentially an API is something you do network requests against and receive (probably) JSON. So you would need a network library ( p.e. [Alamofire](https://github.com/Alamofire/Alamofire)) and a JSON serialization library (I recently had a lot of success with [SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON)) and then you should be able to interact with the API. If you want to abstract the network access a bit, you could also use something like [Moya](https://github.com/Moya/Moya), but that isn't required. A short google search brought up [this](https://openlibrary.org/dev/docs/api/books) which looks like it would do what you need.
Thanks so much for the explanation. I've grasped a good bit of the language and I'm starting to understand how it works but API calls still trip me up in any language. I'll take a look at the links you provided. I really appreciate it. 
/r/iosprogramming
Simply awesome that Swift are coming more and more to server side development :)
No, but I think that's probably going to be the case for a lot of material even once 3 is in release. If you want to do desktop work you're going to be doing more of your own research (though I find trolling through libraries on github shows me a lot of things that are possible; [the Awesome Swift collection](https://github.com/matteocrippa/awesome-swift) is good for that). The reality is that iOS is a lot hotter a target and that's probably not going to change. But there's plenty of things in there - MVC concepts, Core Data, etc - that are going to be useful on desktop.
The TIOBE index measures how much people talk about a language online, not how much people like it. It never claimed to measure that. If I write 1000 lines of Objective-C and 1000 lines of Swift, I'm going to have to ask a lot of questions about Swift online (for example, because it's more complex, the documentation is incomplete, and it's still undergoing rapid development). That doesn't mean I like Swift more (or less). Do you think it's just coincidence that the two languages which are required for Apple's App Store have a virtually identical ranking here? You might as well go stand out front of an Apple Store and ask people what operating system they have installed. One year, it's 100% OS X 10.6, and the next year it's 100% OS X 10.7, therefore people liked these two operating systems equally!
/r/iosprogramming
For this situation, I would create a manager class that handles getting the data from NSUserDefaults. That way the view controller is abstracted from how you get the data and if you decide to move it to a service call later on, you just have to change the implementation in one place.
Sounds like this could be a complex one so i'll have to give it a blast later. Thanks for the info
Great, thank you. This user setting is used to change the color and title of some buttons that appear in the main view controller. The buttons describe a group of medications, and I want to let the user define the specific type from that group that they use, and typically each type is color coded. Each specific type of medication has certain action times which I need later, hence the struct. There is a finite list of types, around a dozen, and the user will likely only define two or three maximum, so I decided against another sqlite table. As well, there is a finite list of color codes, so I'm storing them as an integer) When pulling a dictionary from NSUserDefaults, is this what it looks like: let userSettings = NSUserDefaults.standardUserDefaults() let typeToColorDictionary = userSettings.objectForKey("whateverKey") as! [Int: Int] Thank you for the reply. 
What I described here would probably take thirty minutes or so. Minus all the figuring out, which took a while.
Yea I could write Obj-C all day, I come from back in the day when C was new. I didn't say it was good, its just literally everyone wants it. Fail to learn it at your peril. These are Fortune 500 companies, not crap apps. Major banks, insurance, retailers etc. Everyone expects you know Obj-C but they want Swift experience.
I've seen several Haskell, Ocaml and even a few Clojure folks hopping into the Swift waters now that it runs on Linux Perhaps you don't follow them on twitter where they're doing that? They are as unexcited as other developers are about the constant languages changes, so they aren't writing large production systems in it that I know of, but they're definitely looking at it, writing in it, and congratulating the authors for doing many FP concepts quite a bit more clearly than say, Haskell did.
Sorry about that, try the link again it should work
This is partially what I'm looking for and can put it to use but what I'm actually after is a click and slide view. In the example you've given, imagine sliding between the data of vehicles by clicking and sliding the tableview from one vehicle to another rather than interacting with the segmented controller. Are you familiar with snapchat? You can move between vc's by touch and slide. Something similar with the tableview.
&gt; I cannot convince the project management to use Swift if what we're doing is basically using a lot of C and C++ libraries! They will say, "But Jim, why don't we just use C++14 instead?!" That's insane. you're using a library. What matters is your application's code. Interfacing with libraries happens in every language. Python, Ruby, Lisp all have interfaces to C. Wrap libraries you need, write your code in Swift. Apple didn't rewrite everything in Swft. They designed the language and provided language annotations so that working with code from C/C++/ObjC was well defined
Seems so bad ass. 
I would love to try this out. My co-worker recently came across something similar to this called Kite and I've been curious ever since.
TIL, neat. Although there's a difference in that Swift's version is curried, which I expect will make the feature less convenient/practical in an otherwise uncurried language (and Swift is [definitely trending towards less currying](https://github.com/apple/swift-evolution/blob/master/proposals/0002-remove-currying.md)) unless that behaviour gets changed in Swift 3 to be more in line with Python's/Rust's?
Here is an example I saw today: https://twitter.com/stephentyrone/status/745999062042705921
I second this, I am currently watching this course it is very good. I am new to Swift so have also been looking for beginner tutorials/sample code.
I'm guessing [this](https://kite.com) is what they're referring to. 
I guess a little more context would help. [Parrot Zik](http://www.parrot.com/zik/usa/) is an advanced headphone with more robust customization for noise cancellation, noise control and other features like equalizer presets created by artists for their albums (where applicable). All these customizations can only be done via a smartphone. (IOS and Android). If you do not have a smartphone, you cannot customize your headphones or do mundane stuff like toggling on/off noise cancellation. Hence me writing a desktop app as one more channel to help interface with the headphone 
Set the NSUserDefault through dependency injection. This way you have more control over it and you can easily write tests for it
Basically you take most/all code out of viewDidLoad into a intialize. If you want to restart the game, you have to take care that your variables var countries = [String]() var countriesRemaining = 0 var correctAnswer = 0 var score = 0 are in their initial state, so set the Int's back to 0 and add the countries you want. Then call askQuestion. You should be able to start over again when doing this.
That's great, thanks for the evolution reference (I had missed it)
Hi Esqarrouth! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/4pm3bq/minimalist_game_with_swift_uikit/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
I'm not sure that I understand how you're better off writing in a legacy language. You are creating more technical debt with Objective C than the refactoring of Swift to a newer version. At this point you can start with Swift 3.0 and the move to 4.x won't be as much work as 2 to 3, which sounds like the fear was overblown because of Apple's migrator. Within a few years, 90% of new apps will be in Swift. Who wants to be stuck maintaining ObjC? 
I really like this one: https://talk.objc.io/episodes/S01E01-networking It is a podcast about swift and it shows how to make generic pattern and a few nice other things.
You could totally make this with just UIKit and SpriteKit with no external libraries. 
Of course you can. Libraries make things easier/cleaner.
Sorry I don't have time to figure out the math at this time but one solution is to calculate the angle from the center of the node to the location of the touch and use that angle to determine the angle the ball should then move (i.e. the opposite direction) 
If using pods allows you to create what you want use them. I would echo that as you achieve your end goal think about refactoring your code to use less dependency as you move forward. I know I could not parse a json with out swift json. I also Love me some almofire so pods have a key role. If nothing more this project let you get to know pods deeply. So keep up the awesome work. 
Awesome, thanks! This looks much cleaner now. Just to be clear, its perfectly fine to do this right? As in there is no other mainstream way of doing this that I'm completely missing?
No. This is the correct way. Just need to make sure you're handling your optionals correctly when you use them. 
Can you add one in Interface Builder and use auto-layout?
If you already created the scrollview and imageview in the storyboard you shouldn't need to do the same thing in viewDidLoad, so that code should be unnecessary.
Taylor Swift The 1989 Tour Live on Apple Music... That counts as a "Swift" video right? Lol
Figured it out, see updated OP.
Watched it ... For education purposes. 
/r/iosprogramming
And episode 3 just came out today, sweet!
You don't need all these semicolons, man :)
Are you a US citizen that thinks people in Europe are unsure about whether they are from EU countries?
If you go into the bathroom American and come out of the bathroom American, what are you while you're in the bathroom? print("European.")
I see, good luck. 
This is why Apple did a bad move by keeping 2.x with XCode 8 Welcome fragmentation
Is this going to be Python 2 and Python 3 problem?
I agree with you that always defaulting to 3rd party frameworks isn't the right thing to do, but what if you come across a library that solves a hard problem and is just what you need? You could spend the time solving it yourself and probably learn from it, but you could also spend that time doing other things for your app.
Thank you very much :) 
I can't argue with that. But seriously, if his friend's *usual* feedback is "use this repo for X task instead of what you're using", then that sounds like a fundamental flaw in the one's perception on 3rd party libraries. I admit that I do surrender to 3rd party libraries from time to time. When I need a backend, I `pod 'Parse'` or `pod 'Firebase'`. If I needed facebook login features, I do grab the pod by Facebook. But personally speaking, I adopt a rule to avoid 3rd party frameworks if I can help it. 
not really. According to apple 2.X won't be around for long. And from their side and soon xcodes side it's very clear that 3 is the way to go. I'm guessing it might be a problem for few weeks/months, but will not be an issue in the long run.
If it understand your question, I think you can use CGVectorAngle from CGVector-Awesome on a vector that represents distance and direction from the center of the ball. https://github.com/samgreen/CGVector-Awesome Disclaimer: I am the author EDIT: Ported this to Swift! https://github.com/samgreen/CGVector-Awesome-Swift
Other dev: "I see you hard coded Britain as being in the EU" Maintainer: "Yeah, they'll never leave" Other dev: "O.o ... I don't know how to tell you this.. But..." Maintainer: "O_O ... Just send the pull request and never speak of this again"
I like CocoaPods a lot. Use case though not too different from Carthage I guess: Been put on an old project this week that has been in the App Store a little more than 3 years. The project is okay but it's using quite a few libs with the source just copied into the project dir. Same with unit tests, except the tests no longer run due to xctest, iOS updates, and broken libs. A lot of the libs in both targets also have a ton of deprecations. I was asked to fix the warnings and get the tests running again, I mentioned CocoaPods but was asked to see what I could without first. Due to the original libs almost butchering all kinds of project settings, they have been very difficult to update. I spent about a day downloading and keeping track of newer versions to play a balancing act between updating 3rd party stuff and not breaking the app too much. So I get to use CocoaPods now, I created a new Xcode proj to start fresh with project settings, dropped in the old code, and replaced any manually added libs and frameworks with a podfile and a pod install. Now instead of managing several iterations of each outdated library in my downloads folder, I can test a different version number of each pod one by one, running a pod install between each pod edit until I find a good compromise, though with most of the smaller libs, I was able to just update to the latest version. Some larger stuff like AFNetworking has changed quite a bit since iOS 5 and 6 :) So that's my story, still working out some kinks but much better and more future safe than dealing with outdated project settings like that. Also, tons of stuff already supports CocoaPods and is still updated quite often, version 1.0.0 just released a month ago after like 5 years of development. I also have a ton of videos and information being posted here all about CocoaPods that you can watch freely if you would like to know more: https://brax.tv/series/cocoapods
If speed is important, you should do this as a website instead of an iOS app.
Apple is basically saying that 2.3 is nothing more than a brief stopgap measure, and that people really, really need to schedule updating their apps to 3 sooner rather than later. This is not something they're going to support forever. They're just trying to offer it as a basic convenience.
I just thought it would be a fun thing to make real quick and thought people might get a laugh if they saw it but I don't know anything about web development
Thanks for an excellent reply. It's a really good explanation. 
According to Xcode 8, they found resources on it that indicates they will only remove 2.3 in Xcode 9, that's usually more than an year supporting 2 swift versions.
Well, it's literally a line that changes, but then all the language version indications in the schemes and project file, to which one should they point? And in which version would Xcode compile it? Also, would they be able to use a 2.3 based framework on Xcode 7? Because I think that the Swift 2.3 xctoolchain isn't available for Xcode 7, only 8.
Lol, I know. Habit. 
I know the compiler doesn't care, but I'd really encourage you to get rid of that habit.
Nope Apple will forbid (probably in a year) Swift 2 apps submission. 
swift-evolution is the official place to discuss the future development of Swift, the language and its runtime. This open-swift thingy seems to be a collection of code written in Swift that the authors hope will become a de facto standard, much like AFNetworking is "standard" in objc. Swift, like JavaScript, has a very small standard library. And since Foundation is not yet available everywhere swift is, there is a void to fill. On iOS and macOS, you can "import Foundation", but that's doesn't work everywhere. That's why, again like JavaScript, a million open source pure-swift libraries and frameworks have emerged to fill that void. Swift on Linux does not have Core Data, NSOperationQueue, AVFoundation, and son on and so on. There's like six or seven Express-like web server frameworks for Swift now, and just as many promise libraries and whatnot. It's a mess, and I really hope the official Foundation will be cross platform soon. (And that it will include some modernized patterns and idioms)
&gt; https://github.com/samgreen/CGVector-Awesome omg ty, i will give it a try and let you know! btw, downloaded the git, but do you have some code examples somewhere? doesn't matter the language, even if it's Android. Thanks. I see that i do have what you said, calculate the angle of a vector which is really useful, but i couldn't find in sprite kit a way to impulse the sprite using an angle... is applyAngularImpulse the method i should use? or should i stick with the applyImpulse? but what would be the CGVector x and y values i should add? because i would end up having a CGFloat with the angle. And applyAngularImpulse has a CGFloat as parameter, i will try that out first.
 switch code { case "AT": labelStatus.text = "\(name) IS in the EU" case "BE": labelStatus.text = "\(name) IS in the EU" case "BG": labelStatus.text = "\(name) IS in the EU" case "HR": labelStatus.text = "\(name) IS in the EU" default: labelStatus.text = "Something else." } ...wow. What about: switch code { case "AT", "BE", "BG", "HR": labelStatus.text = "\(name) IS in the EU" default: labelStatus.text = "Something else." }
I'm assuming you're saying this is bad? I was going to just create an array and check against that but I wanted to create a few custom responses so I just did a quick copy paste job
It gets the job done so it's not bad, could just be slightly more elegant.
Oh I'm on mobile and didn't see the whole comment at first. I didn't know it could be done the way you suggested, that would have saved me a few minutes lol
I'm still learning myself as well. Always good to find better ways of doing things.
Initializers can only be declared inside classes or structs. In your code the initializer (init) is declared outside the class.
ok, thank you, how can I put it inside of the class? what should I change? I deleted one parenthesis, and put 'convenience' in front 'init', was I right? :)
First, I would recommend reading [Apple's language guide for Swift](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html), as it is the definitive document on the language. Especially if you have some experience with other languages, it's important to understand the Swift way of doing things. There are some features of the language that are important to learn in order to make your code as efficient as possible, and to understand how to work with Apple's APIs. In particular, I would focus on: **Enum** The way enums (enumerated lists, which in C are actually enumerated, but in Swift are actually just guaranteed to be unique^1) are one of the most unique and most powerful ideas in how data is modeled in your Swift code. If there is a finite set of options for something (say, playing card suits and ranks, or directions one can move in a game,) definitely use an enum. If there has to be a value associated with them - perhaps an integer value so it can be stored in a database, or a string for display - you can associate those values, but you don't have to. **Structs** Structs in Swift are similar to their counterparts in C, but with the ability to add functions, operators, enums, etc. They differ from Classes in that they don't have the concept of inheritance, but they have an advantage in speed and storage size. For data models that can be implemented as a Struct rather than a class, choose a struct. [This video](https://developer.apple.com/videos/play/wwdc2016/416/) offers a good description of how this works. (Thanks to /u/frodokun for recommending it on another thread.) **Protocols** Protocol oriented design has been a huge part of how Apple's APIs have worked for ages, so Swift was designed with support of protocols as a primary design concern. Nearly every iOS API you'll work with requires setting an object to be a delegate for some other object by supporting a protocol. Try making a simple sample project that implements a UITableView to see a practical example of this. **Closures** The Apple language guide I linked to above has a great description of how closures work in swift, and how functions are, in fact, named closures, so I'd start there. Basically, when you define a block of code that does something, it's a closure. One of my favorite examples is when getting accelerometer data from an iPhone, you can define an inline closure to handle that data, rather than writing a separate function. In reality, there's no real performance issue there, but it makes your code cleaner. For example, let's say you write a program that has a program has a class that describes people, Person. You also need a bunch of functions that take two people and return a Boolean (yes/no) result. wouldDate(p1: Person, p2: Person) -&gt; Bool wouldFight(p1: Person, p2: Person) -&gt; Bool etc. If passing those functions, perhaps as part of a protocol, was important, you can define: typealias PeopleFunction = (Person, Person) -&gt; Bool There are, of course, a great many tutorials on Swift out there as well. [WeHeartSwift.com](https://www.weheartswift.com) is fantastic, and would be my first choice. There are many more resources on [RayWenderlich.com](https://www.raywenderlich.com), and I occasionally look at them, but for me personally, I find the writing style annoying, at least whoever is doing most of the Swift stuff. And, of course, just mess around with Playgrounds. That's what they're for, and you can jump into things like UIKit and work with graphics without having to start a whole project. They're one of the other fantastic aspects of Swift. ^1 The fact that Enums in Swift aren't enumerated is something I think of whenever I see posts from /r/mildlyinfuriating/
Thank you so much!!!
Watched this one last year, but after you mentioned it, I watched it again. I agree this one really shows the power of Swift. 
Actually started a sample last night. Hopefully I can get it out tonight. Curious, would you use a Carthage or cocoapod version of the lib
God I am a dunce, let me check that lol
Lol, yeah, they are right there now! 
I'm sure it's a matter of opinion, but in cases like this where the input is a compile time constant and not user input, I'd just force unwrap. Make sure to write unit tests that exercise this code so that if a change to Foundation breaks the input you have you'll know right away.
You could chain a few guard statements together to achieve the same effect without force unwrapping. This lets you handle a malformed URL gracefully. Assuming your setup is something like this: import Foundation typealias POSTCompletion = (Bool, AnyObject?) -&gt; Void class APIClient { static let sharedClient: APIClient = APIClient() func request(url: NSURLRequest, completion: POSTCompletion) { // make request completion(true, []) } } func signup(completion: POSTCompletion) { guard let testURL = NSURL(string:"google.com"), let components = NSURLComponents(URL: testURL, resolvingAgainstBaseURL: true), let URL = components.URL else { completion(false, nil) return } let request = NSMutableURLRequest(URL: URL) APIClient.sharedClient.request(request) { (success, objects) in completion(success, objects) } } signup({ (success, _) in if success { print("success") } else { print("failed") } }) There's an opinion that you should only force unwrap when you're absolutely certain you want the program to crash at that point (I.E it's a catastrophic failure)
There is absolutely no difference in how they function. The first one is just a more convenient way of typing the code (syntactic sugar).
There's no difference in this case. But init is just another function that you could treat as any other functions. For instance, pass init function directly to map function without explicitly specifying how initializer ion should be done in a closure.
This is a great reply!
 for counter in 1...5 { print(counter) } **edit**; Oh, or... let arr = [1...5] _ = arr.map { a in print(a) } I *think* that can be shortened down to _ = [1...5].map { a in print(a) } but I'm not in front of a swift compiler at the moment. **edit 2**, oh, you can shorten it more of course; _ = [1...5].map { print($0) } this is all from memory, so YMMV.
Thanks! I wasn't trying to be mean but homie clearly would save a shit ton of time if we got familiarized with the basics of oop, at the very least 
Some good points. Aliasing has saved me a bunch of time. I've built an app with a strong focus around time and it's passing. Early on I aliased: typealias TimeInstant = NSTimeInterval typealias TimePeriod = NSTimeInterval Later on, after various implementation dramas and awkwardnesses (serialization, desire for simple equality), I realised for my situation what I really wanted instead of the seconds as a double since reference date, I really wanted an unsigned integer in milliseconds since reference date (UInt). I started by changing the typealias definitions ... then just fixed compiler errors, it was all easy and didn't take long. Eagerly typealiasing tuples isn't a simple decision though until they start turning up in 5+ places etc. It does make it a heap easier if it's heavily used and you want to add a field, since you only need to change it in the typealias and where you're destructuring. Having said, if this is a big time saver you should probably consider using a struct instead of a tuple. 
There are also the free functions stride(from:to:by:) and stride(from:through:by:) should you need to increment by something other than 1: for number in stride(from: valueA through: valueB by: 2) { print(number) } (Available in Swift 3 and maybe 2.3, though I haven't checked the latter. Swift 2.2's .stride(to:by:) is not a free function but rather a method on the numeric types and it's ugly, IMO. You can google an example if you need it.)
Just a small nitpick: `[1...5]` Is an Array of Range&lt;Int&gt;, you should `map` on the Range itself: let arr = 1...5 _ = arr.map { print($0) } Or shorter (I prefer `forEach` if you don't use the result of `map` anyway): (1...5).forEach { print($0) } 
Ohh good point. Yeah, I wasn't in front of a Swift compiler to double-check that, and I forgot about forEach for some reason. I agree re for count. 
On the contrary, I don't like `typealias` at all. I think it's an unnecessary abstraction of a real type that I have to know the innards of anyway when I'm passing around parameters, closures, or tuples later. I think it's a hurdle to writing code that's immediately readable and understandable at one look, but of course people have different coding styles. And I agree with /u/refD --if you have a very very long tuple, you probably need a struct already.
I think `typealias` could certainly be overused. It should be deployed only to impart *substantial* meaning. So if you're conceptualizing a basic type throughout an entire class as signifying something more concrete and specific to your app, it makes perfect sense to `typealias` it (particularly if you want altering the innards of the type later on to be a simple matter of changing a definition in one place). But if you're just doing it to be clever or because you think it makes everything look more "object-oriented," it can, like you said, actually hinder understanding.
This. This exactly. Picture yourself giving code to "someone" else. 
Watch out for strong reference cycles though, it's very easy to get one when using closures as callbacks. Use either `unowned` or `weak` when referencing `self` to avoid memory leaks. object.setCallback { [weak self] n in self?.label.text = "\(n)" }
There are also other alternatives to git. New tools come out and things change all the time, but thanks for the downvote. Cocoapods has been a standard tool for a while (relatively speaking) in the swift world, and it's important enough not to completely ignore it like you suggest, despite existing alternatives.
Wasn't me
Not to use Parse.
Sure it wasn't, Shaggy.
I suggest you to use Carthage, because SPM is going to take a bit longer to be fully featured and Carthage is already great and well known
Closures. It's hard to see a use case for them until you dive into development. Most of the examples online are just using closures for sorting and stuff but once I started a lot of app development I found how useful they are as predicates for indexOf or contains. Or using closures for your own async completion handlers. 
It really wasn't. Just because I left a comment and somebody downvoted doesn't mean that's the same person -.- But sure, if you want my downvote I'll give it to you, see now you're at -1
do you know any good books or tutorial that I can do on my own, and which will not freak me out :) and suggestions about classes I'm also accepting :)
I know, though you don't have to do the weak/strong dance every single time you reference `self`. It only matters if `self` can possibly have left the heap by the time it gets used in the closure.
I cannot wait for SPM to be integrated into Xcode. Nirvana, that will be.
I think wrapping a struct around a single value might actually hurt performance (and it's certainly not as clear as a `typealias` in my opinion).
You may want to look at an iOS app first. There are a lot more tutorials for that than OS X. However I think you've picked a decent starter idea! You're going to need NSTextView for the text rendering and entry. Also look into String's writeToURL function for the saving. You should be able to find something that covers interface builder and menus, although they may be in Objective C. Good luck!
I'm you're in america maybe a programming class at a community college would be the best idea - cheap and you have a support system as you learn. in terms of books or tutorials i would again recommend iTunes university. They have tons and tons of great classes in programming from many of the world's best universities. You could find a great intro one there for sure!
The most concise way to guaranteeing crash free unwrapping for this sort of code is to use "if let" style of unwrapping: let urlString = "http://www.google.com" if let url = NSURL(string: urlString), components = NSURLComponents(URL: url, resolvingAgainstBaseURL: true), componentsUrl = components.URL { let request = NSMutableURLRequest(URL: componentsUrl) //do something with this request }
This is great, going to use this when relying on user input thanks!
Glad to hear it :) Check out [this article](https://appventure.me/2016/03/29/three-tips-for-clean-swift-code/) for more info.
You can do it with just Swift. Getting jobs will be much harder and you won't be as good of a programmer if you don't understand Obj-C. But it is doable. The good thing is that learning your second language is much easier than your first. 
You'll need to work with something like Firebase for the 'database' stuff, or if you know a language that works with web such as PHP and you have SQL knowledge (for me I use PHP + MySQL as my server components for apps) you can use that. Use Text Fields and then grab the text from them, and depending on what you're using: 1. Your own web backend: you should send a HTTP/S request with respective variables 2. Firebase: Follow their instructions for realtime database, and work with that [Firebase](firebase.google.com)
https://www.raywenderlich.com/111947/windows-and-window-controllers-in-os-x-tutorial This guy's site is an excellent resource and it just happens he has EXACTLY what you asked for. Oh, and it's tailored to beginners too so that's a double bonus. Cheers.
Getting jobs might indeed be harder, at least in the short term, but I disagree that you're less of a programmer if you don't know Objective C. Once you learn Swift and the iOS APIs, you'll be able to read and decipher Obj C code pretty easily. 
I learned Swift first and then tried Objective-C. This may sound strange but I like Objective-C more than Swift. First off you can find more example code for your project. Most stackoverflow questions has replies based on Obj-C. Secondly, even though most frameworks have built Swift versions, some haven't. I would suggest trying both languages and stick with the one you like most.
Realm is nice if you have a reliable network connection. For local database, you could always just use SQLite directly like so: https://www.raywenderlich.com/123579/sqlite-tutorial-swift
I don't think `typealias` has to be a "crappy layer of indirection," though. I just think it can easily turn into that if a programmer fancies *every single use* of a basic type within a class worthy of its own alias. They can aid greatly in readability if used appropriately, and can harm readability if they're abused. The same goes for lots of other strategies in programming.
Stay away from free/shitty tutorials and invest reasonable money towards good tutorials. You will get some astoundingly bad advice and pickup bad coding practices from about 95% of the tutorials you will come across. The following tutorials come highly recommended: -- [iOS Foundations Explained](http://iosfoundations.com/join/) -- [Hacking With Swift](https://www.hackingwithswift.com/) -- [Ray Wenderlich](https://www.raywenderlich.com/) -- [AppCoda](http://www.appcoda.com/) A must read is [Programming iOS 9 Views, View Controllers and Frameworks by Matt Neuberg](http://tinyurl.com/hccjueb) and his other book is also really good - ["iOS 9 Programming with Swift".](http://tinyurl.com/jbu3zv3) Most importantly, learn what ["Massive View Controllers"](http://clean-swift.com/clean-swift-ios-architecture/) are and avoid them like the plague.
Realm doesn't require a network connection
As an employed swift developer that works on 100% swift app that is in the App Store, I can tell you with great confidence that you should focus on swift and not waste too much time on objc. Yes, many employers have existing objc apps, however the cocoa APIs are virtually identical (as most are still objc) and an experienced Swift Dev could hack together objc code in a pinch. I fully expect a day in 4 or so years where Apple doesn't except submissions for objc apps. 
Most of the old tutorials will still be fine, just be aware there are some minor changes in the new version. I'd say the best place to start (and what most people recommend) is Hacking with Swift which is a great tutorial. I also found that the Apple Swift Guide is a really good learning resource as well. https://www.hackingwithswift.com/ https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html
That's not strange; Objective-C has a lot going for it, and it's been continually improved as a language, especially in conjunction with Swift coming around. And you're right about coding examples and answers. This is a transitionary period. If you end up working on an existing project, you could end up using either language or both! I really applaud that you tried both for yourself. Makes you a better scientist and engineer.
Legacy code is still Objective-C. If you only know Swift, you'll be shut out of at least some of the projects, and be more likely to have layoffs hit you. So learn both languages. If you want to be a damn programmer, learn languages. That's what programmers DO. If you cannot understand Swift and/or cannot understand Objective-C (or Python or whatever) you have no business being a professional programmer. Also IMHO.
No code needed for this. It literally takes dragging NSTextView and set properties for rich text etc. Compile.
Abstraction. Yes, that's the backbone for APIs, but that's what an api does. It's abstraction. As long as you know how to USE the swift API, you don't need to know objective C to understand your swift code or how it works. 
This is excelent app idea for Firebase: https://firebase.google.com/ . Firebase SDK will take care of authorization, databse (online and offline), notification, crash reports, ... Just search on youtube for Firebase, Google just had IO.
I have created the segue from a button in the navigation bar, back to the first view controller, and changed the segues identifier, but whenever I click the button (to return to the original segue, I get the title of the previous view controller as the "back button". See image: https://imgur.com/VAbnPCI I can't figure out how to get rid of the button. I've looked into unwinding seques but can't get them to work...
writeToURL if a word processor, and then try Core Data for something more like MacOSX Notes app. 
You don't really need it but if you can at least read ObjC it will greatly help you as there's a lot of documentation, libraries and StackOverflow answers still using it. There are several "ObjC for Swift developers" courses out there.
Realm doesn't need no internet
Yeah, Python never had increment operators. It's more clear semantically, so I prefer it. 
Couldn't disagree more. There is nothing unclear about x++. Beyond that, it also makes sense in terms of loops to have a special, easily recognizable syntax for iteration. 
Finally. Languages don't matter. If you have to maintain legacy code written in ObjC, learn ObjC. If it is swift, lean swift, if it is java,etc ... Once you know how to program, and even more if you already know the platform and APIs, learning a new language is trivial, and something that will happen a lot in your programmer carreer
If you do not have much experience, I would recommend you to go with Treehouse. They have a cool iPhone/iPad app as well, so you can learn anytime anywhere. [https://teamtreehouse.com](http://treehouse.7eer.net/c/265789/228915/3944) There is a 30 days free trial, so give it a shot and you will see if it helps :)
Thanks I'll check them out :) Yeah I have absolutely no experience in coding so this will be a pretty big learning curve! 
The problem is that the style only works for addition and subtraction by one, whereas += -= *= /= are all consistent regardless of increment/decrement value.
There are many tutorials and stuff like that on the internet. But for starters I would suggest to follow the Stanford Swift course, it's available for free on youtube. https://www.youtube.com/watch?v=_lRx1zoriPo&amp;list=PLsJq-VuSo2k26duIWzNjXztkZ7VrbppkT 
Number 4 is definitely true. I actually don't think I've used tye x++ syntax in Swift since I figured out how use for loops properly.
NSUserDefaults and NSCoding
Yeah, it depends on whether you're new to programming or just new to Swift/iOS.
1. Follow a good tutorial. [I have written many](https://www.hackingwithswift.com). 2. Don't be afraid to start applying your knowledge even if it's quite limited. When you complete the first two HWS, what else could you make using those same skills? 3. Don't think imagine that Swift and iOS has all the answers. It's one language on one platform; you can learn a lot from looking at others, and it will make you better at Swift + iOS too. 4. Always ask questions. There are lots of people on this subreddit who will happily answer questions, and there's also Stack Overflow if you're feeling brave. [Make sure you've read this first.](http://stackoverflow.com/help/how-to-ask) 5. Don't be disheartened when you have bugs. We all have bugs, and learning to find then fix is them is part of the job. Unless you end up writing code for nuclear missiles, don't be worried when you make mistakes. Remember: an engineer who makes mistakes is called an engineer.
In that case you're querying the dictionary once and then appending 50,000 times. elgordio's original Dictionary/Array case is so slow because it's copying the value of the dictionary's array every time it goes through the loop.
X-Post referenced from /r/programming by /u/editor_of_the_beast [Policy Based Design In Swift](https://www.reddit.com/r/programming/comments/4q4kyt/policy_based_design_in_swift/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
If you haven't watched it, I recommend [Understanding Swift Performance](https://developer.apple.com/videos/play/wwdc2016/416/) from this year's WWDC. It helped me understand the tradeoffs between value and class types.
The other benefit of that is everyone is using the same ways to process things using these elemental transformations rather than a isomorphically equivalent one thats very personal, or worse, a hole filled imperative version that has edge cases.
I created an infographic/fact sheet/poster of what we learned from WWDC 2016. Please Enjoy!
You can use a tableView just like any other view. You can position and size it however you like. Don't use a tabelViewControllee because that will force you to use the tableView as the entire view. Instead use a normal UIViewController, and add as a subview a tableView and a text field 
You can't wake the screen if it's off so alarm clocks are basically not possible. The ones that exists are pretty bad because if you lock the screen you don't get your alarm. 
I think you should use what you understand best. For me the issue was that core data is a big undertaking and I knew there had to be an easier way to have a data store. With minimal setup, I was able to create realm models and relationships and use them in my app while feeling similar to interfacing with a db through rails django. Now if you have taken the time to understand core data and can't find something you feel would be great, I'd stick with core data and save yourself the third party library.
Thanks that's a great summary!
I did one and what I did was scheduling a notification that I would cancel a few seconds before the alarm was supposed to go off if the app would happen to be foregrounded at that moment. Also I would store the time in a preference so you could see the countdown continue even after restarting the phone. Unfortunalely some funny stuff happens when the phone locks that I couldn't figure out while I only was working on an iPad at that moment. Still it can be done correct just make sure you test on a real iPhone.
Yeah, the difference between what you mentioned and core data and realm is that they are different pieces of the stack. Even CloudKit and a rest api are fundamentally different. How are you approaching your client server architecture?
I don't know. I don't know enough about Swift programming to know if I'm trying to override it. I just want to navigate back to the mainMenuViewController, and not have a link showing once I have
I tested with the original [MazeIdentifier: [MazePoint]] dict, using appendContentsOf: has the desired effect as you suggested. Thanks very much! I'll add an update to the end of my original write up. (edit: The post has been updated, thanks again).
What you want for this task is the algorithm known by a variety of names, but which I was introduced to as **Union-Find**. The heart of it is that you don’t make the identifiers value types, but reference types, allowing you to make the merge operation O(1) at the cost of a small increase in lookup time the first time you read the identifier of an element that has been recently merged. https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Disjoint-set_forests In Swift 3, this would look something like this: class Identifier { var parent: Identifier? var count: UInt = 1 func find() -&gt; Identifier { guard parent != nil else { return self } parent = parent!.find() return parent! } func merge(_ other: Identifier) { let selfRoot = self.find() let otherRoot = other.find() guard selfRoot !== otherRoot else { return } let bigRoot: Identifier let smallRoot: Identifier if selfRoot.count &gt; otherRoot.count { bigRoot = selfRoot smallRoot = otherRoot } else { bigRoot = otherRoot smallRoot = selfRoot } smallRoot.parent = bigRoot bigRoot.count += smallRoot.count } } extension Identifier: Equatable {} func ==(lhs: Identifier, rhs: Identifier) -&gt; Bool { return lhs.find() === rhs.find() }
If it's large enough, perhaps you should consider persisting it with something like YAPDatabase, Realm or Core Data? I've done this before with an app where we had around 25MB of JSON packaged with the app which we loaded to Core Data on first startup. If the database was empty on startup, it would parse this JSON into `NSManagedObject`s. From there it would just get queried as required. We would never access *that* JSON file again.
Thank you. I'll definitely take a look at Cadmium.
yes, iOS. Thanks foe UICollectionView suggestion Do you know a simple tutorial that would help me build simple table ? I tried googling but top results are all for advanced uses. btw, isn't it easier if I just use html to created the table ? e.g: let webView = UIWebView() webView.loadHTMLString("&lt;html&gt;&lt;body&gt;&lt;p&gt;Hello!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;", baseURL: nil)
Totally agree with everything you say. I'm not sure why Lattner couldn't comment on the IBM relationship, although I guess maybe because it's just not something he pays attention to as much? Their partnership is pretty public. [Here's a press release they sent out](http://www-03.ibm.com/press/us/en/pressrelease/49157.wss) in February. 
This error often occurs when a view in a xib or storyboard has an incomplete IBOutlet. (i.e. You may have deleted the IBOutlet in code, without removing it from storyboard/xib. Edit: Indeed after looking closely at your code and the error, it appears the matching IBOutlet code for "difficultySelector" is missing. Either add it back or remove the link from the difficultySelector view (using option+click in interface builder)
I've deleted the segmentedControl from the main storyboard, and getting a different error now fatal error: unexpectedly found nil while unwrapping an Optional value (lldb), and thats found at line 71 previousScoreLabel.hidden = false. Even if i comment out line 71, then the same error gets highlighted on line 72, and if I comment out that line, then 73 e.t.c
Is it strictly a black &amp;amp; white image? Or can the image source be coloured e.g. Red, Green, Yellow, Purple? Assuming it's strictly black and white then it should be quite simple. Simply iterate from 0 to height-1 and inside that loop iterate between 0 and width-1. Check the colour of the pixel at that coordinate against white, if true add “White” to your result, else add “Black” Once the loops have completed return the result. I know this is pseudo-code but it should be simple to convert it to Swift. 
Cool! I, too, wonder how so many Mac apps are made but virtually nobody talks about that. Maybe it'll change now that it's called something more fashionable: "macOS" :D
What does this mean? Will we be able to use Swift to develop PS4 applications?
There seems to be a red arrow on the left hand side of the Interface Builder screen, that would suggest some issues with the Constraints on the view.
If it's anything like the Swift Android commit, it'll be incredibly basic support for executing code on the OS. Swift on android has a lot of issues, and obviously can't access any of Android's existing UI work, or Apples UIKit, so it's still more of a novelty than anything you'd actually use Swift for
^psst: ^/r/hackintosh
You shouldn't be iterating through colors to check; you should make a dictionary mapping color values in the image to color names in the English language. Then just iterate through the pixels and look each on up in the dictionary to find its name.
I found a &lt;$600 build that is a great value that I am thinking about. I just do not want another computer!
If you are serious about ios development and aren't worried about swift, then by all means consider getting a mac device. If you are more interested in cross-platform apps (writing once port everywhere), the 2 big options at the moment are javascript (ofc, but its plagued everywhere, but hey if you really enjoy it then go for it), and this RemObjects: http://www.elementscompiler.com/elements/default.aspx (really cool.. you can write on both platforms with Swift or java). Be aware that not everything will port successfully, I'm sure you can become familiar with other people's experiences online and common errors. As for webassembly, it will make it possible for you to write languages BESIDES js such as C++ that compile directly to web assembly on the browser. Google and other companies are working on this. https://webassembly.github.io/ - the site. And here is an overview: https://en.wikipedia.org/wiki/WebAssembly .. you can find a lot more exciting information about this online, but this is something that is being currently worked on, and will change the ecosystem in the future, not sure when, but it will! You could probably predict that time based on the progress or get more info on that online. I'm not a Ruby developer, I'm only familiar with the syntax, but I came across this cool site: http://www.rubymotion.com/ . - With RubyMotion you can write cross-platform apps in Ruby. Python also has something similar called Kivy, although it doesn't look as nice to me. I haven't tried RubyMotion but if you are a fan or Ruby then try it out. As for Rust, there is work (and a lot of other cool projects from this new language built by Mozilla), on getting it to compile on Android: https://ghotiphud.github.io/rust/android/cross-compiling/2016/01/06/compiling-rust-to-android.html. Although i think it's too early to get working on a full fledged app you'd be imagining. And Rust itself is a beast of its own, since its Systems programming and the learning curve will unsurprisingly be steep. 
Thank you!!! [Gave you credit for the fix](https://github.com/JasonMcCoy/TamaGiga-Pet-2/tree/master/TamaGiga%20Pet%202) I shittily commited the changes to GitHub, but oh well.. If you have time, do you mind explaining what you did? Edit: Gold 4 u sir
Use xamarin
Mmm, sounds like a cool idea for some people, but personally I consider myself a very niche programmer, game dev. Once I program my game, I can export it via my game engine to different XCode (where I use my MBA)
What?! Who doesn't want another computer!
Fair enough. I have a Windows PC for sure. Much cheaper to maintain and upgrade
Thanks for the suggestion! I would try to port it but this is a huge library, unfortunately 
Get a Mac. Install Windows on it using BootCamp. Continue to develop for iOS using OS X instead. 
This can come in handy for a couple of major reasons. I needed my app to point to the correct endpoint of my API based on whether it was running in the simulator, debugging on a device, or in production. Also, I now can send when my provisioning profiles are about to expire to my server and get notified before it happens (I do a lot of enterprise development so an expired profile is a big deal). Any feedback is welcome. I haven't yet programmed out the "catch { }" statements or implemented a failure closure but that's on the to-do list.
If your goal is to be a game programmer, start with Unity. You can always learn swift later if you decide you have to go native, but Unity can do most of what game devs need at this point and you get the added benefit of easier porting to other systems.
This guy fucks 
You need to learn how to use Protocols, and Delegates for this to work. Step 1) First you include the protocol (UITabBarDelegate) in your view controller. Step 2) You then need to set up an IBOutlet for a UITabBar and connect the outlet to the bar in interface builder. Step 3) On viewDidLoad you need to set the myTabBar.delegate = self (I said myTabBar but whatever you named your tab bar goes there). step 4) Add the delegates function to your viewController tabBar DidSelect Item (if you just start making a function and start it with tabBar you should see all of the functions available). I hope this helped if not look up swift using delegates and protocols 
When I try `myTabBar.delegate = self` I get the error `Value of type 'UITabBarItem' has no member 'delegate'` and when I type delegate it doesn't autofill out the method. I did how ever complete all the steps before that and it worked so far. 
Did you read it? It basically just adds a new version tuple.
If you want value semantics use structs. If you want reference semantics use classes which are more expensive in general. Basically it depends and any nontrivial app will use both. This video breaks down the differences at a low level https://developer.apple.com/videos/play/wwdc2016/416/
Hackintosh might what you are looking for. For better testing you might need to buy an iPhone as well. Maybe an iPad if you need. 
Look at the build target `x86_64-scei-ps4` SCEI = Sony Computer Entertainment Inc.
Is the type really ControlEvent&lt;Void&gt; or is it something like ControlEvent&lt;Point&gt;, or ControlEvent&lt;NSEvent&gt; or something. Also can you recommend an app that kind of ties everything together? Thanks.
If you're responding from a mac right now, why don't you use that to code from?
There's better ways to strip off the CMS signature on a provisioning profile than searching for &lt;plist&gt; ... &lt;/plist&gt;. Also it's not guaranteed that the provisioning profile in the app's bundle is the one that's actually used at runtime to provision the app. When an app contains embedded.mobileprovision, all that does is install the provisioning profile when the app is installed. After that, the app is matched against all installed provisioning profiles to see if any valid ones match the app. Because you can also install provisioning profiles manually or through MDM, it's not a safe assumption that embedded.mobileprovision is the one that iOS used to authorize your app. This typically occurs with enterprise app distribution: The provisioning profile expires after a year, so companies just push an updated provisioning profile using MDM. The embedded.mobileprovision doesn't change.
That's great to know! Any way to find the proper profile? Tracking our profile expiration dates has become quite the burden. 
Also, what are better ways to strip the CMS data? I simply combined several different efforts online and converted it to swift. Then I did a *few* performance tweaks and some code golf. 
Can't shell out 1500 for a Mac 
Yes I tried that, the whole thing seemed a little confusing so I'm looking for a tutorial. Thanks!
I don't think there's a way to find the one iOS matched against your app. Installed provisioning profiles are outside of the app's sandbox. Your MDM server should be tracking expired provisioning profiles.
Hackintosh looks like your best option. Remember you don't need very high specs for Xcode If you plan on using a mac for developing + web browsing A mac mini will suit you well. [Mac-Mini AppleUSA](http://www.apple.com/shop/buy-mac/mac-mini) It starts at $499 + tax The $699 + tax is a good option as well 
Use anything that parses CMS or S/MIME. I don't know whether iOS's Security framework can do it. I know that you can do it easily on a Mac using the command line wrapper around OSX's Security framework. From Terminal: security cms -D -i embedded.mobileprovision If iOS can't do it, OpenSSL. From the Terminal it would be something like this: openssl smime -verify -in embedded.mobileprovision -out profile.plist Anything you can do from command line openssl can be done using an openssl library.
Thank you to all for the great replies and helping me understand this!
Use macOS in a virtual machine.
True. Seeing as he's asking us if it works on Windows though, I didn't think he knew how to build a computer himself. Let alone something as specific as a Hackintosh. Sorry for being presumptuous, I did like him to a refurb for only ~$800 though. 
...... are you following me?! lmfao 
So Sony is also looking into Swift. Interesting.
The cheap Mac mini ($500 USD) is, well, cheap, as well as small: you can easily hide it behind your monitor. You might want the more expensive version, as the cheap one only has a 1.4 GHz processor.
Most likely not powerful enough and would be a hassle
As C++ can't be called natively in Swift (yet) either, you'd have to wrap the C++ wrapper around a C wrapper.
You could make a very dirty app with that description!
Have you connected the action to the bar button item in your storyboard? Can't really see anything else wrong here. 
Not having @autoclosure is kind of a bummer, although it's clear why it doesn't work with async logging. Although, it would be better if the closure would be evaluated immediately anyways (to avoid threading issues with accessing variables from it) and then dispatch async, making it possible to use noescape and thus autoclosure.
Clearly, the 'if' condition is false, and the else is executed. Why is the condition false? That hasText method is among the most unclearly documented methods in a huge pile of unclearly documented methods. I don't know what it means for a text field to 'have textual content' (as the doc says) or not. Maybe it means if there are 0 characters it has no text otherwise it does have text. But, note that it says nothing about what those characters are, and that includes spaces. So, one or more spaces would cause hasText to be true. Testing sender.text against "" (the empty string) is not the same as testing for " " (a single space) and neither of those is the same as testing for " " (two spaces), etc. I would advise trimming whitespace characters from both the start and end of the sender.text and then test if _that_ resulting string has more than 0 characters - if so, the user has clearly entered at least one non-space character.
Unfortunately, 'it doesn't do anything for some reason' is hard for you to debug, and impossible for us to debug! So, you need to figure out what it is and is not doing. The easiest way to do that is with breakpoints in the debugger. Set a break at the first line of the action method (returnToMainMenu), run app, press button and if you don't arrive there, then it doesn't matter what the rest of your code does, none of it is getting executed. If it never arrives at the breakpoint, I agree with /u/okoroezenwa: ensure the action is connected. If it is executing, then set more breakpoints at strategic locations to figure out where the line is between what it _is_ doing and what it _is not_ doing; then you will have found the actual problem. Much easier to find a solution once you know what the problem is.
The app I'm making is a simple checklist app. I have to view controllers accessible by two tabs. One view controller shows the actual checklist while the other allows the user to add a task. My problem is that when the user adds a task the table doesn't update as the user changes to the other view. I just felt the app would be more seamless if it updated as the user changed to the other view.
Hi, sorry I didn't notice your reply before. Have you managed to implement the multi-threading like you hoped? In general, anything related to the UI and directly updating it should be on the main thread, while anything unrelated can be (and maybe should be) in background threads. This would include SQL queries and the like, since they are just preparation for what you will display and not the act of putting it on the screen. So, database/network queries and any heavy calculations should be relegated to background threads, and when you initially start or don't get data fast enough to display it, you should put spinners/progress bars or maybe just your best guess as to what the data will be (maybe last known state, if you have that in memory). You can then update the UI when the query returns and display a message to the user that the table has been refreshed (or synced or something). Hope this helps!
after you change the wrapView.center, you need to let the dynamic animator know that you have changed something by using func updateItemUsingCurrentState(_ item: UIDynamicItem) (pass in wrapView in this case).
No just came to check on this thread again 
Import SpriteKit in the view controller you want to do the animation.
Try this and it should work: extension String { func trim() -&gt; String { return self.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceCharacterSet()) } } then in your code check this: if(sender.hasText() == false || sender.trim() == "") { ...
Thanks! Will check it out!
In general iOS apps almost never use SQL directly. Many don't use SQL at all. That's what the server is for. Where they do use SQL, it's often as a glorified cache to avoid repeat api calls, and it's almost always well hidden under some sort of framework/ORM layer. Pretty much nobody has been writing SQL statements since iOS3 came out around 7 years ago and Apple gave us CoreData. CoreData is Apple's object graph persistence framework, and it's pretty much industry standard, though Realm is apparently moderately popular as well. CoreData can be backed by SQLite or flat files, either of which can be shipped with the app if there's an initial dataset you want. I'm a bit surprised you were even able to find a swift/raw SQLite tutorial, though I suppose the internet has everything. Look for a swift/core data tutorial. That's a lot more swifty and you'll find a lot more content and help when you run into sticking points. Also, if the dataset's under a coupe meg, you might consider just using a flat file CSV or plist. Core Data is a moderate PITA(though less so than raw SQL) and you might find it usefull to learn swift/ios dev first and learn core data second. As a possible bonus, it'll give you an excuse to do your "queries" using swift's spiffy higher order functions(filter, map, reduce, etc) which, if you've never used them, might be more generally usefull than learning core data.
It is possible by using `@autoclosure(escaping)`, I sent them a Tweet about it 
Works great, thank you! This gave me a headache because I just started learning swift and xcode lol
Actually it would get me precisely where I want to be: with a barely functional application that I can share with my crew and they can use for it's barely functionality. Doesn't have to be pretty - I'm not trying to make a living doing this just make the lives of my guys easier.
Core Data will actually be a lot more Swifty once Swift 3 lands. 
You work at Nike? Nice! I do some work on Alamofire so we work together semi-regularly, though not nearly as much as you I'm sure. How's working for Nike?
Both great resources. Can't go wrong with either. I actually have both.
Spritekit views are skviews and can be used anywhere in your app. Using multiple skviews is not performant however. Have you considered just playing a video or using UIImage's frame by frame animations?
Yeah, I'm used to that in PHP... Just wasn't expecting my boneheaded move here. Did it twice today before I figured out WTH I did wrong. 
NSURLConnection and related classes and methods don't know the difference between HTML and Javascript. Nor for that matter do they know anything about the data they are dealing with; it is just a hunk of data. For handling of HTML and Javascript and that kind of thing (similar to what a browser would do), you should take a look at WebKit. If, after looking at WebKit, you feel it is not fit for your purpose, and wish to carry on as above, you should consider stopping using NSURLConnection (which is largely deprecated) and switch to NSURLSession.
Thanks for the reply. Could you explain what did you meant by playing a video? I need to explode a view into pieces.
Theoretically, yes, through the Ubuntu support in Windows 10. In any useful sense, not yet. 
Even though you're not displaying the page, WebKit could be used to load and execute the JavaScript and get the resulting DOM. I think the commenter above was not referring to UIWebView or WKWebView, but rather WebKit and JavaScript Core. NSURLSession does what NSURLConnection does -- it just gets the HTML as text, it doesn't load JavaScript or execute it.
But I would have to create a webview object right? and just hide it if I don't want to display it. So something like this? let doc = webView.stringByEvaluatingJavaScriptFromString:@"document.documentElement.outerHTML" 
There seems to be a Cygwin port: https://github.com/apple/swift/pull/1108
Sounds good. You will probably want to have a shufti at all the WebKit classes to see what is most appropriate. For example, you may be able to use a WebFrame or something. as for '...outerHTML', I don't know, I'm not really into all that DOM stuff! However, as a general piece of advice with WebKit: before diving into javascript evaluation, see if there are high-level methods to do what you want. Use the highest possible API. In this case, you might want to check out the domDocument method of WebFrame. There was a presentation at WWDC 2014 (session 206) with a good overview of WebKit (when it was introduced). Might be useful to get a high-level view of the major classes. They went through a pretty full example of downloading a wikipedia page and then scraping the content in order to present it with a combination of web view and UIKit components. 
Ok will do! I'll figure this out! Originally I was planning on doing it on the backend(which I had working) but thought it would take a huge weight off it was done client side. 
You're welcome.
[you want to learn swift on windows](http://i2.kym-cdn.com/photos/images/newsfeed/000/411/964/9b5.jpg)
 let fm = NSFileManager.defaultManager() let path = NSBundle.mainBundle().resourcePath! let items = try! fm.contentsOfDirectoryAtPath(path) for item in items { if item.hasPrefix("nssl") { objects.append(item) } } for .hasPrefix change to whatever the file names contain. I took this from [hacking with swift which I recommend] (http://hackingwithswift.com)
now what?
Hi lyricalwizard! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/4qmf1q/just_published_my_first_app_using_swift/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
SourceKit, the underlying subsystem for Xcode to comprehend your Swift code (think of it like a mini compiler) has crashed in the attempt to parse your code. It happens more often than I'd like it to. :(
I see it once every few days. Doesn't seem to be specific to any particular type of code. Just report and restart XCode. The only concrete thing I've noticed so far is if you wait for SourceKit to kick back in it will crash again in short order.
A quote from the Vapor GitHub page at : https://github.com/qutheory/vapor Our homepage http://qutheory.io is currently running using Vapor on DigitalOcean.
RAGE. Sometimes even a rage quit. 
Here's an Alfred workflow to restart source kit https://dl.dropboxusercontent.com/u/1187111/Restart%20SourceKit.alfredworkflow
I don't like the algorithmic complexity of your solution. It causes a stomach overflow if N is too high.
Nike is an excellent supportive environment for mobile developers. We have a great level of autonomy in our work. I've been here for 5+ years and have worn many hats, but Swift dev on NTC with cnoon is my favorite hat.
That's great to hear, glad you love you job. I love my company too, but I've always wanted to work with a larger team like that. 
I've never done anything huge but I've always had good experiences with Heroku
XCode is shit. That's what is happening. I love developing for iOS, but it's hilarious how we put up with an IDE that is constantly breaking, crashing, etc just because we have no real other choice.
When it is available yes. Most of it is just renaming of things, which I am sure is handled for you. Devslopes is building their new platform where they will have updated videos from Swift to Android. Beta testing for the app will begin soon. 
I'm actually using that first one now but can't get it to work in the background. I'm probably doing something wrong with letting the app listen for background functions.
Thanks very much! I'm working my way through he tutorials!
...Cool?
Haven't decided yet. I'd like to write something fun, but am still exploring the whole thing. My first thought is to write a library for using the GPIO pins.
 "Holy shit! Xcode is lightning fast and solid as rock!" -- Me, returning to a large Objective-C project after spending a few months on a medium-sized Swift project.
I might get down voted for this but, if you already understand OOP, then just dive in. Port a small JAVA project or come up with a cool idea and start. Interface Builder is drag-and-drop. You won't get auto layout correct at first but look it up on YouTube or StackOverflow as you go. That being said, people learn differently. I just always tell people I've taught to "just start". There are so many resources available now to help you along. 
I'm saving this. Nice write up!
It's Xcode btw. I hate the spelling. There is a external program called "SourceKitService" or something like that which is continually re-runing the first few stages of the compiler on your code. Sometimes, it hits input it can't handle, and crashes. When you swap files around, etc it's usually being told to scan them again (and has self restarted by then).
I am excited to get mine. I'm hoping I can shoehorn the repl into something I can use on the small screen. Are there any ides other than emacs that would work on that?
Alright thanks for letting me know
Bruh
I'm guessing you found it in the Vapor tutorial I wrote earlier yesterday? =] And yep, swiftenv is awesome. Kyle Fuller is super prolific at writing Swift libraries. He's behind Cocoapods, a Swift web framework of his own (Frank + Currasow), Stencil, a Swift web template engine, the Heroku Swift buildpack, and a lot more. If you're interested in server-side Swift you should check out his presentation on building the full web stack end-to-end: https://speakerdeck.com/kylef/end-to-end-building-a-web-service-in-swift-mce-2016
Small is up to 25. Medium I would say below 100mb. Large everything above. 
Add a regular UIView, then set view.layer.cornerRadius = view.bounds.width/2
"Offline first" is a term for webapps. When dealing with iOS apps it doesn't make much sense since this is the default. It's syncing that is interesting here, and that must be compared to CloudKit to be relevant. 
Also check out Embassy https://github.com/envoy/Embassy Although it was designed for UI testing API mocking in the test runner mostly, it's also possible to use it in server-side. The article for UI testing API mocking https://envoy.engineering/embedded-web-server-for-ios-ui-testing-8ff3cef513df#.3v1llli7k
Look up how to draw a circle in a UIView
Aaaand don't forget if you build your app for swift you need to include the runtime which is about 40MB. Annoying little caveat because of the unstable ABI
Small: 2MB - 10MB Medium: 10MB - 50MB Large: &gt;50MB Developers that ship apps (non- games) that are larger than 50MB concern me, usually means lots advertising or analytics frameworks.
&gt; Personally, anything under 20MB - 30MB or so should go pretty fast. On most connections, that shouldn't take more than 5 seconds or so. 30MB in 5 seconds needs a 48Mb/s connection – [that's quite a bit higher than most](https://en.wikipedia.org/wiki/List_of_countries_by_Internet_connection_speeds). 
 let fm = NSFileManager.defaultManager() var fileContents = [String]() let path = NSBundle.mainBundle().resourcePath! If let items = try? fm.contentsOfDirectoryAtPath(path) { fileContents = Items.filter { $0.hasPrefix("prefix") } } 
These are the only reasonable-sounding numbers for an app.
[Image](http://imgs.xkcd.com/comics/ballmer_peak.png) [Mobile](https://m.xkcd.com/323/) **Title:** Ballmer Peak **Title-text:** Apple uses automated schnapps IVs\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/323#Explanation) **Stats:** This comic has been referenced 1230 times, representing 1.0550% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d4v7qcn)
op please report what color socks are you wearing, I think I can debug from there
UITextField ??
I have answered something similar on [Stack](http://stackoverflow.com/questions/36940275/how-to-use-store-and-use-an-nsmutableattributedstring-in-nsuserdefaults/36940864#36940864) But instead of saving all the NSAttributedString you could only save the attributes then reapply them on another NSMutableString let labelFont = UIFont(name: "HelveticaNeue-Bold", size: 50) // Here are your attributes let attributes :[String:AnyObject] = [NSFontAttributeName : labelFont!, NSForegroundColorAttributeName: UIColor.redColor()] let attrString = NSAttributedString(string:"foo", attributes: attributes) let label = UILabel(frame: CGRect(origin: CGPointZero, size: CGSize(width: 200, height: 200))) label.attributedText = attrString self.view.addSubview(label) // Convert your attributes into NSDate and store it inside NSUserDefaults let attributesIntoData = NSKeyedArchiver.archivedDataWithRootObject(attributes) NSUserDefaults.standardUserDefaults().setObject(attributesIntoData, forKey: "attr") // Convert your NSData to [String: AnyObject] let yourStringInData = NSUserDefaults.standardUserDefaults().objectForKey("attr") as? NSData let yourOldAttributes = NSKeyedUnarchiver.unarchiveObjectWithData(yourStringInData!) as? [String: AnyObject] let label2 = UILabel(frame: CGRect(origin: CGPoint(x: 100, y: 100), size: CGSize(width: 200, height: 200))) // Here apply the attributes you saved earlier let attrString2 = NSAttributedString(string:"foo", attributes: yourOldAttributes) label2.attributedText = attrString2 self.view.addSubview(label2) For me it's working. 
i'd append my string to your empty array ;;;)
Currently PHP, I'm not entirely sure on the traffic and the DB is currently not in the cloud.
I'm using PHP at the moment, wasnt aware Swift supported server side.. Very interesting.
Your program is complaining that somewhere along the lines it was told to treat ("cast") a tab bar controller like a nav bar. But the tab bar controller wasn't a nav bar. The result was similar to trying to treat a cat like a flock of geese. You might want to read about how to use a tab bar controller and a nav controller at the same time, it's kind of tricky. https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/ViewControllerCatalog/Chapters/CombiningViewControllers.html
That's true. Thanks for easing my fear that the new Playgrounds app that appeared on my iPad will flood the market with app makers.
What? You can use a credit card to purchase a developer membership. 
You know how it offers you a bunch of different pre-fab types of projects? You might want to start with a tab bar project, one that already comes with two tabs to mess with, instead of a blank one. That's how i learned.
thanks
thanks
How other way you can do it? :D
SSD seems to help...
404
This is a long shot, but I installed Alcatraz package manager (pre Xcode 8) and then this: https://github.com/RobertGummesson/BuildTimeAnalyzer-for-Xcode It shows you what takes the longest to compile. I had a file taking 4000ms to compile each run. I fixed up that function and got it to compile in &lt;100ms speeding up all of my run times by a LOT. Good luck! 
That's a great point. My first gut reactions are that Swift was initially (and arguably still) hobbled in a sense by the need for Objective-C interop, so initially implementations like this would've taken the back seat. Another reason is that KVO/KVC are used in a lot of different applications, so doing the check outside of compile time, I'd imagine, would've been tricky. At the least, I hope Xcode recommends using the expression before compile time if it notices the absence of #keyPath() in KVC/KVO applications. Super awesome question though, it got me thinking :)
What's so bad about it? 
LOLOL You're so funny. I love how original your jokes are! /s
You need to figure out what is taking forever. There could be _so_ many different causes. Your statement 'Xcode takes forever to execute a program' is slightly hard to understand, because you could mean that xcode is taking for ever to execute the Swift compiler program which is compiling your program, or that Xcode is taking forever to start your program, or you could mean that once Xcode has started _your_ program - which then runs independently of Xcode, your program is taking forever to run. So, you need to be clear about what is taking the time. Read Apple's documentation for both Xcode and Instruments and find out what is taking the time. If it turns out to be Xcode itself (as opposed to your program) then that is going to be something to do either with your hardware - which only you and your pocketbook can fix :-( - or something to do with Xcode - which only Apple can fix, guided by your bug reports. If it turns out to be in your app, then you need to figure out if it is caused by your algorithm or the standard library or the Swift compiler having created bad code. As Tolstoy would have written, had he been a programmer: Well-performing programs are all alike; every badly-performing program is badly-performing in its own way.
What's wrong with monospaced fonts? Why would you want to eradicate them?
Does this dynamically insert spaces into code blocks to align them? Wouldn't that make SCM commits more difficult to read, as lines are being changed even though the code isn't?
Yeah, I almost deleted my comment after thinking through what would be required to make that work at compile time. New keyword for types that use such keys? Sounds tricky. But cool stuff. Thanks for the response. 
Boy, does that look ugly to me. 
Plus, changing them for whatever font you set your IDE to. Lovely.
And even though it's not "swifty" per se, KVO/KVC is a great pattern whose only real drawback, as far as Swift's safety-first design focus is concerned, is the stringy implementation under Objective-C. Using strings in that fashion comes off as a major code smell in Swift, so `#keyPath()` and `#selector()` are a godsend. Now it's not just a matter of having to use these features and feeling dirty afterward, but of being able to use them in a clean, safe fashion that's totally in line with Swift's focus, and maintain a clear conscience.
You'd need more than just the IDE support this or errors, diffs, etc could become very difficult to understand.
I would also recommend to look at LocationManager to understand delegates but it's pretty much the same as UITableView.
I've just worked through a tutorial on UITableView and that's why I wanted a tutorial on delegation to make sure I understood it fully. Thanks for the help :)
In each view's awakeFromNib or layoutSubviews call, add an NSNotificationCenter observer and post the notification the views are observing whenever you want. In the method the observer gets linked to, change the views appearance. Also, make sure you add a deinit to each view and remove the observers.
Interesting. I wonder if this could be built with Xcode 10's new editor extensions?
Coming from someone who is in Xcode for &gt;8 hours/day, it makes me wonder if you even use Xcode if you have to ask that question... The latest issue plaguing my entire team is completely broken auto-complete in 7.3.1.
Swift compiler sometimes has a hard time to infer the types of complicated expressions. If you explicitly define the types, it will significantly boost compilation time.
Had the same thought; kind of doubt it because the extensions, as described so far, only run as a result of explicitly executing a command (chosen from menu or key equivalent). So, unless there's a way of getting a command to run after any text alteration, that looks restricting. Even if it could execute, I wonder if it would perform well. 
ugh its hard to be a fan of Swift and not feel like you apart of some cult...
It's got nothing to do with cultishness. In a language where much of the point is safety, having to risk runtime crashes just because KVO works with strings really does stink up your code.
Gross.
Because of MVC you create your views as independent classes somewhere and provide delegate/data source methods in order to work on and with them. Also you have to create two properties called delegate and dataSource in your class and you set them in the viewcontroller you use them. 
I think /r/iosprogramming would be better.
It's a concept common to all programming languages. There are idiomatic patterns that are considered part of the character of the language and its frameworks, and then there are others that are considered not part of that character, not idiomatic. In Python they call it "Pythonic", and in ... well, I can't think of any other fancy word examples off the top of my head. But yeah, pretty much all commonly used languages have the same idea. It's a useful tool for maintaining familiarity across codebases in the same language. A common trap is when someone new to a language codes up a big chunk of work, then someone with more familiarity comes along and finds the code ill fitted and difficult to integrate, because it's not using the language's common idioms. 
Which font didn't you like? I thought Open Sans Light looked pretty good, but I suppose it's all subjective. I like that this gives us developers more choice.
Seconded. I had a class that was takin 55s to compile. After identifying it with this tool and adding more type declarations i got it down to about 400ms. 
Why are you doing that in sizeForItemAtIndexPath? Assign the label width in cellForItemAtIndexPath, there is no cell that exists until after this method returns a cell. &gt; My aim was to make the width of the cell the same width of the label + 5 Why are you trying to do that? It makes no sense.
Ah, my apologies, I looked around and saw other - similar - questions and presumed this also catered to development questions as well as general swift news / etc.. I shall have a look over there!
There are indeed lots of other similar questions here, no problem. I wish the mods would be a bit stricter about it :)
Define "low". And did you run with optimizations on?
Thanks! `popcount` is done with this in `Bitboard`: /// The number of bits set in `self`. public var count: Int { var n = rawValue n = n - ((n &gt;&gt; 1) &amp; 0x5555555555555555) n = (n &amp; 0x3333333333333333) + ((n &gt;&gt; 2) &amp; 0x3333333333333333) return Int((((n + (n &gt;&gt; 4)) &amp; 0xF0F0F0F0F0F0F0F) &amp;* 0x101010101010101) &gt;&gt; 56) } `bitscan` uses [this](https://chessprogramming.wikispaces.com/BitScan#toc5) implementation. I did a benchmark via `measureBlock` earlier and it can perform 540 random moves per second. Not sure how that compares to other libraries.
It is definitely feature-rich and, barring bugs, nicer to use than other IDEs I have used (Eclipse, IntelliJ, Android Studio). The bugs just are what kill me. There's nothing worse than being deep in a project and then being hit with bugs that are out of your control with no option of using another editor.
I don't understand the problem? I want the label to fit the exact size + extra room of the cell regardless of the size of the label
One quick fix would to be to assign the row index as the tag of the button upon your creation of the cell. This way you could easily retrieve it in your button press code. Have you used tags before? 
a while ago. What do you mean by implementing it at creation of the cell. Which function would i put the tag code in? What would it look like, if you don't mind? Thanks! 
I really wish we had a rule that banned posts about iOS frameworks. /r/iosprogramming exists for that purpose; this sub is about the language.
i'm still new to Swift and somewhat new to programming in general. I don't mean to be rude, but please explain how this isn't a Swift question...
Interesting! Thanks for the response. I'll try it out with the IBActions. 
It is possible to create ios programs in both Swift and Objective-C. The classes and methods that you would use, and the ways in which you would use them are exactly the same regardless of the language you are using. On the other hand, Swift can be used for so much more than ios programming (macos, linux server, I've even seen people now creating Swift apps for these Raspberry Pi machines). So putting an ios programming question in the swift subreddit will mean there is less chance of someone who knows ios programming looking at it, knowing the answer and responding. Looking at the posts over there in iosprogramming right now, I see plenty (maybe even the majority) are in Swift (either questions or answers). I don't think it is necessarily the case that it is limited to Objective-C. So, I guess you've got a little rock/hard place thing going on: if you post here, you may get no answers, but none of them will be in Objective-C; if you post there, you may get exactly the right answer, but in Objective-C. Personally, I'd opt for the latter, which was why I made the suggestion.
That's not 16k requests per second, that's 16k requests in *30 seconds*. I'm assuming the same goes for your Vapor/Zewo tests. Have you tried time profiling in Instruments? I haven't tried it for Kitura yet but that's the only way we'll find out what's causing the big difference in speed. But let's be realistic: Kitura is still in early development, and those "slow" speeds would probably still serve 1M+ users.
Yes idiomatic is fine, however the way this subreddit approaches idiomatic seems cultish. 
Yes sorry I wasn't referring to you, but the to the op of this comment thread.
My bad, fixed it.
Oh, my bad. Alright, I will wait for good news from IBM should they manage to resolve it. Not too experience in profiling.
This isn't the ideal way to sort in Swift. In Swift we have var things: [HeartRateObject] = createHROs() things.sort ( { first: HeartRateObject, second: HeartRateObject -&gt; Bool in // put the code here that compares first to second and returns a bool })
Assuming Swift 3 and hoping that I interpreted your question correctly: let intMatrix = [ [1,2,3], [4,5,6], [7,8,9] ] intMatrix.flatten().max() For Swift 2.3 change the last call to: intMatrix.flatten().maxElement()
So what you want to do is to fetch the Product objects from the NSManagedObjectContext using NSFetchRequests and NSPredicate for filtering. It could look something like this, assuming the *Product* object has a property called *barcode* let fetchRequest = NSFetchRequest(entityName: "Products") fetchRequest.predicate = NSPredicate(format: "barcode = %@", barcode) do { let products = try context.executeFetchRequest(fetchRequest) as! [Product] if let product = products.first { // Do stuff with the product here } } catch { print("Failed to perform fetch request: \(error)") } Let me know if you have any questions or if I didn't understand you correctly. 
I didn't explain it well at all, but I don't want the largest element. I need to figure out how to articulate my question better. Thanks for the reply. 
Can you show how you could do it in Python? 
I don't know if this is enough of helps, but here's a model I used last year, running in IPython. http://imgur.com/a/ebM3o
In my office, Swift has been adopted with very few participation in actually learning to write "Swifty" Swift. We've coined terms such as "Objective-Swift", " Swava", and "Swift++" because of this.
Frankly I never understood why one would want a compiler to guess at types. 
Xkcd is hilarious. 
Yet those other editors have all sorts of bugs. I know this due to using Eclipse a lot and having it trash stuff and do all sorts of unwanted things. For example redefining a key for me that I didn't want redefined. The problem with IDE's is that they are under constant development. It is due to this development that we get at best snap shots of what is more or less ready. I believe developers take the attitude that these are tools for professional developers and as such they should be able to handle the continuous flow of bugs. In other words these aren't word processors for the executive secretary. 
Maybe your local specs repo is out of date? Try running `pod repo update` [It's working for me](https://i.imgur.com/TTOOmIA.png)
But they /are/ tools for professional developers! Especially in the case of Xcode where it is nearly the only tool you can use for iOS. And releasing alpha/beta/release builds would be a great way to have more stable versions of Xcode, as right now the betas are like alphas and the stable builds are like betas.
Love the idea. I prefer some different libraries (SnapKit) but overall a great package.
Is there a way to convert the board state into an array as apposed to a FEN string?
Board conforms to `Sequence`, so you could just call `Array(board)` and you'll get an array of `Board.Space`. Edit: Added a section to the readme regarding this: https://github.com/nvzqz/Sage#iterating-through-a-board
i'd rather see a cross-platform IDE from them. Their current IDE is quite affordable. 
sweet thanks
Would they choose to threaten sales of [AppCode](https://www.jetbrains.com/objc/) by doing this, though? I'd have mixed feelings about a 'ReSharper' for Xcode; I may be in the minority, but I would rather see JetBrains maintain a solid focus on completing Swift support for AppCode, to return it to the superior standing it had in the Objective-C days. Xcode's gotten *much* better in recent years, and while I use both IDE's side-by-side (as JetBrains clearly intend, anyway) for the majority of code editing I still prefer the rich features and design philosophy of AppCode. It always felt like Xcode was afraid to be a grown-up IDE: Apple try to keep the UI bare and minimal like their consumer Apps but I'm not sure this is what developers really want - some things just shouldn't be 'simplified' to breaking point.
The warnings and hints are extremely good. And they allow you to automatically fix them in-place most of the time. Very complex refactoring just works.
It used to be, but over time Visual Studio has been adding many of the features (navigation shortcuts, refactoring support, etc). But even now there are a number of features in resharper that are not in the stock VS. The templates are one. And other resharper features are just better, like the unit test runner.
What do you mean by "very limited"? Which feature wouldn't be feasible?
default values would negate the principle of variadic parameters right? :0 
exactly
Hey guys, I'd love it if you guys could check my library. I recreated snapchat's collection view layout in their discover feed. Let me know your thoughts! Thanks :)
Visual Studio with ReSharper is better than IntelliJ. It's simply the best IDE out there. Vanilla Visual Studio is pretty good as well nowadays but ReSharper still is a productivity boost for most.
Be cautious if it's your main device; I've had several apps stop working and Wi-Fi performance has been terrible (long drop outs, possibly caused by firmware restarting?). Also tethering plain doesn't work. 
Does it say Optional("") in the label or just in the console? Because that would be expected in the console. `UILabel.text` is of type `String?`.
Pretty sure that a freshly allocated tableviewCell has nil in the text properties of those labels inside your viewDidLoad. If you create that cell in viewDidLoad, it's going to be hard to use inside cellForRowAtIndexpath. 
You sure you want that or this? { "foo" : { "bar" : "bar value", "baz" : [ "value one", "value two" ] } } } First case: struct A { var bar: String var baz: [String: String] } Second: struct B { var bar: String var baz: [String] } And then implement the initializers to conform with Mappable. You will have wrap it up in another small Dictionary or Struct to get the 'foo'. let b = B(...) let x = ["foo": b]
I have also had horrendous Wi-Fi performance... It is just painful... really painful (try to watch Twitch with it...)
You need to properly connect the outlets by loading it from a .xib file first. I do it this way, there's probably a better way, but the general idea is to load the view from a nib file: customCell = TableViewCell() // We require an initialization to properly assign ownership at the instantiateWithOwner call bellow customCell = UINib(nibName: "TableViewCell", bundle: nil).instantiateWithOwner(customCell, options: nil)[0] as? TableViewCell Do not that this requires a .xib file named "TableViewCell.xib" present in the project.
Thank you for your feedback! Even though NSObject isn't strictly Swift, I believe that it is important to understand the subtle differences in how NSObject inheritance changes Swift objects' equality. 
The same can be said for #selector() which does the same thing, has already come in handy in my iOS app. 
Meh. Then I'll continue to have Xcode and AppCode open side by side :-/
`myArray.reserveCapacity(1000)` (or whatever reasonable capacity) might speed up normal appends.
&gt;if you change the object's reference, the new reference will take effect in all of the structs That's not how references work. The reference stays the same, you're just changing the data that the reference points to. If you were to actually change the object's reference, this wouldn't mutate the other structs that contain the old reference at all.
I will answer this question as a PMM for AppCode. &gt;will JetBrains produce smth like Re-Sharper? It's one of the [possible directions](https://youtrack.jetbrains.com/issue/OC-13733) when Apple will open more powerful extension API. Currently it's impossible to get the current file name, the current project name etc. It's a show-stopper for making any complex extension as well as a lack of ability for integration into the editor UI. So, if somebody wants it - push Apple via radar to add these abilities. &gt;Would they choose to threaten sales of AppCode by doing this, though? It won't happen even if we'll decide to make the second product for iOS/OSX developers. AppCode has it's own community which is very large and has it's own benefits for the large amount of our customers, so its development won't be ever stopped. 
Btw, Swift plugin for CLion has mostly the same Swift support as an AppCode. From your comments it looks like you're missing some features, could you please describe, which?
Append in a prereserved array should be the same though, only the counter variable is inside the array instead of in your code. 
Test it yourself, if you don't believe me. It surprised me too, FWIW.
I'm highly skeptical of that as structs/sort use static dispatch and stack storage while NSSortDescriptors and NSObject rely on the Obj-C runtime and dynamic dispatch with items allocated on the heap.
Also Array, Dictionary, Set, and String…
sauce?
Appending to an array should definitely be (amortized) O(1).
Sure, it depends on what you need to do with the data. `contains` is definitely much faster for a set, especially if you use a good hash function.
Working gist link: https://gist.githubusercontent.com/miwand/6a794e2900bafecf7c17b9134b026fb4/raw Rather than using an NSMutableArray I would consider using a regular Swift Class for the array. Then you can use regular .append and it works with structs etc. I hadn't considered it myself until it was suggested here: .https://www.reddit.com/r/swift/comments/4q2rgh/appending_arrays_in_swift_and_avoiding_on/d4q2ej4
What you're saying is true, but you can see in the post body of OP that the array certainly is unique, so that's not what's going on here.
Talking with the Swift team, reading the standard library source. That's how copy-on-write works in Swift: you wrap an object in a struct, and have all the mutating functions check whether the wrapped object has a refcount of 1 (i.e. has only one reference).
The ViewController implements viewDidLoad. If you want to animate things that you put in a .xib there are various ways. You can either animate the auto layouts or the frames, but don't mix it. I would go the auto layouts animation route. http://stackoverflow.com/questions/12622424/how-do-i-animate-constraint-changes
If you get IOS 10 you can only run your apps in Xcode 8. All though if you have IOS 9 you can run application from Xcode 8 (beta) I have both beta Xcode 8 and beta IOS 10 (you can always delete IOS 10 and go back to 9 if you don't like it). It's best to start using Xcode 8 because it uses the new swift 3. That way when it officially releases in September, you know how to use it.
Well, I suspect that he simply replaced the `append` call by a subscript (and used a different initialiser), but technically you're right.
A question about this: What's the difference between applying a mapping function on an array vs doing .forEach?
Hmm, ok. I just went and re-watched where I saw that, in the Stanford lectures on the subject.. it's if it is trying to conform to a protocol with optional functions, it apparently has to inherit from NSObject. I guess its an objective C thing. Thank you.
Functional programming doesn't typically support "for loop" iteration. Languages like Haskell literally don't even have a for keyword. Iteration is typically handled via recursion. Map typically takes a function (higher order function) as a parameter and then applies that parameter to every element. Map is thread safe and very parallelizable -- for loops are **not** necessarily parrallelizable. 
Which version of Swift were you testing it with?
/r/iOSProgramming is what you want. You aren't asking about the specifics of the language Swift.
Adding to /u/sweetverbs, don't prepend method names with `get` unless they're returning a value by indirection ([example](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIColor_Class/index.html#//apple_ref/occ/instm/UIColor/getWhite:alpha:)). `getTopViewController` should be `topViewController`, &amp;c.
I'm still new (and I'm not OP), would you want it to read: let loginScreen = LoginKit.loginScreenController() as? LoginController 
Results are different in Swift 2.2 vs Swift 3. I'll post what my colleague sent me once I get to a computer.
If you want to do it in Swift, I highly recommend looking at enum Result types. These are not in the foundation but easy to create and use. There's plenty of resources for this online. The typical guideline I use: Synchronously errors? Use ErrorType and throw Asynchronous errors? Use a result type
Use performSegueWithIdentifier(). You'll need to name your segue in the editor. 
Best would be to make `LoginKit.loginScreenController()` return `LoginController` in the first place, not `UIViewController` which has to be casted back to `LoginController`. In source of this method you can clearly see that there is new instance of `LoginController` created, but function has `UIViewController` as a return type in its declaration. It doesn't make sense.
Wrap the perform method inside an if condition that only runs if the credentials are correct. We can't really tell you how to check the login information, as that's very dependent on where you are storing the data, your backend (assuming you have one), etc 
How do i check it?
And I did wrap it in a condition if the username and password are correct I feel in the else statement there should be a line of code saying don't segue
Hey /u/Lanza21 here is what I am using. I tried it out on Fast [-0] optimization. You can simply plop it into a test file and check it out. I must be doing something wrong with sort then. Sorry for the messy code in advance - https://gist.github.com/miwand/c9fffd009f42ff7a9be1d7f5bd6d70e3 
Remove the segue from the button. Make the segue from the view controller. It should look like this https://1drv.ms/i/s!AtfubmBOh4AgogfJ78GVYMV0AamR To make that, right click and drag from the yellow circle to the destination view controller. That should fix it.
It should work without any changes required to the xib. You could check the file's owner in the xib is pointing to "TableViewCell", and the outlets are all properly attached. I'm not sure but the root view of the hierarchy is supposed to be attached to the 'contentView' property of the file's owner, as well.
The main reason behind this is more likely the renaming of Cocoa API, which causes the perceived property names to be different from the KVC keypaths. In some cases where dynamism/polymorphism are needed, e.g. an object mapping framework, you probably do not want/need/won't be able to use the compile time check either. Let's say a `NSDictionary` as `NSObject`.
position is a struct composed of CGFloats, not Floats. 
Yesssssss you also learn other principles that relate to programming in iOS such as MVC, which stands for Model View Controller. I recommend the course. 
I've achieved something similar with table view methods: beginupdates and endupdates when changing the cell's height In Swift: //for sake of the example I'm going to asume you have just one cell override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return 1 } override func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat { //you can check based on the indexPath here if self.myCondition { return 0 } return 60 } override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) { tableView.deselectRowAtIndexPath(indexPath, animated: true) self.myCondition = !self.myCondition tableView.beginUpdates() tableView.reloadData() tableView.endUpdates() } 
There's so much more to iOS programming than the programming language. So yes, it's definitely relevant.
I don't get what you mean. if i remove the Float cast on towerNode.position.x = Float(touchX) i get "cannot assign value of type CGFloat! to Float' 
What Swift 3 affects most is just how things are named. The compiler would be able to tell &amp; sometimes suggest the renamed version for you.
Swift 3 doesn't change much apart from the naming of a bunch of functions, so yes you should be fine
Thanks for your reply. Could you guide me a bit more simply as in where should I put animation and where should I call it? I'll be highly grateful.
You are welcome to [fill a bug report along the others](https://bugs.swift.org/browse/SR-1049?jql=text%20~%20%22expression%20was%20too%20complex%22) and cross your fingers for somebody to raise the priority.
Swift's type inference (trying to guess types) still has lots of problems. If you tell Swift what the types are, it can proceed. In your situation, the unknown types are the *constants* in your expression. To tell Swift their types, you'd need to write them like this: var f = y-(2 as Double)*xp - ((((1 as Double)-meu)*y)/pow((pow((x+meu),(2 as Double))+pow(y,(2 as Double))),(1.5 as Double))) - ((meu*y)/pow((pow((x+meu),(2 as Double))+pow(y,(2 as Double))),(1.5 as Double))) This will compile without problem. Annoyingly (since I prefer the aesthetic), wrapping the constant in a constructor (i.e. `Double(2)` instead of `(2 as Double)`) will not solve the problem. You could also define them as variables before the expression.
Just for fun it can be done in much concise way let students = ["Jeff", "Ryan", "Simon", "Debra", "Anna", "Liz"] let grades = [88.0, 98.8, 76.7, 80.1, 94.3, 97.5] let zip_sudents_grades = zip(students, grades) for pair in zip_sudents_grades { print("\(pair.0): \(pair.1)") } let formattedStudents = zip_sudents_grades.map { ["name": $0.0, "grade": $0.1, "letter_grade": ($0.1 &gt;= 90 ? "A" : $0.1 &gt;= 80 ? "B" : $0.1 &gt;= 70 ? "C" : "D")] } print(formattedStudents) let aGradesCount = formattedStudents.reduce(0) { $0 + ($1["letter_grade"] as! String == "A" ? 1 : 0) } print(aGradesCount) 
&gt; Annoyingly (since I prefer the aesthetic), wrapping the constant in a constructor (i.e. `Double(2)` instead of `(2 as Double)`) will not solve the problem. That sounds like a major bug.
Thanks for all the feedback. Looks like I have quite a bit to do as well lots of opportunities to improve. 
I can't recommend Paul Hegarty enough. Even an old Obj C course would be relevant if you want to program in Swift. Paul is a master in explaining the MVC concept. If you're interested, I wrote a [small blogpost](http://michaelteeuw.nl/post/109224514697/become-an-awesome-ios-developer) a while ago about learning how the program iOS apps using the Stanford course. Edit: missing word. 
Which line gives the problem?
Usually in viewDidAppear.
If you are only ever going to have 1 open then yes its very simple ~5 mins work. Have a var on your dataSource that keeps the indexPath to the cell with expanded Height: var openIndexPath: NSIndexPath? then in HeightForRowAtIndexPath: if indexPath == openIndexPath { return openHeight } else { return closedHeight } then on didSelectRowAtIndexPath: if openIndexPath == indexPath { openIndexPath = nil } else { openIndexPath = indexPath } tableView.beginUpdates() tableView.EndUpdates()
Absolutely, another great book is Ray Wenderlich's Swift Apprentice 
Yes.
Yes.
Are you sure the touch location is in the same coordinate system as the scene?
Yeah, the key point is that you have to use the same uitableviewcell object between updates. 
Does the default weather app not count as 'iOS' ? 
I'm glad to help you :) So, you can extract it in other way. After you get the **dateObject** (as in my previous message upper), please add this code to achieve every detail of it: let dateComponents = NSCalendar.currentCalendar().components([.Year, .Month, .Day, .Hour, .Minute, .Second], fromDate: dateObject) let year: Int = dateComponents.year //2016 let month: Int = dateComponents.month //7 let day: Int = dateComponents.day //4 let hour: Int = dateComponents.hour //18 let minute: Int = dateComponents.minute //38 let second: Int = dateComponents.second //35
Cool. Any way to make an Xcode addon with Alcatraz? 😊
Any chance this means hacking with swift will move to Swift 3.0? Or are you going to wait for it to settle further?
Also good, the Paul Hudson stuff
I suspect updates to HWS come after completion of Practical Swift (assuming b2 fixes the impediments to that)
You can use Eureka to help you build forms. It has a pretty expressive API.
Why? Swift 3.0 requires Xcode 8, which is still in beta. The App Store doesn't allow apps created with pre-release software. External Testing will be available once the Xcode 8 GM is released.
I don't think that's the same. In Weather, you tap the cell to open a view controller full screen, whereas here OP wants to expand the cell while still showing the other cells.
Oh ok thanks. Is there anything remotely close to this?
Oddly that is insufficient. This also shows the same error: ` var f = y-2.0*xp - (((1.0-meu)*y)/pow((pow((x+meu),2.0)+pow(y,2.0)),1.5)) - ((meu*y)/pow((pow((x+meu),2.0)+pow(y,2.0)),1.5))` but this works fine: ` var fone = y-2*xp` ` var ftwo = (((1-meu)*y)/pow((pow((x+meu),2)+pow(y,2)),1.5))` ` var fthree = ((meu*y)/pow((pow((x+meu),2)+pow(y,2)),1.5))` ` var f = fone - ftwo - fthree` 
No; Hacking with Swift and Pro Swift will both wait a little more. If I had updated them already, Swift 3 beta 2 would mean me going back through all the chapters again because it's changed things from beta 1. For example, `FileManager` has a `current` property now rather than a `current()` method. I don't really want to update both books and videos twice :) I *expect* to wait for beta 4, by which time I think things will have settled, but I can't confirm that. However, the book will definitely be updated before Swift 3 is released as final.
It's not "[the Swift way](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TypeCasting.html)" though. 
I have another Swift book in the works right now that I want to release before I update HWS or Pro Swift. I haven't announced it yet, but will do soon! The Swift 3 changes in Xcode 8 beta 2 mean I'll need to issue an update for [Practical iOS 10](https://gumroad.com/l/ios10) addressing what's changed, and that will happen on Thursday.
I wrote a tutorial on the [multipeer connectivity framework](https://www.hackingwithswift.com/read/25/overview) and also some [easily reusable sample code](https://www.hackingwithswift.com/example-code/system/how-to-create-a-peer-to-peer-network-using-the-multipeer-connectivity-framework) – you might find one or both of those useful. If you want them to create their own name, you could perhaps [add a text field to an alert controller](https://www.hackingwithswift.com/example-code/uikit/how-to-add-a-uitextfield-to-a-uialertcontroller) then use that with your `MCPeerID` initializer.
Ah gotcha! Looked at the diagram incorrectly.
I don't think so.
Yeah, I just dragged it to the centre. Thank you very much - this is just kind of a learning app so glad I know now. I'll try and find out how to do Auto Layout, is it in the same area? thanks,
I need this answer too. I have some stuff in the AppStore and some stuff on github. 
If only I could download it. Tried several usually fast locations and couldn't get any reasonable download speeds. At one time it was telling me two days just to download Mac OS Sierra This really sucks. 
Need more info! First year or fourth year CS student? Honestly how good are you, do you have any publicly visible source code that is all yours? How about substantial private projects? All these questions boiled down to one thing, where are you development wise as a programmer. Or in other words what is you experience level. To be honest you have already left a slightly negative impression. Unless you have outstanding abilities you will get whatever rate they feel like paying you. Frankly you don't have outstanding abilities, effectively the apprentice, so you won't be negotiating much at all. 
Why not use something like numbers to manage grades? OK I realize this is a contrived example but an example that works in the real world would get the points across better. 
I'm not at my computer but I'm pretty sure there's something like .removeAllActions, so there might be something along the lines of .removeAllActionsExcept or something like that. If not you might have to remove each action individually.
I suppose location would also play a role in determining income
I hate to burst your bubble (and maybe this won't be a problem for you anyway), but source editor extensions are fairly limited in capability at the moment. I suggest you check out the WWDC video on the subject. Extensions can only operate on the current file, and must be manually activated by the user each time. I'm really hoping this is just Apple dipping their toe into the water to test the concept, at that next year we will get an Xcode 9 with support for much more capable extensions. 
Not the prettiest (as `reduce`-based solutions usually are), but it gets the job done :) let points = [ (x: 10.3, y: 11.2), (x: 10.5, y: 15), (x: 11.1, y: 4.01) ] let grouped: [Int:[Double]] = points.reduce([:]) { d, p in var d = d d[Int(p.x)] = d[Int(p.x)].flatMap { $0 + [p.y] } ?? [p.y] return d } grouped // -&gt; [10: [11.2, 15.0], 11: [4.01]]
Also not the most performant, probably, but a cool use of `reduce` nonetheless!
Yea it should be 8S162m. Where can we download 8S162m?
I would not say that I have significant experience. I have programmed a few apps so far (that is, in Swift). I am near the end of my BA though, and have experience in other languages. I did a longer project for a company as part of my degree which was in C# at the time.
You can ask for what the highest offer is. 
Aaaand now my app won't compile. Yay beta day!
oh ok 
Short and sweet, that's exactly what I'm looking for. Thanks to everyone for the replies. It does mess up the sorted array, but that's easy to fix. However, some of the things you use to declare the function are those "I don't know what this means but I don't think I will need to immediately, it's probably a quick answer but I'm not sure where I would find it" things - which is something that I do as an amateur if it looks too confusing, so maybe now is the right time to ask. I'll step through them quickly, let me know if I'm way off. the &lt;T: Hashable&gt; thing is a bit of a mystery. I know hashable means it provides a 'hashValue'(and can thus be used as a dictionary key). What are the &lt; &gt; brackets? And what is T and why is T always showing up in these things associated with sequences. Is T just a placeholder for the class name? ie the class that is conforming to sequence the parameter here (externally 'by', internally 'property') is a closure that takes an element from the sequence, can fail (throws) and returns T, which I guess an item that conforms to Hashable. 'rethrows' I presume means if this closure I took as a parameter failed, I willl also fail. Was the 'rethrows' handled entirely by 'try'? And if it fails when it 'tries' property, it then breaks the loop and throws that failure to whoever called grouped? Finally, what is @noescape. This one I can't even guess. Again, thanks a ton for the reply.
Apple's iOS 10 Watch app does use expanded table view cell action like this in the 'My Faces' sub tableview.
It surely is cheap, but it still makes your function O(n^2), which will probably be quite noticeable if you're working with a lot of values.
Would you happen to know how to do that or are you not a JS developer?
&gt;the &lt;T: Hashable&gt; thing is a bit of a mystery. I know hashable means it provides a 'hashValue'(and can thus be used as a dictionary key). What are the &lt; &gt; brackets? And what is T and why is T always showing up in these things associated with sequences. Is T just a placeholder for the class name? ie the class that is conforming to sequence It's a generic constraint, definitely get yourself comfortable with generics! Basically we want to group by some property, but we want to allow any kind of property, so we just call it `T`. The only constraint we put on `T` is that it should conform to `Hashable`, so we can use it for the keys of the resulting dictionary. The parameter has type `(Iterator.Element) -&gt; T`, which means that the given closure takes an element of the sequence and returns its property of type `T`. Having to mention `Iterator` is due to a language limitation, and it will probably be gone in Swift 4 or so. &gt;the parameter here (externally 'by', internally 'property') is a closure that takes an element from the sequence, can fail (throws) and returns T, which I guess an item that conforms to Hashable. Correct! &gt;'rethrows' I presume means if this closure I took as a parameter failed, I willl also fail. Technically, it means that if the given closure _can_ throw an error, _then_ the entire function can throw an error (which must then be handled). But that's probably what you had in mind. &gt;Was the 'rethrows' handled entirely by 'try'? And if it fails when it 'tries' property, it then breaks the loop and throws that failure to whoever called grouped? Exactly. Usually you only use `try` in a `do`-block, but since the function is marked `rethrows`, we can simply throw an error anywhere in the function and let the caller of this function handle that error. &gt;Finally, what is @noescape. This one is slightly more complicated. This function evaluates the closure immediately, i.e. it doesn't store it in a stored property or pass it into another function. This is important to know, because closures can capture references to objects which might become nil if the closure "stays alive" for longer than that object, and it could cause reference cycles. Long story short, mark a closure with `@noescape` if you can because it makes everyone's lives easier. There is even an ongoing discussion about making closures `@noescape` by default (i.e. opt-out rather than opt-in), just because people often forget to do it.
There's no extra layer - it just means tab characters are interpreted in a different (but better and more logical) way. Tab characters should delimit columns rather than shift the next piece of text to the next multiple of N characters.
Oh, you should have specified on a consultancy basis...
Both. Let loaders be instantiated and customisable, but have a default instance available as `Loader.defaultLoader`.
Not a bad idea.
I would just mimic UIAlertController and avoid singletons as much as possible.
Playgrounds will always be slower because of the overhead that comes with interactive environment and feedback mechanisms. You shouldn't be using playgrounds to do any kind of performance testing. Edit: From a person who works on Xcode -- http://stackoverflow.com/a/24052267/1835856
oh ok that makes a lot of sense. Thank you :D
Gotcha. Shame how easy it is to fall into little traps like this.
while x &lt;= 1000{ pickerDataSource.append(String(x)) x = x + 1 } Try this, I can't check if it works; no computer with me! 
NSData has a method to write to a file URL. You can use that to write to your app's document directory, which you then can load using the same file URL with NSData at any point.
When you add it to the project in Xcode, the assets get bundled up with the binary and delivered to the App Store. That means when they download the app from the App Store, all the images will be there.
Awesome. Thank you so much!
yes thats why i said &gt; Only asked for what I should ask per hour, so I can have an idea. So what do you think could I expect if I were to work on a full time basis in the Netherlands? :)
This will set up a picker view with 1-1000 Titled as "Item #1" "Item #2" and so on to 1000 func numberOfComponents(in pickerView: UIPickerView) -&gt; Int { return 1 } func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -&gt; Int { return 1000 } func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -&gt; String? { return String(format:"Item #%i",row+1) } Make sure you have the Delegate and Datasource protocols connected to and in your view controller Edit: This code is written in Swift 3
Bear in mind that there are about a bazillion different artworks in MtG. The app will be huge unless you're using very small thumbnails. You're likely better off getting them from the network on demand, rather than at startup for packaging them ahead of time. 
[Hacking with Swift](https://www.hackingwithswift.com) is a great place to start. Also, the [Stanford iOS 9 course](https://itun.es/gb/51O1bb) is brilliant too. I'd say there's absolutely every reason to start learning now. There's a great many changes, for sure, but nothing that you couldn't adapt to. Learning Swift now gets you used to the language in preparation for Swift 3.0 and onwards.
I'm well aware. I was considering scraping them onto my own network backend maybe? I can't ping Gatherer every time I need an image to load.
There are two different suggestions here so far that are both useable, but I'm going to say that if there are THAT many options in your picker view, it's going to be a pain in the ass to use. If you really need numbers 1-1000 in a UIPickerView (instead of a text field), use four rows, one for each digit (0-1, 0-9, 0-9, and 0-9).
Maybe this is a cultural thing, but full time no one talks about hourly rate in Sweden. It's the monthly that you care about and then if it's part time you'd still talk about it as if full time and then just do the percentage of that. 
You can initialize arrays from ranges. For example, let nums = [Int](1...1000) initializes nums to an array containing the numbers 1 to 1000.
any idea why I can't see the link to download iOS 10? also, is it worth it/risky to download it?
I would just bundle the images in an separate folder within the app and later get them with [UIImage imageNamed:@"IMAGE_NAME"] In the json-file you just have to specify the name to the image. The size of the bundle will be huge, so fetching on-demand and cache would be better for the user, if you int future find a way to do it. Converting images to NSData-string doesn't, as far as I know, save any inventory space. Just increase complexity.
And on the flip side, if you're sure it's a valid URL (hard-coded, for example) explicitly unwrapping it with `NSURL(string: "https://reddit.com/")!` might be what you want. 
I'm new and dumb; what's bad about singletons?
Unfortunately that is not true. let url = NSURL(string: "asdasda&amp;@82381da1!") url?.absoluteString // Prints "asdasda&amp;@82381da1!" NSURL does close to zero validation on what you give it. The short answer is: because NSURL() can fail. For unknown reasons. 
&gt; The short answer is: because NSURL() can fail. For unknown reasons. Not unknown reasons – SheepWheatOre was right, even though they picked a bad example. `NSURL`'s string initialiser can fail if you pass in a string that isn't a valid URL. Try it: &gt; NSURL(string: "This is not a URL") 
Now there is an awesome solution. This can be done easily with some added switch statements and changing the return values of my previous post. EDIT: Here is the altered code to use the digits method. I actually just used an if statement since all other cases would return a value of 10. Again written in swift 3 func numberOfComponents(in pickerView: UIPickerView) -&gt; Int { return 4 } func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -&gt; Int { if(component == 0){ return 2 } else { return 10 } } func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -&gt; String? { return String(row) }
`print(optionalString ?? "nil")` is what you're looking for.
macOS* Edit: Nevermind, I didn't realise that's a book title!
IMO it is. Force unwrapping has some legitimate usages and this is one of them. If you have hardcoded url, then you are sure it's valid, so why complicate things with if-letting or guarding.
&gt; print("Non nil String: \(someStr == nil ? someStr! : someStr!)") This ist the same as print("Non nil String: \(someStr!)") and it crashes if the string is nil.
Fair enough: it's the title of the book I summarised so left as is. 
nothing unknown about it, a URL needs to match a standard: https://url.spec.whatwg.org
Isn't that the whole purpose of the operator?
I assumed that was good-natured snark. macOS isn't actually in release yet, so anything about coding under current non-beta OS/compiler must actually still be OSX.
I actually didn't realise it was a book. However, didn't they just rename all of OS X to macOS? I assumed it applies across the board, and not just for new operating systems (not that it really matters).
I don't have a paid developer account. Is that why?
Caching images reduces that drastically. I think it would be okay, as most users won't end up pinging Gatherer more than a couple of hundred times over the course of a month (as long as images are cached!)
Try changing only the y position: `sprite.position.y = location.y`
I heard from a colleague that segues are broken with Xcode 8 beta 2. 
Segues are working in my project without issue using Beta 2. Who knows though, maybe they are not working correctly in all cases. OP you have the wrong signature for prepare (at least for iOS). The segue parameter is not an optional. Let autocomplete enter the method signature for you: override func prepare(for segue: UIStoryboardSegue, sender: AnyObject?) { if segue.identifier == "editPic" { if let viewController = segue.destinationViewController as? &lt;your view controller type&gt; { //viewController.property = property } } } 
Not generally, [different programming languages handle it differently](https://en.wikipedia.org/wiki/Null_coalescing_operator), some just check for nil. But concerning Swift you are correct, unwrapping is an important task of that operator.
Making a property lazy will improve performance only if a) it is taking significant resource/time to initialise and b) it is possible to use the instance without ever referring to that property (because as soon as you refer to the property, you incur the cost). I suggest these steps to improve performance: 1. measure to find out what is non-optimal. 2. take the results of the measuring and decide, for each non-optimal point, what is causing the slowdown or the resource consumption. 3. figure out how to make it faster or consume fewer resources. 4. implement the fix. 5. repeat the measurement to decide if the fix was effective.
No, not easier at all..
It looks good... I'll go over the code in more depth a little later today and give any feedback I can find. But on a side note, yay for using Fair Lawn in your screenshot, I grew up slightly (maybe .25 of a mile) west of that map... go you
/u/DressTheMonkey is right about figuring out where to optimize is an important step. Its also worth noting that the Swift compiler currently has some [small trouble with lazy variables.](https://bugs.swift.org/browse/SR-1277) Although its [getting a lot better](https://medium.com/swift-programming/swift-build-time-optimizations-part-2-37b0a7514cbe#.6iwbclyf6) in the Swift 3 compiler the issue above is still open. Just be mindful of it when you do use lazy vars and it might be worth download the tool mentioned in the article and checking your compile times if you start having issues.
I'm just nit-picking here, but those comments can probably go away. `colorPallette.powderBlue()` is already pretty clear. What new information does `// Blue` give me? Even more pedantic: the word "palette" has 1 'L'
Thanks! Those comments are old. I had the RGB there before I abstracted. Happy to fix this weekend when I have some time. Also, I'm not great at spelling :/.
If I have time this evening I will fork and do a PR :)
Also not a big deal but the color methods in UIColor are static, so wouldn't it make sense for the same to be true for your `ColorPallette`? Really doesn't matter though, but it could save you the initialization of `ColorPallette` whenever you need to use it.
If that's the case try animating the layer's transform instead. Your view is constrained by the autolayout constraints. And only sections defined by those constraints will register those clicks. At least that's what I've found. If I am trying to move a view around without worrying about where it will register gestures, I animate the transform. You'll first have to figure out what a CGAffineTransform is.. turns out it's pretty easy. An affine transform takes a point, does some matrix math and spits out a new point. This article was helpful: http://iphonedevelopment.blogspot.fr/2008/10/demystifying-cgaffinetransform.html In your case my animation would look like this let widthAnim = CABasicAnimation(keyPath: "transform.scale.x") self.widthAnim.duration = 0.5 self.widthAnim.fromValue = 1 self.widthAnim.toValue = 6 self.widthAnim.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut) self.widthAnim.fillMode = kCAFillModeForwards self.view.layer.addAnimation(self.widthAnim, forKey: nil) Adding a key when you add an animation to a layer gives that animation a key for that layer only, so when you want to call the animation again later, it will have a key to summon it up. You can leave it blank if you won't be calling it again. (at least that's what I've picked up from trial and error, I'm not an expert)
Yeah, isn't Stanfords course with Swift 3? I haven't checked it out yet but I obviously agree with not learning deprecated languages. 
What would be the best resource for that iyo? 
The blitz is coming... // RW Team Member
Yep -- to solve a similar problem, I had: struct Palette { static let prettyBlue = UIColor.... ... }
Thank you for the help, I will implement that tomorrow when I work on the app again. Learning swift can be a little tough sometimes and confusing.
Check out the hit testing methods. I'll check properly tomorrow when I'm not drunk 
Go watch this: https://developer.apple.com/videos/play/wwdc2014/235/ Do a search for wwdc videos related to scrollviews. http://asciiwwdc.com/search?q=uiscrollview Lots of good information about what you're trying to do. 
yeah, everyone swears by these videos but that scared me off as a complete beginner. I might give a few episodes a shot and see how hard it really is. 
The way I would do this is by making a new object class to hold the action sheets and information collected about them. I would use a singleton to load, hold, manipulate, and save the array of action sheet objects. If you need some help understanding this I could make a quick project and publish a repo on github.
Also if you want to initialize a computed property only once and later use the same value, lazy variables are the correct way.
are we talking part time as a student? :D
For example. Time profiler, allocations instrument, etc. For time spent in particular, you can also write some test code that invokes these methods multiple times and measures the average. Xcode has some nice facilities for this. Google "Xcode performance test".
No, I'm sorry, I thought you're talking about full time :/ But it's still a lot compared to other jobs 
The task you're doing is called "profiling". I suggest this article: https://www.raywenderlich.com/97886/instruments-tutorial-with-swift-getting-started
The measureblock of XCTest may be worth checking out, though it doesn't offer the full depth instruments does. http://nshipster.com/xctestcase/
It means the compiler is open source. It can (and should) also mean that the libraries every program uses are also open source. It says nothing about programs written in Swift.
It means that if you want to make suggestions to improve the language, you can submit requests to change it provided you have a good reason and documentation/examples of the change. The Apple team will review it and reject/accept it. That's not everything but it basically means more community involvement. Apps written in swift are NOT opened up to the public as far as I'm aware, that would be very plagarism-y. Your app is converted into binary before being uploaded to iTunes connect, I believe, so Apple can't access your code. 
I don't think that this is possible, since you can't get access to the other app and can't scroll it. (and I don't think you can programmatically take a screenshot of another app.)
A few responses, no links. That's a shame. Swift is open source because [the source is available for everyone to download and compile](https://github.com/apple/swift). There. That's a link to the source. This answers the entirety of what it means by Swift being open source. &gt; Applications that were made using Swift automatically release its code to the public as well. This is entirely wrong. Nothing about "Swift being open source" conveys this message. As a very, very simple summary of license agreements, GPL (Gnu Public License) applications often mean that *publicly* released software must have their source made available (with certain caveats and other restrictions). However, Swift is not released as GPL nor have any of the core libraries been released as GPL. No license mandates users of Swift to open source their code. Swift's license is far more liberal in the rights granted to users. Explicitly so. Your confusion is because of a lack of familiarity of terminology and practice when it comes to software and code distributions. These two are separate things and each have a separate set of licensing goals. For the time being, you can generally find Swift code through public distributions (i.e. Github, StackOverflow, blogs, etc.) but you should be mindful of any restrictions (licenses) on said code before using it for yourself. In practical purposes, you cannot *know* that an application uses any particular programming language based on the execution of the program, but you can often introspect the binary and make a good guess. Very few modern applications are strict C. C++ applications will have lots and lots of mangled function names if you were to dump the link information. Swift applications are limited to OSX and iOS (practically) for the time being and often marked by the presence of Swift standard libraries and runtimes being distributed with the application. C# (on non-Windows systems) requires a Mono distribution or has a bloated binary with tell-tale linker identifiers. Each programming language puts their own fingerprint on the binary, but it is very seldom that the user has a reason to care how an application was put together.
&gt; It can (and should) also mean that the libraries every program uses are also open source. They're not making Foundation open source though, are they?
&gt; I understand that with Swift, we are starting to move away from reference types, and using more value types. This is kind of a weird impression to have. We have some super-flexible and nice value types (structs and enums) at our disposal now, but I don't think Swift has an opinion on whether we use reference types or not. Honestly, if I had to point out some of the things that make code "swifty," it would have to be things like making judicial use of computed properties, property observers, the "completion handler" pattern with closures (instead of setting up cumbersome delegate protocols), allowing type inference to do as much of the work as possible, making the right choice in a given context between `if let`, optional chaining, or force-unwrapping (so basically, having a really good understanding of optionals, and what meaning you're conveying to others who might read your code when you deal with them). To be perfectly honest, I wouldn't chase the people who want Swift to be a functional language down that particular alley. Ditto with people who think that you should only ever use value types. "Swifty" code is about embracing all aspects of the language to write something that is idiomatic (and benefits from this fact in terms of readability, reducing overall lines of code, etc), not about adhering to some highly restrictive dogma that rejects bits and pieces of the language that don't fit into a tidy definition of good/safe/whatever code. Really, this is the same as with any other programming language. You should be writing in the idiom of the language you're using, because that means you're leveraging the unique features of the language to create a better end product than if you just tried to translate over the idioms of another language.
https://github.com/apple/swift-corelibs-foundation Some of it, though implemented in Swift instead of Objective-C.
Given that Swift is still changing, we're still in transition and people haven't settled on a specific set of practices yet. I think the best way to start is to focus on protocol oriented programming and start paying attention to some of the people that talk about it the most: WWDC videos, Objc.io guys, Natasha the Robot, plus plenty of others. http://asciiwwdc.com/search?q=protocol+oriented https://www.objc.io/ https://www.natashatherobot.com/ For functional reactive programming, which isn't specific to Swift, you probably want to start looking at code on github that includes RxSwift or ReactiveCocoa. Check out the Artsy github: https://github.com/artsy since they're big on it (Ash Furrow, who wrote a book on the subject, works there). They also include full apps in their repo. Other than that, I think you can just start experimenting and figure out what makes sense for you. A lot of this stuff is still new so nobody has it all figured out yet. 
You can still use reference types. Classes are still reference types vs Struct which is value. You should use what works best for your problem. 
I'm looking for the same thing. I really like the way Alien Blue pulls it off
I just want you to know that you are my new favorite human and you deserve a medal.
Protocols are a way of achieving polymorphism, which is kind of the opposite of what singletons are for. You're not really supposed to subclass a singleton. I mean you can, but it's kind of weird. The method proposed in that article is the standard way of implementing singletons in Swift, and even though they aren't officially endorsed by the Swift team, they've designed the compiler to work with that pattern of coding. What you're doing now is still the "right" way.
A bit of a vague question. Is it just the display or also storing etc?
Haha. Thanks for that
The action should be just `#selector(datePickerAction)` PS. You shouldn't create a new date formatter each time. They are quite costly to initialize. Make it view controller's property. If you use same configuration of formatter in couple places of your app, it wouldn't be bad to have preconfigured singleton formatter for whole app. 
I'm on mobile, so I can't fully answer, but I'll get back to this. Basically, what your problem is is that didBeginContact, like it's name implies, is only called once. One way of handling this is to have your action repeat forever, store a reference to it, and then stop and destroy it in didEndContact. EDIT: non-tested code. It's in Swift 3, so some of the method calls are slightly different. If you have any questions, feel free to ask. &amp;nbsp; // self refers to the character here, as I assume it does in your code. func didBeginContact(contact:SKPhysicsContact) { // check to see that it is the red ball that began contact with the death zone // there are multiple ways of doing this // if so: let wait = SKAction.wait(forDuration: 1.0) let healthDecrement = SKAction.runBlock({ self.health = self.health - 1 }) let sequence = SKAction.sequence([wait, healthDecrement]) let hurtAction = SKAction.repeatForever(sequence) self.run(hurtAction, withKey: "hurt") } func didEndContact(contact:SKPhysicsContact) { // check to see that it is the red ball that ended contact with the death zone self.removeAction(forKey: "hurt") }
I've given up on ReactiveCocoa and completely transitioned to RxSwift a while back. There's good example app in RxSwift repo. Although not the same library, the general concept applies.
why would you not want to use IB?
Are you using your own navigation bar, or using stock? When you use stock you don't need to manage constraints for the navigation bar, you simply set the `title` property on your view controller and UINavigationController will read it and display it on the navigation bar. For view debugging I highly recommend [Reveal](http://revealapp.com/)
Sorry, I can't see where you say what the error is. Is it a compile error? runtime? is there a message? or the UI doesn't look right? or what? Can I also suggest that you consider taking the part that doesn't work (sounds like the definition of moveValue, based on your description) and put it in a playground. Then try diddling with it there. If you still get the error, that's good, because then you can try different stuff to get rid of the error and make it work as you want. It is much quicker to iterate on code-run-woe, code-run-woe, ...(many such repeated attempts, until)...code-run-woohoo! Furthermore, if you really really really can't find a solution after having done that, you will have a teeny bit of non-working code to ask for help with rather than a large amount of code for anyone who tries to help you to make their way through.
Just curious, why did you switch?
There are many reasons why this could be going wrong; you need to test each one. The reasons I can think of off the top of my head (I'm sure there are more, but this will hopefully get you started): * that code never gets executed * that code gets executed at the wrong time * that code doesn't actually enable/disable the correct button * that code doesn't actually enable/disable any button * the disable is working and is then immediately followed by an enable meaning it appears never to be disabled The main tool you have for figuring out what is going on is the debugger. Before firing it up, *plan* what you are going to do, and what the result should be before starting. Then, set a break at the top of viewDidLoad and in the number, didSet. Run the code, on breaking, step through. Ensure that what you thought should happen does happen. Ensure that stuff which is supposed to be non-nil (such as self.navigationItem.rightBarButtonItem) is in fact non-nil, by using the expression or po commands.
The navigation bar has to be constrained. The bar itself might look like it's correctly positioned on all devices, but if it's not constrained, the title is going to appear off-center.
thanks for the suggestions. I dunno why I didn't think of that xD
Doesn't your property just reimplement the default behavior of a swift property? Also try to remove the "self." in the setter
I still got the same error even after removing the self http://i.imgur.com/NUfkVN0.png
IMO I think it gets in the way of creative control. I think you can do a lot more with code than you can with IB
Im using my own navigation bar. Before I implemented my own it did not show, was I missing something?
 // // HomeViewController.swift // ProgrammersGuidetoInfinityRedesign // // Created by Devyn Lowry on 7/1/16. // Copyright © 2016 Infinity Design Labs. All rights reserved. // import UIKit import ChameleonFramework class HomeViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() view.backgroundColor = UIColor.whiteColor() //htmlButton let htmlButton = UIButton(frame: CGRectMake(20, 75, 125, 125)) htmlButton.layer.cornerRadius = 10 htmlButton.backgroundColor = GradientColor(.TopToBottom, frame: view.frame, colors: [FlatGreen(), FlatForestGreenDark()]) htmlButton.setBackgroundImage(UIImage(named: "HTML5Logo.png"), forState: .Normal) htmlButton.setTitle("HTML", forState: .Normal) [htmlButton.contentEdgeInsets = UIEdgeInsetsMake(-100.0, -70.0, 0.0, 0.0)] htmlButton.addTarget(self, action: #selector(buttonAction), forControlEvents: .TouchUpInside) //javaButton let javaButton = UIButton(frame: CGRectMake(175, 75, 125, 125)) javaButton.layer.cornerRadius = 10 javaButton.setBackgroundImage(UIImage(named: "JavaLogo.png"), forState: .Normal) javaButton.backgroundColor = GradientColor(.TopToBottom, frame: view.frame, colors: [FlatYellow(), FlatOrangeDark()]) javaButton.setTitle("Java", forState: .Normal) [javaButton.contentEdgeInsets = UIEdgeInsetsMake(-100.0, -75.0, 0.0, 0.0)] javaButton.addTarget(self, action: #selector(buttonAction), forControlEvents: .TouchUpInside) //swiftButton let swiftButton = UIButton(frame: CGRectMake(20, 225, 125, 125)) swiftButton.layer.cornerRadius = 10 swiftButton.backgroundColor = GradientColor(.TopToBottom, frame: view.frame, colors: [FlatYellowDark(), FlatOrangeDark()]) swiftButton.setBackgroundImage(UIImage(named: "SwiftLogo.png"), forState: .Normal) swiftButton.setTitle("Swift", forState: .Normal) [swiftButton.contentEdgeInsets = UIEdgeInsetsMake(-100.0, -75.0, 0.0, 0.0)] swiftButton.addTarget(self, action: #selector(buttonAction), forControlEvents: .TouchUpInside) //objectiveCButton let objectiveCButton = UIButton(frame: CGRectMake(175, 225, 125, 125)) objectiveCButton.layer.cornerRadius = 10 objectiveCButton.backgroundColor = GradientColor(.TopToBottom, frame: view.frame, colors: [FlatSkyBlue(), FlatPurpleDark()]) objectiveCButton.setBackgroundImage(UIImage(named: "ObjCLogo.png"), forState: .Normal) objectiveCButton.setTitle("Obj-C", forState: .Normal) objectiveCButton.contentEdgeInsets = UIEdgeInsetsMake(-100.0, -70.0, 0.0, 0.0) objectiveCButton.addTarget(self, action: #selector(buttonAction), forControlEvents: .TouchUpInside) //Adding language buttons to subview self.view.addSubview(htmlButton) self.view.addSubview(javaButton) self.view.addSubview(swiftButton) self.view.addSubview(objectiveCButton) //NavBar self.title = "Home" } func buttonAction(sender: UIButton!) { print("button tapped") } }
That looks good, your title should show up. The window's rootViewController is set to a UINavigationController instance? HomeViewController is the navigation controller's presentedViewController?
Reactive cocoa didn't have bindings for UI, not sure about now. Creating my own bindings is just too much effort. RxSwift comes with RxCocoa which provides bindings for most of the commonly used UI. There's also RxDataSource from the community which completely transforms a pull-based Api for table view / collection view to push based. It's consistent with the rest of reactive programming. All theses conveniences mean easier and less code. There's a bunch of Rx implementation on many platform, but they comply to the same underlying concept. The documentation on the official site is top notch. If you can't find good doc, blog, tutorial on RxSwift, u can always find them in JavaScript,c#, Java. Way bigger community in Rx. That being said I do miss the explicit error type definition from RAC. I believe it is being considered for the swift 3 release.
The get and set are completely unnecessary. Just use var moveValue: CGFloat = 0.0 It would be a good idea to go review the section on properties in the swift docs. If you specifically need to have something happen after setting the value, you can use willSett or didSet, instead: https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html
If you want the navigation bar to show up, instead of giving the tab bar controller a reference to HomeViewController, encapsulate HomeViewController in UINavigationController and give a reference of the UINavigationController to the tab bar controller
thanks for the link and the suggestions. I think I realized something new about set and get: Set won't work like this, I need to call set outside of the class to get it working. var faceObj = FaceView() faceObj.moveValue = 10 
It has been updated to use Result's `master` which is for 3.0. :) (CI failed because Travis doesn't have beta 2 yet)
Did it work?
An xcassets folder is absolutely the best way to do this. There's a feature called App Thinning, which reduces the download size for users of your app by only giving them the version of images that are relevant to the device they are on. For example, if you have @1x, @2x, and @3x versions of an image. A user on an iPad 2 (non-retina) would only download the @1x version, iPhone 6S users would receive only the @2x version, and iPhone 6S+ users would receive only the @3x version. To generate those images, I have a Photoshop batch process that takes the image at the maximum resolution, and then scales the images down and saves them at the correct resolution. I then drag and drop them into the xcassets folder in Xcode. As for the additional download pack, you'd put those images in their own xcassets folder, and set that up for use with a feature called On-Demand resources. The user would not receive those files when initially downloading the app, to make the initial download smaller. If at some point they decide to purchase that pack, they would then download the images from the App Store servers. You can see details on both of these features [here](https://developer.apple.com/library/tvos/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html).
I'd recommend watching Stanford's iOS 9 Apps with Swift course. It should be on iTunes U. Apple also has some pretty good documentation and tutorials on their developer site. If you're willing to spend some money I've heard good things about Team Treehouse, but I've never used it.
If it's well formed HTML you can parse it with NSXMLDocument and get the "p" entities.
Neat
Ray wenderlich has some great tutorials. 
How to build apps on YouTube he builds his apps only by code it helps a lot
So I will still get the first &lt;p&gt; only with rangeOfString() !?
Thanks :-) I will have a look into this method
Can I config it back to Swift 2?
Treehouse is amazing for beginners. My wife had never programmed anything previously and she completed their Swift track. I'm a seasoned front-end web dev and it was way too slow and basic for me personally. For the price and quality of content I'd say it's an extremely good bang for your buck especially if you are new to programming in general. 
&gt; to the new String ~~class~~ struct :) 
Here's a very basic Swift 3 solution: extension String { func htmlBody(within tag: String) -&gt; String? { guard let startRange = self.range(of: "&lt;\(tag)&gt;") else { return nil } guard let endRange = self.range(of: "&lt;/\(tag)&gt;") where endRange.lowerBound &gt; startRange.lowerBound else { return nil } return self[startRange.upperBound ..&lt; endRange.lowerBound] } } let html = "Before the paragraph&lt;p&gt;The paragraph!&lt;/p&gt;After the paragraph" html.htmlBody(within: "p") // "The paragraph!" Just to give you an idea of how you can work with Swift strings. If you're on Swift 2.x, it should be pretty easy to fix the syntax - if not, let me know!
Fair points. I really like RAC for its separation of hot and cold signals into `Signal` and `SignalProducer` as well as `Property`. On the other hand, the fact that Rx is consistent across platforms would be a great benefit when discussing with my android developer colleague who's using RxJava/RxAndroid. The (deliberate) deviations from Rx that ReactiveCocoa takes do complicate that a little bit sometimes. Also, I did not know of RxDataSource yet, that sounds really great!
No, `RAC5-swift3` depends on the `master` branch of Result, which has done the API renaming for Swift 3.0. I don't see why you would want "Swift 2" Result anyway, when it isn't possible to import Swift 2 libraries into Swift 3, or vice verse.
I see. Thank you very much!
Isn't String bridged to NSString?
It is bridged for imported APIs, but in Swift 3 the value -&gt; object implicit type conversion is abolished. You must explicitly bridge the value using `as`. https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md There is a pending proposal on further ditching the bridging behavior of `as[?]`, and relying on value preserving initializer for bridging.
&gt; You should always use String over NSString. This is bad advice for the reason that it ignores the complexities of string implementations. In general, Swift strings are safer and easier to "get right" in terms of multi-byte encodings. However, Swift strings are slower than NSStrings and provide a different API. Swift makes it easy to gloss over some of these differences by bridging between the two, but the bridge has a cost and frequently crossing the bridge can be a massive performance hit. If you can comfortably work with Swift strings, then it's advisable to stick with them. However, if you find yourself frequently using NSString methods or in need some of the implementation details of NSString (for instance, how it stores strings allows it to potentially be faster but more error prone than Swift strings), it may be worth using NSString entirely or bridging over to NSString before performing critical operations and then back to Swift strings.
From user prospective it's not a good idea that keyboard asks location permission.
/r/iosprogramming
Very useful, thank you!
I would also recommend Mark Price iOS 9 course. It helped me to understand a lot what i didn't before.
That fixed it, thanks very much. It probably would have taken me ages to work that out.
Good to hear! My project started February last year. Back then Rex didn't exist. I'd take a look at Rex again if I have the time
Unfortunately no, you can't set it to nil.
Thank you, I will try this by adjusting to my need and implementing 
managed to get it, thanks heaps dude! func didBeginContact(contact:SKPhysicsContact){ let firstBody = contact.bodyA let secondBody = contact.bodyB //RED collision if firstBody.categoryBitMask == PhysicsCategory.ball &amp;&amp; secondBody.categoryBitMask == PhysicsCategory.redBoundary || firstBody.categoryBitMask == PhysicsCategory.redBoundary &amp;&amp; secondBody.categoryBitMask == PhysicsCategory.ball{ let wait = SKAction.waitForDuration(1.0) let healthDecrement = SKAction.runBlock({ if self.ball.position.y &lt; self.frame.height / 2 + (self.yellowBoundary.size.height){ self.removeActionForKey("hurt") } else{ self.health = self.health - 1 self.scoreLbl.text = "H: \(self.health)" } }) let sequence = SKAction.sequence([healthDecrement,wait]) let hurtAction = SKAction.repeatActionForever(sequence) self.runAction(hurtAction,withKey:"hurt") } func didEndContact(contact: SKPhysicsContact) { if self.ball.position.y &lt; self.frame.height / 2 + (self.yellowBoundary.size.height){ self.removeActionForKey("hurt") } 
You're returning a String from a func that wants to return an Int.
See https://www.reddit.com/r/swift/comments/4s4adt/request_redditlike_commenting_tree/d581lpj
nope, it's not attractive. the whole point of Embassy is to provide a lightweight web server for UI testing. It's not for server side, I don't want to add any third dependencies. I defined the interface to be like WSGI from Python, so it would be like dealing with WSGI if you don't add any extra abstraction around it. I built another project https://github.com/envoy/Ambassador/ to make it slightly easier.
Post title definitely ticks all the latest buzzword checkboxes, +1.
By sample app, do you mean [Speakerbox: Using CallKit to create a VoIP app](https://developer.apple.com/library/prerelease/content/samplecode/Speakerbox/Introduction/Intro.html) ??
thanks a lot for your answer 
sounds great thanks
nice 
thanks a lot i will definitely take a look to it. 
Do you mean literally the strings "&lt;p&gt;" and "&lt;/p&gt;", or do you want actual HTML parsing? Should "&lt;p &gt;" be allowed, too? What about other HTML-valid whitespace characters, or escapes? What you say you're doing (extracting paragraphs from HTML) doesn't really match the approach you're talking about (searching and matching in raw strings). The solution to "find the text of paragraph tags in some HTML" is basically the same in Swift as in C++ or Java: get an HTML parser, and connect to the proper events (SAX) or query the parsed tree (DOM).
I think it make sense to make app as trailing parameter for `HTTPserver`. Thanks for the advice. But for the reason of using dictionary instead of custom type, I want to make it a standard based on function ABI instead of certain custom type. By doing that, web applications can be defined without even depends on Embassy. I knew there is other HTTP standard in the community like https://github.com/open-swift/S4, but it's an extra library to install. Certainly there is room for improvement, this is just a weekend project, I will improve it over time. :)
for UI bindings try Swifty Bond 
What do you mean? Sorry, I am not very experienced in Swift.
Thank you for this information. It's a good design idea that I can start with. 
IIWM, I would try to stick with standard concepts like arrays and UInt8 etc, rather than resorting to things with 'unsafe' in their names. They are called unsafe for a reason. The fact that they exist means that they are, on occasion, necessary, but should be used only after careful consideration of the necessity and consequences of their use. _Usually_ the 'unsafe' things are used when trying to interface with other languages, and AFAICT, you aren't doing that. as /u/ASnugglyBear says, it should be possible to allocate 16K worth of UInt8s fairly handily. Maybe it has more to do with when/how it is being initialised rather than its size? Also, maybe there's no need to _literally_ implement memory as an array of bytes? For example, you could guess that a lot of the memory is going to be unaccessed and use some sort of sparse array scheme. I haven't done it myself, but I'm sure googling spares array will lead to many possible algorithms. A couple I can think of off the top of my head would be to use a simple dictionary where the key is the memory address and the value is the byte at that address. Or, similar but less fragmented, a dictionary where the key is the address of a 'page' and the value is a whole page of UInt8 (where the size of a page is up to you, but would usually be a power of 2 so it is easy to determine the page + offset from an address). btw, I think an 8080 emulator is a brilliant project to learn the language; all the best.
Please add `super` to github description
Hi jdmg718! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/4sg75u/months_after_learning_swift_ive_decided_to/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
haven't really used it, but yeah jus google it and from my understanding it's a more like an alternative to ReactiveCocoa but lighter 
No. Not this. Hacking with Swift, iTunes iOS 9 or Treehouse, but not Rob Percival. Trust me. I got his class on sale for $9.99 and I want my money back. 
So, our conferences are great place to find partners, developers and listen to English-speakers :)
8080 processers could address 64K of RAM, which is still a _minuscule_ amount of memory by todays standards. A single icon in iOS or macOS consumes far more memory than the 8080 could even address. If there are memory issues or other performance issues, a single array of 64,536 UInt8 values is not the cause. Swift should be able to allocate it and access it very quickly.
And if the block you do that in ends, it passes out of scope and gets deallocated. so if you have func thisFunc() { var thisString = "Hah"; print(thisString) } someFuncCall(); // at this point 'thisString' has not been allocated thisFunc(); // at this point 'thisString' can be deallocated anotherFuncCall() So in your chunk above, once you exit out of that containing block the system will dump locationM at its leisure. You need to make sure the block that let is in isn't coming to an end before you're done.
Super interesting. Thanks. Looking forward to the rest of the series. 
I'm also doing this! Been really fun, though I don't think I'll have it done within the 100 days - mine might be 150 days. Started a new job it has eaten up alot of time. 
Link is broken OP
Haha, what did you not like about it?
Aside from him copying and pasting code without explaining optionals properly or protocol oriented programming? Aside from him writing Swift like it's Objective-C and having massive view controller implementations and not teaching proper MVC from the start? Not teaching completion blocks properly or trailing closures or enumerations as structures? Oh, just those things. Not much lol. iOS 9 on iTunes and Hacking with Swift are free and even HWS book is pretty cheap for what you get, and those two men KNOW their stuff. Best $25 I spent was on HWS. 
 private var _myProperty: String? lazy var myProperty: String = { [unowned self] in self._myProperty = doHeavyComputation() return self._myProperty! }() Then you can do if _myProperty == nil
Works fine for me too
Doh! Well, I've decided to take the Stanford's iOS 9 Apps with Swift course. Hopefully its not all a waste of time. The course is from March this year so i hope the good people at Stanford put some thought behind it when they gave this course in light of Swift 3 coming this fall.
I'm not as agile in Swift as I'd like but I'll give it a shot, hope it works! I thought this wasn't the correct solution because of all the fixes I'd have to do.
Somebody's gotta do it.
This is why optionals can be a pain. Try it again; it probably won't be nil this time. 
[removed]
When implementing generics, they change var children: [Node] = [] to var children: [Node&lt;T&gt;] = [] but that's completely unnecessary. It's inside the `Node&lt;T&gt;` class, so `Node` will have the generic parameter `T` by default. The same can be said about `func addChild(node: Node&lt;T&gt;)`.
Okay, okay... I guess that somebody has to be me 
The iOS 9 Stanford course and Hacking With Swift are both very good.
I've been audit some of the videos in that course and haven't made my way through all of them but I don't think Swift 3 was mentioned at all. The course is very good though, I like the instructors approach even if it is a bit hand holding. He seems to have a good grasp of Swift and what Apple is trying to achieve with it and understands the underlying concepts of MVC, protocols and so forth. Take his programs and materials along with Apples Swift 3 documentation and rewrite everything in Swift 3. You will learn a lot that way. 
Thanks for the reply! I guess you kinda nailed it, the framework is what scares/intimidate me. I don't really know what objects, methods and functions to call to do X, Y, or Z (or maybe there's an easier way to do W that I'm not aware of.) That part really feels like starting over from scratch. And man that syntax looks so funny/foreign... I guess I'll start with the Stanford course, as it seems to be what everyone recommends? I also shelled out a few bucks for an iOS9 course (by Rob Percival) on Udemy. Thanks, you've given me some renewed confidence that starting over isn't too bad. 
-1 point for never using the word "bidirectional"
It seems like the SignedNumber protocol is essentially describing an additive group, with a “zero” identity element and an additive inverse. What issues (other than inheritance from Comparable) would arise from treating it as such?
You can probably use a property observers [here is an example](http://www.codingexplorer.com/swift-property-observers/)
You're not dealing with abstract things here. Structs have a concrete representation in a data structure. Subtracting the Int 0 from a struct can't have any sort of meaning that is universal to all structs. If you want to treat the Int 0 as a zero vector or zero matrix, then you need to roll your own methods for the class that does that. You don't get it magically by declaring your class as conforming to SignedNumber. SignedNumber has axioms that govern the protocol. IMO, defining subtracting an Int from a struct for only one particular value of that Int is not good practice. 
Nice to hear Swift on Android being a thing. Sad that it's still so restricted and you have to jump through so many hoops. I'm still hoping Google is gonna pick up on this beautiful language and make it a first class choice for Android development. You can already use Kotlin which is similar to Swift. The syntax is almost equal but the Standard Library is not as good as Swift's Foundation. The main problem is that it still needs to talk to Java APIs. So even if Swift would be available on Android we would need proper interfacing between existing APIs and/or a major rewrite like Apple is doing right now, to really gain a benefit for app development.
VB6 was the first language I felt really good at; Microsoft had an educational program where they gave students cheap copies of VB6 and Visual C++, plus I had lots of magazines around that carried Visual Basic tutorials – that says a lot about how long ago it was :) I don't think you'll find VB too different from Xcode+Swift once you're past the initial shock. Let me try to give you a few pointers… (Advance warning: I've made some simplifications below in the hope it helps you understand; as you progress further in your learning this will become clear!) &gt; I've also had some theoretical exposure to object oriented programming This is important, because most Swift user code is written in OOP. Swift itself took a dramatic swerve towards a different paradigm – protocol-oriented programming – about a year ago, but even that has a lot in common with OOP, so as long as you're sound on OOP you have a leg up. User code (actual apps) still mostly use OOP, because Apple's frameworks use OOP extensively. &gt; memory management You'll be pleased to know that most Swift developers don't think about memory management. VB6 didn't have formal garbage collection, and instead used something very similar to Swift known as reference counting. (Used throughout COM.) VB.NET introduced garbage collection for real, but mostly you don't care – your code looks and works the same, because managing memory isn't an interesting problem for most people. Swift developers are in the same boat: we create objects and work with them, and most of the time it's down to the system to delete them. &gt; pointers This is another area where Swift is very much like Visual Basic: pointers exist in both languages, but are rarely used. You're learning Swift, and probably won't need to come near them for a good long time – potentially never. &gt; forking processes This is one place where VB and Swift diverge, but in a good way: background threads were hard in VB, because they didn't have native support. Swift does have native support, but it uses a system called Grand Central Dispatch to make them easy and efficient to use. GCD lets you say things like "here is a chunk of code: please run it in the background", or "please run this whole method in the background." You don't create a process or figure out synchronization – you just tell it what you want to do, and GCD does the rest. &gt; Windows concepts like DLLs/COM objects Coming from VB, Swift's equivalent of DLLs are called static libraries (foobar.a) and shared libraries (foobar.so). The bits you deploy with your application – think VBRUN600.dll – are actually compiled into your program with Swift, and are the static libraries. So if you added Google Analytics support to your app you'd get a file like libgoogleanalytics.a, which contained all their code a bit like a DLL. When your app got built by Xcode, the .a file can be embedded directly inside the application. (Apple applications are just folders – you should poke around in one!) On the other hand, the bits that other apps in the system use – think SHELL32.dll – are shared by everyone and so don't ship with Swift, and are the shared libraries (foobar.so). COM as you know it doesn't exist on iOS. Apple runs your program in a sandbox for security reasons, which means you can't talk to any other program. If you need to – for example if your app needs to talk to the Messages app – you go through a separate layer in the OS that acts as a security buffer between the two. &gt; Windows registry This doesn't exist on iOS. Instead, you have a mini registry all of your own called `NSUserDefaults` (or `UserDefaults` in the unlikely event you're on Swift 3.) This lets you read and write keys and values just as you would in the Windows registry. &gt; VB6 form iOS has a visual form editing too, known as Interface Builder. It's built into Xcode, and offers much the same functionality as the form editor from Visual Basic, although it's a lot more powerful because you need to make your designs work well in a variety of device sizes. &gt; event creation This is a bit weird in Xcode compared to Visual Basic, but it doesn't take long to get used to it. In VB you saw a long list of events, and you just double-clicked on one to have it create an empty method for you and connect it to the event. You were also able to give objects names inside the form editor, and have those names become properties in your code. In Swift that gets replaced by three things: 1. Outlets. These are how you create properties in your code from your form controls. To make an outlet, switch to the assistant editor (press Alt+Cmd+Return) so that you can see your design in the top and your code in the bottom. Now select a control (e.g. a button), hold down Ctrl, then click and drag from the UI into your code. You'll be asked to give it a name, at which point it's connected. 2. Actions. If you want to trigger a method when a button is tapped, or a switch is flicked, or a slider is moved, you follow a similar procedure: select the control, hold down Ctrl, then click and drag from the UI into your code. From the popup that appears, select Action rather than Outlet, and it creates a method that will be called when your event happens. 3. Delegates. For almost everything else, Apple's platforms use a delegate pattern. It's a way of saying, "whenever something interesting happens with this control, please notify this object…" For example, a text field has events for "should this begin editing?", "should this end editing?", and so on. If you implement methods that match those events, you get to handle them. Some are required, but most are optional – if you ignore them you get sensible default behaviour. &gt; error handling In VB6 you used syntax like "On Error GoTo My_Error_Handler", which meant that if any code in a method hit problems it would jump to some specific code. Swift has a similar approach, but it's much clearer: - `do` starts a block of code that might have errors. - `try` marks every line of code that might throw errors. - `catch` is where you handle errors. Like this: do { try someRiskyCode() } catch { print("Oops!") } So `do` is the equivalent of `On Error GoTo My_Error_Handler`, and `catch` is the equivalent of `My_Error_Handler`. As I said, the above contains a few simplifications to make it easier to understand, but you'll figure out more as you progress. If you'd like to learn more, I wrote a massive tutorial series teaching app development with Swift. It's available free to read online, or you can buy a copy if you want to support my work. - Read online: [hackingwithswift.com](https://www.hackingwithswift.com/) - Buy the book: [gum.co/hws-book-pack](https://gum.co/hws-book-pack) Note: if you [subscribe to my newsletter](https://gumroad.com/twostraws/) you get an instant $5 coupon to make the Hacking with Swift book cheaper. Good luck!
You are the chosen one!
Two other replies have already been posted here, and I agree with both of them. It's hard to judge your intent from this snippet of code, particularly as it doesn't do what you think it does. Please take the time to read the other two comments fully! Anyway, here's some code that does what I *think* you want. It's written for Swift 3.0, but I'm sure you can back port it if you want: func removeImageViews(array: inout [UIImageView?]?) { array?.forEach { $0?.removeFromSuperview() } array = nil } Call it like this: removeImageViews(array: &amp;foo) More broadly, what you seem to want isn't very sensible, but I think /u/fradelic covers that quite nicely already :) Remember: Swift is its own language; if you try to write it like Objective-C or C you'll just cause problems for yourself and others. In particular, the line `imgView?[i]? = nil` is really going to cause people to do a double take.
+1 for [Hacking with Swift](https://www.hackingwithswift.com/). (I'm biased; I wrote it!)
Thanks for the response! I edited my post to answer my intent as best I could, as others have asked what I'm trying to do outside of the function.
Or "sequence", for that matter. :P
So I'm still looking for some help if you're willing to help.
WOW, thank you SO MUCH for going into such depth and basically reading my mind in many regards!!! I really appreciate this "translation layer" you've provided, it's the kind of high level overview that really helps me form a mental bridge from the old world to this new world. I'll be sure to check out your site, THANKS AGAIN!
You are missing a lot of things you have to setup with Mantle as opposed to SwiftyJSON. I remember my first time using Mantle 6 months ago when I was very new to iOS and although I made it work within a day, it was one of the harder frameworks that I have used. Where as SwiftyJSON has little setup and works exactly like you want it to.
If only you'd transitioned to C#. Swift looks a LOT like C#, IMO. There is nothing wrong with writing hello world apps. Start there and then write something slightly more complex and then something slightly more complex still, and so on.
I really like Decodable: https://github.com/Anviking/Decodable I really like the error handling it does where it tells you exactly why something failed.
I just watched the first vid on YouTube. This is exactly what I'm looking for. Will buy this as soon as I get through the rest of BigNerd.
map() is a synchronous method, so there's no need to worry about retain when using it. Also, does this even compile? I would think that the dateZero usage in the map closure is wrong here. 
The important bit is not, that it is "synchronous" but that the `transform` closure of `map` is marked `@noescape`. That of course implies that the closure is not dispatched asynchronously. If the closure was just guaranteed to be synchronous (which is not possible in swift), a reference could still escape the closure.
Ah, true.
What are you trying to accomplish?
Trying to figure out an alternative way to do this forloop. For some reason whenever I do something within this forloop, i notice a small delay in my program. 
&gt;Take his programs and materials along with Apples Swift 3 documentation and rewrite everything in Swift 3. You will learn a lot that way. Great advice. This might actually make it more worthwhile than a Stanford course using Swift 3.
This is damn impressive. I envy those that can blend hardware and software to create something. Good work!
Maybe try using guard let instead of if let, guard lets you unwrap many optionals without having many layers http://stackoverflow.com/questions/30791488/swift-2-guard-keyword https://medium.com/the-traveled-ios-developers-guide/swift-guard-dcd725caef7e#.du1crbvsk
So cool man! Congratulations! I am currently a motion graphics professional, but aspiring to become a mechatronics engineer...this project of yours is like 100% up my alley. Awesome! How did you interface the Blender animation into the controller app...and is it something special about Blender that allowed you to do so? Or could one use a different app (for example I have loads of experience with Cinema 4D and would rather use that). Thanks!
The JSON structure is stored in the JSONKeyPathsByProperty method
Thanks for the reply! Yes, that is what I was hoping to do. But recoding all these drawing methods would suck, and if I could just use this code online somehow, it would make building the front end web stuff a lot simpler. Doing this stuff on your own is a great experience, but it certainly helps to have experts on the stuff to ask these weird questions. 
Exactly. The new dev would not know that by glacing at the code. Extra steps in knowledge transfer and maintenance. 
Browsers don't understand core graphics. So your goal would have to be to go from core graphics to something browsers do understand. A couple things browsers do understand is SVG and PDF. I wonder if there's any chance you can get your code to take the view you have produced and somehow or other 'translate' it to one of those (I'd think PDF was most likely; mentioned SVG as a long-shot alternative). If this is possible it represents the most straightforward 'quick fix' solution. If I were designing this from scratch, knowing that I'd have to have output for both an app as well as the web, I'd probably make some sort of intermediate representation which could then be translated to different physical representations when it needed to be rendered.
I'm sorry, I don't know where your problem is, nor what it is. Can you say exactly which method is causing the problem, and what the problem is: compiler error? runtime error? crash? etc. and what error message(s) you're getting. ta.
That looks really neat. How long did you spend on the editing of that video if you don't mine me asking? It's by far one of the best editing "look what I made" videos I've seen.
Thanks a bunch! I think you've got the right idea of what I'm talking about. To be extra clear; I want an app with x number of pages. On each one of those pages, I want to display a collection view full of photos. What I have written right now is a fully functional collection view, with multiple sections of photos I can scroll through. My goal is to separate out those sections into individual pages, I don't want the user to scroll, I want them to flip a page to get to the next section. Is there a way to do it within a collection view controller, or would I have to go through a page view controller and attach multiple child view controllers with collection views attached? Hope I'm making sense, I'm trying really hard haha, I'm new to iOS so I have a lot to learn. Thanks again for helping!
could you upload a snapshot of the collection view and such so i can get a better idea? 
If you used their Objective-C SDK, you'll know that it wasn't very easy to use in Swift, and their docs / etc weren't really useful in Swift. I think Facebook did the right thing by building a native Swift SDK so it has a great experience for Swift devs. 
K cool, thanks 
[Then](https://github.com/devxoul/Then) does this. It's been a highly requested language feature, so a future version of Swift might very well have this functionality built in!
He has a bunch of `!`s that he wants to get rid of.
git repo?
The thing is, that `if let` statement is just so I can actually have a value to a Boolean, `interacting`, I created within a function and it is only used in one part of the function. How would I structure the guard statement in this case?
…and I thought this was a poll. 
From personal experience I'd say you learn swift quickly by creating a project and googling your way through it. But, this does not mean you will become a good programmer. Odds are you'll learn to pickup good habits but it would be better to learn about becoming a better programmer from books like code complete. Best of luck!
It's like learning to cook. - If you ask the internet, "How do I make a meal?", you will get millions of answers. And googling will give you a million more. And at the end of it you will have so much contradictory information that your brain will swim in confusion. - If you follow one school of thought on cooking from beginning to end, you will have more confidence...and know how to cook a meal. You can always follow a different school of thought on cooking afterwards. Pick one complete path and follow it to the end. Then find another. It's much scarier to wander around and hope you end up where you want to be.
A lot in Python, and some HTML and CSS
Hi sohaeb! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/4sx9ni/do_weather_apps_with_fancy_animations_ie_moving/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Wow, what a nice piece of work. When I read your title I was thinking you did a CNC machine of some sort. From watch the video it is pretty clear you came real close as you already have many of the axises common to a CNC machine. The obvious question is this: do you have a web site?
Really impressive. Never ceases to amaze me how much the coding community is willing to share with each other. I'm currently doing an internship using Swift, and I spend all day on Stack Overflow and GitHub. It's a great community. Thanks for sharing this beautiful monstrosity with us!
Hey, awesome to hear you got this together! Glad I could help I what little way I could!
Ahh, man, voidref, you got me started! That skeleton project answered so many questions for me. I bet your name is still hiding away in some of the xcode files somewhere, even now... :)
howiem.net . Built a simple CNC mill years ago out of plywood. so this isn't my first mechanical violation of all that is good and proper. And I managed to get a proper old mill working, so I've some experience with steppers, G-code etc. but this is project ended up using very little of that. Thinking about it, the only bit of knowledge that really applies to both CNC and motion control worlds is this: use decent stepper drivers if you want to avoid problems with mid-band resonance. Ditch the TB6560s and use Leadshines or something better. There. :)
Cool - OK, I'll gather the bits together. Man, there are so many bits of s/ware running together to make this work... but hopefully there'll be some useful bits and pieces so others don't have to make all my mistakes over again :)
hell yeah man! I'll help clean up what I can! I'll follow you on github1
Load/setup your GIFs on a background thread. You can use this helper library: [duemonk/Async](https://github.com/duemunk/Async) Example: Async.background { print("This is run on the background queue") }.main { print("This is run on the main queue, after the previous block") } This is a shortcut for old-school way: dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), { print("This is run on the background queue") dispatch_async(dispatch_get_main_queue(), { print("This is run on the main queue, after the previous block") }) })
Hi, rendering gifs is quite an intensive process, in my experience the best results I've got is with this library https://github.com/Flipboard/FLAnimatedImage it handles gifs flawlessly and gives really good scrolling performance. For starters i suggest you switch switch SwiftyGif to FLAnimatedImage and see how it goes from there.
Thanks :D now i understand.
For the curious: This will not teach you how to make an app. This will not teach you swift. This will give you a very basic understanding of code and the logic decisions that go into writing code. 
Follow tutorials of things you want to make and if you haven't figured out what you want to make, add new things to the tutorial projects you've already created. There's a plethora of resources available on just about anything, read Apple documentation too etc. You almost don't have to spend ANY money if you know how to use Google, I've been able to get a ton of books for free just from knowing how to use my search engine (.pdf's will become your new friend). In my learning process, I have regrettably spent money on things I ended up not using. I have a Team Treehouse account I barely touch but get charged for every single month. I would not recommend any long term commitments as far as subscription courses unless you have the time/ aptitude to keep up with it consistently, of course those are my $0.02. It is up to you weigh what is worth spending your money on. **Learn to familiarize yourself with your code and what each individual line does.** I would highly recommend **Ray Wenderlich's iOS tutorials**. Practice some exercises on Playground and learn how to build things on Xcode at the same time. Do this everyday for 6-12 months. Create stuff from your own ideas, get frustrated, simulate your builds, rebuild things if you need to; use Google to fix your errors, Stack overflow is also an awesome resource. I would also recommend getting into the habit organizing your folders, nothing worse than trying to install a cocoapod and not being sure which folder you put your project in. The frustration aspect is part of the learning curve but it's also the thing that makes it extremely rewarding in the long term. 
https://www.raywenderlich.com/113674/ios-animation-tutorial-getting-started The good ones don't use Javascript.
&gt; Xcode I am not sure how well my 2009 Mac mini will do, even though I have 8gb ram and an SSD in it now. Shouldn't do terribly. Ram is the biggie for me. I have a 2012 MBP and the only time I ever have issues is when I have a bunch of programs open. My 8Gb of memory get used up and become pretty slow. The actual processor doesn't get used a whole lot. The only problems I could see you having are slower compile times and maybe some issues with the simulator running slow. Actual coding should be pretty smooth.
Check out this example I made [here](https://github.com/collinhundley/Swift-AI/tree/master/Examples#swift-ai-examples). You can train it to recognize handwriting or pretty much anything else. The neural net will do character *recognition*, but you'll have to do the character *detection* on your own.
Link?
Upvoted for spreading the word of Knuth, his nourishing principles and his boxed-set-sized classic book.
That's pretty cool looking, will definitely give it a try.
ohh, .gif. Never occurred to me. Yeah, this would make it really simple I guess. thanks
thanks for the link
Very nice illustrations and walk through. Perhaps contribute your content to the [Result](https://github.com/antitypical/Result) project?
You want to perform the setting of the label text in the Swiping function (speaking of which, function names should start with lower case). You are just adding a target to the gesture recognizer, but it already should have a target (assuming you added it via IB). The target is the swiping func. Calling addTarget is just saying "do this when the gesture recognizer fires" but since it's already targeting Swiping, you're basically adding a target whenever the recognizer gets fired. You could also just call the test func from Swiping.
Are you adding the recognizer somewhere? let gestureRecognizer = UITapGestureRecognizer(target: self.labelVar, action: #selector(test(_:))) self.view.addGestureRecognizer(gestureRecognizer) something like this?
Do I need to do that ? Doesn't "@IBAction fund swiping" do what you wrote in your comment ?
The beta is now open for anyone.
 Still didn't work though http://i.imgur.com/mM2JdM1.png
Make a public function on the rootViewController and then just call that and let rootViewController handle presenting?
Hi garnele007! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/4t1bmf/ive_just_launched_my_new_app_localization_updater/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
 guard let controller = navigationController else { return } //Throw guard let navDelegate = controller.delegate else { return } guard let container = container else { return } guard let navDelegateNavigationController = navDelegate.navigationController else { return } guard let interControllerForAnimController = navDelegateNavigationController(controller, animationControllerForOperation: .Pop, fromViewController: self, toViewController: container.childViewControllers[0]) else { return } guard let condition = (navDelegateNavigationController(controller, interactionControllerForAnimationController: interControllerForAnimController) as? InteractionController)?.interactionInProgress else { return } interacting = condition 
I would like to make a messenger of some sort, or at least a way to facilitate communication between devices outside of Multipeer Connectivity.
The sidebar.
 &gt;I'm 35 and I'm psyched about this. I've done some codeacademy but I spend my whole day at my computer and if I sit down at home I want to either play games or just do some quick surfing and go to bed. I can easily grab my iPad and go sit down somewhere and play/learn swift. I can see this as a lead in to a iOS scripting platform. I suspect that Apple already knows the appeal is pretty wide for Playgrounds. If scripting ever comes to iOS it will be via a derivative of this app. &gt;Only thing is if I do end up wanting to do some things in Xcode I am not sure how well my 2009 Mac mini will do, even though I have 8gb ram and an SSD in it now. It might be weak, the RAM is good but XCode can have a lot of things happening at once that can drag Down older processors. It all depends upon how type A you are. Me I sometimes wish that my 13", 1015 MBP was faster.. 
Nothing beat a book that explain clearly and Hacking with Swift or Pro Swift are recommendation. If you focus on web server in swift, http://vapor.university was launch a while ago.
Honestly, monads are just a really good design pattern. They aren't some inherently powerful tool. They just unify a lot of disjoint concepts into one clear, coherent interface. The idea of "monad" on its own isn't particularly important unless you're a mathematician versed in category theory. It often just comes down to "Hey I made these functions which do a cool thing! Oh wait, I can form a monad out of these. Cool! Now I can program with it using the same clean interface as all my other monads."
To do an unwind segue, don't you need to write a function in the view that you're unwinding to that take a UIStoryboardSegue argument? E.G. func prepareForUnwind(segue: UIStoryboardSegue) You should be able to call a function defined in your first view (that refreshes whatever you need to refresh) in this function here, e.g: if let destVC = segue.destinationViewController as? MyOriginalViewController{ destVC.refreshThoseViews() }